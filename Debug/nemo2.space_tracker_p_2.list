
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f978  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800fa38  0800fa38  0001fa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100f4  080100f4  000306c0  2**0
                  CONTENTS
  4 .ARM          00000008  080100f4  080100f4  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100fc  080100fc  000306c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080100fc  080100fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010104  08010104  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  08010108  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  200006c0  080107c8  000306c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  080107c8  00030d50  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d49  00000000  00000000  0003072b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033b1  00000000  00000000  00048474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0004b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001144  00000000  00000000  0004ce60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020872  00000000  00000000  0004dfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7e3  00000000  00000000  0006e816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cd3  00000000  00000000  00089ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006aa4  00000000  00000000  00152ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00159770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006c0 	.word	0x200006c0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800fa1c 	.word	0x0800fa1c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006c4 	.word	0x200006c4
 8000100:	0800fa1c 	.word	0x0800fa1c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0800fbc0 	.word	0x0800fbc0
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025ac:	f001 f80a 	bl	80035c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b0:	f000 f83a 	bl	8002628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025b4:	f000 facc 	bl	8002b50 <MX_GPIO_Init>
  MX_RTC_Init();
 80025b8:	f000 f88c 	bl	80026d4 <MX_RTC_Init>
  MX_TIM6_Init();
 80025bc:	f000 f96c 	bl	8002898 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c0:	f000 f92c 	bl	800281c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025c4:	f000 f9a6 	bl	8002914 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025c8:	f000 f9f2 	bl	80029b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025cc:	f000 fa3e 	bl	8002a4c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d0:	f000 fa8a 	bl	8002ae8 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  send_debug_logs ( hello ) ;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <main+0x74>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 fbbd 	bl	8002d58 <send_debug_logs>

  my_tim_init () ;
 80025de:	f000 fc75 	bl	8002ecc <my_tim_init>

  // my_gnss_verbose ( 15 ) ;

  if ( !is_system_initialized () )
 80025e2:	f000 fbe9 	bl	8002db8 <is_system_initialized>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001a      	movs	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	4053      	eors	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <main+0x70>
  {
	  my_gnss_sw_on () ;
 80025f4:	f000 fc2e 	bl	8002e54 <my_gnss_sw_on>
	  my_tim_start () ;
 80025f8:	f000 fc74 	bl	8002ee4 <my_tim_start>
	  //my_gnss_get_utc () ;
	  my_gnss_acq_coordinates ( &fix3d ) ;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <main+0x78>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f004 fc7a 	bl	8006ef8 <my_gnss_acq_coordinates>
	  my_tim_stop () ;
 8002604:	f000 fc7e 	bl	8002f04 <my_tim_stop>
	  //my_gnss_sw_off () ;
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <main+0x7c>)
 800260a:	0018      	movs	r0, r3
 800260c:	f004 fd7e 	bl	800710c <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <main+0x7c>)
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fba0 	bl	8002d58 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002618:	e7fe      	b.n	8002618 <main+0x70>
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	20000000 	.word	0x20000000
 8002620:	20000a20 	.word	0x20000a20
 8002624:	20000a08 	.word	0x20000a08

08002628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b095      	sub	sp, #84	; 0x54
 800262c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262e:	2414      	movs	r4, #20
 8002630:	193b      	adds	r3, r7, r4
 8002632:	0018      	movs	r0, r3
 8002634:	233c      	movs	r3, #60	; 0x3c
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f006 fc6d 	bl	8008f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	0018      	movs	r0, r3
 8002642:	2310      	movs	r3, #16
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f006 fc66 	bl	8008f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	0018      	movs	r0, r3
 8002652:	f001 fadf 	bl	8003c14 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002656:	f001 facf 	bl	8003bf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <SystemClock_Config+0xa8>)
 800265c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <SystemClock_Config+0xa8>)
 8002660:	2118      	movs	r1, #24
 8002662:	438a      	bics	r2, r1
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002666:	193b      	adds	r3, r7, r4
 8002668:	2206      	movs	r2, #6
 800266a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800266c:	193b      	adds	r3, r7, r4
 800266e:	2201      	movs	r2, #1
 8002670:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002672:	193b      	adds	r3, r7, r4
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800267a:	193b      	adds	r3, r7, r4
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2240      	movs	r2, #64	; 0x40
 8002684:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268c:	193b      	adds	r3, r7, r4
 800268e:	0018      	movs	r0, r3
 8002690:	f001 fb0c 	bl	8003cac <HAL_RCC_OscConfig>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002698:	f000 fc66 	bl	8002f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2207      	movs	r2, #7
 80026a0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2100      	movs	r1, #0
 80026b8:	0018      	movs	r0, r3
 80026ba:	f001 fe57 	bl	800436c <HAL_RCC_ClockConfig>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d001      	beq.n	80026c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026c2:	f000 fc51 	bl	8002f68 <Error_Handler>
  }
}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b015      	add	sp, #84	; 0x54
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	40021000 	.word	0x40021000

080026d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b090      	sub	sp, #64	; 0x40
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026da:	232c      	movs	r3, #44	; 0x2c
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	0018      	movs	r0, r3
 80026e0:	2314      	movs	r3, #20
 80026e2:	001a      	movs	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	f006 fc17 	bl	8008f18 <memset>
  RTC_DateTypeDef sDate = {0};
 80026ea:	2328      	movs	r3, #40	; 0x28
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026f2:	003b      	movs	r3, r7
 80026f4:	0018      	movs	r0, r3
 80026f6:	2328      	movs	r3, #40	; 0x28
 80026f8:	001a      	movs	r2, r3
 80026fa:	2100      	movs	r1, #0
 80026fc:	f006 fc0c 	bl	8008f18 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002700:	4b44      	ldr	r3, [pc, #272]	; (8002814 <MX_RTC_Init+0x140>)
 8002702:	4a45      	ldr	r2, [pc, #276]	; (8002818 <MX_RTC_Init+0x144>)
 8002704:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <MX_RTC_Init+0x140>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <MX_RTC_Init+0x140>)
 800270e:	227f      	movs	r2, #127	; 0x7f
 8002710:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002712:	4b40      	ldr	r3, [pc, #256]	; (8002814 <MX_RTC_Init+0x140>)
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002718:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <MX_RTC_Init+0x140>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <MX_RTC_Init+0x140>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002724:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <MX_RTC_Init+0x140>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <MX_RTC_Init+0x140>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	05d2      	lsls	r2, r2, #23
 8002730:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <MX_RTC_Init+0x140>)
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002738:	4b36      	ldr	r3, [pc, #216]	; (8002814 <MX_RTC_Init+0x140>)
 800273a:	0018      	movs	r0, r3
 800273c:	f002 f9fc 	bl	8004b38 <HAL_RTC_Init>
 8002740:	1e03      	subs	r3, r0, #0
 8002742:	d001      	beq.n	8002748 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002744:	f000 fc10 	bl	8002f68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	187b      	adds	r3, r7, r1
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800276e:	1879      	adds	r1, r7, r1
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <MX_RTC_Init+0x140>)
 8002772:	2201      	movs	r2, #1
 8002774:	0018      	movs	r0, r3
 8002776:	f002 fa81 	bl	8004c7c <HAL_RTC_SetTime>
 800277a:	1e03      	subs	r3, r0, #0
 800277c:	d001      	beq.n	8002782 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800277e:	f000 fbf3 	bl	8002f68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002782:	2128      	movs	r1, #40	; 0x28
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2206      	movs	r2, #6
 8002788:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2201      	movs	r2, #1
 800278e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2201      	movs	r2, #1
 8002794:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800279c:	1879      	adds	r1, r7, r1
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <MX_RTC_Init+0x140>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	0018      	movs	r0, r3
 80027a4:	f002 fb6e 	bl	8004e84 <HAL_RTC_SetDate>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d001      	beq.n	80027b0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80027ac:	f000 fbdc 	bl	8002f68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80027b0:	003b      	movs	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80027b6:	003b      	movs	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80027bc:	003b      	movs	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80027c2:	003b      	movs	r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027c8:	003b      	movs	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027ce:	003b      	movs	r3, r7
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027d4:	003b      	movs	r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027da:	003b      	movs	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027e0:	003b      	movs	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80027e6:	003b      	movs	r3, r7
 80027e8:	2220      	movs	r2, #32
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80027ee:	003b      	movs	r3, r7
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	0052      	lsls	r2, r2, #1
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80027f6:	0039      	movs	r1, r7
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_RTC_Init+0x140>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	0018      	movs	r0, r3
 80027fe:	f002 fc21 	bl	8005044 <HAL_RTC_SetAlarm_IT>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002806:	f000 fbaf 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	46bd      	mov	sp, r7
 800280e:	b010      	add	sp, #64	; 0x40
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	200006dc 	.word	0x200006dc
 8002818:	40002800 	.word	0x40002800

0800281c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <MX_SPI1_Init+0x74>)
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <MX_SPI1_Init+0x78>)
 8002824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <MX_SPI1_Init+0x74>)
 8002828:	2282      	movs	r2, #130	; 0x82
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <MX_SPI1_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <MX_SPI1_Init+0x74>)
 8002836:	22e0      	movs	r2, #224	; 0xe0
 8002838:	00d2      	lsls	r2, r2, #3
 800283a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <MX_SPI1_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002842:	4b13      	ldr	r3, [pc, #76]	; (8002890 <MX_SPI1_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <MX_SPI1_Init+0x74>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002850:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <MX_SPI1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <MX_SPI1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <MX_SPI1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <MX_SPI1_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <MX_SPI1_Init+0x74>)
 800286a:	2207      	movs	r2, #7
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <MX_SPI1_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <MX_SPI1_Init+0x74>)
 8002876:	2208      	movs	r2, #8
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <MX_SPI1_Init+0x74>)
 800287c:	0018      	movs	r0, r3
 800287e:	f002 fec9 	bl	8005614 <HAL_SPI_Init>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002886:	f000 fb6f 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000708 	.word	0x20000708
 8002894:	40013000 	.word	0x40013000

08002898 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	0018      	movs	r0, r3
 80028a2:	230c      	movs	r3, #12
 80028a4:	001a      	movs	r2, r3
 80028a6:	2100      	movs	r1, #0
 80028a8:	f006 fb36 	bl	8008f18 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ae:	4a16      	ldr	r2, [pc, #88]	; (8002908 <MX_TIM6_Init+0x70>)
 80028b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <MX_TIM6_Init+0x74>)
 80028b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <MX_TIM6_Init+0x78>)
 80028c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028cc:	0018      	movs	r0, r3
 80028ce:	f002 ff59 	bl	8005784 <HAL_TIM_Base_Init>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80028d6:	f000 fb47 	bl	8002f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_TIM6_Init+0x6c>)
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f003 f9f1 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80028f6:	f000 fb37 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	2000076c 	.word	0x2000076c
 8002908:	40001000 	.word	0x40001000
 800290c:	00003e7f 	.word	0x00003e7f
 8002910:	000003e7 	.word	0x000003e7

08002914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800291a:	4a24      	ldr	r2, [pc, #144]	; (80029ac <MX_USART1_UART_Init+0x98>)
 800291c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002920:	22e1      	movs	r2, #225	; 0xe1
 8002922:	0252      	lsls	r2, r2, #9
 8002924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800293a:	220c      	movs	r2, #12
 800293c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800295e:	0018      	movs	r0, r3
 8002960:	f003 fa46 	bl	8005df0 <HAL_UART_Init>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002968:	f000 fafe 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 800296e:	2100      	movs	r1, #0
 8002970:	0018      	movs	r0, r3
 8002972:	f004 f9e1 	bl	8006d38 <HAL_UARTEx_SetTxFifoThreshold>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800297a:	f000 faf5 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002980:	2100      	movs	r1, #0
 8002982:	0018      	movs	r0, r3
 8002984:	f004 fa18 	bl	8006db8 <HAL_UARTEx_SetRxFifoThreshold>
 8002988:	1e03      	subs	r3, r0, #0
 800298a:	d001      	beq.n	8002990 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800298c:	f000 faec 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <MX_USART1_UART_Init+0x94>)
 8002992:	0018      	movs	r0, r3
 8002994:	f004 f996 	bl	8006cc4 <HAL_UARTEx_DisableFifoMode>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800299c:	f000 fae4 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	200007b8 	.word	0x200007b8
 80029ac:	40013800 	.word	0x40013800

080029b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029b6:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <MX_USART2_UART_Init+0x98>)
 80029b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80029ba:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029bc:	22e1      	movs	r2, #225	; 0xe1
 80029be:	0292      	lsls	r2, r2, #10
 80029c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029d6:	220c      	movs	r2, #12
 80029d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 80029fa:	0018      	movs	r0, r3
 80029fc:	f003 f9f8 	bl	8005df0 <HAL_UART_Init>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d001      	beq.n	8002a08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a04:	f000 fab0 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f004 f993 	bl	8006d38 <HAL_UARTEx_SetTxFifoThreshold>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a16:	f000 faa7 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f004 f9ca 	bl	8006db8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a28:	f000 fa9e 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <MX_USART2_UART_Init+0x94>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f004 f948 	bl	8006cc4 <HAL_UARTEx_DisableFifoMode>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d001      	beq.n	8002a3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a38:	f000 fa96 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	2000084c 	.word	0x2000084c
 8002a48:	40004400 	.word	0x40004400

08002a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a50:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a52:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <MX_USART3_UART_Init+0x98>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a58:	2296      	movs	r2, #150	; 0x96
 8002a5a:	0192      	lsls	r2, r2, #6
 8002a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002a96:	0018      	movs	r0, r3
 8002a98:	f003 f9aa 	bl	8005df0 <HAL_UART_Init>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002aa0:	f000 fa62 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f004 f945 	bl	8006d38 <HAL_UARTEx_SetTxFifoThreshold>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ab2:	f000 fa59 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f004 f97c 	bl	8006db8 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac4:	f000 fa50 	bl	8002f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <MX_USART3_UART_Init+0x94>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f004 f8fa 	bl	8006cc4 <HAL_UARTEx_DisableFifoMode>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad4:	f000 fa48 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200008e0 	.word	0x200008e0
 8002ae4:	40004800 	.word	0x40004800

08002ae8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002aee:	4a17      	ldr	r2, [pc, #92]	; (8002b4c <MX_USART5_UART_Init+0x64>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002af4:	22e1      	movs	r2, #225	; 0xe1
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <MX_USART5_UART_Init+0x60>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f003 f95c 	bl	8005df0 <HAL_UART_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002b3c:	f000 fa14 	bl	8002f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	20000974 	.word	0x20000974
 8002b4c:	40005000 	.word	0x40005000

08002b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b08b      	sub	sp, #44	; 0x2c
 8002b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	2414      	movs	r4, #20
 8002b58:	193b      	adds	r3, r7, r4
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	2314      	movs	r3, #20
 8002b5e:	001a      	movs	r2, r3
 8002b60:	2100      	movs	r1, #0
 8002b62:	f006 f9d9 	bl	8008f18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6a:	4b75      	ldr	r3, [pc, #468]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b6c:	2104      	movs	r1, #4
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
 8002b72:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	4b6d      	ldr	r3, [pc, #436]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b96:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	4b69      	ldr	r3, [pc, #420]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bae:	4b64      	ldr	r3, [pc, #400]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bba:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <MX_GPIO_Init+0x1f0>)
 8002bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bc6:	23a0      	movs	r3, #160	; 0xa0
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2110      	movs	r1, #16
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fff4 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002bd4:	495b      	ldr	r1, [pc, #364]	; (8002d44 <MX_GPIO_Init+0x1f4>)
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 ffee 	bl	8003bbc <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002be0:	2380      	movs	r3, #128	; 0x80
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	4858      	ldr	r0, [pc, #352]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	0019      	movs	r1, r3
 8002bea:	f000 ffe7 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002bee:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2103      	movs	r1, #3
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 ffe1 	bl	8003bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2288      	movs	r2, #136	; 0x88
 8002c04:	0352      	lsls	r2, r2, #13
 8002c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	193a      	adds	r2, r7, r4
 8002c10:	23a0      	movs	r3, #160	; 0xa0
 8002c12:	05db      	lsls	r3, r3, #23
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 fe64 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002c1c:	193b      	adds	r3, r7, r4
 8002c1e:	2202      	movs	r2, #2
 8002c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	2200      	movs	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c2e:	193a      	adds	r2, r7, r4
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	0011      	movs	r1, r2
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fe54 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	2210      	movs	r2, #16
 8002c40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2201      	movs	r2, #1
 8002c46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	193b      	adds	r3, r7, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002c54:	193a      	adds	r2, r7, r4
 8002c56:	23a0      	movs	r3, #160	; 0xa0
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	0011      	movs	r1, r2
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fe41 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	4a3a      	ldr	r2, [pc, #232]	; (8002d50 <MX_GPIO_Init+0x200>)
 8002c66:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f000 fe2f 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002c86:	0021      	movs	r1, r4
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	2288      	movs	r2, #136	; 0x88
 8002c92:	0352      	lsls	r2, r2, #13
 8002c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	000c      	movs	r4, r1
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	f000 fe1d 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002caa:	0021      	movs	r1, r4
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0192      	lsls	r2, r2, #6
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002cb4:	000c      	movs	r4, r1
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	2211      	movs	r2, #17
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002ccc:	0019      	movs	r1, r3
 8002cce:	0010      	movs	r0, r2
 8002cd0:	f000 fe08 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002cd4:	193b      	adds	r3, r7, r4
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <MX_GPIO_Init+0x204>)
 8002cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <MX_GPIO_Init+0x1f8>)
 8002cea:	0019      	movs	r1, r3
 8002cec:	0010      	movs	r0, r2
 8002cee:	f000 fdf9 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8002cf2:	193b      	adds	r3, r7, r4
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f000 fde7 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8002d16:	0021      	movs	r1, r4
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <MX_GPIO_Init+0x1fc>)
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f000 fdd7 	bl	80038e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b00b      	add	sp, #44	; 0x2c
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	40021000 	.word	0x40021000
 8002d44:	0000a403 	.word	0x0000a403
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	50000c00 	.word	0x50000c00
 8002d50:	00008c03 	.word	0x00008c03
 8002d54:	00004040 	.word	0x00004040

08002d58 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7fd f9ce 	bl	8000104 <strlen>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2bfa      	cmp	r3, #250	; 0xfa
 8002d70:	d908      	bls.n	8002d84 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8002d72:	23fa      	movs	r3, #250	; 0xfa
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	490d      	ldr	r1, [pc, #52]	; (8002dac <send_debug_logs+0x54>)
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <send_debug_logs+0x58>)
 8002d7a:	222a      	movs	r2, #42	; 0x2a
 8002d7c:	f003 f88e 	bl	8005e9c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8002d80:	23fa      	movs	r3, #250	; 0xfa
 8002d82:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	23fa      	movs	r3, #250	; 0xfa
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <send_debug_logs+0x58>)
 8002d90:	f003 f884 	bl	8005e9c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002d94:	23fa      	movs	r3, #250	; 0xfa
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <send_debug_logs+0x5c>)
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <send_debug_logs+0x58>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f003 f87d 	bl	8005e9c <HAL_UART_Transmit>
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	0800fa60 	.word	0x0800fa60
 8002db0:	2000084c 	.word	0x2000084c
 8002db4:	0800fa8c 	.word	0x0800fa8c

08002db8 <is_system_initialized>:
// System functions
bool is_system_initialized ( void )
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
	// Nie próbuj robić nic z Astronode, bo nie wiesz czy nie trzeba go zainicjować restartem. Ogranicz się do samego systemu.
	uint16_t yyyy = my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002dbe:	1dbc      	adds	r4, r7, #6
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <is_system_initialized+0x34>)
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f004 f9a2 	bl	800710c <my_rtc_get_dt_s>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	8023      	strh	r3, [r4, #0]
	send_debug_logs ( rtc_dt_s ) ;
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <is_system_initialized+0x34>)
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ffc2 	bl	8002d58 <send_debug_logs>
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
 8002dd4:	1dbb      	adds	r3, r7, #6
 8002dd6:	8819      	ldrh	r1, [r3, #0]
 8002dd8:	23fd      	movs	r3, #253	; 0xfd
 8002dda:	00da      	lsls	r2, r3, #3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	4291      	cmp	r1, r2
 8002de0:	415b      	adcs	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b003      	add	sp, #12
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	20000a08 	.word	0x20000a08

08002df0 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	0002      	movs	r2, r0
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8002dfc:	1dfb      	adds	r3, r7, #7
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10e      	bne.n	8002e22 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4811      	ldr	r0, [pc, #68]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	f000 fed5 	bl	8003bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	480e      	ldr	r0, [pc, #56]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	f000 fece 	bl	8003bbc <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8002e20:	e011      	b.n	8002e46 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d10d      	bne.n	8002e46 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4808      	ldr	r0, [pc, #32]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	0019      	movs	r1, r3
 8002e34:	f000 fec2 	bl	8003bbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <my_ant_sw_pos+0x60>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	0019      	movs	r1, r3
 8002e42:	f000 febb 	bl	8003bbc <HAL_GPIO_WritePin>
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	50000400 	.word	0x50000400

08002e54 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7ff ffc9 	bl	8002df0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <my_gnss_sw_on+0x30>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	0019      	movs	r1, r3
 8002e68:	f000 fea8 	bl	8003bbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8002e6c:	2380      	movs	r3, #128	; 0x80
 8002e6e:	019b      	lsls	r3, r3, #6
 8002e70:	4804      	ldr	r0, [pc, #16]	; (8002e84 <my_gnss_sw_on+0x30>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	0019      	movs	r1, r3
 8002e76:	f000 fea1 	bl	8003bbc <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 8002e7a:	f7ff fe35 	bl	8002ae8 <MX_USART5_UART_Init>
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	50000400 	.word	0x50000400

08002e88 <my_gnss_receive_byte>:
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
	HAL_UART_DeInit ( &HUART_GNSS ) ;

}
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	000a      	movs	r2, r1
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8002e96:	23fa      	movs	r3, #250	; 0xfa
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <my_gnss_receive_byte+0x3c>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f003 f8a0 	bl	8005fe4 <HAL_UART_Receive>
	if ( verbose )
 8002ea4:	1cfb      	adds	r3, r7, #3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d006      	beq.n	8002eba <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8002eac:	23fa      	movs	r3, #250	; 0xfa
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <my_gnss_receive_byte+0x40>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f002 fff1 	bl	8005e9c <HAL_UART_Transmit>
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000974 	.word	0x20000974
 8002ec8:	2000084c 	.word	0x2000084c

08002ecc <my_tim_init>:
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
}

// TIM operations
void my_tim_init ()
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <my_tim_init+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4252      	negs	r2, r2
 8002ed8:	611a      	str	r2, [r3, #16]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	2000076c 	.word	0x2000076c

08002ee4 <my_tim_start>:

void my_tim_start ()
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <my_tim_start+0x18>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <my_tim_start+0x1c>)
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f002 fc9f 	bl	8005834 <HAL_TIM_Base_Start_IT>
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000a40 	.word	0x20000a40
 8002f00:	2000076c 	.word	0x2000076c

08002f04 <my_tim_stop>:

void my_tim_stop ()
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <my_tim_stop+0x14>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f002 fcf4 	bl	80058f8 <HAL_TIM_Base_Stop_IT>
}
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	2000076c 	.word	0x2000076c

08002f1c <HAL_TIM_PeriodElapsedCallback>:
// *** CALBACKS

// TIM Callback

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d111      	bne.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f38:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	2396      	movs	r3, #150	; 0x96
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d905      	bls.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "main.c,HAL_TIM_PeriodElapsedCallback,HAL_NVIC_SystemReset" ) ;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff ff05 	bl	8002d58 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8002f4e:	f000 fcb8 	bl	80038c2 <HAL_NVIC_SystemReset>
		}
	}
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	40001000 	.word	0x40001000
 8002f60:	20000a40 	.word	0x20000a40
 8002f64:	0800fabc 	.word	0x0800fabc

08002f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f6c:	b672      	cpsid	i
}
 8002f6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <Error_Handler+0x8>
	...

08002f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0549      	lsls	r1, r1, #21
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	055b      	lsls	r3, r3, #21
 8002fa8:	4013      	ands	r3, r2
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fb8c 	bl	80036d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b097      	sub	sp, #92	; 0x5c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fcc:	240c      	movs	r4, #12
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	234c      	movs	r3, #76	; 0x4c
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f005 ff9e 	bl	8008f18 <memset>
  if(hrtc->Instance==RTC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_RTC_MspInit+0x84>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d12c      	bne.n	8003040 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0292      	lsls	r2, r2, #10
 8002fec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	0052      	lsls	r2, r2, #1
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fb61 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	1e03      	subs	r3, r0, #0
 8003000:	d001      	beq.n	8003006 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003002:	f7ff ffb1 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RTC_MspInit+0x88>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0209      	lsls	r1, r1, #8
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RTC_MspInit+0x88>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	00c9      	lsls	r1, r1, #3
 800301e:	430a      	orrs	r2, r1
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RTC_MspInit+0x88>)
 8003024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4013      	ands	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2103      	movs	r1, #3
 8003034:	2002      	movs	r0, #2
 8003036:	f000 fc1f 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800303a:	2002      	movs	r0, #2
 800303c:	f000 fc31 	bl	80038a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b017      	add	sp, #92	; 0x5c
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	40002800 	.word	0x40002800
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08b      	sub	sp, #44	; 0x2c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	2414      	movs	r4, #20
 800305a:	193b      	adds	r3, r7, r4
 800305c:	0018      	movs	r0, r3
 800305e:	2314      	movs	r3, #20
 8003060:	001a      	movs	r2, r3
 8003062:	2100      	movs	r1, #0
 8003064:	f005 ff58 	bl	8008f18 <memset>
  if(hspi->Instance==SPI1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_SPI_MspInit+0x8c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d130      	bne.n	80030d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	0149      	lsls	r1, r1, #5
 800307c:	430a      	orrs	r2, r1
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
 8003080:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 8003094:	2101      	movs	r1, #1
 8003096:	430a      	orrs	r2, r1
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_SPI_MspInit+0x90>)
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80030a6:	0021      	movs	r1, r4
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	22e0      	movs	r2, #224	; 0xe0
 80030ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2202      	movs	r2, #2
 80030b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c6:	187a      	adds	r2, r7, r1
 80030c8:	23a0      	movs	r3, #160	; 0xa0
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fc08 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b00b      	add	sp, #44	; 0x2c
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	40013000 	.word	0x40013000
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_TIM_Base_MspInit+0x44>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d113      	bne.n	800311e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 80030fc:	2110      	movs	r1, #16
 80030fe:	430a      	orrs	r2, r1
 8003100:	63da      	str	r2, [r3, #60]	; 0x3c
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_Base_MspInit+0x48>)
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2210      	movs	r2, #16
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2102      	movs	r1, #2
 8003112:	2011      	movs	r0, #17
 8003114:	f000 fbb0 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003118:	2011      	movs	r0, #17
 800311a:	f000 fbc2 	bl	80038a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40001000 	.word	0x40001000
 800312c:	40021000 	.word	0x40021000

08003130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b0a3      	sub	sp, #140	; 0x8c
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003138:	2374      	movs	r3, #116	; 0x74
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	0018      	movs	r0, r3
 800313e:	2314      	movs	r3, #20
 8003140:	001a      	movs	r2, r3
 8003142:	2100      	movs	r1, #0
 8003144:	f005 fee8 	bl	8008f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003148:	2428      	movs	r4, #40	; 0x28
 800314a:	193b      	adds	r3, r7, r4
 800314c:	0018      	movs	r0, r3
 800314e:	234c      	movs	r3, #76	; 0x4c
 8003150:	001a      	movs	r2, r3
 8003152:	2100      	movs	r1, #0
 8003154:	f005 fee0 	bl	8008f18 <memset>
  if(huart->Instance==USART1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a84      	ldr	r2, [pc, #528]	; (8003370 <HAL_UART_MspInit+0x240>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d140      	bne.n	80031e4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003168:	193b      	adds	r3, r7, r4
 800316a:	2200      	movs	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800316e:	193b      	adds	r3, r7, r4
 8003170:	0018      	movs	r0, r3
 8003172:	f001 faa5 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800317a:	f7ff fef5 	bl	8002f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	01c9      	lsls	r1, r1, #7
 8003188:	430a      	orrs	r2, r1
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
 800318c:	4b79      	ldr	r3, [pc, #484]	; (8003374 <HAL_UART_MspInit+0x244>)
 800318e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	4013      	ands	r3, r2
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b76      	ldr	r3, [pc, #472]	; (8003374 <HAL_UART_MspInit+0x244>)
 800319c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319e:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_UART_MspInit+0x244>)
 80031a0:	2101      	movs	r1, #1
 80031a2:	430a      	orrs	r2, r1
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34
 80031a6:	4b73      	ldr	r3, [pc, #460]	; (8003374 <HAL_UART_MspInit+0x244>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	2201      	movs	r2, #1
 80031ac:	4013      	ands	r3, r2
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80031b2:	2174      	movs	r1, #116	; 0x74
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	22c0      	movs	r2, #192	; 0xc0
 80031b8:	00d2      	lsls	r2, r2, #3
 80031ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	2202      	movs	r2, #2
 80031c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	187b      	adds	r3, r7, r1
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	2201      	movs	r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d4:	187a      	adds	r2, r7, r1
 80031d6:	23a0      	movs	r3, #160	; 0xa0
 80031d8:	05db      	lsls	r3, r3, #23
 80031da:	0011      	movs	r1, r2
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 fb81 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80031e2:	e0c0      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a63      	ldr	r2, [pc, #396]	; (8003378 <HAL_UART_MspInit+0x248>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d140      	bne.n	8003270 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ee:	2128      	movs	r1, #40	; 0x28
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2202      	movs	r2, #2
 80031f4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 fa5e 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003208:	f7ff feae 	bl	8002f68 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800320c:	4b59      	ldr	r3, [pc, #356]	; (8003374 <HAL_UART_MspInit+0x244>)
 800320e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003210:	4b58      	ldr	r3, [pc, #352]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0289      	lsls	r1, r1, #10
 8003216:	430a      	orrs	r2, r1
 8003218:	63da      	str	r2, [r3, #60]	; 0x3c
 800321a:	4b56      	ldr	r3, [pc, #344]	; (8003374 <HAL_UART_MspInit+0x244>)
 800321c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	029b      	lsls	r3, r3, #10
 8003222:	4013      	ands	r3, r2
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003228:	4b52      	ldr	r3, [pc, #328]	; (8003374 <HAL_UART_MspInit+0x244>)
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	4b51      	ldr	r3, [pc, #324]	; (8003374 <HAL_UART_MspInit+0x244>)
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
 8003234:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003240:	2174      	movs	r1, #116	; 0x74
 8003242:	187b      	adds	r3, r7, r1
 8003244:	220c      	movs	r2, #12
 8003246:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2202      	movs	r2, #2
 800324c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	187b      	adds	r3, r7, r1
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800325a:	187b      	adds	r3, r7, r1
 800325c:	2201      	movs	r2, #1
 800325e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	187a      	adds	r2, r7, r1
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f000 fb3b 	bl	80038e4 <HAL_GPIO_Init>
}
 800326e:	e07a      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a41      	ldr	r2, [pc, #260]	; (800337c <HAL_UART_MspInit+0x24c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d140      	bne.n	80032fc <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800327a:	2128      	movs	r1, #40	; 0x28
 800327c:	187b      	adds	r3, r7, r1
 800327e:	2204      	movs	r2, #4
 8003280:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003288:	187b      	adds	r3, r7, r1
 800328a:	0018      	movs	r0, r3
 800328c:	f001 fa18 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003294:	f7ff fe68 	bl	8002f68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003298:	4b36      	ldr	r3, [pc, #216]	; (8003374 <HAL_UART_MspInit+0x244>)
 800329a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329c:	4b35      	ldr	r3, [pc, #212]	; (8003374 <HAL_UART_MspInit+0x244>)
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	02c9      	lsls	r1, r1, #11
 80032a2:	430a      	orrs	r2, r1
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	02db      	lsls	r3, r3, #11
 80032ae:	4013      	ands	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b4:	4b2f      	ldr	r3, [pc, #188]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032ba:	2102      	movs	r1, #2
 80032bc:	430a      	orrs	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
 80032c0:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <HAL_UART_MspInit+0x244>)
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80032cc:	2174      	movs	r1, #116	; 0x74
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	22c0      	movs	r2, #192	; 0xc0
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	2202      	movs	r2, #2
 80032da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2204      	movs	r2, #4
 80032ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	187b      	adds	r3, r7, r1
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_UART_MspInit+0x250>)
 80032f2:	0019      	movs	r1, r3
 80032f4:	0010      	movs	r0, r2
 80032f6:	f000 faf5 	bl	80038e4 <HAL_GPIO_Init>
}
 80032fa:	e034      	b.n	8003366 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_UART_MspInit+0x254>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d12f      	bne.n	8003366 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_UART_MspInit+0x244>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0049      	lsls	r1, r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003328:	2102      	movs	r1, #2
 800332a:	430a      	orrs	r2, r1
 800332c:	635a      	str	r2, [r3, #52]	; 0x34
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_UART_MspInit+0x244>)
 8003330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003332:	2202      	movs	r2, #2
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800333a:	2174      	movs	r1, #116	; 0x74
 800333c:	187b      	adds	r3, r7, r1
 800333e:	2218      	movs	r2, #24
 8003340:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	187b      	adds	r3, r7, r1
 8003344:	2202      	movs	r2, #2
 8003346:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	187b      	adds	r3, r7, r1
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334e:	187b      	adds	r3, r7, r1
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003354:	187b      	adds	r3, r7, r1
 8003356:	2203      	movs	r2, #3
 8003358:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	187b      	adds	r3, r7, r1
 800335c:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_UART_MspInit+0x250>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f000 fabf 	bl	80038e4 <HAL_GPIO_Init>
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b023      	add	sp, #140	; 0x8c
 800336c:	bd90      	pop	{r4, r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40004400 	.word	0x40004400
 800337c:	40004800 	.word	0x40004800
 8003380:	50000400 	.word	0x50000400
 8003384:	40005000 	.word	0x40005000

08003388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800338c:	e7fe      	b.n	800338c <NMI_Handler+0x4>

0800338e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler+0x4>

08003394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 f974 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <RTC_TAMP_IRQHandler+0x14>)
 80033be:	0018      	movs	r0, r3
 80033c0:	f001 ff80 	bl	80052c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	200006dc 	.word	0x200006dc

080033d0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f002 fabc 	bl	8005954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	2000076c 	.word	0x2000076c

080033e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  return 1;
 80033ec:	2301      	movs	r3, #1
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_kill>:

int _kill(int pid, int sig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033fe:	f005 fe37 	bl	8009070 <__errno>
 8003402:	0003      	movs	r3, r0
 8003404:	2216      	movs	r2, #22
 8003406:	601a      	str	r2, [r3, #0]
  return -1;
 8003408:	2301      	movs	r3, #1
 800340a:	425b      	negs	r3, r3
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <_exit>:

void _exit (int status)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800341c:	2301      	movs	r3, #1
 800341e:	425a      	negs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0011      	movs	r1, r2
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff ffe5 	bl	80033f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800342a:	e7fe      	b.n	800342a <_exit+0x16>

0800342c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	e00a      	b.n	8003454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800343e:	e000      	b.n	8003442 <_read+0x16>
 8003440:	bf00      	nop
 8003442:	0001      	movs	r1, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	60ba      	str	r2, [r7, #8]
 800344a:	b2ca      	uxtb	r2, r1
 800344c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	dbf0      	blt.n	800343e <_read+0x12>
  }

  return len;
 800345c:	687b      	ldr	r3, [r7, #4]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b006      	add	sp, #24
 8003464:	bd80      	pop	{r7, pc}

08003466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	e009      	b.n	800348c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	60ba      	str	r2, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	0018      	movs	r0, r3
 8003482:	e000      	b.n	8003486 <_write+0x20>
 8003484:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf1      	blt.n	8003478 <_write+0x12>
  }
  return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b006      	add	sp, #24
 800349c:	bd80      	pop	{r7, pc}

0800349e <_close>:

int _close(int file)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034a6:	2301      	movs	r3, #1
 80034a8:	425b      	negs	r3, r3
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2280      	movs	r2, #128	; 0x80
 80034c0:	0192      	lsls	r2, r2, #6
 80034c2:	605a      	str	r2, [r3, #4]
  return 0;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	0018      	movs	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}

080034ce <_isatty>:

int _isatty(int file)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b002      	add	sp, #8
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	; (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	18d3      	adds	r3, r2, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f005 fda2 	bl	8009070 <__errno>
 800352c:	0003      	movs	r3, r0
 800352e:	220c      	movs	r2, #12
 8003530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003532:	2301      	movs	r3, #1
 8003534:	425b      	negs	r3, r3
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	; (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	18d2      	adds	r2, r2, r3
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <_sbrk+0x64>)
 8003548:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b006      	add	sp, #24
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20024000 	.word	0x20024000
 8003558:	00000400 	.word	0x00000400
 800355c:	20000a38 	.word	0x20000a38
 8003560:	20000d50 	.word	0x20000d50

08003564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003574:	f7ff fff6 	bl	8003564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <LoopForever+0x6>)
  ldr r1, =_edata
 800357a:	490d      	ldr	r1, [pc, #52]	; (80035b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <LoopForever+0xe>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003580:	e002      	b.n	8003588 <LoopCopyDataInit>

08003582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003586:	3304      	adds	r3, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800358c:	d3f9      	bcc.n	8003582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003590:	4c0a      	ldr	r4, [pc, #40]	; (80035bc <LoopForever+0x16>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003594:	e001      	b.n	800359a <LoopFillZerobss>

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003598:	3204      	adds	r2, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800359e:	f005 fd6d 	bl	800907c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80035a2:	f7ff f801 	bl	80025a8 <main>

080035a6 <LoopForever>:

LoopForever:
  b LoopForever
 80035a6:	e7fe      	b.n	80035a6 <LoopForever>
  ldr   r0, =_estack
 80035a8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b0:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80035b4:	08010108 	.word	0x08010108
  ldr r2, =_sbss
 80035b8:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80035bc:	20000d50 	.word	0x20000d50

080035c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c0:	e7fe      	b.n	80035c0 <ADC1_COMP_IRQHandler>
	...

080035c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_Init+0x3c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_Init+0x3c>)
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	0049      	lsls	r1, r1, #1
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035de:	2003      	movs	r0, #3
 80035e0:	f000 f810 	bl	8003604 <HAL_InitTick>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035e8:	1dfb      	adds	r3, r7, #7
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e001      	b.n	80035f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80035f0:	f7ff fcc0 	bl	8002f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035f4:	1dfb      	adds	r3, r7, #7
 80035f6:	781b      	ldrb	r3, [r3, #0]
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40022000 	.word	0x40022000

08003604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800360c:	230f      	movs	r3, #15
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_InitTick+0x88>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02b      	beq.n	8003674 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_InitTick+0x8c>)
 800361e:	681c      	ldr	r4, [r3, #0]
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <HAL_InitTick+0x88>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	0019      	movs	r1, r3
 8003626:	23fa      	movs	r3, #250	; 0xfa
 8003628:	0098      	lsls	r0, r3, #2
 800362a:	f7fc fd87 	bl	800013c <__udivsi3>
 800362e:	0003      	movs	r3, r0
 8003630:	0019      	movs	r1, r3
 8003632:	0020      	movs	r0, r4
 8003634:	f7fc fd82 	bl	800013c <__udivsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f945 	bl	80038ca <HAL_SYSTICK_Config>
 8003640:	1e03      	subs	r3, r0, #0
 8003642:	d112      	bne.n	800366a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d80a      	bhi.n	8003660 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	2301      	movs	r3, #1
 800364e:	425b      	negs	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	0018      	movs	r0, r3
 8003654:	f000 f910 	bl	8003878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003658:	4b0e      	ldr	r3, [pc, #56]	; (8003694 <HAL_InitTick+0x90>)
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00d      	b.n	800367c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003660:	230f      	movs	r3, #15
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e008      	b.n	800367c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800366a:	230f      	movs	r3, #15
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e003      	b.n	800367c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800367c:	230f      	movs	r3, #15
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b005      	add	sp, #20
 8003688:	bd90      	pop	{r4, r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	2000000c 	.word	0x2000000c
 8003690:	20000004 	.word	0x20000004
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_IncTick+0x1c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	001a      	movs	r2, r3
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_IncTick+0x20>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	18d2      	adds	r2, r2, r3
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_IncTick+0x20>)
 80036aa:	601a      	str	r2, [r3, #0]
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	20000a3c 	.word	0x20000a3c

080036bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  return uwTick;
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_GetTick+0x10>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000a3c 	.word	0x20000a3c

080036d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40010000 	.word	0x40010000
 80036f8:	fffff9ff 	.word	0xfffff9ff

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	0002      	movs	r2, r0
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b7f      	cmp	r3, #127	; 0x7f
 800370e:	d809      	bhi.n	8003724 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	001a      	movs	r2, r3
 8003716:	231f      	movs	r3, #31
 8003718:	401a      	ands	r2, r3
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <__NVIC_EnableIRQ+0x30>)
 800371c:	2101      	movs	r1, #1
 800371e:	4091      	lsls	r1, r2
 8003720:	000a      	movs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	0002      	movs	r2, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b7f      	cmp	r3, #127	; 0x7f
 8003744:	d828      	bhi.n	8003798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003746:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <__NVIC_SetPriority+0xd4>)
 8003748:	1dfb      	adds	r3, r7, #7
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b25b      	sxtb	r3, r3
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	33c0      	adds	r3, #192	; 0xc0
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	589b      	ldr	r3, [r3, r2]
 8003756:	1dfa      	adds	r2, r7, #7
 8003758:	7812      	ldrb	r2, [r2, #0]
 800375a:	0011      	movs	r1, r2
 800375c:	2203      	movs	r2, #3
 800375e:	400a      	ands	r2, r1
 8003760:	00d2      	lsls	r2, r2, #3
 8003762:	21ff      	movs	r1, #255	; 0xff
 8003764:	4091      	lsls	r1, r2
 8003766:	000a      	movs	r2, r1
 8003768:	43d2      	mvns	r2, r2
 800376a:	401a      	ands	r2, r3
 800376c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	019b      	lsls	r3, r3, #6
 8003772:	22ff      	movs	r2, #255	; 0xff
 8003774:	401a      	ands	r2, r3
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	0018      	movs	r0, r3
 800377c:	2303      	movs	r3, #3
 800377e:	4003      	ands	r3, r0
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003784:	481f      	ldr	r0, [pc, #124]	; (8003804 <__NVIC_SetPriority+0xd4>)
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	b25b      	sxtb	r3, r3
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	430a      	orrs	r2, r1
 8003790:	33c0      	adds	r3, #192	; 0xc0
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003796:	e031      	b.n	80037fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003798:	4a1b      	ldr	r2, [pc, #108]	; (8003808 <__NVIC_SetPriority+0xd8>)
 800379a:	1dfb      	adds	r3, r7, #7
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	0019      	movs	r1, r3
 80037a0:	230f      	movs	r3, #15
 80037a2:	400b      	ands	r3, r1
 80037a4:	3b08      	subs	r3, #8
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3306      	adds	r3, #6
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	18d3      	adds	r3, r2, r3
 80037ae:	3304      	adds	r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1dfa      	adds	r2, r7, #7
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	0011      	movs	r1, r2
 80037b8:	2203      	movs	r2, #3
 80037ba:	400a      	ands	r2, r1
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	21ff      	movs	r1, #255	; 0xff
 80037c0:	4091      	lsls	r1, r2
 80037c2:	000a      	movs	r2, r1
 80037c4:	43d2      	mvns	r2, r2
 80037c6:	401a      	ands	r2, r3
 80037c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	019b      	lsls	r3, r3, #6
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	401a      	ands	r2, r3
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	2303      	movs	r3, #3
 80037da:	4003      	ands	r3, r0
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <__NVIC_SetPriority+0xd8>)
 80037e2:	1dfb      	adds	r3, r7, #7
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	001c      	movs	r4, r3
 80037e8:	230f      	movs	r3, #15
 80037ea:	4023      	ands	r3, r4
 80037ec:	3b08      	subs	r3, #8
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	430a      	orrs	r2, r1
 80037f2:	3306      	adds	r3, #6
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	18c3      	adds	r3, r0, r3
 80037f8:	3304      	adds	r3, #4
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b003      	add	sp, #12
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003810:	f3bf 8f4f 	dsb	sy
}
 8003814:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <__NVIC_SystemReset+0x1c>)
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SystemReset+0x20>)
 800381a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800381c:	f3bf 8f4f 	dsb	sy
}
 8003820:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	e7fd      	b.n	8003822 <__NVIC_SystemReset+0x16>
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	e000ed00 	.word	0xe000ed00
 800382c:	05fa0004 	.word	0x05fa0004

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1e5a      	subs	r2, r3, #1
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	045b      	lsls	r3, r3, #17
 8003840:	429a      	cmp	r2, r3
 8003842:	d301      	bcc.n	8003848 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003844:	2301      	movs	r3, #1
 8003846:	e010      	b.n	800386a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <SysTick_Config+0x44>)
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	3a01      	subs	r2, #1
 800384e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003850:	2301      	movs	r3, #1
 8003852:	425b      	negs	r3, r3
 8003854:	2103      	movs	r1, #3
 8003856:	0018      	movs	r0, r3
 8003858:	f7ff ff6a 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <SysTick_Config+0x44>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003862:	4b04      	ldr	r3, [pc, #16]	; (8003874 <SysTick_Config+0x44>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	210f      	movs	r1, #15
 8003884:	187b      	adds	r3, r7, r1
 8003886:	1c02      	adds	r2, r0, #0
 8003888:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	187b      	adds	r3, r7, r1
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	b25b      	sxtb	r3, r3
 8003892:	0011      	movs	r1, r2
 8003894:	0018      	movs	r0, r3
 8003896:	f7ff ff4b 	bl	8003730 <__NVIC_SetPriority>
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	0002      	movs	r2, r0
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25b      	sxtb	r3, r3
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ff21 	bl	80036fc <__NVIC_EnableIRQ>
}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80038c6:	f7ff ffa1 	bl	800380c <__NVIC_SystemReset>

080038ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff ffab 	bl	8003830 <SysTick_Config>
 80038da:	0003      	movs	r3, r0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f2:	e14d      	b.n	8003b90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2101      	movs	r1, #1
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4091      	lsls	r1, r2
 80038fe:	000a      	movs	r2, r1
 8003900:	4013      	ands	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d100      	bne.n	800390c <HAL_GPIO_Init+0x28>
 800390a:	e13e      	b.n	8003b8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2203      	movs	r2, #3
 8003912:	4013      	ands	r3, r2
 8003914:	2b01      	cmp	r3, #1
 8003916:	d005      	beq.n	8003924 <HAL_GPIO_Init+0x40>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2203      	movs	r2, #3
 800391e:	4013      	ands	r3, r2
 8003920:	2b02      	cmp	r3, #2
 8003922:	d130      	bne.n	8003986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2203      	movs	r2, #3
 8003930:	409a      	lsls	r2, r3
 8003932:	0013      	movs	r3, r2
 8003934:	43da      	mvns	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68da      	ldr	r2, [r3, #12]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	0013      	movs	r3, r2
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800395a:	2201      	movs	r2, #1
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	43da      	mvns	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	2201      	movs	r2, #1
 8003972:	401a      	ands	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2203      	movs	r2, #3
 800398c:	4013      	ands	r3, r2
 800398e:	2b03      	cmp	r3, #3
 8003990:	d017      	beq.n	80039c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	409a      	lsls	r2, r3
 80039a0:	0013      	movs	r3, r2
 80039a2:	43da      	mvns	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2203      	movs	r2, #3
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d123      	bne.n	8003a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	58d3      	ldr	r3, [r2, r3]
 80039da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2207      	movs	r2, #7
 80039e0:	4013      	ands	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	43da      	mvns	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2107      	movs	r1, #7
 80039fa:	400b      	ands	r3, r1
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	409a      	lsls	r2, r3
 8003a00:	0013      	movs	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3208      	adds	r2, #8
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	43da      	mvns	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2203      	movs	r2, #3
 8003a34:	401a      	ands	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	23c0      	movs	r3, #192	; 0xc0
 8003a50:	029b      	lsls	r3, r3, #10
 8003a52:	4013      	ands	r3, r2
 8003a54:	d100      	bne.n	8003a58 <HAL_GPIO_Init+0x174>
 8003a56:	e098      	b.n	8003b8a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a58:	4a53      	ldr	r2, [pc, #332]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3318      	adds	r3, #24
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	589b      	ldr	r3, [r3, r2]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	220f      	movs	r2, #15
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	43da      	mvns	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	23a0      	movs	r3, #160	; 0xa0
 8003a80:	05db      	lsls	r3, r3, #23
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x1d6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_GPIO_Init+0x2c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x1d2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <HAL_GPIO_Init+0x2cc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x1ce>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x1ca>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_GPIO_Init+0x2d4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x1c6>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aaa:	2305      	movs	r3, #5
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x1d8>
 8003aba:	2300      	movs	r3, #0
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	2103      	movs	r1, #3
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	00d2      	lsls	r2, r2, #3
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003acc:	4936      	ldr	r1, [pc, #216]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3318      	adds	r3, #24
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	035b      	lsls	r3, r3, #13
 8003af2:	4013      	ands	r3, r2
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	039b      	lsls	r3, r3, #14
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b30:	2384      	movs	r3, #132	; 0x84
 8003b32:	58d3      	ldr	r3, [r2, r3]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b56:	2284      	movs	r2, #132	; 0x84
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	58d3      	ldr	r3, [r2, r3]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	025b      	lsls	r3, r3, #9
 8003b76:	4013      	ands	r3, r2
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b82:	4909      	ldr	r1, [pc, #36]	; (8003ba8 <HAL_GPIO_Init+0x2c4>)
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	40da      	lsrs	r2, r3
 8003b98:	1e13      	subs	r3, r2, #0
 8003b9a:	d000      	beq.n	8003b9e <HAL_GPIO_Init+0x2ba>
 8003b9c:	e6aa      	b.n	80038f4 <HAL_GPIO_Init+0x10>
  }
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021800 	.word	0x40021800
 8003bac:	50000400 	.word	0x50000400
 8003bb0:	50000800 	.word	0x50000800
 8003bb4:	50000c00 	.word	0x50000c00
 8003bb8:	50001000 	.word	0x50001000

08003bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	0008      	movs	r0, r1
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	1cbb      	adds	r3, r7, #2
 8003bca:	1c02      	adds	r2, r0, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	1c7b      	adds	r3, r7, #1
 8003bd0:	1c0a      	adds	r2, r1, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd4:	1c7b      	adds	r3, r7, #1
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bdc:	1cbb      	adds	r3, r7, #2
 8003bde:	881a      	ldrh	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003be6:	1cbb      	adds	r3, r7, #2
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	0049      	lsls	r1, r1, #1
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007000 	.word	0x40007000

08003c14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11f      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c38:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4912      	ldr	r1, [pc, #72]	; (8003c90 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7fc fa78 	bl	800013c <__udivsi3>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c52:	e008      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e001      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e009      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d0ed      	beq.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	40007000 	.word	0x40007000
 8003c88:	fffff9ff 	.word	0xfffff9ff
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	000f4240 	.word	0x000f4240

08003c94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	23e0      	movs	r3, #224	; 0xe0
 8003c9e:	01db      	lsls	r3, r3, #7
 8003ca0:	4013      	ands	r3, r2
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000

08003cac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f000 fb50 	bl	8004360 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d100      	bne.n	8003ccc <HAL_RCC_OscConfig+0x20>
 8003cca:	e07c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ccc:	4bc3      	ldr	r3, [pc, #780]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2238      	movs	r2, #56	; 0x38
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd6:	4bc1      	ldr	r3, [pc, #772]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d102      	bne.n	8003cec <HAL_RCC_OscConfig+0x40>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d002      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf2:	4bba      	ldr	r3, [pc, #744]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	029b      	lsls	r3, r3, #10
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d062      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x118>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15e      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e32a      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_OscConfig+0x7a>
 8003d16:	4bb1      	ldr	r3, [pc, #708]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4bb0      	ldr	r3, [pc, #704]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0249      	lsls	r1, r1, #9
 8003d20:	430a      	orrs	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e020      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	23a0      	movs	r3, #160	; 0xa0
 8003d2c:	02db      	lsls	r3, r3, #11
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d10e      	bne.n	8003d50 <HAL_RCC_OscConfig+0xa4>
 8003d32:	4baa      	ldr	r3, [pc, #680]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4ba9      	ldr	r3, [pc, #676]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	02c9      	lsls	r1, r1, #11
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	4ba6      	ldr	r3, [pc, #664]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4ba5      	ldr	r3, [pc, #660]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0249      	lsls	r1, r1, #9
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCC_OscConfig+0xbc>
 8003d50:	4ba2      	ldr	r3, [pc, #648]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4ba1      	ldr	r3, [pc, #644]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d56:	49a2      	ldr	r1, [pc, #648]	; (8003fe0 <HAL_RCC_OscConfig+0x334>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b9f      	ldr	r3, [pc, #636]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b9e      	ldr	r3, [pc, #632]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d62:	49a0      	ldr	r1, [pc, #640]	; (8003fe4 <HAL_RCC_OscConfig+0x338>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d014      	beq.n	8003d9a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7ff fca4 	bl	80036bc <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7a:	f7ff fc9f 	bl	80036bc <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b64      	cmp	r3, #100	; 0x64
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e2e9      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8c:	4b93      	ldr	r3, [pc, #588]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	029b      	lsls	r3, r3, #10
 8003d94:	4013      	ands	r3, r2
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0xce>
 8003d98:	e015      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7ff fc8f 	bl	80036bc <HAL_GetTick>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7ff fc8a 	bl	80036bc <HAL_GetTick>
 8003da8:	0002      	movs	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e2d4      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db6:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0xf8>
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x126>
 8003dd0:	e099      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd2:	4b82      	ldr	r3, [pc, #520]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2238      	movs	r2, #56	; 0x38
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ddc:	4b7f      	ldr	r3, [pc, #508]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2203      	movs	r2, #3
 8003de2:	4013      	ands	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d102      	bne.n	8003df2 <HAL_RCC_OscConfig+0x146>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d135      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df8:	4b78      	ldr	r3, [pc, #480]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4013      	ands	r3, r2
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x164>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e2a7      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a74      	ldr	r2, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x33c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	021a      	lsls	r2, r3, #8
 8003e20:	4b6e      	ldr	r3, [pc, #440]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d112      	bne.n	8003e52 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e2c:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6e      	ldr	r2, [pc, #440]	; (8003fec <HAL_RCC_OscConfig+0x340>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	0019      	movs	r1, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	4b68      	ldr	r3, [pc, #416]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0adb      	lsrs	r3, r3, #11
 8003e46:	2207      	movs	r2, #7
 8003e48:	4013      	ands	r3, r2
 8003e4a:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_RCC_OscConfig+0x344>)
 8003e4c:	40da      	lsrs	r2, r3
 8003e4e:	4b69      	ldr	r3, [pc, #420]	; (8003ff4 <HAL_RCC_OscConfig+0x348>)
 8003e50:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e52:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x34c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7ff fbd4 	bl	8003604 <HAL_InitTick>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d051      	beq.n	8003f04 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e27d      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d030      	beq.n	8003ece <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6c:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x340>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e80:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	0049      	lsls	r1, r1, #1
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7ff fc15 	bl	80036bc <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7ff fc10 	bl	80036bc <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e25a      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x33c>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	4b45      	ldr	r3, [pc, #276]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e01b      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ed4:	4949      	ldr	r1, [pc, #292]	; (8003ffc <HAL_RCC_OscConfig+0x350>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7ff fbef 	bl	80036bc <HAL_GetTick>
 8003ede:	0003      	movs	r3, r0
 8003ee0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee4:	f7ff fbea 	bl	80036bc <HAL_GetTick>
 8003ee8:	0002      	movs	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e234      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4013      	ands	r3, r2
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x238>
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d047      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2238      	movs	r2, #56	; 0x38
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b18      	cmp	r3, #24
 8003f1a:	d10a      	bne.n	8003f32 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f1c:	4b2f      	ldr	r3, [pc, #188]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d03c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d138      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e216      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d019      	beq.n	8003f6e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	430a      	orrs	r2, r1
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7ff fbb9 	bl	80036bc <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f50:	f7ff fbb4 	bl	80036bc <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e1fe      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f62:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d0f1      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2a4>
 8003f6c:	e018      	b.n	8003fa0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f6e:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f74:	2101      	movs	r1, #1
 8003f76:	438a      	bics	r2, r1
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7ff fb9f 	bl	80036bc <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f84:	f7ff fb9a 	bl	80036bc <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e1e4      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f96:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d1f1      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_RCC_OscConfig+0x300>
 8003faa:	e0c7      	b.n	800413c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fac:	231f      	movs	r3, #31
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fb4:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2238      	movs	r2, #56	; 0x38
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d11f      	bne.n	8004000 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x330>)
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <HAL_RCC_OscConfig+0x320>
 8003fca:	e0b7      	b.n	800413c <HAL_RCC_OscConfig+0x490>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d000      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x32a>
 8003fd4:	e0b2      	b.n	800413c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c2      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	fffeffff 	.word	0xfffeffff
 8003fe4:	fffbffff 	.word	0xfffbffff
 8003fe8:	ffff80ff 	.word	0xffff80ff
 8003fec:	ffffc7ff 	.word	0xffffc7ff
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	20000004 	.word	0x20000004
 8003ff8:	20000008 	.word	0x20000008
 8003ffc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004000:	4bb5      	ldr	r3, [pc, #724]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	055b      	lsls	r3, r3, #21
 8004008:	4013      	ands	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x364>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x366>
 8004010:	2300      	movs	r3, #0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d011      	beq.n	800403a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	4bb0      	ldr	r3, [pc, #704]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0549      	lsls	r1, r1, #21
 8004020:	430a      	orrs	r2, r1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c
 8004024:	4bac      	ldr	r3, [pc, #688]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	055b      	lsls	r3, r3, #21
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004032:	231f      	movs	r3, #31
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403a:	4ba8      	ldr	r3, [pc, #672]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4013      	ands	r3, r2
 8004044:	d11a      	bne.n	800407c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004046:	4ba5      	ldr	r3, [pc, #660]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4ba4      	ldr	r3, [pc, #656]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	0049      	lsls	r1, r1, #1
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004054:	f7ff fb32 	bl	80036bc <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405e:	f7ff fb2d 	bl	80036bc <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e177      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004070:	4b9a      	ldr	r3, [pc, #616]	; (80042dc <HAL_RCC_OscConfig+0x630>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4013      	ands	r3, r2
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d106      	bne.n	8004092 <HAL_RCC_OscConfig+0x3e6>
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004088:	4b93      	ldr	r3, [pc, #588]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800408a:	2101      	movs	r1, #1
 800408c:	430a      	orrs	r2, r1
 800408e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004090:	e01c      	b.n	80040cc <HAL_RCC_OscConfig+0x420>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x408>
 800409a:	4b8f      	ldr	r3, [pc, #572]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800409c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800409e:	4b8e      	ldr	r3, [pc, #568]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040a0:	2104      	movs	r1, #4
 80040a2:	430a      	orrs	r2, r1
 80040a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040aa:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040ac:	2101      	movs	r1, #1
 80040ae:	430a      	orrs	r2, r1
 80040b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0x420>
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040b8:	4b87      	ldr	r3, [pc, #540]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040ba:	2101      	movs	r1, #1
 80040bc:	438a      	bics	r2, r1
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
 80040c0:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c4:	4b84      	ldr	r3, [pc, #528]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040c6:	2104      	movs	r1, #4
 80040c8:	438a      	bics	r2, r1
 80040ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d014      	beq.n	80040fe <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7ff faf2 	bl	80036bc <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040dc:	e009      	b.n	80040f2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7ff faed 	bl	80036bc <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	4a7d      	ldr	r2, [pc, #500]	; (80042e0 <HAL_RCC_OscConfig+0x634>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e136      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2202      	movs	r2, #2
 80040f8:	4013      	ands	r3, r2
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x432>
 80040fc:	e013      	b.n	8004126 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7ff fadd 	bl	80036bc <HAL_GetTick>
 8004102:	0003      	movs	r3, r0
 8004104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004106:	e009      	b.n	800411c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7ff fad8 	bl	80036bc <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	4a73      	ldr	r2, [pc, #460]	; (80042e0 <HAL_RCC_OscConfig+0x634>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e121      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	4b6e      	ldr	r3, [pc, #440]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004126:	231f      	movs	r3, #31
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004130:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004136:	496b      	ldr	r1, [pc, #428]	; (80042e4 <HAL_RCC_OscConfig+0x638>)
 8004138:	400a      	ands	r2, r1
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2220      	movs	r2, #32
 8004142:	4013      	ands	r3, r2
 8004144:	d039      	beq.n	80041ba <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01b      	beq.n	8004186 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	03c9      	lsls	r1, r1, #15
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415c:	f7ff faae 	bl	80036bc <HAL_GetTick>
 8004160:	0003      	movs	r3, r0
 8004162:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004166:	f7ff faa9 	bl	80036bc <HAL_GetTick>
 800416a:	0002      	movs	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0f3      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004178:	4b57      	ldr	r3, [pc, #348]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	4013      	ands	r3, r2
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x4ba>
 8004184:	e019      	b.n	80041ba <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004186:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	4b53      	ldr	r3, [pc, #332]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800418c:	4956      	ldr	r1, [pc, #344]	; (80042e8 <HAL_RCC_OscConfig+0x63c>)
 800418e:	400a      	ands	r2, r1
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7ff fa93 	bl	80036bc <HAL_GetTick>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800419c:	f7ff fa8e 	bl	80036bc <HAL_GetTick>
 80041a0:	0002      	movs	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0d8      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d100      	bne.n	80041c4 <HAL_RCC_OscConfig+0x518>
 80041c2:	e0cc      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2238      	movs	r2, #56	; 0x38
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x526>
 80041d0:	e07b      	b.n	80042ca <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d156      	bne.n	8004288 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80041e0:	4942      	ldr	r1, [pc, #264]	; (80042ec <HAL_RCC_OscConfig+0x640>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7ff fa69 	bl	80036bc <HAL_GetTick>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7ff fa64 	bl	80036bc <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0ae      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004202:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	049b      	lsls	r3, r3, #18
 800420a:	4013      	ands	r3, r2
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420e:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4a37      	ldr	r2, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x644>)
 8004214:	4013      	ands	r3, r2
 8004216:	0019      	movs	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	431a      	orrs	r2, r3
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800423e:	430a      	orrs	r2, r1
 8004240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	0449      	lsls	r1, r1, #17
 800424c:	430a      	orrs	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	0549      	lsls	r1, r1, #21
 800425a:	430a      	orrs	r2, r1
 800425c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7ff fa2d 	bl	80036bc <HAL_GetTick>
 8004262:	0003      	movs	r3, r0
 8004264:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7ff fa28 	bl	80036bc <HAL_GetTick>
 800426c:	0002      	movs	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e072      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	049b      	lsls	r3, r3, #18
 8004282:	4013      	ands	r3, r2
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x5bc>
 8004286:	e06a      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004288:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 800428e:	4917      	ldr	r1, [pc, #92]	; (80042ec <HAL_RCC_OscConfig+0x640>)
 8004290:	400a      	ands	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7ff fa12 	bl	80036bc <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429e:	f7ff fa0d 	bl	80036bc <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e057      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	049b      	lsls	r3, r3, #18
 80042b8:	4013      	ands	r3, r2
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_OscConfig+0x62c>)
 80042c2:	490c      	ldr	r1, [pc, #48]	; (80042f4 <HAL_RCC_OscConfig+0x648>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	60da      	str	r2, [r3, #12]
 80042c8:	e049      	b.n	800435e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e044      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
 80042e0:	00001388 	.word	0x00001388
 80042e4:	efffffff 	.word	0xefffffff
 80042e8:	ffbfffff 	.word	0xffbfffff
 80042ec:	feffffff 	.word	0xfeffffff
 80042f0:	11c1808c 	.word	0x11c1808c
 80042f4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x6bc>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2203      	movs	r2, #3
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	429a      	cmp	r2, r3
 800430a:	d126      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2270      	movs	r2, #112	; 0x70
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d11f      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	23fe      	movs	r3, #254	; 0xfe
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	401a      	ands	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d116      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	23f8      	movs	r3, #248	; 0xf8
 8004330:	039b      	lsls	r3, r3, #14
 8004332:	401a      	ands	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d10e      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	23e0      	movs	r3, #224	; 0xe0
 8004340:	051b      	lsls	r3, r3, #20
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	0f5b      	lsrs	r3, r3, #29
 8004350:	075a      	lsls	r2, r3, #29
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b008      	add	sp, #32
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40021000 	.word	0x40021000

0800436c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0e9      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2207      	movs	r2, #7
 8004386:	4013      	ands	r3, r2
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d91e      	bls.n	80043cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b73      	ldr	r3, [pc, #460]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2207      	movs	r2, #7
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	4b70      	ldr	r3, [pc, #448]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043a0:	f7ff f98c 	bl	80036bc <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043a8:	e009      	b.n	80043be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043aa:	f7ff f987 	bl	80036bc <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	4a6a      	ldr	r2, [pc, #424]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0ca      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043be:	4b67      	ldr	r3, [pc, #412]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2207      	movs	r2, #7
 80043c4:	4013      	ands	r3, r2
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1ee      	bne.n	80043aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d015      	beq.n	8004402 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2204      	movs	r2, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	d006      	beq.n	80043ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043e0:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043e6:	21e0      	movs	r1, #224	; 0xe0
 80043e8:	01c9      	lsls	r1, r1, #7
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ee:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <HAL_RCC_ClockConfig+0x1fc>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	4013      	ands	r3, r2
 800440a:	d057      	beq.n	80044bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	029b      	lsls	r3, r3, #10
 800441c:	4013      	ands	r3, r2
 800441e:	d12b      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e097      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d107      	bne.n	800443c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442c:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	049b      	lsls	r3, r3, #18
 8004434:	4013      	ands	r3, r2
 8004436:	d11f      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e08b      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d107      	bne.n	8004454 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004444:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4013      	ands	r3, r2
 800444e:	d113      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e07f      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d106      	bne.n	800446a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445c:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800445e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004460:	2202      	movs	r2, #2
 8004462:	4013      	ands	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e074      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e06d      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004478:	4b3a      	ldr	r3, [pc, #232]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2207      	movs	r2, #7
 800447e:	4393      	bics	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7ff f916 	bl	80036bc <HAL_GetTick>
 8004490:	0003      	movs	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004494:	e009      	b.n	80044aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004496:	f7ff f911 	bl	80036bc <HAL_GetTick>
 800449a:	0002      	movs	r2, r0
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	4a2f      	ldr	r2, [pc, #188]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e054      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	401a      	ands	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ec      	bne.n	8004496 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2207      	movs	r2, #7
 80044c2:	4013      	ands	r3, r2
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d21e      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2207      	movs	r2, #7
 80044d0:	4393      	bics	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044dc:	f7ff f8ee 	bl	80036bc <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044e4:	e009      	b.n	80044fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7ff f8e9 	bl	80036bc <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <HAL_RCC_ClockConfig+0x1f4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e02c      	b.n	8004554 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <HAL_RCC_ClockConfig+0x1f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2207      	movs	r2, #7
 8004500:	4013      	ands	r3, r2
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d1ee      	bne.n	80044e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2204      	movs	r2, #4
 800450e:	4013      	ands	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <HAL_RCC_ClockConfig+0x200>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004526:	f000 f829 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800452a:	0001      	movs	r1, r0
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCC_ClockConfig+0x1f8>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	0a1b      	lsrs	r3, r3, #8
 8004532:	220f      	movs	r2, #15
 8004534:	401a      	ands	r2, r3
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_RCC_ClockConfig+0x204>)
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	58d3      	ldr	r3, [r2, r3]
 800453c:	221f      	movs	r2, #31
 800453e:	4013      	ands	r3, r2
 8004540:	000a      	movs	r2, r1
 8004542:	40da      	lsrs	r2, r3
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x208>)
 8004546:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_ClockConfig+0x20c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f7ff f859 	bl	8003604 <HAL_InitTick>
 8004552:	0003      	movs	r3, r0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40022000 	.word	0x40022000
 8004560:	00001388 	.word	0x00001388
 8004564:	40021000 	.word	0x40021000
 8004568:	fffff0ff 	.word	0xfffff0ff
 800456c:	ffff8fff 	.word	0xffff8fff
 8004570:	0800fc00 	.word	0x0800fc00
 8004574:	20000004 	.word	0x20000004
 8004578:	20000008 	.word	0x20000008

0800457c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b3c      	ldr	r3, [pc, #240]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2238      	movs	r2, #56	; 0x38
 8004588:	4013      	ands	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0adb      	lsrs	r3, r3, #11
 8004592:	2207      	movs	r2, #7
 8004594:	4013      	ands	r3, r2
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	0013      	movs	r3, r2
 800459c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800459e:	6839      	ldr	r1, [r7, #0]
 80045a0:	4835      	ldr	r0, [pc, #212]	; (8004678 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045a2:	f7fb fdcb 	bl	800013c <__udivsi3>
 80045a6:	0003      	movs	r3, r0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e05d      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ac:	4b31      	ldr	r3, [pc, #196]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2238      	movs	r2, #56	; 0x38
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d102      	bne.n	80045be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045b8:	4b30      	ldr	r3, [pc, #192]	; (800467c <HAL_RCC_GetSysClockFreq+0x100>)
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e054      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2238      	movs	r2, #56	; 0x38
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d138      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80045ca:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2203      	movs	r2, #3
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	2207      	movs	r2, #7
 80045dc:	4013      	ands	r3, r2
 80045de:	3301      	adds	r3, #1
 80045e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d10d      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4824      	ldr	r0, [pc, #144]	; (800467c <HAL_RCC_GetSysClockFreq+0x100>)
 80045ec:	f7fb fda6 	bl	800013c <__udivsi3>
 80045f0:	0003      	movs	r3, r0
 80045f2:	0019      	movs	r1, r3
 80045f4:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	227f      	movs	r2, #127	; 0x7f
 80045fc:	4013      	ands	r3, r2
 80045fe:	434b      	muls	r3, r1
 8004600:	617b      	str	r3, [r7, #20]
        break;
 8004602:	e00d      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004608:	f7fb fd98 	bl	800013c <__udivsi3>
 800460c:	0003      	movs	r3, r0
 800460e:	0019      	movs	r1, r3
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	227f      	movs	r2, #127	; 0x7f
 8004618:	4013      	ands	r3, r2
 800461a:	434b      	muls	r3, r1
 800461c:	617b      	str	r3, [r7, #20]
        break;
 800461e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004620:	4b14      	ldr	r3, [pc, #80]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	0f5b      	lsrs	r3, r3, #29
 8004626:	2207      	movs	r2, #7
 8004628:	4013      	ands	r3, r2
 800462a:	3301      	adds	r3, #1
 800462c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7fb fd83 	bl	800013c <__udivsi3>
 8004636:	0003      	movs	r3, r0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e015      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2238      	movs	r2, #56	; 0x38
 8004642:	4013      	ands	r3, r2
 8004644:	2b20      	cmp	r3, #32
 8004646:	d103      	bne.n	8004650 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	e00b      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2238      	movs	r2, #56	; 0x38
 8004656:	4013      	ands	r3, r2
 8004658:	2b18      	cmp	r3, #24
 800465a:	d103      	bne.n	8004664 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800465c:	23fa      	movs	r3, #250	; 0xfa
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e001      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004668:	693b      	ldr	r3, [r7, #16]
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b006      	add	sp, #24
 8004670:	bd80      	pop	{r7, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400
 800467c:	007a1200 	.word	0x007a1200

08004680 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <HAL_RCC_GetHCLKFreq+0x10>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	20000004 	.word	0x20000004

08004694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004694:	b5b0      	push	{r4, r5, r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004698:	f7ff fff2 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 800469c:	0004      	movs	r4, r0
 800469e:	f7ff faf9 	bl	8003c94 <LL_RCC_GetAPB1Prescaler>
 80046a2:	0003      	movs	r3, r0
 80046a4:	0b1a      	lsrs	r2, r3, #12
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a8:	0092      	lsls	r2, r2, #2
 80046aa:	58d3      	ldr	r3, [r2, r3]
 80046ac:	221f      	movs	r2, #31
 80046ae:	4013      	ands	r3, r2
 80046b0:	40dc      	lsrs	r4, r3
 80046b2:	0023      	movs	r3, r4
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	0800fc40 	.word	0x0800fc40

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046c8:	2313      	movs	r3, #19
 80046ca:	18fb      	adds	r3, r7, r3
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d0:	2312      	movs	r3, #18
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	029b      	lsls	r3, r3, #10
 80046e0:	4013      	ands	r3, r2
 80046e2:	d100      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046e4:	e0ad      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2011      	movs	r0, #17
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ee:	4b47      	ldr	r3, [pc, #284]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	055b      	lsls	r3, r3, #21
 80046f6:	4013      	ands	r3, r2
 80046f8:	d110      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b44      	ldr	r3, [pc, #272]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80046fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fe:	4b43      	ldr	r3, [pc, #268]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	0549      	lsls	r1, r1, #21
 8004704:	430a      	orrs	r2, r1
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c
 8004708:	4b40      	ldr	r3, [pc, #256]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	2380      	movs	r3, #128	; 0x80
 800470e:	055b      	lsls	r3, r3, #21
 8004710:	4013      	ands	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004716:	183b      	adds	r3, r7, r0
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471c:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b3b      	ldr	r3, [pc, #236]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004722:	2180      	movs	r1, #128	; 0x80
 8004724:	0049      	lsls	r1, r1, #1
 8004726:	430a      	orrs	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800472a:	f7fe ffc7 	bl	80036bc <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004732:	e00b      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004734:	f7fe ffc2 	bl	80036bc <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d904      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004742:	2313      	movs	r3, #19
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	2203      	movs	r2, #3
 8004748:	701a      	strb	r2, [r3, #0]
        break;
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d0ed      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004758:	2313      	movs	r3, #19
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d15e      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004766:	23c0      	movs	r3, #192	; 0xc0
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4013      	ands	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d019      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	429a      	cmp	r2, r3
 800477c:	d014      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004784:	4013      	ands	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004788:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800478a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478c:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	0249      	lsls	r1, r1, #9
 8004792:	430a      	orrs	r2, r1
 8004794:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004798:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800479a:	4b1c      	ldr	r3, [pc, #112]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800479c:	491e      	ldr	r1, [pc, #120]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800479e:	400a      	ands	r2, r1
 80047a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d016      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe ff84 	bl	80036bc <HAL_GetTick>
 80047b4:	0003      	movs	r3, r0
 80047b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b8:	e00c      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fe ff7f 	bl	80036bc <HAL_GetTick>
 80047be:	0002      	movs	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d904      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80047ca:	2313      	movs	r3, #19
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]
            break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	d0ed      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80047de:	2313      	movs	r3, #19
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10a      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80047fc:	e016      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fe:	2312      	movs	r3, #18
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2213      	movs	r2, #19
 8004804:	18ba      	adds	r2, r7, r2
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e00f      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800480c:	40021000 	.word	0x40021000
 8004810:	40007000 	.word	0x40007000
 8004814:	fffffcff 	.word	0xfffffcff
 8004818:	fffeffff 	.word	0xfffeffff
 800481c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004820:	2312      	movs	r3, #18
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2213      	movs	r2, #19
 8004826:	18ba      	adds	r2, r7, r2
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800482c:	2311      	movs	r3, #17
 800482e:	18fb      	adds	r3, r7, r3
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d105      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004836:	4bb6      	ldr	r3, [pc, #728]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483a:	4bb5      	ldr	r3, [pc, #724]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800483c:	49b5      	ldr	r1, [pc, #724]	; (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800483e:	400a      	ands	r2, r1
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800484c:	4bb0      	ldr	r3, [pc, #704]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	2203      	movs	r2, #3
 8004852:	4393      	bics	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	4bad      	ldr	r3, [pc, #692]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800485c:	430a      	orrs	r2, r1
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2202      	movs	r2, #2
 8004866:	4013      	ands	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800486a:	4ba9      	ldr	r3, [pc, #676]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	220c      	movs	r2, #12
 8004870:	4393      	bics	r3, r2
 8004872:	0019      	movs	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4ba5      	ldr	r3, [pc, #660]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800487a:	430a      	orrs	r2, r1
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2204      	movs	r2, #4
 8004884:	4013      	ands	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004888:	4ba1      	ldr	r3, [pc, #644]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	2230      	movs	r2, #48	; 0x30
 800488e:	4393      	bics	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b9e      	ldr	r3, [pc, #632]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004898:	430a      	orrs	r2, r1
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048a6:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	4a9b      	ldr	r2, [pc, #620]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	4b96      	ldr	r3, [pc, #600]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	015b      	lsls	r3, r3, #5
 80048c2:	4013      	ands	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80048c6:	4b92      	ldr	r3, [pc, #584]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	4a94      	ldr	r2, [pc, #592]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	4b8e      	ldr	r3, [pc, #568]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048e6:	4b8a      	ldr	r3, [pc, #552]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	4a8d      	ldr	r2, [pc, #564]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f4:	4b86      	ldr	r3, [pc, #536]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4013      	ands	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	4a86      	ldr	r2, [pc, #536]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004914:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004916:	430a      	orrs	r2, r1
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2220      	movs	r2, #32
 8004920:	4013      	ands	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004924:	4b7a      	ldr	r3, [pc, #488]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	4a7f      	ldr	r2, [pc, #508]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800492a:	4013      	ands	r3, r2
 800492c:	0019      	movs	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	4b77      	ldr	r3, [pc, #476]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004934:	430a      	orrs	r2, r1
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	d009      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004942:	4b73      	ldr	r3, [pc, #460]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004952:	430a      	orrs	r2, r1
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	01db      	lsls	r3, r3, #7
 800495e:	4013      	ands	r3, r2
 8004960:	d015      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004962:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	0899      	lsrs	r1, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496e:	4b68      	ldr	r3, [pc, #416]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004970:	430a      	orrs	r2, r1
 8004972:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004978:	2380      	movs	r3, #128	; 0x80
 800497a:	05db      	lsls	r3, r3, #23
 800497c:	429a      	cmp	r2, r3
 800497e:	d106      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004980:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004986:	2180      	movs	r1, #128	; 0x80
 8004988:	0249      	lsls	r1, r1, #9
 800498a:	430a      	orrs	r2, r1
 800498c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	4013      	ands	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800499a:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	4393      	bics	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049aa:	430a      	orrs	r2, r1
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	039b      	lsls	r3, r3, #14
 80049b6:	4013      	ands	r3, r2
 80049b8:	d016      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049ba:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	4a5c      	ldr	r2, [pc, #368]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c8:	4b51      	ldr	r3, [pc, #324]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ca:	430a      	orrs	r2, r1
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	03db      	lsls	r3, r3, #15
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d106      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e0:	2180      	movs	r1, #128	; 0x80
 80049e2:	0449      	lsls	r1, r1, #17
 80049e4:	430a      	orrs	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	03db      	lsls	r3, r3, #15
 80049f0:	4013      	ands	r3, r2
 80049f2:	d016      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	0019      	movs	r1, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	045b      	lsls	r3, r3, #17
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d106      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a14:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	0449      	lsls	r1, r1, #17
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d014      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a2e:	4b38      	ldr	r3, [pc, #224]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	2203      	movs	r2, #3
 8004a34:	4393      	bics	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1a      	ldr	r2, [r3, #32]
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a4a:	4b31      	ldr	r3, [pc, #196]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0249      	lsls	r1, r1, #9
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	019b      	lsls	r3, r3, #6
 8004a60:	4013      	ands	r3, r2
 8004a62:	d014      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	220c      	movs	r2, #12
 8004a6a:	4393      	bics	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a80:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b22      	ldr	r3, [pc, #136]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	0249      	lsls	r1, r1, #9
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	045b      	lsls	r3, r3, #17
 8004a96:	4013      	ands	r3, r2
 8004a98:	d016      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	019b      	lsls	r3, r3, #6
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d106      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	0449      	lsls	r1, r1, #17
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	049b      	lsls	r3, r3, #18
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d016      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	4a10      	ldr	r2, [pc, #64]	; (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d106      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	0449      	lsls	r1, r1, #17
 8004afe:	430a      	orrs	r2, r1
 8004b00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b02:	2312      	movs	r3, #18
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	781b      	ldrb	r3, [r3, #0]
}
 8004b08:	0018      	movs	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b006      	add	sp, #24
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	efffffff 	.word	0xefffffff
 8004b18:	fffff3ff 	.word	0xfffff3ff
 8004b1c:	fffffcff 	.word	0xfffffcff
 8004b20:	fff3ffff 	.word	0xfff3ffff
 8004b24:	ffcfffff 	.word	0xffcfffff
 8004b28:	ffffcfff 	.word	0xffffcfff
 8004b2c:	ffff3fff 	.word	0xffff3fff
 8004b30:	ffbfffff 	.word	0xffbfffff
 8004b34:	feffffff 	.word	0xfeffffff

08004b38 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b38:	b5b0      	push	{r4, r5, r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b40:	230f      	movs	r3, #15
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d100      	bne.n	8004b50 <HAL_RTC_Init+0x18>
 8004b4e:	e08c      	b.n	8004c6a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2229      	movs	r2, #41	; 0x29
 8004b54:	5c9b      	ldrb	r3, [r3, r2]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2228      	movs	r2, #40	; 0x28
 8004b60:	2100      	movs	r1, #0
 8004b62:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2288      	movs	r2, #136	; 0x88
 8004b68:	0212      	lsls	r2, r2, #8
 8004b6a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f7fe fa28 	bl	8002fc4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2229      	movs	r2, #41	; 0x29
 8004b78:	2102      	movs	r1, #2
 8004b7a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	2210      	movs	r2, #16
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d062      	beq.n	8004c50 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	22ca      	movs	r2, #202	; 0xca
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2253      	movs	r2, #83	; 0x53
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004b9a:	250f      	movs	r5, #15
 8004b9c:	197c      	adds	r4, r7, r5
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f000 fbfb 	bl	800539c <RTC_EnterInitMode>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004baa:	0028      	movs	r0, r5
 8004bac:	183b      	adds	r3, r7, r0
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12c      	bne.n	8004c0e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	492e      	ldr	r1, [pc, #184]	; (8004c78 <HAL_RTC_Init+0x140>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6912      	ldr	r2, [r2, #16]
 8004bea:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	041a      	lsls	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004c00:	183c      	adds	r4, r7, r0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f000 fc0b 	bl	8005420 <RTC_ExitInitMode>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d116      	bne.n	8004c46 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	08d2      	lsrs	r2, r2, #3
 8004c26:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	22ff      	movs	r2, #255	; 0xff
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004c4e:	e003      	b.n	8004c58 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004c58:	230f      	movs	r3, #15
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2229      	movs	r2, #41	; 0x29
 8004c66:	2101      	movs	r1, #1
 8004c68:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004c6a:	230f      	movs	r3, #15
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	781b      	ldrb	r3, [r3, #0]
}
 8004c70:	0018      	movs	r0, r3
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b004      	add	sp, #16
 8004c76:	bdb0      	pop	{r4, r5, r7, pc}
 8004c78:	fb8fffbf 	.word	0xfb8fffbf

08004c7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c7c:	b5b0      	push	{r4, r5, r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2228      	movs	r2, #40	; 0x28
 8004c8c:	5c9b      	ldrb	r3, [r3, r2]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_RTC_SetTime+0x1a>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e092      	b.n	8004dbc <HAL_RTC_SetTime+0x140>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2228      	movs	r2, #40	; 0x28
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2229      	movs	r2, #41	; 0x29
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	22ca      	movs	r2, #202	; 0xca
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2253      	movs	r2, #83	; 0x53
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cb6:	2513      	movs	r5, #19
 8004cb8:	197c      	adds	r4, r7, r5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fb6d 	bl	800539c <RTC_EnterInitMode>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004cc6:	197b      	adds	r3, r7, r5
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d162      	bne.n	8004d94 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d125      	bne.n	8004d20 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	4013      	ands	r3, r2
 8004cde:	d102      	bne.n	8004ce6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0018      	movs	r0, r3
 8004cec:	f000 fbdc 	bl	80054a8 <RTC_ByteToBcd2>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 fbd5 	bl	80054a8 <RTC_ByteToBcd2>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d02:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 fbcd 	bl	80054a8 <RTC_ByteToBcd2>
 8004d0e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d10:	0022      	movs	r2, r4
 8004d12:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e017      	b.n	8004d50 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2240      	movs	r2, #64	; 0x40
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d102      	bne.n	8004d32 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d3e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d44:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	491b      	ldr	r1, [pc, #108]	; (8004dc4 <HAL_RTC_SetTime+0x148>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4918      	ldr	r1, [pc, #96]	; (8004dc8 <HAL_RTC_SetTime+0x14c>)
 8004d68:	400a      	ands	r2, r1
 8004d6a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d84:	2313      	movs	r3, #19
 8004d86:	18fc      	adds	r4, r7, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fb48 	bl	8005420 <RTC_ExitInitMode>
 8004d90:	0003      	movs	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	22ff      	movs	r2, #255	; 0xff
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004d9c:	2313      	movs	r3, #19
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2229      	movs	r2, #41	; 0x29
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2228      	movs	r2, #40	; 0x28
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

  return status;
 8004db6:	2313      	movs	r3, #19
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	781b      	ldrb	r3, [r3, #0]
}
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b006      	add	sp, #24
 8004dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc4:	007f7f7f 	.word	0x007f7f7f
 8004dc8:	fffbffff 	.word	0xfffbffff

08004dcc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	045b      	lsls	r3, r3, #17
 8004dea:	0c5a      	lsrs	r2, r3, #17
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_RTC_GetTime+0xb4>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	223f      	movs	r2, #63	; 0x3f
 8004e04:	4013      	ands	r3, r2
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	227f      	movs	r2, #127	; 0x7f
 8004e14:	4013      	ands	r3, r2
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	227f      	movs	r2, #127	; 0x7f
 8004e22:	4013      	ands	r3, r2
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	0d9b      	lsrs	r3, r3, #22
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11a      	bne.n	8004e76 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f000 fb57 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fb4e 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	001a      	movs	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	789b      	ldrb	r3, [r3, #2]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 fb45 	bl	80054f8 <RTC_Bcd2ToByte>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	001a      	movs	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b006      	add	sp, #24
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	007f7f7f 	.word	0x007f7f7f

08004e84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2228      	movs	r2, #40	; 0x28
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_RTC_SetDate+0x1a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e07e      	b.n	8004f9c <HAL_RTC_SetDate+0x118>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2228      	movs	r2, #40	; 0x28
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2229      	movs	r2, #41	; 0x29
 8004eaa:	2102      	movs	r1, #2
 8004eac:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_RTC_SetDate+0x4e>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	785b      	ldrb	r3, [r3, #1]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	2310      	movs	r3, #16
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	330a      	adds	r3, #10
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11c      	bne.n	8004f12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fae3 	bl	80054a8 <RTC_ByteToBcd2>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	0018      	movs	r0, r3
 8004eec:	f000 fadc 	bl	80054a8 <RTC_ByteToBcd2>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ef4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	789b      	ldrb	r3, [r3, #2]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 fad4 	bl	80054a8 <RTC_ByteToBcd2>
 8004f00:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f02:	0022      	movs	r2, r4
 8004f04:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e00e      	b.n	8004f30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	78db      	ldrb	r3, [r3, #3]
 8004f16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	785b      	ldrb	r3, [r3, #1]
 8004f1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004f24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	22ca      	movs	r2, #202	; 0xca
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2253      	movs	r2, #83	; 0x53
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f40:	2513      	movs	r5, #19
 8004f42:	197c      	adds	r4, r7, r5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 fa28 	bl	800539c <RTC_EnterInitMode>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f50:	0028      	movs	r0, r5
 8004f52:	183b      	adds	r3, r7, r0
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10c      	bne.n	8004f74 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4910      	ldr	r1, [pc, #64]	; (8004fa4 <HAL_RTC_SetDate+0x120>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f66:	183c      	adds	r4, r7, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 fa58 	bl	8005420 <RTC_ExitInitMode>
 8004f70:	0003      	movs	r3, r0
 8004f72:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	22ff      	movs	r2, #255	; 0xff
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004f7c:	2313      	movs	r3, #19
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d103      	bne.n	8004f8e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2229      	movs	r2, #41	; 0x29
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2228      	movs	r2, #40	; 0x28
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]

  return status;
 8004f96:	2313      	movs	r3, #19
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	781b      	ldrb	r3, [r3, #0]
}
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b006      	add	sp, #24
 8004fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa4:	00ffff3f 	.word	0x00ffff3f

08004fa8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <HAL_RTC_GetDate+0x98>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	221f      	movs	r2, #31
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	223f      	movs	r2, #63	; 0x3f
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2207      	movs	r2, #7
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11a      	bne.n	8005034 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 fa78 	bl	80054f8 <RTC_Bcd2ToByte>
 8005008:	0003      	movs	r3, r0
 800500a:	001a      	movs	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	0018      	movs	r0, r3
 8005016:	f000 fa6f 	bl	80054f8 <RTC_Bcd2ToByte>
 800501a:	0003      	movs	r3, r0
 800501c:	001a      	movs	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	789b      	ldrb	r3, [r3, #2]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fa66 	bl	80054f8 <RTC_Bcd2ToByte>
 800502c:	0003      	movs	r3, r0
 800502e:	001a      	movs	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	0018      	movs	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	b006      	add	sp, #24
 800503c:	bd80      	pop	{r7, pc}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	00ffff3f 	.word	0x00ffff3f

08005044 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005044:	b590      	push	{r4, r7, lr}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2228      	movs	r2, #40	; 0x28
 8005054:	5c9b      	ldrb	r3, [r3, r2]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_RTC_SetAlarm_IT+0x1a>
 800505a:	2302      	movs	r3, #2
 800505c:	e127      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2228      	movs	r2, #40	; 0x28
 8005062:	2101      	movs	r1, #1
 8005064:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2229      	movs	r2, #41	; 0x29
 800506a:	2102      	movs	r1, #2
 800506c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d136      	bne.n	80050e2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	4013      	ands	r3, r2
 800507e:	d102      	bne.n	8005086 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2200      	movs	r2, #0
 8005084:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 fa0c 	bl	80054a8 <RTC_ByteToBcd2>
 8005090:	0003      	movs	r3, r0
 8005092:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fa05 	bl	80054a8 <RTC_ByteToBcd2>
 800509e:	0003      	movs	r3, r0
 80050a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	789b      	ldrb	r3, [r3, #2]
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 f9fd 	bl	80054a8 <RTC_ByteToBcd2>
 80050ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050b0:	0022      	movs	r2, r4
 80050b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	78db      	ldrb	r3, [r3, #3]
 80050b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050ba:	431a      	orrs	r2, r3
 80050bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2220      	movs	r2, #32
 80050c2:	5c9b      	ldrb	r3, [r3, r2]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f9ef 	bl	80054a8 <RTC_ByteToBcd2>
 80050ca:	0003      	movs	r3, r0
 80050cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050ce:	0022      	movs	r2, r4
 80050d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80050d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050dc:	4313      	orrs	r3, r2
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e022      	b.n	8005128 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	d102      	bne.n	80050f4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	785b      	ldrb	r3, [r3, #1]
 80050fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005100:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	78db      	ldrb	r3, [r3, #3]
 800510c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800510e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2120      	movs	r1, #32
 8005114:	5c5b      	ldrb	r3, [r3, r1]
 8005116:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800511e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005124:	4313      	orrs	r3, r2
 8005126:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	22ca      	movs	r2, #202	; 0xca
 800513a:	625a      	str	r2, [r3, #36]	; 0x24
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2253      	movs	r2, #83	; 0x53
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	429a      	cmp	r2, r3
 800514e:	d14c      	bne.n	80051ea <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4957      	ldr	r1, [pc, #348]	; (80052b8 <HAL_RTC_SetAlarm_IT+0x274>)
 800515c:	400a      	ands	r2, r1
 800515e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2101      	movs	r1, #1
 800516c:	430a      	orrs	r2, r1
 800516e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005170:	f7fe faa4 	bl	80036bc <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005178:	e016      	b.n	80051a8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800517a:	f7fe fa9f 	bl	80036bc <HAL_GetTick>
 800517e:	0002      	movs	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	23fa      	movs	r3, #250	; 0xfa
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	429a      	cmp	r2, r3
 800518a:	d90d      	bls.n	80051a8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2229      	movs	r2, #41	; 0x29
 8005198:	2103      	movs	r1, #3
 800519a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2228      	movs	r2, #40	; 0x28
 80051a0:	2100      	movs	r1, #0
 80051a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e082      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d0e2      	beq.n	800517a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0049      	lsls	r1, r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0149      	lsls	r1, r1, #5
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
 80051e8:	e04b      	b.n	8005282 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4931      	ldr	r1, [pc, #196]	; (80052bc <HAL_RTC_SetAlarm_IT+0x278>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2102      	movs	r1, #2
 8005206:	430a      	orrs	r2, r1
 8005208:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800520a:	f7fe fa57 	bl	80036bc <HAL_GetTick>
 800520e:	0003      	movs	r3, r0
 8005210:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005212:	e016      	b.n	8005242 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005214:	f7fe fa52 	bl	80036bc <HAL_GetTick>
 8005218:	0002      	movs	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad2      	subs	r2, r2, r3
 800521e:	23fa      	movs	r3, #250	; 0xfa
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	429a      	cmp	r2, r3
 8005224:	d90d      	bls.n	8005242 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2229      	movs	r2, #41	; 0x29
 8005232:	2103      	movs	r1, #3
 8005234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2228      	movs	r2, #40	; 0x28
 800523a:	2100      	movs	r1, #0
 800523c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e035      	b.n	80052ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2202      	movs	r2, #2
 800524a:	4013      	ands	r3, r2
 800524c:	d0e2      	beq.n	8005214 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0089      	lsls	r1, r1, #2
 800526c:	430a      	orrs	r2, r1
 800526e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0189      	lsls	r1, r1, #6
 800527e:	430a      	orrs	r2, r1
 8005280:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	58d3      	ldr	r3, [r2, r3]
 8005288:	490d      	ldr	r1, [pc, #52]	; (80052c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	0312      	lsls	r2, r2, #12
 800528e:	4313      	orrs	r3, r2
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	22ff      	movs	r2, #255	; 0xff
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2229      	movs	r2, #41	; 0x29
 80052a0:	2101      	movs	r1, #1
 80052a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2228      	movs	r2, #40	; 0x28
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	0018      	movs	r0, r3
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b009      	add	sp, #36	; 0x24
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	fffffeff 	.word	0xfffffeff
 80052bc:	fffffdff 	.word	0xfffffdff
 80052c0:	40021800 	.word	0x40021800

080052c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	015b      	lsls	r3, r3, #5
 80052d6:	4013      	ands	r3, r2
 80052d8:	d011      	beq.n	80052fe <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	2201      	movs	r2, #1
 80052e2:	4013      	ands	r3, r2
 80052e4:	d00b      	beq.n	80052fe <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2101      	movs	r1, #1
 80052f2:	430a      	orrs	r2, r1
 80052f4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f821 	bl	8005340 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	019b      	lsls	r3, r3, #6
 8005308:	4013      	ands	r3, r2
 800530a:	d011      	beq.n	8005330 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	d00b      	beq.n	8005330 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2102      	movs	r1, #2
 8005324:	430a      	orrs	r2, r1
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 f969 	bl	8005602 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2229      	movs	r2, #41	; 0x29
 8005334:	2101      	movs	r1, #1
 8005336:	5499      	strb	r1, [r3, r2]
}
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b002      	add	sp, #8
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	46bd      	mov	sp, r7
 800534c:	b002      	add	sp, #8
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <HAL_RTC_WaitForSynchro+0x48>)
 800535e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005360:	f7fe f9ac 	bl	80036bc <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005368:	e00a      	b.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800536a:	f7fe f9a7 	bl	80036bc <HAL_GetTick>
 800536e:	0002      	movs	r2, r0
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	23fa      	movs	r3, #250	; 0xfa
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d901      	bls.n	8005380 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	4013      	ands	r3, r2
 800538a:	d0ee      	beq.n	800536a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	0001005f 	.word	0x0001005f

0800539c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80053a4:	230f      	movs	r3, #15
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2240      	movs	r2, #64	; 0x40
 80053b4:	4013      	ands	r3, r2
 80053b6:	d12c      	bne.n	8005412 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	430a      	orrs	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053c8:	f7fe f978 	bl	80036bc <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053d0:	e014      	b.n	80053fc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80053d2:	f7fe f973 	bl	80036bc <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	200f      	movs	r0, #15
 80053de:	183b      	adds	r3, r7, r0
 80053e0:	1839      	adds	r1, r7, r0
 80053e2:	7809      	ldrb	r1, [r1, #0]
 80053e4:	7019      	strb	r1, [r3, #0]
 80053e6:	23fa      	movs	r3, #250	; 0xfa
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d906      	bls.n	80053fc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80053ee:	183b      	adds	r3, r7, r0
 80053f0:	2203      	movs	r2, #3
 80053f2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2229      	movs	r2, #41	; 0x29
 80053f8:	2103      	movs	r1, #3
 80053fa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	4013      	ands	r3, r2
 8005406:	d104      	bne.n	8005412 <RTC_EnterInitMode+0x76>
 8005408:	230f      	movs	r3, #15
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d1df      	bne.n	80053d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005412:	230f      	movs	r3, #15
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b004      	add	sp, #16
 800541e:	bd80      	pop	{r7, pc}

08005420 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	240f      	movs	r4, #15
 800542a:	193b      	adds	r3, r7, r4
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	438a      	bics	r2, r1
 800543a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <RTC_ExitInitMode+0x84>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2220      	movs	r2, #32
 8005442:	4013      	ands	r3, r2
 8005444:	d10d      	bne.n	8005462 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f7ff ff81 	bl	8005350 <HAL_RTC_WaitForSynchro>
 800544e:	1e03      	subs	r3, r0, #0
 8005450:	d021      	beq.n	8005496 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2229      	movs	r2, #41	; 0x29
 8005456:	2103      	movs	r1, #3
 8005458:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800545a:	193b      	adds	r3, r7, r4
 800545c:	2203      	movs	r2, #3
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e019      	b.n	8005496 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005468:	2120      	movs	r1, #32
 800546a:	438a      	bics	r2, r1
 800546c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	0018      	movs	r0, r3
 8005472:	f7ff ff6d 	bl	8005350 <HAL_RTC_WaitForSynchro>
 8005476:	1e03      	subs	r3, r0, #0
 8005478:	d007      	beq.n	800548a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2229      	movs	r2, #41	; 0x29
 800547e:	2103      	movs	r1, #3
 8005480:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005482:	230f      	movs	r3, #15
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2203      	movs	r2, #3
 8005488:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <RTC_ExitInitMode+0x84>)
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <RTC_ExitInitMode+0x84>)
 8005490:	2120      	movs	r1, #32
 8005492:	430a      	orrs	r2, r1
 8005494:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005496:	230f      	movs	r3, #15
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	781b      	ldrb	r3, [r3, #0]
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b005      	add	sp, #20
 80054a2:	bd90      	pop	{r4, r7, pc}
 80054a4:	40002800 	.word	0x40002800

080054a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	0002      	movs	r2, r0
 80054b0:	1dfb      	adds	r3, r7, #7
 80054b2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80054b8:	230b      	movs	r3, #11
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	1dfa      	adds	r2, r7, #7
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80054c2:	e008      	b.n	80054d6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80054ca:	220b      	movs	r2, #11
 80054cc:	18bb      	adds	r3, r7, r2
 80054ce:	18ba      	adds	r2, r7, r2
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	3a0a      	subs	r2, #10
 80054d4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80054d6:	210b      	movs	r1, #11
 80054d8:	187b      	adds	r3, r7, r1
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b09      	cmp	r3, #9
 80054de:	d8f1      	bhi.n	80054c4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b004      	add	sp, #16
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	0002      	movs	r2, r0
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005504:	1dfb      	adds	r3, r7, #7
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	b2db      	uxtb	r3, r3
 800550c:	001a      	movs	r2, r3
 800550e:	0013      	movs	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	189b      	adds	r3, r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	210f      	movs	r1, #15
 8005522:	400b      	ands	r3, r1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	18d3      	adds	r3, r2, r3
 8005528:	b2db      	uxtb	r3, r3
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2228      	movs	r2, #40	; 0x28
 800553e:	5c9b      	ldrb	r3, [r3, r2]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005544:	2302      	movs	r3, #2
 8005546:	e024      	b.n	8005592 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2228      	movs	r2, #40	; 0x28
 800554c:	2101      	movs	r1, #1
 800554e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2229      	movs	r2, #41	; 0x29
 8005554:	2102      	movs	r1, #2
 8005556:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	22ca      	movs	r2, #202	; 0xca
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2253      	movs	r2, #83	; 0x53
 8005566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2120      	movs	r1, #32
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	22ff      	movs	r2, #255	; 0xff
 800557e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2229      	movs	r2, #41	; 0x29
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2228      	movs	r2, #40	; 0x28
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2228      	movs	r2, #40	; 0x28
 80055a6:	5c9b      	ldrb	r3, [r3, r2]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_RTCEx_DisableBypassShadow+0x16>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e024      	b.n	80055fa <HAL_RTCEx_DisableBypassShadow+0x60>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2228      	movs	r2, #40	; 0x28
 80055b4:	2101      	movs	r1, #1
 80055b6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2229      	movs	r2, #41	; 0x29
 80055bc:	2102      	movs	r1, #2
 80055be:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	22ca      	movs	r2, #202	; 0xca
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2253      	movs	r2, #83	; 0x53
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	21df      	movs	r1, #223	; 0xdf
 80055dc:	400a      	ands	r2, r1
 80055de:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2229      	movs	r2, #41	; 0x29
 80055ec:	2101      	movs	r1, #1
 80055ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2228      	movs	r2, #40	; 0x28
 80055f4:	2100      	movs	r1, #0
 80055f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b002      	add	sp, #8
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	46bd      	mov	sp, r7
 800560e:	b002      	add	sp, #8
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0a8      	b.n	8005778 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d109      	bne.n	8005642 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	2382      	movs	r3, #130	; 0x82
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	429a      	cmp	r2, r3
 8005638:	d009      	beq.n	800564e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	61da      	str	r2, [r3, #28]
 8005640:	e005      	b.n	800564e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	225d      	movs	r2, #93	; 0x5d
 8005658:	5c9b      	ldrb	r3, [r3, r2]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	225c      	movs	r2, #92	; 0x5c
 8005664:	2100      	movs	r1, #0
 8005666:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0018      	movs	r0, r3
 800566c:	f7fd fcf0 	bl	8003050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	225d      	movs	r2, #93	; 0x5d
 8005674:	2102      	movs	r1, #2
 8005676:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	438a      	bics	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	23e0      	movs	r3, #224	; 0xe0
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	429a      	cmp	r2, r3
 8005692:	d902      	bls.n	800569a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	015b      	lsls	r3, r3, #5
 800569e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	23f0      	movs	r3, #240	; 0xf0
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d008      	beq.n	80056be <HAL_SPI_Init+0xaa>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	23e0      	movs	r3, #224	; 0xe0
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d002      	beq.n	80056be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	2382      	movs	r3, #130	; 0x82
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	401a      	ands	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6899      	ldr	r1, [r3, #8]
 80056cc:	2384      	movs	r3, #132	; 0x84
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	400b      	ands	r3, r1
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2102      	movs	r1, #2
 80056da:	400b      	ands	r3, r1
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2101      	movs	r1, #1
 80056e4:	400b      	ands	r3, r1
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6999      	ldr	r1, [r3, #24]
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	400b      	ands	r3, r1
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2138      	movs	r1, #56	; 0x38
 80056fa:	400b      	ands	r3, r1
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	400b      	ands	r3, r1
 8005706:	431a      	orrs	r2, r3
 8005708:	0011      	movs	r1, r2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	019b      	lsls	r3, r3, #6
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	2204      	movs	r2, #4
 8005724:	401a      	ands	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2110      	movs	r1, #16
 800572c:	400b      	ands	r3, r1
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	2108      	movs	r1, #8
 8005736:	400b      	ands	r3, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68d9      	ldr	r1, [r3, #12]
 800573e:	23f0      	movs	r3, #240	; 0xf0
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	400b      	ands	r3, r1
 8005744:	431a      	orrs	r2, r3
 8005746:	0011      	movs	r1, r2
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	015b      	lsls	r3, r3, #5
 800574e:	401a      	ands	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4907      	ldr	r1, [pc, #28]	; (8005780 <HAL_SPI_Init+0x16c>)
 8005764:	400a      	ands	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	225d      	movs	r2, #93	; 0x5d
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	fffff7ff 	.word	0xfffff7ff

08005784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e04a      	b.n	800582c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	223d      	movs	r2, #61	; 0x3d
 800579a:	5c9b      	ldrb	r3, [r3, r2]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	223c      	movs	r2, #60	; 0x3c
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	0018      	movs	r0, r3
 80057ae:	f7fd fc99 	bl	80030e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223d      	movs	r2, #61	; 0x3d
 80057b6:	2102      	movs	r1, #2
 80057b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	0019      	movs	r1, r3
 80057c4:	0010      	movs	r0, r2
 80057c6:	f000 f9ed 	bl	8005ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2248      	movs	r2, #72	; 0x48
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	223e      	movs	r2, #62	; 0x3e
 80057d6:	2101      	movs	r1, #1
 80057d8:	5499      	strb	r1, [r3, r2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	223f      	movs	r2, #63	; 0x3f
 80057de:	2101      	movs	r1, #1
 80057e0:	5499      	strb	r1, [r3, r2]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2240      	movs	r2, #64	; 0x40
 80057e6:	2101      	movs	r1, #1
 80057e8:	5499      	strb	r1, [r3, r2]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2241      	movs	r2, #65	; 0x41
 80057ee:	2101      	movs	r1, #1
 80057f0:	5499      	strb	r1, [r3, r2]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2242      	movs	r2, #66	; 0x42
 80057f6:	2101      	movs	r1, #1
 80057f8:	5499      	strb	r1, [r3, r2]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2243      	movs	r2, #67	; 0x43
 80057fe:	2101      	movs	r1, #1
 8005800:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2244      	movs	r2, #68	; 0x44
 8005806:	2101      	movs	r1, #1
 8005808:	5499      	strb	r1, [r3, r2]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2245      	movs	r2, #69	; 0x45
 800580e:	2101      	movs	r1, #1
 8005810:	5499      	strb	r1, [r3, r2]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2246      	movs	r2, #70	; 0x46
 8005816:	2101      	movs	r1, #1
 8005818:	5499      	strb	r1, [r3, r2]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2247      	movs	r2, #71	; 0x47
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	223d      	movs	r2, #61	; 0x3d
 8005826:	2101      	movs	r1, #1
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	223d      	movs	r2, #61	; 0x3d
 8005840:	5c9b      	ldrb	r3, [r3, r2]
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d001      	beq.n	800584c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e047      	b.n	80058dc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	223d      	movs	r2, #61	; 0x3d
 8005850:	2102      	movs	r1, #2
 8005852:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68da      	ldr	r2, [r3, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	430a      	orrs	r2, r1
 8005862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d014      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x64>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	2380      	movs	r3, #128	; 0x80
 8005874:	05db      	lsls	r3, r3, #23
 8005876:	429a      	cmp	r2, r3
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x64>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x64>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIM_Base_Start_IT+0xb8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x64>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a17      	ldr	r2, [pc, #92]	; (80058f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d116      	bne.n	80058c6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <HAL_TIM_Base_Start_IT+0xc0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d016      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0xa4>
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	025b      	lsls	r3, r3, #9
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d011      	beq.n	80058d8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2101      	movs	r1, #1
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c4:	e008      	b.n	80058d8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2101      	movs	r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	e000      	b.n	80058da <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	0018      	movs	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	b004      	add	sp, #16
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40012c00 	.word	0x40012c00
 80058e8:	40000400 	.word	0x40000400
 80058ec:	40000800 	.word	0x40000800
 80058f0:	40014000 	.word	0x40014000
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2101      	movs	r1, #1
 800590c:	438a      	bics	r2, r1
 800590e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	4a0d      	ldr	r2, [pc, #52]	; (800594c <HAL_TIM_Base_Stop_IT+0x54>)
 8005918:	4013      	ands	r3, r2
 800591a:	d10d      	bne.n	8005938 <HAL_TIM_Base_Stop_IT+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	4a0b      	ldr	r2, [pc, #44]	; (8005950 <HAL_TIM_Base_Stop_IT+0x58>)
 8005924:	4013      	ands	r3, r2
 8005926:	d107      	bne.n	8005938 <HAL_TIM_Base_Stop_IT+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2101      	movs	r1, #1
 8005934:	438a      	bics	r2, r1
 8005936:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	223d      	movs	r2, #61	; 0x3d
 800593c:	2101      	movs	r1, #1
 800593e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	0018      	movs	r0, r3
 8005944:	46bd      	mov	sp, r7
 8005946:	b002      	add	sp, #8
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	00001111 	.word	0x00001111
 8005950:	00000444 	.word	0x00000444

08005954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2202      	movs	r2, #2
 8005970:	4013      	ands	r3, r2
 8005972:	d021      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2202      	movs	r2, #2
 8005978:	4013      	ands	r3, r2
 800597a:	d01d      	beq.n	80059b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2203      	movs	r2, #3
 8005982:	4252      	negs	r2, r2
 8005984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2203      	movs	r2, #3
 8005994:	4013      	ands	r3, r2
 8005996:	d004      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	0018      	movs	r0, r3
 800599c:	f000 f8ea 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e007      	b.n	80059b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 f8dd 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	0018      	movs	r0, r3
 80059ae:	f000 f8e9 	bl	8005b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2204      	movs	r2, #4
 80059bc:	4013      	ands	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2204      	movs	r2, #4
 80059c4:	4013      	ands	r3, r2
 80059c6:	d01e      	beq.n	8005a06 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2205      	movs	r2, #5
 80059ce:	4252      	negs	r2, r2
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	23c0      	movs	r3, #192	; 0xc0
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4013      	ands	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f000 f8c3 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 80059ee:	e007      	b.n	8005a00 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 f8b6 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 f8c2 	bl	8005b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d021      	beq.n	8005a52 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2208      	movs	r2, #8
 8005a12:	4013      	ands	r3, r2
 8005a14:	d01d      	beq.n	8005a52 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2209      	movs	r2, #9
 8005a1c:	4252      	negs	r2, r2
 8005a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2204      	movs	r2, #4
 8005a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	2203      	movs	r2, #3
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d004      	beq.n	8005a3c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 f89d 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005a3a:	e007      	b.n	8005a4c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 f890 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 f89c 	bl	8005b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2210      	movs	r2, #16
 8005a56:	4013      	ands	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d01e      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2211      	movs	r2, #17
 8005a68:	4252      	negs	r2, r2
 8005a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2208      	movs	r2, #8
 8005a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	23c0      	movs	r3, #192	; 0xc0
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f000 f876 	bl	8005b74 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e007      	b.n	8005a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f000 f869 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f000 f875 	bl	8005b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	d008      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fd fa2d 	bl	8002f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2280      	movs	r2, #128	; 0x80
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d104      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	2380      	movs	r3, #128	; 0x80
 8005ace:	019b      	lsls	r3, r3, #6
 8005ad0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ad2:	d00b      	beq.n	8005aec <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2280      	movs	r2, #128	; 0x80
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d007      	beq.n	8005aec <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <HAL_TIM_IRQHandler+0x208>)
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 f972 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4013      	ands	r3, r2
 8005af4:	d00b      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2280      	movs	r2, #128	; 0x80
 8005afa:	4013      	ands	r3, r2
 8005afc:	d007      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <HAL_TIM_IRQHandler+0x20c>)
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f969 	bl	8005de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	4013      	ands	r3, r2
 8005b14:	d00c      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d008      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2241      	movs	r2, #65	; 0x41
 8005b24:	4252      	negs	r2, r2
 8005b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f832 	bl	8005b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2220      	movs	r2, #32
 8005b34:	4013      	ands	r3, r2
 8005b36:	d00c      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d008      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2221      	movs	r2, #33	; 0x21
 8005b46:	4252      	negs	r2, r2
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f000 f937 	bl	8005dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	46bd      	mov	sp, r7
 8005b56:	b004      	add	sp, #16
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	46c0      	nop			; (mov r8, r8)
 8005b5c:	ffffdf7f 	.word	0xffffdf7f
 8005b60:	fffffeff 	.word	0xfffffeff

08005b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6c:	46c0      	nop			; (mov r8, r8)
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b002      	add	sp, #8
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3f      	ldr	r2, [pc, #252]	; (8005cb4 <TIM_Base_SetConfig+0x110>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00c      	beq.n	8005bd6 <TIM_Base_SetConfig+0x32>
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	05db      	lsls	r3, r3, #23
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d007      	beq.n	8005bd6 <TIM_Base_SetConfig+0x32>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a3b      	ldr	r2, [pc, #236]	; (8005cb8 <TIM_Base_SetConfig+0x114>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_Base_SetConfig+0x32>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a3a      	ldr	r2, [pc, #232]	; (8005cbc <TIM_Base_SetConfig+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2270      	movs	r2, #112	; 0x70
 8005bda:	4393      	bics	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a32      	ldr	r2, [pc, #200]	; (8005cb4 <TIM_Base_SetConfig+0x110>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d01c      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	05db      	lsls	r3, r3, #23
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d017      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2e      	ldr	r2, [pc, #184]	; (8005cb8 <TIM_Base_SetConfig+0x114>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d013      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a2d      	ldr	r2, [pc, #180]	; (8005cbc <TIM_Base_SetConfig+0x118>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00f      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a2c      	ldr	r2, [pc, #176]	; (8005cc0 <TIM_Base_SetConfig+0x11c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a2b      	ldr	r2, [pc, #172]	; (8005cc4 <TIM_Base_SetConfig+0x120>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <TIM_Base_SetConfig+0x124>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_Base_SetConfig+0x86>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a29      	ldr	r2, [pc, #164]	; (8005ccc <TIM_Base_SetConfig+0x128>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d108      	bne.n	8005c3c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <TIM_Base_SetConfig+0x12c>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2280      	movs	r2, #128	; 0x80
 8005c40:	4393      	bics	r3, r2
 8005c42:	001a      	movs	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <TIM_Base_SetConfig+0x110>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0xde>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <TIM_Base_SetConfig+0x120>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0xde>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a14      	ldr	r2, [pc, #80]	; (8005cc8 <TIM_Base_SetConfig+0x124>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0xde>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <TIM_Base_SetConfig+0x128>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d103      	bne.n	8005c8a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2201      	movs	r2, #1
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d106      	bne.n	8005caa <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4393      	bics	r3, r2
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]
  }
}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	46bd      	mov	sp, r7
 8005cae:	b004      	add	sp, #16
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	40012c00 	.word	0x40012c00
 8005cb8:	40000400 	.word	0x40000400
 8005cbc:	40000800 	.word	0x40000800
 8005cc0:	40002000 	.word	0x40002000
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800
 8005cd0:	fffffcff 	.word	0xfffffcff

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	223c      	movs	r2, #60	; 0x3c
 8005ce2:	5c9b      	ldrb	r3, [r3, r2]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e05a      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	223c      	movs	r2, #60	; 0x3c
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	223d      	movs	r2, #61	; 0x3d
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a26      	ldr	r2, [pc, #152]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d108      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4a25      	ldr	r2, [pc, #148]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2270      	movs	r2, #112	; 0x70
 8005d2c:	4393      	bics	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a19      	ldr	r2, [pc, #100]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d014      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	05db      	lsls	r3, r3, #23
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a12      	ldr	r2, [pc, #72]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2280      	movs	r2, #128	; 0x80
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	223d      	movs	r2, #61	; 0x3d
 8005d94:	2101      	movs	r1, #1
 8005d96:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	223c      	movs	r2, #60	; 0x3c
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	ff0fffff 	.word	0xff0fffff
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40014000 	.word	0x40014000

08005dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b002      	add	sp, #8
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	46c0      	nop			; (mov r8, r8)
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b002      	add	sp, #8
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005de8:	46c0      	nop			; (mov r8, r8)
 8005dea:	46bd      	mov	sp, r7
 8005dec:	b002      	add	sp, #8
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e046      	b.n	8005e90 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2288      	movs	r2, #136	; 0x88
 8005e06:	589b      	ldr	r3, [r3, r2]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d107      	bne.n	8005e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2284      	movs	r2, #132	; 0x84
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7fd f98a 	bl	8003130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2288      	movs	r2, #136	; 0x88
 8005e20:	2124      	movs	r1, #36	; 0x24
 8005e22:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2101      	movs	r1, #1
 8005e30:	438a      	bics	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fd0c 	bl	800685c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 f9b2 	bl	80061b0 <UART_SetConfig>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e01c      	b.n	8005e90 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	490d      	ldr	r1, [pc, #52]	; (8005e98 <HAL_UART_Init+0xa8>)
 8005e62:	400a      	ands	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	212a      	movs	r1, #42	; 0x2a
 8005e72:	438a      	bics	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	430a      	orrs	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fd9b 	bl	80069c4 <UART_CheckIdleState>
 8005e8e:	0003      	movs	r3, r0
}
 8005e90:	0018      	movs	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b002      	add	sp, #8
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	ffffb7ff 	.word	0xffffb7ff

08005e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	; 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	1dbb      	adds	r3, r7, #6
 8005eaa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2288      	movs	r2, #136	; 0x88
 8005eb0:	589b      	ldr	r3, [r3, r2]
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d000      	beq.n	8005eb8 <HAL_UART_Transmit+0x1c>
 8005eb6:	e090      	b.n	8005fda <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_UART_Transmit+0x2a>
 8005ebe:	1dbb      	adds	r3, r7, #6
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e088      	b.n	8005fdc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	2380      	movs	r3, #128	; 0x80
 8005ed0:	015b      	lsls	r3, r3, #5
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d109      	bne.n	8005eea <HAL_UART_Transmit+0x4e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d001      	beq.n	8005eea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e078      	b.n	8005fdc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2290      	movs	r2, #144	; 0x90
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2288      	movs	r2, #136	; 0x88
 8005ef6:	2121      	movs	r1, #33	; 0x21
 8005ef8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005efa:	f7fd fbdf 	bl	80036bc <HAL_GetTick>
 8005efe:	0003      	movs	r3, r0
 8005f00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1dba      	adds	r2, r7, #6
 8005f06:	2154      	movs	r1, #84	; 0x54
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1dba      	adds	r2, r7, #6
 8005f10:	2156      	movs	r1, #86	; 0x56
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	015b      	lsls	r3, r3, #5
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d108      	bne.n	8005f34 <HAL_UART_Transmit+0x98>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e003      	b.n	8005f3c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f3c:	e030      	b.n	8005fa0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	0013      	movs	r3, r2
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	f000 fde4 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8005f50:	1e03      	subs	r3, r0, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2288      	movs	r2, #136	; 0x88
 8005f58:	2120      	movs	r1, #32
 8005f5a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e03d      	b.n	8005fdc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	05d2      	lsls	r2, r2, #23
 8005f72:	0dd2      	lsrs	r2, r2, #23
 8005f74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	3302      	adds	r3, #2
 8005f7a:	61bb      	str	r3, [r7, #24]
 8005f7c:	e007      	b.n	8005f8e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	781a      	ldrb	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2256      	movs	r2, #86	; 0x56
 8005f92:	5a9b      	ldrh	r3, [r3, r2]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b299      	uxth	r1, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2256      	movs	r2, #86	; 0x56
 8005f9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2256      	movs	r2, #86	; 0x56
 8005fa4:	5a9b      	ldrh	r3, [r3, r2]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1c8      	bne.n	8005f3e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	0013      	movs	r3, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	f000 fdad 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2288      	movs	r2, #136	; 0x88
 8005fc6:	2120      	movs	r1, #32
 8005fc8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e006      	b.n	8005fdc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2288      	movs	r2, #136	; 0x88
 8005fd2:	2120      	movs	r1, #32
 8005fd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e000      	b.n	8005fdc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005fda:	2302      	movs	r3, #2
  }
}
 8005fdc:	0018      	movs	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b008      	add	sp, #32
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	1dbb      	adds	r3, r7, #6
 8005ff2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	228c      	movs	r2, #140	; 0x8c
 8005ff8:	589b      	ldr	r3, [r3, r2]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d000      	beq.n	8006000 <HAL_UART_Receive+0x1c>
 8005ffe:	e0d0      	b.n	80061a2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_UART_Receive+0x2a>
 8006006:	1dbb      	adds	r3, r7, #6
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0c8      	b.n	80061a4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	015b      	lsls	r3, r3, #5
 800601a:	429a      	cmp	r2, r3
 800601c:	d109      	bne.n	8006032 <HAL_UART_Receive+0x4e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2201      	movs	r2, #1
 800602a:	4013      	ands	r3, r2
 800602c:	d001      	beq.n	8006032 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e0b8      	b.n	80061a4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2290      	movs	r2, #144	; 0x90
 8006036:	2100      	movs	r1, #0
 8006038:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	228c      	movs	r2, #140	; 0x8c
 800603e:	2122      	movs	r1, #34	; 0x22
 8006040:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006048:	f7fd fb38 	bl	80036bc <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1dba      	adds	r2, r7, #6
 8006054:	215c      	movs	r1, #92	; 0x5c
 8006056:	8812      	ldrh	r2, [r2, #0]
 8006058:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1dba      	adds	r2, r7, #6
 800605e:	215e      	movs	r1, #94	; 0x5e
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	015b      	lsls	r3, r3, #5
 800606c:	429a      	cmp	r2, r3
 800606e:	d10d      	bne.n	800608c <HAL_UART_Receive+0xa8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <HAL_UART_Receive+0x9e>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2260      	movs	r2, #96	; 0x60
 800607c:	494b      	ldr	r1, [pc, #300]	; (80061ac <HAL_UART_Receive+0x1c8>)
 800607e:	5299      	strh	r1, [r3, r2]
 8006080:	e02e      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2260      	movs	r2, #96	; 0x60
 8006086:	21ff      	movs	r1, #255	; 0xff
 8006088:	5299      	strh	r1, [r3, r2]
 800608a:	e029      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10d      	bne.n	80060b0 <HAL_UART_Receive+0xcc>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <HAL_UART_Receive+0xc2>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2260      	movs	r2, #96	; 0x60
 80060a0:	21ff      	movs	r1, #255	; 0xff
 80060a2:	5299      	strh	r1, [r3, r2]
 80060a4:	e01c      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2260      	movs	r2, #96	; 0x60
 80060aa:	217f      	movs	r1, #127	; 0x7f
 80060ac:	5299      	strh	r1, [r3, r2]
 80060ae:	e017      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	055b      	lsls	r3, r3, #21
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d10d      	bne.n	80060d8 <HAL_UART_Receive+0xf4>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d104      	bne.n	80060ce <HAL_UART_Receive+0xea>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2260      	movs	r2, #96	; 0x60
 80060c8:	217f      	movs	r1, #127	; 0x7f
 80060ca:	5299      	strh	r1, [r3, r2]
 80060cc:	e008      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2260      	movs	r2, #96	; 0x60
 80060d2:	213f      	movs	r1, #63	; 0x3f
 80060d4:	5299      	strh	r1, [r3, r2]
 80060d6:	e003      	b.n	80060e0 <HAL_UART_Receive+0xfc>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2260      	movs	r2, #96	; 0x60
 80060dc:	2100      	movs	r1, #0
 80060de:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80060e0:	2312      	movs	r3, #18
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	2160      	movs	r1, #96	; 0x60
 80060e8:	5a52      	ldrh	r2, [r2, r1]
 80060ea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	015b      	lsls	r3, r3, #5
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d108      	bne.n	800610a <HAL_UART_Receive+0x126>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	e003      	b.n	8006112 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006112:	e03a      	b.n	800618a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0013      	movs	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	2120      	movs	r1, #32
 8006122:	f000 fcf9 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	228c      	movs	r2, #140	; 0x8c
 800612e:	2120      	movs	r1, #32
 8006130:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e036      	b.n	80061a4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10e      	bne.n	800615a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	b29b      	uxth	r3, r3
 8006144:	2212      	movs	r2, #18
 8006146:	18ba      	adds	r2, r7, r2
 8006148:	8812      	ldrh	r2, [r2, #0]
 800614a:	4013      	ands	r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	3302      	adds	r3, #2
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	e00e      	b.n	8006178 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2212      	movs	r2, #18
 8006164:	18ba      	adds	r2, r7, r2
 8006166:	8812      	ldrh	r2, [r2, #0]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	4013      	ands	r3, r2
 800616c:	b2da      	uxtb	r2, r3
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3301      	adds	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	225e      	movs	r2, #94	; 0x5e
 800617c:	5a9b      	ldrh	r3, [r3, r2]
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b299      	uxth	r1, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	225e      	movs	r2, #94	; 0x5e
 8006188:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	225e      	movs	r2, #94	; 0x5e
 800618e:	5a9b      	ldrh	r3, [r3, r2]
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1be      	bne.n	8006114 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	228c      	movs	r2, #140	; 0x8c
 800619a:	2120      	movs	r1, #32
 800619c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e000      	b.n	80061a4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
  }
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	b008      	add	sp, #32
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	000001ff 	.word	0x000001ff

080061b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b0:	b5b0      	push	{r4, r5, r7, lr}
 80061b2:	b090      	sub	sp, #64	; 0x40
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b8:	231a      	movs	r3, #26
 80061ba:	2220      	movs	r2, #32
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4313      	orrs	r3, r2
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4ac1      	ldr	r2, [pc, #772]	; (80064e8 <UART_SetConfig+0x338>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	0019      	movs	r1, r3
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	430b      	orrs	r3, r1
 80061f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	4abc      	ldr	r2, [pc, #752]	; (80064ec <UART_SetConfig+0x33c>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	0018      	movs	r0, r3
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	68d9      	ldr	r1, [r3, #12]
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	0003      	movs	r3, r0
 8006208:	430b      	orrs	r3, r1
 800620a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4ab6      	ldr	r2, [pc, #728]	; (80064f0 <UART_SetConfig+0x340>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <UART_SetConfig+0x80>
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4ab4      	ldr	r2, [pc, #720]	; (80064f4 <UART_SetConfig+0x344>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800622c:	4313      	orrs	r3, r2
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	4ab0      	ldr	r2, [pc, #704]	; (80064f8 <UART_SetConfig+0x348>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	430b      	orrs	r3, r1
 8006244:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	220f      	movs	r2, #15
 800624e:	4393      	bics	r3, r2
 8006250:	0018      	movs	r0, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	0003      	movs	r3, r0
 800625c:	430b      	orrs	r3, r1
 800625e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4aa5      	ldr	r2, [pc, #660]	; (80064fc <UART_SetConfig+0x34c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d131      	bne.n	80062ce <UART_SetConfig+0x11e>
 800626a:	4ba5      	ldr	r3, [pc, #660]	; (8006500 <UART_SetConfig+0x350>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	2203      	movs	r2, #3
 8006270:	4013      	ands	r3, r2
 8006272:	2b03      	cmp	r3, #3
 8006274:	d01d      	beq.n	80062b2 <UART_SetConfig+0x102>
 8006276:	d823      	bhi.n	80062c0 <UART_SetConfig+0x110>
 8006278:	2b02      	cmp	r3, #2
 800627a:	d00c      	beq.n	8006296 <UART_SetConfig+0xe6>
 800627c:	d820      	bhi.n	80062c0 <UART_SetConfig+0x110>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <UART_SetConfig+0xd8>
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00e      	beq.n	80062a4 <UART_SetConfig+0xf4>
 8006286:	e01b      	b.n	80062c0 <UART_SetConfig+0x110>
 8006288:	231b      	movs	r3, #27
 800628a:	2220      	movs	r2, #32
 800628c:	189b      	adds	r3, r3, r2
 800628e:	19db      	adds	r3, r3, r7
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e154      	b.n	8006540 <UART_SetConfig+0x390>
 8006296:	231b      	movs	r3, #27
 8006298:	2220      	movs	r2, #32
 800629a:	189b      	adds	r3, r3, r2
 800629c:	19db      	adds	r3, r3, r7
 800629e:	2202      	movs	r2, #2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e14d      	b.n	8006540 <UART_SetConfig+0x390>
 80062a4:	231b      	movs	r3, #27
 80062a6:	2220      	movs	r2, #32
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	19db      	adds	r3, r3, r7
 80062ac:	2204      	movs	r2, #4
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e146      	b.n	8006540 <UART_SetConfig+0x390>
 80062b2:	231b      	movs	r3, #27
 80062b4:	2220      	movs	r2, #32
 80062b6:	189b      	adds	r3, r3, r2
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	2208      	movs	r2, #8
 80062bc:	701a      	strb	r2, [r3, #0]
 80062be:	e13f      	b.n	8006540 <UART_SetConfig+0x390>
 80062c0:	231b      	movs	r3, #27
 80062c2:	2220      	movs	r2, #32
 80062c4:	189b      	adds	r3, r3, r2
 80062c6:	19db      	adds	r3, r3, r7
 80062c8:	2210      	movs	r2, #16
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e138      	b.n	8006540 <UART_SetConfig+0x390>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a8c      	ldr	r2, [pc, #560]	; (8006504 <UART_SetConfig+0x354>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d131      	bne.n	800633c <UART_SetConfig+0x18c>
 80062d8:	4b89      	ldr	r3, [pc, #548]	; (8006500 <UART_SetConfig+0x350>)
 80062da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062dc:	220c      	movs	r2, #12
 80062de:	4013      	ands	r3, r2
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d01d      	beq.n	8006320 <UART_SetConfig+0x170>
 80062e4:	d823      	bhi.n	800632e <UART_SetConfig+0x17e>
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d00c      	beq.n	8006304 <UART_SetConfig+0x154>
 80062ea:	d820      	bhi.n	800632e <UART_SetConfig+0x17e>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <UART_SetConfig+0x146>
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d00e      	beq.n	8006312 <UART_SetConfig+0x162>
 80062f4:	e01b      	b.n	800632e <UART_SetConfig+0x17e>
 80062f6:	231b      	movs	r3, #27
 80062f8:	2220      	movs	r2, #32
 80062fa:	189b      	adds	r3, r3, r2
 80062fc:	19db      	adds	r3, r3, r7
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	e11d      	b.n	8006540 <UART_SetConfig+0x390>
 8006304:	231b      	movs	r3, #27
 8006306:	2220      	movs	r2, #32
 8006308:	189b      	adds	r3, r3, r2
 800630a:	19db      	adds	r3, r3, r7
 800630c:	2202      	movs	r2, #2
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e116      	b.n	8006540 <UART_SetConfig+0x390>
 8006312:	231b      	movs	r3, #27
 8006314:	2220      	movs	r2, #32
 8006316:	189b      	adds	r3, r3, r2
 8006318:	19db      	adds	r3, r3, r7
 800631a:	2204      	movs	r2, #4
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e10f      	b.n	8006540 <UART_SetConfig+0x390>
 8006320:	231b      	movs	r3, #27
 8006322:	2220      	movs	r2, #32
 8006324:	189b      	adds	r3, r3, r2
 8006326:	19db      	adds	r3, r3, r7
 8006328:	2208      	movs	r2, #8
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e108      	b.n	8006540 <UART_SetConfig+0x390>
 800632e:	231b      	movs	r3, #27
 8006330:	2220      	movs	r2, #32
 8006332:	189b      	adds	r3, r3, r2
 8006334:	19db      	adds	r3, r3, r7
 8006336:	2210      	movs	r2, #16
 8006338:	701a      	strb	r2, [r3, #0]
 800633a:	e101      	b.n	8006540 <UART_SetConfig+0x390>
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a71      	ldr	r2, [pc, #452]	; (8006508 <UART_SetConfig+0x358>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d131      	bne.n	80063aa <UART_SetConfig+0x1fa>
 8006346:	4b6e      	ldr	r3, [pc, #440]	; (8006500 <UART_SetConfig+0x350>)
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	2230      	movs	r2, #48	; 0x30
 800634c:	4013      	ands	r3, r2
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d01d      	beq.n	800638e <UART_SetConfig+0x1de>
 8006352:	d823      	bhi.n	800639c <UART_SetConfig+0x1ec>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d00c      	beq.n	8006372 <UART_SetConfig+0x1c2>
 8006358:	d820      	bhi.n	800639c <UART_SetConfig+0x1ec>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x1b4>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d00e      	beq.n	8006380 <UART_SetConfig+0x1d0>
 8006362:	e01b      	b.n	800639c <UART_SetConfig+0x1ec>
 8006364:	231b      	movs	r3, #27
 8006366:	2220      	movs	r2, #32
 8006368:	189b      	adds	r3, r3, r2
 800636a:	19db      	adds	r3, r3, r7
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e0e6      	b.n	8006540 <UART_SetConfig+0x390>
 8006372:	231b      	movs	r3, #27
 8006374:	2220      	movs	r2, #32
 8006376:	189b      	adds	r3, r3, r2
 8006378:	19db      	adds	r3, r3, r7
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e0df      	b.n	8006540 <UART_SetConfig+0x390>
 8006380:	231b      	movs	r3, #27
 8006382:	2220      	movs	r2, #32
 8006384:	189b      	adds	r3, r3, r2
 8006386:	19db      	adds	r3, r3, r7
 8006388:	2204      	movs	r2, #4
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	e0d8      	b.n	8006540 <UART_SetConfig+0x390>
 800638e:	231b      	movs	r3, #27
 8006390:	2220      	movs	r2, #32
 8006392:	189b      	adds	r3, r3, r2
 8006394:	19db      	adds	r3, r3, r7
 8006396:	2208      	movs	r2, #8
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e0d1      	b.n	8006540 <UART_SetConfig+0x390>
 800639c:	231b      	movs	r3, #27
 800639e:	2220      	movs	r2, #32
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	19db      	adds	r3, r3, r7
 80063a4:	2210      	movs	r2, #16
 80063a6:	701a      	strb	r2, [r3, #0]
 80063a8:	e0ca      	b.n	8006540 <UART_SetConfig+0x390>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a57      	ldr	r2, [pc, #348]	; (800650c <UART_SetConfig+0x35c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d106      	bne.n	80063c2 <UART_SetConfig+0x212>
 80063b4:	231b      	movs	r3, #27
 80063b6:	2220      	movs	r2, #32
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	19db      	adds	r3, r3, r7
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
 80063c0:	e0be      	b.n	8006540 <UART_SetConfig+0x390>
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a52      	ldr	r2, [pc, #328]	; (8006510 <UART_SetConfig+0x360>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d106      	bne.n	80063da <UART_SetConfig+0x22a>
 80063cc:	231b      	movs	r3, #27
 80063ce:	2220      	movs	r2, #32
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	19db      	adds	r3, r3, r7
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	e0b2      	b.n	8006540 <UART_SetConfig+0x390>
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a4d      	ldr	r2, [pc, #308]	; (8006514 <UART_SetConfig+0x364>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d106      	bne.n	80063f2 <UART_SetConfig+0x242>
 80063e4:	231b      	movs	r3, #27
 80063e6:	2220      	movs	r2, #32
 80063e8:	189b      	adds	r3, r3, r2
 80063ea:	19db      	adds	r3, r3, r7
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e0a6      	b.n	8006540 <UART_SetConfig+0x390>
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a3e      	ldr	r2, [pc, #248]	; (80064f0 <UART_SetConfig+0x340>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d13e      	bne.n	800647a <UART_SetConfig+0x2ca>
 80063fc:	4b40      	ldr	r3, [pc, #256]	; (8006500 <UART_SetConfig+0x350>)
 80063fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006400:	23c0      	movs	r3, #192	; 0xc0
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4013      	ands	r3, r2
 8006406:	22c0      	movs	r2, #192	; 0xc0
 8006408:	0112      	lsls	r2, r2, #4
 800640a:	4293      	cmp	r3, r2
 800640c:	d027      	beq.n	800645e <UART_SetConfig+0x2ae>
 800640e:	22c0      	movs	r2, #192	; 0xc0
 8006410:	0112      	lsls	r2, r2, #4
 8006412:	4293      	cmp	r3, r2
 8006414:	d82a      	bhi.n	800646c <UART_SetConfig+0x2bc>
 8006416:	2280      	movs	r2, #128	; 0x80
 8006418:	0112      	lsls	r2, r2, #4
 800641a:	4293      	cmp	r3, r2
 800641c:	d011      	beq.n	8006442 <UART_SetConfig+0x292>
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	0112      	lsls	r2, r2, #4
 8006422:	4293      	cmp	r3, r2
 8006424:	d822      	bhi.n	800646c <UART_SetConfig+0x2bc>
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <UART_SetConfig+0x284>
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	00d2      	lsls	r2, r2, #3
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <UART_SetConfig+0x2a0>
 8006432:	e01b      	b.n	800646c <UART_SetConfig+0x2bc>
 8006434:	231b      	movs	r3, #27
 8006436:	2220      	movs	r2, #32
 8006438:	189b      	adds	r3, r3, r2
 800643a:	19db      	adds	r3, r3, r7
 800643c:	2200      	movs	r2, #0
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	e07e      	b.n	8006540 <UART_SetConfig+0x390>
 8006442:	231b      	movs	r3, #27
 8006444:	2220      	movs	r2, #32
 8006446:	189b      	adds	r3, r3, r2
 8006448:	19db      	adds	r3, r3, r7
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e077      	b.n	8006540 <UART_SetConfig+0x390>
 8006450:	231b      	movs	r3, #27
 8006452:	2220      	movs	r2, #32
 8006454:	189b      	adds	r3, r3, r2
 8006456:	19db      	adds	r3, r3, r7
 8006458:	2204      	movs	r2, #4
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	e070      	b.n	8006540 <UART_SetConfig+0x390>
 800645e:	231b      	movs	r3, #27
 8006460:	2220      	movs	r2, #32
 8006462:	189b      	adds	r3, r3, r2
 8006464:	19db      	adds	r3, r3, r7
 8006466:	2208      	movs	r2, #8
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e069      	b.n	8006540 <UART_SetConfig+0x390>
 800646c:	231b      	movs	r3, #27
 800646e:	2220      	movs	r2, #32
 8006470:	189b      	adds	r3, r3, r2
 8006472:	19db      	adds	r3, r3, r7
 8006474:	2210      	movs	r2, #16
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e062      	b.n	8006540 <UART_SetConfig+0x390>
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <UART_SetConfig+0x344>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d157      	bne.n	8006534 <UART_SetConfig+0x384>
 8006484:	4b1e      	ldr	r3, [pc, #120]	; (8006500 <UART_SetConfig+0x350>)
 8006486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006488:	23c0      	movs	r3, #192	; 0xc0
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4013      	ands	r3, r2
 800648e:	22c0      	movs	r2, #192	; 0xc0
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	4293      	cmp	r3, r2
 8006494:	d040      	beq.n	8006518 <UART_SetConfig+0x368>
 8006496:	22c0      	movs	r2, #192	; 0xc0
 8006498:	0092      	lsls	r2, r2, #2
 800649a:	4293      	cmp	r3, r2
 800649c:	d843      	bhi.n	8006526 <UART_SetConfig+0x376>
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	0092      	lsls	r2, r2, #2
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d011      	beq.n	80064ca <UART_SetConfig+0x31a>
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	0092      	lsls	r2, r2, #2
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d83b      	bhi.n	8006526 <UART_SetConfig+0x376>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <UART_SetConfig+0x30c>
 80064b2:	2280      	movs	r2, #128	; 0x80
 80064b4:	0052      	lsls	r2, r2, #1
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <UART_SetConfig+0x328>
 80064ba:	e034      	b.n	8006526 <UART_SetConfig+0x376>
 80064bc:	231b      	movs	r3, #27
 80064be:	2220      	movs	r2, #32
 80064c0:	189b      	adds	r3, r3, r2
 80064c2:	19db      	adds	r3, r3, r7
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e03a      	b.n	8006540 <UART_SetConfig+0x390>
 80064ca:	231b      	movs	r3, #27
 80064cc:	2220      	movs	r2, #32
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	19db      	adds	r3, r3, r7
 80064d2:	2202      	movs	r2, #2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e033      	b.n	8006540 <UART_SetConfig+0x390>
 80064d8:	231b      	movs	r3, #27
 80064da:	2220      	movs	r2, #32
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	19db      	adds	r3, r3, r7
 80064e0:	2204      	movs	r2, #4
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e02c      	b.n	8006540 <UART_SetConfig+0x390>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	cfff69f3 	.word	0xcfff69f3
 80064ec:	ffffcfff 	.word	0xffffcfff
 80064f0:	40008000 	.word	0x40008000
 80064f4:	40008400 	.word	0x40008400
 80064f8:	11fff4ff 	.word	0x11fff4ff
 80064fc:	40013800 	.word	0x40013800
 8006500:	40021000 	.word	0x40021000
 8006504:	40004400 	.word	0x40004400
 8006508:	40004800 	.word	0x40004800
 800650c:	40004c00 	.word	0x40004c00
 8006510:	40005000 	.word	0x40005000
 8006514:	40013c00 	.word	0x40013c00
 8006518:	231b      	movs	r3, #27
 800651a:	2220      	movs	r2, #32
 800651c:	189b      	adds	r3, r3, r2
 800651e:	19db      	adds	r3, r3, r7
 8006520:	2208      	movs	r2, #8
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	e00c      	b.n	8006540 <UART_SetConfig+0x390>
 8006526:	231b      	movs	r3, #27
 8006528:	2220      	movs	r2, #32
 800652a:	189b      	adds	r3, r3, r2
 800652c:	19db      	adds	r3, r3, r7
 800652e:	2210      	movs	r2, #16
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e005      	b.n	8006540 <UART_SetConfig+0x390>
 8006534:	231b      	movs	r3, #27
 8006536:	2220      	movs	r2, #32
 8006538:	189b      	adds	r3, r3, r2
 800653a:	19db      	adds	r3, r3, r7
 800653c:	2210      	movs	r2, #16
 800653e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4ac1      	ldr	r2, [pc, #772]	; (800684c <UART_SetConfig+0x69c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d005      	beq.n	8006556 <UART_SetConfig+0x3a6>
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4ac0      	ldr	r2, [pc, #768]	; (8006850 <UART_SetConfig+0x6a0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d000      	beq.n	8006556 <UART_SetConfig+0x3a6>
 8006554:	e093      	b.n	800667e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006556:	231b      	movs	r3, #27
 8006558:	2220      	movs	r2, #32
 800655a:	189b      	adds	r3, r3, r2
 800655c:	19db      	adds	r3, r3, r7
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b08      	cmp	r3, #8
 8006562:	d015      	beq.n	8006590 <UART_SetConfig+0x3e0>
 8006564:	dc18      	bgt.n	8006598 <UART_SetConfig+0x3e8>
 8006566:	2b04      	cmp	r3, #4
 8006568:	d00d      	beq.n	8006586 <UART_SetConfig+0x3d6>
 800656a:	dc15      	bgt.n	8006598 <UART_SetConfig+0x3e8>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <UART_SetConfig+0x3c6>
 8006570:	2b02      	cmp	r3, #2
 8006572:	d005      	beq.n	8006580 <UART_SetConfig+0x3d0>
 8006574:	e010      	b.n	8006598 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006576:	f7fe f88d 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 800657a:	0003      	movs	r3, r0
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800657e:	e014      	b.n	80065aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006580:	4bb4      	ldr	r3, [pc, #720]	; (8006854 <UART_SetConfig+0x6a4>)
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006584:	e011      	b.n	80065aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006586:	f7fd fff9 	bl	800457c <HAL_RCC_GetSysClockFreq>
 800658a:	0003      	movs	r3, r0
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800658e:	e00c      	b.n	80065aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006596:	e008      	b.n	80065aa <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800659c:	231a      	movs	r3, #26
 800659e:	2220      	movs	r2, #32
 80065a0:	189b      	adds	r3, r3, r2
 80065a2:	19db      	adds	r3, r3, r7
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
        break;
 80065a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d100      	bne.n	80065b2 <UART_SetConfig+0x402>
 80065b0:	e135      	b.n	800681e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b6:	4ba8      	ldr	r3, [pc, #672]	; (8006858 <UART_SetConfig+0x6a8>)
 80065b8:	0052      	lsls	r2, r2, #1
 80065ba:	5ad3      	ldrh	r3, [r2, r3]
 80065bc:	0019      	movs	r1, r3
 80065be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80065c0:	f7f9 fdbc 	bl	800013c <__udivsi3>
 80065c4:	0003      	movs	r3, r0
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	0013      	movs	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d305      	bcc.n	80065e4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d906      	bls.n	80065f2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80065e4:	231a      	movs	r3, #26
 80065e6:	2220      	movs	r2, #32
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	19db      	adds	r3, r3, r7
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e044      	b.n	800667c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065fe:	4b96      	ldr	r3, [pc, #600]	; (8006858 <UART_SetConfig+0x6a8>)
 8006600:	0052      	lsls	r2, r2, #1
 8006602:	5ad3      	ldrh	r3, [r2, r3]
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	69b8      	ldr	r0, [r7, #24]
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	f7f9 ff47 	bl	80004a4 <__aeabi_uldivmod>
 8006616:	0002      	movs	r2, r0
 8006618:	000b      	movs	r3, r1
 800661a:	0e11      	lsrs	r1, r2, #24
 800661c:	021d      	lsls	r5, r3, #8
 800661e:	430d      	orrs	r5, r1
 8006620:	0214      	lsls	r4, r2, #8
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	1900      	adds	r0, r0, r4
 8006634:	4169      	adcs	r1, r5
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f7f9 ff2e 	bl	80004a4 <__aeabi_uldivmod>
 8006648:	0002      	movs	r2, r0
 800664a:	000b      	movs	r3, r1
 800664c:	0013      	movs	r3, r2
 800664e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	23c0      	movs	r3, #192	; 0xc0
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	429a      	cmp	r2, r3
 8006658:	d309      	bcc.n	800666e <UART_SetConfig+0x4be>
 800665a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	035b      	lsls	r3, r3, #13
 8006660:	429a      	cmp	r2, r3
 8006662:	d204      	bcs.n	800666e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e006      	b.n	800667c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800666e:	231a      	movs	r3, #26
 8006670:	2220      	movs	r2, #32
 8006672:	189b      	adds	r3, r3, r2
 8006674:	19db      	adds	r3, r3, r7
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800667a:	e0d0      	b.n	800681e <UART_SetConfig+0x66e>
 800667c:	e0cf      	b.n	800681e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	69da      	ldr	r2, [r3, #28]
 8006682:	2380      	movs	r3, #128	; 0x80
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	429a      	cmp	r2, r3
 8006688:	d000      	beq.n	800668c <UART_SetConfig+0x4dc>
 800668a:	e070      	b.n	800676e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800668c:	231b      	movs	r3, #27
 800668e:	2220      	movs	r2, #32
 8006690:	189b      	adds	r3, r3, r2
 8006692:	19db      	adds	r3, r3, r7
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b08      	cmp	r3, #8
 8006698:	d015      	beq.n	80066c6 <UART_SetConfig+0x516>
 800669a:	dc18      	bgt.n	80066ce <UART_SetConfig+0x51e>
 800669c:	2b04      	cmp	r3, #4
 800669e:	d00d      	beq.n	80066bc <UART_SetConfig+0x50c>
 80066a0:	dc15      	bgt.n	80066ce <UART_SetConfig+0x51e>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <UART_SetConfig+0x4fc>
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d005      	beq.n	80066b6 <UART_SetConfig+0x506>
 80066aa:	e010      	b.n	80066ce <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ac:	f7fd fff2 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 80066b0:	0003      	movs	r3, r0
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066b4:	e014      	b.n	80066e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <UART_SetConfig+0x6a4>)
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ba:	e011      	b.n	80066e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fd ff5e 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80066c0:	0003      	movs	r3, r0
 80066c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c4:	e00c      	b.n	80066e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066cc:	e008      	b.n	80066e0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80066d2:	231a      	movs	r3, #26
 80066d4:	2220      	movs	r2, #32
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	19db      	adds	r3, r3, r7
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
        break;
 80066de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d100      	bne.n	80066e8 <UART_SetConfig+0x538>
 80066e6:	e09a      	b.n	800681e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ec:	4b5a      	ldr	r3, [pc, #360]	; (8006858 <UART_SetConfig+0x6a8>)
 80066ee:	0052      	lsls	r2, r2, #1
 80066f0:	5ad3      	ldrh	r3, [r2, r3]
 80066f2:	0019      	movs	r1, r3
 80066f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80066f6:	f7f9 fd21 	bl	800013c <__udivsi3>
 80066fa:	0003      	movs	r3, r0
 80066fc:	005a      	lsls	r2, r3, #1
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	18d2      	adds	r2, r2, r3
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	0019      	movs	r1, r3
 800670c:	0010      	movs	r0, r2
 800670e:	f7f9 fd15 	bl	800013c <__udivsi3>
 8006712:	0003      	movs	r3, r0
 8006714:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2b0f      	cmp	r3, #15
 800671a:	d921      	bls.n	8006760 <UART_SetConfig+0x5b0>
 800671c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	025b      	lsls	r3, r3, #9
 8006722:	429a      	cmp	r2, r3
 8006724:	d21c      	bcs.n	8006760 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	b29a      	uxth	r2, r3
 800672a:	200e      	movs	r0, #14
 800672c:	2420      	movs	r4, #32
 800672e:	1903      	adds	r3, r0, r4
 8006730:	19db      	adds	r3, r3, r7
 8006732:	210f      	movs	r1, #15
 8006734:	438a      	bics	r2, r1
 8006736:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	b29b      	uxth	r3, r3
 800673e:	2207      	movs	r2, #7
 8006740:	4013      	ands	r3, r2
 8006742:	b299      	uxth	r1, r3
 8006744:	1903      	adds	r3, r0, r4
 8006746:	19db      	adds	r3, r3, r7
 8006748:	1902      	adds	r2, r0, r4
 800674a:	19d2      	adds	r2, r2, r7
 800674c:	8812      	ldrh	r2, [r2, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	1902      	adds	r2, r0, r4
 8006758:	19d2      	adds	r2, r2, r7
 800675a:	8812      	ldrh	r2, [r2, #0]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e05e      	b.n	800681e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006760:	231a      	movs	r3, #26
 8006762:	2220      	movs	r2, #32
 8006764:	189b      	adds	r3, r3, r2
 8006766:	19db      	adds	r3, r3, r7
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	e057      	b.n	800681e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800676e:	231b      	movs	r3, #27
 8006770:	2220      	movs	r2, #32
 8006772:	189b      	adds	r3, r3, r2
 8006774:	19db      	adds	r3, r3, r7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b08      	cmp	r3, #8
 800677a:	d015      	beq.n	80067a8 <UART_SetConfig+0x5f8>
 800677c:	dc18      	bgt.n	80067b0 <UART_SetConfig+0x600>
 800677e:	2b04      	cmp	r3, #4
 8006780:	d00d      	beq.n	800679e <UART_SetConfig+0x5ee>
 8006782:	dc15      	bgt.n	80067b0 <UART_SetConfig+0x600>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <UART_SetConfig+0x5de>
 8006788:	2b02      	cmp	r3, #2
 800678a:	d005      	beq.n	8006798 <UART_SetConfig+0x5e8>
 800678c:	e010      	b.n	80067b0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800678e:	f7fd ff81 	bl	8004694 <HAL_RCC_GetPCLK1Freq>
 8006792:	0003      	movs	r3, r0
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006796:	e014      	b.n	80067c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006798:	4b2e      	ldr	r3, [pc, #184]	; (8006854 <UART_SetConfig+0x6a4>)
 800679a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800679c:	e011      	b.n	80067c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800679e:	f7fd feed 	bl	800457c <HAL_RCC_GetSysClockFreq>
 80067a2:	0003      	movs	r3, r0
 80067a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067a6:	e00c      	b.n	80067c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ae:	e008      	b.n	80067c2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80067b4:	231a      	movs	r3, #26
 80067b6:	2220      	movs	r2, #32
 80067b8:	189b      	adds	r3, r3, r2
 80067ba:	19db      	adds	r3, r3, r7
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
        break;
 80067c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02a      	beq.n	800681e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067cc:	4b22      	ldr	r3, [pc, #136]	; (8006858 <UART_SetConfig+0x6a8>)
 80067ce:	0052      	lsls	r2, r2, #1
 80067d0:	5ad3      	ldrh	r3, [r2, r3]
 80067d2:	0019      	movs	r1, r3
 80067d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067d6:	f7f9 fcb1 	bl	800013c <__udivsi3>
 80067da:	0003      	movs	r3, r0
 80067dc:	001a      	movs	r2, r3
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	18d2      	adds	r2, r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	0019      	movs	r1, r3
 80067ec:	0010      	movs	r0, r2
 80067ee:	f7f9 fca5 	bl	800013c <__udivsi3>
 80067f2:	0003      	movs	r3, r0
 80067f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d90a      	bls.n	8006812 <UART_SetConfig+0x662>
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	025b      	lsls	r3, r3, #9
 8006802:	429a      	cmp	r2, r3
 8006804:	d205      	bcs.n	8006812 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	b29a      	uxth	r2, r3
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	e005      	b.n	800681e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006812:	231a      	movs	r3, #26
 8006814:	2220      	movs	r2, #32
 8006816:	189b      	adds	r3, r3, r2
 8006818:	19db      	adds	r3, r3, r7
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	226a      	movs	r2, #106	; 0x6a
 8006822:	2101      	movs	r1, #1
 8006824:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2268      	movs	r2, #104	; 0x68
 800682a:	2101      	movs	r1, #1
 800682c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2200      	movs	r2, #0
 8006832:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	2200      	movs	r2, #0
 8006838:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800683a:	231a      	movs	r3, #26
 800683c:	2220      	movs	r2, #32
 800683e:	189b      	adds	r3, r3, r2
 8006840:	19db      	adds	r3, r3, r7
 8006842:	781b      	ldrb	r3, [r3, #0]
}
 8006844:	0018      	movs	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	b010      	add	sp, #64	; 0x40
 800684a:	bdb0      	pop	{r4, r5, r7, pc}
 800684c:	40008000 	.word	0x40008000
 8006850:	40008400 	.word	0x40008400
 8006854:	00f42400 	.word	0x00f42400
 8006858:	0800fc60 	.word	0x0800fc60

0800685c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	2208      	movs	r2, #8
 800686a:	4013      	ands	r3, r2
 800686c:	d00b      	beq.n	8006886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	4a4a      	ldr	r2, [pc, #296]	; (80069a0 <UART_AdvFeatureConfig+0x144>)
 8006876:	4013      	ands	r3, r2
 8006878:	0019      	movs	r1, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	2201      	movs	r2, #1
 800688c:	4013      	ands	r3, r2
 800688e:	d00b      	beq.n	80068a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4a43      	ldr	r2, [pc, #268]	; (80069a4 <UART_AdvFeatureConfig+0x148>)
 8006898:	4013      	ands	r3, r2
 800689a:	0019      	movs	r1, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	2202      	movs	r2, #2
 80068ae:	4013      	ands	r3, r2
 80068b0:	d00b      	beq.n	80068ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	4a3b      	ldr	r2, [pc, #236]	; (80069a8 <UART_AdvFeatureConfig+0x14c>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	0019      	movs	r1, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2204      	movs	r2, #4
 80068d0:	4013      	ands	r3, r2
 80068d2:	d00b      	beq.n	80068ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4a34      	ldr	r2, [pc, #208]	; (80069ac <UART_AdvFeatureConfig+0x150>)
 80068dc:	4013      	ands	r3, r2
 80068de:	0019      	movs	r1, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	2210      	movs	r2, #16
 80068f2:	4013      	ands	r3, r2
 80068f4:	d00b      	beq.n	800690e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <UART_AdvFeatureConfig+0x154>)
 80068fe:	4013      	ands	r3, r2
 8006900:	0019      	movs	r1, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	2220      	movs	r2, #32
 8006914:	4013      	ands	r3, r2
 8006916:	d00b      	beq.n	8006930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	4a25      	ldr	r2, [pc, #148]	; (80069b4 <UART_AdvFeatureConfig+0x158>)
 8006920:	4013      	ands	r3, r2
 8006922:	0019      	movs	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	2240      	movs	r2, #64	; 0x40
 8006936:	4013      	ands	r3, r2
 8006938:	d01d      	beq.n	8006976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <UART_AdvFeatureConfig+0x15c>)
 8006942:	4013      	ands	r3, r2
 8006944:	0019      	movs	r1, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006956:	2380      	movs	r3, #128	; 0x80
 8006958:	035b      	lsls	r3, r3, #13
 800695a:	429a      	cmp	r2, r3
 800695c:	d10b      	bne.n	8006976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4a15      	ldr	r2, [pc, #84]	; (80069bc <UART_AdvFeatureConfig+0x160>)
 8006966:	4013      	ands	r3, r2
 8006968:	0019      	movs	r1, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	4013      	ands	r3, r2
 800697e:	d00b      	beq.n	8006998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4a0e      	ldr	r2, [pc, #56]	; (80069c0 <UART_AdvFeatureConfig+0x164>)
 8006988:	4013      	ands	r3, r2
 800698a:	0019      	movs	r1, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	605a      	str	r2, [r3, #4]
  }
}
 8006998:	46c0      	nop			; (mov r8, r8)
 800699a:	46bd      	mov	sp, r7
 800699c:	b002      	add	sp, #8
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	ffff7fff 	.word	0xffff7fff
 80069a4:	fffdffff 	.word	0xfffdffff
 80069a8:	fffeffff 	.word	0xfffeffff
 80069ac:	fffbffff 	.word	0xfffbffff
 80069b0:	ffffefff 	.word	0xffffefff
 80069b4:	ffffdfff 	.word	0xffffdfff
 80069b8:	ffefffff 	.word	0xffefffff
 80069bc:	ff9fffff 	.word	0xff9fffff
 80069c0:	fff7ffff 	.word	0xfff7ffff

080069c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b092      	sub	sp, #72	; 0x48
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2290      	movs	r2, #144	; 0x90
 80069d0:	2100      	movs	r1, #0
 80069d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d4:	f7fc fe72 	bl	80036bc <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2208      	movs	r2, #8
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d12d      	bne.n	8006a46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ec:	2280      	movs	r2, #128	; 0x80
 80069ee:	0391      	lsls	r1, r2, #14
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4a47      	ldr	r2, [pc, #284]	; (8006b10 <UART_CheckIdleState+0x14c>)
 80069f4:	9200      	str	r2, [sp, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f000 f88e 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 80069fc:	1e03      	subs	r3, r0, #0
 80069fe:	d022      	beq.n	8006a46 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a00:	f3ef 8310 	mrs	r3, PRIMASK
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f383 8810 	msr	PRIMASK, r3
}
 8006a14:	46c0      	nop			; (mov r8, r8)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	438a      	bics	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	f383 8810 	msr	PRIMASK, r3
}
 8006a30:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2288      	movs	r2, #136	; 0x88
 8006a36:	2120      	movs	r1, #32
 8006a38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2284      	movs	r2, #132	; 0x84
 8006a3e:	2100      	movs	r1, #0
 8006a40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e060      	b.n	8006b08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d146      	bne.n	8006ae2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	03d1      	lsls	r1, r2, #15
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <UART_CheckIdleState+0x14c>)
 8006a5e:	9200      	str	r2, [sp, #0]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f000 f859 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006a66:	1e03      	subs	r3, r0, #0
 8006a68:	d03b      	beq.n	8006ae2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
 8006a74:	2301      	movs	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4922      	ldr	r1, [pc, #136]	; (8006b14 <UART_CheckIdleState+0x150>)
 8006a8c:	400a      	ands	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006aa2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f383 8810 	msr	PRIMASK, r3
}
 8006ab0:	46c0      	nop			; (mov r8, r8)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2101      	movs	r1, #1
 8006abe:	438a      	bics	r2, r1
 8006ac0:	609a      	str	r2, [r3, #8]
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	228c      	movs	r2, #140	; 0x8c
 8006ad2:	2120      	movs	r1, #32
 8006ad4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2284      	movs	r2, #132	; 0x84
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e012      	b.n	8006b08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2288      	movs	r2, #136	; 0x88
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	228c      	movs	r2, #140	; 0x8c
 8006aee:	2120      	movs	r1, #32
 8006af0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2284      	movs	r2, #132	; 0x84
 8006b02:	2100      	movs	r1, #0
 8006b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b010      	add	sp, #64	; 0x40
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	01ffffff 	.word	0x01ffffff
 8006b14:	fffffedf 	.word	0xfffffedf

08006b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	1dfb      	adds	r3, r7, #7
 8006b26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	e051      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	d04e      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b30:	f7fc fdc4 	bl	80036bc <HAL_GetTick>
 8006b34:	0002      	movs	r2, r0
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d302      	bcc.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e051      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2204      	movs	r2, #4
 8006b52:	4013      	ands	r3, r2
 8006b54:	d03b      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d038      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d035      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d111      	bne.n	8006b94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f000 f83c 	bl	8006bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2290      	movs	r2, #144	; 0x90
 8006b84:	2108      	movs	r1, #8
 8006b86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2284      	movs	r2, #132	; 0x84
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e02c      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	69da      	ldr	r2, [r3, #28]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	2380      	movs	r3, #128	; 0x80
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d112      	bne.n	8006bce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2280      	movs	r2, #128	; 0x80
 8006bae:	0112      	lsls	r2, r2, #4
 8006bb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 f81f 	bl	8006bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2290      	movs	r2, #144	; 0x90
 8006bbe:	2120      	movs	r1, #32
 8006bc0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2284      	movs	r2, #132	; 0x84
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e00f      	b.n	8006bee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	425a      	negs	r2, r3
 8006bde:	4153      	adcs	r3, r2
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	001a      	movs	r2, r3
 8006be4:	1dfb      	adds	r3, r7, #7
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d09e      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b004      	add	sp, #16
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08e      	sub	sp, #56	; 0x38
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c00:	f3ef 8310 	mrs	r3, PRIMASK
 8006c04:	617b      	str	r3, [r7, #20]
  return(result);
 8006c06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f383 8810 	msr	PRIMASK, r3
}
 8006c14:	46c0      	nop			; (mov r8, r8)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4926      	ldr	r1, [pc, #152]	; (8006cbc <UART_EndRxTransfer+0xc4>)
 8006c22:	400a      	ands	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	f383 8810 	msr	PRIMASK, r3
}
 8006c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c32:	f3ef 8310 	mrs	r3, PRIMASK
 8006c36:	623b      	str	r3, [r7, #32]
  return(result);
 8006c38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	491b      	ldr	r1, [pc, #108]	; (8006cc0 <UART_EndRxTransfer+0xc8>)
 8006c54:	400a      	ands	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f383 8810 	msr	PRIMASK, r3
}
 8006c62:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d118      	bne.n	8006c9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c76:	2301      	movs	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f383 8810 	msr	PRIMASK, r3
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2110      	movs	r1, #16
 8006c8e:	438a      	bics	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f383 8810 	msr	PRIMASK, r3
}
 8006c9c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	228c      	movs	r2, #140	; 0x8c
 8006ca2:	2120      	movs	r1, #32
 8006ca4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b00e      	add	sp, #56	; 0x38
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	fffffedf 	.word	0xfffffedf
 8006cc0:	effffffe 	.word	0xeffffffe

08006cc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2284      	movs	r2, #132	; 0x84
 8006cd0:	5c9b      	ldrb	r3, [r3, r2]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_UARTEx_DisableFifoMode+0x16>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e027      	b.n	8006d2a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2284      	movs	r2, #132	; 0x84
 8006cde:	2101      	movs	r1, #1
 8006ce0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2288      	movs	r2, #136	; 0x88
 8006ce6:	2124      	movs	r1, #36	; 0x24
 8006ce8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	438a      	bics	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a0b      	ldr	r2, [pc, #44]	; (8006d34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2288      	movs	r2, #136	; 0x88
 8006d1c:	2120      	movs	r1, #32
 8006d1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2284      	movs	r2, #132	; 0x84
 8006d24:	2100      	movs	r1, #0
 8006d26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b004      	add	sp, #16
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	dfffffff 	.word	0xdfffffff

08006d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2284      	movs	r2, #132	; 0x84
 8006d46:	5c9b      	ldrb	r3, [r3, r2]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e02e      	b.n	8006dae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2284      	movs	r2, #132	; 0x84
 8006d54:	2101      	movs	r1, #1
 8006d56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2288      	movs	r2, #136	; 0x88
 8006d5c:	2124      	movs	r1, #36	; 0x24
 8006d5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2101      	movs	r1, #1
 8006d74:	438a      	bics	r2, r1
 8006d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	08d9      	lsrs	r1, r3, #3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 f854 	bl	8006e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2288      	movs	r2, #136	; 0x88
 8006da0:	2120      	movs	r1, #32
 8006da2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2284      	movs	r2, #132	; 0x84
 8006da8:	2100      	movs	r1, #0
 8006daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2284      	movs	r2, #132	; 0x84
 8006dc6:	5c9b      	ldrb	r3, [r3, r2]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e02f      	b.n	8006e30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2284      	movs	r2, #132	; 0x84
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2288      	movs	r2, #136	; 0x88
 8006ddc:	2124      	movs	r1, #36	; 0x24
 8006dde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2101      	movs	r1, #1
 8006df4:	438a      	bics	r2, r1
 8006df6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	0019      	movs	r1, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0018      	movs	r0, r3
 8006e12:	f000 f813 	bl	8006e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2288      	movs	r2, #136	; 0x88
 8006e22:	2120      	movs	r1, #32
 8006e24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2284      	movs	r2, #132	; 0x84
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	f1ffffff 	.word	0xf1ffffff

08006e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d108      	bne.n	8006e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	226a      	movs	r2, #106	; 0x6a
 8006e50:	2101      	movs	r1, #1
 8006e52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2268      	movs	r2, #104	; 0x68
 8006e58:	2101      	movs	r1, #1
 8006e5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e5c:	e043      	b.n	8006ee6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e5e:	260f      	movs	r6, #15
 8006e60:	19bb      	adds	r3, r7, r6
 8006e62:	2208      	movs	r2, #8
 8006e64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e66:	200e      	movs	r0, #14
 8006e68:	183b      	adds	r3, r7, r0
 8006e6a:	2208      	movs	r2, #8
 8006e6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	0e5b      	lsrs	r3, r3, #25
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	240d      	movs	r4, #13
 8006e7a:	193b      	adds	r3, r7, r4
 8006e7c:	2107      	movs	r1, #7
 8006e7e:	400a      	ands	r2, r1
 8006e80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	0f5b      	lsrs	r3, r3, #29
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	250c      	movs	r5, #12
 8006e8e:	197b      	adds	r3, r7, r5
 8006e90:	2107      	movs	r1, #7
 8006e92:	400a      	ands	r2, r1
 8006e94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e96:	183b      	adds	r3, r7, r0
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	197a      	adds	r2, r7, r5
 8006e9c:	7812      	ldrb	r2, [r2, #0]
 8006e9e:	4914      	ldr	r1, [pc, #80]	; (8006ef0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
 8006ea2:	435a      	muls	r2, r3
 8006ea4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ea6:	197b      	adds	r3, r7, r5
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006eac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eae:	0019      	movs	r1, r3
 8006eb0:	f7f9 f9ce 	bl	8000250 <__divsi3>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	b299      	uxth	r1, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	226a      	movs	r2, #106	; 0x6a
 8006ebc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ebe:	19bb      	adds	r3, r7, r6
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	193a      	adds	r2, r7, r4
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	490a      	ldr	r1, [pc, #40]	; (8006ef0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006ec8:	5c8a      	ldrb	r2, [r1, r2]
 8006eca:	435a      	muls	r2, r3
 8006ecc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ece:	193b      	adds	r3, r7, r4
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006ed4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ed6:	0019      	movs	r1, r3
 8006ed8:	f7f9 f9ba 	bl	8000250 <__divsi3>
 8006edc:	0003      	movs	r3, r0
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2268      	movs	r2, #104	; 0x68
 8006ee4:	5299      	strh	r1, [r3, r2]
}
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b005      	add	sp, #20
 8006eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	0800fc78 	.word	0x0800fc78
 8006ef4:	0800fc80 	.word	0x0800fc80

08006ef8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8006ef8:	b5b0      	push	{r4, r5, r7, lr}
 8006efa:	4c73      	ldr	r4, [pc, #460]	; (80070c8 <my_gnss_acq_coordinates+0x1d0>)
 8006efc:	44a5      	add	sp, r4
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8006f02:	4b72      	ldr	r3, [pc, #456]	; (80070cc <my_gnss_acq_coordinates+0x1d4>)
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8006f0a:	4b71      	ldr	r3, [pc, #452]	; (80070d0 <my_gnss_acq_coordinates+0x1d8>)
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8006f12:	4b70      	ldr	r3, [pc, #448]	; (80070d4 <my_gnss_acq_coordinates+0x1dc>)
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8006f1a:	4b6f      	ldr	r3, [pc, #444]	; (80070d8 <my_gnss_acq_coordinates+0x1e0>)
 8006f1c:	18fb      	adds	r3, r7, r3
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8006f22:	4b6e      	ldr	r3, [pc, #440]	; (80070dc <my_gnss_acq_coordinates+0x1e4>)
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006f2a:	4b6d      	ldr	r3, [pc, #436]	; (80070e0 <my_gnss_acq_coordinates+0x1e8>)
 8006f2c:	2488      	movs	r4, #136	; 0x88
 8006f2e:	00a4      	lsls	r4, r4, #2
 8006f30:	191b      	adds	r3, r3, r4
 8006f32:	19db      	adds	r3, r3, r7
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	22f6      	movs	r2, #246	; 0xf6
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f001 ffea 	bl	8008f18 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8006f44:	4b67      	ldr	r3, [pc, #412]	; (80070e4 <my_gnss_acq_coordinates+0x1ec>)
 8006f46:	191b      	adds	r3, r3, r4
 8006f48:	19db      	adds	r3, r3, r7
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	22f6      	movs	r2, #246	; 0xf6
 8006f52:	2100      	movs	r1, #0
 8006f54:	0018      	movs	r0, r3
 8006f56:	f001 ffdf 	bl	8008f18 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8006f5a:	4b63      	ldr	r3, [pc, #396]	; (80070e8 <my_gnss_acq_coordinates+0x1f0>)
 8006f5c:	2286      	movs	r2, #134	; 0x86
 8006f5e:	0092      	lsls	r2, r2, #2
 8006f60:	18ba      	adds	r2, r7, r2
 8006f62:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8006f64:	4b61      	ldr	r3, [pc, #388]	; (80070ec <my_gnss_acq_coordinates+0x1f4>)
 8006f66:	2285      	movs	r2, #133	; 0x85
 8006f68:	0092      	lsls	r2, r2, #2
 8006f6a:	18ba      	adds	r2, r7, r2
 8006f6c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8006f6e:	4b60      	ldr	r3, [pc, #384]	; (80070f0 <my_gnss_acq_coordinates+0x1f8>)
 8006f70:	2284      	movs	r2, #132	; 0x84
 8006f72:	0092      	lsls	r2, r2, #2
 8006f74:	18ba      	adds	r2, r7, r2
 8006f76:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8006f78:	4b5e      	ldr	r3, [pc, #376]	; (80070f4 <my_gnss_acq_coordinates+0x1fc>)
 8006f7a:	2283      	movs	r2, #131	; 0x83
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	18ba      	adds	r2, r7, r2
 8006f80:	6013      	str	r3, [r2, #0]
	char		s[10] = { 0 } ;
 8006f82:	4b5d      	ldr	r3, [pc, #372]	; (80070f8 <my_gnss_acq_coordinates+0x200>)
 8006f84:	191b      	adds	r3, r3, r4
 8006f86:	19db      	adds	r3, r3, r7
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	2206      	movs	r2, #6
 8006f90:	2100      	movs	r1, #0
 8006f92:	0018      	movs	r0, r3
 8006f94:	f001 ffc0 	bl	8008f18 <memset>

	fix3d->fix_mode = '\0' ;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 100 ;
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b56      	ldr	r3, [pc, #344]	; (80070fc <my_gnss_acq_coordinates+0x204>)
 8006fa4:	608a      	str	r2, [r1, #8]
 8006fa6:	60cb      	str	r3, [r1, #12]

	while ( tim_seconds < fix_acq_ths )
 8006fa8:	e06b      	b.n	8007082 <my_gnss_acq_coordinates+0x18a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, false ) ;
 8006faa:	4c4a      	ldr	r4, [pc, #296]	; (80070d4 <my_gnss_acq_coordinates+0x1dc>)
 8006fac:	193b      	adds	r3, r7, r4
 8006fae:	2100      	movs	r1, #0
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7fb ff69 	bl	8002e88 <my_gnss_receive_byte>
		if ( rx_byte )
 8006fb6:	0020      	movs	r0, r4
 8006fb8:	183b      	adds	r3, r7, r0
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	4c44      	ldr	r4, [pc, #272]	; (80070d0 <my_gnss_acq_coordinates+0x1d8>)
 8006fbe:	193a      	adds	r2, r7, r4
 8006fc0:	1939      	adds	r1, r7, r4
 8006fc2:	7809      	ldrb	r1, [r1, #0]
 8006fc4:	7011      	strb	r1, [r2, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d05b      	beq.n	8007082 <my_gnss_acq_coordinates+0x18a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8006fca:	4b43      	ldr	r3, [pc, #268]	; (80070d8 <my_gnss_acq_coordinates+0x1e0>)
 8006fcc:	18fa      	adds	r2, r7, r3
 8006fce:	2588      	movs	r5, #136	; 0x88
 8006fd0:	006d      	lsls	r5, r5, #1
 8006fd2:	1979      	adds	r1, r7, r5
 8006fd4:	183b      	adds	r3, r7, r0
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	f000 f973 	bl	80072c2 <my_nmea_message>
 8006fdc:	0001      	movs	r1, r0
 8006fde:	193b      	adds	r3, r7, r4
 8006fe0:	193a      	adds	r2, r7, r4
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	2902      	cmp	r1, #2
 8006fe8:	d14b      	bne.n	8007082 <my_gnss_acq_coordinates+0x18a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8006fea:	197b      	adds	r3, r7, r5
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 f9d4 	bl	800739a <is_my_nmea_checksum_ok>
 8006ff2:	0003      	movs	r3, r0
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	193b      	adds	r3, r7, r4
 8006ff8:	193a      	adds	r2, r7, r4
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	2900      	cmp	r1, #0
 8007000:	d03f      	beq.n	8007082 <my_gnss_acq_coordinates+0x18a>
				{
					if ( !is_utc_saved )
 8007002:	193b      	adds	r3, r7, r4
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2201      	movs	r2, #1
 8007008:	4053      	eors	r3, r2
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <my_gnss_acq_coordinates+0x144>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7c1b      	ldrb	r3, [r3, #16]
 8007014:	2b33      	cmp	r3, #51	; 0x33
 8007016:	d111      	bne.n	800703c <my_gnss_acq_coordinates+0x144>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8007018:	2385      	movs	r3, #133	; 0x85
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	197b      	adds	r3, r7, r5
 8007022:	0011      	movs	r1, r2
 8007024:	0018      	movs	r0, r3
 8007026:	f001 ffa4 	bl	8008f72 <strstr>
 800702a:	1e03      	subs	r3, r0, #0
 800702c:	d006      	beq.n	800703c <my_gnss_acq_coordinates+0x144>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800702e:	197b      	adds	r3, r7, r5
 8007030:	0018      	movs	r0, r3
 8007032:	f000 f8ad 	bl	8007190 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8007036:	193b      	adds	r3, r7, r4
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					//if ( gsv_tns < MIN_TNS )
					//{
						if ( strstr ( (char*) nmea_message , nmea_gsv_label ) )
 800703c:	2386      	movs	r3, #134	; 0x86
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	2488      	movs	r4, #136	; 0x88
 8007046:	0064      	lsls	r4, r4, #1
 8007048:	193b      	adds	r3, r7, r4
 800704a:	0011      	movs	r1, r2
 800704c:	0018      	movs	r0, r3
 800704e:	f001 ff90 	bl	8008f72 <strstr>
 8007052:	1e03      	subs	r3, r0, #0
 8007054:	d015      	beq.n	8007082 <my_gnss_acq_coordinates+0x18a>
						{
							if ( tim_seconds > min_tns_time_ths )
							{
								//break ;
							}
							gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8007056:	193b      	adds	r3, r7, r4
 8007058:	0018      	movs	r0, r3
 800705a:	f000 fb43 	bl	80076e4 <my_nmea_get_gsv_tns>
 800705e:	0003      	movs	r3, r0
 8007060:	001a      	movs	r2, r3
 8007062:	491e      	ldr	r1, [pc, #120]	; (80070dc <my_gnss_acq_coordinates+0x1e4>)
 8007064:	187b      	adds	r3, r7, r1
 8007066:	701a      	strb	r2, [r3, #0]
							sprintf ( s , "%d  %d" , gsv_tns , tim_seconds) ;
 8007068:	187b      	adds	r3, r7, r1
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	4b24      	ldr	r3, [pc, #144]	; (8007100 <my_gnss_acq_coordinates+0x208>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	4924      	ldr	r1, [pc, #144]	; (8007104 <my_gnss_acq_coordinates+0x20c>)
 8007072:	2408      	movs	r4, #8
 8007074:	1938      	adds	r0, r7, r4
 8007076:	f001 feb9 	bl	8008dec <sprintf>
							send_debug_logs ( s ) ;
 800707a:	193b      	adds	r3, r7, r4
 800707c:	0018      	movs	r0, r3
 800707e:	f7fb fe6b 	bl	8002d58 <send_debug_logs>
	while ( tim_seconds < fix_acq_ths )
 8007082:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <my_gnss_acq_coordinates+0x208>)
 8007084:	881a      	ldrh	r2, [r3, #0]
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <my_gnss_acq_coordinates+0x210>)
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d38d      	bcc.n	8006faa <my_gnss_acq_coordinates+0xb2>
					*/
				}
			}
		}
	}
	if ( gngll_message[0] )
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <my_gnss_acq_coordinates+0x1ec>)
 8007090:	2288      	movs	r2, #136	; 0x88
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	189b      	adds	r3, r3, r2
 8007096:	19db      	adds	r3, r3, r7
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <my_gnss_acq_coordinates+0x1bc>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	2314      	movs	r3, #20
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	0011      	movs	r1, r2
 80070a6:	0018      	movs	r0, r3
 80070a8:	f000 fa32 	bl	8007510 <my_nmea_get_gngll_coordinates>
		r = true ;
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <my_gnss_acq_coordinates+0x1d4>)
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	2201      	movs	r2, #1
 80070b2:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <my_gnss_acq_coordinates+0x1d4>)
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	781b      	ldrb	r3, [r3, #0]
}
 80070ba:	0018      	movs	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	2388      	movs	r3, #136	; 0x88
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	449d      	add	sp, r3
 80070c4:	bdb0      	pop	{r4, r5, r7, pc}
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	fffffde0 	.word	0xfffffde0
 80070cc:	0000021f 	.word	0x0000021f
 80070d0:	0000021e 	.word	0x0000021e
 80070d4:	0000020b 	.word	0x0000020b
 80070d8:	0000020a 	.word	0x0000020a
 80070dc:	0000021d 	.word	0x0000021d
 80070e0:	fffffef0 	.word	0xfffffef0
 80070e4:	fffffdf4 	.word	0xfffffdf4
 80070e8:	0800faf8 	.word	0x0800faf8
 80070ec:	0800fb00 	.word	0x0800fb00
 80070f0:	0800fb08 	.word	0x0800fb08
 80070f4:	0800fb10 	.word	0x0800fb10
 80070f8:	fffffde8 	.word	0xfffffde8
 80070fc:	40590000 	.word	0x40590000
 8007100:	20000a40 	.word	0x20000a40
 8007104:	0800fb18 	.word	0x0800fb18
 8007108:	2000000e 	.word	0x2000000e

0800710c <my_rtc_get_dt_s>:
{
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
}
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	b08d      	sub	sp, #52	; 0x34
 8007110:	af04      	add	r7, sp, #16
 8007112:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8007114:	2508      	movs	r5, #8
 8007116:	1979      	adds	r1, r7, r5
 8007118:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <my_rtc_get_dt_s+0x7c>)
 800711a:	2200      	movs	r2, #0
 800711c:	0018      	movs	r0, r3
 800711e:	f7fd fe55 	bl	8004dcc <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8007122:	241c      	movs	r4, #28
 8007124:	1939      	adds	r1, r7, r4
 8007126:	4b18      	ldr	r3, [pc, #96]	; (8007188 <my_rtc_get_dt_s+0x7c>)
 8007128:	2200      	movs	r2, #0
 800712a:	0018      	movs	r0, r3
 800712c:	f7fd ff3c 	bl	8004fa8 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8007130:	0021      	movs	r1, r4
 8007132:	187b      	adds	r3, r7, r1
 8007134:	78db      	ldrb	r3, [r3, #3]
 8007136:	22fa      	movs	r2, #250	; 0xfa
 8007138:	00d2      	lsls	r2, r2, #3
 800713a:	189a      	adds	r2, r3, r2
 800713c:	187b      	adds	r3, r7, r1
 800713e:	785b      	ldrb	r3, [r3, #1]
 8007140:	469c      	mov	ip, r3
 8007142:	187b      	adds	r3, r7, r1
 8007144:	789b      	ldrb	r3, [r3, #2]
 8007146:	001c      	movs	r4, r3
 8007148:	0028      	movs	r0, r5
 800714a:	183b      	adds	r3, r7, r0
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	001d      	movs	r5, r3
 8007150:	183b      	adds	r3, r7, r0
 8007152:	785b      	ldrb	r3, [r3, #1]
 8007154:	001e      	movs	r6, r3
 8007156:	183b      	adds	r3, r7, r0
 8007158:	789b      	ldrb	r3, [r3, #2]
 800715a:	490c      	ldr	r1, [pc, #48]	; (800718c <my_rtc_get_dt_s+0x80>)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	9602      	str	r6, [sp, #8]
 8007162:	9501      	str	r5, [sp, #4]
 8007164:	9400      	str	r4, [sp, #0]
 8007166:	4663      	mov	r3, ip
 8007168:	f001 fe40 	bl	8008dec <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800716c:	211c      	movs	r1, #28
 800716e:	187b      	adds	r3, r7, r1
 8007170:	78db      	ldrb	r3, [r3, #3]
 8007172:	b29b      	uxth	r3, r3
 8007174:	22fa      	movs	r2, #250	; 0xfa
 8007176:	00d2      	lsls	r2, r2, #3
 8007178:	4694      	mov	ip, r2
 800717a:	4463      	add	r3, ip
 800717c:	b29b      	uxth	r3, r3
}
 800717e:	0018      	movs	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	b009      	add	sp, #36	; 0x24
 8007184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	200006dc 	.word	0x200006dc
 800718c:	0800fb60 	.word	0x0800fb60

08007190 <my_rtc_set_dt_from_nmea_rmc>:
	}
	return false ;
}

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8007190:	b5b0      	push	{r4, r5, r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8007198:	2508      	movs	r5, #8
 800719a:	197b      	adds	r3, r7, r5
 800719c:	1cda      	adds	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	0011      	movs	r1, r2
 80071a2:	0018      	movs	r0, r3
 80071a4:	f000 fad6 	bl	8007754 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 80071a8:	197b      	adds	r3, r7, r5
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	0011      	movs	r1, r2
 80071b0:	0018      	movs	r0, r3
 80071b2:	f000 fb09 	bl	80077c8 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 80071b6:	197b      	adds	r3, r7, r5
 80071b8:	1c9a      	adds	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0011      	movs	r1, r2
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fb3c 	bl	800783c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 80071c4:	240c      	movs	r4, #12
 80071c6:	193a      	adds	r2, r7, r4
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	0011      	movs	r1, r2
 80071cc:	0018      	movs	r0, r3
 80071ce:	f000 fb6f 	bl	80078b0 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 80071d2:	193b      	adds	r3, r7, r4
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0011      	movs	r1, r2
 80071da:	0018      	movs	r0, r3
 80071dc:	f000 fba2 	bl	8007924 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 80071e0:	193b      	adds	r3, r7, r4
 80071e2:	1c9a      	adds	r2, r3, #2
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	0011      	movs	r1, r2
 80071e8:	0018      	movs	r0, r3
 80071ea:	f000 fbd5 	bl	8007998 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	1d1a      	adds	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	0011      	movs	r1, r2
 80071f6:	0018      	movs	r0, r3
 80071f8:	f000 fc08 	bl	8007a0c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80071fc:	193b      	adds	r3, r7, r4
 80071fe:	2200      	movs	r2, #0
 8007200:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007202:	193b      	adds	r3, r7, r4
 8007204:	2200      	movs	r2, #0
 8007206:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800720a:	0018      	movs	r0, r3
 800720c:	f7fe f991 	bl	8005532 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8007210:	1939      	adds	r1, r7, r4
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8007214:	2200      	movs	r2, #0
 8007216:	0018      	movs	r0, r3
 8007218:	f7fd fd30 	bl	8004c7c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800721c:	1979      	adds	r1, r7, r5
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8007220:	2200      	movs	r2, #0
 8007222:	0018      	movs	r0, r3
 8007224:	f7fd fe2e 	bl	8004e84 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800722a:	0018      	movs	r0, r3
 800722c:	f7fe f9b5 	bl	800559a <HAL_RTCEx_DisableBypassShadow>
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b008      	add	sp, #32
 8007236:	bdb0      	pop	{r4, r5, r7, pc}
 8007238:	200006dc 	.word	0x200006dc

0800723c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	0008      	movs	r0, r1
 8007246:	0011      	movs	r1, r2
 8007248:	1cfb      	adds	r3, r7, #3
 800724a:	1c02      	adds	r2, r0, #0
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	1cbb      	adds	r3, r7, #2
 8007250:	1c0a      	adds	r2, r1, #0
 8007252:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8007254:	230f      	movs	r3, #15
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800725c:	230e      	movs	r3, #14
 800725e:	18fb      	adds	r3, r7, r3
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8007264:	e01c      	b.n	80072a0 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8007266:	230f      	movs	r3, #15
 8007268:	18fb      	adds	r3, r7, r3
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	18d3      	adds	r3, r2, r3
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	1cfa      	adds	r2, r7, #3
 8007274:	7812      	ldrb	r2, [r2, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d105      	bne.n	8007286 <my_find_char_position+0x4a>
			p++ ;
 800727a:	210e      	movs	r1, #14
 800727c:	187b      	adds	r3, r7, r1
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	187b      	adds	r3, r7, r1
 8007282:	3201      	adds	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8007286:	230e      	movs	r3, #14
 8007288:	18fa      	adds	r2, r7, r3
 800728a:	1cbb      	adds	r3, r7, #2
 800728c:	7812      	ldrb	r2, [r2, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d00e      	beq.n	80072b2 <my_find_char_position+0x76>
			break ;
		i++ ;
 8007294:	210f      	movs	r1, #15
 8007296:	187b      	adds	r3, r7, r1
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	187b      	adds	r3, r7, r1
 800729c:	3201      	adds	r2, #1
 800729e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 80072a0:	230f      	movs	r3, #15
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	18d3      	adds	r3, r2, r3
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1da      	bne.n	8007266 <my_find_char_position+0x2a>
 80072b0:	e000      	b.n	80072b4 <my_find_char_position+0x78>
			break ;
 80072b2:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 80072b4:	230f      	movs	r3, #15
 80072b6:	18fb      	adds	r3, r7, r3
 80072b8:	781b      	ldrb	r3, [r3, #0]
}
 80072ba:	0018      	movs	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	b004      	add	sp, #16
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b24      	cmp	r3, #36	; 0x24
 80072d4:	d117      	bne.n	8007306 <my_nmea_message+0x44>
    {
        *i = 0 ;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	b2d1      	uxtb	r1, r2
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7011      	strb	r1, [r2, #0]
 80072e8:	001a      	movs	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	189b      	adds	r3, r3, r2
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	001a      	movs	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8007302:	2300      	movs	r3, #0
 8007304:	e045      	b.n	8007392 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b1f      	cmp	r3, #31
 800730c:	d907      	bls.n	800731e <my_nmea_message+0x5c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b7e      	cmp	r3, #126	; 0x7e
 8007314:	d803      	bhi.n	800731e <my_nmea_message+0x5c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <my_nmea_message+0x64>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b0d      	cmp	r3, #13
 8007324:	d114      	bne.n	8007350 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	b2d1      	uxtb	r1, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	7011      	strb	r1, [r2, #0]
 8007332:	001a      	movs	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	189b      	adds	r3, r3, r2
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	7812      	ldrb	r2, [r2, #0]
 800733c:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	001a      	movs	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	189b      	adds	r3, r3, r2
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800734c:	2301      	movs	r3, #1
 800734e:	e020      	b.n	8007392 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b0a      	cmp	r3, #10
 8007356:	d11a      	bne.n	800738e <my_nmea_message+0xcc>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d916      	bls.n	800738e <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	3b01      	subs	r3, #1
 8007366:	b2da      	uxtb	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	001a      	movs	r2, r3
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	189b      	adds	r3, r3, r2
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b0d      	cmp	r3, #13
 800737a:	d108      	bne.n	800738e <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	001a      	movs	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	189b      	adds	r3, r3, r2
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800738a:	2302      	movs	r3, #2
 800738c:	e001      	b.n	8007392 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800738e:	2301      	movs	r3, #1
 8007390:	425b      	negs	r3, r3
}
 8007392:	0018      	movs	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	b004      	add	sp, #16
 8007398:	bd80      	pop	{r7, pc}

0800739a <is_my_nmea_checksum_ok>:
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
}


bool is_my_nmea_checksum_ok ( const char* s )
{
 800739a:	b590      	push	{r4, r7, lr}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 80073a2:	230f      	movs	r3, #15
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 80073aa:	230e      	movs	r3, #14
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	2201      	movs	r2, #1
 80073b0:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 80073b2:	e00f      	b.n	80073d4 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 80073b4:	220e      	movs	r2, #14
 80073b6:	18bb      	adds	r3, r7, r2
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	18ba      	adds	r2, r7, r2
 80073bc:	1c59      	adds	r1, r3, #1
 80073be:	7011      	strb	r1, [r2, #0]
 80073c0:	001a      	movs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	189b      	adds	r3, r3, r2
 80073c6:	7819      	ldrb	r1, [r3, #0]
 80073c8:	220f      	movs	r2, #15
 80073ca:	18bb      	adds	r3, r7, r2
 80073cc:	18ba      	adds	r2, r7, r2
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	404a      	eors	r2, r1
 80073d2:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 80073d4:	210e      	movs	r1, #14
 80073d6:	187b      	adds	r3, r7, r1
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	18d3      	adds	r3, r2, r3
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b2a      	cmp	r3, #42	; 0x2a
 80073e2:	d00a      	beq.n	80073fa <is_my_nmea_checksum_ok+0x60>
 80073e4:	187b      	adds	r3, r7, r1
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	18d3      	adds	r3, r2, r3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <is_my_nmea_checksum_ok+0x60>
 80073f2:	187b      	adds	r3, r7, r1
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1dc      	bne.n	80073b4 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 80073fa:	230f      	movs	r3, #15
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	781c      	ldrb	r4, [r3, #0]
 8007400:	210e      	movs	r1, #14
 8007402:	187b      	adds	r3, r7, r1
 8007404:	187a      	adds	r2, r7, r1
 8007406:	7812      	ldrb	r2, [r2, #0]
 8007408:	3201      	adds	r2, #1
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	187b      	adds	r3, r7, r1
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	18d3      	adds	r3, r2, r3
 8007414:	2210      	movs	r2, #16
 8007416:	2100      	movs	r1, #0
 8007418:	0018      	movs	r0, r3
 800741a:	f001 fc17 	bl	8008c4c <strtol>
 800741e:	0003      	movs	r3, r0
 8007420:	1ae3      	subs	r3, r4, r3
 8007422:	425a      	negs	r2, r3
 8007424:	4153      	adcs	r3, r2
 8007426:	b2db      	uxtb	r3, r3
}
 8007428:	0018      	movs	r0, r3
 800742a:	46bd      	mov	sp, r7
 800742c:	b005      	add	sp, #20
 800742e:	bd90      	pop	{r4, r7, pc}

08007430 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 8007430:	b5b0      	push	{r4, r5, r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	000a      	movs	r2, r1
 800743a:	1cfb      	adds	r3, r7, #3
 800743c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800743e:	2308      	movs	r3, #8
 8007440:	18fa      	adds	r2, r7, r3
 8007442:	492f      	ldr	r1, [pc, #188]	; (8007500 <nmea2decimal+0xd0>)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	0018      	movs	r0, r3
 8007448:	f001 fcf0 	bl	8008e2c <sscanf>
    min = deg / 100 ;
 800744c:	68b8      	ldr	r0, [r7, #8]
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	4b2c      	ldr	r3, [pc, #176]	; (8007504 <nmea2decimal+0xd4>)
 8007454:	f7f9 fd10 	bl	8000e78 <__aeabi_ddiv>
 8007458:	0002      	movs	r2, r0
 800745a:	000b      	movs	r3, r1
 800745c:	613a      	str	r2, [r7, #16]
 800745e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 8007460:	6938      	ldr	r0, [r7, #16]
 8007462:	6979      	ldr	r1, [r7, #20]
 8007464:	f7fa ff64 	bl	8002330 <__aeabi_d2iz>
 8007468:	0003      	movs	r3, r0
 800746a:	0018      	movs	r0, r3
 800746c:	f7fa ff96 	bl	800239c <__aeabi_i2d>
 8007470:	0002      	movs	r2, r0
 8007472:	000b      	movs	r3, r1
 8007474:	60ba      	str	r2, [r7, #8]
 8007476:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6938      	ldr	r0, [r7, #16]
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	f7fa fbb6 	bl	8001bf0 <__aeabi_dsub>
 8007484:	0002      	movs	r2, r0
 8007486:	000b      	movs	r3, r1
 8007488:	0010      	movs	r0, r2
 800748a:	0019      	movs	r1, r3
 800748c:	2200      	movs	r2, #0
 800748e:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <nmea2decimal+0xd8>)
 8007490:	f7fa f8ec 	bl	800166c <__aeabi_dmul>
 8007494:	0002      	movs	r2, r0
 8007496:	000b      	movs	r3, r1
 8007498:	613a      	str	r2, [r7, #16]
 800749a:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800749c:	2200      	movs	r2, #0
 800749e:	4b1b      	ldr	r3, [pc, #108]	; (800750c <nmea2decimal+0xdc>)
 80074a0:	6938      	ldr	r0, [r7, #16]
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	f7f9 fce8 	bl	8000e78 <__aeabi_ddiv>
 80074a8:	0002      	movs	r2, r0
 80074aa:	000b      	movs	r3, r1
 80074ac:	613a      	str	r2, [r7, #16]
 80074ae:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 80074b0:	1cfb      	adds	r3, r7, #3
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b53      	cmp	r3, #83	; 0x53
 80074b6:	d003      	beq.n	80074c0 <nmea2decimal+0x90>
 80074b8:	1cfb      	adds	r3, r7, #3
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b57      	cmp	r3, #87	; 0x57
 80074be:	d10e      	bne.n	80074de <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 80074c0:	68b8      	ldr	r0, [r7, #8]
 80074c2:	68f9      	ldr	r1, [r7, #12]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f7f9 f976 	bl	80007b8 <__aeabi_dadd>
 80074cc:	0002      	movs	r2, r0
 80074ce:	000b      	movs	r3, r1
 80074d0:	0011      	movs	r1, r2
 80074d2:	000c      	movs	r4, r1
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	0609      	lsls	r1, r1, #24
 80074d8:	4059      	eors	r1, r3
 80074da:	000d      	movs	r5, r1
 80074dc:	e009      	b.n	80074f2 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 80074de:	68b8      	ldr	r0, [r7, #8]
 80074e0:	68f9      	ldr	r1, [r7, #12]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f7f9 f967 	bl	80007b8 <__aeabi_dadd>
 80074ea:	0002      	movs	r2, r0
 80074ec:	000b      	movs	r3, r1
 80074ee:	0014      	movs	r4, r2
 80074f0:	001d      	movs	r5, r3
}
 80074f2:	0022      	movs	r2, r4
 80074f4:	002b      	movs	r3, r5
 80074f6:	0010      	movs	r0, r2
 80074f8:	0019      	movs	r1, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b006      	add	sp, #24
 80074fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007500:	0800fbac 	.word	0x0800fbac
 8007504:	40590000 	.word	0x40590000
 8007508:	40240000 	.word	0x40240000
 800750c:	40180000 	.word	0x40180000

08007510 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	b08d      	sub	sp, #52	; 0x34
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	212c      	movs	r1, #44	; 0x2c
 8007520:	0018      	movs	r0, r3
 8007522:	f7ff fe8b 	bl	800723c <my_find_char_position>
 8007526:	0003      	movs	r3, r0
 8007528:	001a      	movs	r2, r3
 800752a:	252f      	movs	r5, #47	; 0x2f
 800752c:	197b      	adds	r3, r7, r5
 800752e:	3201      	adds	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	212c      	movs	r1, #44	; 0x2c
 8007538:	0018      	movs	r0, r3
 800753a:	f7ff fe7f 	bl	800723c <my_find_char_position>
 800753e:	0003      	movs	r3, r0
 8007540:	0019      	movs	r1, r3
 8007542:	242e      	movs	r4, #46	; 0x2e
 8007544:	193b      	adds	r3, r7, r4
 8007546:	197a      	adds	r2, r7, r5
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	1a8a      	subs	r2, r1, r2
 800754c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800754e:	193b      	adds	r3, r7, r4
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	0018      	movs	r0, r3
 8007556:	f000 fa8d 	bl	8007a74 <malloc>
 800755a:	0003      	movs	r3, r0
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800755e:	197b      	adds	r3, r7, r5
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	18d1      	adds	r1, r2, r3
 8007566:	193b      	adds	r3, r7, r4
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	0018      	movs	r0, r3
 800756e:	f001 fcec 	bl	8008f4a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 8007572:	193b      	adds	r3, r7, r4
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007578:	18d3      	adds	r3, r2, r3
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800757e:	197b      	adds	r3, r7, r5
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	193b      	adds	r3, r7, r4
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	18d3      	adds	r3, r2, r3
 8007588:	3301      	adds	r3, #1
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	18d2      	adds	r2, r2, r3
 800758e:	2627      	movs	r6, #39	; 0x27
 8007590:	19bb      	adds	r3, r7, r6
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 8007596:	19bb      	adds	r3, r7, r6
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	0011      	movs	r1, r2
 800759e:	0018      	movs	r0, r3
 80075a0:	f7ff ff46 	bl	8007430 <nmea2decimal>
 80075a4:	0002      	movs	r2, r0
 80075a6:	000b      	movs	r3, r1
 80075a8:	61ba      	str	r2, [r7, #24]
 80075aa:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	0018      	movs	r0, r3
 80075b0:	f000 fa6a 	bl	8007a88 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 80075b4:	2200      	movs	r2, #0
 80075b6:	4b49      	ldr	r3, [pc, #292]	; (80076dc <my_nmea_get_gngll_coordinates+0x1cc>)
 80075b8:	69b8      	ldr	r0, [r7, #24]
 80075ba:	69f9      	ldr	r1, [r7, #28]
 80075bc:	f7fa f856 	bl	800166c <__aeabi_dmul>
 80075c0:	0002      	movs	r2, r0
 80075c2:	000b      	movs	r3, r1
 80075c4:	0010      	movs	r0, r2
 80075c6:	0019      	movs	r1, r3
 80075c8:	f008 f9dc 	bl	800f984 <round>
 80075cc:	2200      	movs	r2, #0
 80075ce:	4b43      	ldr	r3, [pc, #268]	; (80076dc <my_nmea_get_gngll_coordinates+0x1cc>)
 80075d0:	f7f9 fc52 	bl	8000e78 <__aeabi_ddiv>
 80075d4:	0002      	movs	r2, r0
 80075d6:	000b      	movs	r3, r1
 80075d8:	61ba      	str	r2, [r7, #24]
 80075da:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 80075dc:	2200      	movs	r2, #0
 80075de:	4b40      	ldr	r3, [pc, #256]	; (80076e0 <my_nmea_get_gngll_coordinates+0x1d0>)
 80075e0:	69b8      	ldr	r0, [r7, #24]
 80075e2:	69f9      	ldr	r1, [r7, #28]
 80075e4:	f7fa f842 	bl	800166c <__aeabi_dmul>
 80075e8:	0002      	movs	r2, r0
 80075ea:	000b      	movs	r3, r1
 80075ec:	0010      	movs	r0, r2
 80075ee:	0019      	movs	r1, r3
 80075f0:	f7fa fe9e 	bl	8002330 <__aeabi_d2iz>
 80075f4:	0002      	movs	r2, r0
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2203      	movs	r2, #3
 80075fe:	212c      	movs	r1, #44	; 0x2c
 8007600:	0018      	movs	r0, r3
 8007602:	f7ff fe1b 	bl	800723c <my_find_char_position>
 8007606:	0003      	movs	r3, r0
 8007608:	001a      	movs	r2, r3
 800760a:	197b      	adds	r3, r7, r5
 800760c:	3201      	adds	r2, #1
 800760e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2204      	movs	r2, #4
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff fe10 	bl	800723c <my_find_char_position>
 800761c:	0003      	movs	r3, r0
 800761e:	0019      	movs	r1, r3
 8007620:	193b      	adds	r3, r7, r4
 8007622:	197a      	adds	r2, r7, r5
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	1a8a      	subs	r2, r1, r2
 8007628:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800762a:	193b      	adds	r3, r7, r4
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	0018      	movs	r0, r3
 8007632:	f000 fa1f 	bl	8007a74 <malloc>
 8007636:	0003      	movs	r3, r0
 8007638:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800763a:	197b      	adds	r3, r7, r5
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	18d1      	adds	r1, r2, r3
 8007642:	193b      	adds	r3, r7, r4
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	0018      	movs	r0, r3
 800764a:	f001 fc7e 	bl	8008f4a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800764e:	193b      	adds	r3, r7, r4
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	18d3      	adds	r3, r2, r3
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800765a:	197b      	adds	r3, r7, r5
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	193b      	adds	r3, r7, r4
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	18d3      	adds	r3, r2, r3
 8007664:	3301      	adds	r3, #1
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	18d2      	adds	r2, r2, r3
 800766a:	19bb      	adds	r3, r7, r6
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 8007670:	19bb      	adds	r3, r7, r6
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	0011      	movs	r1, r2
 8007678:	0018      	movs	r0, r3
 800767a:	f7ff fed9 	bl	8007430 <nmea2decimal>
 800767e:	0002      	movs	r2, r0
 8007680:	000b      	movs	r3, r1
 8007682:	60ba      	str	r2, [r7, #8]
 8007684:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	0018      	movs	r0, r3
 800768a:	f000 f9fd 	bl	8007a88 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800768e:	2200      	movs	r2, #0
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <my_nmea_get_gngll_coordinates+0x1cc>)
 8007692:	68b8      	ldr	r0, [r7, #8]
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	f7f9 ffe9 	bl	800166c <__aeabi_dmul>
 800769a:	0002      	movs	r2, r0
 800769c:	000b      	movs	r3, r1
 800769e:	0010      	movs	r0, r2
 80076a0:	0019      	movs	r1, r3
 80076a2:	f008 f96f 	bl	800f984 <round>
 80076a6:	2200      	movs	r2, #0
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <my_nmea_get_gngll_coordinates+0x1cc>)
 80076aa:	f7f9 fbe5 	bl	8000e78 <__aeabi_ddiv>
 80076ae:	0002      	movs	r2, r0
 80076b0:	000b      	movs	r3, r1
 80076b2:	60ba      	str	r2, [r7, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 80076b6:	2200      	movs	r2, #0
 80076b8:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <my_nmea_get_gngll_coordinates+0x1d0>)
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	68f9      	ldr	r1, [r7, #12]
 80076be:	f7f9 ffd5 	bl	800166c <__aeabi_dmul>
 80076c2:	0002      	movs	r2, r0
 80076c4:	000b      	movs	r3, r1
 80076c6:	0010      	movs	r0, r2
 80076c8:	0019      	movs	r1, r3
 80076ca:	f7fa fe31 	bl	8002330 <__aeabi_d2iz>
 80076ce:	0002      	movs	r2, r0
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
}
 80076d4:	46c0      	nop			; (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b00d      	add	sp, #52	; 0x34
 80076da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076dc:	412e8480 	.word	0x412e8480
 80076e0:	416312d0 	.word	0x416312d0

080076e4 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 80076e4:	b5b0      	push	{r4, r5, r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 80076ec:	240e      	movs	r4, #14
 80076ee:	193b      	adds	r3, r7, r4
 80076f0:	2200      	movs	r2, #0
 80076f2:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2203      	movs	r2, #3
 80076f8:	212c      	movs	r1, #44	; 0x2c
 80076fa:	0018      	movs	r0, r3
 80076fc:	f7ff fd9e 	bl	800723c <my_find_char_position>
 8007700:	0003      	movs	r3, r0
 8007702:	001a      	movs	r2, r3
 8007704:	2517      	movs	r5, #23
 8007706:	197b      	adds	r3, r7, r5
 8007708:	3201      	adds	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800770c:	2003      	movs	r0, #3
 800770e:	f000 f9b1 	bl	8007a74 <malloc>
 8007712:	0003      	movs	r3, r0
 8007714:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007716:	197b      	adds	r3, r7, r5
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	18d1      	adds	r1, r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2202      	movs	r2, #2
 8007722:	0018      	movs	r0, r3
 8007724:	f001 fc11 	bl	8008f4a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	3302      	adds	r3, #2
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 8007730:	193a      	adds	r2, r7, r4
 8007732:	4907      	ldr	r1, [pc, #28]	; (8007750 <my_nmea_get_gsv_tns+0x6c>)
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	0018      	movs	r0, r3
 8007738:	f001 fb78 	bl	8008e2c <sscanf>
	free ( s ) ;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	0018      	movs	r0, r3
 8007740:	f000 f9a2 	bl	8007a88 <free>
	return tns ;
 8007744:	193b      	adds	r3, r7, r4
 8007746:	881b      	ldrh	r3, [r3, #0]
}
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	b006      	add	sp, #24
 800774e:	bdb0      	pop	{r4, r5, r7, pc}
 8007750:	0800fbb8 	.word	0x0800fbb8

08007754 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2209      	movs	r2, #9
 8007762:	212c      	movs	r1, #44	; 0x2c
 8007764:	0018      	movs	r0, r3
 8007766:	f7ff fd69 	bl	800723c <my_find_char_position>
 800776a:	0003      	movs	r3, r0
 800776c:	001a      	movs	r2, r3
 800776e:	2417      	movs	r4, #23
 8007770:	193b      	adds	r3, r7, r4
 8007772:	3205      	adds	r2, #5
 8007774:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007776:	2003      	movs	r0, #3
 8007778:	f000 f97c 	bl	8007a74 <malloc>
 800777c:	0003      	movs	r3, r0
 800777e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007780:	193b      	adds	r3, r7, r4
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	18d1      	adds	r1, r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2202      	movs	r2, #2
 800778c:	0018      	movs	r0, r3
 800778e:	f001 fbdc 	bl	8008f4a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3302      	adds	r3, #2
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800779a:	240e      	movs	r4, #14
 800779c:	193a      	adds	r2, r7, r4
 800779e:	4909      	ldr	r1, [pc, #36]	; (80077c4 <my_nmea_get_rmc_date_yy+0x70>)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	0018      	movs	r0, r3
 80077a4:	f001 fb42 	bl	8008e2c <sscanf>
	free ( s ) ;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	0018      	movs	r0, r3
 80077ac:	f000 f96c 	bl	8007a88 <free>
	*yy = (uint8_t) temp ;
 80077b0:	193b      	adds	r3, r7, r4
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	701a      	strb	r2, [r3, #0]

}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	46bd      	mov	sp, r7
 80077be:	b007      	add	sp, #28
 80077c0:	bd90      	pop	{r4, r7, pc}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	0800fbb8 	.word	0x0800fbb8

080077c8 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 80077c8:	b590      	push	{r4, r7, lr}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2209      	movs	r2, #9
 80077d6:	212c      	movs	r1, #44	; 0x2c
 80077d8:	0018      	movs	r0, r3
 80077da:	f7ff fd2f 	bl	800723c <my_find_char_position>
 80077de:	0003      	movs	r3, r0
 80077e0:	001a      	movs	r2, r3
 80077e2:	2417      	movs	r4, #23
 80077e4:	193b      	adds	r3, r7, r4
 80077e6:	3203      	adds	r2, #3
 80077e8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80077ea:	2003      	movs	r0, #3
 80077ec:	f000 f942 	bl	8007a74 <malloc>
 80077f0:	0003      	movs	r3, r0
 80077f2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80077f4:	193b      	adds	r3, r7, r4
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	18d1      	adds	r1, r2, r3
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2202      	movs	r2, #2
 8007800:	0018      	movs	r0, r3
 8007802:	f001 fba2 	bl	8008f4a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3302      	adds	r3, #2
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800780e:	240e      	movs	r4, #14
 8007810:	193a      	adds	r2, r7, r4
 8007812:	4909      	ldr	r1, [pc, #36]	; (8007838 <my_nmea_get_rmc_date_mm+0x70>)
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	0018      	movs	r0, r3
 8007818:	f001 fb08 	bl	8008e2c <sscanf>
	free ( s ) ;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	0018      	movs	r0, r3
 8007820:	f000 f932 	bl	8007a88 <free>
	*mm = (uint8_t) temp ;
 8007824:	193b      	adds	r3, r7, r4
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	b2da      	uxtb	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	701a      	strb	r2, [r3, #0]

}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	46bd      	mov	sp, r7
 8007832:	b007      	add	sp, #28
 8007834:	bd90      	pop	{r4, r7, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	0800fbb8 	.word	0x0800fbb8

0800783c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800783c:	b590      	push	{r4, r7, lr}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2209      	movs	r2, #9
 800784a:	212c      	movs	r1, #44	; 0x2c
 800784c:	0018      	movs	r0, r3
 800784e:	f7ff fcf5 	bl	800723c <my_find_char_position>
 8007852:	0003      	movs	r3, r0
 8007854:	001a      	movs	r2, r3
 8007856:	2417      	movs	r4, #23
 8007858:	193b      	adds	r3, r7, r4
 800785a:	3201      	adds	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800785e:	2003      	movs	r0, #3
 8007860:	f000 f908 	bl	8007a74 <malloc>
 8007864:	0003      	movs	r3, r0
 8007866:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007868:	193b      	adds	r3, r7, r4
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	18d1      	adds	r1, r2, r3
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2202      	movs	r2, #2
 8007874:	0018      	movs	r0, r3
 8007876:	f001 fb68 	bl	8008f4a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3302      	adds	r3, #2
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 8007882:	240e      	movs	r4, #14
 8007884:	193a      	adds	r2, r7, r4
 8007886:	4909      	ldr	r1, [pc, #36]	; (80078ac <my_nmea_get_rmc_date_dd+0x70>)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	0018      	movs	r0, r3
 800788c:	f001 face 	bl	8008e2c <sscanf>
	free ( s ) ;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	0018      	movs	r0, r3
 8007894:	f000 f8f8 	bl	8007a88 <free>
	*dd = (uint8_t) temp ;
 8007898:	193b      	adds	r3, r7, r4
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	701a      	strb	r2, [r3, #0]

}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b007      	add	sp, #28
 80078a8:	bd90      	pop	{r4, r7, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	0800fbb8 	.word	0x0800fbb8

080078b0 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	212c      	movs	r1, #44	; 0x2c
 80078c0:	0018      	movs	r0, r3
 80078c2:	f7ff fcbb 	bl	800723c <my_find_char_position>
 80078c6:	0003      	movs	r3, r0
 80078c8:	001a      	movs	r2, r3
 80078ca:	2417      	movs	r4, #23
 80078cc:	193b      	adds	r3, r7, r4
 80078ce:	3201      	adds	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80078d2:	2003      	movs	r0, #3
 80078d4:	f000 f8ce 	bl	8007a74 <malloc>
 80078d8:	0003      	movs	r3, r0
 80078da:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80078dc:	193b      	adds	r3, r7, r4
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	18d1      	adds	r1, r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2202      	movs	r2, #2
 80078e8:	0018      	movs	r0, r3
 80078ea:	f001 fb2e 	bl	8008f4a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3302      	adds	r3, #2
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80078f6:	240e      	movs	r4, #14
 80078f8:	193a      	adds	r2, r7, r4
 80078fa:	4909      	ldr	r1, [pc, #36]	; (8007920 <my_nmea_get_rmc_utc_hh+0x70>)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	0018      	movs	r0, r3
 8007900:	f001 fa94 	bl	8008e2c <sscanf>
	free ( s ) ;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	0018      	movs	r0, r3
 8007908:	f000 f8be 	bl	8007a88 <free>
	*hh = (uint8_t) temp ;
 800790c:	193b      	adds	r3, r7, r4
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	701a      	strb	r2, [r3, #0]

}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	46bd      	mov	sp, r7
 800791a:	b007      	add	sp, #28
 800791c:	bd90      	pop	{r4, r7, pc}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	0800fbb8 	.word	0x0800fbb8

08007924 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	212c      	movs	r1, #44	; 0x2c
 8007934:	0018      	movs	r0, r3
 8007936:	f7ff fc81 	bl	800723c <my_find_char_position>
 800793a:	0003      	movs	r3, r0
 800793c:	001a      	movs	r2, r3
 800793e:	2417      	movs	r4, #23
 8007940:	193b      	adds	r3, r7, r4
 8007942:	3203      	adds	r2, #3
 8007944:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007946:	2003      	movs	r0, #3
 8007948:	f000 f894 	bl	8007a74 <malloc>
 800794c:	0003      	movs	r3, r0
 800794e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007950:	193b      	adds	r3, r7, r4
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	18d1      	adds	r1, r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2202      	movs	r2, #2
 800795c:	0018      	movs	r0, r3
 800795e:	f001 faf4 	bl	8008f4a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	3302      	adds	r3, #2
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800796a:	240e      	movs	r4, #14
 800796c:	193a      	adds	r2, r7, r4
 800796e:	4909      	ldr	r1, [pc, #36]	; (8007994 <my_nmea_get_rmc_utc_mm+0x70>)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	0018      	movs	r0, r3
 8007974:	f001 fa5a 	bl	8008e2c <sscanf>
	free ( s ) ;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	0018      	movs	r0, r3
 800797c:	f000 f884 	bl	8007a88 <free>
	*mm = (uint8_t) temp ;
 8007980:	193b      	adds	r3, r7, r4
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b2da      	uxtb	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	701a      	strb	r2, [r3, #0]

}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	46bd      	mov	sp, r7
 800798e:	b007      	add	sp, #28
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	46c0      	nop			; (mov r8, r8)
 8007994:	0800fbb8 	.word	0x0800fbb8

08007998 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	212c      	movs	r1, #44	; 0x2c
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7ff fc47 	bl	800723c <my_find_char_position>
 80079ae:	0003      	movs	r3, r0
 80079b0:	001a      	movs	r2, r3
 80079b2:	2417      	movs	r4, #23
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	3205      	adds	r2, #5
 80079b8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 80079ba:	2003      	movs	r0, #3
 80079bc:	f000 f85a 	bl	8007a74 <malloc>
 80079c0:	0003      	movs	r3, r0
 80079c2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 80079c4:	193b      	adds	r3, r7, r4
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	18d1      	adds	r1, r2, r3
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2202      	movs	r2, #2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f001 faba 	bl	8008f4a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3302      	adds	r3, #2
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 80079de:	240e      	movs	r4, #14
 80079e0:	193a      	adds	r2, r7, r4
 80079e2:	4909      	ldr	r1, [pc, #36]	; (8007a08 <my_nmea_get_rmc_utc_ss+0x70>)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f001 fa20 	bl	8008e2c <sscanf>
	free ( s ) ;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	0018      	movs	r0, r3
 80079f0:	f000 f84a 	bl	8007a88 <free>
	*ss = (uint8_t) temp ;
 80079f4:	193b      	adds	r3, r7, r4
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	701a      	strb	r2, [r3, #0]

}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b007      	add	sp, #28
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	0800fbb8 	.word	0x0800fbb8

08007a0c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 8007a0c:	b590      	push	{r4, r7, lr}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	212c      	movs	r1, #44	; 0x2c
 8007a1c:	0018      	movs	r0, r3
 8007a1e:	f7ff fc0d 	bl	800723c <my_find_char_position>
 8007a22:	0003      	movs	r3, r0
 8007a24:	001a      	movs	r2, r3
 8007a26:	240f      	movs	r4, #15
 8007a28:	193b      	adds	r3, r7, r4
 8007a2a:	3208      	adds	r2, #8
 8007a2c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 8007a2e:	2004      	movs	r0, #4
 8007a30:	f000 f820 	bl	8007a74 <malloc>
 8007a34:	0003      	movs	r3, r0
 8007a36:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 8007a38:	193b      	adds	r3, r7, r4
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	18d1      	adds	r1, r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2203      	movs	r2, #3
 8007a44:	0018      	movs	r0, r3
 8007a46:	f001 fa80 	bl	8008f4a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	3303      	adds	r3, #3
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4906      	ldr	r1, [pc, #24]	; (8007a70 <my_nmea_get_rmc_utc_sss+0x64>)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	0018      	movs	r0, r3
 8007a5a:	f001 f9e7 	bl	8008e2c <sscanf>
	free ( s ) ;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	0018      	movs	r0, r3
 8007a62:	f000 f811 	bl	8007a88 <free>
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b005      	add	sp, #20
 8007a6c:	bd90      	pop	{r4, r7, pc}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	0800fbbc 	.word	0x0800fbbc

08007a74 <malloc>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <malloc+0x10>)
 8007a78:	0001      	movs	r1, r0
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	f000 f80e 	bl	8007a9c <_malloc_r>
 8007a80:	bd10      	pop	{r4, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	200006b8 	.word	0x200006b8

08007a88 <free>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <free+0x10>)
 8007a8c:	0001      	movs	r1, r0
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	f001 fba2 	bl	80091d8 <_free_r>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	200006b8 	.word	0x200006b8

08007a9c <_malloc_r>:
 8007a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a9e:	000d      	movs	r5, r1
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	350b      	adds	r5, #11
 8007aa4:	9001      	str	r0, [sp, #4]
 8007aa6:	2d16      	cmp	r5, #22
 8007aa8:	d908      	bls.n	8007abc <_malloc_r+0x20>
 8007aaa:	2207      	movs	r2, #7
 8007aac:	4395      	bics	r5, r2
 8007aae:	d506      	bpl.n	8007abe <_malloc_r+0x22>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	b007      	add	sp, #28
 8007aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007abc:	2510      	movs	r5, #16
 8007abe:	42a9      	cmp	r1, r5
 8007ac0:	d8f6      	bhi.n	8007ab0 <_malloc_r+0x14>
 8007ac2:	9801      	ldr	r0, [sp, #4]
 8007ac4:	f000 f9fe 	bl	8007ec4 <__malloc_lock>
 8007ac8:	23fc      	movs	r3, #252	; 0xfc
 8007aca:	4ebe      	ldr	r6, [pc, #760]	; (8007dc4 <_malloc_r+0x328>)
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	429d      	cmp	r5, r3
 8007ad0:	d219      	bcs.n	8007b06 <_malloc_r+0x6a>
 8007ad2:	002a      	movs	r2, r5
 8007ad4:	3208      	adds	r2, #8
 8007ad6:	18b2      	adds	r2, r6, r2
 8007ad8:	0011      	movs	r1, r2
 8007ada:	6854      	ldr	r4, [r2, #4]
 8007adc:	3908      	subs	r1, #8
 8007ade:	08eb      	lsrs	r3, r5, #3
 8007ae0:	428c      	cmp	r4, r1
 8007ae2:	d103      	bne.n	8007aec <_malloc_r+0x50>
 8007ae4:	68d4      	ldr	r4, [r2, #12]
 8007ae6:	3302      	adds	r3, #2
 8007ae8:	42a2      	cmp	r2, r4
 8007aea:	d022      	beq.n	8007b32 <_malloc_r+0x96>
 8007aec:	2203      	movs	r2, #3
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	68a1      	ldr	r1, [r4, #8]
 8007af2:	4393      	bics	r3, r2
 8007af4:	68e2      	ldr	r2, [r4, #12]
 8007af6:	18e3      	adds	r3, r4, r3
 8007af8:	60ca      	str	r2, [r1, #12]
 8007afa:	6091      	str	r1, [r2, #8]
 8007afc:	2201      	movs	r2, #1
 8007afe:	6859      	ldr	r1, [r3, #4]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	605a      	str	r2, [r3, #4]
 8007b04:	e02a      	b.n	8007b5c <_malloc_r+0xc0>
 8007b06:	233f      	movs	r3, #63	; 0x3f
 8007b08:	0a6a      	lsrs	r2, r5, #9
 8007b0a:	d003      	beq.n	8007b14 <_malloc_r+0x78>
 8007b0c:	2a04      	cmp	r2, #4
 8007b0e:	d82b      	bhi.n	8007b68 <_malloc_r+0xcc>
 8007b10:	09ab      	lsrs	r3, r5, #6
 8007b12:	3338      	adds	r3, #56	; 0x38
 8007b14:	2203      	movs	r2, #3
 8007b16:	4694      	mov	ip, r2
 8007b18:	00d9      	lsls	r1, r3, #3
 8007b1a:	1989      	adds	r1, r1, r6
 8007b1c:	68cc      	ldr	r4, [r1, #12]
 8007b1e:	428c      	cmp	r4, r1
 8007b20:	d006      	beq.n	8007b30 <_malloc_r+0x94>
 8007b22:	4660      	mov	r0, ip
 8007b24:	6862      	ldr	r2, [r4, #4]
 8007b26:	4382      	bics	r2, r0
 8007b28:	1b57      	subs	r7, r2, r5
 8007b2a:	2f0f      	cmp	r7, #15
 8007b2c:	dd34      	ble.n	8007b98 <_malloc_r+0xfc>
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	3301      	adds	r3, #1
 8007b32:	6934      	ldr	r4, [r6, #16]
 8007b34:	49a4      	ldr	r1, [pc, #656]	; (8007dc8 <_malloc_r+0x32c>)
 8007b36:	428c      	cmp	r4, r1
 8007b38:	d055      	beq.n	8007be6 <_malloc_r+0x14a>
 8007b3a:	2003      	movs	r0, #3
 8007b3c:	6862      	ldr	r2, [r4, #4]
 8007b3e:	4382      	bics	r2, r0
 8007b40:	1b50      	subs	r0, r2, r5
 8007b42:	280f      	cmp	r0, #15
 8007b44:	dd36      	ble.n	8007bb4 <_malloc_r+0x118>
 8007b46:	2301      	movs	r3, #1
 8007b48:	1967      	adds	r7, r4, r5
 8007b4a:	431d      	orrs	r5, r3
 8007b4c:	4303      	orrs	r3, r0
 8007b4e:	6065      	str	r5, [r4, #4]
 8007b50:	6177      	str	r7, [r6, #20]
 8007b52:	6137      	str	r7, [r6, #16]
 8007b54:	60f9      	str	r1, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607b      	str	r3, [r7, #4]
 8007b5a:	50a0      	str	r0, [r4, r2]
 8007b5c:	9801      	ldr	r0, [sp, #4]
 8007b5e:	f000 f9b9 	bl	8007ed4 <__malloc_unlock>
 8007b62:	0020      	movs	r0, r4
 8007b64:	3008      	adds	r0, #8
 8007b66:	e7a7      	b.n	8007ab8 <_malloc_r+0x1c>
 8007b68:	2a14      	cmp	r2, #20
 8007b6a:	d802      	bhi.n	8007b72 <_malloc_r+0xd6>
 8007b6c:	0013      	movs	r3, r2
 8007b6e:	335b      	adds	r3, #91	; 0x5b
 8007b70:	e7d0      	b.n	8007b14 <_malloc_r+0x78>
 8007b72:	2a54      	cmp	r2, #84	; 0x54
 8007b74:	d802      	bhi.n	8007b7c <_malloc_r+0xe0>
 8007b76:	0b2b      	lsrs	r3, r5, #12
 8007b78:	336e      	adds	r3, #110	; 0x6e
 8007b7a:	e7cb      	b.n	8007b14 <_malloc_r+0x78>
 8007b7c:	23aa      	movs	r3, #170	; 0xaa
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d802      	bhi.n	8007b8a <_malloc_r+0xee>
 8007b84:	0beb      	lsrs	r3, r5, #15
 8007b86:	3377      	adds	r3, #119	; 0x77
 8007b88:	e7c4      	b.n	8007b14 <_malloc_r+0x78>
 8007b8a:	4990      	ldr	r1, [pc, #576]	; (8007dcc <_malloc_r+0x330>)
 8007b8c:	237e      	movs	r3, #126	; 0x7e
 8007b8e:	428a      	cmp	r2, r1
 8007b90:	d8c0      	bhi.n	8007b14 <_malloc_r+0x78>
 8007b92:	0cab      	lsrs	r3, r5, #18
 8007b94:	337c      	adds	r3, #124	; 0x7c
 8007b96:	e7bd      	b.n	8007b14 <_malloc_r+0x78>
 8007b98:	68e0      	ldr	r0, [r4, #12]
 8007b9a:	2f00      	cmp	r7, #0
 8007b9c:	db08      	blt.n	8007bb0 <_malloc_r+0x114>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	60d8      	str	r0, [r3, #12]
 8007ba2:	6083      	str	r3, [r0, #8]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	18a2      	adds	r2, r4, r2
 8007ba8:	6851      	ldr	r1, [r2, #4]
 8007baa:	430b      	orrs	r3, r1
 8007bac:	6053      	str	r3, [r2, #4]
 8007bae:	e7d5      	b.n	8007b5c <_malloc_r+0xc0>
 8007bb0:	0004      	movs	r4, r0
 8007bb2:	e7b4      	b.n	8007b1e <_malloc_r+0x82>
 8007bb4:	6171      	str	r1, [r6, #20]
 8007bb6:	6131      	str	r1, [r6, #16]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	daf3      	bge.n	8007ba4 <_malloc_r+0x108>
 8007bbc:	6871      	ldr	r1, [r6, #4]
 8007bbe:	468c      	mov	ip, r1
 8007bc0:	2180      	movs	r1, #128	; 0x80
 8007bc2:	0089      	lsls	r1, r1, #2
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d300      	bcc.n	8007bca <_malloc_r+0x12e>
 8007bc8:	e08c      	b.n	8007ce4 <_malloc_r+0x248>
 8007bca:	08d1      	lsrs	r1, r2, #3
 8007bcc:	0950      	lsrs	r0, r2, #5
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4082      	lsls	r2, r0
 8007bd2:	4660      	mov	r0, ip
 8007bd4:	4302      	orrs	r2, r0
 8007bd6:	6072      	str	r2, [r6, #4]
 8007bd8:	00ca      	lsls	r2, r1, #3
 8007bda:	1992      	adds	r2, r2, r6
 8007bdc:	6891      	ldr	r1, [r2, #8]
 8007bde:	60e2      	str	r2, [r4, #12]
 8007be0:	60a1      	str	r1, [r4, #8]
 8007be2:	6094      	str	r4, [r2, #8]
 8007be4:	60cc      	str	r4, [r1, #12]
 8007be6:	2201      	movs	r2, #1
 8007be8:	4876      	ldr	r0, [pc, #472]	; (8007dc4 <_malloc_r+0x328>)
 8007bea:	1099      	asrs	r1, r3, #2
 8007bec:	408a      	lsls	r2, r1
 8007bee:	6841      	ldr	r1, [r0, #4]
 8007bf0:	4291      	cmp	r1, r2
 8007bf2:	d328      	bcc.n	8007c46 <_malloc_r+0x1aa>
 8007bf4:	420a      	tst	r2, r1
 8007bf6:	d105      	bne.n	8007c04 <_malloc_r+0x168>
 8007bf8:	2403      	movs	r4, #3
 8007bfa:	43a3      	bics	r3, r4
 8007bfc:	0052      	lsls	r2, r2, #1
 8007bfe:	3304      	adds	r3, #4
 8007c00:	420a      	tst	r2, r1
 8007c02:	d0fb      	beq.n	8007bfc <_malloc_r+0x160>
 8007c04:	496f      	ldr	r1, [pc, #444]	; (8007dc4 <_malloc_r+0x328>)
 8007c06:	9104      	str	r1, [sp, #16]
 8007c08:	00d9      	lsls	r1, r3, #3
 8007c0a:	1841      	adds	r1, r0, r1
 8007c0c:	468c      	mov	ip, r1
 8007c0e:	000f      	movs	r7, r1
 8007c10:	9302      	str	r3, [sp, #8]
 8007c12:	68fc      	ldr	r4, [r7, #12]
 8007c14:	42bc      	cmp	r4, r7
 8007c16:	d000      	beq.n	8007c1a <_malloc_r+0x17e>
 8007c18:	e09b      	b.n	8007d52 <_malloc_r+0x2b6>
 8007c1a:	2403      	movs	r4, #3
 8007c1c:	9902      	ldr	r1, [sp, #8]
 8007c1e:	3708      	adds	r7, #8
 8007c20:	3101      	adds	r1, #1
 8007c22:	9102      	str	r1, [sp, #8]
 8007c24:	4221      	tst	r1, r4
 8007c26:	d1f4      	bne.n	8007c12 <_malloc_r+0x176>
 8007c28:	2103      	movs	r1, #3
 8007c2a:	420b      	tst	r3, r1
 8007c2c:	d000      	beq.n	8007c30 <_malloc_r+0x194>
 8007c2e:	e0b7      	b.n	8007da0 <_malloc_r+0x304>
 8007c30:	6843      	ldr	r3, [r0, #4]
 8007c32:	4393      	bics	r3, r2
 8007c34:	6043      	str	r3, [r0, #4]
 8007c36:	9b04      	ldr	r3, [sp, #16]
 8007c38:	0052      	lsls	r2, r2, #1
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	4291      	cmp	r1, r2
 8007c3e:	d302      	bcc.n	8007c46 <_malloc_r+0x1aa>
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	d000      	beq.n	8007c46 <_malloc_r+0x1aa>
 8007c44:	e0bb      	b.n	8007dbe <_malloc_r+0x322>
 8007c46:	2203      	movs	r2, #3
 8007c48:	6883      	ldr	r3, [r0, #8]
 8007c4a:	9302      	str	r3, [sp, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	4393      	bics	r3, r2
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	42ab      	cmp	r3, r5
 8007c54:	d303      	bcc.n	8007c5e <_malloc_r+0x1c2>
 8007c56:	1b59      	subs	r1, r3, r5
 8007c58:	290f      	cmp	r1, #15
 8007c5a:	dd00      	ble.n	8007c5e <_malloc_r+0x1c2>
 8007c5c:	e123      	b.n	8007ea6 <_malloc_r+0x40a>
 8007c5e:	9b02      	ldr	r3, [sp, #8]
 8007c60:	9a03      	ldr	r2, [sp, #12]
 8007c62:	2008      	movs	r0, #8
 8007c64:	189e      	adds	r6, r3, r2
 8007c66:	4b5a      	ldr	r3, [pc, #360]	; (8007dd0 <_malloc_r+0x334>)
 8007c68:	681f      	ldr	r7, [r3, #0]
 8007c6a:	f001 fa2f 	bl	80090cc <sysconf>
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <_malloc_r+0x338>)
 8007c70:	3710      	adds	r7, #16
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	197f      	adds	r7, r7, r5
 8007c76:	9004      	str	r0, [sp, #16]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	d003      	beq.n	8007c84 <_malloc_r+0x1e8>
 8007c7c:	1e7b      	subs	r3, r7, #1
 8007c7e:	181b      	adds	r3, r3, r0
 8007c80:	4247      	negs	r7, r0
 8007c82:	401f      	ands	r7, r3
 8007c84:	0039      	movs	r1, r7
 8007c86:	9801      	ldr	r0, [sp, #4]
 8007c88:	f001 f9cc 	bl	8009024 <_sbrk_r>
 8007c8c:	0004      	movs	r4, r0
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	d100      	bne.n	8007c94 <_malloc_r+0x1f8>
 8007c92:	e0de      	b.n	8007e52 <_malloc_r+0x3b6>
 8007c94:	4286      	cmp	r6, r0
 8007c96:	d904      	bls.n	8007ca2 <_malloc_r+0x206>
 8007c98:	4b4a      	ldr	r3, [pc, #296]	; (8007dc4 <_malloc_r+0x328>)
 8007c9a:	9a02      	ldr	r2, [sp, #8]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d000      	beq.n	8007ca2 <_malloc_r+0x206>
 8007ca0:	e0d7      	b.n	8007e52 <_malloc_r+0x3b6>
 8007ca2:	4a4d      	ldr	r2, [pc, #308]	; (8007dd8 <_malloc_r+0x33c>)
 8007ca4:	6813      	ldr	r3, [r2, #0]
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	9a04      	ldr	r2, [sp, #16]
 8007cac:	3a01      	subs	r2, #1
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d000      	beq.n	8007cb4 <_malloc_r+0x218>
 8007cb2:	e097      	b.n	8007de4 <_malloc_r+0x348>
 8007cb4:	4216      	tst	r6, r2
 8007cb6:	d000      	beq.n	8007cba <_malloc_r+0x21e>
 8007cb8:	e094      	b.n	8007de4 <_malloc_r+0x348>
 8007cba:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <_malloc_r+0x328>)
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	9b03      	ldr	r3, [sp, #12]
 8007cc0:	19df      	adds	r7, r3, r7
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	433b      	orrs	r3, r7
 8007cc6:	6053      	str	r3, [r2, #4]
 8007cc8:	4b43      	ldr	r3, [pc, #268]	; (8007dd8 <_malloc_r+0x33c>)
 8007cca:	4a44      	ldr	r2, [pc, #272]	; (8007ddc <_malloc_r+0x340>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6811      	ldr	r1, [r2, #0]
 8007cd0:	428b      	cmp	r3, r1
 8007cd2:	d900      	bls.n	8007cd6 <_malloc_r+0x23a>
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <_malloc_r+0x344>)
 8007cd8:	6811      	ldr	r1, [r2, #0]
 8007cda:	428b      	cmp	r3, r1
 8007cdc:	d800      	bhi.n	8007ce0 <_malloc_r+0x244>
 8007cde:	e0b8      	b.n	8007e52 <_malloc_r+0x3b6>
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e0b6      	b.n	8007e52 <_malloc_r+0x3b6>
 8007ce4:	0a50      	lsrs	r0, r2, #9
 8007ce6:	2804      	cmp	r0, #4
 8007ce8:	d811      	bhi.n	8007d0e <_malloc_r+0x272>
 8007cea:	0991      	lsrs	r1, r2, #6
 8007cec:	3138      	adds	r1, #56	; 0x38
 8007cee:	00cf      	lsls	r7, r1, #3
 8007cf0:	19bf      	adds	r7, r7, r6
 8007cf2:	68b8      	ldr	r0, [r7, #8]
 8007cf4:	4287      	cmp	r7, r0
 8007cf6:	d125      	bne.n	8007d44 <_malloc_r+0x2a8>
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	1089      	asrs	r1, r1, #2
 8007cfc:	408a      	lsls	r2, r1
 8007cfe:	4661      	mov	r1, ip
 8007d00:	430a      	orrs	r2, r1
 8007d02:	6072      	str	r2, [r6, #4]
 8007d04:	60e7      	str	r7, [r4, #12]
 8007d06:	60a0      	str	r0, [r4, #8]
 8007d08:	60bc      	str	r4, [r7, #8]
 8007d0a:	60c4      	str	r4, [r0, #12]
 8007d0c:	e76b      	b.n	8007be6 <_malloc_r+0x14a>
 8007d0e:	2814      	cmp	r0, #20
 8007d10:	d802      	bhi.n	8007d18 <_malloc_r+0x27c>
 8007d12:	0001      	movs	r1, r0
 8007d14:	315b      	adds	r1, #91	; 0x5b
 8007d16:	e7ea      	b.n	8007cee <_malloc_r+0x252>
 8007d18:	2854      	cmp	r0, #84	; 0x54
 8007d1a:	d802      	bhi.n	8007d22 <_malloc_r+0x286>
 8007d1c:	0b11      	lsrs	r1, r2, #12
 8007d1e:	316e      	adds	r1, #110	; 0x6e
 8007d20:	e7e5      	b.n	8007cee <_malloc_r+0x252>
 8007d22:	21aa      	movs	r1, #170	; 0xaa
 8007d24:	0049      	lsls	r1, r1, #1
 8007d26:	4288      	cmp	r0, r1
 8007d28:	d802      	bhi.n	8007d30 <_malloc_r+0x294>
 8007d2a:	0bd1      	lsrs	r1, r2, #15
 8007d2c:	3177      	adds	r1, #119	; 0x77
 8007d2e:	e7de      	b.n	8007cee <_malloc_r+0x252>
 8007d30:	4f26      	ldr	r7, [pc, #152]	; (8007dcc <_malloc_r+0x330>)
 8007d32:	217e      	movs	r1, #126	; 0x7e
 8007d34:	42b8      	cmp	r0, r7
 8007d36:	d8da      	bhi.n	8007cee <_malloc_r+0x252>
 8007d38:	0c91      	lsrs	r1, r2, #18
 8007d3a:	317c      	adds	r1, #124	; 0x7c
 8007d3c:	e7d7      	b.n	8007cee <_malloc_r+0x252>
 8007d3e:	6880      	ldr	r0, [r0, #8]
 8007d40:	4287      	cmp	r7, r0
 8007d42:	d004      	beq.n	8007d4e <_malloc_r+0x2b2>
 8007d44:	2603      	movs	r6, #3
 8007d46:	6841      	ldr	r1, [r0, #4]
 8007d48:	43b1      	bics	r1, r6
 8007d4a:	4291      	cmp	r1, r2
 8007d4c:	d8f7      	bhi.n	8007d3e <_malloc_r+0x2a2>
 8007d4e:	68c7      	ldr	r7, [r0, #12]
 8007d50:	e7d8      	b.n	8007d04 <_malloc_r+0x268>
 8007d52:	2603      	movs	r6, #3
 8007d54:	6861      	ldr	r1, [r4, #4]
 8007d56:	43b1      	bics	r1, r6
 8007d58:	9103      	str	r1, [sp, #12]
 8007d5a:	68e6      	ldr	r6, [r4, #12]
 8007d5c:	1b49      	subs	r1, r1, r5
 8007d5e:	290f      	cmp	r1, #15
 8007d60:	dd10      	ble.n	8007d84 <_malloc_r+0x2e8>
 8007d62:	2201      	movs	r2, #1
 8007d64:	1963      	adds	r3, r4, r5
 8007d66:	4315      	orrs	r5, r2
 8007d68:	6065      	str	r5, [r4, #4]
 8007d6a:	68a5      	ldr	r5, [r4, #8]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	60ee      	str	r6, [r5, #12]
 8007d70:	60b5      	str	r5, [r6, #8]
 8007d72:	6143      	str	r3, [r0, #20]
 8007d74:	6103      	str	r3, [r0, #16]
 8007d76:	4814      	ldr	r0, [pc, #80]	; (8007dc8 <_malloc_r+0x32c>)
 8007d78:	605a      	str	r2, [r3, #4]
 8007d7a:	60d8      	str	r0, [r3, #12]
 8007d7c:	6098      	str	r0, [r3, #8]
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	50e1      	str	r1, [r4, r3]
 8007d82:	e6eb      	b.n	8007b5c <_malloc_r+0xc0>
 8007d84:	2900      	cmp	r1, #0
 8007d86:	db09      	blt.n	8007d9c <_malloc_r+0x300>
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	18e1      	adds	r1, r4, r3
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	684a      	ldr	r2, [r1, #4]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	604b      	str	r3, [r1, #4]
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	60de      	str	r6, [r3, #12]
 8007d98:	60b3      	str	r3, [r6, #8]
 8007d9a:	e6df      	b.n	8007b5c <_malloc_r+0xc0>
 8007d9c:	0034      	movs	r4, r6
 8007d9e:	e739      	b.n	8007c14 <_malloc_r+0x178>
 8007da0:	2108      	movs	r1, #8
 8007da2:	4249      	negs	r1, r1
 8007da4:	448c      	add	ip, r1
 8007da6:	4661      	mov	r1, ip
 8007da8:	6889      	ldr	r1, [r1, #8]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	4561      	cmp	r1, ip
 8007dae:	d100      	bne.n	8007db2 <_malloc_r+0x316>
 8007db0:	e73a      	b.n	8007c28 <_malloc_r+0x18c>
 8007db2:	e740      	b.n	8007c36 <_malloc_r+0x19a>
 8007db4:	3304      	adds	r3, #4
 8007db6:	0052      	lsls	r2, r2, #1
 8007db8:	420a      	tst	r2, r1
 8007dba:	d0fb      	beq.n	8007db4 <_malloc_r+0x318>
 8007dbc:	e724      	b.n	8007c08 <_malloc_r+0x16c>
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	e7fa      	b.n	8007db8 <_malloc_r+0x31c>
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	20000010 	.word	0x20000010
 8007dc8:	20000018 	.word	0x20000018
 8007dcc:	00000554 	.word	0x00000554
 8007dd0:	20000a74 	.word	0x20000a74
 8007dd4:	20000418 	.word	0x20000418
 8007dd8:	20000a44 	.word	0x20000a44
 8007ddc:	20000a6c 	.word	0x20000a6c
 8007de0:	20000a70 	.word	0x20000a70
 8007de4:	4934      	ldr	r1, [pc, #208]	; (8007eb8 <_malloc_r+0x41c>)
 8007de6:	6808      	ldr	r0, [r1, #0]
 8007de8:	3001      	adds	r0, #1
 8007dea:	d140      	bne.n	8007e6e <_malloc_r+0x3d2>
 8007dec:	600c      	str	r4, [r1, #0]
 8007dee:	2107      	movs	r1, #7
 8007df0:	0026      	movs	r6, r4
 8007df2:	2300      	movs	r3, #0
 8007df4:	400e      	ands	r6, r1
 8007df6:	420c      	tst	r4, r1
 8007df8:	d002      	beq.n	8007e00 <_malloc_r+0x364>
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	1b9b      	subs	r3, r3, r6
 8007dfe:	18e4      	adds	r4, r4, r3
 8007e00:	19e1      	adds	r1, r4, r7
 8007e02:	9105      	str	r1, [sp, #20]
 8007e04:	9f05      	ldr	r7, [sp, #20]
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	4017      	ands	r7, r2
 8007e0a:	18cb      	adds	r3, r1, r3
 8007e0c:	1bdf      	subs	r7, r3, r7
 8007e0e:	4017      	ands	r7, r2
 8007e10:	0039      	movs	r1, r7
 8007e12:	9801      	ldr	r0, [sp, #4]
 8007e14:	f001 f906 	bl	8009024 <_sbrk_r>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d107      	bne.n	8007e2c <_malloc_r+0x390>
 8007e1c:	1e37      	subs	r7, r6, #0
 8007e1e:	9805      	ldr	r0, [sp, #20]
 8007e20:	d004      	beq.n	8007e2c <_malloc_r+0x390>
 8007e22:	0030      	movs	r0, r6
 8007e24:	2700      	movs	r7, #0
 8007e26:	9b05      	ldr	r3, [sp, #20]
 8007e28:	3808      	subs	r0, #8
 8007e2a:	1818      	adds	r0, r3, r0
 8007e2c:	4a23      	ldr	r2, [pc, #140]	; (8007ebc <_malloc_r+0x420>)
 8007e2e:	1b00      	subs	r0, r0, r4
 8007e30:	6813      	ldr	r3, [r2, #0]
 8007e32:	19c0      	adds	r0, r0, r7
 8007e34:	19db      	adds	r3, r3, r7
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <_malloc_r+0x424>)
 8007e3c:	9902      	ldr	r1, [sp, #8]
 8007e3e:	4310      	orrs	r0, r2
 8007e40:	609c      	str	r4, [r3, #8]
 8007e42:	6060      	str	r0, [r4, #4]
 8007e44:	4299      	cmp	r1, r3
 8007e46:	d100      	bne.n	8007e4a <_malloc_r+0x3ae>
 8007e48:	e73e      	b.n	8007cc8 <_malloc_r+0x22c>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	2b0f      	cmp	r3, #15
 8007e4e:	d813      	bhi.n	8007e78 <_malloc_r+0x3dc>
 8007e50:	6062      	str	r2, [r4, #4]
 8007e52:	2203      	movs	r2, #3
 8007e54:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <_malloc_r+0x424>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4393      	bics	r3, r2
 8007e5c:	1b59      	subs	r1, r3, r5
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	d301      	bcc.n	8007e66 <_malloc_r+0x3ca>
 8007e62:	290f      	cmp	r1, #15
 8007e64:	dc1f      	bgt.n	8007ea6 <_malloc_r+0x40a>
 8007e66:	9801      	ldr	r0, [sp, #4]
 8007e68:	f000 f834 	bl	8007ed4 <__malloc_unlock>
 8007e6c:	e623      	b.n	8007ab6 <_malloc_r+0x1a>
 8007e6e:	4913      	ldr	r1, [pc, #76]	; (8007ebc <_malloc_r+0x420>)
 8007e70:	1ba6      	subs	r6, r4, r6
 8007e72:	18f6      	adds	r6, r6, r3
 8007e74:	600e      	str	r6, [r1, #0]
 8007e76:	e7ba      	b.n	8007dee <_malloc_r+0x352>
 8007e78:	2107      	movs	r1, #7
 8007e7a:	9b03      	ldr	r3, [sp, #12]
 8007e7c:	3b0c      	subs	r3, #12
 8007e7e:	438b      	bics	r3, r1
 8007e80:	9902      	ldr	r1, [sp, #8]
 8007e82:	6849      	ldr	r1, [r1, #4]
 8007e84:	400a      	ands	r2, r1
 8007e86:	9902      	ldr	r1, [sp, #8]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	604a      	str	r2, [r1, #4]
 8007e8c:	18ca      	adds	r2, r1, r3
 8007e8e:	2105      	movs	r1, #5
 8007e90:	6051      	str	r1, [r2, #4]
 8007e92:	6091      	str	r1, [r2, #8]
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d800      	bhi.n	8007e9a <_malloc_r+0x3fe>
 8007e98:	e716      	b.n	8007cc8 <_malloc_r+0x22c>
 8007e9a:	9902      	ldr	r1, [sp, #8]
 8007e9c:	9801      	ldr	r0, [sp, #4]
 8007e9e:	3108      	adds	r1, #8
 8007ea0:	f001 f99a 	bl	80091d8 <_free_r>
 8007ea4:	e710      	b.n	8007cc8 <_malloc_r+0x22c>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	0013      	movs	r3, r2
 8007eaa:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <_malloc_r+0x424>)
 8007eac:	432b      	orrs	r3, r5
 8007eae:	6884      	ldr	r4, [r0, #8]
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	1963      	adds	r3, r4, r5
 8007eb4:	6083      	str	r3, [r0, #8]
 8007eb6:	e623      	b.n	8007b00 <_malloc_r+0x64>
 8007eb8:	20000418 	.word	0x20000418
 8007ebc:	20000a44 	.word	0x20000a44
 8007ec0:	20000010 	.word	0x20000010

08007ec4 <__malloc_lock>:
 8007ec4:	b510      	push	{r4, lr}
 8007ec6:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <__malloc_lock+0xc>)
 8007ec8:	f001 f8fe 	bl	80090c8 <__retarget_lock_acquire_recursive>
 8007ecc:	bd10      	pop	{r4, pc}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	20000bb9 	.word	0x20000bb9

08007ed4 <__malloc_unlock>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	4802      	ldr	r0, [pc, #8]	; (8007ee0 <__malloc_unlock+0xc>)
 8007ed8:	f001 f8f7 	bl	80090ca <__retarget_lock_release_recursive>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	20000bb9 	.word	0x20000bb9

08007ee4 <sulp>:
 8007ee4:	b570      	push	{r4, r5, r6, lr}
 8007ee6:	0016      	movs	r6, r2
 8007ee8:	000d      	movs	r5, r1
 8007eea:	f002 f8cb 	bl	800a084 <__ulp>
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	d00d      	beq.n	8007f0e <sulp+0x2a>
 8007ef2:	236b      	movs	r3, #107	; 0x6b
 8007ef4:	006a      	lsls	r2, r5, #1
 8007ef6:	0d52      	lsrs	r2, r2, #21
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dd07      	ble.n	8007f0e <sulp+0x2a>
 8007efe:	2400      	movs	r4, #0
 8007f00:	4a03      	ldr	r2, [pc, #12]	; (8007f10 <sulp+0x2c>)
 8007f02:	051b      	lsls	r3, r3, #20
 8007f04:	189d      	adds	r5, r3, r2
 8007f06:	002b      	movs	r3, r5
 8007f08:	0022      	movs	r2, r4
 8007f0a:	f7f9 fbaf 	bl	800166c <__aeabi_dmul>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	3ff00000 	.word	0x3ff00000

08007f14 <_strtod_l>:
 8007f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f16:	b0a1      	sub	sp, #132	; 0x84
 8007f18:	9219      	str	r2, [sp, #100]	; 0x64
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	2700      	movs	r7, #0
 8007f20:	9004      	str	r0, [sp, #16]
 8007f22:	9107      	str	r1, [sp, #28]
 8007f24:	921c      	str	r2, [sp, #112]	; 0x70
 8007f26:	911b      	str	r1, [sp, #108]	; 0x6c
 8007f28:	780a      	ldrb	r2, [r1, #0]
 8007f2a:	2a2b      	cmp	r2, #43	; 0x2b
 8007f2c:	d055      	beq.n	8007fda <_strtod_l+0xc6>
 8007f2e:	d841      	bhi.n	8007fb4 <_strtod_l+0xa0>
 8007f30:	2a0d      	cmp	r2, #13
 8007f32:	d83b      	bhi.n	8007fac <_strtod_l+0x98>
 8007f34:	2a08      	cmp	r2, #8
 8007f36:	d83b      	bhi.n	8007fb0 <_strtod_l+0x9c>
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d044      	beq.n	8007fc6 <_strtod_l+0xb2>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007f40:	2100      	movs	r1, #0
 8007f42:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007f44:	9109      	str	r1, [sp, #36]	; 0x24
 8007f46:	782a      	ldrb	r2, [r5, #0]
 8007f48:	2a30      	cmp	r2, #48	; 0x30
 8007f4a:	d000      	beq.n	8007f4e <_strtod_l+0x3a>
 8007f4c:	e085      	b.n	800805a <_strtod_l+0x146>
 8007f4e:	786a      	ldrb	r2, [r5, #1]
 8007f50:	3120      	adds	r1, #32
 8007f52:	438a      	bics	r2, r1
 8007f54:	2a58      	cmp	r2, #88	; 0x58
 8007f56:	d000      	beq.n	8007f5a <_strtod_l+0x46>
 8007f58:	e075      	b.n	8008046 <_strtod_l+0x132>
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f5e:	4a97      	ldr	r2, [pc, #604]	; (80081bc <_strtod_l+0x2a8>)
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	ab1c      	add	r3, sp, #112	; 0x70
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	9804      	ldr	r0, [sp, #16]
 8007f68:	ab1d      	add	r3, sp, #116	; 0x74
 8007f6a:	a91b      	add	r1, sp, #108	; 0x6c
 8007f6c:	f001 fa50 	bl	8009410 <__gethex>
 8007f70:	230f      	movs	r3, #15
 8007f72:	0002      	movs	r2, r0
 8007f74:	401a      	ands	r2, r3
 8007f76:	0004      	movs	r4, r0
 8007f78:	9205      	str	r2, [sp, #20]
 8007f7a:	4218      	tst	r0, r3
 8007f7c:	d005      	beq.n	8007f8a <_strtod_l+0x76>
 8007f7e:	2a06      	cmp	r2, #6
 8007f80:	d12d      	bne.n	8007fde <_strtod_l+0xca>
 8007f82:	1c6b      	adds	r3, r5, #1
 8007f84:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f86:	2300      	movs	r3, #0
 8007f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <_strtod_l+0x82>
 8007f90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01b      	beq.n	8007fd4 <_strtod_l+0xc0>
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	0032      	movs	r2, r6
 8007fa0:	061b      	lsls	r3, r3, #24
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	0010      	movs	r0, r2
 8007fa6:	0019      	movs	r1, r3
 8007fa8:	b021      	add	sp, #132	; 0x84
 8007faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fac:	2a20      	cmp	r2, #32
 8007fae:	d1c5      	bne.n	8007f3c <_strtod_l+0x28>
 8007fb0:	3101      	adds	r1, #1
 8007fb2:	e7b8      	b.n	8007f26 <_strtod_l+0x12>
 8007fb4:	2a2d      	cmp	r2, #45	; 0x2d
 8007fb6:	d1c1      	bne.n	8007f3c <_strtod_l+0x28>
 8007fb8:	3a2c      	subs	r2, #44	; 0x2c
 8007fba:	920f      	str	r2, [sp, #60]	; 0x3c
 8007fbc:	1c4a      	adds	r2, r1, #1
 8007fbe:	921b      	str	r2, [sp, #108]	; 0x6c
 8007fc0:	784a      	ldrb	r2, [r1, #1]
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1bc      	bne.n	8007f40 <_strtod_l+0x2c>
 8007fc6:	9b07      	ldr	r3, [sp, #28]
 8007fc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fca:	2300      	movs	r3, #0
 8007fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1dd      	bne.n	8007f90 <_strtod_l+0x7c>
 8007fd4:	0032      	movs	r2, r6
 8007fd6:	003b      	movs	r3, r7
 8007fd8:	e7e4      	b.n	8007fa4 <_strtod_l+0x90>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	e7ed      	b.n	8007fba <_strtod_l+0xa6>
 8007fde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d007      	beq.n	8007ff4 <_strtod_l+0xe0>
 8007fe4:	2135      	movs	r1, #53	; 0x35
 8007fe6:	a81e      	add	r0, sp, #120	; 0x78
 8007fe8:	f002 f93d 	bl	800a266 <__copybits>
 8007fec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fee:	9804      	ldr	r0, [sp, #16]
 8007ff0:	f001 fd3a 	bl	8009a68 <_Bfree>
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ff8:	3801      	subs	r0, #1
 8007ffa:	2804      	cmp	r0, #4
 8007ffc:	d806      	bhi.n	800800c <_strtod_l+0xf8>
 8007ffe:	f7f8 f889 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008002:	0312      	.short	0x0312
 8008004:	1e1c      	.short	0x1e1c
 8008006:	12          	.byte	0x12
 8008007:	00          	.byte	0x00
 8008008:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800800a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800800c:	05e4      	lsls	r4, r4, #23
 800800e:	d502      	bpl.n	8008016 <_strtod_l+0x102>
 8008010:	2380      	movs	r3, #128	; 0x80
 8008012:	061b      	lsls	r3, r3, #24
 8008014:	431f      	orrs	r7, r3
 8008016:	4b6a      	ldr	r3, [pc, #424]	; (80081c0 <_strtod_l+0x2ac>)
 8008018:	423b      	tst	r3, r7
 800801a:	d1b6      	bne.n	8007f8a <_strtod_l+0x76>
 800801c:	f001 f828 	bl	8009070 <__errno>
 8008020:	2322      	movs	r3, #34	; 0x22
 8008022:	6003      	str	r3, [r0, #0]
 8008024:	e7b1      	b.n	8007f8a <_strtod_l+0x76>
 8008026:	4967      	ldr	r1, [pc, #412]	; (80081c4 <_strtod_l+0x2b0>)
 8008028:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800802a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800802c:	400a      	ands	r2, r1
 800802e:	4966      	ldr	r1, [pc, #408]	; (80081c8 <_strtod_l+0x2b4>)
 8008030:	185b      	adds	r3, r3, r1
 8008032:	051b      	lsls	r3, r3, #20
 8008034:	431a      	orrs	r2, r3
 8008036:	0017      	movs	r7, r2
 8008038:	e7e8      	b.n	800800c <_strtod_l+0xf8>
 800803a:	4f61      	ldr	r7, [pc, #388]	; (80081c0 <_strtod_l+0x2ac>)
 800803c:	e7e6      	b.n	800800c <_strtod_l+0xf8>
 800803e:	2601      	movs	r6, #1
 8008040:	4f62      	ldr	r7, [pc, #392]	; (80081cc <_strtod_l+0x2b8>)
 8008042:	4276      	negs	r6, r6
 8008044:	e7e2      	b.n	800800c <_strtod_l+0xf8>
 8008046:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	921b      	str	r2, [sp, #108]	; 0x6c
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b30      	cmp	r3, #48	; 0x30
 8008050:	d0f9      	beq.n	8008046 <_strtod_l+0x132>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d099      	beq.n	8007f8a <_strtod_l+0x76>
 8008056:	2301      	movs	r3, #1
 8008058:	9309      	str	r3, [sp, #36]	; 0x24
 800805a:	2500      	movs	r5, #0
 800805c:	220a      	movs	r2, #10
 800805e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008060:	950d      	str	r5, [sp, #52]	; 0x34
 8008062:	9310      	str	r3, [sp, #64]	; 0x40
 8008064:	9508      	str	r5, [sp, #32]
 8008066:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008068:	7804      	ldrb	r4, [r0, #0]
 800806a:	0023      	movs	r3, r4
 800806c:	3b30      	subs	r3, #48	; 0x30
 800806e:	b2d9      	uxtb	r1, r3
 8008070:	2909      	cmp	r1, #9
 8008072:	d927      	bls.n	80080c4 <_strtod_l+0x1b0>
 8008074:	2201      	movs	r2, #1
 8008076:	4956      	ldr	r1, [pc, #344]	; (80081d0 <_strtod_l+0x2bc>)
 8008078:	f000 ff56 	bl	8008f28 <strncmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	d031      	beq.n	80080e4 <_strtod_l+0x1d0>
 8008080:	2000      	movs	r0, #0
 8008082:	0023      	movs	r3, r4
 8008084:	4684      	mov	ip, r0
 8008086:	9a08      	ldr	r2, [sp, #32]
 8008088:	900c      	str	r0, [sp, #48]	; 0x30
 800808a:	9205      	str	r2, [sp, #20]
 800808c:	2220      	movs	r2, #32
 800808e:	0019      	movs	r1, r3
 8008090:	4391      	bics	r1, r2
 8008092:	000a      	movs	r2, r1
 8008094:	2100      	movs	r1, #0
 8008096:	9106      	str	r1, [sp, #24]
 8008098:	2a45      	cmp	r2, #69	; 0x45
 800809a:	d000      	beq.n	800809e <_strtod_l+0x18a>
 800809c:	e0c2      	b.n	8008224 <_strtod_l+0x310>
 800809e:	9b05      	ldr	r3, [sp, #20]
 80080a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a2:	4303      	orrs	r3, r0
 80080a4:	4313      	orrs	r3, r2
 80080a6:	428b      	cmp	r3, r1
 80080a8:	d08d      	beq.n	8007fc6 <_strtod_l+0xb2>
 80080aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080ac:	9307      	str	r3, [sp, #28]
 80080ae:	3301      	adds	r3, #1
 80080b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b2b      	cmp	r3, #43	; 0x2b
 80080b8:	d071      	beq.n	800819e <_strtod_l+0x28a>
 80080ba:	000c      	movs	r4, r1
 80080bc:	2b2d      	cmp	r3, #45	; 0x2d
 80080be:	d174      	bne.n	80081aa <_strtod_l+0x296>
 80080c0:	2401      	movs	r4, #1
 80080c2:	e06d      	b.n	80081a0 <_strtod_l+0x28c>
 80080c4:	9908      	ldr	r1, [sp, #32]
 80080c6:	2908      	cmp	r1, #8
 80080c8:	dc09      	bgt.n	80080de <_strtod_l+0x1ca>
 80080ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080cc:	4351      	muls	r1, r2
 80080ce:	185b      	adds	r3, r3, r1
 80080d0:	930d      	str	r3, [sp, #52]	; 0x34
 80080d2:	9b08      	ldr	r3, [sp, #32]
 80080d4:	3001      	adds	r0, #1
 80080d6:	3301      	adds	r3, #1
 80080d8:	9308      	str	r3, [sp, #32]
 80080da:	901b      	str	r0, [sp, #108]	; 0x6c
 80080dc:	e7c3      	b.n	8008066 <_strtod_l+0x152>
 80080de:	4355      	muls	r5, r2
 80080e0:	195d      	adds	r5, r3, r5
 80080e2:	e7f6      	b.n	80080d2 <_strtod_l+0x1be>
 80080e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80080ea:	9a08      	ldr	r2, [sp, #32]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2a00      	cmp	r2, #0
 80080f0:	d03a      	beq.n	8008168 <_strtod_l+0x254>
 80080f2:	900c      	str	r0, [sp, #48]	; 0x30
 80080f4:	9205      	str	r2, [sp, #20]
 80080f6:	001a      	movs	r2, r3
 80080f8:	3a30      	subs	r2, #48	; 0x30
 80080fa:	2a09      	cmp	r2, #9
 80080fc:	d912      	bls.n	8008124 <_strtod_l+0x210>
 80080fe:	2201      	movs	r2, #1
 8008100:	4694      	mov	ip, r2
 8008102:	e7c3      	b.n	800808c <_strtod_l+0x178>
 8008104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008106:	3001      	adds	r0, #1
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	921b      	str	r2, [sp, #108]	; 0x6c
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	2b30      	cmp	r3, #48	; 0x30
 8008110:	d0f8      	beq.n	8008104 <_strtod_l+0x1f0>
 8008112:	001a      	movs	r2, r3
 8008114:	3a31      	subs	r2, #49	; 0x31
 8008116:	2a08      	cmp	r2, #8
 8008118:	d83c      	bhi.n	8008194 <_strtod_l+0x280>
 800811a:	900c      	str	r0, [sp, #48]	; 0x30
 800811c:	2000      	movs	r0, #0
 800811e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008120:	9005      	str	r0, [sp, #20]
 8008122:	9210      	str	r2, [sp, #64]	; 0x40
 8008124:	001a      	movs	r2, r3
 8008126:	1c41      	adds	r1, r0, #1
 8008128:	3a30      	subs	r2, #48	; 0x30
 800812a:	2b30      	cmp	r3, #48	; 0x30
 800812c:	d016      	beq.n	800815c <_strtod_l+0x248>
 800812e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008130:	185b      	adds	r3, r3, r1
 8008132:	930c      	str	r3, [sp, #48]	; 0x30
 8008134:	9b05      	ldr	r3, [sp, #20]
 8008136:	210a      	movs	r1, #10
 8008138:	469c      	mov	ip, r3
 800813a:	4484      	add	ip, r0
 800813c:	4563      	cmp	r3, ip
 800813e:	d115      	bne.n	800816c <_strtod_l+0x258>
 8008140:	9905      	ldr	r1, [sp, #20]
 8008142:	9b05      	ldr	r3, [sp, #20]
 8008144:	3101      	adds	r1, #1
 8008146:	1809      	adds	r1, r1, r0
 8008148:	181b      	adds	r3, r3, r0
 800814a:	9105      	str	r1, [sp, #20]
 800814c:	2b08      	cmp	r3, #8
 800814e:	dc19      	bgt.n	8008184 <_strtod_l+0x270>
 8008150:	230a      	movs	r3, #10
 8008152:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008154:	434b      	muls	r3, r1
 8008156:	2100      	movs	r1, #0
 8008158:	18d3      	adds	r3, r2, r3
 800815a:	930d      	str	r3, [sp, #52]	; 0x34
 800815c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800815e:	0008      	movs	r0, r1
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	921b      	str	r2, [sp, #108]	; 0x6c
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	e7c6      	b.n	80080f6 <_strtod_l+0x1e2>
 8008168:	9808      	ldr	r0, [sp, #32]
 800816a:	e7d0      	b.n	800810e <_strtod_l+0x1fa>
 800816c:	1c5c      	adds	r4, r3, #1
 800816e:	2b08      	cmp	r3, #8
 8008170:	dc04      	bgt.n	800817c <_strtod_l+0x268>
 8008172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008174:	434b      	muls	r3, r1
 8008176:	930d      	str	r3, [sp, #52]	; 0x34
 8008178:	0023      	movs	r3, r4
 800817a:	e7df      	b.n	800813c <_strtod_l+0x228>
 800817c:	2c10      	cmp	r4, #16
 800817e:	dcfb      	bgt.n	8008178 <_strtod_l+0x264>
 8008180:	434d      	muls	r5, r1
 8008182:	e7f9      	b.n	8008178 <_strtod_l+0x264>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	2100      	movs	r1, #0
 8008188:	2b10      	cmp	r3, #16
 800818a:	dce7      	bgt.n	800815c <_strtod_l+0x248>
 800818c:	230a      	movs	r3, #10
 800818e:	435d      	muls	r5, r3
 8008190:	1955      	adds	r5, r2, r5
 8008192:	e7e3      	b.n	800815c <_strtod_l+0x248>
 8008194:	2200      	movs	r2, #0
 8008196:	920c      	str	r2, [sp, #48]	; 0x30
 8008198:	9205      	str	r2, [sp, #20]
 800819a:	3201      	adds	r2, #1
 800819c:	e7b0      	b.n	8008100 <_strtod_l+0x1ec>
 800819e:	2400      	movs	r4, #0
 80081a0:	9b07      	ldr	r3, [sp, #28]
 80081a2:	3302      	adds	r3, #2
 80081a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80081a6:	9b07      	ldr	r3, [sp, #28]
 80081a8:	789b      	ldrb	r3, [r3, #2]
 80081aa:	001a      	movs	r2, r3
 80081ac:	3a30      	subs	r2, #48	; 0x30
 80081ae:	2a09      	cmp	r2, #9
 80081b0:	d914      	bls.n	80081dc <_strtod_l+0x2c8>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80081b6:	2200      	movs	r2, #0
 80081b8:	e033      	b.n	8008222 <_strtod_l+0x30e>
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	0800fc8c 	.word	0x0800fc8c
 80081c0:	7ff00000 	.word	0x7ff00000
 80081c4:	ffefffff 	.word	0xffefffff
 80081c8:	00000433 	.word	0x00000433
 80081cc:	7fffffff 	.word	0x7fffffff
 80081d0:	0800fc88 	.word	0x0800fc88
 80081d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b30      	cmp	r3, #48	; 0x30
 80081de:	d0f9      	beq.n	80081d4 <_strtod_l+0x2c0>
 80081e0:	2200      	movs	r2, #0
 80081e2:	9206      	str	r2, [sp, #24]
 80081e4:	001a      	movs	r2, r3
 80081e6:	3a31      	subs	r2, #49	; 0x31
 80081e8:	2a08      	cmp	r2, #8
 80081ea:	d81b      	bhi.n	8008224 <_strtod_l+0x310>
 80081ec:	3b30      	subs	r3, #48	; 0x30
 80081ee:	930e      	str	r3, [sp, #56]	; 0x38
 80081f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081f2:	9306      	str	r3, [sp, #24]
 80081f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081f6:	1c59      	adds	r1, r3, #1
 80081f8:	911b      	str	r1, [sp, #108]	; 0x6c
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	001a      	movs	r2, r3
 80081fe:	3a30      	subs	r2, #48	; 0x30
 8008200:	2a09      	cmp	r2, #9
 8008202:	d93a      	bls.n	800827a <_strtod_l+0x366>
 8008204:	9a06      	ldr	r2, [sp, #24]
 8008206:	1a8a      	subs	r2, r1, r2
 8008208:	49b2      	ldr	r1, [pc, #712]	; (80084d4 <_strtod_l+0x5c0>)
 800820a:	9106      	str	r1, [sp, #24]
 800820c:	2a08      	cmp	r2, #8
 800820e:	dc04      	bgt.n	800821a <_strtod_l+0x306>
 8008210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008212:	9206      	str	r2, [sp, #24]
 8008214:	428a      	cmp	r2, r1
 8008216:	dd00      	ble.n	800821a <_strtod_l+0x306>
 8008218:	9106      	str	r1, [sp, #24]
 800821a:	2c00      	cmp	r4, #0
 800821c:	d002      	beq.n	8008224 <_strtod_l+0x310>
 800821e:	9a06      	ldr	r2, [sp, #24]
 8008220:	4252      	negs	r2, r2
 8008222:	9206      	str	r2, [sp, #24]
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	2a00      	cmp	r2, #0
 8008228:	d14d      	bne.n	80082c6 <_strtod_l+0x3b2>
 800822a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800822c:	4310      	orrs	r0, r2
 800822e:	d000      	beq.n	8008232 <_strtod_l+0x31e>
 8008230:	e6ab      	b.n	8007f8a <_strtod_l+0x76>
 8008232:	4662      	mov	r2, ip
 8008234:	2a00      	cmp	r2, #0
 8008236:	d000      	beq.n	800823a <_strtod_l+0x326>
 8008238:	e6c5      	b.n	8007fc6 <_strtod_l+0xb2>
 800823a:	2b69      	cmp	r3, #105	; 0x69
 800823c:	d027      	beq.n	800828e <_strtod_l+0x37a>
 800823e:	dc23      	bgt.n	8008288 <_strtod_l+0x374>
 8008240:	2b49      	cmp	r3, #73	; 0x49
 8008242:	d024      	beq.n	800828e <_strtod_l+0x37a>
 8008244:	2b4e      	cmp	r3, #78	; 0x4e
 8008246:	d000      	beq.n	800824a <_strtod_l+0x336>
 8008248:	e6bd      	b.n	8007fc6 <_strtod_l+0xb2>
 800824a:	49a3      	ldr	r1, [pc, #652]	; (80084d8 <_strtod_l+0x5c4>)
 800824c:	a81b      	add	r0, sp, #108	; 0x6c
 800824e:	f001 fb15 	bl	800987c <__match>
 8008252:	2800      	cmp	r0, #0
 8008254:	d100      	bne.n	8008258 <_strtod_l+0x344>
 8008256:	e6b6      	b.n	8007fc6 <_strtod_l+0xb2>
 8008258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b28      	cmp	r3, #40	; 0x28
 800825e:	d12c      	bne.n	80082ba <_strtod_l+0x3a6>
 8008260:	499e      	ldr	r1, [pc, #632]	; (80084dc <_strtod_l+0x5c8>)
 8008262:	aa1e      	add	r2, sp, #120	; 0x78
 8008264:	a81b      	add	r0, sp, #108	; 0x6c
 8008266:	f001 fb1d 	bl	80098a4 <__hexnan>
 800826a:	2805      	cmp	r0, #5
 800826c:	d125      	bne.n	80082ba <_strtod_l+0x3a6>
 800826e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008270:	4a9b      	ldr	r2, [pc, #620]	; (80084e0 <_strtod_l+0x5cc>)
 8008272:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8008274:	431a      	orrs	r2, r3
 8008276:	0017      	movs	r7, r2
 8008278:	e687      	b.n	8007f8a <_strtod_l+0x76>
 800827a:	220a      	movs	r2, #10
 800827c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800827e:	434a      	muls	r2, r1
 8008280:	18d2      	adds	r2, r2, r3
 8008282:	3a30      	subs	r2, #48	; 0x30
 8008284:	920e      	str	r2, [sp, #56]	; 0x38
 8008286:	e7b5      	b.n	80081f4 <_strtod_l+0x2e0>
 8008288:	2b6e      	cmp	r3, #110	; 0x6e
 800828a:	d0de      	beq.n	800824a <_strtod_l+0x336>
 800828c:	e69b      	b.n	8007fc6 <_strtod_l+0xb2>
 800828e:	4995      	ldr	r1, [pc, #596]	; (80084e4 <_strtod_l+0x5d0>)
 8008290:	a81b      	add	r0, sp, #108	; 0x6c
 8008292:	f001 faf3 	bl	800987c <__match>
 8008296:	2800      	cmp	r0, #0
 8008298:	d100      	bne.n	800829c <_strtod_l+0x388>
 800829a:	e694      	b.n	8007fc6 <_strtod_l+0xb2>
 800829c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800829e:	4992      	ldr	r1, [pc, #584]	; (80084e8 <_strtod_l+0x5d4>)
 80082a0:	3b01      	subs	r3, #1
 80082a2:	a81b      	add	r0, sp, #108	; 0x6c
 80082a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80082a6:	f001 fae9 	bl	800987c <__match>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d102      	bne.n	80082b4 <_strtod_l+0x3a0>
 80082ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082b0:	3301      	adds	r3, #1
 80082b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80082b4:	2600      	movs	r6, #0
 80082b6:	4f8a      	ldr	r7, [pc, #552]	; (80084e0 <_strtod_l+0x5cc>)
 80082b8:	e667      	b.n	8007f8a <_strtod_l+0x76>
 80082ba:	488c      	ldr	r0, [pc, #560]	; (80084ec <_strtod_l+0x5d8>)
 80082bc:	f000 ff1a 	bl	80090f4 <nan>
 80082c0:	0006      	movs	r6, r0
 80082c2:	000f      	movs	r7, r1
 80082c4:	e661      	b.n	8007f8a <_strtod_l+0x76>
 80082c6:	9b06      	ldr	r3, [sp, #24]
 80082c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ca:	1a9b      	subs	r3, r3, r2
 80082cc:	9309      	str	r3, [sp, #36]	; 0x24
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <_strtod_l+0x3c4>
 80082d4:	9b05      	ldr	r3, [sp, #20]
 80082d6:	9308      	str	r3, [sp, #32]
 80082d8:	9c05      	ldr	r4, [sp, #20]
 80082da:	2c10      	cmp	r4, #16
 80082dc:	dd00      	ble.n	80082e0 <_strtod_l+0x3cc>
 80082de:	2410      	movs	r4, #16
 80082e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80082e2:	f7fa f88b 	bl	80023fc <__aeabi_ui2d>
 80082e6:	9b05      	ldr	r3, [sp, #20]
 80082e8:	0006      	movs	r6, r0
 80082ea:	000f      	movs	r7, r1
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	dd15      	ble.n	800831c <_strtod_l+0x408>
 80082f0:	0022      	movs	r2, r4
 80082f2:	4b7f      	ldr	r3, [pc, #508]	; (80084f0 <_strtod_l+0x5dc>)
 80082f4:	3a09      	subs	r2, #9
 80082f6:	00d2      	lsls	r2, r2, #3
 80082f8:	189b      	adds	r3, r3, r2
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f7f9 f9b5 	bl	800166c <__aeabi_dmul>
 8008302:	0006      	movs	r6, r0
 8008304:	0028      	movs	r0, r5
 8008306:	000f      	movs	r7, r1
 8008308:	f7fa f878 	bl	80023fc <__aeabi_ui2d>
 800830c:	0002      	movs	r2, r0
 800830e:	000b      	movs	r3, r1
 8008310:	0030      	movs	r0, r6
 8008312:	0039      	movs	r1, r7
 8008314:	f7f8 fa50 	bl	80007b8 <__aeabi_dadd>
 8008318:	0006      	movs	r6, r0
 800831a:	000f      	movs	r7, r1
 800831c:	9b05      	ldr	r3, [sp, #20]
 800831e:	2b0f      	cmp	r3, #15
 8008320:	dc39      	bgt.n	8008396 <_strtod_l+0x482>
 8008322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d100      	bne.n	800832a <_strtod_l+0x416>
 8008328:	e62f      	b.n	8007f8a <_strtod_l+0x76>
 800832a:	dd24      	ble.n	8008376 <_strtod_l+0x462>
 800832c:	2b16      	cmp	r3, #22
 800832e:	dc09      	bgt.n	8008344 <_strtod_l+0x430>
 8008330:	496f      	ldr	r1, [pc, #444]	; (80084f0 <_strtod_l+0x5dc>)
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	18c9      	adds	r1, r1, r3
 8008336:	0032      	movs	r2, r6
 8008338:	6808      	ldr	r0, [r1, #0]
 800833a:	6849      	ldr	r1, [r1, #4]
 800833c:	003b      	movs	r3, r7
 800833e:	f7f9 f995 	bl	800166c <__aeabi_dmul>
 8008342:	e7bd      	b.n	80082c0 <_strtod_l+0x3ac>
 8008344:	2325      	movs	r3, #37	; 0x25
 8008346:	9a05      	ldr	r2, [sp, #20]
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800834c:	4293      	cmp	r3, r2
 800834e:	db22      	blt.n	8008396 <_strtod_l+0x482>
 8008350:	240f      	movs	r4, #15
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	4d66      	ldr	r5, [pc, #408]	; (80084f0 <_strtod_l+0x5dc>)
 8008356:	1ae4      	subs	r4, r4, r3
 8008358:	00e1      	lsls	r1, r4, #3
 800835a:	1869      	adds	r1, r5, r1
 800835c:	0032      	movs	r2, r6
 800835e:	6808      	ldr	r0, [r1, #0]
 8008360:	6849      	ldr	r1, [r1, #4]
 8008362:	003b      	movs	r3, r7
 8008364:	f7f9 f982 	bl	800166c <__aeabi_dmul>
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	1b1c      	subs	r4, r3, r4
 800836c:	00e4      	lsls	r4, r4, #3
 800836e:	192d      	adds	r5, r5, r4
 8008370:	682a      	ldr	r2, [r5, #0]
 8008372:	686b      	ldr	r3, [r5, #4]
 8008374:	e7e3      	b.n	800833e <_strtod_l+0x42a>
 8008376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008378:	3316      	adds	r3, #22
 800837a:	db0c      	blt.n	8008396 <_strtod_l+0x482>
 800837c:	9906      	ldr	r1, [sp, #24]
 800837e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008380:	4b5b      	ldr	r3, [pc, #364]	; (80084f0 <_strtod_l+0x5dc>)
 8008382:	1a52      	subs	r2, r2, r1
 8008384:	00d2      	lsls	r2, r2, #3
 8008386:	189b      	adds	r3, r3, r2
 8008388:	0030      	movs	r0, r6
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	0039      	movs	r1, r7
 8008390:	f7f8 fd72 	bl	8000e78 <__aeabi_ddiv>
 8008394:	e794      	b.n	80082c0 <_strtod_l+0x3ac>
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	1b1c      	subs	r4, r3, r4
 800839a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839c:	18e4      	adds	r4, r4, r3
 800839e:	2c00      	cmp	r4, #0
 80083a0:	dd72      	ble.n	8008488 <_strtod_l+0x574>
 80083a2:	220f      	movs	r2, #15
 80083a4:	0023      	movs	r3, r4
 80083a6:	4013      	ands	r3, r2
 80083a8:	4214      	tst	r4, r2
 80083aa:	d00a      	beq.n	80083c2 <_strtod_l+0x4ae>
 80083ac:	4950      	ldr	r1, [pc, #320]	; (80084f0 <_strtod_l+0x5dc>)
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	18c9      	adds	r1, r1, r3
 80083b2:	0032      	movs	r2, r6
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	6849      	ldr	r1, [r1, #4]
 80083b8:	003b      	movs	r3, r7
 80083ba:	f7f9 f957 	bl	800166c <__aeabi_dmul>
 80083be:	0006      	movs	r6, r0
 80083c0:	000f      	movs	r7, r1
 80083c2:	230f      	movs	r3, #15
 80083c4:	439c      	bics	r4, r3
 80083c6:	d04a      	beq.n	800845e <_strtod_l+0x54a>
 80083c8:	3326      	adds	r3, #38	; 0x26
 80083ca:	33ff      	adds	r3, #255	; 0xff
 80083cc:	429c      	cmp	r4, r3
 80083ce:	dd22      	ble.n	8008416 <_strtod_l+0x502>
 80083d0:	2300      	movs	r3, #0
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	9306      	str	r3, [sp, #24]
 80083d6:	930d      	str	r3, [sp, #52]	; 0x34
 80083d8:	9308      	str	r3, [sp, #32]
 80083da:	2322      	movs	r3, #34	; 0x22
 80083dc:	2600      	movs	r6, #0
 80083de:	9a04      	ldr	r2, [sp, #16]
 80083e0:	4f3f      	ldr	r7, [pc, #252]	; (80084e0 <_strtod_l+0x5cc>)
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e6:	42b3      	cmp	r3, r6
 80083e8:	d100      	bne.n	80083ec <_strtod_l+0x4d8>
 80083ea:	e5ce      	b.n	8007f8a <_strtod_l+0x76>
 80083ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083ee:	9804      	ldr	r0, [sp, #16]
 80083f0:	f001 fb3a 	bl	8009a68 <_Bfree>
 80083f4:	9908      	ldr	r1, [sp, #32]
 80083f6:	9804      	ldr	r0, [sp, #16]
 80083f8:	f001 fb36 	bl	8009a68 <_Bfree>
 80083fc:	9906      	ldr	r1, [sp, #24]
 80083fe:	9804      	ldr	r0, [sp, #16]
 8008400:	f001 fb32 	bl	8009a68 <_Bfree>
 8008404:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008406:	9804      	ldr	r0, [sp, #16]
 8008408:	f001 fb2e 	bl	8009a68 <_Bfree>
 800840c:	9905      	ldr	r1, [sp, #20]
 800840e:	9804      	ldr	r0, [sp, #16]
 8008410:	f001 fb2a 	bl	8009a68 <_Bfree>
 8008414:	e5b9      	b.n	8007f8a <_strtod_l+0x76>
 8008416:	2300      	movs	r3, #0
 8008418:	0030      	movs	r0, r6
 800841a:	0039      	movs	r1, r7
 800841c:	4d35      	ldr	r5, [pc, #212]	; (80084f4 <_strtod_l+0x5e0>)
 800841e:	1124      	asrs	r4, r4, #4
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	2c01      	cmp	r4, #1
 8008424:	dc1e      	bgt.n	8008464 <_strtod_l+0x550>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <_strtod_l+0x51a>
 800842a:	0006      	movs	r6, r0
 800842c:	000f      	movs	r7, r1
 800842e:	4b32      	ldr	r3, [pc, #200]	; (80084f8 <_strtod_l+0x5e4>)
 8008430:	9a07      	ldr	r2, [sp, #28]
 8008432:	18ff      	adds	r7, r7, r3
 8008434:	4b2f      	ldr	r3, [pc, #188]	; (80084f4 <_strtod_l+0x5e0>)
 8008436:	00d2      	lsls	r2, r2, #3
 8008438:	189d      	adds	r5, r3, r2
 800843a:	6828      	ldr	r0, [r5, #0]
 800843c:	6869      	ldr	r1, [r5, #4]
 800843e:	0032      	movs	r2, r6
 8008440:	003b      	movs	r3, r7
 8008442:	f7f9 f913 	bl	800166c <__aeabi_dmul>
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <_strtod_l+0x5cc>)
 8008448:	4a2c      	ldr	r2, [pc, #176]	; (80084fc <_strtod_l+0x5e8>)
 800844a:	0006      	movs	r6, r0
 800844c:	400b      	ands	r3, r1
 800844e:	4293      	cmp	r3, r2
 8008450:	d8be      	bhi.n	80083d0 <_strtod_l+0x4bc>
 8008452:	4a2b      	ldr	r2, [pc, #172]	; (8008500 <_strtod_l+0x5ec>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d913      	bls.n	8008480 <_strtod_l+0x56c>
 8008458:	2601      	movs	r6, #1
 800845a:	4f2a      	ldr	r7, [pc, #168]	; (8008504 <_strtod_l+0x5f0>)
 800845c:	4276      	negs	r6, r6
 800845e:	2300      	movs	r3, #0
 8008460:	9307      	str	r3, [sp, #28]
 8008462:	e088      	b.n	8008576 <_strtod_l+0x662>
 8008464:	2201      	movs	r2, #1
 8008466:	4214      	tst	r4, r2
 8008468:	d004      	beq.n	8008474 <_strtod_l+0x560>
 800846a:	682a      	ldr	r2, [r5, #0]
 800846c:	686b      	ldr	r3, [r5, #4]
 800846e:	f7f9 f8fd 	bl	800166c <__aeabi_dmul>
 8008472:	2301      	movs	r3, #1
 8008474:	9a07      	ldr	r2, [sp, #28]
 8008476:	1064      	asrs	r4, r4, #1
 8008478:	3201      	adds	r2, #1
 800847a:	9207      	str	r2, [sp, #28]
 800847c:	3508      	adds	r5, #8
 800847e:	e7d0      	b.n	8008422 <_strtod_l+0x50e>
 8008480:	23d4      	movs	r3, #212	; 0xd4
 8008482:	049b      	lsls	r3, r3, #18
 8008484:	18cf      	adds	r7, r1, r3
 8008486:	e7ea      	b.n	800845e <_strtod_l+0x54a>
 8008488:	2c00      	cmp	r4, #0
 800848a:	d0e8      	beq.n	800845e <_strtod_l+0x54a>
 800848c:	4264      	negs	r4, r4
 800848e:	230f      	movs	r3, #15
 8008490:	0022      	movs	r2, r4
 8008492:	401a      	ands	r2, r3
 8008494:	421c      	tst	r4, r3
 8008496:	d00a      	beq.n	80084ae <_strtod_l+0x59a>
 8008498:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <_strtod_l+0x5dc>)
 800849a:	00d2      	lsls	r2, r2, #3
 800849c:	189b      	adds	r3, r3, r2
 800849e:	0030      	movs	r0, r6
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	0039      	movs	r1, r7
 80084a6:	f7f8 fce7 	bl	8000e78 <__aeabi_ddiv>
 80084aa:	0006      	movs	r6, r0
 80084ac:	000f      	movs	r7, r1
 80084ae:	1124      	asrs	r4, r4, #4
 80084b0:	d0d5      	beq.n	800845e <_strtod_l+0x54a>
 80084b2:	2c1f      	cmp	r4, #31
 80084b4:	dd28      	ble.n	8008508 <_strtod_l+0x5f4>
 80084b6:	2300      	movs	r3, #0
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	9306      	str	r3, [sp, #24]
 80084bc:	930d      	str	r3, [sp, #52]	; 0x34
 80084be:	9308      	str	r3, [sp, #32]
 80084c0:	2322      	movs	r3, #34	; 0x22
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	2600      	movs	r6, #0
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ca:	2700      	movs	r7, #0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d18d      	bne.n	80083ec <_strtod_l+0x4d8>
 80084d0:	e55b      	b.n	8007f8a <_strtod_l+0x76>
 80084d2:	46c0      	nop			; (mov r8, r8)
 80084d4:	00004e1f 	.word	0x00004e1f
 80084d8:	0800ffc1 	.word	0x0800ffc1
 80084dc:	0800fca0 	.word	0x0800fca0
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	0800ffb9 	.word	0x0800ffb9
 80084e8:	0801006f 	.word	0x0801006f
 80084ec:	0801006b 	.word	0x0801006b
 80084f0:	0800fee0 	.word	0x0800fee0
 80084f4:	0800feb8 	.word	0x0800feb8
 80084f8:	fcb00000 	.word	0xfcb00000
 80084fc:	7ca00000 	.word	0x7ca00000
 8008500:	7c900000 	.word	0x7c900000
 8008504:	7fefffff 	.word	0x7fefffff
 8008508:	2310      	movs	r3, #16
 800850a:	0022      	movs	r2, r4
 800850c:	401a      	ands	r2, r3
 800850e:	9207      	str	r2, [sp, #28]
 8008510:	421c      	tst	r4, r3
 8008512:	d001      	beq.n	8008518 <_strtod_l+0x604>
 8008514:	335a      	adds	r3, #90	; 0x5a
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	0030      	movs	r0, r6
 800851a:	0039      	movs	r1, r7
 800851c:	2300      	movs	r3, #0
 800851e:	4dc4      	ldr	r5, [pc, #784]	; (8008830 <_strtod_l+0x91c>)
 8008520:	2201      	movs	r2, #1
 8008522:	4214      	tst	r4, r2
 8008524:	d004      	beq.n	8008530 <_strtod_l+0x61c>
 8008526:	682a      	ldr	r2, [r5, #0]
 8008528:	686b      	ldr	r3, [r5, #4]
 800852a:	f7f9 f89f 	bl	800166c <__aeabi_dmul>
 800852e:	2301      	movs	r3, #1
 8008530:	1064      	asrs	r4, r4, #1
 8008532:	3508      	adds	r5, #8
 8008534:	2c00      	cmp	r4, #0
 8008536:	d1f3      	bne.n	8008520 <_strtod_l+0x60c>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <_strtod_l+0x62c>
 800853c:	0006      	movs	r6, r0
 800853e:	000f      	movs	r7, r1
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00f      	beq.n	8008566 <_strtod_l+0x652>
 8008546:	236b      	movs	r3, #107	; 0x6b
 8008548:	007a      	lsls	r2, r7, #1
 800854a:	0d52      	lsrs	r2, r2, #21
 800854c:	0039      	movs	r1, r7
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	2b00      	cmp	r3, #0
 8008552:	dd08      	ble.n	8008566 <_strtod_l+0x652>
 8008554:	2b1f      	cmp	r3, #31
 8008556:	dc00      	bgt.n	800855a <_strtod_l+0x646>
 8008558:	e121      	b.n	800879e <_strtod_l+0x88a>
 800855a:	2600      	movs	r6, #0
 800855c:	2b34      	cmp	r3, #52	; 0x34
 800855e:	dc00      	bgt.n	8008562 <_strtod_l+0x64e>
 8008560:	e116      	b.n	8008790 <_strtod_l+0x87c>
 8008562:	27dc      	movs	r7, #220	; 0xdc
 8008564:	04bf      	lsls	r7, r7, #18
 8008566:	2200      	movs	r2, #0
 8008568:	2300      	movs	r3, #0
 800856a:	0030      	movs	r0, r6
 800856c:	0039      	movs	r1, r7
 800856e:	f7f7 ff6b 	bl	8000448 <__aeabi_dcmpeq>
 8008572:	2800      	cmp	r0, #0
 8008574:	d19f      	bne.n	80084b6 <_strtod_l+0x5a2>
 8008576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008578:	9a08      	ldr	r2, [sp, #32]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	9804      	ldr	r0, [sp, #16]
 8008582:	f001 fabf 	bl	8009b04 <__s2b>
 8008586:	900d      	str	r0, [sp, #52]	; 0x34
 8008588:	2800      	cmp	r0, #0
 800858a:	d100      	bne.n	800858e <_strtod_l+0x67a>
 800858c:	e720      	b.n	80083d0 <_strtod_l+0x4bc>
 800858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008590:	9906      	ldr	r1, [sp, #24]
 8008592:	17da      	asrs	r2, r3, #31
 8008594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008596:	1a5b      	subs	r3, r3, r1
 8008598:	401a      	ands	r2, r3
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	9215      	str	r2, [sp, #84]	; 0x54
 800859e:	43db      	mvns	r3, r3
 80085a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a2:	17db      	asrs	r3, r3, #31
 80085a4:	401a      	ands	r2, r3
 80085a6:	2300      	movs	r3, #0
 80085a8:	9218      	str	r2, [sp, #96]	; 0x60
 80085aa:	9305      	str	r3, [sp, #20]
 80085ac:	9306      	str	r3, [sp, #24]
 80085ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b0:	9804      	ldr	r0, [sp, #16]
 80085b2:	6859      	ldr	r1, [r3, #4]
 80085b4:	f001 fa30 	bl	8009a18 <_Balloc>
 80085b8:	9008      	str	r0, [sp, #32]
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d100      	bne.n	80085c0 <_strtod_l+0x6ac>
 80085be:	e70c      	b.n	80083da <_strtod_l+0x4c6>
 80085c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c2:	300c      	adds	r0, #12
 80085c4:	0019      	movs	r1, r3
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	310c      	adds	r1, #12
 80085ca:	3202      	adds	r2, #2
 80085cc:	0092      	lsls	r2, r2, #2
 80085ce:	f000 fd88 	bl	80090e2 <memcpy>
 80085d2:	ab1e      	add	r3, sp, #120	; 0x78
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	ab1d      	add	r3, sp, #116	; 0x74
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	0032      	movs	r2, r6
 80085dc:	003b      	movs	r3, r7
 80085de:	9804      	ldr	r0, [sp, #16]
 80085e0:	9610      	str	r6, [sp, #64]	; 0x40
 80085e2:	9711      	str	r7, [sp, #68]	; 0x44
 80085e4:	f001 fdb6 	bl	800a154 <__d2b>
 80085e8:	901c      	str	r0, [sp, #112]	; 0x70
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d100      	bne.n	80085f0 <_strtod_l+0x6dc>
 80085ee:	e6f4      	b.n	80083da <_strtod_l+0x4c6>
 80085f0:	2101      	movs	r1, #1
 80085f2:	9804      	ldr	r0, [sp, #16]
 80085f4:	f001 fb1a 	bl	8009c2c <__i2b>
 80085f8:	9006      	str	r0, [sp, #24]
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d100      	bne.n	8008600 <_strtod_l+0x6ec>
 80085fe:	e6ec      	b.n	80083da <_strtod_l+0x4c6>
 8008600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008602:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008604:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008606:	1ad4      	subs	r4, r2, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	db01      	blt.n	8008610 <_strtod_l+0x6fc>
 800860c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800860e:	195d      	adds	r5, r3, r5
 8008610:	9907      	ldr	r1, [sp, #28]
 8008612:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008614:	1a5b      	subs	r3, r3, r1
 8008616:	2136      	movs	r1, #54	; 0x36
 8008618:	189b      	adds	r3, r3, r2
 800861a:	1a8a      	subs	r2, r1, r2
 800861c:	4985      	ldr	r1, [pc, #532]	; (8008834 <_strtod_l+0x920>)
 800861e:	2001      	movs	r0, #1
 8008620:	468c      	mov	ip, r1
 8008622:	2100      	movs	r1, #0
 8008624:	3b01      	subs	r3, #1
 8008626:	9114      	str	r1, [sp, #80]	; 0x50
 8008628:	9012      	str	r0, [sp, #72]	; 0x48
 800862a:	4563      	cmp	r3, ip
 800862c:	da07      	bge.n	800863e <_strtod_l+0x72a>
 800862e:	4661      	mov	r1, ip
 8008630:	1ac9      	subs	r1, r1, r3
 8008632:	1a52      	subs	r2, r2, r1
 8008634:	291f      	cmp	r1, #31
 8008636:	dd00      	ble.n	800863a <_strtod_l+0x726>
 8008638:	e0b6      	b.n	80087a8 <_strtod_l+0x894>
 800863a:	4088      	lsls	r0, r1
 800863c:	9012      	str	r0, [sp, #72]	; 0x48
 800863e:	18ab      	adds	r3, r5, r2
 8008640:	930c      	str	r3, [sp, #48]	; 0x30
 8008642:	18a4      	adds	r4, r4, r2
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008648:	191c      	adds	r4, r3, r4
 800864a:	002b      	movs	r3, r5
 800864c:	4295      	cmp	r5, r2
 800864e:	dd00      	ble.n	8008652 <_strtod_l+0x73e>
 8008650:	0013      	movs	r3, r2
 8008652:	42a3      	cmp	r3, r4
 8008654:	dd00      	ble.n	8008658 <_strtod_l+0x744>
 8008656:	0023      	movs	r3, r4
 8008658:	2b00      	cmp	r3, #0
 800865a:	dd04      	ble.n	8008666 <_strtod_l+0x752>
 800865c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800865e:	1ae4      	subs	r4, r4, r3
 8008660:	1ad2      	subs	r2, r2, r3
 8008662:	920c      	str	r2, [sp, #48]	; 0x30
 8008664:	1aed      	subs	r5, r5, r3
 8008666:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd17      	ble.n	800869c <_strtod_l+0x788>
 800866c:	001a      	movs	r2, r3
 800866e:	9906      	ldr	r1, [sp, #24]
 8008670:	9804      	ldr	r0, [sp, #16]
 8008672:	f001 fba3 	bl	8009dbc <__pow5mult>
 8008676:	9006      	str	r0, [sp, #24]
 8008678:	2800      	cmp	r0, #0
 800867a:	d100      	bne.n	800867e <_strtod_l+0x76a>
 800867c:	e6ad      	b.n	80083da <_strtod_l+0x4c6>
 800867e:	0001      	movs	r1, r0
 8008680:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008682:	9804      	ldr	r0, [sp, #16]
 8008684:	f001 faea 	bl	8009c5c <__multiply>
 8008688:	900e      	str	r0, [sp, #56]	; 0x38
 800868a:	2800      	cmp	r0, #0
 800868c:	d100      	bne.n	8008690 <_strtod_l+0x77c>
 800868e:	e6a4      	b.n	80083da <_strtod_l+0x4c6>
 8008690:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008692:	9804      	ldr	r0, [sp, #16]
 8008694:	f001 f9e8 	bl	8009a68 <_Bfree>
 8008698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800869a:	931c      	str	r3, [sp, #112]	; 0x70
 800869c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	dd00      	ble.n	80086a4 <_strtod_l+0x790>
 80086a2:	e087      	b.n	80087b4 <_strtod_l+0x8a0>
 80086a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	dd08      	ble.n	80086bc <_strtod_l+0x7a8>
 80086aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086ac:	9908      	ldr	r1, [sp, #32]
 80086ae:	9804      	ldr	r0, [sp, #16]
 80086b0:	f001 fb84 	bl	8009dbc <__pow5mult>
 80086b4:	9008      	str	r0, [sp, #32]
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d100      	bne.n	80086bc <_strtod_l+0x7a8>
 80086ba:	e68e      	b.n	80083da <_strtod_l+0x4c6>
 80086bc:	2c00      	cmp	r4, #0
 80086be:	dd08      	ble.n	80086d2 <_strtod_l+0x7be>
 80086c0:	0022      	movs	r2, r4
 80086c2:	9908      	ldr	r1, [sp, #32]
 80086c4:	9804      	ldr	r0, [sp, #16]
 80086c6:	f001 fbbb 	bl	8009e40 <__lshift>
 80086ca:	9008      	str	r0, [sp, #32]
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d100      	bne.n	80086d2 <_strtod_l+0x7be>
 80086d0:	e683      	b.n	80083da <_strtod_l+0x4c6>
 80086d2:	2d00      	cmp	r5, #0
 80086d4:	dd08      	ble.n	80086e8 <_strtod_l+0x7d4>
 80086d6:	002a      	movs	r2, r5
 80086d8:	9906      	ldr	r1, [sp, #24]
 80086da:	9804      	ldr	r0, [sp, #16]
 80086dc:	f001 fbb0 	bl	8009e40 <__lshift>
 80086e0:	9006      	str	r0, [sp, #24]
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d100      	bne.n	80086e8 <_strtod_l+0x7d4>
 80086e6:	e678      	b.n	80083da <_strtod_l+0x4c6>
 80086e8:	9a08      	ldr	r2, [sp, #32]
 80086ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086ec:	9804      	ldr	r0, [sp, #16]
 80086ee:	f001 fc31 	bl	8009f54 <__mdiff>
 80086f2:	9005      	str	r0, [sp, #20]
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d100      	bne.n	80086fa <_strtod_l+0x7e6>
 80086f8:	e66f      	b.n	80083da <_strtod_l+0x4c6>
 80086fa:	2200      	movs	r2, #0
 80086fc:	68c3      	ldr	r3, [r0, #12]
 80086fe:	9906      	ldr	r1, [sp, #24]
 8008700:	60c2      	str	r2, [r0, #12]
 8008702:	930c      	str	r3, [sp, #48]	; 0x30
 8008704:	f001 fc0a 	bl	8009f1c <__mcmp>
 8008708:	2800      	cmp	r0, #0
 800870a:	da5d      	bge.n	80087c8 <_strtod_l+0x8b4>
 800870c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800870e:	4333      	orrs	r3, r6
 8008710:	d000      	beq.n	8008714 <_strtod_l+0x800>
 8008712:	e088      	b.n	8008826 <_strtod_l+0x912>
 8008714:	033b      	lsls	r3, r7, #12
 8008716:	d000      	beq.n	800871a <_strtod_l+0x806>
 8008718:	e085      	b.n	8008826 <_strtod_l+0x912>
 800871a:	22d6      	movs	r2, #214	; 0xd6
 800871c:	4b46      	ldr	r3, [pc, #280]	; (8008838 <_strtod_l+0x924>)
 800871e:	04d2      	lsls	r2, r2, #19
 8008720:	403b      	ands	r3, r7
 8008722:	4293      	cmp	r3, r2
 8008724:	d97f      	bls.n	8008826 <_strtod_l+0x912>
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <_strtod_l+0x822>
 800872e:	9b05      	ldr	r3, [sp, #20]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b01      	cmp	r3, #1
 8008734:	dd77      	ble.n	8008826 <_strtod_l+0x912>
 8008736:	9905      	ldr	r1, [sp, #20]
 8008738:	2201      	movs	r2, #1
 800873a:	9804      	ldr	r0, [sp, #16]
 800873c:	f001 fb80 	bl	8009e40 <__lshift>
 8008740:	9906      	ldr	r1, [sp, #24]
 8008742:	9005      	str	r0, [sp, #20]
 8008744:	f001 fbea 	bl	8009f1c <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	dd6c      	ble.n	8008826 <_strtod_l+0x912>
 800874c:	9907      	ldr	r1, [sp, #28]
 800874e:	003b      	movs	r3, r7
 8008750:	4a39      	ldr	r2, [pc, #228]	; (8008838 <_strtod_l+0x924>)
 8008752:	2900      	cmp	r1, #0
 8008754:	d100      	bne.n	8008758 <_strtod_l+0x844>
 8008756:	e094      	b.n	8008882 <_strtod_l+0x96e>
 8008758:	0011      	movs	r1, r2
 800875a:	20d6      	movs	r0, #214	; 0xd6
 800875c:	4039      	ands	r1, r7
 800875e:	04c0      	lsls	r0, r0, #19
 8008760:	4281      	cmp	r1, r0
 8008762:	dd00      	ble.n	8008766 <_strtod_l+0x852>
 8008764:	e08d      	b.n	8008882 <_strtod_l+0x96e>
 8008766:	23dc      	movs	r3, #220	; 0xdc
 8008768:	049b      	lsls	r3, r3, #18
 800876a:	4299      	cmp	r1, r3
 800876c:	dc00      	bgt.n	8008770 <_strtod_l+0x85c>
 800876e:	e6a7      	b.n	80084c0 <_strtod_l+0x5ac>
 8008770:	0030      	movs	r0, r6
 8008772:	0039      	movs	r1, r7
 8008774:	4b31      	ldr	r3, [pc, #196]	; (800883c <_strtod_l+0x928>)
 8008776:	2200      	movs	r2, #0
 8008778:	f7f8 ff78 	bl	800166c <__aeabi_dmul>
 800877c:	4b2e      	ldr	r3, [pc, #184]	; (8008838 <_strtod_l+0x924>)
 800877e:	0006      	movs	r6, r0
 8008780:	000f      	movs	r7, r1
 8008782:	420b      	tst	r3, r1
 8008784:	d000      	beq.n	8008788 <_strtod_l+0x874>
 8008786:	e631      	b.n	80083ec <_strtod_l+0x4d8>
 8008788:	2322      	movs	r3, #34	; 0x22
 800878a:	9a04      	ldr	r2, [sp, #16]
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	e62d      	b.n	80083ec <_strtod_l+0x4d8>
 8008790:	234b      	movs	r3, #75	; 0x4b
 8008792:	1a9a      	subs	r2, r3, r2
 8008794:	3b4c      	subs	r3, #76	; 0x4c
 8008796:	4093      	lsls	r3, r2
 8008798:	4019      	ands	r1, r3
 800879a:	000f      	movs	r7, r1
 800879c:	e6e3      	b.n	8008566 <_strtod_l+0x652>
 800879e:	2201      	movs	r2, #1
 80087a0:	4252      	negs	r2, r2
 80087a2:	409a      	lsls	r2, r3
 80087a4:	4016      	ands	r6, r2
 80087a6:	e6de      	b.n	8008566 <_strtod_l+0x652>
 80087a8:	4925      	ldr	r1, [pc, #148]	; (8008840 <_strtod_l+0x92c>)
 80087aa:	1acb      	subs	r3, r1, r3
 80087ac:	0001      	movs	r1, r0
 80087ae:	4099      	lsls	r1, r3
 80087b0:	9114      	str	r1, [sp, #80]	; 0x50
 80087b2:	e743      	b.n	800863c <_strtod_l+0x728>
 80087b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087b8:	9804      	ldr	r0, [sp, #16]
 80087ba:	f001 fb41 	bl	8009e40 <__lshift>
 80087be:	901c      	str	r0, [sp, #112]	; 0x70
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d000      	beq.n	80087c6 <_strtod_l+0x8b2>
 80087c4:	e76e      	b.n	80086a4 <_strtod_l+0x790>
 80087c6:	e608      	b.n	80083da <_strtod_l+0x4c6>
 80087c8:	970e      	str	r7, [sp, #56]	; 0x38
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d177      	bne.n	80088be <_strtod_l+0x9aa>
 80087ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d0:	033b      	lsls	r3, r7, #12
 80087d2:	0b1b      	lsrs	r3, r3, #12
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	d039      	beq.n	800884c <_strtod_l+0x938>
 80087d8:	4a1a      	ldr	r2, [pc, #104]	; (8008844 <_strtod_l+0x930>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d139      	bne.n	8008852 <_strtod_l+0x93e>
 80087de:	2101      	movs	r1, #1
 80087e0:	9b07      	ldr	r3, [sp, #28]
 80087e2:	4249      	negs	r1, r1
 80087e4:	0032      	movs	r2, r6
 80087e6:	0008      	movs	r0, r1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <_strtod_l+0x8f0>
 80087ec:	24d4      	movs	r4, #212	; 0xd4
 80087ee:	4b12      	ldr	r3, [pc, #72]	; (8008838 <_strtod_l+0x924>)
 80087f0:	0008      	movs	r0, r1
 80087f2:	403b      	ands	r3, r7
 80087f4:	04e4      	lsls	r4, r4, #19
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	d804      	bhi.n	8008804 <_strtod_l+0x8f0>
 80087fa:	306c      	adds	r0, #108	; 0x6c
 80087fc:	0d1b      	lsrs	r3, r3, #20
 80087fe:	1ac3      	subs	r3, r0, r3
 8008800:	4099      	lsls	r1, r3
 8008802:	0008      	movs	r0, r1
 8008804:	4282      	cmp	r2, r0
 8008806:	d124      	bne.n	8008852 <_strtod_l+0x93e>
 8008808:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <_strtod_l+0x934>)
 800880a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800880c:	4299      	cmp	r1, r3
 800880e:	d102      	bne.n	8008816 <_strtod_l+0x902>
 8008810:	3201      	adds	r2, #1
 8008812:	d100      	bne.n	8008816 <_strtod_l+0x902>
 8008814:	e5e1      	b.n	80083da <_strtod_l+0x4c6>
 8008816:	4b08      	ldr	r3, [pc, #32]	; (8008838 <_strtod_l+0x924>)
 8008818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800881a:	2600      	movs	r6, #0
 800881c:	401a      	ands	r2, r3
 800881e:	0013      	movs	r3, r2
 8008820:	2280      	movs	r2, #128	; 0x80
 8008822:	0352      	lsls	r2, r2, #13
 8008824:	189f      	adds	r7, r3, r2
 8008826:	9b07      	ldr	r3, [sp, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1a1      	bne.n	8008770 <_strtod_l+0x85c>
 800882c:	e5de      	b.n	80083ec <_strtod_l+0x4d8>
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	0800fcb8 	.word	0x0800fcb8
 8008834:	fffffc02 	.word	0xfffffc02
 8008838:	7ff00000 	.word	0x7ff00000
 800883c:	39500000 	.word	0x39500000
 8008840:	fffffbe2 	.word	0xfffffbe2
 8008844:	000fffff 	.word	0x000fffff
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	4333      	orrs	r3, r6
 800884e:	d100      	bne.n	8008852 <_strtod_l+0x93e>
 8008850:	e77c      	b.n	800874c <_strtod_l+0x838>
 8008852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01d      	beq.n	8008894 <_strtod_l+0x980>
 8008858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800885a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800885c:	4213      	tst	r3, r2
 800885e:	d0e2      	beq.n	8008826 <_strtod_l+0x912>
 8008860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008862:	0030      	movs	r0, r6
 8008864:	0039      	movs	r1, r7
 8008866:	9a07      	ldr	r2, [sp, #28]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d017      	beq.n	800889c <_strtod_l+0x988>
 800886c:	f7ff fb3a 	bl	8007ee4 <sulp>
 8008870:	0002      	movs	r2, r0
 8008872:	000b      	movs	r3, r1
 8008874:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008876:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008878:	f7f7 ff9e 	bl	80007b8 <__aeabi_dadd>
 800887c:	0006      	movs	r6, r0
 800887e:	000f      	movs	r7, r1
 8008880:	e7d1      	b.n	8008826 <_strtod_l+0x912>
 8008882:	2601      	movs	r6, #1
 8008884:	4013      	ands	r3, r2
 8008886:	4a98      	ldr	r2, [pc, #608]	; (8008ae8 <_strtod_l+0xbd4>)
 8008888:	4276      	negs	r6, r6
 800888a:	189b      	adds	r3, r3, r2
 800888c:	4a97      	ldr	r2, [pc, #604]	; (8008aec <_strtod_l+0xbd8>)
 800888e:	431a      	orrs	r2, r3
 8008890:	0017      	movs	r7, r2
 8008892:	e7c8      	b.n	8008826 <_strtod_l+0x912>
 8008894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008896:	4233      	tst	r3, r6
 8008898:	d0c5      	beq.n	8008826 <_strtod_l+0x912>
 800889a:	e7e1      	b.n	8008860 <_strtod_l+0x94c>
 800889c:	f7ff fb22 	bl	8007ee4 <sulp>
 80088a0:	0002      	movs	r2, r0
 80088a2:	000b      	movs	r3, r1
 80088a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80088a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088a8:	f7f9 f9a2 	bl	8001bf0 <__aeabi_dsub>
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	0006      	movs	r6, r0
 80088b2:	000f      	movs	r7, r1
 80088b4:	f7f7 fdc8 	bl	8000448 <__aeabi_dcmpeq>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d0b4      	beq.n	8008826 <_strtod_l+0x912>
 80088bc:	e600      	b.n	80084c0 <_strtod_l+0x5ac>
 80088be:	9906      	ldr	r1, [sp, #24]
 80088c0:	9805      	ldr	r0, [sp, #20]
 80088c2:	f001 fca7 	bl	800a214 <__ratio>
 80088c6:	2380      	movs	r3, #128	; 0x80
 80088c8:	2200      	movs	r2, #0
 80088ca:	05db      	lsls	r3, r3, #23
 80088cc:	0004      	movs	r4, r0
 80088ce:	000d      	movs	r5, r1
 80088d0:	f7f7 fdca 	bl	8000468 <__aeabi_dcmple>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d06d      	beq.n	80089b4 <_strtod_l+0xaa0>
 80088d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d000      	beq.n	80088e0 <_strtod_l+0x9cc>
 80088de:	e07e      	b.n	80089de <_strtod_l+0xaca>
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	d158      	bne.n	8008996 <_strtod_l+0xa82>
 80088e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088e6:	031b      	lsls	r3, r3, #12
 80088e8:	d000      	beq.n	80088ec <_strtod_l+0x9d8>
 80088ea:	e07f      	b.n	80089ec <_strtod_l+0xad8>
 80088ec:	2200      	movs	r2, #0
 80088ee:	0020      	movs	r0, r4
 80088f0:	0029      	movs	r1, r5
 80088f2:	4b7f      	ldr	r3, [pc, #508]	; (8008af0 <_strtod_l+0xbdc>)
 80088f4:	f7f7 fdae 	bl	8000454 <__aeabi_dcmplt>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d158      	bne.n	80089ae <_strtod_l+0xa9a>
 80088fc:	0020      	movs	r0, r4
 80088fe:	0029      	movs	r1, r5
 8008900:	2200      	movs	r2, #0
 8008902:	4b7c      	ldr	r3, [pc, #496]	; (8008af4 <_strtod_l+0xbe0>)
 8008904:	f7f8 feb2 	bl	800166c <__aeabi_dmul>
 8008908:	0004      	movs	r4, r0
 800890a:	000d      	movs	r5, r1
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	061b      	lsls	r3, r3, #24
 8008910:	940a      	str	r4, [sp, #40]	; 0x28
 8008912:	18eb      	adds	r3, r5, r3
 8008914:	930b      	str	r3, [sp, #44]	; 0x2c
 8008916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891a:	9212      	str	r2, [sp, #72]	; 0x48
 800891c:	9313      	str	r3, [sp, #76]	; 0x4c
 800891e:	4a76      	ldr	r2, [pc, #472]	; (8008af8 <_strtod_l+0xbe4>)
 8008920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008922:	4013      	ands	r3, r2
 8008924:	9314      	str	r3, [sp, #80]	; 0x50
 8008926:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008928:	4b74      	ldr	r3, [pc, #464]	; (8008afc <_strtod_l+0xbe8>)
 800892a:	429a      	cmp	r2, r3
 800892c:	d000      	beq.n	8008930 <_strtod_l+0xa1c>
 800892e:	e091      	b.n	8008a54 <_strtod_l+0xb40>
 8008930:	4a73      	ldr	r2, [pc, #460]	; (8008b00 <_strtod_l+0xbec>)
 8008932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008934:	4694      	mov	ip, r2
 8008936:	4463      	add	r3, ip
 8008938:	001f      	movs	r7, r3
 800893a:	0030      	movs	r0, r6
 800893c:	0019      	movs	r1, r3
 800893e:	f001 fba1 	bl	800a084 <__ulp>
 8008942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008946:	f7f8 fe91 	bl	800166c <__aeabi_dmul>
 800894a:	0032      	movs	r2, r6
 800894c:	003b      	movs	r3, r7
 800894e:	f7f7 ff33 	bl	80007b8 <__aeabi_dadd>
 8008952:	4a69      	ldr	r2, [pc, #420]	; (8008af8 <_strtod_l+0xbe4>)
 8008954:	4b6b      	ldr	r3, [pc, #428]	; (8008b04 <_strtod_l+0xbf0>)
 8008956:	0006      	movs	r6, r0
 8008958:	400a      	ands	r2, r1
 800895a:	429a      	cmp	r2, r3
 800895c:	d949      	bls.n	80089f2 <_strtod_l+0xade>
 800895e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008960:	4b69      	ldr	r3, [pc, #420]	; (8008b08 <_strtod_l+0xbf4>)
 8008962:	429a      	cmp	r2, r3
 8008964:	d103      	bne.n	800896e <_strtod_l+0xa5a>
 8008966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008968:	3301      	adds	r3, #1
 800896a:	d100      	bne.n	800896e <_strtod_l+0xa5a>
 800896c:	e535      	b.n	80083da <_strtod_l+0x4c6>
 800896e:	2601      	movs	r6, #1
 8008970:	4f65      	ldr	r7, [pc, #404]	; (8008b08 <_strtod_l+0xbf4>)
 8008972:	4276      	negs	r6, r6
 8008974:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008976:	9804      	ldr	r0, [sp, #16]
 8008978:	f001 f876 	bl	8009a68 <_Bfree>
 800897c:	9908      	ldr	r1, [sp, #32]
 800897e:	9804      	ldr	r0, [sp, #16]
 8008980:	f001 f872 	bl	8009a68 <_Bfree>
 8008984:	9906      	ldr	r1, [sp, #24]
 8008986:	9804      	ldr	r0, [sp, #16]
 8008988:	f001 f86e 	bl	8009a68 <_Bfree>
 800898c:	9905      	ldr	r1, [sp, #20]
 800898e:	9804      	ldr	r0, [sp, #16]
 8008990:	f001 f86a 	bl	8009a68 <_Bfree>
 8008994:	e60b      	b.n	80085ae <_strtod_l+0x69a>
 8008996:	2e01      	cmp	r6, #1
 8008998:	d103      	bne.n	80089a2 <_strtod_l+0xa8e>
 800899a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899c:	2b00      	cmp	r3, #0
 800899e:	d100      	bne.n	80089a2 <_strtod_l+0xa8e>
 80089a0:	e58e      	b.n	80084c0 <_strtod_l+0x5ac>
 80089a2:	2300      	movs	r3, #0
 80089a4:	4c59      	ldr	r4, [pc, #356]	; (8008b0c <_strtod_l+0xbf8>)
 80089a6:	930a      	str	r3, [sp, #40]	; 0x28
 80089a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80089aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80089ac:	e01c      	b.n	80089e8 <_strtod_l+0xad4>
 80089ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80089b0:	4d50      	ldr	r5, [pc, #320]	; (8008af4 <_strtod_l+0xbe0>)
 80089b2:	e7ab      	b.n	800890c <_strtod_l+0x9f8>
 80089b4:	2200      	movs	r2, #0
 80089b6:	0020      	movs	r0, r4
 80089b8:	0029      	movs	r1, r5
 80089ba:	4b4e      	ldr	r3, [pc, #312]	; (8008af4 <_strtod_l+0xbe0>)
 80089bc:	f7f8 fe56 	bl	800166c <__aeabi_dmul>
 80089c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089c2:	0004      	movs	r4, r0
 80089c4:	000b      	movs	r3, r1
 80089c6:	000d      	movs	r5, r1
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	d104      	bne.n	80089d6 <_strtod_l+0xac2>
 80089cc:	2280      	movs	r2, #128	; 0x80
 80089ce:	0612      	lsls	r2, r2, #24
 80089d0:	900a      	str	r0, [sp, #40]	; 0x28
 80089d2:	188b      	adds	r3, r1, r2
 80089d4:	e79e      	b.n	8008914 <_strtod_l+0xa00>
 80089d6:	0002      	movs	r2, r0
 80089d8:	920a      	str	r2, [sp, #40]	; 0x28
 80089da:	930b      	str	r3, [sp, #44]	; 0x2c
 80089dc:	e79b      	b.n	8008916 <_strtod_l+0xa02>
 80089de:	2300      	movs	r3, #0
 80089e0:	4c43      	ldr	r4, [pc, #268]	; (8008af0 <_strtod_l+0xbdc>)
 80089e2:	930a      	str	r3, [sp, #40]	; 0x28
 80089e4:	940b      	str	r4, [sp, #44]	; 0x2c
 80089e6:	2400      	movs	r4, #0
 80089e8:	4d41      	ldr	r5, [pc, #260]	; (8008af0 <_strtod_l+0xbdc>)
 80089ea:	e794      	b.n	8008916 <_strtod_l+0xa02>
 80089ec:	2300      	movs	r3, #0
 80089ee:	4c47      	ldr	r4, [pc, #284]	; (8008b0c <_strtod_l+0xbf8>)
 80089f0:	e7f7      	b.n	80089e2 <_strtod_l+0xace>
 80089f2:	23d4      	movs	r3, #212	; 0xd4
 80089f4:	049b      	lsls	r3, r3, #18
 80089f6:	18cf      	adds	r7, r1, r3
 80089f8:	9b07      	ldr	r3, [sp, #28]
 80089fa:	970e      	str	r7, [sp, #56]	; 0x38
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1b9      	bne.n	8008974 <_strtod_l+0xa60>
 8008a00:	4b3d      	ldr	r3, [pc, #244]	; (8008af8 <_strtod_l+0xbe4>)
 8008a02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a04:	403b      	ands	r3, r7
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d1b4      	bne.n	8008974 <_strtod_l+0xa60>
 8008a0a:	0020      	movs	r0, r4
 8008a0c:	0029      	movs	r1, r5
 8008a0e:	f7f7 fdb5 	bl	800057c <__aeabi_d2lz>
 8008a12:	f7f7 fdef 	bl	80005f4 <__aeabi_l2d>
 8008a16:	0002      	movs	r2, r0
 8008a18:	000b      	movs	r3, r1
 8008a1a:	0020      	movs	r0, r4
 8008a1c:	0029      	movs	r1, r5
 8008a1e:	f7f9 f8e7 	bl	8001bf0 <__aeabi_dsub>
 8008a22:	033b      	lsls	r3, r7, #12
 8008a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a26:	0b1b      	lsrs	r3, r3, #12
 8008a28:	4333      	orrs	r3, r6
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	0004      	movs	r4, r0
 8008a2e:	000d      	movs	r5, r1
 8008a30:	4a37      	ldr	r2, [pc, #220]	; (8008b10 <_strtod_l+0xbfc>)
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d054      	beq.n	8008ae0 <_strtod_l+0xbcc>
 8008a36:	4b37      	ldr	r3, [pc, #220]	; (8008b14 <_strtod_l+0xc00>)
 8008a38:	f7f7 fd0c 	bl	8000454 <__aeabi_dcmplt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d000      	beq.n	8008a42 <_strtod_l+0xb2e>
 8008a40:	e4d4      	b.n	80083ec <_strtod_l+0x4d8>
 8008a42:	0020      	movs	r0, r4
 8008a44:	0029      	movs	r1, r5
 8008a46:	4a34      	ldr	r2, [pc, #208]	; (8008b18 <_strtod_l+0xc04>)
 8008a48:	4b2a      	ldr	r3, [pc, #168]	; (8008af4 <_strtod_l+0xbe0>)
 8008a4a:	f7f7 fd17 	bl	800047c <__aeabi_dcmpgt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d090      	beq.n	8008974 <_strtod_l+0xa60>
 8008a52:	e4cb      	b.n	80083ec <_strtod_l+0x4d8>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d02b      	beq.n	8008ab2 <_strtod_l+0xb9e>
 8008a5a:	23d4      	movs	r3, #212	; 0xd4
 8008a5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a5e:	04db      	lsls	r3, r3, #19
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d826      	bhi.n	8008ab2 <_strtod_l+0xb9e>
 8008a64:	0020      	movs	r0, r4
 8008a66:	0029      	movs	r1, r5
 8008a68:	4a2c      	ldr	r2, [pc, #176]	; (8008b1c <_strtod_l+0xc08>)
 8008a6a:	4b2d      	ldr	r3, [pc, #180]	; (8008b20 <_strtod_l+0xc0c>)
 8008a6c:	f7f7 fcfc 	bl	8000468 <__aeabi_dcmple>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d017      	beq.n	8008aa4 <_strtod_l+0xb90>
 8008a74:	0020      	movs	r0, r4
 8008a76:	0029      	movs	r1, r5
 8008a78:	f7f7 fd62 	bl	8000540 <__aeabi_d2uiz>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d100      	bne.n	8008a82 <_strtod_l+0xb6e>
 8008a80:	3001      	adds	r0, #1
 8008a82:	f7f9 fcbb 	bl	80023fc <__aeabi_ui2d>
 8008a86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a88:	0004      	movs	r4, r0
 8008a8a:	000b      	movs	r3, r1
 8008a8c:	000d      	movs	r5, r1
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d122      	bne.n	8008ad8 <_strtod_l+0xbc4>
 8008a92:	2280      	movs	r2, #128	; 0x80
 8008a94:	0612      	lsls	r2, r2, #24
 8008a96:	188b      	adds	r3, r1, r2
 8008a98:	9016      	str	r0, [sp, #88]	; 0x58
 8008a9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa0:	9212      	str	r2, [sp, #72]	; 0x48
 8008aa2:	9313      	str	r3, [sp, #76]	; 0x4c
 8008aa4:	22d6      	movs	r2, #214	; 0xd6
 8008aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008aa8:	04d2      	lsls	r2, r2, #19
 8008aaa:	189b      	adds	r3, r3, r2
 8008aac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ab2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008ab4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008ab6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008ab8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8008aba:	f001 fae3 	bl	800a084 <__ulp>
 8008abe:	0002      	movs	r2, r0
 8008ac0:	000b      	movs	r3, r1
 8008ac2:	0030      	movs	r0, r6
 8008ac4:	0039      	movs	r1, r7
 8008ac6:	f7f8 fdd1 	bl	800166c <__aeabi_dmul>
 8008aca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008acc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ace:	f7f7 fe73 	bl	80007b8 <__aeabi_dadd>
 8008ad2:	0006      	movs	r6, r0
 8008ad4:	000f      	movs	r7, r1
 8008ad6:	e78f      	b.n	80089f8 <_strtod_l+0xae4>
 8008ad8:	0002      	movs	r2, r0
 8008ada:	9216      	str	r2, [sp, #88]	; 0x58
 8008adc:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ade:	e7dd      	b.n	8008a9c <_strtod_l+0xb88>
 8008ae0:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <_strtod_l+0xc10>)
 8008ae2:	f7f7 fcb7 	bl	8000454 <__aeabi_dcmplt>
 8008ae6:	e7b2      	b.n	8008a4e <_strtod_l+0xb3a>
 8008ae8:	fff00000 	.word	0xfff00000
 8008aec:	000fffff 	.word	0x000fffff
 8008af0:	3ff00000 	.word	0x3ff00000
 8008af4:	3fe00000 	.word	0x3fe00000
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	7fe00000 	.word	0x7fe00000
 8008b00:	fcb00000 	.word	0xfcb00000
 8008b04:	7c9fffff 	.word	0x7c9fffff
 8008b08:	7fefffff 	.word	0x7fefffff
 8008b0c:	bff00000 	.word	0xbff00000
 8008b10:	94a03595 	.word	0x94a03595
 8008b14:	3fdfffff 	.word	0x3fdfffff
 8008b18:	35afe535 	.word	0x35afe535
 8008b1c:	ffc00000 	.word	0xffc00000
 8008b20:	41dfffff 	.word	0x41dfffff
 8008b24:	3fcfffff 	.word	0x3fcfffff

08008b28 <_strtod_r>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <_strtod_r+0xc>)
 8008b2c:	f7ff f9f2 	bl	8007f14 <_strtod_l>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	2000042c 	.word	0x2000042c

08008b38 <_strtol_l.constprop.0>:
 8008b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	001e      	movs	r6, r3
 8008b3e:	9005      	str	r0, [sp, #20]
 8008b40:	9101      	str	r1, [sp, #4]
 8008b42:	9202      	str	r2, [sp, #8]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d048      	beq.n	8008bda <_strtol_l.constprop.0+0xa2>
 8008b48:	000b      	movs	r3, r1
 8008b4a:	2e24      	cmp	r6, #36	; 0x24
 8008b4c:	d845      	bhi.n	8008bda <_strtol_l.constprop.0+0xa2>
 8008b4e:	4a3b      	ldr	r2, [pc, #236]	; (8008c3c <_strtol_l.constprop.0+0x104>)
 8008b50:	2108      	movs	r1, #8
 8008b52:	4694      	mov	ip, r2
 8008b54:	001a      	movs	r2, r3
 8008b56:	4660      	mov	r0, ip
 8008b58:	7814      	ldrb	r4, [r2, #0]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	5d00      	ldrb	r0, [r0, r4]
 8008b5e:	001d      	movs	r5, r3
 8008b60:	0007      	movs	r7, r0
 8008b62:	400f      	ands	r7, r1
 8008b64:	4208      	tst	r0, r1
 8008b66:	d1f5      	bne.n	8008b54 <_strtol_l.constprop.0+0x1c>
 8008b68:	2c2d      	cmp	r4, #45	; 0x2d
 8008b6a:	d13d      	bne.n	8008be8 <_strtol_l.constprop.0+0xb0>
 8008b6c:	2701      	movs	r7, #1
 8008b6e:	781c      	ldrb	r4, [r3, #0]
 8008b70:	1c95      	adds	r5, r2, #2
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d05e      	beq.n	8008c34 <_strtol_l.constprop.0+0xfc>
 8008b76:	2e10      	cmp	r6, #16
 8008b78:	d109      	bne.n	8008b8e <_strtol_l.constprop.0+0x56>
 8008b7a:	2c30      	cmp	r4, #48	; 0x30
 8008b7c:	d107      	bne.n	8008b8e <_strtol_l.constprop.0+0x56>
 8008b7e:	2220      	movs	r2, #32
 8008b80:	782b      	ldrb	r3, [r5, #0]
 8008b82:	4393      	bics	r3, r2
 8008b84:	2b58      	cmp	r3, #88	; 0x58
 8008b86:	d150      	bne.n	8008c2a <_strtol_l.constprop.0+0xf2>
 8008b88:	2610      	movs	r6, #16
 8008b8a:	786c      	ldrb	r4, [r5, #1]
 8008b8c:	3502      	adds	r5, #2
 8008b8e:	4b2c      	ldr	r3, [pc, #176]	; (8008c40 <_strtol_l.constprop.0+0x108>)
 8008b90:	0031      	movs	r1, r6
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	0018      	movs	r0, r3
 8008b96:	9303      	str	r3, [sp, #12]
 8008b98:	f7f7 fb56 	bl	8000248 <__aeabi_uidivmod>
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	9104      	str	r1, [sp, #16]
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	4684      	mov	ip, r0
 8008ba4:	0010      	movs	r0, r2
 8008ba6:	4249      	negs	r1, r1
 8008ba8:	0023      	movs	r3, r4
 8008baa:	3b30      	subs	r3, #48	; 0x30
 8008bac:	2b09      	cmp	r3, #9
 8008bae:	d903      	bls.n	8008bb8 <_strtol_l.constprop.0+0x80>
 8008bb0:	3b11      	subs	r3, #17
 8008bb2:	2b19      	cmp	r3, #25
 8008bb4:	d81d      	bhi.n	8008bf2 <_strtol_l.constprop.0+0xba>
 8008bb6:	330a      	adds	r3, #10
 8008bb8:	429e      	cmp	r6, r3
 8008bba:	dd1e      	ble.n	8008bfa <_strtol_l.constprop.0+0xc2>
 8008bbc:	1c54      	adds	r4, r2, #1
 8008bbe:	d009      	beq.n	8008bd4 <_strtol_l.constprop.0+0x9c>
 8008bc0:	000a      	movs	r2, r1
 8008bc2:	4584      	cmp	ip, r0
 8008bc4:	d306      	bcc.n	8008bd4 <_strtol_l.constprop.0+0x9c>
 8008bc6:	d102      	bne.n	8008bce <_strtol_l.constprop.0+0x96>
 8008bc8:	9c04      	ldr	r4, [sp, #16]
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	db02      	blt.n	8008bd4 <_strtol_l.constprop.0+0x9c>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4370      	muls	r0, r6
 8008bd2:	1818      	adds	r0, r3, r0
 8008bd4:	782c      	ldrb	r4, [r5, #0]
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	e7e6      	b.n	8008ba8 <_strtol_l.constprop.0+0x70>
 8008bda:	f000 fa49 	bl	8009070 <__errno>
 8008bde:	2316      	movs	r3, #22
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	2000      	movs	r0, #0
 8008be4:	b007      	add	sp, #28
 8008be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008be8:	2c2b      	cmp	r4, #43	; 0x2b
 8008bea:	d1c2      	bne.n	8008b72 <_strtol_l.constprop.0+0x3a>
 8008bec:	781c      	ldrb	r4, [r3, #0]
 8008bee:	1c95      	adds	r5, r2, #2
 8008bf0:	e7bf      	b.n	8008b72 <_strtol_l.constprop.0+0x3a>
 8008bf2:	0023      	movs	r3, r4
 8008bf4:	3b61      	subs	r3, #97	; 0x61
 8008bf6:	2b19      	cmp	r3, #25
 8008bf8:	d9dd      	bls.n	8008bb6 <_strtol_l.constprop.0+0x7e>
 8008bfa:	1c53      	adds	r3, r2, #1
 8008bfc:	d109      	bne.n	8008c12 <_strtol_l.constprop.0+0xda>
 8008bfe:	2322      	movs	r3, #34	; 0x22
 8008c00:	9a05      	ldr	r2, [sp, #20]
 8008c02:	9803      	ldr	r0, [sp, #12]
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0eb      	beq.n	8008be4 <_strtol_l.constprop.0+0xac>
 8008c0c:	1e6b      	subs	r3, r5, #1
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	e007      	b.n	8008c22 <_strtol_l.constprop.0+0xea>
 8008c12:	2f00      	cmp	r7, #0
 8008c14:	d000      	beq.n	8008c18 <_strtol_l.constprop.0+0xe0>
 8008c16:	4240      	negs	r0, r0
 8008c18:	9b02      	ldr	r3, [sp, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0e2      	beq.n	8008be4 <_strtol_l.constprop.0+0xac>
 8008c1e:	2a00      	cmp	r2, #0
 8008c20:	d1f4      	bne.n	8008c0c <_strtol_l.constprop.0+0xd4>
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	9a01      	ldr	r2, [sp, #4]
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e7dc      	b.n	8008be4 <_strtol_l.constprop.0+0xac>
 8008c2a:	2430      	movs	r4, #48	; 0x30
 8008c2c:	2e00      	cmp	r6, #0
 8008c2e:	d1ae      	bne.n	8008b8e <_strtol_l.constprop.0+0x56>
 8008c30:	3608      	adds	r6, #8
 8008c32:	e7ac      	b.n	8008b8e <_strtol_l.constprop.0+0x56>
 8008c34:	2c30      	cmp	r4, #48	; 0x30
 8008c36:	d0a2      	beq.n	8008b7e <_strtol_l.constprop.0+0x46>
 8008c38:	260a      	movs	r6, #10
 8008c3a:	e7a8      	b.n	8008b8e <_strtol_l.constprop.0+0x56>
 8008c3c:	0800fce1 	.word	0x0800fce1
 8008c40:	7fffffff 	.word	0x7fffffff

08008c44 <_strtol_r>:
 8008c44:	b510      	push	{r4, lr}
 8008c46:	f7ff ff77 	bl	8008b38 <_strtol_l.constprop.0>
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <strtol>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	4c04      	ldr	r4, [pc, #16]	; (8008c60 <strtol+0x14>)
 8008c50:	0013      	movs	r3, r2
 8008c52:	000a      	movs	r2, r1
 8008c54:	0001      	movs	r1, r0
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	f7ff ff6e 	bl	8008b38 <_strtol_l.constprop.0>
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	200006b8 	.word	0x200006b8

08008c64 <std>:
 8008c64:	2300      	movs	r3, #0
 8008c66:	b510      	push	{r4, lr}
 8008c68:	0004      	movs	r4, r0
 8008c6a:	6003      	str	r3, [r0, #0]
 8008c6c:	6043      	str	r3, [r0, #4]
 8008c6e:	6083      	str	r3, [r0, #8]
 8008c70:	8181      	strh	r1, [r0, #12]
 8008c72:	6643      	str	r3, [r0, #100]	; 0x64
 8008c74:	81c2      	strh	r2, [r0, #14]
 8008c76:	6103      	str	r3, [r0, #16]
 8008c78:	6143      	str	r3, [r0, #20]
 8008c7a:	6183      	str	r3, [r0, #24]
 8008c7c:	0019      	movs	r1, r3
 8008c7e:	2208      	movs	r2, #8
 8008c80:	305c      	adds	r0, #92	; 0x5c
 8008c82:	f000 f949 	bl	8008f18 <memset>
 8008c86:	4b0b      	ldr	r3, [pc, #44]	; (8008cb4 <std+0x50>)
 8008c88:	61e4      	str	r4, [r4, #28]
 8008c8a:	6223      	str	r3, [r4, #32]
 8008c8c:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <std+0x54>)
 8008c8e:	6263      	str	r3, [r4, #36]	; 0x24
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <std+0x58>)
 8008c92:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c94:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <std+0x5c>)
 8008c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <std+0x60>)
 8008c9a:	429c      	cmp	r4, r3
 8008c9c:	d005      	beq.n	8008caa <std+0x46>
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <std+0x64>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d002      	beq.n	8008caa <std+0x46>
 8008ca4:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <std+0x68>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	d103      	bne.n	8008cb2 <std+0x4e>
 8008caa:	0020      	movs	r0, r4
 8008cac:	3058      	adds	r0, #88	; 0x58
 8008cae:	f000 fa09 	bl	80090c4 <__retarget_lock_init_recursive>
 8008cb2:	bd10      	pop	{r4, pc}
 8008cb4:	08008e7d 	.word	0x08008e7d
 8008cb8:	08008ea9 	.word	0x08008ea9
 8008cbc:	08008ee1 	.word	0x08008ee1
 8008cc0:	08008f0d 	.word	0x08008f0d
 8008cc4:	20000a78 	.word	0x20000a78
 8008cc8:	20000ae0 	.word	0x20000ae0
 8008ccc:	20000b48 	.word	0x20000b48

08008cd0 <stdio_exit_handler>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4a03      	ldr	r2, [pc, #12]	; (8008ce0 <stdio_exit_handler+0x10>)
 8008cd4:	4903      	ldr	r1, [pc, #12]	; (8008ce4 <stdio_exit_handler+0x14>)
 8008cd6:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <stdio_exit_handler+0x18>)
 8008cd8:	f000 f86c 	bl	8008db4 <_fwalk_sglue>
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	20000420 	.word	0x20000420
 8008ce4:	0800cbc5 	.word	0x0800cbc5
 8008ce8:	20000598 	.word	0x20000598

08008cec <cleanup_stdio>:
 8008cec:	6841      	ldr	r1, [r0, #4]
 8008cee:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <cleanup_stdio+0x30>)
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	0004      	movs	r4, r0
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	d001      	beq.n	8008cfc <cleanup_stdio+0x10>
 8008cf8:	f003 ff64 	bl	800cbc4 <_fclose_r>
 8008cfc:	68a1      	ldr	r1, [r4, #8]
 8008cfe:	4b08      	ldr	r3, [pc, #32]	; (8008d20 <cleanup_stdio+0x34>)
 8008d00:	4299      	cmp	r1, r3
 8008d02:	d002      	beq.n	8008d0a <cleanup_stdio+0x1e>
 8008d04:	0020      	movs	r0, r4
 8008d06:	f003 ff5d 	bl	800cbc4 <_fclose_r>
 8008d0a:	68e1      	ldr	r1, [r4, #12]
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <cleanup_stdio+0x38>)
 8008d0e:	4299      	cmp	r1, r3
 8008d10:	d002      	beq.n	8008d18 <cleanup_stdio+0x2c>
 8008d12:	0020      	movs	r0, r4
 8008d14:	f003 ff56 	bl	800cbc4 <_fclose_r>
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	20000a78 	.word	0x20000a78
 8008d20:	20000ae0 	.word	0x20000ae0
 8008d24:	20000b48 	.word	0x20000b48

08008d28 <global_stdio_init.part.0>:
 8008d28:	b510      	push	{r4, lr}
 8008d2a:	4b09      	ldr	r3, [pc, #36]	; (8008d50 <global_stdio_init.part.0+0x28>)
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <global_stdio_init.part.0+0x2c>)
 8008d2e:	2104      	movs	r1, #4
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	4809      	ldr	r0, [pc, #36]	; (8008d58 <global_stdio_init.part.0+0x30>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	f7ff ff95 	bl	8008c64 <std>
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	2109      	movs	r1, #9
 8008d3e:	4807      	ldr	r0, [pc, #28]	; (8008d5c <global_stdio_init.part.0+0x34>)
 8008d40:	f7ff ff90 	bl	8008c64 <std>
 8008d44:	2202      	movs	r2, #2
 8008d46:	2112      	movs	r1, #18
 8008d48:	4805      	ldr	r0, [pc, #20]	; (8008d60 <global_stdio_init.part.0+0x38>)
 8008d4a:	f7ff ff8b 	bl	8008c64 <std>
 8008d4e:	bd10      	pop	{r4, pc}
 8008d50:	20000bb0 	.word	0x20000bb0
 8008d54:	08008cd1 	.word	0x08008cd1
 8008d58:	20000a78 	.word	0x20000a78
 8008d5c:	20000ae0 	.word	0x20000ae0
 8008d60:	20000b48 	.word	0x20000b48

08008d64 <__sfp_lock_acquire>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4802      	ldr	r0, [pc, #8]	; (8008d70 <__sfp_lock_acquire+0xc>)
 8008d68:	f000 f9ae 	bl	80090c8 <__retarget_lock_acquire_recursive>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	20000bba 	.word	0x20000bba

08008d74 <__sfp_lock_release>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	4802      	ldr	r0, [pc, #8]	; (8008d80 <__sfp_lock_release+0xc>)
 8008d78:	f000 f9a7 	bl	80090ca <__retarget_lock_release_recursive>
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	20000bba 	.word	0x20000bba

08008d84 <__sinit>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	0004      	movs	r4, r0
 8008d88:	f7ff ffec 	bl	8008d64 <__sfp_lock_acquire>
 8008d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <__sinit+0x14>
 8008d92:	f7ff ffef 	bl	8008d74 <__sfp_lock_release>
 8008d96:	bd10      	pop	{r4, pc}
 8008d98:	4b04      	ldr	r3, [pc, #16]	; (8008dac <__sinit+0x28>)
 8008d9a:	6363      	str	r3, [r4, #52]	; 0x34
 8008d9c:	4b04      	ldr	r3, [pc, #16]	; (8008db0 <__sinit+0x2c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1f6      	bne.n	8008d92 <__sinit+0xe>
 8008da4:	f7ff ffc0 	bl	8008d28 <global_stdio_init.part.0>
 8008da8:	e7f3      	b.n	8008d92 <__sinit+0xe>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	08008ced 	.word	0x08008ced
 8008db0:	20000bb0 	.word	0x20000bb0

08008db4 <_fwalk_sglue>:
 8008db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008db6:	0014      	movs	r4, r2
 8008db8:	2600      	movs	r6, #0
 8008dba:	9000      	str	r0, [sp, #0]
 8008dbc:	9101      	str	r1, [sp, #4]
 8008dbe:	68a5      	ldr	r5, [r4, #8]
 8008dc0:	6867      	ldr	r7, [r4, #4]
 8008dc2:	3f01      	subs	r7, #1
 8008dc4:	d504      	bpl.n	8008dd0 <_fwalk_sglue+0x1c>
 8008dc6:	6824      	ldr	r4, [r4, #0]
 8008dc8:	2c00      	cmp	r4, #0
 8008dca:	d1f8      	bne.n	8008dbe <_fwalk_sglue+0xa>
 8008dcc:	0030      	movs	r0, r6
 8008dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008dd0:	89ab      	ldrh	r3, [r5, #12]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d908      	bls.n	8008de8 <_fwalk_sglue+0x34>
 8008dd6:	220e      	movs	r2, #14
 8008dd8:	5eab      	ldrsh	r3, [r5, r2]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	d004      	beq.n	8008de8 <_fwalk_sglue+0x34>
 8008dde:	0029      	movs	r1, r5
 8008de0:	9800      	ldr	r0, [sp, #0]
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	4798      	blx	r3
 8008de6:	4306      	orrs	r6, r0
 8008de8:	3568      	adds	r5, #104	; 0x68
 8008dea:	e7ea      	b.n	8008dc2 <_fwalk_sglue+0xe>

08008dec <sprintf>:
 8008dec:	b40e      	push	{r1, r2, r3}
 8008dee:	b500      	push	{lr}
 8008df0:	490b      	ldr	r1, [pc, #44]	; (8008e20 <sprintf+0x34>)
 8008df2:	b09c      	sub	sp, #112	; 0x70
 8008df4:	ab1d      	add	r3, sp, #116	; 0x74
 8008df6:	9002      	str	r0, [sp, #8]
 8008df8:	9006      	str	r0, [sp, #24]
 8008dfa:	9107      	str	r1, [sp, #28]
 8008dfc:	9104      	str	r1, [sp, #16]
 8008dfe:	4809      	ldr	r0, [pc, #36]	; (8008e24 <sprintf+0x38>)
 8008e00:	4909      	ldr	r1, [pc, #36]	; (8008e28 <sprintf+0x3c>)
 8008e02:	cb04      	ldmia	r3!, {r2}
 8008e04:	9105      	str	r1, [sp, #20]
 8008e06:	6800      	ldr	r0, [r0, #0]
 8008e08:	a902      	add	r1, sp, #8
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	f001 fa7c 	bl	800a308 <_svfprintf_r>
 8008e10:	2200      	movs	r2, #0
 8008e12:	9b02      	ldr	r3, [sp, #8]
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	b01c      	add	sp, #112	; 0x70
 8008e18:	bc08      	pop	{r3}
 8008e1a:	b003      	add	sp, #12
 8008e1c:	4718      	bx	r3
 8008e1e:	46c0      	nop			; (mov r8, r8)
 8008e20:	7fffffff 	.word	0x7fffffff
 8008e24:	200006b8 	.word	0x200006b8
 8008e28:	ffff0208 	.word	0xffff0208

08008e2c <sscanf>:
 8008e2c:	b40e      	push	{r1, r2, r3}
 8008e2e:	b530      	push	{r4, r5, lr}
 8008e30:	2381      	movs	r3, #129	; 0x81
 8008e32:	b09c      	sub	sp, #112	; 0x70
 8008e34:	466a      	mov	r2, sp
 8008e36:	ac1f      	add	r4, sp, #124	; 0x7c
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	cc20      	ldmia	r4!, {r5}
 8008e3c:	8293      	strh	r3, [r2, #20]
 8008e3e:	9002      	str	r0, [sp, #8]
 8008e40:	9006      	str	r0, [sp, #24]
 8008e42:	f7f7 f95f 	bl	8000104 <strlen>
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <sscanf+0x48>)
 8008e48:	466a      	mov	r2, sp
 8008e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9003      	str	r0, [sp, #12]
 8008e50:	9007      	str	r0, [sp, #28]
 8008e52:	4809      	ldr	r0, [pc, #36]	; (8008e78 <sscanf+0x4c>)
 8008e54:	930e      	str	r3, [sp, #56]	; 0x38
 8008e56:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	82d3      	strh	r3, [r2, #22]
 8008e5c:	a902      	add	r1, sp, #8
 8008e5e:	0023      	movs	r3, r4
 8008e60:	002a      	movs	r2, r5
 8008e62:	6800      	ldr	r0, [r0, #0]
 8008e64:	9401      	str	r4, [sp, #4]
 8008e66:	f002 fc91 	bl	800b78c <__ssvfscanf_r>
 8008e6a:	b01c      	add	sp, #112	; 0x70
 8008e6c:	bc30      	pop	{r4, r5}
 8008e6e:	bc08      	pop	{r3}
 8008e70:	b003      	add	sp, #12
 8008e72:	4718      	bx	r3
 8008e74:	08008ea5 	.word	0x08008ea5
 8008e78:	200006b8 	.word	0x200006b8

08008e7c <__sread>:
 8008e7c:	b570      	push	{r4, r5, r6, lr}
 8008e7e:	000c      	movs	r4, r1
 8008e80:	250e      	movs	r5, #14
 8008e82:	5f49      	ldrsh	r1, [r1, r5]
 8008e84:	f000 f8ba 	bl	8008ffc <_read_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	db03      	blt.n	8008e94 <__sread+0x18>
 8008e8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008e8e:	181b      	adds	r3, r3, r0
 8008e90:	6523      	str	r3, [r4, #80]	; 0x50
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	4a02      	ldr	r2, [pc, #8]	; (8008ea0 <__sread+0x24>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	e7f9      	b.n	8008e92 <__sread+0x16>
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	ffffefff 	.word	0xffffefff

08008ea4 <__seofread>:
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	4770      	bx	lr

08008ea8 <__swrite>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	001f      	movs	r7, r3
 8008eac:	898b      	ldrh	r3, [r1, #12]
 8008eae:	0005      	movs	r5, r0
 8008eb0:	000c      	movs	r4, r1
 8008eb2:	0016      	movs	r6, r2
 8008eb4:	05db      	lsls	r3, r3, #23
 8008eb6:	d505      	bpl.n	8008ec4 <__swrite+0x1c>
 8008eb8:	230e      	movs	r3, #14
 8008eba:	5ec9      	ldrsh	r1, [r1, r3]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	f000 f888 	bl	8008fd4 <_lseek_r>
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	4a05      	ldr	r2, [pc, #20]	; (8008edc <__swrite+0x34>)
 8008ec8:	0028      	movs	r0, r5
 8008eca:	4013      	ands	r3, r2
 8008ecc:	81a3      	strh	r3, [r4, #12]
 8008ece:	0032      	movs	r2, r6
 8008ed0:	230e      	movs	r3, #14
 8008ed2:	5ee1      	ldrsh	r1, [r4, r3]
 8008ed4:	003b      	movs	r3, r7
 8008ed6:	f000 f8b7 	bl	8009048 <_write_r>
 8008eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008edc:	ffffefff 	.word	0xffffefff

08008ee0 <__sseek>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	000c      	movs	r4, r1
 8008ee4:	250e      	movs	r5, #14
 8008ee6:	5f49      	ldrsh	r1, [r1, r5]
 8008ee8:	f000 f874 	bl	8008fd4 <_lseek_r>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	1c42      	adds	r2, r0, #1
 8008ef0:	d103      	bne.n	8008efa <__sseek+0x1a>
 8008ef2:	4a05      	ldr	r2, [pc, #20]	; (8008f08 <__sseek+0x28>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	bd70      	pop	{r4, r5, r6, pc}
 8008efa:	2280      	movs	r2, #128	; 0x80
 8008efc:	0152      	lsls	r2, r2, #5
 8008efe:	4313      	orrs	r3, r2
 8008f00:	81a3      	strh	r3, [r4, #12]
 8008f02:	6520      	str	r0, [r4, #80]	; 0x50
 8008f04:	e7f8      	b.n	8008ef8 <__sseek+0x18>
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	ffffefff 	.word	0xffffefff

08008f0c <__sclose>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	230e      	movs	r3, #14
 8008f10:	5ec9      	ldrsh	r1, [r1, r3]
 8008f12:	f000 f84d 	bl	8008fb0 <_close_r>
 8008f16:	bd10      	pop	{r4, pc}

08008f18 <memset>:
 8008f18:	0003      	movs	r3, r0
 8008f1a:	1882      	adds	r2, r0, r2
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d100      	bne.n	8008f22 <memset+0xa>
 8008f20:	4770      	bx	lr
 8008f22:	7019      	strb	r1, [r3, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	e7f9      	b.n	8008f1c <memset+0x4>

08008f28 <strncmp>:
 8008f28:	b530      	push	{r4, r5, lr}
 8008f2a:	0005      	movs	r5, r0
 8008f2c:	1e10      	subs	r0, r2, #0
 8008f2e:	d00b      	beq.n	8008f48 <strncmp+0x20>
 8008f30:	2400      	movs	r4, #0
 8008f32:	3a01      	subs	r2, #1
 8008f34:	5d2b      	ldrb	r3, [r5, r4]
 8008f36:	5d08      	ldrb	r0, [r1, r4]
 8008f38:	4283      	cmp	r3, r0
 8008f3a:	d104      	bne.n	8008f46 <strncmp+0x1e>
 8008f3c:	42a2      	cmp	r2, r4
 8008f3e:	d002      	beq.n	8008f46 <strncmp+0x1e>
 8008f40:	3401      	adds	r4, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f6      	bne.n	8008f34 <strncmp+0xc>
 8008f46:	1a18      	subs	r0, r3, r0
 8008f48:	bd30      	pop	{r4, r5, pc}

08008f4a <strncpy>:
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	001d      	movs	r5, r3
 8008f50:	2a00      	cmp	r2, #0
 8008f52:	d006      	beq.n	8008f62 <strncpy+0x18>
 8008f54:	780c      	ldrb	r4, [r1, #0]
 8008f56:	3a01      	subs	r2, #1
 8008f58:	3301      	adds	r3, #1
 8008f5a:	702c      	strb	r4, [r5, #0]
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d1f5      	bne.n	8008f4e <strncpy+0x4>
 8008f62:	2100      	movs	r1, #0
 8008f64:	189a      	adds	r2, r3, r2
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d100      	bne.n	8008f6c <strncpy+0x22>
 8008f6a:	bd30      	pop	{r4, r5, pc}
 8008f6c:	7019      	strb	r1, [r3, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	e7f9      	b.n	8008f66 <strncpy+0x1c>

08008f72 <strstr>:
 8008f72:	780a      	ldrb	r2, [r1, #0]
 8008f74:	b530      	push	{r4, r5, lr}
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d10c      	bne.n	8008f94 <strstr+0x22>
 8008f7a:	bd30      	pop	{r4, r5, pc}
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d108      	bne.n	8008f92 <strstr+0x20>
 8008f80:	2301      	movs	r3, #1
 8008f82:	5ccc      	ldrb	r4, [r1, r3]
 8008f84:	2c00      	cmp	r4, #0
 8008f86:	d0f8      	beq.n	8008f7a <strstr+0x8>
 8008f88:	5cc5      	ldrb	r5, [r0, r3]
 8008f8a:	42a5      	cmp	r5, r4
 8008f8c:	d101      	bne.n	8008f92 <strstr+0x20>
 8008f8e:	3301      	adds	r3, #1
 8008f90:	e7f7      	b.n	8008f82 <strstr+0x10>
 8008f92:	3001      	adds	r0, #1
 8008f94:	7803      	ldrb	r3, [r0, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <strstr+0xa>
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	e7ed      	b.n	8008f7a <strstr+0x8>
	...

08008fa0 <__locale_mb_cur_max>:
 8008fa0:	2294      	movs	r2, #148	; 0x94
 8008fa2:	4b02      	ldr	r3, [pc, #8]	; (8008fac <__locale_mb_cur_max+0xc>)
 8008fa4:	0052      	lsls	r2, r2, #1
 8008fa6:	5c98      	ldrb	r0, [r3, r2]
 8008fa8:	4770      	bx	lr
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	2000042c 	.word	0x2000042c

08008fb0 <_close_r>:
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	b570      	push	{r4, r5, r6, lr}
 8008fb4:	4d06      	ldr	r5, [pc, #24]	; (8008fd0 <_close_r+0x20>)
 8008fb6:	0004      	movs	r4, r0
 8008fb8:	0008      	movs	r0, r1
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	f7fa fa6f 	bl	800349e <_close>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d103      	bne.n	8008fcc <_close_r+0x1c>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d000      	beq.n	8008fcc <_close_r+0x1c>
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	bd70      	pop	{r4, r5, r6, pc}
 8008fce:	46c0      	nop			; (mov r8, r8)
 8008fd0:	20000bb4 	.word	0x20000bb4

08008fd4 <_lseek_r>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	0004      	movs	r4, r0
 8008fd8:	0008      	movs	r0, r1
 8008fda:	0011      	movs	r1, r2
 8008fdc:	001a      	movs	r2, r3
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4d05      	ldr	r5, [pc, #20]	; (8008ff8 <_lseek_r+0x24>)
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	f7fa fa7c 	bl	80034e0 <_lseek>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d103      	bne.n	8008ff4 <_lseek_r+0x20>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d000      	beq.n	8008ff4 <_lseek_r+0x20>
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	bd70      	pop	{r4, r5, r6, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	20000bb4 	.word	0x20000bb4

08008ffc <_read_r>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	0004      	movs	r4, r0
 8009000:	0008      	movs	r0, r1
 8009002:	0011      	movs	r1, r2
 8009004:	001a      	movs	r2, r3
 8009006:	2300      	movs	r3, #0
 8009008:	4d05      	ldr	r5, [pc, #20]	; (8009020 <_read_r+0x24>)
 800900a:	602b      	str	r3, [r5, #0]
 800900c:	f7fa fa0e 	bl	800342c <_read>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	d103      	bne.n	800901c <_read_r+0x20>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d000      	beq.n	800901c <_read_r+0x20>
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	bd70      	pop	{r4, r5, r6, pc}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	20000bb4 	.word	0x20000bb4

08009024 <_sbrk_r>:
 8009024:	2300      	movs	r3, #0
 8009026:	b570      	push	{r4, r5, r6, lr}
 8009028:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_sbrk_r+0x20>)
 800902a:	0004      	movs	r4, r0
 800902c:	0008      	movs	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7fa fa62 	bl	80034f8 <_sbrk>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d103      	bne.n	8009040 <_sbrk_r+0x1c>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d000      	beq.n	8009040 <_sbrk_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	20000bb4 	.word	0x20000bb4

08009048 <_write_r>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	0004      	movs	r4, r0
 800904c:	0008      	movs	r0, r1
 800904e:	0011      	movs	r1, r2
 8009050:	001a      	movs	r2, r3
 8009052:	2300      	movs	r3, #0
 8009054:	4d05      	ldr	r5, [pc, #20]	; (800906c <_write_r+0x24>)
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7fa fa05 	bl	8003466 <_write>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d103      	bne.n	8009068 <_write_r+0x20>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d000      	beq.n	8009068 <_write_r+0x20>
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	20000bb4 	.word	0x20000bb4

08009070 <__errno>:
 8009070:	4b01      	ldr	r3, [pc, #4]	; (8009078 <__errno+0x8>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	4770      	bx	lr
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	200006b8 	.word	0x200006b8

0800907c <__libc_init_array>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	2600      	movs	r6, #0
 8009080:	4c0c      	ldr	r4, [pc, #48]	; (80090b4 <__libc_init_array+0x38>)
 8009082:	4d0d      	ldr	r5, [pc, #52]	; (80090b8 <__libc_init_array+0x3c>)
 8009084:	1b64      	subs	r4, r4, r5
 8009086:	10a4      	asrs	r4, r4, #2
 8009088:	42a6      	cmp	r6, r4
 800908a:	d109      	bne.n	80090a0 <__libc_init_array+0x24>
 800908c:	2600      	movs	r6, #0
 800908e:	f006 fcc5 	bl	800fa1c <_init>
 8009092:	4c0a      	ldr	r4, [pc, #40]	; (80090bc <__libc_init_array+0x40>)
 8009094:	4d0a      	ldr	r5, [pc, #40]	; (80090c0 <__libc_init_array+0x44>)
 8009096:	1b64      	subs	r4, r4, r5
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	42a6      	cmp	r6, r4
 800909c:	d105      	bne.n	80090aa <__libc_init_array+0x2e>
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	00b3      	lsls	r3, r6, #2
 80090a2:	58eb      	ldr	r3, [r5, r3]
 80090a4:	4798      	blx	r3
 80090a6:	3601      	adds	r6, #1
 80090a8:	e7ee      	b.n	8009088 <__libc_init_array+0xc>
 80090aa:	00b3      	lsls	r3, r6, #2
 80090ac:	58eb      	ldr	r3, [r5, r3]
 80090ae:	4798      	blx	r3
 80090b0:	3601      	adds	r6, #1
 80090b2:	e7f2      	b.n	800909a <__libc_init_array+0x1e>
 80090b4:	080100fc 	.word	0x080100fc
 80090b8:	080100fc 	.word	0x080100fc
 80090bc:	08010104 	.word	0x08010104
 80090c0:	080100fc 	.word	0x080100fc

080090c4 <__retarget_lock_init_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <__retarget_lock_close_recursive>:
 80090c6:	4770      	bx	lr

080090c8 <__retarget_lock_acquire_recursive>:
 80090c8:	4770      	bx	lr

080090ca <__retarget_lock_release_recursive>:
 80090ca:	4770      	bx	lr

080090cc <sysconf>:
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	b510      	push	{r4, lr}
 80090d0:	2808      	cmp	r0, #8
 80090d2:	d004      	beq.n	80090de <sysconf+0x12>
 80090d4:	f7ff ffcc 	bl	8009070 <__errno>
 80090d8:	2316      	movs	r3, #22
 80090da:	6003      	str	r3, [r0, #0]
 80090dc:	3b17      	subs	r3, #23
 80090de:	0018      	movs	r0, r3
 80090e0:	bd10      	pop	{r4, pc}

080090e2 <memcpy>:
 80090e2:	2300      	movs	r3, #0
 80090e4:	b510      	push	{r4, lr}
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d100      	bne.n	80090ec <memcpy+0xa>
 80090ea:	bd10      	pop	{r4, pc}
 80090ec:	5ccc      	ldrb	r4, [r1, r3]
 80090ee:	54c4      	strb	r4, [r0, r3]
 80090f0:	3301      	adds	r3, #1
 80090f2:	e7f8      	b.n	80090e6 <memcpy+0x4>

080090f4 <nan>:
 80090f4:	2000      	movs	r0, #0
 80090f6:	4901      	ldr	r1, [pc, #4]	; (80090fc <nan+0x8>)
 80090f8:	4770      	bx	lr
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	7ff80000 	.word	0x7ff80000

08009100 <nanf>:
 8009100:	4800      	ldr	r0, [pc, #0]	; (8009104 <nanf+0x4>)
 8009102:	4770      	bx	lr
 8009104:	7fc00000 	.word	0x7fc00000

08009108 <register_fini>:
 8009108:	4b03      	ldr	r3, [pc, #12]	; (8009118 <register_fini+0x10>)
 800910a:	b510      	push	{r4, lr}
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <register_fini+0xe>
 8009110:	4802      	ldr	r0, [pc, #8]	; (800911c <register_fini+0x14>)
 8009112:	f000 f805 	bl	8009120 <atexit>
 8009116:	bd10      	pop	{r4, pc}
 8009118:	00000000 	.word	0x00000000
 800911c:	0800ce7d 	.word	0x0800ce7d

08009120 <atexit>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	0001      	movs	r1, r0
 8009126:	001a      	movs	r2, r3
 8009128:	0018      	movs	r0, r3
 800912a:	f003 fef9 	bl	800cf20 <__register_exitproc>
 800912e:	bd10      	pop	{r4, pc}

08009130 <_malloc_trim_r>:
 8009130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009132:	0004      	movs	r4, r0
 8009134:	2008      	movs	r0, #8
 8009136:	000d      	movs	r5, r1
 8009138:	f7ff ffc8 	bl	80090cc <sysconf>
 800913c:	0006      	movs	r6, r0
 800913e:	0020      	movs	r0, r4
 8009140:	f7fe fec0 	bl	8007ec4 <__malloc_lock>
 8009144:	2203      	movs	r2, #3
 8009146:	4f21      	ldr	r7, [pc, #132]	; (80091cc <_malloc_trim_r+0x9c>)
 8009148:	0031      	movs	r1, r6
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4393      	bics	r3, r2
 8009150:	1b58      	subs	r0, r3, r5
 8009152:	3811      	subs	r0, #17
 8009154:	1980      	adds	r0, r0, r6
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	f7f6 fff0 	bl	800013c <__udivsi3>
 800915c:	1e45      	subs	r5, r0, #1
 800915e:	4375      	muls	r5, r6
 8009160:	42ae      	cmp	r6, r5
 8009162:	dd04      	ble.n	800916e <_malloc_trim_r+0x3e>
 8009164:	0020      	movs	r0, r4
 8009166:	f7fe feb5 	bl	8007ed4 <__malloc_unlock>
 800916a:	2000      	movs	r0, #0
 800916c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800916e:	2100      	movs	r1, #0
 8009170:	0020      	movs	r0, r4
 8009172:	f7ff ff57 	bl	8009024 <_sbrk_r>
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	9a01      	ldr	r2, [sp, #4]
 800917a:	189b      	adds	r3, r3, r2
 800917c:	4298      	cmp	r0, r3
 800917e:	d1f1      	bne.n	8009164 <_malloc_trim_r+0x34>
 8009180:	0020      	movs	r0, r4
 8009182:	4269      	negs	r1, r5
 8009184:	f7ff ff4e 	bl	8009024 <_sbrk_r>
 8009188:	3001      	adds	r0, #1
 800918a:	d110      	bne.n	80091ae <_malloc_trim_r+0x7e>
 800918c:	2100      	movs	r1, #0
 800918e:	0020      	movs	r0, r4
 8009190:	f7ff ff48 	bl	8009024 <_sbrk_r>
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	1a81      	subs	r1, r0, r2
 8009198:	290f      	cmp	r1, #15
 800919a:	dde3      	ble.n	8009164 <_malloc_trim_r+0x34>
 800919c:	4d0c      	ldr	r5, [pc, #48]	; (80091d0 <_malloc_trim_r+0xa0>)
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <_malloc_trim_r+0xa4>)
 80091a0:	682d      	ldr	r5, [r5, #0]
 80091a2:	1b40      	subs	r0, r0, r5
 80091a4:	6018      	str	r0, [r3, #0]
 80091a6:	2301      	movs	r3, #1
 80091a8:	430b      	orrs	r3, r1
 80091aa:	6053      	str	r3, [r2, #4]
 80091ac:	e7da      	b.n	8009164 <_malloc_trim_r+0x34>
 80091ae:	2601      	movs	r6, #1
 80091b0:	9b01      	ldr	r3, [sp, #4]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	1b5b      	subs	r3, r3, r5
 80091b6:	4333      	orrs	r3, r6
 80091b8:	6053      	str	r3, [r2, #4]
 80091ba:	4a06      	ldr	r2, [pc, #24]	; (80091d4 <_malloc_trim_r+0xa4>)
 80091bc:	0020      	movs	r0, r4
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	1b5b      	subs	r3, r3, r5
 80091c2:	6013      	str	r3, [r2, #0]
 80091c4:	f7fe fe86 	bl	8007ed4 <__malloc_unlock>
 80091c8:	0030      	movs	r0, r6
 80091ca:	e7cf      	b.n	800916c <_malloc_trim_r+0x3c>
 80091cc:	20000010 	.word	0x20000010
 80091d0:	20000418 	.word	0x20000418
 80091d4:	20000a44 	.word	0x20000a44

080091d8 <_free_r>:
 80091d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091da:	1e0d      	subs	r5, r1, #0
 80091dc:	9001      	str	r0, [sp, #4]
 80091de:	d02d      	beq.n	800923c <_free_r+0x64>
 80091e0:	f7fe fe70 	bl	8007ec4 <__malloc_lock>
 80091e4:	2301      	movs	r3, #1
 80091e6:	0029      	movs	r1, r5
 80091e8:	469c      	mov	ip, r3
 80091ea:	3908      	subs	r1, #8
 80091ec:	684f      	ldr	r7, [r1, #4]
 80091ee:	4662      	mov	r2, ip
 80091f0:	003b      	movs	r3, r7
 80091f2:	4664      	mov	r4, ip
 80091f4:	4393      	bics	r3, r2
 80091f6:	18c8      	adds	r0, r1, r3
 80091f8:	6845      	ldr	r5, [r0, #4]
 80091fa:	3202      	adds	r2, #2
 80091fc:	4395      	bics	r5, r2
 80091fe:	4a4a      	ldr	r2, [pc, #296]	; (8009328 <_free_r+0x150>)
 8009200:	4027      	ands	r7, r4
 8009202:	6896      	ldr	r6, [r2, #8]
 8009204:	4286      	cmp	r6, r0
 8009206:	d11a      	bne.n	800923e <_free_r+0x66>
 8009208:	195b      	adds	r3, r3, r5
 800920a:	2f00      	cmp	r7, #0
 800920c:	d106      	bne.n	800921c <_free_r+0x44>
 800920e:	6808      	ldr	r0, [r1, #0]
 8009210:	1a09      	subs	r1, r1, r0
 8009212:	688d      	ldr	r5, [r1, #8]
 8009214:	181b      	adds	r3, r3, r0
 8009216:	68c8      	ldr	r0, [r1, #12]
 8009218:	60e8      	str	r0, [r5, #12]
 800921a:	6085      	str	r5, [r0, #8]
 800921c:	2001      	movs	r0, #1
 800921e:	4318      	orrs	r0, r3
 8009220:	6048      	str	r0, [r1, #4]
 8009222:	6091      	str	r1, [r2, #8]
 8009224:	4a41      	ldr	r2, [pc, #260]	; (800932c <_free_r+0x154>)
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d804      	bhi.n	8009236 <_free_r+0x5e>
 800922c:	4b40      	ldr	r3, [pc, #256]	; (8009330 <_free_r+0x158>)
 800922e:	9801      	ldr	r0, [sp, #4]
 8009230:	6819      	ldr	r1, [r3, #0]
 8009232:	f7ff ff7d 	bl	8009130 <_malloc_trim_r>
 8009236:	9801      	ldr	r0, [sp, #4]
 8009238:	f7fe fe4c 	bl	8007ed4 <__malloc_unlock>
 800923c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800923e:	2600      	movs	r6, #0
 8009240:	6045      	str	r5, [r0, #4]
 8009242:	42b7      	cmp	r7, r6
 8009244:	d109      	bne.n	800925a <_free_r+0x82>
 8009246:	680f      	ldr	r7, [r1, #0]
 8009248:	4c3a      	ldr	r4, [pc, #232]	; (8009334 <_free_r+0x15c>)
 800924a:	1bc9      	subs	r1, r1, r7
 800924c:	19db      	adds	r3, r3, r7
 800924e:	688f      	ldr	r7, [r1, #8]
 8009250:	42a7      	cmp	r7, r4
 8009252:	d02c      	beq.n	80092ae <_free_r+0xd6>
 8009254:	68cc      	ldr	r4, [r1, #12]
 8009256:	60fc      	str	r4, [r7, #12]
 8009258:	60a7      	str	r7, [r4, #8]
 800925a:	1947      	adds	r7, r0, r5
 800925c:	687c      	ldr	r4, [r7, #4]
 800925e:	2701      	movs	r7, #1
 8009260:	423c      	tst	r4, r7
 8009262:	d10b      	bne.n	800927c <_free_r+0xa4>
 8009264:	195b      	adds	r3, r3, r5
 8009266:	6885      	ldr	r5, [r0, #8]
 8009268:	2e00      	cmp	r6, #0
 800926a:	d122      	bne.n	80092b2 <_free_r+0xda>
 800926c:	4c31      	ldr	r4, [pc, #196]	; (8009334 <_free_r+0x15c>)
 800926e:	42a5      	cmp	r5, r4
 8009270:	d11f      	bne.n	80092b2 <_free_r+0xda>
 8009272:	003e      	movs	r6, r7
 8009274:	6151      	str	r1, [r2, #20]
 8009276:	6111      	str	r1, [r2, #16]
 8009278:	60cd      	str	r5, [r1, #12]
 800927a:	608d      	str	r5, [r1, #8]
 800927c:	2501      	movs	r5, #1
 800927e:	0028      	movs	r0, r5
 8009280:	4318      	orrs	r0, r3
 8009282:	6048      	str	r0, [r1, #4]
 8009284:	50cb      	str	r3, [r1, r3]
 8009286:	2e00      	cmp	r6, #0
 8009288:	d1d5      	bne.n	8009236 <_free_r+0x5e>
 800928a:	2080      	movs	r0, #128	; 0x80
 800928c:	0080      	lsls	r0, r0, #2
 800928e:	4283      	cmp	r3, r0
 8009290:	d213      	bcs.n	80092ba <_free_r+0xe2>
 8009292:	08d8      	lsrs	r0, r3, #3
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	409d      	lsls	r5, r3
 8009298:	6853      	ldr	r3, [r2, #4]
 800929a:	431d      	orrs	r5, r3
 800929c:	00c3      	lsls	r3, r0, #3
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	6055      	str	r5, [r2, #4]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	60cb      	str	r3, [r1, #12]
 80092a6:	608a      	str	r2, [r1, #8]
 80092a8:	6099      	str	r1, [r3, #8]
 80092aa:	60d1      	str	r1, [r2, #12]
 80092ac:	e7c3      	b.n	8009236 <_free_r+0x5e>
 80092ae:	4666      	mov	r6, ip
 80092b0:	e7d3      	b.n	800925a <_free_r+0x82>
 80092b2:	68c0      	ldr	r0, [r0, #12]
 80092b4:	60e8      	str	r0, [r5, #12]
 80092b6:	6085      	str	r5, [r0, #8]
 80092b8:	e7e0      	b.n	800927c <_free_r+0xa4>
 80092ba:	0a5d      	lsrs	r5, r3, #9
 80092bc:	2d04      	cmp	r5, #4
 80092be:	d812      	bhi.n	80092e6 <_free_r+0x10e>
 80092c0:	0998      	lsrs	r0, r3, #6
 80092c2:	3038      	adds	r0, #56	; 0x38
 80092c4:	00c6      	lsls	r6, r0, #3
 80092c6:	18b6      	adds	r6, r6, r2
 80092c8:	68b5      	ldr	r5, [r6, #8]
 80092ca:	2703      	movs	r7, #3
 80092cc:	42ae      	cmp	r6, r5
 80092ce:	d125      	bne.n	800931c <_free_r+0x144>
 80092d0:	2301      	movs	r3, #1
 80092d2:	1080      	asrs	r0, r0, #2
 80092d4:	4083      	lsls	r3, r0
 80092d6:	6850      	ldr	r0, [r2, #4]
 80092d8:	4303      	orrs	r3, r0
 80092da:	6053      	str	r3, [r2, #4]
 80092dc:	60ce      	str	r6, [r1, #12]
 80092de:	608d      	str	r5, [r1, #8]
 80092e0:	60b1      	str	r1, [r6, #8]
 80092e2:	60e9      	str	r1, [r5, #12]
 80092e4:	e7a7      	b.n	8009236 <_free_r+0x5e>
 80092e6:	2d14      	cmp	r5, #20
 80092e8:	d802      	bhi.n	80092f0 <_free_r+0x118>
 80092ea:	0028      	movs	r0, r5
 80092ec:	305b      	adds	r0, #91	; 0x5b
 80092ee:	e7e9      	b.n	80092c4 <_free_r+0xec>
 80092f0:	2d54      	cmp	r5, #84	; 0x54
 80092f2:	d802      	bhi.n	80092fa <_free_r+0x122>
 80092f4:	0b18      	lsrs	r0, r3, #12
 80092f6:	306e      	adds	r0, #110	; 0x6e
 80092f8:	e7e4      	b.n	80092c4 <_free_r+0xec>
 80092fa:	20aa      	movs	r0, #170	; 0xaa
 80092fc:	0040      	lsls	r0, r0, #1
 80092fe:	4285      	cmp	r5, r0
 8009300:	d802      	bhi.n	8009308 <_free_r+0x130>
 8009302:	0bd8      	lsrs	r0, r3, #15
 8009304:	3077      	adds	r0, #119	; 0x77
 8009306:	e7dd      	b.n	80092c4 <_free_r+0xec>
 8009308:	4e0b      	ldr	r6, [pc, #44]	; (8009338 <_free_r+0x160>)
 800930a:	207e      	movs	r0, #126	; 0x7e
 800930c:	42b5      	cmp	r5, r6
 800930e:	d8d9      	bhi.n	80092c4 <_free_r+0xec>
 8009310:	0c98      	lsrs	r0, r3, #18
 8009312:	307c      	adds	r0, #124	; 0x7c
 8009314:	e7d6      	b.n	80092c4 <_free_r+0xec>
 8009316:	68ad      	ldr	r5, [r5, #8]
 8009318:	42ae      	cmp	r6, r5
 800931a:	d003      	beq.n	8009324 <_free_r+0x14c>
 800931c:	686a      	ldr	r2, [r5, #4]
 800931e:	43ba      	bics	r2, r7
 8009320:	429a      	cmp	r2, r3
 8009322:	d8f8      	bhi.n	8009316 <_free_r+0x13e>
 8009324:	68ee      	ldr	r6, [r5, #12]
 8009326:	e7d9      	b.n	80092dc <_free_r+0x104>
 8009328:	20000010 	.word	0x20000010
 800932c:	2000041c 	.word	0x2000041c
 8009330:	20000a74 	.word	0x20000a74
 8009334:	20000018 	.word	0x20000018
 8009338:	00000554 	.word	0x00000554

0800933c <rshift>:
 800933c:	0002      	movs	r2, r0
 800933e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009340:	6904      	ldr	r4, [r0, #16]
 8009342:	114b      	asrs	r3, r1, #5
 8009344:	b085      	sub	sp, #20
 8009346:	3214      	adds	r2, #20
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	114d      	asrs	r5, r1, #5
 800934c:	0013      	movs	r3, r2
 800934e:	42ac      	cmp	r4, r5
 8009350:	dd32      	ble.n	80093b8 <rshift+0x7c>
 8009352:	261f      	movs	r6, #31
 8009354:	000f      	movs	r7, r1
 8009356:	114b      	asrs	r3, r1, #5
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	00a5      	lsls	r5, r4, #2
 800935c:	18d3      	adds	r3, r2, r3
 800935e:	4037      	ands	r7, r6
 8009360:	1955      	adds	r5, r2, r5
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	9701      	str	r7, [sp, #4]
 8009366:	4231      	tst	r1, r6
 8009368:	d10d      	bne.n	8009386 <rshift+0x4a>
 800936a:	0016      	movs	r6, r2
 800936c:	0019      	movs	r1, r3
 800936e:	428d      	cmp	r5, r1
 8009370:	d836      	bhi.n	80093e0 <rshift+0xa4>
 8009372:	9900      	ldr	r1, [sp, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	3903      	subs	r1, #3
 8009378:	428d      	cmp	r5, r1
 800937a:	d302      	bcc.n	8009382 <rshift+0x46>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	1ae4      	subs	r4, r4, r3
 8009380:	00a3      	lsls	r3, r4, #2
 8009382:	18d3      	adds	r3, r2, r3
 8009384:	e018      	b.n	80093b8 <rshift+0x7c>
 8009386:	2120      	movs	r1, #32
 8009388:	9e01      	ldr	r6, [sp, #4]
 800938a:	9f01      	ldr	r7, [sp, #4]
 800938c:	1b89      	subs	r1, r1, r6
 800938e:	9e00      	ldr	r6, [sp, #0]
 8009390:	9103      	str	r1, [sp, #12]
 8009392:	ce02      	ldmia	r6!, {r1}
 8009394:	4694      	mov	ip, r2
 8009396:	40f9      	lsrs	r1, r7
 8009398:	42b5      	cmp	r5, r6
 800939a:	d816      	bhi.n	80093ca <rshift+0x8e>
 800939c:	9e00      	ldr	r6, [sp, #0]
 800939e:	2300      	movs	r3, #0
 80093a0:	3601      	adds	r6, #1
 80093a2:	42b5      	cmp	r5, r6
 80093a4:	d303      	bcc.n	80093ae <rshift+0x72>
 80093a6:	9b02      	ldr	r3, [sp, #8]
 80093a8:	1ae3      	subs	r3, r4, r3
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	3b04      	subs	r3, #4
 80093ae:	18d3      	adds	r3, r2, r3
 80093b0:	6019      	str	r1, [r3, #0]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d000      	beq.n	80093b8 <rshift+0x7c>
 80093b6:	3304      	adds	r3, #4
 80093b8:	1a99      	subs	r1, r3, r2
 80093ba:	1089      	asrs	r1, r1, #2
 80093bc:	6101      	str	r1, [r0, #16]
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <rshift+0x8a>
 80093c2:	2300      	movs	r3, #0
 80093c4:	6143      	str	r3, [r0, #20]
 80093c6:	b005      	add	sp, #20
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ca:	6837      	ldr	r7, [r6, #0]
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	409f      	lsls	r7, r3
 80093d0:	430f      	orrs	r7, r1
 80093d2:	4661      	mov	r1, ip
 80093d4:	c180      	stmia	r1!, {r7}
 80093d6:	468c      	mov	ip, r1
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	ce02      	ldmia	r6!, {r1}
 80093dc:	40d9      	lsrs	r1, r3
 80093de:	e7db      	b.n	8009398 <rshift+0x5c>
 80093e0:	c980      	ldmia	r1!, {r7}
 80093e2:	c680      	stmia	r6!, {r7}
 80093e4:	e7c3      	b.n	800936e <rshift+0x32>

080093e6 <__hexdig_fun>:
 80093e6:	0002      	movs	r2, r0
 80093e8:	3a30      	subs	r2, #48	; 0x30
 80093ea:	0003      	movs	r3, r0
 80093ec:	2a09      	cmp	r2, #9
 80093ee:	d802      	bhi.n	80093f6 <__hexdig_fun+0x10>
 80093f0:	3b20      	subs	r3, #32
 80093f2:	b2d8      	uxtb	r0, r3
 80093f4:	4770      	bx	lr
 80093f6:	0002      	movs	r2, r0
 80093f8:	3a61      	subs	r2, #97	; 0x61
 80093fa:	2a05      	cmp	r2, #5
 80093fc:	d801      	bhi.n	8009402 <__hexdig_fun+0x1c>
 80093fe:	3b47      	subs	r3, #71	; 0x47
 8009400:	e7f7      	b.n	80093f2 <__hexdig_fun+0xc>
 8009402:	001a      	movs	r2, r3
 8009404:	3a41      	subs	r2, #65	; 0x41
 8009406:	2000      	movs	r0, #0
 8009408:	2a05      	cmp	r2, #5
 800940a:	d8f3      	bhi.n	80093f4 <__hexdig_fun+0xe>
 800940c:	3b27      	subs	r3, #39	; 0x27
 800940e:	e7f0      	b.n	80093f2 <__hexdig_fun+0xc>

08009410 <__gethex>:
 8009410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009412:	b089      	sub	sp, #36	; 0x24
 8009414:	9307      	str	r3, [sp, #28]
 8009416:	2302      	movs	r3, #2
 8009418:	9201      	str	r2, [sp, #4]
 800941a:	680a      	ldr	r2, [r1, #0]
 800941c:	425b      	negs	r3, r3
 800941e:	9003      	str	r0, [sp, #12]
 8009420:	9106      	str	r1, [sp, #24]
 8009422:	1c96      	adds	r6, r2, #2
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	199a      	adds	r2, r3, r6
 8009428:	9600      	str	r6, [sp, #0]
 800942a:	9205      	str	r2, [sp, #20]
 800942c:	9a00      	ldr	r2, [sp, #0]
 800942e:	3601      	adds	r6, #1
 8009430:	7810      	ldrb	r0, [r2, #0]
 8009432:	2830      	cmp	r0, #48	; 0x30
 8009434:	d0f7      	beq.n	8009426 <__gethex+0x16>
 8009436:	f7ff ffd6 	bl	80093e6 <__hexdig_fun>
 800943a:	2300      	movs	r3, #0
 800943c:	001d      	movs	r5, r3
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	4298      	cmp	r0, r3
 8009442:	d11d      	bne.n	8009480 <__gethex+0x70>
 8009444:	2201      	movs	r2, #1
 8009446:	49a6      	ldr	r1, [pc, #664]	; (80096e0 <__gethex+0x2d0>)
 8009448:	9800      	ldr	r0, [sp, #0]
 800944a:	f7ff fd6d 	bl	8008f28 <strncmp>
 800944e:	0007      	movs	r7, r0
 8009450:	42a8      	cmp	r0, r5
 8009452:	d169      	bne.n	8009528 <__gethex+0x118>
 8009454:	9b00      	ldr	r3, [sp, #0]
 8009456:	0034      	movs	r4, r6
 8009458:	7858      	ldrb	r0, [r3, #1]
 800945a:	f7ff ffc4 	bl	80093e6 <__hexdig_fun>
 800945e:	2301      	movs	r3, #1
 8009460:	9302      	str	r3, [sp, #8]
 8009462:	42a8      	cmp	r0, r5
 8009464:	d02f      	beq.n	80094c6 <__gethex+0xb6>
 8009466:	9600      	str	r6, [sp, #0]
 8009468:	9b00      	ldr	r3, [sp, #0]
 800946a:	7818      	ldrb	r0, [r3, #0]
 800946c:	2830      	cmp	r0, #48	; 0x30
 800946e:	d009      	beq.n	8009484 <__gethex+0x74>
 8009470:	f7ff ffb9 	bl	80093e6 <__hexdig_fun>
 8009474:	4242      	negs	r2, r0
 8009476:	4142      	adcs	r2, r0
 8009478:	2301      	movs	r3, #1
 800947a:	0035      	movs	r5, r6
 800947c:	9202      	str	r2, [sp, #8]
 800947e:	9305      	str	r3, [sp, #20]
 8009480:	9c00      	ldr	r4, [sp, #0]
 8009482:	e004      	b.n	800948e <__gethex+0x7e>
 8009484:	9b00      	ldr	r3, [sp, #0]
 8009486:	3301      	adds	r3, #1
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	e7ed      	b.n	8009468 <__gethex+0x58>
 800948c:	3401      	adds	r4, #1
 800948e:	7820      	ldrb	r0, [r4, #0]
 8009490:	f7ff ffa9 	bl	80093e6 <__hexdig_fun>
 8009494:	1e07      	subs	r7, r0, #0
 8009496:	d1f9      	bne.n	800948c <__gethex+0x7c>
 8009498:	2201      	movs	r2, #1
 800949a:	0020      	movs	r0, r4
 800949c:	4990      	ldr	r1, [pc, #576]	; (80096e0 <__gethex+0x2d0>)
 800949e:	f7ff fd43 	bl	8008f28 <strncmp>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d10d      	bne.n	80094c2 <__gethex+0xb2>
 80094a6:	2d00      	cmp	r5, #0
 80094a8:	d106      	bne.n	80094b8 <__gethex+0xa8>
 80094aa:	3401      	adds	r4, #1
 80094ac:	0025      	movs	r5, r4
 80094ae:	7820      	ldrb	r0, [r4, #0]
 80094b0:	f7ff ff99 	bl	80093e6 <__hexdig_fun>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d102      	bne.n	80094be <__gethex+0xae>
 80094b8:	1b2d      	subs	r5, r5, r4
 80094ba:	00af      	lsls	r7, r5, #2
 80094bc:	e003      	b.n	80094c6 <__gethex+0xb6>
 80094be:	3401      	adds	r4, #1
 80094c0:	e7f5      	b.n	80094ae <__gethex+0x9e>
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	d1f8      	bne.n	80094b8 <__gethex+0xa8>
 80094c6:	2220      	movs	r2, #32
 80094c8:	7823      	ldrb	r3, [r4, #0]
 80094ca:	0026      	movs	r6, r4
 80094cc:	4393      	bics	r3, r2
 80094ce:	2b50      	cmp	r3, #80	; 0x50
 80094d0:	d11d      	bne.n	800950e <__gethex+0xfe>
 80094d2:	7863      	ldrb	r3, [r4, #1]
 80094d4:	2b2b      	cmp	r3, #43	; 0x2b
 80094d6:	d02c      	beq.n	8009532 <__gethex+0x122>
 80094d8:	2b2d      	cmp	r3, #45	; 0x2d
 80094da:	d02e      	beq.n	800953a <__gethex+0x12a>
 80094dc:	2300      	movs	r3, #0
 80094de:	1c66      	adds	r6, r4, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	7830      	ldrb	r0, [r6, #0]
 80094e4:	f7ff ff7f 	bl	80093e6 <__hexdig_fun>
 80094e8:	1e43      	subs	r3, r0, #1
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b18      	cmp	r3, #24
 80094ee:	d82b      	bhi.n	8009548 <__gethex+0x138>
 80094f0:	3810      	subs	r0, #16
 80094f2:	0005      	movs	r5, r0
 80094f4:	7870      	ldrb	r0, [r6, #1]
 80094f6:	f7ff ff76 	bl	80093e6 <__hexdig_fun>
 80094fa:	1e43      	subs	r3, r0, #1
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	3601      	adds	r6, #1
 8009500:	2b18      	cmp	r3, #24
 8009502:	d91c      	bls.n	800953e <__gethex+0x12e>
 8009504:	9b04      	ldr	r3, [sp, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d000      	beq.n	800950c <__gethex+0xfc>
 800950a:	426d      	negs	r5, r5
 800950c:	197f      	adds	r7, r7, r5
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	601e      	str	r6, [r3, #0]
 8009512:	9b02      	ldr	r3, [sp, #8]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d019      	beq.n	800954c <__gethex+0x13c>
 8009518:	2600      	movs	r6, #0
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	42b3      	cmp	r3, r6
 800951e:	d100      	bne.n	8009522 <__gethex+0x112>
 8009520:	3606      	adds	r6, #6
 8009522:	0030      	movs	r0, r6
 8009524:	b009      	add	sp, #36	; 0x24
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009528:	2301      	movs	r3, #1
 800952a:	2700      	movs	r7, #0
 800952c:	9c00      	ldr	r4, [sp, #0]
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	e7c9      	b.n	80094c6 <__gethex+0xb6>
 8009532:	2300      	movs	r3, #0
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	1ca6      	adds	r6, r4, #2
 8009538:	e7d3      	b.n	80094e2 <__gethex+0xd2>
 800953a:	2301      	movs	r3, #1
 800953c:	e7fa      	b.n	8009534 <__gethex+0x124>
 800953e:	230a      	movs	r3, #10
 8009540:	435d      	muls	r5, r3
 8009542:	182d      	adds	r5, r5, r0
 8009544:	3d10      	subs	r5, #16
 8009546:	e7d5      	b.n	80094f4 <__gethex+0xe4>
 8009548:	0026      	movs	r6, r4
 800954a:	e7e0      	b.n	800950e <__gethex+0xfe>
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	9902      	ldr	r1, [sp, #8]
 8009550:	1ae3      	subs	r3, r4, r3
 8009552:	3b01      	subs	r3, #1
 8009554:	2b07      	cmp	r3, #7
 8009556:	dc0a      	bgt.n	800956e <__gethex+0x15e>
 8009558:	9803      	ldr	r0, [sp, #12]
 800955a:	f000 fa5d 	bl	8009a18 <_Balloc>
 800955e:	1e05      	subs	r5, r0, #0
 8009560:	d108      	bne.n	8009574 <__gethex+0x164>
 8009562:	002a      	movs	r2, r5
 8009564:	21e4      	movs	r1, #228	; 0xe4
 8009566:	4b5f      	ldr	r3, [pc, #380]	; (80096e4 <__gethex+0x2d4>)
 8009568:	485f      	ldr	r0, [pc, #380]	; (80096e8 <__gethex+0x2d8>)
 800956a:	f003 fd19 	bl	800cfa0 <__assert_func>
 800956e:	3101      	adds	r1, #1
 8009570:	105b      	asrs	r3, r3, #1
 8009572:	e7ef      	b.n	8009554 <__gethex+0x144>
 8009574:	0003      	movs	r3, r0
 8009576:	3314      	adds	r3, #20
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	9305      	str	r3, [sp, #20]
 800957c:	2300      	movs	r3, #0
 800957e:	001e      	movs	r6, r3
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	9b00      	ldr	r3, [sp, #0]
 8009584:	42a3      	cmp	r3, r4
 8009586:	d33f      	bcc.n	8009608 <__gethex+0x1f8>
 8009588:	9c05      	ldr	r4, [sp, #20]
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	c440      	stmia	r4!, {r6}
 800958e:	1ae4      	subs	r4, r4, r3
 8009590:	10a4      	asrs	r4, r4, #2
 8009592:	0030      	movs	r0, r6
 8009594:	612c      	str	r4, [r5, #16]
 8009596:	f000 fb01 	bl	8009b9c <__hi0bits>
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	0164      	lsls	r4, r4, #5
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	1a26      	subs	r6, r4, r0
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	429e      	cmp	r6, r3
 80095a6:	dd51      	ble.n	800964c <__gethex+0x23c>
 80095a8:	1af6      	subs	r6, r6, r3
 80095aa:	0031      	movs	r1, r6
 80095ac:	0028      	movs	r0, r5
 80095ae:	f000 fe7b 	bl	800a2a8 <__any_on>
 80095b2:	1e04      	subs	r4, r0, #0
 80095b4:	d016      	beq.n	80095e4 <__gethex+0x1d4>
 80095b6:	2401      	movs	r4, #1
 80095b8:	231f      	movs	r3, #31
 80095ba:	0020      	movs	r0, r4
 80095bc:	1e72      	subs	r2, r6, #1
 80095be:	4013      	ands	r3, r2
 80095c0:	4098      	lsls	r0, r3
 80095c2:	0003      	movs	r3, r0
 80095c4:	1151      	asrs	r1, r2, #5
 80095c6:	9802      	ldr	r0, [sp, #8]
 80095c8:	0089      	lsls	r1, r1, #2
 80095ca:	5809      	ldr	r1, [r1, r0]
 80095cc:	4219      	tst	r1, r3
 80095ce:	d009      	beq.n	80095e4 <__gethex+0x1d4>
 80095d0:	42a2      	cmp	r2, r4
 80095d2:	dd06      	ble.n	80095e2 <__gethex+0x1d2>
 80095d4:	0028      	movs	r0, r5
 80095d6:	1eb1      	subs	r1, r6, #2
 80095d8:	f000 fe66 	bl	800a2a8 <__any_on>
 80095dc:	3402      	adds	r4, #2
 80095de:	2800      	cmp	r0, #0
 80095e0:	d100      	bne.n	80095e4 <__gethex+0x1d4>
 80095e2:	2402      	movs	r4, #2
 80095e4:	0031      	movs	r1, r6
 80095e6:	0028      	movs	r0, r5
 80095e8:	f7ff fea8 	bl	800933c <rshift>
 80095ec:	19bf      	adds	r7, r7, r6
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	42bb      	cmp	r3, r7
 80095f4:	da3a      	bge.n	800966c <__gethex+0x25c>
 80095f6:	0029      	movs	r1, r5
 80095f8:	9803      	ldr	r0, [sp, #12]
 80095fa:	f000 fa35 	bl	8009a68 <_Bfree>
 80095fe:	2300      	movs	r3, #0
 8009600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009602:	26a3      	movs	r6, #163	; 0xa3
 8009604:	6013      	str	r3, [r2, #0]
 8009606:	e78c      	b.n	8009522 <__gethex+0x112>
 8009608:	3c01      	subs	r4, #1
 800960a:	7823      	ldrb	r3, [r4, #0]
 800960c:	2b2e      	cmp	r3, #46	; 0x2e
 800960e:	d012      	beq.n	8009636 <__gethex+0x226>
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	2b20      	cmp	r3, #32
 8009614:	d104      	bne.n	8009620 <__gethex+0x210>
 8009616:	9b05      	ldr	r3, [sp, #20]
 8009618:	c340      	stmia	r3!, {r6}
 800961a:	2600      	movs	r6, #0
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	9604      	str	r6, [sp, #16]
 8009620:	7820      	ldrb	r0, [r4, #0]
 8009622:	f7ff fee0 	bl	80093e6 <__hexdig_fun>
 8009626:	230f      	movs	r3, #15
 8009628:	4018      	ands	r0, r3
 800962a:	9b04      	ldr	r3, [sp, #16]
 800962c:	4098      	lsls	r0, r3
 800962e:	3304      	adds	r3, #4
 8009630:	4306      	orrs	r6, r0
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	e7a5      	b.n	8009582 <__gethex+0x172>
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	42a3      	cmp	r3, r4
 800963a:	d8e9      	bhi.n	8009610 <__gethex+0x200>
 800963c:	2201      	movs	r2, #1
 800963e:	0020      	movs	r0, r4
 8009640:	4927      	ldr	r1, [pc, #156]	; (80096e0 <__gethex+0x2d0>)
 8009642:	f7ff fc71 	bl	8008f28 <strncmp>
 8009646:	2800      	cmp	r0, #0
 8009648:	d1e2      	bne.n	8009610 <__gethex+0x200>
 800964a:	e79a      	b.n	8009582 <__gethex+0x172>
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	2400      	movs	r4, #0
 8009650:	429e      	cmp	r6, r3
 8009652:	dacc      	bge.n	80095ee <__gethex+0x1de>
 8009654:	1b9e      	subs	r6, r3, r6
 8009656:	0029      	movs	r1, r5
 8009658:	0032      	movs	r2, r6
 800965a:	9803      	ldr	r0, [sp, #12]
 800965c:	f000 fbf0 	bl	8009e40 <__lshift>
 8009660:	0003      	movs	r3, r0
 8009662:	3314      	adds	r3, #20
 8009664:	0005      	movs	r5, r0
 8009666:	1bbf      	subs	r7, r7, r6
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	e7c0      	b.n	80095ee <__gethex+0x1de>
 800966c:	9b01      	ldr	r3, [sp, #4]
 800966e:	685e      	ldr	r6, [r3, #4]
 8009670:	42be      	cmp	r6, r7
 8009672:	dd70      	ble.n	8009756 <__gethex+0x346>
 8009674:	9b00      	ldr	r3, [sp, #0]
 8009676:	1bf6      	subs	r6, r6, r7
 8009678:	42b3      	cmp	r3, r6
 800967a:	dc37      	bgt.n	80096ec <__gethex+0x2dc>
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d024      	beq.n	80096ce <__gethex+0x2be>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d026      	beq.n	80096d6 <__gethex+0x2c6>
 8009688:	2b01      	cmp	r3, #1
 800968a:	d117      	bne.n	80096bc <__gethex+0x2ac>
 800968c:	9b00      	ldr	r3, [sp, #0]
 800968e:	42b3      	cmp	r3, r6
 8009690:	d114      	bne.n	80096bc <__gethex+0x2ac>
 8009692:	2b01      	cmp	r3, #1
 8009694:	d10b      	bne.n	80096ae <__gethex+0x29e>
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	9a07      	ldr	r2, [sp, #28]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2662      	movs	r6, #98	; 0x62
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	2301      	movs	r3, #1
 80096a2:	9a02      	ldr	r2, [sp, #8]
 80096a4:	612b      	str	r3, [r5, #16]
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096aa:	601d      	str	r5, [r3, #0]
 80096ac:	e739      	b.n	8009522 <__gethex+0x112>
 80096ae:	9900      	ldr	r1, [sp, #0]
 80096b0:	0028      	movs	r0, r5
 80096b2:	3901      	subs	r1, #1
 80096b4:	f000 fdf8 	bl	800a2a8 <__any_on>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d1ec      	bne.n	8009696 <__gethex+0x286>
 80096bc:	0029      	movs	r1, r5
 80096be:	9803      	ldr	r0, [sp, #12]
 80096c0:	f000 f9d2 	bl	8009a68 <_Bfree>
 80096c4:	2300      	movs	r3, #0
 80096c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096c8:	2650      	movs	r6, #80	; 0x50
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	e729      	b.n	8009522 <__gethex+0x112>
 80096ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f3      	bne.n	80096bc <__gethex+0x2ac>
 80096d4:	e7df      	b.n	8009696 <__gethex+0x286>
 80096d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1dc      	bne.n	8009696 <__gethex+0x286>
 80096dc:	e7ee      	b.n	80096bc <__gethex+0x2ac>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	0800fc88 	.word	0x0800fc88
 80096e4:	0800fde9 	.word	0x0800fde9
 80096e8:	0800fdfa 	.word	0x0800fdfa
 80096ec:	1e77      	subs	r7, r6, #1
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	d12f      	bne.n	8009752 <__gethex+0x342>
 80096f2:	2f00      	cmp	r7, #0
 80096f4:	d004      	beq.n	8009700 <__gethex+0x2f0>
 80096f6:	0039      	movs	r1, r7
 80096f8:	0028      	movs	r0, r5
 80096fa:	f000 fdd5 	bl	800a2a8 <__any_on>
 80096fe:	0004      	movs	r4, r0
 8009700:	231f      	movs	r3, #31
 8009702:	117a      	asrs	r2, r7, #5
 8009704:	401f      	ands	r7, r3
 8009706:	3b1e      	subs	r3, #30
 8009708:	40bb      	lsls	r3, r7
 800970a:	9902      	ldr	r1, [sp, #8]
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	5852      	ldr	r2, [r2, r1]
 8009710:	421a      	tst	r2, r3
 8009712:	d001      	beq.n	8009718 <__gethex+0x308>
 8009714:	2302      	movs	r3, #2
 8009716:	431c      	orrs	r4, r3
 8009718:	9b00      	ldr	r3, [sp, #0]
 800971a:	0031      	movs	r1, r6
 800971c:	1b9b      	subs	r3, r3, r6
 800971e:	2602      	movs	r6, #2
 8009720:	0028      	movs	r0, r5
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	f7ff fe0a 	bl	800933c <rshift>
 8009728:	9b01      	ldr	r3, [sp, #4]
 800972a:	685f      	ldr	r7, [r3, #4]
 800972c:	2c00      	cmp	r4, #0
 800972e:	d041      	beq.n	80097b4 <__gethex+0x3a4>
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b02      	cmp	r3, #2
 8009736:	d010      	beq.n	800975a <__gethex+0x34a>
 8009738:	2b03      	cmp	r3, #3
 800973a:	d012      	beq.n	8009762 <__gethex+0x352>
 800973c:	2b01      	cmp	r3, #1
 800973e:	d106      	bne.n	800974e <__gethex+0x33e>
 8009740:	07a2      	lsls	r2, r4, #30
 8009742:	d504      	bpl.n	800974e <__gethex+0x33e>
 8009744:	9a02      	ldr	r2, [sp, #8]
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	4314      	orrs	r4, r2
 800974a:	421c      	tst	r4, r3
 800974c:	d10c      	bne.n	8009768 <__gethex+0x358>
 800974e:	2310      	movs	r3, #16
 8009750:	e02f      	b.n	80097b2 <__gethex+0x3a2>
 8009752:	2401      	movs	r4, #1
 8009754:	e7d4      	b.n	8009700 <__gethex+0x2f0>
 8009756:	2601      	movs	r6, #1
 8009758:	e7e8      	b.n	800972c <__gethex+0x31c>
 800975a:	2301      	movs	r3, #1
 800975c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	930f      	str	r3, [sp, #60]	; 0x3c
 8009762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0f2      	beq.n	800974e <__gethex+0x33e>
 8009768:	692b      	ldr	r3, [r5, #16]
 800976a:	2000      	movs	r0, #0
 800976c:	9302      	str	r3, [sp, #8]
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	002b      	movs	r3, r5
 8009774:	9a04      	ldr	r2, [sp, #16]
 8009776:	3314      	adds	r3, #20
 8009778:	1899      	adds	r1, r3, r2
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	1c54      	adds	r4, r2, #1
 800977e:	d01e      	beq.n	80097be <__gethex+0x3ae>
 8009780:	3201      	adds	r2, #1
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	002b      	movs	r3, r5
 8009786:	3314      	adds	r3, #20
 8009788:	2e02      	cmp	r6, #2
 800978a:	d141      	bne.n	8009810 <__gethex+0x400>
 800978c:	9a01      	ldr	r2, [sp, #4]
 800978e:	9900      	ldr	r1, [sp, #0]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	3a01      	subs	r2, #1
 8009794:	428a      	cmp	r2, r1
 8009796:	d10b      	bne.n	80097b0 <__gethex+0x3a0>
 8009798:	221f      	movs	r2, #31
 800979a:	9800      	ldr	r0, [sp, #0]
 800979c:	1149      	asrs	r1, r1, #5
 800979e:	4002      	ands	r2, r0
 80097a0:	2001      	movs	r0, #1
 80097a2:	0004      	movs	r4, r0
 80097a4:	4094      	lsls	r4, r2
 80097a6:	0089      	lsls	r1, r1, #2
 80097a8:	58cb      	ldr	r3, [r1, r3]
 80097aa:	4223      	tst	r3, r4
 80097ac:	d000      	beq.n	80097b0 <__gethex+0x3a0>
 80097ae:	2601      	movs	r6, #1
 80097b0:	2320      	movs	r3, #32
 80097b2:	431e      	orrs	r6, r3
 80097b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b6:	601d      	str	r5, [r3, #0]
 80097b8:	9b07      	ldr	r3, [sp, #28]
 80097ba:	601f      	str	r7, [r3, #0]
 80097bc:	e6b1      	b.n	8009522 <__gethex+0x112>
 80097be:	c301      	stmia	r3!, {r0}
 80097c0:	4299      	cmp	r1, r3
 80097c2:	d8da      	bhi.n	800977a <__gethex+0x36a>
 80097c4:	68ab      	ldr	r3, [r5, #8]
 80097c6:	9a02      	ldr	r2, [sp, #8]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	db18      	blt.n	80097fe <__gethex+0x3ee>
 80097cc:	6869      	ldr	r1, [r5, #4]
 80097ce:	9803      	ldr	r0, [sp, #12]
 80097d0:	3101      	adds	r1, #1
 80097d2:	f000 f921 	bl	8009a18 <_Balloc>
 80097d6:	1e04      	subs	r4, r0, #0
 80097d8:	d104      	bne.n	80097e4 <__gethex+0x3d4>
 80097da:	0022      	movs	r2, r4
 80097dc:	2184      	movs	r1, #132	; 0x84
 80097de:	4b1c      	ldr	r3, [pc, #112]	; (8009850 <__gethex+0x440>)
 80097e0:	481c      	ldr	r0, [pc, #112]	; (8009854 <__gethex+0x444>)
 80097e2:	e6c2      	b.n	800956a <__gethex+0x15a>
 80097e4:	0029      	movs	r1, r5
 80097e6:	692a      	ldr	r2, [r5, #16]
 80097e8:	310c      	adds	r1, #12
 80097ea:	3202      	adds	r2, #2
 80097ec:	0092      	lsls	r2, r2, #2
 80097ee:	300c      	adds	r0, #12
 80097f0:	f7ff fc77 	bl	80090e2 <memcpy>
 80097f4:	0029      	movs	r1, r5
 80097f6:	9803      	ldr	r0, [sp, #12]
 80097f8:	f000 f936 	bl	8009a68 <_Bfree>
 80097fc:	0025      	movs	r5, r4
 80097fe:	692b      	ldr	r3, [r5, #16]
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	612a      	str	r2, [r5, #16]
 8009804:	2201      	movs	r2, #1
 8009806:	3304      	adds	r3, #4
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	18eb      	adds	r3, r5, r3
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	e7b9      	b.n	8009784 <__gethex+0x374>
 8009810:	692a      	ldr	r2, [r5, #16]
 8009812:	9902      	ldr	r1, [sp, #8]
 8009814:	428a      	cmp	r2, r1
 8009816:	dd09      	ble.n	800982c <__gethex+0x41c>
 8009818:	2101      	movs	r1, #1
 800981a:	0028      	movs	r0, r5
 800981c:	f7ff fd8e 	bl	800933c <rshift>
 8009820:	9b01      	ldr	r3, [sp, #4]
 8009822:	3701      	adds	r7, #1
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	42bb      	cmp	r3, r7
 8009828:	dac1      	bge.n	80097ae <__gethex+0x39e>
 800982a:	e6e4      	b.n	80095f6 <__gethex+0x1e6>
 800982c:	221f      	movs	r2, #31
 800982e:	9c00      	ldr	r4, [sp, #0]
 8009830:	9900      	ldr	r1, [sp, #0]
 8009832:	2601      	movs	r6, #1
 8009834:	4014      	ands	r4, r2
 8009836:	4211      	tst	r1, r2
 8009838:	d0ba      	beq.n	80097b0 <__gethex+0x3a0>
 800983a:	9a04      	ldr	r2, [sp, #16]
 800983c:	189b      	adds	r3, r3, r2
 800983e:	3b04      	subs	r3, #4
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f000 f9ab 	bl	8009b9c <__hi0bits>
 8009846:	2320      	movs	r3, #32
 8009848:	1b1b      	subs	r3, r3, r4
 800984a:	4298      	cmp	r0, r3
 800984c:	dbe4      	blt.n	8009818 <__gethex+0x408>
 800984e:	e7af      	b.n	80097b0 <__gethex+0x3a0>
 8009850:	0800fde9 	.word	0x0800fde9
 8009854:	0800fdfa 	.word	0x0800fdfa

08009858 <L_shift>:
 8009858:	2308      	movs	r3, #8
 800985a:	b570      	push	{r4, r5, r6, lr}
 800985c:	2520      	movs	r5, #32
 800985e:	1a9a      	subs	r2, r3, r2
 8009860:	0092      	lsls	r2, r2, #2
 8009862:	1aad      	subs	r5, r5, r2
 8009864:	6843      	ldr	r3, [r0, #4]
 8009866:	6804      	ldr	r4, [r0, #0]
 8009868:	001e      	movs	r6, r3
 800986a:	40ae      	lsls	r6, r5
 800986c:	40d3      	lsrs	r3, r2
 800986e:	4334      	orrs	r4, r6
 8009870:	6004      	str	r4, [r0, #0]
 8009872:	6043      	str	r3, [r0, #4]
 8009874:	3004      	adds	r0, #4
 8009876:	4288      	cmp	r0, r1
 8009878:	d3f4      	bcc.n	8009864 <L_shift+0xc>
 800987a:	bd70      	pop	{r4, r5, r6, pc}

0800987c <__match>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	6803      	ldr	r3, [r0, #0]
 8009880:	780c      	ldrb	r4, [r1, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	2c00      	cmp	r4, #0
 8009886:	d102      	bne.n	800988e <__match+0x12>
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	2001      	movs	r0, #1
 800988c:	bd30      	pop	{r4, r5, pc}
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	0015      	movs	r5, r2
 8009892:	3d41      	subs	r5, #65	; 0x41
 8009894:	2d19      	cmp	r5, #25
 8009896:	d800      	bhi.n	800989a <__match+0x1e>
 8009898:	3220      	adds	r2, #32
 800989a:	3101      	adds	r1, #1
 800989c:	42a2      	cmp	r2, r4
 800989e:	d0ef      	beq.n	8009880 <__match+0x4>
 80098a0:	2000      	movs	r0, #0
 80098a2:	e7f3      	b.n	800988c <__match+0x10>

080098a4 <__hexnan>:
 80098a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098a6:	680b      	ldr	r3, [r1, #0]
 80098a8:	b08b      	sub	sp, #44	; 0x2c
 80098aa:	9201      	str	r2, [sp, #4]
 80098ac:	9901      	ldr	r1, [sp, #4]
 80098ae:	115a      	asrs	r2, r3, #5
 80098b0:	0092      	lsls	r2, r2, #2
 80098b2:	188a      	adds	r2, r1, r2
 80098b4:	9202      	str	r2, [sp, #8]
 80098b6:	0019      	movs	r1, r3
 80098b8:	221f      	movs	r2, #31
 80098ba:	4011      	ands	r1, r2
 80098bc:	9008      	str	r0, [sp, #32]
 80098be:	9106      	str	r1, [sp, #24]
 80098c0:	4213      	tst	r3, r2
 80098c2:	d002      	beq.n	80098ca <__hexnan+0x26>
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	3304      	adds	r3, #4
 80098c8:	9302      	str	r3, [sp, #8]
 80098ca:	9b02      	ldr	r3, [sp, #8]
 80098cc:	2500      	movs	r5, #0
 80098ce:	1f1f      	subs	r7, r3, #4
 80098d0:	003e      	movs	r6, r7
 80098d2:	003c      	movs	r4, r7
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	603d      	str	r5, [r7, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9507      	str	r5, [sp, #28]
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	9503      	str	r5, [sp, #12]
 80098e0:	9b05      	ldr	r3, [sp, #20]
 80098e2:	3301      	adds	r3, #1
 80098e4:	9309      	str	r3, [sp, #36]	; 0x24
 80098e6:	9b05      	ldr	r3, [sp, #20]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d028      	beq.n	8009942 <__hexnan+0x9e>
 80098f0:	9804      	ldr	r0, [sp, #16]
 80098f2:	f7ff fd78 	bl	80093e6 <__hexdig_fun>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d154      	bne.n	80099a4 <__hexnan+0x100>
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d819      	bhi.n	8009934 <__hexnan+0x90>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	9a07      	ldr	r2, [sp, #28]
 8009904:	4293      	cmp	r3, r2
 8009906:	dd12      	ble.n	800992e <__hexnan+0x8a>
 8009908:	42b4      	cmp	r4, r6
 800990a:	d206      	bcs.n	800991a <__hexnan+0x76>
 800990c:	2d07      	cmp	r5, #7
 800990e:	dc04      	bgt.n	800991a <__hexnan+0x76>
 8009910:	002a      	movs	r2, r5
 8009912:	0031      	movs	r1, r6
 8009914:	0020      	movs	r0, r4
 8009916:	f7ff ff9f 	bl	8009858 <L_shift>
 800991a:	9b01      	ldr	r3, [sp, #4]
 800991c:	2508      	movs	r5, #8
 800991e:	429c      	cmp	r4, r3
 8009920:	d905      	bls.n	800992e <__hexnan+0x8a>
 8009922:	1f26      	subs	r6, r4, #4
 8009924:	2500      	movs	r5, #0
 8009926:	0034      	movs	r4, r6
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	6035      	str	r5, [r6, #0]
 800992c:	9307      	str	r3, [sp, #28]
 800992e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009930:	9305      	str	r3, [sp, #20]
 8009932:	e7d5      	b.n	80098e0 <__hexnan+0x3c>
 8009934:	9b04      	ldr	r3, [sp, #16]
 8009936:	2b29      	cmp	r3, #41	; 0x29
 8009938:	d159      	bne.n	80099ee <__hexnan+0x14a>
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	9a08      	ldr	r2, [sp, #32]
 800993e:	3302      	adds	r3, #2
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	9b03      	ldr	r3, [sp, #12]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d052      	beq.n	80099ee <__hexnan+0x14a>
 8009948:	42b4      	cmp	r4, r6
 800994a:	d206      	bcs.n	800995a <__hexnan+0xb6>
 800994c:	2d07      	cmp	r5, #7
 800994e:	dc04      	bgt.n	800995a <__hexnan+0xb6>
 8009950:	002a      	movs	r2, r5
 8009952:	0031      	movs	r1, r6
 8009954:	0020      	movs	r0, r4
 8009956:	f7ff ff7f 	bl	8009858 <L_shift>
 800995a:	9b01      	ldr	r3, [sp, #4]
 800995c:	429c      	cmp	r4, r3
 800995e:	d935      	bls.n	80099cc <__hexnan+0x128>
 8009960:	001a      	movs	r2, r3
 8009962:	0023      	movs	r3, r4
 8009964:	cb02      	ldmia	r3!, {r1}
 8009966:	c202      	stmia	r2!, {r1}
 8009968:	429f      	cmp	r7, r3
 800996a:	d2fb      	bcs.n	8009964 <__hexnan+0xc0>
 800996c:	9b02      	ldr	r3, [sp, #8]
 800996e:	1c62      	adds	r2, r4, #1
 8009970:	1ed9      	subs	r1, r3, #3
 8009972:	2304      	movs	r3, #4
 8009974:	4291      	cmp	r1, r2
 8009976:	d305      	bcc.n	8009984 <__hexnan+0xe0>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	3b04      	subs	r3, #4
 800997c:	1b1b      	subs	r3, r3, r4
 800997e:	089b      	lsrs	r3, r3, #2
 8009980:	3301      	adds	r3, #1
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	9a01      	ldr	r2, [sp, #4]
 8009986:	18d3      	adds	r3, r2, r3
 8009988:	2200      	movs	r2, #0
 800998a:	c304      	stmia	r3!, {r2}
 800998c:	429f      	cmp	r7, r3
 800998e:	d2fc      	bcs.n	800998a <__hexnan+0xe6>
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <__hexnan+0xfc>
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	429f      	cmp	r7, r3
 800999a:	d126      	bne.n	80099ea <__hexnan+0x146>
 800999c:	2301      	movs	r3, #1
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	2005      	movs	r0, #5
 80099a2:	e025      	b.n	80099f0 <__hexnan+0x14c>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	3501      	adds	r5, #1
 80099a8:	3301      	adds	r3, #1
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	2d08      	cmp	r5, #8
 80099ae:	dd06      	ble.n	80099be <__hexnan+0x11a>
 80099b0:	9b01      	ldr	r3, [sp, #4]
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d9bb      	bls.n	800992e <__hexnan+0x8a>
 80099b6:	2300      	movs	r3, #0
 80099b8:	2501      	movs	r5, #1
 80099ba:	3c04      	subs	r4, #4
 80099bc:	6023      	str	r3, [r4, #0]
 80099be:	220f      	movs	r2, #15
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	4010      	ands	r0, r2
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	4303      	orrs	r3, r0
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	e7b0      	b.n	800992e <__hexnan+0x8a>
 80099cc:	9b06      	ldr	r3, [sp, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0de      	beq.n	8009990 <__hexnan+0xec>
 80099d2:	2320      	movs	r3, #32
 80099d4:	9a06      	ldr	r2, [sp, #24]
 80099d6:	9902      	ldr	r1, [sp, #8]
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	2201      	movs	r2, #1
 80099dc:	4252      	negs	r2, r2
 80099de:	40da      	lsrs	r2, r3
 80099e0:	3904      	subs	r1, #4
 80099e2:	680b      	ldr	r3, [r1, #0]
 80099e4:	4013      	ands	r3, r2
 80099e6:	600b      	str	r3, [r1, #0]
 80099e8:	e7d2      	b.n	8009990 <__hexnan+0xec>
 80099ea:	3f04      	subs	r7, #4
 80099ec:	e7d0      	b.n	8009990 <__hexnan+0xec>
 80099ee:	2004      	movs	r0, #4
 80099f0:	b00b      	add	sp, #44	; 0x2c
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099f4 <__ascii_mbtowc>:
 80099f4:	b082      	sub	sp, #8
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d100      	bne.n	80099fc <__ascii_mbtowc+0x8>
 80099fa:	a901      	add	r1, sp, #4
 80099fc:	1e10      	subs	r0, r2, #0
 80099fe:	d006      	beq.n	8009a0e <__ascii_mbtowc+0x1a>
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d006      	beq.n	8009a12 <__ascii_mbtowc+0x1e>
 8009a04:	7813      	ldrb	r3, [r2, #0]
 8009a06:	600b      	str	r3, [r1, #0]
 8009a08:	7810      	ldrb	r0, [r2, #0]
 8009a0a:	1e43      	subs	r3, r0, #1
 8009a0c:	4198      	sbcs	r0, r3
 8009a0e:	b002      	add	sp, #8
 8009a10:	4770      	bx	lr
 8009a12:	2002      	movs	r0, #2
 8009a14:	4240      	negs	r0, r0
 8009a16:	e7fa      	b.n	8009a0e <__ascii_mbtowc+0x1a>

08009a18 <_Balloc>:
 8009a18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a1a:	b570      	push	{r4, r5, r6, lr}
 8009a1c:	0006      	movs	r6, r0
 8009a1e:	000c      	movs	r4, r1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <_Balloc+0x32>
 8009a24:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009a26:	00a2      	lsls	r2, r4, #2
 8009a28:	189b      	adds	r3, r3, r2
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d115      	bne.n	8009a5c <_Balloc+0x44>
 8009a30:	2101      	movs	r1, #1
 8009a32:	000d      	movs	r5, r1
 8009a34:	40a5      	lsls	r5, r4
 8009a36:	1d6a      	adds	r2, r5, #5
 8009a38:	0030      	movs	r0, r6
 8009a3a:	0092      	lsls	r2, r2, #2
 8009a3c:	f003 face 	bl	800cfdc <_calloc_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d009      	beq.n	8009a58 <_Balloc+0x40>
 8009a44:	6044      	str	r4, [r0, #4]
 8009a46:	6085      	str	r5, [r0, #8]
 8009a48:	e00a      	b.n	8009a60 <_Balloc+0x48>
 8009a4a:	2221      	movs	r2, #33	; 0x21
 8009a4c:	2104      	movs	r1, #4
 8009a4e:	f003 fac5 	bl	800cfdc <_calloc_r>
 8009a52:	6470      	str	r0, [r6, #68]	; 0x44
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1e5      	bne.n	8009a24 <_Balloc+0xc>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	6802      	ldr	r2, [r0, #0]
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	2300      	movs	r3, #0
 8009a62:	6103      	str	r3, [r0, #16]
 8009a64:	60c3      	str	r3, [r0, #12]
 8009a66:	e7f8      	b.n	8009a5a <_Balloc+0x42>

08009a68 <_Bfree>:
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d006      	beq.n	8009a7a <_Bfree+0x12>
 8009a6c:	684a      	ldr	r2, [r1, #4]
 8009a6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	189b      	adds	r3, r3, r2
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	600a      	str	r2, [r1, #0]
 8009a78:	6019      	str	r1, [r3, #0]
 8009a7a:	4770      	bx	lr

08009a7c <__multadd>:
 8009a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7e:	000e      	movs	r6, r1
 8009a80:	9001      	str	r0, [sp, #4]
 8009a82:	000c      	movs	r4, r1
 8009a84:	001d      	movs	r5, r3
 8009a86:	2000      	movs	r0, #0
 8009a88:	690f      	ldr	r7, [r1, #16]
 8009a8a:	3614      	adds	r6, #20
 8009a8c:	6833      	ldr	r3, [r6, #0]
 8009a8e:	3001      	adds	r0, #1
 8009a90:	b299      	uxth	r1, r3
 8009a92:	4351      	muls	r1, r2
 8009a94:	0c1b      	lsrs	r3, r3, #16
 8009a96:	4353      	muls	r3, r2
 8009a98:	1949      	adds	r1, r1, r5
 8009a9a:	0c0d      	lsrs	r5, r1, #16
 8009a9c:	195b      	adds	r3, r3, r5
 8009a9e:	0c1d      	lsrs	r5, r3, #16
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	041b      	lsls	r3, r3, #16
 8009aa4:	185b      	adds	r3, r3, r1
 8009aa6:	c608      	stmia	r6!, {r3}
 8009aa8:	4287      	cmp	r7, r0
 8009aaa:	dcef      	bgt.n	8009a8c <__multadd+0x10>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d022      	beq.n	8009af6 <__multadd+0x7a>
 8009ab0:	68a3      	ldr	r3, [r4, #8]
 8009ab2:	42bb      	cmp	r3, r7
 8009ab4:	dc19      	bgt.n	8009aea <__multadd+0x6e>
 8009ab6:	6861      	ldr	r1, [r4, #4]
 8009ab8:	9801      	ldr	r0, [sp, #4]
 8009aba:	3101      	adds	r1, #1
 8009abc:	f7ff ffac 	bl	8009a18 <_Balloc>
 8009ac0:	1e06      	subs	r6, r0, #0
 8009ac2:	d105      	bne.n	8009ad0 <__multadd+0x54>
 8009ac4:	0032      	movs	r2, r6
 8009ac6:	21ba      	movs	r1, #186	; 0xba
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <__multadd+0x80>)
 8009aca:	480d      	ldr	r0, [pc, #52]	; (8009b00 <__multadd+0x84>)
 8009acc:	f003 fa68 	bl	800cfa0 <__assert_func>
 8009ad0:	0021      	movs	r1, r4
 8009ad2:	6922      	ldr	r2, [r4, #16]
 8009ad4:	310c      	adds	r1, #12
 8009ad6:	3202      	adds	r2, #2
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	300c      	adds	r0, #12
 8009adc:	f7ff fb01 	bl	80090e2 <memcpy>
 8009ae0:	0021      	movs	r1, r4
 8009ae2:	9801      	ldr	r0, [sp, #4]
 8009ae4:	f7ff ffc0 	bl	8009a68 <_Bfree>
 8009ae8:	0034      	movs	r4, r6
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	18e3      	adds	r3, r4, r3
 8009af0:	605d      	str	r5, [r3, #4]
 8009af2:	1c7b      	adds	r3, r7, #1
 8009af4:	6123      	str	r3, [r4, #16]
 8009af6:	0020      	movs	r0, r4
 8009af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	0800fde9 	.word	0x0800fde9
 8009b00:	0800fe5a 	.word	0x0800fe5a

08009b04 <__s2b>:
 8009b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b06:	0006      	movs	r6, r0
 8009b08:	0018      	movs	r0, r3
 8009b0a:	000c      	movs	r4, r1
 8009b0c:	3008      	adds	r0, #8
 8009b0e:	2109      	movs	r1, #9
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	0015      	movs	r5, r2
 8009b14:	f7f6 fb9c 	bl	8000250 <__divsi3>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4283      	cmp	r3, r0
 8009b1e:	db0a      	blt.n	8009b36 <__s2b+0x32>
 8009b20:	0030      	movs	r0, r6
 8009b22:	f7ff ff79 	bl	8009a18 <_Balloc>
 8009b26:	1e01      	subs	r1, r0, #0
 8009b28:	d108      	bne.n	8009b3c <__s2b+0x38>
 8009b2a:	000a      	movs	r2, r1
 8009b2c:	4b19      	ldr	r3, [pc, #100]	; (8009b94 <__s2b+0x90>)
 8009b2e:	481a      	ldr	r0, [pc, #104]	; (8009b98 <__s2b+0x94>)
 8009b30:	31d3      	adds	r1, #211	; 0xd3
 8009b32:	f003 fa35 	bl	800cfa0 <__assert_func>
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	3101      	adds	r1, #1
 8009b3a:	e7ef      	b.n	8009b1c <__s2b+0x18>
 8009b3c:	9b08      	ldr	r3, [sp, #32]
 8009b3e:	6143      	str	r3, [r0, #20]
 8009b40:	2301      	movs	r3, #1
 8009b42:	6103      	str	r3, [r0, #16]
 8009b44:	2d09      	cmp	r5, #9
 8009b46:	dd18      	ble.n	8009b7a <__s2b+0x76>
 8009b48:	0023      	movs	r3, r4
 8009b4a:	3309      	adds	r3, #9
 8009b4c:	001f      	movs	r7, r3
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	1964      	adds	r4, r4, r5
 8009b52:	783b      	ldrb	r3, [r7, #0]
 8009b54:	220a      	movs	r2, #10
 8009b56:	0030      	movs	r0, r6
 8009b58:	3b30      	subs	r3, #48	; 0x30
 8009b5a:	f7ff ff8f 	bl	8009a7c <__multadd>
 8009b5e:	3701      	adds	r7, #1
 8009b60:	0001      	movs	r1, r0
 8009b62:	42a7      	cmp	r7, r4
 8009b64:	d1f5      	bne.n	8009b52 <__s2b+0x4e>
 8009b66:	002c      	movs	r4, r5
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	3c08      	subs	r4, #8
 8009b6c:	191c      	adds	r4, r3, r4
 8009b6e:	002f      	movs	r7, r5
 8009b70:	9b01      	ldr	r3, [sp, #4]
 8009b72:	429f      	cmp	r7, r3
 8009b74:	db04      	blt.n	8009b80 <__s2b+0x7c>
 8009b76:	0008      	movs	r0, r1
 8009b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b7a:	2509      	movs	r5, #9
 8009b7c:	340a      	adds	r4, #10
 8009b7e:	e7f6      	b.n	8009b6e <__s2b+0x6a>
 8009b80:	1b63      	subs	r3, r4, r5
 8009b82:	5ddb      	ldrb	r3, [r3, r7]
 8009b84:	220a      	movs	r2, #10
 8009b86:	0030      	movs	r0, r6
 8009b88:	3b30      	subs	r3, #48	; 0x30
 8009b8a:	f7ff ff77 	bl	8009a7c <__multadd>
 8009b8e:	3701      	adds	r7, #1
 8009b90:	0001      	movs	r1, r0
 8009b92:	e7ed      	b.n	8009b70 <__s2b+0x6c>
 8009b94:	0800fde9 	.word	0x0800fde9
 8009b98:	0800fe5a 	.word	0x0800fe5a

08009b9c <__hi0bits>:
 8009b9c:	0003      	movs	r3, r0
 8009b9e:	0c02      	lsrs	r2, r0, #16
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	4282      	cmp	r2, r0
 8009ba4:	d101      	bne.n	8009baa <__hi0bits+0xe>
 8009ba6:	041b      	lsls	r3, r3, #16
 8009ba8:	3010      	adds	r0, #16
 8009baa:	0e1a      	lsrs	r2, r3, #24
 8009bac:	d101      	bne.n	8009bb2 <__hi0bits+0x16>
 8009bae:	3008      	adds	r0, #8
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	0f1a      	lsrs	r2, r3, #28
 8009bb4:	d101      	bne.n	8009bba <__hi0bits+0x1e>
 8009bb6:	3004      	adds	r0, #4
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	0f9a      	lsrs	r2, r3, #30
 8009bbc:	d101      	bne.n	8009bc2 <__hi0bits+0x26>
 8009bbe:	3002      	adds	r0, #2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	db03      	blt.n	8009bce <__hi0bits+0x32>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	d400      	bmi.n	8009bce <__hi0bits+0x32>
 8009bcc:	2020      	movs	r0, #32
 8009bce:	4770      	bx	lr

08009bd0 <__lo0bits>:
 8009bd0:	6803      	ldr	r3, [r0, #0]
 8009bd2:	0001      	movs	r1, r0
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	0018      	movs	r0, r3
 8009bd8:	4010      	ands	r0, r2
 8009bda:	4213      	tst	r3, r2
 8009bdc:	d00d      	beq.n	8009bfa <__lo0bits+0x2a>
 8009bde:	3a06      	subs	r2, #6
 8009be0:	2000      	movs	r0, #0
 8009be2:	4213      	tst	r3, r2
 8009be4:	d105      	bne.n	8009bf2 <__lo0bits+0x22>
 8009be6:	3002      	adds	r0, #2
 8009be8:	4203      	tst	r3, r0
 8009bea:	d003      	beq.n	8009bf4 <__lo0bits+0x24>
 8009bec:	40d3      	lsrs	r3, r2
 8009bee:	0010      	movs	r0, r2
 8009bf0:	600b      	str	r3, [r1, #0]
 8009bf2:	4770      	bx	lr
 8009bf4:	089b      	lsrs	r3, r3, #2
 8009bf6:	600b      	str	r3, [r1, #0]
 8009bf8:	e7fb      	b.n	8009bf2 <__lo0bits+0x22>
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d101      	bne.n	8009c04 <__lo0bits+0x34>
 8009c00:	2010      	movs	r0, #16
 8009c02:	0c1b      	lsrs	r3, r3, #16
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	d101      	bne.n	8009c0e <__lo0bits+0x3e>
 8009c0a:	3008      	adds	r0, #8
 8009c0c:	0a1b      	lsrs	r3, r3, #8
 8009c0e:	071a      	lsls	r2, r3, #28
 8009c10:	d101      	bne.n	8009c16 <__lo0bits+0x46>
 8009c12:	3004      	adds	r0, #4
 8009c14:	091b      	lsrs	r3, r3, #4
 8009c16:	079a      	lsls	r2, r3, #30
 8009c18:	d101      	bne.n	8009c1e <__lo0bits+0x4e>
 8009c1a:	3002      	adds	r0, #2
 8009c1c:	089b      	lsrs	r3, r3, #2
 8009c1e:	07da      	lsls	r2, r3, #31
 8009c20:	d4e9      	bmi.n	8009bf6 <__lo0bits+0x26>
 8009c22:	3001      	adds	r0, #1
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	d1e6      	bne.n	8009bf6 <__lo0bits+0x26>
 8009c28:	2020      	movs	r0, #32
 8009c2a:	e7e2      	b.n	8009bf2 <__lo0bits+0x22>

08009c2c <__i2b>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	000c      	movs	r4, r1
 8009c30:	2101      	movs	r1, #1
 8009c32:	f7ff fef1 	bl	8009a18 <_Balloc>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d107      	bne.n	8009c4a <__i2b+0x1e>
 8009c3a:	2146      	movs	r1, #70	; 0x46
 8009c3c:	4c05      	ldr	r4, [pc, #20]	; (8009c54 <__i2b+0x28>)
 8009c3e:	0002      	movs	r2, r0
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <__i2b+0x2c>)
 8009c42:	0020      	movs	r0, r4
 8009c44:	31ff      	adds	r1, #255	; 0xff
 8009c46:	f003 f9ab 	bl	800cfa0 <__assert_func>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	6144      	str	r4, [r0, #20]
 8009c4e:	6103      	str	r3, [r0, #16]
 8009c50:	bd10      	pop	{r4, pc}
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	0800fe5a 	.word	0x0800fe5a
 8009c58:	0800fde9 	.word	0x0800fde9

08009c5c <__multiply>:
 8009c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5e:	0015      	movs	r5, r2
 8009c60:	690a      	ldr	r2, [r1, #16]
 8009c62:	692b      	ldr	r3, [r5, #16]
 8009c64:	000c      	movs	r4, r1
 8009c66:	b08b      	sub	sp, #44	; 0x2c
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	da01      	bge.n	8009c70 <__multiply+0x14>
 8009c6c:	002c      	movs	r4, r5
 8009c6e:	000d      	movs	r5, r1
 8009c70:	6927      	ldr	r7, [r4, #16]
 8009c72:	692e      	ldr	r6, [r5, #16]
 8009c74:	6861      	ldr	r1, [r4, #4]
 8009c76:	19bb      	adds	r3, r7, r6
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	19ba      	adds	r2, r7, r6
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	da00      	bge.n	8009c84 <__multiply+0x28>
 8009c82:	3101      	adds	r1, #1
 8009c84:	f7ff fec8 	bl	8009a18 <_Balloc>
 8009c88:	9002      	str	r0, [sp, #8]
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d106      	bne.n	8009c9c <__multiply+0x40>
 8009c8e:	21b1      	movs	r1, #177	; 0xb1
 8009c90:	4b48      	ldr	r3, [pc, #288]	; (8009db4 <__multiply+0x158>)
 8009c92:	4849      	ldr	r0, [pc, #292]	; (8009db8 <__multiply+0x15c>)
 8009c94:	9a02      	ldr	r2, [sp, #8]
 8009c96:	0049      	lsls	r1, r1, #1
 8009c98:	f003 f982 	bl	800cfa0 <__assert_func>
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	469c      	mov	ip, r3
 8009ca4:	19bb      	adds	r3, r7, r6
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4463      	add	r3, ip
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	4663      	mov	r3, ip
 8009cae:	9904      	ldr	r1, [sp, #16]
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	d32a      	bcc.n	8009d0a <__multiply+0xae>
 8009cb4:	0023      	movs	r3, r4
 8009cb6:	00bf      	lsls	r7, r7, #2
 8009cb8:	3314      	adds	r3, #20
 8009cba:	3514      	adds	r5, #20
 8009cbc:	9308      	str	r3, [sp, #32]
 8009cbe:	00b6      	lsls	r6, r6, #2
 8009cc0:	19db      	adds	r3, r3, r7
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	19ab      	adds	r3, r5, r6
 8009cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc8:	2304      	movs	r3, #4
 8009cca:	9306      	str	r3, [sp, #24]
 8009ccc:	0023      	movs	r3, r4
 8009cce:	9a05      	ldr	r2, [sp, #20]
 8009cd0:	3315      	adds	r3, #21
 8009cd2:	9501      	str	r5, [sp, #4]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d305      	bcc.n	8009ce4 <__multiply+0x88>
 8009cd8:	1b13      	subs	r3, r2, r4
 8009cda:	3b15      	subs	r3, #21
 8009cdc:	089b      	lsrs	r3, r3, #2
 8009cde:	3301      	adds	r3, #1
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	9306      	str	r3, [sp, #24]
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d310      	bcc.n	8009d0e <__multiply+0xb2>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dd05      	ble.n	8009cfe <__multiply+0xa2>
 8009cf2:	9b04      	ldr	r3, [sp, #16]
 8009cf4:	3b04      	subs	r3, #4
 8009cf6:	9304      	str	r3, [sp, #16]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d056      	beq.n	8009dac <__multiply+0x150>
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	9a03      	ldr	r2, [sp, #12]
 8009d02:	0018      	movs	r0, r3
 8009d04:	611a      	str	r2, [r3, #16]
 8009d06:	b00b      	add	sp, #44	; 0x2c
 8009d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0a:	c304      	stmia	r3!, {r2}
 8009d0c:	e7cf      	b.n	8009cae <__multiply+0x52>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	b280      	uxth	r0, r0
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d01e      	beq.n	8009d56 <__multiply+0xfa>
 8009d18:	4667      	mov	r7, ip
 8009d1a:	2500      	movs	r5, #0
 8009d1c:	9e08      	ldr	r6, [sp, #32]
 8009d1e:	ce02      	ldmia	r6!, {r1}
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	b28b      	uxth	r3, r1
 8009d26:	4343      	muls	r3, r0
 8009d28:	001a      	movs	r2, r3
 8009d2a:	466b      	mov	r3, sp
 8009d2c:	8b9b      	ldrh	r3, [r3, #28]
 8009d2e:	18d3      	adds	r3, r2, r3
 8009d30:	195b      	adds	r3, r3, r5
 8009d32:	0c0d      	lsrs	r5, r1, #16
 8009d34:	4345      	muls	r5, r0
 8009d36:	9a07      	ldr	r2, [sp, #28]
 8009d38:	0c11      	lsrs	r1, r2, #16
 8009d3a:	1869      	adds	r1, r5, r1
 8009d3c:	0c1a      	lsrs	r2, r3, #16
 8009d3e:	188a      	adds	r2, r1, r2
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	0c15      	lsrs	r5, r2, #16
 8009d44:	0412      	lsls	r2, r2, #16
 8009d46:	431a      	orrs	r2, r3
 8009d48:	9b05      	ldr	r3, [sp, #20]
 8009d4a:	c704      	stmia	r7!, {r2}
 8009d4c:	42b3      	cmp	r3, r6
 8009d4e:	d8e6      	bhi.n	8009d1e <__multiply+0xc2>
 8009d50:	4663      	mov	r3, ip
 8009d52:	9a06      	ldr	r2, [sp, #24]
 8009d54:	509d      	str	r5, [r3, r2]
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	0c00      	lsrs	r0, r0, #16
 8009d5c:	d020      	beq.n	8009da0 <__multiply+0x144>
 8009d5e:	4663      	mov	r3, ip
 8009d60:	0025      	movs	r5, r4
 8009d62:	4661      	mov	r1, ip
 8009d64:	2700      	movs	r7, #0
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3514      	adds	r5, #20
 8009d6a:	682a      	ldr	r2, [r5, #0]
 8009d6c:	680e      	ldr	r6, [r1, #0]
 8009d6e:	b292      	uxth	r2, r2
 8009d70:	4342      	muls	r2, r0
 8009d72:	0c36      	lsrs	r6, r6, #16
 8009d74:	1992      	adds	r2, r2, r6
 8009d76:	19d2      	adds	r2, r2, r7
 8009d78:	0416      	lsls	r6, r2, #16
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	431e      	orrs	r6, r3
 8009d7e:	600e      	str	r6, [r1, #0]
 8009d80:	cd40      	ldmia	r5!, {r6}
 8009d82:	684b      	ldr	r3, [r1, #4]
 8009d84:	0c36      	lsrs	r6, r6, #16
 8009d86:	4346      	muls	r6, r0
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	0c12      	lsrs	r2, r2, #16
 8009d8c:	18f3      	adds	r3, r6, r3
 8009d8e:	189b      	adds	r3, r3, r2
 8009d90:	9a05      	ldr	r2, [sp, #20]
 8009d92:	0c1f      	lsrs	r7, r3, #16
 8009d94:	3104      	adds	r1, #4
 8009d96:	42aa      	cmp	r2, r5
 8009d98:	d8e7      	bhi.n	8009d6a <__multiply+0x10e>
 8009d9a:	4662      	mov	r2, ip
 8009d9c:	9906      	ldr	r1, [sp, #24]
 8009d9e:	5053      	str	r3, [r2, r1]
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	3304      	adds	r3, #4
 8009da4:	9301      	str	r3, [sp, #4]
 8009da6:	2304      	movs	r3, #4
 8009da8:	449c      	add	ip, r3
 8009daa:	e79b      	b.n	8009ce4 <__multiply+0x88>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	9303      	str	r3, [sp, #12]
 8009db2:	e79b      	b.n	8009cec <__multiply+0x90>
 8009db4:	0800fde9 	.word	0x0800fde9
 8009db8:	0800fe5a 	.word	0x0800fe5a

08009dbc <__pow5mult>:
 8009dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	0015      	movs	r5, r2
 8009dc2:	0007      	movs	r7, r0
 8009dc4:	000e      	movs	r6, r1
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	421d      	tst	r5, r3
 8009dca:	d008      	beq.n	8009dde <__pow5mult+0x22>
 8009dcc:	491a      	ldr	r1, [pc, #104]	; (8009e38 <__pow5mult+0x7c>)
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	0092      	lsls	r2, r2, #2
 8009dd2:	5852      	ldr	r2, [r2, r1]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	0031      	movs	r1, r6
 8009dd8:	f7ff fe50 	bl	8009a7c <__multadd>
 8009ddc:	0006      	movs	r6, r0
 8009dde:	10ad      	asrs	r5, r5, #2
 8009de0:	d027      	beq.n	8009e32 <__pow5mult+0x76>
 8009de2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	d107      	bne.n	8009df8 <__pow5mult+0x3c>
 8009de8:	0038      	movs	r0, r7
 8009dea:	4914      	ldr	r1, [pc, #80]	; (8009e3c <__pow5mult+0x80>)
 8009dec:	f7ff ff1e 	bl	8009c2c <__i2b>
 8009df0:	2300      	movs	r3, #0
 8009df2:	0004      	movs	r4, r0
 8009df4:	6438      	str	r0, [r7, #64]	; 0x40
 8009df6:	6003      	str	r3, [r0, #0]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	421d      	tst	r5, r3
 8009dfc:	d00a      	beq.n	8009e14 <__pow5mult+0x58>
 8009dfe:	0031      	movs	r1, r6
 8009e00:	0022      	movs	r2, r4
 8009e02:	0038      	movs	r0, r7
 8009e04:	f7ff ff2a 	bl	8009c5c <__multiply>
 8009e08:	0031      	movs	r1, r6
 8009e0a:	9001      	str	r0, [sp, #4]
 8009e0c:	0038      	movs	r0, r7
 8009e0e:	f7ff fe2b 	bl	8009a68 <_Bfree>
 8009e12:	9e01      	ldr	r6, [sp, #4]
 8009e14:	106d      	asrs	r5, r5, #1
 8009e16:	d00c      	beq.n	8009e32 <__pow5mult+0x76>
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d107      	bne.n	8009e2e <__pow5mult+0x72>
 8009e1e:	0022      	movs	r2, r4
 8009e20:	0021      	movs	r1, r4
 8009e22:	0038      	movs	r0, r7
 8009e24:	f7ff ff1a 	bl	8009c5c <__multiply>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	6020      	str	r0, [r4, #0]
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	0004      	movs	r4, r0
 8009e30:	e7e2      	b.n	8009df8 <__pow5mult+0x3c>
 8009e32:	0030      	movs	r0, r6
 8009e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	0800ffa8 	.word	0x0800ffa8
 8009e3c:	00000271 	.word	0x00000271

08009e40 <__lshift>:
 8009e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e42:	000c      	movs	r4, r1
 8009e44:	0017      	movs	r7, r2
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	1155      	asrs	r5, r2, #5
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	18eb      	adds	r3, r5, r3
 8009e4e:	9302      	str	r3, [sp, #8]
 8009e50:	3301      	adds	r3, #1
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	6849      	ldr	r1, [r1, #4]
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	9004      	str	r0, [sp, #16]
 8009e5a:	9a01      	ldr	r2, [sp, #4]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	db10      	blt.n	8009e82 <__lshift+0x42>
 8009e60:	9804      	ldr	r0, [sp, #16]
 8009e62:	f7ff fdd9 	bl	8009a18 <_Balloc>
 8009e66:	2300      	movs	r3, #0
 8009e68:	0002      	movs	r2, r0
 8009e6a:	0006      	movs	r6, r0
 8009e6c:	0019      	movs	r1, r3
 8009e6e:	3214      	adds	r2, #20
 8009e70:	4298      	cmp	r0, r3
 8009e72:	d10c      	bne.n	8009e8e <__lshift+0x4e>
 8009e74:	31df      	adds	r1, #223	; 0xdf
 8009e76:	0032      	movs	r2, r6
 8009e78:	4b26      	ldr	r3, [pc, #152]	; (8009f14 <__lshift+0xd4>)
 8009e7a:	4827      	ldr	r0, [pc, #156]	; (8009f18 <__lshift+0xd8>)
 8009e7c:	31ff      	adds	r1, #255	; 0xff
 8009e7e:	f003 f88f 	bl	800cfa0 <__assert_func>
 8009e82:	3101      	adds	r1, #1
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	e7e8      	b.n	8009e5a <__lshift+0x1a>
 8009e88:	0098      	lsls	r0, r3, #2
 8009e8a:	5011      	str	r1, [r2, r0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	42ab      	cmp	r3, r5
 8009e90:	dbfa      	blt.n	8009e88 <__lshift+0x48>
 8009e92:	43eb      	mvns	r3, r5
 8009e94:	17db      	asrs	r3, r3, #31
 8009e96:	401d      	ands	r5, r3
 8009e98:	211f      	movs	r1, #31
 8009e9a:	0023      	movs	r3, r4
 8009e9c:	0038      	movs	r0, r7
 8009e9e:	00ad      	lsls	r5, r5, #2
 8009ea0:	1955      	adds	r5, r2, r5
 8009ea2:	6922      	ldr	r2, [r4, #16]
 8009ea4:	3314      	adds	r3, #20
 8009ea6:	0092      	lsls	r2, r2, #2
 8009ea8:	4008      	ands	r0, r1
 8009eaa:	4684      	mov	ip, r0
 8009eac:	189a      	adds	r2, r3, r2
 8009eae:	420f      	tst	r7, r1
 8009eb0:	d02a      	beq.n	8009f08 <__lshift+0xc8>
 8009eb2:	3101      	adds	r1, #1
 8009eb4:	1a09      	subs	r1, r1, r0
 8009eb6:	9105      	str	r1, [sp, #20]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	9503      	str	r5, [sp, #12]
 8009ebc:	4667      	mov	r7, ip
 8009ebe:	6818      	ldr	r0, [r3, #0]
 8009ec0:	40b8      	lsls	r0, r7
 8009ec2:	4308      	orrs	r0, r1
 8009ec4:	9903      	ldr	r1, [sp, #12]
 8009ec6:	c101      	stmia	r1!, {r0}
 8009ec8:	9103      	str	r1, [sp, #12]
 8009eca:	9805      	ldr	r0, [sp, #20]
 8009ecc:	cb02      	ldmia	r3!, {r1}
 8009ece:	40c1      	lsrs	r1, r0
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d8f3      	bhi.n	8009ebc <__lshift+0x7c>
 8009ed4:	0020      	movs	r0, r4
 8009ed6:	3015      	adds	r0, #21
 8009ed8:	2304      	movs	r3, #4
 8009eda:	4282      	cmp	r2, r0
 8009edc:	d304      	bcc.n	8009ee8 <__lshift+0xa8>
 8009ede:	1b13      	subs	r3, r2, r4
 8009ee0:	3b15      	subs	r3, #21
 8009ee2:	089b      	lsrs	r3, r3, #2
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	50e9      	str	r1, [r5, r3]
 8009eea:	2900      	cmp	r1, #0
 8009eec:	d002      	beq.n	8009ef4 <__lshift+0xb4>
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	9b01      	ldr	r3, [sp, #4]
 8009ef6:	9804      	ldr	r0, [sp, #16]
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	0021      	movs	r1, r4
 8009efc:	6133      	str	r3, [r6, #16]
 8009efe:	f7ff fdb3 	bl	8009a68 <_Bfree>
 8009f02:	0030      	movs	r0, r6
 8009f04:	b007      	add	sp, #28
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	cb02      	ldmia	r3!, {r1}
 8009f0a:	c502      	stmia	r5!, {r1}
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d8fb      	bhi.n	8009f08 <__lshift+0xc8>
 8009f10:	e7f0      	b.n	8009ef4 <__lshift+0xb4>
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	0800fde9 	.word	0x0800fde9
 8009f18:	0800fe5a 	.word	0x0800fe5a

08009f1c <__mcmp>:
 8009f1c:	b530      	push	{r4, r5, lr}
 8009f1e:	690b      	ldr	r3, [r1, #16]
 8009f20:	6904      	ldr	r4, [r0, #16]
 8009f22:	0002      	movs	r2, r0
 8009f24:	1ae0      	subs	r0, r4, r3
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d10e      	bne.n	8009f48 <__mcmp+0x2c>
 8009f2a:	3214      	adds	r2, #20
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	3114      	adds	r1, #20
 8009f30:	0014      	movs	r4, r2
 8009f32:	18c9      	adds	r1, r1, r3
 8009f34:	18d2      	adds	r2, r2, r3
 8009f36:	3a04      	subs	r2, #4
 8009f38:	3904      	subs	r1, #4
 8009f3a:	6815      	ldr	r5, [r2, #0]
 8009f3c:	680b      	ldr	r3, [r1, #0]
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	d003      	beq.n	8009f4a <__mcmp+0x2e>
 8009f42:	2001      	movs	r0, #1
 8009f44:	429d      	cmp	r5, r3
 8009f46:	d303      	bcc.n	8009f50 <__mcmp+0x34>
 8009f48:	bd30      	pop	{r4, r5, pc}
 8009f4a:	4294      	cmp	r4, r2
 8009f4c:	d3f3      	bcc.n	8009f36 <__mcmp+0x1a>
 8009f4e:	e7fb      	b.n	8009f48 <__mcmp+0x2c>
 8009f50:	4240      	negs	r0, r0
 8009f52:	e7f9      	b.n	8009f48 <__mcmp+0x2c>

08009f54 <__mdiff>:
 8009f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f56:	000e      	movs	r6, r1
 8009f58:	0007      	movs	r7, r0
 8009f5a:	0011      	movs	r1, r2
 8009f5c:	0030      	movs	r0, r6
 8009f5e:	b087      	sub	sp, #28
 8009f60:	0014      	movs	r4, r2
 8009f62:	f7ff ffdb 	bl	8009f1c <__mcmp>
 8009f66:	1e05      	subs	r5, r0, #0
 8009f68:	d110      	bne.n	8009f8c <__mdiff+0x38>
 8009f6a:	0001      	movs	r1, r0
 8009f6c:	0038      	movs	r0, r7
 8009f6e:	f7ff fd53 	bl	8009a18 <_Balloc>
 8009f72:	1e02      	subs	r2, r0, #0
 8009f74:	d104      	bne.n	8009f80 <__mdiff+0x2c>
 8009f76:	4b3f      	ldr	r3, [pc, #252]	; (800a074 <__mdiff+0x120>)
 8009f78:	483f      	ldr	r0, [pc, #252]	; (800a078 <__mdiff+0x124>)
 8009f7a:	4940      	ldr	r1, [pc, #256]	; (800a07c <__mdiff+0x128>)
 8009f7c:	f003 f810 	bl	800cfa0 <__assert_func>
 8009f80:	2301      	movs	r3, #1
 8009f82:	6145      	str	r5, [r0, #20]
 8009f84:	6103      	str	r3, [r0, #16]
 8009f86:	0010      	movs	r0, r2
 8009f88:	b007      	add	sp, #28
 8009f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	2800      	cmp	r0, #0
 8009f92:	db04      	blt.n	8009f9e <__mdiff+0x4a>
 8009f94:	0023      	movs	r3, r4
 8009f96:	0034      	movs	r4, r6
 8009f98:	001e      	movs	r6, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	0038      	movs	r0, r7
 8009fa0:	6861      	ldr	r1, [r4, #4]
 8009fa2:	f7ff fd39 	bl	8009a18 <_Balloc>
 8009fa6:	1e02      	subs	r2, r0, #0
 8009fa8:	d103      	bne.n	8009fb2 <__mdiff+0x5e>
 8009faa:	4b32      	ldr	r3, [pc, #200]	; (800a074 <__mdiff+0x120>)
 8009fac:	4832      	ldr	r0, [pc, #200]	; (800a078 <__mdiff+0x124>)
 8009fae:	4934      	ldr	r1, [pc, #208]	; (800a080 <__mdiff+0x12c>)
 8009fb0:	e7e4      	b.n	8009f7c <__mdiff+0x28>
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	2700      	movs	r7, #0
 8009fb6:	60c3      	str	r3, [r0, #12]
 8009fb8:	6920      	ldr	r0, [r4, #16]
 8009fba:	3414      	adds	r4, #20
 8009fbc:	0083      	lsls	r3, r0, #2
 8009fbe:	18e3      	adds	r3, r4, r3
 8009fc0:	0021      	movs	r1, r4
 8009fc2:	9401      	str	r4, [sp, #4]
 8009fc4:	0034      	movs	r4, r6
 8009fc6:	9302      	str	r3, [sp, #8]
 8009fc8:	6933      	ldr	r3, [r6, #16]
 8009fca:	3414      	adds	r4, #20
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	18e3      	adds	r3, r4, r3
 8009fd0:	9303      	str	r3, [sp, #12]
 8009fd2:	0013      	movs	r3, r2
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	469c      	mov	ip, r3
 8009fd8:	9305      	str	r3, [sp, #20]
 8009fda:	9104      	str	r1, [sp, #16]
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	cc02      	ldmia	r4!, {r1}
 8009fe0:	cb20      	ldmia	r3!, {r5}
 8009fe2:	9304      	str	r3, [sp, #16]
 8009fe4:	b2ab      	uxth	r3, r5
 8009fe6:	19df      	adds	r7, r3, r7
 8009fe8:	b28b      	uxth	r3, r1
 8009fea:	1afb      	subs	r3, r7, r3
 8009fec:	0c09      	lsrs	r1, r1, #16
 8009fee:	0c2d      	lsrs	r5, r5, #16
 8009ff0:	1a6d      	subs	r5, r5, r1
 8009ff2:	1419      	asrs	r1, r3, #16
 8009ff4:	1869      	adds	r1, r5, r1
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	140f      	asrs	r7, r1, #16
 8009ffa:	0409      	lsls	r1, r1, #16
 8009ffc:	4319      	orrs	r1, r3
 8009ffe:	4663      	mov	r3, ip
 800a000:	c302      	stmia	r3!, {r1}
 800a002:	469c      	mov	ip, r3
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	42a3      	cmp	r3, r4
 800a008:	d8e8      	bhi.n	8009fdc <__mdiff+0x88>
 800a00a:	0031      	movs	r1, r6
 800a00c:	9c03      	ldr	r4, [sp, #12]
 800a00e:	3115      	adds	r1, #21
 800a010:	2304      	movs	r3, #4
 800a012:	428c      	cmp	r4, r1
 800a014:	d304      	bcc.n	800a020 <__mdiff+0xcc>
 800a016:	1ba3      	subs	r3, r4, r6
 800a018:	3b15      	subs	r3, #21
 800a01a:	089b      	lsrs	r3, r3, #2
 800a01c:	3301      	adds	r3, #1
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	9901      	ldr	r1, [sp, #4]
 800a022:	18cd      	adds	r5, r1, r3
 800a024:	9905      	ldr	r1, [sp, #20]
 800a026:	002e      	movs	r6, r5
 800a028:	18cb      	adds	r3, r1, r3
 800a02a:	469c      	mov	ip, r3
 800a02c:	9902      	ldr	r1, [sp, #8]
 800a02e:	428e      	cmp	r6, r1
 800a030:	d310      	bcc.n	800a054 <__mdiff+0x100>
 800a032:	9e02      	ldr	r6, [sp, #8]
 800a034:	1ee9      	subs	r1, r5, #3
 800a036:	2400      	movs	r4, #0
 800a038:	428e      	cmp	r6, r1
 800a03a:	d304      	bcc.n	800a046 <__mdiff+0xf2>
 800a03c:	0031      	movs	r1, r6
 800a03e:	3103      	adds	r1, #3
 800a040:	1b49      	subs	r1, r1, r5
 800a042:	0889      	lsrs	r1, r1, #2
 800a044:	008c      	lsls	r4, r1, #2
 800a046:	191b      	adds	r3, r3, r4
 800a048:	3b04      	subs	r3, #4
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d00f      	beq.n	800a070 <__mdiff+0x11c>
 800a050:	6110      	str	r0, [r2, #16]
 800a052:	e798      	b.n	8009f86 <__mdiff+0x32>
 800a054:	ce02      	ldmia	r6!, {r1}
 800a056:	b28c      	uxth	r4, r1
 800a058:	19e4      	adds	r4, r4, r7
 800a05a:	0c0f      	lsrs	r7, r1, #16
 800a05c:	1421      	asrs	r1, r4, #16
 800a05e:	1879      	adds	r1, r7, r1
 800a060:	b2a4      	uxth	r4, r4
 800a062:	140f      	asrs	r7, r1, #16
 800a064:	0409      	lsls	r1, r1, #16
 800a066:	4321      	orrs	r1, r4
 800a068:	4664      	mov	r4, ip
 800a06a:	c402      	stmia	r4!, {r1}
 800a06c:	46a4      	mov	ip, r4
 800a06e:	e7dd      	b.n	800a02c <__mdiff+0xd8>
 800a070:	3801      	subs	r0, #1
 800a072:	e7e9      	b.n	800a048 <__mdiff+0xf4>
 800a074:	0800fde9 	.word	0x0800fde9
 800a078:	0800fe5a 	.word	0x0800fe5a
 800a07c:	00000237 	.word	0x00000237
 800a080:	00000245 	.word	0x00000245

0800a084 <__ulp>:
 800a084:	2000      	movs	r0, #0
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <__ulp+0x30>)
 800a088:	4019      	ands	r1, r3
 800a08a:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <__ulp+0x34>)
 800a08c:	18c9      	adds	r1, r1, r3
 800a08e:	4281      	cmp	r1, r0
 800a090:	dc06      	bgt.n	800a0a0 <__ulp+0x1c>
 800a092:	4249      	negs	r1, r1
 800a094:	150b      	asrs	r3, r1, #20
 800a096:	2b13      	cmp	r3, #19
 800a098:	dc03      	bgt.n	800a0a2 <__ulp+0x1e>
 800a09a:	2180      	movs	r1, #128	; 0x80
 800a09c:	0309      	lsls	r1, r1, #12
 800a09e:	4119      	asrs	r1, r3
 800a0a0:	4770      	bx	lr
 800a0a2:	3b14      	subs	r3, #20
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	2b1e      	cmp	r3, #30
 800a0a8:	dc02      	bgt.n	800a0b0 <__ulp+0x2c>
 800a0aa:	2080      	movs	r0, #128	; 0x80
 800a0ac:	0600      	lsls	r0, r0, #24
 800a0ae:	40d8      	lsrs	r0, r3
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	e7f5      	b.n	800a0a0 <__ulp+0x1c>
 800a0b4:	7ff00000 	.word	0x7ff00000
 800a0b8:	fcc00000 	.word	0xfcc00000

0800a0bc <__b2d>:
 800a0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0be:	0006      	movs	r6, r0
 800a0c0:	6903      	ldr	r3, [r0, #16]
 800a0c2:	3614      	adds	r6, #20
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	18f3      	adds	r3, r6, r3
 800a0c8:	1f1d      	subs	r5, r3, #4
 800a0ca:	682c      	ldr	r4, [r5, #0]
 800a0cc:	000f      	movs	r7, r1
 800a0ce:	0020      	movs	r0, r4
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f7ff fd63 	bl	8009b9c <__hi0bits>
 800a0d6:	2220      	movs	r2, #32
 800a0d8:	1a12      	subs	r2, r2, r0
 800a0da:	603a      	str	r2, [r7, #0]
 800a0dc:	0003      	movs	r3, r0
 800a0de:	4a1c      	ldr	r2, [pc, #112]	; (800a150 <__b2d+0x94>)
 800a0e0:	280a      	cmp	r0, #10
 800a0e2:	dc15      	bgt.n	800a110 <__b2d+0x54>
 800a0e4:	210b      	movs	r1, #11
 800a0e6:	0027      	movs	r7, r4
 800a0e8:	1a09      	subs	r1, r1, r0
 800a0ea:	40cf      	lsrs	r7, r1
 800a0ec:	433a      	orrs	r2, r7
 800a0ee:	468c      	mov	ip, r1
 800a0f0:	0011      	movs	r1, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	42ae      	cmp	r6, r5
 800a0f6:	d202      	bcs.n	800a0fe <__b2d+0x42>
 800a0f8:	9a01      	ldr	r2, [sp, #4]
 800a0fa:	3a08      	subs	r2, #8
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	3315      	adds	r3, #21
 800a100:	409c      	lsls	r4, r3
 800a102:	4663      	mov	r3, ip
 800a104:	0027      	movs	r7, r4
 800a106:	40da      	lsrs	r2, r3
 800a108:	4317      	orrs	r7, r2
 800a10a:	0038      	movs	r0, r7
 800a10c:	b003      	add	sp, #12
 800a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a110:	2700      	movs	r7, #0
 800a112:	42ae      	cmp	r6, r5
 800a114:	d202      	bcs.n	800a11c <__b2d+0x60>
 800a116:	9d01      	ldr	r5, [sp, #4]
 800a118:	3d08      	subs	r5, #8
 800a11a:	682f      	ldr	r7, [r5, #0]
 800a11c:	210b      	movs	r1, #11
 800a11e:	4249      	negs	r1, r1
 800a120:	468c      	mov	ip, r1
 800a122:	449c      	add	ip, r3
 800a124:	2b0b      	cmp	r3, #11
 800a126:	d010      	beq.n	800a14a <__b2d+0x8e>
 800a128:	4661      	mov	r1, ip
 800a12a:	2320      	movs	r3, #32
 800a12c:	408c      	lsls	r4, r1
 800a12e:	1a5b      	subs	r3, r3, r1
 800a130:	0039      	movs	r1, r7
 800a132:	40d9      	lsrs	r1, r3
 800a134:	430c      	orrs	r4, r1
 800a136:	4322      	orrs	r2, r4
 800a138:	0011      	movs	r1, r2
 800a13a:	2200      	movs	r2, #0
 800a13c:	42b5      	cmp	r5, r6
 800a13e:	d901      	bls.n	800a144 <__b2d+0x88>
 800a140:	3d04      	subs	r5, #4
 800a142:	682a      	ldr	r2, [r5, #0]
 800a144:	4664      	mov	r4, ip
 800a146:	40a7      	lsls	r7, r4
 800a148:	e7dd      	b.n	800a106 <__b2d+0x4a>
 800a14a:	4322      	orrs	r2, r4
 800a14c:	0011      	movs	r1, r2
 800a14e:	e7dc      	b.n	800a10a <__b2d+0x4e>
 800a150:	3ff00000 	.word	0x3ff00000

0800a154 <__d2b>:
 800a154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a156:	2101      	movs	r1, #1
 800a158:	0014      	movs	r4, r2
 800a15a:	001d      	movs	r5, r3
 800a15c:	9f08      	ldr	r7, [sp, #32]
 800a15e:	f7ff fc5b 	bl	8009a18 <_Balloc>
 800a162:	1e06      	subs	r6, r0, #0
 800a164:	d105      	bne.n	800a172 <__d2b+0x1e>
 800a166:	0032      	movs	r2, r6
 800a168:	4b24      	ldr	r3, [pc, #144]	; (800a1fc <__d2b+0xa8>)
 800a16a:	4825      	ldr	r0, [pc, #148]	; (800a200 <__d2b+0xac>)
 800a16c:	4925      	ldr	r1, [pc, #148]	; (800a204 <__d2b+0xb0>)
 800a16e:	f002 ff17 	bl	800cfa0 <__assert_func>
 800a172:	032b      	lsls	r3, r5, #12
 800a174:	006d      	lsls	r5, r5, #1
 800a176:	0b1b      	lsrs	r3, r3, #12
 800a178:	0d6d      	lsrs	r5, r5, #21
 800a17a:	d125      	bne.n	800a1c8 <__d2b+0x74>
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	2c00      	cmp	r4, #0
 800a180:	d028      	beq.n	800a1d4 <__d2b+0x80>
 800a182:	4668      	mov	r0, sp
 800a184:	9400      	str	r4, [sp, #0]
 800a186:	f7ff fd23 	bl	8009bd0 <__lo0bits>
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	2800      	cmp	r0, #0
 800a190:	d01e      	beq.n	800a1d0 <__d2b+0x7c>
 800a192:	2220      	movs	r2, #32
 800a194:	001c      	movs	r4, r3
 800a196:	1a12      	subs	r2, r2, r0
 800a198:	4094      	lsls	r4, r2
 800a19a:	0022      	movs	r2, r4
 800a19c:	40c3      	lsrs	r3, r0
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	6172      	str	r2, [r6, #20]
 800a1a2:	9301      	str	r3, [sp, #4]
 800a1a4:	9c01      	ldr	r4, [sp, #4]
 800a1a6:	61b4      	str	r4, [r6, #24]
 800a1a8:	1e63      	subs	r3, r4, #1
 800a1aa:	419c      	sbcs	r4, r3
 800a1ac:	3401      	adds	r4, #1
 800a1ae:	6134      	str	r4, [r6, #16]
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	d017      	beq.n	800a1e4 <__d2b+0x90>
 800a1b4:	2435      	movs	r4, #53	; 0x35
 800a1b6:	4b14      	ldr	r3, [pc, #80]	; (800a208 <__d2b+0xb4>)
 800a1b8:	18ed      	adds	r5, r5, r3
 800a1ba:	182d      	adds	r5, r5, r0
 800a1bc:	603d      	str	r5, [r7, #0]
 800a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c0:	1a24      	subs	r4, r4, r0
 800a1c2:	601c      	str	r4, [r3, #0]
 800a1c4:	0030      	movs	r0, r6
 800a1c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a1c8:	2280      	movs	r2, #128	; 0x80
 800a1ca:	0352      	lsls	r2, r2, #13
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	e7d5      	b.n	800a17c <__d2b+0x28>
 800a1d0:	6171      	str	r1, [r6, #20]
 800a1d2:	e7e7      	b.n	800a1a4 <__d2b+0x50>
 800a1d4:	a801      	add	r0, sp, #4
 800a1d6:	f7ff fcfb 	bl	8009bd0 <__lo0bits>
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	2401      	movs	r4, #1
 800a1de:	6173      	str	r3, [r6, #20]
 800a1e0:	3020      	adds	r0, #32
 800a1e2:	e7e4      	b.n	800a1ae <__d2b+0x5a>
 800a1e4:	4b09      	ldr	r3, [pc, #36]	; (800a20c <__d2b+0xb8>)
 800a1e6:	18c0      	adds	r0, r0, r3
 800a1e8:	4b09      	ldr	r3, [pc, #36]	; (800a210 <__d2b+0xbc>)
 800a1ea:	6038      	str	r0, [r7, #0]
 800a1ec:	18e3      	adds	r3, r4, r3
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	18f3      	adds	r3, r6, r3
 800a1f2:	6958      	ldr	r0, [r3, #20]
 800a1f4:	f7ff fcd2 	bl	8009b9c <__hi0bits>
 800a1f8:	0164      	lsls	r4, r4, #5
 800a1fa:	e7e0      	b.n	800a1be <__d2b+0x6a>
 800a1fc:	0800fde9 	.word	0x0800fde9
 800a200:	0800fe5a 	.word	0x0800fe5a
 800a204:	0000030f 	.word	0x0000030f
 800a208:	fffffbcd 	.word	0xfffffbcd
 800a20c:	fffffbce 	.word	0xfffffbce
 800a210:	3fffffff 	.word	0x3fffffff

0800a214 <__ratio>:
 800a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	000f      	movs	r7, r1
 800a21a:	a904      	add	r1, sp, #16
 800a21c:	0006      	movs	r6, r0
 800a21e:	f7ff ff4d 	bl	800a0bc <__b2d>
 800a222:	9000      	str	r0, [sp, #0]
 800a224:	9101      	str	r1, [sp, #4]
 800a226:	9c00      	ldr	r4, [sp, #0]
 800a228:	9d01      	ldr	r5, [sp, #4]
 800a22a:	0038      	movs	r0, r7
 800a22c:	a905      	add	r1, sp, #20
 800a22e:	f7ff ff45 	bl	800a0bc <__b2d>
 800a232:	9002      	str	r0, [sp, #8]
 800a234:	9103      	str	r1, [sp, #12]
 800a236:	9a02      	ldr	r2, [sp, #8]
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	6930      	ldr	r0, [r6, #16]
 800a23c:	6939      	ldr	r1, [r7, #16]
 800a23e:	9e04      	ldr	r6, [sp, #16]
 800a240:	1a40      	subs	r0, r0, r1
 800a242:	9905      	ldr	r1, [sp, #20]
 800a244:	0140      	lsls	r0, r0, #5
 800a246:	1a71      	subs	r1, r6, r1
 800a248:	1841      	adds	r1, r0, r1
 800a24a:	0508      	lsls	r0, r1, #20
 800a24c:	2900      	cmp	r1, #0
 800a24e:	dd07      	ble.n	800a260 <__ratio+0x4c>
 800a250:	9901      	ldr	r1, [sp, #4]
 800a252:	1845      	adds	r5, r0, r1
 800a254:	0020      	movs	r0, r4
 800a256:	0029      	movs	r1, r5
 800a258:	f7f6 fe0e 	bl	8000e78 <__aeabi_ddiv>
 800a25c:	b007      	add	sp, #28
 800a25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a260:	9903      	ldr	r1, [sp, #12]
 800a262:	1a0b      	subs	r3, r1, r0
 800a264:	e7f6      	b.n	800a254 <__ratio+0x40>

0800a266 <__copybits>:
 800a266:	b570      	push	{r4, r5, r6, lr}
 800a268:	0014      	movs	r4, r2
 800a26a:	0005      	movs	r5, r0
 800a26c:	3901      	subs	r1, #1
 800a26e:	6913      	ldr	r3, [r2, #16]
 800a270:	1149      	asrs	r1, r1, #5
 800a272:	3101      	adds	r1, #1
 800a274:	0089      	lsls	r1, r1, #2
 800a276:	3414      	adds	r4, #20
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	1841      	adds	r1, r0, r1
 800a27c:	18e3      	adds	r3, r4, r3
 800a27e:	42a3      	cmp	r3, r4
 800a280:	d80d      	bhi.n	800a29e <__copybits+0x38>
 800a282:	0014      	movs	r4, r2
 800a284:	3411      	adds	r4, #17
 800a286:	2500      	movs	r5, #0
 800a288:	429c      	cmp	r4, r3
 800a28a:	d803      	bhi.n	800a294 <__copybits+0x2e>
 800a28c:	1a9b      	subs	r3, r3, r2
 800a28e:	3b11      	subs	r3, #17
 800a290:	089b      	lsrs	r3, r3, #2
 800a292:	009d      	lsls	r5, r3, #2
 800a294:	2300      	movs	r3, #0
 800a296:	1940      	adds	r0, r0, r5
 800a298:	4281      	cmp	r1, r0
 800a29a:	d803      	bhi.n	800a2a4 <__copybits+0x3e>
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	cc40      	ldmia	r4!, {r6}
 800a2a0:	c540      	stmia	r5!, {r6}
 800a2a2:	e7ec      	b.n	800a27e <__copybits+0x18>
 800a2a4:	c008      	stmia	r0!, {r3}
 800a2a6:	e7f7      	b.n	800a298 <__copybits+0x32>

0800a2a8 <__any_on>:
 800a2a8:	0002      	movs	r2, r0
 800a2aa:	6900      	ldr	r0, [r0, #16]
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	3214      	adds	r2, #20
 800a2b0:	114b      	asrs	r3, r1, #5
 800a2b2:	4298      	cmp	r0, r3
 800a2b4:	db13      	blt.n	800a2de <__any_on+0x36>
 800a2b6:	dd0c      	ble.n	800a2d2 <__any_on+0x2a>
 800a2b8:	241f      	movs	r4, #31
 800a2ba:	0008      	movs	r0, r1
 800a2bc:	4020      	ands	r0, r4
 800a2be:	4221      	tst	r1, r4
 800a2c0:	d007      	beq.n	800a2d2 <__any_on+0x2a>
 800a2c2:	0099      	lsls	r1, r3, #2
 800a2c4:	588c      	ldr	r4, [r1, r2]
 800a2c6:	0021      	movs	r1, r4
 800a2c8:	40c1      	lsrs	r1, r0
 800a2ca:	4081      	lsls	r1, r0
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	428c      	cmp	r4, r1
 800a2d0:	d104      	bne.n	800a2dc <__any_on+0x34>
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	18d3      	adds	r3, r2, r3
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d803      	bhi.n	800a2e2 <__any_on+0x3a>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	0003      	movs	r3, r0
 800a2e0:	e7f7      	b.n	800a2d2 <__any_on+0x2a>
 800a2e2:	3b04      	subs	r3, #4
 800a2e4:	6819      	ldr	r1, [r3, #0]
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	d0f5      	beq.n	800a2d6 <__any_on+0x2e>
 800a2ea:	2001      	movs	r0, #1
 800a2ec:	e7f6      	b.n	800a2dc <__any_on+0x34>

0800a2ee <__ascii_wctomb>:
 800a2ee:	0003      	movs	r3, r0
 800a2f0:	1e08      	subs	r0, r1, #0
 800a2f2:	d005      	beq.n	800a300 <__ascii_wctomb+0x12>
 800a2f4:	2aff      	cmp	r2, #255	; 0xff
 800a2f6:	d904      	bls.n	800a302 <__ascii_wctomb+0x14>
 800a2f8:	228a      	movs	r2, #138	; 0x8a
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	4240      	negs	r0, r0
 800a300:	4770      	bx	lr
 800a302:	2001      	movs	r0, #1
 800a304:	700a      	strb	r2, [r1, #0]
 800a306:	e7fb      	b.n	800a300 <__ascii_wctomb+0x12>

0800a308 <_svfprintf_r>:
 800a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30a:	b0d9      	sub	sp, #356	; 0x164
 800a30c:	001c      	movs	r4, r3
 800a30e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a310:	9208      	str	r2, [sp, #32]
 800a312:	900a      	str	r0, [sp, #40]	; 0x28
 800a314:	f002 fdae 	bl	800ce74 <_localeconv_r>
 800a318:	6803      	ldr	r3, [r0, #0]
 800a31a:	0018      	movs	r0, r3
 800a31c:	931c      	str	r3, [sp, #112]	; 0x70
 800a31e:	f7f5 fef1 	bl	8000104 <strlen>
 800a322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a324:	9016      	str	r0, [sp, #88]	; 0x58
 800a326:	899b      	ldrh	r3, [r3, #12]
 800a328:	061b      	lsls	r3, r3, #24
 800a32a:	d517      	bpl.n	800a35c <_svfprintf_r+0x54>
 800a32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d113      	bne.n	800a35c <_svfprintf_r+0x54>
 800a334:	2140      	movs	r1, #64	; 0x40
 800a336:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a338:	f7fd fbb0 	bl	8007a9c <_malloc_r>
 800a33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a33e:	6018      	str	r0, [r3, #0]
 800a340:	6118      	str	r0, [r3, #16]
 800a342:	2800      	cmp	r0, #0
 800a344:	d107      	bne.n	800a356 <_svfprintf_r+0x4e>
 800a346:	230c      	movs	r3, #12
 800a348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	3b0d      	subs	r3, #13
 800a34e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a350:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a352:	b059      	add	sp, #356	; 0x164
 800a354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a35a:	6153      	str	r3, [r2, #20]
 800a35c:	2300      	movs	r3, #0
 800a35e:	2200      	movs	r2, #0
 800a360:	932e      	str	r3, [sp, #184]	; 0xb8
 800a362:	932d      	str	r3, [sp, #180]	; 0xb4
 800a364:	930e      	str	r3, [sp, #56]	; 0x38
 800a366:	2300      	movs	r3, #0
 800a368:	9214      	str	r2, [sp, #80]	; 0x50
 800a36a:	9315      	str	r3, [sp, #84]	; 0x54
 800a36c:	2300      	movs	r3, #0
 800a36e:	af2f      	add	r7, sp, #188	; 0xbc
 800a370:	972c      	str	r7, [sp, #176]	; 0xb0
 800a372:	931f      	str	r3, [sp, #124]	; 0x7c
 800a374:	931e      	str	r3, [sp, #120]	; 0x78
 800a376:	9312      	str	r3, [sp, #72]	; 0x48
 800a378:	931b      	str	r3, [sp, #108]	; 0x6c
 800a37a:	931d      	str	r3, [sp, #116]	; 0x74
 800a37c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a37e:	9d08      	ldr	r5, [sp, #32]
 800a380:	782b      	ldrb	r3, [r5, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <_svfprintf_r+0x84>
 800a386:	2b25      	cmp	r3, #37	; 0x25
 800a388:	d000      	beq.n	800a38c <_svfprintf_r+0x84>
 800a38a:	e091      	b.n	800a4b0 <_svfprintf_r+0x1a8>
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	1aee      	subs	r6, r5, r3
 800a390:	429d      	cmp	r5, r3
 800a392:	d016      	beq.n	800a3c2 <_svfprintf_r+0xba>
 800a394:	603b      	str	r3, [r7, #0]
 800a396:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a398:	607e      	str	r6, [r7, #4]
 800a39a:	199b      	adds	r3, r3, r6
 800a39c:	932e      	str	r3, [sp, #184]	; 0xb8
 800a39e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800a3a6:	2b07      	cmp	r3, #7
 800a3a8:	dd08      	ble.n	800a3bc <_svfprintf_r+0xb4>
 800a3aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a3ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800a3b0:	f004 f8c0 	bl	800e534 <__ssprint_r>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d000      	beq.n	800a3ba <_svfprintf_r+0xb2>
 800a3b8:	e1cf      	b.n	800a75a <_svfprintf_r+0x452>
 800a3ba:	af2f      	add	r7, sp, #188	; 0xbc
 800a3bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3be:	199b      	adds	r3, r3, r6
 800a3c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a3c2:	782b      	ldrb	r3, [r5, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <_svfprintf_r+0xc4>
 800a3c8:	f001 f99e 	bl	800b708 <_svfprintf_r+0x1400>
 800a3cc:	221b      	movs	r2, #27
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	a91e      	add	r1, sp, #120	; 0x78
 800a3d2:	1852      	adds	r2, r2, r1
 800a3d4:	7013      	strb	r3, [r2, #0]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	001e      	movs	r6, r3
 800a3da:	4252      	negs	r2, r2
 800a3dc:	3501      	adds	r5, #1
 800a3de:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e0:	9318      	str	r3, [sp, #96]	; 0x60
 800a3e2:	1c6b      	adds	r3, r5, #1
 800a3e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3e6:	782b      	ldrb	r3, [r5, #0]
 800a3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a3ec:	3820      	subs	r0, #32
 800a3ee:	285a      	cmp	r0, #90	; 0x5a
 800a3f0:	d901      	bls.n	800a3f6 <_svfprintf_r+0xee>
 800a3f2:	f000 fe20 	bl	800b036 <_svfprintf_r+0xd2e>
 800a3f6:	f7f5 fe97 	bl	8000128 <__gnu_thumb1_case_uhi>
 800a3fa:	0078      	.short	0x0078
 800a3fc:	061e061e 	.word	0x061e061e
 800a400:	061e0082 	.word	0x061e0082
 800a404:	061e061e 	.word	0x061e061e
 800a408:	061e005d 	.word	0x061e005d
 800a40c:	0084061e 	.word	0x0084061e
 800a410:	061e008c 	.word	0x061e008c
 800a414:	0091008a 	.word	0x0091008a
 800a418:	00b2061e 	.word	0x00b2061e
 800a41c:	00b400b4 	.word	0x00b400b4
 800a420:	00b400b4 	.word	0x00b400b4
 800a424:	00b400b4 	.word	0x00b400b4
 800a428:	00b400b4 	.word	0x00b400b4
 800a42c:	061e00b4 	.word	0x061e00b4
 800a430:	061e061e 	.word	0x061e061e
 800a434:	061e061e 	.word	0x061e061e
 800a438:	061e061e 	.word	0x061e061e
 800a43c:	061e013b 	.word	0x061e013b
 800a440:	00f400e0 	.word	0x00f400e0
 800a444:	013b013b 	.word	0x013b013b
 800a448:	061e013b 	.word	0x061e013b
 800a44c:	061e061e 	.word	0x061e061e
 800a450:	00c7061e 	.word	0x00c7061e
 800a454:	061e061e 	.word	0x061e061e
 800a458:	061e04c7 	.word	0x061e04c7
 800a45c:	061e061e 	.word	0x061e061e
 800a460:	061e050a 	.word	0x061e050a
 800a464:	061e052a 	.word	0x061e052a
 800a468:	055c061e 	.word	0x055c061e
 800a46c:	061e061e 	.word	0x061e061e
 800a470:	061e061e 	.word	0x061e061e
 800a474:	061e061e 	.word	0x061e061e
 800a478:	061e061e 	.word	0x061e061e
 800a47c:	061e013b 	.word	0x061e013b
 800a480:	00f600e0 	.word	0x00f600e0
 800a484:	013b013b 	.word	0x013b013b
 800a488:	00c9013b 	.word	0x00c9013b
 800a48c:	00dc00f6 	.word	0x00dc00f6
 800a490:	00d5061e 	.word	0x00d5061e
 800a494:	04a7061e 	.word	0x04a7061e
 800a498:	04fa04c9 	.word	0x04fa04c9
 800a49c:	061e00dc 	.word	0x061e00dc
 800a4a0:	0080050a 	.word	0x0080050a
 800a4a4:	061e052c 	.word	0x061e052c
 800a4a8:	057c061e 	.word	0x057c061e
 800a4ac:	0080061e 	.word	0x0080061e
 800a4b0:	3501      	adds	r5, #1
 800a4b2:	e765      	b.n	800a380 <_svfprintf_r+0x78>
 800a4b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4b6:	f002 fcdd 	bl	800ce74 <_localeconv_r>
 800a4ba:	6843      	ldr	r3, [r0, #4]
 800a4bc:	0018      	movs	r0, r3
 800a4be:	931d      	str	r3, [sp, #116]	; 0x74
 800a4c0:	f7f5 fe20 	bl	8000104 <strlen>
 800a4c4:	901b      	str	r0, [sp, #108]	; 0x6c
 800a4c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a4c8:	f002 fcd4 	bl	800ce74 <_localeconv_r>
 800a4cc:	6883      	ldr	r3, [r0, #8]
 800a4ce:	9312      	str	r3, [sp, #72]	; 0x48
 800a4d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d011      	beq.n	800a4fa <_svfprintf_r+0x1f2>
 800a4d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00e      	beq.n	800a4fa <_svfprintf_r+0x1f2>
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00b      	beq.n	800a4fa <_svfprintf_r+0x1f2>
 800a4e2:	2380      	movs	r3, #128	; 0x80
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	431e      	orrs	r6, r3
 800a4e8:	e007      	b.n	800a4fa <_svfprintf_r+0x1f2>
 800a4ea:	231b      	movs	r3, #27
 800a4ec:	aa1e      	add	r2, sp, #120	; 0x78
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	781a      	ldrb	r2, [r3, #0]
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	d101      	bne.n	800a4fa <_svfprintf_r+0x1f2>
 800a4f6:	3220      	adds	r2, #32
 800a4f8:	701a      	strb	r2, [r3, #0]
 800a4fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800a4fc:	e771      	b.n	800a3e2 <_svfprintf_r+0xda>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7f1      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a502:	cc08      	ldmia	r4!, {r3}
 800a504:	9318      	str	r3, [sp, #96]	; 0x60
 800a506:	2b00      	cmp	r3, #0
 800a508:	daf7      	bge.n	800a4fa <_svfprintf_r+0x1f2>
 800a50a:	425b      	negs	r3, r3
 800a50c:	9318      	str	r3, [sp, #96]	; 0x60
 800a50e:	2304      	movs	r3, #4
 800a510:	e7e9      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a512:	231b      	movs	r3, #27
 800a514:	aa1e      	add	r2, sp, #120	; 0x78
 800a516:	189b      	adds	r3, r3, r2
 800a518:	222b      	movs	r2, #43	; 0x2b
 800a51a:	e7ed      	b.n	800a4f8 <_svfprintf_r+0x1f0>
 800a51c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a51e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a520:	7812      	ldrb	r2, [r2, #0]
 800a522:	3301      	adds	r3, #1
 800a524:	920f      	str	r2, [sp, #60]	; 0x3c
 800a526:	2a2a      	cmp	r2, #42	; 0x2a
 800a528:	d010      	beq.n	800a54c <_svfprintf_r+0x244>
 800a52a:	2200      	movs	r2, #0
 800a52c:	9209      	str	r2, [sp, #36]	; 0x24
 800a52e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a530:	9313      	str	r3, [sp, #76]	; 0x4c
 800a532:	3a30      	subs	r2, #48	; 0x30
 800a534:	2a09      	cmp	r2, #9
 800a536:	d900      	bls.n	800a53a <_svfprintf_r+0x232>
 800a538:	e757      	b.n	800a3ea <_svfprintf_r+0xe2>
 800a53a:	200a      	movs	r0, #10
 800a53c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a53e:	4341      	muls	r1, r0
 800a540:	188a      	adds	r2, r1, r2
 800a542:	9209      	str	r2, [sp, #36]	; 0x24
 800a544:	781a      	ldrb	r2, [r3, #0]
 800a546:	3301      	adds	r3, #1
 800a548:	920f      	str	r2, [sp, #60]	; 0x3c
 800a54a:	e7f0      	b.n	800a52e <_svfprintf_r+0x226>
 800a54c:	cc04      	ldmia	r4!, {r2}
 800a54e:	9209      	str	r2, [sp, #36]	; 0x24
 800a550:	2a00      	cmp	r2, #0
 800a552:	da02      	bge.n	800a55a <_svfprintf_r+0x252>
 800a554:	2201      	movs	r2, #1
 800a556:	4252      	negs	r2, r2
 800a558:	9209      	str	r2, [sp, #36]	; 0x24
 800a55a:	9313      	str	r3, [sp, #76]	; 0x4c
 800a55c:	e7cd      	b.n	800a4fa <_svfprintf_r+0x1f2>
 800a55e:	2380      	movs	r3, #128	; 0x80
 800a560:	e7c1      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a562:	2200      	movs	r2, #0
 800a564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a566:	9218      	str	r2, [sp, #96]	; 0x60
 800a568:	210a      	movs	r1, #10
 800a56a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a56c:	434a      	muls	r2, r1
 800a56e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a570:	3930      	subs	r1, #48	; 0x30
 800a572:	188a      	adds	r2, r1, r2
 800a574:	9218      	str	r2, [sp, #96]	; 0x60
 800a576:	001a      	movs	r2, r3
 800a578:	7812      	ldrb	r2, [r2, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a57e:	3a30      	subs	r2, #48	; 0x30
 800a580:	9313      	str	r3, [sp, #76]	; 0x4c
 800a582:	2a09      	cmp	r2, #9
 800a584:	d9f0      	bls.n	800a568 <_svfprintf_r+0x260>
 800a586:	e730      	b.n	800a3ea <_svfprintf_r+0xe2>
 800a588:	2308      	movs	r3, #8
 800a58a:	e7ac      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a58c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	2b68      	cmp	r3, #104	; 0x68
 800a592:	d105      	bne.n	800a5a0 <_svfprintf_r+0x298>
 800a594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a596:	3301      	adds	r3, #1
 800a598:	9313      	str	r3, [sp, #76]	; 0x4c
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	e7a2      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	e7a0      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a5a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b6c      	cmp	r3, #108	; 0x6c
 800a5aa:	d104      	bne.n	800a5b6 <_svfprintf_r+0x2ae>
 800a5ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a5b2:	2320      	movs	r3, #32
 800a5b4:	e797      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a5b6:	2310      	movs	r3, #16
 800a5b8:	e795      	b.n	800a4e6 <_svfprintf_r+0x1de>
 800a5ba:	0021      	movs	r1, r4
 800a5bc:	c904      	ldmia	r1!, {r2}
 800a5be:	ab3f      	add	r3, sp, #252	; 0xfc
 800a5c0:	910d      	str	r1, [sp, #52]	; 0x34
 800a5c2:	211b      	movs	r1, #27
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	a81e      	add	r0, sp, #120	; 0x78
 800a5ca:	1809      	adds	r1, r1, r0
 800a5cc:	700a      	strb	r2, [r1, #0]
 800a5ce:	920c      	str	r2, [sp, #48]	; 0x30
 800a5d0:	3201      	adds	r2, #1
 800a5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	9308      	str	r3, [sp, #32]
 800a5d8:	0015      	movs	r5, r2
 800a5da:	9219      	str	r2, [sp, #100]	; 0x64
 800a5dc:	9210      	str	r2, [sp, #64]	; 0x40
 800a5de:	9211      	str	r2, [sp, #68]	; 0x44
 800a5e0:	e1f1      	b.n	800a9c6 <_svfprintf_r+0x6be>
 800a5e2:	2310      	movs	r3, #16
 800a5e4:	431e      	orrs	r6, r3
 800a5e6:	06b3      	lsls	r3, r6, #26
 800a5e8:	d531      	bpl.n	800a64e <_svfprintf_r+0x346>
 800a5ea:	2307      	movs	r3, #7
 800a5ec:	3407      	adds	r4, #7
 800a5ee:	439c      	bics	r4, r3
 800a5f0:	0022      	movs	r2, r4
 800a5f2:	ca18      	ldmia	r2!, {r3, r4}
 800a5f4:	9306      	str	r3, [sp, #24]
 800a5f6:	9407      	str	r4, [sp, #28]
 800a5f8:	920d      	str	r2, [sp, #52]	; 0x34
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	2a00      	cmp	r2, #0
 800a600:	da0b      	bge.n	800a61a <_svfprintf_r+0x312>
 800a602:	9c06      	ldr	r4, [sp, #24]
 800a604:	9d07      	ldr	r5, [sp, #28]
 800a606:	2200      	movs	r2, #0
 800a608:	4261      	negs	r1, r4
 800a60a:	41aa      	sbcs	r2, r5
 800a60c:	9106      	str	r1, [sp, #24]
 800a60e:	9207      	str	r2, [sp, #28]
 800a610:	221b      	movs	r2, #27
 800a612:	a91e      	add	r1, sp, #120	; 0x78
 800a614:	1852      	adds	r2, r2, r1
 800a616:	212d      	movs	r1, #45	; 0x2d
 800a618:	7011      	strb	r1, [r2, #0]
 800a61a:	9907      	ldr	r1, [sp, #28]
 800a61c:	9a06      	ldr	r2, [sp, #24]
 800a61e:	430a      	orrs	r2, r1
 800a620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a622:	3101      	adds	r1, #1
 800a624:	d101      	bne.n	800a62a <_svfprintf_r+0x322>
 800a626:	f001 f87b 	bl	800b720 <_svfprintf_r+0x1418>
 800a62a:	2180      	movs	r1, #128	; 0x80
 800a62c:	0034      	movs	r4, r6
 800a62e:	438c      	bics	r4, r1
 800a630:	2a00      	cmp	r2, #0
 800a632:	d001      	beq.n	800a638 <_svfprintf_r+0x330>
 800a634:	f001 f879 	bl	800b72a <_svfprintf_r+0x1422>
 800a638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a63a:	2a00      	cmp	r2, #0
 800a63c:	d101      	bne.n	800a642 <_svfprintf_r+0x33a>
 800a63e:	f000 fcef 	bl	800b020 <_svfprintf_r+0xd18>
 800a642:	2b01      	cmp	r3, #1
 800a644:	d001      	beq.n	800a64a <_svfprintf_r+0x342>
 800a646:	f001 f874 	bl	800b732 <_svfprintf_r+0x142a>
 800a64a:	f000 fc79 	bl	800af40 <_svfprintf_r+0xc38>
 800a64e:	0022      	movs	r2, r4
 800a650:	ca08      	ldmia	r2!, {r3}
 800a652:	920d      	str	r2, [sp, #52]	; 0x34
 800a654:	06f2      	lsls	r2, r6, #27
 800a656:	d503      	bpl.n	800a660 <_svfprintf_r+0x358>
 800a658:	9306      	str	r3, [sp, #24]
 800a65a:	17db      	asrs	r3, r3, #31
 800a65c:	9307      	str	r3, [sp, #28]
 800a65e:	e7cc      	b.n	800a5fa <_svfprintf_r+0x2f2>
 800a660:	0672      	lsls	r2, r6, #25
 800a662:	d501      	bpl.n	800a668 <_svfprintf_r+0x360>
 800a664:	b21b      	sxth	r3, r3
 800a666:	e7f7      	b.n	800a658 <_svfprintf_r+0x350>
 800a668:	05b2      	lsls	r2, r6, #22
 800a66a:	d5f5      	bpl.n	800a658 <_svfprintf_r+0x350>
 800a66c:	b25b      	sxtb	r3, r3
 800a66e:	e7f3      	b.n	800a658 <_svfprintf_r+0x350>
 800a670:	2307      	movs	r3, #7
 800a672:	3407      	adds	r4, #7
 800a674:	439c      	bics	r4, r3
 800a676:	0022      	movs	r2, r4
 800a678:	ca18      	ldmia	r2!, {r3, r4}
 800a67a:	920d      	str	r2, [sp, #52]	; 0x34
 800a67c:	2201      	movs	r2, #1
 800a67e:	9314      	str	r3, [sp, #80]	; 0x50
 800a680:	9415      	str	r4, [sp, #84]	; 0x54
 800a682:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a684:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a686:	005c      	lsls	r4, r3, #1
 800a688:	0864      	lsrs	r4, r4, #1
 800a68a:	0028      	movs	r0, r5
 800a68c:	0021      	movs	r1, r4
 800a68e:	4b3e      	ldr	r3, [pc, #248]	; (800a788 <_svfprintf_r+0x480>)
 800a690:	4252      	negs	r2, r2
 800a692:	f7f7 fe2f 	bl	80022f4 <__aeabi_dcmpun>
 800a696:	2800      	cmp	r0, #0
 800a698:	d126      	bne.n	800a6e8 <_svfprintf_r+0x3e0>
 800a69a:	2201      	movs	r2, #1
 800a69c:	0028      	movs	r0, r5
 800a69e:	0021      	movs	r1, r4
 800a6a0:	4b39      	ldr	r3, [pc, #228]	; (800a788 <_svfprintf_r+0x480>)
 800a6a2:	4252      	negs	r2, r2
 800a6a4:	f7f5 fee0 	bl	8000468 <__aeabi_dcmple>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d11d      	bne.n	800a6e8 <_svfprintf_r+0x3e0>
 800a6ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a6ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f7f5 fece 	bl	8000454 <__aeabi_dcmplt>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d004      	beq.n	800a6c6 <_svfprintf_r+0x3be>
 800a6bc:	231b      	movs	r3, #27
 800a6be:	aa1e      	add	r2, sp, #120	; 0x78
 800a6c0:	189b      	adds	r3, r3, r2
 800a6c2:	222d      	movs	r2, #45	; 0x2d
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	4b31      	ldr	r3, [pc, #196]	; (800a78c <_svfprintf_r+0x484>)
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6cc:	2b47      	cmp	r3, #71	; 0x47
 800a6ce:	dd01      	ble.n	800a6d4 <_svfprintf_r+0x3cc>
 800a6d0:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <_svfprintf_r+0x488>)
 800a6d2:	9308      	str	r3, [sp, #32]
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	439e      	bics	r6, r3
 800a6d8:	2300      	movs	r3, #0
 800a6da:	930c      	str	r3, [sp, #48]	; 0x30
 800a6dc:	3303      	adds	r3, #3
 800a6de:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9319      	str	r3, [sp, #100]	; 0x64
 800a6e4:	f000 fc78 	bl	800afd8 <_svfprintf_r+0xcd0>
 800a6e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ec:	0010      	movs	r0, r2
 800a6ee:	0019      	movs	r1, r3
 800a6f0:	f7f7 fe00 	bl	80022f4 <__aeabi_dcmpun>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d00e      	beq.n	800a716 <_svfprintf_r+0x40e>
 800a6f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	da04      	bge.n	800a708 <_svfprintf_r+0x400>
 800a6fe:	231b      	movs	r3, #27
 800a700:	aa1e      	add	r2, sp, #120	; 0x78
 800a702:	189b      	adds	r3, r3, r2
 800a704:	222d      	movs	r2, #45	; 0x2d
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	4b22      	ldr	r3, [pc, #136]	; (800a794 <_svfprintf_r+0x48c>)
 800a70a:	9308      	str	r3, [sp, #32]
 800a70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a70e:	2b47      	cmp	r3, #71	; 0x47
 800a710:	dde0      	ble.n	800a6d4 <_svfprintf_r+0x3cc>
 800a712:	4b21      	ldr	r3, [pc, #132]	; (800a798 <_svfprintf_r+0x490>)
 800a714:	e7dd      	b.n	800a6d2 <_svfprintf_r+0x3ca>
 800a716:	2320      	movs	r3, #32
 800a718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a71a:	439a      	bics	r2, r3
 800a71c:	9210      	str	r2, [sp, #64]	; 0x40
 800a71e:	2a41      	cmp	r2, #65	; 0x41
 800a720:	d123      	bne.n	800a76a <_svfprintf_r+0x462>
 800a722:	2230      	movs	r2, #48	; 0x30
 800a724:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a726:	ab25      	add	r3, sp, #148	; 0x94
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	3248      	adds	r2, #72	; 0x48
 800a72c:	2961      	cmp	r1, #97	; 0x61
 800a72e:	d000      	beq.n	800a732 <_svfprintf_r+0x42a>
 800a730:	3a20      	subs	r2, #32
 800a732:	705a      	strb	r2, [r3, #1]
 800a734:	2302      	movs	r3, #2
 800a736:	431e      	orrs	r6, r3
 800a738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73a:	2b63      	cmp	r3, #99	; 0x63
 800a73c:	dd2e      	ble.n	800a79c <_svfprintf_r+0x494>
 800a73e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a740:	1c59      	adds	r1, r3, #1
 800a742:	f7fd f9ab 	bl	8007a9c <_malloc_r>
 800a746:	9008      	str	r0, [sp, #32]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d000      	beq.n	800a74e <_svfprintf_r+0x446>
 800a74c:	e216      	b.n	800ab7c <_svfprintf_r+0x874>
 800a74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a750:	899a      	ldrh	r2, [r3, #12]
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	4313      	orrs	r3, r2
 800a756:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a758:	8193      	strh	r3, [r2, #12]
 800a75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75c:	899b      	ldrh	r3, [r3, #12]
 800a75e:	065b      	lsls	r3, r3, #25
 800a760:	d400      	bmi.n	800a764 <_svfprintf_r+0x45c>
 800a762:	e5f5      	b.n	800a350 <_svfprintf_r+0x48>
 800a764:	2301      	movs	r3, #1
 800a766:	425b      	negs	r3, r3
 800a768:	e5f1      	b.n	800a34e <_svfprintf_r+0x46>
 800a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76c:	900c      	str	r0, [sp, #48]	; 0x30
 800a76e:	3301      	adds	r3, #1
 800a770:	d100      	bne.n	800a774 <_svfprintf_r+0x46c>
 800a772:	e206      	b.n	800ab82 <_svfprintf_r+0x87a>
 800a774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a776:	2b47      	cmp	r3, #71	; 0x47
 800a778:	d114      	bne.n	800a7a4 <_svfprintf_r+0x49c>
 800a77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d111      	bne.n	800a7a4 <_svfprintf_r+0x49c>
 800a780:	3301      	adds	r3, #1
 800a782:	9309      	str	r3, [sp, #36]	; 0x24
 800a784:	e00e      	b.n	800a7a4 <_svfprintf_r+0x49c>
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	7fefffff 	.word	0x7fefffff
 800a78c:	0800ffb4 	.word	0x0800ffb4
 800a790:	0800ffb8 	.word	0x0800ffb8
 800a794:	0800ffbc 	.word	0x0800ffbc
 800a798:	0800ffc0 	.word	0x0800ffc0
 800a79c:	2300      	movs	r3, #0
 800a79e:	930c      	str	r3, [sp, #48]	; 0x30
 800a7a0:	ab3f      	add	r3, sp, #252	; 0xfc
 800a7a2:	9308      	str	r3, [sp, #32]
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	4333      	orrs	r3, r6
 800a7aa:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	db00      	blt.n	800a7b6 <_svfprintf_r+0x4ae>
 800a7b4:	e1e7      	b.n	800ab86 <_svfprintf_r+0x87e>
 800a7b6:	2280      	movs	r2, #128	; 0x80
 800a7b8:	0612      	lsls	r2, r2, #24
 800a7ba:	4694      	mov	ip, r2
 800a7bc:	4463      	add	r3, ip
 800a7be:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c0:	232d      	movs	r3, #45	; 0x2d
 800a7c2:	9322      	str	r3, [sp, #136]	; 0x88
 800a7c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7c6:	2b41      	cmp	r3, #65	; 0x41
 800a7c8:	d000      	beq.n	800a7cc <_svfprintf_r+0x4c4>
 800a7ca:	e1f5      	b.n	800abb8 <_svfprintf_r+0x8b0>
 800a7cc:	0028      	movs	r0, r5
 800a7ce:	aa26      	add	r2, sp, #152	; 0x98
 800a7d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7d2:	f002 fb73 	bl	800cebc <frexp>
 800a7d6:	23ff      	movs	r3, #255	; 0xff
 800a7d8:	2200      	movs	r2, #0
 800a7da:	059b      	lsls	r3, r3, #22
 800a7dc:	f7f6 ff46 	bl	800166c <__aeabi_dmul>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	0004      	movs	r4, r0
 800a7e6:	000d      	movs	r5, r1
 800a7e8:	f7f5 fe2e 	bl	8000448 <__aeabi_dcmpeq>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d001      	beq.n	800a7f4 <_svfprintf_r+0x4ec>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	9326      	str	r3, [sp, #152]	; 0x98
 800a7f4:	4bda      	ldr	r3, [pc, #872]	; (800ab60 <_svfprintf_r+0x858>)
 800a7f6:	9319      	str	r3, [sp, #100]	; 0x64
 800a7f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7fa:	2b61      	cmp	r3, #97	; 0x61
 800a7fc:	d001      	beq.n	800a802 <_svfprintf_r+0x4fa>
 800a7fe:	4bd9      	ldr	r3, [pc, #868]	; (800ab64 <_svfprintf_r+0x85c>)
 800a800:	9319      	str	r3, [sp, #100]	; 0x64
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	930e      	str	r3, [sp, #56]	; 0x38
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	3b01      	subs	r3, #1
 800a80a:	9311      	str	r3, [sp, #68]	; 0x44
 800a80c:	2200      	movs	r2, #0
 800a80e:	4bd6      	ldr	r3, [pc, #856]	; (800ab68 <_svfprintf_r+0x860>)
 800a810:	0020      	movs	r0, r4
 800a812:	0029      	movs	r1, r5
 800a814:	f7f6 ff2a 	bl	800166c <__aeabi_dmul>
 800a818:	000d      	movs	r5, r1
 800a81a:	0004      	movs	r4, r0
 800a81c:	f7f7 fd88 	bl	8002330 <__aeabi_d2iz>
 800a820:	9021      	str	r0, [sp, #132]	; 0x84
 800a822:	f7f7 fdbb 	bl	800239c <__aeabi_i2d>
 800a826:	0002      	movs	r2, r0
 800a828:	000b      	movs	r3, r1
 800a82a:	0020      	movs	r0, r4
 800a82c:	0029      	movs	r1, r5
 800a82e:	f7f7 f9df 	bl	8001bf0 <__aeabi_dsub>
 800a832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a834:	000d      	movs	r5, r1
 800a836:	001a      	movs	r2, r3
 800a838:	3201      	adds	r2, #1
 800a83a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800a83c:	920e      	str	r2, [sp, #56]	; 0x38
 800a83e:	9223      	str	r2, [sp, #140]	; 0x8c
 800a840:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a842:	0004      	movs	r4, r0
 800a844:	5c52      	ldrb	r2, [r2, r1]
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a84a:	9320      	str	r3, [sp, #128]	; 0x80
 800a84c:	3301      	adds	r3, #1
 800a84e:	d00a      	beq.n	800a866 <_svfprintf_r+0x55e>
 800a850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a852:	2200      	movs	r2, #0
 800a854:	3b01      	subs	r3, #1
 800a856:	9311      	str	r3, [sp, #68]	; 0x44
 800a858:	0020      	movs	r0, r4
 800a85a:	2300      	movs	r3, #0
 800a85c:	0029      	movs	r1, r5
 800a85e:	f7f5 fdf3 	bl	8000448 <__aeabi_dcmpeq>
 800a862:	2800      	cmp	r0, #0
 800a864:	d0d2      	beq.n	800a80c <_svfprintf_r+0x504>
 800a866:	2200      	movs	r2, #0
 800a868:	0020      	movs	r0, r4
 800a86a:	0029      	movs	r1, r5
 800a86c:	4bbf      	ldr	r3, [pc, #764]	; (800ab6c <_svfprintf_r+0x864>)
 800a86e:	f7f5 fe05 	bl	800047c <__aeabi_dcmpgt>
 800a872:	2800      	cmp	r0, #0
 800a874:	d10c      	bne.n	800a890 <_svfprintf_r+0x588>
 800a876:	2200      	movs	r2, #0
 800a878:	0020      	movs	r0, r4
 800a87a:	0029      	movs	r1, r5
 800a87c:	4bbb      	ldr	r3, [pc, #748]	; (800ab6c <_svfprintf_r+0x864>)
 800a87e:	f7f5 fde3 	bl	8000448 <__aeabi_dcmpeq>
 800a882:	2800      	cmp	r0, #0
 800a884:	d100      	bne.n	800a888 <_svfprintf_r+0x580>
 800a886:	e191      	b.n	800abac <_svfprintf_r+0x8a4>
 800a888:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a88a:	07db      	lsls	r3, r3, #31
 800a88c:	d400      	bmi.n	800a890 <_svfprintf_r+0x588>
 800a88e:	e18d      	b.n	800abac <_svfprintf_r+0x8a4>
 800a890:	2030      	movs	r0, #48	; 0x30
 800a892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a894:	932a      	str	r3, [sp, #168]	; 0xa8
 800a896:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a898:	7bdb      	ldrb	r3, [r3, #15]
 800a89a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800a89c:	3a01      	subs	r2, #1
 800a89e:	922a      	str	r2, [sp, #168]	; 0xa8
 800a8a0:	7811      	ldrb	r1, [r2, #0]
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d100      	bne.n	800a8a8 <_svfprintf_r+0x5a0>
 800a8a6:	e171      	b.n	800ab8c <_svfprintf_r+0x884>
 800a8a8:	1c4b      	adds	r3, r1, #1
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2939      	cmp	r1, #57	; 0x39
 800a8ae:	d101      	bne.n	800a8b4 <_svfprintf_r+0x5ac>
 800a8b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8b2:	7a9b      	ldrb	r3, [r3, #10]
 800a8b4:	7013      	strb	r3, [r2, #0]
 800a8b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8b8:	9a08      	ldr	r2, [sp, #32]
 800a8ba:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	930e      	str	r3, [sp, #56]	; 0x38
 800a8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8c2:	2b47      	cmp	r3, #71	; 0x47
 800a8c4:	d000      	beq.n	800a8c8 <_svfprintf_r+0x5c0>
 800a8c6:	e1c4      	b.n	800ac52 <_svfprintf_r+0x94a>
 800a8c8:	1ceb      	adds	r3, r5, #3
 800a8ca:	db03      	blt.n	800a8d4 <_svfprintf_r+0x5cc>
 800a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ce:	42ab      	cmp	r3, r5
 800a8d0:	db00      	blt.n	800a8d4 <_svfprintf_r+0x5cc>
 800a8d2:	e1e6      	b.n	800aca2 <_svfprintf_r+0x99a>
 800a8d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d6:	3b02      	subs	r3, #2
 800a8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8da:	223c      	movs	r2, #60	; 0x3c
 800a8dc:	466b      	mov	r3, sp
 800a8de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a8e0:	189b      	adds	r3, r3, r2
 800a8e2:	1e6c      	subs	r4, r5, #1
 800a8e4:	3a1c      	subs	r2, #28
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	9426      	str	r4, [sp, #152]	; 0x98
 800a8ec:	4391      	bics	r1, r2
 800a8ee:	2941      	cmp	r1, #65	; 0x41
 800a8f0:	d102      	bne.n	800a8f8 <_svfprintf_r+0x5f0>
 800a8f2:	330f      	adds	r3, #15
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	a928      	add	r1, sp, #160	; 0xa0
 800a8fa:	700b      	strb	r3, [r1, #0]
 800a8fc:	232b      	movs	r3, #43	; 0x2b
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	da02      	bge.n	800a908 <_svfprintf_r+0x600>
 800a902:	2401      	movs	r4, #1
 800a904:	3302      	adds	r3, #2
 800a906:	1b64      	subs	r4, r4, r5
 800a908:	704b      	strb	r3, [r1, #1]
 800a90a:	2c09      	cmp	r4, #9
 800a90c:	dc00      	bgt.n	800a910 <_svfprintf_r+0x608>
 800a90e:	e1ba      	b.n	800ac86 <_svfprintf_r+0x97e>
 800a910:	2337      	movs	r3, #55	; 0x37
 800a912:	250a      	movs	r5, #10
 800a914:	aa1e      	add	r2, sp, #120	; 0x78
 800a916:	189b      	adds	r3, r3, r2
 800a918:	9310      	str	r3, [sp, #64]	; 0x40
 800a91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a91c:	0020      	movs	r0, r4
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	0029      	movs	r1, r5
 800a922:	3b01      	subs	r3, #1
 800a924:	9310      	str	r3, [sp, #64]	; 0x40
 800a926:	f7f5 fd79 	bl	800041c <__aeabi_idivmod>
 800a92a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a92c:	3130      	adds	r1, #48	; 0x30
 800a92e:	7019      	strb	r1, [r3, #0]
 800a930:	0020      	movs	r0, r4
 800a932:	0029      	movs	r1, r5
 800a934:	9411      	str	r4, [sp, #68]	; 0x44
 800a936:	f7f5 fc8b 	bl	8000250 <__divsi3>
 800a93a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a93c:	0004      	movs	r4, r0
 800a93e:	2b63      	cmp	r3, #99	; 0x63
 800a940:	dceb      	bgt.n	800a91a <_svfprintf_r+0x612>
 800a942:	222a      	movs	r2, #42	; 0x2a
 800a944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a946:	a81e      	add	r0, sp, #120	; 0x78
 800a948:	1e99      	subs	r1, r3, #2
 800a94a:	1812      	adds	r2, r2, r0
 800a94c:	2037      	movs	r0, #55	; 0x37
 800a94e:	000b      	movs	r3, r1
 800a950:	3430      	adds	r4, #48	; 0x30
 800a952:	700c      	strb	r4, [r1, #0]
 800a954:	ac1e      	add	r4, sp, #120	; 0x78
 800a956:	1900      	adds	r0, r0, r4
 800a958:	4283      	cmp	r3, r0
 800a95a:	d200      	bcs.n	800a95e <_svfprintf_r+0x656>
 800a95c:	e18e      	b.n	800ac7c <_svfprintf_r+0x974>
 800a95e:	2300      	movs	r3, #0
 800a960:	4281      	cmp	r1, r0
 800a962:	d804      	bhi.n	800a96e <_svfprintf_r+0x666>
 800a964:	aa1e      	add	r2, sp, #120	; 0x78
 800a966:	3339      	adds	r3, #57	; 0x39
 800a968:	189b      	adds	r3, r3, r2
 800a96a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	222a      	movs	r2, #42	; 0x2a
 800a970:	a91e      	add	r1, sp, #120	; 0x78
 800a972:	1852      	adds	r2, r2, r1
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	aa28      	add	r2, sp, #160	; 0xa0
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	931e      	str	r3, [sp, #120]	; 0x78
 800a97c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a97e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a980:	4694      	mov	ip, r2
 800a982:	4463      	add	r3, ip
 800a984:	9309      	str	r3, [sp, #36]	; 0x24
 800a986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a988:	2b01      	cmp	r3, #1
 800a98a:	dc01      	bgt.n	800a990 <_svfprintf_r+0x688>
 800a98c:	07f3      	lsls	r3, r6, #31
 800a98e:	d504      	bpl.n	800a99a <_svfprintf_r+0x692>
 800a990:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	4694      	mov	ip, r2
 800a996:	4463      	add	r3, ip
 800a998:	9309      	str	r3, [sp, #36]	; 0x24
 800a99a:	2280      	movs	r2, #128	; 0x80
 800a99c:	4b74      	ldr	r3, [pc, #464]	; (800ab70 <_svfprintf_r+0x868>)
 800a99e:	0052      	lsls	r2, r2, #1
 800a9a0:	4033      	ands	r3, r6
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	001d      	movs	r5, r3
 800a9a8:	921a      	str	r2, [sp, #104]	; 0x68
 800a9aa:	9310      	str	r3, [sp, #64]	; 0x40
 800a9ac:	9311      	str	r3, [sp, #68]	; 0x44
 800a9ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9b0:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a9b2:	9319      	str	r3, [sp, #100]	; 0x64
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d006      	beq.n	800a9c6 <_svfprintf_r+0x6be>
 800a9b8:	231b      	movs	r3, #27
 800a9ba:	aa1e      	add	r2, sp, #120	; 0x78
 800a9bc:	189b      	adds	r3, r3, r2
 800a9be:	222d      	movs	r2, #45	; 0x2d
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	9319      	str	r3, [sp, #100]	; 0x64
 800a9c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	da00      	bge.n	800a9d2 <_svfprintf_r+0x6ca>
 800a9d0:	921a      	str	r2, [sp, #104]	; 0x68
 800a9d2:	231b      	movs	r3, #27
 800a9d4:	aa1e      	add	r2, sp, #120	; 0x78
 800a9d6:	189b      	adds	r3, r3, r2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	1e5a      	subs	r2, r3, #1
 800a9dc:	4193      	sbcs	r3, r2
 800a9de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9e0:	18d3      	adds	r3, r2, r3
 800a9e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a9e4:	0032      	movs	r2, r6
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	401a      	ands	r2, r3
 800a9ea:	9220      	str	r2, [sp, #128]	; 0x80
 800a9ec:	421e      	tst	r6, r3
 800a9ee:	d002      	beq.n	800a9f6 <_svfprintf_r+0x6ee>
 800a9f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f6:	2384      	movs	r3, #132	; 0x84
 800a9f8:	0032      	movs	r2, r6
 800a9fa:	401a      	ands	r2, r3
 800a9fc:	9221      	str	r2, [sp, #132]	; 0x84
 800a9fe:	421e      	tst	r6, r3
 800aa00:	d11f      	bne.n	800aa42 <_svfprintf_r+0x73a>
 800aa02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa04:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa06:	1a9c      	subs	r4, r3, r2
 800aa08:	2c00      	cmp	r4, #0
 800aa0a:	dd1a      	ble.n	800aa42 <_svfprintf_r+0x73a>
 800aa0c:	0039      	movs	r1, r7
 800aa0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa10:	4858      	ldr	r0, [pc, #352]	; (800ab74 <_svfprintf_r+0x86c>)
 800aa12:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aa14:	3301      	adds	r3, #1
 800aa16:	3108      	adds	r1, #8
 800aa18:	6038      	str	r0, [r7, #0]
 800aa1a:	2c10      	cmp	r4, #16
 800aa1c:	dd00      	ble.n	800aa20 <_svfprintf_r+0x718>
 800aa1e:	e31c      	b.n	800b05a <_svfprintf_r+0xd52>
 800aa20:	607c      	str	r4, [r7, #4]
 800aa22:	18a4      	adds	r4, r4, r2
 800aa24:	000f      	movs	r7, r1
 800aa26:	942e      	str	r4, [sp, #184]	; 0xb8
 800aa28:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa2a:	2b07      	cmp	r3, #7
 800aa2c:	dd09      	ble.n	800aa42 <_svfprintf_r+0x73a>
 800aa2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa32:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa34:	f003 fd7e 	bl	800e534 <__ssprint_r>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d001      	beq.n	800aa40 <_svfprintf_r+0x738>
 800aa3c:	f000 fe43 	bl	800b6c6 <_svfprintf_r+0x13be>
 800aa40:	af2f      	add	r7, sp, #188	; 0xbc
 800aa42:	221b      	movs	r2, #27
 800aa44:	a91e      	add	r1, sp, #120	; 0x78
 800aa46:	1852      	adds	r2, r2, r1
 800aa48:	7811      	ldrb	r1, [r2, #0]
 800aa4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aa4c:	2900      	cmp	r1, #0
 800aa4e:	d014      	beq.n	800aa7a <_svfprintf_r+0x772>
 800aa50:	603a      	str	r2, [r7, #0]
 800aa52:	2201      	movs	r2, #1
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	932e      	str	r3, [sp, #184]	; 0xb8
 800aa58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa5a:	607a      	str	r2, [r7, #4]
 800aa5c:	189b      	adds	r3, r3, r2
 800aa5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa60:	3708      	adds	r7, #8
 800aa62:	2b07      	cmp	r3, #7
 800aa64:	dd09      	ble.n	800aa7a <_svfprintf_r+0x772>
 800aa66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800aa6c:	f003 fd62 	bl	800e534 <__ssprint_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d001      	beq.n	800aa78 <_svfprintf_r+0x770>
 800aa74:	f000 fe27 	bl	800b6c6 <_svfprintf_r+0x13be>
 800aa78:	af2f      	add	r7, sp, #188	; 0xbc
 800aa7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800aa7e:	2a00      	cmp	r2, #0
 800aa80:	d015      	beq.n	800aaae <_svfprintf_r+0x7a6>
 800aa82:	aa25      	add	r2, sp, #148	; 0x94
 800aa84:	603a      	str	r2, [r7, #0]
 800aa86:	2202      	movs	r2, #2
 800aa88:	189b      	adds	r3, r3, r2
 800aa8a:	932e      	str	r3, [sp, #184]	; 0xb8
 800aa8c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	3301      	adds	r3, #1
 800aa92:	932d      	str	r3, [sp, #180]	; 0xb4
 800aa94:	3708      	adds	r7, #8
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	dd09      	ble.n	800aaae <_svfprintf_r+0x7a6>
 800aa9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa9e:	aa2c      	add	r2, sp, #176	; 0xb0
 800aaa0:	f003 fd48 	bl	800e534 <__ssprint_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d001      	beq.n	800aaac <_svfprintf_r+0x7a4>
 800aaa8:	f000 fe0d 	bl	800b6c6 <_svfprintf_r+0x13be>
 800aaac:	af2f      	add	r7, sp, #188	; 0xbc
 800aaae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aab0:	2b80      	cmp	r3, #128	; 0x80
 800aab2:	d11f      	bne.n	800aaf4 <_svfprintf_r+0x7ec>
 800aab4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aab6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aab8:	1a9c      	subs	r4, r3, r2
 800aaba:	2c00      	cmp	r4, #0
 800aabc:	dd1a      	ble.n	800aaf4 <_svfprintf_r+0x7ec>
 800aabe:	0039      	movs	r1, r7
 800aac0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800aac2:	482d      	ldr	r0, [pc, #180]	; (800ab78 <_svfprintf_r+0x870>)
 800aac4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800aac6:	3301      	adds	r3, #1
 800aac8:	3108      	adds	r1, #8
 800aaca:	6038      	str	r0, [r7, #0]
 800aacc:	2c10      	cmp	r4, #16
 800aace:	dd00      	ble.n	800aad2 <_svfprintf_r+0x7ca>
 800aad0:	e2d6      	b.n	800b080 <_svfprintf_r+0xd78>
 800aad2:	607c      	str	r4, [r7, #4]
 800aad4:	18a4      	adds	r4, r4, r2
 800aad6:	000f      	movs	r7, r1
 800aad8:	942e      	str	r4, [sp, #184]	; 0xb8
 800aada:	932d      	str	r3, [sp, #180]	; 0xb4
 800aadc:	2b07      	cmp	r3, #7
 800aade:	dd09      	ble.n	800aaf4 <_svfprintf_r+0x7ec>
 800aae0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aae2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aae4:	aa2c      	add	r2, sp, #176	; 0xb0
 800aae6:	f003 fd25 	bl	800e534 <__ssprint_r>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d001      	beq.n	800aaf2 <_svfprintf_r+0x7ea>
 800aaee:	f000 fdea 	bl	800b6c6 <_svfprintf_r+0x13be>
 800aaf2:	af2f      	add	r7, sp, #188	; 0xbc
 800aaf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aaf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaf8:	1a9c      	subs	r4, r3, r2
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	dd1a      	ble.n	800ab34 <_svfprintf_r+0x82c>
 800aafe:	0039      	movs	r1, r7
 800ab00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab02:	481d      	ldr	r0, [pc, #116]	; (800ab78 <_svfprintf_r+0x870>)
 800ab04:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ab06:	3301      	adds	r3, #1
 800ab08:	3108      	adds	r1, #8
 800ab0a:	6038      	str	r0, [r7, #0]
 800ab0c:	2c10      	cmp	r4, #16
 800ab0e:	dd00      	ble.n	800ab12 <_svfprintf_r+0x80a>
 800ab10:	e2c9      	b.n	800b0a6 <_svfprintf_r+0xd9e>
 800ab12:	18a2      	adds	r2, r4, r2
 800ab14:	607c      	str	r4, [r7, #4]
 800ab16:	922e      	str	r2, [sp, #184]	; 0xb8
 800ab18:	000f      	movs	r7, r1
 800ab1a:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab1c:	2b07      	cmp	r3, #7
 800ab1e:	dd09      	ble.n	800ab34 <_svfprintf_r+0x82c>
 800ab20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab22:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab24:	aa2c      	add	r2, sp, #176	; 0xb0
 800ab26:	f003 fd05 	bl	800e534 <__ssprint_r>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d001      	beq.n	800ab32 <_svfprintf_r+0x82a>
 800ab2e:	f000 fdca 	bl	800b6c6 <_svfprintf_r+0x13be>
 800ab32:	af2f      	add	r7, sp, #188	; 0xbc
 800ab34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ab36:	9319      	str	r3, [sp, #100]	; 0x64
 800ab38:	05f3      	lsls	r3, r6, #23
 800ab3a:	d500      	bpl.n	800ab3e <_svfprintf_r+0x836>
 800ab3c:	e2ce      	b.n	800b0dc <_svfprintf_r+0xdd4>
 800ab3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	4694      	mov	ip, r2
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab48:	607b      	str	r3, [r7, #4]
 800ab4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab4c:	4463      	add	r3, ip
 800ab4e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ab50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ab52:	3301      	adds	r3, #1
 800ab54:	932d      	str	r3, [sp, #180]	; 0xb4
 800ab56:	2b07      	cmp	r3, #7
 800ab58:	dd00      	ble.n	800ab5c <_svfprintf_r+0x854>
 800ab5a:	e3a3      	b.n	800b2a4 <_svfprintf_r+0xf9c>
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	e301      	b.n	800b164 <_svfprintf_r+0xe5c>
 800ab60:	0800ffc4 	.word	0x0800ffc4
 800ab64:	0800ffd5 	.word	0x0800ffd5
 800ab68:	40300000 	.word	0x40300000
 800ab6c:	3fe00000 	.word	0x3fe00000
 800ab70:	fffffbff 	.word	0xfffffbff
 800ab74:	0800ffe8 	.word	0x0800ffe8
 800ab78:	0800fff8 	.word	0x0800fff8
 800ab7c:	9b08      	ldr	r3, [sp, #32]
 800ab7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab80:	e610      	b.n	800a7a4 <_svfprintf_r+0x49c>
 800ab82:	2306      	movs	r3, #6
 800ab84:	e5fd      	b.n	800a782 <_svfprintf_r+0x47a>
 800ab86:	930e      	str	r3, [sp, #56]	; 0x38
 800ab88:	2300      	movs	r3, #0
 800ab8a:	e61a      	b.n	800a7c2 <_svfprintf_r+0x4ba>
 800ab8c:	7010      	strb	r0, [r2, #0]
 800ab8e:	e684      	b.n	800a89a <_svfprintf_r+0x592>
 800ab90:	7018      	strb	r0, [r3, #0]
 800ab92:	3301      	adds	r3, #1
 800ab94:	1aca      	subs	r2, r1, r3
 800ab96:	d5fb      	bpl.n	800ab90 <_svfprintf_r+0x888>
 800ab98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	3201      	adds	r2, #1
 800ab9e:	db01      	blt.n	800aba4 <_svfprintf_r+0x89c>
 800aba0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aba2:	3301      	adds	r3, #1
 800aba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba6:	18d3      	adds	r3, r2, r3
 800aba8:	9323      	str	r3, [sp, #140]	; 0x8c
 800abaa:	e684      	b.n	800a8b6 <_svfprintf_r+0x5ae>
 800abac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abae:	9920      	ldr	r1, [sp, #128]	; 0x80
 800abb0:	2030      	movs	r0, #48	; 0x30
 800abb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abb4:	1851      	adds	r1, r2, r1
 800abb6:	e7ed      	b.n	800ab94 <_svfprintf_r+0x88c>
 800abb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abba:	2303      	movs	r3, #3
 800abbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800abbe:	2a46      	cmp	r2, #70	; 0x46
 800abc0:	d006      	beq.n	800abd0 <_svfprintf_r+0x8c8>
 800abc2:	0014      	movs	r4, r2
 800abc4:	3c45      	subs	r4, #69	; 0x45
 800abc6:	4262      	negs	r2, r4
 800abc8:	4154      	adcs	r4, r2
 800abca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abcc:	3b01      	subs	r3, #1
 800abce:	1914      	adds	r4, r2, r4
 800abd0:	aa2a      	add	r2, sp, #168	; 0xa8
 800abd2:	9204      	str	r2, [sp, #16]
 800abd4:	aa27      	add	r2, sp, #156	; 0x9c
 800abd6:	9203      	str	r2, [sp, #12]
 800abd8:	aa26      	add	r2, sp, #152	; 0x98
 800abda:	9202      	str	r2, [sp, #8]
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	002a      	movs	r2, r5
 800abe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abe4:	9401      	str	r4, [sp, #4]
 800abe6:	f002 fad7 	bl	800d198 <_dtoa_r>
 800abea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abec:	9008      	str	r0, [sp, #32]
 800abee:	2b47      	cmp	r3, #71	; 0x47
 800abf0:	d103      	bne.n	800abfa <_svfprintf_r+0x8f2>
 800abf2:	07f3      	lsls	r3, r6, #31
 800abf4:	d401      	bmi.n	800abfa <_svfprintf_r+0x8f2>
 800abf6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800abf8:	e65e      	b.n	800a8b8 <_svfprintf_r+0x5b0>
 800abfa:	9b08      	ldr	r3, [sp, #32]
 800abfc:	191b      	adds	r3, r3, r4
 800abfe:	9311      	str	r3, [sp, #68]	; 0x44
 800ac00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac02:	2b46      	cmp	r3, #70	; 0x46
 800ac04:	d112      	bne.n	800ac2c <_svfprintf_r+0x924>
 800ac06:	9b08      	ldr	r3, [sp, #32]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b30      	cmp	r3, #48	; 0x30
 800ac0c:	d10a      	bne.n	800ac24 <_svfprintf_r+0x91c>
 800ac0e:	2200      	movs	r2, #0
 800ac10:	2300      	movs	r3, #0
 800ac12:	0028      	movs	r0, r5
 800ac14:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac16:	f7f5 fc17 	bl	8000448 <__aeabi_dcmpeq>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d102      	bne.n	800ac24 <_svfprintf_r+0x91c>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	1b1b      	subs	r3, r3, r4
 800ac22:	9326      	str	r3, [sp, #152]	; 0x98
 800ac24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac28:	18d3      	adds	r3, r2, r3
 800ac2a:	9311      	str	r3, [sp, #68]	; 0x44
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	0028      	movs	r0, r5
 800ac32:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ac34:	f7f5 fc08 	bl	8000448 <__aeabi_dcmpeq>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d001      	beq.n	800ac40 <_svfprintf_r+0x938>
 800ac3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac3e:	932a      	str	r3, [sp, #168]	; 0xa8
 800ac40:	2230      	movs	r2, #48	; 0x30
 800ac42:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ac44:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d9d5      	bls.n	800abf6 <_svfprintf_r+0x8ee>
 800ac4a:	1c59      	adds	r1, r3, #1
 800ac4c:	912a      	str	r1, [sp, #168]	; 0xa8
 800ac4e:	701a      	strb	r2, [r3, #0]
 800ac50:	e7f7      	b.n	800ac42 <_svfprintf_r+0x93a>
 800ac52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac54:	2b46      	cmp	r3, #70	; 0x46
 800ac56:	d000      	beq.n	800ac5a <_svfprintf_r+0x952>
 800ac58:	e63f      	b.n	800a8da <_svfprintf_r+0x5d2>
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	0033      	movs	r3, r6
 800ac5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac60:	4013      	ands	r3, r2
 800ac62:	430b      	orrs	r3, r1
 800ac64:	2d00      	cmp	r5, #0
 800ac66:	dd2c      	ble.n	800acc2 <_svfprintf_r+0x9ba>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d046      	beq.n	800acfa <_svfprintf_r+0x9f2>
 800ac6c:	000a      	movs	r2, r1
 800ac6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac70:	18eb      	adds	r3, r5, r3
 800ac72:	18d3      	adds	r3, r2, r3
 800ac74:	9309      	str	r3, [sp, #36]	; 0x24
 800ac76:	2366      	movs	r3, #102	; 0x66
 800ac78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac7a:	e030      	b.n	800acde <_svfprintf_r+0x9d6>
 800ac7c:	781c      	ldrb	r4, [r3, #0]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	7014      	strb	r4, [r2, #0]
 800ac82:	3201      	adds	r2, #1
 800ac84:	e668      	b.n	800a958 <_svfprintf_r+0x650>
 800ac86:	222a      	movs	r2, #42	; 0x2a
 800ac88:	ab1e      	add	r3, sp, #120	; 0x78
 800ac8a:	18d2      	adds	r2, r2, r3
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d104      	bne.n	800ac9a <_svfprintf_r+0x992>
 800ac90:	2330      	movs	r3, #48	; 0x30
 800ac92:	222b      	movs	r2, #43	; 0x2b
 800ac94:	708b      	strb	r3, [r1, #2]
 800ac96:	ab1e      	add	r3, sp, #120	; 0x78
 800ac98:	18d2      	adds	r2, r2, r3
 800ac9a:	3430      	adds	r4, #48	; 0x30
 800ac9c:	1c53      	adds	r3, r2, #1
 800ac9e:	7014      	strb	r4, [r2, #0]
 800aca0:	e669      	b.n	800a976 <_svfprintf_r+0x66e>
 800aca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca4:	42ab      	cmp	r3, r5
 800aca6:	dd12      	ble.n	800acce <_svfprintf_r+0x9c6>
 800aca8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800acaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acac:	4694      	mov	ip, r2
 800acae:	4463      	add	r3, ip
 800acb0:	9309      	str	r3, [sp, #36]	; 0x24
 800acb2:	2367      	movs	r3, #103	; 0x67
 800acb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb6:	2d00      	cmp	r5, #0
 800acb8:	dc11      	bgt.n	800acde <_svfprintf_r+0x9d6>
 800acba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acbc:	1b5b      	subs	r3, r3, r5
 800acbe:	3301      	adds	r3, #1
 800acc0:	e00c      	b.n	800acdc <_svfprintf_r+0x9d4>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d01b      	beq.n	800acfe <_svfprintf_r+0x9f6>
 800acc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acca:	3301      	adds	r3, #1
 800accc:	e7d1      	b.n	800ac72 <_svfprintf_r+0x96a>
 800acce:	2367      	movs	r3, #103	; 0x67
 800acd0:	9509      	str	r5, [sp, #36]	; 0x24
 800acd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd4:	07f3      	lsls	r3, r6, #31
 800acd6:	d502      	bpl.n	800acde <_svfprintf_r+0x9d6>
 800acd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acda:	18eb      	adds	r3, r5, r3
 800acdc:	9309      	str	r3, [sp, #36]	; 0x24
 800acde:	2380      	movs	r3, #128	; 0x80
 800ace0:	0032      	movs	r2, r6
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	401a      	ands	r2, r3
 800ace6:	9211      	str	r2, [sp, #68]	; 0x44
 800ace8:	2200      	movs	r2, #0
 800acea:	9210      	str	r2, [sp, #64]	; 0x40
 800acec:	421e      	tst	r6, r3
 800acee:	d100      	bne.n	800acf2 <_svfprintf_r+0x9ea>
 800acf0:	e65d      	b.n	800a9ae <_svfprintf_r+0x6a6>
 800acf2:	4295      	cmp	r5, r2
 800acf4:	dc25      	bgt.n	800ad42 <_svfprintf_r+0xa3a>
 800acf6:	9211      	str	r2, [sp, #68]	; 0x44
 800acf8:	e659      	b.n	800a9ae <_svfprintf_r+0x6a6>
 800acfa:	9509      	str	r5, [sp, #36]	; 0x24
 800acfc:	e7bb      	b.n	800ac76 <_svfprintf_r+0x96e>
 800acfe:	2366      	movs	r3, #102	; 0x66
 800ad00:	9209      	str	r2, [sp, #36]	; 0x24
 800ad02:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad04:	e7eb      	b.n	800acde <_svfprintf_r+0x9d6>
 800ad06:	42ab      	cmp	r3, r5
 800ad08:	da0e      	bge.n	800ad28 <_svfprintf_r+0xa20>
 800ad0a:	1aed      	subs	r5, r5, r3
 800ad0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad0e:	785b      	ldrb	r3, [r3, #1]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d012      	beq.n	800ad3a <_svfprintf_r+0xa32>
 800ad14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad16:	3301      	adds	r3, #1
 800ad18:	9311      	str	r3, [sp, #68]	; 0x44
 800ad1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	9312      	str	r3, [sp, #72]	; 0x48
 800ad20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	2bff      	cmp	r3, #255	; 0xff
 800ad26:	d1ee      	bne.n	800ad06 <_svfprintf_r+0x9fe>
 800ad28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad2c:	189b      	adds	r3, r3, r2
 800ad2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad30:	4353      	muls	r3, r2
 800ad32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad34:	189b      	adds	r3, r3, r2
 800ad36:	9309      	str	r3, [sp, #36]	; 0x24
 800ad38:	e639      	b.n	800a9ae <_svfprintf_r+0x6a6>
 800ad3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	9310      	str	r3, [sp, #64]	; 0x40
 800ad40:	e7ee      	b.n	800ad20 <_svfprintf_r+0xa18>
 800ad42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad44:	9311      	str	r3, [sp, #68]	; 0x44
 800ad46:	e7eb      	b.n	800ad20 <_svfprintf_r+0xa18>
 800ad48:	1d23      	adds	r3, r4, #4
 800ad4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad4c:	06b3      	lsls	r3, r6, #26
 800ad4e:	d509      	bpl.n	800ad64 <_svfprintf_r+0xa5c>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	17d2      	asrs	r2, r2, #31
 800ad58:	605a      	str	r2, [r3, #4]
 800ad5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ad5e:	9308      	str	r3, [sp, #32]
 800ad60:	f7ff fb0d 	bl	800a37e <_svfprintf_r+0x76>
 800ad64:	06f3      	lsls	r3, r6, #27
 800ad66:	d503      	bpl.n	800ad70 <_svfprintf_r+0xa68>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	e7f4      	b.n	800ad5a <_svfprintf_r+0xa52>
 800ad70:	0673      	lsls	r3, r6, #25
 800ad72:	d503      	bpl.n	800ad7c <_svfprintf_r+0xa74>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	e7ee      	b.n	800ad5a <_svfprintf_r+0xa52>
 800ad7c:	05b6      	lsls	r6, r6, #22
 800ad7e:	d5f3      	bpl.n	800ad68 <_svfprintf_r+0xa60>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e7e8      	b.n	800ad5a <_svfprintf_r+0xa52>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	431e      	orrs	r6, r3
 800ad8c:	2320      	movs	r3, #32
 800ad8e:	0030      	movs	r0, r6
 800ad90:	4018      	ands	r0, r3
 800ad92:	421e      	tst	r6, r3
 800ad94:	d00f      	beq.n	800adb6 <_svfprintf_r+0xaae>
 800ad96:	3b19      	subs	r3, #25
 800ad98:	3407      	adds	r4, #7
 800ad9a:	439c      	bics	r4, r3
 800ad9c:	0022      	movs	r2, r4
 800ad9e:	ca18      	ldmia	r2!, {r3, r4}
 800ada0:	9306      	str	r3, [sp, #24]
 800ada2:	9407      	str	r4, [sp, #28]
 800ada4:	920d      	str	r2, [sp, #52]	; 0x34
 800ada6:	4bc9      	ldr	r3, [pc, #804]	; (800b0cc <_svfprintf_r+0xdc4>)
 800ada8:	401e      	ands	r6, r3
 800adaa:	2300      	movs	r3, #0
 800adac:	221b      	movs	r2, #27
 800adae:	a91e      	add	r1, sp, #120	; 0x78
 800adb0:	1852      	adds	r2, r2, r1
 800adb2:	2100      	movs	r1, #0
 800adb4:	e430      	b.n	800a618 <_svfprintf_r+0x310>
 800adb6:	0022      	movs	r2, r4
 800adb8:	ca08      	ldmia	r2!, {r3}
 800adba:	0031      	movs	r1, r6
 800adbc:	920d      	str	r2, [sp, #52]	; 0x34
 800adbe:	2210      	movs	r2, #16
 800adc0:	4011      	ands	r1, r2
 800adc2:	4216      	tst	r6, r2
 800adc4:	d002      	beq.n	800adcc <_svfprintf_r+0xac4>
 800adc6:	9306      	str	r3, [sp, #24]
 800adc8:	9007      	str	r0, [sp, #28]
 800adca:	e7ec      	b.n	800ada6 <_svfprintf_r+0xa9e>
 800adcc:	2240      	movs	r2, #64	; 0x40
 800adce:	0030      	movs	r0, r6
 800add0:	4010      	ands	r0, r2
 800add2:	4216      	tst	r6, r2
 800add4:	d003      	beq.n	800adde <_svfprintf_r+0xad6>
 800add6:	b29b      	uxth	r3, r3
 800add8:	9306      	str	r3, [sp, #24]
 800adda:	9107      	str	r1, [sp, #28]
 800addc:	e7e3      	b.n	800ada6 <_svfprintf_r+0xa9e>
 800adde:	2280      	movs	r2, #128	; 0x80
 800ade0:	0031      	movs	r1, r6
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	4011      	ands	r1, r2
 800ade6:	4216      	tst	r6, r2
 800ade8:	d0f6      	beq.n	800add8 <_svfprintf_r+0xad0>
 800adea:	b2db      	uxtb	r3, r3
 800adec:	e7eb      	b.n	800adc6 <_svfprintf_r+0xabe>
 800adee:	0023      	movs	r3, r4
 800adf0:	cb04      	ldmia	r3!, {r2}
 800adf2:	49b7      	ldr	r1, [pc, #732]	; (800b0d0 <_svfprintf_r+0xdc8>)
 800adf4:	9206      	str	r2, [sp, #24]
 800adf6:	aa25      	add	r2, sp, #148	; 0x94
 800adf8:	8011      	strh	r1, [r2, #0]
 800adfa:	4ab6      	ldr	r2, [pc, #728]	; (800b0d4 <_svfprintf_r+0xdcc>)
 800adfc:	930d      	str	r3, [sp, #52]	; 0x34
 800adfe:	2300      	movs	r3, #0
 800ae00:	921f      	str	r2, [sp, #124]	; 0x7c
 800ae02:	2278      	movs	r2, #120	; 0x78
 800ae04:	9307      	str	r3, [sp, #28]
 800ae06:	3302      	adds	r3, #2
 800ae08:	431e      	orrs	r6, r3
 800ae0a:	920f      	str	r2, [sp, #60]	; 0x3c
 800ae0c:	e7ce      	b.n	800adac <_svfprintf_r+0xaa4>
 800ae0e:	0023      	movs	r3, r4
 800ae10:	cb04      	ldmia	r3!, {r2}
 800ae12:	2400      	movs	r4, #0
 800ae14:	930d      	str	r3, [sp, #52]	; 0x34
 800ae16:	231b      	movs	r3, #27
 800ae18:	9208      	str	r2, [sp, #32]
 800ae1a:	aa1e      	add	r2, sp, #120	; 0x78
 800ae1c:	189b      	adds	r3, r3, r2
 800ae1e:	701c      	strb	r4, [r3, #0]
 800ae20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae22:	3301      	adds	r3, #1
 800ae24:	d00e      	beq.n	800ae44 <_svfprintf_r+0xb3c>
 800ae26:	0021      	movs	r1, r4
 800ae28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae2a:	9808      	ldr	r0, [sp, #32]
 800ae2c:	f002 f83a 	bl	800cea4 <memchr>
 800ae30:	900c      	str	r0, [sp, #48]	; 0x30
 800ae32:	42a0      	cmp	r0, r4
 800ae34:	d100      	bne.n	800ae38 <_svfprintf_r+0xb30>
 800ae36:	e10d      	b.n	800b054 <_svfprintf_r+0xd4c>
 800ae38:	9a08      	ldr	r2, [sp, #32]
 800ae3a:	1a83      	subs	r3, r0, r2
 800ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3e:	0023      	movs	r3, r4
 800ae40:	940c      	str	r4, [sp, #48]	; 0x30
 800ae42:	e44e      	b.n	800a6e2 <_svfprintf_r+0x3da>
 800ae44:	9808      	ldr	r0, [sp, #32]
 800ae46:	f7f5 f95d 	bl	8000104 <strlen>
 800ae4a:	9009      	str	r0, [sp, #36]	; 0x24
 800ae4c:	e7f7      	b.n	800ae3e <_svfprintf_r+0xb36>
 800ae4e:	2310      	movs	r3, #16
 800ae50:	431e      	orrs	r6, r3
 800ae52:	2320      	movs	r3, #32
 800ae54:	0030      	movs	r0, r6
 800ae56:	4018      	ands	r0, r3
 800ae58:	421e      	tst	r6, r3
 800ae5a:	d009      	beq.n	800ae70 <_svfprintf_r+0xb68>
 800ae5c:	3b19      	subs	r3, #25
 800ae5e:	3407      	adds	r4, #7
 800ae60:	439c      	bics	r4, r3
 800ae62:	0022      	movs	r2, r4
 800ae64:	ca18      	ldmia	r2!, {r3, r4}
 800ae66:	9306      	str	r3, [sp, #24]
 800ae68:	9407      	str	r4, [sp, #28]
 800ae6a:	920d      	str	r2, [sp, #52]	; 0x34
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e79d      	b.n	800adac <_svfprintf_r+0xaa4>
 800ae70:	0023      	movs	r3, r4
 800ae72:	cb04      	ldmia	r3!, {r2}
 800ae74:	0031      	movs	r1, r6
 800ae76:	930d      	str	r3, [sp, #52]	; 0x34
 800ae78:	2310      	movs	r3, #16
 800ae7a:	4019      	ands	r1, r3
 800ae7c:	421e      	tst	r6, r3
 800ae7e:	d003      	beq.n	800ae88 <_svfprintf_r+0xb80>
 800ae80:	9206      	str	r2, [sp, #24]
 800ae82:	9007      	str	r0, [sp, #28]
 800ae84:	3b0f      	subs	r3, #15
 800ae86:	e791      	b.n	800adac <_svfprintf_r+0xaa4>
 800ae88:	2340      	movs	r3, #64	; 0x40
 800ae8a:	0030      	movs	r0, r6
 800ae8c:	4018      	ands	r0, r3
 800ae8e:	421e      	tst	r6, r3
 800ae90:	d003      	beq.n	800ae9a <_svfprintf_r+0xb92>
 800ae92:	b293      	uxth	r3, r2
 800ae94:	9306      	str	r3, [sp, #24]
 800ae96:	9107      	str	r1, [sp, #28]
 800ae98:	e7e8      	b.n	800ae6c <_svfprintf_r+0xb64>
 800ae9a:	2380      	movs	r3, #128	; 0x80
 800ae9c:	0031      	movs	r1, r6
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4019      	ands	r1, r3
 800aea2:	421e      	tst	r6, r3
 800aea4:	d003      	beq.n	800aeae <_svfprintf_r+0xba6>
 800aea6:	b2d3      	uxtb	r3, r2
 800aea8:	9306      	str	r3, [sp, #24]
 800aeaa:	9007      	str	r0, [sp, #28]
 800aeac:	e7de      	b.n	800ae6c <_svfprintf_r+0xb64>
 800aeae:	9206      	str	r2, [sp, #24]
 800aeb0:	e7f1      	b.n	800ae96 <_svfprintf_r+0xb8e>
 800aeb2:	4b89      	ldr	r3, [pc, #548]	; (800b0d8 <_svfprintf_r+0xdd0>)
 800aeb4:	0030      	movs	r0, r6
 800aeb6:	931f      	str	r3, [sp, #124]	; 0x7c
 800aeb8:	2320      	movs	r3, #32
 800aeba:	4018      	ands	r0, r3
 800aebc:	421e      	tst	r6, r3
 800aebe:	d01a      	beq.n	800aef6 <_svfprintf_r+0xbee>
 800aec0:	3b19      	subs	r3, #25
 800aec2:	3407      	adds	r4, #7
 800aec4:	439c      	bics	r4, r3
 800aec6:	0022      	movs	r2, r4
 800aec8:	ca18      	ldmia	r2!, {r3, r4}
 800aeca:	9306      	str	r3, [sp, #24]
 800aecc:	9407      	str	r4, [sp, #28]
 800aece:	920d      	str	r2, [sp, #52]	; 0x34
 800aed0:	07f3      	lsls	r3, r6, #31
 800aed2:	d50a      	bpl.n	800aeea <_svfprintf_r+0xbe2>
 800aed4:	9b06      	ldr	r3, [sp, #24]
 800aed6:	9a07      	ldr	r2, [sp, #28]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	d006      	beq.n	800aeea <_svfprintf_r+0xbe2>
 800aedc:	2230      	movs	r2, #48	; 0x30
 800aede:	ab25      	add	r3, sp, #148	; 0x94
 800aee0:	701a      	strb	r2, [r3, #0]
 800aee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aee4:	705a      	strb	r2, [r3, #1]
 800aee6:	2302      	movs	r3, #2
 800aee8:	431e      	orrs	r6, r3
 800aeea:	4b78      	ldr	r3, [pc, #480]	; (800b0cc <_svfprintf_r+0xdc4>)
 800aeec:	401e      	ands	r6, r3
 800aeee:	2302      	movs	r3, #2
 800aef0:	e75c      	b.n	800adac <_svfprintf_r+0xaa4>
 800aef2:	4b78      	ldr	r3, [pc, #480]	; (800b0d4 <_svfprintf_r+0xdcc>)
 800aef4:	e7de      	b.n	800aeb4 <_svfprintf_r+0xbac>
 800aef6:	0023      	movs	r3, r4
 800aef8:	cb04      	ldmia	r3!, {r2}
 800aefa:	0031      	movs	r1, r6
 800aefc:	930d      	str	r3, [sp, #52]	; 0x34
 800aefe:	2310      	movs	r3, #16
 800af00:	4019      	ands	r1, r3
 800af02:	421e      	tst	r6, r3
 800af04:	d002      	beq.n	800af0c <_svfprintf_r+0xc04>
 800af06:	9206      	str	r2, [sp, #24]
 800af08:	9007      	str	r0, [sp, #28]
 800af0a:	e7e1      	b.n	800aed0 <_svfprintf_r+0xbc8>
 800af0c:	2340      	movs	r3, #64	; 0x40
 800af0e:	0030      	movs	r0, r6
 800af10:	4018      	ands	r0, r3
 800af12:	421e      	tst	r6, r3
 800af14:	d003      	beq.n	800af1e <_svfprintf_r+0xc16>
 800af16:	b293      	uxth	r3, r2
 800af18:	9306      	str	r3, [sp, #24]
 800af1a:	9107      	str	r1, [sp, #28]
 800af1c:	e7d8      	b.n	800aed0 <_svfprintf_r+0xbc8>
 800af1e:	2380      	movs	r3, #128	; 0x80
 800af20:	0031      	movs	r1, r6
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4019      	ands	r1, r3
 800af26:	421e      	tst	r6, r3
 800af28:	d002      	beq.n	800af30 <_svfprintf_r+0xc28>
 800af2a:	b2d3      	uxtb	r3, r2
 800af2c:	9306      	str	r3, [sp, #24]
 800af2e:	e7eb      	b.n	800af08 <_svfprintf_r+0xc00>
 800af30:	9206      	str	r2, [sp, #24]
 800af32:	e7f2      	b.n	800af1a <_svfprintf_r+0xc12>
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10a      	bne.n	800af50 <_svfprintf_r+0xc48>
 800af3a:	9b06      	ldr	r3, [sp, #24]
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d807      	bhi.n	800af50 <_svfprintf_r+0xc48>
 800af40:	23e7      	movs	r3, #231	; 0xe7
 800af42:	aa1e      	add	r2, sp, #120	; 0x78
 800af44:	189b      	adds	r3, r3, r2
 800af46:	9a06      	ldr	r2, [sp, #24]
 800af48:	3230      	adds	r2, #48	; 0x30
 800af4a:	701a      	strb	r2, [r3, #0]
 800af4c:	f000 fc18 	bl	800b780 <_svfprintf_r+0x1478>
 800af50:	2680      	movs	r6, #128	; 0x80
 800af52:	2300      	movs	r3, #0
 800af54:	00f6      	lsls	r6, r6, #3
 800af56:	930e      	str	r3, [sp, #56]	; 0x38
 800af58:	ad58      	add	r5, sp, #352	; 0x160
 800af5a:	4026      	ands	r6, r4
 800af5c:	220a      	movs	r2, #10
 800af5e:	9806      	ldr	r0, [sp, #24]
 800af60:	9907      	ldr	r1, [sp, #28]
 800af62:	2300      	movs	r3, #0
 800af64:	f7f5 fa9e 	bl	80004a4 <__aeabi_uldivmod>
 800af68:	1e6b      	subs	r3, r5, #1
 800af6a:	3230      	adds	r2, #48	; 0x30
 800af6c:	9308      	str	r3, [sp, #32]
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af72:	900c      	str	r0, [sp, #48]	; 0x30
 800af74:	3301      	adds	r3, #1
 800af76:	9110      	str	r1, [sp, #64]	; 0x40
 800af78:	930e      	str	r3, [sp, #56]	; 0x38
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	d01d      	beq.n	800afba <_svfprintf_r+0xcb2>
 800af7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d118      	bne.n	800afba <_svfprintf_r+0xcb2>
 800af88:	2aff      	cmp	r2, #255	; 0xff
 800af8a:	d016      	beq.n	800afba <_svfprintf_r+0xcb2>
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <_svfprintf_r+0xc90>
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	2b09      	cmp	r3, #9
 800af96:	d910      	bls.n	800afba <_svfprintf_r+0xcb2>
 800af98:	9b08      	ldr	r3, [sp, #32]
 800af9a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af9c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800af9e:	1a9b      	subs	r3, r3, r2
 800afa0:	0018      	movs	r0, r3
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	f7fd ffd1 	bl	8008f4a <strncpy>
 800afa8:	2200      	movs	r2, #0
 800afaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afac:	920e      	str	r2, [sp, #56]	; 0x38
 800afae:	785b      	ldrb	r3, [r3, #1]
 800afb0:	1e5a      	subs	r2, r3, #1
 800afb2:	4193      	sbcs	r3, r2
 800afb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afb6:	18d3      	adds	r3, r2, r3
 800afb8:	9312      	str	r3, [sp, #72]	; 0x48
 800afba:	9b07      	ldr	r3, [sp, #28]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10f      	bne.n	800afe0 <_svfprintf_r+0xcd8>
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b09      	cmp	r3, #9
 800afc4:	d80c      	bhi.n	800afe0 <_svfprintf_r+0xcd8>
 800afc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc8:	9a08      	ldr	r2, [sp, #32]
 800afca:	9319      	str	r3, [sp, #100]	; 0x64
 800afcc:	ab58      	add	r3, sp, #352	; 0x160
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	2300      	movs	r3, #0
 800afd4:	0026      	movs	r6, r4
 800afd6:	930c      	str	r3, [sp, #48]	; 0x30
 800afd8:	001d      	movs	r5, r3
 800afda:	9310      	str	r3, [sp, #64]	; 0x40
 800afdc:	9311      	str	r3, [sp, #68]	; 0x44
 800afde:	e4f2      	b.n	800a9c6 <_svfprintf_r+0x6be>
 800afe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe2:	9d08      	ldr	r5, [sp, #32]
 800afe4:	9306      	str	r3, [sp, #24]
 800afe6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afe8:	9307      	str	r3, [sp, #28]
 800afea:	e7b7      	b.n	800af5c <_svfprintf_r+0xc54>
 800afec:	200f      	movs	r0, #15
 800afee:	ab58      	add	r3, sp, #352	; 0x160
 800aff0:	9308      	str	r3, [sp, #32]
 800aff2:	9b08      	ldr	r3, [sp, #32]
 800aff4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800aff6:	3b01      	subs	r3, #1
 800aff8:	9308      	str	r3, [sp, #32]
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	4003      	ands	r3, r0
 800affe:	5cd3      	ldrb	r3, [r2, r3]
 800b000:	9a08      	ldr	r2, [sp, #32]
 800b002:	7013      	strb	r3, [r2, #0]
 800b004:	9b07      	ldr	r3, [sp, #28]
 800b006:	0719      	lsls	r1, r3, #28
 800b008:	9b06      	ldr	r3, [sp, #24]
 800b00a:	091a      	lsrs	r2, r3, #4
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	4311      	orrs	r1, r2
 800b010:	091b      	lsrs	r3, r3, #4
 800b012:	9307      	str	r3, [sp, #28]
 800b014:	000b      	movs	r3, r1
 800b016:	9a07      	ldr	r2, [sp, #28]
 800b018:	9106      	str	r1, [sp, #24]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	d1e9      	bne.n	800aff2 <_svfprintf_r+0xcea>
 800b01e:	e7d2      	b.n	800afc6 <_svfprintf_r+0xcbe>
 800b020:	aa58      	add	r2, sp, #352	; 0x160
 800b022:	9208      	str	r2, [sp, #32]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1ce      	bne.n	800afc6 <_svfprintf_r+0xcbe>
 800b028:	07f6      	lsls	r6, r6, #31
 800b02a:	d5cc      	bpl.n	800afc6 <_svfprintf_r+0xcbe>
 800b02c:	aa1e      	add	r2, sp, #120	; 0x78
 800b02e:	33e7      	adds	r3, #231	; 0xe7
 800b030:	189b      	adds	r3, r3, r2
 800b032:	2230      	movs	r2, #48	; 0x30
 800b034:	e789      	b.n	800af4a <_svfprintf_r+0xc42>
 800b036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d100      	bne.n	800b03e <_svfprintf_r+0xd36>
 800b03c:	e364      	b.n	800b708 <_svfprintf_r+0x1400>
 800b03e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b040:	211b      	movs	r1, #27
 800b042:	ab3f      	add	r3, sp, #252	; 0xfc
 800b044:	701a      	strb	r2, [r3, #0]
 800b046:	2200      	movs	r2, #0
 800b048:	a81e      	add	r0, sp, #120	; 0x78
 800b04a:	1809      	adds	r1, r1, r0
 800b04c:	700a      	strb	r2, [r1, #0]
 800b04e:	940d      	str	r4, [sp, #52]	; 0x34
 800b050:	f7ff fabd 	bl	800a5ce <_svfprintf_r+0x2c6>
 800b054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b056:	f7ff fb44 	bl	800a6e2 <_svfprintf_r+0x3da>
 800b05a:	2010      	movs	r0, #16
 800b05c:	1812      	adds	r2, r2, r0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	922e      	str	r2, [sp, #184]	; 0xb8
 800b062:	932d      	str	r3, [sp, #180]	; 0xb4
 800b064:	2b07      	cmp	r3, #7
 800b066:	dd08      	ble.n	800b07a <_svfprintf_r+0xd72>
 800b068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b06a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b06c:	aa2c      	add	r2, sp, #176	; 0xb0
 800b06e:	f003 fa61 	bl	800e534 <__ssprint_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	d000      	beq.n	800b078 <_svfprintf_r+0xd70>
 800b076:	e326      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b078:	a92f      	add	r1, sp, #188	; 0xbc
 800b07a:	000f      	movs	r7, r1
 800b07c:	3c10      	subs	r4, #16
 800b07e:	e4c5      	b.n	800aa0c <_svfprintf_r+0x704>
 800b080:	2010      	movs	r0, #16
 800b082:	1812      	adds	r2, r2, r0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	922e      	str	r2, [sp, #184]	; 0xb8
 800b088:	932d      	str	r3, [sp, #180]	; 0xb4
 800b08a:	2b07      	cmp	r3, #7
 800b08c:	dd08      	ble.n	800b0a0 <_svfprintf_r+0xd98>
 800b08e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b090:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b092:	aa2c      	add	r2, sp, #176	; 0xb0
 800b094:	f003 fa4e 	bl	800e534 <__ssprint_r>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d000      	beq.n	800b09e <_svfprintf_r+0xd96>
 800b09c:	e313      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b09e:	a92f      	add	r1, sp, #188	; 0xbc
 800b0a0:	000f      	movs	r7, r1
 800b0a2:	3c10      	subs	r4, #16
 800b0a4:	e50b      	b.n	800aabe <_svfprintf_r+0x7b6>
 800b0a6:	2010      	movs	r0, #16
 800b0a8:	1812      	adds	r2, r2, r0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800b0ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	dd08      	ble.n	800b0c6 <_svfprintf_r+0xdbe>
 800b0b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b0b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800b0ba:	f003 fa3b 	bl	800e534 <__ssprint_r>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d000      	beq.n	800b0c4 <_svfprintf_r+0xdbc>
 800b0c2:	e300      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b0c4:	a92f      	add	r1, sp, #188	; 0xbc
 800b0c6:	000f      	movs	r7, r1
 800b0c8:	3c10      	subs	r4, #16
 800b0ca:	e518      	b.n	800aafe <_svfprintf_r+0x7f6>
 800b0cc:	fffffbff 	.word	0xfffffbff
 800b0d0:	00007830 	.word	0x00007830
 800b0d4:	0800ffc4 	.word	0x0800ffc4
 800b0d8:	0800ffd5 	.word	0x0800ffd5
 800b0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0de:	2b65      	cmp	r3, #101	; 0x65
 800b0e0:	dc00      	bgt.n	800b0e4 <_svfprintf_r+0xddc>
 800b0e2:	e241      	b.n	800b568 <_svfprintf_r+0x1260>
 800b0e4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b0e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f7f5 f9ac 	bl	8000448 <__aeabi_dcmpeq>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d077      	beq.n	800b1e4 <_svfprintf_r+0xedc>
 800b0f4:	4bca      	ldr	r3, [pc, #808]	; (800b420 <_svfprintf_r+0x1118>)
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	607b      	str	r3, [r7, #4]
 800b0fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0fe:	3708      	adds	r7, #8
 800b100:	3301      	adds	r3, #1
 800b102:	932e      	str	r3, [sp, #184]	; 0xb8
 800b104:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b106:	3301      	adds	r3, #1
 800b108:	932d      	str	r3, [sp, #180]	; 0xb4
 800b10a:	2b07      	cmp	r3, #7
 800b10c:	dd08      	ble.n	800b120 <_svfprintf_r+0xe18>
 800b10e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b110:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b112:	aa2c      	add	r2, sp, #176	; 0xb0
 800b114:	f003 fa0e 	bl	800e534 <__ssprint_r>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d000      	beq.n	800b11e <_svfprintf_r+0xe16>
 800b11c:	e2d3      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b11e:	af2f      	add	r7, sp, #188	; 0xbc
 800b120:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b124:	4293      	cmp	r3, r2
 800b126:	db01      	blt.n	800b12c <_svfprintf_r+0xe24>
 800b128:	07f3      	lsls	r3, r6, #31
 800b12a:	d51b      	bpl.n	800b164 <_svfprintf_r+0xe5c>
 800b12c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b12e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b130:	603b      	str	r3, [r7, #0]
 800b132:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b134:	607b      	str	r3, [r7, #4]
 800b136:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b138:	3708      	adds	r7, #8
 800b13a:	189b      	adds	r3, r3, r2
 800b13c:	932e      	str	r3, [sp, #184]	; 0xb8
 800b13e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b140:	3301      	adds	r3, #1
 800b142:	932d      	str	r3, [sp, #180]	; 0xb4
 800b144:	2b07      	cmp	r3, #7
 800b146:	dd08      	ble.n	800b15a <_svfprintf_r+0xe52>
 800b148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b14a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b14c:	aa2c      	add	r2, sp, #176	; 0xb0
 800b14e:	f003 f9f1 	bl	800e534 <__ssprint_r>
 800b152:	2800      	cmp	r0, #0
 800b154:	d000      	beq.n	800b158 <_svfprintf_r+0xe50>
 800b156:	e2b6      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b158:	af2f      	add	r7, sp, #188	; 0xbc
 800b15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b15c:	2510      	movs	r5, #16
 800b15e:	1e5c      	subs	r4, r3, #1
 800b160:	2c00      	cmp	r4, #0
 800b162:	dc2e      	bgt.n	800b1c2 <_svfprintf_r+0xeba>
 800b164:	0776      	lsls	r6, r6, #29
 800b166:	d500      	bpl.n	800b16a <_svfprintf_r+0xe62>
 800b168:	e290      	b.n	800b68c <_svfprintf_r+0x1384>
 800b16a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b16c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b16e:	4293      	cmp	r3, r2
 800b170:	da00      	bge.n	800b174 <_svfprintf_r+0xe6c>
 800b172:	0013      	movs	r3, r2
 800b174:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b176:	18d3      	adds	r3, r2, r3
 800b178:	9317      	str	r3, [sp, #92]	; 0x5c
 800b17a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d007      	beq.n	800b190 <_svfprintf_r+0xe88>
 800b180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b182:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b184:	aa2c      	add	r2, sp, #176	; 0xb0
 800b186:	f003 f9d5 	bl	800e534 <__ssprint_r>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d000      	beq.n	800b190 <_svfprintf_r+0xe88>
 800b18e:	e29a      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b190:	2300      	movs	r3, #0
 800b192:	932d      	str	r3, [sp, #180]	; 0xb4
 800b194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b196:	2b00      	cmp	r3, #0
 800b198:	d000      	beq.n	800b19c <_svfprintf_r+0xe94>
 800b19a:	e2b0      	b.n	800b6fe <_svfprintf_r+0x13f6>
 800b19c:	af2f      	add	r7, sp, #188	; 0xbc
 800b19e:	e5dc      	b.n	800ad5a <_svfprintf_r+0xa52>
 800b1a0:	3210      	adds	r2, #16
 800b1a2:	607d      	str	r5, [r7, #4]
 800b1a4:	922e      	str	r2, [sp, #184]	; 0xb8
 800b1a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1a8:	2b07      	cmp	r3, #7
 800b1aa:	dd08      	ble.n	800b1be <_svfprintf_r+0xeb6>
 800b1ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b1b0:	aa2c      	add	r2, sp, #176	; 0xb0
 800b1b2:	f003 f9bf 	bl	800e534 <__ssprint_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d000      	beq.n	800b1bc <_svfprintf_r+0xeb4>
 800b1ba:	e284      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b1bc:	a92f      	add	r1, sp, #188	; 0xbc
 800b1be:	000f      	movs	r7, r1
 800b1c0:	3c10      	subs	r4, #16
 800b1c2:	0039      	movs	r1, r7
 800b1c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b1c6:	4897      	ldr	r0, [pc, #604]	; (800b424 <_svfprintf_r+0x111c>)
 800b1c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	3108      	adds	r1, #8
 800b1ce:	6038      	str	r0, [r7, #0]
 800b1d0:	2c10      	cmp	r4, #16
 800b1d2:	dce5      	bgt.n	800b1a0 <_svfprintf_r+0xe98>
 800b1d4:	607c      	str	r4, [r7, #4]
 800b1d6:	18a4      	adds	r4, r4, r2
 800b1d8:	942e      	str	r4, [sp, #184]	; 0xb8
 800b1da:	000f      	movs	r7, r1
 800b1dc:	932d      	str	r3, [sp, #180]	; 0xb4
 800b1de:	2b07      	cmp	r3, #7
 800b1e0:	ddc0      	ble.n	800b164 <_svfprintf_r+0xe5c>
 800b1e2:	e05f      	b.n	800b2a4 <_svfprintf_r+0xf9c>
 800b1e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dc78      	bgt.n	800b2dc <_svfprintf_r+0xfd4>
 800b1ea:	4b8d      	ldr	r3, [pc, #564]	; (800b420 <_svfprintf_r+0x1118>)
 800b1ec:	603b      	str	r3, [r7, #0]
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	607b      	str	r3, [r7, #4]
 800b1f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	932e      	str	r3, [sp, #184]	; 0xb8
 800b1fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800b200:	2b07      	cmp	r3, #7
 800b202:	dd08      	ble.n	800b216 <_svfprintf_r+0xf0e>
 800b204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b206:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b208:	aa2c      	add	r2, sp, #176	; 0xb0
 800b20a:	f003 f993 	bl	800e534 <__ssprint_r>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d000      	beq.n	800b214 <_svfprintf_r+0xf0c>
 800b212:	e258      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b214:	af2f      	add	r7, sp, #188	; 0xbc
 800b216:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b218:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b21a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b21c:	430b      	orrs	r3, r1
 800b21e:	2101      	movs	r1, #1
 800b220:	4031      	ands	r1, r6
 800b222:	430b      	orrs	r3, r1
 800b224:	d09e      	beq.n	800b164 <_svfprintf_r+0xe5c>
 800b226:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b228:	603b      	str	r3, [r7, #0]
 800b22a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b22c:	607b      	str	r3, [r7, #4]
 800b22e:	189a      	adds	r2, r3, r2
 800b230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b232:	922e      	str	r2, [sp, #184]	; 0xb8
 800b234:	3301      	adds	r3, #1
 800b236:	932d      	str	r3, [sp, #180]	; 0xb4
 800b238:	3708      	adds	r7, #8
 800b23a:	2b07      	cmp	r3, #7
 800b23c:	dd08      	ble.n	800b250 <_svfprintf_r+0xf48>
 800b23e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b240:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b242:	aa2c      	add	r2, sp, #176	; 0xb0
 800b244:	f003 f976 	bl	800e534 <__ssprint_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d000      	beq.n	800b24e <_svfprintf_r+0xf46>
 800b24c:	e23b      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b24e:	af2f      	add	r7, sp, #188	; 0xbc
 800b250:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800b252:	2c00      	cmp	r4, #0
 800b254:	da19      	bge.n	800b28a <_svfprintf_r+0xf82>
 800b256:	0038      	movs	r0, r7
 800b258:	2510      	movs	r5, #16
 800b25a:	4264      	negs	r4, r4
 800b25c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800b25e:	4a71      	ldr	r2, [pc, #452]	; (800b424 <_svfprintf_r+0x111c>)
 800b260:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b262:	3101      	adds	r1, #1
 800b264:	3708      	adds	r7, #8
 800b266:	6002      	str	r2, [r0, #0]
 800b268:	2c10      	cmp	r4, #16
 800b26a:	dc25      	bgt.n	800b2b8 <_svfprintf_r+0xfb0>
 800b26c:	6044      	str	r4, [r0, #4]
 800b26e:	18e4      	adds	r4, r4, r3
 800b270:	942e      	str	r4, [sp, #184]	; 0xb8
 800b272:	912d      	str	r1, [sp, #180]	; 0xb4
 800b274:	2907      	cmp	r1, #7
 800b276:	dd08      	ble.n	800b28a <_svfprintf_r+0xf82>
 800b278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b27a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b27c:	aa2c      	add	r2, sp, #176	; 0xb0
 800b27e:	f003 f959 	bl	800e534 <__ssprint_r>
 800b282:	2800      	cmp	r0, #0
 800b284:	d000      	beq.n	800b288 <_svfprintf_r+0xf80>
 800b286:	e21e      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b288:	af2f      	add	r7, sp, #188	; 0xbc
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b292:	18d2      	adds	r2, r2, r3
 800b294:	922e      	str	r2, [sp, #184]	; 0xb8
 800b296:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	3201      	adds	r2, #1
 800b29c:	922d      	str	r2, [sp, #180]	; 0xb4
 800b29e:	2a07      	cmp	r2, #7
 800b2a0:	dc00      	bgt.n	800b2a4 <_svfprintf_r+0xf9c>
 800b2a2:	e45b      	b.n	800ab5c <_svfprintf_r+0x854>
 800b2a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2a8:	aa2c      	add	r2, sp, #176	; 0xb0
 800b2aa:	f003 f943 	bl	800e534 <__ssprint_r>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d000      	beq.n	800b2b4 <_svfprintf_r+0xfac>
 800b2b2:	e208      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b2b4:	af2f      	add	r7, sp, #188	; 0xbc
 800b2b6:	e755      	b.n	800b164 <_svfprintf_r+0xe5c>
 800b2b8:	3310      	adds	r3, #16
 800b2ba:	6045      	str	r5, [r0, #4]
 800b2bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800b2be:	912d      	str	r1, [sp, #180]	; 0xb4
 800b2c0:	2907      	cmp	r1, #7
 800b2c2:	dd08      	ble.n	800b2d6 <_svfprintf_r+0xfce>
 800b2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b2c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800b2ca:	f003 f933 	bl	800e534 <__ssprint_r>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d000      	beq.n	800b2d4 <_svfprintf_r+0xfcc>
 800b2d2:	e1f8      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b2d4:	af2f      	add	r7, sp, #188	; 0xbc
 800b2d6:	0038      	movs	r0, r7
 800b2d8:	3c10      	subs	r4, #16
 800b2da:	e7bf      	b.n	800b25c <_svfprintf_r+0xf54>
 800b2dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2de:	002c      	movs	r4, r5
 800b2e0:	429d      	cmp	r5, r3
 800b2e2:	dd00      	ble.n	800b2e6 <_svfprintf_r+0xfde>
 800b2e4:	001c      	movs	r4, r3
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	dd14      	ble.n	800b314 <_svfprintf_r+0x100c>
 800b2ea:	9b08      	ldr	r3, [sp, #32]
 800b2ec:	607c      	str	r4, [r7, #4]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	18e3      	adds	r3, r4, r3
 800b2f6:	932e      	str	r3, [sp, #184]	; 0xb8
 800b2f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800b2fe:	2b07      	cmp	r3, #7
 800b300:	dd08      	ble.n	800b314 <_svfprintf_r+0x100c>
 800b302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b304:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b306:	aa2c      	add	r2, sp, #176	; 0xb0
 800b308:	f003 f914 	bl	800e534 <__ssprint_r>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d000      	beq.n	800b312 <_svfprintf_r+0x100a>
 800b310:	e1d9      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b312:	af2f      	add	r7, sp, #188	; 0xbc
 800b314:	43e3      	mvns	r3, r4
 800b316:	17db      	asrs	r3, r3, #31
 800b318:	401c      	ands	r4, r3
 800b31a:	1b2c      	subs	r4, r5, r4
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	dd18      	ble.n	800b352 <_svfprintf_r+0x104a>
 800b320:	0039      	movs	r1, r7
 800b322:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b324:	483f      	ldr	r0, [pc, #252]	; (800b424 <_svfprintf_r+0x111c>)
 800b326:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b328:	3301      	adds	r3, #1
 800b32a:	3108      	adds	r1, #8
 800b32c:	6038      	str	r0, [r7, #0]
 800b32e:	2c10      	cmp	r4, #16
 800b330:	dc7a      	bgt.n	800b428 <_svfprintf_r+0x1120>
 800b332:	607c      	str	r4, [r7, #4]
 800b334:	18a4      	adds	r4, r4, r2
 800b336:	000f      	movs	r7, r1
 800b338:	942e      	str	r4, [sp, #184]	; 0xb8
 800b33a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b33c:	2b07      	cmp	r3, #7
 800b33e:	dd08      	ble.n	800b352 <_svfprintf_r+0x104a>
 800b340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b342:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b344:	aa2c      	add	r2, sp, #176	; 0xb0
 800b346:	f003 f8f5 	bl	800e534 <__ssprint_r>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d000      	beq.n	800b350 <_svfprintf_r+0x1048>
 800b34e:	e1ba      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b350:	af2f      	add	r7, sp, #188	; 0xbc
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	195d      	adds	r5, r3, r5
 800b356:	0573      	lsls	r3, r6, #21
 800b358:	d50b      	bpl.n	800b372 <_svfprintf_r+0x106a>
 800b35a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d176      	bne.n	800b44e <_svfprintf_r+0x1146>
 800b360:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b362:	2b00      	cmp	r3, #0
 800b364:	d176      	bne.n	800b454 <_svfprintf_r+0x114c>
 800b366:	9b08      	ldr	r3, [sp, #32]
 800b368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b36a:	189b      	adds	r3, r3, r2
 800b36c:	429d      	cmp	r5, r3
 800b36e:	d900      	bls.n	800b372 <_svfprintf_r+0x106a>
 800b370:	001d      	movs	r5, r3
 800b372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b374:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b376:	4293      	cmp	r3, r2
 800b378:	db01      	blt.n	800b37e <_svfprintf_r+0x1076>
 800b37a:	07f3      	lsls	r3, r6, #31
 800b37c:	d516      	bpl.n	800b3ac <_svfprintf_r+0x10a4>
 800b37e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b380:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b386:	607b      	str	r3, [r7, #4]
 800b388:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b38a:	3708      	adds	r7, #8
 800b38c:	189b      	adds	r3, r3, r2
 800b38e:	932e      	str	r3, [sp, #184]	; 0xb8
 800b390:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b392:	3301      	adds	r3, #1
 800b394:	932d      	str	r3, [sp, #180]	; 0xb4
 800b396:	2b07      	cmp	r3, #7
 800b398:	dd08      	ble.n	800b3ac <_svfprintf_r+0x10a4>
 800b39a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b39c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b39e:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3a0:	f003 f8c8 	bl	800e534 <__ssprint_r>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d000      	beq.n	800b3aa <_svfprintf_r+0x10a2>
 800b3a8:	e18d      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b3aa:	af2f      	add	r7, sp, #188	; 0xbc
 800b3ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3ae:	9b08      	ldr	r3, [sp, #32]
 800b3b0:	4694      	mov	ip, r2
 800b3b2:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800b3b4:	4463      	add	r3, ip
 800b3b6:	1b5b      	subs	r3, r3, r5
 800b3b8:	1b14      	subs	r4, r2, r4
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	dd00      	ble.n	800b3c0 <_svfprintf_r+0x10b8>
 800b3be:	001c      	movs	r4, r3
 800b3c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	dd12      	ble.n	800b3ec <_svfprintf_r+0x10e4>
 800b3c6:	18e3      	adds	r3, r4, r3
 800b3c8:	932e      	str	r3, [sp, #184]	; 0xb8
 800b3ca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b3cc:	603d      	str	r5, [r7, #0]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	607c      	str	r4, [r7, #4]
 800b3d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	dd08      	ble.n	800b3ec <_svfprintf_r+0x10e4>
 800b3da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3de:	aa2c      	add	r2, sp, #176	; 0xb0
 800b3e0:	f003 f8a8 	bl	800e534 <__ssprint_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d000      	beq.n	800b3ea <_svfprintf_r+0x10e2>
 800b3e8:	e16d      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b3ea:	af2f      	add	r7, sp, #188	; 0xbc
 800b3ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3f0:	2510      	movs	r5, #16
 800b3f2:	1ad3      	subs	r3, r2, r3
 800b3f4:	43e2      	mvns	r2, r4
 800b3f6:	17d2      	asrs	r2, r2, #31
 800b3f8:	4014      	ands	r4, r2
 800b3fa:	1b1c      	subs	r4, r3, r4
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	dc00      	bgt.n	800b402 <_svfprintf_r+0x10fa>
 800b400:	e6b0      	b.n	800b164 <_svfprintf_r+0xe5c>
 800b402:	0039      	movs	r1, r7
 800b404:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b406:	4807      	ldr	r0, [pc, #28]	; (800b424 <_svfprintf_r+0x111c>)
 800b408:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b40a:	3301      	adds	r3, #1
 800b40c:	3108      	adds	r1, #8
 800b40e:	6038      	str	r0, [r7, #0]
 800b410:	2c10      	cmp	r4, #16
 800b412:	dd00      	ble.n	800b416 <_svfprintf_r+0x110e>
 800b414:	e096      	b.n	800b544 <_svfprintf_r+0x123c>
 800b416:	1912      	adds	r2, r2, r4
 800b418:	607c      	str	r4, [r7, #4]
 800b41a:	922e      	str	r2, [sp, #184]	; 0xb8
 800b41c:	e6dd      	b.n	800b1da <_svfprintf_r+0xed2>
 800b41e:	46c0      	nop			; (mov r8, r8)
 800b420:	0800ffe6 	.word	0x0800ffe6
 800b424:	0800fff8 	.word	0x0800fff8
 800b428:	2010      	movs	r0, #16
 800b42a:	1812      	adds	r2, r2, r0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	922e      	str	r2, [sp, #184]	; 0xb8
 800b430:	932d      	str	r3, [sp, #180]	; 0xb4
 800b432:	2b07      	cmp	r3, #7
 800b434:	dd08      	ble.n	800b448 <_svfprintf_r+0x1140>
 800b436:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b438:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b43a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b43c:	f003 f87a 	bl	800e534 <__ssprint_r>
 800b440:	2800      	cmp	r0, #0
 800b442:	d000      	beq.n	800b446 <_svfprintf_r+0x113e>
 800b444:	e13f      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b446:	a92f      	add	r1, sp, #188	; 0xbc
 800b448:	000f      	movs	r7, r1
 800b44a:	3c10      	subs	r4, #16
 800b44c:	e768      	b.n	800b320 <_svfprintf_r+0x1018>
 800b44e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b450:	2b00      	cmp	r3, #0
 800b452:	d05d      	beq.n	800b510 <_svfprintf_r+0x1208>
 800b454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b456:	3b01      	subs	r3, #1
 800b458:	9310      	str	r3, [sp, #64]	; 0x40
 800b45a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b45c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b462:	607b      	str	r3, [r7, #4]
 800b464:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b466:	3708      	adds	r7, #8
 800b468:	189b      	adds	r3, r3, r2
 800b46a:	932e      	str	r3, [sp, #184]	; 0xb8
 800b46c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b46e:	3301      	adds	r3, #1
 800b470:	932d      	str	r3, [sp, #180]	; 0xb4
 800b472:	2b07      	cmp	r3, #7
 800b474:	dd08      	ble.n	800b488 <_svfprintf_r+0x1180>
 800b476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b478:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b47a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b47c:	f003 f85a 	bl	800e534 <__ssprint_r>
 800b480:	2800      	cmp	r0, #0
 800b482:	d000      	beq.n	800b486 <_svfprintf_r+0x117e>
 800b484:	e11f      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b486:	af2f      	add	r7, sp, #188	; 0xbc
 800b488:	9b08      	ldr	r3, [sp, #32]
 800b48a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b48c:	189c      	adds	r4, r3, r2
 800b48e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b490:	1b64      	subs	r4, r4, r5
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	429c      	cmp	r4, r3
 800b496:	dd00      	ble.n	800b49a <_svfprintf_r+0x1192>
 800b498:	001c      	movs	r4, r3
 800b49a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b49c:	2c00      	cmp	r4, #0
 800b49e:	dd12      	ble.n	800b4c6 <_svfprintf_r+0x11be>
 800b4a0:	18e3      	adds	r3, r4, r3
 800b4a2:	932e      	str	r3, [sp, #184]	; 0xb8
 800b4a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b4a6:	603d      	str	r5, [r7, #0]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	607c      	str	r4, [r7, #4]
 800b4ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	2b07      	cmp	r3, #7
 800b4b2:	dd08      	ble.n	800b4c6 <_svfprintf_r+0x11be>
 800b4b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800b4ba:	f003 f83b 	bl	800e534 <__ssprint_r>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d000      	beq.n	800b4c4 <_svfprintf_r+0x11bc>
 800b4c2:	e100      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b4c4:	af2f      	add	r7, sp, #188	; 0xbc
 800b4c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4c8:	781a      	ldrb	r2, [r3, #0]
 800b4ca:	43e3      	mvns	r3, r4
 800b4cc:	17db      	asrs	r3, r3, #31
 800b4ce:	401c      	ands	r4, r3
 800b4d0:	1b14      	subs	r4, r2, r4
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	dd18      	ble.n	800b508 <_svfprintf_r+0x1200>
 800b4d6:	0039      	movs	r1, r7
 800b4d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b4da:	48aa      	ldr	r0, [pc, #680]	; (800b784 <_svfprintf_r+0x147c>)
 800b4dc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b4de:	3301      	adds	r3, #1
 800b4e0:	3108      	adds	r1, #8
 800b4e2:	6038      	str	r0, [r7, #0]
 800b4e4:	2c10      	cmp	r4, #16
 800b4e6:	dc1a      	bgt.n	800b51e <_svfprintf_r+0x1216>
 800b4e8:	1912      	adds	r2, r2, r4
 800b4ea:	607c      	str	r4, [r7, #4]
 800b4ec:	922e      	str	r2, [sp, #184]	; 0xb8
 800b4ee:	000f      	movs	r7, r1
 800b4f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800b4f2:	2b07      	cmp	r3, #7
 800b4f4:	dd08      	ble.n	800b508 <_svfprintf_r+0x1200>
 800b4f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b4fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800b4fc:	f003 f81a 	bl	800e534 <__ssprint_r>
 800b500:	2800      	cmp	r0, #0
 800b502:	d000      	beq.n	800b506 <_svfprintf_r+0x11fe>
 800b504:	e0df      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b506:	af2f      	add	r7, sp, #188	; 0xbc
 800b508:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	18ed      	adds	r5, r5, r3
 800b50e:	e724      	b.n	800b35a <_svfprintf_r+0x1052>
 800b510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b512:	3b01      	subs	r3, #1
 800b514:	9312      	str	r3, [sp, #72]	; 0x48
 800b516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b518:	3b01      	subs	r3, #1
 800b51a:	9311      	str	r3, [sp, #68]	; 0x44
 800b51c:	e79d      	b.n	800b45a <_svfprintf_r+0x1152>
 800b51e:	2010      	movs	r0, #16
 800b520:	1812      	adds	r2, r2, r0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	922e      	str	r2, [sp, #184]	; 0xb8
 800b526:	932d      	str	r3, [sp, #180]	; 0xb4
 800b528:	2b07      	cmp	r3, #7
 800b52a:	dd08      	ble.n	800b53e <_svfprintf_r+0x1236>
 800b52c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b52e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b530:	aa2c      	add	r2, sp, #176	; 0xb0
 800b532:	f002 ffff 	bl	800e534 <__ssprint_r>
 800b536:	2800      	cmp	r0, #0
 800b538:	d000      	beq.n	800b53c <_svfprintf_r+0x1234>
 800b53a:	e0c4      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b53c:	a92f      	add	r1, sp, #188	; 0xbc
 800b53e:	000f      	movs	r7, r1
 800b540:	3c10      	subs	r4, #16
 800b542:	e7c8      	b.n	800b4d6 <_svfprintf_r+0x11ce>
 800b544:	3210      	adds	r2, #16
 800b546:	607d      	str	r5, [r7, #4]
 800b548:	922e      	str	r2, [sp, #184]	; 0xb8
 800b54a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b54c:	2b07      	cmp	r3, #7
 800b54e:	dd08      	ble.n	800b562 <_svfprintf_r+0x125a>
 800b550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b552:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b554:	aa2c      	add	r2, sp, #176	; 0xb0
 800b556:	f002 ffed 	bl	800e534 <__ssprint_r>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d000      	beq.n	800b560 <_svfprintf_r+0x1258>
 800b55e:	e0b2      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b560:	a92f      	add	r1, sp, #188	; 0xbc
 800b562:	000f      	movs	r7, r1
 800b564:	3c10      	subs	r4, #16
 800b566:	e74c      	b.n	800b402 <_svfprintf_r+0x10fa>
 800b568:	003c      	movs	r4, r7
 800b56a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b56c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b56e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b570:	3101      	adds	r1, #1
 800b572:	3301      	adds	r3, #1
 800b574:	3408      	adds	r4, #8
 800b576:	2a01      	cmp	r2, #1
 800b578:	dc03      	bgt.n	800b582 <_svfprintf_r+0x127a>
 800b57a:	2201      	movs	r2, #1
 800b57c:	4216      	tst	r6, r2
 800b57e:	d100      	bne.n	800b582 <_svfprintf_r+0x127a>
 800b580:	e07f      	b.n	800b682 <_svfprintf_r+0x137a>
 800b582:	9a08      	ldr	r2, [sp, #32]
 800b584:	912e      	str	r1, [sp, #184]	; 0xb8
 800b586:	603a      	str	r2, [r7, #0]
 800b588:	2201      	movs	r2, #1
 800b58a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b58c:	607a      	str	r2, [r7, #4]
 800b58e:	2b07      	cmp	r3, #7
 800b590:	dd08      	ble.n	800b5a4 <_svfprintf_r+0x129c>
 800b592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b594:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b596:	aa2c      	add	r2, sp, #176	; 0xb0
 800b598:	f002 ffcc 	bl	800e534 <__ssprint_r>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d000      	beq.n	800b5a2 <_svfprintf_r+0x129a>
 800b5a0:	e091      	b.n	800b6c6 <_svfprintf_r+0x13be>
 800b5a2:	ac2f      	add	r4, sp, #188	; 0xbc
 800b5a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b5a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b5ac:	6063      	str	r3, [r4, #4]
 800b5ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b5b0:	3408      	adds	r4, #8
 800b5b2:	189b      	adds	r3, r3, r2
 800b5b4:	932e      	str	r3, [sp, #184]	; 0xb8
 800b5b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	932d      	str	r3, [sp, #180]	; 0xb4
 800b5bc:	2b07      	cmp	r3, #7
 800b5be:	dd07      	ble.n	800b5d0 <_svfprintf_r+0x12c8>
 800b5c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b5c4:	aa2c      	add	r2, sp, #176	; 0xb0
 800b5c6:	f002 ffb5 	bl	800e534 <__ssprint_r>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d17b      	bne.n	800b6c6 <_svfprintf_r+0x13be>
 800b5ce:	ac2f      	add	r4, sp, #188	; 0xbc
 800b5d0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b5d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5dc:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800b5de:	1e5d      	subs	r5, r3, #1
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f7f4 ff31 	bl	8000448 <__aeabi_dcmpeq>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d126      	bne.n	800b638 <_svfprintf_r+0x1330>
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	1e7b      	subs	r3, r7, #1
 800b5f6:	3201      	adds	r2, #1
 800b5f8:	185b      	adds	r3, r3, r1
 800b5fa:	6065      	str	r5, [r4, #4]
 800b5fc:	932e      	str	r3, [sp, #184]	; 0xb8
 800b5fe:	922d      	str	r2, [sp, #180]	; 0xb4
 800b600:	3408      	adds	r4, #8
 800b602:	2a07      	cmp	r2, #7
 800b604:	dd07      	ble.n	800b616 <_svfprintf_r+0x130e>
 800b606:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b608:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b60a:	aa2c      	add	r2, sp, #176	; 0xb0
 800b60c:	f002 ff92 	bl	800e534 <__ssprint_r>
 800b610:	2800      	cmp	r0, #0
 800b612:	d158      	bne.n	800b6c6 <_svfprintf_r+0x13be>
 800b614:	ac2f      	add	r4, sp, #188	; 0xbc
 800b616:	ab28      	add	r3, sp, #160	; 0xa0
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b61c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b61e:	6063      	str	r3, [r4, #4]
 800b620:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b622:	189b      	adds	r3, r3, r2
 800b624:	932e      	str	r3, [sp, #184]	; 0xb8
 800b626:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b628:	3301      	adds	r3, #1
 800b62a:	932d      	str	r3, [sp, #180]	; 0xb4
 800b62c:	2b07      	cmp	r3, #7
 800b62e:	dd00      	ble.n	800b632 <_svfprintf_r+0x132a>
 800b630:	e638      	b.n	800b2a4 <_svfprintf_r+0xf9c>
 800b632:	3408      	adds	r4, #8
 800b634:	0027      	movs	r7, r4
 800b636:	e595      	b.n	800b164 <_svfprintf_r+0xe5c>
 800b638:	2710      	movs	r7, #16
 800b63a:	2d00      	cmp	r5, #0
 800b63c:	ddeb      	ble.n	800b616 <_svfprintf_r+0x130e>
 800b63e:	0021      	movs	r1, r4
 800b640:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b642:	4850      	ldr	r0, [pc, #320]	; (800b784 <_svfprintf_r+0x147c>)
 800b644:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b646:	3301      	adds	r3, #1
 800b648:	3108      	adds	r1, #8
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	2d10      	cmp	r5, #16
 800b64e:	dc07      	bgt.n	800b660 <_svfprintf_r+0x1358>
 800b650:	6065      	str	r5, [r4, #4]
 800b652:	000c      	movs	r4, r1
 800b654:	18ad      	adds	r5, r5, r2
 800b656:	952e      	str	r5, [sp, #184]	; 0xb8
 800b658:	932d      	str	r3, [sp, #180]	; 0xb4
 800b65a:	2b07      	cmp	r3, #7
 800b65c:	dddb      	ble.n	800b616 <_svfprintf_r+0x130e>
 800b65e:	e7d2      	b.n	800b606 <_svfprintf_r+0x12fe>
 800b660:	3210      	adds	r2, #16
 800b662:	6067      	str	r7, [r4, #4]
 800b664:	922e      	str	r2, [sp, #184]	; 0xb8
 800b666:	932d      	str	r3, [sp, #180]	; 0xb4
 800b668:	2b07      	cmp	r3, #7
 800b66a:	dd07      	ble.n	800b67c <_svfprintf_r+0x1374>
 800b66c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b66e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b670:	aa2c      	add	r2, sp, #176	; 0xb0
 800b672:	f002 ff5f 	bl	800e534 <__ssprint_r>
 800b676:	2800      	cmp	r0, #0
 800b678:	d125      	bne.n	800b6c6 <_svfprintf_r+0x13be>
 800b67a:	a92f      	add	r1, sp, #188	; 0xbc
 800b67c:	000c      	movs	r4, r1
 800b67e:	3d10      	subs	r5, #16
 800b680:	e7dd      	b.n	800b63e <_svfprintf_r+0x1336>
 800b682:	9808      	ldr	r0, [sp, #32]
 800b684:	912e      	str	r1, [sp, #184]	; 0xb8
 800b686:	c705      	stmia	r7!, {r0, r2}
 800b688:	932d      	str	r3, [sp, #180]	; 0xb4
 800b68a:	e7e6      	b.n	800b65a <_svfprintf_r+0x1352>
 800b68c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b68e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b690:	2510      	movs	r5, #16
 800b692:	1a9c      	subs	r4, r3, r2
 800b694:	2c00      	cmp	r4, #0
 800b696:	dc00      	bgt.n	800b69a <_svfprintf_r+0x1392>
 800b698:	e567      	b.n	800b16a <_svfprintf_r+0xe62>
 800b69a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800b69c:	493a      	ldr	r1, [pc, #232]	; (800b788 <_svfprintf_r+0x1480>)
 800b69e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	6039      	str	r1, [r7, #0]
 800b6a4:	2c10      	cmp	r4, #16
 800b6a6:	dc19      	bgt.n	800b6dc <_svfprintf_r+0x13d4>
 800b6a8:	607c      	str	r4, [r7, #4]
 800b6aa:	18a4      	adds	r4, r4, r2
 800b6ac:	942e      	str	r4, [sp, #184]	; 0xb8
 800b6ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800b6b0:	2b07      	cmp	r3, #7
 800b6b2:	dc00      	bgt.n	800b6b6 <_svfprintf_r+0x13ae>
 800b6b4:	e559      	b.n	800b16a <_svfprintf_r+0xe62>
 800b6b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800b6bc:	f002 ff3a 	bl	800e534 <__ssprint_r>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d100      	bne.n	800b6c6 <_svfprintf_r+0x13be>
 800b6c4:	e551      	b.n	800b16a <_svfprintf_r+0xe62>
 800b6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <_svfprintf_r+0x13c8>
 800b6cc:	f7ff f845 	bl	800a75a <_svfprintf_r+0x452>
 800b6d0:	0019      	movs	r1, r3
 800b6d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6d4:	f7fd fd80 	bl	80091d8 <_free_r>
 800b6d8:	f7ff f83f 	bl	800a75a <_svfprintf_r+0x452>
 800b6dc:	3210      	adds	r2, #16
 800b6de:	607d      	str	r5, [r7, #4]
 800b6e0:	922e      	str	r2, [sp, #184]	; 0xb8
 800b6e2:	932d      	str	r3, [sp, #180]	; 0xb4
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	2b07      	cmp	r3, #7
 800b6e8:	dd07      	ble.n	800b6fa <_svfprintf_r+0x13f2>
 800b6ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b6ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800b6f0:	f002 ff20 	bl	800e534 <__ssprint_r>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d1e6      	bne.n	800b6c6 <_svfprintf_r+0x13be>
 800b6f8:	af2f      	add	r7, sp, #188	; 0xbc
 800b6fa:	3c10      	subs	r4, #16
 800b6fc:	e7cd      	b.n	800b69a <_svfprintf_r+0x1392>
 800b6fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b700:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b702:	f7fd fd69 	bl	80091d8 <_free_r>
 800b706:	e549      	b.n	800b19c <_svfprintf_r+0xe94>
 800b708:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <_svfprintf_r+0x140a>
 800b70e:	f7ff f824 	bl	800a75a <_svfprintf_r+0x452>
 800b712:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b714:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b716:	aa2c      	add	r2, sp, #176	; 0xb0
 800b718:	f002 ff0c 	bl	800e534 <__ssprint_r>
 800b71c:	f7ff f81d 	bl	800a75a <_svfprintf_r+0x452>
 800b720:	0034      	movs	r4, r6
 800b722:	2a00      	cmp	r2, #0
 800b724:	d101      	bne.n	800b72a <_svfprintf_r+0x1422>
 800b726:	f7fe ff8c 	bl	800a642 <_svfprintf_r+0x33a>
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <_svfprintf_r+0x142a>
 800b72e:	f7ff fc01 	bl	800af34 <_svfprintf_r+0xc2c>
 800b732:	2b02      	cmp	r3, #2
 800b734:	d100      	bne.n	800b738 <_svfprintf_r+0x1430>
 800b736:	e459      	b.n	800afec <_svfprintf_r+0xce4>
 800b738:	2507      	movs	r5, #7
 800b73a:	ab58      	add	r3, sp, #352	; 0x160
 800b73c:	9308      	str	r3, [sp, #32]
 800b73e:	9a08      	ldr	r2, [sp, #32]
 800b740:	0013      	movs	r3, r2
 800b742:	3b01      	subs	r3, #1
 800b744:	9308      	str	r3, [sp, #32]
 800b746:	9b06      	ldr	r3, [sp, #24]
 800b748:	9908      	ldr	r1, [sp, #32]
 800b74a:	402b      	ands	r3, r5
 800b74c:	3330      	adds	r3, #48	; 0x30
 800b74e:	700b      	strb	r3, [r1, #0]
 800b750:	9907      	ldr	r1, [sp, #28]
 800b752:	074e      	lsls	r6, r1, #29
 800b754:	9906      	ldr	r1, [sp, #24]
 800b756:	08c8      	lsrs	r0, r1, #3
 800b758:	9907      	ldr	r1, [sp, #28]
 800b75a:	4306      	orrs	r6, r0
 800b75c:	08c9      	lsrs	r1, r1, #3
 800b75e:	9107      	str	r1, [sp, #28]
 800b760:	0031      	movs	r1, r6
 800b762:	9807      	ldr	r0, [sp, #28]
 800b764:	9606      	str	r6, [sp, #24]
 800b766:	4301      	orrs	r1, r0
 800b768:	d1e9      	bne.n	800b73e <_svfprintf_r+0x1436>
 800b76a:	07e1      	lsls	r1, r4, #31
 800b76c:	d400      	bmi.n	800b770 <_svfprintf_r+0x1468>
 800b76e:	e42a      	b.n	800afc6 <_svfprintf_r+0xcbe>
 800b770:	2b30      	cmp	r3, #48	; 0x30
 800b772:	d100      	bne.n	800b776 <_svfprintf_r+0x146e>
 800b774:	e427      	b.n	800afc6 <_svfprintf_r+0xcbe>
 800b776:	2130      	movs	r1, #48	; 0x30
 800b778:	9b08      	ldr	r3, [sp, #32]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	7019      	strb	r1, [r3, #0]
 800b77e:	1e93      	subs	r3, r2, #2
 800b780:	9308      	str	r3, [sp, #32]
 800b782:	e420      	b.n	800afc6 <_svfprintf_r+0xcbe>
 800b784:	0800fff8 	.word	0x0800fff8
 800b788:	0800ffe8 	.word	0x0800ffe8

0800b78c <__ssvfscanf_r>:
 800b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b78e:	4ca7      	ldr	r4, [pc, #668]	; (800ba2c <__ssvfscanf_r+0x2a0>)
 800b790:	44a5      	add	sp, r4
 800b792:	af02      	add	r7, sp, #8
 800b794:	633b      	str	r3, [r7, #48]	; 0x30
 800b796:	000b      	movs	r3, r1
 800b798:	6378      	str	r0, [r7, #52]	; 0x34
 800b79a:	6479      	str	r1, [r7, #68]	; 0x44
 800b79c:	61ba      	str	r2, [r7, #24]
 800b79e:	220c      	movs	r2, #12
 800b7a0:	5e9a      	ldrsh	r2, [r3, r2]
 800b7a2:	2380      	movs	r3, #128	; 0x80
 800b7a4:	019b      	lsls	r3, r3, #6
 800b7a6:	421a      	tst	r2, r3
 800b7a8:	d105      	bne.n	800b7b6 <__ssvfscanf_r+0x2a>
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	818b      	strh	r3, [r1, #12]
 800b7ae:	4aa0      	ldr	r2, [pc, #640]	; (800ba30 <__ssvfscanf_r+0x2a4>)
 800b7b0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	664b      	str	r3, [r1, #100]	; 0x64
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	69ba      	ldr	r2, [r7, #24]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	3201      	adds	r2, #1
 800b7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7ce:	61ba      	str	r2, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d100      	bne.n	800b7d6 <__ssvfscanf_r+0x4a>
 800b7d4:	e0d7      	b.n	800b986 <__ssvfscanf_r+0x1fa>
 800b7d6:	2608      	movs	r6, #8
 800b7d8:	2108      	movs	r1, #8
 800b7da:	4a96      	ldr	r2, [pc, #600]	; (800ba34 <__ssvfscanf_r+0x2a8>)
 800b7dc:	5cd2      	ldrb	r2, [r2, r3]
 800b7de:	4016      	ands	r6, r2
 800b7e0:	420a      	tst	r2, r1
 800b7e2:	d01d      	beq.n	800b820 <__ssvfscanf_r+0x94>
 800b7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dd12      	ble.n	800b812 <__ssvfscanf_r+0x86>
 800b7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ee:	4991      	ldr	r1, [pc, #580]	; (800ba34 <__ssvfscanf_r+0x2a8>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	781a      	ldrb	r2, [r3, #0]
 800b7f4:	5c8a      	ldrb	r2, [r1, r2]
 800b7f6:	2108      	movs	r1, #8
 800b7f8:	420a      	tst	r2, r1
 800b7fa:	d0e3      	beq.n	800b7c4 <__ssvfscanf_r+0x38>
 800b7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b800:	3201      	adds	r2, #1
 800b802:	63ba      	str	r2, [r7, #56]	; 0x38
 800b804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b806:	3301      	adds	r3, #1
 800b808:	6852      	ldr	r2, [r2, #4]
 800b80a:	600b      	str	r3, [r1, #0]
 800b80c:	3a01      	subs	r2, #1
 800b80e:	604a      	str	r2, [r1, #4]
 800b810:	e7e8      	b.n	800b7e4 <__ssvfscanf_r+0x58>
 800b812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b816:	f002 ff4d 	bl	800e6b4 <__ssrefill_r>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d0e6      	beq.n	800b7ec <__ssvfscanf_r+0x60>
 800b81e:	e7d1      	b.n	800b7c4 <__ssvfscanf_r+0x38>
 800b820:	2b25      	cmp	r3, #37	; 0x25
 800b822:	d165      	bne.n	800b8f0 <__ssvfscanf_r+0x164>
 800b824:	250a      	movs	r5, #10
 800b826:	2480      	movs	r4, #128	; 0x80
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b82c:	3b16      	subs	r3, #22
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	3101      	adds	r1, #1
 800b832:	61b9      	str	r1, [r7, #24]
 800b834:	7811      	ldrb	r1, [r2, #0]
 800b836:	0008      	movs	r0, r1
 800b838:	3825      	subs	r0, #37	; 0x25
 800b83a:	2855      	cmp	r0, #85	; 0x55
 800b83c:	d900      	bls.n	800b840 <__ssvfscanf_r+0xb4>
 800b83e:	e170      	b.n	800bb22 <__ssvfscanf_r+0x396>
 800b840:	f7f4 fc72 	bl	8000128 <__gnu_thumb1_case_uhi>
 800b844:	016f0056 	.word	0x016f0056
 800b848:	016f016f 	.word	0x016f016f
 800b84c:	0081016f 	.word	0x0081016f
 800b850:	016f016f 	.word	0x016f016f
 800b854:	016f016f 	.word	0x016f016f
 800b858:	00b8016f 	.word	0x00b8016f
 800b85c:	00b800b8 	.word	0x00b800b8
 800b860:	00b800b8 	.word	0x00b800b8
 800b864:	00b800b8 	.word	0x00b800b8
 800b868:	00b800b8 	.word	0x00b800b8
 800b86c:	016f00b8 	.word	0x016f00b8
 800b870:	016f016f 	.word	0x016f016f
 800b874:	016f016f 	.word	0x016f016f
 800b878:	016f016f 	.word	0x016f016f
 800b87c:	016f00d8 	.word	0x016f00d8
 800b880:	00c1010a 	.word	0x00c1010a
 800b884:	00d800d8 	.word	0x00d800d8
 800b888:	016f00d8 	.word	0x016f00d8
 800b88c:	016f016f 	.word	0x016f016f
 800b890:	009f016f 	.word	0x009f016f
 800b894:	016f016f 	.word	0x016f016f
 800b898:	016f00c9 	.word	0x016f00c9
 800b89c:	016f016f 	.word	0x016f016f
 800b8a0:	016f00f0 	.word	0x016f00f0
 800b8a4:	016f016f 	.word	0x016f016f
 800b8a8:	00d1016f 	.word	0x00d1016f
 800b8ac:	016f016f 	.word	0x016f016f
 800b8b0:	016f00fe 	.word	0x016f00fe
 800b8b4:	016f016f 	.word	0x016f016f
 800b8b8:	016f016f 	.word	0x016f016f
 800b8bc:	016f00d8 	.word	0x016f00d8
 800b8c0:	00c3010c 	.word	0x00c3010c
 800b8c4:	00d800d8 	.word	0x00d800d8
 800b8c8:	009400d8 	.word	0x009400d8
 800b8cc:	009f012f 	.word	0x009f012f
 800b8d0:	0088016f 	.word	0x0088016f
 800b8d4:	011200a9 	.word	0x011200a9
 800b8d8:	011000cb 	.word	0x011000cb
 800b8dc:	016f016f 	.word	0x016f016f
 800b8e0:	00a600f2 	.word	0x00a600f2
 800b8e4:	016f00cf 	.word	0x016f00cf
 800b8e8:	00d1016f 	.word	0x00d1016f
 800b8ec:	00a6016f 	.word	0x00a6016f
 800b8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dd12      	ble.n	800b91e <__ssvfscanf_r+0x192>
 800b8f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	3a01      	subs	r2, #1
 800b900:	7819      	ldrb	r1, [r3, #0]
 800b902:	7812      	ldrb	r2, [r2, #0]
 800b904:	4291      	cmp	r1, r2
 800b906:	d13e      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b90a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b90c:	6852      	ldr	r2, [r2, #4]
 800b90e:	3301      	adds	r3, #1
 800b910:	600b      	str	r3, [r1, #0]
 800b912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b914:	3a01      	subs	r2, #1
 800b916:	604a      	str	r2, [r1, #4]
 800b918:	3301      	adds	r3, #1
 800b91a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b91c:	e752      	b.n	800b7c4 <__ssvfscanf_r+0x38>
 800b91e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b920:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b922:	f002 fec7 	bl	800e6b4 <__ssrefill_r>
 800b926:	2800      	cmp	r0, #0
 800b928:	d0e6      	beq.n	800b8f8 <__ssvfscanf_r+0x16c>
 800b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <__ssvfscanf_r+0x1ac>
 800b930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b932:	899b      	ldrh	r3, [r3, #12]
 800b934:	065b      	lsls	r3, r3, #25
 800b936:	d526      	bpl.n	800b986 <__ssvfscanf_r+0x1fa>
 800b938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d000      	beq.n	800b940 <__ssvfscanf_r+0x1b4>
 800b93e:	e0f6      	b.n	800bb2e <__ssvfscanf_r+0x3a2>
 800b940:	3b01      	subs	r3, #1
 800b942:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b944:	e104      	b.n	800bb50 <__ssvfscanf_r+0x3c4>
 800b946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b948:	4332      	orrs	r2, r6
 800b94a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b94c:	d11b      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b94e:	2610      	movs	r6, #16
 800b950:	69ba      	ldr	r2, [r7, #24]
 800b952:	e76c      	b.n	800b82e <__ssvfscanf_r+0xa2>
 800b954:	421e      	tst	r6, r3
 800b956:	d116      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b958:	7851      	ldrb	r1, [r2, #1]
 800b95a:	296c      	cmp	r1, #108	; 0x6c
 800b95c:	d103      	bne.n	800b966 <__ssvfscanf_r+0x1da>
 800b95e:	3202      	adds	r2, #2
 800b960:	61ba      	str	r2, [r7, #24]
 800b962:	2202      	movs	r2, #2
 800b964:	e000      	b.n	800b968 <__ssvfscanf_r+0x1dc>
 800b966:	2201      	movs	r2, #1
 800b968:	4316      	orrs	r6, r2
 800b96a:	e7f1      	b.n	800b950 <__ssvfscanf_r+0x1c4>
 800b96c:	421e      	tst	r6, r3
 800b96e:	d10a      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b970:	7851      	ldrb	r1, [r2, #1]
 800b972:	2968      	cmp	r1, #104	; 0x68
 800b974:	d103      	bne.n	800b97e <__ssvfscanf_r+0x1f2>
 800b976:	3202      	adds	r2, #2
 800b978:	61ba      	str	r2, [r7, #24]
 800b97a:	2208      	movs	r2, #8
 800b97c:	e7f4      	b.n	800b968 <__ssvfscanf_r+0x1dc>
 800b97e:	2204      	movs	r2, #4
 800b980:	e7f2      	b.n	800b968 <__ssvfscanf_r+0x1dc>
 800b982:	421e      	tst	r6, r3
 800b984:	d0ed      	beq.n	800b962 <__ssvfscanf_r+0x1d6>
 800b986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d000      	beq.n	800b98e <__ssvfscanf_r+0x202>
 800b98c:	e0da      	b.n	800bb44 <__ssvfscanf_r+0x3b8>
 800b98e:	e0df      	b.n	800bb50 <__ssvfscanf_r+0x3c4>
 800b990:	421e      	tst	r6, r3
 800b992:	d0dd      	beq.n	800b950 <__ssvfscanf_r+0x1c4>
 800b994:	e7f7      	b.n	800b986 <__ssvfscanf_r+0x1fa>
 800b996:	228f      	movs	r2, #143	; 0x8f
 800b998:	218f      	movs	r1, #143	; 0x8f
 800b99a:	4032      	ands	r2, r6
 800b99c:	420e      	tst	r6, r1
 800b99e:	d1f2      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b9a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9a2:	2900      	cmp	r1, #0
 800b9a4:	d104      	bne.n	800b9b0 <__ssvfscanf_r+0x224>
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	a902      	add	r1, sp, #8
 800b9aa:	6439      	str	r1, [r7, #64]	; 0x40
 800b9ac:	600a      	str	r2, [r1, #0]
 800b9ae:	604a      	str	r2, [r1, #4]
 800b9b0:	4326      	orrs	r6, r4
 800b9b2:	e7cd      	b.n	800b950 <__ssvfscanf_r+0x1c4>
 800b9b4:	228f      	movs	r2, #143	; 0x8f
 800b9b6:	4216      	tst	r6, r2
 800b9b8:	d1e5      	bne.n	800b986 <__ssvfscanf_r+0x1fa>
 800b9ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9bc:	436a      	muls	r2, r5
 800b9be:	3a30      	subs	r2, #48	; 0x30
 800b9c0:	188a      	adds	r2, r1, r2
 800b9c2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b9c4:	e7c4      	b.n	800b950 <__ssvfscanf_r+0x1c4>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	431e      	orrs	r6, r3
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ba38 <__ssvfscanf_r+0x2ac>)
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	230a      	movs	r3, #10
 800b9d0:	2403      	movs	r4, #3
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d4:	e00f      	b.n	800b9f6 <__ssvfscanf_r+0x26a>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	431e      	orrs	r6, r3
 800b9da:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <__ssvfscanf_r+0x2b0>)
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	2308      	movs	r3, #8
 800b9e0:	e7f6      	b.n	800b9d0 <__ssvfscanf_r+0x244>
 800b9e2:	4b16      	ldr	r3, [pc, #88]	; (800ba3c <__ssvfscanf_r+0x2b0>)
 800b9e4:	e7f2      	b.n	800b9cc <__ssvfscanf_r+0x240>
 800b9e6:	2380      	movs	r3, #128	; 0x80
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	431e      	orrs	r6, r3
 800b9ec:	4b13      	ldr	r3, [pc, #76]	; (800ba3c <__ssvfscanf_r+0x2b0>)
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	2310      	movs	r3, #16
 800b9f2:	e7ed      	b.n	800b9d0 <__ssvfscanf_r+0x244>
 800b9f4:	2404      	movs	r4, #4
 800b9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	dd55      	ble.n	800baaa <__ssvfscanf_r+0x31e>
 800b9fe:	0673      	lsls	r3, r6, #25
 800ba00:	d407      	bmi.n	800ba12 <__ssvfscanf_r+0x286>
 800ba02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba04:	490b      	ldr	r1, [pc, #44]	; (800ba34 <__ssvfscanf_r+0x2a8>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	781a      	ldrb	r2, [r3, #0]
 800ba0a:	5c8a      	ldrb	r2, [r1, r2]
 800ba0c:	2108      	movs	r1, #8
 800ba0e:	420a      	tst	r2, r1
 800ba10:	d152      	bne.n	800bab8 <__ssvfscanf_r+0x32c>
 800ba12:	1e60      	subs	r0, r4, #1
 800ba14:	2803      	cmp	r0, #3
 800ba16:	d863      	bhi.n	800bae0 <__ssvfscanf_r+0x354>
 800ba18:	f7f4 fb86 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ba1c:	03bd01da 	.word	0x03bd01da
 800ba20:	068a0579 	.word	0x068a0579
 800ba24:	2301      	movs	r3, #1
 800ba26:	431e      	orrs	r6, r3
 800ba28:	2402      	movs	r4, #2
 800ba2a:	e7e4      	b.n	800b9f6 <__ssvfscanf_r+0x26a>
 800ba2c:	fffffd34 	.word	0xfffffd34
 800ba30:	ffffdfff 	.word	0xffffdfff
 800ba34:	0800fce1 	.word	0x0800fce1
 800ba38:	08008c45 	.word	0x08008c45
 800ba3c:	0800e1e5 	.word	0x0800e1e5
 800ba40:	2248      	movs	r2, #72	; 0x48
 800ba42:	2318      	movs	r3, #24
 800ba44:	189b      	adds	r3, r3, r2
 800ba46:	19d8      	adds	r0, r3, r7
 800ba48:	69b9      	ldr	r1, [r7, #24]
 800ba4a:	f001 f9d7 	bl	800cdfc <__sccl>
 800ba4e:	2340      	movs	r3, #64	; 0x40
 800ba50:	2401      	movs	r4, #1
 800ba52:	61b8      	str	r0, [r7, #24]
 800ba54:	431e      	orrs	r6, r3
 800ba56:	e7ce      	b.n	800b9f6 <__ssvfscanf_r+0x26a>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	431e      	orrs	r6, r3
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	2400      	movs	r4, #0
 800ba60:	431e      	orrs	r6, r3
 800ba62:	e7c8      	b.n	800b9f6 <__ssvfscanf_r+0x26a>
 800ba64:	2388      	movs	r3, #136	; 0x88
 800ba66:	e7bf      	b.n	800b9e8 <__ssvfscanf_r+0x25c>
 800ba68:	06f3      	lsls	r3, r6, #27
 800ba6a:	d500      	bpl.n	800ba6e <__ssvfscanf_r+0x2e2>
 800ba6c:	e6aa      	b.n	800b7c4 <__ssvfscanf_r+0x38>
 800ba6e:	2108      	movs	r1, #8
 800ba70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba72:	cb04      	ldmia	r3!, {r2}
 800ba74:	420e      	tst	r6, r1
 800ba76:	d003      	beq.n	800ba80 <__ssvfscanf_r+0x2f4>
 800ba78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba7a:	7011      	strb	r1, [r2, #0]
 800ba7c:	633b      	str	r3, [r7, #48]	; 0x30
 800ba7e:	e6a1      	b.n	800b7c4 <__ssvfscanf_r+0x38>
 800ba80:	0771      	lsls	r1, r6, #29
 800ba82:	d502      	bpl.n	800ba8a <__ssvfscanf_r+0x2fe>
 800ba84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba86:	8011      	strh	r1, [r2, #0]
 800ba88:	e7f8      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800ba8a:	07f1      	lsls	r1, r6, #31
 800ba8c:	d502      	bpl.n	800ba94 <__ssvfscanf_r+0x308>
 800ba8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba90:	6011      	str	r1, [r2, #0]
 800ba92:	e7f3      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800ba94:	07b6      	lsls	r6, r6, #30
 800ba96:	d5fa      	bpl.n	800ba8e <__ssvfscanf_r+0x302>
 800ba98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba9a:	6011      	str	r1, [r2, #0]
 800ba9c:	17c9      	asrs	r1, r1, #31
 800ba9e:	6051      	str	r1, [r2, #4]
 800baa0:	e7ec      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800baa2:	4ba2      	ldr	r3, [pc, #648]	; (800bd2c <__ssvfscanf_r+0x5a0>)
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	2300      	movs	r3, #0
 800baa8:	e792      	b.n	800b9d0 <__ssvfscanf_r+0x244>
 800baaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800baae:	f002 fe01 	bl	800e6b4 <__ssrefill_r>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d0a3      	beq.n	800b9fe <__ssvfscanf_r+0x272>
 800bab6:	e738      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800babc:	3201      	adds	r2, #1
 800babe:	63ba      	str	r2, [r7, #56]	; 0x38
 800bac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bac2:	6852      	ldr	r2, [r2, #4]
 800bac4:	3a01      	subs	r2, #1
 800bac6:	604a      	str	r2, [r1, #4]
 800bac8:	2a00      	cmp	r2, #0
 800baca:	dd02      	ble.n	800bad2 <__ssvfscanf_r+0x346>
 800bacc:	3301      	adds	r3, #1
 800bace:	600b      	str	r3, [r1, #0]
 800bad0:	e797      	b.n	800ba02 <__ssvfscanf_r+0x276>
 800bad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bad4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bad6:	f002 fded 	bl	800e6b4 <__ssrefill_r>
 800bada:	2800      	cmp	r0, #0
 800badc:	d091      	beq.n	800ba02 <__ssvfscanf_r+0x276>
 800bade:	e724      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bae2:	2301      	movs	r3, #1
 800bae4:	2a00      	cmp	r2, #0
 800bae6:	d100      	bne.n	800baea <__ssvfscanf_r+0x35e>
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800baea:	2210      	movs	r2, #16
 800baec:	0034      	movs	r4, r6
 800baee:	4032      	ands	r2, r6
 800baf0:	623a      	str	r2, [r7, #32]
 800baf2:	401c      	ands	r4, r3
 800baf4:	421e      	tst	r6, r3
 800baf6:	d100      	bne.n	800bafa <__ssvfscanf_r+0x36e>
 800baf8:	e0f3      	b.n	800bce2 <__ssvfscanf_r+0x556>
 800bafa:	2a00      	cmp	r2, #0
 800bafc:	d000      	beq.n	800bb00 <__ssvfscanf_r+0x374>
 800bafe:	e0b6      	b.n	800bc6e <__ssvfscanf_r+0x4e2>
 800bb00:	2080      	movs	r0, #128	; 0x80
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	cb10      	ldmia	r3!, {r4}
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	4206      	tst	r6, r0
 800bb0a:	d100      	bne.n	800bb0e <__ssvfscanf_r+0x382>
 800bb0c:	e0b7      	b.n	800bc7e <__ssvfscanf_r+0x4f2>
 800bb0e:	2c00      	cmp	r4, #0
 800bb10:	d007      	beq.n	800bb22 <__ssvfscanf_r+0x396>
 800bb12:	f7fb ffaf 	bl	8007a74 <malloc>
 800bb16:	6338      	str	r0, [r7, #48]	; 0x30
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d11f      	bne.n	800bb5c <__ssvfscanf_r+0x3d0>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	425b      	negs	r3, r3
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d013      	beq.n	800bb50 <__ssvfscanf_r+0x3c4>
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	d10a      	bne.n	800bb44 <__ssvfscanf_r+0x3b8>
 800bb2e:	2400      	movs	r4, #0
 800bb30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb32:	681d      	ldr	r5, [r3, #0]
 800bb34:	88db      	ldrh	r3, [r3, #6]
 800bb36:	42a3      	cmp	r3, r4
 800bb38:	dd01      	ble.n	800bb3e <__ssvfscanf_r+0x3b2>
 800bb3a:	f001 f82a 	bl	800cb92 <__ssvfscanf_r+0x1406>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	425b      	negs	r3, r3
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb46:	6818      	ldr	r0, [r3, #0]
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d001      	beq.n	800bb50 <__ssvfscanf_r+0x3c4>
 800bb4c:	f7fb ff9c 	bl	8007a88 <free>
 800bb50:	46bd      	mov	sp, r7
 800bb52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb54:	23b1      	movs	r3, #177	; 0xb1
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	449d      	add	sp, r3
 800bb5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb62:	88de      	ldrh	r6, [r3, #6]
 800bb64:	889d      	ldrh	r5, [r3, #4]
 800bb66:	42ae      	cmp	r6, r5
 800bb68:	d30e      	bcc.n	800bb88 <__ssvfscanf_r+0x3fc>
 800bb6a:	4b71      	ldr	r3, [pc, #452]	; (800bd30 <__ssvfscanf_r+0x5a4>)
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	d8d5      	bhi.n	800bb1c <__ssvfscanf_r+0x390>
 800bb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb72:	3508      	adds	r5, #8
 800bb74:	b2ad      	uxth	r5, r5
 800bb76:	6818      	ldr	r0, [r3, #0]
 800bb78:	00a9      	lsls	r1, r5, #2
 800bb7a:	f002 f901 	bl	800dd80 <realloc>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0cc      	beq.n	800bb1c <__ssvfscanf_r+0x390>
 800bb82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb84:	6018      	str	r0, [r3, #0]
 800bb86:	809d      	strh	r5, [r3, #4]
 800bb88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb8a:	1c72      	adds	r2, r6, #1
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	00b6      	lsls	r6, r6, #2
 800bb90:	50f4      	str	r4, [r6, r3]
 800bb92:	2320      	movs	r3, #32
 800bb94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb96:	0026      	movs	r6, r4
 800bb98:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800bb9a:	80ca      	strh	r2, [r1, #6]
 800bb9c:	61fb      	str	r3, [r7, #28]
 800bb9e:	2500      	movs	r5, #0
 800bba0:	f7fd f9fe 	bl	8008fa0 <__locale_mb_cur_max>
 800bba4:	42a8      	cmp	r0, r5
 800bba6:	d100      	bne.n	800bbaa <__ssvfscanf_r+0x41e>
 800bba8:	e6bf      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bbaa:	1c6a      	adds	r2, r5, #1
 800bbac:	60fa      	str	r2, [r7, #12]
 800bbae:	228c      	movs	r2, #140	; 0x8c
 800bbb0:	2048      	movs	r0, #72	; 0x48
 800bbb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb4:	0052      	lsls	r2, r2, #1
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	1812      	adds	r2, r2, r0
 800bbba:	7819      	ldrb	r1, [r3, #0]
 800bbbc:	19d2      	adds	r2, r2, r7
 800bbbe:	5551      	strb	r1, [r2, r5]
 800bbc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbc4:	6852      	ldr	r2, [r2, #4]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	600b      	str	r3, [r1, #0]
 800bbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbcc:	3a01      	subs	r2, #1
 800bbce:	604a      	str	r2, [r1, #4]
 800bbd0:	2b03      	cmp	r3, #3
 800bbd2:	d102      	bne.n	800bbda <__ssvfscanf_r+0x44e>
 800bbd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d007      	beq.n	800bbea <__ssvfscanf_r+0x45e>
 800bbda:	2048      	movs	r0, #72	; 0x48
 800bbdc:	2310      	movs	r3, #16
 800bbde:	181b      	adds	r3, r3, r0
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	19d8      	adds	r0, r3, r7
 800bbe6:	f7fd f997 	bl	8008f18 <memset>
 800bbea:	2148      	movs	r1, #72	; 0x48
 800bbec:	2310      	movs	r3, #16
 800bbee:	228c      	movs	r2, #140	; 0x8c
 800bbf0:	185b      	adds	r3, r3, r1
 800bbf2:	0052      	lsls	r2, r2, #1
 800bbf4:	19db      	adds	r3, r3, r7
 800bbf6:	1852      	adds	r2, r2, r1
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	0021      	movs	r1, r4
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc00:	19d2      	adds	r2, r2, r7
 800bc02:	f002 fc57 	bl	800e4b4 <_mbrtowc_r>
 800bc06:	0003      	movs	r3, r0
 800bc08:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	d100      	bne.n	800bc10 <__ssvfscanf_r+0x484>
 800bc0e:	e68c      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d139      	bne.n	800bc88 <__ssvfscanf_r+0x4fc>
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d100      	bne.n	800bc1c <__ssvfscanf_r+0x490>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	4694      	mov	ip, r2
 800bc22:	4463      	add	r3, ip
 800bc24:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	2b03      	cmp	r3, #3
 800bc2a:	d102      	bne.n	800bc32 <__ssvfscanf_r+0x4a6>
 800bc2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc2e:	2b04      	cmp	r3, #4
 800bc30:	d002      	beq.n	800bc38 <__ssvfscanf_r+0x4ac>
 800bc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc34:	3b01      	subs	r3, #1
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc38:	6a3b      	ldr	r3, [r7, #32]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d115      	bne.n	800bc6a <__ssvfscanf_r+0x4de>
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	d012      	beq.n	800bc68 <__ssvfscanf_r+0x4dc>
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	1ae5      	subs	r5, r4, r3
 800bc48:	10ab      	asrs	r3, r5, #2
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d30c      	bcc.n	800bc68 <__ssvfscanf_r+0x4dc>
 800bc4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc50:	00d1      	lsls	r1, r2, #3
 800bc52:	f002 f895 	bl	800dd80 <realloc>
 800bc56:	6338      	str	r0, [r7, #48]	; 0x30
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d100      	bne.n	800bc5e <__ssvfscanf_r+0x4d2>
 800bc5c:	e75e      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	1944      	adds	r4, r0, r5
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	6030      	str	r0, [r6, #0]
 800bc66:	61fb      	str	r3, [r7, #28]
 800bc68:	3404      	adds	r4, #4
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	e010      	b.n	800bc90 <__ssvfscanf_r+0x504>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	613b      	str	r3, [r7, #16]
 800bc72:	2300      	movs	r3, #0
 800bc74:	001e      	movs	r6, r3
 800bc76:	001c      	movs	r4, r3
 800bc78:	61fb      	str	r3, [r7, #28]
 800bc7a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc7c:	e78f      	b.n	800bb9e <__ssvfscanf_r+0x412>
 800bc7e:	6a3b      	ldr	r3, [r7, #32]
 800bc80:	001e      	movs	r6, r3
 800bc82:	61fb      	str	r3, [r7, #28]
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
 800bc86:	e78a      	b.n	800bb9e <__ssvfscanf_r+0x412>
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	68fd      	ldr	r5, [r7, #12]
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	d1c5      	bne.n	800bc1c <__ssvfscanf_r+0x490>
 800bc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc12      	bgt.n	800bcbe <__ssvfscanf_r+0x532>
 800bc98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc9c:	f002 fd0a 	bl	800e6b4 <__ssrefill_r>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d00c      	beq.n	800bcbe <__ssvfscanf_r+0x532>
 800bca4:	2d00      	cmp	r5, #0
 800bca6:	d000      	beq.n	800bcaa <__ssvfscanf_r+0x51e>
 800bca8:	e63f      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bcaa:	2e00      	cmp	r6, #0
 800bcac:	d10c      	bne.n	800bcc8 <__ssvfscanf_r+0x53c>
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	425a      	negs	r2, r3
 800bcb2:	4153      	adcs	r3, r2
 800bcb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcb6:	18d3      	adds	r3, r2, r3
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	e6de      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d000      	beq.n	800bcc6 <__ssvfscanf_r+0x53a>
 800bcc4:	e76c      	b.n	800bba0 <__ssvfscanf_r+0x414>
 800bcc6:	e7f0      	b.n	800bcaa <__ssvfscanf_r+0x51e>
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	69fa      	ldr	r2, [r7, #28]
 800bccc:	1ae1      	subs	r1, r4, r3
 800bcce:	108b      	asrs	r3, r1, #2
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d9ec      	bls.n	800bcae <__ssvfscanf_r+0x522>
 800bcd4:	6830      	ldr	r0, [r6, #0]
 800bcd6:	f002 f853 	bl	800dd80 <realloc>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0e7      	beq.n	800bcae <__ssvfscanf_r+0x522>
 800bcde:	6030      	str	r0, [r6, #0]
 800bce0:	e7e5      	b.n	800bcae <__ssvfscanf_r+0x522>
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d025      	beq.n	800bd34 <__ssvfscanf_r+0x5a8>
 800bce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	dd11      	ble.n	800bd1a <__ssvfscanf_r+0x58e>
 800bcf6:	1ac9      	subs	r1, r1, r3
 800bcf8:	18d2      	adds	r2, r2, r3
 800bcfa:	18e4      	adds	r4, r4, r3
 800bcfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bd00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd02:	0019      	movs	r1, r3
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	f002 fcd5 	bl	800e6b4 <__ssrefill_r>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0ec      	beq.n	800bce8 <__ssvfscanf_r+0x55c>
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	d100      	bne.n	800bd14 <__ssvfscanf_r+0x588>
 800bd12:	e60a      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd16:	191b      	adds	r3, r3, r4
 800bd18:	e5ff      	b.n	800b91a <__ssvfscanf_r+0x18e>
 800bd1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd1c:	1a5b      	subs	r3, r3, r1
 800bd1e:	1864      	adds	r4, r4, r1
 800bd20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd22:	604b      	str	r3, [r1, #4]
 800bd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd26:	18d2      	adds	r2, r2, r3
 800bd28:	600a      	str	r2, [r1, #0]
 800bd2a:	e7f3      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800bd2c:	08008c45 	.word	0x08008c45
 800bd30:	0000fff6 	.word	0x0000fff6
 800bd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd36:	0034      	movs	r4, r6
 800bd38:	cb20      	ldmia	r3!, {r5}
 800bd3a:	633b      	str	r3, [r7, #48]	; 0x30
 800bd3c:	2380      	movs	r3, #128	; 0x80
 800bd3e:	401c      	ands	r4, r3
 800bd40:	421e      	tst	r6, r3
 800bd42:	d028      	beq.n	800bd96 <__ssvfscanf_r+0x60a>
 800bd44:	2d00      	cmp	r5, #0
 800bd46:	d100      	bne.n	800bd4a <__ssvfscanf_r+0x5be>
 800bd48:	e61d      	b.n	800b986 <__ssvfscanf_r+0x1fa>
 800bd4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd4c:	f7fb fe92 	bl	8007a74 <malloc>
 800bd50:	6238      	str	r0, [r7, #32]
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d100      	bne.n	800bd58 <__ssvfscanf_r+0x5cc>
 800bd56:	e5ef      	b.n	800b938 <__ssvfscanf_r+0x1ac>
 800bd58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd5a:	6028      	str	r0, [r5, #0]
 800bd5c:	88de      	ldrh	r6, [r3, #6]
 800bd5e:	889c      	ldrh	r4, [r3, #4]
 800bd60:	6818      	ldr	r0, [r3, #0]
 800bd62:	42a6      	cmp	r6, r4
 800bd64:	d30e      	bcc.n	800bd84 <__ssvfscanf_r+0x5f8>
 800bd66:	4bbf      	ldr	r3, [pc, #764]	; (800c064 <__ssvfscanf_r+0x8d8>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	d900      	bls.n	800bd6e <__ssvfscanf_r+0x5e2>
 800bd6c:	e6df      	b.n	800bb2e <__ssvfscanf_r+0x3a2>
 800bd6e:	3408      	adds	r4, #8
 800bd70:	b2a4      	uxth	r4, r4
 800bd72:	00a1      	lsls	r1, r4, #2
 800bd74:	f002 f804 	bl	800dd80 <realloc>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d100      	bne.n	800bd7e <__ssvfscanf_r+0x5f2>
 800bd7c:	e6d7      	b.n	800bb2e <__ssvfscanf_r+0x3a2>
 800bd7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd80:	6018      	str	r0, [r3, #0]
 800bd82:	809c      	strh	r4, [r3, #4]
 800bd84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd86:	1c72      	adds	r2, r6, #1
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd8c:	00b6      	lsls	r6, r6, #2
 800bd8e:	002c      	movs	r4, r5
 800bd90:	50f5      	str	r5, [r6, r3]
 800bd92:	6a3d      	ldr	r5, [r7, #32]
 800bd94:	80ca      	strh	r2, [r1, #6]
 800bd96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd98:	0029      	movs	r1, r5
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bda2:	f002 fca6 	bl	800e6f2 <_sfread_r>
 800bda6:	1e05      	subs	r5, r0, #0
 800bda8:	d100      	bne.n	800bdac <__ssvfscanf_r+0x620>
 800bdaa:	e5be      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	d009      	beq.n	800bdc4 <__ssvfscanf_r+0x638>
 800bdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb2:	4283      	cmp	r3, r0
 800bdb4:	d906      	bls.n	800bdc4 <__ssvfscanf_r+0x638>
 800bdb6:	0001      	movs	r1, r0
 800bdb8:	6820      	ldr	r0, [r4, #0]
 800bdba:	f001 ffe1 	bl	800dd80 <realloc>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d000      	beq.n	800bdc4 <__ssvfscanf_r+0x638>
 800bdc2:	6020      	str	r0, [r4, #0]
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	195b      	adds	r3, r3, r5
 800bdc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	3301      	adds	r3, #1
 800bdce:	e4f8      	b.n	800b7c2 <__ssvfscanf_r+0x36>
 800bdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <__ssvfscanf_r+0x64e>
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdda:	2210      	movs	r2, #16
 800bddc:	2301      	movs	r3, #1
 800bdde:	0034      	movs	r4, r6
 800bde0:	4032      	ands	r2, r6
 800bde2:	401c      	ands	r4, r3
 800bde4:	623a      	str	r2, [r7, #32]
 800bde6:	421e      	tst	r6, r3
 800bde8:	d100      	bne.n	800bdec <__ssvfscanf_r+0x660>
 800bdea:	e116      	b.n	800c01a <__ssvfscanf_r+0x88e>
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	d000      	beq.n	800bdf2 <__ssvfscanf_r+0x666>
 800bdf0:	e0b0      	b.n	800bf54 <__ssvfscanf_r+0x7c8>
 800bdf2:	2080      	movs	r0, #128	; 0x80
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	cb10      	ldmia	r3!, {r4}
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	4206      	tst	r6, r0
 800bdfc:	d100      	bne.n	800be00 <__ssvfscanf_r+0x674>
 800bdfe:	e0b2      	b.n	800bf66 <__ssvfscanf_r+0x7da>
 800be00:	2c00      	cmp	r4, #0
 800be02:	d100      	bne.n	800be06 <__ssvfscanf_r+0x67a>
 800be04:	e68d      	b.n	800bb22 <__ssvfscanf_r+0x396>
 800be06:	f7fb fe35 	bl	8007a74 <malloc>
 800be0a:	6338      	str	r0, [r7, #48]	; 0x30
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d100      	bne.n	800be12 <__ssvfscanf_r+0x686>
 800be10:	e684      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be18:	88de      	ldrh	r6, [r3, #6]
 800be1a:	889d      	ldrh	r5, [r3, #4]
 800be1c:	42ae      	cmp	r6, r5
 800be1e:	d310      	bcc.n	800be42 <__ssvfscanf_r+0x6b6>
 800be20:	4b90      	ldr	r3, [pc, #576]	; (800c064 <__ssvfscanf_r+0x8d8>)
 800be22:	429d      	cmp	r5, r3
 800be24:	d900      	bls.n	800be28 <__ssvfscanf_r+0x69c>
 800be26:	e679      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	3508      	adds	r5, #8
 800be2c:	b2ad      	uxth	r5, r5
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	00a9      	lsls	r1, r5, #2
 800be32:	f001 ffa5 	bl	800dd80 <realloc>
 800be36:	2800      	cmp	r0, #0
 800be38:	d100      	bne.n	800be3c <__ssvfscanf_r+0x6b0>
 800be3a:	e66f      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800be3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be3e:	6018      	str	r0, [r3, #0]
 800be40:	809d      	strh	r5, [r3, #4]
 800be42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be44:	1c72      	adds	r2, r6, #1
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	00b6      	lsls	r6, r6, #2
 800be4a:	50f4      	str	r4, [r6, r3]
 800be4c:	2320      	movs	r3, #32
 800be4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be50:	0026      	movs	r6, r4
 800be52:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800be54:	80ca      	strh	r2, [r1, #6]
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	2500      	movs	r5, #0
 800be5a:	f7fd f8a1 	bl	8008fa0 <__locale_mb_cur_max>
 800be5e:	42a8      	cmp	r0, r5
 800be60:	d100      	bne.n	800be64 <__ssvfscanf_r+0x6d8>
 800be62:	e562      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800be64:	1c6a      	adds	r2, r5, #1
 800be66:	61fa      	str	r2, [r7, #28]
 800be68:	228c      	movs	r2, #140	; 0x8c
 800be6a:	2048      	movs	r0, #72	; 0x48
 800be6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6e:	0052      	lsls	r2, r2, #1
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	1812      	adds	r2, r2, r0
 800be74:	7819      	ldrb	r1, [r3, #0]
 800be76:	19d2      	adds	r2, r2, r7
 800be78:	5551      	strb	r1, [r2, r5]
 800be7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be7e:	6852      	ldr	r2, [r2, #4]
 800be80:	3301      	adds	r3, #1
 800be82:	600b      	str	r3, [r1, #0]
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	3a01      	subs	r2, #1
 800be88:	604a      	str	r2, [r1, #4]
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d102      	bne.n	800be94 <__ssvfscanf_r+0x708>
 800be8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be90:	2b04      	cmp	r3, #4
 800be92:	d006      	beq.n	800bea2 <__ssvfscanf_r+0x716>
 800be94:	2048      	movs	r0, #72	; 0x48
 800be96:	2208      	movs	r2, #8
 800be98:	1813      	adds	r3, r2, r0
 800be9a:	2100      	movs	r1, #0
 800be9c:	19d8      	adds	r0, r3, r7
 800be9e:	f7fd f83b 	bl	8008f18 <memset>
 800bea2:	2148      	movs	r1, #72	; 0x48
 800bea4:	2308      	movs	r3, #8
 800bea6:	228c      	movs	r2, #140	; 0x8c
 800bea8:	185b      	adds	r3, r3, r1
 800beaa:	0052      	lsls	r2, r2, #1
 800beac:	19db      	adds	r3, r3, r7
 800beae:	1852      	adds	r2, r2, r1
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	0021      	movs	r1, r4
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800beb8:	19d2      	adds	r2, r2, r7
 800beba:	f002 fafb 	bl	800e4b4 <_mbrtowc_r>
 800bebe:	0003      	movs	r3, r0
 800bec0:	62b8      	str	r0, [r7, #40]	; 0x28
 800bec2:	3301      	adds	r3, #1
 800bec4:	d100      	bne.n	800bec8 <__ssvfscanf_r+0x73c>
 800bec6:	e530      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d151      	bne.n	800bf70 <__ssvfscanf_r+0x7e4>
 800becc:	6020      	str	r0, [r4, #0]
 800bece:	2301      	movs	r3, #1
 800bed0:	6825      	ldr	r5, [r4, #0]
 800bed2:	425b      	negs	r3, r3
 800bed4:	1c6a      	adds	r2, r5, #1
 800bed6:	d01a      	beq.n	800bf0e <__ssvfscanf_r+0x782>
 800bed8:	2048      	movs	r0, #72	; 0x48
 800beda:	3311      	adds	r3, #17
 800bedc:	181b      	adds	r3, r3, r0
 800bede:	2208      	movs	r2, #8
 800bee0:	2100      	movs	r1, #0
 800bee2:	19d8      	adds	r0, r3, r7
 800bee4:	f7fd f818 	bl	8008f18 <memset>
 800bee8:	4b5f      	ldr	r3, [pc, #380]	; (800c068 <__ssvfscanf_r+0x8dc>)
 800beea:	2148      	movs	r1, #72	; 0x48
 800beec:	33e0      	adds	r3, #224	; 0xe0
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	2310      	movs	r3, #16
 800bef2:	4694      	mov	ip, r2
 800bef4:	185b      	adds	r3, r3, r1
 800bef6:	002a      	movs	r2, r5
 800bef8:	19db      	adds	r3, r3, r7
 800befa:	4665      	mov	r5, ip
 800befc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800befe:	1879      	adds	r1, r7, r1
 800bf00:	47a8      	blx	r5
 800bf02:	2300      	movs	r3, #0
 800bf04:	2801      	cmp	r0, #1
 800bf06:	d102      	bne.n	800bf0e <__ssvfscanf_r+0x782>
 800bf08:	3348      	adds	r3, #72	; 0x48
 800bf0a:	18fb      	adds	r3, r7, r3
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2218      	movs	r2, #24
 800bf10:	2148      	movs	r1, #72	; 0x48
 800bf12:	1852      	adds	r2, r2, r1
 800bf14:	19d2      	adds	r2, r2, r7
 800bf16:	5cd3      	ldrb	r3, [r2, r3]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d149      	bne.n	800bfb0 <__ssvfscanf_r+0x824>
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d137      	bne.n	800bf92 <__ssvfscanf_r+0x806>
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d113      	bne.n	800bf50 <__ssvfscanf_r+0x7c4>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	2e00      	cmp	r6, #0
 800bf2c:	d00d      	beq.n	800bf4a <__ssvfscanf_r+0x7be>
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	1ae4      	subs	r4, r4, r3
 800bf34:	10a3      	asrs	r3, r4, #2
 800bf36:	3301      	adds	r3, #1
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d906      	bls.n	800bf4a <__ssvfscanf_r+0x7be>
 800bf3c:	6830      	ldr	r0, [r6, #0]
 800bf3e:	1d21      	adds	r1, r4, #4
 800bf40:	f001 ff1e 	bl	800dd80 <realloc>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d000      	beq.n	800bf4a <__ssvfscanf_r+0x7be>
 800bf48:	6030      	str	r0, [r6, #0]
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	e593      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	001e      	movs	r6, r3
 800bf5c:	613b      	str	r3, [r7, #16]
 800bf5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf60:	334c      	adds	r3, #76	; 0x4c
 800bf62:	18fc      	adds	r4, r7, r3
 800bf64:	e778      	b.n	800be58 <__ssvfscanf_r+0x6cc>
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	001e      	movs	r6, r3
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf6e:	e773      	b.n	800be58 <__ssvfscanf_r+0x6cc>
 800bf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf72:	69fd      	ldr	r5, [r7, #28]
 800bf74:	3302      	adds	r3, #2
 800bf76:	d1aa      	bne.n	800bece <__ssvfscanf_r+0x742>
 800bf78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dc47      	bgt.n	800c010 <__ssvfscanf_r+0x884>
 800bf80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bf84:	f002 fb96 	bl	800e6b4 <__ssrefill_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d041      	beq.n	800c010 <__ssvfscanf_r+0x884>
 800bf8c:	2d00      	cmp	r5, #0
 800bf8e:	d0c8      	beq.n	800bf22 <__ssvfscanf_r+0x796>
 800bf90:	e4cb      	b.n	800b92a <__ssvfscanf_r+0x19e>
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	2248      	movs	r2, #72	; 0x48
 800bf96:	3b01      	subs	r3, #1
 800bf98:	61fb      	str	r3, [r7, #28]
 800bf9a:	238c      	movs	r3, #140	; 0x8c
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	189b      	adds	r3, r3, r2
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	19db      	adds	r3, r3, r7
 800bfa4:	5cd1      	ldrb	r1, [r2, r3]
 800bfa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bfa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfaa:	f002 fb47 	bl	800e63c <_sungetc_r>
 800bfae:	e7b5      	b.n	800bf1c <__ssvfscanf_r+0x790>
 800bfb0:	69fa      	ldr	r2, [r7, #28]
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	4694      	mov	ip, r2
 800bfb6:	4463      	add	r3, ip
 800bfb8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d102      	bne.n	800bfc6 <__ssvfscanf_r+0x83a>
 800bfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc2:	2b04      	cmp	r3, #4
 800bfc4:	d002      	beq.n	800bfcc <__ssvfscanf_r+0x840>
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d11a      	bne.n	800c008 <__ssvfscanf_r+0x87c>
 800bfd2:	3404      	adds	r4, #4
 800bfd4:	2e00      	cmp	r6, #0
 800bfd6:	d019      	beq.n	800c00c <__ssvfscanf_r+0x880>
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	1ae3      	subs	r3, r4, r3
 800bfde:	61fb      	str	r3, [r7, #28]
 800bfe0:	6a3d      	ldr	r5, [r7, #32]
 800bfe2:	109b      	asrs	r3, r3, #2
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d3c7      	bcc.n	800bf78 <__ssvfscanf_r+0x7ec>
 800bfe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfea:	00d1      	lsls	r1, r2, #3
 800bfec:	f001 fec8 	bl	800dd80 <realloc>
 800bff0:	6338      	str	r0, [r7, #48]	; 0x30
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d100      	bne.n	800bff8 <__ssvfscanf_r+0x86c>
 800bff6:	e591      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800bff8:	4684      	mov	ip, r0
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	69fc      	ldr	r4, [r7, #28]
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	4464      	add	r4, ip
 800c002:	6030      	str	r0, [r6, #0]
 800c004:	613b      	str	r3, [r7, #16]
 800c006:	e7b7      	b.n	800bf78 <__ssvfscanf_r+0x7ec>
 800c008:	2500      	movs	r5, #0
 800c00a:	e7b5      	b.n	800bf78 <__ssvfscanf_r+0x7ec>
 800c00c:	0035      	movs	r5, r6
 800c00e:	e7b3      	b.n	800bf78 <__ssvfscanf_r+0x7ec>
 800c010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c012:	2b00      	cmp	r3, #0
 800c014:	d000      	beq.n	800c018 <__ssvfscanf_r+0x88c>
 800c016:	e720      	b.n	800be5a <__ssvfscanf_r+0x6ce>
 800c018:	e783      	b.n	800bf22 <__ssvfscanf_r+0x796>
 800c01a:	6a3b      	ldr	r3, [r7, #32]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d025      	beq.n	800c06c <__ssvfscanf_r+0x8e0>
 800c020:	2118      	movs	r1, #24
 800c022:	2048      	movs	r0, #72	; 0x48
 800c024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c026:	1809      	adds	r1, r1, r0
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	19c9      	adds	r1, r1, r7
 800c02c:	781a      	ldrb	r2, [r3, #0]
 800c02e:	5c8a      	ldrb	r2, [r1, r2]
 800c030:	2a00      	cmp	r2, #0
 800c032:	d103      	bne.n	800c03c <__ssvfscanf_r+0x8b0>
 800c034:	2c00      	cmp	r4, #0
 800c036:	d000      	beq.n	800c03a <__ssvfscanf_r+0x8ae>
 800c038:	e66c      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c03a:	e4a4      	b.n	800b986 <__ssvfscanf_r+0x1fa>
 800c03c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c03e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c040:	6852      	ldr	r2, [r2, #4]
 800c042:	3301      	adds	r3, #1
 800c044:	600b      	str	r3, [r1, #0]
 800c046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c048:	3a01      	subs	r2, #1
 800c04a:	3401      	adds	r4, #1
 800c04c:	604a      	str	r2, [r1, #4]
 800c04e:	429c      	cmp	r4, r3
 800c050:	d100      	bne.n	800c054 <__ssvfscanf_r+0x8c8>
 800c052:	e65f      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c054:	2a00      	cmp	r2, #0
 800c056:	dce3      	bgt.n	800c020 <__ssvfscanf_r+0x894>
 800c058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c05a:	f002 fb2b 	bl	800e6b4 <__ssrefill_r>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d0de      	beq.n	800c020 <__ssvfscanf_r+0x894>
 800c062:	e657      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c064:	0000fff6 	.word	0x0000fff6
 800c068:	2000042c 	.word	0x2000042c
 800c06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06e:	0032      	movs	r2, r6
 800c070:	cb20      	ldmia	r3!, {r5}
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	2380      	movs	r3, #128	; 0x80
 800c076:	401a      	ands	r2, r3
 800c078:	421e      	tst	r6, r3
 800c07a:	d100      	bne.n	800c07e <__ssvfscanf_r+0x8f2>
 800c07c:	e086      	b.n	800c18c <__ssvfscanf_r+0xa00>
 800c07e:	2d00      	cmp	r5, #0
 800c080:	d100      	bne.n	800c084 <__ssvfscanf_r+0x8f8>
 800c082:	e480      	b.n	800b986 <__ssvfscanf_r+0x1fa>
 800c084:	2020      	movs	r0, #32
 800c086:	f7fb fcf5 	bl	8007a74 <malloc>
 800c08a:	6338      	str	r0, [r7, #48]	; 0x30
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d100      	bne.n	800c092 <__ssvfscanf_r+0x906>
 800c090:	e452      	b.n	800b938 <__ssvfscanf_r+0x1ac>
 800c092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c094:	6028      	str	r0, [r5, #0]
 800c096:	88de      	ldrh	r6, [r3, #6]
 800c098:	889c      	ldrh	r4, [r3, #4]
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	42a6      	cmp	r6, r4
 800c09e:	d30e      	bcc.n	800c0be <__ssvfscanf_r+0x932>
 800c0a0:	4bc3      	ldr	r3, [pc, #780]	; (800c3b0 <__ssvfscanf_r+0xc24>)
 800c0a2:	429c      	cmp	r4, r3
 800c0a4:	d900      	bls.n	800c0a8 <__ssvfscanf_r+0x91c>
 800c0a6:	e542      	b.n	800bb2e <__ssvfscanf_r+0x3a2>
 800c0a8:	3408      	adds	r4, #8
 800c0aa:	b2a4      	uxth	r4, r4
 800c0ac:	00a1      	lsls	r1, r4, #2
 800c0ae:	f001 fe67 	bl	800dd80 <realloc>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d100      	bne.n	800c0b8 <__ssvfscanf_r+0x92c>
 800c0b6:	e53a      	b.n	800bb2e <__ssvfscanf_r+0x3a2>
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ba:	6018      	str	r0, [r3, #0]
 800c0bc:	809c      	strh	r4, [r3, #4]
 800c0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c0:	1c72      	adds	r2, r6, #1
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	00b6      	lsls	r6, r6, #2
 800c0c6:	50f5      	str	r5, [r6, r3]
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0cc:	002e      	movs	r6, r5
 800c0ce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800c0d0:	80ca      	strh	r2, [r1, #6]
 800c0d2:	623b      	str	r3, [r7, #32]
 800c0d4:	002c      	movs	r4, r5
 800c0d6:	2118      	movs	r1, #24
 800c0d8:	2048      	movs	r0, #72	; 0x48
 800c0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0dc:	1809      	adds	r1, r1, r0
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	19c9      	adds	r1, r1, r7
 800c0e2:	781a      	ldrb	r2, [r3, #0]
 800c0e4:	5c8a      	ldrb	r2, [r1, r2]
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d101      	bne.n	800c0ee <__ssvfscanf_r+0x962>
 800c0ea:	633d      	str	r5, [r7, #48]	; 0x30
 800c0ec:	e031      	b.n	800c152 <__ssvfscanf_r+0x9c6>
 800c0ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0f2:	6852      	ldr	r2, [r2, #4]
 800c0f4:	3a01      	subs	r2, #1
 800c0f6:	604a      	str	r2, [r1, #4]
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	600a      	str	r2, [r1, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	1c6a      	adds	r2, r5, #1
 800c100:	633a      	str	r2, [r7, #48]	; 0x30
 800c102:	702b      	strb	r3, [r5, #0]
 800c104:	2e00      	cmp	r6, #0
 800c106:	d010      	beq.n	800c12a <__ssvfscanf_r+0x99e>
 800c108:	6a3b      	ldr	r3, [r7, #32]
 800c10a:	1b15      	subs	r5, r2, r4
 800c10c:	429d      	cmp	r5, r3
 800c10e:	d30c      	bcc.n	800c12a <__ssvfscanf_r+0x99e>
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	0020      	movs	r0, r4
 800c114:	0019      	movs	r1, r3
 800c116:	623b      	str	r3, [r7, #32]
 800c118:	f001 fe32 	bl	800dd80 <realloc>
 800c11c:	1e04      	subs	r4, r0, #0
 800c11e:	d101      	bne.n	800c124 <__ssvfscanf_r+0x998>
 800c120:	f7ff fc0a 	bl	800b938 <__ssvfscanf_r+0x1ac>
 800c124:	1943      	adds	r3, r0, r5
 800c126:	633b      	str	r3, [r7, #48]	; 0x30
 800c128:	6030      	str	r0, [r6, #0]
 800c12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12c:	3b01      	subs	r3, #1
 800c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00e      	beq.n	800c152 <__ssvfscanf_r+0x9c6>
 800c134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dc2a      	bgt.n	800c192 <__ssvfscanf_r+0xa06>
 800c13c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c13e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c140:	f002 fab8 	bl	800e6b4 <__ssrefill_r>
 800c144:	2800      	cmp	r0, #0
 800c146:	d024      	beq.n	800c192 <__ssvfscanf_r+0xa06>
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	42a3      	cmp	r3, r4
 800c14c:	d101      	bne.n	800c152 <__ssvfscanf_r+0x9c6>
 800c14e:	f7ff fbec 	bl	800b92a <__ssvfscanf_r+0x19e>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	1b1d      	subs	r5, r3, r4
 800c156:	42a3      	cmp	r3, r4
 800c158:	d101      	bne.n	800c15e <__ssvfscanf_r+0x9d2>
 800c15a:	f7ff fc14 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800c15e:	2300      	movs	r3, #0
 800c160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c162:	7013      	strb	r3, [r2, #0]
 800c164:	429e      	cmp	r6, r3
 800c166:	d009      	beq.n	800c17c <__ssvfscanf_r+0x9f0>
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	1c69      	adds	r1, r5, #1
 800c16c:	428b      	cmp	r3, r1
 800c16e:	d905      	bls.n	800c17c <__ssvfscanf_r+0x9f0>
 800c170:	6830      	ldr	r0, [r6, #0]
 800c172:	f001 fe05 	bl	800dd80 <realloc>
 800c176:	2800      	cmp	r0, #0
 800c178:	d000      	beq.n	800c17c <__ssvfscanf_r+0x9f0>
 800c17a:	6030      	str	r0, [r6, #0]
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	3301      	adds	r3, #1
 800c180:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c184:	195b      	adds	r3, r3, r5
 800c186:	63bb      	str	r3, [r7, #56]	; 0x38
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	e477      	b.n	800ba7c <__ssvfscanf_r+0x2f0>
 800c18c:	0016      	movs	r6, r2
 800c18e:	623a      	str	r2, [r7, #32]
 800c190:	e7a0      	b.n	800c0d4 <__ssvfscanf_r+0x948>
 800c192:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800c194:	e79f      	b.n	800c0d6 <__ssvfscanf_r+0x94a>
 800c196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <__ssvfscanf_r+0xa14>
 800c19c:	3b01      	subs	r3, #1
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a0:	2210      	movs	r2, #16
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	0034      	movs	r4, r6
 800c1a6:	4032      	ands	r2, r6
 800c1a8:	401c      	ands	r4, r3
 800c1aa:	61fa      	str	r2, [r7, #28]
 800c1ac:	421e      	tst	r6, r3
 800c1ae:	d100      	bne.n	800c1b2 <__ssvfscanf_r+0xa26>
 800c1b0:	e102      	b.n	800c3b8 <__ssvfscanf_r+0xc2c>
 800c1b2:	2a00      	cmp	r2, #0
 800c1b4:	d000      	beq.n	800c1b8 <__ssvfscanf_r+0xa2c>
 800c1b6:	e09f      	b.n	800c2f8 <__ssvfscanf_r+0xb6c>
 800c1b8:	2080      	movs	r0, #128	; 0x80
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	cb10      	ldmia	r3!, {r4}
 800c1be:	60fb      	str	r3, [r7, #12]
 800c1c0:	4206      	tst	r6, r0
 800c1c2:	d100      	bne.n	800c1c6 <__ssvfscanf_r+0xa3a>
 800c1c4:	e0a1      	b.n	800c30a <__ssvfscanf_r+0xb7e>
 800c1c6:	2c00      	cmp	r4, #0
 800c1c8:	d100      	bne.n	800c1cc <__ssvfscanf_r+0xa40>
 800c1ca:	e4aa      	b.n	800bb22 <__ssvfscanf_r+0x396>
 800c1cc:	f7fb fc52 	bl	8007a74 <malloc>
 800c1d0:	6338      	str	r0, [r7, #48]	; 0x30
 800c1d2:	2800      	cmp	r0, #0
 800c1d4:	d100      	bne.n	800c1d8 <__ssvfscanf_r+0xa4c>
 800c1d6:	e4a1      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1de:	88de      	ldrh	r6, [r3, #6]
 800c1e0:	889d      	ldrh	r5, [r3, #4]
 800c1e2:	42ae      	cmp	r6, r5
 800c1e4:	d310      	bcc.n	800c208 <__ssvfscanf_r+0xa7c>
 800c1e6:	4b72      	ldr	r3, [pc, #456]	; (800c3b0 <__ssvfscanf_r+0xc24>)
 800c1e8:	429d      	cmp	r5, r3
 800c1ea:	d900      	bls.n	800c1ee <__ssvfscanf_r+0xa62>
 800c1ec:	e496      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1f0:	3508      	adds	r5, #8
 800c1f2:	b2ad      	uxth	r5, r5
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	00a9      	lsls	r1, r5, #2
 800c1f8:	f001 fdc2 	bl	800dd80 <realloc>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d100      	bne.n	800c202 <__ssvfscanf_r+0xa76>
 800c200:	e48c      	b.n	800bb1c <__ssvfscanf_r+0x390>
 800c202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c204:	6018      	str	r0, [r3, #0]
 800c206:	809d      	strh	r5, [r3, #4]
 800c208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c20a:	1c72      	adds	r2, r6, #1
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	00b6      	lsls	r6, r6, #2
 800c210:	50f4      	str	r4, [r6, r3]
 800c212:	2320      	movs	r3, #32
 800c214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c216:	0025      	movs	r5, r4
 800c218:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c21a:	80ca      	strh	r2, [r1, #6]
 800c21c:	613b      	str	r3, [r7, #16]
 800c21e:	2300      	movs	r3, #0
 800c220:	623b      	str	r3, [r7, #32]
 800c222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c224:	4a63      	ldr	r2, [pc, #396]	; (800c3b4 <__ssvfscanf_r+0xc28>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	5cd3      	ldrb	r3, [r2, r3]
 800c22c:	2208      	movs	r2, #8
 800c22e:	4213      	tst	r3, r2
 800c230:	d149      	bne.n	800c2c6 <__ssvfscanf_r+0xb3a>
 800c232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c234:	2b00      	cmp	r3, #0
 800c236:	d046      	beq.n	800c2c6 <__ssvfscanf_r+0xb3a>
 800c238:	f7fc feb2 	bl	8008fa0 <__locale_mb_cur_max>
 800c23c:	6a3b      	ldr	r3, [r7, #32]
 800c23e:	4298      	cmp	r0, r3
 800c240:	d101      	bne.n	800c246 <__ssvfscanf_r+0xaba>
 800c242:	f7ff fb72 	bl	800b92a <__ssvfscanf_r+0x19e>
 800c246:	6a3a      	ldr	r2, [r7, #32]
 800c248:	2048      	movs	r0, #72	; 0x48
 800c24a:	1c56      	adds	r6, r2, #1
 800c24c:	228c      	movs	r2, #140	; 0x8c
 800c24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c250:	0052      	lsls	r2, r2, #1
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	1812      	adds	r2, r2, r0
 800c256:	7819      	ldrb	r1, [r3, #0]
 800c258:	6a38      	ldr	r0, [r7, #32]
 800c25a:	19d2      	adds	r2, r2, r7
 800c25c:	5411      	strb	r1, [r2, r0]
 800c25e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c260:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c262:	6852      	ldr	r2, [r2, #4]
 800c264:	3301      	adds	r3, #1
 800c266:	600b      	str	r3, [r1, #0]
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	3a01      	subs	r2, #1
 800c26c:	604a      	str	r2, [r1, #4]
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d102      	bne.n	800c278 <__ssvfscanf_r+0xaec>
 800c272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c274:	2b04      	cmp	r3, #4
 800c276:	d007      	beq.n	800c288 <__ssvfscanf_r+0xafc>
 800c278:	2048      	movs	r0, #72	; 0x48
 800c27a:	2310      	movs	r3, #16
 800c27c:	181b      	adds	r3, r3, r0
 800c27e:	2208      	movs	r2, #8
 800c280:	2100      	movs	r1, #0
 800c282:	19d8      	adds	r0, r3, r7
 800c284:	f7fc fe48 	bl	8008f18 <memset>
 800c288:	2148      	movs	r1, #72	; 0x48
 800c28a:	2310      	movs	r3, #16
 800c28c:	228c      	movs	r2, #140	; 0x8c
 800c28e:	185b      	adds	r3, r3, r1
 800c290:	0052      	lsls	r2, r2, #1
 800c292:	19db      	adds	r3, r3, r7
 800c294:	1852      	adds	r2, r2, r1
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	0021      	movs	r1, r4
 800c29a:	0033      	movs	r3, r6
 800c29c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c29e:	19d2      	adds	r2, r2, r7
 800c2a0:	f002 f908 	bl	800e4b4 <_mbrtowc_r>
 800c2a4:	0003      	movs	r3, r0
 800c2a6:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <__ssvfscanf_r+0xb24>
 800c2ac:	f7ff fb3d 	bl	800b92a <__ssvfscanf_r+0x19e>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d12f      	bne.n	800c314 <__ssvfscanf_r+0xb88>
 800c2b4:	6020      	str	r0, [r4, #0]
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	f002 f91a 	bl	800e4f0 <iswspace>
 800c2bc:	6238      	str	r0, [r7, #32]
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d04a      	beq.n	800c358 <__ssvfscanf_r+0xbcc>
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	d13c      	bne.n	800c340 <__ssvfscanf_r+0xbb4>
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d000      	beq.n	800c2ce <__ssvfscanf_r+0xb42>
 800c2cc:	e640      	b.n	800bf50 <__ssvfscanf_r+0x7c4>
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	d100      	bne.n	800c2d6 <__ssvfscanf_r+0xb4a>
 800c2d4:	e639      	b.n	800bf4a <__ssvfscanf_r+0x7be>
 800c2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	1ae4      	subs	r4, r4, r3
 800c2dc:	10a3      	asrs	r3, r4, #2
 800c2de:	3301      	adds	r3, #1
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d800      	bhi.n	800c2e6 <__ssvfscanf_r+0xb5a>
 800c2e4:	e631      	b.n	800bf4a <__ssvfscanf_r+0x7be>
 800c2e6:	6828      	ldr	r0, [r5, #0]
 800c2e8:	1d21      	adds	r1, r4, #4
 800c2ea:	f001 fd49 	bl	800dd80 <realloc>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d100      	bne.n	800c2f4 <__ssvfscanf_r+0xb68>
 800c2f2:	e62a      	b.n	800bf4a <__ssvfscanf_r+0x7be>
 800c2f4:	6028      	str	r0, [r5, #0]
 800c2f6:	e628      	b.n	800bf4a <__ssvfscanf_r+0x7be>
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	001d      	movs	r5, r3
 800c300:	613b      	str	r3, [r7, #16]
 800c302:	633b      	str	r3, [r7, #48]	; 0x30
 800c304:	334c      	adds	r3, #76	; 0x4c
 800c306:	18fc      	adds	r4, r7, r3
 800c308:	e789      	b.n	800c21e <__ssvfscanf_r+0xa92>
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	001d      	movs	r5, r3
 800c30e:	613b      	str	r3, [r7, #16]
 800c310:	633b      	str	r3, [r7, #48]	; 0x30
 800c312:	e784      	b.n	800c21e <__ssvfscanf_r+0xa92>
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	623e      	str	r6, [r7, #32]
 800c318:	3302      	adds	r3, #2
 800c31a:	d1cc      	bne.n	800c2b6 <__ssvfscanf_r+0xb2a>
 800c31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dd00      	ble.n	800c326 <__ssvfscanf_r+0xb9a>
 800c324:	e77d      	b.n	800c222 <__ssvfscanf_r+0xa96>
 800c326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c328:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c32a:	f002 f9c3 	bl	800e6b4 <__ssrefill_r>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d100      	bne.n	800c334 <__ssvfscanf_r+0xba8>
 800c332:	e776      	b.n	800c222 <__ssvfscanf_r+0xa96>
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <__ssvfscanf_r+0xbb2>
 800c33a:	f7ff faf6 	bl	800b92a <__ssvfscanf_r+0x19e>
 800c33e:	e7c2      	b.n	800c2c6 <__ssvfscanf_r+0xb3a>
 800c340:	238c      	movs	r3, #140	; 0x8c
 800c342:	2248      	movs	r2, #72	; 0x48
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	189b      	adds	r3, r3, r2
 800c348:	3e01      	subs	r6, #1
 800c34a:	19db      	adds	r3, r3, r7
 800c34c:	5cf1      	ldrb	r1, [r6, r3]
 800c34e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c350:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c352:	f002 f973 	bl	800e63c <_sungetc_r>
 800c356:	e7b4      	b.n	800c2c2 <__ssvfscanf_r+0xb36>
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	199b      	adds	r3, r3, r6
 800c35c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	2b03      	cmp	r3, #3
 800c362:	d102      	bne.n	800c36a <__ssvfscanf_r+0xbde>
 800c364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c366:	2b04      	cmp	r3, #4
 800c368:	d002      	beq.n	800c370 <__ssvfscanf_r+0xbe4>
 800c36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c36c:	3b01      	subs	r3, #1
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1d2      	bne.n	800c31c <__ssvfscanf_r+0xb90>
 800c376:	3404      	adds	r4, #4
 800c378:	2d00      	cmp	r5, #0
 800c37a:	d016      	beq.n	800c3aa <__ssvfscanf_r+0xc1e>
 800c37c:	69fa      	ldr	r2, [r7, #28]
 800c37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c380:	623a      	str	r2, [r7, #32]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	1ae6      	subs	r6, r4, r3
 800c386:	10b3      	asrs	r3, r6, #2
 800c388:	4293      	cmp	r3, r2
 800c38a:	d3c7      	bcc.n	800c31c <__ssvfscanf_r+0xb90>
 800c38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38e:	00d1      	lsls	r1, r2, #3
 800c390:	f001 fcf6 	bl	800dd80 <realloc>
 800c394:	6338      	str	r0, [r7, #48]	; 0x30
 800c396:	2800      	cmp	r0, #0
 800c398:	d101      	bne.n	800c39e <__ssvfscanf_r+0xc12>
 800c39a:	f7ff fbbf 	bl	800bb1c <__ssvfscanf_r+0x390>
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	1984      	adds	r4, r0, r6
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	6028      	str	r0, [r5, #0]
 800c3a6:	613b      	str	r3, [r7, #16]
 800c3a8:	e7b8      	b.n	800c31c <__ssvfscanf_r+0xb90>
 800c3aa:	623d      	str	r5, [r7, #32]
 800c3ac:	e7b6      	b.n	800c31c <__ssvfscanf_r+0xb90>
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	0000fff6 	.word	0x0000fff6
 800c3b4:	0800fce1 	.word	0x0800fce1
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01c      	beq.n	800c3f8 <__ssvfscanf_r+0xc6c>
 800c3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c0:	49bf      	ldr	r1, [pc, #764]	; (800c6c0 <__ssvfscanf_r+0xf34>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	5c8a      	ldrb	r2, [r1, r2]
 800c3c8:	2108      	movs	r1, #8
 800c3ca:	420a      	tst	r2, r1
 800c3cc:	d000      	beq.n	800c3d0 <__ssvfscanf_r+0xc44>
 800c3ce:	e4a1      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3d4:	6852      	ldr	r2, [r2, #4]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	600b      	str	r3, [r1, #0]
 800c3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3dc:	3a01      	subs	r2, #1
 800c3de:	3401      	adds	r4, #1
 800c3e0:	604a      	str	r2, [r1, #4]
 800c3e2:	429c      	cmp	r4, r3
 800c3e4:	d100      	bne.n	800c3e8 <__ssvfscanf_r+0xc5c>
 800c3e6:	e495      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c3e8:	2a00      	cmp	r2, #0
 800c3ea:	dce8      	bgt.n	800c3be <__ssvfscanf_r+0xc32>
 800c3ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c3ee:	f002 f961 	bl	800e6b4 <__ssrefill_r>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0e3      	beq.n	800c3be <__ssvfscanf_r+0xc32>
 800c3f6:	e48d      	b.n	800bd14 <__ssvfscanf_r+0x588>
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	0032      	movs	r2, r6
 800c3fc:	cb10      	ldmia	r3!, {r4}
 800c3fe:	61fb      	str	r3, [r7, #28]
 800c400:	2380      	movs	r3, #128	; 0x80
 800c402:	401a      	ands	r2, r3
 800c404:	421e      	tst	r6, r3
 800c406:	d039      	beq.n	800c47c <__ssvfscanf_r+0xcf0>
 800c408:	2c00      	cmp	r4, #0
 800c40a:	d101      	bne.n	800c410 <__ssvfscanf_r+0xc84>
 800c40c:	f7ff fabb 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800c410:	2020      	movs	r0, #32
 800c412:	f7fb fb2f 	bl	8007a74 <malloc>
 800c416:	6338      	str	r0, [r7, #48]	; 0x30
 800c418:	2800      	cmp	r0, #0
 800c41a:	d101      	bne.n	800c420 <__ssvfscanf_r+0xc94>
 800c41c:	f7ff fa8c 	bl	800b938 <__ssvfscanf_r+0x1ac>
 800c420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	88de      	ldrh	r6, [r3, #6]
 800c426:	889d      	ldrh	r5, [r3, #4]
 800c428:	6818      	ldr	r0, [r3, #0]
 800c42a:	42ae      	cmp	r6, r5
 800c42c:	d310      	bcc.n	800c450 <__ssvfscanf_r+0xcc4>
 800c42e:	4ba5      	ldr	r3, [pc, #660]	; (800c6c4 <__ssvfscanf_r+0xf38>)
 800c430:	429d      	cmp	r5, r3
 800c432:	d901      	bls.n	800c438 <__ssvfscanf_r+0xcac>
 800c434:	f7ff fb7b 	bl	800bb2e <__ssvfscanf_r+0x3a2>
 800c438:	3508      	adds	r5, #8
 800c43a:	b2ad      	uxth	r5, r5
 800c43c:	00a9      	lsls	r1, r5, #2
 800c43e:	f001 fc9f 	bl	800dd80 <realloc>
 800c442:	2800      	cmp	r0, #0
 800c444:	d101      	bne.n	800c44a <__ssvfscanf_r+0xcbe>
 800c446:	f7ff fb72 	bl	800bb2e <__ssvfscanf_r+0x3a2>
 800c44a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c44c:	6018      	str	r0, [r3, #0]
 800c44e:	809d      	strh	r5, [r3, #4]
 800c450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c452:	1c72      	adds	r2, r6, #1
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	00b6      	lsls	r6, r6, #2
 800c458:	50f4      	str	r4, [r6, r3]
 800c45a:	2320      	movs	r3, #32
 800c45c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c45e:	0026      	movs	r6, r4
 800c460:	80ca      	strh	r2, [r1, #6]
 800c462:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800c464:	633b      	str	r3, [r7, #48]	; 0x30
 800c466:	0025      	movs	r5, r4
 800c468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c46a:	4995      	ldr	r1, [pc, #596]	; (800c6c0 <__ssvfscanf_r+0xf34>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	781a      	ldrb	r2, [r3, #0]
 800c470:	5c8a      	ldrb	r2, [r1, r2]
 800c472:	2108      	movs	r1, #8
 800c474:	420a      	tst	r2, r1
 800c476:	d004      	beq.n	800c482 <__ssvfscanf_r+0xcf6>
 800c478:	623c      	str	r4, [r7, #32]
 800c47a:	e031      	b.n	800c4e0 <__ssvfscanf_r+0xd54>
 800c47c:	0016      	movs	r6, r2
 800c47e:	633a      	str	r2, [r7, #48]	; 0x30
 800c480:	e7f1      	b.n	800c466 <__ssvfscanf_r+0xcda>
 800c482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c484:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c486:	6852      	ldr	r2, [r2, #4]
 800c488:	3a01      	subs	r2, #1
 800c48a:	604a      	str	r2, [r1, #4]
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	600a      	str	r2, [r1, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	1c62      	adds	r2, r4, #1
 800c494:	623a      	str	r2, [r7, #32]
 800c496:	7023      	strb	r3, [r4, #0]
 800c498:	2e00      	cmp	r6, #0
 800c49a:	d010      	beq.n	800c4be <__ssvfscanf_r+0xd32>
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	1b54      	subs	r4, r2, r5
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d30c      	bcc.n	800c4be <__ssvfscanf_r+0xd32>
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	0028      	movs	r0, r5
 800c4a8:	0019      	movs	r1, r3
 800c4aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c4ac:	f001 fc68 	bl	800dd80 <realloc>
 800c4b0:	1e05      	subs	r5, r0, #0
 800c4b2:	d101      	bne.n	800c4b8 <__ssvfscanf_r+0xd2c>
 800c4b4:	f7ff fa40 	bl	800b938 <__ssvfscanf_r+0x1ac>
 800c4b8:	1903      	adds	r3, r0, r4
 800c4ba:	623b      	str	r3, [r7, #32]
 800c4bc:	6030      	str	r0, [r6, #0]
 800c4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00b      	beq.n	800c4e0 <__ssvfscanf_r+0xd54>
 800c4c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd01      	ble.n	800c4d4 <__ssvfscanf_r+0xd48>
 800c4d0:	6a3c      	ldr	r4, [r7, #32]
 800c4d2:	e7c9      	b.n	800c468 <__ssvfscanf_r+0xcdc>
 800c4d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4d8:	f002 f8ec 	bl	800e6b4 <__ssrefill_r>
 800c4dc:	2800      	cmp	r0, #0
 800c4de:	d0f7      	beq.n	800c4d0 <__ssvfscanf_r+0xd44>
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	6a3a      	ldr	r2, [r7, #32]
 800c4e4:	7013      	strb	r3, [r2, #0]
 800c4e6:	1b55      	subs	r5, r2, r5
 800c4e8:	2e00      	cmp	r6, #0
 800c4ea:	d009      	beq.n	800c500 <__ssvfscanf_r+0xd74>
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	1c69      	adds	r1, r5, #1
 800c4f0:	428b      	cmp	r3, r1
 800c4f2:	d905      	bls.n	800c500 <__ssvfscanf_r+0xd74>
 800c4f4:	6830      	ldr	r0, [r6, #0]
 800c4f6:	f001 fc43 	bl	800dd80 <realloc>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d000      	beq.n	800c500 <__ssvfscanf_r+0xd74>
 800c4fe:	6030      	str	r0, [r6, #0]
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	195b      	adds	r3, r3, r5
 800c504:	63bb      	str	r3, [r7, #56]	; 0x38
 800c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c508:	3301      	adds	r3, #1
 800c50a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c50c:	e63c      	b.n	800c188 <__ssvfscanf_r+0x9fc>
 800c50e:	22ae      	movs	r2, #174	; 0xae
 800c510:	2100      	movs	r1, #0
 800c512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c514:	0052      	lsls	r2, r2, #1
 800c516:	3b01      	subs	r3, #1
 800c518:	6239      	str	r1, [r7, #32]
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d906      	bls.n	800c52c <__ssvfscanf_r+0xda0>
 800c51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c520:	3b5e      	subs	r3, #94	; 0x5e
 800c522:	3bff      	subs	r3, #255	; 0xff
 800c524:	623b      	str	r3, [r7, #32]
 800c526:	235e      	movs	r3, #94	; 0x5e
 800c528:	33ff      	adds	r3, #255	; 0xff
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52c:	24d8      	movs	r4, #216	; 0xd8
 800c52e:	2300      	movs	r3, #0
 800c530:	2248      	movs	r2, #72	; 0x48
 800c532:	0124      	lsls	r4, r4, #4
 800c534:	4334      	orrs	r4, r6
 800c536:	2680      	movs	r6, #128	; 0x80
 800c538:	61fb      	str	r3, [r7, #28]
 800c53a:	3319      	adds	r3, #25
 800c53c:	33ff      	adds	r3, #255	; 0xff
 800c53e:	189b      	adds	r3, r3, r2
 800c540:	19dd      	adds	r5, r3, r7
 800c542:	00b6      	lsls	r6, r6, #2
 800c544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	7813      	ldrb	r3, [r2, #0]
 800c54a:	2b39      	cmp	r3, #57	; 0x39
 800c54c:	d80f      	bhi.n	800c56e <__ssvfscanf_r+0xde2>
 800c54e:	2b2a      	cmp	r3, #42	; 0x2a
 800c550:	d91b      	bls.n	800c58a <__ssvfscanf_r+0xdfe>
 800c552:	0018      	movs	r0, r3
 800c554:	382b      	subs	r0, #43	; 0x2b
 800c556:	280e      	cmp	r0, #14
 800c558:	d817      	bhi.n	800c58a <__ssvfscanf_r+0xdfe>
 800c55a:	f7f3 fddb 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c55e:	168f      	.short	0x168f
 800c560:	5416168f 	.word	0x5416168f
 800c564:	80808080 	.word	0x80808080
 800c568:	87808080 	.word	0x87808080
 800c56c:	87          	.byte	0x87
 800c56d:	00          	.byte	0x00
 800c56e:	2b66      	cmp	r3, #102	; 0x66
 800c570:	d83a      	bhi.n	800c5e8 <__ssvfscanf_r+0xe5c>
 800c572:	2b60      	cmp	r3, #96	; 0x60
 800c574:	d803      	bhi.n	800c57e <__ssvfscanf_r+0xdf2>
 800c576:	2b46      	cmp	r3, #70	; 0x46
 800c578:	d805      	bhi.n	800c586 <__ssvfscanf_r+0xdfa>
 800c57a:	2b40      	cmp	r3, #64	; 0x40
 800c57c:	d905      	bls.n	800c58a <__ssvfscanf_r+0xdfe>
 800c57e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c580:	290a      	cmp	r1, #10
 800c582:	dc71      	bgt.n	800c668 <__ssvfscanf_r+0xedc>
 800c584:	e001      	b.n	800c58a <__ssvfscanf_r+0xdfe>
 800c586:	2b58      	cmp	r3, #88	; 0x58
 800c588:	d030      	beq.n	800c5ec <__ssvfscanf_r+0xe60>
 800c58a:	05e3      	lsls	r3, r4, #23
 800c58c:	d515      	bpl.n	800c5ba <__ssvfscanf_r+0xe2e>
 800c58e:	238c      	movs	r3, #140	; 0x8c
 800c590:	2248      	movs	r2, #72	; 0x48
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	189b      	adds	r3, r3, r2
 800c596:	19db      	adds	r3, r3, r7
 800c598:	429d      	cmp	r5, r3
 800c59a:	d905      	bls.n	800c5a8 <__ssvfscanf_r+0xe1c>
 800c59c:	3d01      	subs	r5, #1
 800c59e:	7829      	ldrb	r1, [r5, #0]
 800c5a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5a4:	f002 f84a 	bl	800e63c <_sungetc_r>
 800c5a8:	238c      	movs	r3, #140	; 0x8c
 800c5aa:	2248      	movs	r2, #72	; 0x48
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	189b      	adds	r3, r3, r2
 800c5b0:	19db      	adds	r3, r3, r7
 800c5b2:	429d      	cmp	r5, r3
 800c5b4:	d101      	bne.n	800c5ba <__ssvfscanf_r+0xe2e>
 800c5b6:	f7ff f9e6 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800c5ba:	2310      	movs	r3, #16
 800c5bc:	0022      	movs	r2, r4
 800c5be:	401a      	ands	r2, r3
 800c5c0:	421c      	tst	r4, r3
 800c5c2:	d171      	bne.n	800c6a8 <__ssvfscanf_r+0xf1c>
 800c5c4:	218c      	movs	r1, #140	; 0x8c
 800c5c6:	2048      	movs	r0, #72	; 0x48
 800c5c8:	0049      	lsls	r1, r1, #1
 800c5ca:	1809      	adds	r1, r1, r0
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ce:	697e      	ldr	r6, [r7, #20]
 800c5d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c5d2:	19c9      	adds	r1, r1, r7
 800c5d4:	702a      	strb	r2, [r5, #0]
 800c5d6:	47b0      	blx	r6
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	1d1e      	adds	r6, r3, #4
 800c5dc:	06a3      	lsls	r3, r4, #26
 800c5de:	d559      	bpl.n	800c694 <__ssvfscanf_r+0xf08>
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6018      	str	r0, [r3, #0]
 800c5e6:	e05b      	b.n	800c6a0 <__ssvfscanf_r+0xf14>
 800c5e8:	2b78      	cmp	r3, #120	; 0x78
 800c5ea:	d1ce      	bne.n	800c58a <__ssvfscanf_r+0xdfe>
 800c5ec:	21c0      	movs	r1, #192	; 0xc0
 800c5ee:	00c9      	lsls	r1, r1, #3
 800c5f0:	4021      	ands	r1, r4
 800c5f2:	42b1      	cmp	r1, r6
 800c5f4:	d1c9      	bne.n	800c58a <__ssvfscanf_r+0xdfe>
 800c5f6:	4934      	ldr	r1, [pc, #208]	; (800c6c8 <__ssvfscanf_r+0xf3c>)
 800c5f8:	4021      	ands	r1, r4
 800c5fa:	24a0      	movs	r4, #160	; 0xa0
 800c5fc:	00e4      	lsls	r4, r4, #3
 800c5fe:	430c      	orrs	r4, r1
 800c600:	2110      	movs	r1, #16
 800c602:	6279      	str	r1, [r7, #36]	; 0x24
 800c604:	e00b      	b.n	800c61e <__ssvfscanf_r+0xe92>
 800c606:	0521      	lsls	r1, r4, #20
 800c608:	d509      	bpl.n	800c61e <__ssvfscanf_r+0xe92>
 800c60a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d102      	bne.n	800c616 <__ssvfscanf_r+0xe8a>
 800c610:	3108      	adds	r1, #8
 800c612:	4334      	orrs	r4, r6
 800c614:	6279      	str	r1, [r7, #36]	; 0x24
 800c616:	0561      	lsls	r1, r4, #21
 800c618:	d504      	bpl.n	800c624 <__ssvfscanf_r+0xe98>
 800c61a:	492c      	ldr	r1, [pc, #176]	; (800c6cc <__ssvfscanf_r+0xf40>)
 800c61c:	400c      	ands	r4, r1
 800c61e:	702b      	strb	r3, [r5, #0]
 800c620:	3501      	adds	r5, #1
 800c622:	e00c      	b.n	800c63e <__ssvfscanf_r+0xeb2>
 800c624:	4b2a      	ldr	r3, [pc, #168]	; (800c6d0 <__ssvfscanf_r+0xf44>)
 800c626:	401c      	ands	r4, r3
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d004      	beq.n	800c638 <__ssvfscanf_r+0xeac>
 800c62e:	3b01      	subs	r3, #1
 800c630:	623b      	str	r3, [r7, #32]
 800c632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c634:	3301      	adds	r3, #1
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	3301      	adds	r3, #1
 800c63c:	61fb      	str	r3, [r7, #28]
 800c63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	3b01      	subs	r3, #1
 800c646:	604b      	str	r3, [r1, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	dd1c      	ble.n	800c686 <__ssvfscanf_r+0xefa>
 800c64c:	3201      	adds	r2, #1
 800c64e:	600a      	str	r2, [r1, #0]
 800c650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c652:	3b01      	subs	r3, #1
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d000      	beq.n	800c65c <__ssvfscanf_r+0xed0>
 800c65a:	e773      	b.n	800c544 <__ssvfscanf_r+0xdb8>
 800c65c:	e795      	b.n	800c58a <__ssvfscanf_r+0xdfe>
 800c65e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c660:	491c      	ldr	r1, [pc, #112]	; (800c6d4 <__ssvfscanf_r+0xf48>)
 800c662:	0040      	lsls	r0, r0, #1
 800c664:	5e41      	ldrsh	r1, [r0, r1]
 800c666:	6279      	str	r1, [r7, #36]	; 0x24
 800c668:	491b      	ldr	r1, [pc, #108]	; (800c6d8 <__ssvfscanf_r+0xf4c>)
 800c66a:	e7d7      	b.n	800c61c <__ssvfscanf_r+0xe90>
 800c66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c66e:	4919      	ldr	r1, [pc, #100]	; (800c6d4 <__ssvfscanf_r+0xf48>)
 800c670:	0040      	lsls	r0, r0, #1
 800c672:	5e41      	ldrsh	r1, [r0, r1]
 800c674:	6279      	str	r1, [r7, #36]	; 0x24
 800c676:	2908      	cmp	r1, #8
 800c678:	dcf6      	bgt.n	800c668 <__ssvfscanf_r+0xedc>
 800c67a:	e786      	b.n	800c58a <__ssvfscanf_r+0xdfe>
 800c67c:	2180      	movs	r1, #128	; 0x80
 800c67e:	420c      	tst	r4, r1
 800c680:	d083      	beq.n	800c58a <__ssvfscanf_r+0xdfe>
 800c682:	438c      	bics	r4, r1
 800c684:	e7cb      	b.n	800c61e <__ssvfscanf_r+0xe92>
 800c686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c688:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c68a:	f002 f813 	bl	800e6b4 <__ssrefill_r>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d0de      	beq.n	800c650 <__ssvfscanf_r+0xec4>
 800c692:	e77a      	b.n	800c58a <__ssvfscanf_r+0xdfe>
 800c694:	2308      	movs	r3, #8
 800c696:	421c      	tst	r4, r3
 800c698:	d020      	beq.n	800c6dc <__ssvfscanf_r+0xf50>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	7018      	strb	r0, [r3, #0]
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	633e      	str	r6, [r7, #48]	; 0x30
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6a8:	238c      	movs	r3, #140	; 0x8c
 800c6aa:	2248      	movs	r2, #72	; 0x48
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	189b      	adds	r3, r3, r2
 800c6b0:	19db      	adds	r3, r3, r7
 800c6b2:	1aed      	subs	r5, r5, r3
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	18ed      	adds	r5, r5, r3
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	195b      	adds	r3, r3, r5
 800c6bc:	f7ff f92d 	bl	800b91a <__ssvfscanf_r+0x18e>
 800c6c0:	0800fce1 	.word	0x0800fce1
 800c6c4:	0000fff6 	.word	0x0000fff6
 800c6c8:	fffffdff 	.word	0xfffffdff
 800c6cc:	fffffa7f 	.word	0xfffffa7f
 800c6d0:	fffffc7f 	.word	0xfffffc7f
 800c6d4:	0801000e 	.word	0x0801000e
 800c6d8:	fffff47f 	.word	0xfffff47f
 800c6dc:	0763      	lsls	r3, r4, #29
 800c6de:	d503      	bpl.n	800c6e8 <__ssvfscanf_r+0xf5c>
 800c6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	8018      	strh	r0, [r3, #0]
 800c6e6:	e7db      	b.n	800c6a0 <__ssvfscanf_r+0xf14>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	0022      	movs	r2, r4
 800c6ec:	401a      	ands	r2, r3
 800c6ee:	421c      	tst	r4, r3
 800c6f0:	d000      	beq.n	800c6f4 <__ssvfscanf_r+0xf68>
 800c6f2:	e775      	b.n	800c5e0 <__ssvfscanf_r+0xe54>
 800c6f4:	07a4      	lsls	r4, r4, #30
 800c6f6:	d400      	bmi.n	800c6fa <__ssvfscanf_r+0xf6e>
 800c6f8:	e772      	b.n	800c5e0 <__ssvfscanf_r+0xe54>
 800c6fa:	4ba8      	ldr	r3, [pc, #672]	; (800c99c <__ssvfscanf_r+0x1210>)
 800c6fc:	6979      	ldr	r1, [r7, #20]
 800c6fe:	4299      	cmp	r1, r3
 800c700:	d10c      	bne.n	800c71c <__ssvfscanf_r+0xf90>
 800c702:	218c      	movs	r1, #140	; 0x8c
 800c704:	2048      	movs	r0, #72	; 0x48
 800c706:	0049      	lsls	r1, r1, #1
 800c708:	1809      	adds	r1, r1, r0
 800c70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c70e:	19c9      	adds	r1, r1, r7
 800c710:	f001 fecc 	bl	800e4ac <_strtoull_r>
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	c303      	stmia	r3!, {r0, r1}
 800c71a:	e7c1      	b.n	800c6a0 <__ssvfscanf_r+0xf14>
 800c71c:	218c      	movs	r1, #140	; 0x8c
 800c71e:	2048      	movs	r0, #72	; 0x48
 800c720:	0049      	lsls	r1, r1, #1
 800c722:	1809      	adds	r1, r1, r0
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c728:	19c9      	adds	r1, r1, r7
 800c72a:	f001 fe0d 	bl	800e348 <_strtoll_r>
 800c72e:	e7f1      	b.n	800c714 <__ssvfscanf_r+0xf88>
 800c730:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c732:	f000 fb9f 	bl	800ce74 <_localeconv_r>
 800c736:	22ae      	movs	r2, #174	; 0xae
 800c738:	2100      	movs	r1, #0
 800c73a:	6803      	ldr	r3, [r0, #0]
 800c73c:	0052      	lsls	r2, r2, #1
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	60f9      	str	r1, [r7, #12]
 800c744:	3b01      	subs	r3, #1
 800c746:	4293      	cmp	r3, r2
 800c748:	d906      	bls.n	800c758 <__ssvfscanf_r+0xfcc>
 800c74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74c:	3b5e      	subs	r3, #94	; 0x5e
 800c74e:	3bff      	subs	r3, #255	; 0xff
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	235e      	movs	r3, #94	; 0x5e
 800c754:	33ff      	adds	r3, #255	; 0xff
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c758:	23f0      	movs	r3, #240	; 0xf0
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	431e      	orrs	r6, r3
 800c75e:	238c      	movs	r3, #140	; 0x8c
 800c760:	2248      	movs	r2, #72	; 0x48
 800c762:	2400      	movs	r4, #0
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	189b      	adds	r3, r3, r2
 800c768:	623c      	str	r4, [r7, #32]
 800c76a:	607c      	str	r4, [r7, #4]
 800c76c:	60bc      	str	r4, [r7, #8]
 800c76e:	61fc      	str	r4, [r7, #28]
 800c770:	613c      	str	r4, [r7, #16]
 800c772:	19dd      	adds	r5, r3, r7
 800c774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	0010      	movs	r0, r2
 800c77c:	382b      	subs	r0, #43	; 0x2b
 800c77e:	284e      	cmp	r0, #78	; 0x4e
 800c780:	d900      	bls.n	800c784 <__ssvfscanf_r+0xff8>
 800c782:	e133      	b.n	800c9ec <__ssvfscanf_r+0x1260>
 800c784:	f7f3 fcd0 	bl	8000128 <__gnu_thumb1_case_uhi>
 800c788:	0132009b 	.word	0x0132009b
 800c78c:	0132009b 	.word	0x0132009b
 800c790:	004f0132 	.word	0x004f0132
 800c794:	00720072 	.word	0x00720072
 800c798:	00720072 	.word	0x00720072
 800c79c:	00720072 	.word	0x00720072
 800c7a0:	00720072 	.word	0x00720072
 800c7a4:	01320072 	.word	0x01320072
 800c7a8:	01320132 	.word	0x01320132
 800c7ac:	01320132 	.word	0x01320132
 800c7b0:	01320132 	.word	0x01320132
 800c7b4:	007b00bc 	.word	0x007b00bc
 800c7b8:	007b007b 	.word	0x007b007b
 800c7bc:	00f7012f 	.word	0x00f7012f
 800c7c0:	01320132 	.word	0x01320132
 800c7c4:	013200e3 	.word	0x013200e3
 800c7c8:	01320132 	.word	0x01320132
 800c7cc:	00a00132 	.word	0x00a00132
 800c7d0:	01120132 	.word	0x01120132
 800c7d4:	01320132 	.word	0x01320132
 800c7d8:	01010132 	.word	0x01010132
 800c7dc:	01320132 	.word	0x01320132
 800c7e0:	00820132 	.word	0x00820132
 800c7e4:	01320105 	.word	0x01320105
 800c7e8:	01320132 	.word	0x01320132
 800c7ec:	01320132 	.word	0x01320132
 800c7f0:	01320132 	.word	0x01320132
 800c7f4:	007b00bc 	.word	0x007b00bc
 800c7f8:	007b007b 	.word	0x007b007b
 800c7fc:	00f7012f 	.word	0x00f7012f
 800c800:	01320132 	.word	0x01320132
 800c804:	013200e3 	.word	0x013200e3
 800c808:	01320132 	.word	0x01320132
 800c80c:	00a00132 	.word	0x00a00132
 800c810:	01120132 	.word	0x01120132
 800c814:	01320132 	.word	0x01320132
 800c818:	01010132 	.word	0x01010132
 800c81c:	01320132 	.word	0x01320132
 800c820:	00820132 	.word	0x00820132
 800c824:	0105      	.short	0x0105
 800c826:	05f1      	lsls	r1, r6, #23
 800c828:	d520      	bpl.n	800c86c <__ssvfscanf_r+0x10e0>
 800c82a:	2280      	movs	r2, #128	; 0x80
 800c82c:	4396      	bics	r6, r2
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	3201      	adds	r2, #1
 800c832:	61fa      	str	r2, [r7, #28]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	2a00      	cmp	r2, #0
 800c838:	d004      	beq.n	800c844 <__ssvfscanf_r+0x10b8>
 800c83a:	3a01      	subs	r2, #1
 800c83c:	60fa      	str	r2, [r7, #12]
 800c83e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c840:	3201      	adds	r2, #1
 800c842:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c848:	3a01      	subs	r2, #1
 800c84a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c84c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c84e:	3201      	adds	r2, #1
 800c850:	63ba      	str	r2, [r7, #56]	; 0x38
 800c852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c854:	6852      	ldr	r2, [r2, #4]
 800c856:	3a01      	subs	r2, #1
 800c858:	604a      	str	r2, [r1, #4]
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	dc00      	bgt.n	800c860 <__ssvfscanf_r+0x10d4>
 800c85e:	e0d6      	b.n	800ca0e <__ssvfscanf_r+0x1282>
 800c860:	3301      	adds	r3, #1
 800c862:	600b      	str	r3, [r1, #0]
 800c864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c866:	2b00      	cmp	r3, #0
 800c868:	d184      	bne.n	800c774 <__ssvfscanf_r+0xfe8>
 800c86a:	e057      	b.n	800c91c <__ssvfscanf_r+0x1190>
 800c86c:	6a39      	ldr	r1, [r7, #32]
 800c86e:	1909      	adds	r1, r1, r4
 800c870:	2900      	cmp	r1, #0
 800c872:	d153      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c874:	494a      	ldr	r1, [pc, #296]	; (800c9a0 <__ssvfscanf_r+0x1214>)
 800c876:	400e      	ands	r6, r1
 800c878:	702a      	strb	r2, [r5, #0]
 800c87a:	3501      	adds	r5, #1
 800c87c:	e7e2      	b.n	800c844 <__ssvfscanf_r+0x10b8>
 800c87e:	0531      	lsls	r1, r6, #20
 800c880:	d54c      	bpl.n	800c91c <__ssvfscanf_r+0x1190>
 800c882:	6a39      	ldr	r1, [r7, #32]
 800c884:	1909      	adds	r1, r1, r4
 800c886:	2900      	cmp	r1, #0
 800c888:	d040      	beq.n	800c90c <__ssvfscanf_r+0x1180>
 800c88a:	e047      	b.n	800c91c <__ssvfscanf_r+0x1190>
 800c88c:	2198      	movs	r1, #152	; 0x98
 800c88e:	2080      	movs	r0, #128	; 0x80
 800c890:	0109      	lsls	r1, r1, #4
 800c892:	4031      	ands	r1, r6
 800c894:	0040      	lsls	r0, r0, #1
 800c896:	4281      	cmp	r1, r0
 800c898:	d140      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c89a:	69f9      	ldr	r1, [r7, #28]
 800c89c:	2901      	cmp	r1, #1
 800c89e:	d13d      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c8a0:	2080      	movs	r0, #128	; 0x80
 800c8a2:	4940      	ldr	r1, [pc, #256]	; (800c9a4 <__ssvfscanf_r+0x1218>)
 800c8a4:	0100      	lsls	r0, r0, #4
 800c8a6:	400e      	ands	r6, r1
 800c8a8:	3132      	adds	r1, #50	; 0x32
 800c8aa:	31ff      	adds	r1, #255	; 0xff
 800c8ac:	7029      	strb	r1, [r5, #0]
 800c8ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8b0:	4306      	orrs	r6, r0
 800c8b2:	3901      	subs	r1, #1
 800c8b4:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	61f9      	str	r1, [r7, #28]
 800c8bc:	e7dc      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c8be:	2180      	movs	r1, #128	; 0x80
 800c8c0:	420e      	tst	r6, r1
 800c8c2:	d02b      	beq.n	800c91c <__ssvfscanf_r+0x1190>
 800c8c4:	438e      	bics	r6, r1
 800c8c6:	e7d7      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c8c8:	6a39      	ldr	r1, [r7, #32]
 800c8ca:	2900      	cmp	r1, #0
 800c8cc:	d10d      	bne.n	800c8ea <__ssvfscanf_r+0x115e>
 800c8ce:	69f9      	ldr	r1, [r7, #28]
 800c8d0:	2900      	cmp	r1, #0
 800c8d2:	d10e      	bne.n	800c8f2 <__ssvfscanf_r+0x1166>
 800c8d4:	21e0      	movs	r1, #224	; 0xe0
 800c8d6:	0030      	movs	r0, r6
 800c8d8:	00c9      	lsls	r1, r1, #3
 800c8da:	4008      	ands	r0, r1
 800c8dc:	4288      	cmp	r0, r1
 800c8de:	d108      	bne.n	800c8f2 <__ssvfscanf_r+0x1166>
 800c8e0:	4931      	ldr	r1, [pc, #196]	; (800c9a8 <__ssvfscanf_r+0x121c>)
 800c8e2:	400e      	ands	r6, r1
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	6239      	str	r1, [r7, #32]
 800c8e8:	e7c6      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c8ea:	6a39      	ldr	r1, [r7, #32]
 800c8ec:	2902      	cmp	r1, #2
 800c8ee:	d100      	bne.n	800c8f2 <__ssvfscanf_r+0x1166>
 800c8f0:	e089      	b.n	800ca06 <__ssvfscanf_r+0x127a>
 800c8f2:	2c01      	cmp	r4, #1
 800c8f4:	d001      	beq.n	800c8fa <__ssvfscanf_r+0x116e>
 800c8f6:	2c04      	cmp	r4, #4
 800c8f8:	d110      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	b2e4      	uxtb	r4, r4
 800c8fe:	e7bb      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c900:	0531      	lsls	r1, r6, #20
 800c902:	d508      	bpl.n	800c916 <__ssvfscanf_r+0x118a>
 800c904:	6a39      	ldr	r1, [r7, #32]
 800c906:	1909      	adds	r1, r1, r4
 800c908:	2900      	cmp	r1, #0
 800c90a:	d104      	bne.n	800c916 <__ssvfscanf_r+0x118a>
 800c90c:	4824      	ldr	r0, [pc, #144]	; (800c9a0 <__ssvfscanf_r+0x1214>)
 800c90e:	000c      	movs	r4, r1
 800c910:	4006      	ands	r6, r0
 800c912:	6239      	str	r1, [r7, #32]
 800c914:	e7b0      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c916:	6a39      	ldr	r1, [r7, #32]
 800c918:	2901      	cmp	r1, #1
 800c91a:	d076      	beq.n	800ca0a <__ssvfscanf_r+0x127e>
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <__ssvfscanf_r+0x119a>
 800c922:	4b20      	ldr	r3, [pc, #128]	; (800c9a4 <__ssvfscanf_r+0x1218>)
 800c924:	401e      	ands	r6, r3
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	3b01      	subs	r3, #1
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d877      	bhi.n	800ca1e <__ssvfscanf_r+0x1292>
 800c92e:	238c      	movs	r3, #140	; 0x8c
 800c930:	2248      	movs	r2, #72	; 0x48
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	189b      	adds	r3, r3, r2
 800c936:	19db      	adds	r3, r3, r7
 800c938:	429d      	cmp	r5, r3
 800c93a:	d801      	bhi.n	800c940 <__ssvfscanf_r+0x11b4>
 800c93c:	f7ff f823 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800c940:	3d01      	subs	r5, #1
 800c942:	7829      	ldrb	r1, [r5, #0]
 800c944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c946:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c948:	f001 fe78 	bl	800e63c <_sungetc_r>
 800c94c:	e7ef      	b.n	800c92e <__ssvfscanf_r+0x11a2>
 800c94e:	2c00      	cmp	r4, #0
 800c950:	d10c      	bne.n	800c96c <__ssvfscanf_r+0x11e0>
 800c952:	69f9      	ldr	r1, [r7, #28]
 800c954:	2900      	cmp	r1, #0
 800c956:	d1e4      	bne.n	800c922 <__ssvfscanf_r+0x1196>
 800c958:	21e0      	movs	r1, #224	; 0xe0
 800c95a:	0030      	movs	r0, r6
 800c95c:	00c9      	lsls	r1, r1, #3
 800c95e:	4008      	ands	r0, r1
 800c960:	4288      	cmp	r0, r1
 800c962:	d1e0      	bne.n	800c926 <__ssvfscanf_r+0x119a>
 800c964:	4910      	ldr	r1, [pc, #64]	; (800c9a8 <__ssvfscanf_r+0x121c>)
 800c966:	3401      	adds	r4, #1
 800c968:	400e      	ands	r6, r1
 800c96a:	e785      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c96c:	20fd      	movs	r0, #253	; 0xfd
 800c96e:	1ee1      	subs	r1, r4, #3
 800c970:	4201      	tst	r1, r0
 800c972:	d1d3      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c974:	e7c1      	b.n	800c8fa <__ssvfscanf_r+0x116e>
 800c976:	0531      	lsls	r1, r6, #20
 800c978:	d503      	bpl.n	800c982 <__ssvfscanf_r+0x11f6>
 800c97a:	6a39      	ldr	r1, [r7, #32]
 800c97c:	1909      	adds	r1, r1, r4
 800c97e:	2900      	cmp	r1, #0
 800c980:	d0c4      	beq.n	800c90c <__ssvfscanf_r+0x1180>
 800c982:	2c02      	cmp	r4, #2
 800c984:	d1ca      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c986:	2403      	movs	r4, #3
 800c988:	e776      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c98a:	2c06      	cmp	r4, #6
 800c98c:	d1c6      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c98e:	2407      	movs	r4, #7
 800c990:	e772      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c992:	2c07      	cmp	r4, #7
 800c994:	d1c2      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c996:	2408      	movs	r4, #8
 800c998:	e76e      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800c99a:	46c0      	nop			; (mov r8, r8)
 800c99c:	0800e1e5 	.word	0x0800e1e5
 800c9a0:	fffffe7f 	.word	0xfffffe7f
 800c9a4:	fffffeff 	.word	0xfffffeff
 800c9a8:	fffff87f 	.word	0xfffff87f
 800c9ac:	0531      	lsls	r1, r6, #20
 800c9ae:	d5b5      	bpl.n	800c91c <__ssvfscanf_r+0x1190>
 800c9b0:	21a0      	movs	r1, #160	; 0xa0
 800c9b2:	2080      	movs	r0, #128	; 0x80
 800c9b4:	00c9      	lsls	r1, r1, #3
 800c9b6:	00c0      	lsls	r0, r0, #3
 800c9b8:	4031      	ands	r1, r6
 800c9ba:	4281      	cmp	r1, r0
 800c9bc:	d004      	beq.n	800c9c8 <__ssvfscanf_r+0x123c>
 800c9be:	4206      	tst	r6, r0
 800c9c0:	d0ac      	beq.n	800c91c <__ssvfscanf_r+0x1190>
 800c9c2:	69f9      	ldr	r1, [r7, #28]
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	d0ae      	beq.n	800c926 <__ssvfscanf_r+0x119a>
 800c9c8:	2180      	movs	r1, #128	; 0x80
 800c9ca:	0089      	lsls	r1, r1, #2
 800c9cc:	420e      	tst	r6, r1
 800c9ce:	d104      	bne.n	800c9da <__ssvfscanf_r+0x124e>
 800c9d0:	69f9      	ldr	r1, [r7, #28]
 800c9d2:	6938      	ldr	r0, [r7, #16]
 800c9d4:	607d      	str	r5, [r7, #4]
 800c9d6:	1a09      	subs	r1, r1, r0
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	20c0      	movs	r0, #192	; 0xc0
 800c9dc:	4973      	ldr	r1, [pc, #460]	; (800cbac <__ssvfscanf_r+0x1420>)
 800c9de:	0040      	lsls	r0, r0, #1
 800c9e0:	400e      	ands	r6, r1
 800c9e2:	4306      	orrs	r6, r0
 800c9e4:	e768      	b.n	800c8b8 <__ssvfscanf_r+0x112c>
 800c9e6:	0531      	lsls	r1, r6, #20
 800c9e8:	d5e2      	bpl.n	800c9b0 <__ssvfscanf_r+0x1224>
 800c9ea:	e74a      	b.n	800c882 <__ssvfscanf_r+0x10f6>
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	7809      	ldrb	r1, [r1, #0]
 800c9f0:	4291      	cmp	r1, r2
 800c9f2:	d193      	bne.n	800c91c <__ssvfscanf_r+0x1190>
 800c9f4:	2180      	movs	r1, #128	; 0x80
 800c9f6:	0089      	lsls	r1, r1, #2
 800c9f8:	420e      	tst	r6, r1
 800c9fa:	d08f      	beq.n	800c91c <__ssvfscanf_r+0x1190>
 800c9fc:	496c      	ldr	r1, [pc, #432]	; (800cbb0 <__ssvfscanf_r+0x1424>)
 800c9fe:	400e      	ands	r6, r1
 800ca00:	69f9      	ldr	r1, [r7, #28]
 800ca02:	6139      	str	r1, [r7, #16]
 800ca04:	e738      	b.n	800c878 <__ssvfscanf_r+0x10ec>
 800ca06:	2103      	movs	r1, #3
 800ca08:	e76d      	b.n	800c8e6 <__ssvfscanf_r+0x115a>
 800ca0a:	2102      	movs	r1, #2
 800ca0c:	e76b      	b.n	800c8e6 <__ssvfscanf_r+0x115a>
 800ca0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca12:	f001 fe4f 	bl	800e6b4 <__ssrefill_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d100      	bne.n	800ca1c <__ssvfscanf_r+0x1290>
 800ca1a:	e723      	b.n	800c864 <__ssvfscanf_r+0x10d8>
 800ca1c:	e77e      	b.n	800c91c <__ssvfscanf_r+0x1190>
 800ca1e:	1e63      	subs	r3, r4, #1
 800ca20:	2b06      	cmp	r3, #6
 800ca22:	d825      	bhi.n	800ca70 <__ssvfscanf_r+0x12e4>
 800ca24:	2c02      	cmp	r4, #2
 800ca26:	d837      	bhi.n	800ca98 <__ssvfscanf_r+0x130c>
 800ca28:	238c      	movs	r3, #140	; 0x8c
 800ca2a:	2248      	movs	r2, #72	; 0x48
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	189b      	adds	r3, r3, r2
 800ca30:	19db      	adds	r3, r3, r7
 800ca32:	429d      	cmp	r5, r3
 800ca34:	d801      	bhi.n	800ca3a <__ssvfscanf_r+0x12ae>
 800ca36:	f7fe ffa6 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800ca3a:	3d01      	subs	r5, #1
 800ca3c:	7829      	ldrb	r1, [r5, #0]
 800ca3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca42:	f001 fdfb 	bl	800e63c <_sungetc_r>
 800ca46:	e7ef      	b.n	800ca28 <__ssvfscanf_r+0x129c>
 800ca48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	7819      	ldrb	r1, [r3, #0]
 800ca50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca54:	f001 fdf2 	bl	800e63c <_sungetc_r>
 800ca58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5a:	6a3a      	ldr	r2, [r7, #32]
 800ca5c:	189b      	adds	r3, r3, r2
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d8f1      	bhi.n	800ca48 <__ssvfscanf_r+0x12bc>
 800ca64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca66:	3c03      	subs	r4, #3
 800ca68:	b2e4      	uxtb	r4, r4
 800ca6a:	1b1b      	subs	r3, r3, r4
 800ca6c:	1b2d      	subs	r5, r5, r4
 800ca6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca70:	05f3      	lsls	r3, r6, #23
 800ca72:	d52f      	bpl.n	800cad4 <__ssvfscanf_r+0x1348>
 800ca74:	0573      	lsls	r3, r6, #21
 800ca76:	d514      	bpl.n	800caa2 <__ssvfscanf_r+0x1316>
 800ca78:	238c      	movs	r3, #140	; 0x8c
 800ca7a:	2248      	movs	r2, #72	; 0x48
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	189b      	adds	r3, r3, r2
 800ca80:	19db      	adds	r3, r3, r7
 800ca82:	429d      	cmp	r5, r3
 800ca84:	d801      	bhi.n	800ca8a <__ssvfscanf_r+0x12fe>
 800ca86:	f7fe ff7e 	bl	800b986 <__ssvfscanf_r+0x1fa>
 800ca8a:	3d01      	subs	r5, #1
 800ca8c:	7829      	ldrb	r1, [r5, #0]
 800ca8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca92:	f001 fdd3 	bl	800e63c <_sungetc_r>
 800ca96:	e7ef      	b.n	800ca78 <__ssvfscanf_r+0x12ec>
 800ca98:	1b63      	subs	r3, r4, r5
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	63fd      	str	r5, [r7, #60]	; 0x3c
 800ca9e:	623b      	str	r3, [r7, #32]
 800caa0:	e7da      	b.n	800ca58 <__ssvfscanf_r+0x12cc>
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	1e6c      	subs	r4, r5, #1
 800caa6:	7821      	ldrb	r1, [r4, #0]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caac:	2965      	cmp	r1, #101	; 0x65
 800caae:	d00a      	beq.n	800cac6 <__ssvfscanf_r+0x133a>
 800cab0:	2945      	cmp	r1, #69	; 0x45
 800cab2:	d008      	beq.n	800cac6 <__ssvfscanf_r+0x133a>
 800cab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cab6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cab8:	f001 fdc0 	bl	800e63c <_sungetc_r>
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	1eac      	subs	r4, r5, #2
 800cac0:	3b02      	subs	r3, #2
 800cac2:	7821      	ldrb	r1, [r4, #0]
 800cac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cac6:	0025      	movs	r5, r4
 800cac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800caca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cacc:	f001 fdb6 	bl	800e63c <_sungetc_r>
 800cad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cad4:	2310      	movs	r3, #16
 800cad6:	0032      	movs	r2, r6
 800cad8:	401a      	ands	r2, r3
 800cada:	421e      	tst	r6, r3
 800cadc:	d001      	beq.n	800cae2 <__ssvfscanf_r+0x1356>
 800cade:	f7fe fe71 	bl	800b7c4 <__ssvfscanf_r+0x38>
 800cae2:	23c0      	movs	r3, #192	; 0xc0
 800cae4:	2180      	movs	r1, #128	; 0x80
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	702a      	strb	r2, [r5, #0]
 800caea:	4033      	ands	r3, r6
 800caec:	00c9      	lsls	r1, r1, #3
 800caee:	428b      	cmp	r3, r1
 800caf0:	d11f      	bne.n	800cb32 <__ssvfscanf_r+0x13a6>
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	69fa      	ldr	r2, [r7, #28]
 800caf6:	69f9      	ldr	r1, [r7, #28]
 800caf8:	1a9a      	subs	r2, r3, r2
 800cafa:	428b      	cmp	r3, r1
 800cafc:	d125      	bne.n	800cb4a <__ssvfscanf_r+0x13be>
 800cafe:	238c      	movs	r3, #140	; 0x8c
 800cb00:	2148      	movs	r1, #72	; 0x48
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	185b      	adds	r3, r3, r1
 800cb06:	19d9      	adds	r1, r3, r7
 800cb08:	2200      	movs	r2, #0
 800cb0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb0c:	f7fc f80c 	bl	8008b28 <_strtod_r>
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	0004      	movs	r4, r0
 800cb14:	3304      	adds	r3, #4
 800cb16:	000d      	movs	r5, r1
 800cb18:	623b      	str	r3, [r7, #32]
 800cb1a:	07f3      	lsls	r3, r6, #31
 800cb1c:	d523      	bpl.n	800cb66 <__ssvfscanf_r+0x13da>
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	601c      	str	r4, [r3, #0]
 800cb24:	605d      	str	r5, [r3, #4]
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	3301      	adds	r3, #1
 800cb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	f7fe ffa5 	bl	800ba7c <__ssvfscanf_r+0x2f0>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0e2      	beq.n	800cafe <__ssvfscanf_r+0x1372>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cb3c:	1c59      	adds	r1, r3, #1
 800cb3e:	230a      	movs	r3, #10
 800cb40:	f7fc f880 	bl	8008c44 <_strtol_r>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	687d      	ldr	r5, [r7, #4]
 800cb48:	1ac2      	subs	r2, r0, r3
 800cb4a:	2148      	movs	r1, #72	; 0x48
 800cb4c:	4b19      	ldr	r3, [pc, #100]	; (800cbb4 <__ssvfscanf_r+0x1428>)
 800cb4e:	185b      	adds	r3, r3, r1
 800cb50:	19db      	adds	r3, r3, r7
 800cb52:	429d      	cmp	r5, r3
 800cb54:	d302      	bcc.n	800cb5c <__ssvfscanf_r+0x13d0>
 800cb56:	4b18      	ldr	r3, [pc, #96]	; (800cbb8 <__ssvfscanf_r+0x142c>)
 800cb58:	185b      	adds	r3, r3, r1
 800cb5a:	19dd      	adds	r5, r3, r7
 800cb5c:	0028      	movs	r0, r5
 800cb5e:	4917      	ldr	r1, [pc, #92]	; (800cbbc <__ssvfscanf_r+0x1430>)
 800cb60:	f7fc f944 	bl	8008dec <sprintf>
 800cb64:	e7cb      	b.n	800cafe <__ssvfscanf_r+0x1372>
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb6c:	07b6      	lsls	r6, r6, #30
 800cb6e:	d4d8      	bmi.n	800cb22 <__ssvfscanf_r+0x1396>
 800cb70:	0002      	movs	r2, r0
 800cb72:	000b      	movs	r3, r1
 800cb74:	f7f5 fbbe 	bl	80022f4 <__aeabi_dcmpun>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d005      	beq.n	800cb88 <__ssvfscanf_r+0x13fc>
 800cb7c:	4810      	ldr	r0, [pc, #64]	; (800cbc0 <__ssvfscanf_r+0x1434>)
 800cb7e:	f7fc fabf 	bl	8009100 <nanf>
 800cb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb84:	6018      	str	r0, [r3, #0]
 800cb86:	e7ce      	b.n	800cb26 <__ssvfscanf_r+0x139a>
 800cb88:	0020      	movs	r0, r4
 800cb8a:	0029      	movs	r1, r5
 800cb8c:	f7f5 fc5c 	bl	8002448 <__aeabi_d2f>
 800cb90:	e7f7      	b.n	800cb82 <__ssvfscanf_r+0x13f6>
 800cb92:	00a3      	lsls	r3, r4, #2
 800cb94:	18ed      	adds	r5, r5, r3
 800cb96:	682b      	ldr	r3, [r5, #0]
 800cb98:	3401      	adds	r4, #1
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	f7fa ff74 	bl	8007a88 <free>
 800cba0:	2200      	movs	r2, #0
 800cba2:	682b      	ldr	r3, [r5, #0]
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	f7fe ffc3 	bl	800bb30 <__ssvfscanf_r+0x3a4>
 800cbaa:	46c0      	nop			; (mov r8, r8)
 800cbac:	fffff07f 	.word	0xfffff07f
 800cbb0:	fffffd7f 	.word	0xfffffd7f
 800cbb4:	0000026b 	.word	0x0000026b
 800cbb8:	0000026a 	.word	0x0000026a
 800cbbc:	08010008 	.word	0x08010008
 800cbc0:	0801006b 	.word	0x0801006b

0800cbc4 <_fclose_r>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	0005      	movs	r5, r0
 800cbc8:	1e0c      	subs	r4, r1, #0
 800cbca:	d102      	bne.n	800cbd2 <_fclose_r+0xe>
 800cbcc:	2600      	movs	r6, #0
 800cbce:	0030      	movs	r0, r6
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	d004      	beq.n	800cbe0 <_fclose_r+0x1c>
 800cbd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <_fclose_r+0x1c>
 800cbdc:	f7fc f8d2 	bl	8008d84 <__sinit>
 800cbe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbe2:	07db      	lsls	r3, r3, #31
 800cbe4:	d405      	bmi.n	800cbf2 <_fclose_r+0x2e>
 800cbe6:	89a3      	ldrh	r3, [r4, #12]
 800cbe8:	059b      	lsls	r3, r3, #22
 800cbea:	d402      	bmi.n	800cbf2 <_fclose_r+0x2e>
 800cbec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbee:	f7fc fa6b 	bl	80090c8 <__retarget_lock_acquire_recursive>
 800cbf2:	220c      	movs	r2, #12
 800cbf4:	5ea3      	ldrsh	r3, [r4, r2]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d109      	bne.n	800cc0e <_fclose_r+0x4a>
 800cbfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	0016      	movs	r6, r2
 800cc00:	401e      	ands	r6, r3
 800cc02:	421a      	tst	r2, r3
 800cc04:	d1e2      	bne.n	800cbcc <_fclose_r+0x8>
 800cc06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc08:	f7fc fa5f 	bl	80090ca <__retarget_lock_release_recursive>
 800cc0c:	e7df      	b.n	800cbce <_fclose_r+0xa>
 800cc0e:	0021      	movs	r1, r4
 800cc10:	0028      	movs	r0, r5
 800cc12:	f000 f837 	bl	800cc84 <__sflush_r>
 800cc16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cc18:	0006      	movs	r6, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d006      	beq.n	800cc2c <_fclose_r+0x68>
 800cc1e:	0028      	movs	r0, r5
 800cc20:	69e1      	ldr	r1, [r4, #28]
 800cc22:	4798      	blx	r3
 800cc24:	2800      	cmp	r0, #0
 800cc26:	da01      	bge.n	800cc2c <_fclose_r+0x68>
 800cc28:	2601      	movs	r6, #1
 800cc2a:	4276      	negs	r6, r6
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	061b      	lsls	r3, r3, #24
 800cc30:	d503      	bpl.n	800cc3a <_fclose_r+0x76>
 800cc32:	0028      	movs	r0, r5
 800cc34:	6921      	ldr	r1, [r4, #16]
 800cc36:	f7fc facf 	bl	80091d8 <_free_r>
 800cc3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cc3c:	2900      	cmp	r1, #0
 800cc3e:	d008      	beq.n	800cc52 <_fclose_r+0x8e>
 800cc40:	0023      	movs	r3, r4
 800cc42:	3340      	adds	r3, #64	; 0x40
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d002      	beq.n	800cc4e <_fclose_r+0x8a>
 800cc48:	0028      	movs	r0, r5
 800cc4a:	f7fc fac5 	bl	80091d8 <_free_r>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6323      	str	r3, [r4, #48]	; 0x30
 800cc52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d004      	beq.n	800cc62 <_fclose_r+0x9e>
 800cc58:	0028      	movs	r0, r5
 800cc5a:	f7fc fabd 	bl	80091d8 <_free_r>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6463      	str	r3, [r4, #68]	; 0x44
 800cc62:	f7fc f87f 	bl	8008d64 <__sfp_lock_acquire>
 800cc66:	2300      	movs	r3, #0
 800cc68:	81a3      	strh	r3, [r4, #12]
 800cc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc6c:	07db      	lsls	r3, r3, #31
 800cc6e:	d402      	bmi.n	800cc76 <_fclose_r+0xb2>
 800cc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc72:	f7fc fa2a 	bl	80090ca <__retarget_lock_release_recursive>
 800cc76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc78:	f7fc fa25 	bl	80090c6 <__retarget_lock_close_recursive>
 800cc7c:	f7fc f87a 	bl	8008d74 <__sfp_lock_release>
 800cc80:	e7a5      	b.n	800cbce <_fclose_r+0xa>
	...

0800cc84 <__sflush_r>:
 800cc84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc86:	230c      	movs	r3, #12
 800cc88:	5eca      	ldrsh	r2, [r1, r3]
 800cc8a:	000c      	movs	r4, r1
 800cc8c:	0005      	movs	r5, r0
 800cc8e:	b291      	uxth	r1, r2
 800cc90:	0713      	lsls	r3, r2, #28
 800cc92:	d464      	bmi.n	800cd5e <__sflush_r+0xda>
 800cc94:	2380      	movs	r3, #128	; 0x80
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	6862      	ldr	r2, [r4, #4]
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	2a00      	cmp	r2, #0
 800cca0:	dc04      	bgt.n	800ccac <__sflush_r+0x28>
 800cca2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cca4:	2a00      	cmp	r2, #0
 800cca6:	dc01      	bgt.n	800ccac <__sflush_r+0x28>
 800cca8:	2000      	movs	r0, #0
 800ccaa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccac:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800ccae:	2f00      	cmp	r7, #0
 800ccb0:	d0fa      	beq.n	800cca8 <__sflush_r+0x24>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2080      	movs	r0, #128	; 0x80
 800ccb6:	682e      	ldr	r6, [r5, #0]
 800ccb8:	602a      	str	r2, [r5, #0]
 800ccba:	001a      	movs	r2, r3
 800ccbc:	0140      	lsls	r0, r0, #5
 800ccbe:	69e1      	ldr	r1, [r4, #28]
 800ccc0:	4002      	ands	r2, r0
 800ccc2:	4203      	tst	r3, r0
 800ccc4:	d038      	beq.n	800cd38 <__sflush_r+0xb4>
 800ccc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	075b      	lsls	r3, r3, #29
 800cccc:	d506      	bpl.n	800ccdc <__sflush_r+0x58>
 800ccce:	6863      	ldr	r3, [r4, #4]
 800ccd0:	1ac0      	subs	r0, r0, r3
 800ccd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d001      	beq.n	800ccdc <__sflush_r+0x58>
 800ccd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ccda:	1ac0      	subs	r0, r0, r3
 800ccdc:	0002      	movs	r2, r0
 800ccde:	2300      	movs	r3, #0
 800cce0:	0028      	movs	r0, r5
 800cce2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800cce4:	69e1      	ldr	r1, [r4, #28]
 800cce6:	47b8      	blx	r7
 800cce8:	89a2      	ldrh	r2, [r4, #12]
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	d106      	bne.n	800ccfc <__sflush_r+0x78>
 800ccee:	6829      	ldr	r1, [r5, #0]
 800ccf0:	291d      	cmp	r1, #29
 800ccf2:	d830      	bhi.n	800cd56 <__sflush_r+0xd2>
 800ccf4:	4b2c      	ldr	r3, [pc, #176]	; (800cda8 <__sflush_r+0x124>)
 800ccf6:	410b      	asrs	r3, r1
 800ccf8:	07db      	lsls	r3, r3, #31
 800ccfa:	d42c      	bmi.n	800cd56 <__sflush_r+0xd2>
 800ccfc:	4b2b      	ldr	r3, [pc, #172]	; (800cdac <__sflush_r+0x128>)
 800ccfe:	4013      	ands	r3, r2
 800cd00:	2200      	movs	r2, #0
 800cd02:	6062      	str	r2, [r4, #4]
 800cd04:	6922      	ldr	r2, [r4, #16]
 800cd06:	b21b      	sxth	r3, r3
 800cd08:	81a3      	strh	r3, [r4, #12]
 800cd0a:	6022      	str	r2, [r4, #0]
 800cd0c:	04db      	lsls	r3, r3, #19
 800cd0e:	d505      	bpl.n	800cd1c <__sflush_r+0x98>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <__sflush_r+0x96>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d100      	bne.n	800cd1c <__sflush_r+0x98>
 800cd1a:	6520      	str	r0, [r4, #80]	; 0x50
 800cd1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cd1e:	602e      	str	r6, [r5, #0]
 800cd20:	2900      	cmp	r1, #0
 800cd22:	d0c1      	beq.n	800cca8 <__sflush_r+0x24>
 800cd24:	0023      	movs	r3, r4
 800cd26:	3340      	adds	r3, #64	; 0x40
 800cd28:	4299      	cmp	r1, r3
 800cd2a:	d002      	beq.n	800cd32 <__sflush_r+0xae>
 800cd2c:	0028      	movs	r0, r5
 800cd2e:	f7fc fa53 	bl	80091d8 <_free_r>
 800cd32:	2000      	movs	r0, #0
 800cd34:	6320      	str	r0, [r4, #48]	; 0x30
 800cd36:	e7b8      	b.n	800ccaa <__sflush_r+0x26>
 800cd38:	2301      	movs	r3, #1
 800cd3a:	0028      	movs	r0, r5
 800cd3c:	47b8      	blx	r7
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d1c2      	bne.n	800ccc8 <__sflush_r+0x44>
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d0bf      	beq.n	800ccc8 <__sflush_r+0x44>
 800cd48:	2b1d      	cmp	r3, #29
 800cd4a:	d001      	beq.n	800cd50 <__sflush_r+0xcc>
 800cd4c:	2b16      	cmp	r3, #22
 800cd4e:	d101      	bne.n	800cd54 <__sflush_r+0xd0>
 800cd50:	602e      	str	r6, [r5, #0]
 800cd52:	e7a9      	b.n	800cca8 <__sflush_r+0x24>
 800cd54:	89a2      	ldrh	r2, [r4, #12]
 800cd56:	2340      	movs	r3, #64	; 0x40
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	81a3      	strh	r3, [r4, #12]
 800cd5c:	e7a5      	b.n	800ccaa <__sflush_r+0x26>
 800cd5e:	6926      	ldr	r6, [r4, #16]
 800cd60:	2e00      	cmp	r6, #0
 800cd62:	d0a1      	beq.n	800cca8 <__sflush_r+0x24>
 800cd64:	6827      	ldr	r7, [r4, #0]
 800cd66:	6026      	str	r6, [r4, #0]
 800cd68:	1bbb      	subs	r3, r7, r6
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	0789      	lsls	r1, r1, #30
 800cd70:	d100      	bne.n	800cd74 <__sflush_r+0xf0>
 800cd72:	6963      	ldr	r3, [r4, #20]
 800cd74:	60a3      	str	r3, [r4, #8]
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	dc00      	bgt.n	800cd7e <__sflush_r+0xfa>
 800cd7c:	e794      	b.n	800cca8 <__sflush_r+0x24>
 800cd7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd80:	0032      	movs	r2, r6
 800cd82:	001f      	movs	r7, r3
 800cd84:	0028      	movs	r0, r5
 800cd86:	9b01      	ldr	r3, [sp, #4]
 800cd88:	69e1      	ldr	r1, [r4, #28]
 800cd8a:	47b8      	blx	r7
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	dc06      	bgt.n	800cd9e <__sflush_r+0x11a>
 800cd90:	2340      	movs	r3, #64	; 0x40
 800cd92:	2001      	movs	r0, #1
 800cd94:	89a2      	ldrh	r2, [r4, #12]
 800cd96:	4240      	negs	r0, r0
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	e785      	b.n	800ccaa <__sflush_r+0x26>
 800cd9e:	9b01      	ldr	r3, [sp, #4]
 800cda0:	1836      	adds	r6, r6, r0
 800cda2:	1a1b      	subs	r3, r3, r0
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	e7e6      	b.n	800cd76 <__sflush_r+0xf2>
 800cda8:	dfbffffe 	.word	0xdfbffffe
 800cdac:	fffff7ff 	.word	0xfffff7ff

0800cdb0 <_fflush_r>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	0005      	movs	r5, r0
 800cdb4:	000c      	movs	r4, r1
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d004      	beq.n	800cdc4 <_fflush_r+0x14>
 800cdba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <_fflush_r+0x14>
 800cdc0:	f7fb ffe0 	bl	8008d84 <__sinit>
 800cdc4:	220c      	movs	r2, #12
 800cdc6:	5ea3      	ldrsh	r3, [r4, r2]
 800cdc8:	1e1e      	subs	r6, r3, #0
 800cdca:	d015      	beq.n	800cdf8 <_fflush_r+0x48>
 800cdcc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdce:	07d2      	lsls	r2, r2, #31
 800cdd0:	d404      	bmi.n	800cddc <_fflush_r+0x2c>
 800cdd2:	059b      	lsls	r3, r3, #22
 800cdd4:	d402      	bmi.n	800cddc <_fflush_r+0x2c>
 800cdd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdd8:	f7fc f976 	bl	80090c8 <__retarget_lock_acquire_recursive>
 800cddc:	0021      	movs	r1, r4
 800cdde:	0028      	movs	r0, r5
 800cde0:	f7ff ff50 	bl	800cc84 <__sflush_r>
 800cde4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cde6:	0006      	movs	r6, r0
 800cde8:	07db      	lsls	r3, r3, #31
 800cdea:	d405      	bmi.n	800cdf8 <_fflush_r+0x48>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	059b      	lsls	r3, r3, #22
 800cdf0:	d402      	bmi.n	800cdf8 <_fflush_r+0x48>
 800cdf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdf4:	f7fc f969 	bl	80090ca <__retarget_lock_release_recursive>
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}

0800cdfc <__sccl>:
 800cdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdfe:	780b      	ldrb	r3, [r1, #0]
 800ce00:	0004      	movs	r4, r0
 800ce02:	2b5e      	cmp	r3, #94	; 0x5e
 800ce04:	d019      	beq.n	800ce3a <__sccl+0x3e>
 800ce06:	2200      	movs	r2, #0
 800ce08:	1c4d      	adds	r5, r1, #1
 800ce0a:	0021      	movs	r1, r4
 800ce0c:	1c60      	adds	r0, r4, #1
 800ce0e:	30ff      	adds	r0, #255	; 0xff
 800ce10:	700a      	strb	r2, [r1, #0]
 800ce12:	3101      	adds	r1, #1
 800ce14:	4281      	cmp	r1, r0
 800ce16:	d1fb      	bne.n	800ce10 <__sccl+0x14>
 800ce18:	1e68      	subs	r0, r5, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00c      	beq.n	800ce38 <__sccl+0x3c>
 800ce1e:	2101      	movs	r1, #1
 800ce20:	262d      	movs	r6, #45	; 0x2d
 800ce22:	404a      	eors	r2, r1
 800ce24:	0028      	movs	r0, r5
 800ce26:	54e2      	strb	r2, [r4, r3]
 800ce28:	7801      	ldrb	r1, [r0, #0]
 800ce2a:	1c45      	adds	r5, r0, #1
 800ce2c:	292d      	cmp	r1, #45	; 0x2d
 800ce2e:	d00c      	beq.n	800ce4a <__sccl+0x4e>
 800ce30:	295d      	cmp	r1, #93	; 0x5d
 800ce32:	d01d      	beq.n	800ce70 <__sccl+0x74>
 800ce34:	2900      	cmp	r1, #0
 800ce36:	d104      	bne.n	800ce42 <__sccl+0x46>
 800ce38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	784b      	ldrb	r3, [r1, #1]
 800ce3e:	1c8d      	adds	r5, r1, #2
 800ce40:	e7e3      	b.n	800ce0a <__sccl+0xe>
 800ce42:	000b      	movs	r3, r1
 800ce44:	e7ee      	b.n	800ce24 <__sccl+0x28>
 800ce46:	0033      	movs	r3, r6
 800ce48:	e7ec      	b.n	800ce24 <__sccl+0x28>
 800ce4a:	7841      	ldrb	r1, [r0, #1]
 800ce4c:	295d      	cmp	r1, #93	; 0x5d
 800ce4e:	d0fa      	beq.n	800ce46 <__sccl+0x4a>
 800ce50:	428b      	cmp	r3, r1
 800ce52:	dcf8      	bgt.n	800ce46 <__sccl+0x4a>
 800ce54:	001d      	movs	r5, r3
 800ce56:	3002      	adds	r0, #2
 800ce58:	3501      	adds	r5, #1
 800ce5a:	5562      	strb	r2, [r4, r5]
 800ce5c:	42a9      	cmp	r1, r5
 800ce5e:	dcfb      	bgt.n	800ce58 <__sccl+0x5c>
 800ce60:	2500      	movs	r5, #0
 800ce62:	1c5f      	adds	r7, r3, #1
 800ce64:	428b      	cmp	r3, r1
 800ce66:	da01      	bge.n	800ce6c <__sccl+0x70>
 800ce68:	1acd      	subs	r5, r1, r3
 800ce6a:	3d01      	subs	r5, #1
 800ce6c:	197b      	adds	r3, r7, r5
 800ce6e:	e7db      	b.n	800ce28 <__sccl+0x2c>
 800ce70:	0028      	movs	r0, r5
 800ce72:	e7e1      	b.n	800ce38 <__sccl+0x3c>

0800ce74 <_localeconv_r>:
 800ce74:	4800      	ldr	r0, [pc, #0]	; (800ce78 <_localeconv_r+0x4>)
 800ce76:	4770      	bx	lr
 800ce78:	2000051c 	.word	0x2000051c

0800ce7c <__libc_fini_array>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	4c07      	ldr	r4, [pc, #28]	; (800ce9c <__libc_fini_array+0x20>)
 800ce80:	4d07      	ldr	r5, [pc, #28]	; (800cea0 <__libc_fini_array+0x24>)
 800ce82:	1b64      	subs	r4, r4, r5
 800ce84:	10a4      	asrs	r4, r4, #2
 800ce86:	2c00      	cmp	r4, #0
 800ce88:	d102      	bne.n	800ce90 <__libc_fini_array+0x14>
 800ce8a:	f002 fdcd 	bl	800fa28 <_fini>
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	3c01      	subs	r4, #1
 800ce92:	00a3      	lsls	r3, r4, #2
 800ce94:	58eb      	ldr	r3, [r5, r3]
 800ce96:	4798      	blx	r3
 800ce98:	e7f5      	b.n	800ce86 <__libc_fini_array+0xa>
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	08010108 	.word	0x08010108
 800cea0:	08010104 	.word	0x08010104

0800cea4 <memchr>:
 800cea4:	b2c9      	uxtb	r1, r1
 800cea6:	1882      	adds	r2, r0, r2
 800cea8:	4290      	cmp	r0, r2
 800ceaa:	d101      	bne.n	800ceb0 <memchr+0xc>
 800ceac:	2000      	movs	r0, #0
 800ceae:	4770      	bx	lr
 800ceb0:	7803      	ldrb	r3, [r0, #0]
 800ceb2:	428b      	cmp	r3, r1
 800ceb4:	d0fb      	beq.n	800ceae <memchr+0xa>
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	e7f6      	b.n	800cea8 <memchr+0x4>
	...

0800cebc <frexp>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	0014      	movs	r4, r2
 800cec0:	2500      	movs	r5, #0
 800cec2:	6025      	str	r5, [r4, #0]
 800cec4:	4d10      	ldr	r5, [pc, #64]	; (800cf08 <frexp+0x4c>)
 800cec6:	004b      	lsls	r3, r1, #1
 800cec8:	000a      	movs	r2, r1
 800ceca:	085b      	lsrs	r3, r3, #1
 800cecc:	42ab      	cmp	r3, r5
 800cece:	dc1a      	bgt.n	800cf06 <frexp+0x4a>
 800ced0:	001d      	movs	r5, r3
 800ced2:	4305      	orrs	r5, r0
 800ced4:	d017      	beq.n	800cf06 <frexp+0x4a>
 800ced6:	4d0d      	ldr	r5, [pc, #52]	; (800cf0c <frexp+0x50>)
 800ced8:	4229      	tst	r1, r5
 800ceda:	d109      	bne.n	800cef0 <frexp+0x34>
 800cedc:	2200      	movs	r2, #0
 800cede:	4b0c      	ldr	r3, [pc, #48]	; (800cf10 <frexp+0x54>)
 800cee0:	f7f4 fbc4 	bl	800166c <__aeabi_dmul>
 800cee4:	2536      	movs	r5, #54	; 0x36
 800cee6:	000a      	movs	r2, r1
 800cee8:	004b      	lsls	r3, r1, #1
 800ceea:	426d      	negs	r5, r5
 800ceec:	085b      	lsrs	r3, r3, #1
 800ceee:	6025      	str	r5, [r4, #0]
 800cef0:	4d08      	ldr	r5, [pc, #32]	; (800cf14 <frexp+0x58>)
 800cef2:	151b      	asrs	r3, r3, #20
 800cef4:	195b      	adds	r3, r3, r5
 800cef6:	6825      	ldr	r5, [r4, #0]
 800cef8:	18eb      	adds	r3, r5, r3
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <frexp+0x5c>)
 800cefe:	401a      	ands	r2, r3
 800cf00:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <frexp+0x60>)
 800cf02:	4313      	orrs	r3, r2
 800cf04:	0019      	movs	r1, r3
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	7fefffff 	.word	0x7fefffff
 800cf0c:	7ff00000 	.word	0x7ff00000
 800cf10:	43500000 	.word	0x43500000
 800cf14:	fffffc02 	.word	0xfffffc02
 800cf18:	800fffff 	.word	0x800fffff
 800cf1c:	3fe00000 	.word	0x3fe00000

0800cf20 <__register_exitproc>:
 800cf20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf22:	4f1c      	ldr	r7, [pc, #112]	; (800cf94 <__register_exitproc+0x74>)
 800cf24:	0004      	movs	r4, r0
 800cf26:	6838      	ldr	r0, [r7, #0]
 800cf28:	0016      	movs	r6, r2
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	9100      	str	r1, [sp, #0]
 800cf2e:	f7fc f8cb 	bl	80090c8 <__retarget_lock_acquire_recursive>
 800cf32:	4a19      	ldr	r2, [pc, #100]	; (800cf98 <__register_exitproc+0x78>)
 800cf34:	6813      	ldr	r3, [r2, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d101      	bne.n	800cf3e <__register_exitproc+0x1e>
 800cf3a:	4b18      	ldr	r3, [pc, #96]	; (800cf9c <__register_exitproc+0x7c>)
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	6838      	ldr	r0, [r7, #0]
 800cf42:	2a1f      	cmp	r2, #31
 800cf44:	dd04      	ble.n	800cf50 <__register_exitproc+0x30>
 800cf46:	f7fc f8c0 	bl	80090ca <__retarget_lock_release_recursive>
 800cf4a:	2001      	movs	r0, #1
 800cf4c:	4240      	negs	r0, r0
 800cf4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf50:	2c00      	cmp	r4, #0
 800cf52:	d014      	beq.n	800cf7e <__register_exitproc+0x5e>
 800cf54:	0091      	lsls	r1, r2, #2
 800cf56:	1859      	adds	r1, r3, r1
 800cf58:	000f      	movs	r7, r1
 800cf5a:	3788      	adds	r7, #136	; 0x88
 800cf5c:	603e      	str	r6, [r7, #0]
 800cf5e:	2701      	movs	r7, #1
 800cf60:	001e      	movs	r6, r3
 800cf62:	4097      	lsls	r7, r2
 800cf64:	3685      	adds	r6, #133	; 0x85
 800cf66:	36ff      	adds	r6, #255	; 0xff
 800cf68:	6875      	ldr	r5, [r6, #4]
 800cf6a:	31fc      	adds	r1, #252	; 0xfc
 800cf6c:	433d      	orrs	r5, r7
 800cf6e:	6075      	str	r5, [r6, #4]
 800cf70:	9d01      	ldr	r5, [sp, #4]
 800cf72:	60cd      	str	r5, [r1, #12]
 800cf74:	2c02      	cmp	r4, #2
 800cf76:	d102      	bne.n	800cf7e <__register_exitproc+0x5e>
 800cf78:	68b1      	ldr	r1, [r6, #8]
 800cf7a:	4339      	orrs	r1, r7
 800cf7c:	60b1      	str	r1, [r6, #8]
 800cf7e:	1c51      	adds	r1, r2, #1
 800cf80:	6059      	str	r1, [r3, #4]
 800cf82:	3202      	adds	r2, #2
 800cf84:	9900      	ldr	r1, [sp, #0]
 800cf86:	0092      	lsls	r2, r2, #2
 800cf88:	50d1      	str	r1, [r2, r3]
 800cf8a:	f7fc f89e 	bl	80090ca <__retarget_lock_release_recursive>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e7dd      	b.n	800cf4e <__register_exitproc+0x2e>
 800cf92:	46c0      	nop			; (mov r8, r8)
 800cf94:	200006bc 	.word	0x200006bc
 800cf98:	20000bbc 	.word	0x20000bbc
 800cf9c:	20000bc0 	.word	0x20000bc0

0800cfa0 <__assert_func>:
 800cfa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cfa2:	0014      	movs	r4, r2
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <__assert_func+0x2c>)
 800cfa8:	0005      	movs	r5, r0
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	000e      	movs	r6, r1
 800cfae:	68d8      	ldr	r0, [r3, #12]
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <__assert_func+0x30>)
 800cfb2:	2c00      	cmp	r4, #0
 800cfb4:	d101      	bne.n	800cfba <__assert_func+0x1a>
 800cfb6:	4b07      	ldr	r3, [pc, #28]	; (800cfd4 <__assert_func+0x34>)
 800cfb8:	001c      	movs	r4, r3
 800cfba:	4907      	ldr	r1, [pc, #28]	; (800cfd8 <__assert_func+0x38>)
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	9402      	str	r4, [sp, #8]
 800cfc0:	002b      	movs	r3, r5
 800cfc2:	9600      	str	r6, [sp, #0]
 800cfc4:	f001 faa6 	bl	800e514 <fiprintf>
 800cfc8:	f002 fb8e 	bl	800f6e8 <abort>
 800cfcc:	200006b8 	.word	0x200006b8
 800cfd0:	08010030 	.word	0x08010030
 800cfd4:	0801006b 	.word	0x0801006b
 800cfd8:	0801003d 	.word	0x0801003d

0800cfdc <_calloc_r>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	2400      	movs	r4, #0
 800cfe0:	0c0b      	lsrs	r3, r1, #16
 800cfe2:	0c16      	lsrs	r6, r2, #16
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d133      	bne.n	800d050 <_calloc_r+0x74>
 800cfe8:	42a6      	cmp	r6, r4
 800cfea:	d121      	bne.n	800d030 <_calloc_r+0x54>
 800cfec:	b28b      	uxth	r3, r1
 800cfee:	b291      	uxth	r1, r2
 800cff0:	4359      	muls	r1, r3
 800cff2:	f7fa fd53 	bl	8007a9c <_malloc_r>
 800cff6:	1e05      	subs	r5, r0, #0
 800cff8:	d033      	beq.n	800d062 <_calloc_r+0x86>
 800cffa:	0003      	movs	r3, r0
 800cffc:	3b08      	subs	r3, #8
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	2303      	movs	r3, #3
 800d002:	439a      	bics	r2, r3
 800d004:	3a04      	subs	r2, #4
 800d006:	2a24      	cmp	r2, #36	; 0x24
 800d008:	d832      	bhi.n	800d070 <_calloc_r+0x94>
 800d00a:	0003      	movs	r3, r0
 800d00c:	2a13      	cmp	r2, #19
 800d00e:	d90a      	bls.n	800d026 <_calloc_r+0x4a>
 800d010:	6004      	str	r4, [r0, #0]
 800d012:	6044      	str	r4, [r0, #4]
 800d014:	3308      	adds	r3, #8
 800d016:	2a1b      	cmp	r2, #27
 800d018:	d905      	bls.n	800d026 <_calloc_r+0x4a>
 800d01a:	6084      	str	r4, [r0, #8]
 800d01c:	60c4      	str	r4, [r0, #12]
 800d01e:	2a24      	cmp	r2, #36	; 0x24
 800d020:	d021      	beq.n	800d066 <_calloc_r+0x8a>
 800d022:	0003      	movs	r3, r0
 800d024:	3310      	adds	r3, #16
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]
 800d02a:	605a      	str	r2, [r3, #4]
 800d02c:	609a      	str	r2, [r3, #8]
 800d02e:	e018      	b.n	800d062 <_calloc_r+0x86>
 800d030:	1c33      	adds	r3, r6, #0
 800d032:	1c0d      	adds	r5, r1, #0
 800d034:	b289      	uxth	r1, r1
 800d036:	b292      	uxth	r2, r2
 800d038:	434a      	muls	r2, r1
 800d03a:	b2ad      	uxth	r5, r5
 800d03c:	b299      	uxth	r1, r3
 800d03e:	4369      	muls	r1, r5
 800d040:	0c13      	lsrs	r3, r2, #16
 800d042:	18c9      	adds	r1, r1, r3
 800d044:	0c0b      	lsrs	r3, r1, #16
 800d046:	d107      	bne.n	800d058 <_calloc_r+0x7c>
 800d048:	0409      	lsls	r1, r1, #16
 800d04a:	b292      	uxth	r2, r2
 800d04c:	4311      	orrs	r1, r2
 800d04e:	e7d0      	b.n	800cff2 <_calloc_r+0x16>
 800d050:	2e00      	cmp	r6, #0
 800d052:	d101      	bne.n	800d058 <_calloc_r+0x7c>
 800d054:	1c15      	adds	r5, r2, #0
 800d056:	e7ed      	b.n	800d034 <_calloc_r+0x58>
 800d058:	f7fc f80a 	bl	8009070 <__errno>
 800d05c:	230c      	movs	r3, #12
 800d05e:	2500      	movs	r5, #0
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	0028      	movs	r0, r5
 800d064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d066:	0003      	movs	r3, r0
 800d068:	6104      	str	r4, [r0, #16]
 800d06a:	3318      	adds	r3, #24
 800d06c:	6144      	str	r4, [r0, #20]
 800d06e:	e7da      	b.n	800d026 <_calloc_r+0x4a>
 800d070:	2100      	movs	r1, #0
 800d072:	f7fb ff51 	bl	8008f18 <memset>
 800d076:	e7f4      	b.n	800d062 <_calloc_r+0x86>

0800d078 <quorem>:
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	6902      	ldr	r2, [r0, #16]
 800d07c:	690b      	ldr	r3, [r1, #16]
 800d07e:	b089      	sub	sp, #36	; 0x24
 800d080:	0007      	movs	r7, r0
 800d082:	9104      	str	r1, [sp, #16]
 800d084:	2000      	movs	r0, #0
 800d086:	429a      	cmp	r2, r3
 800d088:	db69      	blt.n	800d15e <quorem+0xe6>
 800d08a:	3b01      	subs	r3, #1
 800d08c:	009c      	lsls	r4, r3, #2
 800d08e:	9301      	str	r3, [sp, #4]
 800d090:	000b      	movs	r3, r1
 800d092:	3314      	adds	r3, #20
 800d094:	9306      	str	r3, [sp, #24]
 800d096:	191b      	adds	r3, r3, r4
 800d098:	9305      	str	r3, [sp, #20]
 800d09a:	003b      	movs	r3, r7
 800d09c:	3314      	adds	r3, #20
 800d09e:	9303      	str	r3, [sp, #12]
 800d0a0:	191c      	adds	r4, r3, r4
 800d0a2:	9b05      	ldr	r3, [sp, #20]
 800d0a4:	6826      	ldr	r6, [r4, #0]
 800d0a6:	681d      	ldr	r5, [r3, #0]
 800d0a8:	0030      	movs	r0, r6
 800d0aa:	3501      	adds	r5, #1
 800d0ac:	0029      	movs	r1, r5
 800d0ae:	f7f3 f845 	bl	800013c <__udivsi3>
 800d0b2:	9002      	str	r0, [sp, #8]
 800d0b4:	42ae      	cmp	r6, r5
 800d0b6:	d329      	bcc.n	800d10c <quorem+0x94>
 800d0b8:	9b06      	ldr	r3, [sp, #24]
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	469c      	mov	ip, r3
 800d0be:	9d03      	ldr	r5, [sp, #12]
 800d0c0:	9606      	str	r6, [sp, #24]
 800d0c2:	4662      	mov	r2, ip
 800d0c4:	ca08      	ldmia	r2!, {r3}
 800d0c6:	6828      	ldr	r0, [r5, #0]
 800d0c8:	4694      	mov	ip, r2
 800d0ca:	9a02      	ldr	r2, [sp, #8]
 800d0cc:	b299      	uxth	r1, r3
 800d0ce:	4351      	muls	r1, r2
 800d0d0:	0c1b      	lsrs	r3, r3, #16
 800d0d2:	4353      	muls	r3, r2
 800d0d4:	1989      	adds	r1, r1, r6
 800d0d6:	0c0a      	lsrs	r2, r1, #16
 800d0d8:	189b      	adds	r3, r3, r2
 800d0da:	9307      	str	r3, [sp, #28]
 800d0dc:	0c1e      	lsrs	r6, r3, #16
 800d0de:	9b06      	ldr	r3, [sp, #24]
 800d0e0:	b282      	uxth	r2, r0
 800d0e2:	18d2      	adds	r2, r2, r3
 800d0e4:	466b      	mov	r3, sp
 800d0e6:	b289      	uxth	r1, r1
 800d0e8:	8b9b      	ldrh	r3, [r3, #28]
 800d0ea:	1a52      	subs	r2, r2, r1
 800d0ec:	0c01      	lsrs	r1, r0, #16
 800d0ee:	1ac9      	subs	r1, r1, r3
 800d0f0:	1413      	asrs	r3, r2, #16
 800d0f2:	18cb      	adds	r3, r1, r3
 800d0f4:	1419      	asrs	r1, r3, #16
 800d0f6:	b292      	uxth	r2, r2
 800d0f8:	041b      	lsls	r3, r3, #16
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	c508      	stmia	r5!, {r3}
 800d0fe:	9b05      	ldr	r3, [sp, #20]
 800d100:	9106      	str	r1, [sp, #24]
 800d102:	4563      	cmp	r3, ip
 800d104:	d2dd      	bcs.n	800d0c2 <quorem+0x4a>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d030      	beq.n	800d16e <quorem+0xf6>
 800d10c:	0038      	movs	r0, r7
 800d10e:	9904      	ldr	r1, [sp, #16]
 800d110:	f7fc ff04 	bl	8009f1c <__mcmp>
 800d114:	2800      	cmp	r0, #0
 800d116:	db21      	blt.n	800d15c <quorem+0xe4>
 800d118:	0038      	movs	r0, r7
 800d11a:	2600      	movs	r6, #0
 800d11c:	9b02      	ldr	r3, [sp, #8]
 800d11e:	9c04      	ldr	r4, [sp, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	9302      	str	r3, [sp, #8]
 800d124:	3014      	adds	r0, #20
 800d126:	3414      	adds	r4, #20
 800d128:	6803      	ldr	r3, [r0, #0]
 800d12a:	cc02      	ldmia	r4!, {r1}
 800d12c:	b29d      	uxth	r5, r3
 800d12e:	19ad      	adds	r5, r5, r6
 800d130:	b28a      	uxth	r2, r1
 800d132:	1aaa      	subs	r2, r5, r2
 800d134:	0c09      	lsrs	r1, r1, #16
 800d136:	0c1b      	lsrs	r3, r3, #16
 800d138:	1a5b      	subs	r3, r3, r1
 800d13a:	1411      	asrs	r1, r2, #16
 800d13c:	185b      	adds	r3, r3, r1
 800d13e:	141e      	asrs	r6, r3, #16
 800d140:	b292      	uxth	r2, r2
 800d142:	041b      	lsls	r3, r3, #16
 800d144:	4313      	orrs	r3, r2
 800d146:	c008      	stmia	r0!, {r3}
 800d148:	9b05      	ldr	r3, [sp, #20]
 800d14a:	42a3      	cmp	r3, r4
 800d14c:	d2ec      	bcs.n	800d128 <quorem+0xb0>
 800d14e:	9b01      	ldr	r3, [sp, #4]
 800d150:	9a03      	ldr	r2, [sp, #12]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	18d3      	adds	r3, r2, r3
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d015      	beq.n	800d188 <quorem+0x110>
 800d15c:	9802      	ldr	r0, [sp, #8]
 800d15e:	b009      	add	sp, #36	; 0x24
 800d160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d106      	bne.n	800d176 <quorem+0xfe>
 800d168:	9b01      	ldr	r3, [sp, #4]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	9b03      	ldr	r3, [sp, #12]
 800d170:	3c04      	subs	r4, #4
 800d172:	42a3      	cmp	r3, r4
 800d174:	d3f5      	bcc.n	800d162 <quorem+0xea>
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	e7c7      	b.n	800d10c <quorem+0x94>
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	2a00      	cmp	r2, #0
 800d180:	d106      	bne.n	800d190 <quorem+0x118>
 800d182:	9a01      	ldr	r2, [sp, #4]
 800d184:	3a01      	subs	r2, #1
 800d186:	9201      	str	r2, [sp, #4]
 800d188:	9a03      	ldr	r2, [sp, #12]
 800d18a:	3b04      	subs	r3, #4
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d3f5      	bcc.n	800d17c <quorem+0x104>
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	613b      	str	r3, [r7, #16]
 800d194:	e7e2      	b.n	800d15c <quorem+0xe4>
	...

0800d198 <_dtoa_r>:
 800d198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d19a:	0014      	movs	r4, r2
 800d19c:	001d      	movs	r5, r3
 800d19e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800d1a0:	b09d      	sub	sp, #116	; 0x74
 800d1a2:	9408      	str	r4, [sp, #32]
 800d1a4:	9509      	str	r5, [sp, #36]	; 0x24
 800d1a6:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800d1a8:	9004      	str	r0, [sp, #16]
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d009      	beq.n	800d1c2 <_dtoa_r+0x2a>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d1b2:	4093      	lsls	r3, r2
 800d1b4:	604a      	str	r2, [r1, #4]
 800d1b6:	608b      	str	r3, [r1, #8]
 800d1b8:	f7fc fc56 	bl	8009a68 <_Bfree>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	9a04      	ldr	r2, [sp, #16]
 800d1c0:	6393      	str	r3, [r2, #56]	; 0x38
 800d1c2:	2d00      	cmp	r5, #0
 800d1c4:	da1e      	bge.n	800d204 <_dtoa_r+0x6c>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	6033      	str	r3, [r6, #0]
 800d1ca:	006b      	lsls	r3, r5, #1
 800d1cc:	085b      	lsrs	r3, r3, #1
 800d1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d1d2:	4bb5      	ldr	r3, [pc, #724]	; (800d4a8 <_dtoa_r+0x310>)
 800d1d4:	4ab4      	ldr	r2, [pc, #720]	; (800d4a8 <_dtoa_r+0x310>)
 800d1d6:	403b      	ands	r3, r7
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d116      	bne.n	800d20a <_dtoa_r+0x72>
 800d1dc:	4bb3      	ldr	r3, [pc, #716]	; (800d4ac <_dtoa_r+0x314>)
 800d1de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	033b      	lsls	r3, r7, #12
 800d1e4:	0b1b      	lsrs	r3, r3, #12
 800d1e6:	4323      	orrs	r3, r4
 800d1e8:	d101      	bne.n	800d1ee <_dtoa_r+0x56>
 800d1ea:	f000 fdb2 	bl	800dd52 <_dtoa_r+0xbba>
 800d1ee:	4bb0      	ldr	r3, [pc, #704]	; (800d4b0 <_dtoa_r+0x318>)
 800d1f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d1f2:	9306      	str	r3, [sp, #24]
 800d1f4:	2a00      	cmp	r2, #0
 800d1f6:	d002      	beq.n	800d1fe <_dtoa_r+0x66>
 800d1f8:	4bae      	ldr	r3, [pc, #696]	; (800d4b4 <_dtoa_r+0x31c>)
 800d1fa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d1fc:	6013      	str	r3, [r2, #0]
 800d1fe:	9806      	ldr	r0, [sp, #24]
 800d200:	b01d      	add	sp, #116	; 0x74
 800d202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d204:	2300      	movs	r3, #0
 800d206:	6033      	str	r3, [r6, #0]
 800d208:	e7e2      	b.n	800d1d0 <_dtoa_r+0x38>
 800d20a:	9a08      	ldr	r2, [sp, #32]
 800d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20e:	9210      	str	r2, [sp, #64]	; 0x40
 800d210:	9311      	str	r3, [sp, #68]	; 0x44
 800d212:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d214:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	f7f3 f915 	bl	8000448 <__aeabi_dcmpeq>
 800d21e:	1e06      	subs	r6, r0, #0
 800d220:	d009      	beq.n	800d236 <_dtoa_r+0x9e>
 800d222:	2301      	movs	r3, #1
 800d224:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	4ba3      	ldr	r3, [pc, #652]	; (800d4b8 <_dtoa_r+0x320>)
 800d22a:	9306      	str	r3, [sp, #24]
 800d22c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d0e5      	beq.n	800d1fe <_dtoa_r+0x66>
 800d232:	4ba2      	ldr	r3, [pc, #648]	; (800d4bc <_dtoa_r+0x324>)
 800d234:	e7e1      	b.n	800d1fa <_dtoa_r+0x62>
 800d236:	ab1a      	add	r3, sp, #104	; 0x68
 800d238:	9301      	str	r3, [sp, #4]
 800d23a:	ab1b      	add	r3, sp, #108	; 0x6c
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	9804      	ldr	r0, [sp, #16]
 800d240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d244:	f7fc ff86 	bl	800a154 <__d2b>
 800d248:	007a      	lsls	r2, r7, #1
 800d24a:	9005      	str	r0, [sp, #20]
 800d24c:	0d52      	lsrs	r2, r2, #21
 800d24e:	d100      	bne.n	800d252 <_dtoa_r+0xba>
 800d250:	e07b      	b.n	800d34a <_dtoa_r+0x1b2>
 800d252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d254:	9617      	str	r6, [sp, #92]	; 0x5c
 800d256:	0319      	lsls	r1, r3, #12
 800d258:	4b99      	ldr	r3, [pc, #612]	; (800d4c0 <_dtoa_r+0x328>)
 800d25a:	0b09      	lsrs	r1, r1, #12
 800d25c:	430b      	orrs	r3, r1
 800d25e:	4999      	ldr	r1, [pc, #612]	; (800d4c4 <_dtoa_r+0x32c>)
 800d260:	1857      	adds	r7, r2, r1
 800d262:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d264:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d266:	0019      	movs	r1, r3
 800d268:	2200      	movs	r2, #0
 800d26a:	4b97      	ldr	r3, [pc, #604]	; (800d4c8 <_dtoa_r+0x330>)
 800d26c:	f7f4 fcc0 	bl	8001bf0 <__aeabi_dsub>
 800d270:	4a96      	ldr	r2, [pc, #600]	; (800d4cc <_dtoa_r+0x334>)
 800d272:	4b97      	ldr	r3, [pc, #604]	; (800d4d0 <_dtoa_r+0x338>)
 800d274:	f7f4 f9fa 	bl	800166c <__aeabi_dmul>
 800d278:	4a96      	ldr	r2, [pc, #600]	; (800d4d4 <_dtoa_r+0x33c>)
 800d27a:	4b97      	ldr	r3, [pc, #604]	; (800d4d8 <_dtoa_r+0x340>)
 800d27c:	f7f3 fa9c 	bl	80007b8 <__aeabi_dadd>
 800d280:	0004      	movs	r4, r0
 800d282:	0038      	movs	r0, r7
 800d284:	000d      	movs	r5, r1
 800d286:	f7f5 f889 	bl	800239c <__aeabi_i2d>
 800d28a:	4a94      	ldr	r2, [pc, #592]	; (800d4dc <_dtoa_r+0x344>)
 800d28c:	4b94      	ldr	r3, [pc, #592]	; (800d4e0 <_dtoa_r+0x348>)
 800d28e:	f7f4 f9ed 	bl	800166c <__aeabi_dmul>
 800d292:	0002      	movs	r2, r0
 800d294:	000b      	movs	r3, r1
 800d296:	0020      	movs	r0, r4
 800d298:	0029      	movs	r1, r5
 800d29a:	f7f3 fa8d 	bl	80007b8 <__aeabi_dadd>
 800d29e:	0004      	movs	r4, r0
 800d2a0:	000d      	movs	r5, r1
 800d2a2:	f7f5 f845 	bl	8002330 <__aeabi_d2iz>
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	9003      	str	r0, [sp, #12]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	0020      	movs	r0, r4
 800d2ae:	0029      	movs	r1, r5
 800d2b0:	f7f3 f8d0 	bl	8000454 <__aeabi_dcmplt>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d00b      	beq.n	800d2d0 <_dtoa_r+0x138>
 800d2b8:	9803      	ldr	r0, [sp, #12]
 800d2ba:	f7f5 f86f 	bl	800239c <__aeabi_i2d>
 800d2be:	002b      	movs	r3, r5
 800d2c0:	0022      	movs	r2, r4
 800d2c2:	f7f3 f8c1 	bl	8000448 <__aeabi_dcmpeq>
 800d2c6:	4243      	negs	r3, r0
 800d2c8:	4158      	adcs	r0, r3
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	1a1b      	subs	r3, r3, r0
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	9316      	str	r3, [sp, #88]	; 0x58
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	2b16      	cmp	r3, #22
 800d2d8:	d810      	bhi.n	800d2fc <_dtoa_r+0x164>
 800d2da:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d2dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d2de:	9a03      	ldr	r2, [sp, #12]
 800d2e0:	4b80      	ldr	r3, [pc, #512]	; (800d4e4 <_dtoa_r+0x34c>)
 800d2e2:	00d2      	lsls	r2, r2, #3
 800d2e4:	189b      	adds	r3, r3, r2
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f7f3 f8b3 	bl	8000454 <__aeabi_dcmplt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d047      	beq.n	800d382 <_dtoa_r+0x1ea>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	9303      	str	r3, [sp, #12]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9316      	str	r3, [sp, #88]	; 0x58
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d300:	920a      	str	r2, [sp, #40]	; 0x28
 800d302:	1bdb      	subs	r3, r3, r7
 800d304:	1e5a      	subs	r2, r3, #1
 800d306:	d53e      	bpl.n	800d386 <_dtoa_r+0x1ee>
 800d308:	2201      	movs	r2, #1
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	930a      	str	r3, [sp, #40]	; 0x28
 800d30e:	2300      	movs	r3, #0
 800d310:	930c      	str	r3, [sp, #48]	; 0x30
 800d312:	9b03      	ldr	r3, [sp, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	db38      	blt.n	800d38a <_dtoa_r+0x1f2>
 800d318:	9a03      	ldr	r2, [sp, #12]
 800d31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d31c:	4694      	mov	ip, r2
 800d31e:	4463      	add	r3, ip
 800d320:	930c      	str	r3, [sp, #48]	; 0x30
 800d322:	2300      	movs	r3, #0
 800d324:	9213      	str	r2, [sp, #76]	; 0x4c
 800d326:	930d      	str	r3, [sp, #52]	; 0x34
 800d328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d32a:	2401      	movs	r4, #1
 800d32c:	2b09      	cmp	r3, #9
 800d32e:	d867      	bhi.n	800d400 <_dtoa_r+0x268>
 800d330:	2b05      	cmp	r3, #5
 800d332:	dd02      	ble.n	800d33a <_dtoa_r+0x1a2>
 800d334:	2400      	movs	r4, #0
 800d336:	3b04      	subs	r3, #4
 800d338:	9322      	str	r3, [sp, #136]	; 0x88
 800d33a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d33c:	1e98      	subs	r0, r3, #2
 800d33e:	2803      	cmp	r0, #3
 800d340:	d867      	bhi.n	800d412 <_dtoa_r+0x27a>
 800d342:	f7f2 fee7 	bl	8000114 <__gnu_thumb1_case_uqi>
 800d346:	3a2b      	.short	0x3a2b
 800d348:	5b38      	.short	0x5b38
 800d34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d34c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d34e:	18f6      	adds	r6, r6, r3
 800d350:	4b65      	ldr	r3, [pc, #404]	; (800d4e8 <_dtoa_r+0x350>)
 800d352:	18f2      	adds	r2, r6, r3
 800d354:	2a20      	cmp	r2, #32
 800d356:	dd0f      	ble.n	800d378 <_dtoa_r+0x1e0>
 800d358:	2340      	movs	r3, #64	; 0x40
 800d35a:	1a9b      	subs	r3, r3, r2
 800d35c:	409f      	lsls	r7, r3
 800d35e:	4b63      	ldr	r3, [pc, #396]	; (800d4ec <_dtoa_r+0x354>)
 800d360:	0038      	movs	r0, r7
 800d362:	18f3      	adds	r3, r6, r3
 800d364:	40dc      	lsrs	r4, r3
 800d366:	4320      	orrs	r0, r4
 800d368:	f7f5 f848 	bl	80023fc <__aeabi_ui2d>
 800d36c:	2201      	movs	r2, #1
 800d36e:	4b60      	ldr	r3, [pc, #384]	; (800d4f0 <_dtoa_r+0x358>)
 800d370:	1e77      	subs	r7, r6, #1
 800d372:	18cb      	adds	r3, r1, r3
 800d374:	9217      	str	r2, [sp, #92]	; 0x5c
 800d376:	e776      	b.n	800d266 <_dtoa_r+0xce>
 800d378:	2320      	movs	r3, #32
 800d37a:	0020      	movs	r0, r4
 800d37c:	1a9b      	subs	r3, r3, r2
 800d37e:	4098      	lsls	r0, r3
 800d380:	e7f2      	b.n	800d368 <_dtoa_r+0x1d0>
 800d382:	9016      	str	r0, [sp, #88]	; 0x58
 800d384:	e7ba      	b.n	800d2fc <_dtoa_r+0x164>
 800d386:	920c      	str	r2, [sp, #48]	; 0x30
 800d388:	e7c3      	b.n	800d312 <_dtoa_r+0x17a>
 800d38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38c:	9a03      	ldr	r2, [sp, #12]
 800d38e:	1a9b      	subs	r3, r3, r2
 800d390:	930a      	str	r3, [sp, #40]	; 0x28
 800d392:	4253      	negs	r3, r2
 800d394:	930d      	str	r3, [sp, #52]	; 0x34
 800d396:	2300      	movs	r3, #0
 800d398:	9313      	str	r3, [sp, #76]	; 0x4c
 800d39a:	e7c5      	b.n	800d328 <_dtoa_r+0x190>
 800d39c:	2300      	movs	r3, #0
 800d39e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3a4:	9307      	str	r3, [sp, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dc13      	bgt.n	800d3d2 <_dtoa_r+0x23a>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	001a      	movs	r2, r3
 800d3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3b0:	9307      	str	r3, [sp, #28]
 800d3b2:	9223      	str	r2, [sp, #140]	; 0x8c
 800d3b4:	e00d      	b.n	800d3d2 <_dtoa_r+0x23a>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e7f1      	b.n	800d39e <_dtoa_r+0x206>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800d3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3c0:	4694      	mov	ip, r2
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	4463      	add	r3, ip
 800d3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	9307      	str	r3, [sp, #28]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	dc00      	bgt.n	800d3d2 <_dtoa_r+0x23a>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	2204      	movs	r2, #4
 800d3d6:	0010      	movs	r0, r2
 800d3d8:	3014      	adds	r0, #20
 800d3da:	4298      	cmp	r0, r3
 800d3dc:	d91d      	bls.n	800d41a <_dtoa_r+0x282>
 800d3de:	9b04      	ldr	r3, [sp, #16]
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	63d9      	str	r1, [r3, #60]	; 0x3c
 800d3e4:	f7fc fb18 	bl	8009a18 <_Balloc>
 800d3e8:	9006      	str	r0, [sp, #24]
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d118      	bne.n	800d420 <_dtoa_r+0x288>
 800d3ee:	21b0      	movs	r1, #176	; 0xb0
 800d3f0:	4b40      	ldr	r3, [pc, #256]	; (800d4f4 <_dtoa_r+0x35c>)
 800d3f2:	4841      	ldr	r0, [pc, #260]	; (800d4f8 <_dtoa_r+0x360>)
 800d3f4:	9a06      	ldr	r2, [sp, #24]
 800d3f6:	31ff      	adds	r1, #255	; 0xff
 800d3f8:	f7ff fdd2 	bl	800cfa0 <__assert_func>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e7dd      	b.n	800d3bc <_dtoa_r+0x224>
 800d400:	2300      	movs	r3, #0
 800d402:	940f      	str	r4, [sp, #60]	; 0x3c
 800d404:	9322      	str	r3, [sp, #136]	; 0x88
 800d406:	3b01      	subs	r3, #1
 800d408:	930b      	str	r3, [sp, #44]	; 0x2c
 800d40a:	9307      	str	r3, [sp, #28]
 800d40c:	2200      	movs	r2, #0
 800d40e:	3313      	adds	r3, #19
 800d410:	e7cf      	b.n	800d3b2 <_dtoa_r+0x21a>
 800d412:	2301      	movs	r3, #1
 800d414:	930f      	str	r3, [sp, #60]	; 0x3c
 800d416:	3b02      	subs	r3, #2
 800d418:	e7f6      	b.n	800d408 <_dtoa_r+0x270>
 800d41a:	3101      	adds	r1, #1
 800d41c:	0052      	lsls	r2, r2, #1
 800d41e:	e7da      	b.n	800d3d6 <_dtoa_r+0x23e>
 800d420:	9b04      	ldr	r3, [sp, #16]
 800d422:	9a06      	ldr	r2, [sp, #24]
 800d424:	639a      	str	r2, [r3, #56]	; 0x38
 800d426:	9b07      	ldr	r3, [sp, #28]
 800d428:	2b0e      	cmp	r3, #14
 800d42a:	d900      	bls.n	800d42e <_dtoa_r+0x296>
 800d42c:	e0e3      	b.n	800d5f6 <_dtoa_r+0x45e>
 800d42e:	2c00      	cmp	r4, #0
 800d430:	d100      	bne.n	800d434 <_dtoa_r+0x29c>
 800d432:	e0e0      	b.n	800d5f6 <_dtoa_r+0x45e>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	2b00      	cmp	r3, #0
 800d438:	dd62      	ble.n	800d500 <_dtoa_r+0x368>
 800d43a:	210f      	movs	r1, #15
 800d43c:	9a03      	ldr	r2, [sp, #12]
 800d43e:	4b29      	ldr	r3, [pc, #164]	; (800d4e4 <_dtoa_r+0x34c>)
 800d440:	400a      	ands	r2, r1
 800d442:	00d2      	lsls	r2, r2, #3
 800d444:	189b      	adds	r3, r3, r2
 800d446:	681e      	ldr	r6, [r3, #0]
 800d448:	685f      	ldr	r7, [r3, #4]
 800d44a:	9b03      	ldr	r3, [sp, #12]
 800d44c:	2402      	movs	r4, #2
 800d44e:	111d      	asrs	r5, r3, #4
 800d450:	05db      	lsls	r3, r3, #23
 800d452:	d50a      	bpl.n	800d46a <_dtoa_r+0x2d2>
 800d454:	4b29      	ldr	r3, [pc, #164]	; (800d4fc <_dtoa_r+0x364>)
 800d456:	400d      	ands	r5, r1
 800d458:	6a1a      	ldr	r2, [r3, #32]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d45e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d460:	f7f3 fd0a 	bl	8000e78 <__aeabi_ddiv>
 800d464:	9008      	str	r0, [sp, #32]
 800d466:	9109      	str	r1, [sp, #36]	; 0x24
 800d468:	3401      	adds	r4, #1
 800d46a:	4b24      	ldr	r3, [pc, #144]	; (800d4fc <_dtoa_r+0x364>)
 800d46c:	930e      	str	r3, [sp, #56]	; 0x38
 800d46e:	2d00      	cmp	r5, #0
 800d470:	d108      	bne.n	800d484 <_dtoa_r+0x2ec>
 800d472:	9808      	ldr	r0, [sp, #32]
 800d474:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d476:	0032      	movs	r2, r6
 800d478:	003b      	movs	r3, r7
 800d47a:	f7f3 fcfd 	bl	8000e78 <__aeabi_ddiv>
 800d47e:	9008      	str	r0, [sp, #32]
 800d480:	9109      	str	r1, [sp, #36]	; 0x24
 800d482:	e058      	b.n	800d536 <_dtoa_r+0x39e>
 800d484:	2301      	movs	r3, #1
 800d486:	421d      	tst	r5, r3
 800d488:	d009      	beq.n	800d49e <_dtoa_r+0x306>
 800d48a:	18e4      	adds	r4, r4, r3
 800d48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d48e:	0030      	movs	r0, r6
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	0039      	movs	r1, r7
 800d496:	f7f4 f8e9 	bl	800166c <__aeabi_dmul>
 800d49a:	0006      	movs	r6, r0
 800d49c:	000f      	movs	r7, r1
 800d49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4a0:	106d      	asrs	r5, r5, #1
 800d4a2:	3308      	adds	r3, #8
 800d4a4:	e7e2      	b.n	800d46c <_dtoa_r+0x2d4>
 800d4a6:	46c0      	nop			; (mov r8, r8)
 800d4a8:	7ff00000 	.word	0x7ff00000
 800d4ac:	0000270f 	.word	0x0000270f
 800d4b0:	08010075 	.word	0x08010075
 800d4b4:	08010078 	.word	0x08010078
 800d4b8:	0800ffe6 	.word	0x0800ffe6
 800d4bc:	0800ffe7 	.word	0x0800ffe7
 800d4c0:	3ff00000 	.word	0x3ff00000
 800d4c4:	fffffc01 	.word	0xfffffc01
 800d4c8:	3ff80000 	.word	0x3ff80000
 800d4cc:	636f4361 	.word	0x636f4361
 800d4d0:	3fd287a7 	.word	0x3fd287a7
 800d4d4:	8b60c8b3 	.word	0x8b60c8b3
 800d4d8:	3fc68a28 	.word	0x3fc68a28
 800d4dc:	509f79fb 	.word	0x509f79fb
 800d4e0:	3fd34413 	.word	0x3fd34413
 800d4e4:	0800fee0 	.word	0x0800fee0
 800d4e8:	00000432 	.word	0x00000432
 800d4ec:	00000412 	.word	0x00000412
 800d4f0:	fe100000 	.word	0xfe100000
 800d4f4:	0800fde9 	.word	0x0800fde9
 800d4f8:	08010079 	.word	0x08010079
 800d4fc:	0800feb8 	.word	0x0800feb8
 800d500:	9b03      	ldr	r3, [sp, #12]
 800d502:	2402      	movs	r4, #2
 800d504:	2b00      	cmp	r3, #0
 800d506:	d016      	beq.n	800d536 <_dtoa_r+0x39e>
 800d508:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d50a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d50c:	220f      	movs	r2, #15
 800d50e:	425d      	negs	r5, r3
 800d510:	402a      	ands	r2, r5
 800d512:	4bdd      	ldr	r3, [pc, #884]	; (800d888 <_dtoa_r+0x6f0>)
 800d514:	00d2      	lsls	r2, r2, #3
 800d516:	189b      	adds	r3, r3, r2
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f7f4 f8a6 	bl	800166c <__aeabi_dmul>
 800d520:	2701      	movs	r7, #1
 800d522:	2300      	movs	r3, #0
 800d524:	9008      	str	r0, [sp, #32]
 800d526:	9109      	str	r1, [sp, #36]	; 0x24
 800d528:	4ed8      	ldr	r6, [pc, #864]	; (800d88c <_dtoa_r+0x6f4>)
 800d52a:	112d      	asrs	r5, r5, #4
 800d52c:	2d00      	cmp	r5, #0
 800d52e:	d000      	beq.n	800d532 <_dtoa_r+0x39a>
 800d530:	e091      	b.n	800d656 <_dtoa_r+0x4be>
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1a3      	bne.n	800d47e <_dtoa_r+0x2e6>
 800d536:	9e08      	ldr	r6, [sp, #32]
 800d538:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d53a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d100      	bne.n	800d542 <_dtoa_r+0x3aa>
 800d540:	e094      	b.n	800d66c <_dtoa_r+0x4d4>
 800d542:	2200      	movs	r2, #0
 800d544:	0030      	movs	r0, r6
 800d546:	0039      	movs	r1, r7
 800d548:	4bd1      	ldr	r3, [pc, #836]	; (800d890 <_dtoa_r+0x6f8>)
 800d54a:	f7f2 ff83 	bl	8000454 <__aeabi_dcmplt>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d100      	bne.n	800d554 <_dtoa_r+0x3bc>
 800d552:	e08b      	b.n	800d66c <_dtoa_r+0x4d4>
 800d554:	9b07      	ldr	r3, [sp, #28]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d100      	bne.n	800d55c <_dtoa_r+0x3c4>
 800d55a:	e087      	b.n	800d66c <_dtoa_r+0x4d4>
 800d55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	dd45      	ble.n	800d5ee <_dtoa_r+0x456>
 800d562:	9b03      	ldr	r3, [sp, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	3b01      	subs	r3, #1
 800d568:	930e      	str	r3, [sp, #56]	; 0x38
 800d56a:	0030      	movs	r0, r6
 800d56c:	4bc9      	ldr	r3, [pc, #804]	; (800d894 <_dtoa_r+0x6fc>)
 800d56e:	0039      	movs	r1, r7
 800d570:	f7f4 f87c 	bl	800166c <__aeabi_dmul>
 800d574:	9008      	str	r0, [sp, #32]
 800d576:	9109      	str	r1, [sp, #36]	; 0x24
 800d578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d57a:	3401      	adds	r4, #1
 800d57c:	0020      	movs	r0, r4
 800d57e:	9e08      	ldr	r6, [sp, #32]
 800d580:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d582:	9312      	str	r3, [sp, #72]	; 0x48
 800d584:	f7f4 ff0a 	bl	800239c <__aeabi_i2d>
 800d588:	0032      	movs	r2, r6
 800d58a:	003b      	movs	r3, r7
 800d58c:	f7f4 f86e 	bl	800166c <__aeabi_dmul>
 800d590:	2200      	movs	r2, #0
 800d592:	4bc1      	ldr	r3, [pc, #772]	; (800d898 <_dtoa_r+0x700>)
 800d594:	f7f3 f910 	bl	80007b8 <__aeabi_dadd>
 800d598:	4ac0      	ldr	r2, [pc, #768]	; (800d89c <_dtoa_r+0x704>)
 800d59a:	9014      	str	r0, [sp, #80]	; 0x50
 800d59c:	9115      	str	r1, [sp, #84]	; 0x54
 800d59e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800d5a2:	4694      	mov	ip, r2
 800d5a4:	9308      	str	r3, [sp, #32]
 800d5a6:	9409      	str	r4, [sp, #36]	; 0x24
 800d5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5aa:	4463      	add	r3, ip
 800d5ac:	9318      	str	r3, [sp, #96]	; 0x60
 800d5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d15e      	bne.n	800d674 <_dtoa_r+0x4dc>
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4bb9      	ldr	r3, [pc, #740]	; (800d8a0 <_dtoa_r+0x708>)
 800d5ba:	0030      	movs	r0, r6
 800d5bc:	0039      	movs	r1, r7
 800d5be:	f7f4 fb17 	bl	8001bf0 <__aeabi_dsub>
 800d5c2:	9a08      	ldr	r2, [sp, #32]
 800d5c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d5c6:	0004      	movs	r4, r0
 800d5c8:	000d      	movs	r5, r1
 800d5ca:	f7f2 ff57 	bl	800047c <__aeabi_dcmpgt>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d000      	beq.n	800d5d4 <_dtoa_r+0x43c>
 800d5d2:	e2b3      	b.n	800db3c <_dtoa_r+0x9a4>
 800d5d4:	48b3      	ldr	r0, [pc, #716]	; (800d8a4 <_dtoa_r+0x70c>)
 800d5d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d5d8:	4684      	mov	ip, r0
 800d5da:	4461      	add	r1, ip
 800d5dc:	000b      	movs	r3, r1
 800d5de:	0020      	movs	r0, r4
 800d5e0:	0029      	movs	r1, r5
 800d5e2:	9a08      	ldr	r2, [sp, #32]
 800d5e4:	f7f2 ff36 	bl	8000454 <__aeabi_dcmplt>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d000      	beq.n	800d5ee <_dtoa_r+0x456>
 800d5ec:	e2a3      	b.n	800db36 <_dtoa_r+0x99e>
 800d5ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800d5f2:	9308      	str	r3, [sp, #32]
 800d5f4:	9409      	str	r4, [sp, #36]	; 0x24
 800d5f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	da00      	bge.n	800d5fe <_dtoa_r+0x466>
 800d5fc:	e179      	b.n	800d8f2 <_dtoa_r+0x75a>
 800d5fe:	9a03      	ldr	r2, [sp, #12]
 800d600:	2a0e      	cmp	r2, #14
 800d602:	dd00      	ble.n	800d606 <_dtoa_r+0x46e>
 800d604:	e175      	b.n	800d8f2 <_dtoa_r+0x75a>
 800d606:	4ba0      	ldr	r3, [pc, #640]	; (800d888 <_dtoa_r+0x6f0>)
 800d608:	00d2      	lsls	r2, r2, #3
 800d60a:	189b      	adds	r3, r3, r2
 800d60c:	681e      	ldr	r6, [r3, #0]
 800d60e:	685f      	ldr	r7, [r3, #4]
 800d610:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d612:	2b00      	cmp	r3, #0
 800d614:	db00      	blt.n	800d618 <_dtoa_r+0x480>
 800d616:	e0e5      	b.n	800d7e4 <_dtoa_r+0x64c>
 800d618:	9b07      	ldr	r3, [sp, #28]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	dd00      	ble.n	800d620 <_dtoa_r+0x488>
 800d61e:	e0e1      	b.n	800d7e4 <_dtoa_r+0x64c>
 800d620:	d000      	beq.n	800d624 <_dtoa_r+0x48c>
 800d622:	e288      	b.n	800db36 <_dtoa_r+0x99e>
 800d624:	2200      	movs	r2, #0
 800d626:	0030      	movs	r0, r6
 800d628:	0039      	movs	r1, r7
 800d62a:	4b9d      	ldr	r3, [pc, #628]	; (800d8a0 <_dtoa_r+0x708>)
 800d62c:	f7f4 f81e 	bl	800166c <__aeabi_dmul>
 800d630:	9a08      	ldr	r2, [sp, #32]
 800d632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d634:	f7f2 ff2c 	bl	8000490 <__aeabi_dcmpge>
 800d638:	9e07      	ldr	r6, [sp, #28]
 800d63a:	0037      	movs	r7, r6
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d000      	beq.n	800d642 <_dtoa_r+0x4aa>
 800d640:	e25f      	b.n	800db02 <_dtoa_r+0x96a>
 800d642:	9b06      	ldr	r3, [sp, #24]
 800d644:	9a06      	ldr	r2, [sp, #24]
 800d646:	3301      	adds	r3, #1
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	2331      	movs	r3, #49	; 0x31
 800d64c:	7013      	strb	r3, [r2, #0]
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	9303      	str	r3, [sp, #12]
 800d654:	e25a      	b.n	800db0c <_dtoa_r+0x974>
 800d656:	423d      	tst	r5, r7
 800d658:	d005      	beq.n	800d666 <_dtoa_r+0x4ce>
 800d65a:	6832      	ldr	r2, [r6, #0]
 800d65c:	6873      	ldr	r3, [r6, #4]
 800d65e:	f7f4 f805 	bl	800166c <__aeabi_dmul>
 800d662:	003b      	movs	r3, r7
 800d664:	3401      	adds	r4, #1
 800d666:	106d      	asrs	r5, r5, #1
 800d668:	3608      	adds	r6, #8
 800d66a:	e75f      	b.n	800d52c <_dtoa_r+0x394>
 800d66c:	9b03      	ldr	r3, [sp, #12]
 800d66e:	930e      	str	r3, [sp, #56]	; 0x38
 800d670:	9b07      	ldr	r3, [sp, #28]
 800d672:	e783      	b.n	800d57c <_dtoa_r+0x3e4>
 800d674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d676:	4b84      	ldr	r3, [pc, #528]	; (800d888 <_dtoa_r+0x6f0>)
 800d678:	3a01      	subs	r2, #1
 800d67a:	00d2      	lsls	r2, r2, #3
 800d67c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d67e:	189b      	adds	r3, r3, r2
 800d680:	9c08      	ldr	r4, [sp, #32]
 800d682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2900      	cmp	r1, #0
 800d68a:	d051      	beq.n	800d730 <_dtoa_r+0x598>
 800d68c:	2000      	movs	r0, #0
 800d68e:	4986      	ldr	r1, [pc, #536]	; (800d8a8 <_dtoa_r+0x710>)
 800d690:	f7f3 fbf2 	bl	8000e78 <__aeabi_ddiv>
 800d694:	0022      	movs	r2, r4
 800d696:	002b      	movs	r3, r5
 800d698:	f7f4 faaa 	bl	8001bf0 <__aeabi_dsub>
 800d69c:	9a06      	ldr	r2, [sp, #24]
 800d69e:	0004      	movs	r4, r0
 800d6a0:	4694      	mov	ip, r2
 800d6a2:	000d      	movs	r5, r1
 800d6a4:	9b06      	ldr	r3, [sp, #24]
 800d6a6:	9314      	str	r3, [sp, #80]	; 0x50
 800d6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6aa:	4463      	add	r3, ip
 800d6ac:	9318      	str	r3, [sp, #96]	; 0x60
 800d6ae:	0039      	movs	r1, r7
 800d6b0:	0030      	movs	r0, r6
 800d6b2:	f7f4 fe3d 	bl	8002330 <__aeabi_d2iz>
 800d6b6:	9012      	str	r0, [sp, #72]	; 0x48
 800d6b8:	f7f4 fe70 	bl	800239c <__aeabi_i2d>
 800d6bc:	0002      	movs	r2, r0
 800d6be:	000b      	movs	r3, r1
 800d6c0:	0030      	movs	r0, r6
 800d6c2:	0039      	movs	r1, r7
 800d6c4:	f7f4 fa94 	bl	8001bf0 <__aeabi_dsub>
 800d6c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	9308      	str	r3, [sp, #32]
 800d6d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6d2:	0006      	movs	r6, r0
 800d6d4:	3330      	adds	r3, #48	; 0x30
 800d6d6:	7013      	strb	r3, [r2, #0]
 800d6d8:	0022      	movs	r2, r4
 800d6da:	002b      	movs	r3, r5
 800d6dc:	000f      	movs	r7, r1
 800d6de:	f7f2 feb9 	bl	8000454 <__aeabi_dcmplt>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d174      	bne.n	800d7d0 <_dtoa_r+0x638>
 800d6e6:	0032      	movs	r2, r6
 800d6e8:	003b      	movs	r3, r7
 800d6ea:	2000      	movs	r0, #0
 800d6ec:	4968      	ldr	r1, [pc, #416]	; (800d890 <_dtoa_r+0x6f8>)
 800d6ee:	f7f4 fa7f 	bl	8001bf0 <__aeabi_dsub>
 800d6f2:	0022      	movs	r2, r4
 800d6f4:	002b      	movs	r3, r5
 800d6f6:	f7f2 fead 	bl	8000454 <__aeabi_dcmplt>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d000      	beq.n	800d700 <_dtoa_r+0x568>
 800d6fe:	e0d7      	b.n	800d8b0 <_dtoa_r+0x718>
 800d700:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d702:	9a08      	ldr	r2, [sp, #32]
 800d704:	4293      	cmp	r3, r2
 800d706:	d100      	bne.n	800d70a <_dtoa_r+0x572>
 800d708:	e771      	b.n	800d5ee <_dtoa_r+0x456>
 800d70a:	2200      	movs	r2, #0
 800d70c:	0020      	movs	r0, r4
 800d70e:	0029      	movs	r1, r5
 800d710:	4b60      	ldr	r3, [pc, #384]	; (800d894 <_dtoa_r+0x6fc>)
 800d712:	f7f3 ffab 	bl	800166c <__aeabi_dmul>
 800d716:	4b5f      	ldr	r3, [pc, #380]	; (800d894 <_dtoa_r+0x6fc>)
 800d718:	0004      	movs	r4, r0
 800d71a:	000d      	movs	r5, r1
 800d71c:	0030      	movs	r0, r6
 800d71e:	0039      	movs	r1, r7
 800d720:	2200      	movs	r2, #0
 800d722:	f7f3 ffa3 	bl	800166c <__aeabi_dmul>
 800d726:	9b08      	ldr	r3, [sp, #32]
 800d728:	0006      	movs	r6, r0
 800d72a:	000f      	movs	r7, r1
 800d72c:	9314      	str	r3, [sp, #80]	; 0x50
 800d72e:	e7be      	b.n	800d6ae <_dtoa_r+0x516>
 800d730:	0020      	movs	r0, r4
 800d732:	0029      	movs	r1, r5
 800d734:	f7f3 ff9a 	bl	800166c <__aeabi_dmul>
 800d738:	9a06      	ldr	r2, [sp, #24]
 800d73a:	9b06      	ldr	r3, [sp, #24]
 800d73c:	4694      	mov	ip, r2
 800d73e:	9308      	str	r3, [sp, #32]
 800d740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d742:	9014      	str	r0, [sp, #80]	; 0x50
 800d744:	9115      	str	r1, [sp, #84]	; 0x54
 800d746:	4463      	add	r3, ip
 800d748:	9319      	str	r3, [sp, #100]	; 0x64
 800d74a:	0030      	movs	r0, r6
 800d74c:	0039      	movs	r1, r7
 800d74e:	f7f4 fdef 	bl	8002330 <__aeabi_d2iz>
 800d752:	9018      	str	r0, [sp, #96]	; 0x60
 800d754:	f7f4 fe22 	bl	800239c <__aeabi_i2d>
 800d758:	0002      	movs	r2, r0
 800d75a:	000b      	movs	r3, r1
 800d75c:	0030      	movs	r0, r6
 800d75e:	0039      	movs	r1, r7
 800d760:	f7f4 fa46 	bl	8001bf0 <__aeabi_dsub>
 800d764:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d766:	9b08      	ldr	r3, [sp, #32]
 800d768:	3630      	adds	r6, #48	; 0x30
 800d76a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d76c:	701e      	strb	r6, [r3, #0]
 800d76e:	3301      	adds	r3, #1
 800d770:	0004      	movs	r4, r0
 800d772:	000d      	movs	r5, r1
 800d774:	9308      	str	r3, [sp, #32]
 800d776:	4293      	cmp	r3, r2
 800d778:	d12d      	bne.n	800d7d6 <_dtoa_r+0x63e>
 800d77a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d77c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d77e:	9a06      	ldr	r2, [sp, #24]
 800d780:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d782:	4694      	mov	ip, r2
 800d784:	4463      	add	r3, ip
 800d786:	2200      	movs	r2, #0
 800d788:	9308      	str	r3, [sp, #32]
 800d78a:	4b47      	ldr	r3, [pc, #284]	; (800d8a8 <_dtoa_r+0x710>)
 800d78c:	f7f3 f814 	bl	80007b8 <__aeabi_dadd>
 800d790:	0002      	movs	r2, r0
 800d792:	000b      	movs	r3, r1
 800d794:	0020      	movs	r0, r4
 800d796:	0029      	movs	r1, r5
 800d798:	f7f2 fe70 	bl	800047c <__aeabi_dcmpgt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d000      	beq.n	800d7a2 <_dtoa_r+0x60a>
 800d7a0:	e086      	b.n	800d8b0 <_dtoa_r+0x718>
 800d7a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	493f      	ldr	r1, [pc, #252]	; (800d8a8 <_dtoa_r+0x710>)
 800d7aa:	f7f4 fa21 	bl	8001bf0 <__aeabi_dsub>
 800d7ae:	0002      	movs	r2, r0
 800d7b0:	000b      	movs	r3, r1
 800d7b2:	0020      	movs	r0, r4
 800d7b4:	0029      	movs	r1, r5
 800d7b6:	f7f2 fe4d 	bl	8000454 <__aeabi_dcmplt>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d100      	bne.n	800d7c0 <_dtoa_r+0x628>
 800d7be:	e716      	b.n	800d5ee <_dtoa_r+0x456>
 800d7c0:	9b08      	ldr	r3, [sp, #32]
 800d7c2:	001a      	movs	r2, r3
 800d7c4:	3a01      	subs	r2, #1
 800d7c6:	9208      	str	r2, [sp, #32]
 800d7c8:	7812      	ldrb	r2, [r2, #0]
 800d7ca:	2a30      	cmp	r2, #48	; 0x30
 800d7cc:	d0f8      	beq.n	800d7c0 <_dtoa_r+0x628>
 800d7ce:	9308      	str	r3, [sp, #32]
 800d7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7d2:	9303      	str	r3, [sp, #12]
 800d7d4:	e046      	b.n	800d864 <_dtoa_r+0x6cc>
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	4b2e      	ldr	r3, [pc, #184]	; (800d894 <_dtoa_r+0x6fc>)
 800d7da:	f7f3 ff47 	bl	800166c <__aeabi_dmul>
 800d7de:	0006      	movs	r6, r0
 800d7e0:	000f      	movs	r7, r1
 800d7e2:	e7b2      	b.n	800d74a <_dtoa_r+0x5b2>
 800d7e4:	9b06      	ldr	r3, [sp, #24]
 800d7e6:	9a06      	ldr	r2, [sp, #24]
 800d7e8:	930a      	str	r3, [sp, #40]	; 0x28
 800d7ea:	9b07      	ldr	r3, [sp, #28]
 800d7ec:	9c08      	ldr	r4, [sp, #32]
 800d7ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	189b      	adds	r3, r3, r2
 800d7f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7f6:	0032      	movs	r2, r6
 800d7f8:	003b      	movs	r3, r7
 800d7fa:	0020      	movs	r0, r4
 800d7fc:	0029      	movs	r1, r5
 800d7fe:	f7f3 fb3b 	bl	8000e78 <__aeabi_ddiv>
 800d802:	f7f4 fd95 	bl	8002330 <__aeabi_d2iz>
 800d806:	9007      	str	r0, [sp, #28]
 800d808:	f7f4 fdc8 	bl	800239c <__aeabi_i2d>
 800d80c:	0032      	movs	r2, r6
 800d80e:	003b      	movs	r3, r7
 800d810:	f7f3 ff2c 	bl	800166c <__aeabi_dmul>
 800d814:	0002      	movs	r2, r0
 800d816:	000b      	movs	r3, r1
 800d818:	0020      	movs	r0, r4
 800d81a:	0029      	movs	r1, r5
 800d81c:	f7f4 f9e8 	bl	8001bf0 <__aeabi_dsub>
 800d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d822:	001a      	movs	r2, r3
 800d824:	3201      	adds	r2, #1
 800d826:	920a      	str	r2, [sp, #40]	; 0x28
 800d828:	9208      	str	r2, [sp, #32]
 800d82a:	9a07      	ldr	r2, [sp, #28]
 800d82c:	3230      	adds	r2, #48	; 0x30
 800d82e:	701a      	strb	r2, [r3, #0]
 800d830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d832:	429a      	cmp	r2, r3
 800d834:	d14f      	bne.n	800d8d6 <_dtoa_r+0x73e>
 800d836:	0002      	movs	r2, r0
 800d838:	000b      	movs	r3, r1
 800d83a:	f7f2 ffbd 	bl	80007b8 <__aeabi_dadd>
 800d83e:	0032      	movs	r2, r6
 800d840:	003b      	movs	r3, r7
 800d842:	0004      	movs	r4, r0
 800d844:	000d      	movs	r5, r1
 800d846:	f7f2 fe19 	bl	800047c <__aeabi_dcmpgt>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d12e      	bne.n	800d8ac <_dtoa_r+0x714>
 800d84e:	0032      	movs	r2, r6
 800d850:	003b      	movs	r3, r7
 800d852:	0020      	movs	r0, r4
 800d854:	0029      	movs	r1, r5
 800d856:	f7f2 fdf7 	bl	8000448 <__aeabi_dcmpeq>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d002      	beq.n	800d864 <_dtoa_r+0x6cc>
 800d85e:	9b07      	ldr	r3, [sp, #28]
 800d860:	07de      	lsls	r6, r3, #31
 800d862:	d423      	bmi.n	800d8ac <_dtoa_r+0x714>
 800d864:	9905      	ldr	r1, [sp, #20]
 800d866:	9804      	ldr	r0, [sp, #16]
 800d868:	f7fc f8fe 	bl	8009a68 <_Bfree>
 800d86c:	2300      	movs	r3, #0
 800d86e:	9a08      	ldr	r2, [sp, #32]
 800d870:	7013      	strb	r3, [r2, #0]
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d876:	3301      	adds	r3, #1
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d100      	bne.n	800d882 <_dtoa_r+0x6ea>
 800d880:	e4bd      	b.n	800d1fe <_dtoa_r+0x66>
 800d882:	9a08      	ldr	r2, [sp, #32]
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	e4ba      	b.n	800d1fe <_dtoa_r+0x66>
 800d888:	0800fee0 	.word	0x0800fee0
 800d88c:	0800feb8 	.word	0x0800feb8
 800d890:	3ff00000 	.word	0x3ff00000
 800d894:	40240000 	.word	0x40240000
 800d898:	401c0000 	.word	0x401c0000
 800d89c:	fcc00000 	.word	0xfcc00000
 800d8a0:	40140000 	.word	0x40140000
 800d8a4:	7cc00000 	.word	0x7cc00000
 800d8a8:	3fe00000 	.word	0x3fe00000
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	930e      	str	r3, [sp, #56]	; 0x38
 800d8b0:	9b08      	ldr	r3, [sp, #32]
 800d8b2:	9308      	str	r3, [sp, #32]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	781a      	ldrb	r2, [r3, #0]
 800d8b8:	2a39      	cmp	r2, #57	; 0x39
 800d8ba:	d108      	bne.n	800d8ce <_dtoa_r+0x736>
 800d8bc:	9a06      	ldr	r2, [sp, #24]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d1f7      	bne.n	800d8b2 <_dtoa_r+0x71a>
 800d8c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8c4:	9906      	ldr	r1, [sp, #24]
 800d8c6:	3201      	adds	r2, #1
 800d8c8:	920e      	str	r2, [sp, #56]	; 0x38
 800d8ca:	2230      	movs	r2, #48	; 0x30
 800d8cc:	700a      	strb	r2, [r1, #0]
 800d8ce:	781a      	ldrb	r2, [r3, #0]
 800d8d0:	3201      	adds	r2, #1
 800d8d2:	701a      	strb	r2, [r3, #0]
 800d8d4:	e77c      	b.n	800d7d0 <_dtoa_r+0x638>
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	4ba9      	ldr	r3, [pc, #676]	; (800db80 <_dtoa_r+0x9e8>)
 800d8da:	f7f3 fec7 	bl	800166c <__aeabi_dmul>
 800d8de:	2200      	movs	r2, #0
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	0004      	movs	r4, r0
 800d8e4:	000d      	movs	r5, r1
 800d8e6:	f7f2 fdaf 	bl	8000448 <__aeabi_dcmpeq>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d100      	bne.n	800d8f0 <_dtoa_r+0x758>
 800d8ee:	e782      	b.n	800d7f6 <_dtoa_r+0x65e>
 800d8f0:	e7b8      	b.n	800d864 <_dtoa_r+0x6cc>
 800d8f2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d8f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d8f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8f8:	2f00      	cmp	r7, #0
 800d8fa:	d012      	beq.n	800d922 <_dtoa_r+0x78a>
 800d8fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d8fe:	2a01      	cmp	r2, #1
 800d900:	dc6e      	bgt.n	800d9e0 <_dtoa_r+0x848>
 800d902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d904:	2a00      	cmp	r2, #0
 800d906:	d065      	beq.n	800d9d4 <_dtoa_r+0x83c>
 800d908:	4a9e      	ldr	r2, [pc, #632]	; (800db84 <_dtoa_r+0x9ec>)
 800d90a:	189b      	adds	r3, r3, r2
 800d90c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d90e:	2101      	movs	r1, #1
 800d910:	18d2      	adds	r2, r2, r3
 800d912:	920a      	str	r2, [sp, #40]	; 0x28
 800d914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d916:	9804      	ldr	r0, [sp, #16]
 800d918:	18d3      	adds	r3, r2, r3
 800d91a:	930c      	str	r3, [sp, #48]	; 0x30
 800d91c:	f7fc f986 	bl	8009c2c <__i2b>
 800d920:	0007      	movs	r7, r0
 800d922:	2c00      	cmp	r4, #0
 800d924:	d00e      	beq.n	800d944 <_dtoa_r+0x7ac>
 800d926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d928:	2b00      	cmp	r3, #0
 800d92a:	dd0b      	ble.n	800d944 <_dtoa_r+0x7ac>
 800d92c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d92e:	0023      	movs	r3, r4
 800d930:	4294      	cmp	r4, r2
 800d932:	dd00      	ble.n	800d936 <_dtoa_r+0x79e>
 800d934:	0013      	movs	r3, r2
 800d936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d938:	1ae4      	subs	r4, r4, r3
 800d93a:	1ad2      	subs	r2, r2, r3
 800d93c:	920a      	str	r2, [sp, #40]	; 0x28
 800d93e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	930c      	str	r3, [sp, #48]	; 0x30
 800d944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d946:	2b00      	cmp	r3, #0
 800d948:	d01e      	beq.n	800d988 <_dtoa_r+0x7f0>
 800d94a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d05c      	beq.n	800da0a <_dtoa_r+0x872>
 800d950:	2d00      	cmp	r5, #0
 800d952:	dd10      	ble.n	800d976 <_dtoa_r+0x7de>
 800d954:	0039      	movs	r1, r7
 800d956:	002a      	movs	r2, r5
 800d958:	9804      	ldr	r0, [sp, #16]
 800d95a:	f7fc fa2f 	bl	8009dbc <__pow5mult>
 800d95e:	9a05      	ldr	r2, [sp, #20]
 800d960:	0001      	movs	r1, r0
 800d962:	0007      	movs	r7, r0
 800d964:	9804      	ldr	r0, [sp, #16]
 800d966:	f7fc f979 	bl	8009c5c <__multiply>
 800d96a:	0006      	movs	r6, r0
 800d96c:	9905      	ldr	r1, [sp, #20]
 800d96e:	9804      	ldr	r0, [sp, #16]
 800d970:	f7fc f87a 	bl	8009a68 <_Bfree>
 800d974:	9605      	str	r6, [sp, #20]
 800d976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d978:	1b5a      	subs	r2, r3, r5
 800d97a:	42ab      	cmp	r3, r5
 800d97c:	d004      	beq.n	800d988 <_dtoa_r+0x7f0>
 800d97e:	9905      	ldr	r1, [sp, #20]
 800d980:	9804      	ldr	r0, [sp, #16]
 800d982:	f7fc fa1b 	bl	8009dbc <__pow5mult>
 800d986:	9005      	str	r0, [sp, #20]
 800d988:	2101      	movs	r1, #1
 800d98a:	9804      	ldr	r0, [sp, #16]
 800d98c:	f7fc f94e 	bl	8009c2c <__i2b>
 800d990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d992:	0006      	movs	r6, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd3a      	ble.n	800da0e <_dtoa_r+0x876>
 800d998:	001a      	movs	r2, r3
 800d99a:	0001      	movs	r1, r0
 800d99c:	9804      	ldr	r0, [sp, #16]
 800d99e:	f7fc fa0d 	bl	8009dbc <__pow5mult>
 800d9a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9a4:	0006      	movs	r6, r0
 800d9a6:	2500      	movs	r5, #0
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	dc38      	bgt.n	800da1e <_dtoa_r+0x886>
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	9b08      	ldr	r3, [sp, #32]
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	d130      	bne.n	800da16 <_dtoa_r+0x87e>
 800d9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b6:	031b      	lsls	r3, r3, #12
 800d9b8:	42ab      	cmp	r3, r5
 800d9ba:	d12c      	bne.n	800da16 <_dtoa_r+0x87e>
 800d9bc:	4b72      	ldr	r3, [pc, #456]	; (800db88 <_dtoa_r+0x9f0>)
 800d9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c0:	4213      	tst	r3, r2
 800d9c2:	d028      	beq.n	800da16 <_dtoa_r+0x87e>
 800d9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9c6:	3501      	adds	r5, #1
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d9cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d9d2:	e020      	b.n	800da16 <_dtoa_r+0x87e>
 800d9d4:	2336      	movs	r3, #54	; 0x36
 800d9d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d9da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9dc:	1a9b      	subs	r3, r3, r2
 800d9de:	e795      	b.n	800d90c <_dtoa_r+0x774>
 800d9e0:	9b07      	ldr	r3, [sp, #28]
 800d9e2:	1e5d      	subs	r5, r3, #1
 800d9e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9e6:	42ab      	cmp	r3, r5
 800d9e8:	db07      	blt.n	800d9fa <_dtoa_r+0x862>
 800d9ea:	1b5d      	subs	r5, r3, r5
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	da8b      	bge.n	800d90c <_dtoa_r+0x774>
 800d9f4:	1ae4      	subs	r4, r4, r3
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e788      	b.n	800d90c <_dtoa_r+0x774>
 800d9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9fe:	1aeb      	subs	r3, r5, r3
 800da00:	18d3      	adds	r3, r2, r3
 800da02:	950d      	str	r5, [sp, #52]	; 0x34
 800da04:	9313      	str	r3, [sp, #76]	; 0x4c
 800da06:	2500      	movs	r5, #0
 800da08:	e7f0      	b.n	800d9ec <_dtoa_r+0x854>
 800da0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da0c:	e7b7      	b.n	800d97e <_dtoa_r+0x7e6>
 800da0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da10:	2500      	movs	r5, #0
 800da12:	2b01      	cmp	r3, #1
 800da14:	ddca      	ble.n	800d9ac <_dtoa_r+0x814>
 800da16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da18:	2001      	movs	r0, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <_dtoa_r+0x898>
 800da1e:	6933      	ldr	r3, [r6, #16]
 800da20:	3303      	adds	r3, #3
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	18f3      	adds	r3, r6, r3
 800da26:	6858      	ldr	r0, [r3, #4]
 800da28:	f7fc f8b8 	bl	8009b9c <__hi0bits>
 800da2c:	2320      	movs	r3, #32
 800da2e:	1a18      	subs	r0, r3, r0
 800da30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da32:	1818      	adds	r0, r3, r0
 800da34:	0002      	movs	r2, r0
 800da36:	231f      	movs	r3, #31
 800da38:	401a      	ands	r2, r3
 800da3a:	4218      	tst	r0, r3
 800da3c:	d047      	beq.n	800dace <_dtoa_r+0x936>
 800da3e:	3301      	adds	r3, #1
 800da40:	1a9b      	subs	r3, r3, r2
 800da42:	2b04      	cmp	r3, #4
 800da44:	dd3f      	ble.n	800dac6 <_dtoa_r+0x92e>
 800da46:	231c      	movs	r3, #28
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da4c:	18e4      	adds	r4, r4, r3
 800da4e:	18d2      	adds	r2, r2, r3
 800da50:	920a      	str	r2, [sp, #40]	; 0x28
 800da52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da54:	18d3      	adds	r3, r2, r3
 800da56:	930c      	str	r3, [sp, #48]	; 0x30
 800da58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	dd05      	ble.n	800da6a <_dtoa_r+0x8d2>
 800da5e:	001a      	movs	r2, r3
 800da60:	9905      	ldr	r1, [sp, #20]
 800da62:	9804      	ldr	r0, [sp, #16]
 800da64:	f7fc f9ec 	bl	8009e40 <__lshift>
 800da68:	9005      	str	r0, [sp, #20]
 800da6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	dd05      	ble.n	800da7c <_dtoa_r+0x8e4>
 800da70:	0031      	movs	r1, r6
 800da72:	001a      	movs	r2, r3
 800da74:	9804      	ldr	r0, [sp, #16]
 800da76:	f7fc f9e3 	bl	8009e40 <__lshift>
 800da7a:	0006      	movs	r6, r0
 800da7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d027      	beq.n	800dad2 <_dtoa_r+0x93a>
 800da82:	0031      	movs	r1, r6
 800da84:	9805      	ldr	r0, [sp, #20]
 800da86:	f7fc fa49 	bl	8009f1c <__mcmp>
 800da8a:	2800      	cmp	r0, #0
 800da8c:	da21      	bge.n	800dad2 <_dtoa_r+0x93a>
 800da8e:	9b03      	ldr	r3, [sp, #12]
 800da90:	220a      	movs	r2, #10
 800da92:	3b01      	subs	r3, #1
 800da94:	9303      	str	r3, [sp, #12]
 800da96:	9905      	ldr	r1, [sp, #20]
 800da98:	2300      	movs	r3, #0
 800da9a:	9804      	ldr	r0, [sp, #16]
 800da9c:	f7fb ffee 	bl	8009a7c <__multadd>
 800daa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daa2:	9005      	str	r0, [sp, #20]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d100      	bne.n	800daaa <_dtoa_r+0x912>
 800daa8:	e15d      	b.n	800dd66 <_dtoa_r+0xbce>
 800daaa:	2300      	movs	r3, #0
 800daac:	0039      	movs	r1, r7
 800daae:	220a      	movs	r2, #10
 800dab0:	9804      	ldr	r0, [sp, #16]
 800dab2:	f7fb ffe3 	bl	8009a7c <__multadd>
 800dab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab8:	0007      	movs	r7, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dc49      	bgt.n	800db52 <_dtoa_r+0x9ba>
 800dabe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	dc0e      	bgt.n	800dae2 <_dtoa_r+0x94a>
 800dac4:	e045      	b.n	800db52 <_dtoa_r+0x9ba>
 800dac6:	2b04      	cmp	r3, #4
 800dac8:	d0c6      	beq.n	800da58 <_dtoa_r+0x8c0>
 800daca:	331c      	adds	r3, #28
 800dacc:	e7bd      	b.n	800da4a <_dtoa_r+0x8b2>
 800dace:	0013      	movs	r3, r2
 800dad0:	e7fb      	b.n	800daca <_dtoa_r+0x932>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	dc36      	bgt.n	800db46 <_dtoa_r+0x9ae>
 800dad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dada:	2b02      	cmp	r3, #2
 800dadc:	dd33      	ble.n	800db46 <_dtoa_r+0x9ae>
 800dade:	9b07      	ldr	r3, [sp, #28]
 800dae0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10c      	bne.n	800db02 <_dtoa_r+0x96a>
 800dae8:	0031      	movs	r1, r6
 800daea:	2205      	movs	r2, #5
 800daec:	9804      	ldr	r0, [sp, #16]
 800daee:	f7fb ffc5 	bl	8009a7c <__multadd>
 800daf2:	0006      	movs	r6, r0
 800daf4:	0001      	movs	r1, r0
 800daf6:	9805      	ldr	r0, [sp, #20]
 800daf8:	f7fc fa10 	bl	8009f1c <__mcmp>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	dd00      	ble.n	800db02 <_dtoa_r+0x96a>
 800db00:	e59f      	b.n	800d642 <_dtoa_r+0x4aa>
 800db02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db04:	43db      	mvns	r3, r3
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	9b06      	ldr	r3, [sp, #24]
 800db0a:	9308      	str	r3, [sp, #32]
 800db0c:	2500      	movs	r5, #0
 800db0e:	0031      	movs	r1, r6
 800db10:	9804      	ldr	r0, [sp, #16]
 800db12:	f7fb ffa9 	bl	8009a68 <_Bfree>
 800db16:	2f00      	cmp	r7, #0
 800db18:	d100      	bne.n	800db1c <_dtoa_r+0x984>
 800db1a:	e6a3      	b.n	800d864 <_dtoa_r+0x6cc>
 800db1c:	2d00      	cmp	r5, #0
 800db1e:	d005      	beq.n	800db2c <_dtoa_r+0x994>
 800db20:	42bd      	cmp	r5, r7
 800db22:	d003      	beq.n	800db2c <_dtoa_r+0x994>
 800db24:	0029      	movs	r1, r5
 800db26:	9804      	ldr	r0, [sp, #16]
 800db28:	f7fb ff9e 	bl	8009a68 <_Bfree>
 800db2c:	0039      	movs	r1, r7
 800db2e:	9804      	ldr	r0, [sp, #16]
 800db30:	f7fb ff9a 	bl	8009a68 <_Bfree>
 800db34:	e696      	b.n	800d864 <_dtoa_r+0x6cc>
 800db36:	2600      	movs	r6, #0
 800db38:	0037      	movs	r7, r6
 800db3a:	e7e2      	b.n	800db02 <_dtoa_r+0x96a>
 800db3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db3e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800db40:	9303      	str	r3, [sp, #12]
 800db42:	0037      	movs	r7, r6
 800db44:	e57d      	b.n	800d642 <_dtoa_r+0x4aa>
 800db46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d100      	bne.n	800db4e <_dtoa_r+0x9b6>
 800db4c:	e0c3      	b.n	800dcd6 <_dtoa_r+0xb3e>
 800db4e:	9b07      	ldr	r3, [sp, #28]
 800db50:	930b      	str	r3, [sp, #44]	; 0x2c
 800db52:	2c00      	cmp	r4, #0
 800db54:	dd05      	ble.n	800db62 <_dtoa_r+0x9ca>
 800db56:	0039      	movs	r1, r7
 800db58:	0022      	movs	r2, r4
 800db5a:	9804      	ldr	r0, [sp, #16]
 800db5c:	f7fc f970 	bl	8009e40 <__lshift>
 800db60:	0007      	movs	r7, r0
 800db62:	0038      	movs	r0, r7
 800db64:	2d00      	cmp	r5, #0
 800db66:	d024      	beq.n	800dbb2 <_dtoa_r+0xa1a>
 800db68:	6879      	ldr	r1, [r7, #4]
 800db6a:	9804      	ldr	r0, [sp, #16]
 800db6c:	f7fb ff54 	bl	8009a18 <_Balloc>
 800db70:	1e04      	subs	r4, r0, #0
 800db72:	d111      	bne.n	800db98 <_dtoa_r+0xa00>
 800db74:	0022      	movs	r2, r4
 800db76:	4b05      	ldr	r3, [pc, #20]	; (800db8c <_dtoa_r+0x9f4>)
 800db78:	4805      	ldr	r0, [pc, #20]	; (800db90 <_dtoa_r+0x9f8>)
 800db7a:	4906      	ldr	r1, [pc, #24]	; (800db94 <_dtoa_r+0x9fc>)
 800db7c:	e43c      	b.n	800d3f8 <_dtoa_r+0x260>
 800db7e:	46c0      	nop			; (mov r8, r8)
 800db80:	40240000 	.word	0x40240000
 800db84:	00000433 	.word	0x00000433
 800db88:	7ff00000 	.word	0x7ff00000
 800db8c:	0800fde9 	.word	0x0800fde9
 800db90:	08010079 	.word	0x08010079
 800db94:	000002ef 	.word	0x000002ef
 800db98:	0039      	movs	r1, r7
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	310c      	adds	r1, #12
 800db9e:	3202      	adds	r2, #2
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	300c      	adds	r0, #12
 800dba4:	f7fb fa9d 	bl	80090e2 <memcpy>
 800dba8:	2201      	movs	r2, #1
 800dbaa:	0021      	movs	r1, r4
 800dbac:	9804      	ldr	r0, [sp, #16]
 800dbae:	f7fc f947 	bl	8009e40 <__lshift>
 800dbb2:	9b06      	ldr	r3, [sp, #24]
 800dbb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbb6:	9307      	str	r3, [sp, #28]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	189b      	adds	r3, r3, r2
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	003d      	movs	r5, r7
 800dbc0:	0007      	movs	r7, r0
 800dbc2:	930e      	str	r3, [sp, #56]	; 0x38
 800dbc4:	9b08      	ldr	r3, [sp, #32]
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	930d      	str	r3, [sp, #52]	; 0x34
 800dbca:	0031      	movs	r1, r6
 800dbcc:	9805      	ldr	r0, [sp, #20]
 800dbce:	f7ff fa53 	bl	800d078 <quorem>
 800dbd2:	0029      	movs	r1, r5
 800dbd4:	0004      	movs	r4, r0
 800dbd6:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbd8:	9805      	ldr	r0, [sp, #20]
 800dbda:	f7fc f99f 	bl	8009f1c <__mcmp>
 800dbde:	003a      	movs	r2, r7
 800dbe0:	900c      	str	r0, [sp, #48]	; 0x30
 800dbe2:	0031      	movs	r1, r6
 800dbe4:	9804      	ldr	r0, [sp, #16]
 800dbe6:	f7fc f9b5 	bl	8009f54 <__mdiff>
 800dbea:	2201      	movs	r2, #1
 800dbec:	68c3      	ldr	r3, [r0, #12]
 800dbee:	3430      	adds	r4, #48	; 0x30
 800dbf0:	9008      	str	r0, [sp, #32]
 800dbf2:	920a      	str	r2, [sp, #40]	; 0x28
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d104      	bne.n	800dc02 <_dtoa_r+0xa6a>
 800dbf8:	0001      	movs	r1, r0
 800dbfa:	9805      	ldr	r0, [sp, #20]
 800dbfc:	f7fc f98e 	bl	8009f1c <__mcmp>
 800dc00:	900a      	str	r0, [sp, #40]	; 0x28
 800dc02:	9908      	ldr	r1, [sp, #32]
 800dc04:	9804      	ldr	r0, [sp, #16]
 800dc06:	f7fb ff2f 	bl	8009a68 <_Bfree>
 800dc0a:	9b07      	ldr	r3, [sp, #28]
 800dc0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc0e:	3301      	adds	r3, #1
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc14:	4313      	orrs	r3, r2
 800dc16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc18:	4313      	orrs	r3, r2
 800dc1a:	d109      	bne.n	800dc30 <_dtoa_r+0xa98>
 800dc1c:	2c39      	cmp	r4, #57	; 0x39
 800dc1e:	d022      	beq.n	800dc66 <_dtoa_r+0xace>
 800dc20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	dd01      	ble.n	800dc2a <_dtoa_r+0xa92>
 800dc26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dc28:	3431      	adds	r4, #49	; 0x31
 800dc2a:	9b07      	ldr	r3, [sp, #28]
 800dc2c:	701c      	strb	r4, [r3, #0]
 800dc2e:	e76e      	b.n	800db0e <_dtoa_r+0x976>
 800dc30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	db04      	blt.n	800dc40 <_dtoa_r+0xaa8>
 800dc36:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	d11e      	bne.n	800dc7e <_dtoa_r+0xae6>
 800dc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	ddf1      	ble.n	800dc2a <_dtoa_r+0xa92>
 800dc46:	9905      	ldr	r1, [sp, #20]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	9804      	ldr	r0, [sp, #16]
 800dc4c:	f7fc f8f8 	bl	8009e40 <__lshift>
 800dc50:	0031      	movs	r1, r6
 800dc52:	9005      	str	r0, [sp, #20]
 800dc54:	f7fc f962 	bl	8009f1c <__mcmp>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	dc02      	bgt.n	800dc62 <_dtoa_r+0xaca>
 800dc5c:	d1e5      	bne.n	800dc2a <_dtoa_r+0xa92>
 800dc5e:	07e3      	lsls	r3, r4, #31
 800dc60:	d5e3      	bpl.n	800dc2a <_dtoa_r+0xa92>
 800dc62:	2c39      	cmp	r4, #57	; 0x39
 800dc64:	d1df      	bne.n	800dc26 <_dtoa_r+0xa8e>
 800dc66:	2339      	movs	r3, #57	; 0x39
 800dc68:	9a07      	ldr	r2, [sp, #28]
 800dc6a:	7013      	strb	r3, [r2, #0]
 800dc6c:	9b08      	ldr	r3, [sp, #32]
 800dc6e:	9308      	str	r3, [sp, #32]
 800dc70:	3b01      	subs	r3, #1
 800dc72:	781a      	ldrb	r2, [r3, #0]
 800dc74:	2a39      	cmp	r2, #57	; 0x39
 800dc76:	d063      	beq.n	800dd40 <_dtoa_r+0xba8>
 800dc78:	3201      	adds	r2, #1
 800dc7a:	701a      	strb	r2, [r3, #0]
 800dc7c:	e747      	b.n	800db0e <_dtoa_r+0x976>
 800dc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	dd03      	ble.n	800dc8c <_dtoa_r+0xaf4>
 800dc84:	2c39      	cmp	r4, #57	; 0x39
 800dc86:	d0ee      	beq.n	800dc66 <_dtoa_r+0xace>
 800dc88:	3401      	adds	r4, #1
 800dc8a:	e7ce      	b.n	800dc2a <_dtoa_r+0xa92>
 800dc8c:	9b07      	ldr	r3, [sp, #28]
 800dc8e:	9a07      	ldr	r2, [sp, #28]
 800dc90:	701c      	strb	r4, [r3, #0]
 800dc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d03e      	beq.n	800dd16 <_dtoa_r+0xb7e>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	220a      	movs	r2, #10
 800dc9c:	9905      	ldr	r1, [sp, #20]
 800dc9e:	9804      	ldr	r0, [sp, #16]
 800dca0:	f7fb feec 	bl	8009a7c <__multadd>
 800dca4:	2300      	movs	r3, #0
 800dca6:	9005      	str	r0, [sp, #20]
 800dca8:	220a      	movs	r2, #10
 800dcaa:	0029      	movs	r1, r5
 800dcac:	9804      	ldr	r0, [sp, #16]
 800dcae:	42bd      	cmp	r5, r7
 800dcb0:	d106      	bne.n	800dcc0 <_dtoa_r+0xb28>
 800dcb2:	f7fb fee3 	bl	8009a7c <__multadd>
 800dcb6:	0005      	movs	r5, r0
 800dcb8:	0007      	movs	r7, r0
 800dcba:	9b08      	ldr	r3, [sp, #32]
 800dcbc:	9307      	str	r3, [sp, #28]
 800dcbe:	e784      	b.n	800dbca <_dtoa_r+0xa32>
 800dcc0:	f7fb fedc 	bl	8009a7c <__multadd>
 800dcc4:	0039      	movs	r1, r7
 800dcc6:	0005      	movs	r5, r0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	220a      	movs	r2, #10
 800dccc:	9804      	ldr	r0, [sp, #16]
 800dcce:	f7fb fed5 	bl	8009a7c <__multadd>
 800dcd2:	0007      	movs	r7, r0
 800dcd4:	e7f1      	b.n	800dcba <_dtoa_r+0xb22>
 800dcd6:	9b07      	ldr	r3, [sp, #28]
 800dcd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcda:	2500      	movs	r5, #0
 800dcdc:	0031      	movs	r1, r6
 800dcde:	9805      	ldr	r0, [sp, #20]
 800dce0:	f7ff f9ca 	bl	800d078 <quorem>
 800dce4:	9b06      	ldr	r3, [sp, #24]
 800dce6:	3030      	adds	r0, #48	; 0x30
 800dce8:	5558      	strb	r0, [r3, r5]
 800dcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcec:	3501      	adds	r5, #1
 800dcee:	0004      	movs	r4, r0
 800dcf0:	42ab      	cmp	r3, r5
 800dcf2:	dd07      	ble.n	800dd04 <_dtoa_r+0xb6c>
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	220a      	movs	r2, #10
 800dcf8:	9905      	ldr	r1, [sp, #20]
 800dcfa:	9804      	ldr	r0, [sp, #16]
 800dcfc:	f7fb febe 	bl	8009a7c <__multadd>
 800dd00:	9005      	str	r0, [sp, #20]
 800dd02:	e7eb      	b.n	800dcdc <_dtoa_r+0xb44>
 800dd04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd06:	2301      	movs	r3, #1
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	dd00      	ble.n	800dd0e <_dtoa_r+0xb76>
 800dd0c:	0013      	movs	r3, r2
 800dd0e:	2500      	movs	r5, #0
 800dd10:	9a06      	ldr	r2, [sp, #24]
 800dd12:	18d3      	adds	r3, r2, r3
 800dd14:	9308      	str	r3, [sp, #32]
 800dd16:	9905      	ldr	r1, [sp, #20]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	9804      	ldr	r0, [sp, #16]
 800dd1c:	f7fc f890 	bl	8009e40 <__lshift>
 800dd20:	0031      	movs	r1, r6
 800dd22:	9005      	str	r0, [sp, #20]
 800dd24:	f7fc f8fa 	bl	8009f1c <__mcmp>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	dc9f      	bgt.n	800dc6c <_dtoa_r+0xad4>
 800dd2c:	d101      	bne.n	800dd32 <_dtoa_r+0xb9a>
 800dd2e:	07e4      	lsls	r4, r4, #31
 800dd30:	d49c      	bmi.n	800dc6c <_dtoa_r+0xad4>
 800dd32:	9b08      	ldr	r3, [sp, #32]
 800dd34:	9308      	str	r3, [sp, #32]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	781a      	ldrb	r2, [r3, #0]
 800dd3a:	2a30      	cmp	r2, #48	; 0x30
 800dd3c:	d0fa      	beq.n	800dd34 <_dtoa_r+0xb9c>
 800dd3e:	e6e6      	b.n	800db0e <_dtoa_r+0x976>
 800dd40:	9a06      	ldr	r2, [sp, #24]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d193      	bne.n	800dc6e <_dtoa_r+0xad6>
 800dd46:	9b03      	ldr	r3, [sp, #12]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	9303      	str	r3, [sp, #12]
 800dd4c:	2331      	movs	r3, #49	; 0x31
 800dd4e:	7013      	strb	r3, [r2, #0]
 800dd50:	e6dd      	b.n	800db0e <_dtoa_r+0x976>
 800dd52:	4b09      	ldr	r3, [pc, #36]	; (800dd78 <_dtoa_r+0xbe0>)
 800dd54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dd56:	9306      	str	r3, [sp, #24]
 800dd58:	4b08      	ldr	r3, [pc, #32]	; (800dd7c <_dtoa_r+0xbe4>)
 800dd5a:	2a00      	cmp	r2, #0
 800dd5c:	d001      	beq.n	800dd62 <_dtoa_r+0xbca>
 800dd5e:	f7ff fa4c 	bl	800d1fa <_dtoa_r+0x62>
 800dd62:	f7ff fa4c 	bl	800d1fe <_dtoa_r+0x66>
 800dd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dcb6      	bgt.n	800dcda <_dtoa_r+0xb42>
 800dd6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	dd00      	ble.n	800dd74 <_dtoa_r+0xbdc>
 800dd72:	e6b6      	b.n	800dae2 <_dtoa_r+0x94a>
 800dd74:	e7b1      	b.n	800dcda <_dtoa_r+0xb42>
 800dd76:	46c0      	nop			; (mov r8, r8)
 800dd78:	0801006c 	.word	0x0801006c
 800dd7c:	08010074 	.word	0x08010074

0800dd80 <realloc>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <realloc+0x10>)
 800dd84:	000a      	movs	r2, r1
 800dd86:	0001      	movs	r1, r0
 800dd88:	6818      	ldr	r0, [r3, #0]
 800dd8a:	f000 f803 	bl	800dd94 <_realloc_r>
 800dd8e:	bd10      	pop	{r4, pc}
 800dd90:	200006b8 	.word	0x200006b8

0800dd94 <_realloc_r>:
 800dd94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd96:	b087      	sub	sp, #28
 800dd98:	1e0c      	subs	r4, r1, #0
 800dd9a:	9001      	str	r0, [sp, #4]
 800dd9c:	9205      	str	r2, [sp, #20]
 800dd9e:	d106      	bne.n	800ddae <_realloc_r+0x1a>
 800dda0:	0011      	movs	r1, r2
 800dda2:	f7f9 fe7b 	bl	8007a9c <_malloc_r>
 800dda6:	0007      	movs	r7, r0
 800dda8:	0038      	movs	r0, r7
 800ddaa:	b007      	add	sp, #28
 800ddac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddae:	9801      	ldr	r0, [sp, #4]
 800ddb0:	f7fa f888 	bl	8007ec4 <__malloc_lock>
 800ddb4:	0023      	movs	r3, r4
 800ddb6:	3b08      	subs	r3, #8
 800ddb8:	685f      	ldr	r7, [r3, #4]
 800ddba:	9304      	str	r3, [sp, #16]
 800ddbc:	9b05      	ldr	r3, [sp, #20]
 800ddbe:	330b      	adds	r3, #11
 800ddc0:	2b16      	cmp	r3, #22
 800ddc2:	d908      	bls.n	800ddd6 <_realloc_r+0x42>
 800ddc4:	2207      	movs	r2, #7
 800ddc6:	4393      	bics	r3, r2
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	d506      	bpl.n	800ddda <_realloc_r+0x46>
 800ddcc:	230c      	movs	r3, #12
 800ddce:	9a01      	ldr	r2, [sp, #4]
 800ddd0:	2700      	movs	r7, #0
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	e7e8      	b.n	800dda8 <_realloc_r+0x14>
 800ddd6:	2310      	movs	r3, #16
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	9b00      	ldr	r3, [sp, #0]
 800dddc:	9a05      	ldr	r2, [sp, #20]
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d3f4      	bcc.n	800ddcc <_realloc_r+0x38>
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	003a      	movs	r2, r7
 800dde6:	9302      	str	r3, [sp, #8]
 800dde8:	2303      	movs	r3, #3
 800ddea:	439a      	bics	r2, r3
 800ddec:	9b00      	ldr	r3, [sp, #0]
 800ddee:	9203      	str	r2, [sp, #12]
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	dc00      	bgt.n	800ddf6 <_realloc_r+0x62>
 800ddf4:	e169      	b.n	800e0ca <_realloc_r+0x336>
 800ddf6:	9b04      	ldr	r3, [sp, #16]
 800ddf8:	48b8      	ldr	r0, [pc, #736]	; (800e0dc <_realloc_r+0x348>)
 800ddfa:	189b      	adds	r3, r3, r2
 800ddfc:	6882      	ldr	r2, [r0, #8]
 800ddfe:	4694      	mov	ip, r2
 800de00:	685a      	ldr	r2, [r3, #4]
 800de02:	459c      	cmp	ip, r3
 800de04:	d006      	beq.n	800de14 <_realloc_r+0x80>
 800de06:	2501      	movs	r5, #1
 800de08:	0011      	movs	r1, r2
 800de0a:	43a9      	bics	r1, r5
 800de0c:	1859      	adds	r1, r3, r1
 800de0e:	6849      	ldr	r1, [r1, #4]
 800de10:	4229      	tst	r1, r5
 800de12:	d144      	bne.n	800de9e <_realloc_r+0x10a>
 800de14:	2103      	movs	r1, #3
 800de16:	438a      	bics	r2, r1
 800de18:	9903      	ldr	r1, [sp, #12]
 800de1a:	188e      	adds	r6, r1, r2
 800de1c:	9900      	ldr	r1, [sp, #0]
 800de1e:	459c      	cmp	ip, r3
 800de20:	d117      	bne.n	800de52 <_realloc_r+0xbe>
 800de22:	3110      	adds	r1, #16
 800de24:	42b1      	cmp	r1, r6
 800de26:	dc3c      	bgt.n	800dea2 <_realloc_r+0x10e>
 800de28:	9a00      	ldr	r2, [sp, #0]
 800de2a:	2101      	movs	r1, #1
 800de2c:	4694      	mov	ip, r2
 800de2e:	1ab6      	subs	r6, r6, r2
 800de30:	0022      	movs	r2, r4
 800de32:	9b04      	ldr	r3, [sp, #16]
 800de34:	430e      	orrs	r6, r1
 800de36:	4463      	add	r3, ip
 800de38:	6083      	str	r3, [r0, #8]
 800de3a:	3a08      	subs	r2, #8
 800de3c:	605e      	str	r6, [r3, #4]
 800de3e:	6853      	ldr	r3, [r2, #4]
 800de40:	9801      	ldr	r0, [sp, #4]
 800de42:	400b      	ands	r3, r1
 800de44:	4661      	mov	r1, ip
 800de46:	430b      	orrs	r3, r1
 800de48:	6053      	str	r3, [r2, #4]
 800de4a:	f7fa f843 	bl	8007ed4 <__malloc_unlock>
 800de4e:	0027      	movs	r7, r4
 800de50:	e7aa      	b.n	800dda8 <_realloc_r+0x14>
 800de52:	42b1      	cmp	r1, r6
 800de54:	dc25      	bgt.n	800dea2 <_realloc_r+0x10e>
 800de56:	68da      	ldr	r2, [r3, #12]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	60da      	str	r2, [r3, #12]
 800de5c:	6093      	str	r3, [r2, #8]
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	9a02      	ldr	r2, [sp, #8]
 800de62:	1af4      	subs	r4, r6, r3
 800de64:	9b02      	ldr	r3, [sp, #8]
 800de66:	1992      	adds	r2, r2, r6
 800de68:	6858      	ldr	r0, [r3, #4]
 800de6a:	2301      	movs	r3, #1
 800de6c:	4018      	ands	r0, r3
 800de6e:	2c0f      	cmp	r4, #15
 800de70:	d800      	bhi.n	800de74 <_realloc_r+0xe0>
 800de72:	e12c      	b.n	800e0ce <_realloc_r+0x33a>
 800de74:	9d00      	ldr	r5, [sp, #0]
 800de76:	9902      	ldr	r1, [sp, #8]
 800de78:	4328      	orrs	r0, r5
 800de7a:	1949      	adds	r1, r1, r5
 800de7c:	9d02      	ldr	r5, [sp, #8]
 800de7e:	431c      	orrs	r4, r3
 800de80:	6068      	str	r0, [r5, #4]
 800de82:	604c      	str	r4, [r1, #4]
 800de84:	6850      	ldr	r0, [r2, #4]
 800de86:	3108      	adds	r1, #8
 800de88:	4303      	orrs	r3, r0
 800de8a:	6053      	str	r3, [r2, #4]
 800de8c:	9801      	ldr	r0, [sp, #4]
 800de8e:	f7fb f9a3 	bl	80091d8 <_free_r>
 800de92:	9801      	ldr	r0, [sp, #4]
 800de94:	f7fa f81e 	bl	8007ed4 <__malloc_unlock>
 800de98:	9f02      	ldr	r7, [sp, #8]
 800de9a:	3708      	adds	r7, #8
 800de9c:	e784      	b.n	800dda8 <_realloc_r+0x14>
 800de9e:	2200      	movs	r2, #0
 800dea0:	0013      	movs	r3, r2
 800dea2:	07ff      	lsls	r7, r7, #31
 800dea4:	d500      	bpl.n	800dea8 <_realloc_r+0x114>
 800dea6:	e0c6      	b.n	800e036 <_realloc_r+0x2a2>
 800dea8:	0021      	movs	r1, r4
 800deaa:	2003      	movs	r0, #3
 800deac:	3908      	subs	r1, #8
 800deae:	680d      	ldr	r5, [r1, #0]
 800deb0:	9904      	ldr	r1, [sp, #16]
 800deb2:	1b4d      	subs	r5, r1, r5
 800deb4:	6869      	ldr	r1, [r5, #4]
 800deb6:	4381      	bics	r1, r0
 800deb8:	9803      	ldr	r0, [sp, #12]
 800deba:	180f      	adds	r7, r1, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d100      	bne.n	800dec2 <_realloc_r+0x12e>
 800dec0:	e084      	b.n	800dfcc <_realloc_r+0x238>
 800dec2:	19d6      	adds	r6, r2, r7
 800dec4:	459c      	cmp	ip, r3
 800dec6:	d148      	bne.n	800df5a <_realloc_r+0x1c6>
 800dec8:	9b00      	ldr	r3, [sp, #0]
 800deca:	3310      	adds	r3, #16
 800decc:	42b3      	cmp	r3, r6
 800dece:	dc7d      	bgt.n	800dfcc <_realloc_r+0x238>
 800ded0:	68aa      	ldr	r2, [r5, #8]
 800ded2:	68eb      	ldr	r3, [r5, #12]
 800ded4:	002f      	movs	r7, r5
 800ded6:	60d3      	str	r3, [r2, #12]
 800ded8:	609a      	str	r2, [r3, #8]
 800deda:	0002      	movs	r2, r0
 800dedc:	3a04      	subs	r2, #4
 800dede:	3708      	adds	r7, #8
 800dee0:	2a24      	cmp	r2, #36	; 0x24
 800dee2:	d835      	bhi.n	800df50 <_realloc_r+0x1bc>
 800dee4:	003b      	movs	r3, r7
 800dee6:	2a13      	cmp	r2, #19
 800dee8:	d908      	bls.n	800defc <_realloc_r+0x168>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	60ab      	str	r3, [r5, #8]
 800deee:	6863      	ldr	r3, [r4, #4]
 800def0:	60eb      	str	r3, [r5, #12]
 800def2:	2a1b      	cmp	r2, #27
 800def4:	d81a      	bhi.n	800df2c <_realloc_r+0x198>
 800def6:	002b      	movs	r3, r5
 800def8:	3408      	adds	r4, #8
 800defa:	3310      	adds	r3, #16
 800defc:	6822      	ldr	r2, [r4, #0]
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	6862      	ldr	r2, [r4, #4]
 800df02:	605a      	str	r2, [r3, #4]
 800df04:	68a2      	ldr	r2, [r4, #8]
 800df06:	609a      	str	r2, [r3, #8]
 800df08:	9b00      	ldr	r3, [sp, #0]
 800df0a:	4a74      	ldr	r2, [pc, #464]	; (800e0dc <_realloc_r+0x348>)
 800df0c:	18eb      	adds	r3, r5, r3
 800df0e:	6093      	str	r3, [r2, #8]
 800df10:	9a00      	ldr	r2, [sp, #0]
 800df12:	1ab6      	subs	r6, r6, r2
 800df14:	2201      	movs	r2, #1
 800df16:	4316      	orrs	r6, r2
 800df18:	605e      	str	r6, [r3, #4]
 800df1a:	686b      	ldr	r3, [r5, #4]
 800df1c:	4013      	ands	r3, r2
 800df1e:	9a00      	ldr	r2, [sp, #0]
 800df20:	4313      	orrs	r3, r2
 800df22:	606b      	str	r3, [r5, #4]
 800df24:	9801      	ldr	r0, [sp, #4]
 800df26:	f7f9 ffd5 	bl	8007ed4 <__malloc_unlock>
 800df2a:	e73d      	b.n	800dda8 <_realloc_r+0x14>
 800df2c:	68a3      	ldr	r3, [r4, #8]
 800df2e:	612b      	str	r3, [r5, #16]
 800df30:	68e3      	ldr	r3, [r4, #12]
 800df32:	616b      	str	r3, [r5, #20]
 800df34:	2a24      	cmp	r2, #36	; 0x24
 800df36:	d003      	beq.n	800df40 <_realloc_r+0x1ac>
 800df38:	002b      	movs	r3, r5
 800df3a:	3410      	adds	r4, #16
 800df3c:	3318      	adds	r3, #24
 800df3e:	e7dd      	b.n	800defc <_realloc_r+0x168>
 800df40:	6923      	ldr	r3, [r4, #16]
 800df42:	61ab      	str	r3, [r5, #24]
 800df44:	002b      	movs	r3, r5
 800df46:	6962      	ldr	r2, [r4, #20]
 800df48:	3320      	adds	r3, #32
 800df4a:	61ea      	str	r2, [r5, #28]
 800df4c:	3418      	adds	r4, #24
 800df4e:	e7d5      	b.n	800defc <_realloc_r+0x168>
 800df50:	0021      	movs	r1, r4
 800df52:	0038      	movs	r0, r7
 800df54:	f001 fbb5 	bl	800f6c2 <memmove>
 800df58:	e7d6      	b.n	800df08 <_realloc_r+0x174>
 800df5a:	9a00      	ldr	r2, [sp, #0]
 800df5c:	42b2      	cmp	r2, r6
 800df5e:	dc35      	bgt.n	800dfcc <_realloc_r+0x238>
 800df60:	0028      	movs	r0, r5
 800df62:	68da      	ldr	r2, [r3, #12]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	3008      	adds	r0, #8
 800df68:	60da      	str	r2, [r3, #12]
 800df6a:	6093      	str	r3, [r2, #8]
 800df6c:	68aa      	ldr	r2, [r5, #8]
 800df6e:	68eb      	ldr	r3, [r5, #12]
 800df70:	60d3      	str	r3, [r2, #12]
 800df72:	609a      	str	r2, [r3, #8]
 800df74:	9a03      	ldr	r2, [sp, #12]
 800df76:	3a04      	subs	r2, #4
 800df78:	2a24      	cmp	r2, #36	; 0x24
 800df7a:	d823      	bhi.n	800dfc4 <_realloc_r+0x230>
 800df7c:	2a13      	cmp	r2, #19
 800df7e:	d907      	bls.n	800df90 <_realloc_r+0x1fc>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	60ab      	str	r3, [r5, #8]
 800df84:	6863      	ldr	r3, [r4, #4]
 800df86:	60eb      	str	r3, [r5, #12]
 800df88:	2a1b      	cmp	r2, #27
 800df8a:	d809      	bhi.n	800dfa0 <_realloc_r+0x20c>
 800df8c:	3408      	adds	r4, #8
 800df8e:	3008      	adds	r0, #8
 800df90:	6823      	ldr	r3, [r4, #0]
 800df92:	6003      	str	r3, [r0, #0]
 800df94:	6863      	ldr	r3, [r4, #4]
 800df96:	6043      	str	r3, [r0, #4]
 800df98:	68a3      	ldr	r3, [r4, #8]
 800df9a:	6083      	str	r3, [r0, #8]
 800df9c:	9502      	str	r5, [sp, #8]
 800df9e:	e75e      	b.n	800de5e <_realloc_r+0xca>
 800dfa0:	68a3      	ldr	r3, [r4, #8]
 800dfa2:	612b      	str	r3, [r5, #16]
 800dfa4:	68e3      	ldr	r3, [r4, #12]
 800dfa6:	616b      	str	r3, [r5, #20]
 800dfa8:	2a24      	cmp	r2, #36	; 0x24
 800dfaa:	d003      	beq.n	800dfb4 <_realloc_r+0x220>
 800dfac:	0028      	movs	r0, r5
 800dfae:	3410      	adds	r4, #16
 800dfb0:	3018      	adds	r0, #24
 800dfb2:	e7ed      	b.n	800df90 <_realloc_r+0x1fc>
 800dfb4:	0028      	movs	r0, r5
 800dfb6:	6923      	ldr	r3, [r4, #16]
 800dfb8:	3020      	adds	r0, #32
 800dfba:	61ab      	str	r3, [r5, #24]
 800dfbc:	6963      	ldr	r3, [r4, #20]
 800dfbe:	3418      	adds	r4, #24
 800dfc0:	61eb      	str	r3, [r5, #28]
 800dfc2:	e7e5      	b.n	800df90 <_realloc_r+0x1fc>
 800dfc4:	0021      	movs	r1, r4
 800dfc6:	f001 fb7c 	bl	800f6c2 <memmove>
 800dfca:	e7e7      	b.n	800df9c <_realloc_r+0x208>
 800dfcc:	9b00      	ldr	r3, [sp, #0]
 800dfce:	42bb      	cmp	r3, r7
 800dfd0:	dc31      	bgt.n	800e036 <_realloc_r+0x2a2>
 800dfd2:	0028      	movs	r0, r5
 800dfd4:	68aa      	ldr	r2, [r5, #8]
 800dfd6:	68eb      	ldr	r3, [r5, #12]
 800dfd8:	3008      	adds	r0, #8
 800dfda:	60d3      	str	r3, [r2, #12]
 800dfdc:	609a      	str	r2, [r3, #8]
 800dfde:	9a03      	ldr	r2, [sp, #12]
 800dfe0:	3a04      	subs	r2, #4
 800dfe2:	2a24      	cmp	r2, #36	; 0x24
 800dfe4:	d823      	bhi.n	800e02e <_realloc_r+0x29a>
 800dfe6:	2a13      	cmp	r2, #19
 800dfe8:	d907      	bls.n	800dffa <_realloc_r+0x266>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	60ab      	str	r3, [r5, #8]
 800dfee:	6863      	ldr	r3, [r4, #4]
 800dff0:	60eb      	str	r3, [r5, #12]
 800dff2:	2a1b      	cmp	r2, #27
 800dff4:	d809      	bhi.n	800e00a <_realloc_r+0x276>
 800dff6:	3408      	adds	r4, #8
 800dff8:	3008      	adds	r0, #8
 800dffa:	6823      	ldr	r3, [r4, #0]
 800dffc:	6003      	str	r3, [r0, #0]
 800dffe:	6863      	ldr	r3, [r4, #4]
 800e000:	6043      	str	r3, [r0, #4]
 800e002:	68a3      	ldr	r3, [r4, #8]
 800e004:	6083      	str	r3, [r0, #8]
 800e006:	003e      	movs	r6, r7
 800e008:	e7c8      	b.n	800df9c <_realloc_r+0x208>
 800e00a:	68a3      	ldr	r3, [r4, #8]
 800e00c:	612b      	str	r3, [r5, #16]
 800e00e:	68e3      	ldr	r3, [r4, #12]
 800e010:	616b      	str	r3, [r5, #20]
 800e012:	2a24      	cmp	r2, #36	; 0x24
 800e014:	d003      	beq.n	800e01e <_realloc_r+0x28a>
 800e016:	0028      	movs	r0, r5
 800e018:	3410      	adds	r4, #16
 800e01a:	3018      	adds	r0, #24
 800e01c:	e7ed      	b.n	800dffa <_realloc_r+0x266>
 800e01e:	0028      	movs	r0, r5
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	3020      	adds	r0, #32
 800e024:	61ab      	str	r3, [r5, #24]
 800e026:	6963      	ldr	r3, [r4, #20]
 800e028:	3418      	adds	r4, #24
 800e02a:	61eb      	str	r3, [r5, #28]
 800e02c:	e7e5      	b.n	800dffa <_realloc_r+0x266>
 800e02e:	0021      	movs	r1, r4
 800e030:	f001 fb47 	bl	800f6c2 <memmove>
 800e034:	e7e7      	b.n	800e006 <_realloc_r+0x272>
 800e036:	9905      	ldr	r1, [sp, #20]
 800e038:	9801      	ldr	r0, [sp, #4]
 800e03a:	f7f9 fd2f 	bl	8007a9c <_malloc_r>
 800e03e:	1e07      	subs	r7, r0, #0
 800e040:	d100      	bne.n	800e044 <_realloc_r+0x2b0>
 800e042:	e76f      	b.n	800df24 <_realloc_r+0x190>
 800e044:	0023      	movs	r3, r4
 800e046:	2201      	movs	r2, #1
 800e048:	3b08      	subs	r3, #8
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	4393      	bics	r3, r2
 800e04e:	9a04      	ldr	r2, [sp, #16]
 800e050:	18d3      	adds	r3, r2, r3
 800e052:	0002      	movs	r2, r0
 800e054:	3a08      	subs	r2, #8
 800e056:	4293      	cmp	r3, r2
 800e058:	d105      	bne.n	800e066 <_realloc_r+0x2d2>
 800e05a:	685e      	ldr	r6, [r3, #4]
 800e05c:	2303      	movs	r3, #3
 800e05e:	439e      	bics	r6, r3
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	18f6      	adds	r6, r6, r3
 800e064:	e6fb      	b.n	800de5e <_realloc_r+0xca>
 800e066:	9a03      	ldr	r2, [sp, #12]
 800e068:	3a04      	subs	r2, #4
 800e06a:	2a24      	cmp	r2, #36	; 0x24
 800e06c:	d829      	bhi.n	800e0c2 <_realloc_r+0x32e>
 800e06e:	0003      	movs	r3, r0
 800e070:	0021      	movs	r1, r4
 800e072:	2a13      	cmp	r2, #19
 800e074:	d908      	bls.n	800e088 <_realloc_r+0x2f4>
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	6003      	str	r3, [r0, #0]
 800e07a:	6863      	ldr	r3, [r4, #4]
 800e07c:	6043      	str	r3, [r0, #4]
 800e07e:	2a1b      	cmp	r2, #27
 800e080:	d80d      	bhi.n	800e09e <_realloc_r+0x30a>
 800e082:	0003      	movs	r3, r0
 800e084:	3108      	adds	r1, #8
 800e086:	3308      	adds	r3, #8
 800e088:	680a      	ldr	r2, [r1, #0]
 800e08a:	601a      	str	r2, [r3, #0]
 800e08c:	684a      	ldr	r2, [r1, #4]
 800e08e:	605a      	str	r2, [r3, #4]
 800e090:	688a      	ldr	r2, [r1, #8]
 800e092:	609a      	str	r2, [r3, #8]
 800e094:	0021      	movs	r1, r4
 800e096:	9801      	ldr	r0, [sp, #4]
 800e098:	f7fb f89e 	bl	80091d8 <_free_r>
 800e09c:	e742      	b.n	800df24 <_realloc_r+0x190>
 800e09e:	68a3      	ldr	r3, [r4, #8]
 800e0a0:	6083      	str	r3, [r0, #8]
 800e0a2:	68e3      	ldr	r3, [r4, #12]
 800e0a4:	60c3      	str	r3, [r0, #12]
 800e0a6:	2a24      	cmp	r2, #36	; 0x24
 800e0a8:	d003      	beq.n	800e0b2 <_realloc_r+0x31e>
 800e0aa:	0003      	movs	r3, r0
 800e0ac:	3110      	adds	r1, #16
 800e0ae:	3310      	adds	r3, #16
 800e0b0:	e7ea      	b.n	800e088 <_realloc_r+0x2f4>
 800e0b2:	6923      	ldr	r3, [r4, #16]
 800e0b4:	3118      	adds	r1, #24
 800e0b6:	6103      	str	r3, [r0, #16]
 800e0b8:	0003      	movs	r3, r0
 800e0ba:	6962      	ldr	r2, [r4, #20]
 800e0bc:	3318      	adds	r3, #24
 800e0be:	6142      	str	r2, [r0, #20]
 800e0c0:	e7e2      	b.n	800e088 <_realloc_r+0x2f4>
 800e0c2:	0021      	movs	r1, r4
 800e0c4:	f001 fafd 	bl	800f6c2 <memmove>
 800e0c8:	e7e4      	b.n	800e094 <_realloc_r+0x300>
 800e0ca:	9e03      	ldr	r6, [sp, #12]
 800e0cc:	e6c7      	b.n	800de5e <_realloc_r+0xca>
 800e0ce:	9902      	ldr	r1, [sp, #8]
 800e0d0:	4306      	orrs	r6, r0
 800e0d2:	604e      	str	r6, [r1, #4]
 800e0d4:	6851      	ldr	r1, [r2, #4]
 800e0d6:	430b      	orrs	r3, r1
 800e0d8:	6053      	str	r3, [r2, #4]
 800e0da:	e6da      	b.n	800de92 <_realloc_r+0xfe>
 800e0dc:	20000010 	.word	0x20000010

0800e0e0 <_strtoul_l.constprop.0>:
 800e0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0e2:	b087      	sub	sp, #28
 800e0e4:	9202      	str	r2, [sp, #8]
 800e0e6:	4a3e      	ldr	r2, [pc, #248]	; (800e1e0 <_strtoul_l.constprop.0+0x100>)
 800e0e8:	001e      	movs	r6, r3
 800e0ea:	9101      	str	r1, [sp, #4]
 800e0ec:	000b      	movs	r3, r1
 800e0ee:	4694      	mov	ip, r2
 800e0f0:	2108      	movs	r1, #8
 800e0f2:	9005      	str	r0, [sp, #20]
 800e0f4:	001a      	movs	r2, r3
 800e0f6:	4660      	mov	r0, ip
 800e0f8:	7814      	ldrb	r4, [r2, #0]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	5d00      	ldrb	r0, [r0, r4]
 800e0fe:	001d      	movs	r5, r3
 800e100:	0007      	movs	r7, r0
 800e102:	400f      	ands	r7, r1
 800e104:	4208      	tst	r0, r1
 800e106:	d1f5      	bne.n	800e0f4 <_strtoul_l.constprop.0+0x14>
 800e108:	2c2d      	cmp	r4, #45	; 0x2d
 800e10a:	d13d      	bne.n	800e188 <_strtoul_l.constprop.0+0xa8>
 800e10c:	2701      	movs	r7, #1
 800e10e:	781c      	ldrb	r4, [r3, #0]
 800e110:	1c95      	adds	r5, r2, #2
 800e112:	2e00      	cmp	r6, #0
 800e114:	d05f      	beq.n	800e1d6 <_strtoul_l.constprop.0+0xf6>
 800e116:	2e10      	cmp	r6, #16
 800e118:	d109      	bne.n	800e12e <_strtoul_l.constprop.0+0x4e>
 800e11a:	2c30      	cmp	r4, #48	; 0x30
 800e11c:	d107      	bne.n	800e12e <_strtoul_l.constprop.0+0x4e>
 800e11e:	2220      	movs	r2, #32
 800e120:	782b      	ldrb	r3, [r5, #0]
 800e122:	4393      	bics	r3, r2
 800e124:	2b58      	cmp	r3, #88	; 0x58
 800e126:	d151      	bne.n	800e1cc <_strtoul_l.constprop.0+0xec>
 800e128:	2610      	movs	r6, #16
 800e12a:	786c      	ldrb	r4, [r5, #1]
 800e12c:	3502      	adds	r5, #2
 800e12e:	2001      	movs	r0, #1
 800e130:	0031      	movs	r1, r6
 800e132:	4240      	negs	r0, r0
 800e134:	f7f2 f802 	bl	800013c <__udivsi3>
 800e138:	9003      	str	r0, [sp, #12]
 800e13a:	2001      	movs	r0, #1
 800e13c:	0031      	movs	r1, r6
 800e13e:	4240      	negs	r0, r0
 800e140:	f7f2 f882 	bl	8000248 <__aeabi_uidivmod>
 800e144:	2300      	movs	r3, #0
 800e146:	2201      	movs	r2, #1
 800e148:	9104      	str	r1, [sp, #16]
 800e14a:	2101      	movs	r1, #1
 800e14c:	0018      	movs	r0, r3
 800e14e:	4694      	mov	ip, r2
 800e150:	4249      	negs	r1, r1
 800e152:	0022      	movs	r2, r4
 800e154:	3a30      	subs	r2, #48	; 0x30
 800e156:	2a09      	cmp	r2, #9
 800e158:	d903      	bls.n	800e162 <_strtoul_l.constprop.0+0x82>
 800e15a:	3a11      	subs	r2, #17
 800e15c:	2a19      	cmp	r2, #25
 800e15e:	d818      	bhi.n	800e192 <_strtoul_l.constprop.0+0xb2>
 800e160:	320a      	adds	r2, #10
 800e162:	4296      	cmp	r6, r2
 800e164:	dd19      	ble.n	800e19a <_strtoul_l.constprop.0+0xba>
 800e166:	1c5c      	adds	r4, r3, #1
 800e168:	d00b      	beq.n	800e182 <_strtoul_l.constprop.0+0xa2>
 800e16a:	9c03      	ldr	r4, [sp, #12]
 800e16c:	000b      	movs	r3, r1
 800e16e:	4284      	cmp	r4, r0
 800e170:	d307      	bcc.n	800e182 <_strtoul_l.constprop.0+0xa2>
 800e172:	d103      	bne.n	800e17c <_strtoul_l.constprop.0+0x9c>
 800e174:	9c04      	ldr	r4, [sp, #16]
 800e176:	000b      	movs	r3, r1
 800e178:	4294      	cmp	r4, r2
 800e17a:	db02      	blt.n	800e182 <_strtoul_l.constprop.0+0xa2>
 800e17c:	4663      	mov	r3, ip
 800e17e:	4370      	muls	r0, r6
 800e180:	1810      	adds	r0, r2, r0
 800e182:	782c      	ldrb	r4, [r5, #0]
 800e184:	3501      	adds	r5, #1
 800e186:	e7e4      	b.n	800e152 <_strtoul_l.constprop.0+0x72>
 800e188:	2c2b      	cmp	r4, #43	; 0x2b
 800e18a:	d1c2      	bne.n	800e112 <_strtoul_l.constprop.0+0x32>
 800e18c:	781c      	ldrb	r4, [r3, #0]
 800e18e:	1c95      	adds	r5, r2, #2
 800e190:	e7bf      	b.n	800e112 <_strtoul_l.constprop.0+0x32>
 800e192:	0022      	movs	r2, r4
 800e194:	3a61      	subs	r2, #97	; 0x61
 800e196:	2a19      	cmp	r2, #25
 800e198:	d9e2      	bls.n	800e160 <_strtoul_l.constprop.0+0x80>
 800e19a:	1c5a      	adds	r2, r3, #1
 800e19c:	d108      	bne.n	800e1b0 <_strtoul_l.constprop.0+0xd0>
 800e19e:	2222      	movs	r2, #34	; 0x22
 800e1a0:	9905      	ldr	r1, [sp, #20]
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	600a      	str	r2, [r1, #0]
 800e1a6:	9a02      	ldr	r2, [sp, #8]
 800e1a8:	2a00      	cmp	r2, #0
 800e1aa:	d109      	bne.n	800e1c0 <_strtoul_l.constprop.0+0xe0>
 800e1ac:	b007      	add	sp, #28
 800e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b0:	2f00      	cmp	r7, #0
 800e1b2:	d000      	beq.n	800e1b6 <_strtoul_l.constprop.0+0xd6>
 800e1b4:	4240      	negs	r0, r0
 800e1b6:	9a02      	ldr	r2, [sp, #8]
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	d0f7      	beq.n	800e1ac <_strtoul_l.constprop.0+0xcc>
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d001      	beq.n	800e1c4 <_strtoul_l.constprop.0+0xe4>
 800e1c0:	1e6b      	subs	r3, r5, #1
 800e1c2:	9301      	str	r3, [sp, #4]
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	9a01      	ldr	r2, [sp, #4]
 800e1c8:	601a      	str	r2, [r3, #0]
 800e1ca:	e7ef      	b.n	800e1ac <_strtoul_l.constprop.0+0xcc>
 800e1cc:	2430      	movs	r4, #48	; 0x30
 800e1ce:	2e00      	cmp	r6, #0
 800e1d0:	d1ad      	bne.n	800e12e <_strtoul_l.constprop.0+0x4e>
 800e1d2:	3608      	adds	r6, #8
 800e1d4:	e7ab      	b.n	800e12e <_strtoul_l.constprop.0+0x4e>
 800e1d6:	2c30      	cmp	r4, #48	; 0x30
 800e1d8:	d0a1      	beq.n	800e11e <_strtoul_l.constprop.0+0x3e>
 800e1da:	260a      	movs	r6, #10
 800e1dc:	e7a7      	b.n	800e12e <_strtoul_l.constprop.0+0x4e>
 800e1de:	46c0      	nop			; (mov r8, r8)
 800e1e0:	0800fce1 	.word	0x0800fce1

0800e1e4 <_strtoul_r>:
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	f7ff ff7b 	bl	800e0e0 <_strtoul_l.constprop.0>
 800e1ea:	bd10      	pop	{r4, pc}

0800e1ec <_strtoll_l.constprop.0>:
 800e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ee:	b08d      	sub	sp, #52	; 0x34
 800e1f0:	9203      	str	r2, [sp, #12]
 800e1f2:	4a53      	ldr	r2, [pc, #332]	; (800e340 <_strtoll_l.constprop.0+0x154>)
 800e1f4:	001e      	movs	r6, r3
 800e1f6:	9102      	str	r1, [sp, #8]
 800e1f8:	000b      	movs	r3, r1
 800e1fa:	4694      	mov	ip, r2
 800e1fc:	2108      	movs	r1, #8
 800e1fe:	900a      	str	r0, [sp, #40]	; 0x28
 800e200:	001a      	movs	r2, r3
 800e202:	4660      	mov	r0, ip
 800e204:	7814      	ldrb	r4, [r2, #0]
 800e206:	3301      	adds	r3, #1
 800e208:	5d00      	ldrb	r0, [r0, r4]
 800e20a:	001d      	movs	r5, r3
 800e20c:	0007      	movs	r7, r0
 800e20e:	400f      	ands	r7, r1
 800e210:	4208      	tst	r0, r1
 800e212:	d1f5      	bne.n	800e200 <_strtoll_l.constprop.0+0x14>
 800e214:	2c2d      	cmp	r4, #45	; 0x2d
 800e216:	d153      	bne.n	800e2c0 <_strtoll_l.constprop.0+0xd4>
 800e218:	781c      	ldrb	r4, [r3, #0]
 800e21a:	2301      	movs	r3, #1
 800e21c:	1c95      	adds	r5, r2, #2
 800e21e:	9301      	str	r3, [sp, #4]
 800e220:	2e00      	cmp	r6, #0
 800e222:	d100      	bne.n	800e226 <_strtoll_l.constprop.0+0x3a>
 800e224:	e086      	b.n	800e334 <_strtoll_l.constprop.0+0x148>
 800e226:	2e10      	cmp	r6, #16
 800e228:	d10a      	bne.n	800e240 <_strtoll_l.constprop.0+0x54>
 800e22a:	2c30      	cmp	r4, #48	; 0x30
 800e22c:	d108      	bne.n	800e240 <_strtoll_l.constprop.0+0x54>
 800e22e:	2220      	movs	r2, #32
 800e230:	782b      	ldrb	r3, [r5, #0]
 800e232:	4393      	bics	r3, r2
 800e234:	2b58      	cmp	r3, #88	; 0x58
 800e236:	d000      	beq.n	800e23a <_strtoll_l.constprop.0+0x4e>
 800e238:	e076      	b.n	800e328 <_strtoll_l.constprop.0+0x13c>
 800e23a:	2610      	movs	r6, #16
 800e23c:	786c      	ldrb	r4, [r5, #1]
 800e23e:	3502      	adds	r5, #2
 800e240:	2001      	movs	r0, #1
 800e242:	2300      	movs	r3, #0
 800e244:	493f      	ldr	r1, [pc, #252]	; (800e344 <_strtoll_l.constprop.0+0x158>)
 800e246:	9a01      	ldr	r2, [sp, #4]
 800e248:	4240      	negs	r0, r0
 800e24a:	1812      	adds	r2, r2, r0
 800e24c:	414b      	adcs	r3, r1
 800e24e:	9204      	str	r2, [sp, #16]
 800e250:	9305      	str	r3, [sp, #20]
 800e252:	9804      	ldr	r0, [sp, #16]
 800e254:	9905      	ldr	r1, [sp, #20]
 800e256:	17f3      	asrs	r3, r6, #31
 800e258:	0032      	movs	r2, r6
 800e25a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e25c:	f7f2 f922 	bl	80004a4 <__aeabi_uldivmod>
 800e260:	2300      	movs	r3, #0
 800e262:	000f      	movs	r7, r1
 800e264:	9008      	str	r0, [sp, #32]
 800e266:	2100      	movs	r1, #0
 800e268:	2000      	movs	r0, #0
 800e26a:	9209      	str	r2, [sp, #36]	; 0x24
 800e26c:	0022      	movs	r2, r4
 800e26e:	3a30      	subs	r2, #48	; 0x30
 800e270:	2a09      	cmp	r2, #9
 800e272:	d82b      	bhi.n	800e2cc <_strtoll_l.constprop.0+0xe0>
 800e274:	0014      	movs	r4, r2
 800e276:	42a6      	cmp	r6, r4
 800e278:	dd37      	ble.n	800e2ea <_strtoll_l.constprop.0+0xfe>
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	d01d      	beq.n	800e2ba <_strtoll_l.constprop.0+0xce>
 800e27e:	42b9      	cmp	r1, r7
 800e280:	d830      	bhi.n	800e2e4 <_strtoll_l.constprop.0+0xf8>
 800e282:	d102      	bne.n	800e28a <_strtoll_l.constprop.0+0x9e>
 800e284:	9b08      	ldr	r3, [sp, #32]
 800e286:	4298      	cmp	r0, r3
 800e288:	d82c      	bhi.n	800e2e4 <_strtoll_l.constprop.0+0xf8>
 800e28a:	9b08      	ldr	r3, [sp, #32]
 800e28c:	4283      	cmp	r3, r0
 800e28e:	d106      	bne.n	800e29e <_strtoll_l.constprop.0+0xb2>
 800e290:	428f      	cmp	r7, r1
 800e292:	d104      	bne.n	800e29e <_strtoll_l.constprop.0+0xb2>
 800e294:	2301      	movs	r3, #1
 800e296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e298:	425b      	negs	r3, r3
 800e29a:	42a2      	cmp	r2, r4
 800e29c:	db0d      	blt.n	800e2ba <_strtoll_l.constprop.0+0xce>
 800e29e:	000b      	movs	r3, r1
 800e2a0:	0002      	movs	r2, r0
 800e2a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2a4:	0030      	movs	r0, r6
 800e2a6:	f7f2 f91d 	bl	80004e4 <__aeabi_lmul>
 800e2aa:	17e3      	asrs	r3, r4, #31
 800e2ac:	9406      	str	r4, [sp, #24]
 800e2ae:	9307      	str	r3, [sp, #28]
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	9c07      	ldr	r4, [sp, #28]
 800e2b4:	18c0      	adds	r0, r0, r3
 800e2b6:	4161      	adcs	r1, r4
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	782c      	ldrb	r4, [r5, #0]
 800e2bc:	3501      	adds	r5, #1
 800e2be:	e7d5      	b.n	800e26c <_strtoll_l.constprop.0+0x80>
 800e2c0:	9701      	str	r7, [sp, #4]
 800e2c2:	2c2b      	cmp	r4, #43	; 0x2b
 800e2c4:	d1ac      	bne.n	800e220 <_strtoll_l.constprop.0+0x34>
 800e2c6:	781c      	ldrb	r4, [r3, #0]
 800e2c8:	1c95      	adds	r5, r2, #2
 800e2ca:	e7a9      	b.n	800e220 <_strtoll_l.constprop.0+0x34>
 800e2cc:	0022      	movs	r2, r4
 800e2ce:	3a41      	subs	r2, #65	; 0x41
 800e2d0:	2a19      	cmp	r2, #25
 800e2d2:	d801      	bhi.n	800e2d8 <_strtoll_l.constprop.0+0xec>
 800e2d4:	3c37      	subs	r4, #55	; 0x37
 800e2d6:	e7ce      	b.n	800e276 <_strtoll_l.constprop.0+0x8a>
 800e2d8:	0022      	movs	r2, r4
 800e2da:	3a61      	subs	r2, #97	; 0x61
 800e2dc:	2a19      	cmp	r2, #25
 800e2de:	d804      	bhi.n	800e2ea <_strtoll_l.constprop.0+0xfe>
 800e2e0:	3c57      	subs	r4, #87	; 0x57
 800e2e2:	e7c8      	b.n	800e276 <_strtoll_l.constprop.0+0x8a>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	425b      	negs	r3, r3
 800e2e8:	e7e7      	b.n	800e2ba <_strtoll_l.constprop.0+0xce>
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	d109      	bne.n	800e302 <_strtoll_l.constprop.0+0x116>
 800e2ee:	9804      	ldr	r0, [sp, #16]
 800e2f0:	9905      	ldr	r1, [sp, #20]
 800e2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2f4:	3323      	adds	r3, #35	; 0x23
 800e2f6:	6013      	str	r3, [r2, #0]
 800e2f8:	9b03      	ldr	r3, [sp, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d10e      	bne.n	800e31c <_strtoll_l.constprop.0+0x130>
 800e2fe:	b00d      	add	sp, #52	; 0x34
 800e300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e302:	9a01      	ldr	r2, [sp, #4]
 800e304:	2a00      	cmp	r2, #0
 800e306:	d004      	beq.n	800e312 <_strtoll_l.constprop.0+0x126>
 800e308:	0006      	movs	r6, r0
 800e30a:	000f      	movs	r7, r1
 800e30c:	2100      	movs	r1, #0
 800e30e:	4270      	negs	r0, r6
 800e310:	41b9      	sbcs	r1, r7
 800e312:	9a03      	ldr	r2, [sp, #12]
 800e314:	2a00      	cmp	r2, #0
 800e316:	d0f2      	beq.n	800e2fe <_strtoll_l.constprop.0+0x112>
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d001      	beq.n	800e320 <_strtoll_l.constprop.0+0x134>
 800e31c:	1e6b      	subs	r3, r5, #1
 800e31e:	9302      	str	r3, [sp, #8]
 800e320:	9b03      	ldr	r3, [sp, #12]
 800e322:	9a02      	ldr	r2, [sp, #8]
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e7ea      	b.n	800e2fe <_strtoll_l.constprop.0+0x112>
 800e328:	2430      	movs	r4, #48	; 0x30
 800e32a:	2e00      	cmp	r6, #0
 800e32c:	d000      	beq.n	800e330 <_strtoll_l.constprop.0+0x144>
 800e32e:	e787      	b.n	800e240 <_strtoll_l.constprop.0+0x54>
 800e330:	3608      	adds	r6, #8
 800e332:	e785      	b.n	800e240 <_strtoll_l.constprop.0+0x54>
 800e334:	2c30      	cmp	r4, #48	; 0x30
 800e336:	d100      	bne.n	800e33a <_strtoll_l.constprop.0+0x14e>
 800e338:	e779      	b.n	800e22e <_strtoll_l.constprop.0+0x42>
 800e33a:	260a      	movs	r6, #10
 800e33c:	e780      	b.n	800e240 <_strtoll_l.constprop.0+0x54>
 800e33e:	46c0      	nop			; (mov r8, r8)
 800e340:	0800fce1 	.word	0x0800fce1
 800e344:	7fffffff 	.word	0x7fffffff

0800e348 <_strtoll_r>:
 800e348:	b510      	push	{r4, lr}
 800e34a:	f7ff ff4f 	bl	800e1ec <_strtoll_l.constprop.0>
 800e34e:	bd10      	pop	{r4, pc}

0800e350 <_strtoull_l.constprop.0>:
 800e350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e352:	b08b      	sub	sp, #44	; 0x2c
 800e354:	9202      	str	r2, [sp, #8]
 800e356:	4a54      	ldr	r2, [pc, #336]	; (800e4a8 <_strtoull_l.constprop.0+0x158>)
 800e358:	001e      	movs	r6, r3
 800e35a:	9101      	str	r1, [sp, #4]
 800e35c:	000b      	movs	r3, r1
 800e35e:	4694      	mov	ip, r2
 800e360:	2108      	movs	r1, #8
 800e362:	9009      	str	r0, [sp, #36]	; 0x24
 800e364:	001a      	movs	r2, r3
 800e366:	4660      	mov	r0, ip
 800e368:	7814      	ldrb	r4, [r2, #0]
 800e36a:	3301      	adds	r3, #1
 800e36c:	5d00      	ldrb	r0, [r0, r4]
 800e36e:	001d      	movs	r5, r3
 800e370:	0007      	movs	r7, r0
 800e372:	400f      	ands	r7, r1
 800e374:	4208      	tst	r0, r1
 800e376:	d1f5      	bne.n	800e364 <_strtoull_l.constprop.0+0x14>
 800e378:	2c2d      	cmp	r4, #45	; 0x2d
 800e37a:	d154      	bne.n	800e426 <_strtoull_l.constprop.0+0xd6>
 800e37c:	781c      	ldrb	r4, [r3, #0]
 800e37e:	2301      	movs	r3, #1
 800e380:	1c95      	adds	r5, r2, #2
 800e382:	9306      	str	r3, [sp, #24]
 800e384:	2e00      	cmp	r6, #0
 800e386:	d100      	bne.n	800e38a <_strtoull_l.constprop.0+0x3a>
 800e388:	e088      	b.n	800e49c <_strtoull_l.constprop.0+0x14c>
 800e38a:	2e10      	cmp	r6, #16
 800e38c:	d10a      	bne.n	800e3a4 <_strtoull_l.constprop.0+0x54>
 800e38e:	2c30      	cmp	r4, #48	; 0x30
 800e390:	d108      	bne.n	800e3a4 <_strtoull_l.constprop.0+0x54>
 800e392:	2220      	movs	r2, #32
 800e394:	782b      	ldrb	r3, [r5, #0]
 800e396:	4393      	bics	r3, r2
 800e398:	2b58      	cmp	r3, #88	; 0x58
 800e39a:	d000      	beq.n	800e39e <_strtoull_l.constprop.0+0x4e>
 800e39c:	e078      	b.n	800e490 <_strtoull_l.constprop.0+0x140>
 800e39e:	2610      	movs	r6, #16
 800e3a0:	786c      	ldrb	r4, [r5, #1]
 800e3a2:	3502      	adds	r5, #2
 800e3a4:	17f7      	asrs	r7, r6, #31
 800e3a6:	0032      	movs	r2, r6
 800e3a8:	003b      	movs	r3, r7
 800e3aa:	2001      	movs	r0, #1
 800e3ac:	4240      	negs	r0, r0
 800e3ae:	17c1      	asrs	r1, r0, #31
 800e3b0:	f7f2 f878 	bl	80004a4 <__aeabi_uldivmod>
 800e3b4:	0032      	movs	r2, r6
 800e3b6:	9007      	str	r0, [sp, #28]
 800e3b8:	9103      	str	r1, [sp, #12]
 800e3ba:	003b      	movs	r3, r7
 800e3bc:	2001      	movs	r0, #1
 800e3be:	4240      	negs	r0, r0
 800e3c0:	17c1      	asrs	r1, r0, #31
 800e3c2:	f7f2 f86f 	bl	80004a4 <__aeabi_uldivmod>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	9208      	str	r2, [sp, #32]
 800e3ce:	0022      	movs	r2, r4
 800e3d0:	3a30      	subs	r2, #48	; 0x30
 800e3d2:	2a09      	cmp	r2, #9
 800e3d4:	d82d      	bhi.n	800e432 <_strtoull_l.constprop.0+0xe2>
 800e3d6:	0014      	movs	r4, r2
 800e3d8:	42a6      	cmp	r6, r4
 800e3da:	dd39      	ble.n	800e450 <_strtoull_l.constprop.0+0x100>
 800e3dc:	1c5a      	adds	r2, r3, #1
 800e3de:	d01f      	beq.n	800e420 <_strtoull_l.constprop.0+0xd0>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	4299      	cmp	r1, r3
 800e3e4:	d831      	bhi.n	800e44a <_strtoull_l.constprop.0+0xfa>
 800e3e6:	d102      	bne.n	800e3ee <_strtoull_l.constprop.0+0x9e>
 800e3e8:	9b07      	ldr	r3, [sp, #28]
 800e3ea:	4298      	cmp	r0, r3
 800e3ec:	d82d      	bhi.n	800e44a <_strtoull_l.constprop.0+0xfa>
 800e3ee:	9b07      	ldr	r3, [sp, #28]
 800e3f0:	4283      	cmp	r3, r0
 800e3f2:	d107      	bne.n	800e404 <_strtoull_l.constprop.0+0xb4>
 800e3f4:	9b03      	ldr	r3, [sp, #12]
 800e3f6:	428b      	cmp	r3, r1
 800e3f8:	d104      	bne.n	800e404 <_strtoull_l.constprop.0+0xb4>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	9a08      	ldr	r2, [sp, #32]
 800e3fe:	425b      	negs	r3, r3
 800e400:	42a2      	cmp	r2, r4
 800e402:	db0d      	blt.n	800e420 <_strtoull_l.constprop.0+0xd0>
 800e404:	000b      	movs	r3, r1
 800e406:	0002      	movs	r2, r0
 800e408:	0039      	movs	r1, r7
 800e40a:	0030      	movs	r0, r6
 800e40c:	f7f2 f86a 	bl	80004e4 <__aeabi_lmul>
 800e410:	17e3      	asrs	r3, r4, #31
 800e412:	9404      	str	r4, [sp, #16]
 800e414:	9305      	str	r3, [sp, #20]
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	9c05      	ldr	r4, [sp, #20]
 800e41a:	18c0      	adds	r0, r0, r3
 800e41c:	4161      	adcs	r1, r4
 800e41e:	2301      	movs	r3, #1
 800e420:	782c      	ldrb	r4, [r5, #0]
 800e422:	3501      	adds	r5, #1
 800e424:	e7d3      	b.n	800e3ce <_strtoull_l.constprop.0+0x7e>
 800e426:	9706      	str	r7, [sp, #24]
 800e428:	2c2b      	cmp	r4, #43	; 0x2b
 800e42a:	d1ab      	bne.n	800e384 <_strtoull_l.constprop.0+0x34>
 800e42c:	781c      	ldrb	r4, [r3, #0]
 800e42e:	1c95      	adds	r5, r2, #2
 800e430:	e7a8      	b.n	800e384 <_strtoull_l.constprop.0+0x34>
 800e432:	0022      	movs	r2, r4
 800e434:	3a41      	subs	r2, #65	; 0x41
 800e436:	2a19      	cmp	r2, #25
 800e438:	d801      	bhi.n	800e43e <_strtoull_l.constprop.0+0xee>
 800e43a:	3c37      	subs	r4, #55	; 0x37
 800e43c:	e7cc      	b.n	800e3d8 <_strtoull_l.constprop.0+0x88>
 800e43e:	0022      	movs	r2, r4
 800e440:	3a61      	subs	r2, #97	; 0x61
 800e442:	2a19      	cmp	r2, #25
 800e444:	d804      	bhi.n	800e450 <_strtoull_l.constprop.0+0x100>
 800e446:	3c57      	subs	r4, #87	; 0x57
 800e448:	e7c6      	b.n	800e3d8 <_strtoull_l.constprop.0+0x88>
 800e44a:	2301      	movs	r3, #1
 800e44c:	425b      	negs	r3, r3
 800e44e:	e7e7      	b.n	800e420 <_strtoull_l.constprop.0+0xd0>
 800e450:	1c5a      	adds	r2, r3, #1
 800e452:	d10a      	bne.n	800e46a <_strtoull_l.constprop.0+0x11a>
 800e454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e456:	3323      	adds	r3, #35	; 0x23
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	9b02      	ldr	r3, [sp, #8]
 800e45c:	2001      	movs	r0, #1
 800e45e:	4240      	negs	r0, r0
 800e460:	17c1      	asrs	r1, r0, #31
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10e      	bne.n	800e484 <_strtoull_l.constprop.0+0x134>
 800e466:	b00b      	add	sp, #44	; 0x2c
 800e468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e46a:	9a06      	ldr	r2, [sp, #24]
 800e46c:	2a00      	cmp	r2, #0
 800e46e:	d004      	beq.n	800e47a <_strtoull_l.constprop.0+0x12a>
 800e470:	0006      	movs	r6, r0
 800e472:	000f      	movs	r7, r1
 800e474:	2100      	movs	r1, #0
 800e476:	4270      	negs	r0, r6
 800e478:	41b9      	sbcs	r1, r7
 800e47a:	9a02      	ldr	r2, [sp, #8]
 800e47c:	2a00      	cmp	r2, #0
 800e47e:	d0f2      	beq.n	800e466 <_strtoull_l.constprop.0+0x116>
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <_strtoull_l.constprop.0+0x138>
 800e484:	1e6b      	subs	r3, r5, #1
 800e486:	9301      	str	r3, [sp, #4]
 800e488:	9b02      	ldr	r3, [sp, #8]
 800e48a:	9a01      	ldr	r2, [sp, #4]
 800e48c:	601a      	str	r2, [r3, #0]
 800e48e:	e7ea      	b.n	800e466 <_strtoull_l.constprop.0+0x116>
 800e490:	2430      	movs	r4, #48	; 0x30
 800e492:	2e00      	cmp	r6, #0
 800e494:	d000      	beq.n	800e498 <_strtoull_l.constprop.0+0x148>
 800e496:	e785      	b.n	800e3a4 <_strtoull_l.constprop.0+0x54>
 800e498:	3608      	adds	r6, #8
 800e49a:	e783      	b.n	800e3a4 <_strtoull_l.constprop.0+0x54>
 800e49c:	2c30      	cmp	r4, #48	; 0x30
 800e49e:	d100      	bne.n	800e4a2 <_strtoull_l.constprop.0+0x152>
 800e4a0:	e777      	b.n	800e392 <_strtoull_l.constprop.0+0x42>
 800e4a2:	260a      	movs	r6, #10
 800e4a4:	e77e      	b.n	800e3a4 <_strtoull_l.constprop.0+0x54>
 800e4a6:	46c0      	nop			; (mov r8, r8)
 800e4a8:	0800fce1 	.word	0x0800fce1

0800e4ac <_strtoull_r>:
 800e4ac:	b510      	push	{r4, lr}
 800e4ae:	f7ff ff4f 	bl	800e350 <_strtoull_l.constprop.0>
 800e4b2:	bd10      	pop	{r4, pc}

0800e4b4 <_mbrtowc_r>:
 800e4b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4b6:	0004      	movs	r4, r0
 800e4b8:	0010      	movs	r0, r2
 800e4ba:	4a0b      	ldr	r2, [pc, #44]	; (800e4e8 <_mbrtowc_r+0x34>)
 800e4bc:	9d06      	ldr	r5, [sp, #24]
 800e4be:	32e4      	adds	r2, #228	; 0xe4
 800e4c0:	6816      	ldr	r6, [r2, #0]
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d10c      	bne.n	800e4e0 <_mbrtowc_r+0x2c>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	0001      	movs	r1, r0
 800e4ca:	4a08      	ldr	r2, [pc, #32]	; (800e4ec <_mbrtowc_r+0x38>)
 800e4cc:	9500      	str	r5, [sp, #0]
 800e4ce:	0020      	movs	r0, r4
 800e4d0:	47b0      	blx	r6
 800e4d2:	1c43      	adds	r3, r0, #1
 800e4d4:	d103      	bne.n	800e4de <_mbrtowc_r+0x2a>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	602b      	str	r3, [r5, #0]
 800e4da:	338a      	adds	r3, #138	; 0x8a
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e4e0:	0002      	movs	r2, r0
 800e4e2:	9500      	str	r5, [sp, #0]
 800e4e4:	e7f3      	b.n	800e4ce <_mbrtowc_r+0x1a>
 800e4e6:	46c0      	nop			; (mov r8, r8)
 800e4e8:	2000042c 	.word	0x2000042c
 800e4ec:	0801006b 	.word	0x0801006b

0800e4f0 <iswspace>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	f000 f802 	bl	800e4fc <iswspace_l>
 800e4f8:	bd10      	pop	{r4, pc}
	...

0800e4fc <iswspace_l>:
 800e4fc:	0003      	movs	r3, r0
 800e4fe:	2000      	movs	r0, #0
 800e500:	2bff      	cmp	r3, #255	; 0xff
 800e502:	d803      	bhi.n	800e50c <iswspace_l+0x10>
 800e504:	4a02      	ldr	r2, [pc, #8]	; (800e510 <iswspace_l+0x14>)
 800e506:	5cd0      	ldrb	r0, [r2, r3]
 800e508:	2308      	movs	r3, #8
 800e50a:	4018      	ands	r0, r3
 800e50c:	4770      	bx	lr
 800e50e:	46c0      	nop			; (mov r8, r8)
 800e510:	0800fce1 	.word	0x0800fce1

0800e514 <fiprintf>:
 800e514:	b40e      	push	{r1, r2, r3}
 800e516:	b517      	push	{r0, r1, r2, r4, lr}
 800e518:	4c05      	ldr	r4, [pc, #20]	; (800e530 <fiprintf+0x1c>)
 800e51a:	ab05      	add	r3, sp, #20
 800e51c:	cb04      	ldmia	r3!, {r2}
 800e51e:	0001      	movs	r1, r0
 800e520:	6820      	ldr	r0, [r4, #0]
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	f000 f954 	bl	800e7d0 <_vfiprintf_r>
 800e528:	bc1e      	pop	{r1, r2, r3, r4}
 800e52a:	bc08      	pop	{r3}
 800e52c:	b003      	add	sp, #12
 800e52e:	4718      	bx	r3
 800e530:	200006b8 	.word	0x200006b8

0800e534 <__ssprint_r>:
 800e534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e536:	6813      	ldr	r3, [r2, #0]
 800e538:	b087      	sub	sp, #28
 800e53a:	0017      	movs	r7, r2
 800e53c:	9303      	str	r3, [sp, #12]
 800e53e:	6893      	ldr	r3, [r2, #8]
 800e540:	2200      	movs	r2, #0
 800e542:	000c      	movs	r4, r1
 800e544:	9005      	str	r0, [sp, #20]
 800e546:	9202      	str	r2, [sp, #8]
 800e548:	9201      	str	r2, [sp, #4]
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d10d      	bne.n	800e56a <__ssprint_r+0x36>
 800e54e:	2000      	movs	r0, #0
 800e550:	2300      	movs	r3, #0
 800e552:	607b      	str	r3, [r7, #4]
 800e554:	b007      	add	sp, #28
 800e556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	9302      	str	r3, [sp, #8]
 800e55e:	9b03      	ldr	r3, [sp, #12]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	9301      	str	r3, [sp, #4]
 800e564:	9b03      	ldr	r3, [sp, #12]
 800e566:	3308      	adds	r3, #8
 800e568:	9303      	str	r3, [sp, #12]
 800e56a:	9a01      	ldr	r2, [sp, #4]
 800e56c:	68a6      	ldr	r6, [r4, #8]
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	2a00      	cmp	r2, #0
 800e572:	d0f1      	beq.n	800e558 <__ssprint_r+0x24>
 800e574:	42b2      	cmp	r2, r6
 800e576:	d32e      	bcc.n	800e5d6 <__ssprint_r+0xa2>
 800e578:	2190      	movs	r1, #144	; 0x90
 800e57a:	89a2      	ldrh	r2, [r4, #12]
 800e57c:	00c9      	lsls	r1, r1, #3
 800e57e:	420a      	tst	r2, r1
 800e580:	d029      	beq.n	800e5d6 <__ssprint_r+0xa2>
 800e582:	2003      	movs	r0, #3
 800e584:	6921      	ldr	r1, [r4, #16]
 800e586:	1a5b      	subs	r3, r3, r1
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	6963      	ldr	r3, [r4, #20]
 800e58c:	4343      	muls	r3, r0
 800e58e:	0fdd      	lsrs	r5, r3, #31
 800e590:	18ed      	adds	r5, r5, r3
 800e592:	9b04      	ldr	r3, [sp, #16]
 800e594:	9801      	ldr	r0, [sp, #4]
 800e596:	3301      	adds	r3, #1
 800e598:	181b      	adds	r3, r3, r0
 800e59a:	106d      	asrs	r5, r5, #1
 800e59c:	42ab      	cmp	r3, r5
 800e59e:	d900      	bls.n	800e5a2 <__ssprint_r+0x6e>
 800e5a0:	001d      	movs	r5, r3
 800e5a2:	0552      	lsls	r2, r2, #21
 800e5a4:	d532      	bpl.n	800e60c <__ssprint_r+0xd8>
 800e5a6:	0029      	movs	r1, r5
 800e5a8:	9805      	ldr	r0, [sp, #20]
 800e5aa:	f7f9 fa77 	bl	8007a9c <_malloc_r>
 800e5ae:	1e06      	subs	r6, r0, #0
 800e5b0:	d036      	beq.n	800e620 <__ssprint_r+0xec>
 800e5b2:	9a04      	ldr	r2, [sp, #16]
 800e5b4:	6921      	ldr	r1, [r4, #16]
 800e5b6:	f7fa fd94 	bl	80090e2 <memcpy>
 800e5ba:	89a2      	ldrh	r2, [r4, #12]
 800e5bc:	4b1e      	ldr	r3, [pc, #120]	; (800e638 <__ssprint_r+0x104>)
 800e5be:	401a      	ands	r2, r3
 800e5c0:	2380      	movs	r3, #128	; 0x80
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	81a3      	strh	r3, [r4, #12]
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	6126      	str	r6, [r4, #16]
 800e5ca:	18f6      	adds	r6, r6, r3
 800e5cc:	6026      	str	r6, [r4, #0]
 800e5ce:	6165      	str	r5, [r4, #20]
 800e5d0:	9e01      	ldr	r6, [sp, #4]
 800e5d2:	1aed      	subs	r5, r5, r3
 800e5d4:	60a5      	str	r5, [r4, #8]
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	429e      	cmp	r6, r3
 800e5da:	d900      	bls.n	800e5de <__ssprint_r+0xaa>
 800e5dc:	001e      	movs	r6, r3
 800e5de:	0032      	movs	r2, r6
 800e5e0:	9902      	ldr	r1, [sp, #8]
 800e5e2:	6820      	ldr	r0, [r4, #0]
 800e5e4:	f001 f86d 	bl	800f6c2 <memmove>
 800e5e8:	9a01      	ldr	r2, [sp, #4]
 800e5ea:	68a3      	ldr	r3, [r4, #8]
 800e5ec:	4694      	mov	ip, r2
 800e5ee:	1b9b      	subs	r3, r3, r6
 800e5f0:	60a3      	str	r3, [r4, #8]
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	199b      	adds	r3, r3, r6
 800e5f6:	6023      	str	r3, [r4, #0]
 800e5f8:	9b02      	ldr	r3, [sp, #8]
 800e5fa:	4463      	add	r3, ip
 800e5fc:	9302      	str	r3, [sp, #8]
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	1a9b      	subs	r3, r3, r2
 800e602:	60bb      	str	r3, [r7, #8]
 800e604:	d0a3      	beq.n	800e54e <__ssprint_r+0x1a>
 800e606:	2300      	movs	r3, #0
 800e608:	9301      	str	r3, [sp, #4]
 800e60a:	e7ae      	b.n	800e56a <__ssprint_r+0x36>
 800e60c:	002a      	movs	r2, r5
 800e60e:	9805      	ldr	r0, [sp, #20]
 800e610:	f7ff fbc0 	bl	800dd94 <_realloc_r>
 800e614:	1e06      	subs	r6, r0, #0
 800e616:	d1d6      	bne.n	800e5c6 <__ssprint_r+0x92>
 800e618:	6921      	ldr	r1, [r4, #16]
 800e61a:	9805      	ldr	r0, [sp, #20]
 800e61c:	f7fa fddc 	bl	80091d8 <_free_r>
 800e620:	230c      	movs	r3, #12
 800e622:	9a05      	ldr	r2, [sp, #20]
 800e624:	2001      	movs	r0, #1
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	89a2      	ldrh	r2, [r4, #12]
 800e62a:	3334      	adds	r3, #52	; 0x34
 800e62c:	4313      	orrs	r3, r2
 800e62e:	81a3      	strh	r3, [r4, #12]
 800e630:	2300      	movs	r3, #0
 800e632:	4240      	negs	r0, r0
 800e634:	60bb      	str	r3, [r7, #8]
 800e636:	e78b      	b.n	800e550 <__ssprint_r+0x1c>
 800e638:	fffffb7f 	.word	0xfffffb7f

0800e63c <_sungetc_r>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	0014      	movs	r4, r2
 800e640:	1c4b      	adds	r3, r1, #1
 800e642:	d103      	bne.n	800e64c <_sungetc_r+0x10>
 800e644:	2501      	movs	r5, #1
 800e646:	426d      	negs	r5, r5
 800e648:	0028      	movs	r0, r5
 800e64a:	bd70      	pop	{r4, r5, r6, pc}
 800e64c:	8993      	ldrh	r3, [r2, #12]
 800e64e:	2220      	movs	r2, #32
 800e650:	4393      	bics	r3, r2
 800e652:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e654:	81a3      	strh	r3, [r4, #12]
 800e656:	b2ce      	uxtb	r6, r1
 800e658:	6863      	ldr	r3, [r4, #4]
 800e65a:	b2cd      	uxtb	r5, r1
 800e65c:	2a00      	cmp	r2, #0
 800e65e:	d010      	beq.n	800e682 <_sungetc_r+0x46>
 800e660:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e662:	429a      	cmp	r2, r3
 800e664:	dd07      	ble.n	800e676 <_sungetc_r+0x3a>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	3b01      	subs	r3, #1
 800e66a:	6023      	str	r3, [r4, #0]
 800e66c:	701e      	strb	r6, [r3, #0]
 800e66e:	6863      	ldr	r3, [r4, #4]
 800e670:	3301      	adds	r3, #1
 800e672:	6063      	str	r3, [r4, #4]
 800e674:	e7e8      	b.n	800e648 <_sungetc_r+0xc>
 800e676:	0021      	movs	r1, r4
 800e678:	f000 ff1a 	bl	800f4b0 <__submore>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	d0f2      	beq.n	800e666 <_sungetc_r+0x2a>
 800e680:	e7e0      	b.n	800e644 <_sungetc_r+0x8>
 800e682:	6921      	ldr	r1, [r4, #16]
 800e684:	6822      	ldr	r2, [r4, #0]
 800e686:	2900      	cmp	r1, #0
 800e688:	d007      	beq.n	800e69a <_sungetc_r+0x5e>
 800e68a:	4291      	cmp	r1, r2
 800e68c:	d205      	bcs.n	800e69a <_sungetc_r+0x5e>
 800e68e:	1e51      	subs	r1, r2, #1
 800e690:	7808      	ldrb	r0, [r1, #0]
 800e692:	42a8      	cmp	r0, r5
 800e694:	d101      	bne.n	800e69a <_sungetc_r+0x5e>
 800e696:	6021      	str	r1, [r4, #0]
 800e698:	e7ea      	b.n	800e670 <_sungetc_r+0x34>
 800e69a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e69c:	0023      	movs	r3, r4
 800e69e:	3340      	adds	r3, #64	; 0x40
 800e6a0:	6323      	str	r3, [r4, #48]	; 0x30
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e6a6:	0023      	movs	r3, r4
 800e6a8:	3342      	adds	r3, #66	; 0x42
 800e6aa:	63a2      	str	r2, [r4, #56]	; 0x38
 800e6ac:	701e      	strb	r6, [r3, #0]
 800e6ae:	6023      	str	r3, [r4, #0]
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e7de      	b.n	800e672 <_sungetc_r+0x36>

0800e6b4 <__ssrefill_r>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	000c      	movs	r4, r1
 800e6b8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800e6ba:	2900      	cmp	r1, #0
 800e6bc:	d00e      	beq.n	800e6dc <__ssrefill_r+0x28>
 800e6be:	0023      	movs	r3, r4
 800e6c0:	3340      	adds	r3, #64	; 0x40
 800e6c2:	4299      	cmp	r1, r3
 800e6c4:	d001      	beq.n	800e6ca <__ssrefill_r+0x16>
 800e6c6:	f7fa fd87 	bl	80091d8 <_free_r>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e6ce:	6320      	str	r0, [r4, #48]	; 0x30
 800e6d0:	6063      	str	r3, [r4, #4]
 800e6d2:	4283      	cmp	r3, r0
 800e6d4:	d002      	beq.n	800e6dc <__ssrefill_r+0x28>
 800e6d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6d8:	6023      	str	r3, [r4, #0]
 800e6da:	bd10      	pop	{r4, pc}
 800e6dc:	6923      	ldr	r3, [r4, #16]
 800e6de:	2001      	movs	r0, #1
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	89a2      	ldrh	r2, [r4, #12]
 800e6e6:	6063      	str	r3, [r4, #4]
 800e6e8:	3320      	adds	r3, #32
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	81a3      	strh	r3, [r4, #12]
 800e6ee:	4240      	negs	r0, r0
 800e6f0:	e7f3      	b.n	800e6da <__ssrefill_r+0x26>

0800e6f2 <_sfread_r>:
 800e6f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6f4:	0014      	movs	r4, r2
 800e6f6:	435c      	muls	r4, r3
 800e6f8:	b087      	sub	sp, #28
 800e6fa:	1e26      	subs	r6, r4, #0
 800e6fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e6fe:	9005      	str	r0, [sp, #20]
 800e700:	9101      	str	r1, [sp, #4]
 800e702:	9202      	str	r2, [sp, #8]
 800e704:	9303      	str	r3, [sp, #12]
 800e706:	d11e      	bne.n	800e746 <_sfread_r+0x54>
 800e708:	0020      	movs	r0, r4
 800e70a:	b007      	add	sp, #28
 800e70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e70e:	003a      	movs	r2, r7
 800e710:	9801      	ldr	r0, [sp, #4]
 800e712:	f7fa fce6 	bl	80090e2 <memcpy>
 800e716:	682b      	ldr	r3, [r5, #0]
 800e718:	0029      	movs	r1, r5
 800e71a:	19db      	adds	r3, r3, r7
 800e71c:	602b      	str	r3, [r5, #0]
 800e71e:	2300      	movs	r3, #0
 800e720:	606b      	str	r3, [r5, #4]
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	9805      	ldr	r0, [sp, #20]
 800e726:	19db      	adds	r3, r3, r7
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	1bf3      	subs	r3, r6, r7
 800e72c:	9304      	str	r3, [sp, #16]
 800e72e:	f7ff ffc1 	bl	800e6b4 <__ssrefill_r>
 800e732:	2800      	cmp	r0, #0
 800e734:	d006      	beq.n	800e744 <_sfread_r+0x52>
 800e736:	193c      	adds	r4, r7, r4
 800e738:	1ba0      	subs	r0, r4, r6
 800e73a:	9902      	ldr	r1, [sp, #8]
 800e73c:	f7f1 fcfe 	bl	800013c <__udivsi3>
 800e740:	0004      	movs	r4, r0
 800e742:	e7e1      	b.n	800e708 <_sfread_r+0x16>
 800e744:	9e04      	ldr	r6, [sp, #16]
 800e746:	686f      	ldr	r7, [r5, #4]
 800e748:	6829      	ldr	r1, [r5, #0]
 800e74a:	42b7      	cmp	r7, r6
 800e74c:	d3df      	bcc.n	800e70e <_sfread_r+0x1c>
 800e74e:	0032      	movs	r2, r6
 800e750:	9801      	ldr	r0, [sp, #4]
 800e752:	f7fa fcc6 	bl	80090e2 <memcpy>
 800e756:	686b      	ldr	r3, [r5, #4]
 800e758:	9c03      	ldr	r4, [sp, #12]
 800e75a:	1b9b      	subs	r3, r3, r6
 800e75c:	606b      	str	r3, [r5, #4]
 800e75e:	682b      	ldr	r3, [r5, #0]
 800e760:	199b      	adds	r3, r3, r6
 800e762:	602b      	str	r3, [r5, #0]
 800e764:	e7d0      	b.n	800e708 <_sfread_r+0x16>

0800e766 <__sprint_r>:
 800e766:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e768:	6893      	ldr	r3, [r2, #8]
 800e76a:	b085      	sub	sp, #20
 800e76c:	9001      	str	r0, [sp, #4]
 800e76e:	000d      	movs	r5, r1
 800e770:	0014      	movs	r4, r2
 800e772:	1e18      	subs	r0, r3, #0
 800e774:	d018      	beq.n	800e7a8 <__sprint_r+0x42>
 800e776:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e778:	049b      	lsls	r3, r3, #18
 800e77a:	d524      	bpl.n	800e7c6 <__sprint_r+0x60>
 800e77c:	6817      	ldr	r7, [r2, #0]
 800e77e:	2600      	movs	r6, #0
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	9302      	str	r3, [sp, #8]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	089b      	lsrs	r3, r3, #2
 800e78a:	9303      	str	r3, [sp, #12]
 800e78c:	9b03      	ldr	r3, [sp, #12]
 800e78e:	42b3      	cmp	r3, r6
 800e790:	dc0e      	bgt.n	800e7b0 <__sprint_r+0x4a>
 800e792:	2203      	movs	r2, #3
 800e794:	9b00      	ldr	r3, [sp, #0]
 800e796:	68a0      	ldr	r0, [r4, #8]
 800e798:	4393      	bics	r3, r2
 800e79a:	1ac0      	subs	r0, r0, r3
 800e79c:	60a0      	str	r0, [r4, #8]
 800e79e:	3708      	adds	r7, #8
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d1ec      	bne.n	800e77e <__sprint_r+0x18>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	60a3      	str	r3, [r4, #8]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	6063      	str	r3, [r4, #4]
 800e7ac:	b005      	add	sp, #20
 800e7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7b0:	9902      	ldr	r1, [sp, #8]
 800e7b2:	00b3      	lsls	r3, r6, #2
 800e7b4:	58c9      	ldr	r1, [r1, r3]
 800e7b6:	002a      	movs	r2, r5
 800e7b8:	9801      	ldr	r0, [sp, #4]
 800e7ba:	f000 ff59 	bl	800f670 <_fputwc_r>
 800e7be:	1c43      	adds	r3, r0, #1
 800e7c0:	d0f0      	beq.n	800e7a4 <__sprint_r+0x3e>
 800e7c2:	3601      	adds	r6, #1
 800e7c4:	e7e2      	b.n	800e78c <__sprint_r+0x26>
 800e7c6:	9801      	ldr	r0, [sp, #4]
 800e7c8:	f000 fd14 	bl	800f1f4 <__sfvwrite_r>
 800e7cc:	e7ea      	b.n	800e7a4 <__sprint_r+0x3e>
	...

0800e7d0 <_vfiprintf_r>:
 800e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7d2:	b0c1      	sub	sp, #260	; 0x104
 800e7d4:	001c      	movs	r4, r3
 800e7d6:	001f      	movs	r7, r3
 800e7d8:	9006      	str	r0, [sp, #24]
 800e7da:	9103      	str	r1, [sp, #12]
 800e7dc:	9207      	str	r2, [sp, #28]
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	d004      	beq.n	800e7ec <_vfiprintf_r+0x1c>
 800e7e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d101      	bne.n	800e7ec <_vfiprintf_r+0x1c>
 800e7e8:	f7fa facc 	bl	8008d84 <__sinit>
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7f0:	07db      	lsls	r3, r3, #31
 800e7f2:	d407      	bmi.n	800e804 <_vfiprintf_r+0x34>
 800e7f4:	9b03      	ldr	r3, [sp, #12]
 800e7f6:	899b      	ldrh	r3, [r3, #12]
 800e7f8:	059b      	lsls	r3, r3, #22
 800e7fa:	d403      	bmi.n	800e804 <_vfiprintf_r+0x34>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e800:	f7fa fc62 	bl	80090c8 <__retarget_lock_acquire_recursive>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	220c      	movs	r2, #12
 800e808:	5e9a      	ldrsh	r2, [r3, r2]
 800e80a:	2380      	movs	r3, #128	; 0x80
 800e80c:	019b      	lsls	r3, r3, #6
 800e80e:	421a      	tst	r2, r3
 800e810:	d107      	bne.n	800e822 <_vfiprintf_r+0x52>
 800e812:	4313      	orrs	r3, r2
 800e814:	9a03      	ldr	r2, [sp, #12]
 800e816:	8193      	strh	r3, [r2, #12]
 800e818:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e81a:	4aa3      	ldr	r2, [pc, #652]	; (800eaa8 <_vfiprintf_r+0x2d8>)
 800e81c:	4013      	ands	r3, r2
 800e81e:	9a03      	ldr	r2, [sp, #12]
 800e820:	6653      	str	r3, [r2, #100]	; 0x64
 800e822:	9b03      	ldr	r3, [sp, #12]
 800e824:	899b      	ldrh	r3, [r3, #12]
 800e826:	071b      	lsls	r3, r3, #28
 800e828:	d503      	bpl.n	800e832 <_vfiprintf_r+0x62>
 800e82a:	9b03      	ldr	r3, [sp, #12]
 800e82c:	691b      	ldr	r3, [r3, #16]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d118      	bne.n	800e864 <_vfiprintf_r+0x94>
 800e832:	9903      	ldr	r1, [sp, #12]
 800e834:	9806      	ldr	r0, [sp, #24]
 800e836:	f000 fe79 	bl	800f52c <__swsetup_r>
 800e83a:	2800      	cmp	r0, #0
 800e83c:	d012      	beq.n	800e864 <_vfiprintf_r+0x94>
 800e83e:	9b03      	ldr	r3, [sp, #12]
 800e840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e842:	07db      	lsls	r3, r3, #31
 800e844:	d505      	bpl.n	800e852 <_vfiprintf_r+0x82>
 800e846:	2301      	movs	r3, #1
 800e848:	425b      	negs	r3, r3
 800e84a:	9308      	str	r3, [sp, #32]
 800e84c:	9808      	ldr	r0, [sp, #32]
 800e84e:	b041      	add	sp, #260	; 0x104
 800e850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e852:	9b03      	ldr	r3, [sp, #12]
 800e854:	899b      	ldrh	r3, [r3, #12]
 800e856:	059b      	lsls	r3, r3, #22
 800e858:	d4f5      	bmi.n	800e846 <_vfiprintf_r+0x76>
 800e85a:	9b03      	ldr	r3, [sp, #12]
 800e85c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e85e:	f7fa fc34 	bl	80090ca <__retarget_lock_release_recursive>
 800e862:	e7f0      	b.n	800e846 <_vfiprintf_r+0x76>
 800e864:	221a      	movs	r2, #26
 800e866:	9b03      	ldr	r3, [sp, #12]
 800e868:	899b      	ldrh	r3, [r3, #12]
 800e86a:	401a      	ands	r2, r3
 800e86c:	2a0a      	cmp	r2, #10
 800e86e:	d116      	bne.n	800e89e <_vfiprintf_r+0xce>
 800e870:	9a03      	ldr	r2, [sp, #12]
 800e872:	210e      	movs	r1, #14
 800e874:	5e52      	ldrsh	r2, [r2, r1]
 800e876:	2a00      	cmp	r2, #0
 800e878:	db11      	blt.n	800e89e <_vfiprintf_r+0xce>
 800e87a:	9a03      	ldr	r2, [sp, #12]
 800e87c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e87e:	07d2      	lsls	r2, r2, #31
 800e880:	d405      	bmi.n	800e88e <_vfiprintf_r+0xbe>
 800e882:	059b      	lsls	r3, r3, #22
 800e884:	d403      	bmi.n	800e88e <_vfiprintf_r+0xbe>
 800e886:	9b03      	ldr	r3, [sp, #12]
 800e888:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e88a:	f7fa fc1e 	bl	80090ca <__retarget_lock_release_recursive>
 800e88e:	0023      	movs	r3, r4
 800e890:	9a07      	ldr	r2, [sp, #28]
 800e892:	9903      	ldr	r1, [sp, #12]
 800e894:	9806      	ldr	r0, [sp, #24]
 800e896:	f000 fc69 	bl	800f16c <__sbprintf>
 800e89a:	9008      	str	r0, [sp, #32]
 800e89c:	e7d6      	b.n	800e84c <_vfiprintf_r+0x7c>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	ad17      	add	r5, sp, #92	; 0x5c
 800e8a2:	9514      	str	r5, [sp, #80]	; 0x50
 800e8a4:	9316      	str	r3, [sp, #88]	; 0x58
 800e8a6:	9315      	str	r3, [sp, #84]	; 0x54
 800e8a8:	930c      	str	r3, [sp, #48]	; 0x30
 800e8aa:	930d      	str	r3, [sp, #52]	; 0x34
 800e8ac:	930e      	str	r3, [sp, #56]	; 0x38
 800e8ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8b0:	9308      	str	r3, [sp, #32]
 800e8b2:	9c07      	ldr	r4, [sp, #28]
 800e8b4:	7823      	ldrb	r3, [r4, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <_vfiprintf_r+0xf0>
 800e8ba:	2b25      	cmp	r3, #37	; 0x25
 800e8bc:	d000      	beq.n	800e8c0 <_vfiprintf_r+0xf0>
 800e8be:	e08d      	b.n	800e9dc <_vfiprintf_r+0x20c>
 800e8c0:	9b07      	ldr	r3, [sp, #28]
 800e8c2:	1ae6      	subs	r6, r4, r3
 800e8c4:	429c      	cmp	r4, r3
 800e8c6:	d016      	beq.n	800e8f6 <_vfiprintf_r+0x126>
 800e8c8:	602b      	str	r3, [r5, #0]
 800e8ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8cc:	606e      	str	r6, [r5, #4]
 800e8ce:	199b      	adds	r3, r3, r6
 800e8d0:	9316      	str	r3, [sp, #88]	; 0x58
 800e8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8d4:	3508      	adds	r5, #8
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	9315      	str	r3, [sp, #84]	; 0x54
 800e8da:	2b07      	cmp	r3, #7
 800e8dc:	dd08      	ble.n	800e8f0 <_vfiprintf_r+0x120>
 800e8de:	9903      	ldr	r1, [sp, #12]
 800e8e0:	9806      	ldr	r0, [sp, #24]
 800e8e2:	aa14      	add	r2, sp, #80	; 0x50
 800e8e4:	f7ff ff3f 	bl	800e766 <__sprint_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d000      	beq.n	800e8ee <_vfiprintf_r+0x11e>
 800e8ec:	e3d9      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800e8ee:	ad17      	add	r5, sp, #92	; 0x5c
 800e8f0:	9b08      	ldr	r3, [sp, #32]
 800e8f2:	199b      	adds	r3, r3, r6
 800e8f4:	9308      	str	r3, [sp, #32]
 800e8f6:	7823      	ldrb	r3, [r4, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <_vfiprintf_r+0x130>
 800e8fc:	f000 fbf6 	bl	800f0ec <_vfiprintf_r+0x91c>
 800e900:	2200      	movs	r2, #0
 800e902:	a912      	add	r1, sp, #72	; 0x48
 800e904:	70ca      	strb	r2, [r1, #3]
 800e906:	2101      	movs	r1, #1
 800e908:	1c63      	adds	r3, r4, #1
 800e90a:	0014      	movs	r4, r2
 800e90c:	4249      	negs	r1, r1
 800e90e:	9105      	str	r1, [sp, #20]
 800e910:	9209      	str	r2, [sp, #36]	; 0x24
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	9207      	str	r2, [sp, #28]
 800e918:	0018      	movs	r0, r3
 800e91a:	3820      	subs	r0, #32
 800e91c:	285a      	cmp	r0, #90	; 0x5a
 800e91e:	d900      	bls.n	800e922 <_vfiprintf_r+0x152>
 800e920:	e362      	b.n	800efe8 <_vfiprintf_r+0x818>
 800e922:	f7f1 fc01 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e926:	0078      	.short	0x0078
 800e928:	03610361 	.word	0x03610361
 800e92c:	03610081 	.word	0x03610081
 800e930:	03610361 	.word	0x03610361
 800e934:	0361005d 	.word	0x0361005d
 800e938:	00830361 	.word	0x00830361
 800e93c:	0361008b 	.word	0x0361008b
 800e940:	008f0089 	.word	0x008f0089
 800e944:	00ad0361 	.word	0x00ad0361
 800e948:	00af00af 	.word	0x00af00af
 800e94c:	00af00af 	.word	0x00af00af
 800e950:	00af00af 	.word	0x00af00af
 800e954:	00af00af 	.word	0x00af00af
 800e958:	036100af 	.word	0x036100af
 800e95c:	03610361 	.word	0x03610361
 800e960:	03610361 	.word	0x03610361
 800e964:	03610361 	.word	0x03610361
 800e968:	03610361 	.word	0x03610361
 800e96c:	00e600da 	.word	0x00e600da
 800e970:	03610361 	.word	0x03610361
 800e974:	03610361 	.word	0x03610361
 800e978:	03610361 	.word	0x03610361
 800e97c:	03610361 	.word	0x03610361
 800e980:	03610361 	.word	0x03610361
 800e984:	03610143 	.word	0x03610143
 800e988:	03610361 	.word	0x03610361
 800e98c:	03610182 	.word	0x03610182
 800e990:	0361027c 	.word	0x0361027c
 800e994:	02ae0361 	.word	0x02ae0361
 800e998:	03610361 	.word	0x03610361
 800e99c:	03610361 	.word	0x03610361
 800e9a0:	03610361 	.word	0x03610361
 800e9a4:	03610361 	.word	0x03610361
 800e9a8:	03610361 	.word	0x03610361
 800e9ac:	00e800da 	.word	0x00e800da
 800e9b0:	03610361 	.word	0x03610361
 800e9b4:	00c30361 	.word	0x00c30361
 800e9b8:	00d600e8 	.word	0x00d600e8
 800e9bc:	00cf0361 	.word	0x00cf0361
 800e9c0:	01260361 	.word	0x01260361
 800e9c4:	01740145 	.word	0x01740145
 800e9c8:	036100d6 	.word	0x036100d6
 800e9cc:	007f0182 	.word	0x007f0182
 800e9d0:	0361027e 	.word	0x0361027e
 800e9d4:	02cd0361 	.word	0x02cd0361
 800e9d8:	007f0361 	.word	0x007f0361
 800e9dc:	3401      	adds	r4, #1
 800e9de:	e769      	b.n	800e8b4 <_vfiprintf_r+0xe4>
 800e9e0:	9806      	ldr	r0, [sp, #24]
 800e9e2:	f7fe fa47 	bl	800ce74 <_localeconv_r>
 800e9e6:	6843      	ldr	r3, [r0, #4]
 800e9e8:	0018      	movs	r0, r3
 800e9ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9ec:	f7f1 fb8a 	bl	8000104 <strlen>
 800e9f0:	900e      	str	r0, [sp, #56]	; 0x38
 800e9f2:	9806      	ldr	r0, [sp, #24]
 800e9f4:	f7fe fa3e 	bl	800ce74 <_localeconv_r>
 800e9f8:	6883      	ldr	r3, [r0, #8]
 800e9fa:	930d      	str	r3, [sp, #52]	; 0x34
 800e9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d010      	beq.n	800ea24 <_vfiprintf_r+0x254>
 800ea02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00d      	beq.n	800ea24 <_vfiprintf_r+0x254>
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00a      	beq.n	800ea24 <_vfiprintf_r+0x254>
 800ea0e:	2380      	movs	r3, #128	; 0x80
 800ea10:	00db      	lsls	r3, r3, #3
 800ea12:	431c      	orrs	r4, r3
 800ea14:	e006      	b.n	800ea24 <_vfiprintf_r+0x254>
 800ea16:	ab12      	add	r3, sp, #72	; 0x48
 800ea18:	78da      	ldrb	r2, [r3, #3]
 800ea1a:	3303      	adds	r3, #3
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	d101      	bne.n	800ea24 <_vfiprintf_r+0x254>
 800ea20:	3220      	adds	r2, #32
 800ea22:	701a      	strb	r2, [r3, #0]
 800ea24:	9b07      	ldr	r3, [sp, #28]
 800ea26:	e774      	b.n	800e912 <_vfiprintf_r+0x142>
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e7f2      	b.n	800ea12 <_vfiprintf_r+0x242>
 800ea2c:	cf08      	ldmia	r7!, {r3}
 800ea2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	daf7      	bge.n	800ea24 <_vfiprintf_r+0x254>
 800ea34:	425b      	negs	r3, r3
 800ea36:	9309      	str	r3, [sp, #36]	; 0x24
 800ea38:	2304      	movs	r3, #4
 800ea3a:	e7ea      	b.n	800ea12 <_vfiprintf_r+0x242>
 800ea3c:	222b      	movs	r2, #43	; 0x2b
 800ea3e:	ab12      	add	r3, sp, #72	; 0x48
 800ea40:	70da      	strb	r2, [r3, #3]
 800ea42:	e7ef      	b.n	800ea24 <_vfiprintf_r+0x254>
 800ea44:	9b07      	ldr	r3, [sp, #28]
 800ea46:	1c5a      	adds	r2, r3, #1
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea4c:	d00f      	beq.n	800ea6e <_vfiprintf_r+0x29e>
 800ea4e:	2100      	movs	r1, #0
 800ea50:	9105      	str	r1, [sp, #20]
 800ea52:	0019      	movs	r1, r3
 800ea54:	3930      	subs	r1, #48	; 0x30
 800ea56:	9207      	str	r2, [sp, #28]
 800ea58:	2909      	cmp	r1, #9
 800ea5a:	d900      	bls.n	800ea5e <_vfiprintf_r+0x28e>
 800ea5c:	e75c      	b.n	800e918 <_vfiprintf_r+0x148>
 800ea5e:	200a      	movs	r0, #10
 800ea60:	9b05      	ldr	r3, [sp, #20]
 800ea62:	4343      	muls	r3, r0
 800ea64:	185b      	adds	r3, r3, r1
 800ea66:	9305      	str	r3, [sp, #20]
 800ea68:	7813      	ldrb	r3, [r2, #0]
 800ea6a:	3201      	adds	r2, #1
 800ea6c:	e7f1      	b.n	800ea52 <_vfiprintf_r+0x282>
 800ea6e:	cf08      	ldmia	r7!, {r3}
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	da02      	bge.n	800ea7c <_vfiprintf_r+0x2ac>
 800ea76:	2301      	movs	r3, #1
 800ea78:	425b      	negs	r3, r3
 800ea7a:	9305      	str	r3, [sp, #20]
 800ea7c:	9207      	str	r2, [sp, #28]
 800ea7e:	e7d1      	b.n	800ea24 <_vfiprintf_r+0x254>
 800ea80:	2380      	movs	r3, #128	; 0x80
 800ea82:	e7c6      	b.n	800ea12 <_vfiprintf_r+0x242>
 800ea84:	2100      	movs	r1, #0
 800ea86:	9a07      	ldr	r2, [sp, #28]
 800ea88:	9109      	str	r1, [sp, #36]	; 0x24
 800ea8a:	200a      	movs	r0, #10
 800ea8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea8e:	3b30      	subs	r3, #48	; 0x30
 800ea90:	4341      	muls	r1, r0
 800ea92:	185b      	adds	r3, r3, r1
 800ea94:	9309      	str	r3, [sp, #36]	; 0x24
 800ea96:	0013      	movs	r3, r2
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	3201      	adds	r2, #1
 800ea9c:	0019      	movs	r1, r3
 800ea9e:	3930      	subs	r1, #48	; 0x30
 800eaa0:	9207      	str	r2, [sp, #28]
 800eaa2:	2909      	cmp	r1, #9
 800eaa4:	d9f1      	bls.n	800ea8a <_vfiprintf_r+0x2ba>
 800eaa6:	e737      	b.n	800e918 <_vfiprintf_r+0x148>
 800eaa8:	ffffdfff 	.word	0xffffdfff
 800eaac:	9b07      	ldr	r3, [sp, #28]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b68      	cmp	r3, #104	; 0x68
 800eab2:	d105      	bne.n	800eac0 <_vfiprintf_r+0x2f0>
 800eab4:	9b07      	ldr	r3, [sp, #28]
 800eab6:	3301      	adds	r3, #1
 800eab8:	9307      	str	r3, [sp, #28]
 800eaba:	2380      	movs	r3, #128	; 0x80
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	e7a8      	b.n	800ea12 <_vfiprintf_r+0x242>
 800eac0:	2340      	movs	r3, #64	; 0x40
 800eac2:	e7a6      	b.n	800ea12 <_vfiprintf_r+0x242>
 800eac4:	9b07      	ldr	r3, [sp, #28]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b6c      	cmp	r3, #108	; 0x6c
 800eaca:	d104      	bne.n	800ead6 <_vfiprintf_r+0x306>
 800eacc:	9b07      	ldr	r3, [sp, #28]
 800eace:	3301      	adds	r3, #1
 800ead0:	9307      	str	r3, [sp, #28]
 800ead2:	2320      	movs	r3, #32
 800ead4:	e79d      	b.n	800ea12 <_vfiprintf_r+0x242>
 800ead6:	2310      	movs	r3, #16
 800ead8:	e79b      	b.n	800ea12 <_vfiprintf_r+0x242>
 800eada:	003a      	movs	r2, r7
 800eadc:	ca08      	ldmia	r2!, {r3}
 800eade:	ae27      	add	r6, sp, #156	; 0x9c
 800eae0:	7033      	strb	r3, [r6, #0]
 800eae2:	2300      	movs	r3, #0
 800eae4:	9204      	str	r2, [sp, #16]
 800eae6:	aa12      	add	r2, sp, #72	; 0x48
 800eae8:	70d3      	strb	r3, [r2, #3]
 800eaea:	2201      	movs	r2, #1
 800eaec:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaee:	9205      	str	r2, [sp, #20]
 800eaf0:	e0b0      	b.n	800ec54 <_vfiprintf_r+0x484>
 800eaf2:	2310      	movs	r3, #16
 800eaf4:	431c      	orrs	r4, r3
 800eaf6:	06a3      	lsls	r3, r4, #26
 800eaf8:	d52a      	bpl.n	800eb50 <_vfiprintf_r+0x380>
 800eafa:	2307      	movs	r3, #7
 800eafc:	3707      	adds	r7, #7
 800eafe:	439f      	bics	r7, r3
 800eb00:	0039      	movs	r1, r7
 800eb02:	c90c      	ldmia	r1!, {r2, r3}
 800eb04:	9200      	str	r2, [sp, #0]
 800eb06:	9301      	str	r3, [sp, #4]
 800eb08:	9104      	str	r1, [sp, #16]
 800eb0a:	9a01      	ldr	r2, [sp, #4]
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	2a00      	cmp	r2, #0
 800eb10:	da09      	bge.n	800eb26 <_vfiprintf_r+0x356>
 800eb12:	9e00      	ldr	r6, [sp, #0]
 800eb14:	9f01      	ldr	r7, [sp, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	4271      	negs	r1, r6
 800eb1a:	41ba      	sbcs	r2, r7
 800eb1c:	9100      	str	r1, [sp, #0]
 800eb1e:	9201      	str	r2, [sp, #4]
 800eb20:	212d      	movs	r1, #45	; 0x2d
 800eb22:	aa12      	add	r2, sp, #72	; 0x48
 800eb24:	70d1      	strb	r1, [r2, #3]
 800eb26:	9901      	ldr	r1, [sp, #4]
 800eb28:	9a00      	ldr	r2, [sp, #0]
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	9905      	ldr	r1, [sp, #20]
 800eb2e:	3101      	adds	r1, #1
 800eb30:	d100      	bne.n	800eb34 <_vfiprintf_r+0x364>
 800eb32:	e2e9      	b.n	800f108 <_vfiprintf_r+0x938>
 800eb34:	2180      	movs	r1, #128	; 0x80
 800eb36:	0027      	movs	r7, r4
 800eb38:	438f      	bics	r7, r1
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	d000      	beq.n	800eb40 <_vfiprintf_r+0x370>
 800eb3e:	e2e7      	b.n	800f110 <_vfiprintf_r+0x940>
 800eb40:	9a05      	ldr	r2, [sp, #20]
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	d100      	bne.n	800eb48 <_vfiprintf_r+0x378>
 800eb46:	e243      	b.n	800efd0 <_vfiprintf_r+0x800>
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d000      	beq.n	800eb4e <_vfiprintf_r+0x37e>
 800eb4c:	e2e3      	b.n	800f116 <_vfiprintf_r+0x946>
 800eb4e:	e1e7      	b.n	800ef20 <_vfiprintf_r+0x750>
 800eb50:	003a      	movs	r2, r7
 800eb52:	ca08      	ldmia	r2!, {r3}
 800eb54:	9204      	str	r2, [sp, #16]
 800eb56:	06e2      	lsls	r2, r4, #27
 800eb58:	d503      	bpl.n	800eb62 <_vfiprintf_r+0x392>
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	17db      	asrs	r3, r3, #31
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	e7d3      	b.n	800eb0a <_vfiprintf_r+0x33a>
 800eb62:	0662      	lsls	r2, r4, #25
 800eb64:	d501      	bpl.n	800eb6a <_vfiprintf_r+0x39a>
 800eb66:	b21b      	sxth	r3, r3
 800eb68:	e7f7      	b.n	800eb5a <_vfiprintf_r+0x38a>
 800eb6a:	05a2      	lsls	r2, r4, #22
 800eb6c:	d5f5      	bpl.n	800eb5a <_vfiprintf_r+0x38a>
 800eb6e:	b25b      	sxtb	r3, r3
 800eb70:	e7f3      	b.n	800eb5a <_vfiprintf_r+0x38a>
 800eb72:	1d3b      	adds	r3, r7, #4
 800eb74:	9304      	str	r3, [sp, #16]
 800eb76:	06a3      	lsls	r3, r4, #26
 800eb78:	d506      	bpl.n	800eb88 <_vfiprintf_r+0x3b8>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	9a08      	ldr	r2, [sp, #32]
 800eb7e:	601a      	str	r2, [r3, #0]
 800eb80:	17d2      	asrs	r2, r2, #31
 800eb82:	605a      	str	r2, [r3, #4]
 800eb84:	9f04      	ldr	r7, [sp, #16]
 800eb86:	e694      	b.n	800e8b2 <_vfiprintf_r+0xe2>
 800eb88:	06e3      	lsls	r3, r4, #27
 800eb8a:	d503      	bpl.n	800eb94 <_vfiprintf_r+0x3c4>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	9a08      	ldr	r2, [sp, #32]
 800eb90:	601a      	str	r2, [r3, #0]
 800eb92:	e7f7      	b.n	800eb84 <_vfiprintf_r+0x3b4>
 800eb94:	0663      	lsls	r3, r4, #25
 800eb96:	d503      	bpl.n	800eba0 <_vfiprintf_r+0x3d0>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	9a08      	ldr	r2, [sp, #32]
 800eb9c:	801a      	strh	r2, [r3, #0]
 800eb9e:	e7f1      	b.n	800eb84 <_vfiprintf_r+0x3b4>
 800eba0:	05a4      	lsls	r4, r4, #22
 800eba2:	d5f3      	bpl.n	800eb8c <_vfiprintf_r+0x3bc>
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	9a08      	ldr	r2, [sp, #32]
 800eba8:	701a      	strb	r2, [r3, #0]
 800ebaa:	e7eb      	b.n	800eb84 <_vfiprintf_r+0x3b4>
 800ebac:	2310      	movs	r3, #16
 800ebae:	431c      	orrs	r4, r3
 800ebb0:	2320      	movs	r3, #32
 800ebb2:	0020      	movs	r0, r4
 800ebb4:	4018      	ands	r0, r3
 800ebb6:	421c      	tst	r4, r3
 800ebb8:	d00d      	beq.n	800ebd6 <_vfiprintf_r+0x406>
 800ebba:	3b19      	subs	r3, #25
 800ebbc:	3707      	adds	r7, #7
 800ebbe:	439f      	bics	r7, r3
 800ebc0:	0039      	movs	r1, r7
 800ebc2:	c90c      	ldmia	r1!, {r2, r3}
 800ebc4:	9200      	str	r2, [sp, #0]
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	9104      	str	r1, [sp, #16]
 800ebca:	4bcc      	ldr	r3, [pc, #816]	; (800eefc <_vfiprintf_r+0x72c>)
 800ebcc:	401c      	ands	r4, r3
 800ebce:	2300      	movs	r3, #0
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	aa12      	add	r2, sp, #72	; 0x48
 800ebd4:	e7a6      	b.n	800eb24 <_vfiprintf_r+0x354>
 800ebd6:	003a      	movs	r2, r7
 800ebd8:	ca08      	ldmia	r2!, {r3}
 800ebda:	0021      	movs	r1, r4
 800ebdc:	9204      	str	r2, [sp, #16]
 800ebde:	2210      	movs	r2, #16
 800ebe0:	4011      	ands	r1, r2
 800ebe2:	4214      	tst	r4, r2
 800ebe4:	d002      	beq.n	800ebec <_vfiprintf_r+0x41c>
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	9001      	str	r0, [sp, #4]
 800ebea:	e7ee      	b.n	800ebca <_vfiprintf_r+0x3fa>
 800ebec:	2240      	movs	r2, #64	; 0x40
 800ebee:	0020      	movs	r0, r4
 800ebf0:	4010      	ands	r0, r2
 800ebf2:	4214      	tst	r4, r2
 800ebf4:	d003      	beq.n	800ebfe <_vfiprintf_r+0x42e>
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	9101      	str	r1, [sp, #4]
 800ebfc:	e7e5      	b.n	800ebca <_vfiprintf_r+0x3fa>
 800ebfe:	2280      	movs	r2, #128	; 0x80
 800ec00:	0021      	movs	r1, r4
 800ec02:	0092      	lsls	r2, r2, #2
 800ec04:	4011      	ands	r1, r2
 800ec06:	4214      	tst	r4, r2
 800ec08:	d0f6      	beq.n	800ebf8 <_vfiprintf_r+0x428>
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	e7eb      	b.n	800ebe6 <_vfiprintf_r+0x416>
 800ec0e:	003b      	movs	r3, r7
 800ec10:	cb04      	ldmia	r3!, {r2}
 800ec12:	49bb      	ldr	r1, [pc, #748]	; (800ef00 <_vfiprintf_r+0x730>)
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	2300      	movs	r3, #0
 800ec18:	9200      	str	r2, [sp, #0]
 800ec1a:	aa13      	add	r2, sp, #76	; 0x4c
 800ec1c:	8011      	strh	r1, [r2, #0]
 800ec1e:	4ab9      	ldr	r2, [pc, #740]	; (800ef04 <_vfiprintf_r+0x734>)
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	3302      	adds	r3, #2
 800ec24:	431c      	orrs	r4, r3
 800ec26:	920c      	str	r2, [sp, #48]	; 0x30
 800ec28:	e7d2      	b.n	800ebd0 <_vfiprintf_r+0x400>
 800ec2a:	003b      	movs	r3, r7
 800ec2c:	2700      	movs	r7, #0
 800ec2e:	cb40      	ldmia	r3!, {r6}
 800ec30:	9304      	str	r3, [sp, #16]
 800ec32:	ab12      	add	r3, sp, #72	; 0x48
 800ec34:	70df      	strb	r7, [r3, #3]
 800ec36:	9b05      	ldr	r3, [sp, #20]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	d100      	bne.n	800ec3e <_vfiprintf_r+0x46e>
 800ec3c:	e0ea      	b.n	800ee14 <_vfiprintf_r+0x644>
 800ec3e:	0039      	movs	r1, r7
 800ec40:	0030      	movs	r0, r6
 800ec42:	9a05      	ldr	r2, [sp, #20]
 800ec44:	f7fe f92e 	bl	800cea4 <memchr>
 800ec48:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec4a:	42b8      	cmp	r0, r7
 800ec4c:	d002      	beq.n	800ec54 <_vfiprintf_r+0x484>
 800ec4e:	1b83      	subs	r3, r0, r6
 800ec50:	9305      	str	r3, [sp, #20]
 800ec52:	970b      	str	r7, [sp, #44]	; 0x2c
 800ec54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec56:	9a05      	ldr	r2, [sp, #20]
 800ec58:	930a      	str	r3, [sp, #40]	; 0x28
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	da00      	bge.n	800ec60 <_vfiprintf_r+0x490>
 800ec5e:	920a      	str	r2, [sp, #40]	; 0x28
 800ec60:	ab12      	add	r3, sp, #72	; 0x48
 800ec62:	3303      	adds	r3, #3
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	1e5a      	subs	r2, r3, #1
 800ec68:	4193      	sbcs	r3, r2
 800ec6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec6c:	18d3      	adds	r3, r2, r3
 800ec6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec70:	0022      	movs	r2, r4
 800ec72:	2302      	movs	r3, #2
 800ec74:	401a      	ands	r2, r3
 800ec76:	9210      	str	r2, [sp, #64]	; 0x40
 800ec78:	421c      	tst	r4, r3
 800ec7a:	d002      	beq.n	800ec82 <_vfiprintf_r+0x4b2>
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7e:	3302      	adds	r3, #2
 800ec80:	930a      	str	r3, [sp, #40]	; 0x28
 800ec82:	2384      	movs	r3, #132	; 0x84
 800ec84:	0022      	movs	r2, r4
 800ec86:	401a      	ands	r2, r3
 800ec88:	9211      	str	r2, [sp, #68]	; 0x44
 800ec8a:	421c      	tst	r4, r3
 800ec8c:	d11e      	bne.n	800eccc <_vfiprintf_r+0x4fc>
 800ec8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec92:	1a9f      	subs	r7, r3, r2
 800ec94:	2f00      	cmp	r7, #0
 800ec96:	dd19      	ble.n	800eccc <_vfiprintf_r+0x4fc>
 800ec98:	0029      	movs	r1, r5
 800ec9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec9c:	489a      	ldr	r0, [pc, #616]	; (800ef08 <_vfiprintf_r+0x738>)
 800ec9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eca0:	3301      	adds	r3, #1
 800eca2:	3108      	adds	r1, #8
 800eca4:	6028      	str	r0, [r5, #0]
 800eca6:	2f10      	cmp	r7, #16
 800eca8:	dd00      	ble.n	800ecac <_vfiprintf_r+0x4dc>
 800ecaa:	e1a7      	b.n	800effc <_vfiprintf_r+0x82c>
 800ecac:	606f      	str	r7, [r5, #4]
 800ecae:	18bf      	adds	r7, r7, r2
 800ecb0:	000d      	movs	r5, r1
 800ecb2:	9716      	str	r7, [sp, #88]	; 0x58
 800ecb4:	9315      	str	r3, [sp, #84]	; 0x54
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	dd08      	ble.n	800eccc <_vfiprintf_r+0x4fc>
 800ecba:	9903      	ldr	r1, [sp, #12]
 800ecbc:	9806      	ldr	r0, [sp, #24]
 800ecbe:	aa14      	add	r2, sp, #80	; 0x50
 800ecc0:	f7ff fd51 	bl	800e766 <__sprint_r>
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d000      	beq.n	800ecca <_vfiprintf_r+0x4fa>
 800ecc8:	e1eb      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800ecca:	ad17      	add	r5, sp, #92	; 0x5c
 800eccc:	a912      	add	r1, sp, #72	; 0x48
 800ecce:	78c8      	ldrb	r0, [r1, #3]
 800ecd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ecd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecd4:	3103      	adds	r1, #3
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d012      	beq.n	800ed00 <_vfiprintf_r+0x530>
 800ecda:	6029      	str	r1, [r5, #0]
 800ecdc:	2101      	movs	r1, #1
 800ecde:	3301      	adds	r3, #1
 800ece0:	1852      	adds	r2, r2, r1
 800ece2:	6069      	str	r1, [r5, #4]
 800ece4:	9216      	str	r2, [sp, #88]	; 0x58
 800ece6:	9315      	str	r3, [sp, #84]	; 0x54
 800ece8:	3508      	adds	r5, #8
 800ecea:	2b07      	cmp	r3, #7
 800ecec:	dd08      	ble.n	800ed00 <_vfiprintf_r+0x530>
 800ecee:	9903      	ldr	r1, [sp, #12]
 800ecf0:	9806      	ldr	r0, [sp, #24]
 800ecf2:	aa14      	add	r2, sp, #80	; 0x50
 800ecf4:	f7ff fd37 	bl	800e766 <__sprint_r>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d000      	beq.n	800ecfe <_vfiprintf_r+0x52e>
 800ecfc:	e1d1      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800ecfe:	ad17      	add	r5, sp, #92	; 0x5c
 800ed00:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ed02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed06:	2900      	cmp	r1, #0
 800ed08:	d013      	beq.n	800ed32 <_vfiprintf_r+0x562>
 800ed0a:	a913      	add	r1, sp, #76	; 0x4c
 800ed0c:	6029      	str	r1, [r5, #0]
 800ed0e:	2102      	movs	r1, #2
 800ed10:	3301      	adds	r3, #1
 800ed12:	1852      	adds	r2, r2, r1
 800ed14:	6069      	str	r1, [r5, #4]
 800ed16:	9216      	str	r2, [sp, #88]	; 0x58
 800ed18:	9315      	str	r3, [sp, #84]	; 0x54
 800ed1a:	3508      	adds	r5, #8
 800ed1c:	2b07      	cmp	r3, #7
 800ed1e:	dd08      	ble.n	800ed32 <_vfiprintf_r+0x562>
 800ed20:	9903      	ldr	r1, [sp, #12]
 800ed22:	9806      	ldr	r0, [sp, #24]
 800ed24:	aa14      	add	r2, sp, #80	; 0x50
 800ed26:	f7ff fd1e 	bl	800e766 <__sprint_r>
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d000      	beq.n	800ed30 <_vfiprintf_r+0x560>
 800ed2e:	e1b8      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800ed30:	ad17      	add	r5, sp, #92	; 0x5c
 800ed32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed34:	2b80      	cmp	r3, #128	; 0x80
 800ed36:	d11e      	bne.n	800ed76 <_vfiprintf_r+0x5a6>
 800ed38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed3c:	1a9f      	subs	r7, r3, r2
 800ed3e:	2f00      	cmp	r7, #0
 800ed40:	dd19      	ble.n	800ed76 <_vfiprintf_r+0x5a6>
 800ed42:	0029      	movs	r1, r5
 800ed44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed46:	4871      	ldr	r0, [pc, #452]	; (800ef0c <_vfiprintf_r+0x73c>)
 800ed48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	3108      	adds	r1, #8
 800ed4e:	6028      	str	r0, [r5, #0]
 800ed50:	2f10      	cmp	r7, #16
 800ed52:	dd00      	ble.n	800ed56 <_vfiprintf_r+0x586>
 800ed54:	e164      	b.n	800f020 <_vfiprintf_r+0x850>
 800ed56:	606f      	str	r7, [r5, #4]
 800ed58:	18bf      	adds	r7, r7, r2
 800ed5a:	000d      	movs	r5, r1
 800ed5c:	9716      	str	r7, [sp, #88]	; 0x58
 800ed5e:	9315      	str	r3, [sp, #84]	; 0x54
 800ed60:	2b07      	cmp	r3, #7
 800ed62:	dd08      	ble.n	800ed76 <_vfiprintf_r+0x5a6>
 800ed64:	9903      	ldr	r1, [sp, #12]
 800ed66:	9806      	ldr	r0, [sp, #24]
 800ed68:	aa14      	add	r2, sp, #80	; 0x50
 800ed6a:	f7ff fcfc 	bl	800e766 <__sprint_r>
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d000      	beq.n	800ed74 <_vfiprintf_r+0x5a4>
 800ed72:	e196      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800ed74:	ad17      	add	r5, sp, #92	; 0x5c
 800ed76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed78:	9a05      	ldr	r2, [sp, #20]
 800ed7a:	1a9f      	subs	r7, r3, r2
 800ed7c:	2f00      	cmp	r7, #0
 800ed7e:	dd19      	ble.n	800edb4 <_vfiprintf_r+0x5e4>
 800ed80:	0029      	movs	r1, r5
 800ed82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed84:	4861      	ldr	r0, [pc, #388]	; (800ef0c <_vfiprintf_r+0x73c>)
 800ed86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed88:	3301      	adds	r3, #1
 800ed8a:	3108      	adds	r1, #8
 800ed8c:	6028      	str	r0, [r5, #0]
 800ed8e:	2f10      	cmp	r7, #16
 800ed90:	dd00      	ble.n	800ed94 <_vfiprintf_r+0x5c4>
 800ed92:	e157      	b.n	800f044 <_vfiprintf_r+0x874>
 800ed94:	606f      	str	r7, [r5, #4]
 800ed96:	18bf      	adds	r7, r7, r2
 800ed98:	000d      	movs	r5, r1
 800ed9a:	9716      	str	r7, [sp, #88]	; 0x58
 800ed9c:	9315      	str	r3, [sp, #84]	; 0x54
 800ed9e:	2b07      	cmp	r3, #7
 800eda0:	dd08      	ble.n	800edb4 <_vfiprintf_r+0x5e4>
 800eda2:	9903      	ldr	r1, [sp, #12]
 800eda4:	9806      	ldr	r0, [sp, #24]
 800eda6:	aa14      	add	r2, sp, #80	; 0x50
 800eda8:	f7ff fcdd 	bl	800e766 <__sprint_r>
 800edac:	2800      	cmp	r0, #0
 800edae:	d000      	beq.n	800edb2 <_vfiprintf_r+0x5e2>
 800edb0:	e177      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800edb2:	ad17      	add	r5, sp, #92	; 0x5c
 800edb4:	9b05      	ldr	r3, [sp, #20]
 800edb6:	9a05      	ldr	r2, [sp, #20]
 800edb8:	606b      	str	r3, [r5, #4]
 800edba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800edbc:	602e      	str	r6, [r5, #0]
 800edbe:	189b      	adds	r3, r3, r2
 800edc0:	9316      	str	r3, [sp, #88]	; 0x58
 800edc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edc4:	3508      	adds	r5, #8
 800edc6:	3301      	adds	r3, #1
 800edc8:	9315      	str	r3, [sp, #84]	; 0x54
 800edca:	2b07      	cmp	r3, #7
 800edcc:	dd08      	ble.n	800ede0 <_vfiprintf_r+0x610>
 800edce:	9903      	ldr	r1, [sp, #12]
 800edd0:	9806      	ldr	r0, [sp, #24]
 800edd2:	aa14      	add	r2, sp, #80	; 0x50
 800edd4:	f7ff fcc7 	bl	800e766 <__sprint_r>
 800edd8:	2800      	cmp	r0, #0
 800edda:	d000      	beq.n	800edde <_vfiprintf_r+0x60e>
 800eddc:	e161      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800edde:	ad17      	add	r5, sp, #92	; 0x5c
 800ede0:	0764      	lsls	r4, r4, #29
 800ede2:	d500      	bpl.n	800ede6 <_vfiprintf_r+0x616>
 800ede4:	e140      	b.n	800f068 <_vfiprintf_r+0x898>
 800ede6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ede8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edea:	4293      	cmp	r3, r2
 800edec:	da00      	bge.n	800edf0 <_vfiprintf_r+0x620>
 800edee:	0013      	movs	r3, r2
 800edf0:	9a08      	ldr	r2, [sp, #32]
 800edf2:	18d3      	adds	r3, r2, r3
 800edf4:	9308      	str	r3, [sp, #32]
 800edf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d007      	beq.n	800ee0c <_vfiprintf_r+0x63c>
 800edfc:	9903      	ldr	r1, [sp, #12]
 800edfe:	9806      	ldr	r0, [sp, #24]
 800ee00:	aa14      	add	r2, sp, #80	; 0x50
 800ee02:	f7ff fcb0 	bl	800e766 <__sprint_r>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d000      	beq.n	800ee0c <_vfiprintf_r+0x63c>
 800ee0a:	e14a      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	ad17      	add	r5, sp, #92	; 0x5c
 800ee10:	9315      	str	r3, [sp, #84]	; 0x54
 800ee12:	e6b7      	b.n	800eb84 <_vfiprintf_r+0x3b4>
 800ee14:	0030      	movs	r0, r6
 800ee16:	f7f1 f975 	bl	8000104 <strlen>
 800ee1a:	9005      	str	r0, [sp, #20]
 800ee1c:	e719      	b.n	800ec52 <_vfiprintf_r+0x482>
 800ee1e:	2310      	movs	r3, #16
 800ee20:	431c      	orrs	r4, r3
 800ee22:	2320      	movs	r3, #32
 800ee24:	0020      	movs	r0, r4
 800ee26:	4018      	ands	r0, r3
 800ee28:	421c      	tst	r4, r3
 800ee2a:	d009      	beq.n	800ee40 <_vfiprintf_r+0x670>
 800ee2c:	3b19      	subs	r3, #25
 800ee2e:	3707      	adds	r7, #7
 800ee30:	439f      	bics	r7, r3
 800ee32:	0039      	movs	r1, r7
 800ee34:	c90c      	ldmia	r1!, {r2, r3}
 800ee36:	9200      	str	r2, [sp, #0]
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	9104      	str	r1, [sp, #16]
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	e6c7      	b.n	800ebd0 <_vfiprintf_r+0x400>
 800ee40:	003b      	movs	r3, r7
 800ee42:	cb04      	ldmia	r3!, {r2}
 800ee44:	0021      	movs	r1, r4
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	2310      	movs	r3, #16
 800ee4a:	4019      	ands	r1, r3
 800ee4c:	421c      	tst	r4, r3
 800ee4e:	d003      	beq.n	800ee58 <_vfiprintf_r+0x688>
 800ee50:	9200      	str	r2, [sp, #0]
 800ee52:	9001      	str	r0, [sp, #4]
 800ee54:	3b0f      	subs	r3, #15
 800ee56:	e6bb      	b.n	800ebd0 <_vfiprintf_r+0x400>
 800ee58:	2340      	movs	r3, #64	; 0x40
 800ee5a:	0020      	movs	r0, r4
 800ee5c:	4018      	ands	r0, r3
 800ee5e:	421c      	tst	r4, r3
 800ee60:	d003      	beq.n	800ee6a <_vfiprintf_r+0x69a>
 800ee62:	b293      	uxth	r3, r2
 800ee64:	9300      	str	r3, [sp, #0]
 800ee66:	9101      	str	r1, [sp, #4]
 800ee68:	e7e8      	b.n	800ee3c <_vfiprintf_r+0x66c>
 800ee6a:	2380      	movs	r3, #128	; 0x80
 800ee6c:	0021      	movs	r1, r4
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4019      	ands	r1, r3
 800ee72:	421c      	tst	r4, r3
 800ee74:	d003      	beq.n	800ee7e <_vfiprintf_r+0x6ae>
 800ee76:	b2d3      	uxtb	r3, r2
 800ee78:	9300      	str	r3, [sp, #0]
 800ee7a:	9001      	str	r0, [sp, #4]
 800ee7c:	e7de      	b.n	800ee3c <_vfiprintf_r+0x66c>
 800ee7e:	9200      	str	r2, [sp, #0]
 800ee80:	e7f1      	b.n	800ee66 <_vfiprintf_r+0x696>
 800ee82:	4a23      	ldr	r2, [pc, #140]	; (800ef10 <_vfiprintf_r+0x740>)
 800ee84:	0020      	movs	r0, r4
 800ee86:	920c      	str	r2, [sp, #48]	; 0x30
 800ee88:	2220      	movs	r2, #32
 800ee8a:	4010      	ands	r0, r2
 800ee8c:	4214      	tst	r4, r2
 800ee8e:	d019      	beq.n	800eec4 <_vfiprintf_r+0x6f4>
 800ee90:	3a19      	subs	r2, #25
 800ee92:	3707      	adds	r7, #7
 800ee94:	4397      	bics	r7, r2
 800ee96:	0038      	movs	r0, r7
 800ee98:	c806      	ldmia	r0!, {r1, r2}
 800ee9a:	9100      	str	r1, [sp, #0]
 800ee9c:	9201      	str	r2, [sp, #4]
 800ee9e:	9004      	str	r0, [sp, #16]
 800eea0:	07e2      	lsls	r2, r4, #31
 800eea2:	d509      	bpl.n	800eeb8 <_vfiprintf_r+0x6e8>
 800eea4:	9a00      	ldr	r2, [sp, #0]
 800eea6:	9901      	ldr	r1, [sp, #4]
 800eea8:	430a      	orrs	r2, r1
 800eeaa:	d005      	beq.n	800eeb8 <_vfiprintf_r+0x6e8>
 800eeac:	aa13      	add	r2, sp, #76	; 0x4c
 800eeae:	2130      	movs	r1, #48	; 0x30
 800eeb0:	7053      	strb	r3, [r2, #1]
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	7011      	strb	r1, [r2, #0]
 800eeb6:	431c      	orrs	r4, r3
 800eeb8:	4b10      	ldr	r3, [pc, #64]	; (800eefc <_vfiprintf_r+0x72c>)
 800eeba:	401c      	ands	r4, r3
 800eebc:	2302      	movs	r3, #2
 800eebe:	e687      	b.n	800ebd0 <_vfiprintf_r+0x400>
 800eec0:	4a10      	ldr	r2, [pc, #64]	; (800ef04 <_vfiprintf_r+0x734>)
 800eec2:	e7df      	b.n	800ee84 <_vfiprintf_r+0x6b4>
 800eec4:	0039      	movs	r1, r7
 800eec6:	c904      	ldmia	r1!, {r2}
 800eec8:	0026      	movs	r6, r4
 800eeca:	9104      	str	r1, [sp, #16]
 800eecc:	2110      	movs	r1, #16
 800eece:	400e      	ands	r6, r1
 800eed0:	420c      	tst	r4, r1
 800eed2:	d002      	beq.n	800eeda <_vfiprintf_r+0x70a>
 800eed4:	9200      	str	r2, [sp, #0]
 800eed6:	9001      	str	r0, [sp, #4]
 800eed8:	e7e2      	b.n	800eea0 <_vfiprintf_r+0x6d0>
 800eeda:	2140      	movs	r1, #64	; 0x40
 800eedc:	0020      	movs	r0, r4
 800eede:	4008      	ands	r0, r1
 800eee0:	420c      	tst	r4, r1
 800eee2:	d003      	beq.n	800eeec <_vfiprintf_r+0x71c>
 800eee4:	b292      	uxth	r2, r2
 800eee6:	9200      	str	r2, [sp, #0]
 800eee8:	9601      	str	r6, [sp, #4]
 800eeea:	e7d9      	b.n	800eea0 <_vfiprintf_r+0x6d0>
 800eeec:	2180      	movs	r1, #128	; 0x80
 800eeee:	0026      	movs	r6, r4
 800eef0:	0089      	lsls	r1, r1, #2
 800eef2:	400e      	ands	r6, r1
 800eef4:	420c      	tst	r4, r1
 800eef6:	d0f6      	beq.n	800eee6 <_vfiprintf_r+0x716>
 800eef8:	b2d2      	uxtb	r2, r2
 800eefa:	e7eb      	b.n	800eed4 <_vfiprintf_r+0x704>
 800eefc:	fffffbff 	.word	0xfffffbff
 800ef00:	00007830 	.word	0x00007830
 800ef04:	0800ffc4 	.word	0x0800ffc4
 800ef08:	080100d1 	.word	0x080100d1
 800ef0c:	080100e1 	.word	0x080100e1
 800ef10:	0800ffd5 	.word	0x0800ffd5
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d109      	bne.n	800ef2e <_vfiprintf_r+0x75e>
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	2b09      	cmp	r3, #9
 800ef1e:	d806      	bhi.n	800ef2e <_vfiprintf_r+0x75e>
 800ef20:	26b7      	movs	r6, #183	; 0xb7
 800ef22:	ab12      	add	r3, sp, #72	; 0x48
 800ef24:	18f6      	adds	r6, r6, r3
 800ef26:	9b00      	ldr	r3, [sp, #0]
 800ef28:	3330      	adds	r3, #48	; 0x30
 800ef2a:	7033      	strb	r3, [r6, #0]
 800ef2c:	e115      	b.n	800f15a <_vfiprintf_r+0x98a>
 800ef2e:	2380      	movs	r3, #128	; 0x80
 800ef30:	2400      	movs	r4, #0
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	403b      	ands	r3, r7
 800ef36:	ae40      	add	r6, sp, #256	; 0x100
 800ef38:	930a      	str	r3, [sp, #40]	; 0x28
 800ef3a:	220a      	movs	r2, #10
 800ef3c:	9800      	ldr	r0, [sp, #0]
 800ef3e:	9901      	ldr	r1, [sp, #4]
 800ef40:	2300      	movs	r3, #0
 800ef42:	f7f1 faaf 	bl	80004a4 <__aeabi_uldivmod>
 800ef46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef48:	3e01      	subs	r6, #1
 800ef4a:	3230      	adds	r2, #48	; 0x30
 800ef4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef4e:	9110      	str	r1, [sp, #64]	; 0x40
 800ef50:	7032      	strb	r2, [r6, #0]
 800ef52:	3401      	adds	r4, #1
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d01a      	beq.n	800ef8e <_vfiprintf_r+0x7be>
 800ef58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	42a3      	cmp	r3, r4
 800ef5e:	d116      	bne.n	800ef8e <_vfiprintf_r+0x7be>
 800ef60:	2cff      	cmp	r4, #255	; 0xff
 800ef62:	d014      	beq.n	800ef8e <_vfiprintf_r+0x7be>
 800ef64:	9b01      	ldr	r3, [sp, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d102      	bne.n	800ef70 <_vfiprintf_r+0x7a0>
 800ef6a:	9b00      	ldr	r3, [sp, #0]
 800ef6c:	2b09      	cmp	r3, #9
 800ef6e:	d90e      	bls.n	800ef8e <_vfiprintf_r+0x7be>
 800ef70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ef74:	1af6      	subs	r6, r6, r3
 800ef76:	001a      	movs	r2, r3
 800ef78:	0030      	movs	r0, r6
 800ef7a:	f7f9 ffe6 	bl	8008f4a <strncpy>
 800ef7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef80:	2400      	movs	r4, #0
 800ef82:	785b      	ldrb	r3, [r3, #1]
 800ef84:	1e5a      	subs	r2, r3, #1
 800ef86:	4193      	sbcs	r3, r2
 800ef88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef8a:	18d3      	adds	r3, r2, r3
 800ef8c:	930d      	str	r3, [sp, #52]	; 0x34
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d103      	bne.n	800ef9c <_vfiprintf_r+0x7cc>
 800ef94:	9b00      	ldr	r3, [sp, #0]
 800ef96:	2b09      	cmp	r3, #9
 800ef98:	d800      	bhi.n	800ef9c <_vfiprintf_r+0x7cc>
 800ef9a:	e0de      	b.n	800f15a <_vfiprintf_r+0x98a>
 800ef9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	e7c9      	b.n	800ef3a <_vfiprintf_r+0x76a>
 800efa6:	200f      	movs	r0, #15
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efac:	4003      	ands	r3, r0
 800efae:	5cd3      	ldrb	r3, [r2, r3]
 800efb0:	3e01      	subs	r6, #1
 800efb2:	7033      	strb	r3, [r6, #0]
 800efb4:	9b01      	ldr	r3, [sp, #4]
 800efb6:	0719      	lsls	r1, r3, #28
 800efb8:	9b00      	ldr	r3, [sp, #0]
 800efba:	091a      	lsrs	r2, r3, #4
 800efbc:	9b01      	ldr	r3, [sp, #4]
 800efbe:	4311      	orrs	r1, r2
 800efc0:	091b      	lsrs	r3, r3, #4
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	000b      	movs	r3, r1
 800efc6:	9a01      	ldr	r2, [sp, #4]
 800efc8:	9100      	str	r1, [sp, #0]
 800efca:	4313      	orrs	r3, r2
 800efcc:	d1ec      	bne.n	800efa8 <_vfiprintf_r+0x7d8>
 800efce:	e0c4      	b.n	800f15a <_vfiprintf_r+0x98a>
 800efd0:	ae40      	add	r6, sp, #256	; 0x100
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d000      	beq.n	800efd8 <_vfiprintf_r+0x808>
 800efd6:	e0c0      	b.n	800f15a <_vfiprintf_r+0x98a>
 800efd8:	07e4      	lsls	r4, r4, #31
 800efda:	d400      	bmi.n	800efde <_vfiprintf_r+0x80e>
 800efdc:	e0bd      	b.n	800f15a <_vfiprintf_r+0x98a>
 800efde:	26b7      	movs	r6, #183	; 0xb7
 800efe0:	ab12      	add	r3, sp, #72	; 0x48
 800efe2:	18f6      	adds	r6, r6, r3
 800efe4:	2330      	movs	r3, #48	; 0x30
 800efe6:	e7a0      	b.n	800ef2a <_vfiprintf_r+0x75a>
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d100      	bne.n	800efee <_vfiprintf_r+0x81e>
 800efec:	e07e      	b.n	800f0ec <_vfiprintf_r+0x91c>
 800efee:	ae27      	add	r6, sp, #156	; 0x9c
 800eff0:	7033      	strb	r3, [r6, #0]
 800eff2:	2300      	movs	r3, #0
 800eff4:	aa12      	add	r2, sp, #72	; 0x48
 800eff6:	70d3      	strb	r3, [r2, #3]
 800eff8:	9704      	str	r7, [sp, #16]
 800effa:	e576      	b.n	800eaea <_vfiprintf_r+0x31a>
 800effc:	2010      	movs	r0, #16
 800effe:	1812      	adds	r2, r2, r0
 800f000:	6068      	str	r0, [r5, #4]
 800f002:	9216      	str	r2, [sp, #88]	; 0x58
 800f004:	9315      	str	r3, [sp, #84]	; 0x54
 800f006:	2b07      	cmp	r3, #7
 800f008:	dd07      	ble.n	800f01a <_vfiprintf_r+0x84a>
 800f00a:	9903      	ldr	r1, [sp, #12]
 800f00c:	9806      	ldr	r0, [sp, #24]
 800f00e:	aa14      	add	r2, sp, #80	; 0x50
 800f010:	f7ff fba9 	bl	800e766 <__sprint_r>
 800f014:	2800      	cmp	r0, #0
 800f016:	d144      	bne.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f018:	a917      	add	r1, sp, #92	; 0x5c
 800f01a:	000d      	movs	r5, r1
 800f01c:	3f10      	subs	r7, #16
 800f01e:	e63b      	b.n	800ec98 <_vfiprintf_r+0x4c8>
 800f020:	2010      	movs	r0, #16
 800f022:	1812      	adds	r2, r2, r0
 800f024:	6068      	str	r0, [r5, #4]
 800f026:	9216      	str	r2, [sp, #88]	; 0x58
 800f028:	9315      	str	r3, [sp, #84]	; 0x54
 800f02a:	2b07      	cmp	r3, #7
 800f02c:	dd07      	ble.n	800f03e <_vfiprintf_r+0x86e>
 800f02e:	9903      	ldr	r1, [sp, #12]
 800f030:	9806      	ldr	r0, [sp, #24]
 800f032:	aa14      	add	r2, sp, #80	; 0x50
 800f034:	f7ff fb97 	bl	800e766 <__sprint_r>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d132      	bne.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f03c:	a917      	add	r1, sp, #92	; 0x5c
 800f03e:	000d      	movs	r5, r1
 800f040:	3f10      	subs	r7, #16
 800f042:	e67e      	b.n	800ed42 <_vfiprintf_r+0x572>
 800f044:	2010      	movs	r0, #16
 800f046:	1812      	adds	r2, r2, r0
 800f048:	6068      	str	r0, [r5, #4]
 800f04a:	9216      	str	r2, [sp, #88]	; 0x58
 800f04c:	9315      	str	r3, [sp, #84]	; 0x54
 800f04e:	2b07      	cmp	r3, #7
 800f050:	dd07      	ble.n	800f062 <_vfiprintf_r+0x892>
 800f052:	9903      	ldr	r1, [sp, #12]
 800f054:	9806      	ldr	r0, [sp, #24]
 800f056:	aa14      	add	r2, sp, #80	; 0x50
 800f058:	f7ff fb85 	bl	800e766 <__sprint_r>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d120      	bne.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f060:	a917      	add	r1, sp, #92	; 0x5c
 800f062:	000d      	movs	r5, r1
 800f064:	3f10      	subs	r7, #16
 800f066:	e68b      	b.n	800ed80 <_vfiprintf_r+0x5b0>
 800f068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f06a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f06c:	2610      	movs	r6, #16
 800f06e:	1a9c      	subs	r4, r3, r2
 800f070:	2c00      	cmp	r4, #0
 800f072:	dc00      	bgt.n	800f076 <_vfiprintf_r+0x8a6>
 800f074:	e6b7      	b.n	800ede6 <_vfiprintf_r+0x616>
 800f076:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f078:	4a3b      	ldr	r2, [pc, #236]	; (800f168 <_vfiprintf_r+0x998>)
 800f07a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f07c:	3101      	adds	r1, #1
 800f07e:	602a      	str	r2, [r5, #0]
 800f080:	2c10      	cmp	r4, #16
 800f082:	dc22      	bgt.n	800f0ca <_vfiprintf_r+0x8fa>
 800f084:	606c      	str	r4, [r5, #4]
 800f086:	18e4      	adds	r4, r4, r3
 800f088:	9416      	str	r4, [sp, #88]	; 0x58
 800f08a:	9115      	str	r1, [sp, #84]	; 0x54
 800f08c:	2907      	cmp	r1, #7
 800f08e:	dc00      	bgt.n	800f092 <_vfiprintf_r+0x8c2>
 800f090:	e6a9      	b.n	800ede6 <_vfiprintf_r+0x616>
 800f092:	9903      	ldr	r1, [sp, #12]
 800f094:	9806      	ldr	r0, [sp, #24]
 800f096:	aa14      	add	r2, sp, #80	; 0x50
 800f098:	f7ff fb65 	bl	800e766 <__sprint_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d100      	bne.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f0a0:	e6a1      	b.n	800ede6 <_vfiprintf_r+0x616>
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0a6:	07db      	lsls	r3, r3, #31
 800f0a8:	d407      	bmi.n	800f0ba <_vfiprintf_r+0x8ea>
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	899b      	ldrh	r3, [r3, #12]
 800f0ae:	059b      	lsls	r3, r3, #22
 800f0b0:	d403      	bmi.n	800f0ba <_vfiprintf_r+0x8ea>
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800f0b6:	f7fa f808 	bl	80090ca <__retarget_lock_release_recursive>
 800f0ba:	9b03      	ldr	r3, [sp, #12]
 800f0bc:	899b      	ldrh	r3, [r3, #12]
 800f0be:	065b      	lsls	r3, r3, #25
 800f0c0:	d401      	bmi.n	800f0c6 <_vfiprintf_r+0x8f6>
 800f0c2:	f7ff fbc3 	bl	800e84c <_vfiprintf_r+0x7c>
 800f0c6:	f7ff fbbe 	bl	800e846 <_vfiprintf_r+0x76>
 800f0ca:	3310      	adds	r3, #16
 800f0cc:	606e      	str	r6, [r5, #4]
 800f0ce:	9316      	str	r3, [sp, #88]	; 0x58
 800f0d0:	9115      	str	r1, [sp, #84]	; 0x54
 800f0d2:	3508      	adds	r5, #8
 800f0d4:	2907      	cmp	r1, #7
 800f0d6:	dd07      	ble.n	800f0e8 <_vfiprintf_r+0x918>
 800f0d8:	9903      	ldr	r1, [sp, #12]
 800f0da:	9806      	ldr	r0, [sp, #24]
 800f0dc:	aa14      	add	r2, sp, #80	; 0x50
 800f0de:	f7ff fb42 	bl	800e766 <__sprint_r>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	d1dd      	bne.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f0e6:	ad17      	add	r5, sp, #92	; 0x5c
 800f0e8:	3c10      	subs	r4, #16
 800f0ea:	e7c4      	b.n	800f076 <_vfiprintf_r+0x8a6>
 800f0ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d102      	bne.n	800f0f8 <_vfiprintf_r+0x928>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	9315      	str	r3, [sp, #84]	; 0x54
 800f0f6:	e7d4      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f0f8:	9903      	ldr	r1, [sp, #12]
 800f0fa:	9806      	ldr	r0, [sp, #24]
 800f0fc:	aa14      	add	r2, sp, #80	; 0x50
 800f0fe:	f7ff fb32 	bl	800e766 <__sprint_r>
 800f102:	2800      	cmp	r0, #0
 800f104:	d0f5      	beq.n	800f0f2 <_vfiprintf_r+0x922>
 800f106:	e7cc      	b.n	800f0a2 <_vfiprintf_r+0x8d2>
 800f108:	0027      	movs	r7, r4
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d100      	bne.n	800f110 <_vfiprintf_r+0x940>
 800f10e:	e51b      	b.n	800eb48 <_vfiprintf_r+0x378>
 800f110:	2b01      	cmp	r3, #1
 800f112:	d100      	bne.n	800f116 <_vfiprintf_r+0x946>
 800f114:	e6fe      	b.n	800ef14 <_vfiprintf_r+0x744>
 800f116:	ae40      	add	r6, sp, #256	; 0x100
 800f118:	2b02      	cmp	r3, #2
 800f11a:	d100      	bne.n	800f11e <_vfiprintf_r+0x94e>
 800f11c:	e743      	b.n	800efa6 <_vfiprintf_r+0x7d6>
 800f11e:	2307      	movs	r3, #7
 800f120:	469c      	mov	ip, r3
 800f122:	4663      	mov	r3, ip
 800f124:	9900      	ldr	r1, [sp, #0]
 800f126:	0032      	movs	r2, r6
 800f128:	400b      	ands	r3, r1
 800f12a:	9901      	ldr	r1, [sp, #4]
 800f12c:	3e01      	subs	r6, #1
 800f12e:	074c      	lsls	r4, r1, #29
 800f130:	9900      	ldr	r1, [sp, #0]
 800f132:	3330      	adds	r3, #48	; 0x30
 800f134:	08c8      	lsrs	r0, r1, #3
 800f136:	9901      	ldr	r1, [sp, #4]
 800f138:	4304      	orrs	r4, r0
 800f13a:	08c9      	lsrs	r1, r1, #3
 800f13c:	9101      	str	r1, [sp, #4]
 800f13e:	0021      	movs	r1, r4
 800f140:	9801      	ldr	r0, [sp, #4]
 800f142:	7033      	strb	r3, [r6, #0]
 800f144:	9400      	str	r4, [sp, #0]
 800f146:	4301      	orrs	r1, r0
 800f148:	d1eb      	bne.n	800f122 <_vfiprintf_r+0x952>
 800f14a:	07f9      	lsls	r1, r7, #31
 800f14c:	d505      	bpl.n	800f15a <_vfiprintf_r+0x98a>
 800f14e:	2b30      	cmp	r3, #48	; 0x30
 800f150:	d003      	beq.n	800f15a <_vfiprintf_r+0x98a>
 800f152:	2330      	movs	r3, #48	; 0x30
 800f154:	3e01      	subs	r6, #1
 800f156:	7033      	strb	r3, [r6, #0]
 800f158:	1e96      	subs	r6, r2, #2
 800f15a:	9b05      	ldr	r3, [sp, #20]
 800f15c:	003c      	movs	r4, r7
 800f15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f160:	ab40      	add	r3, sp, #256	; 0x100
 800f162:	1b9b      	subs	r3, r3, r6
 800f164:	9305      	str	r3, [sp, #20]
 800f166:	e575      	b.n	800ec54 <_vfiprintf_r+0x484>
 800f168:	080100d1 	.word	0x080100d1

0800f16c <__sbprintf>:
 800f16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f16e:	0015      	movs	r5, r2
 800f170:	2202      	movs	r2, #2
 800f172:	4c1e      	ldr	r4, [pc, #120]	; (800f1ec <__sbprintf+0x80>)
 800f174:	001f      	movs	r7, r3
 800f176:	898b      	ldrh	r3, [r1, #12]
 800f178:	44a5      	add	sp, r4
 800f17a:	4393      	bics	r3, r2
 800f17c:	466a      	mov	r2, sp
 800f17e:	8193      	strh	r3, [r2, #12]
 800f180:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f182:	0006      	movs	r6, r0
 800f184:	9319      	str	r3, [sp, #100]	; 0x64
 800f186:	89cb      	ldrh	r3, [r1, #14]
 800f188:	a816      	add	r0, sp, #88	; 0x58
 800f18a:	81d3      	strh	r3, [r2, #14]
 800f18c:	69cb      	ldr	r3, [r1, #28]
 800f18e:	000c      	movs	r4, r1
 800f190:	9307      	str	r3, [sp, #28]
 800f192:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800f194:	9309      	str	r3, [sp, #36]	; 0x24
 800f196:	ab1a      	add	r3, sp, #104	; 0x68
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	9304      	str	r3, [sp, #16]
 800f19c:	2380      	movs	r3, #128	; 0x80
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	9302      	str	r3, [sp, #8]
 800f1a2:	9305      	str	r3, [sp, #20]
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	9306      	str	r3, [sp, #24]
 800f1a8:	f7f9 ff8c 	bl	80090c4 <__retarget_lock_init_recursive>
 800f1ac:	002a      	movs	r2, r5
 800f1ae:	003b      	movs	r3, r7
 800f1b0:	4669      	mov	r1, sp
 800f1b2:	0030      	movs	r0, r6
 800f1b4:	f7ff fb0c 	bl	800e7d0 <_vfiprintf_r>
 800f1b8:	1e05      	subs	r5, r0, #0
 800f1ba:	db07      	blt.n	800f1cc <__sbprintf+0x60>
 800f1bc:	4669      	mov	r1, sp
 800f1be:	0030      	movs	r0, r6
 800f1c0:	f7fd fdf6 	bl	800cdb0 <_fflush_r>
 800f1c4:	2800      	cmp	r0, #0
 800f1c6:	d001      	beq.n	800f1cc <__sbprintf+0x60>
 800f1c8:	2501      	movs	r5, #1
 800f1ca:	426d      	negs	r5, r5
 800f1cc:	466b      	mov	r3, sp
 800f1ce:	899a      	ldrh	r2, [r3, #12]
 800f1d0:	2340      	movs	r3, #64	; 0x40
 800f1d2:	421a      	tst	r2, r3
 800f1d4:	d002      	beq.n	800f1dc <__sbprintf+0x70>
 800f1d6:	89a2      	ldrh	r2, [r4, #12]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	81a3      	strh	r3, [r4, #12]
 800f1dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f1de:	f7f9 ff72 	bl	80090c6 <__retarget_lock_close_recursive>
 800f1e2:	0028      	movs	r0, r5
 800f1e4:	4b02      	ldr	r3, [pc, #8]	; (800f1f0 <__sbprintf+0x84>)
 800f1e6:	449d      	add	sp, r3
 800f1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1ea:	46c0      	nop			; (mov r8, r8)
 800f1ec:	fffffb94 	.word	0xfffffb94
 800f1f0:	0000046c 	.word	0x0000046c

0800f1f4 <__sfvwrite_r>:
 800f1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1f6:	6893      	ldr	r3, [r2, #8]
 800f1f8:	b087      	sub	sp, #28
 800f1fa:	000c      	movs	r4, r1
 800f1fc:	9002      	str	r0, [sp, #8]
 800f1fe:	9204      	str	r2, [sp, #16]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <__sfvwrite_r+0x16>
 800f204:	2000      	movs	r0, #0
 800f206:	b007      	add	sp, #28
 800f208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20a:	898b      	ldrh	r3, [r1, #12]
 800f20c:	071b      	lsls	r3, r3, #28
 800f20e:	d557      	bpl.n	800f2c0 <__sfvwrite_r+0xcc>
 800f210:	690b      	ldr	r3, [r1, #16]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d054      	beq.n	800f2c0 <__sfvwrite_r+0xcc>
 800f216:	9b04      	ldr	r3, [sp, #16]
 800f218:	2202      	movs	r2, #2
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	89a3      	ldrh	r3, [r4, #12]
 800f220:	001f      	movs	r7, r3
 800f222:	4017      	ands	r7, r2
 800f224:	4213      	tst	r3, r2
 800f226:	d171      	bne.n	800f30c <__sfvwrite_r+0x118>
 800f228:	2201      	movs	r2, #1
 800f22a:	2101      	movs	r1, #1
 800f22c:	401a      	ands	r2, r3
 800f22e:	420b      	tst	r3, r1
 800f230:	d100      	bne.n	800f234 <__sfvwrite_r+0x40>
 800f232:	e0a5      	b.n	800f380 <__sfvwrite_r+0x18c>
 800f234:	0038      	movs	r0, r7
 800f236:	003e      	movs	r6, r7
 800f238:	9703      	str	r7, [sp, #12]
 800f23a:	9b03      	ldr	r3, [sp, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d100      	bne.n	800f242 <__sfvwrite_r+0x4e>
 800f240:	e10b      	b.n	800f45a <__sfvwrite_r+0x266>
 800f242:	2800      	cmp	r0, #0
 800f244:	d10a      	bne.n	800f25c <__sfvwrite_r+0x68>
 800f246:	001a      	movs	r2, r3
 800f248:	210a      	movs	r1, #10
 800f24a:	0030      	movs	r0, r6
 800f24c:	f7fd fe2a 	bl	800cea4 <memchr>
 800f250:	9b03      	ldr	r3, [sp, #12]
 800f252:	1c5f      	adds	r7, r3, #1
 800f254:	2800      	cmp	r0, #0
 800f256:	d001      	beq.n	800f25c <__sfvwrite_r+0x68>
 800f258:	3001      	adds	r0, #1
 800f25a:	1b87      	subs	r7, r0, r6
 800f25c:	9b03      	ldr	r3, [sp, #12]
 800f25e:	9705      	str	r7, [sp, #20]
 800f260:	429f      	cmp	r7, r3
 800f262:	d900      	bls.n	800f266 <__sfvwrite_r+0x72>
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	6820      	ldr	r0, [r4, #0]
 800f268:	6922      	ldr	r2, [r4, #16]
 800f26a:	68a5      	ldr	r5, [r4, #8]
 800f26c:	6963      	ldr	r3, [r4, #20]
 800f26e:	4290      	cmp	r0, r2
 800f270:	d800      	bhi.n	800f274 <__sfvwrite_r+0x80>
 800f272:	e0fb      	b.n	800f46c <__sfvwrite_r+0x278>
 800f274:	9a05      	ldr	r2, [sp, #20]
 800f276:	18ed      	adds	r5, r5, r3
 800f278:	42aa      	cmp	r2, r5
 800f27a:	dc00      	bgt.n	800f27e <__sfvwrite_r+0x8a>
 800f27c:	e0f6      	b.n	800f46c <__sfvwrite_r+0x278>
 800f27e:	0031      	movs	r1, r6
 800f280:	002a      	movs	r2, r5
 800f282:	f000 fa1e 	bl	800f6c2 <memmove>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	0021      	movs	r1, r4
 800f28a:	195b      	adds	r3, r3, r5
 800f28c:	9802      	ldr	r0, [sp, #8]
 800f28e:	6023      	str	r3, [r4, #0]
 800f290:	f7fd fd8e 	bl	800cdb0 <_fflush_r>
 800f294:	2800      	cmp	r0, #0
 800f296:	d16e      	bne.n	800f376 <__sfvwrite_r+0x182>
 800f298:	2001      	movs	r0, #1
 800f29a:	1b7f      	subs	r7, r7, r5
 800f29c:	d105      	bne.n	800f2aa <__sfvwrite_r+0xb6>
 800f29e:	0021      	movs	r1, r4
 800f2a0:	9802      	ldr	r0, [sp, #8]
 800f2a2:	f7fd fd85 	bl	800cdb0 <_fflush_r>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d165      	bne.n	800f376 <__sfvwrite_r+0x182>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	9a04      	ldr	r2, [sp, #16]
 800f2ae:	1b5b      	subs	r3, r3, r5
 800f2b0:	9303      	str	r3, [sp, #12]
 800f2b2:	9b04      	ldr	r3, [sp, #16]
 800f2b4:	1976      	adds	r6, r6, r5
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	1b5b      	subs	r3, r3, r5
 800f2ba:	6093      	str	r3, [r2, #8]
 800f2bc:	d1bd      	bne.n	800f23a <__sfvwrite_r+0x46>
 800f2be:	e7a1      	b.n	800f204 <__sfvwrite_r+0x10>
 800f2c0:	0021      	movs	r1, r4
 800f2c2:	9802      	ldr	r0, [sp, #8]
 800f2c4:	f000 f932 	bl	800f52c <__swsetup_r>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d0a4      	beq.n	800f216 <__sfvwrite_r+0x22>
 800f2cc:	2001      	movs	r0, #1
 800f2ce:	4240      	negs	r0, r0
 800f2d0:	e799      	b.n	800f206 <__sfvwrite_r+0x12>
 800f2d2:	9b01      	ldr	r3, [sp, #4]
 800f2d4:	681e      	ldr	r6, [r3, #0]
 800f2d6:	685d      	ldr	r5, [r3, #4]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	9301      	str	r3, [sp, #4]
 800f2dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f2de:	69e1      	ldr	r1, [r4, #28]
 800f2e0:	2d00      	cmp	r5, #0
 800f2e2:	d0f6      	beq.n	800f2d2 <__sfvwrite_r+0xde>
 800f2e4:	4a6e      	ldr	r2, [pc, #440]	; (800f4a0 <__sfvwrite_r+0x2ac>)
 800f2e6:	002b      	movs	r3, r5
 800f2e8:	4295      	cmp	r5, r2
 800f2ea:	d900      	bls.n	800f2ee <__sfvwrite_r+0xfa>
 800f2ec:	0013      	movs	r3, r2
 800f2ee:	0032      	movs	r2, r6
 800f2f0:	9802      	ldr	r0, [sp, #8]
 800f2f2:	47b8      	blx	r7
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	dd3e      	ble.n	800f376 <__sfvwrite_r+0x182>
 800f2f8:	9b04      	ldr	r3, [sp, #16]
 800f2fa:	9a04      	ldr	r2, [sp, #16]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	1836      	adds	r6, r6, r0
 800f300:	1a1b      	subs	r3, r3, r0
 800f302:	1a2d      	subs	r5, r5, r0
 800f304:	6093      	str	r3, [r2, #8]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1e8      	bne.n	800f2dc <__sfvwrite_r+0xe8>
 800f30a:	e77b      	b.n	800f204 <__sfvwrite_r+0x10>
 800f30c:	2600      	movs	r6, #0
 800f30e:	0035      	movs	r5, r6
 800f310:	e7e4      	b.n	800f2dc <__sfvwrite_r+0xe8>
 800f312:	9b01      	ldr	r3, [sp, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	9303      	str	r3, [sp, #12]
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	685d      	ldr	r5, [r3, #4]
 800f31c:	3308      	adds	r3, #8
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	220c      	movs	r2, #12
 800f322:	5ea3      	ldrsh	r3, [r4, r2]
 800f324:	6820      	ldr	r0, [r4, #0]
 800f326:	68a6      	ldr	r6, [r4, #8]
 800f328:	2d00      	cmp	r5, #0
 800f32a:	d0f2      	beq.n	800f312 <__sfvwrite_r+0x11e>
 800f32c:	2180      	movs	r1, #128	; 0x80
 800f32e:	0089      	lsls	r1, r1, #2
 800f330:	b29a      	uxth	r2, r3
 800f332:	420b      	tst	r3, r1
 800f334:	d062      	beq.n	800f3fc <__sfvwrite_r+0x208>
 800f336:	42ae      	cmp	r6, r5
 800f338:	d837      	bhi.n	800f3aa <__sfvwrite_r+0x1b6>
 800f33a:	2390      	movs	r3, #144	; 0x90
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	421a      	tst	r2, r3
 800f340:	d033      	beq.n	800f3aa <__sfvwrite_r+0x1b6>
 800f342:	6921      	ldr	r1, [r4, #16]
 800f344:	1a43      	subs	r3, r0, r1
 800f346:	2003      	movs	r0, #3
 800f348:	9305      	str	r3, [sp, #20]
 800f34a:	6963      	ldr	r3, [r4, #20]
 800f34c:	4343      	muls	r3, r0
 800f34e:	0fdf      	lsrs	r7, r3, #31
 800f350:	18ff      	adds	r7, r7, r3
 800f352:	9b05      	ldr	r3, [sp, #20]
 800f354:	107f      	asrs	r7, r7, #1
 800f356:	3301      	adds	r3, #1
 800f358:	195b      	adds	r3, r3, r5
 800f35a:	42bb      	cmp	r3, r7
 800f35c:	d900      	bls.n	800f360 <__sfvwrite_r+0x16c>
 800f35e:	001f      	movs	r7, r3
 800f360:	0552      	lsls	r2, r2, #21
 800f362:	d53c      	bpl.n	800f3de <__sfvwrite_r+0x1ea>
 800f364:	0039      	movs	r1, r7
 800f366:	9802      	ldr	r0, [sp, #8]
 800f368:	f7f8 fb98 	bl	8007a9c <_malloc_r>
 800f36c:	1e06      	subs	r6, r0, #0
 800f36e:	d10a      	bne.n	800f386 <__sfvwrite_r+0x192>
 800f370:	230c      	movs	r3, #12
 800f372:	9a02      	ldr	r2, [sp, #8]
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	2340      	movs	r3, #64	; 0x40
 800f378:	89a2      	ldrh	r2, [r4, #12]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	81a3      	strh	r3, [r4, #12]
 800f37e:	e7a5      	b.n	800f2cc <__sfvwrite_r+0xd8>
 800f380:	0015      	movs	r5, r2
 800f382:	9203      	str	r2, [sp, #12]
 800f384:	e7cc      	b.n	800f320 <__sfvwrite_r+0x12c>
 800f386:	9a05      	ldr	r2, [sp, #20]
 800f388:	6921      	ldr	r1, [r4, #16]
 800f38a:	f7f9 feaa 	bl	80090e2 <memcpy>
 800f38e:	89a2      	ldrh	r2, [r4, #12]
 800f390:	4b44      	ldr	r3, [pc, #272]	; (800f4a4 <__sfvwrite_r+0x2b0>)
 800f392:	401a      	ands	r2, r3
 800f394:	2380      	movs	r3, #128	; 0x80
 800f396:	4313      	orrs	r3, r2
 800f398:	81a3      	strh	r3, [r4, #12]
 800f39a:	9b05      	ldr	r3, [sp, #20]
 800f39c:	6126      	str	r6, [r4, #16]
 800f39e:	18f6      	adds	r6, r6, r3
 800f3a0:	6026      	str	r6, [r4, #0]
 800f3a2:	002e      	movs	r6, r5
 800f3a4:	6167      	str	r7, [r4, #20]
 800f3a6:	1aff      	subs	r7, r7, r3
 800f3a8:	60a7      	str	r7, [r4, #8]
 800f3aa:	002f      	movs	r7, r5
 800f3ac:	42ae      	cmp	r6, r5
 800f3ae:	d900      	bls.n	800f3b2 <__sfvwrite_r+0x1be>
 800f3b0:	002e      	movs	r6, r5
 800f3b2:	0032      	movs	r2, r6
 800f3b4:	9903      	ldr	r1, [sp, #12]
 800f3b6:	6820      	ldr	r0, [r4, #0]
 800f3b8:	f000 f983 	bl	800f6c2 <memmove>
 800f3bc:	68a3      	ldr	r3, [r4, #8]
 800f3be:	1b9b      	subs	r3, r3, r6
 800f3c0:	60a3      	str	r3, [r4, #8]
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	199b      	adds	r3, r3, r6
 800f3c6:	6023      	str	r3, [r4, #0]
 800f3c8:	9b03      	ldr	r3, [sp, #12]
 800f3ca:	9a04      	ldr	r2, [sp, #16]
 800f3cc:	19db      	adds	r3, r3, r7
 800f3ce:	9303      	str	r3, [sp, #12]
 800f3d0:	9b04      	ldr	r3, [sp, #16]
 800f3d2:	1bed      	subs	r5, r5, r7
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	1bdb      	subs	r3, r3, r7
 800f3d8:	6093      	str	r3, [r2, #8]
 800f3da:	d1a1      	bne.n	800f320 <__sfvwrite_r+0x12c>
 800f3dc:	e712      	b.n	800f204 <__sfvwrite_r+0x10>
 800f3de:	003a      	movs	r2, r7
 800f3e0:	9802      	ldr	r0, [sp, #8]
 800f3e2:	f7fe fcd7 	bl	800dd94 <_realloc_r>
 800f3e6:	1e06      	subs	r6, r0, #0
 800f3e8:	d1d7      	bne.n	800f39a <__sfvwrite_r+0x1a6>
 800f3ea:	6921      	ldr	r1, [r4, #16]
 800f3ec:	9802      	ldr	r0, [sp, #8]
 800f3ee:	f7f9 fef3 	bl	80091d8 <_free_r>
 800f3f2:	2280      	movs	r2, #128	; 0x80
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	4393      	bics	r3, r2
 800f3f8:	81a3      	strh	r3, [r4, #12]
 800f3fa:	e7b9      	b.n	800f370 <__sfvwrite_r+0x17c>
 800f3fc:	6923      	ldr	r3, [r4, #16]
 800f3fe:	4283      	cmp	r3, r0
 800f400:	d302      	bcc.n	800f408 <__sfvwrite_r+0x214>
 800f402:	6967      	ldr	r7, [r4, #20]
 800f404:	42af      	cmp	r7, r5
 800f406:	d916      	bls.n	800f436 <__sfvwrite_r+0x242>
 800f408:	42ae      	cmp	r6, r5
 800f40a:	d900      	bls.n	800f40e <__sfvwrite_r+0x21a>
 800f40c:	002e      	movs	r6, r5
 800f40e:	0032      	movs	r2, r6
 800f410:	9903      	ldr	r1, [sp, #12]
 800f412:	f000 f956 	bl	800f6c2 <memmove>
 800f416:	68a3      	ldr	r3, [r4, #8]
 800f418:	6822      	ldr	r2, [r4, #0]
 800f41a:	1b9b      	subs	r3, r3, r6
 800f41c:	1992      	adds	r2, r2, r6
 800f41e:	0037      	movs	r7, r6
 800f420:	60a3      	str	r3, [r4, #8]
 800f422:	6022      	str	r2, [r4, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1cf      	bne.n	800f3c8 <__sfvwrite_r+0x1d4>
 800f428:	0021      	movs	r1, r4
 800f42a:	9802      	ldr	r0, [sp, #8]
 800f42c:	f7fd fcc0 	bl	800cdb0 <_fflush_r>
 800f430:	2800      	cmp	r0, #0
 800f432:	d0c9      	beq.n	800f3c8 <__sfvwrite_r+0x1d4>
 800f434:	e79f      	b.n	800f376 <__sfvwrite_r+0x182>
 800f436:	4b1c      	ldr	r3, [pc, #112]	; (800f4a8 <__sfvwrite_r+0x2b4>)
 800f438:	0028      	movs	r0, r5
 800f43a:	429d      	cmp	r5, r3
 800f43c:	d900      	bls.n	800f440 <__sfvwrite_r+0x24c>
 800f43e:	481b      	ldr	r0, [pc, #108]	; (800f4ac <__sfvwrite_r+0x2b8>)
 800f440:	0039      	movs	r1, r7
 800f442:	f7f0 ff05 	bl	8000250 <__divsi3>
 800f446:	003b      	movs	r3, r7
 800f448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f44a:	4343      	muls	r3, r0
 800f44c:	9a03      	ldr	r2, [sp, #12]
 800f44e:	69e1      	ldr	r1, [r4, #28]
 800f450:	9802      	ldr	r0, [sp, #8]
 800f452:	47b0      	blx	r6
 800f454:	1e07      	subs	r7, r0, #0
 800f456:	dcb7      	bgt.n	800f3c8 <__sfvwrite_r+0x1d4>
 800f458:	e78d      	b.n	800f376 <__sfvwrite_r+0x182>
 800f45a:	9b01      	ldr	r3, [sp, #4]
 800f45c:	2000      	movs	r0, #0
 800f45e:	681e      	ldr	r6, [r3, #0]
 800f460:	685b      	ldr	r3, [r3, #4]
 800f462:	9303      	str	r3, [sp, #12]
 800f464:	9b01      	ldr	r3, [sp, #4]
 800f466:	3308      	adds	r3, #8
 800f468:	9301      	str	r3, [sp, #4]
 800f46a:	e6e6      	b.n	800f23a <__sfvwrite_r+0x46>
 800f46c:	9a05      	ldr	r2, [sp, #20]
 800f46e:	4293      	cmp	r3, r2
 800f470:	dc08      	bgt.n	800f484 <__sfvwrite_r+0x290>
 800f472:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f474:	0032      	movs	r2, r6
 800f476:	69e1      	ldr	r1, [r4, #28]
 800f478:	9802      	ldr	r0, [sp, #8]
 800f47a:	47a8      	blx	r5
 800f47c:	1e05      	subs	r5, r0, #0
 800f47e:	dd00      	ble.n	800f482 <__sfvwrite_r+0x28e>
 800f480:	e70a      	b.n	800f298 <__sfvwrite_r+0xa4>
 800f482:	e778      	b.n	800f376 <__sfvwrite_r+0x182>
 800f484:	9a05      	ldr	r2, [sp, #20]
 800f486:	0031      	movs	r1, r6
 800f488:	f000 f91b 	bl	800f6c2 <memmove>
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	68a3      	ldr	r3, [r4, #8]
 800f490:	0015      	movs	r5, r2
 800f492:	1a9b      	subs	r3, r3, r2
 800f494:	60a3      	str	r3, [r4, #8]
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	189b      	adds	r3, r3, r2
 800f49a:	6023      	str	r3, [r4, #0]
 800f49c:	e6fc      	b.n	800f298 <__sfvwrite_r+0xa4>
 800f49e:	46c0      	nop			; (mov r8, r8)
 800f4a0:	7ffffc00 	.word	0x7ffffc00
 800f4a4:	fffffb7f 	.word	0xfffffb7f
 800f4a8:	7ffffffe 	.word	0x7ffffffe
 800f4ac:	7fffffff 	.word	0x7fffffff

0800f4b0 <__submore>:
 800f4b0:	000b      	movs	r3, r1
 800f4b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4b4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800f4b6:	3340      	adds	r3, #64	; 0x40
 800f4b8:	000c      	movs	r4, r1
 800f4ba:	429d      	cmp	r5, r3
 800f4bc:	d11c      	bne.n	800f4f8 <__submore+0x48>
 800f4be:	2680      	movs	r6, #128	; 0x80
 800f4c0:	00f6      	lsls	r6, r6, #3
 800f4c2:	0031      	movs	r1, r6
 800f4c4:	f7f8 faea 	bl	8007a9c <_malloc_r>
 800f4c8:	2800      	cmp	r0, #0
 800f4ca:	d102      	bne.n	800f4d2 <__submore+0x22>
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	4240      	negs	r0, r0
 800f4d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f4d2:	0023      	movs	r3, r4
 800f4d4:	6320      	str	r0, [r4, #48]	; 0x30
 800f4d6:	6366      	str	r6, [r4, #52]	; 0x34
 800f4d8:	3342      	adds	r3, #66	; 0x42
 800f4da:	781a      	ldrb	r2, [r3, #0]
 800f4dc:	4b10      	ldr	r3, [pc, #64]	; (800f520 <__submore+0x70>)
 800f4de:	54c2      	strb	r2, [r0, r3]
 800f4e0:	0023      	movs	r3, r4
 800f4e2:	3341      	adds	r3, #65	; 0x41
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	4b0f      	ldr	r3, [pc, #60]	; (800f524 <__submore+0x74>)
 800f4e8:	54c2      	strb	r2, [r0, r3]
 800f4ea:	782a      	ldrb	r2, [r5, #0]
 800f4ec:	4b0e      	ldr	r3, [pc, #56]	; (800f528 <__submore+0x78>)
 800f4ee:	54c2      	strb	r2, [r0, r3]
 800f4f0:	18c0      	adds	r0, r0, r3
 800f4f2:	6020      	str	r0, [r4, #0]
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	e7eb      	b.n	800f4d0 <__submore+0x20>
 800f4f8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800f4fa:	0029      	movs	r1, r5
 800f4fc:	0073      	lsls	r3, r6, #1
 800f4fe:	001a      	movs	r2, r3
 800f500:	9301      	str	r3, [sp, #4]
 800f502:	f7fe fc47 	bl	800dd94 <_realloc_r>
 800f506:	1e05      	subs	r5, r0, #0
 800f508:	d0e0      	beq.n	800f4cc <__submore+0x1c>
 800f50a:	1987      	adds	r7, r0, r6
 800f50c:	0001      	movs	r1, r0
 800f50e:	0032      	movs	r2, r6
 800f510:	0038      	movs	r0, r7
 800f512:	f7f9 fde6 	bl	80090e2 <memcpy>
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	6027      	str	r7, [r4, #0]
 800f51a:	6325      	str	r5, [r4, #48]	; 0x30
 800f51c:	6363      	str	r3, [r4, #52]	; 0x34
 800f51e:	e7e9      	b.n	800f4f4 <__submore+0x44>
 800f520:	000003ff 	.word	0x000003ff
 800f524:	000003fe 	.word	0x000003fe
 800f528:	000003fd 	.word	0x000003fd

0800f52c <__swsetup_r>:
 800f52c:	4b30      	ldr	r3, [pc, #192]	; (800f5f0 <__swsetup_r+0xc4>)
 800f52e:	b570      	push	{r4, r5, r6, lr}
 800f530:	0005      	movs	r5, r0
 800f532:	6818      	ldr	r0, [r3, #0]
 800f534:	000c      	movs	r4, r1
 800f536:	2800      	cmp	r0, #0
 800f538:	d004      	beq.n	800f544 <__swsetup_r+0x18>
 800f53a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d101      	bne.n	800f544 <__swsetup_r+0x18>
 800f540:	f7f9 fc20 	bl	8008d84 <__sinit>
 800f544:	230c      	movs	r3, #12
 800f546:	5ee2      	ldrsh	r2, [r4, r3]
 800f548:	b293      	uxth	r3, r2
 800f54a:	0711      	lsls	r1, r2, #28
 800f54c:	d423      	bmi.n	800f596 <__swsetup_r+0x6a>
 800f54e:	06d9      	lsls	r1, r3, #27
 800f550:	d407      	bmi.n	800f562 <__swsetup_r+0x36>
 800f552:	2309      	movs	r3, #9
 800f554:	2001      	movs	r0, #1
 800f556:	602b      	str	r3, [r5, #0]
 800f558:	3337      	adds	r3, #55	; 0x37
 800f55a:	4313      	orrs	r3, r2
 800f55c:	81a3      	strh	r3, [r4, #12]
 800f55e:	4240      	negs	r0, r0
 800f560:	bd70      	pop	{r4, r5, r6, pc}
 800f562:	075b      	lsls	r3, r3, #29
 800f564:	d513      	bpl.n	800f58e <__swsetup_r+0x62>
 800f566:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f568:	2900      	cmp	r1, #0
 800f56a:	d008      	beq.n	800f57e <__swsetup_r+0x52>
 800f56c:	0023      	movs	r3, r4
 800f56e:	3340      	adds	r3, #64	; 0x40
 800f570:	4299      	cmp	r1, r3
 800f572:	d002      	beq.n	800f57a <__swsetup_r+0x4e>
 800f574:	0028      	movs	r0, r5
 800f576:	f7f9 fe2f 	bl	80091d8 <_free_r>
 800f57a:	2300      	movs	r3, #0
 800f57c:	6323      	str	r3, [r4, #48]	; 0x30
 800f57e:	2224      	movs	r2, #36	; 0x24
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	4393      	bics	r3, r2
 800f584:	81a3      	strh	r3, [r4, #12]
 800f586:	2300      	movs	r3, #0
 800f588:	6063      	str	r3, [r4, #4]
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	6023      	str	r3, [r4, #0]
 800f58e:	2308      	movs	r3, #8
 800f590:	89a2      	ldrh	r2, [r4, #12]
 800f592:	4313      	orrs	r3, r2
 800f594:	81a3      	strh	r3, [r4, #12]
 800f596:	6923      	ldr	r3, [r4, #16]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d10b      	bne.n	800f5b4 <__swsetup_r+0x88>
 800f59c:	21a0      	movs	r1, #160	; 0xa0
 800f59e:	2280      	movs	r2, #128	; 0x80
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	0089      	lsls	r1, r1, #2
 800f5a4:	0092      	lsls	r2, r2, #2
 800f5a6:	400b      	ands	r3, r1
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d003      	beq.n	800f5b4 <__swsetup_r+0x88>
 800f5ac:	0021      	movs	r1, r4
 800f5ae:	0028      	movs	r0, r5
 800f5b0:	f000 f8e8 	bl	800f784 <__smakebuf_r>
 800f5b4:	220c      	movs	r2, #12
 800f5b6:	5ea3      	ldrsh	r3, [r4, r2]
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	001a      	movs	r2, r3
 800f5bc:	b299      	uxth	r1, r3
 800f5be:	4002      	ands	r2, r0
 800f5c0:	4203      	tst	r3, r0
 800f5c2:	d00f      	beq.n	800f5e4 <__swsetup_r+0xb8>
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	60a2      	str	r2, [r4, #8]
 800f5c8:	6962      	ldr	r2, [r4, #20]
 800f5ca:	4252      	negs	r2, r2
 800f5cc:	61a2      	str	r2, [r4, #24]
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	6922      	ldr	r2, [r4, #16]
 800f5d2:	4282      	cmp	r2, r0
 800f5d4:	d1c4      	bne.n	800f560 <__swsetup_r+0x34>
 800f5d6:	0609      	lsls	r1, r1, #24
 800f5d8:	d5c2      	bpl.n	800f560 <__swsetup_r+0x34>
 800f5da:	2240      	movs	r2, #64	; 0x40
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	81a3      	strh	r3, [r4, #12]
 800f5e0:	3801      	subs	r0, #1
 800f5e2:	e7bd      	b.n	800f560 <__swsetup_r+0x34>
 800f5e4:	0788      	lsls	r0, r1, #30
 800f5e6:	d400      	bmi.n	800f5ea <__swsetup_r+0xbe>
 800f5e8:	6962      	ldr	r2, [r4, #20]
 800f5ea:	60a2      	str	r2, [r4, #8]
 800f5ec:	e7ef      	b.n	800f5ce <__swsetup_r+0xa2>
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	200006b8 	.word	0x200006b8

0800f5f4 <__fputwc>:
 800f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f6:	b085      	sub	sp, #20
 800f5f8:	000e      	movs	r6, r1
 800f5fa:	0015      	movs	r5, r2
 800f5fc:	9001      	str	r0, [sp, #4]
 800f5fe:	f7f9 fccf 	bl	8008fa0 <__locale_mb_cur_max>
 800f602:	0004      	movs	r4, r0
 800f604:	2801      	cmp	r0, #1
 800f606:	d119      	bne.n	800f63c <__fputwc+0x48>
 800f608:	1e73      	subs	r3, r6, #1
 800f60a:	2bfe      	cmp	r3, #254	; 0xfe
 800f60c:	d816      	bhi.n	800f63c <__fputwc+0x48>
 800f60e:	ab02      	add	r3, sp, #8
 800f610:	711e      	strb	r6, [r3, #4]
 800f612:	2700      	movs	r7, #0
 800f614:	42a7      	cmp	r7, r4
 800f616:	d020      	beq.n	800f65a <__fputwc+0x66>
 800f618:	ab03      	add	r3, sp, #12
 800f61a:	5dd9      	ldrb	r1, [r3, r7]
 800f61c:	68ab      	ldr	r3, [r5, #8]
 800f61e:	3b01      	subs	r3, #1
 800f620:	60ab      	str	r3, [r5, #8]
 800f622:	2b00      	cmp	r3, #0
 800f624:	da04      	bge.n	800f630 <__fputwc+0x3c>
 800f626:	69aa      	ldr	r2, [r5, #24]
 800f628:	4293      	cmp	r3, r2
 800f62a:	db19      	blt.n	800f660 <__fputwc+0x6c>
 800f62c:	290a      	cmp	r1, #10
 800f62e:	d017      	beq.n	800f660 <__fputwc+0x6c>
 800f630:	682b      	ldr	r3, [r5, #0]
 800f632:	1c5a      	adds	r2, r3, #1
 800f634:	602a      	str	r2, [r5, #0]
 800f636:	7019      	strb	r1, [r3, #0]
 800f638:	3701      	adds	r7, #1
 800f63a:	e7eb      	b.n	800f614 <__fputwc+0x20>
 800f63c:	002b      	movs	r3, r5
 800f63e:	0032      	movs	r2, r6
 800f640:	9801      	ldr	r0, [sp, #4]
 800f642:	335c      	adds	r3, #92	; 0x5c
 800f644:	a903      	add	r1, sp, #12
 800f646:	f000 f857 	bl	800f6f8 <_wcrtomb_r>
 800f64a:	0004      	movs	r4, r0
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	d1e0      	bne.n	800f612 <__fputwc+0x1e>
 800f650:	2340      	movs	r3, #64	; 0x40
 800f652:	0006      	movs	r6, r0
 800f654:	89aa      	ldrh	r2, [r5, #12]
 800f656:	4313      	orrs	r3, r2
 800f658:	81ab      	strh	r3, [r5, #12]
 800f65a:	0030      	movs	r0, r6
 800f65c:	b005      	add	sp, #20
 800f65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f660:	002a      	movs	r2, r5
 800f662:	9801      	ldr	r0, [sp, #4]
 800f664:	f000 f8cc 	bl	800f800 <__swbuf_r>
 800f668:	1c43      	adds	r3, r0, #1
 800f66a:	d1e5      	bne.n	800f638 <__fputwc+0x44>
 800f66c:	0006      	movs	r6, r0
 800f66e:	e7f4      	b.n	800f65a <__fputwc+0x66>

0800f670 <_fputwc_r>:
 800f670:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f672:	b570      	push	{r4, r5, r6, lr}
 800f674:	0005      	movs	r5, r0
 800f676:	000e      	movs	r6, r1
 800f678:	0014      	movs	r4, r2
 800f67a:	07db      	lsls	r3, r3, #31
 800f67c:	d405      	bmi.n	800f68a <_fputwc_r+0x1a>
 800f67e:	8993      	ldrh	r3, [r2, #12]
 800f680:	059b      	lsls	r3, r3, #22
 800f682:	d402      	bmi.n	800f68a <_fputwc_r+0x1a>
 800f684:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f686:	f7f9 fd1f 	bl	80090c8 <__retarget_lock_acquire_recursive>
 800f68a:	230c      	movs	r3, #12
 800f68c:	5ee2      	ldrsh	r2, [r4, r3]
 800f68e:	2380      	movs	r3, #128	; 0x80
 800f690:	019b      	lsls	r3, r3, #6
 800f692:	421a      	tst	r2, r3
 800f694:	d104      	bne.n	800f6a0 <_fputwc_r+0x30>
 800f696:	431a      	orrs	r2, r3
 800f698:	81a2      	strh	r2, [r4, #12]
 800f69a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f69c:	4313      	orrs	r3, r2
 800f69e:	6663      	str	r3, [r4, #100]	; 0x64
 800f6a0:	0028      	movs	r0, r5
 800f6a2:	0022      	movs	r2, r4
 800f6a4:	0031      	movs	r1, r6
 800f6a6:	f7ff ffa5 	bl	800f5f4 <__fputwc>
 800f6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6ac:	0005      	movs	r5, r0
 800f6ae:	07db      	lsls	r3, r3, #31
 800f6b0:	d405      	bmi.n	800f6be <_fputwc_r+0x4e>
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	059b      	lsls	r3, r3, #22
 800f6b6:	d402      	bmi.n	800f6be <_fputwc_r+0x4e>
 800f6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6ba:	f7f9 fd06 	bl	80090ca <__retarget_lock_release_recursive>
 800f6be:	0028      	movs	r0, r5
 800f6c0:	bd70      	pop	{r4, r5, r6, pc}

0800f6c2 <memmove>:
 800f6c2:	b510      	push	{r4, lr}
 800f6c4:	4288      	cmp	r0, r1
 800f6c6:	d902      	bls.n	800f6ce <memmove+0xc>
 800f6c8:	188b      	adds	r3, r1, r2
 800f6ca:	4298      	cmp	r0, r3
 800f6cc:	d303      	bcc.n	800f6d6 <memmove+0x14>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e007      	b.n	800f6e2 <memmove+0x20>
 800f6d2:	5c8b      	ldrb	r3, [r1, r2]
 800f6d4:	5483      	strb	r3, [r0, r2]
 800f6d6:	3a01      	subs	r2, #1
 800f6d8:	d2fb      	bcs.n	800f6d2 <memmove+0x10>
 800f6da:	bd10      	pop	{r4, pc}
 800f6dc:	5ccc      	ldrb	r4, [r1, r3]
 800f6de:	54c4      	strb	r4, [r0, r3]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d1fa      	bne.n	800f6dc <memmove+0x1a>
 800f6e6:	e7f8      	b.n	800f6da <memmove+0x18>

0800f6e8 <abort>:
 800f6e8:	2006      	movs	r0, #6
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	f000 f906 	bl	800f8fc <raise>
 800f6f0:	2001      	movs	r0, #1
 800f6f2:	f7f3 fe8f 	bl	8003414 <_exit>
	...

0800f6f8 <_wcrtomb_r>:
 800f6f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6fa:	001d      	movs	r5, r3
 800f6fc:	4b09      	ldr	r3, [pc, #36]	; (800f724 <_wcrtomb_r+0x2c>)
 800f6fe:	0004      	movs	r4, r0
 800f700:	33e0      	adds	r3, #224	; 0xe0
 800f702:	681e      	ldr	r6, [r3, #0]
 800f704:	002b      	movs	r3, r5
 800f706:	2900      	cmp	r1, #0
 800f708:	d101      	bne.n	800f70e <_wcrtomb_r+0x16>
 800f70a:	000a      	movs	r2, r1
 800f70c:	a901      	add	r1, sp, #4
 800f70e:	0020      	movs	r0, r4
 800f710:	47b0      	blx	r6
 800f712:	1c43      	adds	r3, r0, #1
 800f714:	d103      	bne.n	800f71e <_wcrtomb_r+0x26>
 800f716:	2300      	movs	r3, #0
 800f718:	602b      	str	r3, [r5, #0]
 800f71a:	338a      	adds	r3, #138	; 0x8a
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	b004      	add	sp, #16
 800f720:	bd70      	pop	{r4, r5, r6, pc}
 800f722:	46c0      	nop			; (mov r8, r8)
 800f724:	2000042c 	.word	0x2000042c

0800f728 <__swhatbuf_r>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	000e      	movs	r6, r1
 800f72c:	001d      	movs	r5, r3
 800f72e:	230e      	movs	r3, #14
 800f730:	5ec9      	ldrsh	r1, [r1, r3]
 800f732:	0014      	movs	r4, r2
 800f734:	b096      	sub	sp, #88	; 0x58
 800f736:	2900      	cmp	r1, #0
 800f738:	da09      	bge.n	800f74e <__swhatbuf_r+0x26>
 800f73a:	89b2      	ldrh	r2, [r6, #12]
 800f73c:	2380      	movs	r3, #128	; 0x80
 800f73e:	0011      	movs	r1, r2
 800f740:	4019      	ands	r1, r3
 800f742:	421a      	tst	r2, r3
 800f744:	d018      	beq.n	800f778 <__swhatbuf_r+0x50>
 800f746:	2100      	movs	r1, #0
 800f748:	3b40      	subs	r3, #64	; 0x40
 800f74a:	0008      	movs	r0, r1
 800f74c:	e010      	b.n	800f770 <__swhatbuf_r+0x48>
 800f74e:	466a      	mov	r2, sp
 800f750:	f000 f8de 	bl	800f910 <_fstat_r>
 800f754:	2800      	cmp	r0, #0
 800f756:	dbf0      	blt.n	800f73a <__swhatbuf_r+0x12>
 800f758:	23f0      	movs	r3, #240	; 0xf0
 800f75a:	9901      	ldr	r1, [sp, #4]
 800f75c:	021b      	lsls	r3, r3, #8
 800f75e:	4019      	ands	r1, r3
 800f760:	4b07      	ldr	r3, [pc, #28]	; (800f780 <__swhatbuf_r+0x58>)
 800f762:	2080      	movs	r0, #128	; 0x80
 800f764:	18c9      	adds	r1, r1, r3
 800f766:	424b      	negs	r3, r1
 800f768:	4159      	adcs	r1, r3
 800f76a:	2380      	movs	r3, #128	; 0x80
 800f76c:	0100      	lsls	r0, r0, #4
 800f76e:	00db      	lsls	r3, r3, #3
 800f770:	6029      	str	r1, [r5, #0]
 800f772:	6023      	str	r3, [r4, #0]
 800f774:	b016      	add	sp, #88	; 0x58
 800f776:	bd70      	pop	{r4, r5, r6, pc}
 800f778:	2380      	movs	r3, #128	; 0x80
 800f77a:	00db      	lsls	r3, r3, #3
 800f77c:	e7e5      	b.n	800f74a <__swhatbuf_r+0x22>
 800f77e:	46c0      	nop			; (mov r8, r8)
 800f780:	ffffe000 	.word	0xffffe000

0800f784 <__smakebuf_r>:
 800f784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f786:	2602      	movs	r6, #2
 800f788:	898b      	ldrh	r3, [r1, #12]
 800f78a:	0005      	movs	r5, r0
 800f78c:	000c      	movs	r4, r1
 800f78e:	4233      	tst	r3, r6
 800f790:	d006      	beq.n	800f7a0 <__smakebuf_r+0x1c>
 800f792:	0023      	movs	r3, r4
 800f794:	3343      	adds	r3, #67	; 0x43
 800f796:	6023      	str	r3, [r4, #0]
 800f798:	6123      	str	r3, [r4, #16]
 800f79a:	2301      	movs	r3, #1
 800f79c:	6163      	str	r3, [r4, #20]
 800f79e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800f7a0:	466a      	mov	r2, sp
 800f7a2:	ab01      	add	r3, sp, #4
 800f7a4:	f7ff ffc0 	bl	800f728 <__swhatbuf_r>
 800f7a8:	9900      	ldr	r1, [sp, #0]
 800f7aa:	0007      	movs	r7, r0
 800f7ac:	0028      	movs	r0, r5
 800f7ae:	f7f8 f975 	bl	8007a9c <_malloc_r>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d108      	bne.n	800f7c8 <__smakebuf_r+0x44>
 800f7b6:	220c      	movs	r2, #12
 800f7b8:	5ea3      	ldrsh	r3, [r4, r2]
 800f7ba:	059a      	lsls	r2, r3, #22
 800f7bc:	d4ef      	bmi.n	800f79e <__smakebuf_r+0x1a>
 800f7be:	2203      	movs	r2, #3
 800f7c0:	4393      	bics	r3, r2
 800f7c2:	431e      	orrs	r6, r3
 800f7c4:	81a6      	strh	r6, [r4, #12]
 800f7c6:	e7e4      	b.n	800f792 <__smakebuf_r+0xe>
 800f7c8:	2380      	movs	r3, #128	; 0x80
 800f7ca:	89a2      	ldrh	r2, [r4, #12]
 800f7cc:	6020      	str	r0, [r4, #0]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	81a3      	strh	r3, [r4, #12]
 800f7d2:	9b00      	ldr	r3, [sp, #0]
 800f7d4:	6120      	str	r0, [r4, #16]
 800f7d6:	6163      	str	r3, [r4, #20]
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00c      	beq.n	800f7f8 <__smakebuf_r+0x74>
 800f7de:	0028      	movs	r0, r5
 800f7e0:	230e      	movs	r3, #14
 800f7e2:	5ee1      	ldrsh	r1, [r4, r3]
 800f7e4:	f000 f8a6 	bl	800f934 <_isatty_r>
 800f7e8:	2800      	cmp	r0, #0
 800f7ea:	d005      	beq.n	800f7f8 <__smakebuf_r+0x74>
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	89a2      	ldrh	r2, [r4, #12]
 800f7f0:	439a      	bics	r2, r3
 800f7f2:	3b02      	subs	r3, #2
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	89a3      	ldrh	r3, [r4, #12]
 800f7fa:	433b      	orrs	r3, r7
 800f7fc:	81a3      	strh	r3, [r4, #12]
 800f7fe:	e7ce      	b.n	800f79e <__smakebuf_r+0x1a>

0800f800 <__swbuf_r>:
 800f800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f802:	0006      	movs	r6, r0
 800f804:	000d      	movs	r5, r1
 800f806:	0014      	movs	r4, r2
 800f808:	2800      	cmp	r0, #0
 800f80a:	d004      	beq.n	800f816 <__swbuf_r+0x16>
 800f80c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d101      	bne.n	800f816 <__swbuf_r+0x16>
 800f812:	f7f9 fab7 	bl	8008d84 <__sinit>
 800f816:	69a3      	ldr	r3, [r4, #24]
 800f818:	60a3      	str	r3, [r4, #8]
 800f81a:	89a3      	ldrh	r3, [r4, #12]
 800f81c:	071b      	lsls	r3, r3, #28
 800f81e:	d52e      	bpl.n	800f87e <__swbuf_r+0x7e>
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d02b      	beq.n	800f87e <__swbuf_r+0x7e>
 800f826:	230c      	movs	r3, #12
 800f828:	5ee2      	ldrsh	r2, [r4, r3]
 800f82a:	2380      	movs	r3, #128	; 0x80
 800f82c:	019b      	lsls	r3, r3, #6
 800f82e:	b2ef      	uxtb	r7, r5
 800f830:	b2ed      	uxtb	r5, r5
 800f832:	421a      	tst	r2, r3
 800f834:	d02c      	beq.n	800f890 <__swbuf_r+0x90>
 800f836:	6923      	ldr	r3, [r4, #16]
 800f838:	6820      	ldr	r0, [r4, #0]
 800f83a:	1ac0      	subs	r0, r0, r3
 800f83c:	6963      	ldr	r3, [r4, #20]
 800f83e:	4283      	cmp	r3, r0
 800f840:	dc05      	bgt.n	800f84e <__swbuf_r+0x4e>
 800f842:	0021      	movs	r1, r4
 800f844:	0030      	movs	r0, r6
 800f846:	f7fd fab3 	bl	800cdb0 <_fflush_r>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d11d      	bne.n	800f88a <__swbuf_r+0x8a>
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	3001      	adds	r0, #1
 800f852:	3b01      	subs	r3, #1
 800f854:	60a3      	str	r3, [r4, #8]
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	1c5a      	adds	r2, r3, #1
 800f85a:	6022      	str	r2, [r4, #0]
 800f85c:	701f      	strb	r7, [r3, #0]
 800f85e:	6963      	ldr	r3, [r4, #20]
 800f860:	4283      	cmp	r3, r0
 800f862:	d004      	beq.n	800f86e <__swbuf_r+0x6e>
 800f864:	89a3      	ldrh	r3, [r4, #12]
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	d507      	bpl.n	800f87a <__swbuf_r+0x7a>
 800f86a:	2d0a      	cmp	r5, #10
 800f86c:	d105      	bne.n	800f87a <__swbuf_r+0x7a>
 800f86e:	0021      	movs	r1, r4
 800f870:	0030      	movs	r0, r6
 800f872:	f7fd fa9d 	bl	800cdb0 <_fflush_r>
 800f876:	2800      	cmp	r0, #0
 800f878:	d107      	bne.n	800f88a <__swbuf_r+0x8a>
 800f87a:	0028      	movs	r0, r5
 800f87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f87e:	0021      	movs	r1, r4
 800f880:	0030      	movs	r0, r6
 800f882:	f7ff fe53 	bl	800f52c <__swsetup_r>
 800f886:	2800      	cmp	r0, #0
 800f888:	d0cd      	beq.n	800f826 <__swbuf_r+0x26>
 800f88a:	2501      	movs	r5, #1
 800f88c:	426d      	negs	r5, r5
 800f88e:	e7f4      	b.n	800f87a <__swbuf_r+0x7a>
 800f890:	4313      	orrs	r3, r2
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	4a02      	ldr	r2, [pc, #8]	; (800f8a0 <__swbuf_r+0xa0>)
 800f896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f898:	4013      	ands	r3, r2
 800f89a:	6663      	str	r3, [r4, #100]	; 0x64
 800f89c:	e7cb      	b.n	800f836 <__swbuf_r+0x36>
 800f89e:	46c0      	nop			; (mov r8, r8)
 800f8a0:	ffffdfff 	.word	0xffffdfff

0800f8a4 <_raise_r>:
 800f8a4:	b570      	push	{r4, r5, r6, lr}
 800f8a6:	0004      	movs	r4, r0
 800f8a8:	000d      	movs	r5, r1
 800f8aa:	291f      	cmp	r1, #31
 800f8ac:	d904      	bls.n	800f8b8 <_raise_r+0x14>
 800f8ae:	2316      	movs	r3, #22
 800f8b0:	6003      	str	r3, [r0, #0]
 800f8b2:	2001      	movs	r0, #1
 800f8b4:	4240      	negs	r0, r0
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	0003      	movs	r3, r0
 800f8ba:	33fc      	adds	r3, #252	; 0xfc
 800f8bc:	69db      	ldr	r3, [r3, #28]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d004      	beq.n	800f8cc <_raise_r+0x28>
 800f8c2:	008a      	lsls	r2, r1, #2
 800f8c4:	189b      	adds	r3, r3, r2
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	2a00      	cmp	r2, #0
 800f8ca:	d108      	bne.n	800f8de <_raise_r+0x3a>
 800f8cc:	0020      	movs	r0, r4
 800f8ce:	f000 f855 	bl	800f97c <_getpid_r>
 800f8d2:	002a      	movs	r2, r5
 800f8d4:	0001      	movs	r1, r0
 800f8d6:	0020      	movs	r0, r4
 800f8d8:	f000 f83e 	bl	800f958 <_kill_r>
 800f8dc:	e7eb      	b.n	800f8b6 <_raise_r+0x12>
 800f8de:	2000      	movs	r0, #0
 800f8e0:	2a01      	cmp	r2, #1
 800f8e2:	d0e8      	beq.n	800f8b6 <_raise_r+0x12>
 800f8e4:	1c51      	adds	r1, r2, #1
 800f8e6:	d103      	bne.n	800f8f0 <_raise_r+0x4c>
 800f8e8:	2316      	movs	r3, #22
 800f8ea:	3001      	adds	r0, #1
 800f8ec:	6023      	str	r3, [r4, #0]
 800f8ee:	e7e2      	b.n	800f8b6 <_raise_r+0x12>
 800f8f0:	2400      	movs	r4, #0
 800f8f2:	0028      	movs	r0, r5
 800f8f4:	601c      	str	r4, [r3, #0]
 800f8f6:	4790      	blx	r2
 800f8f8:	0020      	movs	r0, r4
 800f8fa:	e7dc      	b.n	800f8b6 <_raise_r+0x12>

0800f8fc <raise>:
 800f8fc:	b510      	push	{r4, lr}
 800f8fe:	4b03      	ldr	r3, [pc, #12]	; (800f90c <raise+0x10>)
 800f900:	0001      	movs	r1, r0
 800f902:	6818      	ldr	r0, [r3, #0]
 800f904:	f7ff ffce 	bl	800f8a4 <_raise_r>
 800f908:	bd10      	pop	{r4, pc}
 800f90a:	46c0      	nop			; (mov r8, r8)
 800f90c:	200006b8 	.word	0x200006b8

0800f910 <_fstat_r>:
 800f910:	2300      	movs	r3, #0
 800f912:	b570      	push	{r4, r5, r6, lr}
 800f914:	4d06      	ldr	r5, [pc, #24]	; (800f930 <_fstat_r+0x20>)
 800f916:	0004      	movs	r4, r0
 800f918:	0008      	movs	r0, r1
 800f91a:	0011      	movs	r1, r2
 800f91c:	602b      	str	r3, [r5, #0]
 800f91e:	f7f3 fdc8 	bl	80034b2 <_fstat>
 800f922:	1c43      	adds	r3, r0, #1
 800f924:	d103      	bne.n	800f92e <_fstat_r+0x1e>
 800f926:	682b      	ldr	r3, [r5, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d000      	beq.n	800f92e <_fstat_r+0x1e>
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	20000bb4 	.word	0x20000bb4

0800f934 <_isatty_r>:
 800f934:	2300      	movs	r3, #0
 800f936:	b570      	push	{r4, r5, r6, lr}
 800f938:	4d06      	ldr	r5, [pc, #24]	; (800f954 <_isatty_r+0x20>)
 800f93a:	0004      	movs	r4, r0
 800f93c:	0008      	movs	r0, r1
 800f93e:	602b      	str	r3, [r5, #0]
 800f940:	f7f3 fdc5 	bl	80034ce <_isatty>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d103      	bne.n	800f950 <_isatty_r+0x1c>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d000      	beq.n	800f950 <_isatty_r+0x1c>
 800f94e:	6023      	str	r3, [r4, #0]
 800f950:	bd70      	pop	{r4, r5, r6, pc}
 800f952:	46c0      	nop			; (mov r8, r8)
 800f954:	20000bb4 	.word	0x20000bb4

0800f958 <_kill_r>:
 800f958:	2300      	movs	r3, #0
 800f95a:	b570      	push	{r4, r5, r6, lr}
 800f95c:	4d06      	ldr	r5, [pc, #24]	; (800f978 <_kill_r+0x20>)
 800f95e:	0004      	movs	r4, r0
 800f960:	0008      	movs	r0, r1
 800f962:	0011      	movs	r1, r2
 800f964:	602b      	str	r3, [r5, #0]
 800f966:	f7f3 fd45 	bl	80033f4 <_kill>
 800f96a:	1c43      	adds	r3, r0, #1
 800f96c:	d103      	bne.n	800f976 <_kill_r+0x1e>
 800f96e:	682b      	ldr	r3, [r5, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d000      	beq.n	800f976 <_kill_r+0x1e>
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	bd70      	pop	{r4, r5, r6, pc}
 800f978:	20000bb4 	.word	0x20000bb4

0800f97c <_getpid_r>:
 800f97c:	b510      	push	{r4, lr}
 800f97e:	f7f3 fd33 	bl	80033e8 <_getpid>
 800f982:	bd10      	pop	{r4, pc}

0800f984 <round>:
 800f984:	b570      	push	{r4, r5, r6, lr}
 800f986:	004a      	lsls	r2, r1, #1
 800f988:	000d      	movs	r5, r1
 800f98a:	4920      	ldr	r1, [pc, #128]	; (800fa0c <round+0x88>)
 800f98c:	0d52      	lsrs	r2, r2, #21
 800f98e:	1851      	adds	r1, r2, r1
 800f990:	0006      	movs	r6, r0
 800f992:	2913      	cmp	r1, #19
 800f994:	dc18      	bgt.n	800f9c8 <round+0x44>
 800f996:	2900      	cmp	r1, #0
 800f998:	da09      	bge.n	800f9ae <round+0x2a>
 800f99a:	0feb      	lsrs	r3, r5, #31
 800f99c:	2200      	movs	r2, #0
 800f99e:	07db      	lsls	r3, r3, #31
 800f9a0:	3101      	adds	r1, #1
 800f9a2:	d101      	bne.n	800f9a8 <round+0x24>
 800f9a4:	491a      	ldr	r1, [pc, #104]	; (800fa10 <round+0x8c>)
 800f9a6:	430b      	orrs	r3, r1
 800f9a8:	0019      	movs	r1, r3
 800f9aa:	0010      	movs	r0, r2
 800f9ac:	e017      	b.n	800f9de <round+0x5a>
 800f9ae:	4c19      	ldr	r4, [pc, #100]	; (800fa14 <round+0x90>)
 800f9b0:	410c      	asrs	r4, r1
 800f9b2:	0022      	movs	r2, r4
 800f9b4:	402a      	ands	r2, r5
 800f9b6:	4302      	orrs	r2, r0
 800f9b8:	d013      	beq.n	800f9e2 <round+0x5e>
 800f9ba:	2280      	movs	r2, #128	; 0x80
 800f9bc:	0312      	lsls	r2, r2, #12
 800f9be:	410a      	asrs	r2, r1
 800f9c0:	1953      	adds	r3, r2, r5
 800f9c2:	43a3      	bics	r3, r4
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	e7ef      	b.n	800f9a8 <round+0x24>
 800f9c8:	2933      	cmp	r1, #51	; 0x33
 800f9ca:	dd0d      	ble.n	800f9e8 <round+0x64>
 800f9cc:	2380      	movs	r3, #128	; 0x80
 800f9ce:	00db      	lsls	r3, r3, #3
 800f9d0:	4299      	cmp	r1, r3
 800f9d2:	d106      	bne.n	800f9e2 <round+0x5e>
 800f9d4:	0002      	movs	r2, r0
 800f9d6:	002b      	movs	r3, r5
 800f9d8:	0029      	movs	r1, r5
 800f9da:	f7f0 feed 	bl	80007b8 <__aeabi_dadd>
 800f9de:	0006      	movs	r6, r0
 800f9e0:	000d      	movs	r5, r1
 800f9e2:	0030      	movs	r0, r6
 800f9e4:	0029      	movs	r1, r5
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}
 800f9e8:	4c0b      	ldr	r4, [pc, #44]	; (800fa18 <round+0x94>)
 800f9ea:	1912      	adds	r2, r2, r4
 800f9ec:	2401      	movs	r4, #1
 800f9ee:	4264      	negs	r4, r4
 800f9f0:	40d4      	lsrs	r4, r2
 800f9f2:	4220      	tst	r0, r4
 800f9f4:	d0f5      	beq.n	800f9e2 <round+0x5e>
 800f9f6:	2233      	movs	r2, #51	; 0x33
 800f9f8:	1a51      	subs	r1, r2, r1
 800f9fa:	3a32      	subs	r2, #50	; 0x32
 800f9fc:	408a      	lsls	r2, r1
 800f9fe:	1812      	adds	r2, r2, r0
 800fa00:	4282      	cmp	r2, r0
 800fa02:	4180      	sbcs	r0, r0
 800fa04:	4240      	negs	r0, r0
 800fa06:	182b      	adds	r3, r5, r0
 800fa08:	43a2      	bics	r2, r4
 800fa0a:	e7cd      	b.n	800f9a8 <round+0x24>
 800fa0c:	fffffc01 	.word	0xfffffc01
 800fa10:	3ff00000 	.word	0x3ff00000
 800fa14:	000fffff 	.word	0x000fffff
 800fa18:	fffffbed 	.word	0xfffffbed

0800fa1c <_init>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	46c0      	nop			; (mov r8, r8)
 800fa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa22:	bc08      	pop	{r3}
 800fa24:	469e      	mov	lr, r3
 800fa26:	4770      	bx	lr

0800fa28 <_fini>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	46c0      	nop			; (mov r8, r8)
 800fa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa2e:	bc08      	pop	{r3}
 800fa30:	469e      	mov	lr, r3
 800fa32:	4770      	bx	lr
