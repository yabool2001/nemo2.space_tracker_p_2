
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c30  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c4  08013cf0  08013cf0  00023cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015db4  08015db4  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015db4  08015db4  00025db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dbc  08015dbc  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015dbc  08015dbc  00025dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dc4  08015dc4  00025dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08015dc8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  200006d8  080164a0  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  080164a0  00030f60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d46e  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d06  00000000  00000000  0004dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  000518b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001622  00000000  00000000  00053530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221b5  00000000  00000000  00054b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c05  00000000  00000000  00076d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca39  00000000  00000000  0009790c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008388  00000000  00000000  00164348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013cd4 	.word	0x08013cd4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08013cd4 	.word	0x08013cd4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08015828 	.word	0x08015828
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 ff20 	bl	80043f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f9be 	bl	8002938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc50 	bl	8002e60 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa10 	bl	80029e4 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 faf0 	bl	8002ba8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fab0 	bl	8002b2c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb2a 	bl	8002c24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fb76 	bl	8002cc0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fbc2 	bl	8002d5c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc0e 	bl	8002df8 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4bc0      	ldr	r3, [pc, #768]	; (80028e0 <main+0x338>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd49 	bl	8003078 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fd77 	bl	80030d8 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025ea:	4bbe      	ldr	r3, [pc, #760]	; (80028e4 <main+0x33c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	49bd      	ldr	r1, [pc, #756]	; (80028e8 <main+0x340>)
 80025f2:	4bbe      	ldr	r3, [pc, #760]	; (80028ec <main+0x344>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f00a fd93 	bl	800d120 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4bbc      	ldr	r3, [pc, #752]	; (80028ec <main+0x344>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fd3b 	bl	8003078 <send_debug_logs>

  my_tim_init () ;
 8002602:	f001 fafb 	bl	8003bfc <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f001 f90a 	bl	8003820 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260c:	f001 f93a 	bl	8003884 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002610:	4bb7      	ldr	r3, [pc, #732]	; (80028f0 <main+0x348>)
 8002612:	0018      	movs	r0, r3
 8002614:	f008 f99a 	bl	800a94c <my_gnss_acq_coordinates>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	4bb5      	ldr	r3, [pc, #724]	; (80028f4 <main+0x34c>)
 800261e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002620:	f001 f94a 	bl	80038b8 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002624:	4bb4      	ldr	r3, [pc, #720]	; (80028f8 <main+0x350>)
 8002626:	0018      	movs	r0, r3
 8002628:	f008 fb16 	bl	800ac58 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262c:	4bb0      	ldr	r3, [pc, #704]	; (80028f0 <main+0x348>)
 800262e:	7c1b      	ldrb	r3, [r3, #16]
 8002630:	001e      	movs	r6, r3
 8002632:	4baf      	ldr	r3, [pc, #700]	; (80028f0 <main+0x348>)
 8002634:	689c      	ldr	r4, [r3, #8]
 8002636:	68dd      	ldr	r5, [r3, #12]
 8002638:	4bad      	ldr	r3, [pc, #692]	; (80028f0 <main+0x348>)
 800263a:	8a5b      	ldrh	r3, [r3, #18]
 800263c:	4698      	mov	r8, r3
 800263e:	4bac      	ldr	r3, [pc, #688]	; (80028f0 <main+0x348>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	213c      	movs	r1, #60	; 0x3c
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd79 	bl	800013c <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	4aab      	ldr	r2, [pc, #684]	; (80028fc <main+0x354>)
 800264e:	49ac      	ldr	r1, [pc, #688]	; (8002900 <main+0x358>)
 8002650:	48a6      	ldr	r0, [pc, #664]	; (80028ec <main+0x344>)
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	4643      	mov	r3, r8
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	9402      	str	r4, [sp, #8]
 800265a:	9503      	str	r5, [sp, #12]
 800265c:	9601      	str	r6, [sp, #4]
 800265e:	4ba6      	ldr	r3, [pc, #664]	; (80028f8 <main+0x350>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	23cc      	movs	r3, #204	; 0xcc
 8002664:	f00a fd5c 	bl	800d120 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002668:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <main+0x344>)
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fd04 	bl	8003078 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002670:	4ba0      	ldr	r3, [pc, #640]	; (80028f4 <main+0x34c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d013      	beq.n	80026a6 <main+0xfe>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267e:	4ba1      	ldr	r3, [pc, #644]	; (8002904 <main+0x35c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f008 fb40 	bl	800ad08 <my_rtc_set_alarm>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d00c      	beq.n	80026a6 <main+0xfe>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 800268c:	4b9d      	ldr	r3, [pc, #628]	; (8002904 <main+0x35c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a9a      	ldr	r2, [pc, #616]	; (80028fc <main+0x354>)
 8002692:	499d      	ldr	r1, [pc, #628]	; (8002908 <main+0x360>)
 8002694:	4895      	ldr	r0, [pc, #596]	; (80028ec <main+0x344>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	23d2      	movs	r3, #210	; 0xd2
 800269a:	f00a fd41 	bl	800d120 <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 800269e:	4b93      	ldr	r3, [pc, #588]	; (80028ec <main+0x344>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fddb 	bl	800325c <my_sys_sleep>
	  }
  }

  my_acc_problem_flag = my_acc_init () ;
 80026a6:	f001 f94f 	bl	8003948 <my_acc_init>
 80026aa:	0003      	movs	r3, r0
 80026ac:	001a      	movs	r2, r3
 80026ae:	4b97      	ldr	r3, [pc, #604]	; (800290c <main+0x364>)
 80026b0:	701a      	strb	r2, [r3, #0]

  if ( !my_astro_init () )
 80026b2:	f008 f899 	bl	800a7e8 <my_astro_init>
 80026b6:	0003      	movs	r3, r0
 80026b8:	001a      	movs	r2, r3
 80026ba:	2301      	movs	r3, #1
 80026bc:	4053      	eors	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00e      	beq.n	80026e2 <main+0x13a>
	  my_sys_restart () ;
 80026c4:	f000 fda6 	bl	8003214 <my_sys_restart>
 80026c8:	e05b      	b.n	8002782 <main+0x1da>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026ca:	4a8c      	ldr	r2, [pc, #560]	; (80028fc <main+0x354>)
 80026cc:	4990      	ldr	r1, [pc, #576]	; (8002910 <main+0x368>)
 80026ce:	4887      	ldr	r0, [pc, #540]	; (80028ec <main+0x344>)
 80026d0:	23df      	movs	r3, #223	; 0xdf
 80026d2:	f00a fd25 	bl	800d120 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026d6:	4b85      	ldr	r3, [pc, #532]	; (80028ec <main+0x344>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fccd 	bl	8003078 <send_debug_logs>
		  my_astro_handle_evt () ;
 80026de:	f008 f8e3 	bl	800a8a8 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80026e2:	f001 f9c3 	bl	8003a6c <my_astro_evt_pin>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d1ef      	bne.n	80026ca <main+0x122>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 80026ea:	4b8a      	ldr	r3, [pc, #552]	; (8002914 <main+0x36c>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	4698      	mov	r8, r3
 80026f0:	4b7f      	ldr	r3, [pc, #508]	; (80028f0 <main+0x348>)
 80026f2:	689c      	ldr	r4, [r3, #8]
 80026f4:	68dd      	ldr	r5, [r3, #12]
 80026f6:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <main+0x348>)
 80026f8:	8a5b      	ldrh	r3, [r3, #18]
 80026fa:	001e      	movs	r6, r3
 80026fc:	4b7c      	ldr	r3, [pc, #496]	; (80028f0 <main+0x348>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	213c      	movs	r1, #60	; 0x3c
 8002702:	0018      	movs	r0, r3
 8002704:	f7fd fd1a 	bl	800013c <__udivsi3>
 8002708:	0003      	movs	r3, r0
 800270a:	001a      	movs	r2, r3
 800270c:	4b82      	ldr	r3, [pc, #520]	; (8002918 <main+0x370>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4982      	ldr	r1, [pc, #520]	; (800291c <main+0x374>)
 8002712:	4883      	ldr	r0, [pc, #524]	; (8002920 <main+0x378>)
 8002714:	9304      	str	r3, [sp, #16]
 8002716:	9203      	str	r2, [sp, #12]
 8002718:	9602      	str	r6, [sp, #8]
 800271a:	9400      	str	r4, [sp, #0]
 800271c:	9501      	str	r5, [sp, #4]
 800271e:	4642      	mov	r2, r8
 8002720:	f00a fcfe 	bl	800d120 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002724:	4a75      	ldr	r2, [pc, #468]	; (80028fc <main+0x354>)
 8002726:	497f      	ldr	r1, [pc, #508]	; (8002924 <main+0x37c>)
 8002728:	4870      	ldr	r0, [pc, #448]	; (80028ec <main+0x344>)
 800272a:	4b7d      	ldr	r3, [pc, #500]	; (8002920 <main+0x378>)
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	23e4      	movs	r3, #228	; 0xe4
 8002730:	f00a fcf6 	bl	800d120 <sprintf>
	  my_astro_send_uplink ( my_astro_payload , dbg_payload ) ;
 8002734:	4a6d      	ldr	r2, [pc, #436]	; (80028ec <main+0x344>)
 8002736:	4b7a      	ldr	r3, [pc, #488]	; (8002920 <main+0x378>)
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f001 f9b6 	bl	8003aac <my_astro_send_uplink>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002740:	4b70      	ldr	r3, [pc, #448]	; (8002904 <main+0x35c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	0018      	movs	r0, r3
 8002746:	f008 fadf 	bl	800ad08 <my_rtc_set_alarm>
 800274a:	1e03      	subs	r3, r0, #0
 800274c:	d019      	beq.n	8002782 <main+0x1da>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <main+0x35c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	; (80028fc <main+0x354>)
 8002754:	496c      	ldr	r1, [pc, #432]	; (8002908 <main+0x360>)
 8002756:	4865      	ldr	r0, [pc, #404]	; (80028ec <main+0x344>)
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	23e8      	movs	r3, #232	; 0xe8
 800275c:	f00a fce0 	bl	800d120 <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 8002760:	4b62      	ldr	r3, [pc, #392]	; (80028ec <main+0x344>)
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fd7a 	bl	800325c <my_sys_sleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002768:	e00b      	b.n	8002782 <main+0x1da>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 800276a:	4a64      	ldr	r2, [pc, #400]	; (80028fc <main+0x354>)
 800276c:	4968      	ldr	r1, [pc, #416]	; (8002910 <main+0x368>)
 800276e:	485f      	ldr	r0, [pc, #380]	; (80028ec <main+0x344>)
 8002770:	23f5      	movs	r3, #245	; 0xf5
 8002772:	f00a fcd5 	bl	800d120 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <main+0x344>)
 8002778:	0018      	movs	r0, r3
 800277a:	f000 fc7d 	bl	8003078 <send_debug_logs>
		  my_astro_handle_evt () ;
 800277e:	f008 f893 	bl	800a8a8 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002782:	f001 f973 	bl	8003a6c <my_astro_evt_pin>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d1ef      	bne.n	800276a <main+0x1c2>
	  }
	  if ( astro_rcv_cmd_flag )
 800278a:	4b67      	ldr	r3, [pc, #412]	; (8002928 <main+0x380>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <main+0x1fa>
	  {
		  astro_rcv_cmd_flag = false ;
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <main+0x380>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 8002798:	f000 fe28 	bl	80033ec <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 800279c:	4b63      	ldr	r3, [pc, #396]	; (800292c <main+0x384>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <main+0x388>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <main+0x204>
 80027aa:	e081      	b.n	80028b0 <main+0x308>
	  {
		  my_rtc_alarm_flag = false ;
 80027ac:	4b60      	ldr	r3, [pc, #384]	; (8002930 <main+0x388>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 80027b2:	f001 f867 	bl	8003884 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 80027b6:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <main+0x348>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f008 f8c7 	bl	800a94c <my_gnss_acq_coordinates>
 80027be:	0003      	movs	r3, r0
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b4c      	ldr	r3, [pc, #304]	; (80028f4 <main+0x34c>)
 80027c4:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 80027c6:	f001 f877 	bl	80038b8 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <main+0x350>)
 80027cc:	0018      	movs	r0, r3
 80027ce:	f008 fa43 	bl	800ac58 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <main+0x348>)
 80027d4:	7c1b      	ldrb	r3, [r3, #16]
 80027d6:	4698      	mov	r8, r3
 80027d8:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <main+0x348>)
 80027da:	689c      	ldr	r4, [r3, #8]
 80027dc:	68dd      	ldr	r5, [r3, #12]
 80027de:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <main+0x348>)
 80027e0:	8a5b      	ldrh	r3, [r3, #18]
 80027e2:	4699      	mov	r9, r3
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <main+0x348>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	213c      	movs	r1, #60	; 0x3c
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fd fca6 	bl	800013c <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	469c      	mov	ip, r3
 80027f4:	2383      	movs	r3, #131	; 0x83
 80027f6:	005e      	lsls	r6, r3, #1
 80027f8:	4a40      	ldr	r2, [pc, #256]	; (80028fc <main+0x354>)
 80027fa:	4941      	ldr	r1, [pc, #260]	; (8002900 <main+0x358>)
 80027fc:	483b      	ldr	r0, [pc, #236]	; (80028ec <main+0x344>)
 80027fe:	4663      	mov	r3, ip
 8002800:	9305      	str	r3, [sp, #20]
 8002802:	464b      	mov	r3, r9
 8002804:	9304      	str	r3, [sp, #16]
 8002806:	9402      	str	r4, [sp, #8]
 8002808:	9503      	str	r5, [sp, #12]
 800280a:	4643      	mov	r3, r8
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <main+0x350>)
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	0033      	movs	r3, r6
 8002814:	f00a fc84 	bl	800d120 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002818:	4b34      	ldr	r3, [pc, #208]	; (80028ec <main+0x344>)
 800281a:	0018      	movs	r0, r3
 800281c:	f000 fc2c 	bl	8003078 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <main+0x34c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d043      	beq.n	80028b0 <main+0x308>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <main+0x348>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <main+0x348>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0019      	movs	r1, r3
 8002832:	0010      	movs	r0, r2
 8002834:	f008 f87a 	bl	800a92c <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002838:	4b36      	ldr	r3, [pc, #216]	; (8002914 <main+0x36c>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	4698      	mov	r8, r3
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <main+0x348>)
 8002840:	689c      	ldr	r4, [r3, #8]
 8002842:	68dd      	ldr	r5, [r3, #12]
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <main+0x348>)
 8002846:	8a5b      	ldrh	r3, [r3, #18]
 8002848:	001e      	movs	r6, r3
 800284a:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <main+0x348>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	213c      	movs	r1, #60	; 0x3c
 8002850:	0018      	movs	r0, r3
 8002852:	f7fd fc73 	bl	800013c <__udivsi3>
 8002856:	0003      	movs	r3, r0
 8002858:	469c      	mov	ip, r3
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <main+0x348>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <main+0x348>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <main+0x38c>)
 8002864:	482e      	ldr	r0, [pc, #184]	; (8002920 <main+0x378>)
 8002866:	9305      	str	r3, [sp, #20]
 8002868:	9204      	str	r2, [sp, #16]
 800286a:	4663      	mov	r3, ip
 800286c:	9303      	str	r3, [sp, #12]
 800286e:	9602      	str	r6, [sp, #8]
 8002870:	9400      	str	r4, [sp, #0]
 8002872:	9501      	str	r5, [sp, #4]
 8002874:	4642      	mov	r2, r8
 8002876:	f00a fc53 	bl	800d120 <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <main+0x36c>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	b291      	uxth	r1, r2
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <main+0x36c>)
 8002884:	8011      	strh	r1, [r2, #0]
 8002886:	4a26      	ldr	r2, [pc, #152]	; (8002920 <main+0x378>)
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f007 ffe4 	bl	800a858 <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 8002890:	f001 f8fe 	bl	8003a90 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002894:	2387      	movs	r3, #135	; 0x87
 8002896:	005c      	lsls	r4, r3, #1
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <main+0x354>)
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <main+0x37c>)
 800289c:	4813      	ldr	r0, [pc, #76]	; (80028ec <main+0x344>)
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <main+0x378>)
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	0023      	movs	r3, r4
 80028a4:	f00a fc3c 	bl	800d120 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <main+0x344>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fbe4 	bl	8003078 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <main+0x35c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	0018      	movs	r0, r3
 80028b6:	f008 fa27 	bl	800ad08 <my_rtc_set_alarm>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d100      	bne.n	80028c0 <main+0x318>
 80028be:	e760      	b.n	8002782 <main+0x1da>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <main+0x35c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	228a      	movs	r2, #138	; 0x8a
 80028c6:	0054      	lsls	r4, r2, #1
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <main+0x354>)
 80028ca:	490f      	ldr	r1, [pc, #60]	; (8002908 <main+0x360>)
 80028cc:	4807      	ldr	r0, [pc, #28]	; (80028ec <main+0x344>)
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	0023      	movs	r3, r4
 80028d2:	f00a fc25 	bl	800d120 <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <main+0x344>)
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 fcbf 	bl	800325c <my_sys_sleep>
	  while ( my_astro_evt_pin () )
 80028de:	e750      	b.n	8002782 <main+0x1da>
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000a22 	.word	0x20000a22
 80028e8:	08013d20 	.word	0x08013d20
 80028ec:	20000b2c 	.word	0x20000b2c
 80028f0:	20000af0 	.word	0x20000af0
 80028f4:	20000b1b 	.word	0x20000b1b
 80028f8:	20000a24 	.word	0x20000a24
 80028fc:	08013d30 	.word	0x08013d30
 8002900:	08013d44 	.word	0x08013d44
 8002904:	2000000c 	.word	0x2000000c
 8002908:	08013d84 	.word	0x08013d84
 800290c:	20000b1c 	.word	0x20000b1c
 8002910:	08013db4 	.word	0x08013db4
 8002914:	20000ae4 	.word	0x20000ae4
 8002918:	20000004 	.word	0x20000004
 800291c:	08013dcc 	.word	0x08013dcc
 8002920:	20000a38 	.word	0x20000a38
 8002924:	08013de0 	.word	0x08013de0
 8002928:	20000c26 	.word	0x20000c26
 800292c:	20000c28 	.word	0x20000c28
 8002930:	20000b1a 	.word	0x20000b1a
 8002934:	08013df4 	.word	0x08013df4

08002938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b095      	sub	sp, #84	; 0x54
 800293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293e:	2414      	movs	r4, #20
 8002940:	193b      	adds	r3, r7, r4
 8002942:	0018      	movs	r0, r3
 8002944:	233c      	movs	r3, #60	; 0x3c
 8002946:	001a      	movs	r2, r3
 8002948:	2100      	movs	r1, #0
 800294a:	f00a fc7f 	bl	800d24c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	0018      	movs	r0, r3
 8002952:	2310      	movs	r3, #16
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f00a fc78 	bl	800d24c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	0018      	movs	r0, r3
 8002962:	f002 fa11 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002966:	f002 f9c9 	bl	8004cfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <SystemClock_Config+0xa8>)
 800296c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <SystemClock_Config+0xa8>)
 8002970:	2118      	movs	r1, #24
 8002972:	438a      	bics	r2, r1
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2206      	movs	r2, #6
 800297a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800297c:	193b      	adds	r3, r7, r4
 800297e:	2201      	movs	r2, #1
 8002980:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	0052      	lsls	r2, r2, #1
 8002988:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2200      	movs	r2, #0
 800299a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299c:	193b      	adds	r3, r7, r4
 800299e:	0018      	movs	r0, r3
 80029a0:	f002 fa3e 	bl	8004e20 <HAL_RCC_OscConfig>
 80029a4:	1e03      	subs	r3, r0, #0
 80029a6:	d001      	beq.n	80029ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80029a8:	f001 f98a 	bl	8003cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2207      	movs	r2, #7
 80029b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2100      	movs	r1, #0
 80029c8:	0018      	movs	r0, r3
 80029ca:	f002 fd89 	bl	80054e0 <HAL_RCC_ClockConfig>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d001      	beq.n	80029d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029d2:	f001 f975 	bl	8003cc0 <Error_Handler>
  }
}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b015      	add	sp, #84	; 0x54
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	40021000 	.word	0x40021000

080029e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b090      	sub	sp, #64	; 0x40
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029ea:	232c      	movs	r3, #44	; 0x2c
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	0018      	movs	r0, r3
 80029f0:	2314      	movs	r3, #20
 80029f2:	001a      	movs	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f00a fc29 	bl	800d24c <memset>
  RTC_DateTypeDef sDate = {0};
 80029fa:	2328      	movs	r3, #40	; 0x28
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a02:	003b      	movs	r3, r7
 8002a04:	0018      	movs	r0, r3
 8002a06:	2328      	movs	r3, #40	; 0x28
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f00a fc1e 	bl	800d24c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a10:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a12:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <MX_RTC_Init+0x144>)
 8002a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a16:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a1e:	227f      	movs	r2, #127	; 0x7f
 8002a20:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a3a:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	05d2      	lsls	r2, r2, #23
 8002a40:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f003 f92e 	bl	8005cac <HAL_RTC_Init>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d001      	beq.n	8002a58 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002a54:	f001 f934 	bl	8003cc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2200      	movs	r2, #0
 8002a64:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2200      	movs	r2, #0
 8002a6a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a7e:	1879      	adds	r1, r7, r1
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <MX_RTC_Init+0x140>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f003 f9b3 	bl	8005df0 <HAL_RTC_SetTime>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002a8e:	f001 f917 	bl	8003cc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002a92:	2128      	movs	r1, #40	; 0x28
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2206      	movs	r2, #6
 8002a98:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002aac:	1879      	adds	r1, r7, r1
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_RTC_Init+0x140>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f003 faa0 	bl	8005ff8 <HAL_RTC_SetDate>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002abc:	f001 f900 	bl	8003cc0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002ac6:	003b      	movs	r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002acc:	003b      	movs	r3, r7
 8002ace:	2200      	movs	r2, #0
 8002ad0:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ad8:	003b      	movs	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ade:	003b      	movs	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ae4:	003b      	movs	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002aea:	003b      	movs	r3, r7
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002af0:	003b      	movs	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002af6:	003b      	movs	r3, r7
 8002af8:	2220      	movs	r2, #32
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002afe:	003b      	movs	r3, r7
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0052      	lsls	r2, r2, #1
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b06:	0039      	movs	r1, r7
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_RTC_Init+0x140>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f003 fb53 	bl	80061b8 <HAL_RTC_SetAlarm_IT>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b16:	f001 f8d3 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b010      	add	sp, #64	; 0x40
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	200006f4 	.word	0x200006f4
 8002b28:	40002800 	.word	0x40002800

08002b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <MX_SPI1_Init+0x78>)
 8002b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b38:	2282      	movs	r2, #130	; 0x82
 8002b3a:	0052      	lsls	r2, r2, #1
 8002b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b3e:	4b18      	ldr	r3, [pc, #96]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b46:	22e0      	movs	r2, #224	; 0xe0
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b86:	2208      	movs	r2, #8
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <MX_SPI1_Init+0x74>)
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f003 fdf3 	bl	8006778 <HAL_SPI_Init>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d001      	beq.n	8002b9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b96:	f001 f893 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000720 	.word	0x20000720
 8002ba4:	40013000 	.word	0x40013000

08002ba8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f00a fb48 	bl	800d24c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <MX_TIM6_Init+0x70>)
 8002bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <MX_TIM6_Init+0x74>)
 8002bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <MX_TIM6_Init+0x78>)
 8002bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f004 fceb 	bl	80075b8 <HAL_TIM_Base_Init>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002be6:	f001 f86b 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002bf6:	1d3a      	adds	r2, r7, #4
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <MX_TIM6_Init+0x6c>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f004 ff83 	bl	8007b08 <HAL_TIMEx_MasterConfigSynchronization>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c06:	f001 f85b 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b004      	add	sp, #16
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000784 	.word	0x20000784
 8002c18:	40001000 	.word	0x40001000
 8002c1c:	00003e7f 	.word	0x00003e7f
 8002c20:	000003e7 	.word	0x000003e7

08002c24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <MX_USART1_UART_Init+0x98>)
 8002c2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c30:	22e1      	movs	r2, #225	; 0xe1
 8002c32:	0252      	lsls	r2, r2, #9
 8002c34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f004 ffd8 	bl	8007c24 <HAL_UART_Init>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c78:	f001 f822 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	0018      	movs	r0, r3
 8002c82:	f005 ffb3 	bl	8008bec <HAL_UARTEx_SetTxFifoThreshold>
 8002c86:	1e03      	subs	r3, r0, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c8a:	f001 f819 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	0018      	movs	r0, r3
 8002c94:	f005 ffea 	bl	8008c6c <HAL_UARTEx_SetRxFifoThreshold>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c9c:	f001 f810 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <MX_USART1_UART_Init+0x94>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f005 ff68 	bl	8008b78 <HAL_UARTEx_DisableFifoMode>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002cac:	f001 f808 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	200007d0 	.word	0x200007d0
 8002cbc:	40013800 	.word	0x40013800

08002cc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <MX_USART2_UART_Init+0x98>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ccc:	22e1      	movs	r2, #225	; 0xe1
 8002cce:	0252      	lsls	r2, r2, #9
 8002cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cfc:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f004 ff8a 	bl	8007c24 <HAL_UART_Init>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d14:	f000 ffd4 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f005 ff65 	bl	8008bec <HAL_UARTEx_SetTxFifoThreshold>
 8002d22:	1e03      	subs	r3, r0, #0
 8002d24:	d001      	beq.n	8002d2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d26:	f000 ffcb 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f005 ff9c 	bl	8008c6c <HAL_UARTEx_SetRxFifoThreshold>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d001      	beq.n	8002d3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f000 ffc2 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <MX_USART2_UART_Init+0x94>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f005 ff1a 	bl	8008b78 <HAL_UARTEx_DisableFifoMode>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f000 ffba 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	20000864 	.word	0x20000864
 8002d58:	40004400 	.word	0x40004400

08002d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d60:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <MX_USART3_UART_Init+0x98>)
 8002d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002d66:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d68:	2296      	movs	r2, #150	; 0x96
 8002d6a:	0192      	lsls	r2, r2, #6
 8002d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d82:	220c      	movs	r2, #12
 8002d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f004 ff3c 	bl	8007c24 <HAL_UART_Init>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d001      	beq.n	8002db4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002db0:	f000 ff86 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002db6:	2100      	movs	r1, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f005 ff17 	bl	8008bec <HAL_UARTEx_SetTxFifoThreshold>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002dc2:	f000 ff7d 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f005 ff4e 	bl	8008c6c <HAL_UARTEx_SetRxFifoThreshold>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002dd4:	f000 ff74 	bl	8003cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <MX_USART3_UART_Init+0x94>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f005 fecc 	bl	8008b78 <HAL_UARTEx_DisableFifoMode>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d001      	beq.n	8002de8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002de4:	f000 ff6c 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200008f8 	.word	0x200008f8
 8002df4:	40004800 	.word	0x40004800

08002df8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <MX_USART5_UART_Init+0x64>)
 8002e00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e04:	2296      	movs	r2, #150	; 0x96
 8002e06:	0192      	lsls	r2, r2, #6
 8002e08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e1e:	220c      	movs	r2, #12
 8002e20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <MX_USART5_UART_Init+0x60>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f004 feee 	bl	8007c24 <HAL_UART_Init>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002e4c:	f000 ff38 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	2000098c 	.word	0x2000098c
 8002e5c:	40005000 	.word	0x40005000

08002e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b08b      	sub	sp, #44	; 0x2c
 8002e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	2414      	movs	r4, #20
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	2314      	movs	r3, #20
 8002e6e:	001a      	movs	r2, r3
 8002e70:	2100      	movs	r1, #0
 8002e72:	f00a f9eb 	bl	800d24c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e76:	4b7a      	ldr	r3, [pc, #488]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7a:	4b79      	ldr	r3, [pc, #484]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	4b77      	ldr	r3, [pc, #476]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e86:	2204      	movs	r2, #4
 8002e88:	4013      	ands	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	4b74      	ldr	r3, [pc, #464]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e94:	2101      	movs	r1, #1
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	4b71      	ldr	r3, [pc, #452]	; (8003060 <MX_GPIO_Init+0x200>)
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <MX_GPIO_Init+0x200>)
 8002eac:	2102      	movs	r1, #2
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb2:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <MX_GPIO_Init+0x200>)
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ebe:	4b68      	ldr	r3, [pc, #416]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec2:	4b67      	ldr	r3, [pc, #412]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <MX_GPIO_Init+0x200>)
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	2208      	movs	r2, #8
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	2200      	movs	r2, #0
 8002edc:	2110      	movs	r1, #16
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f001 febb 	bl	8004c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002ee4:	495f      	ldr	r1, [pc, #380]	; (8003064 <MX_GPIO_Init+0x204>)
 8002ee6:	4b60      	ldr	r3, [pc, #384]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	0018      	movs	r0, r3
 8002eec:	f001 feb5 	bl	8004c5a <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	485c      	ldr	r0, [pc, #368]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	0019      	movs	r1, r3
 8002efa:	f001 feae 	bl	8004c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002efe:	4b5b      	ldr	r3, [pc, #364]	; (800306c <MX_GPIO_Init+0x20c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	2103      	movs	r1, #3
 8002f04:	0018      	movs	r0, r3
 8002f06:	f001 fea8 	bl	8004c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2288      	movs	r2, #136	; 0x88
 8002f14:	0352      	lsls	r2, r2, #13
 8002f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f1e:	193a      	adds	r2, r7, r4
 8002f20:	23a0      	movs	r3, #160	; 0xa0
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f001 fc36 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	2202      	movs	r2, #2
 8002f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002f3e:	193a      	adds	r2, r7, r4
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	0011      	movs	r1, r2
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 fc26 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	2210      	movs	r2, #16
 8002f50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2201      	movs	r2, #1
 8002f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f64:	193a      	adds	r2, r7, r4
 8002f66:	23a0      	movs	r3, #160	; 0xa0
 8002f68:	05db      	lsls	r3, r3, #23
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fc13 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	4a3e      	ldr	r2, [pc, #248]	; (8003070 <MX_GPIO_Init+0x210>)
 8002f76:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <MX_GPIO_Init+0x208>)
 8002f8e:	0019      	movs	r1, r3
 8002f90:	0010      	movs	r0, r2
 8002f92:	f001 fc01 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002f96:	0021      	movs	r1, r4
 8002f98:	187b      	adds	r3, r7, r1
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	2288      	movs	r2, #136	; 0x88
 8002fa2:	0352      	lsls	r2, r2, #13
 8002fa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fac:	000c      	movs	r4, r1
 8002fae:	187b      	adds	r3, r7, r1
 8002fb0:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <MX_GPIO_Init+0x208>)
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	f001 fbef 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002fba:	0021      	movs	r1, r4
 8002fbc:	187b      	adds	r3, r7, r1
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0192      	lsls	r2, r2, #6
 8002fc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002fc4:	000c      	movs	r4, r1
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	2211      	movs	r2, #17
 8002fca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	4a23      	ldr	r2, [pc, #140]	; (8003068 <MX_GPIO_Init+0x208>)
 8002fdc:	0019      	movs	r1, r3
 8002fde:	0010      	movs	r0, r2
 8002fe0:	f001 fbda 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <MX_GPIO_Init+0x214>)
 8002fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fea:	193b      	adds	r3, r7, r4
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	193b      	adds	r3, r7, r4
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	193b      	adds	r3, r7, r4
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <MX_GPIO_Init+0x208>)
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f001 fbcb 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003002:	193b      	adds	r3, r7, r4
 8003004:	2203      	movs	r2, #3
 8003006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003008:	193b      	adds	r3, r7, r4
 800300a:	2201      	movs	r2, #1
 800300c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	193b      	adds	r3, r7, r4
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	193b      	adds	r3, r7, r4
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800301a:	193b      	adds	r3, r7, r4
 800301c:	4a13      	ldr	r2, [pc, #76]	; (800306c <MX_GPIO_Init+0x20c>)
 800301e:	0019      	movs	r1, r3
 8003020:	0010      	movs	r0, r2
 8003022:	f001 fbb9 	bl	8004798 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003026:	0021      	movs	r1, r4
 8003028:	187b      	adds	r3, r7, r1
 800302a:	220c      	movs	r2, #12
 800302c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	187b      	adds	r3, r7, r1
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003034:	187b      	adds	r3, r7, r1
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800303a:	187b      	adds	r3, r7, r1
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <MX_GPIO_Init+0x20c>)
 800303e:	0019      	movs	r1, r3
 8003040:	0010      	movs	r0, r2
 8003042:	f001 fba9 	bl	8004798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2006      	movs	r0, #6
 800304c:	f001 fb6e 	bl	800472c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003050:	2006      	movs	r0, #6
 8003052:	f001 fb80 	bl	8004756 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b00b      	add	sp, #44	; 0x2c
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40021000 	.word	0x40021000
 8003064:	0000a403 	.word	0x0000a403
 8003068:	50000400 	.word	0x50000400
 800306c:	50000c00 	.word	0x50000c00
 8003070:	00008c03 	.word	0x00008c03
 8003074:	00004040 	.word	0x00004040

08003078 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( const char* p_tx_buffer )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd f83e 	bl	8000104 <strlen>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2bfa      	cmp	r3, #250	; 0xfa
 8003090:	d908      	bls.n	80030a4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8003092:	23fa      	movs	r3, #250	; 0xfa
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	490d      	ldr	r1, [pc, #52]	; (80030cc <send_debug_logs+0x54>)
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <send_debug_logs+0x58>)
 800309a:	222a      	movs	r2, #42	; 0x2a
 800309c:	f004 fe58 	bl	8007d50 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030a0:	23fa      	movs	r3, #250	; 0xfa
 80030a2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	23fa      	movs	r3, #250	; 0xfa
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4808      	ldr	r0, [pc, #32]	; (80030d0 <send_debug_logs+0x58>)
 80030b0:	f004 fe4e 	bl	8007d50 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80030b4:	23fa      	movs	r3, #250	; 0xfa
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4906      	ldr	r1, [pc, #24]	; (80030d4 <send_debug_logs+0x5c>)
 80030ba:	4805      	ldr	r0, [pc, #20]	; (80030d0 <send_debug_logs+0x58>)
 80030bc:	2201      	movs	r2, #1
 80030be:	f004 fe47 	bl	8007d50 <HAL_UART_Transmit>
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	08013e0c 	.word	0x08013e0c
 80030d0:	20000864 	.word	0x20000864
 80030d4:	08013e38 	.word	0x08013e38

080030d8 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 80030dc:	4b43      	ldr	r3, [pc, #268]	; (80031ec <my_sys_init+0x114>)
 80030de:	2200      	movs	r2, #0
 80030e0:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <my_sys_init+0x114>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 80030e8:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <my_sys_init+0x118>)
 80030ea:	2104      	movs	r1, #4
 80030ec:	0018      	movs	r0, r3
 80030ee:	f001 fd97 	bl	8004c20 <HAL_GPIO_ReadPin>
 80030f2:	0003      	movs	r3, r0
 80030f4:	1e5a      	subs	r2, r3, #1
 80030f6:	4193      	sbcs	r3, r2
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <my_sys_init+0x11c>)
 80030fc:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 80030fe:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <my_sys_init+0x118>)
 8003100:	2108      	movs	r1, #8
 8003102:	0018      	movs	r0, r3
 8003104:	f001 fd8c 	bl	8004c20 <HAL_GPIO_ReadPin>
 8003108:	0003      	movs	r3, r0
 800310a:	1e5a      	subs	r2, r3, #1
 800310c:	4193      	sbcs	r3, r2
 800310e:	b2da      	uxtb	r2, r3
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <my_sys_init+0x120>)
 8003112:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003114:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <my_sys_init+0x11c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2201      	movs	r2, #1
 800311a:	4053      	eors	r3, r2
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <my_sys_init+0x7e>
 8003122:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <my_sys_init+0x120>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2201      	movs	r2, #1
 8003128:	4053      	eors	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d012      	beq.n	8003156 <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 8003130:	4b32      	ldr	r3, [pc, #200]	; (80031fc <my_sys_init+0x124>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003136:	4b32      	ldr	r3, [pc, #200]	; (8003200 <my_sys_init+0x128>)
 8003138:	22e1      	movs	r2, #225	; 0xe1
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800313e:	4b31      	ldr	r3, [pc, #196]	; (8003204 <my_sys_init+0x12c>)
 8003140:	2278      	movs	r2, #120	; 0x78
 8003142:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <my_sys_init+0x130>)
 8003146:	221e      	movs	r2, #30
 8003148:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 800314a:	4930      	ldr	r1, [pc, #192]	; (800320c <my_sys_init+0x134>)
 800314c:	2200      	movs	r2, #0
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	600a      	str	r2, [r1, #0]
 8003154:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <my_sys_init+0x11c>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d019      	beq.n	8003192 <my_sys_init+0xba>
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <my_sys_init+0x120>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	4053      	eors	r3, r2
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <my_sys_init+0x124>)
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <my_sys_init+0x128>)
 8003174:	22e1      	movs	r2, #225	; 0xe1
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <my_sys_init+0x12c>)
 800317c:	2278      	movs	r2, #120	; 0x78
 800317e:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <my_sys_init+0x130>)
 8003182:	221e      	movs	r2, #30
 8003184:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 8003186:	4921      	ldr	r1, [pc, #132]	; (800320c <my_sys_init+0x134>)
 8003188:	2200      	movs	r2, #0
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	05db      	lsls	r3, r3, #23
 800318e:	600a      	str	r2, [r1, #0]
 8003190:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <my_sys_init+0x11c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	4053      	eors	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <my_sys_init+0xf6>
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <my_sys_init+0x120>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <my_sys_init+0x124>)
 80031aa:	2202      	movs	r2, #2
 80031ac:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <my_sys_init+0x128>)
 80031b0:	2296      	movs	r2, #150	; 0x96
 80031b2:	0052      	lsls	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <my_sys_init+0x12c>)
 80031b8:	2296      	movs	r2, #150	; 0x96
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <my_sys_init+0x130>)
 80031c0:	223c      	movs	r2, #60	; 0x3c
 80031c2:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 80031c4:	4911      	ldr	r1, [pc, #68]	; (800320c <my_sys_init+0x134>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <my_sys_init+0x138>)
 80031ca:	600a      	str	r2, [r1, #0]
 80031cc:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <my_sys_init+0x11c>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d006      	beq.n	80031e4 <my_sys_init+0x10c>
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <my_sys_init+0x120>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <my_sys_init+0x124>)
 80031e0:	2203      	movs	r2, #3
 80031e2:	701a      	strb	r2, [r3, #0]
	}
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	20000af0 	.word	0x20000af0
 80031f0:	50000c00 	.word	0x50000c00
 80031f4:	20000a20 	.word	0x20000a20
 80031f8:	20000a21 	.word	0x20000a21
 80031fc:	20000a22 	.word	0x20000a22
 8003200:	2000000c 	.word	0x2000000c
 8003204:	2000001a 	.word	0x2000001a
 8003208:	2000001c 	.word	0x2000001c
 800320c:	20000020 	.word	0x20000020
 8003210:	40240000 	.word	0x40240000

08003214 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b083      	sub	sp, #12
 8003218:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <my_sys_restart+0x34>)
 800321c:	0018      	movs	r0, r3
 800321e:	f007 fd1b 	bl	800ac58 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003222:	4c0a      	ldr	r4, [pc, #40]	; (800324c <my_sys_restart+0x38>)
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <my_sys_restart+0x3c>)
 8003226:	490b      	ldr	r1, [pc, #44]	; (8003254 <my_sys_restart+0x40>)
 8003228:	480b      	ldr	r0, [pc, #44]	; (8003258 <my_sys_restart+0x44>)
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <my_sys_restart+0x34>)
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	0023      	movs	r3, r4
 8003230:	f009 ff76 	bl	800d120 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <my_sys_restart+0x44>)
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff ff1e 	bl	8003078 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 800323c:	f001 fa9b 	bl	8004776 <HAL_NVIC_SystemReset>
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b001      	add	sp, #4
 8003246:	bd90      	pop	{r4, r7, pc}
 8003248:	20000a24 	.word	0x20000a24
 800324c:	00000347 	.word	0x00000347
 8003250:	08013d30 	.word	0x08013d30
 8003254:	08013e3c 	.word	0x08013e3c
 8003258:	20000b2c 	.word	0x20000b2c

0800325c <my_sys_sleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_sleep ( char* m )
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b085      	sub	sp, #20
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
	send_debug_logs ( m ) ;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff ff06 	bl	8003078 <send_debug_logs>
	my_tim_stop () ;
 800326c:	f000 fce2 	bl	8003c34 <my_tim_stop>
	HAL_SuspendTick () ;
 8003270:	f001 f96c 	bl	800454c <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <my_sys_sleep+0x58>)
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	2102      	movs	r1, #2
 8003280:	0018      	movs	r0, r3
 8003282:	f001 fd49 	bl	8004d18 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 8003286:	f001 f96f 	bl	8004568 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <my_sys_sleep+0x5c>)
 800328c:	0018      	movs	r0, r3
 800328e:	f007 fce3 	bl	800ac58 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s,Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003292:	4c0a      	ldr	r4, [pc, #40]	; (80032bc <my_sys_sleep+0x60>)
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <my_sys_sleep+0x64>)
 8003296:	490b      	ldr	r1, [pc, #44]	; (80032c4 <my_sys_sleep+0x68>)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <my_sys_sleep+0x5c>)
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	0023      	movs	r3, r4
 80032a0:	f009 ff3e 	bl	800d120 <sprintf>
	send_debug_logs ( m ) ;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fee6 	bl	8003078 <send_debug_logs>
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b003      	add	sp, #12
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	20000b1a 	.word	0x20000b1a
 80032b8:	20000a24 	.word	0x20000a24
 80032bc:	00000361 	.word	0x00000361
 80032c0:	08013d30 	.word	0x08013d30
 80032c4:	08013e9c 	.word	0x08013e9c

080032c8 <my_sys_change_watchdog_time_ths>:
	sprintf ( m , "%s,%d,%s,Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( m ) ;
}

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	2396      	movs	r3, #150	; 0x96
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d30b      	bcc.n	80032f2 <my_sys_change_watchdog_time_ths+0x2a>
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	23e1      	movs	r3, #225	; 0xe1
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d806      	bhi.n	80032f2 <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <my_sys_change_watchdog_time_ths+0x34>)
 80032ea:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <my_sys_change_watchdog_time_ths+0x38>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	721a      	strb	r2, [r3, #8]
	}
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b002      	add	sp, #8
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000008 	.word	0x20000008
 8003300:	20000ad8 	.word	0x20000ad8

08003304 <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	2396      	movs	r3, #150	; 0x96
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	429a      	cmp	r2, r3
 8003314:	d309      	bcc.n	800332a <my_sys_change_AlarmA_time+0x26>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <my_sys_change_AlarmA_time+0x30>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d805      	bhi.n	800332a <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <my_sys_change_AlarmA_time+0x34>)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <my_sys_change_AlarmA_time+0x38>)
 8003326:	2201      	movs	r2, #1
 8003328:	721a      	strb	r2, [r3, #8]
	}
}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	0083d600 	.word	0x0083d600
 8003338:	2000000c 	.word	0x2000000c
 800333c:	20000ad8 	.word	0x20000ad8

08003340 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b2c      	cmp	r3, #44	; 0x2c
 800334c:	d90b      	bls.n	8003366 <my_sys_change_fix_acq_ths+0x26>
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	2396      	movs	r3, #150	; 0x96
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	429a      	cmp	r2, r3
 8003356:	d806      	bhi.n	8003366 <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	b29a      	uxth	r2, r3
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <my_sys_change_fix_acq_ths+0x30>)
 800335e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <my_sys_change_fix_acq_ths+0x34>)
 8003362:	2201      	movs	r2, #1
 8003364:	721a      	strb	r2, [r3, #8]
	}
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	2000001a 	.word	0x2000001a
 8003374:	20000ad8 	.word	0x20000ad8

08003378 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b0e      	cmp	r3, #14
 8003384:	d90b      	bls.n	800339e <my_sys_change_min_tns_time_ths+0x26>
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	2396      	movs	r3, #150	; 0x96
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d806      	bhi.n	800339e <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <my_sys_change_min_tns_time_ths+0x30>)
 8003396:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <my_sys_change_min_tns_time_ths+0x34>)
 800339a:	2201      	movs	r2, #1
 800339c:	721a      	strb	r2, [r3, #8]
	}
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b002      	add	sp, #8
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	2000001c 	.word	0x2000001c
 80033ac:	20000ad8 	.word	0x20000ad8

080033b0 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <my_sys_change_pdop_ths+0x2a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d80a      	bhi.n	80033da <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff f819 	bl	80023fc <__aeabi_ui2d>
 80033ca:	0002      	movs	r2, r0
 80033cc:	000b      	movs	r3, r1
 80033ce:	4905      	ldr	r1, [pc, #20]	; (80033e4 <my_sys_change_pdop_ths+0x34>)
 80033d0:	600a      	str	r2, [r1, #0]
 80033d2:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <my_sys_change_pdop_ths+0x38>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	721a      	strb	r2, [r3, #8]
	}
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	20000020 	.word	0x20000020
 80033e8:	20000ad8 	.word	0x20000ad8

080033ec <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	46d6      	mov	lr, sl
 80033f0:	464f      	mov	r7, r9
 80033f2:	4646      	mov	r6, r8
 80033f4:	b5c0      	push	{r6, r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 80033fa:	4be8      	ldr	r3, [pc, #928]	; (800379c <my_tracker_handle_cmd+0x3b0>)
 80033fc:	0018      	movs	r0, r3
 80033fe:	f008 fb51 	bl	800baa4 <my_tracker_api_is_cmd>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d100      	bne.n	8003408 <my_tracker_handle_cmd+0x1c>
 8003406:	e202      	b.n	800380e <my_tracker_handle_cmd+0x422>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003408:	4ae4      	ldr	r2, [pc, #912]	; (800379c <my_tracker_handle_cmd+0x3b0>)
 800340a:	4be5      	ldr	r3, [pc, #916]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800340c:	0011      	movs	r1, r2
 800340e:	0018      	movs	r0, r3
 8003410:	f008 fbb2 	bl	800bb78 <my_tracker_api_parse_cmd>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d100      	bne.n	800341a <my_tracker_handle_cmd+0x2e>
 8003418:	e1f9      	b.n	800380e <my_tracker_handle_cmd+0x422>
		{
			switch ( my_astro_cmd.code )
 800341a:	4be1      	ldr	r3, [pc, #900]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b09      	cmp	r3, #9
 8003420:	d900      	bls.n	8003424 <my_tracker_handle_cmd+0x38>
 8003422:	e18a      	b.n	800373a <my_tracker_handle_cmd+0x34e>
 8003424:	009a      	lsls	r2, r3, #2
 8003426:	4bdf      	ldr	r3, [pc, #892]	; (80037a4 <my_tracker_handle_cmd+0x3b8>)
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 800342e:	4bdc      	ldr	r3, [pc, #880]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f7ff ff48 	bl	80032c8 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003438:	4bdb      	ldr	r3, [pc, #876]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	001c      	movs	r4, r3
 800343e:	4bd8      	ldr	r3, [pc, #864]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003440:	7a1b      	ldrb	r3, [r3, #8]
 8003442:	001d      	movs	r5, r3
 8003444:	4bd6      	ldr	r3, [pc, #856]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	001a      	movs	r2, r3
 800344a:	4bd5      	ldr	r3, [pc, #852]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	49d7      	ldr	r1, [pc, #860]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 8003450:	48d7      	ldr	r0, [pc, #860]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	9200      	str	r2, [sp, #0]
 8003456:	002b      	movs	r3, r5
 8003458:	0022      	movs	r2, r4
 800345a:	f009 fe61 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800345e:	4cd5      	ldr	r4, [pc, #852]	; (80037b4 <my_tracker_handle_cmd+0x3c8>)
 8003460:	4ad5      	ldr	r2, [pc, #852]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 8003462:	49d6      	ldr	r1, [pc, #856]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 8003464:	48d6      	ldr	r0, [pc, #856]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003466:	4bd2      	ldr	r3, [pc, #840]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	0023      	movs	r3, r4
 800346c:	f009 fe58 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003470:	4bd3      	ldr	r3, [pc, #844]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fe00 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003478:	4bcb      	ldr	r3, [pc, #812]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	b291      	uxth	r1, r2
 8003480:	4ac9      	ldr	r2, [pc, #804]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003482:	8011      	strh	r1, [r2, #0]
 8003484:	4aca      	ldr	r2, [pc, #808]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003486:	0011      	movs	r1, r2
 8003488:	0018      	movs	r0, r3
 800348a:	f007 f9e5 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800348e:	f000 faff 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  break ;
 8003492:	e1bc      	b.n	800380e <my_tracker_handle_cmd+0x422>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 8003494:	4bc2      	ldr	r3, [pc, #776]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff ff33 	bl	8003304 <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800349e:	4bc2      	ldr	r3, [pc, #776]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	001c      	movs	r4, r3
 80034a4:	4bbe      	ldr	r3, [pc, #760]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80034a6:	7a1b      	ldrb	r3, [r3, #8]
 80034a8:	001d      	movs	r5, r3
 80034aa:	4bbd      	ldr	r3, [pc, #756]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	001a      	movs	r2, r3
 80034b0:	4bbb      	ldr	r3, [pc, #748]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	49bd      	ldr	r1, [pc, #756]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 80034b6:	48be      	ldr	r0, [pc, #760]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	002b      	movs	r3, r5
 80034be:	0022      	movs	r2, r4
 80034c0:	f009 fe2e 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034c4:	4cbf      	ldr	r4, [pc, #764]	; (80037c4 <my_tracker_handle_cmd+0x3d8>)
 80034c6:	4abc      	ldr	r2, [pc, #752]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 80034c8:	49bc      	ldr	r1, [pc, #752]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 80034ca:	48bd      	ldr	r0, [pc, #756]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 80034cc:	4bb8      	ldr	r3, [pc, #736]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	0023      	movs	r3, r4
 80034d2:	f009 fe25 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034d6:	4bba      	ldr	r3, [pc, #744]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff fdcd 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80034de:	4bb2      	ldr	r3, [pc, #712]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	b291      	uxth	r1, r2
 80034e6:	4ab0      	ldr	r2, [pc, #704]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80034e8:	8011      	strh	r1, [r2, #0]
 80034ea:	4ab1      	ldr	r2, [pc, #708]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f007 f9b2 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80034f4:	f000 facc 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  break ;
 80034f8:	e189      	b.n	800380e <my_tracker_handle_cmd+0x422>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 80034fa:	4ba9      	ldr	r3, [pc, #676]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7ff ff1e 	bl	8003340 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003504:	4ba8      	ldr	r3, [pc, #672]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	001c      	movs	r4, r3
 800350a:	4ba5      	ldr	r3, [pc, #660]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800350c:	7a1b      	ldrb	r3, [r3, #8]
 800350e:	001d      	movs	r5, r3
 8003510:	4ba3      	ldr	r3, [pc, #652]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	49a4      	ldr	r1, [pc, #656]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 800351c:	48a4      	ldr	r0, [pc, #656]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	9200      	str	r2, [sp, #0]
 8003522:	002b      	movs	r3, r5
 8003524:	0022      	movs	r2, r4
 8003526:	f009 fdfb 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800352a:	4ca7      	ldr	r4, [pc, #668]	; (80037c8 <my_tracker_handle_cmd+0x3dc>)
 800352c:	4aa2      	ldr	r2, [pc, #648]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 800352e:	49a3      	ldr	r1, [pc, #652]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 8003530:	48a3      	ldr	r0, [pc, #652]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003532:	4b9f      	ldr	r3, [pc, #636]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	0023      	movs	r3, r4
 8003538:	f009 fdf2 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800353c:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fd9a 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003544:	4b98      	ldr	r3, [pc, #608]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	b291      	uxth	r1, r2
 800354c:	4a96      	ldr	r2, [pc, #600]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800354e:	8011      	strh	r1, [r2, #0]
 8003550:	4a97      	ldr	r2, [pc, #604]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f007 f97f 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800355a:	f000 fa99 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  break ;
 800355e:	e156      	b.n	800380e <my_tracker_handle_cmd+0x422>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff ff07 	bl	8003378 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800356a:	4b8f      	ldr	r3, [pc, #572]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	001c      	movs	r4, r3
 8003570:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003572:	7a1b      	ldrb	r3, [r3, #8]
 8003574:	001d      	movs	r5, r3
 8003576:	4b8a      	ldr	r3, [pc, #552]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	001a      	movs	r2, r3
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	498a      	ldr	r1, [pc, #552]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 8003582:	488b      	ldr	r0, [pc, #556]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	002b      	movs	r3, r5
 800358a:	0022      	movs	r2, r4
 800358c:	f009 fdc8 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003590:	4c8e      	ldr	r4, [pc, #568]	; (80037cc <my_tracker_handle_cmd+0x3e0>)
 8003592:	4a89      	ldr	r2, [pc, #548]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 8003594:	4989      	ldr	r1, [pc, #548]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 8003596:	488a      	ldr	r0, [pc, #552]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003598:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	0023      	movs	r3, r4
 800359e:	f009 fdbf 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035a2:	4b87      	ldr	r3, [pc, #540]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fd67 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	b291      	uxth	r1, r2
 80035b2:	4a7d      	ldr	r2, [pc, #500]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80035b4:	8011      	strh	r1, [r2, #0]
 80035b6:	4a7e      	ldr	r2, [pc, #504]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f007 f94c 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80035c0:	f000 fa66 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  break ;
 80035c4:	e123      	b.n	800380e <my_tracker_handle_cmd+0x422>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 80035c6:	4b76      	ldr	r3, [pc, #472]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7ff fef0 	bl	80033b0 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035d0:	4b75      	ldr	r3, [pc, #468]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	001c      	movs	r4, r3
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80035d8:	7a1b      	ldrb	r3, [r3, #8]
 80035da:	001d      	movs	r5, r3
 80035dc:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	001a      	movs	r2, r3
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4971      	ldr	r1, [pc, #452]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 80035e8:	4871      	ldr	r0, [pc, #452]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	002b      	movs	r3, r5
 80035f0:	0022      	movs	r2, r4
 80035f2:	f009 fd95 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035f6:	4c76      	ldr	r4, [pc, #472]	; (80037d0 <my_tracker_handle_cmd+0x3e4>)
 80035f8:	4a6f      	ldr	r2, [pc, #444]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 80035fa:	4970      	ldr	r1, [pc, #448]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 80035fc:	4870      	ldr	r0, [pc, #448]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 80035fe:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	0023      	movs	r3, r4
 8003604:	f009 fd8c 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003608:	4b6d      	ldr	r3, [pc, #436]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff fd34 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003610:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	b291      	uxth	r1, r2
 8003618:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800361a:	8011      	strh	r1, [r2, #0]
 800361c:	4a64      	ldr	r2, [pc, #400]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f007 f919 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003626:	f000 fa33 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  break ;
 800362a:	e0f0      	b.n	800380e <my_tracker_handle_cmd+0x422>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 800362c:	4b5c      	ldr	r3, [pc, #368]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d141      	bne.n	80036b8 <my_tracker_handle_cmd+0x2cc>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 8003634:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	469a      	mov	sl, r3
 800363a:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <my_tracker_handle_cmd+0x3e8>)
 800363c:	681d      	ldr	r5, [r3, #0]
 800363e:	4b66      	ldr	r3, [pc, #408]	; (80037d8 <my_tracker_handle_cmd+0x3ec>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	001e      	movs	r6, r3
 8003644:	4b65      	ldr	r3, [pc, #404]	; (80037dc <my_tracker_handle_cmd+0x3f0>)
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	469c      	mov	ip, r3
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <my_tracker_handle_cmd+0x3f4>)
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	4b65      	ldr	r3, [pc, #404]	; (80037e4 <my_tracker_handle_cmd+0x3f8>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	4698      	mov	r8, r3
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <my_tracker_handle_cmd+0x3fc>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	4699      	mov	r9, r3
 800365a:	4b64      	ldr	r3, [pc, #400]	; (80037ec <my_tracker_handle_cmd+0x400>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4c63      	ldr	r4, [pc, #396]	; (80037f0 <my_tracker_handle_cmd+0x404>)
 8003662:	4853      	ldr	r0, [pc, #332]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003664:	9206      	str	r2, [sp, #24]
 8003666:	9307      	str	r3, [sp, #28]
 8003668:	464b      	mov	r3, r9
 800366a:	9304      	str	r3, [sp, #16]
 800366c:	4643      	mov	r3, r8
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	9102      	str	r1, [sp, #8]
 8003672:	4663      	mov	r3, ip
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	9600      	str	r6, [sp, #0]
 8003678:	002b      	movs	r3, r5
 800367a:	4652      	mov	r2, sl
 800367c:	0021      	movs	r1, r4
 800367e:	f009 fd4f 	bl	800d120 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003682:	23f4      	movs	r3, #244	; 0xf4
 8003684:	009c      	lsls	r4, r3, #2
 8003686:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 8003688:	494c      	ldr	r1, [pc, #304]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 800368a:	484d      	ldr	r0, [pc, #308]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 800368c:	4b48      	ldr	r3, [pc, #288]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	0023      	movs	r3, r4
 8003692:	f009 fd45 	bl	800d120 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff fced 	bl	8003078 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	b291      	uxth	r1, r2
 80036a6:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80036a8:	8011      	strh	r1, [r2, #0]
 80036aa:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f007 f8d2 	bl	800a858 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 80036b4:	f000 f9ec 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  }
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_COURSE )
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d16b      	bne.n	8003798 <my_tracker_handle_cmd+0x3ac>
				  {
					  iis2dh_temperature_raw_get ( &my_acc_ctx , &my_acc_temp ) ;
 80036c0:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <my_tracker_handle_cmd+0x408>)
 80036c2:	4b4d      	ldr	r3, [pc, #308]	; (80037f8 <my_tracker_handle_cmd+0x40c>)
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f007 f855 	bl	800a776 <iis2dh_temperature_raw_get>
					  sprintf ( my_astro_payload , "%u,%lu,%d" , uplink_id , (uint32_t) ( fix3d.acq_total_time / 60 ) , my_acc_temp ) ;
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	001c      	movs	r4, r3
 80036d2:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <my_tracker_handle_cmd+0x410>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	213c      	movs	r1, #60	; 0x3c
 80036d8:	0018      	movs	r0, r3
 80036da:	f7fc fd2f 	bl	800013c <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	001a      	movs	r2, r3
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <my_tracker_handle_cmd+0x408>)
 80036e4:	2100      	movs	r1, #0
 80036e6:	5e5b      	ldrsh	r3, [r3, r1]
 80036e8:	4945      	ldr	r1, [pc, #276]	; (8003800 <my_tracker_handle_cmd+0x414>)
 80036ea:	4831      	ldr	r0, [pc, #196]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	0013      	movs	r3, r2
 80036f0:	0022      	movs	r2, r4
 80036f2:	f009 fd15 	bl	800d120 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80036f6:	4c43      	ldr	r4, [pc, #268]	; (8003804 <my_tracker_handle_cmd+0x418>)
 80036f8:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 80036fa:	4930      	ldr	r1, [pc, #192]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 80036fc:	4830      	ldr	r0, [pc, #192]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	0023      	movs	r3, r4
 8003704:	f009 fd0c 	bl	800d120 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7ff fcb4 	bl	8003078 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	b291      	uxth	r1, r2
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800371a:	8011      	strh	r1, [r2, #0]
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800371e:	0011      	movs	r1, r2
 8003720:	0018      	movs	r0, r3
 8003722:	f007 f899 	bl	800a858 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 8003726:	f000 f9b3 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 800372a:	e035      	b.n	8003798 <my_tracker_handle_cmd+0x3ac>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 800372c:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d16b      	bne.n	800380c <my_tracker_handle_cmd+0x420>
					  my_sys_restart () ;
 8003734:	f7ff fd6e 	bl	8003214 <my_sys_restart>
				  break ;
 8003738:	e068      	b.n	800380c <my_tracker_handle_cmd+0x420>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	001c      	movs	r4, r3
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003742:	7a1b      	ldrb	r3, [r3, #8]
 8003744:	001d      	movs	r5, r3
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	001a      	movs	r2, r3
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <my_tracker_handle_cmd+0x3b4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4916      	ldr	r1, [pc, #88]	; (80037ac <my_tracker_handle_cmd+0x3c0>)
 8003752:	4817      	ldr	r0, [pc, #92]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	9200      	str	r2, [sp, #0]
 8003758:	002b      	movs	r3, r5
 800375a:	0022      	movs	r2, r4
 800375c:	f009 fce0 	bl	800d120 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003760:	4c29      	ldr	r4, [pc, #164]	; (8003808 <my_tracker_handle_cmd+0x41c>)
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <my_tracker_handle_cmd+0x3cc>)
 8003764:	4915      	ldr	r1, [pc, #84]	; (80037bc <my_tracker_handle_cmd+0x3d0>)
 8003766:	4816      	ldr	r0, [pc, #88]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	0023      	movs	r3, r4
 800376e:	f009 fcd7 	bl	800d120 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <my_tracker_handle_cmd+0x3d4>)
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fc7f 	bl	8003078 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	b291      	uxth	r1, r2
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <my_tracker_handle_cmd+0x3bc>)
 8003784:	8011      	strh	r1, [r2, #0]
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <my_tracker_handle_cmd+0x3c4>)
 8003788:	0011      	movs	r1, r2
 800378a:	0018      	movs	r0, r3
 800378c:	f007 f864 	bl	800a858 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003790:	f000 f97e 	bl	8003a90 <my_astro_turn_payload_id_counter>
				  return false ;
 8003794:	2300      	movs	r3, #0
 8003796:	e03b      	b.n	8003810 <my_tracker_handle_cmd+0x424>
				  break ;
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	e038      	b.n	800380e <my_tracker_handle_cmd+0x422>
 800379c:	20000c28 	.word	0x20000c28
 80037a0:	20000ad8 	.word	0x20000ad8
 80037a4:	08015868 	.word	0x08015868
 80037a8:	20000ae4 	.word	0x20000ae4
 80037ac:	08013eb0 	.word	0x08013eb0
 80037b0:	20000a38 	.word	0x20000a38
 80037b4:	000003a7 	.word	0x000003a7
 80037b8:	08013d30 	.word	0x08013d30
 80037bc:	08013de0 	.word	0x08013de0
 80037c0:	20000b2c 	.word	0x20000b2c
 80037c4:	000003af 	.word	0x000003af
 80037c8:	000003b7 	.word	0x000003b7
 80037cc:	000003bf 	.word	0x000003bf
 80037d0:	000003c7 	.word	0x000003c7
 80037d4:	20000004 	.word	0x20000004
 80037d8:	20000a22 	.word	0x20000a22
 80037dc:	20000008 	.word	0x20000008
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	2000001a 	.word	0x2000001a
 80037e8:	2000001c 	.word	0x2000001c
 80037ec:	20000020 	.word	0x20000020
 80037f0:	08013ec0 	.word	0x08013ec0
 80037f4:	20000b18 	.word	0x20000b18
 80037f8:	20000b08 	.word	0x20000b08
 80037fc:	20000af0 	.word	0x20000af0
 8003800:	08013edc 	.word	0x08013edc
 8003804:	000003d9 	.word	0x000003d9
 8003808:	000003e6 	.word	0x000003e6
				  break ;
 800380c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 800380e:	2301      	movs	r3, #1
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	bce0      	pop	{r5, r6, r7}
 8003816:	46ba      	mov	sl, r7
 8003818:	46b1      	mov	r9, r6
 800381a:	46a8      	mov	r8, r5
 800381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)

08003820 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	0002      	movs	r2, r0
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d10e      	bne.n	8003852 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4811      	ldr	r0, [pc, #68]	; (8003880 <my_ant_sw_pos+0x60>)
 800383a:	2200      	movs	r2, #0
 800383c:	0019      	movs	r1, r3
 800383e:	f001 fa0c 	bl	8004c5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	480e      	ldr	r0, [pc, #56]	; (8003880 <my_ant_sw_pos+0x60>)
 8003848:	2201      	movs	r2, #1
 800384a:	0019      	movs	r1, r3
 800384c:	f001 fa05 	bl	8004c5a <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003850:	e011      	b.n	8003876 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d10d      	bne.n	8003876 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	4808      	ldr	r0, [pc, #32]	; (8003880 <my_ant_sw_pos+0x60>)
 8003860:	2201      	movs	r2, #1
 8003862:	0019      	movs	r1, r3
 8003864:	f001 f9f9 	bl	8004c5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <my_ant_sw_pos+0x60>)
 800386e:	2200      	movs	r2, #0
 8003870:	0019      	movs	r1, r3
 8003872:	f001 f9f2 	bl	8004c5a <HAL_GPIO_WritePin>
}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	50000400 	.word	0x50000400

08003884 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003888:	2001      	movs	r0, #1
 800388a:	f7ff ffc9 	bl	8003820 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800388e:	2380      	movs	r3, #128	; 0x80
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	4808      	ldr	r0, [pc, #32]	; (80038b4 <my_gnss_sw_on+0x30>)
 8003894:	2201      	movs	r2, #1
 8003896:	0019      	movs	r1, r3
 8003898:	f001 f9df 	bl	8004c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	019b      	lsls	r3, r3, #6
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <my_gnss_sw_on+0x30>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	0019      	movs	r1, r3
 80038a6:	f001 f9d8 	bl	8004c5a <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80038aa:	f7ff faa5 	bl	8002df8 <MX_USART5_UART_Init>
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	50000400 	.word	0x50000400

080038b8 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80038bc:	2002      	movs	r0, #2
 80038be:	f7ff ffaf 	bl	8003820 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 80038c2:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <my_gnss_sw_off+0x3c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d811      	bhi.n	80038ee <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	480a      	ldr	r0, [pc, #40]	; (80038f8 <my_gnss_sw_off+0x40>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	0019      	movs	r1, r3
 80038d4:	f001 f9c1 	bl	8004c5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	4806      	ldr	r0, [pc, #24]	; (80038f8 <my_gnss_sw_off+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	0019      	movs	r1, r3
 80038e2:	f001 f9ba 	bl	8004c5a <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <my_gnss_sw_off+0x44>)
 80038e8:	0018      	movs	r0, r3
 80038ea:	f004 f9f1 	bl	8007cd0 <HAL_UART_DeInit>
	}
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000a22 	.word	0x20000a22
 80038f8:	50000400 	.word	0x50000400
 80038fc:	2000098c 	.word	0x2000098c

08003900 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	000a      	movs	r2, r1
 800390a:	1cfb      	adds	r3, r7, #3
 800390c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 800390e:	23fa      	movs	r3, #250	; 0xfa
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4809      	ldr	r0, [pc, #36]	; (800393c <my_gnss_receive_byte+0x3c>)
 8003916:	2201      	movs	r2, #1
 8003918:	f004 fabe 	bl	8007e98 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <my_gnss_receive_byte+0x40>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003924:	23fa      	movs	r3, #250	; 0xfa
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4806      	ldr	r0, [pc, #24]	; (8003944 <my_gnss_receive_byte+0x44>)
 800392c:	2201      	movs	r2, #1
 800392e:	f004 fa0f 	bl	8007d50 <HAL_UART_Transmit>
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	2000098c 	.word	0x2000098c
 8003940:	20000a22 	.word	0x20000a22
 8003944:	20000864 	.word	0x20000864

08003948 <my_acc_init>:
	  my_gnss_sw_off () ;
}

// ACC
bool my_acc_init ( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 8003954:	1dfa      	adds	r2, r7, #7
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <my_acc_init+0x40>)
 8003958:	0011      	movs	r1, r2
 800395a:	0018      	movs	r0, r3
 800395c:	f006 ff32 	bl	800a7c4 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b33      	cmp	r3, #51	; 0x33
 8003966:	d001      	beq.n	800396c <my_acc_init+0x24>
		return false ;
 8003968:	2300      	movs	r3, #0
 800396a:	e009      	b.n	8003980 <my_acc_init+0x38>

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <my_acc_init+0x40>)
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <my_acc_init+0x44>)
 8003970:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <my_acc_init+0x40>)
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <my_acc_init+0x48>)
 8003976:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <my_acc_init+0x40>)
 800397a:	4a06      	ldr	r2, [pc, #24]	; (8003994 <my_acc_init+0x4c>)
 800397c:	60da      	str	r2, [r3, #12]

	return true ;
 800397e:	2301      	movs	r3, #1
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000b08 	.word	0x20000b08
 800398c:	08003b19 	.word	0x08003b19
 8003990:	08003b83 	.word	0x08003b83
 8003994:	20000720 	.word	0x20000720

08003998 <my_astronode_reset>:
}

/* ************************************* */
// ASTRO Operations
void my_astronode_reset ( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <my_astronode_reset+0x30>)
 800399e:	2201      	movs	r2, #1
 80039a0:	2102      	movs	r1, #2
 80039a2:	0018      	movs	r0, r3
 80039a4:	f001 f959 	bl	8004c5a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80039a8:	2001      	movs	r0, #1
 80039aa:	f000 fdab 	bl	8004504 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <my_astronode_reset+0x30>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	2102      	movs	r1, #2
 80039b4:	0018      	movs	r0, r3
 80039b6:	f001 f950 	bl	8004c5a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80039ba:	20fa      	movs	r0, #250	; 0xfa
 80039bc:	f000 fda2 	bl	8004504 <HAL_Delay>
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	50000400 	.word	0x50000400

080039cc <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <send_astronode_request+0x34>)
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fb4d 	bl	8003078 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f7ff fb49 	bl	8003078 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	23fa      	movs	r3, #250	; 0xfa
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4804      	ldr	r0, [pc, #16]	; (8003a04 <send_astronode_request+0x38>)
 80039f2:	f004 f9ad 	bl	8007d50 <HAL_UART_Transmit>
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	08013ef0 	.word	0x08013ef0
 8003a04:	200008f8 	.word	0x200008f8

08003a08 <get_systick>:
uint32_t get_systick ( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003a0c:	f000 fd70 	bl	80044f0 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
}
 8003a12:	0018      	movs	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	000a      	movs	r2, r1
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003a26:	f7ff ffef 	bl	8003a08 <get_systick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	1cba      	adds	r2, r7, #2
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	419b      	sbcs	r3, r3
 8003a38:	425b      	negs	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4806      	ldr	r0, [pc, #24]	; (8003a68 <is_astronode_character_received+0x24>)
 8003a50:	2364      	movs	r3, #100	; 0x64
 8003a52:	2201      	movs	r2, #1
 8003a54:	f004 fa20 	bl	8007e98 <HAL_UART_Receive>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	425a      	negs	r2, r3
 8003a5c:	4153      	adcs	r3, r2
 8003a5e:	b2db      	uxtb	r3, r3
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200008f8 	.word	0x200008f8

08003a6c <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <my_astro_evt_pin+0x20>)
 8003a72:	2104      	movs	r1, #4
 8003a74:	0018      	movs	r0, r3
 8003a76:	f001 f8d3 	bl	8004c20 <HAL_GPIO_ReadPin>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	425a      	negs	r2, r3
 8003a80:	4153      	adcs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	50000400 	.word	0x50000400

08003a90 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <my_astro_turn_payload_id_counter+0x18>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	2b63      	cmp	r3, #99	; 0x63
 8003a9a:	d902      	bls.n	8003aa2 <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <my_astro_turn_payload_id_counter+0x18>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	801a      	strh	r2, [r3, #0]
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000ae4 	.word	0x20000ae4

08003aac <my_astro_send_uplink>:
void my_astro_send_uplink ( char* p , char* m )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	if ( uplink_id == 0 && sys_mode != 0 ) // Present sys_mode in welcome uplink message if mode is other than production
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <my_astro_send_uplink+0x5c>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <my_astro_send_uplink+0x28>
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <my_astro_send_uplink+0x60>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <my_astro_send_uplink+0x28>
		sprintf ( p , "%s,%u" , p , (uint16_t) sys_mode ) ;
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <my_astro_send_uplink+0x60>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4910      	ldr	r1, [pc, #64]	; (8003b10 <my_astro_send_uplink+0x64>)
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f009 fb26 	bl	800d120 <sprintf>
	my_astro_add_payload_2_queue ( uplink_id++ , p ) ;
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <my_astro_send_uplink+0x5c>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	b291      	uxth	r1, r2
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <my_astro_send_uplink+0x5c>)
 8003ade:	8011      	strh	r1, [r2, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f006 feb7 	bl	800a858 <my_astro_add_payload_2_queue>
	my_astro_turn_payload_id_counter () ;
 8003aea:	f7ff ffd1 	bl	8003a90 <my_astro_turn_payload_id_counter>
	last_uplink_send_ts = my_rtc_get_ts () ;
 8003aee:	f007 f8f5 	bl	800acdc <my_rtc_get_ts>
 8003af2:	0002      	movs	r2, r0
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <my_astro_send_uplink+0x68>)
 8003af6:	601a      	str	r2, [r3, #0]
	send_debug_logs ( m ) ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff fabc 	bl	8003078 <send_debug_logs>
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000ae4 	.word	0x20000ae4
 8003b0c:	20000a22 	.word	0x20000a22
 8003b10:	08013f14 	.word	0x08013f14
 8003b14:	20000ae8 	.word	0x20000ae8

08003b18 <my_st_acc_platform_write>:

/* ************************************* */
// ACC LL Function

int32_t my_st_acc_platform_write ( void* handle , uint8_t reg , const uint8_t* bufp , uint16_t len )
{
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	0008      	movs	r0, r1
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	0019      	movs	r1, r3
 8003b26:	240b      	movs	r4, #11
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	1c02      	adds	r2, r0, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	2508      	movs	r5, #8
 8003b30:	197b      	adds	r3, r7, r5
 8003b32:	1c0a      	adds	r2, r1, #0
 8003b34:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003b36:	23a0      	movs	r3, #160	; 0xa0
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2110      	movs	r1, #16
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f001 f88b 	bl	8004c5a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003b44:	2014      	movs	r0, #20
 8003b46:	f000 fcdd 	bl	8004504 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003b4a:	23fa      	movs	r3, #250	; 0xfa
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	1939      	adds	r1, r7, r4
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f002 fec8 	bl	80068e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003b58:	23fa      	movs	r3, #250	; 0xfa
 8003b5a:	009c      	lsls	r4, r3, #2
 8003b5c:	197b      	adds	r3, r7, r5
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	0023      	movs	r3, r4
 8003b66:	f002 febf 	bl	80068e8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003b6a:	23a0      	movs	r3, #160	; 0xa0
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	2201      	movs	r2, #1
 8003b70:	2110      	movs	r1, #16
 8003b72:	0018      	movs	r0, r3
 8003b74:	f001 f871 	bl	8004c5a <HAL_GPIO_WritePin>

	return 0 ;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b004      	add	sp, #16
 8003b80:	bdb0      	pop	{r4, r5, r7, pc}

08003b82 <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void* handle , uint8_t reg , uint8_t* bufp , uint16_t len )
{
 8003b82:	b5b0      	push	{r4, r5, r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	0008      	movs	r0, r1
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	0019      	movs	r1, r3
 8003b90:	240b      	movs	r4, #11
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	1c02      	adds	r2, r0, #0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	2508      	movs	r5, #8
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	1c0a      	adds	r2, r1, #0
 8003b9e:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	4252      	negs	r2, r2
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003bb0:	23a0      	movs	r3, #160	; 0xa0
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f001 f84e 	bl	8004c5a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003bbe:	2014      	movs	r0, #20
 8003bc0:	f000 fca0 	bl	8004504 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003bc4:	23fa      	movs	r3, #250	; 0xfa
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	1939      	adds	r1, r7, r4
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f002 fe8b 	bl	80068e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003bd2:	23fa      	movs	r3, #250	; 0xfa
 8003bd4:	009c      	lsls	r4, r3, #2
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	881a      	ldrh	r2, [r3, #0]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	0023      	movs	r3, r4
 8003be0:	f002 ffe2 	bl	8006ba8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003be4:	23a0      	movs	r3, #160	; 0xa0
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	2201      	movs	r2, #1
 8003bea:	2110      	movs	r1, #16
 8003bec:	0018      	movs	r0, r3
 8003bee:	f001 f834 	bl	8004c5a <HAL_GPIO_WritePin>

	return 0 ;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b004      	add	sp, #16
 8003bfa:	bdb0      	pop	{r4, r5, r7, pc}

08003bfc <my_tim_init>:

/* ************************************* */
// TIM operations
void my_tim_init ()
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <my_tim_init+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2202      	movs	r2, #2
 8003c06:	4252      	negs	r2, r2
 8003c08:	611a      	str	r2, [r3, #16]
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000784 	.word	0x20000784

08003c14 <my_tim_start>:

void my_tim_start ()
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <my_tim_start+0x18>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <my_tim_start+0x1c>)
 8003c20:	0018      	movs	r0, r3
 8003c22:	f003 fd21 	bl	8007668 <HAL_TIM_Base_Start_IT>
}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000c50 	.word	0x20000c50
 8003c30:	20000784 	.word	0x20000784

08003c34 <my_tim_stop>:

void my_tim_stop ()
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <my_tim_stop+0x14>)
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f003 fd76 	bl	800772c <HAL_TIM_Base_Stop_IT>
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	20000784 	.word	0x20000784

08003c4c <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c68:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c6c:	881a      	ldrh	r2, [r3, #0]
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d901      	bls.n	8003c7a <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003c76:	f7ff facd 	bl	8003214 <my_sys_restart>
	}
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	40001000 	.word	0x40001000
 8003c88:	20000c50 	.word	0x20000c50
 8003c8c:	20000008 	.word	0x20000008

08003c90 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000b1a 	.word	0x20000b1a

08003cac <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	0002      	movs	r2, r0
 8003cb4:	1dbb      	adds	r3, r7, #6
 8003cb6:	801a      	strh	r2, [r3, #0]

}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc8:	e7fe      	b.n	8003cc8 <Error_Handler+0x8>
	...

08003ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_MspInit+0x4c>)
 8003cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <HAL_MspInit+0x4c>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_MspInit+0x4c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_MspInit+0x4c>)
 8003cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_MspInit+0x4c>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0549      	lsls	r1, r1, #21
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <HAL_MspInit+0x4c>)
 8003cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	055b      	lsls	r3, r3, #21
 8003d00:	4013      	ands	r3, r2
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003d06:	23c0      	movs	r3, #192	; 0xc0
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 fc3a 	bl	8004584 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b097      	sub	sp, #92	; 0x5c
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d24:	240c      	movs	r4, #12
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	0018      	movs	r0, r3
 8003d2a:	234c      	movs	r3, #76	; 0x4c
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f009 fa8c 	bl	800d24c <memset>
  if(hrtc->Instance==RTC)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_RTC_MspInit+0x84>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12c      	bne.n	8003d98 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	2280      	movs	r2, #128	; 0x80
 8003d42:	0292      	lsls	r2, r2, #10
 8003d44:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d46:	193b      	adds	r3, r7, r4
 8003d48:	2280      	movs	r2, #128	; 0x80
 8003d4a:	0052      	lsls	r2, r2, #1
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	0018      	movs	r0, r3
 8003d52:	f001 fd6f 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003d56:	1e03      	subs	r3, r0, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d5a:	f7ff ffb1 	bl	8003cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <HAL_RTC_MspInit+0x88>)
 8003d60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_RTC_MspInit+0x88>)
 8003d64:	2180      	movs	r1, #128	; 0x80
 8003d66:	0209      	lsls	r1, r1, #8
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_RTC_MspInit+0x88>)
 8003d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_RTC_MspInit+0x88>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	00c9      	lsls	r1, r1, #3
 8003d76:	430a      	orrs	r2, r1
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_RTC_MspInit+0x88>)
 8003d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4013      	ands	r3, r2
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2103      	movs	r1, #3
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	f000 fccd 	bl	800472c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003d92:	2002      	movs	r0, #2
 8003d94:	f000 fcdf 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b017      	add	sp, #92	; 0x5c
 8003d9e:	bd90      	pop	{r4, r7, pc}
 8003da0:	40002800 	.word	0x40002800
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b08b      	sub	sp, #44	; 0x2c
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	2414      	movs	r4, #20
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	0018      	movs	r0, r3
 8003db6:	2314      	movs	r3, #20
 8003db8:	001a      	movs	r2, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f009 fa46 	bl	800d24c <memset>
  if(hspi->Instance==SPI1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <HAL_SPI_MspInit+0x8c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d130      	bne.n	8003e2c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0149      	lsls	r1, r1, #5
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	430a      	orrs	r2, r1
 8003df0:	635a      	str	r2, [r3, #52]	; 0x34
 8003df2:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_SPI_MspInit+0x90>)
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003dfe:	0021      	movs	r1, r4
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	22e0      	movs	r2, #224	; 0xe0
 8003e04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	2202      	movs	r2, #2
 8003e0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	187a      	adds	r2, r7, r1
 8003e20:	23a0      	movs	r3, #160	; 0xa0
 8003e22:	05db      	lsls	r3, r3, #23
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fcb6 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b00b      	add	sp, #44	; 0x2c
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	40013000 	.word	0x40013000
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <HAL_TIM_Base_MspInit+0x44>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d113      	bne.n	8003e76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_TIM_Base_MspInit+0x48>)
 8003e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_TIM_Base_MspInit+0x48>)
 8003e54:	2110      	movs	r1, #16
 8003e56:	430a      	orrs	r2, r1
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <HAL_TIM_Base_MspInit+0x48>)
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	2210      	movs	r2, #16
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2102      	movs	r1, #2
 8003e6a:	2011      	movs	r0, #17
 8003e6c:	f000 fc5e 	bl	800472c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003e70:	2011      	movs	r0, #17
 8003e72:	f000 fc70 	bl	8004756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40001000 	.word	0x40001000
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b0a3      	sub	sp, #140	; 0x8c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	2374      	movs	r3, #116	; 0x74
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	0018      	movs	r0, r3
 8003e96:	2314      	movs	r3, #20
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f009 f9d6 	bl	800d24c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ea0:	2428      	movs	r4, #40	; 0x28
 8003ea2:	193b      	adds	r3, r7, r4
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	234c      	movs	r3, #76	; 0x4c
 8003ea8:	001a      	movs	r2, r3
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f009 f9ce 	bl	800d24c <memset>
  if(huart->Instance==USART1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a84      	ldr	r2, [pc, #528]	; (80040c8 <HAL_UART_MspInit+0x240>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d140      	bne.n	8003f3c <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec6:	193b      	adds	r3, r7, r4
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f001 fcb3 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003ed2:	f7ff fef5 	bl	8003cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	4b7c      	ldr	r3, [pc, #496]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	01c9      	lsls	r1, r1, #7
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee4:	4b79      	ldr	r3, [pc, #484]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	01db      	lsls	r3, r3, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef6:	4b75      	ldr	r3, [pc, #468]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
 8003efe:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	2201      	movs	r2, #1
 8003f04:	4013      	ands	r3, r2
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003f0a:	2174      	movs	r1, #116	; 0x74
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	22c0      	movs	r2, #192	; 0xc0
 8003f10:	00d2      	lsls	r2, r2, #3
 8003f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2202      	movs	r2, #2
 8003f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003f26:	187b      	adds	r3, r7, r1
 8003f28:	2201      	movs	r2, #1
 8003f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2c:	187a      	adds	r2, r7, r1
 8003f2e:	23a0      	movs	r3, #160	; 0xa0
 8003f30:	05db      	lsls	r3, r3, #23
 8003f32:	0011      	movs	r1, r2
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fc2f 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003f3a:	e0c0      	b.n	80040be <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a63      	ldr	r2, [pc, #396]	; (80040d0 <HAL_UART_MspInit+0x248>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d140      	bne.n	8003fc8 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f46:	2128      	movs	r1, #40	; 0x28
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f4e:	187b      	adds	r3, r7, r1
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f54:	187b      	adds	r3, r7, r1
 8003f56:	0018      	movs	r0, r3
 8003f58:	f001 fc6c 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003f5c:	1e03      	subs	r3, r0, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003f60:	f7ff feae 	bl	8003cc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f64:	4b59      	ldr	r3, [pc, #356]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f68:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f6a:	2180      	movs	r1, #128	; 0x80
 8003f6c:	0289      	lsls	r1, r1, #10
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f72:	4b56      	ldr	r3, [pc, #344]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	029b      	lsls	r3, r3, #10
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f80:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f84:	4b51      	ldr	r3, [pc, #324]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003f98:	2174      	movs	r1, #116	; 0x74
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	220c      	movs	r2, #12
 8003f9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2200      	movs	r2, #0
 8003faa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	187a      	adds	r2, r7, r1
 8003fba:	23a0      	movs	r3, #160	; 0xa0
 8003fbc:	05db      	lsls	r3, r3, #23
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 fbe9 	bl	8004798 <HAL_GPIO_Init>
}
 8003fc6:	e07a      	b.n	80040be <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a41      	ldr	r2, [pc, #260]	; (80040d4 <HAL_UART_MspInit+0x24c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d140      	bne.n	8004054 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003fd2:	2128      	movs	r1, #40	; 0x28
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f001 fc26 	bl	8005834 <HAL_RCCEx_PeriphCLKConfig>
 8003fe8:	1e03      	subs	r3, r0, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003fec:	f7ff fe68 	bl	8003cc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ff0:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_UART_MspInit+0x244>)
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	02c9      	lsls	r1, r1, #11
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ffe:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	02db      	lsls	r3, r3, #11
 8004006:	4013      	ands	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_UART_MspInit+0x244>)
 800400e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004010:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004012:	2102      	movs	r1, #2
 8004014:	430a      	orrs	r2, r1
 8004016:	635a      	str	r2, [r3, #52]	; 0x34
 8004018:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_UART_MspInit+0x244>)
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	2202      	movs	r2, #2
 800401e:	4013      	ands	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8004024:	2174      	movs	r1, #116	; 0x74
 8004026:	187b      	adds	r3, r7, r1
 8004028:	22c0      	movs	r2, #192	; 0xc0
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2202      	movs	r2, #2
 8004032:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	187b      	adds	r3, r7, r1
 8004036:	2200      	movs	r2, #0
 8004038:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2200      	movs	r2, #0
 800403e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8004040:	187b      	adds	r3, r7, r1
 8004042:	2204      	movs	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	187b      	adds	r3, r7, r1
 8004048:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <HAL_UART_MspInit+0x250>)
 800404a:	0019      	movs	r1, r3
 800404c:	0010      	movs	r0, r2
 800404e:	f000 fba3 	bl	8004798 <HAL_GPIO_Init>
}
 8004052:	e034      	b.n	80040be <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <HAL_UART_MspInit+0x254>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d12f      	bne.n	80040be <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800405e:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	0049      	lsls	r1, r1, #1
 8004068:	430a      	orrs	r2, r1
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_UART_MspInit+0x244>)
 800406e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	4013      	ands	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_UART_MspInit+0x244>)
 800407c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004080:	2102      	movs	r1, #2
 8004082:	430a      	orrs	r2, r1
 8004084:	635a      	str	r2, [r3, #52]	; 0x34
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_UART_MspInit+0x244>)
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408a:	2202      	movs	r2, #2
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004092:	2174      	movs	r1, #116	; 0x74
 8004094:	187b      	adds	r3, r7, r1
 8004096:	2218      	movs	r2, #24
 8004098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	187b      	adds	r3, r7, r1
 800409c:	2202      	movs	r2, #2
 800409e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	2203      	movs	r2, #3
 80040b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <HAL_UART_MspInit+0x250>)
 80040b6:	0019      	movs	r1, r3
 80040b8:	0010      	movs	r0, r2
 80040ba:	f000 fb6d 	bl	8004798 <HAL_GPIO_Init>
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b023      	add	sp, #140	; 0x8c
 80040c4:	bd90      	pop	{r4, r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	40013800 	.word	0x40013800
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40004400 	.word	0x40004400
 80040d4:	40004800 	.word	0x40004800
 80040d8:	50000400 	.word	0x50000400
 80040dc:	40005000 	.word	0x40005000

080040e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <HAL_UART_MspDeInit+0xa4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10e      	bne.n	8004110 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80040f2:	4b25      	ldr	r3, [pc, #148]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 80040f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 80040f8:	4924      	ldr	r1, [pc, #144]	; (800418c <HAL_UART_MspDeInit+0xac>)
 80040fa:	400a      	ands	r2, r1
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80040fe:	23c0      	movs	r3, #192	; 0xc0
 8004100:	00da      	lsls	r2, r3, #3
 8004102:	23a0      	movs	r3, #160	; 0xa0
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f000 fcb1 	bl	8004a70 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 800410e:	e034      	b.n	800417a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_UART_MspDeInit+0xb0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10c      	bne.n	8004134 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 800411c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 8004120:	491c      	ldr	r1, [pc, #112]	; (8004194 <HAL_UART_MspDeInit+0xb4>)
 8004122:	400a      	ands	r2, r1
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8004126:	23a0      	movs	r3, #160	; 0xa0
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	210c      	movs	r1, #12
 800412c:	0018      	movs	r0, r3
 800412e:	f000 fc9f 	bl	8004a70 <HAL_GPIO_DeInit>
}
 8004132:	e022      	b.n	800417a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_UART_MspDeInit+0xb8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d10d      	bne.n	800415a <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 8004140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 8004144:	4915      	ldr	r1, [pc, #84]	; (800419c <HAL_UART_MspDeInit+0xbc>)
 8004146:	400a      	ands	r2, r1
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800414a:	23c0      	movs	r3, #192	; 0xc0
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <HAL_UART_MspDeInit+0xc0>)
 8004150:	0019      	movs	r1, r3
 8004152:	0010      	movs	r0, r2
 8004154:	f000 fc8c 	bl	8004a70 <HAL_GPIO_DeInit>
}
 8004158:	e00f      	b.n	800417a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <HAL_UART_MspDeInit+0xc4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10a      	bne.n	800417a <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 8004166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_UART_MspDeInit+0xa8>)
 800416a:	490f      	ldr	r1, [pc, #60]	; (80041a8 <HAL_UART_MspDeInit+0xc8>)
 800416c:	400a      	ands	r2, r1
 800416e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_UART_MspDeInit+0xc0>)
 8004172:	2118      	movs	r1, #24
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fc7b 	bl	8004a70 <HAL_GPIO_DeInit>
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	40013800 	.word	0x40013800
 8004188:	40021000 	.word	0x40021000
 800418c:	ffffbfff 	.word	0xffffbfff
 8004190:	40004400 	.word	0x40004400
 8004194:	fffdffff 	.word	0xfffdffff
 8004198:	40004800 	.word	0x40004800
 800419c:	fffbffff 	.word	0xfffbffff
 80041a0:	50000400 	.word	0x50000400
 80041a4:	40005000 	.word	0x40005000
 80041a8:	fffffeff 	.word	0xfffffeff

080041ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041b0:	e7fe      	b.n	80041b0 <NMI_Handler+0x4>

080041b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041b6:	e7fe      	b.n	80041b6 <HardFault_Handler+0x4>

080041b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d0:	f000 f97c 	bl	80044cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80041e0:	4b03      	ldr	r3, [pc, #12]	; (80041f0 <RTC_TAMP_IRQHandler+0x14>)
 80041e2:	0018      	movs	r0, r3
 80041e4:	f002 f928 	bl	8006438 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	200006f4 	.word	0x200006f4

080041f4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80041f8:	2004      	movs	r0, #4
 80041fa:	f000 fd4b 	bl	8004c94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800420a:	0018      	movs	r0, r3
 800420c:	f003 fabc 	bl	8007788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	20000784 	.word	0x20000784

0800421c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  return 1;
 8004220:	2301      	movs	r3, #1
}
 8004222:	0018      	movs	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_kill>:

int _kill(int pid, int sig)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004232:	f009 f8ff 	bl	800d434 <__errno>
 8004236:	0003      	movs	r3, r0
 8004238:	2216      	movs	r2, #22
 800423a:	601a      	str	r2, [r3, #0]
  return -1;
 800423c:	2301      	movs	r3, #1
 800423e:	425b      	negs	r3, r3
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <_exit>:

void _exit (int status)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004250:	2301      	movs	r3, #1
 8004252:	425a      	negs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff ffe5 	bl	8004228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800425e:	e7fe      	b.n	800425e <_exit+0x16>

08004260 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e00a      	b.n	8004288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004272:	e000      	b.n	8004276 <_read+0x16>
 8004274:	bf00      	nop
 8004276:	0001      	movs	r1, r0
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	60ba      	str	r2, [r7, #8]
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	dbf0      	blt.n	8004272 <_read+0x12>
  }

  return len;
 8004290:	687b      	ldr	r3, [r7, #4]
}
 8004292:	0018      	movs	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	b006      	add	sp, #24
 8004298:	bd80      	pop	{r7, pc}

0800429a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e009      	b.n	80042c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60ba      	str	r2, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	e000      	b.n	80042ba <_write+0x20>
 80042b8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3301      	adds	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dbf1      	blt.n	80042ac <_write+0x12>
  }
  return len;
 80042c8:	687b      	ldr	r3, [r7, #4]
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b006      	add	sp, #24
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_close>:

int _close(int file)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042da:	2301      	movs	r3, #1
 80042dc:	425b      	negs	r3, r3
}
 80042de:	0018      	movs	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	b002      	add	sp, #8
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	0192      	lsls	r2, r2, #6
 80042f6:	605a      	str	r2, [r3, #4]
  return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}

08004302 <_isatty>:

int _isatty(int file)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800430a:	2301      	movs	r3, #1
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <_sbrk+0x5c>)
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <_sbrk+0x60>)
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <_sbrk+0x64>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <_sbrk+0x64>)
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <_sbrk+0x68>)
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_sbrk+0x64>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800435c:	f009 f86a 	bl	800d434 <__errno>
 8004360:	0003      	movs	r3, r0
 8004362:	220c      	movs	r2, #12
 8004364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004366:	2301      	movs	r3, #1
 8004368:	425b      	negs	r3, r3
 800436a:	e009      	b.n	8004380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	18d2      	adds	r2, r2, r3
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <_sbrk+0x64>)
 800437c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b006      	add	sp, #24
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20024000 	.word	0x20024000
 800438c:	00000400 	.word	0x00000400
 8004390:	20000b20 	.word	0x20000b20
 8004394:	20000f60 	.word	0x20000f60

08004398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043a4:	480d      	ldr	r0, [pc, #52]	; (80043dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043a8:	f7ff fff6 	bl	8004398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80043ae:	490d      	ldr	r1, [pc, #52]	; (80043e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043b0:	4a0d      	ldr	r2, [pc, #52]	; (80043e8 <LoopForever+0xe>)
  movs r3, #0
 80043b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b4:	e002      	b.n	80043bc <LoopCopyDataInit>

080043b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ba:	3304      	adds	r3, #4

080043bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c0:	d3f9      	bcc.n	80043b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80043c4:	4c0a      	ldr	r4, [pc, #40]	; (80043f0 <LoopForever+0x16>)
  movs r3, #0
 80043c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c8:	e001      	b.n	80043ce <LoopFillZerobss>

080043ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043cc:	3204      	adds	r2, #4

080043ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d0:	d3fb      	bcc.n	80043ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80043d2:	f009 f835 	bl	800d440 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80043d6:	f7fe f8e7 	bl	80025a8 <main>

080043da <LoopForever>:

LoopForever:
  b LoopForever
 80043da:	e7fe      	b.n	80043da <LoopForever>
  ldr   r0, =_estack
 80043dc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80043e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e4:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 80043e8:	08015dc8 	.word	0x08015dc8
  ldr r2, =_sbss
 80043ec:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80043f0:	20000f60 	.word	0x20000f60

080043f4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043f4:	e7fe      	b.n	80043f4 <ADC1_COMP_IRQHandler>
	...

080043f8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043fe:	1dfb      	adds	r3, r7, #7
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_Init+0x3c>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <HAL_Init+0x3c>)
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	0049      	lsls	r1, r1, #1
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004412:	2003      	movs	r0, #3
 8004414:	f000 f810 	bl	8004438 <HAL_InitTick>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d003      	beq.n	8004424 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800441c:	1dfb      	adds	r3, r7, #7
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e001      	b.n	8004428 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004424:	f7ff fc52 	bl	8003ccc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40022000 	.word	0x40022000

08004438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004440:	230f      	movs	r3, #15
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004448:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_InitTick+0x88>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02b      	beq.n	80044a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004450:	4b1c      	ldr	r3, [pc, #112]	; (80044c4 <HAL_InitTick+0x8c>)
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_InitTick+0x88>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	0019      	movs	r1, r3
 800445a:	23fa      	movs	r3, #250	; 0xfa
 800445c:	0098      	lsls	r0, r3, #2
 800445e:	f7fb fe6d 	bl	800013c <__udivsi3>
 8004462:	0003      	movs	r3, r0
 8004464:	0019      	movs	r1, r3
 8004466:	0020      	movs	r0, r4
 8004468:	f7fb fe68 	bl	800013c <__udivsi3>
 800446c:	0003      	movs	r3, r0
 800446e:	0018      	movs	r0, r3
 8004470:	f000 f985 	bl	800477e <HAL_SYSTICK_Config>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d112      	bne.n	800449e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d80a      	bhi.n	8004494 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	2301      	movs	r3, #1
 8004482:	425b      	negs	r3, r3
 8004484:	2200      	movs	r2, #0
 8004486:	0018      	movs	r0, r3
 8004488:	f000 f950 	bl	800472c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <HAL_InitTick+0x90>)
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e00d      	b.n	80044b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004494:	230f      	movs	r3, #15
 8004496:	18fb      	adds	r3, r7, r3
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e008      	b.n	80044b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800449e:	230f      	movs	r3, #15
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e003      	b.n	80044b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80044b0:	230f      	movs	r3, #15
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	781b      	ldrb	r3, [r3, #0]
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b005      	add	sp, #20
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	20000018 	.word	0x20000018
 80044c4:	20000010 	.word	0x20000010
 80044c8:	20000014 	.word	0x20000014

080044cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_IncTick+0x1c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	001a      	movs	r2, r3
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_IncTick+0x20>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	18d2      	adds	r2, r2, r3
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_IncTick+0x20>)
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000018 	.word	0x20000018
 80044ec:	20000b24 	.word	0x20000b24

080044f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  return uwTick;
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <HAL_GetTick+0x10>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	0018      	movs	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000b24 	.word	0x20000b24

08004504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800450c:	f7ff fff0 	bl	80044f0 <HAL_GetTick>
 8004510:	0003      	movs	r3, r0
 8004512:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	d005      	beq.n	800452a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_Delay+0x44>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	001a      	movs	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	189b      	adds	r3, r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	f7ff ffe0 	bl	80044f0 <HAL_GetTick>
 8004530:	0002      	movs	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d8f7      	bhi.n	800452c <HAL_Delay+0x28>
  {
  }
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b004      	add	sp, #16
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	20000018 	.word	0x20000018

0800454c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_SuspendTick+0x18>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_SuspendTick+0x18>)
 8004556:	2102      	movs	r1, #2
 8004558:	438a      	bics	r2, r1
 800455a:	601a      	str	r2, [r3, #0]
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	e000e010 	.word	0xe000e010

08004568 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800456c:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_ResumeTick+0x18>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_ResumeTick+0x18>)
 8004572:	2102      	movs	r1, #2
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	e000e010 	.word	0xe000e010

08004584 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a06      	ldr	r2, [pc, #24]	; (80045ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004592:	4013      	ands	r3, r2
 8004594:	0019      	movs	r1, r3
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	40010000 	.word	0x40010000
 80045ac:	fffff9ff 	.word	0xfffff9ff

080045b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	0002      	movs	r2, r0
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b7f      	cmp	r3, #127	; 0x7f
 80045c2:	d809      	bhi.n	80045d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045c4:	1dfb      	adds	r3, r7, #7
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	001a      	movs	r2, r3
 80045ca:	231f      	movs	r3, #31
 80045cc:	401a      	ands	r2, r3
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__NVIC_EnableIRQ+0x30>)
 80045d0:	2101      	movs	r1, #1
 80045d2:	4091      	lsls	r1, r2
 80045d4:	000a      	movs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	0002      	movs	r2, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	1dfb      	adds	r3, r7, #7
 80045f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b7f      	cmp	r3, #127	; 0x7f
 80045f8:	d828      	bhi.n	800464c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045fa:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <__NVIC_SetPriority+0xd4>)
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b25b      	sxtb	r3, r3
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	33c0      	adds	r3, #192	; 0xc0
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	589b      	ldr	r3, [r3, r2]
 800460a:	1dfa      	adds	r2, r7, #7
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	0011      	movs	r1, r2
 8004610:	2203      	movs	r2, #3
 8004612:	400a      	ands	r2, r1
 8004614:	00d2      	lsls	r2, r2, #3
 8004616:	21ff      	movs	r1, #255	; 0xff
 8004618:	4091      	lsls	r1, r2
 800461a:	000a      	movs	r2, r1
 800461c:	43d2      	mvns	r2, r2
 800461e:	401a      	ands	r2, r3
 8004620:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	401a      	ands	r2, r3
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	0018      	movs	r0, r3
 8004630:	2303      	movs	r3, #3
 8004632:	4003      	ands	r3, r0
 8004634:	00db      	lsls	r3, r3, #3
 8004636:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004638:	481f      	ldr	r0, [pc, #124]	; (80046b8 <__NVIC_SetPriority+0xd4>)
 800463a:	1dfb      	adds	r3, r7, #7
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b25b      	sxtb	r3, r3
 8004640:	089b      	lsrs	r3, r3, #2
 8004642:	430a      	orrs	r2, r1
 8004644:	33c0      	adds	r3, #192	; 0xc0
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800464a:	e031      	b.n	80046b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <__NVIC_SetPriority+0xd8>)
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	0019      	movs	r1, r3
 8004654:	230f      	movs	r3, #15
 8004656:	400b      	ands	r3, r1
 8004658:	3b08      	subs	r3, #8
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3306      	adds	r3, #6
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	3304      	adds	r3, #4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1dfa      	adds	r2, r7, #7
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	0011      	movs	r1, r2
 800466c:	2203      	movs	r2, #3
 800466e:	400a      	ands	r2, r1
 8004670:	00d2      	lsls	r2, r2, #3
 8004672:	21ff      	movs	r1, #255	; 0xff
 8004674:	4091      	lsls	r1, r2
 8004676:	000a      	movs	r2, r1
 8004678:	43d2      	mvns	r2, r2
 800467a:	401a      	ands	r2, r3
 800467c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	22ff      	movs	r2, #255	; 0xff
 8004684:	401a      	ands	r2, r3
 8004686:	1dfb      	adds	r3, r7, #7
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	0018      	movs	r0, r3
 800468c:	2303      	movs	r3, #3
 800468e:	4003      	ands	r3, r0
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004694:	4809      	ldr	r0, [pc, #36]	; (80046bc <__NVIC_SetPriority+0xd8>)
 8004696:	1dfb      	adds	r3, r7, #7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	001c      	movs	r4, r3
 800469c:	230f      	movs	r3, #15
 800469e:	4023      	ands	r3, r4
 80046a0:	3b08      	subs	r3, #8
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	430a      	orrs	r2, r1
 80046a6:	3306      	adds	r3, #6
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18c3      	adds	r3, r0, r3
 80046ac:	3304      	adds	r3, #4
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b003      	add	sp, #12
 80046b6:	bd90      	pop	{r4, r7, pc}
 80046b8:	e000e100 	.word	0xe000e100
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046c4:	f3bf 8f4f 	dsb	sy
}
 80046c8:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <__NVIC_SystemReset+0x1c>)
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <__NVIC_SystemReset+0x20>)
 80046ce:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80046d0:	f3bf 8f4f 	dsb	sy
}
 80046d4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	e7fd      	b.n	80046d6 <__NVIC_SystemReset+0x16>
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	e000ed00 	.word	0xe000ed00
 80046e0:	05fa0004 	.word	0x05fa0004

080046e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	045b      	lsls	r3, r3, #17
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d301      	bcc.n	80046fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046f8:	2301      	movs	r3, #1
 80046fa:	e010      	b.n	800471e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fc:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <SysTick_Config+0x44>)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	3a01      	subs	r2, #1
 8004702:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004704:	2301      	movs	r3, #1
 8004706:	425b      	negs	r3, r3
 8004708:	2103      	movs	r1, #3
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff ff6a 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <SysTick_Config+0x44>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004716:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SysTick_Config+0x44>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800471c:	2300      	movs	r3, #0
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	e000e010 	.word	0xe000e010

0800472c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	210f      	movs	r1, #15
 8004738:	187b      	adds	r3, r7, r1
 800473a:	1c02      	adds	r2, r0, #0
 800473c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	187b      	adds	r3, r7, r1
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b25b      	sxtb	r3, r3
 8004746:	0011      	movs	r1, r2
 8004748:	0018      	movs	r0, r3
 800474a:	f7ff ff4b 	bl	80045e4 <__NVIC_SetPriority>
}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	46bd      	mov	sp, r7
 8004752:	b004      	add	sp, #16
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	0002      	movs	r2, r0
 800475e:	1dfb      	adds	r3, r7, #7
 8004760:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004762:	1dfb      	adds	r3, r7, #7
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	b25b      	sxtb	r3, r3
 8004768:	0018      	movs	r0, r3
 800476a:	f7ff ff21 	bl	80045b0 <__NVIC_EnableIRQ>
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800477a:	f7ff ffa1 	bl	80046c0 <__NVIC_SystemReset>

0800477e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff ffab 	bl	80046e4 <SysTick_Config>
 800478e:	0003      	movs	r3, r0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}

08004798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047a6:	e14d      	b.n	8004a44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4091      	lsls	r1, r2
 80047b2:	000a      	movs	r2, r1
 80047b4:	4013      	ands	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d100      	bne.n	80047c0 <HAL_GPIO_Init+0x28>
 80047be:	e13e      	b.n	8004a3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d005      	beq.n	80047d8 <HAL_GPIO_Init+0x40>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2203      	movs	r2, #3
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d130      	bne.n	800483a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	409a      	lsls	r2, r3
 80047e6:	0013      	movs	r3, r2
 80047e8:	43da      	mvns	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	409a      	lsls	r2, r3
 80047fa:	0013      	movs	r3, r2
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800480e:	2201      	movs	r2, #1
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	409a      	lsls	r2, r3
 8004814:	0013      	movs	r3, r2
 8004816:	43da      	mvns	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	2201      	movs	r2, #1
 8004826:	401a      	ands	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	409a      	lsls	r2, r3
 800482c:	0013      	movs	r3, r2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2203      	movs	r2, #3
 8004840:	4013      	ands	r3, r2
 8004842:	2b03      	cmp	r3, #3
 8004844:	d017      	beq.n	8004876 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	409a      	lsls	r2, r3
 8004854:	0013      	movs	r3, r2
 8004856:	43da      	mvns	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	0013      	movs	r3, r2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2203      	movs	r2, #3
 800487c:	4013      	ands	r3, r2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d123      	bne.n	80048ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	08da      	lsrs	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3208      	adds	r2, #8
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	58d3      	ldr	r3, [r2, r3]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2207      	movs	r2, #7
 8004894:	4013      	ands	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	220f      	movs	r2, #15
 800489a:	409a      	lsls	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	43da      	mvns	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2107      	movs	r1, #7
 80048ae:	400b      	ands	r3, r1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	409a      	lsls	r2, r3
 80048b4:	0013      	movs	r3, r2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	0092      	lsls	r2, r2, #2
 80048c6:	6939      	ldr	r1, [r7, #16]
 80048c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	409a      	lsls	r2, r3
 80048d8:	0013      	movs	r3, r2
 80048da:	43da      	mvns	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2203      	movs	r2, #3
 80048e8:	401a      	ands	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	409a      	lsls	r2, r3
 80048f0:	0013      	movs	r3, r2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	23c0      	movs	r3, #192	; 0xc0
 8004904:	029b      	lsls	r3, r3, #10
 8004906:	4013      	ands	r3, r2
 8004908:	d100      	bne.n	800490c <HAL_GPIO_Init+0x174>
 800490a:	e098      	b.n	8004a3e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800490c:	4a53      	ldr	r2, [pc, #332]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	3318      	adds	r3, #24
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	589b      	ldr	r3, [r3, r2]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2203      	movs	r2, #3
 800491e:	4013      	ands	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	220f      	movs	r2, #15
 8004924:	409a      	lsls	r2, r3
 8004926:	0013      	movs	r3, r2
 8004928:	43da      	mvns	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4013      	ands	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	23a0      	movs	r3, #160	; 0xa0
 8004934:	05db      	lsls	r3, r3, #23
 8004936:	429a      	cmp	r2, r3
 8004938:	d019      	beq.n	800496e <HAL_GPIO_Init+0x1d6>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a48      	ldr	r2, [pc, #288]	; (8004a60 <HAL_GPIO_Init+0x2c8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_GPIO_Init+0x1d2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a47      	ldr	r2, [pc, #284]	; (8004a64 <HAL_GPIO_Init+0x2cc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00d      	beq.n	8004966 <HAL_GPIO_Init+0x1ce>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_GPIO_Init+0x2d0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d007      	beq.n	8004962 <HAL_GPIO_Init+0x1ca>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a45      	ldr	r2, [pc, #276]	; (8004a6c <HAL_GPIO_Init+0x2d4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_GPIO_Init+0x1c6>
 800495a:	2304      	movs	r3, #4
 800495c:	e008      	b.n	8004970 <HAL_GPIO_Init+0x1d8>
 800495e:	2305      	movs	r3, #5
 8004960:	e006      	b.n	8004970 <HAL_GPIO_Init+0x1d8>
 8004962:	2303      	movs	r3, #3
 8004964:	e004      	b.n	8004970 <HAL_GPIO_Init+0x1d8>
 8004966:	2302      	movs	r3, #2
 8004968:	e002      	b.n	8004970 <HAL_GPIO_Init+0x1d8>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_GPIO_Init+0x1d8>
 800496e:	2300      	movs	r3, #0
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	2103      	movs	r1, #3
 8004974:	400a      	ands	r2, r1
 8004976:	00d2      	lsls	r2, r2, #3
 8004978:	4093      	lsls	r3, r2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004980:	4936      	ldr	r1, [pc, #216]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	3318      	adds	r3, #24
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	43da      	mvns	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4013      	ands	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	035b      	lsls	r3, r3, #13
 80049a6:	4013      	ands	r3, r2
 80049a8:	d003      	beq.n	80049b2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049b2:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80049b8:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	43da      	mvns	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	039b      	lsls	r3, r3, #14
 80049d0:	4013      	ands	r3, r2
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049dc:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 80049e4:	2384      	movs	r3, #132	; 0x84
 80049e6:	58d3      	ldr	r3, [r2, r3]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	4013      	ands	r3, r2
 80049fe:	d003      	beq.n	8004a08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a08:	4914      	ldr	r1, [pc, #80]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 8004a0a:	2284      	movs	r2, #132	; 0x84
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004a10:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	58d3      	ldr	r3, [r2, r3]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	025b      	lsls	r3, r3, #9
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a36:	4909      	ldr	r1, [pc, #36]	; (8004a5c <HAL_GPIO_Init+0x2c4>)
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	3301      	adds	r3, #1
 8004a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	40da      	lsrs	r2, r3
 8004a4c:	1e13      	subs	r3, r2, #0
 8004a4e:	d000      	beq.n	8004a52 <HAL_GPIO_Init+0x2ba>
 8004a50:	e6aa      	b.n	80047a8 <HAL_GPIO_Init+0x10>
  }
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b006      	add	sp, #24
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021800 	.word	0x40021800
 8004a60:	50000400 	.word	0x50000400
 8004a64:	50000800 	.word	0x50000800
 8004a68:	50000c00 	.word	0x50000c00
 8004a6c:	50001000 	.word	0x50001000

08004a70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a7e:	e0ba      	b.n	8004bf6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a80:	2201      	movs	r2, #1
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	409a      	lsls	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <HAL_GPIO_DeInit+0x24>
 8004a92:	e0ad      	b.n	8004bf0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004a94:	4a5d      	ldr	r2, [pc, #372]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	089b      	lsrs	r3, r3, #2
 8004a9a:	3318      	adds	r3, #24
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	589b      	ldr	r3, [r3, r2]
 8004aa0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	220f      	movs	r2, #15
 8004aac:	409a      	lsls	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	23a0      	movs	r3, #160	; 0xa0
 8004ab8:	05db      	lsls	r3, r3, #23
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d019      	beq.n	8004af2 <HAL_GPIO_DeInit+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a53      	ldr	r2, [pc, #332]	; (8004c10 <HAL_GPIO_DeInit+0x1a0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_GPIO_DeInit+0x7e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a52      	ldr	r2, [pc, #328]	; (8004c14 <HAL_GPIO_DeInit+0x1a4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00d      	beq.n	8004aea <HAL_GPIO_DeInit+0x7a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a51      	ldr	r2, [pc, #324]	; (8004c18 <HAL_GPIO_DeInit+0x1a8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <HAL_GPIO_DeInit+0x76>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a50      	ldr	r2, [pc, #320]	; (8004c1c <HAL_GPIO_DeInit+0x1ac>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_GPIO_DeInit+0x72>
 8004ade:	2304      	movs	r3, #4
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_DeInit+0x84>
 8004ae2:	2305      	movs	r3, #5
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_DeInit+0x84>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_DeInit+0x84>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_DeInit+0x84>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_DeInit+0x84>
 8004af2:	2300      	movs	r3, #0
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	2103      	movs	r1, #3
 8004af8:	400a      	ands	r2, r1
 8004afa:	00d2      	lsls	r2, r2, #3
 8004afc:	4093      	lsls	r3, r2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d136      	bne.n	8004b72 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004b04:	4a41      	ldr	r2, [pc, #260]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	58d3      	ldr	r3, [r2, r3]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	43d2      	mvns	r2, r2
 8004b0e:	493f      	ldr	r1, [pc, #252]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004b16:	4a3d      	ldr	r2, [pc, #244]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b18:	2384      	movs	r3, #132	; 0x84
 8004b1a:	58d3      	ldr	r3, [r2, r3]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	43d2      	mvns	r2, r2
 8004b20:	493a      	ldr	r1, [pc, #232]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b22:	4013      	ands	r3, r2
 8004b24:	2284      	movs	r2, #132	; 0x84
 8004b26:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004b28:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43d9      	mvns	r1, r3
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b32:	400a      	ands	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004b36:	4b35      	ldr	r3, [pc, #212]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	43d9      	mvns	r1, r3
 8004b3e:	4b33      	ldr	r3, [pc, #204]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2203      	movs	r2, #3
 8004b48:	4013      	ands	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	220f      	movs	r2, #15
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	0013      	movs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004b54:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	089b      	lsrs	r3, r3, #2
 8004b5a:	3318      	adds	r3, #24
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	589a      	ldr	r2, [r3, r2]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	4829      	ldr	r0, [pc, #164]	; (8004c0c <HAL_GPIO_DeInit+0x19c>)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	3318      	adds	r3, #24
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	2103      	movs	r1, #3
 8004b7c:	4099      	lsls	r1, r3
 8004b7e:	000b      	movs	r3, r1
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	08da      	lsrs	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3208      	adds	r2, #8
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	58d3      	ldr	r3, [r2, r3]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	2107      	movs	r1, #7
 8004b96:	400a      	ands	r2, r1
 8004b98:	0092      	lsls	r2, r2, #2
 8004b9a:	210f      	movs	r1, #15
 8004b9c:	4091      	lsls	r1, r2
 8004b9e:	000a      	movs	r2, r1
 8004ba0:	43d1      	mvns	r1, r2
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	08d2      	lsrs	r2, r2, #3
 8004ba6:	4019      	ands	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	0052      	lsls	r2, r2, #1
 8004bb8:	2103      	movs	r1, #3
 8004bba:	4091      	lsls	r1, r2
 8004bbc:	000a      	movs	r2, r1
 8004bbe:	43d2      	mvns	r2, r2
 8004bc0:	401a      	ands	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2101      	movs	r1, #1
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4091      	lsls	r1, r2
 8004bd0:	000a      	movs	r2, r1
 8004bd2:	43d2      	mvns	r2, r2
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	0052      	lsls	r2, r2, #1
 8004be2:	2103      	movs	r1, #3
 8004be4:	4091      	lsls	r1, r2
 8004be6:	000a      	movs	r2, r1
 8004be8:	43d2      	mvns	r2, r2
 8004bea:	401a      	ands	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	40da      	lsrs	r2, r3
 8004bfc:	1e13      	subs	r3, r2, #0
 8004bfe:	d000      	beq.n	8004c02 <HAL_GPIO_DeInit+0x192>
 8004c00:	e73e      	b.n	8004a80 <HAL_GPIO_DeInit+0x10>
  }
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b006      	add	sp, #24
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021800 	.word	0x40021800
 8004c10:	50000400 	.word	0x50000400
 8004c14:	50000800 	.word	0x50000800
 8004c18:	50000c00 	.word	0x50000c00
 8004c1c:	50001000 	.word	0x50001000

08004c20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	000a      	movs	r2, r1
 8004c2a:	1cbb      	adds	r3, r7, #2
 8004c2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	1cba      	adds	r2, r7, #2
 8004c34:	8812      	ldrh	r2, [r2, #0]
 8004c36:	4013      	ands	r3, r2
 8004c38:	d004      	beq.n	8004c44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004c3a:	230f      	movs	r3, #15
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e003      	b.n	8004c4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c44:	230f      	movs	r3, #15
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c4c:	230f      	movs	r3, #15
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	0008      	movs	r0, r1
 8004c64:	0011      	movs	r1, r2
 8004c66:	1cbb      	adds	r3, r7, #2
 8004c68:	1c02      	adds	r2, r0, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	1c7b      	adds	r3, r7, #1
 8004c6e:	1c0a      	adds	r2, r1, #0
 8004c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c72:	1c7b      	adds	r3, r7, #1
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c7a:	1cbb      	adds	r3, r7, #2
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c82:	e003      	b.n	8004c8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c84:	1cbb      	adds	r3, r7, #2
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	1dbb      	adds	r3, r7, #6
 8004c9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	1dba      	adds	r2, r7, #6
 8004ca6:	8812      	ldrh	r2, [r2, #0]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d008      	beq.n	8004cbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cae:	1dba      	adds	r2, r7, #6
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004cb4:	1dbb      	adds	r3, r7, #6
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fe fff7 	bl	8003cac <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	1dba      	adds	r2, r7, #6
 8004cc4:	8812      	ldrh	r2, [r2, #0]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d008      	beq.n	8004cdc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ccc:	1dba      	adds	r2, r7, #6
 8004cce:	8812      	ldrh	r2, [r2, #0]
 8004cd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004cd2:	1dbb      	adds	r3, r7, #6
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f806 	bl	8004ce8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021800 	.word	0x40021800

08004ce8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	0002      	movs	r2, r0
 8004cf0:	1dbb      	adds	r3, r7, #6
 8004cf2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b03      	ldr	r3, [pc, #12]	; (8004d14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	0049      	lsls	r1, r1, #1
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40007000 	.word	0x40007000

08004d18 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	000a      	movs	r2, r1
 8004d22:	1cfb      	adds	r3, r7, #3
 8004d24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_PWR_EnterSTOPMode+0x68>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2207      	movs	r2, #7
 8004d32:	4393      	bics	r3, r2
 8004d34:	001a      	movs	r2, r3
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_PWR_EnterSTOPMode+0x68>)
 8004d38:	2101      	movs	r1, #1
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e005      	b.n	8004d4c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004d40:	4b0f      	ldr	r3, [pc, #60]	; (8004d80 <HAL_PWR_EnterSTOPMode+0x68>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <HAL_PWR_EnterSTOPMode+0x68>)
 8004d46:	2107      	movs	r1, #7
 8004d48:	438a      	bics	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d52:	2104      	movs	r1, #4
 8004d54:	430a      	orrs	r2, r1
 8004d56:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004d58:	1cfb      	adds	r3, r7, #3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d60:	bf30      	wfi
 8004d62:	e002      	b.n	8004d6a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d64:	bf40      	sev
    __WFE();
 8004d66:	bf20      	wfe
    __WFE();
 8004d68:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d70:	2104      	movs	r1, #4
 8004d72:	438a      	bics	r2, r1
 8004d74:	611a      	str	r2, [r3, #16]
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b002      	add	sp, #8
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	40007000 	.word	0x40007000
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d11f      	bne.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	0013      	movs	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4912      	ldr	r1, [pc, #72]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fb f9be 	bl	800013c <__udivsi3>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dc6:	e008      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e009      	b.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	401a      	ands	r2, r3
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d0ed      	beq.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b004      	add	sp, #16
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	fffff9ff 	.word	0xfffff9ff
 8004e00:	20000010 	.word	0x20000010
 8004e04:	000f4240 	.word	0x000f4240

08004e08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	23e0      	movs	r3, #224	; 0xe0
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	4013      	ands	r3, r2
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f000 fb50 	bl	80054d4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d100      	bne.n	8004e40 <HAL_RCC_OscConfig+0x20>
 8004e3e:	e07c      	b.n	8004f3a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e40:	4bc3      	ldr	r3, [pc, #780]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2238      	movs	r2, #56	; 0x38
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e4a:	4bc1      	ldr	r3, [pc, #772]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d102      	bne.n	8004e60 <HAL_RCC_OscConfig+0x40>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d002      	beq.n	8004e66 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d10b      	bne.n	8004e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e66:	4bba      	ldr	r3, [pc, #744]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	4013      	ands	r3, r2
 8004e70:	d062      	beq.n	8004f38 <HAL_RCC_OscConfig+0x118>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d15e      	bne.n	8004f38 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e32a      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	025b      	lsls	r3, r3, #9
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_OscConfig+0x7a>
 8004e8a:	4bb1      	ldr	r3, [pc, #708]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4bb0      	ldr	r3, [pc, #704]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	0249      	lsls	r1, r1, #9
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e020      	b.n	8004edc <HAL_RCC_OscConfig+0xbc>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	23a0      	movs	r3, #160	; 0xa0
 8004ea0:	02db      	lsls	r3, r3, #11
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_RCC_OscConfig+0xa4>
 8004ea6:	4baa      	ldr	r3, [pc, #680]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4ba9      	ldr	r3, [pc, #676]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	02c9      	lsls	r1, r1, #11
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	4ba6      	ldr	r3, [pc, #664]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4ba5      	ldr	r3, [pc, #660]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	0249      	lsls	r1, r1, #9
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0xbc>
 8004ec4:	4ba2      	ldr	r3, [pc, #648]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4ba1      	ldr	r3, [pc, #644]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004eca:	49a2      	ldr	r1, [pc, #648]	; (8005154 <HAL_RCC_OscConfig+0x334>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	4b9f      	ldr	r3, [pc, #636]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b9e      	ldr	r3, [pc, #632]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ed6:	49a0      	ldr	r1, [pc, #640]	; (8005158 <HAL_RCC_OscConfig+0x338>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d014      	beq.n	8004f0e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7ff fb04 	bl	80044f0 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eee:	f7ff faff 	bl	80044f0 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b64      	cmp	r3, #100	; 0x64
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e2e9      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f00:	4b93      	ldr	r3, [pc, #588]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0xce>
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7ff faef 	bl	80044f0 <HAL_GetTick>
 8004f12:	0003      	movs	r3, r0
 8004f14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7ff faea 	bl	80044f0 <HAL_GetTick>
 8004f1c:	0002      	movs	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e2d4      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f2a:	4b89      	ldr	r3, [pc, #548]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	4013      	ands	r3, r2
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0xf8>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	4013      	ands	r3, r2
 8004f42:	d100      	bne.n	8004f46 <HAL_RCC_OscConfig+0x126>
 8004f44:	e099      	b.n	800507a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2238      	movs	r2, #56	; 0x38
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f50:	4b7f      	ldr	r3, [pc, #508]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	2203      	movs	r2, #3
 8004f56:	4013      	ands	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCC_OscConfig+0x146>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d135      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f6c:	4b78      	ldr	r3, [pc, #480]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4013      	ands	r3, r2
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_OscConfig+0x164>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e2a7      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f84:	4b72      	ldr	r3, [pc, #456]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a74      	ldr	r2, [pc, #464]	; (800515c <HAL_RCC_OscConfig+0x33c>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	021a      	lsls	r2, r3, #8
 8004f94:	4b6e      	ldr	r3, [pc, #440]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d112      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fa0:	4b6b      	ldr	r3, [pc, #428]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6e      	ldr	r2, [pc, #440]	; (8005160 <HAL_RCC_OscConfig+0x340>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	0019      	movs	r1, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	4b68      	ldr	r3, [pc, #416]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fb4:	4b66      	ldr	r3, [pc, #408]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	0adb      	lsrs	r3, r3, #11
 8004fba:	2207      	movs	r2, #7
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	4a69      	ldr	r2, [pc, #420]	; (8005164 <HAL_RCC_OscConfig+0x344>)
 8004fc0:	40da      	lsrs	r2, r3
 8004fc2:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x348>)
 8004fc4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fc6:	4b69      	ldr	r3, [pc, #420]	; (800516c <HAL_RCC_OscConfig+0x34c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff fa34 	bl	8004438 <HAL_InitTick>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d051      	beq.n	8005078 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e27d      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d030      	beq.n	8005042 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fe0:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	; (8005160 <HAL_RCC_OscConfig+0x340>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b56      	ldr	r3, [pc, #344]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b55      	ldr	r3, [pc, #340]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	0049      	lsls	r1, r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005002:	f7ff fa75 	bl	80044f0 <HAL_GetTick>
 8005006:	0003      	movs	r3, r0
 8005008:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7ff fa70 	bl	80044f0 <HAL_GetTick>
 8005010:	0002      	movs	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e25a      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501e:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4013      	ands	r3, r2
 8005028:	d0f0      	beq.n	800500c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b49      	ldr	r3, [pc, #292]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4a4b      	ldr	r2, [pc, #300]	; (800515c <HAL_RCC_OscConfig+0x33c>)
 8005030:	4013      	ands	r3, r2
 8005032:	0019      	movs	r1, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	021a      	lsls	r2, r3, #8
 800503a:	4b45      	ldr	r3, [pc, #276]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	e01b      	b.n	800507a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b42      	ldr	r3, [pc, #264]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005048:	4949      	ldr	r1, [pc, #292]	; (8005170 <HAL_RCC_OscConfig+0x350>)
 800504a:	400a      	ands	r2, r1
 800504c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7ff fa4f 	bl	80044f0 <HAL_GetTick>
 8005052:	0003      	movs	r3, r0
 8005054:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005058:	f7ff fa4a 	bl	80044f0 <HAL_GetTick>
 800505c:	0002      	movs	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e234      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800506a:	4b39      	ldr	r3, [pc, #228]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	2380      	movs	r3, #128	; 0x80
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4013      	ands	r3, r2
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x238>
 8005076:	e000      	b.n	800507a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005078:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2208      	movs	r2, #8
 8005080:	4013      	ands	r3, r2
 8005082:	d047      	beq.n	8005114 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005084:	4b32      	ldr	r3, [pc, #200]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2238      	movs	r2, #56	; 0x38
 800508a:	4013      	ands	r3, r2
 800508c:	2b18      	cmp	r3, #24
 800508e:	d10a      	bne.n	80050a6 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005094:	2202      	movs	r2, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d03c      	beq.n	8005114 <HAL_RCC_OscConfig+0x2f4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d138      	bne.n	8005114 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e216      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d019      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050ae:	4b28      	ldr	r3, [pc, #160]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 80050b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 80050b4:	2101      	movs	r1, #1
 80050b6:	430a      	orrs	r2, r1
 80050b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7ff fa19 	bl	80044f0 <HAL_GetTick>
 80050be:	0003      	movs	r3, r0
 80050c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c4:	f7ff fa14 	bl	80044f0 <HAL_GetTick>
 80050c8:	0002      	movs	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1fe      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d6:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 80050d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050da:	2202      	movs	r2, #2
 80050dc:	4013      	ands	r3, r2
 80050de:	d0f1      	beq.n	80050c4 <HAL_RCC_OscConfig+0x2a4>
 80050e0:	e018      	b.n	8005114 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 80050e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050e6:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 80050e8:	2101      	movs	r1, #1
 80050ea:	438a      	bics	r2, r1
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7ff f9ff 	bl	80044f0 <HAL_GetTick>
 80050f2:	0003      	movs	r3, r0
 80050f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f8:	f7ff f9fa 	bl	80044f0 <HAL_GetTick>
 80050fc:	0002      	movs	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1e4      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 800510c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	d1f1      	bne.n	80050f8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2204      	movs	r2, #4
 800511a:	4013      	ands	r3, r2
 800511c:	d100      	bne.n	8005120 <HAL_RCC_OscConfig+0x300>
 800511e:	e0c7      	b.n	80052b0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2238      	movs	r2, #56	; 0x38
 800512e:	4013      	ands	r3, r2
 8005130:	2b20      	cmp	r3, #32
 8005132:	d11f      	bne.n	8005174 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8005136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005138:	2202      	movs	r2, #2
 800513a:	4013      	ands	r3, r2
 800513c:	d100      	bne.n	8005140 <HAL_RCC_OscConfig+0x320>
 800513e:	e0b7      	b.n	80052b0 <HAL_RCC_OscConfig+0x490>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d000      	beq.n	800514a <HAL_RCC_OscConfig+0x32a>
 8005148:	e0b2      	b.n	80052b0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1c2      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	40021000 	.word	0x40021000
 8005154:	fffeffff 	.word	0xfffeffff
 8005158:	fffbffff 	.word	0xfffbffff
 800515c:	ffff80ff 	.word	0xffff80ff
 8005160:	ffffc7ff 	.word	0xffffc7ff
 8005164:	00f42400 	.word	0x00f42400
 8005168:	20000010 	.word	0x20000010
 800516c:	20000014 	.word	0x20000014
 8005170:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005174:	4bb5      	ldr	r3, [pc, #724]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	055b      	lsls	r3, r3, #21
 800517c:	4013      	ands	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x364>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x366>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d011      	beq.n	80051ae <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	4bb0      	ldr	r3, [pc, #704]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800518c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518e:	4baf      	ldr	r3, [pc, #700]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	0549      	lsls	r1, r1, #21
 8005194:	430a      	orrs	r2, r1
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c
 8005198:	4bac      	ldr	r3, [pc, #688]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800519a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519c:	2380      	movs	r3, #128	; 0x80
 800519e:	055b      	lsls	r3, r3, #21
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051a6:	231f      	movs	r3, #31
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	2201      	movs	r2, #1
 80051ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ae:	4ba8      	ldr	r3, [pc, #672]	; (8005450 <HAL_RCC_OscConfig+0x630>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d11a      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ba:	4ba5      	ldr	r3, [pc, #660]	; (8005450 <HAL_RCC_OscConfig+0x630>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4ba4      	ldr	r3, [pc, #656]	; (8005450 <HAL_RCC_OscConfig+0x630>)
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	0049      	lsls	r1, r1, #1
 80051c4:	430a      	orrs	r2, r1
 80051c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051c8:	f7ff f992 	bl	80044f0 <HAL_GetTick>
 80051cc:	0003      	movs	r3, r0
 80051ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7ff f98d 	bl	80044f0 <HAL_GetTick>
 80051d6:	0002      	movs	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e177      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e4:	4b9a      	ldr	r3, [pc, #616]	; (8005450 <HAL_RCC_OscConfig+0x630>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4013      	ands	r3, r2
 80051ee:	d0f0      	beq.n	80051d2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d106      	bne.n	8005206 <HAL_RCC_OscConfig+0x3e6>
 80051f8:	4b94      	ldr	r3, [pc, #592]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80051fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051fc:	4b93      	ldr	r3, [pc, #588]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80051fe:	2101      	movs	r1, #1
 8005200:	430a      	orrs	r2, r1
 8005202:	65da      	str	r2, [r3, #92]	; 0x5c
 8005204:	e01c      	b.n	8005240 <HAL_RCC_OscConfig+0x420>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x408>
 800520e:	4b8f      	ldr	r3, [pc, #572]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005212:	4b8e      	ldr	r3, [pc, #568]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005214:	2104      	movs	r1, #4
 8005216:	430a      	orrs	r2, r1
 8005218:	65da      	str	r2, [r3, #92]	; 0x5c
 800521a:	4b8c      	ldr	r3, [pc, #560]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800521c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800521e:	4b8b      	ldr	r3, [pc, #556]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005220:	2101      	movs	r1, #1
 8005222:	430a      	orrs	r2, r1
 8005224:	65da      	str	r2, [r3, #92]	; 0x5c
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0x420>
 8005228:	4b88      	ldr	r3, [pc, #544]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800522a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800522c:	4b87      	ldr	r3, [pc, #540]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800522e:	2101      	movs	r1, #1
 8005230:	438a      	bics	r2, r1
 8005232:	65da      	str	r2, [r3, #92]	; 0x5c
 8005234:	4b85      	ldr	r3, [pc, #532]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005236:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005238:	4b84      	ldr	r3, [pc, #528]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800523a:	2104      	movs	r1, #4
 800523c:	438a      	bics	r2, r1
 800523e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d014      	beq.n	8005272 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7ff f952 	bl	80044f0 <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005250:	e009      	b.n	8005266 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7ff f94d 	bl	80044f0 <HAL_GetTick>
 8005256:	0002      	movs	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	4a7d      	ldr	r2, [pc, #500]	; (8005454 <HAL_RCC_OscConfig+0x634>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e136      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005266:	4b79      	ldr	r3, [pc, #484]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	2202      	movs	r2, #2
 800526c:	4013      	ands	r3, r2
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x432>
 8005270:	e013      	b.n	800529a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7ff f93d 	bl	80044f0 <HAL_GetTick>
 8005276:	0003      	movs	r3, r0
 8005278:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800527a:	e009      	b.n	8005290 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527c:	f7ff f938 	bl	80044f0 <HAL_GetTick>
 8005280:	0002      	movs	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	4a73      	ldr	r2, [pc, #460]	; (8005454 <HAL_RCC_OscConfig+0x634>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e121      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005290:	4b6e      	ldr	r3, [pc, #440]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	2202      	movs	r2, #2
 8005296:	4013      	ands	r3, r2
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800529a:	231f      	movs	r3, #31
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d105      	bne.n	80052b0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052a4:	4b69      	ldr	r3, [pc, #420]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a8:	4b68      	ldr	r3, [pc, #416]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052aa:	496b      	ldr	r1, [pc, #428]	; (8005458 <HAL_RCC_OscConfig+0x638>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	4013      	ands	r3, r2
 80052b8:	d039      	beq.n	800532e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01b      	beq.n	80052fa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c2:	4b62      	ldr	r3, [pc, #392]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b61      	ldr	r3, [pc, #388]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	03c9      	lsls	r1, r1, #15
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7ff f90e 	bl	80044f0 <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052da:	f7ff f909 	bl	80044f0 <HAL_GetTick>
 80052de:	0002      	movs	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e0f3      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052ec:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	4013      	ands	r3, r2
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x4ba>
 80052f8:	e019      	b.n	800532e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052fa:	4b54      	ldr	r3, [pc, #336]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b53      	ldr	r3, [pc, #332]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005300:	4956      	ldr	r1, [pc, #344]	; (800545c <HAL_RCC_OscConfig+0x63c>)
 8005302:	400a      	ands	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005306:	f7ff f8f3 	bl	80044f0 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005310:	f7ff f8ee 	bl	80044f0 <HAL_GetTick>
 8005314:	0002      	movs	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0d8      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005322:	4b4a      	ldr	r3, [pc, #296]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	4013      	ands	r3, r2
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d100      	bne.n	8005338 <HAL_RCC_OscConfig+0x518>
 8005336:	e0cc      	b.n	80054d2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005338:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2238      	movs	r2, #56	; 0x38
 800533e:	4013      	ands	r3, r2
 8005340:	2b10      	cmp	r3, #16
 8005342:	d100      	bne.n	8005346 <HAL_RCC_OscConfig+0x526>
 8005344:	e07b      	b.n	800543e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d156      	bne.n	80053fc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b3e      	ldr	r3, [pc, #248]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005354:	4942      	ldr	r1, [pc, #264]	; (8005460 <HAL_RCC_OscConfig+0x640>)
 8005356:	400a      	ands	r2, r1
 8005358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7ff f8c9 	bl	80044f0 <HAL_GetTick>
 800535e:	0003      	movs	r3, r0
 8005360:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005364:	f7ff f8c4 	bl	80044f0 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0ae      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005376:	4b35      	ldr	r3, [pc, #212]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	049b      	lsls	r3, r3, #18
 800537e:	4013      	ands	r3, r2
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a37      	ldr	r2, [pc, #220]	; (8005464 <HAL_RCC_OscConfig+0x644>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	431a      	orrs	r2, r3
 80053b0:	4b26      	ldr	r3, [pc, #152]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053b2:	430a      	orrs	r2, r1
 80053b4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b6:	4b25      	ldr	r3, [pc, #148]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053bc:	2180      	movs	r1, #128	; 0x80
 80053be:	0449      	lsls	r1, r1, #17
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80053c4:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	0549      	lsls	r1, r1, #21
 80053ce:	430a      	orrs	r2, r1
 80053d0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7ff f88d 	bl	80044f0 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7ff f888 	bl	80044f0 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e072      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ee:	4b17      	ldr	r3, [pc, #92]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	2380      	movs	r3, #128	; 0x80
 80053f4:	049b      	lsls	r3, r3, #18
 80053f6:	4013      	ands	r3, r2
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x5bc>
 80053fa:	e06a      	b.n	80054d2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005402:	4917      	ldr	r1, [pc, #92]	; (8005460 <HAL_RCC_OscConfig+0x640>)
 8005404:	400a      	ands	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7ff f872 	bl	80044f0 <HAL_GetTick>
 800540c:	0003      	movs	r3, r0
 800540e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005412:	f7ff f86d 	bl	80044f0 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e057      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	049b      	lsls	r3, r3, #18
 800542c:	4013      	ands	r3, r2
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005436:	490c      	ldr	r1, [pc, #48]	; (8005468 <HAL_RCC_OscConfig+0x648>)
 8005438:	400a      	ands	r2, r1
 800543a:	60da      	str	r2, [r3, #12]
 800543c:	e049      	b.n	80054d2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d112      	bne.n	800546c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e044      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
 8005454:	00001388 	.word	0x00001388
 8005458:	efffffff 	.word	0xefffffff
 800545c:	ffbfffff 	.word	0xffbfffff
 8005460:	feffffff 	.word	0xfeffffff
 8005464:	11c1808c 	.word	0x11c1808c
 8005468:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <HAL_RCC_OscConfig+0x6bc>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2203      	movs	r2, #3
 8005476:	401a      	ands	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	429a      	cmp	r2, r3
 800547e:	d126      	bne.n	80054ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2270      	movs	r2, #112	; 0x70
 8005484:	401a      	ands	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d11f      	bne.n	80054ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	23fe      	movs	r3, #254	; 0xfe
 8005492:	01db      	lsls	r3, r3, #7
 8005494:	401a      	ands	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d116      	bne.n	80054ce <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	23f8      	movs	r3, #248	; 0xf8
 80054a4:	039b      	lsls	r3, r3, #14
 80054a6:	401a      	ands	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d10e      	bne.n	80054ce <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	23e0      	movs	r3, #224	; 0xe0
 80054b4:	051b      	lsls	r3, r3, #20
 80054b6:	401a      	ands	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d106      	bne.n	80054ce <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	0f5b      	lsrs	r3, r3, #29
 80054c4:	075a      	lsls	r2, r3, #29
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b008      	add	sp, #32
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40021000 	.word	0x40021000

080054e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0e9      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054f4:	4b76      	ldr	r3, [pc, #472]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2207      	movs	r2, #7
 80054fa:	4013      	ands	r3, r2
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d91e      	bls.n	8005540 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b73      	ldr	r3, [pc, #460]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2207      	movs	r2, #7
 8005508:	4393      	bics	r3, r2
 800550a:	0019      	movs	r1, r3
 800550c:	4b70      	ldr	r3, [pc, #448]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005514:	f7fe ffec 	bl	80044f0 <HAL_GetTick>
 8005518:	0003      	movs	r3, r0
 800551a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800551c:	e009      	b.n	8005532 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551e:	f7fe ffe7 	bl	80044f0 <HAL_GetTick>
 8005522:	0002      	movs	r2, r0
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	4a6a      	ldr	r2, [pc, #424]	; (80056d4 <HAL_RCC_ClockConfig+0x1f4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0ca      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005532:	4b67      	ldr	r3, [pc, #412]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2207      	movs	r2, #7
 8005538:	4013      	ands	r3, r2
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d1ee      	bne.n	800551e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2202      	movs	r2, #2
 8005546:	4013      	ands	r3, r2
 8005548:	d015      	beq.n	8005576 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2204      	movs	r2, #4
 8005550:	4013      	ands	r3, r2
 8005552:	d006      	beq.n	8005562 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005554:	4b60      	ldr	r3, [pc, #384]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b5f      	ldr	r3, [pc, #380]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 800555a:	21e0      	movs	r1, #224	; 0xe0
 800555c:	01c9      	lsls	r1, r1, #7
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005562:	4b5d      	ldr	r3, [pc, #372]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4a5d      	ldr	r2, [pc, #372]	; (80056dc <HAL_RCC_ClockConfig+0x1fc>)
 8005568:	4013      	ands	r3, r2
 800556a:	0019      	movs	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b59      	ldr	r3, [pc, #356]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	4013      	ands	r3, r2
 800557e:	d057      	beq.n	8005630 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d107      	bne.n	8005598 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	4013      	ands	r3, r2
 8005592:	d12b      	bne.n	80055ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e097      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a0:	4b4d      	ldr	r3, [pc, #308]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	049b      	lsls	r3, r3, #18
 80055a8:	4013      	ands	r3, r2
 80055aa:	d11f      	bne.n	80055ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e08b      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b8:	4b47      	ldr	r3, [pc, #284]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4013      	ands	r3, r2
 80055c2:	d113      	bne.n	80055ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e07f      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d106      	bne.n	80055de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d0:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	2202      	movs	r2, #2
 80055d6:	4013      	ands	r3, r2
 80055d8:	d108      	bne.n	80055ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e074      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055de:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	2202      	movs	r2, #2
 80055e4:	4013      	ands	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e06d      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ec:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2207      	movs	r2, #7
 80055f2:	4393      	bics	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80055fc:	430a      	orrs	r2, r1
 80055fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005600:	f7fe ff76 	bl	80044f0 <HAL_GetTick>
 8005604:	0003      	movs	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005608:	e009      	b.n	800561e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560a:	f7fe ff71 	bl	80044f0 <HAL_GetTick>
 800560e:	0002      	movs	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <HAL_RCC_ClockConfig+0x1f4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e054      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2238      	movs	r2, #56	; 0x38
 8005624:	401a      	ands	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	429a      	cmp	r2, r3
 800562e:	d1ec      	bne.n	800560a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2207      	movs	r2, #7
 8005636:	4013      	ands	r3, r2
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d21e      	bcs.n	800567c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2207      	movs	r2, #7
 8005644:	4393      	bics	r3, r2
 8005646:	0019      	movs	r1, r3
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005650:	f7fe ff4e 	bl	80044f0 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005658:	e009      	b.n	800566e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800565a:	f7fe ff49 	bl	80044f0 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_RCC_ClockConfig+0x1f4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e02c      	b.n	80056c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <HAL_RCC_ClockConfig+0x1f0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2207      	movs	r2, #7
 8005674:	4013      	ands	r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d1ee      	bne.n	800565a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2204      	movs	r2, #4
 8005682:	4013      	ands	r3, r2
 8005684:	d009      	beq.n	800569a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <HAL_RCC_ClockConfig+0x200>)
 800568c:	4013      	ands	r3, r2
 800568e:	0019      	movs	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800569a:	f000 f829 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 800569e:	0001      	movs	r1, r0
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCC_ClockConfig+0x1f8>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	220f      	movs	r2, #15
 80056a8:	401a      	ands	r2, r3
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCC_ClockConfig+0x204>)
 80056ac:	0092      	lsls	r2, r2, #2
 80056ae:	58d3      	ldr	r3, [r2, r3]
 80056b0:	221f      	movs	r2, #31
 80056b2:	4013      	ands	r3, r2
 80056b4:	000a      	movs	r2, r1
 80056b6:	40da      	lsrs	r2, r3
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_ClockConfig+0x208>)
 80056ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCC_ClockConfig+0x20c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7fe feb9 	bl	8004438 <HAL_InitTick>
 80056c6:	0003      	movs	r3, r0
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b004      	add	sp, #16
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40022000 	.word	0x40022000
 80056d4:	00001388 	.word	0x00001388
 80056d8:	40021000 	.word	0x40021000
 80056dc:	fffff0ff 	.word	0xfffff0ff
 80056e0:	ffff8fff 	.word	0xffff8fff
 80056e4:	08015890 	.word	0x08015890
 80056e8:	20000010 	.word	0x20000010
 80056ec:	20000014 	.word	0x20000014

080056f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056f6:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2238      	movs	r2, #56	; 0x38
 80056fc:	4013      	ands	r3, r2
 80056fe:	d10f      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005700:	4b39      	ldr	r3, [pc, #228]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	0adb      	lsrs	r3, r3, #11
 8005706:	2207      	movs	r2, #7
 8005708:	4013      	ands	r3, r2
 800570a:	2201      	movs	r2, #1
 800570c:	409a      	lsls	r2, r3
 800570e:	0013      	movs	r3, r2
 8005710:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	4835      	ldr	r0, [pc, #212]	; (80057ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8005716:	f7fa fd11 	bl	800013c <__udivsi3>
 800571a:	0003      	movs	r3, r0
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	e05d      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2238      	movs	r2, #56	; 0x38
 8005726:	4013      	ands	r3, r2
 8005728:	2b08      	cmp	r3, #8
 800572a:	d102      	bne.n	8005732 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800572c:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	e054      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005732:	4b2d      	ldr	r3, [pc, #180]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2238      	movs	r2, #56	; 0x38
 8005738:	4013      	ands	r3, r2
 800573a:	2b10      	cmp	r3, #16
 800573c:	d138      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800573e:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2203      	movs	r2, #3
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	2207      	movs	r2, #7
 8005750:	4013      	ands	r3, r2
 8005752:	3301      	adds	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b03      	cmp	r3, #3
 800575a:	d10d      	bne.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4824      	ldr	r0, [pc, #144]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005760:	f7fa fcec 	bl	800013c <__udivsi3>
 8005764:	0003      	movs	r3, r0
 8005766:	0019      	movs	r1, r3
 8005768:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	0a1b      	lsrs	r3, r3, #8
 800576e:	227f      	movs	r2, #127	; 0x7f
 8005770:	4013      	ands	r3, r2
 8005772:	434b      	muls	r3, r1
 8005774:	617b      	str	r3, [r7, #20]
        break;
 8005776:	e00d      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	481c      	ldr	r0, [pc, #112]	; (80057ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800577c:	f7fa fcde 	bl	800013c <__udivsi3>
 8005780:	0003      	movs	r3, r0
 8005782:	0019      	movs	r1, r3
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	227f      	movs	r2, #127	; 0x7f
 800578c:	4013      	ands	r3, r2
 800578e:	434b      	muls	r3, r1
 8005790:	617b      	str	r3, [r7, #20]
        break;
 8005792:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005794:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0f5b      	lsrs	r3, r3, #29
 800579a:	2207      	movs	r2, #7
 800579c:	4013      	ands	r3, r2
 800579e:	3301      	adds	r3, #1
 80057a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	6978      	ldr	r0, [r7, #20]
 80057a6:	f7fa fcc9 	bl	800013c <__udivsi3>
 80057aa:	0003      	movs	r3, r0
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e015      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2238      	movs	r2, #56	; 0x38
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d103      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057bc:	2380      	movs	r3, #128	; 0x80
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2238      	movs	r2, #56	; 0x38
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b18      	cmp	r3, #24
 80057ce:	d103      	bne.n	80057d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80057d0:	23fa      	movs	r3, #250	; 0xfa
 80057d2:	01db      	lsls	r3, r3, #7
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e001      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057dc:	693b      	ldr	r3, [r7, #16]
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b006      	add	sp, #24
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	40021000 	.word	0x40021000
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	007a1200 	.word	0x007a1200

080057f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <HAL_RCC_GetHCLKFreq+0x10>)
 80057fa:	681b      	ldr	r3, [r3, #0]
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	20000010 	.word	0x20000010

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800580c:	f7ff fff2 	bl	80057f4 <HAL_RCC_GetHCLKFreq>
 8005810:	0004      	movs	r4, r0
 8005812:	f7ff faf9 	bl	8004e08 <LL_RCC_GetAPB1Prescaler>
 8005816:	0003      	movs	r3, r0
 8005818:	0b1a      	lsrs	r2, r3, #12
 800581a:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800581c:	0092      	lsls	r2, r2, #2
 800581e:	58d3      	ldr	r3, [r2, r3]
 8005820:	221f      	movs	r2, #31
 8005822:	4013      	ands	r3, r2
 8005824:	40dc      	lsrs	r4, r3
 8005826:	0023      	movs	r3, r4
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	bdb0      	pop	{r4, r5, r7, pc}
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	080158d0 	.word	0x080158d0

08005834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800583c:	2313      	movs	r3, #19
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005844:	2312      	movs	r3, #18
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	2380      	movs	r3, #128	; 0x80
 8005852:	029b      	lsls	r3, r3, #10
 8005854:	4013      	ands	r3, r2
 8005856:	d100      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005858:	e0ad      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2011      	movs	r0, #17
 800585c:	183b      	adds	r3, r7, r0
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	055b      	lsls	r3, r3, #21
 800586a:	4013      	ands	r3, r2
 800586c:	d110      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586e:	4b44      	ldr	r3, [pc, #272]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005872:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	0549      	lsls	r1, r1, #21
 8005878:	430a      	orrs	r2, r1
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c
 800587c:	4b40      	ldr	r3, [pc, #256]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800587e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	055b      	lsls	r3, r3, #21
 8005884:	4013      	ands	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588a:	183b      	adds	r3, r7, r0
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005890:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b3b      	ldr	r3, [pc, #236]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005896:	2180      	movs	r1, #128	; 0x80
 8005898:	0049      	lsls	r1, r1, #1
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589e:	f7fe fe27 	bl	80044f0 <HAL_GetTick>
 80058a2:	0003      	movs	r3, r0
 80058a4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a6:	e00b      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a8:	f7fe fe22 	bl	80044f0 <HAL_GetTick>
 80058ac:	0002      	movs	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d904      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80058b6:	2313      	movs	r3, #19
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	2203      	movs	r2, #3
 80058bc:	701a      	strb	r2, [r3, #0]
        break;
 80058be:	e005      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c0:	4b30      	ldr	r3, [pc, #192]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4013      	ands	r3, r2
 80058ca:	d0ed      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80058cc:	2313      	movs	r3, #19
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d15e      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058d6:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058da:	23c0      	movs	r3, #192	; 0xc0
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d019      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d014      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058f2:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f6:	4a24      	ldr	r2, [pc, #144]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058fc:	4b20      	ldr	r3, [pc, #128]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005900:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005902:	2180      	movs	r1, #128	; 0x80
 8005904:	0249      	lsls	r1, r1, #9
 8005906:	430a      	orrs	r2, r1
 8005908:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800590a:	4b1d      	ldr	r3, [pc, #116]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800590c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800590e:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005910:	491e      	ldr	r1, [pc, #120]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005912:	400a      	ands	r2, r1
 8005914:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005916:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2201      	movs	r2, #1
 8005920:	4013      	ands	r3, r2
 8005922:	d016      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fe fde4 	bl	80044f0 <HAL_GetTick>
 8005928:	0003      	movs	r3, r0
 800592a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592c:	e00c      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fe fddf 	bl	80044f0 <HAL_GetTick>
 8005932:	0002      	movs	r2, r0
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d904      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800593e:	2313      	movs	r3, #19
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	2203      	movs	r2, #3
 8005944:	701a      	strb	r2, [r3, #0]
            break;
 8005946:	e004      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	2202      	movs	r2, #2
 800594e:	4013      	ands	r3, r2
 8005950:	d0ed      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005952:	2313      	movs	r3, #19
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800595e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005960:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005962:	4013      	ands	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596a:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800596c:	430a      	orrs	r2, r1
 800596e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005970:	e016      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005972:	2312      	movs	r3, #18
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2213      	movs	r2, #19
 8005978:	18ba      	adds	r2, r7, r2
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e00f      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
 8005988:	fffffcff 	.word	0xfffffcff
 800598c:	fffeffff 	.word	0xfffeffff
 8005990:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	2312      	movs	r3, #18
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	2213      	movs	r2, #19
 800599a:	18ba      	adds	r2, r7, r2
 800599c:	7812      	ldrb	r2, [r2, #0]
 800599e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a0:	2311      	movs	r3, #17
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d105      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059aa:	4bb6      	ldr	r3, [pc, #728]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ae:	4bb5      	ldr	r3, [pc, #724]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b0:	49b5      	ldr	r1, [pc, #724]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	4013      	ands	r3, r2
 80059be:	d009      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c0:	4bb0      	ldr	r3, [pc, #704]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c4:	2203      	movs	r2, #3
 80059c6:	4393      	bics	r3, r2
 80059c8:	0019      	movs	r1, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4bad      	ldr	r3, [pc, #692]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059d0:	430a      	orrs	r2, r1
 80059d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2202      	movs	r2, #2
 80059da:	4013      	ands	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059de:	4ba9      	ldr	r3, [pc, #676]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	220c      	movs	r2, #12
 80059e4:	4393      	bics	r3, r2
 80059e6:	0019      	movs	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	4ba5      	ldr	r3, [pc, #660]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ee:	430a      	orrs	r2, r1
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2204      	movs	r2, #4
 80059f8:	4013      	ands	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059fc:	4ba1      	ldr	r3, [pc, #644]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a00:	2230      	movs	r2, #48	; 0x30
 8005a02:	4393      	bics	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	4b9e      	ldr	r3, [pc, #632]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2210      	movs	r2, #16
 8005a16:	4013      	ands	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a1a:	4b9a      	ldr	r3, [pc, #616]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1e:	4a9b      	ldr	r2, [pc, #620]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	0019      	movs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	4b96      	ldr	r3, [pc, #600]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	015b      	lsls	r3, r3, #5
 8005a36:	4013      	ands	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005a3a:	4b92      	ldr	r3, [pc, #584]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	4a94      	ldr	r2, [pc, #592]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	0019      	movs	r1, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	4b8e      	ldr	r3, [pc, #568]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4013      	ands	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a5a:	4b8a      	ldr	r3, [pc, #552]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	4a8d      	ldr	r2, [pc, #564]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	0019      	movs	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a68:	4b86      	ldr	r3, [pc, #536]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4013      	ands	r3, r2
 8005a78:	d009      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a7a:	4b82      	ldr	r3, [pc, #520]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7e:	4a86      	ldr	r2, [pc, #536]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	0019      	movs	r1, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b7e      	ldr	r3, [pc, #504]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2220      	movs	r2, #32
 8005a94:	4013      	ands	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a98:	4b7a      	ldr	r3, [pc, #488]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	4a7f      	ldr	r2, [pc, #508]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	0019      	movs	r1, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	4b77      	ldr	r3, [pc, #476]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab6:	4b73      	ldr	r3, [pc, #460]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	4a79      	ldr	r2, [pc, #484]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	0019      	movs	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	01db      	lsls	r3, r3, #7
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d015      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad6:	4b6b      	ldr	r3, [pc, #428]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	0899      	lsrs	r1, r3, #2
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae2:	4b68      	ldr	r3, [pc, #416]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aec:	2380      	movs	r3, #128	; 0x80
 8005aee:	05db      	lsls	r3, r3, #23
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005af4:	4b63      	ldr	r3, [pc, #396]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b62      	ldr	r3, [pc, #392]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	0249      	lsls	r1, r1, #9
 8005afe:	430a      	orrs	r2, r1
 8005b00:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	031b      	lsls	r3, r3, #12
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b0e:	4b5d      	ldr	r3, [pc, #372]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	4393      	bics	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1c:	4b59      	ldr	r3, [pc, #356]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	039b      	lsls	r3, r3, #14
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d016      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b2e:	4b55      	ldr	r3, [pc, #340]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b32:	4a5c      	ldr	r2, [pc, #368]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b3c:	4b51      	ldr	r3, [pc, #324]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	03db      	lsls	r3, r3, #15
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b4e:	4b4d      	ldr	r3, [pc, #308]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	4b4c      	ldr	r3, [pc, #304]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	0449      	lsls	r1, r1, #17
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	03db      	lsls	r3, r3, #15
 8005b64:	4013      	ands	r3, r2
 8005b66:	d016      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b68:	4b46      	ldr	r3, [pc, #280]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	4a4e      	ldr	r2, [pc, #312]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	0019      	movs	r1, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b76:	4b43      	ldr	r3, [pc, #268]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	045b      	lsls	r3, r3, #17
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d106      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b88:	4b3e      	ldr	r3, [pc, #248]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	4b3d      	ldr	r3, [pc, #244]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	0449      	lsls	r1, r1, #17
 8005b92:	430a      	orrs	r2, r1
 8005b94:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	2380      	movs	r3, #128	; 0x80
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d014      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ba2:	4b38      	ldr	r3, [pc, #224]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	4393      	bics	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	4b34      	ldr	r3, [pc, #208]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d106      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bbe:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	4b30      	ldr	r3, [pc, #192]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	0249      	lsls	r1, r1, #9
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	019b      	lsls	r3, r3, #6
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d014      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bdc:	220c      	movs	r2, #12
 8005bde:	4393      	bics	r3, r2
 8005be0:	0019      	movs	r1, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be8:	430a      	orrs	r2, r1
 8005bea:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d106      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bfa:	2180      	movs	r1, #128	; 0x80
 8005bfc:	0249      	lsls	r1, r1, #9
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	045b      	lsls	r3, r3, #17
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d016      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1c:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c2e:	4b15      	ldr	r3, [pc, #84]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	4b14      	ldr	r3, [pc, #80]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c34:	2180      	movs	r1, #128	; 0x80
 8005c36:	0449      	lsls	r1, r1, #17
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	049b      	lsls	r3, r3, #18
 8005c44:	4013      	ands	r3, r2
 8005c46:	d016      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	0019      	movs	r1, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d106      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	0449      	lsls	r1, r1, #17
 8005c72:	430a      	orrs	r2, r1
 8005c74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c76:	2312      	movs	r3, #18
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	781b      	ldrb	r3, [r3, #0]
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b006      	add	sp, #24
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40021000 	.word	0x40021000
 8005c88:	efffffff 	.word	0xefffffff
 8005c8c:	fffff3ff 	.word	0xfffff3ff
 8005c90:	fffffcff 	.word	0xfffffcff
 8005c94:	fff3ffff 	.word	0xfff3ffff
 8005c98:	ffcfffff 	.word	0xffcfffff
 8005c9c:	ffffcfff 	.word	0xffffcfff
 8005ca0:	ffff3fff 	.word	0xffff3fff
 8005ca4:	ffbfffff 	.word	0xffbfffff
 8005ca8:	feffffff 	.word	0xfeffffff

08005cac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	2201      	movs	r2, #1
 8005cba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d100      	bne.n	8005cc4 <HAL_RTC_Init+0x18>
 8005cc2:	e08c      	b.n	8005dde <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2229      	movs	r2, #41	; 0x29
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2228      	movs	r2, #40	; 0x28
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2288      	movs	r2, #136	; 0x88
 8005cdc:	0212      	lsls	r2, r2, #8
 8005cde:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fe f81a 	bl	8003d1c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2229      	movs	r2, #41	; 0x29
 8005cec:	2102      	movs	r1, #2
 8005cee:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b10      	cmp	r3, #16
 8005cfc:	d062      	beq.n	8005dc4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22ca      	movs	r2, #202	; 0xca
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2253      	movs	r2, #83	; 0x53
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005d0e:	250f      	movs	r5, #15
 8005d10:	197c      	adds	r4, r7, r5
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 fbf3 	bl	8006500 <RTC_EnterInitMode>
 8005d1a:	0003      	movs	r3, r0
 8005d1c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005d1e:	0028      	movs	r0, r5
 8005d20:	183b      	adds	r3, r7, r0
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d12c      	bne.n	8005d82 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	492e      	ldr	r1, [pc, #184]	; (8005dec <HAL_RTC_Init+0x140>)
 8005d34:	400a      	ands	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6999      	ldr	r1, [r3, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6912      	ldr	r2, [r2, #16]
 8005d5e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6919      	ldr	r1, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	041a      	lsls	r2, r3, #16
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005d74:	183c      	adds	r4, r7, r0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 fc03 	bl	8006584 <RTC_ExitInitMode>
 8005d7e:	0003      	movs	r3, r0
 8005d80:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005d82:	230f      	movs	r3, #15
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d116      	bne.n	8005dba <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	00d2      	lsls	r2, r2, #3
 8005d98:	08d2      	lsrs	r2, r2, #3
 8005d9a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc2:	e003      	b.n	8005dcc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005dc4:	230f      	movs	r3, #15
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005dcc:	230f      	movs	r3, #15
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2229      	movs	r2, #41	; 0x29
 8005dda:	2101      	movs	r1, #1
 8005ddc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005dde:	230f      	movs	r3, #15
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	781b      	ldrb	r3, [r3, #0]
}
 8005de4:	0018      	movs	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	b004      	add	sp, #16
 8005dea:	bdb0      	pop	{r4, r5, r7, pc}
 8005dec:	fb8fffbf 	.word	0xfb8fffbf

08005df0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005df0:	b5b0      	push	{r4, r5, r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2228      	movs	r2, #40	; 0x28
 8005e00:	5c9b      	ldrb	r3, [r3, r2]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_RTC_SetTime+0x1a>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e092      	b.n	8005f30 <HAL_RTC_SetTime+0x140>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2228      	movs	r2, #40	; 0x28
 8005e0e:	2101      	movs	r1, #1
 8005e10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2229      	movs	r2, #41	; 0x29
 8005e16:	2102      	movs	r1, #2
 8005e18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	22ca      	movs	r2, #202	; 0xca
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2253      	movs	r2, #83	; 0x53
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e2a:	2513      	movs	r5, #19
 8005e2c:	197c      	adds	r4, r7, r5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fb65 	bl	8006500 <RTC_EnterInitMode>
 8005e36:	0003      	movs	r3, r0
 8005e38:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005e3a:	197b      	adds	r3, r7, r5
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d162      	bne.n	8005f08 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d125      	bne.n	8005e94 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	4013      	ands	r3, r2
 8005e52:	d102      	bne.n	8005e5a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2200      	movs	r2, #0
 8005e58:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 fbd4 	bl	800660c <RTC_ByteToBcd2>
 8005e64:	0003      	movs	r3, r0
 8005e66:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f000 fbcd 	bl	800660c <RTC_ByteToBcd2>
 8005e72:	0003      	movs	r3, r0
 8005e74:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e76:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	789b      	ldrb	r3, [r3, #2]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 fbc5 	bl	800660c <RTC_ByteToBcd2>
 8005e82:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e84:	0022      	movs	r2, r4
 8005e86:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	78db      	ldrb	r3, [r3, #3]
 8005e8c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e017      	b.n	8005ec4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2240      	movs	r2, #64	; 0x40
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d102      	bne.n	8005ea6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eb2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005eb8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	491b      	ldr	r1, [pc, #108]	; (8005f38 <HAL_RTC_SetTime+0x148>)
 8005ecc:	400a      	ands	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4918      	ldr	r1, [pc, #96]	; (8005f3c <HAL_RTC_SetTime+0x14c>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ef8:	2313      	movs	r3, #19
 8005efa:	18fc      	adds	r4, r7, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 fb40 	bl	8006584 <RTC_ExitInitMode>
 8005f04:	0003      	movs	r3, r0
 8005f06:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005f10:	2313      	movs	r3, #19
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2229      	movs	r2, #41	; 0x29
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2228      	movs	r2, #40	; 0x28
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

  return status;
 8005f2a:	2313      	movs	r3, #19
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	781b      	ldrb	r3, [r3, #0]
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b006      	add	sp, #24
 8005f36:	bdb0      	pop	{r4, r5, r7, pc}
 8005f38:	007f7f7f 	.word	0x007f7f7f
 8005f3c:	fffbffff 	.word	0xfffbffff

08005f40 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	045b      	lsls	r3, r3, #17
 8005f5e:	0c5a      	lsrs	r2, r3, #17
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a22      	ldr	r2, [pc, #136]	; (8005ff4 <HAL_RTC_GetTime+0xb4>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	223f      	movs	r2, #63	; 0x3f
 8005f78:	4013      	ands	r3, r2
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	227f      	movs	r2, #127	; 0x7f
 8005f88:	4013      	ands	r3, r2
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	227f      	movs	r2, #127	; 0x7f
 8005f96:	4013      	ands	r3, r2
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	0d9b      	lsrs	r3, r3, #22
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11a      	bne.n	8005fea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 fb4f 	bl	800665c <RTC_Bcd2ToByte>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 fb46 	bl	800665c <RTC_Bcd2ToByte>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	001a      	movs	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f000 fb3d 	bl	800665c <RTC_Bcd2ToByte>
 8005fe2:	0003      	movs	r3, r0
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b006      	add	sp, #24
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	007f7f7f 	.word	0x007f7f7f

08005ff8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ff8:	b5b0      	push	{r4, r5, r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2228      	movs	r2, #40	; 0x28
 8006008:	5c9b      	ldrb	r3, [r3, r2]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_RTC_SetDate+0x1a>
 800600e:	2302      	movs	r3, #2
 8006010:	e07e      	b.n	8006110 <HAL_RTC_SetDate+0x118>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2228      	movs	r2, #40	; 0x28
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2229      	movs	r2, #41	; 0x29
 800601e:	2102      	movs	r1, #2
 8006020:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10e      	bne.n	8006046 <HAL_RTC_SetDate+0x4e>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	001a      	movs	r2, r3
 800602e:	2310      	movs	r3, #16
 8006030:	4013      	ands	r3, r2
 8006032:	d008      	beq.n	8006046 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2210      	movs	r2, #16
 800603a:	4393      	bics	r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	330a      	adds	r3, #10
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11c      	bne.n	8006086 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	78db      	ldrb	r3, [r3, #3]
 8006050:	0018      	movs	r0, r3
 8006052:	f000 fadb 	bl	800660c <RTC_ByteToBcd2>
 8006056:	0003      	movs	r3, r0
 8006058:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	0018      	movs	r0, r3
 8006060:	f000 fad4 	bl	800660c <RTC_ByteToBcd2>
 8006064:	0003      	movs	r3, r0
 8006066:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006068:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	789b      	ldrb	r3, [r3, #2]
 800606e:	0018      	movs	r0, r3
 8006070:	f000 facc 	bl	800660c <RTC_ByteToBcd2>
 8006074:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006076:	0022      	movs	r2, r4
 8006078:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e00e      	b.n	80060a4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	78db      	ldrb	r3, [r3, #3]
 800608a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006092:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006098:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	22ca      	movs	r2, #202	; 0xca
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2253      	movs	r2, #83	; 0x53
 80060b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060b4:	2513      	movs	r5, #19
 80060b6:	197c      	adds	r4, r7, r5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0018      	movs	r0, r3
 80060bc:	f000 fa20 	bl	8006500 <RTC_EnterInitMode>
 80060c0:	0003      	movs	r3, r0
 80060c2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80060c4:	0028      	movs	r0, r5
 80060c6:	183b      	adds	r3, r7, r0
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4910      	ldr	r1, [pc, #64]	; (8006118 <HAL_RTC_SetDate+0x120>)
 80060d6:	400a      	ands	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060da:	183c      	adds	r4, r7, r0
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 fa50 	bl	8006584 <RTC_ExitInitMode>
 80060e4:	0003      	movs	r3, r0
 80060e6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060f0:	2313      	movs	r3, #19
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2229      	movs	r2, #41	; 0x29
 80060fe:	2101      	movs	r1, #1
 8006100:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2228      	movs	r2, #40	; 0x28
 8006106:	2100      	movs	r1, #0
 8006108:	5499      	strb	r1, [r3, r2]

  return status;
 800610a:	2313      	movs	r3, #19
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	781b      	ldrb	r3, [r3, #0]
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b006      	add	sp, #24
 8006116:	bdb0      	pop	{r4, r5, r7, pc}
 8006118:	00ffff3f 	.word	0x00ffff3f

0800611c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4a21      	ldr	r2, [pc, #132]	; (80061b4 <HAL_RTC_GetDate+0x98>)
 8006130:	4013      	ands	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	0c1b      	lsrs	r3, r3, #16
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	b2db      	uxtb	r3, r3
 8006144:	221f      	movs	r2, #31
 8006146:	4013      	ands	r3, r2
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	223f      	movs	r2, #63	; 0x3f
 8006154:	4013      	ands	r3, r2
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	0b5b      	lsrs	r3, r3, #13
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2207      	movs	r2, #7
 8006164:	4013      	ands	r3, r2
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11a      	bne.n	80061a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	78db      	ldrb	r3, [r3, #3]
 8006176:	0018      	movs	r0, r3
 8006178:	f000 fa70 	bl	800665c <RTC_Bcd2ToByte>
 800617c:	0003      	movs	r3, r0
 800617e:	001a      	movs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	0018      	movs	r0, r3
 800618a:	f000 fa67 	bl	800665c <RTC_Bcd2ToByte>
 800618e:	0003      	movs	r3, r0
 8006190:	001a      	movs	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	789b      	ldrb	r3, [r3, #2]
 800619a:	0018      	movs	r0, r3
 800619c:	f000 fa5e 	bl	800665c <RTC_Bcd2ToByte>
 80061a0:	0003      	movs	r3, r0
 80061a2:	001a      	movs	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b006      	add	sp, #24
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	00ffff3f 	.word	0x00ffff3f

080061b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2228      	movs	r2, #40	; 0x28
 80061c8:	5c9b      	ldrb	r3, [r3, r2]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_RTC_SetAlarm_IT+0x1a>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e127      	b.n	8006422 <HAL_RTC_SetAlarm_IT+0x26a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2228      	movs	r2, #40	; 0x28
 80061d6:	2101      	movs	r1, #1
 80061d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2229      	movs	r2, #41	; 0x29
 80061de:	2102      	movs	r1, #2
 80061e0:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d136      	bne.n	8006256 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2240      	movs	r2, #64	; 0x40
 80061f0:	4013      	ands	r3, r2
 80061f2:	d102      	bne.n	80061fa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 fa04 	bl	800660c <RTC_ByteToBcd2>
 8006204:	0003      	movs	r3, r0
 8006206:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f9fd 	bl	800660c <RTC_ByteToBcd2>
 8006212:	0003      	movs	r3, r0
 8006214:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006216:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	789b      	ldrb	r3, [r3, #2]
 800621c:	0018      	movs	r0, r3
 800621e:	f000 f9f5 	bl	800660c <RTC_ByteToBcd2>
 8006222:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006224:	0022      	movs	r2, r4
 8006226:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	78db      	ldrb	r3, [r3, #3]
 800622c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800622e:	431a      	orrs	r2, r3
 8006230:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2220      	movs	r2, #32
 8006236:	5c9b      	ldrb	r3, [r3, r2]
 8006238:	0018      	movs	r0, r3
 800623a:	f000 f9e7 	bl	800660c <RTC_ByteToBcd2>
 800623e:	0003      	movs	r3, r0
 8006240:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006242:	0022      	movs	r2, r4
 8006244:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800624a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006250:	4313      	orrs	r3, r2
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e022      	b.n	800629c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	4013      	ands	r3, r2
 8006260:	d102      	bne.n	8006268 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2200      	movs	r2, #0
 8006266:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006274:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800627a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006282:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2120      	movs	r1, #32
 8006288:	5c5b      	ldrb	r3, [r3, r1]
 800628a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800628c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006292:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006298:	4313      	orrs	r3, r2
 800629a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	22ca      	movs	r2, #202	; 0xca
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2253      	movs	r2, #83	; 0x53
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062bc:	2380      	movs	r3, #128	; 0x80
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d14c      	bne.n	800635e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4957      	ldr	r1, [pc, #348]	; (800642c <HAL_RTC_SetAlarm_IT+0x274>)
 80062d0:	400a      	ands	r2, r1
 80062d2:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2101      	movs	r1, #1
 80062e0:	430a      	orrs	r2, r1
 80062e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80062e4:	f7fe f904 	bl	80044f0 <HAL_GetTick>
 80062e8:	0003      	movs	r3, r0
 80062ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80062ec:	e016      	b.n	800631c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062ee:	f7fe f8ff 	bl	80044f0 <HAL_GetTick>
 80062f2:	0002      	movs	r2, r0
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad2      	subs	r2, r2, r3
 80062f8:	23fa      	movs	r3, #250	; 0xfa
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d90d      	bls.n	800631c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2229      	movs	r2, #41	; 0x29
 800630c:	2103      	movs	r1, #3
 800630e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2228      	movs	r2, #40	; 0x28
 8006314:	2100      	movs	r1, #0
 8006316:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e082      	b.n	8006422 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	4013      	ands	r3, r2
 8006326:	d0e2      	beq.n	80062ee <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	0049      	lsls	r1, r1, #1
 8006346:	430a      	orrs	r2, r1
 8006348:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2180      	movs	r1, #128	; 0x80
 8006356:	0149      	lsls	r1, r1, #5
 8006358:	430a      	orrs	r2, r1
 800635a:	619a      	str	r2, [r3, #24]
 800635c:	e04b      	b.n	80063f6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4931      	ldr	r1, [pc, #196]	; (8006430 <HAL_RTC_SetAlarm_IT+0x278>)
 800636a:	400a      	ands	r2, r1
 800636c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2102      	movs	r1, #2
 800637a:	430a      	orrs	r2, r1
 800637c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800637e:	f7fe f8b7 	bl	80044f0 <HAL_GetTick>
 8006382:	0003      	movs	r3, r0
 8006384:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006386:	e016      	b.n	80063b6 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006388:	f7fe f8b2 	bl	80044f0 <HAL_GetTick>
 800638c:	0002      	movs	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	23fa      	movs	r3, #250	; 0xfa
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	429a      	cmp	r2, r3
 8006398:	d90d      	bls.n	80063b6 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2229      	movs	r2, #41	; 0x29
 80063a6:	2103      	movs	r1, #3
 80063a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2228      	movs	r2, #40	; 0x28
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e035      	b.n	8006422 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2202      	movs	r2, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	d0e2      	beq.n	8006388 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	0089      	lsls	r1, r1, #2
 80063e0:	430a      	orrs	r2, r1
 80063e2:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2180      	movs	r1, #128	; 0x80
 80063f0:	0189      	lsls	r1, r1, #6
 80063f2:	430a      	orrs	r2, r1
 80063f4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063f6:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	58d3      	ldr	r3, [r2, r3]
 80063fc:	490d      	ldr	r1, [pc, #52]	; (8006434 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	0312      	lsls	r2, r2, #12
 8006402:	4313      	orrs	r3, r2
 8006404:	2280      	movs	r2, #128	; 0x80
 8006406:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	22ff      	movs	r2, #255	; 0xff
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2229      	movs	r2, #41	; 0x29
 8006414:	2101      	movs	r1, #1
 8006416:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2228      	movs	r2, #40	; 0x28
 800641c:	2100      	movs	r1, #0
 800641e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	0018      	movs	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	b009      	add	sp, #36	; 0x24
 8006428:	bd90      	pop	{r4, r7, pc}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	fffffeff 	.word	0xfffffeff
 8006430:	fffffdff 	.word	0xfffffdff
 8006434:	40021800 	.word	0x40021800

08006438 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	2380      	movs	r3, #128	; 0x80
 8006448:	015b      	lsls	r3, r3, #5
 800644a:	4013      	ands	r3, r2
 800644c:	d011      	beq.n	8006472 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006454:	2201      	movs	r2, #1
 8006456:	4013      	ands	r3, r2
 8006458:	d00b      	beq.n	8006472 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2101      	movs	r1, #1
 8006466:	430a      	orrs	r2, r1
 8006468:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0018      	movs	r0, r3
 800646e:	f7fd fc0f 	bl	8003c90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	019b      	lsls	r3, r3, #6
 800647c:	4013      	ands	r3, r2
 800647e:	d011      	beq.n	80064a4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006486:	2202      	movs	r2, #2
 8006488:	4013      	ands	r3, r2
 800648a:	d00b      	beq.n	80064a4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2102      	movs	r1, #2
 8006498:	430a      	orrs	r2, r1
 800649a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f961 	bl	8006766 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2229      	movs	r2, #41	; 0x29
 80064a8:	2101      	movs	r1, #1
 80064aa:	5499      	strb	r1, [r3, r2]
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0e      	ldr	r2, [pc, #56]	; (80064fc <HAL_RTC_WaitForSynchro+0x48>)
 80064c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80064c4:	f7fe f814 	bl	80044f0 <HAL_GetTick>
 80064c8:	0003      	movs	r3, r0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80064cc:	e00a      	b.n	80064e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064ce:	f7fe f80f 	bl	80044f0 <HAL_GetTick>
 80064d2:	0002      	movs	r2, r0
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	23fa      	movs	r3, #250	; 0xfa
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	429a      	cmp	r2, r3
 80064de:	d901      	bls.n	80064e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e006      	b.n	80064f2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	4013      	ands	r3, r2
 80064ee:	d0ee      	beq.n	80064ce <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b004      	add	sp, #16
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	0001005f 	.word	0x0001005f

08006500 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006508:	230f      	movs	r3, #15
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2240      	movs	r2, #64	; 0x40
 8006518:	4013      	ands	r3, r2
 800651a:	d12c      	bne.n	8006576 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2180      	movs	r1, #128	; 0x80
 8006528:	430a      	orrs	r2, r1
 800652a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800652c:	f7fd ffe0 	bl	80044f0 <HAL_GetTick>
 8006530:	0003      	movs	r3, r0
 8006532:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006534:	e014      	b.n	8006560 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006536:	f7fd ffdb 	bl	80044f0 <HAL_GetTick>
 800653a:	0002      	movs	r2, r0
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	200f      	movs	r0, #15
 8006542:	183b      	adds	r3, r7, r0
 8006544:	1839      	adds	r1, r7, r0
 8006546:	7809      	ldrb	r1, [r1, #0]
 8006548:	7019      	strb	r1, [r3, #0]
 800654a:	23fa      	movs	r3, #250	; 0xfa
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	429a      	cmp	r2, r3
 8006550:	d906      	bls.n	8006560 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006552:	183b      	adds	r3, r7, r0
 8006554:	2203      	movs	r2, #3
 8006556:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2229      	movs	r2, #41	; 0x29
 800655c:	2103      	movs	r1, #3
 800655e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2240      	movs	r2, #64	; 0x40
 8006568:	4013      	ands	r3, r2
 800656a:	d104      	bne.n	8006576 <RTC_EnterInitMode+0x76>
 800656c:	230f      	movs	r3, #15
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d1df      	bne.n	8006536 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006576:	230f      	movs	r3, #15
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	781b      	ldrb	r3, [r3, #0]
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}

08006584 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800658c:	240f      	movs	r4, #15
 800658e:	193b      	adds	r3, r7, r4
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006594:	4b1c      	ldr	r3, [pc, #112]	; (8006608 <RTC_ExitInitMode+0x84>)
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <RTC_ExitInitMode+0x84>)
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	438a      	bics	r2, r1
 800659e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <RTC_ExitInitMode+0x84>)
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2220      	movs	r2, #32
 80065a6:	4013      	ands	r3, r2
 80065a8:	d10d      	bne.n	80065c6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7ff ff81 	bl	80064b4 <HAL_RTC_WaitForSynchro>
 80065b2:	1e03      	subs	r3, r0, #0
 80065b4:	d021      	beq.n	80065fa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2229      	movs	r2, #41	; 0x29
 80065ba:	2103      	movs	r1, #3
 80065bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80065be:	193b      	adds	r3, r7, r4
 80065c0:	2203      	movs	r2, #3
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	e019      	b.n	80065fa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <RTC_ExitInitMode+0x84>)
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <RTC_ExitInitMode+0x84>)
 80065cc:	2120      	movs	r1, #32
 80065ce:	438a      	bics	r2, r1
 80065d0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff ff6d 	bl	80064b4 <HAL_RTC_WaitForSynchro>
 80065da:	1e03      	subs	r3, r0, #0
 80065dc:	d007      	beq.n	80065ee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2229      	movs	r2, #41	; 0x29
 80065e2:	2103      	movs	r1, #3
 80065e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80065e6:	230f      	movs	r3, #15
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	2203      	movs	r2, #3
 80065ec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <RTC_ExitInitMode+0x84>)
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <RTC_ExitInitMode+0x84>)
 80065f4:	2120      	movs	r1, #32
 80065f6:	430a      	orrs	r2, r1
 80065f8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80065fa:	230f      	movs	r3, #15
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	781b      	ldrb	r3, [r3, #0]
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b005      	add	sp, #20
 8006606:	bd90      	pop	{r4, r7, pc}
 8006608:	40002800 	.word	0x40002800

0800660c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	0002      	movs	r2, r0
 8006614:	1dfb      	adds	r3, r7, #7
 8006616:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800661c:	230b      	movs	r3, #11
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	1dfa      	adds	r2, r7, #7
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006626:	e008      	b.n	800663a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800662e:	220b      	movs	r2, #11
 8006630:	18bb      	adds	r3, r7, r2
 8006632:	18ba      	adds	r2, r7, r2
 8006634:	7812      	ldrb	r2, [r2, #0]
 8006636:	3a0a      	subs	r2, #10
 8006638:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800663a:	210b      	movs	r1, #11
 800663c:	187b      	adds	r3, r7, r1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b09      	cmp	r3, #9
 8006642:	d8f1      	bhi.n	8006628 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	b2da      	uxtb	r2, r3
 800664c:	187b      	adds	r3, r7, r1
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	4313      	orrs	r3, r2
 8006652:	b2db      	uxtb	r3, r3
}
 8006654:	0018      	movs	r0, r3
 8006656:	46bd      	mov	sp, r7
 8006658:	b004      	add	sp, #16
 800665a:	bd80      	pop	{r7, pc}

0800665c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	0002      	movs	r2, r0
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006668:	1dfb      	adds	r3, r7, #7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	b2db      	uxtb	r3, r3
 8006670:	001a      	movs	r2, r3
 8006672:	0013      	movs	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	189b      	adds	r3, r3, r2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	1dfb      	adds	r3, r7, #7
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	210f      	movs	r1, #15
 8006686:	400b      	ands	r3, r1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	18d3      	adds	r3, r2, r3
 800668c:	b2db      	uxtb	r3, r3
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b004      	add	sp, #16
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2228      	movs	r2, #40	; 0x28
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_RTCEx_EnableBypassShadow+0x16>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e024      	b.n	80066f6 <HAL_RTCEx_EnableBypassShadow+0x60>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2228      	movs	r2, #40	; 0x28
 80066b0:	2101      	movs	r1, #1
 80066b2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2229      	movs	r2, #41	; 0x29
 80066b8:	2102      	movs	r1, #2
 80066ba:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	22ca      	movs	r2, #202	; 0xca
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2253      	movs	r2, #83	; 0x53
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2120      	movs	r1, #32
 80066d8:	430a      	orrs	r2, r1
 80066da:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2229      	movs	r2, #41	; 0x29
 80066e8:	2101      	movs	r1, #1
 80066ea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2228      	movs	r2, #40	; 0x28
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b002      	add	sp, #8
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b082      	sub	sp, #8
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2228      	movs	r2, #40	; 0x28
 800670a:	5c9b      	ldrb	r3, [r3, r2]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_RTCEx_DisableBypassShadow+0x16>
 8006710:	2302      	movs	r3, #2
 8006712:	e024      	b.n	800675e <HAL_RTCEx_DisableBypassShadow+0x60>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2228      	movs	r2, #40	; 0x28
 8006718:	2101      	movs	r1, #1
 800671a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2229      	movs	r2, #41	; 0x29
 8006720:	2102      	movs	r1, #2
 8006722:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	22ca      	movs	r2, #202	; 0xca
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2253      	movs	r2, #83	; 0x53
 8006732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	21df      	movs	r1, #223	; 0xdf
 8006740:	400a      	ands	r2, r1
 8006742:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	22ff      	movs	r2, #255	; 0xff
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2229      	movs	r2, #41	; 0x29
 8006750:	2101      	movs	r1, #1
 8006752:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2228      	movs	r2, #40	; 0x28
 8006758:	2100      	movs	r1, #0
 800675a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b002      	add	sp, #8
 8006764:	bd80      	pop	{r7, pc}

08006766 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800676e:	46c0      	nop			; (mov r8, r8)
 8006770:	46bd      	mov	sp, r7
 8006772:	b002      	add	sp, #8
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e0a8      	b.n	80068dc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	2382      	movs	r3, #130	; 0x82
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	d009      	beq.n	80067b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	61da      	str	r2, [r3, #28]
 80067a4:	e005      	b.n	80067b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	225d      	movs	r2, #93	; 0x5d
 80067bc:	5c9b      	ldrb	r3, [r3, r2]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d107      	bne.n	80067d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	225c      	movs	r2, #92	; 0x5c
 80067c8:	2100      	movs	r1, #0
 80067ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f7fd faea 	bl	8003da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	225d      	movs	r2, #93	; 0x5d
 80067d8:	2102      	movs	r1, #2
 80067da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2140      	movs	r1, #64	; 0x40
 80067e8:	438a      	bics	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	23e0      	movs	r3, #224	; 0xe0
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d902      	bls.n	80067fe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e002      	b.n	8006804 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	015b      	lsls	r3, r3, #5
 8006802:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	23f0      	movs	r3, #240	; 0xf0
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	429a      	cmp	r2, r3
 800680e:	d008      	beq.n	8006822 <HAL_SPI_Init+0xaa>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	23e0      	movs	r3, #224	; 0xe0
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	429a      	cmp	r2, r3
 800681a:	d002      	beq.n	8006822 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	2382      	movs	r3, #130	; 0x82
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	401a      	ands	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6899      	ldr	r1, [r3, #8]
 8006830:	2384      	movs	r3, #132	; 0x84
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	400b      	ands	r3, r1
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	2102      	movs	r1, #2
 800683e:	400b      	ands	r3, r1
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2101      	movs	r1, #1
 8006848:	400b      	ands	r3, r1
 800684a:	431a      	orrs	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6999      	ldr	r1, [r3, #24]
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	400b      	ands	r3, r1
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	2138      	movs	r1, #56	; 0x38
 800685e:	400b      	ands	r3, r1
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	400b      	ands	r3, r1
 800686a:	431a      	orrs	r2, r3
 800686c:	0011      	movs	r1, r2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	401a      	ands	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	2204      	movs	r2, #4
 8006888:	401a      	ands	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2110      	movs	r1, #16
 8006890:	400b      	ands	r3, r1
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006898:	2108      	movs	r1, #8
 800689a:	400b      	ands	r3, r1
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68d9      	ldr	r1, [r3, #12]
 80068a2:	23f0      	movs	r3, #240	; 0xf0
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	400b      	ands	r3, r1
 80068a8:	431a      	orrs	r2, r3
 80068aa:	0011      	movs	r1, r2
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	015b      	lsls	r3, r3, #5
 80068b2:	401a      	ands	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69da      	ldr	r2, [r3, #28]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4907      	ldr	r1, [pc, #28]	; (80068e4 <HAL_SPI_Init+0x16c>)
 80068c8:	400a      	ands	r2, r1
 80068ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	225d      	movs	r2, #93	; 0x5d
 80068d6:	2101      	movs	r1, #1
 80068d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	0018      	movs	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	b004      	add	sp, #16
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	fffff7ff 	.word	0xfffff7ff

080068e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	1dbb      	adds	r3, r7, #6
 80068f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068f8:	231f      	movs	r3, #31
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	225c      	movs	r2, #92	; 0x5c
 8006904:	5c9b      	ldrb	r3, [r3, r2]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_SPI_Transmit+0x26>
 800690a:	2302      	movs	r3, #2
 800690c:	e147      	b.n	8006b9e <HAL_SPI_Transmit+0x2b6>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	225c      	movs	r2, #92	; 0x5c
 8006912:	2101      	movs	r1, #1
 8006914:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006916:	f7fd fdeb 	bl	80044f0 <HAL_GetTick>
 800691a:	0003      	movs	r3, r0
 800691c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800691e:	2316      	movs	r3, #22
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	1dba      	adds	r2, r7, #6
 8006924:	8812      	ldrh	r2, [r2, #0]
 8006926:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	225d      	movs	r2, #93	; 0x5d
 800692c:	5c9b      	ldrb	r3, [r3, r2]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d004      	beq.n	800693e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006934:	231f      	movs	r3, #31
 8006936:	18fb      	adds	r3, r7, r3
 8006938:	2202      	movs	r2, #2
 800693a:	701a      	strb	r2, [r3, #0]
    goto error;
 800693c:	e128      	b.n	8006b90 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_SPI_Transmit+0x64>
 8006944:	1dbb      	adds	r3, r7, #6
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800694c:	231f      	movs	r3, #31
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
    goto error;
 8006954:	e11c      	b.n	8006b90 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	225d      	movs	r2, #93	; 0x5d
 800695a:	2103      	movs	r1, #3
 800695c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1dba      	adds	r2, r7, #6
 800696e:	8812      	ldrh	r2, [r2, #0]
 8006970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1dba      	adds	r2, r7, #6
 8006976:	8812      	ldrh	r2, [r2, #0]
 8006978:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2244      	movs	r2, #68	; 0x44
 8006984:	2100      	movs	r1, #0
 8006986:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2246      	movs	r2, #70	; 0x46
 800698c:	2100      	movs	r1, #0
 800698e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d110      	bne.n	80069ca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2140      	movs	r1, #64	; 0x40
 80069b4:	438a      	bics	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2180      	movs	r1, #128	; 0x80
 80069c4:	01c9      	lsls	r1, r1, #7
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2240      	movs	r2, #64	; 0x40
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d007      	beq.n	80069e8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2140      	movs	r1, #64	; 0x40
 80069e4:	430a      	orrs	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	23e0      	movs	r3, #224	; 0xe0
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d952      	bls.n	8006a9a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_SPI_Transmit+0x11e>
 80069fc:	2316      	movs	r3, #22
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d143      	bne.n	8006a8e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	881a      	ldrh	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	1c9a      	adds	r2, r3, #2
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a2a:	e030      	b.n	8006a8e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2202      	movs	r2, #2
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d112      	bne.n	8006a60 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	881a      	ldrh	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5e:	e016      	b.n	8006a8e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fd fd46 	bl	80044f0 <HAL_GetTick>
 8006a64:	0002      	movs	r2, r0
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d802      	bhi.n	8006a76 <HAL_SPI_Transmit+0x18e>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_Transmit+0x194>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d108      	bne.n	8006a8e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006a7c:	231f      	movs	r3, #31
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2203      	movs	r2, #3
 8006a82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	225d      	movs	r2, #93	; 0x5d
 8006a88:	2101      	movs	r1, #1
 8006a8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8006a8c:	e080      	b.n	8006b90 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1c9      	bne.n	8006a2c <HAL_SPI_Transmit+0x144>
 8006a98:	e053      	b.n	8006b42 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <HAL_SPI_Transmit+0x1c4>
 8006aa2:	2316      	movs	r3, #22
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d145      	bne.n	8006b38 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006ad2:	e031      	b.n	8006b38 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2202      	movs	r2, #2
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d113      	bne.n	8006b0a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	330c      	adds	r3, #12
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b08:	e016      	b.n	8006b38 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b0a:	f7fd fcf1 	bl	80044f0 <HAL_GetTick>
 8006b0e:	0002      	movs	r2, r0
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d802      	bhi.n	8006b20 <HAL_SPI_Transmit+0x238>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	d102      	bne.n	8006b26 <HAL_SPI_Transmit+0x23e>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006b26:	231f      	movs	r3, #31
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	2203      	movs	r2, #3
 8006b2c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	225d      	movs	r2, #93	; 0x5d
 8006b32:	2101      	movs	r1, #1
 8006b34:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b36:	e02b      	b.n	8006b90 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1c8      	bne.n	8006ad4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 fcef 	bl	800752c <SPI_EndRxTxTransaction>
 8006b4e:	1e03      	subs	r3, r0, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d004      	beq.n	8006b88 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006b7e:	231f      	movs	r3, #31
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	e003      	b.n	8006b90 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	225d      	movs	r2, #93	; 0x5d
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	225c      	movs	r2, #92	; 0x5c
 8006b94:	2100      	movs	r1, #0
 8006b96:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b98:	231f      	movs	r3, #31
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	781b      	ldrb	r3, [r3, #0]
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b008      	add	sp, #32
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b089      	sub	sp, #36	; 0x24
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	1dbb      	adds	r3, r7, #6
 8006bb6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bb8:	2117      	movs	r1, #23
 8006bba:	187b      	adds	r3, r7, r1
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	225d      	movs	r2, #93	; 0x5d
 8006bc4:	5c9b      	ldrb	r3, [r3, r2]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d003      	beq.n	8006bd4 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	2202      	movs	r2, #2
 8006bd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bd2:	e12b      	b.n	8006e2c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	2382      	movs	r3, #130	; 0x82
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d113      	bne.n	8006c08 <HAL_SPI_Receive+0x60>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10f      	bne.n	8006c08 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	225d      	movs	r2, #93	; 0x5d
 8006bec:	2104      	movs	r1, #4
 8006bee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bf0:	1dbb      	adds	r3, r7, #6
 8006bf2:	881c      	ldrh	r4, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	0023      	movs	r3, r4
 8006c00:	f000 f924 	bl	8006e4c <HAL_SPI_TransmitReceive>
 8006c04:	0003      	movs	r3, r0
 8006c06:	e118      	b.n	8006e3a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	225c      	movs	r2, #92	; 0x5c
 8006c0c:	5c9b      	ldrb	r3, [r3, r2]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_SPI_Receive+0x6e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e111      	b.n	8006e3a <HAL_SPI_Receive+0x292>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	225c      	movs	r2, #92	; 0x5c
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c1e:	f7fd fc67 	bl	80044f0 <HAL_GetTick>
 8006c22:	0003      	movs	r3, r0
 8006c24:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_SPI_Receive+0x8c>
 8006c2c:	1dbb      	adds	r3, r7, #6
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d104      	bne.n	8006c3e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006c34:	2317      	movs	r3, #23
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	2201      	movs	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c3c:	e0f6      	b.n	8006e2c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	225d      	movs	r2, #93	; 0x5d
 8006c42:	2104      	movs	r1, #4
 8006c44:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	1dba      	adds	r2, r7, #6
 8006c56:	2144      	movs	r1, #68	; 0x44
 8006c58:	8812      	ldrh	r2, [r2, #0]
 8006c5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	1dba      	adds	r2, r7, #6
 8006c60:	2146      	movs	r1, #70	; 0x46
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	23e0      	movs	r3, #224	; 0xe0
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	496a      	ldr	r1, [pc, #424]	; (8006e44 <HAL_SPI_Receive+0x29c>)
 8006c9c:	400a      	ands	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	e008      	b.n	8006cb4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2180      	movs	r1, #128	; 0x80
 8006cae:	0149      	lsls	r1, r1, #5
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d10f      	bne.n	8006ce0 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2140      	movs	r1, #64	; 0x40
 8006ccc:	438a      	bics	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	495b      	ldr	r1, [pc, #364]	; (8006e48 <HAL_SPI_Receive+0x2a0>)
 8006cdc:	400a      	ands	r2, r1
 8006cde:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2240      	movs	r2, #64	; 0x40
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d007      	beq.n	8006cfe <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2140      	movs	r1, #64	; 0x40
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	23e0      	movs	r3, #224	; 0xe0
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d900      	bls.n	8006d0c <HAL_SPI_Receive+0x164>
 8006d0a:	e071      	b.n	8006df0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d0c:	e035      	b.n	8006d7a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2201      	movs	r2, #1
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d117      	bne.n	8006d4c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	001a      	movs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2246      	movs	r2, #70	; 0x46
 8006d3c:	5a9b      	ldrh	r3, [r3, r2]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b299      	uxth	r1, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2246      	movs	r2, #70	; 0x46
 8006d48:	5299      	strh	r1, [r3, r2]
 8006d4a:	e016      	b.n	8006d7a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4c:	f7fd fbd0 	bl	80044f0 <HAL_GetTick>
 8006d50:	0002      	movs	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d802      	bhi.n	8006d62 <HAL_SPI_Receive+0x1ba>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Receive+0x1c0>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d108      	bne.n	8006d7a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2317      	movs	r3, #23
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	225d      	movs	r2, #93	; 0x5d
 8006d74:	2101      	movs	r1, #1
 8006d76:	5499      	strb	r1, [r3, r2]
          goto error;
 8006d78:	e058      	b.n	8006e2c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2246      	movs	r2, #70	; 0x46
 8006d7e:	5a9b      	ldrh	r3, [r3, r2]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1c3      	bne.n	8006d0e <HAL_SPI_Receive+0x166>
 8006d86:	e039      	b.n	8006dfc <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d115      	bne.n	8006dc2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	b292      	uxth	r2, r2
 8006da2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2246      	movs	r2, #70	; 0x46
 8006db2:	5a9b      	ldrh	r3, [r3, r2]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b299      	uxth	r1, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2246      	movs	r2, #70	; 0x46
 8006dbe:	5299      	strh	r1, [r3, r2]
 8006dc0:	e016      	b.n	8006df0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dc2:	f7fd fb95 	bl	80044f0 <HAL_GetTick>
 8006dc6:	0002      	movs	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d802      	bhi.n	8006dd8 <HAL_SPI_Receive+0x230>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	d102      	bne.n	8006dde <HAL_SPI_Receive+0x236>
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006dde:	2317      	movs	r3, #23
 8006de0:	18fb      	adds	r3, r7, r3
 8006de2:	2203      	movs	r2, #3
 8006de4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	225d      	movs	r2, #93	; 0x5d
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
          goto error;
 8006dee:	e01d      	b.n	8006e2c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2246      	movs	r2, #70	; 0x46
 8006df4:	5a9b      	ldrh	r3, [r3, r2]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1c5      	bne.n	8006d88 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	0018      	movs	r0, r3
 8006e04:	f000 fb34 	bl	8007470 <SPI_EndRxTransaction>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e1a:	2317      	movs	r3, #23
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e003      	b.n	8006e2c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	225d      	movs	r2, #93	; 0x5d
 8006e28:	2101      	movs	r1, #1
 8006e2a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	225c      	movs	r2, #92	; 0x5c
 8006e30:	2100      	movs	r1, #0
 8006e32:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e34:	2317      	movs	r3, #23
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	781b      	ldrb	r3, [r3, #0]
}
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b007      	add	sp, #28
 8006e40:	bd90      	pop	{r4, r7, pc}
 8006e42:	46c0      	nop			; (mov r8, r8)
 8006e44:	ffffefff 	.word	0xffffefff
 8006e48:	ffffbfff 	.word	0xffffbfff

08006e4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	001a      	movs	r2, r3
 8006e5a:	1cbb      	adds	r3, r7, #2
 8006e5c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e62:	2323      	movs	r3, #35	; 0x23
 8006e64:	18fb      	adds	r3, r7, r3
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	225c      	movs	r2, #92	; 0x5c
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x2c>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e1c4      	b.n	8007202 <HAL_SPI_TransmitReceive+0x3b6>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	225c      	movs	r2, #92	; 0x5c
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e80:	f7fd fb36 	bl	80044f0 <HAL_GetTick>
 8006e84:	0003      	movs	r3, r0
 8006e86:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e88:	201b      	movs	r0, #27
 8006e8a:	183b      	adds	r3, r7, r0
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	215d      	movs	r1, #93	; 0x5d
 8006e90:	5c52      	ldrb	r2, [r2, r1]
 8006e92:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e9a:	2312      	movs	r3, #18
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	1cba      	adds	r2, r7, #2
 8006ea0:	8812      	ldrh	r2, [r2, #0]
 8006ea2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ea4:	183b      	adds	r3, r7, r0
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d011      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x84>
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	2382      	movs	r3, #130	; 0x82
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d107      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <HAL_SPI_TransmitReceive+0x7a>
 8006ebe:	183b      	adds	r3, r7, r0
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d004      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006ec6:	2323      	movs	r3, #35	; 0x23
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2202      	movs	r2, #2
 8006ecc:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ece:	e191      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d006      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x98>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x98>
 8006edc:	1cbb      	adds	r3, r7, #2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006ee4:	2323      	movs	r3, #35	; 0x23
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
    goto error;
 8006eec:	e182      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	225d      	movs	r2, #93	; 0x5d
 8006ef2:	5c9b      	ldrb	r3, [r3, r2]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d003      	beq.n	8006f02 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	225d      	movs	r2, #93	; 0x5d
 8006efe:	2105      	movs	r1, #5
 8006f00:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1cba      	adds	r2, r7, #2
 8006f12:	2146      	movs	r1, #70	; 0x46
 8006f14:	8812      	ldrh	r2, [r2, #0]
 8006f16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	1cba      	adds	r2, r7, #2
 8006f1c:	2144      	movs	r1, #68	; 0x44
 8006f1e:	8812      	ldrh	r2, [r2, #0]
 8006f20:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	1cba      	adds	r2, r7, #2
 8006f2c:	8812      	ldrh	r2, [r2, #0]
 8006f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	1cba      	adds	r2, r7, #2
 8006f34:	8812      	ldrh	r2, [r2, #0]
 8006f36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	23e0      	movs	r3, #224	; 0xe0
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d908      	bls.n	8006f62 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	49ac      	ldr	r1, [pc, #688]	; (800720c <HAL_SPI_TransmitReceive+0x3c0>)
 8006f5c:	400a      	ands	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	e008      	b.n	8006f74 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	0149      	lsls	r1, r1, #5
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2240      	movs	r2, #64	; 0x40
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d007      	beq.n	8006f92 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2140      	movs	r1, #64	; 0x40
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	23e0      	movs	r3, #224	; 0xe0
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d800      	bhi.n	8006fa0 <HAL_SPI_TransmitReceive+0x154>
 8006f9e:	e083      	b.n	80070a8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x168>
 8006fa8:	2312      	movs	r3, #18
 8006faa:	18fb      	adds	r3, r7, r3
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d000      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x168>
 8006fb2:	e06d      	b.n	8007090 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	1c9a      	adds	r2, r3, #2
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fd8:	e05a      	b.n	8007090 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d11b      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x1d4>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <HAL_SPI_TransmitReceive+0x1d4>
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d113      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	881a      	ldrh	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2201      	movs	r2, #1
 8007028:	4013      	ands	r3, r2
 800702a:	2b01      	cmp	r3, #1
 800702c:	d11c      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x21c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2246      	movs	r2, #70	; 0x46
 8007032:	5a9b      	ldrh	r3, [r3, r2]
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d016      	beq.n	8007068 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	b292      	uxth	r2, r2
 8007046:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2246      	movs	r2, #70	; 0x46
 8007056:	5a9b      	ldrh	r3, [r3, r2]
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b299      	uxth	r1, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2246      	movs	r2, #70	; 0x46
 8007062:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007064:	2301      	movs	r3, #1
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007068:	f7fd fa42 	bl	80044f0 <HAL_GetTick>
 800706c:	0002      	movs	r2, r0
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007074:	429a      	cmp	r2, r3
 8007076:	d80b      	bhi.n	8007090 <HAL_SPI_TransmitReceive+0x244>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	3301      	adds	r3, #1
 800707c:	d008      	beq.n	8007090 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800707e:	2323      	movs	r3, #35	; 0x23
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	2203      	movs	r2, #3
 8007084:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	225d      	movs	r2, #93	; 0x5d
 800708a:	2101      	movs	r1, #1
 800708c:	5499      	strb	r1, [r3, r2]
        goto error;
 800708e:	e0b1      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d19f      	bne.n	8006fda <HAL_SPI_TransmitReceive+0x18e>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2246      	movs	r2, #70	; 0x46
 800709e:	5a9b      	ldrh	r3, [r3, r2]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d199      	bne.n	8006fda <HAL_SPI_TransmitReceive+0x18e>
 80070a6:	e089      	b.n	80071bc <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x270>
 80070b0:	2312      	movs	r3, #18
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d000      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x270>
 80070ba:	e074      	b.n	80071a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e2:	e060      	b.n	80071a6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2202      	movs	r2, #2
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d11c      	bne.n	800712c <HAL_SPI_TransmitReceive+0x2e0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d017      	beq.n	800712c <HAL_SPI_TransmitReceive+0x2e0>
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d114      	bne.n	800712c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	330c      	adds	r3, #12
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2201      	movs	r2, #1
 8007134:	4013      	ands	r3, r2
 8007136:	2b01      	cmp	r3, #1
 8007138:	d11e      	bne.n	8007178 <HAL_SPI_TransmitReceive+0x32c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2246      	movs	r2, #70	; 0x46
 800713e:	5a9b      	ldrh	r3, [r3, r2]
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	001a      	movs	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2246      	movs	r2, #70	; 0x46
 8007166:	5a9b      	ldrh	r3, [r3, r2]
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b299      	uxth	r1, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2246      	movs	r2, #70	; 0x46
 8007172:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007174:	2301      	movs	r3, #1
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007178:	f7fd f9ba 	bl	80044f0 <HAL_GetTick>
 800717c:	0002      	movs	r2, r0
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007184:	429a      	cmp	r2, r3
 8007186:	d802      	bhi.n	800718e <HAL_SPI_TransmitReceive+0x342>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	3301      	adds	r3, #1
 800718c:	d102      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x348>
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2b00      	cmp	r3, #0
 8007192:	d108      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007194:	2323      	movs	r3, #35	; 0x23
 8007196:	18fb      	adds	r3, r7, r3
 8007198:	2203      	movs	r2, #3
 800719a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	225d      	movs	r2, #93	; 0x5d
 80071a0:	2101      	movs	r1, #1
 80071a2:	5499      	strb	r1, [r3, r2]
        goto error;
 80071a4:	e026      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d199      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x298>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2246      	movs	r2, #70	; 0x46
 80071b4:	5a9b      	ldrh	r3, [r3, r2]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d193      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0018      	movs	r0, r3
 80071c4:	f000 f9b2 	bl	800752c <SPI_EndRxTxTransaction>
 80071c8:	1e03      	subs	r3, r0, #0
 80071ca:	d006      	beq.n	80071da <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80071cc:	2323      	movs	r3, #35	; 0x23
 80071ce:	18fb      	adds	r3, r7, r3
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80071e2:	2323      	movs	r3, #35	; 0x23
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e003      	b.n	80071f4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	225d      	movs	r2, #93	; 0x5d
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	225c      	movs	r2, #92	; 0x5c
 80071f8:	2100      	movs	r1, #0
 80071fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071fc:	2323      	movs	r3, #35	; 0x23
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	781b      	ldrb	r3, [r3, #0]
}
 8007202:	0018      	movs	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	b00a      	add	sp, #40	; 0x28
 8007208:	bd80      	pop	{r7, pc}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	ffffefff 	.word	0xffffefff

08007210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b088      	sub	sp, #32
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	603b      	str	r3, [r7, #0]
 800721c:	1dfb      	adds	r3, r7, #7
 800721e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007220:	f7fd f966 	bl	80044f0 <HAL_GetTick>
 8007224:	0002      	movs	r2, r0
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	18d3      	adds	r3, r2, r3
 800722e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007230:	f7fd f95e 	bl	80044f0 <HAL_GetTick>
 8007234:	0003      	movs	r3, r0
 8007236:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007238:	4b3a      	ldr	r3, [pc, #232]	; (8007324 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	015b      	lsls	r3, r3, #5
 800723e:	0d1b      	lsrs	r3, r3, #20
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	4353      	muls	r3, r2
 8007244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007246:	e058      	b.n	80072fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	d055      	beq.n	80072fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800724e:	f7fd f94f 	bl	80044f0 <HAL_GetTick>
 8007252:	0002      	movs	r2, r0
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	429a      	cmp	r2, r3
 800725c:	d902      	bls.n	8007264 <SPI_WaitFlagStateUntilTimeout+0x54>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d142      	bne.n	80072ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	21e0      	movs	r1, #224	; 0xe0
 8007270:	438a      	bics	r2, r1
 8007272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	2382      	movs	r3, #130	; 0x82
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	429a      	cmp	r2, r3
 800727e:	d113      	bne.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	2380      	movs	r3, #128	; 0x80
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	429a      	cmp	r2, r3
 800728a:	d005      	beq.n	8007298 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	2380      	movs	r3, #128	; 0x80
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	429a      	cmp	r2, r3
 8007296:	d107      	bne.n	80072a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2140      	movs	r1, #64	; 0x40
 80072a4:	438a      	bics	r2, r1
 80072a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	019b      	lsls	r3, r3, #6
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d110      	bne.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	491a      	ldr	r1, [pc, #104]	; (8007328 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80072c0:	400a      	ands	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2180      	movs	r1, #128	; 0x80
 80072d0:	0189      	lsls	r1, r1, #6
 80072d2:	430a      	orrs	r2, r1
 80072d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	225d      	movs	r2, #93	; 0x5d
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	225c      	movs	r2, #92	; 0x5c
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e017      	b.n	800731a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	4013      	ands	r3, r2
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	425a      	negs	r2, r3
 800730a:	4153      	adcs	r3, r2
 800730c:	b2db      	uxtb	r3, r3
 800730e:	001a      	movs	r2, r3
 8007310:	1dfb      	adds	r3, r7, #7
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d197      	bne.n	8007248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	0018      	movs	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	b008      	add	sp, #32
 8007320:	bd80      	pop	{r7, pc}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	20000010 	.word	0x20000010
 8007328:	ffffdfff 	.word	0xffffdfff

0800732c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800733a:	2317      	movs	r3, #23
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007342:	f7fd f8d5 	bl	80044f0 <HAL_GetTick>
 8007346:	0002      	movs	r2, r0
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007352:	f7fd f8cd 	bl	80044f0 <HAL_GetTick>
 8007356:	0003      	movs	r3, r0
 8007358:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007362:	4b41      	ldr	r3, [pc, #260]	; (8007468 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	0013      	movs	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	189b      	adds	r3, r3, r2
 800736c:	00da      	lsls	r2, r3, #3
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007374:	4353      	muls	r3, r2
 8007376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007378:	e068      	b.n	800744c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	23c0      	movs	r3, #192	; 0xc0
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	429a      	cmp	r2, r3
 8007382:	d10a      	bne.n	800739a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d107      	bne.n	800739a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2da      	uxtb	r2, r3
 8007390:	2117      	movs	r1, #23
 8007392:	187b      	adds	r3, r7, r1
 8007394:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007396:	187b      	adds	r3, r7, r1
 8007398:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	d055      	beq.n	800744c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073a0:	f7fd f8a6 	bl	80044f0 <HAL_GetTick>
 80073a4:	0002      	movs	r2, r0
 80073a6:	6a3b      	ldr	r3, [r7, #32]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d902      	bls.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d142      	bne.n	800743c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	21e0      	movs	r1, #224	; 0xe0
 80073c2:	438a      	bics	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	2382      	movs	r3, #130	; 0x82
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d113      	bne.n	80073fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	2380      	movs	r3, #128	; 0x80
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	429a      	cmp	r2, r3
 80073dc:	d005      	beq.n	80073ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	2380      	movs	r3, #128	; 0x80
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d107      	bne.n	80073fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2140      	movs	r1, #64	; 0x40
 80073f6:	438a      	bics	r2, r1
 80073f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	019b      	lsls	r3, r3, #6
 8007402:	429a      	cmp	r2, r3
 8007404:	d110      	bne.n	8007428 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4916      	ldr	r1, [pc, #88]	; (800746c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007412:	400a      	ands	r2, r1
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	0189      	lsls	r1, r1, #6
 8007424:	430a      	orrs	r2, r1
 8007426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	225d      	movs	r2, #93	; 0x5d
 800742c:	2101      	movs	r1, #1
 800742e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	225c      	movs	r2, #92	; 0x5c
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e010      	b.n	800745e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	3b01      	subs	r3, #1
 800744a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4013      	ands	r3, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	429a      	cmp	r2, r3
 800745a:	d18e      	bne.n	800737a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	0018      	movs	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	b00a      	add	sp, #40	; 0x28
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	20000010 	.word	0x20000010
 800746c:	ffffdfff 	.word	0xffffdfff

08007470 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af02      	add	r7, sp, #8
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	2382      	movs	r3, #130	; 0x82
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d113      	bne.n	80074b0 <SPI_EndRxTransaction+0x40>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	429a      	cmp	r2, r3
 8007492:	d005      	beq.n	80074a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	429a      	cmp	r2, r3
 800749e:	d107      	bne.n	80074b0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2140      	movs	r1, #64	; 0x40
 80074ac:	438a      	bics	r2, r1
 80074ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	0013      	movs	r3, r2
 80074ba:	2200      	movs	r2, #0
 80074bc:	2180      	movs	r1, #128	; 0x80
 80074be:	f7ff fea7 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 80074c2:	1e03      	subs	r3, r0, #0
 80074c4:	d007      	beq.n	80074d6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ca:	2220      	movs	r2, #32
 80074cc:	431a      	orrs	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e026      	b.n	8007524 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	2382      	movs	r3, #130	; 0x82
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	429a      	cmp	r2, r3
 80074e0:	d11f      	bne.n	8007522 <SPI_EndRxTransaction+0xb2>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d005      	beq.n	80074fa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689a      	ldr	r2, [r3, #8]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d113      	bne.n	8007522 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	23c0      	movs	r3, #192	; 0xc0
 80074fe:	00d9      	lsls	r1, r3, #3
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	0013      	movs	r3, r2
 8007508:	2200      	movs	r2, #0
 800750a:	f7ff ff0f 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 800750e:	1e03      	subs	r3, r0, #0
 8007510:	d007      	beq.n	8007522 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007516:	2220      	movs	r2, #32
 8007518:	431a      	orrs	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e000      	b.n	8007524 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b004      	add	sp, #16
 800752a:	bd80      	pop	{r7, pc}

0800752c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	23c0      	movs	r3, #192	; 0xc0
 800753c:	0159      	lsls	r1, r3, #5
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	0013      	movs	r3, r2
 8007546:	2200      	movs	r2, #0
 8007548:	f7ff fef0 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 800754c:	1e03      	subs	r3, r0, #0
 800754e:	d007      	beq.n	8007560 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2220      	movs	r2, #32
 8007556:	431a      	orrs	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e027      	b.n	80075b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	0013      	movs	r3, r2
 800756a:	2200      	movs	r2, #0
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	f7ff fe4f 	bl	8007210 <SPI_WaitFlagStateUntilTimeout>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d007      	beq.n	8007586 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757a:	2220      	movs	r2, #32
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e014      	b.n	80075b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	23c0      	movs	r3, #192	; 0xc0
 800758a:	00d9      	lsls	r1, r3, #3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	0013      	movs	r3, r2
 8007594:	2200      	movs	r2, #0
 8007596:	f7ff fec9 	bl	800732c <SPI_WaitFifoStateUntilTimeout>
 800759a:	1e03      	subs	r3, r0, #0
 800759c:	d007      	beq.n	80075ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a2:	2220      	movs	r2, #32
 80075a4:	431a      	orrs	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e000      	b.n	80075b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	0018      	movs	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b004      	add	sp, #16
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e04a      	b.n	8007660 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	223d      	movs	r2, #61	; 0x3d
 80075ce:	5c9b      	ldrb	r3, [r3, r2]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	223c      	movs	r2, #60	; 0x3c
 80075da:	2100      	movs	r1, #0
 80075dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f7fc fc2b 	bl	8003e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	223d      	movs	r2, #61	; 0x3d
 80075ea:	2102      	movs	r1, #2
 80075ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3304      	adds	r3, #4
 80075f6:	0019      	movs	r1, r3
 80075f8:	0010      	movs	r0, r2
 80075fa:	f000 f9ed 	bl	80079d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2248      	movs	r2, #72	; 0x48
 8007602:	2101      	movs	r1, #1
 8007604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	223e      	movs	r2, #62	; 0x3e
 800760a:	2101      	movs	r1, #1
 800760c:	5499      	strb	r1, [r3, r2]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	223f      	movs	r2, #63	; 0x3f
 8007612:	2101      	movs	r1, #1
 8007614:	5499      	strb	r1, [r3, r2]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2240      	movs	r2, #64	; 0x40
 800761a:	2101      	movs	r1, #1
 800761c:	5499      	strb	r1, [r3, r2]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2241      	movs	r2, #65	; 0x41
 8007622:	2101      	movs	r1, #1
 8007624:	5499      	strb	r1, [r3, r2]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2242      	movs	r2, #66	; 0x42
 800762a:	2101      	movs	r1, #1
 800762c:	5499      	strb	r1, [r3, r2]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2243      	movs	r2, #67	; 0x43
 8007632:	2101      	movs	r1, #1
 8007634:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2244      	movs	r2, #68	; 0x44
 800763a:	2101      	movs	r1, #1
 800763c:	5499      	strb	r1, [r3, r2]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2245      	movs	r2, #69	; 0x45
 8007642:	2101      	movs	r1, #1
 8007644:	5499      	strb	r1, [r3, r2]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2246      	movs	r2, #70	; 0x46
 800764a:	2101      	movs	r1, #1
 800764c:	5499      	strb	r1, [r3, r2]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2247      	movs	r2, #71	; 0x47
 8007652:	2101      	movs	r1, #1
 8007654:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	223d      	movs	r2, #61	; 0x3d
 800765a:	2101      	movs	r1, #1
 800765c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b002      	add	sp, #8
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	223d      	movs	r2, #61	; 0x3d
 8007674:	5c9b      	ldrb	r3, [r3, r2]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d001      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e047      	b.n	8007710 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	223d      	movs	r2, #61	; 0x3d
 8007684:	2102      	movs	r1, #2
 8007686:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2101      	movs	r1, #1
 8007694:	430a      	orrs	r2, r1
 8007696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a1e      	ldr	r2, [pc, #120]	; (8007718 <HAL_TIM_Base_Start_IT+0xb0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d014      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x64>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	2380      	movs	r3, #128	; 0x80
 80076a8:	05db      	lsls	r3, r3, #23
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d00e      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x64>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1a      	ldr	r2, [pc, #104]	; (800771c <HAL_TIM_Base_Start_IT+0xb4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x64>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a18      	ldr	r2, [pc, #96]	; (8007720 <HAL_TIM_Base_Start_IT+0xb8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d004      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0x64>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a17      	ldr	r2, [pc, #92]	; (8007724 <HAL_TIM_Base_Start_IT+0xbc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d116      	bne.n	80076fa <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	4a15      	ldr	r2, [pc, #84]	; (8007728 <HAL_TIM_Base_Start_IT+0xc0>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b06      	cmp	r3, #6
 80076dc:	d016      	beq.n	800770c <HAL_TIM_Base_Start_IT+0xa4>
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	025b      	lsls	r3, r3, #9
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d011      	beq.n	800770c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2101      	movs	r1, #1
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f8:	e008      	b.n	800770c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2101      	movs	r1, #1
 8007706:	430a      	orrs	r2, r1
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e000      	b.n	800770e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b004      	add	sp, #16
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40012c00 	.word	0x40012c00
 800771c:	40000400 	.word	0x40000400
 8007720:	40000800 	.word	0x40000800
 8007724:	40014000 	.word	0x40014000
 8007728:	00010007 	.word	0x00010007

0800772c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2101      	movs	r1, #1
 8007740:	438a      	bics	r2, r1
 8007742:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	4a0d      	ldr	r2, [pc, #52]	; (8007780 <HAL_TIM_Base_Stop_IT+0x54>)
 800774c:	4013      	ands	r3, r2
 800774e:	d10d      	bne.n	800776c <HAL_TIM_Base_Stop_IT+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_TIM_Base_Stop_IT+0x58>)
 8007758:	4013      	ands	r3, r2
 800775a:	d107      	bne.n	800776c <HAL_TIM_Base_Stop_IT+0x40>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2101      	movs	r1, #1
 8007768:	438a      	bics	r2, r1
 800776a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	223d      	movs	r2, #61	; 0x3d
 8007770:	2101      	movs	r1, #1
 8007772:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b002      	add	sp, #8
 800777c:	bd80      	pop	{r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	00001111 	.word	0x00001111
 8007784:	00000444 	.word	0x00000444

08007788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2202      	movs	r2, #2
 80077a4:	4013      	ands	r3, r2
 80077a6:	d021      	beq.n	80077ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2202      	movs	r2, #2
 80077ac:	4013      	ands	r3, r2
 80077ae:	d01d      	beq.n	80077ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2203      	movs	r2, #3
 80077b6:	4252      	negs	r2, r2
 80077b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	2203      	movs	r2, #3
 80077c8:	4013      	ands	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	0018      	movs	r0, r3
 80077d0:	f000 f8ea 	bl	80079a8 <HAL_TIM_IC_CaptureCallback>
 80077d4:	e007      	b.n	80077e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 f8dd 	bl	8007998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	0018      	movs	r0, r3
 80077e2:	f000 f8e9 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2204      	movs	r2, #4
 80077f0:	4013      	ands	r3, r2
 80077f2:	d022      	beq.n	800783a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2204      	movs	r2, #4
 80077f8:	4013      	ands	r3, r2
 80077fa:	d01e      	beq.n	800783a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2205      	movs	r2, #5
 8007802:	4252      	negs	r2, r2
 8007804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2202      	movs	r2, #2
 800780a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	23c0      	movs	r3, #192	; 0xc0
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4013      	ands	r3, r2
 8007818:	d004      	beq.n	8007824 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0018      	movs	r0, r3
 800781e:	f000 f8c3 	bl	80079a8 <HAL_TIM_IC_CaptureCallback>
 8007822:	e007      	b.n	8007834 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0018      	movs	r0, r3
 8007828:	f000 f8b6 	bl	8007998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	0018      	movs	r0, r3
 8007830:	f000 f8c2 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2208      	movs	r2, #8
 800783e:	4013      	ands	r3, r2
 8007840:	d021      	beq.n	8007886 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2208      	movs	r2, #8
 8007846:	4013      	ands	r3, r2
 8007848:	d01d      	beq.n	8007886 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2209      	movs	r2, #9
 8007850:	4252      	negs	r2, r2
 8007852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2204      	movs	r2, #4
 8007858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	2203      	movs	r2, #3
 8007862:	4013      	ands	r3, r2
 8007864:	d004      	beq.n	8007870 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f89d 	bl	80079a8 <HAL_TIM_IC_CaptureCallback>
 800786e:	e007      	b.n	8007880 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	0018      	movs	r0, r3
 8007874:	f000 f890 	bl	8007998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	0018      	movs	r0, r3
 800787c:	f000 f89c 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2210      	movs	r2, #16
 800788a:	4013      	ands	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2210      	movs	r2, #16
 8007892:	4013      	ands	r3, r2
 8007894:	d01e      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2211      	movs	r2, #17
 800789c:	4252      	negs	r2, r2
 800789e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2208      	movs	r2, #8
 80078a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	23c0      	movs	r3, #192	; 0xc0
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4013      	ands	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 f876 	bl	80079a8 <HAL_TIM_IC_CaptureCallback>
 80078bc:	e007      	b.n	80078ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	0018      	movs	r0, r3
 80078c2:	f000 f869 	bl	8007998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0018      	movs	r0, r3
 80078ca:	f000 f875 	bl	80079b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2201      	movs	r2, #1
 80078d8:	4013      	ands	r3, r2
 80078da:	d00c      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	4013      	ands	r3, r2
 80078e2:	d008      	beq.n	80078f6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2202      	movs	r2, #2
 80078ea:	4252      	negs	r2, r2
 80078ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7fc f9ab 	bl	8003c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	4013      	ands	r3, r2
 80078fc:	d104      	bne.n	8007908 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	2380      	movs	r3, #128	; 0x80
 8007902:	019b      	lsls	r3, r3, #6
 8007904:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007906:	d00b      	beq.n	8007920 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2280      	movs	r2, #128	; 0x80
 800790c:	4013      	ands	r3, r2
 800790e:	d007      	beq.n	8007920 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <HAL_TIM_IRQHandler+0x208>)
 8007916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 f972 	bl	8007c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	2380      	movs	r3, #128	; 0x80
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4013      	ands	r3, r2
 8007928:	d00b      	beq.n	8007942 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2280      	movs	r2, #128	; 0x80
 800792e:	4013      	ands	r3, r2
 8007930:	d007      	beq.n	8007942 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a17      	ldr	r2, [pc, #92]	; (8007994 <HAL_TIM_IRQHandler+0x20c>)
 8007938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0018      	movs	r0, r3
 800793e:	f000 f969 	bl	8007c14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2240      	movs	r2, #64	; 0x40
 8007946:	4013      	ands	r3, r2
 8007948:	d00c      	beq.n	8007964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2240      	movs	r2, #64	; 0x40
 800794e:	4013      	ands	r3, r2
 8007950:	d008      	beq.n	8007964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2241      	movs	r2, #65	; 0x41
 8007958:	4252      	negs	r2, r2
 800795a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	0018      	movs	r0, r3
 8007960:	f000 f832 	bl	80079c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2220      	movs	r2, #32
 8007968:	4013      	ands	r3, r2
 800796a:	d00c      	beq.n	8007986 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	4013      	ands	r3, r2
 8007972:	d008      	beq.n	8007986 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2221      	movs	r2, #33	; 0x21
 800797a:	4252      	negs	r2, r2
 800797c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0018      	movs	r0, r3
 8007982:	f000 f937 	bl	8007bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b004      	add	sp, #16
 800798c:	bd80      	pop	{r7, pc}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	ffffdf7f 	.word	0xffffdf7f
 8007994:	fffffeff 	.word	0xfffffeff

08007998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079a0:	46c0      	nop			; (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079c0:	46c0      	nop			; (mov r8, r8)
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b002      	add	sp, #8
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a3f      	ldr	r2, [pc, #252]	; (8007ae8 <TIM_Base_SetConfig+0x110>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d00c      	beq.n	8007a0a <TIM_Base_SetConfig+0x32>
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	2380      	movs	r3, #128	; 0x80
 80079f4:	05db      	lsls	r3, r3, #23
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d007      	beq.n	8007a0a <TIM_Base_SetConfig+0x32>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a3b      	ldr	r2, [pc, #236]	; (8007aec <TIM_Base_SetConfig+0x114>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_Base_SetConfig+0x32>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a3a      	ldr	r2, [pc, #232]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d108      	bne.n	8007a1c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2270      	movs	r2, #112	; 0x70
 8007a0e:	4393      	bics	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a32      	ldr	r2, [pc, #200]	; (8007ae8 <TIM_Base_SetConfig+0x110>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01c      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	2380      	movs	r3, #128	; 0x80
 8007a28:	05db      	lsls	r3, r3, #23
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d017      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a2e      	ldr	r2, [pc, #184]	; (8007aec <TIM_Base_SetConfig+0x114>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d013      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a2d      	ldr	r2, [pc, #180]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00f      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a2c      	ldr	r2, [pc, #176]	; (8007af4 <TIM_Base_SetConfig+0x11c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00b      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a2b      	ldr	r2, [pc, #172]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a2a      	ldr	r2, [pc, #168]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_Base_SetConfig+0x86>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a29      	ldr	r2, [pc, #164]	; (8007b00 <TIM_Base_SetConfig+0x128>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d108      	bne.n	8007a70 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a28      	ldr	r2, [pc, #160]	; (8007b04 <TIM_Base_SetConfig+0x12c>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	4393      	bics	r3, r2
 8007a76:	001a      	movs	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a13      	ldr	r2, [pc, #76]	; (8007ae8 <TIM_Base_SetConfig+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_Base_SetConfig+0xde>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_Base_SetConfig+0xde>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a14      	ldr	r2, [pc, #80]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_Base_SetConfig+0xde>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <TIM_Base_SetConfig+0x128>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d103      	bne.n	8007abe <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d106      	bne.n	8007ade <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4393      	bics	r3, r2
 8007ad8:	001a      	movs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	611a      	str	r2, [r3, #16]
  }
}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b004      	add	sp, #16
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40000400 	.word	0x40000400
 8007af0:	40000800 	.word	0x40000800
 8007af4:	40002000 	.word	0x40002000
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40014400 	.word	0x40014400
 8007b00:	40014800 	.word	0x40014800
 8007b04:	fffffcff 	.word	0xfffffcff

08007b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	223c      	movs	r2, #60	; 0x3c
 8007b16:	5c9b      	ldrb	r3, [r3, r2]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e05a      	b.n	8007bd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	223c      	movs	r2, #60	; 0x3c
 8007b24:	2101      	movs	r1, #1
 8007b26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	223d      	movs	r2, #61	; 0x3d
 8007b2c:	2102      	movs	r1, #2
 8007b2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d108      	bne.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2270      	movs	r2, #112	; 0x70
 8007b60:	4393      	bics	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d014      	beq.n	8007baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	2380      	movs	r3, #128	; 0x80
 8007b86:	05db      	lsls	r3, r3, #23
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d00e      	beq.n	8007baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d009      	beq.n	8007baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a14      	ldr	r2, [pc, #80]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2280      	movs	r2, #128	; 0x80
 8007bae:	4393      	bics	r3, r2
 8007bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	223d      	movs	r2, #61	; 0x3d
 8007bc8:	2101      	movs	r1, #1
 8007bca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	223c      	movs	r2, #60	; 0x3c
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b004      	add	sp, #16
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	ff0fffff 	.word	0xff0fffff
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40014000 	.word	0x40014000

08007bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b002      	add	sp, #8
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c0c:	46c0      	nop			; (mov r8, r8)
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	b002      	add	sp, #8
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c1c:	46c0      	nop			; (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b002      	add	sp, #8
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e046      	b.n	8007cc4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2288      	movs	r2, #136	; 0x88
 8007c3a:	589b      	ldr	r3, [r3, r2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2284      	movs	r2, #132	; 0x84
 8007c44:	2100      	movs	r1, #0
 8007c46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	f7fc f91c 	bl	8003e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2288      	movs	r2, #136	; 0x88
 8007c54:	2124      	movs	r1, #36	; 0x24
 8007c56:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2101      	movs	r1, #1
 8007c64:	438a      	bics	r2, r1
 8007c66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 fd4c 	bl	8008710 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f000 f9f2 	bl	8008064 <UART_SetConfig>
 8007c80:	0003      	movs	r3, r0
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d101      	bne.n	8007c8a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e01c      	b.n	8007cc4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	490d      	ldr	r1, [pc, #52]	; (8007ccc <HAL_UART_Init+0xa8>)
 8007c96:	400a      	ands	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	212a      	movs	r1, #42	; 0x2a
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f000 fddb 	bl	8008878 <UART_CheckIdleState>
 8007cc2:	0003      	movs	r3, r0
}
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b002      	add	sp, #8
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	ffffb7ff 	.word	0xffffb7ff

08007cd0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e032      	b.n	8007d48 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2288      	movs	r2, #136	; 0x88
 8007ce6:	2124      	movs	r1, #36	; 0x24
 8007ce8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	438a      	bics	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7fc f9e3 	bl	80040e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2290      	movs	r2, #144	; 0x90
 8007d1e:	2100      	movs	r1, #0
 8007d20:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2288      	movs	r2, #136	; 0x88
 8007d26:	2100      	movs	r1, #0
 8007d28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	228c      	movs	r2, #140	; 0x8c
 8007d2e:	2100      	movs	r1, #0
 8007d30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2284      	movs	r2, #132	; 0x84
 8007d42:	2100      	movs	r1, #0
 8007d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	0018      	movs	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	603b      	str	r3, [r7, #0]
 8007d5c:	1dbb      	adds	r3, r7, #6
 8007d5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2288      	movs	r2, #136	; 0x88
 8007d64:	589b      	ldr	r3, [r3, r2]
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d000      	beq.n	8007d6c <HAL_UART_Transmit+0x1c>
 8007d6a:	e090      	b.n	8007e8e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d003      	beq.n	8007d7a <HAL_UART_Transmit+0x2a>
 8007d72:	1dbb      	adds	r3, r7, #6
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e088      	b.n	8007e90 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	015b      	lsls	r3, r3, #5
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d109      	bne.n	8007d9e <HAL_UART_Transmit+0x4e>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2201      	movs	r2, #1
 8007d96:	4013      	ands	r3, r2
 8007d98:	d001      	beq.n	8007d9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e078      	b.n	8007e90 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2290      	movs	r2, #144	; 0x90
 8007da2:	2100      	movs	r1, #0
 8007da4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2288      	movs	r2, #136	; 0x88
 8007daa:	2121      	movs	r1, #33	; 0x21
 8007dac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dae:	f7fc fb9f 	bl	80044f0 <HAL_GetTick>
 8007db2:	0003      	movs	r3, r0
 8007db4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1dba      	adds	r2, r7, #6
 8007dba:	2154      	movs	r1, #84	; 0x54
 8007dbc:	8812      	ldrh	r2, [r2, #0]
 8007dbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	1dba      	adds	r2, r7, #6
 8007dc4:	2156      	movs	r1, #86	; 0x56
 8007dc6:	8812      	ldrh	r2, [r2, #0]
 8007dc8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	2380      	movs	r3, #128	; 0x80
 8007dd0:	015b      	lsls	r3, r3, #5
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d108      	bne.n	8007de8 <HAL_UART_Transmit+0x98>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e003      	b.n	8007df0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007df0:	e030      	b.n	8007e54 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	0013      	movs	r3, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	f000 fde4 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 8007e04:	1e03      	subs	r3, r0, #0
 8007e06:	d005      	beq.n	8007e14 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2288      	movs	r2, #136	; 0x88
 8007e0c:	2120      	movs	r1, #32
 8007e0e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e03d      	b.n	8007e90 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	001a      	movs	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	05d2      	lsls	r2, r2, #23
 8007e26:	0dd2      	lsrs	r2, r2, #23
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e007      	b.n	8007e42 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2256      	movs	r2, #86	; 0x56
 8007e46:	5a9b      	ldrh	r3, [r3, r2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2256      	movs	r2, #86	; 0x56
 8007e52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2256      	movs	r2, #86	; 0x56
 8007e58:	5a9b      	ldrh	r3, [r3, r2]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1c8      	bne.n	8007df2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	0013      	movs	r3, r2
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	f000 fdad 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 8007e72:	1e03      	subs	r3, r0, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2288      	movs	r2, #136	; 0x88
 8007e7a:	2120      	movs	r1, #32
 8007e7c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e006      	b.n	8007e90 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2288      	movs	r2, #136	; 0x88
 8007e86:	2120      	movs	r1, #32
 8007e88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e000      	b.n	8007e90 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
  }
}
 8007e90:	0018      	movs	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b008      	add	sp, #32
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	; 0x28
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	1dbb      	adds	r3, r7, #6
 8007ea6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	228c      	movs	r2, #140	; 0x8c
 8007eac:	589b      	ldr	r3, [r3, r2]
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d000      	beq.n	8007eb4 <HAL_UART_Receive+0x1c>
 8007eb2:	e0d0      	b.n	8008056 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <HAL_UART_Receive+0x2a>
 8007eba:	1dbb      	adds	r3, r7, #6
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e0c8      	b.n	8008058 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	2380      	movs	r3, #128	; 0x80
 8007ecc:	015b      	lsls	r3, r3, #5
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d109      	bne.n	8007ee6 <HAL_UART_Receive+0x4e>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d105      	bne.n	8007ee6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2201      	movs	r2, #1
 8007ede:	4013      	ands	r3, r2
 8007ee0:	d001      	beq.n	8007ee6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0b8      	b.n	8008058 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2290      	movs	r2, #144	; 0x90
 8007eea:	2100      	movs	r1, #0
 8007eec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	228c      	movs	r2, #140	; 0x8c
 8007ef2:	2122      	movs	r1, #34	; 0x22
 8007ef4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007efc:	f7fc faf8 	bl	80044f0 <HAL_GetTick>
 8007f00:	0003      	movs	r3, r0
 8007f02:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	1dba      	adds	r2, r7, #6
 8007f08:	215c      	movs	r1, #92	; 0x5c
 8007f0a:	8812      	ldrh	r2, [r2, #0]
 8007f0c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1dba      	adds	r2, r7, #6
 8007f12:	215e      	movs	r1, #94	; 0x5e
 8007f14:	8812      	ldrh	r2, [r2, #0]
 8007f16:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	2380      	movs	r3, #128	; 0x80
 8007f1e:	015b      	lsls	r3, r3, #5
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d10d      	bne.n	8007f40 <HAL_UART_Receive+0xa8>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d104      	bne.n	8007f36 <HAL_UART_Receive+0x9e>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2260      	movs	r2, #96	; 0x60
 8007f30:	494b      	ldr	r1, [pc, #300]	; (8008060 <HAL_UART_Receive+0x1c8>)
 8007f32:	5299      	strh	r1, [r3, r2]
 8007f34:	e02e      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2260      	movs	r2, #96	; 0x60
 8007f3a:	21ff      	movs	r1, #255	; 0xff
 8007f3c:	5299      	strh	r1, [r3, r2]
 8007f3e:	e029      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <HAL_UART_Receive+0xcc>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d104      	bne.n	8007f5a <HAL_UART_Receive+0xc2>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2260      	movs	r2, #96	; 0x60
 8007f54:	21ff      	movs	r1, #255	; 0xff
 8007f56:	5299      	strh	r1, [r3, r2]
 8007f58:	e01c      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2260      	movs	r2, #96	; 0x60
 8007f5e:	217f      	movs	r1, #127	; 0x7f
 8007f60:	5299      	strh	r1, [r3, r2]
 8007f62:	e017      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	2380      	movs	r3, #128	; 0x80
 8007f6a:	055b      	lsls	r3, r3, #21
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d10d      	bne.n	8007f8c <HAL_UART_Receive+0xf4>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <HAL_UART_Receive+0xea>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2260      	movs	r2, #96	; 0x60
 8007f7c:	217f      	movs	r1, #127	; 0x7f
 8007f7e:	5299      	strh	r1, [r3, r2]
 8007f80:	e008      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2260      	movs	r2, #96	; 0x60
 8007f86:	213f      	movs	r1, #63	; 0x3f
 8007f88:	5299      	strh	r1, [r3, r2]
 8007f8a:	e003      	b.n	8007f94 <HAL_UART_Receive+0xfc>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2260      	movs	r2, #96	; 0x60
 8007f90:	2100      	movs	r1, #0
 8007f92:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007f94:	2312      	movs	r3, #18
 8007f96:	18fb      	adds	r3, r7, r3
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	2160      	movs	r1, #96	; 0x60
 8007f9c:	5a52      	ldrh	r2, [r2, r1]
 8007f9e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	2380      	movs	r3, #128	; 0x80
 8007fa6:	015b      	lsls	r3, r3, #5
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d108      	bne.n	8007fbe <HAL_UART_Receive+0x126>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	e003      	b.n	8007fc6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007fc6:	e03a      	b.n	800803e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	0013      	movs	r3, r2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2120      	movs	r1, #32
 8007fd6:	f000 fcf9 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 8007fda:	1e03      	subs	r3, r0, #0
 8007fdc:	d005      	beq.n	8007fea <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	228c      	movs	r2, #140	; 0x8c
 8007fe2:	2120      	movs	r1, #32
 8007fe4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e036      	b.n	8008058 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10e      	bne.n	800800e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2212      	movs	r2, #18
 8007ffa:	18ba      	adds	r2, r7, r2
 8007ffc:	8812      	ldrh	r2, [r2, #0]
 8007ffe:	4013      	ands	r3, r2
 8008000:	b29a      	uxth	r2, r3
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	3302      	adds	r3, #2
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	e00e      	b.n	800802c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2212      	movs	r2, #18
 8008018:	18ba      	adds	r2, r7, r2
 800801a:	8812      	ldrh	r2, [r2, #0]
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	4013      	ands	r3, r2
 8008020:	b2da      	uxtb	r2, r3
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	225e      	movs	r2, #94	; 0x5e
 8008030:	5a9b      	ldrh	r3, [r3, r2]
 8008032:	b29b      	uxth	r3, r3
 8008034:	3b01      	subs	r3, #1
 8008036:	b299      	uxth	r1, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	225e      	movs	r2, #94	; 0x5e
 800803c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	225e      	movs	r2, #94	; 0x5e
 8008042:	5a9b      	ldrh	r3, [r3, r2]
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1be      	bne.n	8007fc8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	228c      	movs	r2, #140	; 0x8c
 800804e:	2120      	movs	r1, #32
 8008050:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	0018      	movs	r0, r3
 800805a:	46bd      	mov	sp, r7
 800805c:	b008      	add	sp, #32
 800805e:	bd80      	pop	{r7, pc}
 8008060:	000001ff 	.word	0x000001ff

08008064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008064:	b5b0      	push	{r4, r5, r7, lr}
 8008066:	b090      	sub	sp, #64	; 0x40
 8008068:	af00      	add	r7, sp, #0
 800806a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800806c:	231a      	movs	r3, #26
 800806e:	2220      	movs	r2, #32
 8008070:	189b      	adds	r3, r3, r2
 8008072:	19db      	adds	r3, r3, r7
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	431a      	orrs	r2, r3
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	431a      	orrs	r2, r3
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	4313      	orrs	r3, r2
 800808e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4ac1      	ldr	r2, [pc, #772]	; (800839c <UART_SetConfig+0x338>)
 8008098:	4013      	ands	r3, r2
 800809a:	0019      	movs	r1, r3
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a2:	430b      	orrs	r3, r1
 80080a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	4abc      	ldr	r2, [pc, #752]	; (80083a0 <UART_SetConfig+0x33c>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	0018      	movs	r0, r3
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	68d9      	ldr	r1, [r3, #12]
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	0003      	movs	r3, r0
 80080bc:	430b      	orrs	r3, r1
 80080be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4ab6      	ldr	r2, [pc, #728]	; (80083a4 <UART_SetConfig+0x340>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d009      	beq.n	80080e4 <UART_SetConfig+0x80>
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4ab4      	ldr	r2, [pc, #720]	; (80083a8 <UART_SetConfig+0x344>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080e0:	4313      	orrs	r3, r2
 80080e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	4ab0      	ldr	r2, [pc, #704]	; (80083ac <UART_SetConfig+0x348>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	0019      	movs	r1, r3
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	220f      	movs	r2, #15
 8008102:	4393      	bics	r3, r2
 8008104:	0018      	movs	r0, r3
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	0003      	movs	r3, r0
 8008110:	430b      	orrs	r3, r1
 8008112:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4aa5      	ldr	r2, [pc, #660]	; (80083b0 <UART_SetConfig+0x34c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d131      	bne.n	8008182 <UART_SetConfig+0x11e>
 800811e:	4ba5      	ldr	r3, [pc, #660]	; (80083b4 <UART_SetConfig+0x350>)
 8008120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008122:	2203      	movs	r2, #3
 8008124:	4013      	ands	r3, r2
 8008126:	2b03      	cmp	r3, #3
 8008128:	d01d      	beq.n	8008166 <UART_SetConfig+0x102>
 800812a:	d823      	bhi.n	8008174 <UART_SetConfig+0x110>
 800812c:	2b02      	cmp	r3, #2
 800812e:	d00c      	beq.n	800814a <UART_SetConfig+0xe6>
 8008130:	d820      	bhi.n	8008174 <UART_SetConfig+0x110>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <UART_SetConfig+0xd8>
 8008136:	2b01      	cmp	r3, #1
 8008138:	d00e      	beq.n	8008158 <UART_SetConfig+0xf4>
 800813a:	e01b      	b.n	8008174 <UART_SetConfig+0x110>
 800813c:	231b      	movs	r3, #27
 800813e:	2220      	movs	r2, #32
 8008140:	189b      	adds	r3, r3, r2
 8008142:	19db      	adds	r3, r3, r7
 8008144:	2200      	movs	r2, #0
 8008146:	701a      	strb	r2, [r3, #0]
 8008148:	e154      	b.n	80083f4 <UART_SetConfig+0x390>
 800814a:	231b      	movs	r3, #27
 800814c:	2220      	movs	r2, #32
 800814e:	189b      	adds	r3, r3, r2
 8008150:	19db      	adds	r3, r3, r7
 8008152:	2202      	movs	r2, #2
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e14d      	b.n	80083f4 <UART_SetConfig+0x390>
 8008158:	231b      	movs	r3, #27
 800815a:	2220      	movs	r2, #32
 800815c:	189b      	adds	r3, r3, r2
 800815e:	19db      	adds	r3, r3, r7
 8008160:	2204      	movs	r2, #4
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	e146      	b.n	80083f4 <UART_SetConfig+0x390>
 8008166:	231b      	movs	r3, #27
 8008168:	2220      	movs	r2, #32
 800816a:	189b      	adds	r3, r3, r2
 800816c:	19db      	adds	r3, r3, r7
 800816e:	2208      	movs	r2, #8
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e13f      	b.n	80083f4 <UART_SetConfig+0x390>
 8008174:	231b      	movs	r3, #27
 8008176:	2220      	movs	r2, #32
 8008178:	189b      	adds	r3, r3, r2
 800817a:	19db      	adds	r3, r3, r7
 800817c:	2210      	movs	r2, #16
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e138      	b.n	80083f4 <UART_SetConfig+0x390>
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a8c      	ldr	r2, [pc, #560]	; (80083b8 <UART_SetConfig+0x354>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d131      	bne.n	80081f0 <UART_SetConfig+0x18c>
 800818c:	4b89      	ldr	r3, [pc, #548]	; (80083b4 <UART_SetConfig+0x350>)
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	220c      	movs	r2, #12
 8008192:	4013      	ands	r3, r2
 8008194:	2b0c      	cmp	r3, #12
 8008196:	d01d      	beq.n	80081d4 <UART_SetConfig+0x170>
 8008198:	d823      	bhi.n	80081e2 <UART_SetConfig+0x17e>
 800819a:	2b08      	cmp	r3, #8
 800819c:	d00c      	beq.n	80081b8 <UART_SetConfig+0x154>
 800819e:	d820      	bhi.n	80081e2 <UART_SetConfig+0x17e>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <UART_SetConfig+0x146>
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d00e      	beq.n	80081c6 <UART_SetConfig+0x162>
 80081a8:	e01b      	b.n	80081e2 <UART_SetConfig+0x17e>
 80081aa:	231b      	movs	r3, #27
 80081ac:	2220      	movs	r2, #32
 80081ae:	189b      	adds	r3, r3, r2
 80081b0:	19db      	adds	r3, r3, r7
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	e11d      	b.n	80083f4 <UART_SetConfig+0x390>
 80081b8:	231b      	movs	r3, #27
 80081ba:	2220      	movs	r2, #32
 80081bc:	189b      	adds	r3, r3, r2
 80081be:	19db      	adds	r3, r3, r7
 80081c0:	2202      	movs	r2, #2
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	e116      	b.n	80083f4 <UART_SetConfig+0x390>
 80081c6:	231b      	movs	r3, #27
 80081c8:	2220      	movs	r2, #32
 80081ca:	189b      	adds	r3, r3, r2
 80081cc:	19db      	adds	r3, r3, r7
 80081ce:	2204      	movs	r2, #4
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	e10f      	b.n	80083f4 <UART_SetConfig+0x390>
 80081d4:	231b      	movs	r3, #27
 80081d6:	2220      	movs	r2, #32
 80081d8:	189b      	adds	r3, r3, r2
 80081da:	19db      	adds	r3, r3, r7
 80081dc:	2208      	movs	r2, #8
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	e108      	b.n	80083f4 <UART_SetConfig+0x390>
 80081e2:	231b      	movs	r3, #27
 80081e4:	2220      	movs	r2, #32
 80081e6:	189b      	adds	r3, r3, r2
 80081e8:	19db      	adds	r3, r3, r7
 80081ea:	2210      	movs	r2, #16
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e101      	b.n	80083f4 <UART_SetConfig+0x390>
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a71      	ldr	r2, [pc, #452]	; (80083bc <UART_SetConfig+0x358>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d131      	bne.n	800825e <UART_SetConfig+0x1fa>
 80081fa:	4b6e      	ldr	r3, [pc, #440]	; (80083b4 <UART_SetConfig+0x350>)
 80081fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fe:	2230      	movs	r2, #48	; 0x30
 8008200:	4013      	ands	r3, r2
 8008202:	2b30      	cmp	r3, #48	; 0x30
 8008204:	d01d      	beq.n	8008242 <UART_SetConfig+0x1de>
 8008206:	d823      	bhi.n	8008250 <UART_SetConfig+0x1ec>
 8008208:	2b20      	cmp	r3, #32
 800820a:	d00c      	beq.n	8008226 <UART_SetConfig+0x1c2>
 800820c:	d820      	bhi.n	8008250 <UART_SetConfig+0x1ec>
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <UART_SetConfig+0x1b4>
 8008212:	2b10      	cmp	r3, #16
 8008214:	d00e      	beq.n	8008234 <UART_SetConfig+0x1d0>
 8008216:	e01b      	b.n	8008250 <UART_SetConfig+0x1ec>
 8008218:	231b      	movs	r3, #27
 800821a:	2220      	movs	r2, #32
 800821c:	189b      	adds	r3, r3, r2
 800821e:	19db      	adds	r3, r3, r7
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e0e6      	b.n	80083f4 <UART_SetConfig+0x390>
 8008226:	231b      	movs	r3, #27
 8008228:	2220      	movs	r2, #32
 800822a:	189b      	adds	r3, r3, r2
 800822c:	19db      	adds	r3, r3, r7
 800822e:	2202      	movs	r2, #2
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e0df      	b.n	80083f4 <UART_SetConfig+0x390>
 8008234:	231b      	movs	r3, #27
 8008236:	2220      	movs	r2, #32
 8008238:	189b      	adds	r3, r3, r2
 800823a:	19db      	adds	r3, r3, r7
 800823c:	2204      	movs	r2, #4
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e0d8      	b.n	80083f4 <UART_SetConfig+0x390>
 8008242:	231b      	movs	r3, #27
 8008244:	2220      	movs	r2, #32
 8008246:	189b      	adds	r3, r3, r2
 8008248:	19db      	adds	r3, r3, r7
 800824a:	2208      	movs	r2, #8
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e0d1      	b.n	80083f4 <UART_SetConfig+0x390>
 8008250:	231b      	movs	r3, #27
 8008252:	2220      	movs	r2, #32
 8008254:	189b      	adds	r3, r3, r2
 8008256:	19db      	adds	r3, r3, r7
 8008258:	2210      	movs	r2, #16
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e0ca      	b.n	80083f4 <UART_SetConfig+0x390>
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a57      	ldr	r2, [pc, #348]	; (80083c0 <UART_SetConfig+0x35c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d106      	bne.n	8008276 <UART_SetConfig+0x212>
 8008268:	231b      	movs	r3, #27
 800826a:	2220      	movs	r2, #32
 800826c:	189b      	adds	r3, r3, r2
 800826e:	19db      	adds	r3, r3, r7
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e0be      	b.n	80083f4 <UART_SetConfig+0x390>
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a52      	ldr	r2, [pc, #328]	; (80083c4 <UART_SetConfig+0x360>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d106      	bne.n	800828e <UART_SetConfig+0x22a>
 8008280:	231b      	movs	r3, #27
 8008282:	2220      	movs	r2, #32
 8008284:	189b      	adds	r3, r3, r2
 8008286:	19db      	adds	r3, r3, r7
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e0b2      	b.n	80083f4 <UART_SetConfig+0x390>
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a4d      	ldr	r2, [pc, #308]	; (80083c8 <UART_SetConfig+0x364>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d106      	bne.n	80082a6 <UART_SetConfig+0x242>
 8008298:	231b      	movs	r3, #27
 800829a:	2220      	movs	r2, #32
 800829c:	189b      	adds	r3, r3, r2
 800829e:	19db      	adds	r3, r3, r7
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e0a6      	b.n	80083f4 <UART_SetConfig+0x390>
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3e      	ldr	r2, [pc, #248]	; (80083a4 <UART_SetConfig+0x340>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d13e      	bne.n	800832e <UART_SetConfig+0x2ca>
 80082b0:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <UART_SetConfig+0x350>)
 80082b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b4:	23c0      	movs	r3, #192	; 0xc0
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	4013      	ands	r3, r2
 80082ba:	22c0      	movs	r2, #192	; 0xc0
 80082bc:	0112      	lsls	r2, r2, #4
 80082be:	4293      	cmp	r3, r2
 80082c0:	d027      	beq.n	8008312 <UART_SetConfig+0x2ae>
 80082c2:	22c0      	movs	r2, #192	; 0xc0
 80082c4:	0112      	lsls	r2, r2, #4
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d82a      	bhi.n	8008320 <UART_SetConfig+0x2bc>
 80082ca:	2280      	movs	r2, #128	; 0x80
 80082cc:	0112      	lsls	r2, r2, #4
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d011      	beq.n	80082f6 <UART_SetConfig+0x292>
 80082d2:	2280      	movs	r2, #128	; 0x80
 80082d4:	0112      	lsls	r2, r2, #4
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d822      	bhi.n	8008320 <UART_SetConfig+0x2bc>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <UART_SetConfig+0x284>
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	00d2      	lsls	r2, r2, #3
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <UART_SetConfig+0x2a0>
 80082e6:	e01b      	b.n	8008320 <UART_SetConfig+0x2bc>
 80082e8:	231b      	movs	r3, #27
 80082ea:	2220      	movs	r2, #32
 80082ec:	189b      	adds	r3, r3, r2
 80082ee:	19db      	adds	r3, r3, r7
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e07e      	b.n	80083f4 <UART_SetConfig+0x390>
 80082f6:	231b      	movs	r3, #27
 80082f8:	2220      	movs	r2, #32
 80082fa:	189b      	adds	r3, r3, r2
 80082fc:	19db      	adds	r3, r3, r7
 80082fe:	2202      	movs	r2, #2
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	e077      	b.n	80083f4 <UART_SetConfig+0x390>
 8008304:	231b      	movs	r3, #27
 8008306:	2220      	movs	r2, #32
 8008308:	189b      	adds	r3, r3, r2
 800830a:	19db      	adds	r3, r3, r7
 800830c:	2204      	movs	r2, #4
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e070      	b.n	80083f4 <UART_SetConfig+0x390>
 8008312:	231b      	movs	r3, #27
 8008314:	2220      	movs	r2, #32
 8008316:	189b      	adds	r3, r3, r2
 8008318:	19db      	adds	r3, r3, r7
 800831a:	2208      	movs	r2, #8
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e069      	b.n	80083f4 <UART_SetConfig+0x390>
 8008320:	231b      	movs	r3, #27
 8008322:	2220      	movs	r2, #32
 8008324:	189b      	adds	r3, r3, r2
 8008326:	19db      	adds	r3, r3, r7
 8008328:	2210      	movs	r2, #16
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	e062      	b.n	80083f4 <UART_SetConfig+0x390>
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <UART_SetConfig+0x344>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d157      	bne.n	80083e8 <UART_SetConfig+0x384>
 8008338:	4b1e      	ldr	r3, [pc, #120]	; (80083b4 <UART_SetConfig+0x350>)
 800833a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800833c:	23c0      	movs	r3, #192	; 0xc0
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4013      	ands	r3, r2
 8008342:	22c0      	movs	r2, #192	; 0xc0
 8008344:	0092      	lsls	r2, r2, #2
 8008346:	4293      	cmp	r3, r2
 8008348:	d040      	beq.n	80083cc <UART_SetConfig+0x368>
 800834a:	22c0      	movs	r2, #192	; 0xc0
 800834c:	0092      	lsls	r2, r2, #2
 800834e:	4293      	cmp	r3, r2
 8008350:	d843      	bhi.n	80083da <UART_SetConfig+0x376>
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	0092      	lsls	r2, r2, #2
 8008356:	4293      	cmp	r3, r2
 8008358:	d011      	beq.n	800837e <UART_SetConfig+0x31a>
 800835a:	2280      	movs	r2, #128	; 0x80
 800835c:	0092      	lsls	r2, r2, #2
 800835e:	4293      	cmp	r3, r2
 8008360:	d83b      	bhi.n	80083da <UART_SetConfig+0x376>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <UART_SetConfig+0x30c>
 8008366:	2280      	movs	r2, #128	; 0x80
 8008368:	0052      	lsls	r2, r2, #1
 800836a:	4293      	cmp	r3, r2
 800836c:	d00e      	beq.n	800838c <UART_SetConfig+0x328>
 800836e:	e034      	b.n	80083da <UART_SetConfig+0x376>
 8008370:	231b      	movs	r3, #27
 8008372:	2220      	movs	r2, #32
 8008374:	189b      	adds	r3, r3, r2
 8008376:	19db      	adds	r3, r3, r7
 8008378:	2200      	movs	r2, #0
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e03a      	b.n	80083f4 <UART_SetConfig+0x390>
 800837e:	231b      	movs	r3, #27
 8008380:	2220      	movs	r2, #32
 8008382:	189b      	adds	r3, r3, r2
 8008384:	19db      	adds	r3, r3, r7
 8008386:	2202      	movs	r2, #2
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e033      	b.n	80083f4 <UART_SetConfig+0x390>
 800838c:	231b      	movs	r3, #27
 800838e:	2220      	movs	r2, #32
 8008390:	189b      	adds	r3, r3, r2
 8008392:	19db      	adds	r3, r3, r7
 8008394:	2204      	movs	r2, #4
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e02c      	b.n	80083f4 <UART_SetConfig+0x390>
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	cfff69f3 	.word	0xcfff69f3
 80083a0:	ffffcfff 	.word	0xffffcfff
 80083a4:	40008000 	.word	0x40008000
 80083a8:	40008400 	.word	0x40008400
 80083ac:	11fff4ff 	.word	0x11fff4ff
 80083b0:	40013800 	.word	0x40013800
 80083b4:	40021000 	.word	0x40021000
 80083b8:	40004400 	.word	0x40004400
 80083bc:	40004800 	.word	0x40004800
 80083c0:	40004c00 	.word	0x40004c00
 80083c4:	40005000 	.word	0x40005000
 80083c8:	40013c00 	.word	0x40013c00
 80083cc:	231b      	movs	r3, #27
 80083ce:	2220      	movs	r2, #32
 80083d0:	189b      	adds	r3, r3, r2
 80083d2:	19db      	adds	r3, r3, r7
 80083d4:	2208      	movs	r2, #8
 80083d6:	701a      	strb	r2, [r3, #0]
 80083d8:	e00c      	b.n	80083f4 <UART_SetConfig+0x390>
 80083da:	231b      	movs	r3, #27
 80083dc:	2220      	movs	r2, #32
 80083de:	189b      	adds	r3, r3, r2
 80083e0:	19db      	adds	r3, r3, r7
 80083e2:	2210      	movs	r2, #16
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e005      	b.n	80083f4 <UART_SetConfig+0x390>
 80083e8:	231b      	movs	r3, #27
 80083ea:	2220      	movs	r2, #32
 80083ec:	189b      	adds	r3, r3, r2
 80083ee:	19db      	adds	r3, r3, r7
 80083f0:	2210      	movs	r2, #16
 80083f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4ac1      	ldr	r2, [pc, #772]	; (8008700 <UART_SetConfig+0x69c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d005      	beq.n	800840a <UART_SetConfig+0x3a6>
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4ac0      	ldr	r2, [pc, #768]	; (8008704 <UART_SetConfig+0x6a0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d000      	beq.n	800840a <UART_SetConfig+0x3a6>
 8008408:	e093      	b.n	8008532 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800840a:	231b      	movs	r3, #27
 800840c:	2220      	movs	r2, #32
 800840e:	189b      	adds	r3, r3, r2
 8008410:	19db      	adds	r3, r3, r7
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d015      	beq.n	8008444 <UART_SetConfig+0x3e0>
 8008418:	dc18      	bgt.n	800844c <UART_SetConfig+0x3e8>
 800841a:	2b04      	cmp	r3, #4
 800841c:	d00d      	beq.n	800843a <UART_SetConfig+0x3d6>
 800841e:	dc15      	bgt.n	800844c <UART_SetConfig+0x3e8>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <UART_SetConfig+0x3c6>
 8008424:	2b02      	cmp	r3, #2
 8008426:	d005      	beq.n	8008434 <UART_SetConfig+0x3d0>
 8008428:	e010      	b.n	800844c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842a:	f7fd f9ed 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 800842e:	0003      	movs	r3, r0
 8008430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008432:	e014      	b.n	800845e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008434:	4bb4      	ldr	r3, [pc, #720]	; (8008708 <UART_SetConfig+0x6a4>)
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008438:	e011      	b.n	800845e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843a:	f7fd f959 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 800843e:	0003      	movs	r3, r0
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008442:	e00c      	b.n	800845e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008444:	2380      	movs	r3, #128	; 0x80
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800844a:	e008      	b.n	800845e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008450:	231a      	movs	r3, #26
 8008452:	2220      	movs	r2, #32
 8008454:	189b      	adds	r3, r3, r2
 8008456:	19db      	adds	r3, r3, r7
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
        break;
 800845c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d100      	bne.n	8008466 <UART_SetConfig+0x402>
 8008464:	e135      	b.n	80086d2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800846a:	4ba8      	ldr	r3, [pc, #672]	; (800870c <UART_SetConfig+0x6a8>)
 800846c:	0052      	lsls	r2, r2, #1
 800846e:	5ad3      	ldrh	r3, [r2, r3]
 8008470:	0019      	movs	r1, r3
 8008472:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008474:	f7f7 fe62 	bl	800013c <__udivsi3>
 8008478:	0003      	movs	r3, r0
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	0013      	movs	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	189b      	adds	r3, r3, r2
 8008486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008488:	429a      	cmp	r2, r3
 800848a:	d305      	bcc.n	8008498 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008494:	429a      	cmp	r2, r3
 8008496:	d906      	bls.n	80084a6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008498:	231a      	movs	r3, #26
 800849a:	2220      	movs	r2, #32
 800849c:	189b      	adds	r3, r3, r2
 800849e:	19db      	adds	r3, r3, r7
 80084a0:	2201      	movs	r2, #1
 80084a2:	701a      	strb	r2, [r3, #0]
 80084a4:	e044      	b.n	8008530 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	2300      	movs	r3, #0
 80084ac:	61fb      	str	r3, [r7, #28]
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084b2:	4b96      	ldr	r3, [pc, #600]	; (800870c <UART_SetConfig+0x6a8>)
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	5ad3      	ldrh	r3, [r2, r3]
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	69b8      	ldr	r0, [r7, #24]
 80084c4:	69f9      	ldr	r1, [r7, #28]
 80084c6:	f7f7 ffed 	bl	80004a4 <__aeabi_uldivmod>
 80084ca:	0002      	movs	r2, r0
 80084cc:	000b      	movs	r3, r1
 80084ce:	0e11      	lsrs	r1, r2, #24
 80084d0:	021d      	lsls	r5, r3, #8
 80084d2:	430d      	orrs	r5, r1
 80084d4:	0214      	lsls	r4, r2, #8
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	68b8      	ldr	r0, [r7, #8]
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	1900      	adds	r0, r0, r4
 80084e8:	4169      	adcs	r1, r5
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	2300      	movs	r3, #0
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f7f7 ffd4 	bl	80004a4 <__aeabi_uldivmod>
 80084fc:	0002      	movs	r2, r0
 80084fe:	000b      	movs	r3, r1
 8008500:	0013      	movs	r3, r2
 8008502:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008506:	23c0      	movs	r3, #192	; 0xc0
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	429a      	cmp	r2, r3
 800850c:	d309      	bcc.n	8008522 <UART_SetConfig+0x4be>
 800850e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	035b      	lsls	r3, r3, #13
 8008514:	429a      	cmp	r2, r3
 8008516:	d204      	bcs.n	8008522 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800851e:	60da      	str	r2, [r3, #12]
 8008520:	e006      	b.n	8008530 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008522:	231a      	movs	r3, #26
 8008524:	2220      	movs	r2, #32
 8008526:	189b      	adds	r3, r3, r2
 8008528:	19db      	adds	r3, r3, r7
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800852e:	e0d0      	b.n	80086d2 <UART_SetConfig+0x66e>
 8008530:	e0cf      	b.n	80086d2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	69da      	ldr	r2, [r3, #28]
 8008536:	2380      	movs	r3, #128	; 0x80
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	429a      	cmp	r2, r3
 800853c:	d000      	beq.n	8008540 <UART_SetConfig+0x4dc>
 800853e:	e070      	b.n	8008622 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008540:	231b      	movs	r3, #27
 8008542:	2220      	movs	r2, #32
 8008544:	189b      	adds	r3, r3, r2
 8008546:	19db      	adds	r3, r3, r7
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b08      	cmp	r3, #8
 800854c:	d015      	beq.n	800857a <UART_SetConfig+0x516>
 800854e:	dc18      	bgt.n	8008582 <UART_SetConfig+0x51e>
 8008550:	2b04      	cmp	r3, #4
 8008552:	d00d      	beq.n	8008570 <UART_SetConfig+0x50c>
 8008554:	dc15      	bgt.n	8008582 <UART_SetConfig+0x51e>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <UART_SetConfig+0x4fc>
 800855a:	2b02      	cmp	r3, #2
 800855c:	d005      	beq.n	800856a <UART_SetConfig+0x506>
 800855e:	e010      	b.n	8008582 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008560:	f7fd f952 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8008564:	0003      	movs	r3, r0
 8008566:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008568:	e014      	b.n	8008594 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856a:	4b67      	ldr	r3, [pc, #412]	; (8008708 <UART_SetConfig+0x6a4>)
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800856e:	e011      	b.n	8008594 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008570:	f7fd f8be 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8008574:	0003      	movs	r3, r0
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008578:	e00c      	b.n	8008594 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008580:	e008      	b.n	8008594 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008582:	2300      	movs	r3, #0
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008586:	231a      	movs	r3, #26
 8008588:	2220      	movs	r2, #32
 800858a:	189b      	adds	r3, r3, r2
 800858c:	19db      	adds	r3, r3, r7
 800858e:	2201      	movs	r2, #1
 8008590:	701a      	strb	r2, [r3, #0]
        break;
 8008592:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008596:	2b00      	cmp	r3, #0
 8008598:	d100      	bne.n	800859c <UART_SetConfig+0x538>
 800859a:	e09a      	b.n	80086d2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a0:	4b5a      	ldr	r3, [pc, #360]	; (800870c <UART_SetConfig+0x6a8>)
 80085a2:	0052      	lsls	r2, r2, #1
 80085a4:	5ad3      	ldrh	r3, [r2, r3]
 80085a6:	0019      	movs	r1, r3
 80085a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085aa:	f7f7 fdc7 	bl	800013c <__udivsi3>
 80085ae:	0003      	movs	r3, r0
 80085b0:	005a      	lsls	r2, r3, #1
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	085b      	lsrs	r3, r3, #1
 80085b8:	18d2      	adds	r2, r2, r3
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	0019      	movs	r1, r3
 80085c0:	0010      	movs	r0, r2
 80085c2:	f7f7 fdbb 	bl	800013c <__udivsi3>
 80085c6:	0003      	movs	r3, r0
 80085c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	2b0f      	cmp	r3, #15
 80085ce:	d921      	bls.n	8008614 <UART_SetConfig+0x5b0>
 80085d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	025b      	lsls	r3, r3, #9
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d21c      	bcs.n	8008614 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	b29a      	uxth	r2, r3
 80085de:	200e      	movs	r0, #14
 80085e0:	2420      	movs	r4, #32
 80085e2:	1903      	adds	r3, r0, r4
 80085e4:	19db      	adds	r3, r3, r7
 80085e6:	210f      	movs	r1, #15
 80085e8:	438a      	bics	r2, r1
 80085ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	085b      	lsrs	r3, r3, #1
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2207      	movs	r2, #7
 80085f4:	4013      	ands	r3, r2
 80085f6:	b299      	uxth	r1, r3
 80085f8:	1903      	adds	r3, r0, r4
 80085fa:	19db      	adds	r3, r3, r7
 80085fc:	1902      	adds	r2, r0, r4
 80085fe:	19d2      	adds	r2, r2, r7
 8008600:	8812      	ldrh	r2, [r2, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	1902      	adds	r2, r0, r4
 800860c:	19d2      	adds	r2, r2, r7
 800860e:	8812      	ldrh	r2, [r2, #0]
 8008610:	60da      	str	r2, [r3, #12]
 8008612:	e05e      	b.n	80086d2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008614:	231a      	movs	r3, #26
 8008616:	2220      	movs	r2, #32
 8008618:	189b      	adds	r3, r3, r2
 800861a:	19db      	adds	r3, r3, r7
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e057      	b.n	80086d2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008622:	231b      	movs	r3, #27
 8008624:	2220      	movs	r2, #32
 8008626:	189b      	adds	r3, r3, r2
 8008628:	19db      	adds	r3, r3, r7
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d015      	beq.n	800865c <UART_SetConfig+0x5f8>
 8008630:	dc18      	bgt.n	8008664 <UART_SetConfig+0x600>
 8008632:	2b04      	cmp	r3, #4
 8008634:	d00d      	beq.n	8008652 <UART_SetConfig+0x5ee>
 8008636:	dc15      	bgt.n	8008664 <UART_SetConfig+0x600>
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <UART_SetConfig+0x5de>
 800863c:	2b02      	cmp	r3, #2
 800863e:	d005      	beq.n	800864c <UART_SetConfig+0x5e8>
 8008640:	e010      	b.n	8008664 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008642:	f7fd f8e1 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8008646:	0003      	movs	r3, r0
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800864a:	e014      	b.n	8008676 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800864c:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <UART_SetConfig+0x6a4>)
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008650:	e011      	b.n	8008676 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008652:	f7fd f84d 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8008656:	0003      	movs	r3, r0
 8008658:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800865a:	e00c      	b.n	8008676 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	021b      	lsls	r3, r3, #8
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008662:	e008      	b.n	8008676 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008668:	231a      	movs	r3, #26
 800866a:	2220      	movs	r2, #32
 800866c:	189b      	adds	r3, r3, r2
 800866e:	19db      	adds	r3, r3, r7
 8008670:	2201      	movs	r2, #1
 8008672:	701a      	strb	r2, [r3, #0]
        break;
 8008674:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02a      	beq.n	80086d2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008680:	4b22      	ldr	r3, [pc, #136]	; (800870c <UART_SetConfig+0x6a8>)
 8008682:	0052      	lsls	r2, r2, #1
 8008684:	5ad3      	ldrh	r3, [r2, r3]
 8008686:	0019      	movs	r1, r3
 8008688:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800868a:	f7f7 fd57 	bl	800013c <__udivsi3>
 800868e:	0003      	movs	r3, r0
 8008690:	001a      	movs	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	085b      	lsrs	r3, r3, #1
 8008698:	18d2      	adds	r2, r2, r3
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	0019      	movs	r1, r3
 80086a0:	0010      	movs	r0, r2
 80086a2:	f7f7 fd4b 	bl	800013c <__udivsi3>
 80086a6:	0003      	movs	r3, r0
 80086a8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2b0f      	cmp	r3, #15
 80086ae:	d90a      	bls.n	80086c6 <UART_SetConfig+0x662>
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	2380      	movs	r3, #128	; 0x80
 80086b4:	025b      	lsls	r3, r3, #9
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d205      	bcs.n	80086c6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	b29a      	uxth	r2, r3
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	60da      	str	r2, [r3, #12]
 80086c4:	e005      	b.n	80086d2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80086c6:	231a      	movs	r3, #26
 80086c8:	2220      	movs	r2, #32
 80086ca:	189b      	adds	r3, r3, r2
 80086cc:	19db      	adds	r3, r3, r7
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	226a      	movs	r2, #106	; 0x6a
 80086d6:	2101      	movs	r1, #1
 80086d8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	2268      	movs	r2, #104	; 0x68
 80086de:	2101      	movs	r1, #1
 80086e0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	2200      	movs	r2, #0
 80086e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ea:	2200      	movs	r2, #0
 80086ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086ee:	231a      	movs	r3, #26
 80086f0:	2220      	movs	r2, #32
 80086f2:	189b      	adds	r3, r3, r2
 80086f4:	19db      	adds	r3, r3, r7
 80086f6:	781b      	ldrb	r3, [r3, #0]
}
 80086f8:	0018      	movs	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	b010      	add	sp, #64	; 0x40
 80086fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008700:	40008000 	.word	0x40008000
 8008704:	40008400 	.word	0x40008400
 8008708:	00f42400 	.word	0x00f42400
 800870c:	080158f0 	.word	0x080158f0

08008710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	2208      	movs	r2, #8
 800871e:	4013      	ands	r3, r2
 8008720:	d00b      	beq.n	800873a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	4a4a      	ldr	r2, [pc, #296]	; (8008854 <UART_AdvFeatureConfig+0x144>)
 800872a:	4013      	ands	r3, r2
 800872c:	0019      	movs	r1, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	2201      	movs	r2, #1
 8008740:	4013      	ands	r3, r2
 8008742:	d00b      	beq.n	800875c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4a43      	ldr	r2, [pc, #268]	; (8008858 <UART_AdvFeatureConfig+0x148>)
 800874c:	4013      	ands	r3, r2
 800874e:	0019      	movs	r1, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	2202      	movs	r2, #2
 8008762:	4013      	ands	r3, r2
 8008764:	d00b      	beq.n	800877e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a3b      	ldr	r2, [pc, #236]	; (800885c <UART_AdvFeatureConfig+0x14c>)
 800876e:	4013      	ands	r3, r2
 8008770:	0019      	movs	r1, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	2204      	movs	r2, #4
 8008784:	4013      	ands	r3, r2
 8008786:	d00b      	beq.n	80087a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	4a34      	ldr	r2, [pc, #208]	; (8008860 <UART_AdvFeatureConfig+0x150>)
 8008790:	4013      	ands	r3, r2
 8008792:	0019      	movs	r1, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	2210      	movs	r2, #16
 80087a6:	4013      	ands	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4a2c      	ldr	r2, [pc, #176]	; (8008864 <UART_AdvFeatureConfig+0x154>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	0019      	movs	r1, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	2220      	movs	r2, #32
 80087c8:	4013      	ands	r3, r2
 80087ca:	d00b      	beq.n	80087e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	4a25      	ldr	r2, [pc, #148]	; (8008868 <UART_AdvFeatureConfig+0x158>)
 80087d4:	4013      	ands	r3, r2
 80087d6:	0019      	movs	r1, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	2240      	movs	r2, #64	; 0x40
 80087ea:	4013      	ands	r3, r2
 80087ec:	d01d      	beq.n	800882a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a1d      	ldr	r2, [pc, #116]	; (800886c <UART_AdvFeatureConfig+0x15c>)
 80087f6:	4013      	ands	r3, r2
 80087f8:	0019      	movs	r1, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	035b      	lsls	r3, r3, #13
 800880e:	429a      	cmp	r2, r3
 8008810:	d10b      	bne.n	800882a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	4a15      	ldr	r2, [pc, #84]	; (8008870 <UART_AdvFeatureConfig+0x160>)
 800881a:	4013      	ands	r3, r2
 800881c:	0019      	movs	r1, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	4013      	ands	r3, r2
 8008832:	d00b      	beq.n	800884c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	4a0e      	ldr	r2, [pc, #56]	; (8008874 <UART_AdvFeatureConfig+0x164>)
 800883c:	4013      	ands	r3, r2
 800883e:	0019      	movs	r1, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	605a      	str	r2, [r3, #4]
  }
}
 800884c:	46c0      	nop			; (mov r8, r8)
 800884e:	46bd      	mov	sp, r7
 8008850:	b002      	add	sp, #8
 8008852:	bd80      	pop	{r7, pc}
 8008854:	ffff7fff 	.word	0xffff7fff
 8008858:	fffdffff 	.word	0xfffdffff
 800885c:	fffeffff 	.word	0xfffeffff
 8008860:	fffbffff 	.word	0xfffbffff
 8008864:	ffffefff 	.word	0xffffefff
 8008868:	ffffdfff 	.word	0xffffdfff
 800886c:	ffefffff 	.word	0xffefffff
 8008870:	ff9fffff 	.word	0xff9fffff
 8008874:	fff7ffff 	.word	0xfff7ffff

08008878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b092      	sub	sp, #72	; 0x48
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2290      	movs	r2, #144	; 0x90
 8008884:	2100      	movs	r1, #0
 8008886:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008888:	f7fb fe32 	bl	80044f0 <HAL_GetTick>
 800888c:	0003      	movs	r3, r0
 800888e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2208      	movs	r2, #8
 8008898:	4013      	ands	r3, r2
 800889a:	2b08      	cmp	r3, #8
 800889c:	d12d      	bne.n	80088fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800889e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a0:	2280      	movs	r2, #128	; 0x80
 80088a2:	0391      	lsls	r1, r2, #14
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4a47      	ldr	r2, [pc, #284]	; (80089c4 <UART_CheckIdleState+0x14c>)
 80088a8:	9200      	str	r2, [sp, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f000 f88e 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 80088b0:	1e03      	subs	r3, r0, #0
 80088b2:	d022      	beq.n	80088fa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b4:	f3ef 8310 	mrs	r3, PRIMASK
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80088be:	2301      	movs	r3, #1
 80088c0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	f383 8810 	msr	PRIMASK, r3
}
 80088c8:	46c0      	nop			; (mov r8, r8)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2180      	movs	r1, #128	; 0x80
 80088d6:	438a      	bics	r2, r1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e0:	f383 8810 	msr	PRIMASK, r3
}
 80088e4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2288      	movs	r2, #136	; 0x88
 80088ea:	2120      	movs	r1, #32
 80088ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2284      	movs	r2, #132	; 0x84
 80088f2:	2100      	movs	r1, #0
 80088f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e060      	b.n	80089bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2204      	movs	r2, #4
 8008902:	4013      	ands	r3, r2
 8008904:	2b04      	cmp	r3, #4
 8008906:	d146      	bne.n	8008996 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	03d1      	lsls	r1, r2, #15
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4a2c      	ldr	r2, [pc, #176]	; (80089c4 <UART_CheckIdleState+0x14c>)
 8008912:	9200      	str	r2, [sp, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	f000 f859 	bl	80089cc <UART_WaitOnFlagUntilTimeout>
 800891a:	1e03      	subs	r3, r0, #0
 800891c:	d03b      	beq.n	8008996 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891e:	f3ef 8310 	mrs	r3, PRIMASK
 8008922:	60fb      	str	r3, [r7, #12]
  return(result);
 8008924:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
 8008928:	2301      	movs	r3, #1
 800892a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f383 8810 	msr	PRIMASK, r3
}
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4922      	ldr	r1, [pc, #136]	; (80089c8 <UART_CheckIdleState+0x150>)
 8008940:	400a      	ands	r2, r1
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008946:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f383 8810 	msr	PRIMASK, r3
}
 800894e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	61bb      	str	r3, [r7, #24]
  return(result);
 8008956:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	633b      	str	r3, [r7, #48]	; 0x30
 800895a:	2301      	movs	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f383 8810 	msr	PRIMASK, r3
}
 8008964:	46c0      	nop			; (mov r8, r8)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2101      	movs	r1, #1
 8008972:	438a      	bics	r2, r1
 8008974:	609a      	str	r2, [r3, #8]
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f383 8810 	msr	PRIMASK, r3
}
 8008980:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	228c      	movs	r2, #140	; 0x8c
 8008986:	2120      	movs	r1, #32
 8008988:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2284      	movs	r2, #132	; 0x84
 800898e:	2100      	movs	r1, #0
 8008990:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e012      	b.n	80089bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2288      	movs	r2, #136	; 0x88
 800899a:	2120      	movs	r1, #32
 800899c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	228c      	movs	r2, #140	; 0x8c
 80089a2:	2120      	movs	r1, #32
 80089a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2284      	movs	r2, #132	; 0x84
 80089b6:	2100      	movs	r1, #0
 80089b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	0018      	movs	r0, r3
 80089be:	46bd      	mov	sp, r7
 80089c0:	b010      	add	sp, #64	; 0x40
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	01ffffff 	.word	0x01ffffff
 80089c8:	fffffedf 	.word	0xfffffedf

080089cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	1dfb      	adds	r3, r7, #7
 80089da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089dc:	e051      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	3301      	adds	r3, #1
 80089e2:	d04e      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e4:	f7fb fd84 	bl	80044f0 <HAL_GetTick>
 80089e8:	0002      	movs	r2, r0
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d302      	bcc.n	80089fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e051      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2204      	movs	r2, #4
 8008a06:	4013      	ands	r3, r2
 8008a08:	d03b      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b80      	cmp	r3, #128	; 0x80
 8008a0e:	d038      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d035      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d111      	bne.n	8008a48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2208      	movs	r2, #8
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f000 f83c 	bl	8008aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2290      	movs	r2, #144	; 0x90
 8008a38:	2108      	movs	r1, #8
 8008a3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2284      	movs	r2, #132	; 0x84
 8008a40:	2100      	movs	r1, #0
 8008a42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e02c      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69da      	ldr	r2, [r3, #28]
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	401a      	ands	r2, r3
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d112      	bne.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2280      	movs	r2, #128	; 0x80
 8008a62:	0112      	lsls	r2, r2, #4
 8008a64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f000 f81f 	bl	8008aac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2290      	movs	r2, #144	; 0x90
 8008a72:	2120      	movs	r1, #32
 8008a74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2284      	movs	r2, #132	; 0x84
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e00f      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	425a      	negs	r2, r3
 8008a92:	4153      	adcs	r3, r2
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	001a      	movs	r2, r3
 8008a98:	1dfb      	adds	r3, r7, #7
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d09e      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	b004      	add	sp, #16
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08e      	sub	sp, #56	; 0x38
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ab8:	617b      	str	r3, [r7, #20]
  return(result);
 8008aba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008abc:	637b      	str	r3, [r7, #52]	; 0x34
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f383 8810 	msr	PRIMASK, r3
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4926      	ldr	r1, [pc, #152]	; (8008b70 <UART_EndRxTransfer+0xc4>)
 8008ad6:	400a      	ands	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f383 8810 	msr	PRIMASK, r3
}
 8008ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aea:	623b      	str	r3, [r7, #32]
  return(result);
 8008aec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aee:	633b      	str	r3, [r7, #48]	; 0x30
 8008af0:	2301      	movs	r3, #1
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f383 8810 	msr	PRIMASK, r3
}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	491b      	ldr	r1, [pc, #108]	; (8008b74 <UART_EndRxTransfer+0xc8>)
 8008b08:	400a      	ands	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	f383 8810 	msr	PRIMASK, r3
}
 8008b16:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d118      	bne.n	8008b52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b20:	f3ef 8310 	mrs	r3, PRIMASK
 8008b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f383 8810 	msr	PRIMASK, r3
}
 8008b34:	46c0      	nop			; (mov r8, r8)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2110      	movs	r1, #16
 8008b42:	438a      	bics	r2, r1
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f383 8810 	msr	PRIMASK, r3
}
 8008b50:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	228c      	movs	r2, #140	; 0x8c
 8008b56:	2120      	movs	r1, #32
 8008b58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b00e      	add	sp, #56	; 0x38
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			; (mov r8, r8)
 8008b70:	fffffedf 	.word	0xfffffedf
 8008b74:	effffffe 	.word	0xeffffffe

08008b78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2284      	movs	r2, #132	; 0x84
 8008b84:	5c9b      	ldrb	r3, [r3, r2]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d101      	bne.n	8008b8e <HAL_UARTEx_DisableFifoMode+0x16>
 8008b8a:	2302      	movs	r3, #2
 8008b8c:	e027      	b.n	8008bde <HAL_UARTEx_DisableFifoMode+0x66>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2284      	movs	r2, #132	; 0x84
 8008b92:	2101      	movs	r1, #1
 8008b94:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2288      	movs	r2, #136	; 0x88
 8008b9a:	2124      	movs	r1, #36	; 0x24
 8008b9c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	438a      	bics	r2, r1
 8008bb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a0b      	ldr	r2, [pc, #44]	; (8008be8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008bba:	4013      	ands	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2288      	movs	r2, #136	; 0x88
 8008bd0:	2120      	movs	r1, #32
 8008bd2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2284      	movs	r2, #132	; 0x84
 8008bd8:	2100      	movs	r1, #0
 8008bda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	0018      	movs	r0, r3
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b004      	add	sp, #16
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	dfffffff 	.word	0xdfffffff

08008bec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2284      	movs	r2, #132	; 0x84
 8008bfa:	5c9b      	ldrb	r3, [r3, r2]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e02e      	b.n	8008c62 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2284      	movs	r2, #132	; 0x84
 8008c08:	2101      	movs	r1, #1
 8008c0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2288      	movs	r2, #136	; 0x88
 8008c10:	2124      	movs	r1, #36	; 0x24
 8008c12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2101      	movs	r1, #1
 8008c28:	438a      	bics	r2, r1
 8008c2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	00db      	lsls	r3, r3, #3
 8008c34:	08d9      	lsrs	r1, r3, #3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	0018      	movs	r0, r3
 8008c44:	f000 f854 	bl	8008cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2288      	movs	r2, #136	; 0x88
 8008c54:	2120      	movs	r1, #32
 8008c56:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2284      	movs	r2, #132	; 0x84
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	0018      	movs	r0, r3
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b004      	add	sp, #16
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2284      	movs	r2, #132	; 0x84
 8008c7a:	5c9b      	ldrb	r3, [r3, r2]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e02f      	b.n	8008ce4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2284      	movs	r2, #132	; 0x84
 8008c88:	2101      	movs	r1, #1
 8008c8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2288      	movs	r2, #136	; 0x88
 8008c90:	2124      	movs	r1, #36	; 0x24
 8008c92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	438a      	bics	r2, r1
 8008caa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	4a0e      	ldr	r2, [pc, #56]	; (8008cec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	0019      	movs	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	683a      	ldr	r2, [r7, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	0018      	movs	r0, r3
 8008cc6:	f000 f813 	bl	8008cf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2288      	movs	r2, #136	; 0x88
 8008cd6:	2120      	movs	r1, #32
 8008cd8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2284      	movs	r2, #132	; 0x84
 8008cde:	2100      	movs	r1, #0
 8008ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	0018      	movs	r0, r3
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	b004      	add	sp, #16
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	f1ffffff 	.word	0xf1ffffff

08008cf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d108      	bne.n	8008d12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	226a      	movs	r2, #106	; 0x6a
 8008d04:	2101      	movs	r1, #1
 8008d06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2268      	movs	r2, #104	; 0x68
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d10:	e043      	b.n	8008d9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d12:	260f      	movs	r6, #15
 8008d14:	19bb      	adds	r3, r7, r6
 8008d16:	2208      	movs	r2, #8
 8008d18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d1a:	200e      	movs	r0, #14
 8008d1c:	183b      	adds	r3, r7, r0
 8008d1e:	2208      	movs	r2, #8
 8008d20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	0e5b      	lsrs	r3, r3, #25
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	240d      	movs	r4, #13
 8008d2e:	193b      	adds	r3, r7, r4
 8008d30:	2107      	movs	r1, #7
 8008d32:	400a      	ands	r2, r1
 8008d34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	0f5b      	lsrs	r3, r3, #29
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	250c      	movs	r5, #12
 8008d42:	197b      	adds	r3, r7, r5
 8008d44:	2107      	movs	r1, #7
 8008d46:	400a      	ands	r2, r1
 8008d48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d4a:	183b      	adds	r3, r7, r0
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	197a      	adds	r2, r7, r5
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	4914      	ldr	r1, [pc, #80]	; (8008da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d54:	5c8a      	ldrb	r2, [r1, r2]
 8008d56:	435a      	muls	r2, r3
 8008d58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d5a:	197b      	adds	r3, r7, r5
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	4a12      	ldr	r2, [pc, #72]	; (8008da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d62:	0019      	movs	r1, r3
 8008d64:	f7f7 fa74 	bl	8000250 <__divsi3>
 8008d68:	0003      	movs	r3, r0
 8008d6a:	b299      	uxth	r1, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	226a      	movs	r2, #106	; 0x6a
 8008d70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d72:	19bb      	adds	r3, r7, r6
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	193a      	adds	r2, r7, r4
 8008d78:	7812      	ldrb	r2, [r2, #0]
 8008d7a:	490a      	ldr	r1, [pc, #40]	; (8008da4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d7c:	5c8a      	ldrb	r2, [r1, r2]
 8008d7e:	435a      	muls	r2, r3
 8008d80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d82:	193b      	adds	r3, r7, r4
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	4a08      	ldr	r2, [pc, #32]	; (8008da8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d8a:	0019      	movs	r1, r3
 8008d8c:	f7f7 fa60 	bl	8000250 <__divsi3>
 8008d90:	0003      	movs	r3, r0
 8008d92:	b299      	uxth	r1, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2268      	movs	r2, #104	; 0x68
 8008d98:	5299      	strh	r1, [r3, r2]
}
 8008d9a:	46c0      	nop			; (mov r8, r8)
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	b005      	add	sp, #20
 8008da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da2:	46c0      	nop			; (mov r8, r8)
 8008da4:	08015908 	.word	0x08015908
 8008da8:	08015910 	.word	0x08015910

08008dac <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8008dac:	b5b0      	push	{r4, r5, r7, lr}
 8008dae:	b0e4      	sub	sp, #400	; 0x190
 8008db0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008db2:	24c8      	movs	r4, #200	; 0xc8
 8008db4:	193b      	adds	r3, r7, r4
 8008db6:	0018      	movs	r0, r3
 8008db8:	23c6      	movs	r3, #198	; 0xc6
 8008dba:	001a      	movs	r2, r3
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	f004 fa45 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <astronode_send_cfg_sr+0x64>)
 8008dc4:	25c8      	movs	r5, #200	; 0xc8
 8008dc6:	006d      	lsls	r5, r5, #1
 8008dc8:	195b      	adds	r3, r3, r5
 8008dca:	19db      	adds	r3, r3, r7
 8008dcc:	0018      	movs	r0, r3
 8008dce:	23c6      	movs	r3, #198	; 0xc6
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f004 fa3a 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008dd8:	193b      	adds	r3, r7, r4
 8008dda:	2210      	movs	r2, #16
 8008ddc:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008dde:	003a      	movs	r2, r7
 8008de0:	193b      	adds	r3, r7, r4
 8008de2:	0011      	movs	r1, r2
 8008de4:	0018      	movs	r0, r3
 8008de6:	f001 fa87 	bl	800a2f8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008dea:	4b09      	ldr	r3, [pc, #36]	; (8008e10 <astronode_send_cfg_sr+0x64>)
 8008dec:	195b      	adds	r3, r3, r5
 8008dee:	19db      	adds	r3, r3, r7
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b90      	cmp	r3, #144	; 0x90
 8008df4:	d104      	bne.n	8008e00 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <astronode_send_cfg_sr+0x68>)
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7fa f93d 	bl	8003078 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008dfe:	e003      	b.n	8008e08 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <astronode_send_cfg_sr+0x6c>)
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7fa f938 	bl	8003078 <send_debug_logs>
}
 8008e08:	46c0      	nop			; (mov r8, r8)
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b064      	add	sp, #400	; 0x190
 8008e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e10:	fffffe70 	.word	0xfffffe70
 8008e14:	0801432c 	.word	0x0801432c
 8008e18:	08014360 	.word	0x08014360

08008e1c <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b0e7      	sub	sp, #412	; 0x19c
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	0005      	movs	r5, r0
 8008e24:	000c      	movs	r4, r1
 8008e26:	0010      	movs	r0, r2
 8008e28:	0019      	movs	r1, r3
 8008e2a:	4b4b      	ldr	r3, [pc, #300]	; (8008f58 <astronode_send_cfg_wr+0x13c>)
 8008e2c:	26cc      	movs	r6, #204	; 0xcc
 8008e2e:	0076      	lsls	r6, r6, #1
 8008e30:	199b      	adds	r3, r3, r6
 8008e32:	19db      	adds	r3, r3, r7
 8008e34:	1c2a      	adds	r2, r5, #0
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <astronode_send_cfg_wr+0x140>)
 8008e3a:	0035      	movs	r5, r6
 8008e3c:	195b      	adds	r3, r3, r5
 8008e3e:	19db      	adds	r3, r3, r7
 8008e40:	1c22      	adds	r2, r4, #0
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	4b46      	ldr	r3, [pc, #280]	; (8008f60 <astronode_send_cfg_wr+0x144>)
 8008e46:	002c      	movs	r4, r5
 8008e48:	191b      	adds	r3, r3, r4
 8008e4a:	19db      	adds	r3, r3, r7
 8008e4c:	1c02      	adds	r2, r0, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	4b44      	ldr	r3, [pc, #272]	; (8008f64 <astronode_send_cfg_wr+0x148>)
 8008e52:	191b      	adds	r3, r3, r4
 8008e54:	19db      	adds	r3, r3, r7
 8008e56:	1c0a      	adds	r2, r1, #0
 8008e58:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008e5a:	25d0      	movs	r5, #208	; 0xd0
 8008e5c:	197b      	adds	r3, r7, r5
 8008e5e:	0018      	movs	r0, r3
 8008e60:	23c6      	movs	r3, #198	; 0xc6
 8008e62:	001a      	movs	r2, r3
 8008e64:	2100      	movs	r1, #0
 8008e66:	f004 f9f1 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8008e6a:	4b3f      	ldr	r3, [pc, #252]	; (8008f68 <astronode_send_cfg_wr+0x14c>)
 8008e6c:	191b      	adds	r3, r3, r4
 8008e6e:	19db      	adds	r3, r3, r7
 8008e70:	0018      	movs	r0, r3
 8008e72:	23c6      	movs	r3, #198	; 0xc6
 8008e74:	001a      	movs	r2, r3
 8008e76:	2100      	movs	r1, #0
 8008e78:	f004 f9e8 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008e7c:	0029      	movs	r1, r5
 8008e7e:	187b      	adds	r3, r7, r1
 8008e80:	2205      	movs	r2, #5
 8008e82:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008e84:	4b34      	ldr	r3, [pc, #208]	; (8008f58 <astronode_send_cfg_wr+0x13c>)
 8008e86:	191b      	adds	r3, r3, r4
 8008e88:	19db      	adds	r3, r3, r7
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	569a      	ldrsb	r2, [r3, r2]
 8008e8e:	4b33      	ldr	r3, [pc, #204]	; (8008f5c <astronode_send_cfg_wr+0x140>)
 8008e90:	191b      	adds	r3, r3, r4
 8008e92:	19db      	adds	r3, r3, r7
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008e9e:	4b30      	ldr	r3, [pc, #192]	; (8008f60 <astronode_send_cfg_wr+0x144>)
 8008ea0:	191b      	adds	r3, r3, r4
 8008ea2:	19db      	adds	r3, r3, r7
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008eae:	4b2d      	ldr	r3, [pc, #180]	; (8008f64 <astronode_send_cfg_wr+0x148>)
 8008eb0:	191b      	adds	r3, r3, r4
 8008eb2:	19db      	adds	r3, r3, r7
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	b25b      	sxtb	r3, r3
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008ec0:	187b      	adds	r3, r7, r1
 8008ec2:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008ec4:	23d4      	movs	r3, #212	; 0xd4
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	2508      	movs	r5, #8
 8008eca:	195b      	adds	r3, r3, r5
 8008ecc:	19db      	adds	r3, r3, r7
 8008ece:	2200      	movs	r2, #0
 8008ed0:	569a      	ldrsb	r2, [r3, r2]
 8008ed2:	23d6      	movs	r3, #214	; 0xd6
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	195b      	adds	r3, r3, r5
 8008ed8:	19db      	adds	r3, r3, r7
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	b25b      	sxtb	r3, r3
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008ee4:	23d8      	movs	r3, #216	; 0xd8
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	195b      	adds	r3, r3, r5
 8008eea:	19db      	adds	r3, r3, r7
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008ef6:	23da      	movs	r3, #218	; 0xda
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	195b      	adds	r3, r3, r5
 8008efc:	19db      	adds	r3, r3, r7
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	4313      	orrs	r3, r2
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008f0e:	0008      	movs	r0, r1
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	22c4      	movs	r2, #196	; 0xc4
 8008f14:	2103      	movs	r1, #3
 8008f16:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008f18:	002b      	movs	r3, r5
 8008f1a:	18fa      	adds	r2, r7, r3
 8008f1c:	183b      	adds	r3, r7, r0
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f001 f9e9 	bl	800a2f8 <astronode_transport_send_receive>
 8008f26:	0003      	movs	r3, r0
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d10f      	bne.n	8008f4c <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <astronode_send_cfg_wr+0x14c>)
 8008f2e:	191b      	adds	r3, r3, r4
 8008f30:	19db      	adds	r3, r3, r7
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2b85      	cmp	r3, #133	; 0x85
 8008f36:	d105      	bne.n	8008f44 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <astronode_send_cfg_wr+0x150>)
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7fa f89c 	bl	8003078 <send_debug_logs>
            return true ;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e004      	b.n	8008f4e <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <astronode_send_cfg_wr+0x154>)
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7fa f896 	bl	8003078 <send_debug_logs>
        }
    }
    return false ;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	0018      	movs	r0, r3
 8008f50:	46bd      	mov	sp, r7
 8008f52:	b067      	add	sp, #412	; 0x19c
 8008f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	fffffe6f 	.word	0xfffffe6f
 8008f5c:	fffffe6e 	.word	0xfffffe6e
 8008f60:	fffffe6d 	.word	0xfffffe6d
 8008f64:	fffffe6c 	.word	0xfffffe6c
 8008f68:	fffffe70 	.word	0xfffffe70
 8008f6c:	08014394 	.word	0x08014394
 8008f70:	080143c0 	.word	0x080143c0

08008f74 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f76:	b0ed      	sub	sp, #436	; 0x1b4
 8008f78:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008f7a:	21c8      	movs	r1, #200	; 0xc8
 8008f7c:	2318      	movs	r3, #24
 8008f7e:	18cb      	adds	r3, r1, r3
 8008f80:	19db      	adds	r3, r3, r7
 8008f82:	0018      	movs	r0, r3
 8008f84:	23c6      	movs	r3, #198	; 0xc6
 8008f86:	001a      	movs	r2, r3
 8008f88:	2100      	movs	r1, #0
 8008f8a:	f004 f95f 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8008f8e:	4b4a      	ldr	r3, [pc, #296]	; (80090b8 <astronode_send_mgi_rr+0x144>)
 8008f90:	26cc      	movs	r6, #204	; 0xcc
 8008f92:	0076      	lsls	r6, r6, #1
 8008f94:	199b      	adds	r3, r3, r6
 8008f96:	2218      	movs	r2, #24
 8008f98:	4694      	mov	ip, r2
 8008f9a:	44bc      	add	ip, r7
 8008f9c:	4463      	add	r3, ip
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	23c6      	movs	r3, #198	; 0xc6
 8008fa2:	001a      	movs	r2, r3
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f004 f951 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008faa:	21c8      	movs	r1, #200	; 0xc8
 8008fac:	2318      	movs	r3, #24
 8008fae:	18cb      	adds	r3, r1, r3
 8008fb0:	19db      	adds	r3, r3, r7
 8008fb2:	2219      	movs	r2, #25
 8008fb4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008fb6:	2318      	movs	r3, #24
 8008fb8:	18fa      	adds	r2, r7, r3
 8008fba:	2318      	movs	r3, #24
 8008fbc:	18cb      	adds	r3, r1, r3
 8008fbe:	19db      	adds	r3, r3, r7
 8008fc0:	0011      	movs	r1, r2
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f001 f998 	bl	800a2f8 <astronode_transport_send_receive>
 8008fc8:	0003      	movs	r3, r0
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d16f      	bne.n	80090ae <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8008fce:	4b3a      	ldr	r3, [pc, #232]	; (80090b8 <astronode_send_mgi_rr+0x144>)
 8008fd0:	0032      	movs	r2, r6
 8008fd2:	189b      	adds	r3, r3, r2
 8008fd4:	2118      	movs	r1, #24
 8008fd6:	468c      	mov	ip, r1
 8008fd8:	44bc      	add	ip, r7
 8008fda:	4463      	add	r3, ip
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b99      	cmp	r3, #153	; 0x99
 8008fe0:	d161      	bne.n	80090a6 <astronode_send_mgi_rr+0x132>
        {
 8008fe2:	466b      	mov	r3, sp
 8008fe4:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008fe6:	4b34      	ldr	r3, [pc, #208]	; (80090b8 <astronode_send_mgi_rr+0x144>)
 8008fe8:	189b      	adds	r3, r3, r2
 8008fea:	2218      	movs	r2, #24
 8008fec:	4694      	mov	ip, r2
 8008fee:	44bc      	add	ip, r7
 8008ff0:	4463      	add	r3, ip
 8008ff2:	22c4      	movs	r2, #196	; 0xc4
 8008ff4:	5a9b      	ldrh	r3, [r3, r2]
 8008ff6:	001a      	movs	r2, r3
 8008ff8:	3a01      	subs	r2, #1
 8008ffa:	21ca      	movs	r1, #202	; 0xca
 8008ffc:	0049      	lsls	r1, r1, #1
 8008ffe:	2018      	movs	r0, #24
 8009000:	1809      	adds	r1, r1, r0
 8009002:	19c9      	adds	r1, r1, r7
 8009004:	600a      	str	r2, [r1, #0]
 8009006:	001c      	movs	r4, r3
 8009008:	2200      	movs	r2, #0
 800900a:	0015      	movs	r5, r2
 800900c:	0020      	movs	r0, r4
 800900e:	0029      	movs	r1, r5
 8009010:	0004      	movs	r4, r0
 8009012:	0f62      	lsrs	r2, r4, #29
 8009014:	000c      	movs	r4, r1
 8009016:	00e4      	lsls	r4, r4, #3
 8009018:	617c      	str	r4, [r7, #20]
 800901a:	697c      	ldr	r4, [r7, #20]
 800901c:	4314      	orrs	r4, r2
 800901e:	617c      	str	r4, [r7, #20]
 8009020:	0001      	movs	r1, r0
 8009022:	00c9      	lsls	r1, r1, #3
 8009024:	6139      	str	r1, [r7, #16]
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	6838      	ldr	r0, [r7, #0]
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	0004      	movs	r4, r0
 8009032:	0f62      	lsrs	r2, r4, #29
 8009034:	000c      	movs	r4, r1
 8009036:	00e4      	lsls	r4, r4, #3
 8009038:	60fc      	str	r4, [r7, #12]
 800903a:	68fc      	ldr	r4, [r7, #12]
 800903c:	4314      	orrs	r4, r2
 800903e:	60fc      	str	r4, [r7, #12]
 8009040:	0001      	movs	r1, r0
 8009042:	00ca      	lsls	r2, r1, #3
 8009044:	60ba      	str	r2, [r7, #8]
 8009046:	3307      	adds	r3, #7
 8009048:	08db      	lsrs	r3, r3, #3
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4669      	mov	r1, sp
 800904e:	1acb      	subs	r3, r1, r3
 8009050:	469d      	mov	sp, r3
 8009052:	466b      	mov	r3, sp
 8009054:	3300      	adds	r3, #0
 8009056:	24c8      	movs	r4, #200	; 0xc8
 8009058:	0064      	lsls	r4, r4, #1
 800905a:	2218      	movs	r2, #24
 800905c:	18a2      	adds	r2, r4, r2
 800905e:	19d1      	adds	r1, r2, r7
 8009060:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8009062:	4b16      	ldr	r3, [pc, #88]	; (80090bc <astronode_send_mgi_rr+0x148>)
 8009064:	0018      	movs	r0, r3
 8009066:	f7fa f807 	bl	8003078 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 800906a:	4b13      	ldr	r3, [pc, #76]	; (80090b8 <astronode_send_mgi_rr+0x144>)
 800906c:	22cc      	movs	r2, #204	; 0xcc
 800906e:	0052      	lsls	r2, r2, #1
 8009070:	189b      	adds	r3, r3, r2
 8009072:	2218      	movs	r2, #24
 8009074:	4694      	mov	ip, r2
 8009076:	44bc      	add	ip, r7
 8009078:	4463      	add	r3, ip
 800907a:	22c4      	movs	r2, #196	; 0xc4
 800907c:	5a9b      	ldrh	r3, [r3, r2]
 800907e:	0019      	movs	r1, r3
 8009080:	2318      	movs	r3, #24
 8009082:	18fb      	adds	r3, r7, r3
 8009084:	3301      	adds	r3, #1
 8009086:	4a0e      	ldr	r2, [pc, #56]	; (80090c0 <astronode_send_mgi_rr+0x14c>)
 8009088:	2018      	movs	r0, #24
 800908a:	1820      	adds	r0, r4, r0
 800908c:	19c0      	adds	r0, r0, r7
 800908e:	6800      	ldr	r0, [r0, #0]
 8009090:	f004 f812 	bl	800d0b8 <snprintf>
            send_debug_logs(guid);
 8009094:	2318      	movs	r3, #24
 8009096:	18e3      	adds	r3, r4, r3
 8009098:	19db      	adds	r3, r3, r7
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	0018      	movs	r0, r3
 800909e:	f7f9 ffeb 	bl	8003078 <send_debug_logs>
 80090a2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80090a4:	e003      	b.n	80090ae <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80090a6:	4b07      	ldr	r3, [pc, #28]	; (80090c4 <astronode_send_mgi_rr+0x150>)
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7f9 ffe5 	bl	8003078 <send_debug_logs>
}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	46bd      	mov	sp, r7
 80090b2:	b06d      	add	sp, #436	; 0x1b4
 80090b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	fffffe68 	.word	0xfffffe68
 80090bc:	0801444c 	.word	0x0801444c
 80090c0:	0801445c 	.word	0x0801445c
 80090c4:	08014460 	.word	0x08014460

080090c8 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 80090c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ca:	b0ed      	sub	sp, #436	; 0x1b4
 80090cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80090ce:	21c8      	movs	r1, #200	; 0xc8
 80090d0:	2318      	movs	r3, #24
 80090d2:	18cb      	adds	r3, r1, r3
 80090d4:	19db      	adds	r3, r3, r7
 80090d6:	0018      	movs	r0, r3
 80090d8:	23c6      	movs	r3, #198	; 0xc6
 80090da:	001a      	movs	r2, r3
 80090dc:	2100      	movs	r1, #0
 80090de:	f004 f8b5 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 80090e2:	4b4a      	ldr	r3, [pc, #296]	; (800920c <astronode_send_msn_rr+0x144>)
 80090e4:	26cc      	movs	r6, #204	; 0xcc
 80090e6:	0076      	lsls	r6, r6, #1
 80090e8:	199b      	adds	r3, r3, r6
 80090ea:	2218      	movs	r2, #24
 80090ec:	4694      	mov	ip, r2
 80090ee:	44bc      	add	ip, r7
 80090f0:	4463      	add	r3, ip
 80090f2:	0018      	movs	r0, r3
 80090f4:	23c6      	movs	r3, #198	; 0xc6
 80090f6:	001a      	movs	r2, r3
 80090f8:	2100      	movs	r1, #0
 80090fa:	f004 f8a7 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80090fe:	21c8      	movs	r1, #200	; 0xc8
 8009100:	2318      	movs	r3, #24
 8009102:	18cb      	adds	r3, r1, r3
 8009104:	19db      	adds	r3, r3, r7
 8009106:	221a      	movs	r2, #26
 8009108:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800910a:	2318      	movs	r3, #24
 800910c:	18fa      	adds	r2, r7, r3
 800910e:	2318      	movs	r3, #24
 8009110:	18cb      	adds	r3, r1, r3
 8009112:	19db      	adds	r3, r3, r7
 8009114:	0011      	movs	r1, r2
 8009116:	0018      	movs	r0, r3
 8009118:	f001 f8ee 	bl	800a2f8 <astronode_transport_send_receive>
 800911c:	0003      	movs	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d16f      	bne.n	8009202 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8009122:	4b3a      	ldr	r3, [pc, #232]	; (800920c <astronode_send_msn_rr+0x144>)
 8009124:	0032      	movs	r2, r6
 8009126:	189b      	adds	r3, r3, r2
 8009128:	2118      	movs	r1, #24
 800912a:	468c      	mov	ip, r1
 800912c:	44bc      	add	ip, r7
 800912e:	4463      	add	r3, ip
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b9a      	cmp	r3, #154	; 0x9a
 8009134:	d161      	bne.n	80091fa <astronode_send_msn_rr+0x132>
        {
 8009136:	466b      	mov	r3, sp
 8009138:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 800913a:	4b34      	ldr	r3, [pc, #208]	; (800920c <astronode_send_msn_rr+0x144>)
 800913c:	189b      	adds	r3, r3, r2
 800913e:	2218      	movs	r2, #24
 8009140:	4694      	mov	ip, r2
 8009142:	44bc      	add	ip, r7
 8009144:	4463      	add	r3, ip
 8009146:	22c4      	movs	r2, #196	; 0xc4
 8009148:	5a9b      	ldrh	r3, [r3, r2]
 800914a:	001a      	movs	r2, r3
 800914c:	3a01      	subs	r2, #1
 800914e:	21ca      	movs	r1, #202	; 0xca
 8009150:	0049      	lsls	r1, r1, #1
 8009152:	2018      	movs	r0, #24
 8009154:	1809      	adds	r1, r1, r0
 8009156:	19c9      	adds	r1, r1, r7
 8009158:	600a      	str	r2, [r1, #0]
 800915a:	001c      	movs	r4, r3
 800915c:	2200      	movs	r2, #0
 800915e:	0015      	movs	r5, r2
 8009160:	0020      	movs	r0, r4
 8009162:	0029      	movs	r1, r5
 8009164:	0004      	movs	r4, r0
 8009166:	0f62      	lsrs	r2, r4, #29
 8009168:	000c      	movs	r4, r1
 800916a:	00e4      	lsls	r4, r4, #3
 800916c:	617c      	str	r4, [r7, #20]
 800916e:	697c      	ldr	r4, [r7, #20]
 8009170:	4314      	orrs	r4, r2
 8009172:	617c      	str	r4, [r7, #20]
 8009174:	0001      	movs	r1, r0
 8009176:	00c9      	lsls	r1, r1, #3
 8009178:	6139      	str	r1, [r7, #16]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	2200      	movs	r2, #0
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	6838      	ldr	r0, [r7, #0]
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	0004      	movs	r4, r0
 8009186:	0f62      	lsrs	r2, r4, #29
 8009188:	000c      	movs	r4, r1
 800918a:	00e4      	lsls	r4, r4, #3
 800918c:	60fc      	str	r4, [r7, #12]
 800918e:	68fc      	ldr	r4, [r7, #12]
 8009190:	4314      	orrs	r4, r2
 8009192:	60fc      	str	r4, [r7, #12]
 8009194:	0001      	movs	r1, r0
 8009196:	00ca      	lsls	r2, r1, #3
 8009198:	60ba      	str	r2, [r7, #8]
 800919a:	3307      	adds	r3, #7
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4669      	mov	r1, sp
 80091a2:	1acb      	subs	r3, r1, r3
 80091a4:	469d      	mov	sp, r3
 80091a6:	466b      	mov	r3, sp
 80091a8:	3300      	adds	r3, #0
 80091aa:	24c8      	movs	r4, #200	; 0xc8
 80091ac:	0064      	lsls	r4, r4, #1
 80091ae:	2218      	movs	r2, #24
 80091b0:	18a2      	adds	r2, r4, r2
 80091b2:	19d1      	adds	r1, r2, r7
 80091b4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80091b6:	4b16      	ldr	r3, [pc, #88]	; (8009210 <astronode_send_msn_rr+0x148>)
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7f9 ff5d 	bl	8003078 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <astronode_send_msn_rr+0x144>)
 80091c0:	22cc      	movs	r2, #204	; 0xcc
 80091c2:	0052      	lsls	r2, r2, #1
 80091c4:	189b      	adds	r3, r3, r2
 80091c6:	2218      	movs	r2, #24
 80091c8:	4694      	mov	ip, r2
 80091ca:	44bc      	add	ip, r7
 80091cc:	4463      	add	r3, ip
 80091ce:	22c4      	movs	r2, #196	; 0xc4
 80091d0:	5a9b      	ldrh	r3, [r3, r2]
 80091d2:	0019      	movs	r1, r3
 80091d4:	2318      	movs	r3, #24
 80091d6:	18fb      	adds	r3, r7, r3
 80091d8:	3301      	adds	r3, #1
 80091da:	4a0e      	ldr	r2, [pc, #56]	; (8009214 <astronode_send_msn_rr+0x14c>)
 80091dc:	2018      	movs	r0, #24
 80091de:	1820      	adds	r0, r4, r0
 80091e0:	19c0      	adds	r0, r0, r7
 80091e2:	6800      	ldr	r0, [r0, #0]
 80091e4:	f003 ff68 	bl	800d0b8 <snprintf>
            send_debug_logs(serial_number);
 80091e8:	2318      	movs	r3, #24
 80091ea:	18e3      	adds	r3, r4, r3
 80091ec:	19db      	adds	r3, r3, r7
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	0018      	movs	r0, r3
 80091f2:	f7f9 ff41 	bl	8003078 <send_debug_logs>
 80091f6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80091f8:	e003      	b.n	8009202 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <astronode_send_msn_rr+0x150>)
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7f9 ff3b 	bl	8003078 <send_debug_logs>
}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	46bd      	mov	sp, r7
 8009206:	b06d      	add	sp, #436	; 0x1b4
 8009208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920a:	46c0      	nop			; (mov r8, r8)
 800920c:	fffffe68 	.word	0xfffffe68
 8009210:	0801447c 	.word	0x0801447c
 8009214:	0801445c 	.word	0x0801445c
 8009218:	08014498 	.word	0x08014498

0800921c <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 800921c:	b5b0      	push	{r4, r5, r7, lr}
 800921e:	b0e4      	sub	sp, #400	; 0x190
 8009220:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009222:	24c8      	movs	r4, #200	; 0xc8
 8009224:	193b      	adds	r3, r7, r4
 8009226:	0018      	movs	r0, r3
 8009228:	23c6      	movs	r3, #198	; 0xc6
 800922a:	001a      	movs	r2, r3
 800922c:	2100      	movs	r1, #0
 800922e:	f004 f80d 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009232:	4b31      	ldr	r3, [pc, #196]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 8009234:	25c8      	movs	r5, #200	; 0xc8
 8009236:	006d      	lsls	r5, r5, #1
 8009238:	195b      	adds	r3, r3, r5
 800923a:	19db      	adds	r3, r3, r7
 800923c:	0018      	movs	r0, r3
 800923e:	23c6      	movs	r3, #198	; 0xc6
 8009240:	001a      	movs	r2, r3
 8009242:	2100      	movs	r1, #0
 8009244:	f004 f802 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8009248:	193b      	adds	r3, r7, r4
 800924a:	2265      	movs	r2, #101	; 0x65
 800924c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800924e:	003a      	movs	r2, r7
 8009250:	193b      	adds	r3, r7, r4
 8009252:	0011      	movs	r1, r2
 8009254:	0018      	movs	r0, r3
 8009256:	f001 f84f 	bl	800a2f8 <astronode_transport_send_receive>
 800925a:	0003      	movs	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d147      	bne.n	80092f0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 8009262:	195b      	adds	r3, r3, r5
 8009264:	19db      	adds	r3, r3, r7
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2be5      	cmp	r3, #229	; 0xe5
 800926a:	d141      	bne.n	80092f0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 800926c:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 800926e:	195b      	adds	r3, r3, r5
 8009270:	19db      	adds	r3, r3, r7
 8009272:	785b      	ldrb	r3, [r3, #1]
 8009274:	001a      	movs	r2, r3
 8009276:	2301      	movs	r3, #1
 8009278:	4013      	ands	r3, r2
 800927a:	d006      	beq.n	800928a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 800927c:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <astronode_send_evt_rr+0xe0>)
 800927e:	2201      	movs	r2, #1
 8009280:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8009282:	4b1f      	ldr	r3, [pc, #124]	; (8009300 <astronode_send_evt_rr+0xe4>)
 8009284:	0018      	movs	r0, r3
 8009286:	f7f9 fef7 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800928a:	4b1b      	ldr	r3, [pc, #108]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 800928c:	22c8      	movs	r2, #200	; 0xc8
 800928e:	0052      	lsls	r2, r2, #1
 8009290:	189b      	adds	r3, r3, r2
 8009292:	19db      	adds	r3, r3, r7
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	001a      	movs	r2, r3
 8009298:	2302      	movs	r3, #2
 800929a:	4013      	ands	r3, r2
 800929c:	d006      	beq.n	80092ac <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800929e:	4b19      	ldr	r3, [pc, #100]	; (8009304 <astronode_send_evt_rr+0xe8>)
 80092a0:	2201      	movs	r2, #1
 80092a2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80092a4:	4b18      	ldr	r3, [pc, #96]	; (8009308 <astronode_send_evt_rr+0xec>)
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7f9 fee6 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80092ac:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 80092ae:	22c8      	movs	r2, #200	; 0xc8
 80092b0:	0052      	lsls	r2, r2, #1
 80092b2:	189b      	adds	r3, r3, r2
 80092b4:	19db      	adds	r3, r3, r7
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	001a      	movs	r2, r3
 80092ba:	2304      	movs	r3, #4
 80092bc:	4013      	ands	r3, r2
 80092be:	d006      	beq.n	80092ce <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80092c0:	4b12      	ldr	r3, [pc, #72]	; (800930c <astronode_send_evt_rr+0xf0>)
 80092c2:	2201      	movs	r2, #1
 80092c4:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80092c6:	4b12      	ldr	r3, [pc, #72]	; (8009310 <astronode_send_evt_rr+0xf4>)
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7f9 fed5 	bl	8003078 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80092ce:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <astronode_send_evt_rr+0xdc>)
 80092d0:	22c8      	movs	r2, #200	; 0xc8
 80092d2:	0052      	lsls	r2, r2, #1
 80092d4:	189b      	adds	r3, r3, r2
 80092d6:	19db      	adds	r3, r3, r7
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	001a      	movs	r2, r3
 80092dc:	2308      	movs	r3, #8
 80092de:	4013      	ands	r3, r2
 80092e0:	d006      	beq.n	80092f0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80092e2:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <astronode_send_evt_rr+0xf8>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80092e8:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <astronode_send_evt_rr+0xfc>)
 80092ea:	0018      	movs	r0, r3
 80092ec:	f7f9 fec4 	bl	8003078 <send_debug_logs>
            }

        }
    }
}
 80092f0:	46c0      	nop			; (mov r8, r8)
 80092f2:	46bd      	mov	sp, r7
 80092f4:	b064      	add	sp, #400	; 0x190
 80092f6:	bdb0      	pop	{r4, r5, r7, pc}
 80092f8:	fffffe70 	.word	0xfffffe70
 80092fc:	20000b28 	.word	0x20000b28
 8009300:	08014540 	.word	0x08014540
 8009304:	20000b29 	.word	0x20000b29
 8009308:	08014564 	.word	0x08014564
 800930c:	20000b2a 	.word	0x20000b2a
 8009310:	0801457c 	.word	0x0801457c
 8009314:	20000b2b 	.word	0x20000b2b
 8009318:	08014590 	.word	0x08014590

0800931c <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931e:	b0e7      	sub	sp, #412	; 0x19c
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8009326:	24d0      	movs	r4, #208	; 0xd0
 8009328:	193b      	adds	r3, r7, r4
 800932a:	0018      	movs	r0, r3
 800932c:	23c6      	movs	r3, #198	; 0xc6
 800932e:	001a      	movs	r2, r3
 8009330:	2100      	movs	r1, #0
 8009332:	f003 ff8b 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009336:	4b56      	ldr	r3, [pc, #344]	; (8009490 <astronode_send_geo_wr+0x174>)
 8009338:	26cc      	movs	r6, #204	; 0xcc
 800933a:	0076      	lsls	r6, r6, #1
 800933c:	199b      	adds	r3, r3, r6
 800933e:	19db      	adds	r3, r3, r7
 8009340:	0018      	movs	r0, r3
 8009342:	23c6      	movs	r3, #198	; 0xc6
 8009344:	001a      	movs	r2, r3
 8009346:	2100      	movs	r1, #0
 8009348:	f003 ff80 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 800934c:	193b      	adds	r3, r7, r4
 800934e:	2235      	movs	r2, #53	; 0x35
 8009350:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8009352:	193b      	adds	r3, r7, r4
 8009354:	22c4      	movs	r2, #196	; 0xc4
 8009356:	5a9b      	ldrh	r3, [r3, r2]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	b290      	uxth	r0, r2
 800935c:	193a      	adds	r2, r7, r4
 800935e:	21c4      	movs	r1, #196	; 0xc4
 8009360:	5250      	strh	r0, [r2, r1]
 8009362:	0019      	movs	r1, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	193b      	adds	r3, r7, r4
 800936a:	185b      	adds	r3, r3, r1
 800936c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	1218      	asrs	r0, r3, #8
 8009372:	0025      	movs	r5, r4
 8009374:	197b      	adds	r3, r7, r5
 8009376:	22c4      	movs	r2, #196	; 0xc4
 8009378:	5a9b      	ldrh	r3, [r3, r2]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	b294      	uxth	r4, r2
 800937e:	197a      	adds	r2, r7, r5
 8009380:	21c4      	movs	r1, #196	; 0xc4
 8009382:	5254      	strh	r4, [r2, r1]
 8009384:	0019      	movs	r1, r3
 8009386:	b2c2      	uxtb	r2, r0
 8009388:	002c      	movs	r4, r5
 800938a:	193b      	adds	r3, r7, r4
 800938c:	185b      	adds	r3, r3, r1
 800938e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	1418      	asrs	r0, r3, #16
 8009394:	0025      	movs	r5, r4
 8009396:	197b      	adds	r3, r7, r5
 8009398:	22c4      	movs	r2, #196	; 0xc4
 800939a:	5a9b      	ldrh	r3, [r3, r2]
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	b294      	uxth	r4, r2
 80093a0:	197a      	adds	r2, r7, r5
 80093a2:	21c4      	movs	r1, #196	; 0xc4
 80093a4:	5254      	strh	r4, [r2, r1]
 80093a6:	0019      	movs	r1, r3
 80093a8:	b2c2      	uxtb	r2, r0
 80093aa:	002c      	movs	r4, r5
 80093ac:	193b      	adds	r3, r7, r4
 80093ae:	185b      	adds	r3, r3, r1
 80093b0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	1618      	asrs	r0, r3, #24
 80093b6:	0025      	movs	r5, r4
 80093b8:	197b      	adds	r3, r7, r5
 80093ba:	22c4      	movs	r2, #196	; 0xc4
 80093bc:	5a9b      	ldrh	r3, [r3, r2]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	b294      	uxth	r4, r2
 80093c2:	197a      	adds	r2, r7, r5
 80093c4:	21c4      	movs	r1, #196	; 0xc4
 80093c6:	5254      	strh	r4, [r2, r1]
 80093c8:	0019      	movs	r1, r3
 80093ca:	b2c2      	uxtb	r2, r0
 80093cc:	002c      	movs	r4, r5
 80093ce:	193b      	adds	r3, r7, r4
 80093d0:	185b      	adds	r3, r3, r1
 80093d2:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 80093d4:	193b      	adds	r3, r7, r4
 80093d6:	22c4      	movs	r2, #196	; 0xc4
 80093d8:	5a9b      	ldrh	r3, [r3, r2]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	b290      	uxth	r0, r2
 80093de:	193a      	adds	r2, r7, r4
 80093e0:	21c4      	movs	r1, #196	; 0xc4
 80093e2:	5250      	strh	r0, [r2, r1]
 80093e4:	0019      	movs	r1, r3
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	185b      	adds	r3, r3, r1
 80093ee:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	1218      	asrs	r0, r3, #8
 80093f4:	0025      	movs	r5, r4
 80093f6:	197b      	adds	r3, r7, r5
 80093f8:	22c4      	movs	r2, #196	; 0xc4
 80093fa:	5a9b      	ldrh	r3, [r3, r2]
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	b294      	uxth	r4, r2
 8009400:	197a      	adds	r2, r7, r5
 8009402:	21c4      	movs	r1, #196	; 0xc4
 8009404:	5254      	strh	r4, [r2, r1]
 8009406:	0019      	movs	r1, r3
 8009408:	b2c2      	uxtb	r2, r0
 800940a:	002c      	movs	r4, r5
 800940c:	193b      	adds	r3, r7, r4
 800940e:	185b      	adds	r3, r3, r1
 8009410:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	1418      	asrs	r0, r3, #16
 8009416:	0025      	movs	r5, r4
 8009418:	197b      	adds	r3, r7, r5
 800941a:	22c4      	movs	r2, #196	; 0xc4
 800941c:	5a9b      	ldrh	r3, [r3, r2]
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	b294      	uxth	r4, r2
 8009422:	197a      	adds	r2, r7, r5
 8009424:	21c4      	movs	r1, #196	; 0xc4
 8009426:	5254      	strh	r4, [r2, r1]
 8009428:	0019      	movs	r1, r3
 800942a:	b2c2      	uxtb	r2, r0
 800942c:	002c      	movs	r4, r5
 800942e:	193b      	adds	r3, r7, r4
 8009430:	185b      	adds	r3, r3, r1
 8009432:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	1618      	asrs	r0, r3, #24
 8009438:	0025      	movs	r5, r4
 800943a:	197b      	adds	r3, r7, r5
 800943c:	22c4      	movs	r2, #196	; 0xc4
 800943e:	5a9b      	ldrh	r3, [r3, r2]
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	b294      	uxth	r4, r2
 8009444:	197a      	adds	r2, r7, r5
 8009446:	21c4      	movs	r1, #196	; 0xc4
 8009448:	5254      	strh	r4, [r2, r1]
 800944a:	0019      	movs	r1, r3
 800944c:	b2c2      	uxtb	r2, r0
 800944e:	0028      	movs	r0, r5
 8009450:	183b      	adds	r3, r7, r0
 8009452:	185b      	adds	r3, r3, r1
 8009454:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009456:	2308      	movs	r3, #8
 8009458:	18fa      	adds	r2, r7, r3
 800945a:	183b      	adds	r3, r7, r0
 800945c:	0011      	movs	r1, r2
 800945e:	0018      	movs	r0, r3
 8009460:	f000 ff4a 	bl	800a2f8 <astronode_transport_send_receive>
 8009464:	0003      	movs	r3, r0
 8009466:	2b01      	cmp	r3, #1
 8009468:	d10e      	bne.n	8009488 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800946a:	4b09      	ldr	r3, [pc, #36]	; (8009490 <astronode_send_geo_wr+0x174>)
 800946c:	199b      	adds	r3, r3, r6
 800946e:	19db      	adds	r3, r3, r7
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2bb5      	cmp	r3, #181	; 0xb5
 8009474:	d104      	bne.n	8009480 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8009476:	4b07      	ldr	r3, [pc, #28]	; (8009494 <astronode_send_geo_wr+0x178>)
 8009478:	0018      	movs	r0, r3
 800947a:	f7f9 fdfd 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800947e:	e003      	b.n	8009488 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8009480:	4b05      	ldr	r3, [pc, #20]	; (8009498 <astronode_send_geo_wr+0x17c>)
 8009482:	0018      	movs	r0, r3
 8009484:	f7f9 fdf8 	bl	8003078 <send_debug_logs>
}
 8009488:	46c0      	nop			; (mov r8, r8)
 800948a:	46bd      	mov	sp, r7
 800948c:	b067      	add	sp, #412	; 0x19c
 800948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009490:	fffffe70 	.word	0xfffffe70
 8009494:	080145a4 	.word	0x080145a4
 8009498:	080145d0 	.word	0x080145d0

0800949c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , const char *p_payload , uint16_t payload_length )
{
 800949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949e:	b0fd      	sub	sp, #500	; 0x1f4
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	6039      	str	r1, [r7, #0]
 80094a4:	0011      	movs	r1, r2
 80094a6:	4b4c      	ldr	r3, [pc, #304]	; (80095d8 <astronode_send_pld_er+0x13c>)
 80094a8:	26f4      	movs	r6, #244	; 0xf4
 80094aa:	0076      	lsls	r6, r6, #1
 80094ac:	199b      	adds	r3, r3, r6
 80094ae:	19db      	adds	r3, r3, r7
 80094b0:	1c02      	adds	r2, r0, #0
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	4b49      	ldr	r3, [pc, #292]	; (80095dc <astronode_send_pld_er+0x140>)
 80094b6:	199b      	adds	r3, r3, r6
 80094b8:	19db      	adds	r3, r3, r7
 80094ba:	1c0a      	adds	r2, r1, #0
 80094bc:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80094be:	2490      	movs	r4, #144	; 0x90
 80094c0:	0064      	lsls	r4, r4, #1
 80094c2:	193b      	adds	r3, r7, r4
 80094c4:	0018      	movs	r0, r3
 80094c6:	23c6      	movs	r3, #198	; 0xc6
 80094c8:	001a      	movs	r2, r3
 80094ca:	2100      	movs	r1, #0
 80094cc:	f003 febe 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 80094d0:	4b43      	ldr	r3, [pc, #268]	; (80095e0 <astronode_send_pld_er+0x144>)
 80094d2:	199b      	adds	r3, r3, r6
 80094d4:	19db      	adds	r3, r3, r7
 80094d6:	0018      	movs	r0, r3
 80094d8:	23c6      	movs	r3, #198	; 0xc6
 80094da:	001a      	movs	r2, r3
 80094dc:	2100      	movs	r1, #0
 80094de:	f003 feb5 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80094e2:	193b      	adds	r3, r7, r4
 80094e4:	2225      	movs	r2, #37	; 0x25
 80094e6:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80094e8:	193b      	adds	r3, r7, r4
 80094ea:	22c4      	movs	r2, #196	; 0xc4
 80094ec:	5a9b      	ldrh	r3, [r3, r2]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	b290      	uxth	r0, r2
 80094f2:	193a      	adds	r2, r7, r4
 80094f4:	21c4      	movs	r1, #196	; 0xc4
 80094f6:	5250      	strh	r0, [r2, r1]
 80094f8:	0019      	movs	r1, r3
 80094fa:	4b37      	ldr	r3, [pc, #220]	; (80095d8 <astronode_send_pld_er+0x13c>)
 80094fc:	199b      	adds	r3, r3, r6
 80094fe:	19db      	adds	r3, r3, r7
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b2da      	uxtb	r2, r3
 8009504:	193b      	adds	r3, r7, r4
 8009506:	185b      	adds	r3, r3, r1
 8009508:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 800950a:	4b33      	ldr	r3, [pc, #204]	; (80095d8 <astronode_send_pld_er+0x13c>)
 800950c:	199b      	adds	r3, r3, r6
 800950e:	19db      	adds	r3, r3, r7
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	0a1b      	lsrs	r3, r3, #8
 8009514:	b298      	uxth	r0, r3
 8009516:	0025      	movs	r5, r4
 8009518:	197b      	adds	r3, r7, r5
 800951a:	22c4      	movs	r2, #196	; 0xc4
 800951c:	5a9b      	ldrh	r3, [r3, r2]
 800951e:	1c5a      	adds	r2, r3, #1
 8009520:	b294      	uxth	r4, r2
 8009522:	197a      	adds	r2, r7, r5
 8009524:	21c4      	movs	r1, #196	; 0xc4
 8009526:	5254      	strh	r4, [r2, r1]
 8009528:	0019      	movs	r1, r3
 800952a:	b2c2      	uxtb	r2, r0
 800952c:	002c      	movs	r4, r5
 800952e:	193b      	adds	r3, r7, r4
 8009530:	185b      	adds	r3, r3, r1
 8009532:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8009534:	193b      	adds	r3, r7, r4
 8009536:	22c4      	movs	r2, #196	; 0xc4
 8009538:	5a9b      	ldrh	r3, [r3, r2]
 800953a:	001a      	movs	r2, r3
 800953c:	193b      	adds	r3, r7, r4
 800953e:	189b      	adds	r3, r3, r2
 8009540:	1c58      	adds	r0, r3, #1
 8009542:	4b26      	ldr	r3, [pc, #152]	; (80095dc <astronode_send_pld_er+0x140>)
 8009544:	199b      	adds	r3, r3, r6
 8009546:	19db      	adds	r3, r3, r7
 8009548:	881a      	ldrh	r2, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	0019      	movs	r1, r3
 800954e:	f003 ffaa 	bl	800d4a6 <memcpy>
    request.payload_len = 2 + payload_length;
 8009552:	4b22      	ldr	r3, [pc, #136]	; (80095dc <astronode_send_pld_er+0x140>)
 8009554:	199b      	adds	r3, r3, r6
 8009556:	19db      	adds	r3, r3, r7
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	3302      	adds	r3, #2
 800955c:	b299      	uxth	r1, r3
 800955e:	193b      	adds	r3, r7, r4
 8009560:	22c4      	movs	r2, #196	; 0xc4
 8009562:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8009564:	2358      	movs	r3, #88	; 0x58
 8009566:	18fa      	adds	r2, r7, r3
 8009568:	193b      	adds	r3, r7, r4
 800956a:	0011      	movs	r1, r2
 800956c:	0018      	movs	r0, r3
 800956e:	f000 fec3 	bl	800a2f8 <astronode_transport_send_receive>
 8009572:	0003      	movs	r3, r0
 8009574:	2b01      	cmp	r3, #1
 8009576:	d12a      	bne.n	80095ce <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8009578:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <astronode_send_pld_er+0x144>)
 800957a:	199b      	adds	r3, r3, r6
 800957c:	19db      	adds	r3, r3, r7
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2ba5      	cmp	r3, #165	; 0xa5
 8009582:	d114      	bne.n	80095ae <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8009584:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <astronode_send_pld_er+0x13c>)
 8009586:	199b      	adds	r3, r3, r6
 8009588:	19db      	adds	r3, r3, r7
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	22ea      	movs	r2, #234	; 0xea
 800958e:	32ff      	adds	r2, #255	; 0xff
 8009590:	0014      	movs	r4, r2
 8009592:	4a14      	ldr	r2, [pc, #80]	; (80095e4 <astronode_send_pld_er+0x148>)
 8009594:	4914      	ldr	r1, [pc, #80]	; (80095e8 <astronode_send_pld_er+0x14c>)
 8009596:	2508      	movs	r5, #8
 8009598:	1978      	adds	r0, r7, r5
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	0023      	movs	r3, r4
 800959e:	f003 fdbf 	bl	800d120 <sprintf>
            send_debug_logs ( s ) ;
 80095a2:	197b      	adds	r3, r7, r5
 80095a4:	0018      	movs	r0, r3
 80095a6:	f7f9 fd67 	bl	8003078 <send_debug_logs>
            return true ;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e010      	b.n	80095d0 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80095ae:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <astronode_send_pld_er+0x13c>)
 80095b0:	22f4      	movs	r2, #244	; 0xf4
 80095b2:	0052      	lsls	r2, r2, #1
 80095b4:	189b      	adds	r3, r3, r2
 80095b6:	19db      	adds	r3, r3, r7
 80095b8:	881a      	ldrh	r2, [r3, #0]
 80095ba:	490c      	ldr	r1, [pc, #48]	; (80095ec <astronode_send_pld_er+0x150>)
 80095bc:	2408      	movs	r4, #8
 80095be:	193b      	adds	r3, r7, r4
 80095c0:	0018      	movs	r0, r3
 80095c2:	f003 fdad 	bl	800d120 <sprintf>
            send_debug_logs ( s ) ;
 80095c6:	193b      	adds	r3, r7, r4
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7f9 fd55 	bl	8003078 <send_debug_logs>
        }
    }
    return false ;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b07b      	add	sp, #492	; 0x1ec
 80095d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d8:	fffffe1e 	.word	0xfffffe1e
 80095dc:	fffffe1c 	.word	0xfffffe1c
 80095e0:	fffffe70 	.word	0xfffffe70
 80095e4:	08014648 	.word	0x08014648
 80095e8:	08014674 	.word	0x08014674
 80095ec:	08014690 	.word	0x08014690

080095f0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80095f0:	b5b0      	push	{r4, r5, r7, lr}
 80095f2:	b0e4      	sub	sp, #400	; 0x190
 80095f4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80095f6:	24c8      	movs	r4, #200	; 0xc8
 80095f8:	193b      	adds	r3, r7, r4
 80095fa:	0018      	movs	r0, r3
 80095fc:	23c6      	movs	r3, #198	; 0xc6
 80095fe:	001a      	movs	r2, r3
 8009600:	2100      	movs	r1, #0
 8009602:	f003 fe23 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009606:	4b15      	ldr	r3, [pc, #84]	; (800965c <astronode_send_pld_fr+0x6c>)
 8009608:	25c8      	movs	r5, #200	; 0xc8
 800960a:	006d      	lsls	r5, r5, #1
 800960c:	195b      	adds	r3, r3, r5
 800960e:	19db      	adds	r3, r3, r7
 8009610:	0018      	movs	r0, r3
 8009612:	23c6      	movs	r3, #198	; 0xc6
 8009614:	001a      	movs	r2, r3
 8009616:	2100      	movs	r1, #0
 8009618:	f003 fe18 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 800961c:	193b      	adds	r3, r7, r4
 800961e:	2227      	movs	r2, #39	; 0x27
 8009620:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009622:	003a      	movs	r2, r7
 8009624:	193b      	adds	r3, r7, r4
 8009626:	0011      	movs	r1, r2
 8009628:	0018      	movs	r0, r3
 800962a:	f000 fe65 	bl	800a2f8 <astronode_transport_send_receive>
 800962e:	0003      	movs	r3, r0
 8009630:	2b01      	cmp	r3, #1
 8009632:	d10e      	bne.n	8009652 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <astronode_send_pld_fr+0x6c>)
 8009636:	195b      	adds	r3, r3, r5
 8009638:	19db      	adds	r3, r3, r7
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2ba7      	cmp	r3, #167	; 0xa7
 800963e:	d104      	bne.n	800964a <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8009640:	4b07      	ldr	r3, [pc, #28]	; (8009660 <astronode_send_pld_fr+0x70>)
 8009642:	0018      	movs	r0, r3
 8009644:	f7f9 fd18 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8009648:	e003      	b.n	8009652 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <astronode_send_pld_fr+0x74>)
 800964c:	0018      	movs	r0, r3
 800964e:	f7f9 fd13 	bl	8003078 <send_debug_logs>
}
 8009652:	46c0      	nop			; (mov r8, r8)
 8009654:	46bd      	mov	sp, r7
 8009656:	b064      	add	sp, #400	; 0x190
 8009658:	bdb0      	pop	{r4, r5, r7, pc}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	fffffe70 	.word	0xfffffe70
 8009660:	080146c0 	.word	0x080146c0
 8009664:	080146f8 	.word	0x080146f8

08009668 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8009668:	b5b0      	push	{r4, r5, r7, lr}
 800966a:	b0e4      	sub	sp, #400	; 0x190
 800966c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800966e:	24c8      	movs	r4, #200	; 0xc8
 8009670:	193b      	adds	r3, r7, r4
 8009672:	0018      	movs	r0, r3
 8009674:	23c6      	movs	r3, #198	; 0xc6
 8009676:	001a      	movs	r2, r3
 8009678:	2100      	movs	r1, #0
 800967a:	f003 fde7 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <astronode_send_res_cr+0x70>)
 8009680:	25c8      	movs	r5, #200	; 0xc8
 8009682:	006d      	lsls	r5, r5, #1
 8009684:	195b      	adds	r3, r3, r5
 8009686:	19db      	adds	r3, r3, r7
 8009688:	0018      	movs	r0, r3
 800968a:	23c6      	movs	r3, #198	; 0xc6
 800968c:	001a      	movs	r2, r3
 800968e:	2100      	movs	r1, #0
 8009690:	f003 fddc 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8009694:	193b      	adds	r3, r7, r4
 8009696:	2255      	movs	r2, #85	; 0x55
 8009698:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800969a:	003a      	movs	r2, r7
 800969c:	193b      	adds	r3, r7, r4
 800969e:	0011      	movs	r1, r2
 80096a0:	0018      	movs	r0, r3
 80096a2:	f000 fe29 	bl	800a2f8 <astronode_transport_send_receive>
 80096a6:	0003      	movs	r3, r0
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d111      	bne.n	80096d0 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <astronode_send_res_cr+0x70>)
 80096ae:	195b      	adds	r3, r3, r5
 80096b0:	19db      	adds	r3, r3, r7
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	2bd5      	cmp	r3, #213	; 0xd5
 80096b6:	d107      	bne.n	80096c8 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80096b8:	4b08      	ldr	r3, [pc, #32]	; (80096dc <astronode_send_res_cr+0x74>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <astronode_send_res_cr+0x78>)
 80096c0:	0018      	movs	r0, r3
 80096c2:	f7f9 fcd9 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80096c6:	e003      	b.n	80096d0 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80096c8:	4b06      	ldr	r3, [pc, #24]	; (80096e4 <astronode_send_res_cr+0x7c>)
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7f9 fcd4 	bl	8003078 <send_debug_logs>
}
 80096d0:	46c0      	nop			; (mov r8, r8)
 80096d2:	46bd      	mov	sp, r7
 80096d4:	b064      	add	sp, #400	; 0x190
 80096d6:	bdb0      	pop	{r4, r5, r7, pc}
 80096d8:	fffffe70 	.word	0xfffffe70
 80096dc:	20000b29 	.word	0x20000b29
 80096e0:	08014734 	.word	0x08014734
 80096e4:	08014768 	.word	0x08014768

080096e8 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80096e8:	b5b0      	push	{r4, r5, r7, lr}
 80096ea:	b0fa      	sub	sp, #488	; 0x1e8
 80096ec:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80096ee:	258e      	movs	r5, #142	; 0x8e
 80096f0:	006d      	lsls	r5, r5, #1
 80096f2:	197b      	adds	r3, r7, r5
 80096f4:	0018      	movs	r0, r3
 80096f6:	23c6      	movs	r3, #198	; 0xc6
 80096f8:	001a      	movs	r2, r3
 80096fa:	2100      	movs	r1, #0
 80096fc:	f003 fda6 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0} ;
 8009700:	4b28      	ldr	r3, [pc, #160]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 8009702:	24f4      	movs	r4, #244	; 0xf4
 8009704:	0064      	lsls	r4, r4, #1
 8009706:	191b      	adds	r3, r3, r4
 8009708:	19db      	adds	r3, r3, r7
 800970a:	0018      	movs	r0, r3
 800970c:	23c6      	movs	r3, #198	; 0xc6
 800970e:	001a      	movs	r2, r3
 8009710:	2100      	movs	r1, #0
 8009712:	f003 fd9b 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8009716:	197b      	adds	r3, r7, r5
 8009718:	2217      	movs	r2, #23
 800971a:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800971c:	2354      	movs	r3, #84	; 0x54
 800971e:	18fa      	adds	r2, r7, r3
 8009720:	197b      	adds	r3, r7, r5
 8009722:	0011      	movs	r1, r2
 8009724:	0018      	movs	r0, r3
 8009726:	f000 fde7 	bl	800a2f8 <astronode_transport_send_receive>
 800972a:	0003      	movs	r3, r0
 800972c:	2b01      	cmp	r3, #1
 800972e:	d133      	bne.n	8009798 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8009730:	4b1c      	ldr	r3, [pc, #112]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 8009732:	0021      	movs	r1, r4
 8009734:	185b      	adds	r3, r3, r1
 8009736:	19db      	adds	r3, r3, r7
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b97      	cmp	r3, #151	; 0x97
 800973c:	d128      	bne.n	8009790 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 8009740:	185b      	adds	r3, r3, r1
 8009742:	19db      	adds	r3, r3, r7
 8009744:	785b      	ldrb	r3, [r3, #1]
 8009746:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 800974a:	185b      	adds	r3, r3, r1
 800974c:	19db      	adds	r3, r3, r7
 800974e:	789b      	ldrb	r3, [r3, #2]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8009754:	4b13      	ldr	r3, [pc, #76]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 8009756:	185b      	adds	r3, r3, r1
 8009758:	19db      	adds	r3, r3, r7
 800975a:	78db      	ldrb	r3, [r3, #3]
 800975c:	041b      	lsls	r3, r3, #16
 800975e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8009760:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <astronode_send_rtc_rr+0xbc>)
 8009762:	185b      	adds	r3, r3, r1
 8009764:	19db      	adds	r3, r3, r7
 8009766:	791b      	ldrb	r3, [r3, #4]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800976c:	24f2      	movs	r4, #242	; 0xf2
 800976e:	0064      	lsls	r4, r4, #1
 8009770:	193a      	adds	r2, r7, r4
 8009772:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8009774:	193b      	adds	r3, r7, r4
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	490b      	ldr	r1, [pc, #44]	; (80097a8 <astronode_send_rtc_rr+0xc0>)
 800977a:	1d3b      	adds	r3, r7, #4
 800977c:	0018      	movs	r0, r3
 800977e:	f003 fccf 	bl	800d120 <sprintf>
            send_debug_logs ( str ) ;
 8009782:	1d3b      	adds	r3, r7, #4
 8009784:	0018      	movs	r0, r3
 8009786:	f7f9 fc77 	bl	8003078 <send_debug_logs>
            return rtc_time ;
 800978a:	193b      	adds	r3, r7, r4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	e004      	b.n	800979a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8009790:	4b06      	ldr	r3, [pc, #24]	; (80097ac <astronode_send_rtc_rr+0xc4>)
 8009792:	0018      	movs	r0, r3
 8009794:	f7f9 fc70 	bl	8003078 <send_debug_logs>
        }
    }
    return 0 ;
 8009798:	2300      	movs	r3, #0
}
 800979a:	0018      	movs	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	b07a      	add	sp, #488	; 0x1e8
 80097a0:	bdb0      	pop	{r4, r5, r7, pc}
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	fffffe6c 	.word	0xfffffe6c
 80097a8:	08014794 	.word	0x08014794
 80097ac:	080147d4 	.word	0x080147d4

080097b0 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80097b0:	b5b0      	push	{r4, r5, r7, lr}
 80097b2:	b0f8      	sub	sp, #480	; 0x1e0
 80097b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80097b6:	258c      	movs	r5, #140	; 0x8c
 80097b8:	006d      	lsls	r5, r5, #1
 80097ba:	197b      	adds	r3, r7, r5
 80097bc:	0018      	movs	r0, r3
 80097be:	23c6      	movs	r3, #198	; 0xc6
 80097c0:	001a      	movs	r2, r3
 80097c2:	2100      	movs	r1, #0
 80097c4:	f003 fd42 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 80097c8:	4b21      	ldr	r3, [pc, #132]	; (8009850 <astronode_send_sak_rr+0xa0>)
 80097ca:	24f0      	movs	r4, #240	; 0xf0
 80097cc:	0064      	lsls	r4, r4, #1
 80097ce:	191b      	adds	r3, r3, r4
 80097d0:	19db      	adds	r3, r3, r7
 80097d2:	0018      	movs	r0, r3
 80097d4:	23c6      	movs	r3, #198	; 0xc6
 80097d6:	001a      	movs	r2, r3
 80097d8:	2100      	movs	r1, #0
 80097da:	f003 fd37 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80097de:	197b      	adds	r3, r7, r5
 80097e0:	2245      	movs	r2, #69	; 0x45
 80097e2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80097e4:	2350      	movs	r3, #80	; 0x50
 80097e6:	18fa      	adds	r2, r7, r3
 80097e8:	197b      	adds	r3, r7, r5
 80097ea:	0011      	movs	r1, r2
 80097ec:	0018      	movs	r0, r3
 80097ee:	f000 fd83 	bl	800a2f8 <astronode_transport_send_receive>
 80097f2:	0003      	movs	r3, r0
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d126      	bne.n	8009846 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80097f8:	4b15      	ldr	r3, [pc, #84]	; (8009850 <astronode_send_sak_rr+0xa0>)
 80097fa:	191b      	adds	r3, r3, r4
 80097fc:	19db      	adds	r3, r3, r7
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2bc5      	cmp	r3, #197	; 0xc5
 8009802:	d11c      	bne.n	800983e <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8009804:	4b12      	ldr	r3, [pc, #72]	; (8009850 <astronode_send_sak_rr+0xa0>)
 8009806:	191b      	adds	r3, r3, r4
 8009808:	19db      	adds	r3, r3, r7
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	b299      	uxth	r1, r3
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <astronode_send_sak_rr+0xa0>)
 8009810:	191b      	adds	r3, r3, r4
 8009812:	19db      	adds	r3, r3, r7
 8009814:	789b      	ldrb	r3, [r3, #2]
 8009816:	b29b      	uxth	r3, r3
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	b29a      	uxth	r2, r3
 800981c:	20ef      	movs	r0, #239	; 0xef
 800981e:	0040      	lsls	r0, r0, #1
 8009820:	183b      	adds	r3, r7, r0
 8009822:	188a      	adds	r2, r1, r2
 8009824:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8009826:	183b      	adds	r3, r7, r0
 8009828:	881a      	ldrh	r2, [r3, #0]
 800982a:	490a      	ldr	r1, [pc, #40]	; (8009854 <astronode_send_sak_rr+0xa4>)
 800982c:	003b      	movs	r3, r7
 800982e:	0018      	movs	r0, r3
 8009830:	f003 fc76 	bl	800d120 <sprintf>
            send_debug_logs(str);
 8009834:	003b      	movs	r3, r7
 8009836:	0018      	movs	r0, r3
 8009838:	f7f9 fc1e 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 800983c:	e003      	b.n	8009846 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800983e:	4b06      	ldr	r3, [pc, #24]	; (8009858 <astronode_send_sak_rr+0xa8>)
 8009840:	0018      	movs	r0, r3
 8009842:	f7f9 fc19 	bl	8003078 <send_debug_logs>
}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	46bd      	mov	sp, r7
 800984a:	b078      	add	sp, #480	; 0x1e0
 800984c:	bdb0      	pop	{r4, r5, r7, pc}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	fffffe70 	.word	0xfffffe70
 8009854:	080147f0 	.word	0x080147f0
 8009858:	0801481c 	.word	0x0801481c

0800985c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800985c:	b5b0      	push	{r4, r5, r7, lr}
 800985e:	b0e4      	sub	sp, #400	; 0x190
 8009860:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009862:	24c8      	movs	r4, #200	; 0xc8
 8009864:	193b      	adds	r3, r7, r4
 8009866:	0018      	movs	r0, r3
 8009868:	23c6      	movs	r3, #198	; 0xc6
 800986a:	001a      	movs	r2, r3
 800986c:	2100      	movs	r1, #0
 800986e:	f003 fced 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009872:	4b16      	ldr	r3, [pc, #88]	; (80098cc <astronode_send_sak_cr+0x70>)
 8009874:	25c8      	movs	r5, #200	; 0xc8
 8009876:	006d      	lsls	r5, r5, #1
 8009878:	195b      	adds	r3, r3, r5
 800987a:	19db      	adds	r3, r3, r7
 800987c:	0018      	movs	r0, r3
 800987e:	23c6      	movs	r3, #198	; 0xc6
 8009880:	001a      	movs	r2, r3
 8009882:	2100      	movs	r1, #0
 8009884:	f003 fce2 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8009888:	193b      	adds	r3, r7, r4
 800988a:	2246      	movs	r2, #70	; 0x46
 800988c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800988e:	003a      	movs	r2, r7
 8009890:	193b      	adds	r3, r7, r4
 8009892:	0011      	movs	r1, r2
 8009894:	0018      	movs	r0, r3
 8009896:	f000 fd2f 	bl	800a2f8 <astronode_transport_send_receive>
 800989a:	0003      	movs	r3, r0
 800989c:	2b01      	cmp	r3, #1
 800989e:	d111      	bne.n	80098c4 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <astronode_send_sak_cr+0x70>)
 80098a2:	195b      	adds	r3, r3, r5
 80098a4:	19db      	adds	r3, r3, r7
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2bc6      	cmp	r3, #198	; 0xc6
 80098aa:	d107      	bne.n	80098bc <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <astronode_send_sak_cr+0x74>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80098b2:	4b08      	ldr	r3, [pc, #32]	; (80098d4 <astronode_send_sak_cr+0x78>)
 80098b4:	0018      	movs	r0, r3
 80098b6:	f7f9 fbdf 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80098ba:	e003      	b.n	80098c4 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <astronode_send_sak_cr+0x7c>)
 80098be:	0018      	movs	r0, r3
 80098c0:	f7f9 fbda 	bl	8003078 <send_debug_logs>
}
 80098c4:	46c0      	nop			; (mov r8, r8)
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b064      	add	sp, #400	; 0x190
 80098ca:	bdb0      	pop	{r4, r5, r7, pc}
 80098cc:	fffffe70 	.word	0xfffffe70
 80098d0:	20000b28 	.word	0x20000b28
 80098d4:	08014850 	.word	0x08014850
 80098d8:	08014878 	.word	0x08014878

080098dc <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098de:	b0ed      	sub	sp, #436	; 0x1b4
 80098e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80098e2:	21c8      	movs	r1, #200	; 0xc8
 80098e4:	2318      	movs	r3, #24
 80098e6:	18cb      	adds	r3, r1, r3
 80098e8:	19db      	adds	r3, r3, r7
 80098ea:	0018      	movs	r0, r3
 80098ec:	23c6      	movs	r3, #198	; 0xc6
 80098ee:	001a      	movs	r2, r3
 80098f0:	2100      	movs	r1, #0
 80098f2:	f003 fcab 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 80098f6:	4b4a      	ldr	r3, [pc, #296]	; (8009a20 <astronode_send_mpn_rr+0x144>)
 80098f8:	26cc      	movs	r6, #204	; 0xcc
 80098fa:	0076      	lsls	r6, r6, #1
 80098fc:	199b      	adds	r3, r3, r6
 80098fe:	2218      	movs	r2, #24
 8009900:	4694      	mov	ip, r2
 8009902:	44bc      	add	ip, r7
 8009904:	4463      	add	r3, ip
 8009906:	0018      	movs	r0, r3
 8009908:	23c6      	movs	r3, #198	; 0xc6
 800990a:	001a      	movs	r2, r3
 800990c:	2100      	movs	r1, #0
 800990e:	f003 fc9d 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8009912:	21c8      	movs	r1, #200	; 0xc8
 8009914:	2318      	movs	r3, #24
 8009916:	18cb      	adds	r3, r1, r3
 8009918:	19db      	adds	r3, r3, r7
 800991a:	221b      	movs	r2, #27
 800991c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800991e:	2318      	movs	r3, #24
 8009920:	18fa      	adds	r2, r7, r3
 8009922:	2318      	movs	r3, #24
 8009924:	18cb      	adds	r3, r1, r3
 8009926:	19db      	adds	r3, r3, r7
 8009928:	0011      	movs	r1, r2
 800992a:	0018      	movs	r0, r3
 800992c:	f000 fce4 	bl	800a2f8 <astronode_transport_send_receive>
 8009930:	0003      	movs	r3, r0
 8009932:	2b01      	cmp	r3, #1
 8009934:	d16f      	bne.n	8009a16 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8009936:	4b3a      	ldr	r3, [pc, #232]	; (8009a20 <astronode_send_mpn_rr+0x144>)
 8009938:	0032      	movs	r2, r6
 800993a:	189b      	adds	r3, r3, r2
 800993c:	2118      	movs	r1, #24
 800993e:	468c      	mov	ip, r1
 8009940:	44bc      	add	ip, r7
 8009942:	4463      	add	r3, ip
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b9b      	cmp	r3, #155	; 0x9b
 8009948:	d161      	bne.n	8009a0e <astronode_send_mpn_rr+0x132>
        {
 800994a:	466b      	mov	r3, sp
 800994c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800994e:	4b34      	ldr	r3, [pc, #208]	; (8009a20 <astronode_send_mpn_rr+0x144>)
 8009950:	189b      	adds	r3, r3, r2
 8009952:	2218      	movs	r2, #24
 8009954:	4694      	mov	ip, r2
 8009956:	44bc      	add	ip, r7
 8009958:	4463      	add	r3, ip
 800995a:	22c4      	movs	r2, #196	; 0xc4
 800995c:	5a9b      	ldrh	r3, [r3, r2]
 800995e:	001a      	movs	r2, r3
 8009960:	3a01      	subs	r2, #1
 8009962:	21ca      	movs	r1, #202	; 0xca
 8009964:	0049      	lsls	r1, r1, #1
 8009966:	2018      	movs	r0, #24
 8009968:	1809      	adds	r1, r1, r0
 800996a:	19c9      	adds	r1, r1, r7
 800996c:	600a      	str	r2, [r1, #0]
 800996e:	001c      	movs	r4, r3
 8009970:	2200      	movs	r2, #0
 8009972:	0015      	movs	r5, r2
 8009974:	0020      	movs	r0, r4
 8009976:	0029      	movs	r1, r5
 8009978:	0004      	movs	r4, r0
 800997a:	0f62      	lsrs	r2, r4, #29
 800997c:	000c      	movs	r4, r1
 800997e:	00e4      	lsls	r4, r4, #3
 8009980:	617c      	str	r4, [r7, #20]
 8009982:	697c      	ldr	r4, [r7, #20]
 8009984:	4314      	orrs	r4, r2
 8009986:	617c      	str	r4, [r7, #20]
 8009988:	0001      	movs	r1, r0
 800998a:	00c9      	lsls	r1, r1, #3
 800998c:	6139      	str	r1, [r7, #16]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	2200      	movs	r2, #0
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	6838      	ldr	r0, [r7, #0]
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	0004      	movs	r4, r0
 800999a:	0f62      	lsrs	r2, r4, #29
 800999c:	000c      	movs	r4, r1
 800999e:	00e4      	lsls	r4, r4, #3
 80099a0:	60fc      	str	r4, [r7, #12]
 80099a2:	68fc      	ldr	r4, [r7, #12]
 80099a4:	4314      	orrs	r4, r2
 80099a6:	60fc      	str	r4, [r7, #12]
 80099a8:	0001      	movs	r1, r0
 80099aa:	00ca      	lsls	r2, r1, #3
 80099ac:	60ba      	str	r2, [r7, #8]
 80099ae:	3307      	adds	r3, #7
 80099b0:	08db      	lsrs	r3, r3, #3
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	4669      	mov	r1, sp
 80099b6:	1acb      	subs	r3, r1, r3
 80099b8:	469d      	mov	sp, r3
 80099ba:	466b      	mov	r3, sp
 80099bc:	3300      	adds	r3, #0
 80099be:	24c8      	movs	r4, #200	; 0xc8
 80099c0:	0064      	lsls	r4, r4, #1
 80099c2:	2218      	movs	r2, #24
 80099c4:	18a2      	adds	r2, r4, r2
 80099c6:	19d1      	adds	r1, r2, r7
 80099c8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80099ca:	4b16      	ldr	r3, [pc, #88]	; (8009a24 <astronode_send_mpn_rr+0x148>)
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7f9 fb53 	bl	8003078 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <astronode_send_mpn_rr+0x144>)
 80099d4:	22cc      	movs	r2, #204	; 0xcc
 80099d6:	0052      	lsls	r2, r2, #1
 80099d8:	189b      	adds	r3, r3, r2
 80099da:	2218      	movs	r2, #24
 80099dc:	4694      	mov	ip, r2
 80099de:	44bc      	add	ip, r7
 80099e0:	4463      	add	r3, ip
 80099e2:	22c4      	movs	r2, #196	; 0xc4
 80099e4:	5a9b      	ldrh	r3, [r3, r2]
 80099e6:	0019      	movs	r1, r3
 80099e8:	2318      	movs	r3, #24
 80099ea:	18fb      	adds	r3, r7, r3
 80099ec:	3301      	adds	r3, #1
 80099ee:	4a0e      	ldr	r2, [pc, #56]	; (8009a28 <astronode_send_mpn_rr+0x14c>)
 80099f0:	2018      	movs	r0, #24
 80099f2:	1820      	adds	r0, r4, r0
 80099f4:	19c0      	adds	r0, r0, r7
 80099f6:	6800      	ldr	r0, [r0, #0]
 80099f8:	f003 fb5e 	bl	800d0b8 <snprintf>
            send_debug_logs(product_number);
 80099fc:	2318      	movs	r3, #24
 80099fe:	18e3      	adds	r3, r4, r3
 8009a00:	19db      	adds	r3, r3, r7
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	0018      	movs	r0, r3
 8009a06:	f7f9 fb37 	bl	8003078 <send_debug_logs>
 8009a0a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8009a0c:	e003      	b.n	8009a16 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8009a0e:	4b07      	ldr	r3, [pc, #28]	; (8009a2c <astronode_send_mpn_rr+0x150>)
 8009a10:	0018      	movs	r0, r3
 8009a12:	f7f9 fb31 	bl	8003078 <send_debug_logs>
}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	b06d      	add	sp, #436	; 0x1b4
 8009a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	fffffe68 	.word	0xfffffe68
 8009a24:	08014940 	.word	0x08014940
 8009a28:	0801445c 	.word	0x0801445c
 8009a2c:	08014498 	.word	0x08014498

08009a30 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8009a30:	b5b0      	push	{r4, r5, r7, lr}
 8009a32:	b0e4      	sub	sp, #400	; 0x190
 8009a34:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009a36:	24c8      	movs	r4, #200	; 0xc8
 8009a38:	193b      	adds	r3, r7, r4
 8009a3a:	0018      	movs	r0, r3
 8009a3c:	23c6      	movs	r3, #198	; 0xc6
 8009a3e:	001a      	movs	r2, r3
 8009a40:	2100      	movs	r1, #0
 8009a42:	f003 fc03 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009a46:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <astronode_send_cmd_cr+0x70>)
 8009a48:	25c8      	movs	r5, #200	; 0xc8
 8009a4a:	006d      	lsls	r5, r5, #1
 8009a4c:	195b      	adds	r3, r3, r5
 8009a4e:	19db      	adds	r3, r3, r7
 8009a50:	0018      	movs	r0, r3
 8009a52:	23c6      	movs	r3, #198	; 0xc6
 8009a54:	001a      	movs	r2, r3
 8009a56:	2100      	movs	r1, #0
 8009a58:	f003 fbf8 	bl	800d24c <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8009a5c:	193b      	adds	r3, r7, r4
 8009a5e:	2248      	movs	r2, #72	; 0x48
 8009a60:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009a62:	003a      	movs	r2, r7
 8009a64:	193b      	adds	r3, r7, r4
 8009a66:	0011      	movs	r1, r2
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f000 fc45 	bl	800a2f8 <astronode_transport_send_receive>
 8009a6e:	0003      	movs	r3, r0
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d111      	bne.n	8009a98 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <astronode_send_cmd_cr+0x70>)
 8009a76:	195b      	adds	r3, r3, r5
 8009a78:	19db      	adds	r3, r3, r7
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2bc8      	cmp	r3, #200	; 0xc8
 8009a7e:	d107      	bne.n	8009a90 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8009a80:	4b08      	ldr	r3, [pc, #32]	; (8009aa4 <astronode_send_cmd_cr+0x74>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8009a86:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <astronode_send_cmd_cr+0x78>)
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f7f9 faf5 	bl	8003078 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8009a8e:	e003      	b.n	8009a98 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <astronode_send_cmd_cr+0x7c>)
 8009a92:	0018      	movs	r0, r3
 8009a94:	f7f9 faf0 	bl	8003078 <send_debug_logs>
}
 8009a98:	46c0      	nop			; (mov r8, r8)
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b064      	add	sp, #400	; 0x190
 8009a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8009aa0:	fffffe70 	.word	0xfffffe70
 8009aa4:	20000b2a 	.word	0x20000b2a
 8009aa8:	08014d90 	.word	0x08014d90
 8009aac:	08014db4 	.word	0x08014db4

08009ab0 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8009ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab2:	4cc6      	ldr	r4, [pc, #792]	; (8009dcc <astronode_send_cmd_rr+0x31c>)
 8009ab4:	44a5      	add	sp, r4
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8009aba:	2190      	movs	r1, #144	; 0x90
 8009abc:	0049      	lsls	r1, r1, #1
 8009abe:	2318      	movs	r3, #24
 8009ac0:	18cb      	adds	r3, r1, r3
 8009ac2:	19db      	adds	r3, r3, r7
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	23c6      	movs	r3, #198	; 0xc6
 8009ac8:	001a      	movs	r2, r3
 8009aca:	2100      	movs	r1, #0
 8009acc:	f003 fbbe 	bl	800d24c <memset>
    astronode_app_msg_t answer = {0};
 8009ad0:	4bbf      	ldr	r3, [pc, #764]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009ad2:	26fc      	movs	r6, #252	; 0xfc
 8009ad4:	0076      	lsls	r6, r6, #1
 8009ad6:	199b      	adds	r3, r3, r6
 8009ad8:	2218      	movs	r2, #24
 8009ada:	4694      	mov	ip, r2
 8009adc:	44bc      	add	ip, r7
 8009ade:	4463      	add	r3, ip
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	23c6      	movs	r3, #198	; 0xc6
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f003 fbb0 	bl	800d24c <memset>
    bool result = false ;
 8009aec:	23f8      	movs	r3, #248	; 0xf8
 8009aee:	33ff      	adds	r3, #255	; 0xff
 8009af0:	2218      	movs	r2, #24
 8009af2:	189b      	adds	r3, r3, r2
 8009af4:	19db      	adds	r3, r3, r7
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8009afa:	2190      	movs	r1, #144	; 0x90
 8009afc:	0049      	lsls	r1, r1, #1
 8009afe:	2318      	movs	r3, #24
 8009b00:	18cb      	adds	r3, r1, r3
 8009b02:	19db      	adds	r3, r3, r7
 8009b04:	2247      	movs	r2, #71	; 0x47
 8009b06:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009b08:	2258      	movs	r2, #88	; 0x58
 8009b0a:	2318      	movs	r3, #24
 8009b0c:	18d3      	adds	r3, r2, r3
 8009b0e:	19da      	adds	r2, r3, r7
 8009b10:	2318      	movs	r3, #24
 8009b12:	18cb      	adds	r3, r1, r3
 8009b14:	19db      	adds	r3, r3, r7
 8009b16:	0011      	movs	r1, r2
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f000 fbed 	bl	800a2f8 <astronode_transport_send_receive>
 8009b1e:	0003      	movs	r3, r0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d000      	beq.n	8009b26 <astronode_send_cmd_rr+0x76>
 8009b24:	e146      	b.n	8009db4 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8009b26:	4baa      	ldr	r3, [pc, #680]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009b28:	199a      	adds	r2, r3, r6
 8009b2a:	2318      	movs	r3, #24
 8009b2c:	18fb      	adds	r3, r7, r3
 8009b2e:	18d3      	adds	r3, r2, r3
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2bc7      	cmp	r3, #199	; 0xc7
 8009b34:	d000      	beq.n	8009b38 <astronode_send_cmd_rr+0x88>
 8009b36:	e139      	b.n	8009dac <astronode_send_cmd_rr+0x2fc>
        {
 8009b38:	466b      	mov	r3, sp
 8009b3a:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8009b3c:	4ba5      	ldr	r3, [pc, #660]	; (8009dd4 <astronode_send_cmd_rr+0x324>)
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7f9 fa9a 	bl	8003078 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8009b44:	4ba2      	ldr	r3, [pc, #648]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009b46:	21fc      	movs	r1, #252	; 0xfc
 8009b48:	0049      	lsls	r1, r1, #1
 8009b4a:	185a      	adds	r2, r3, r1
 8009b4c:	2318      	movs	r3, #24
 8009b4e:	18fb      	adds	r3, r7, r3
 8009b50:	18d3      	adds	r3, r2, r3
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8009b56:	4b9e      	ldr	r3, [pc, #632]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009b58:	1858      	adds	r0, r3, r1
 8009b5a:	2318      	movs	r3, #24
 8009b5c:	18fb      	adds	r3, r7, r3
 8009b5e:	18c3      	adds	r3, r0, r3
 8009b60:	789b      	ldrb	r3, [r3, #2]
 8009b62:	021b      	lsls	r3, r3, #8
 8009b64:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8009b66:	4b9a      	ldr	r3, [pc, #616]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009b68:	1858      	adds	r0, r3, r1
 8009b6a:	2318      	movs	r3, #24
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	18c3      	adds	r3, r0, r3
 8009b70:	78db      	ldrb	r3, [r3, #3]
 8009b72:	041b      	lsls	r3, r3, #16
 8009b74:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8009b76:	4b96      	ldr	r3, [pc, #600]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009b78:	1858      	adds	r0, r3, r1
 8009b7a:	2318      	movs	r3, #24
 8009b7c:	18fb      	adds	r3, r7, r3
 8009b7e:	18c3      	adds	r3, r0, r3
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	061b      	lsls	r3, r3, #24
 8009b84:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009b86:	22f8      	movs	r2, #248	; 0xf8
 8009b88:	0052      	lsls	r2, r2, #1
 8009b8a:	2118      	movs	r1, #24
 8009b8c:	1851      	adds	r1, r2, r1
 8009b8e:	19c8      	adds	r0, r1, r7
 8009b90:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8009b92:	2318      	movs	r3, #24
 8009b94:	18d3      	adds	r3, r2, r3
 8009b96:	19da      	adds	r2, r3, r7
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	498f      	ldr	r1, [pc, #572]	; (8009dd8 <astronode_send_cmd_rr+0x328>)
 8009b9c:	2008      	movs	r0, #8
 8009b9e:	2318      	movs	r3, #24
 8009ba0:	18c3      	adds	r3, r0, r3
 8009ba2:	19db      	adds	r3, r3, r7
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f003 fabb 	bl	800d120 <sprintf>
            send_debug_logs(str);
 8009baa:	2008      	movs	r0, #8
 8009bac:	2318      	movs	r3, #24
 8009bae:	18c3      	adds	r3, r0, r3
 8009bb0:	19db      	adds	r3, r3, r7
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7f9 fa60 	bl	8003078 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8009bb8:	4b85      	ldr	r3, [pc, #532]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009bba:	21fc      	movs	r1, #252	; 0xfc
 8009bbc:	0049      	lsls	r1, r1, #1
 8009bbe:	185a      	adds	r2, r3, r1
 8009bc0:	2318      	movs	r3, #24
 8009bc2:	18fb      	adds	r3, r7, r3
 8009bc4:	18d3      	adds	r3, r2, r3
 8009bc6:	22c4      	movs	r2, #196	; 0xc4
 8009bc8:	5a9b      	ldrh	r3, [r3, r2]
 8009bca:	2b2c      	cmp	r3, #44	; 0x2c
 8009bcc:	d013      	beq.n	8009bf6 <astronode_send_cmd_rr+0x146>
 8009bce:	4b80      	ldr	r3, [pc, #512]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009bd0:	185a      	adds	r2, r3, r1
 8009bd2:	2318      	movs	r3, #24
 8009bd4:	18fb      	adds	r3, r7, r3
 8009bd6:	18d3      	adds	r3, r2, r3
 8009bd8:	22c4      	movs	r2, #196	; 0xc4
 8009bda:	5a9b      	ldrh	r3, [r3, r2]
 8009bdc:	2b0c      	cmp	r3, #12
 8009bde:	d00a      	beq.n	8009bf6 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8009be0:	4b7e      	ldr	r3, [pc, #504]	; (8009ddc <astronode_send_cmd_rr+0x32c>)
 8009be2:	0018      	movs	r0, r3
 8009be4:	f7f9 fa48 	bl	8003078 <send_debug_logs>
                return result ;
 8009be8:	23f8      	movs	r3, #248	; 0xf8
 8009bea:	33ff      	adds	r3, #255	; 0xff
 8009bec:	2218      	movs	r2, #24
 8009bee:	189b      	adds	r3, r3, r2
 8009bf0:	19db      	adds	r3, r3, r7
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	e0d8      	b.n	8009da8 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8009bf6:	4b76      	ldr	r3, [pc, #472]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009bf8:	22fc      	movs	r2, #252	; 0xfc
 8009bfa:	0052      	lsls	r2, r2, #1
 8009bfc:	189b      	adds	r3, r3, r2
 8009bfe:	2218      	movs	r2, #24
 8009c00:	4694      	mov	ip, r2
 8009c02:	44bc      	add	ip, r7
 8009c04:	4463      	add	r3, ip
 8009c06:	22c4      	movs	r2, #196	; 0xc4
 8009c08:	5a9b      	ldrh	r3, [r3, r2]
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	21f6      	movs	r1, #246	; 0xf6
 8009c10:	0049      	lsls	r1, r1, #1
 8009c12:	2018      	movs	r0, #24
 8009c14:	1809      	adds	r1, r1, r0
 8009c16:	19c9      	adds	r1, r1, r7
 8009c18:	600a      	str	r2, [r1, #0]
 8009c1a:	001c      	movs	r4, r3
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	0015      	movs	r5, r2
 8009c20:	0020      	movs	r0, r4
 8009c22:	0029      	movs	r1, r5
 8009c24:	0004      	movs	r4, r0
 8009c26:	0f62      	lsrs	r2, r4, #29
 8009c28:	000c      	movs	r4, r1
 8009c2a:	00e4      	lsls	r4, r4, #3
 8009c2c:	617c      	str	r4, [r7, #20]
 8009c2e:	697c      	ldr	r4, [r7, #20]
 8009c30:	4314      	orrs	r4, r2
 8009c32:	617c      	str	r4, [r7, #20]
 8009c34:	0001      	movs	r1, r0
 8009c36:	00c9      	lsls	r1, r1, #3
 8009c38:	6139      	str	r1, [r7, #16]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	6838      	ldr	r0, [r7, #0]
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	0004      	movs	r4, r0
 8009c46:	0f62      	lsrs	r2, r4, #29
 8009c48:	000c      	movs	r4, r1
 8009c4a:	00e4      	lsls	r4, r4, #3
 8009c4c:	60fc      	str	r4, [r7, #12]
 8009c4e:	68fc      	ldr	r4, [r7, #12]
 8009c50:	4314      	orrs	r4, r2
 8009c52:	60fc      	str	r4, [r7, #12]
 8009c54:	0001      	movs	r1, r0
 8009c56:	00ca      	lsls	r2, r1, #3
 8009c58:	60ba      	str	r2, [r7, #8]
 8009c5a:	3307      	adds	r3, #7
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	4669      	mov	r1, sp
 8009c62:	1acb      	subs	r3, r1, r3
 8009c64:	469d      	mov	sp, r3
 8009c66:	466b      	mov	r3, sp
 8009c68:	3300      	adds	r3, #0
 8009c6a:	20f4      	movs	r0, #244	; 0xf4
 8009c6c:	0040      	lsls	r0, r0, #1
 8009c6e:	2218      	movs	r2, #24
 8009c70:	1882      	adds	r2, r0, r2
 8009c72:	19d1      	adds	r1, r2, r7
 8009c74:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8009c76:	4b56      	ldr	r3, [pc, #344]	; (8009dd0 <astronode_send_cmd_rr+0x320>)
 8009c78:	22fc      	movs	r2, #252	; 0xfc
 8009c7a:	0052      	lsls	r2, r2, #1
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	2218      	movs	r2, #24
 8009c80:	4694      	mov	ip, r2
 8009c82:	44bc      	add	ip, r7
 8009c84:	4463      	add	r3, ip
 8009c86:	22c4      	movs	r2, #196	; 0xc4
 8009c88:	5a9b      	ldrh	r3, [r3, r2]
 8009c8a:	3b03      	subs	r3, #3
 8009c8c:	0019      	movs	r1, r3
 8009c8e:	2358      	movs	r3, #88	; 0x58
 8009c90:	2218      	movs	r2, #24
 8009c92:	189b      	adds	r3, r3, r2
 8009c94:	19db      	adds	r3, r3, r7
 8009c96:	3305      	adds	r3, #5
 8009c98:	4a51      	ldr	r2, [pc, #324]	; (8009de0 <astronode_send_cmd_rr+0x330>)
 8009c9a:	2418      	movs	r4, #24
 8009c9c:	1900      	adds	r0, r0, r4
 8009c9e:	19c0      	adds	r0, r0, r7
 8009ca0:	6800      	ldr	r0, [r0, #0]
 8009ca2:	f003 fa09 	bl	800d0b8 <snprintf>
 8009ca6:	0002      	movs	r2, r0
 8009ca8:	23f3      	movs	r3, #243	; 0xf3
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	2118      	movs	r1, #24
 8009cae:	185b      	adds	r3, r3, r1
 8009cb0:	19db      	adds	r3, r3, r7
 8009cb2:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009cb4:	23fb      	movs	r3, #251	; 0xfb
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	2218      	movs	r2, #24
 8009cba:	189b      	adds	r3, r3, r2
 8009cbc:	19db      	adds	r3, r3, r7
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	e037      	b.n	8009d34 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8009cc4:	23fb      	movs	r3, #251	; 0xfb
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	2218      	movs	r2, #24
 8009cca:	189b      	adds	r3, r3, r2
 8009ccc:	19db      	adds	r3, r3, r7
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	22f4      	movs	r2, #244	; 0xf4
 8009cd2:	0052      	lsls	r2, r2, #1
 8009cd4:	2118      	movs	r1, #24
 8009cd6:	1852      	adds	r2, r2, r1
 8009cd8:	19d2      	adds	r2, r2, r7
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	5cd3      	ldrb	r3, [r2, r3]
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	4b40      	ldr	r3, [pc, #256]	; (8009de4 <astronode_send_cmd_rr+0x334>)
 8009ce2:	18d3      	adds	r3, r2, r3
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	001a      	movs	r2, r3
 8009ce8:	2397      	movs	r3, #151	; 0x97
 8009cea:	4013      	ands	r3, r2
 8009cec:	d105      	bne.n	8009cfa <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8009cee:	4b3e      	ldr	r3, [pc, #248]	; (8009de8 <astronode_send_cmd_rr+0x338>)
 8009cf0:	0018      	movs	r0, r3
 8009cf2:	f7f9 f9c1 	bl	8003078 <send_debug_logs>
                    return false;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e056      	b.n	8009da8 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8009cfa:	20fb      	movs	r0, #251	; 0xfb
 8009cfc:	0040      	lsls	r0, r0, #1
 8009cfe:	2318      	movs	r3, #24
 8009d00:	18c3      	adds	r3, r0, r3
 8009d02:	19db      	adds	r3, r3, r7
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	2318      	movs	r3, #24
 8009d08:	18c3      	adds	r3, r0, r3
 8009d0a:	19db      	adds	r3, r3, r7
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	69f9      	ldr	r1, [r7, #28]
 8009d10:	18cb      	adds	r3, r1, r3
 8009d12:	21f4      	movs	r1, #244	; 0xf4
 8009d14:	0049      	lsls	r1, r1, #1
 8009d16:	2418      	movs	r4, #24
 8009d18:	1909      	adds	r1, r1, r4
 8009d1a:	19c9      	adds	r1, r1, r7
 8009d1c:	6809      	ldr	r1, [r1, #0]
 8009d1e:	5c8a      	ldrb	r2, [r1, r2]
 8009d20:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009d22:	2318      	movs	r3, #24
 8009d24:	18c3      	adds	r3, r0, r3
 8009d26:	19db      	adds	r3, r3, r7
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	2318      	movs	r3, #24
 8009d2c:	18c3      	adds	r3, r0, r3
 8009d2e:	19db      	adds	r3, r3, r7
 8009d30:	3201      	adds	r2, #1
 8009d32:	701a      	strb	r2, [r3, #0]
 8009d34:	23fb      	movs	r3, #251	; 0xfb
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	2218      	movs	r2, #24
 8009d3a:	189b      	adds	r3, r3, r2
 8009d3c:	19db      	adds	r3, r3, r7
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	21f3      	movs	r1, #243	; 0xf3
 8009d44:	0049      	lsls	r1, r1, #1
 8009d46:	2218      	movs	r2, #24
 8009d48:	188a      	adds	r2, r1, r2
 8009d4a:	19d2      	adds	r2, r2, r7
 8009d4c:	8812      	ldrh	r2, [r2, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d8b8      	bhi.n	8009cc4 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8009d52:	23f8      	movs	r3, #248	; 0xf8
 8009d54:	33ff      	adds	r3, #255	; 0xff
 8009d56:	2218      	movs	r2, #24
 8009d58:	189b      	adds	r3, r3, r2
 8009d5a:	19db      	adds	r3, r3, r7
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8009d60:	2318      	movs	r3, #24
 8009d62:	18cb      	adds	r3, r1, r3
 8009d64:	19db      	adds	r3, r3, r7
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	18d3      	adds	r3, r2, r3
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8009d70:	4b1e      	ldr	r3, [pc, #120]	; (8009dec <astronode_send_cmd_rr+0x33c>)
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7f9 f980 	bl	8003078 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8009d78:	2358      	movs	r3, #88	; 0x58
 8009d7a:	2218      	movs	r2, #24
 8009d7c:	189b      	adds	r3, r3, r2
 8009d7e:	19db      	adds	r3, r3, r7
 8009d80:	1d5a      	adds	r2, r3, #5
 8009d82:	491b      	ldr	r1, [pc, #108]	; (8009df0 <astronode_send_cmd_rr+0x340>)
 8009d84:	24f4      	movs	r4, #244	; 0xf4
 8009d86:	0064      	lsls	r4, r4, #1
 8009d88:	2318      	movs	r3, #24
 8009d8a:	18e3      	adds	r3, r4, r3
 8009d8c:	19db      	adds	r3, r3, r7
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	0018      	movs	r0, r3
 8009d92:	f003 f9c5 	bl	800d120 <sprintf>
            send_debug_logs(command_content);
 8009d96:	2318      	movs	r3, #24
 8009d98:	18e3      	adds	r3, r4, r3
 8009d9a:	19db      	adds	r3, r3, r7
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	0018      	movs	r0, r3
 8009da0:	f7f9 f96a 	bl	8003078 <send_debug_logs>
 8009da4:	46b5      	mov	sp, r6
 8009da6:	e005      	b.n	8009db4 <astronode_send_cmd_rr+0x304>
                return result ;
 8009da8:	46b5      	mov	sp, r6
 8009daa:	e009      	b.n	8009dc0 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <astronode_send_cmd_rr+0x344>)
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7f9 f962 	bl	8003078 <send_debug_logs>
        }
    }
    return result ;
 8009db4:	23f8      	movs	r3, #248	; 0xf8
 8009db6:	33ff      	adds	r3, #255	; 0xff
 8009db8:	2218      	movs	r2, #24
 8009dba:	189b      	adds	r3, r3, r2
 8009dbc:	19db      	adds	r3, r3, r7
 8009dbe:	781b      	ldrb	r3, [r3, #0]
}
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	2385      	movs	r3, #133	; 0x85
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	449d      	add	sp, r3
 8009dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dcc:	fffffdec 	.word	0xfffffdec
 8009dd0:	fffffe60 	.word	0xfffffe60
 8009dd4:	08014dcc 	.word	0x08014dcc
 8009dd8:	08014de8 	.word	0x08014de8
 8009ddc:	08014e38 	.word	0x08014e38
 8009de0:	0801445c 	.word	0x0801445c
 8009de4:	080159a0 	.word	0x080159a0
 8009de8:	08014e4c 	.word	0x08014e4c
 8009dec:	08014e78 	.word	0x08014e78
 8009df0:	08014e90 	.word	0x08014e90
 8009df4:	08014e94 	.word	0x08014e94

08009df8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <is_sak_available+0x10>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
}
 8009e00:	0018      	movs	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	20000b28 	.word	0x20000b28

08009e0c <is_astronode_reset>:

bool is_astronode_reset()
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009e10:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <is_astronode_reset+0x10>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
}
 8009e14:	0018      	movs	r0, r3
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	20000b29 	.word	0x20000b29

08009e20 <is_command_available>:

bool is_command_available()
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009e24:	4b02      	ldr	r3, [pc, #8]	; (8009e30 <is_command_available+0x10>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
}
 8009e28:	0018      	movs	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	20000b2a 	.word	0x20000b2a

08009e34 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	0002      	movs	r2, r0
 8009e3c:	6039      	str	r1, [r7, #0]
 8009e3e:	1dfb      	adds	r3, r7, #7
 8009e40:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009e42:	1dfb      	adds	r3, r7, #7
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b2f      	cmp	r3, #47	; 0x2f
 8009e48:	d90b      	bls.n	8009e62 <ascii_to_value+0x2e>
 8009e4a:	1dfb      	adds	r3, r7, #7
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b39      	cmp	r3, #57	; 0x39
 8009e50:	d807      	bhi.n	8009e62 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009e52:	1dfb      	adds	r3, r7, #7
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	3b30      	subs	r3, #48	; 0x30
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	701a      	strb	r2, [r3, #0]
        return true;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e010      	b.n	8009e84 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009e62:	1dfb      	adds	r3, r7, #7
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b40      	cmp	r3, #64	; 0x40
 8009e68:	d90b      	bls.n	8009e82 <ascii_to_value+0x4e>
 8009e6a:	1dfb      	adds	r3, r7, #7
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b46      	cmp	r3, #70	; 0x46
 8009e70:	d807      	bhi.n	8009e82 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009e72:	1dfb      	adds	r3, r7, #7
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	3b37      	subs	r3, #55	; 0x37
 8009e78:	b2da      	uxtb	r2, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	701a      	strb	r2, [r3, #0]
        return true;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009e82:	2300      	movs	r3, #0
    }
}
 8009e84:	0018      	movs	r0, r3
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009e96:	250e      	movs	r5, #14
 8009e98:	197b      	adds	r3, r7, r5
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009e9e:	197b      	adds	r3, r7, r5
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	197a      	adds	r2, r7, r5
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	8011      	strh	r1, [r2, #0]
 8009ea8:	001a      	movs	r2, r3
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	189b      	adds	r3, r3, r2
 8009eae:	2202      	movs	r2, #2
 8009eb0:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	260a      	movs	r6, #10
 8009eb6:	19bc      	adds	r4, r7, r6
 8009eb8:	4a44      	ldr	r2, [pc, #272]	; (8009fcc <astronode_create_request_transport+0x140>)
 8009eba:	2101      	movs	r1, #1
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f000 fa7d 	bl	800a3bc <calculate_crc>
 8009ec2:	0003      	movs	r3, r0
 8009ec4:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	1c58      	adds	r0, r3, #1
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	22c4      	movs	r2, #196	; 0xc4
 8009ece:	5a99      	ldrh	r1, [r3, r2]
 8009ed0:	19bc      	adds	r4, r7, r6
 8009ed2:	19bb      	adds	r3, r7, r6
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	001a      	movs	r2, r3
 8009ed8:	f000 fa70 	bl	800a3bc <calculate_crc>
 8009edc:	0003      	movs	r3, r0
 8009ede:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009ee0:	19bb      	adds	r3, r7, r6
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	b21a      	sxth	r2, r3
 8009ee8:	0031      	movs	r1, r6
 8009eea:	19bb      	adds	r3, r7, r6
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	b21b      	sxth	r3, r3
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	b21a      	sxth	r2, r3
 8009ef8:	187b      	adds	r3, r7, r1
 8009efa:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	7818      	ldrb	r0, [r3, #0]
 8009f00:	197b      	adds	r3, r7, r5
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	18d3      	adds	r3, r2, r3
 8009f08:	0019      	movs	r1, r3
 8009f0a:	f000 fbeb 	bl	800a6e4 <uint8_to_ascii_buffer>
    index += 2;
 8009f0e:	197b      	adds	r3, r7, r5
 8009f10:	197a      	adds	r2, r7, r5
 8009f12:	8812      	ldrh	r2, [r2, #0]
 8009f14:	3202      	adds	r2, #2
 8009f16:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f18:	230c      	movs	r3, #12
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	801a      	strh	r2, [r3, #0]
 8009f20:	e017      	b.n	8009f52 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009f22:	240c      	movs	r4, #12
 8009f24:	193b      	adds	r3, r7, r4
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	18d3      	adds	r3, r2, r3
 8009f2c:	7858      	ldrb	r0, [r3, #1]
 8009f2e:	250e      	movs	r5, #14
 8009f30:	197b      	adds	r3, r7, r5
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	18d3      	adds	r3, r2, r3
 8009f38:	0019      	movs	r1, r3
 8009f3a:	f000 fbd3 	bl	800a6e4 <uint8_to_ascii_buffer>
        index += 2;
 8009f3e:	197b      	adds	r3, r7, r5
 8009f40:	197a      	adds	r2, r7, r5
 8009f42:	8812      	ldrh	r2, [r2, #0]
 8009f44:	3202      	adds	r2, #2
 8009f46:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	881a      	ldrh	r2, [r3, #0]
 8009f4c:	193b      	adds	r3, r7, r4
 8009f4e:	3201      	adds	r2, #1
 8009f50:	801a      	strh	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	22c4      	movs	r2, #196	; 0xc4
 8009f56:	5a9b      	ldrh	r3, [r3, r2]
 8009f58:	220c      	movs	r2, #12
 8009f5a:	18ba      	adds	r2, r7, r2
 8009f5c:	8812      	ldrh	r2, [r2, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d3df      	bcc.n	8009f22 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009f62:	250a      	movs	r5, #10
 8009f64:	197b      	adds	r3, r7, r5
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	0a1b      	lsrs	r3, r3, #8
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	b2d8      	uxtb	r0, r3
 8009f6e:	240e      	movs	r4, #14
 8009f70:	193b      	adds	r3, r7, r4
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	18d3      	adds	r3, r2, r3
 8009f78:	0019      	movs	r1, r3
 8009f7a:	f000 fbb3 	bl	800a6e4 <uint8_to_ascii_buffer>
    index += 2;
 8009f7e:	0021      	movs	r1, r4
 8009f80:	187b      	adds	r3, r7, r1
 8009f82:	187a      	adds	r2, r7, r1
 8009f84:	8812      	ldrh	r2, [r2, #0]
 8009f86:	3202      	adds	r2, #2
 8009f88:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8009f8a:	197b      	adds	r3, r7, r5
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b2d8      	uxtb	r0, r3
 8009f90:	000c      	movs	r4, r1
 8009f92:	187b      	adds	r3, r7, r1
 8009f94:	881b      	ldrh	r3, [r3, #0]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	18d3      	adds	r3, r2, r3
 8009f9a:	0019      	movs	r1, r3
 8009f9c:	f000 fba2 	bl	800a6e4 <uint8_to_ascii_buffer>
    index += 2;
 8009fa0:	0020      	movs	r0, r4
 8009fa2:	183b      	adds	r3, r7, r0
 8009fa4:	183a      	adds	r2, r7, r0
 8009fa6:	8812      	ldrh	r2, [r2, #0]
 8009fa8:	3202      	adds	r2, #2
 8009faa:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8009fac:	183b      	adds	r3, r7, r0
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	183a      	adds	r2, r7, r0
 8009fb2:	1c59      	adds	r1, r3, #1
 8009fb4:	8011      	strh	r1, [r2, #0]
 8009fb6:	001a      	movs	r2, r3
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	189b      	adds	r3, r3, r2
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	701a      	strb	r2, [r3, #0]

    return index;
 8009fc0:	183b      	adds	r3, r7, r0
 8009fc2:	881b      	ldrh	r3, [r3, #0]
}
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b005      	add	sp, #20
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fcc:	0000ffff 	.word	0x0000ffff

08009fd0 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd2:	b089      	sub	sp, #36	; 0x24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	230a      	movs	r3, #10
 8009fdc:	18fb      	adds	r3, r7, r3
 8009fde:	1c0a      	adds	r2, r1, #0
 8009fe0:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d005      	beq.n	8009ff6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009fea:	4bbd      	ldr	r3, [pc, #756]	; (800a2e0 <astronode_decode_answer_transport+0x310>)
 8009fec:	0018      	movs	r0, r3
 8009fee:	f7f9 f843 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e170      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8009ff6:	210a      	movs	r1, #10
 8009ff8:	187b      	adds	r3, r7, r1
 8009ffa:	881b      	ldrh	r3, [r3, #0]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	4013      	ands	r3, r2
 800a000:	b29b      	uxth	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <astronode_decode_answer_transport+0x3e>
 800a006:	187b      	adds	r3, r7, r1
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	2b07      	cmp	r3, #7
 800a00c:	d805      	bhi.n	800a01a <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800a00e:	4bb5      	ldr	r3, [pc, #724]	; (800a2e4 <astronode_decode_answer_transport+0x314>)
 800a010:	0018      	movs	r0, r3
 800a012:	f7f9 f831 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a016:	2300      	movs	r3, #0
 800a018:	e15e      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800a01a:	230a      	movs	r3, #10
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	3b08      	subs	r3, #8
 800a022:	2b00      	cmp	r3, #0
 800a024:	da00      	bge.n	800a028 <astronode_decode_answer_transport+0x58>
 800a026:	3301      	adds	r3, #1
 800a028:	105b      	asrs	r3, r3, #1
 800a02a:	b299      	uxth	r1, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	22c4      	movs	r2, #196	; 0xc4
 800a030:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800a032:	230a      	movs	r3, #10
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	3b01      	subs	r3, #1
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	18d3      	adds	r3, r2, r3
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d005      	beq.n	800a050 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800a044:	4ba8      	ldr	r3, [pc, #672]	; (800a2e8 <astronode_decode_answer_transport+0x318>)
 800a046:	0018      	movs	r0, r3
 800a048:	f7f9 f816 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e143      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800a050:	2117      	movs	r1, #23
 800a052:	187b      	adds	r3, r7, r1
 800a054:	2200      	movs	r2, #0
 800a056:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800a058:	2416      	movs	r4, #22
 800a05a:	193b      	adds	r3, r7, r4
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3301      	adds	r3, #1
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	187a      	adds	r2, r7, r1
 800a068:	0011      	movs	r1, r2
 800a06a:	0018      	movs	r0, r3
 800a06c:	f7ff fee2 	bl	8009e34 <ascii_to_value>
 800a070:	0003      	movs	r3, r0
 800a072:	001a      	movs	r2, r3
 800a074:	2301      	movs	r3, #1
 800a076:	4053      	eors	r3, r2
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10e      	bne.n	800a09c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3302      	adds	r3, #2
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	193a      	adds	r2, r7, r4
 800a086:	0011      	movs	r1, r2
 800a088:	0018      	movs	r0, r3
 800a08a:	f7ff fed3 	bl	8009e34 <ascii_to_value>
 800a08e:	0003      	movs	r3, r0
 800a090:	001a      	movs	r2, r3
 800a092:	2301      	movs	r3, #1
 800a094:	4053      	eors	r3, r2
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d005      	beq.n	800a0a8 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a09c:	4b93      	ldr	r3, [pc, #588]	; (800a2ec <astronode_decode_answer_transport+0x31c>)
 800a09e:	0018      	movs	r0, r3
 800a0a0:	f7f8 ffea 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e117      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800a0a8:	2317      	movs	r3, #23
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	011b      	lsls	r3, r3, #4
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	2316      	movs	r3, #22
 800a0b4:	18fb      	adds	r3, r7, r3
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	18d3      	adds	r3, r2, r3
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a0c0:	231e      	movs	r3, #30
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	231c      	movs	r3, #28
 800a0ca:	18fb      	adds	r3, r7, r3
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e045      	b.n	800a15e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800a0d2:	241e      	movs	r4, #30
 800a0d4:	193b      	adds	r3, r7, r4
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	18d3      	adds	r3, r2, r3
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2217      	movs	r2, #23
 800a0e0:	18ba      	adds	r2, r7, r2
 800a0e2:	0011      	movs	r1, r2
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7ff fea5 	bl	8009e34 <ascii_to_value>
 800a0ea:	0003      	movs	r3, r0
 800a0ec:	001a      	movs	r2, r3
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4053      	eors	r3, r2
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d112      	bne.n	800a11e <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800a0f8:	193b      	adds	r3, r7, r4
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	18d3      	adds	r3, r2, r3
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2216      	movs	r2, #22
 800a106:	18ba      	adds	r2, r7, r2
 800a108:	0011      	movs	r1, r2
 800a10a:	0018      	movs	r0, r3
 800a10c:	f7ff fe92 	bl	8009e34 <ascii_to_value>
 800a110:	0003      	movs	r3, r0
 800a112:	001a      	movs	r2, r3
 800a114:	2301      	movs	r3, #1
 800a116:	4053      	eors	r3, r2
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d005      	beq.n	800a12a <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a11e:	4b73      	ldr	r3, [pc, #460]	; (800a2ec <astronode_decode_answer_transport+0x31c>)
 800a120:	0018      	movs	r0, r3
 800a122:	f7f8 ffa9 	bl	8003078 <send_debug_logs>
            return RS_FAILURE;
 800a126:	2300      	movs	r3, #0
 800a128:	e0d6      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800a12a:	2317      	movs	r3, #23
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	b2d9      	uxtb	r1, r3
 800a134:	2316      	movs	r3, #22
 800a136:	18fb      	adds	r3, r7, r3
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	201c      	movs	r0, #28
 800a13c:	183b      	adds	r3, r7, r0
 800a13e:	881b      	ldrh	r3, [r3, #0]
 800a140:	1838      	adds	r0, r7, r0
 800a142:	1c5c      	adds	r4, r3, #1
 800a144:	8004      	strh	r4, [r0, #0]
 800a146:	0018      	movs	r0, r3
 800a148:	188b      	adds	r3, r1, r2
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	181b      	adds	r3, r3, r0
 800a150:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a152:	221e      	movs	r2, #30
 800a154:	18bb      	adds	r3, r7, r2
 800a156:	18ba      	adds	r2, r7, r2
 800a158:	8812      	ldrh	r2, [r2, #0]
 800a15a:	3202      	adds	r2, #2
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	231e      	movs	r3, #30
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	260a      	movs	r6, #10
 800a166:	19bb      	adds	r3, r7, r6
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	3b05      	subs	r3, #5
 800a16c:	429a      	cmp	r2, r3
 800a16e:	dbb0      	blt.n	800a0d2 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	251a      	movs	r5, #26
 800a174:	197c      	adds	r4, r7, r5
 800a176:	4a5e      	ldr	r2, [pc, #376]	; (800a2f0 <astronode_decode_answer_transport+0x320>)
 800a178:	2101      	movs	r1, #1
 800a17a:	0018      	movs	r0, r3
 800a17c:	f000 f91e 	bl	800a3bc <calculate_crc>
 800a180:	0003      	movs	r3, r0
 800a182:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	1c58      	adds	r0, r3, #1
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	22c4      	movs	r2, #196	; 0xc4
 800a18c:	5a99      	ldrh	r1, [r3, r2]
 800a18e:	197c      	adds	r4, r7, r5
 800a190:	197b      	adds	r3, r7, r5
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	001a      	movs	r2, r3
 800a196:	f000 f911 	bl	800a3bc <calculate_crc>
 800a19a:	0003      	movs	r3, r0
 800a19c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800a19e:	197b      	adds	r3, r7, r5
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b21a      	sxth	r2, r3
 800a1a6:	0029      	movs	r1, r5
 800a1a8:	197b      	adds	r3, r7, r5
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	0a1b      	lsrs	r3, r3, #8
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	b21b      	sxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b21a      	sxth	r2, r3
 800a1b6:	187b      	adds	r3, r7, r1
 800a1b8:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800a1ba:	19bb      	adds	r3, r7, r6
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	3b05      	subs	r3, #5
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	18d3      	adds	r3, r2, r3
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2217      	movs	r2, #23
 800a1c8:	18ba      	adds	r2, r7, r2
 800a1ca:	0011      	movs	r1, r2
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7ff fe31 	bl	8009e34 <ascii_to_value>
 800a1d2:	0003      	movs	r3, r0
 800a1d4:	001a      	movs	r2, r3
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4053      	eors	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d112      	bne.n	800a206 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800a1e0:	19bb      	adds	r3, r7, r6
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	3b04      	subs	r3, #4
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	18d3      	adds	r3, r2, r3
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2216      	movs	r2, #22
 800a1ee:	18ba      	adds	r2, r7, r2
 800a1f0:	0011      	movs	r1, r2
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f7ff fe1e 	bl	8009e34 <ascii_to_value>
 800a1f8:	0003      	movs	r3, r0
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4053      	eors	r3, r2
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a206:	4b39      	ldr	r3, [pc, #228]	; (800a2ec <astronode_decode_answer_transport+0x31c>)
 800a208:	0018      	movs	r0, r3
 800a20a:	f7f8 ff35 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a20e:	2300      	movs	r3, #0
 800a210:	e062      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800a212:	2017      	movs	r0, #23
 800a214:	183b      	adds	r3, r7, r0
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	031b      	lsls	r3, r3, #12
 800a21c:	b299      	uxth	r1, r3
 800a21e:	2416      	movs	r4, #22
 800a220:	193b      	adds	r3, r7, r4
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	021b      	lsls	r3, r3, #8
 800a228:	b29a      	uxth	r2, r3
 800a22a:	2318      	movs	r3, #24
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	188a      	adds	r2, r1, r2
 800a230:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800a232:	250a      	movs	r5, #10
 800a234:	197b      	adds	r3, r7, r5
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	3b03      	subs	r3, #3
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	183a      	adds	r2, r7, r0
 800a242:	0011      	movs	r1, r2
 800a244:	0018      	movs	r0, r3
 800a246:	f7ff fdf5 	bl	8009e34 <ascii_to_value>
 800a24a:	0003      	movs	r3, r0
 800a24c:	001a      	movs	r2, r3
 800a24e:	2301      	movs	r3, #1
 800a250:	4053      	eors	r3, r2
 800a252:	b2db      	uxtb	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	d111      	bne.n	800a27c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800a258:	197b      	adds	r3, r7, r5
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	3b02      	subs	r3, #2
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	18d3      	adds	r3, r2, r3
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	193a      	adds	r2, r7, r4
 800a266:	0011      	movs	r1, r2
 800a268:	0018      	movs	r0, r3
 800a26a:	f7ff fde3 	bl	8009e34 <ascii_to_value>
 800a26e:	0003      	movs	r3, r0
 800a270:	001a      	movs	r2, r3
 800a272:	2301      	movs	r3, #1
 800a274:	4053      	eors	r3, r2
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d005      	beq.n	800a288 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a27c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <astronode_decode_answer_transport+0x31c>)
 800a27e:	0018      	movs	r0, r3
 800a280:	f7f8 fefa 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a284:	2300      	movs	r3, #0
 800a286:	e027      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800a288:	2317      	movs	r3, #23
 800a28a:	18fb      	adds	r3, r7, r3
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	b29a      	uxth	r2, r3
 800a294:	2316      	movs	r3, #22
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	18d3      	adds	r3, r2, r3
 800a29e:	b299      	uxth	r1, r3
 800a2a0:	2018      	movs	r0, #24
 800a2a2:	183b      	adds	r3, r7, r0
 800a2a4:	183a      	adds	r2, r7, r0
 800a2a6:	8812      	ldrh	r2, [r2, #0]
 800a2a8:	188a      	adds	r2, r1, r2
 800a2aa:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800a2ac:	183a      	adds	r2, r7, r0
 800a2ae:	231a      	movs	r3, #26
 800a2b0:	18fb      	adds	r3, r7, r3
 800a2b2:	8812      	ldrh	r2, [r2, #0]
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d005      	beq.n	800a2c6 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800a2ba:	4b0e      	ldr	r3, [pc, #56]	; (800a2f4 <astronode_decode_answer_transport+0x324>)
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f7f8 fedb 	bl	8003078 <send_debug_logs>
        return RS_FAILURE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e008      	b.n	800a2d8 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2bff      	cmp	r3, #255	; 0xff
 800a2cc:	d103      	bne.n	800a2d6 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 f8c3 	bl	800a45c <check_for_error>
    }

    return RS_SUCCESS;
 800a2d6:	2301      	movs	r3, #1
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b009      	add	sp, #36	; 0x24
 800a2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e0:	08014f24 	.word	0x08014f24
 800a2e4:	08014f74 	.word	0x08014f74
 800a2e8:	08014fc4 	.word	0x08014fc4
 800a2ec:	08015014 	.word	0x08015014
 800a2f0:	0000ffff 	.word	0x0000ffff
 800a2f4:	08015060 	.word	0x08015060

0800a2f8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	4c2b      	ldr	r4, [pc, #172]	; (800a3a8 <astronode_transport_send_receive+0xb0>)
 800a2fc:	44a5      	add	sp, r4
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a304:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <astronode_transport_send_receive+0xb4>)
 800a306:	25ca      	movs	r5, #202	; 0xca
 800a308:	00ad      	lsls	r5, r5, #2
 800a30a:	195b      	adds	r3, r3, r5
 800a30c:	19db      	adds	r3, r3, r7
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	3304      	adds	r3, #4
 800a314:	22c4      	movs	r2, #196	; 0xc4
 800a316:	0052      	lsls	r2, r2, #1
 800a318:	2100      	movs	r1, #0
 800a31a:	0018      	movs	r0, r3
 800a31c:	f002 ff96 	bl	800d24c <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a320:	4b23      	ldr	r3, [pc, #140]	; (800a3b0 <astronode_transport_send_receive+0xb8>)
 800a322:	195b      	adds	r3, r3, r5
 800a324:	19db      	adds	r3, r3, r7
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	3304      	adds	r3, #4
 800a32c:	22c4      	movs	r2, #196	; 0xc4
 800a32e:	0052      	lsls	r2, r2, #1
 800a330:	2100      	movs	r1, #0
 800a332:	0018      	movs	r0, r3
 800a334:	f002 ff8a 	bl	800d24c <memset>
    uint16_t answer_length =  0;
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <astronode_transport_send_receive+0xbc>)
 800a33a:	195b      	adds	r3, r3, r5
 800a33c:	19db      	adds	r3, r3, r7
 800a33e:	2200      	movs	r2, #0
 800a340:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800a342:	4e1d      	ldr	r6, [pc, #116]	; (800a3b8 <astronode_transport_send_receive+0xc0>)
 800a344:	19bc      	adds	r4, r7, r6
 800a346:	23cc      	movs	r3, #204	; 0xcc
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	18fa      	adds	r2, r7, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	0011      	movs	r1, r2
 800a350:	0018      	movs	r0, r3
 800a352:	f7ff fd9b 	bl	8009e8c <astronode_create_request_transport>
 800a356:	0003      	movs	r3, r0
 800a358:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800a35a:	19bb      	adds	r3, r7, r6
 800a35c:	881a      	ldrh	r2, [r3, #0]
 800a35e:	23cc      	movs	r3, #204	; 0xcc
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	18fb      	adds	r3, r7, r3
 800a364:	0011      	movs	r1, r2
 800a366:	0018      	movs	r0, r3
 800a368:	f7f9 fb30 	bl	80039cc <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800a36c:	230a      	movs	r3, #10
 800a36e:	18fa      	adds	r2, r7, r3
 800a370:	240c      	movs	r4, #12
 800a372:	193b      	adds	r3, r7, r4
 800a374:	0011      	movs	r1, r2
 800a376:	0018      	movs	r0, r3
 800a378:	f000 f92c 	bl	800a5d4 <receive_astronode_answer>
 800a37c:	0003      	movs	r3, r0
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10a      	bne.n	800a398 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800a382:	4b0c      	ldr	r3, [pc, #48]	; (800a3b4 <astronode_transport_send_receive+0xbc>)
 800a384:	195b      	adds	r3, r3, r5
 800a386:	19db      	adds	r3, r3, r7
 800a388:	8819      	ldrh	r1, [r3, #0]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	193b      	adds	r3, r7, r4
 800a38e:	0018      	movs	r0, r3
 800a390:	f7ff fe1e 	bl	8009fd0 <astronode_decode_answer_transport>
 800a394:	0003      	movs	r3, r0
 800a396:	e000      	b.n	800a39a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800a398:	2300      	movs	r3, #0
    }
}
 800a39a:	0018      	movs	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	23cb      	movs	r3, #203	; 0xcb
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	449d      	add	sp, r3
 800a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	fffffcd4 	.word	0xfffffcd4
 800a3ac:	fffffe70 	.word	0xfffffe70
 800a3b0:	fffffce4 	.word	0xfffffce4
 800a3b4:	fffffce2 	.word	0xfffffce2
 800a3b8:	00000326 	.word	0x00000326

0800a3bc <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800a3bc:	b590      	push	{r4, r7, lr}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	0008      	movs	r0, r1
 800a3c6:	0011      	movs	r1, r2
 800a3c8:	1cbb      	adds	r3, r7, #2
 800a3ca:	1c02      	adds	r2, r0, #0
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	003b      	movs	r3, r7
 800a3d0:	1c0a      	adds	r2, r1, #0
 800a3d2:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800a3d4:	230e      	movs	r3, #14
 800a3d6:	18fb      	adds	r3, r7, r3
 800a3d8:	003a      	movs	r2, r7
 800a3da:	8812      	ldrh	r2, [r2, #0]
 800a3dc:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800a3de:	e02e      	b.n	800a43e <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800a3e0:	240e      	movs	r4, #14
 800a3e2:	193b      	adds	r3, r7, r4
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	b299      	uxth	r1, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	200c      	movs	r0, #12
 800a3f6:	183b      	adds	r3, r7, r0
 800a3f8:	404a      	eors	r2, r1
 800a3fa:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800a3fc:	183b      	adds	r3, r7, r0
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	091b      	lsrs	r3, r3, #4
 800a402:	b299      	uxth	r1, r3
 800a404:	183b      	adds	r3, r7, r0
 800a406:	183a      	adds	r2, r7, r0
 800a408:	8812      	ldrh	r2, [r2, #0]
 800a40a:	404a      	eors	r2, r1
 800a40c:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800a40e:	0021      	movs	r1, r4
 800a410:	187b      	adds	r3, r7, r1
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	021b      	lsls	r3, r3, #8
 800a416:	b21a      	sxth	r2, r3
 800a418:	183b      	adds	r3, r7, r0
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	031b      	lsls	r3, r3, #12
 800a41e:	b21b      	sxth	r3, r3
 800a420:	4053      	eors	r3, r2
 800a422:	b21a      	sxth	r2, r3
 800a424:	183b      	adds	r3, r7, r0
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	015b      	lsls	r3, r3, #5
 800a42a:	b21b      	sxth	r3, r3
 800a42c:	4053      	eors	r3, r2
 800a42e:	b21a      	sxth	r2, r3
 800a430:	183b      	adds	r3, r7, r0
 800a432:	2000      	movs	r0, #0
 800a434:	5e1b      	ldrsh	r3, [r3, r0]
 800a436:	4053      	eors	r3, r2
 800a438:	b21a      	sxth	r2, r3
 800a43a:	187b      	adds	r3, r7, r1
 800a43c:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800a43e:	1cbb      	adds	r3, r7, #2
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	1cba      	adds	r2, r7, #2
 800a444:	1e59      	subs	r1, r3, #1
 800a446:	8011      	strh	r1, [r2, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1c9      	bne.n	800a3e0 <calculate_crc+0x24>
    }
    return crc;
 800a44c:	230e      	movs	r3, #14
 800a44e:	18fb      	adds	r3, r7, r3
 800a450:	881b      	ldrh	r3, [r3, #0]
}
 800a452:	0018      	movs	r0, r3
 800a454:	46bd      	mov	sp, r7
 800a456:	b005      	add	sp, #20
 800a458:	bd90      	pop	{r4, r7, pc}
	...

0800a45c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	b299      	uxth	r1, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	789b      	ldrb	r3, [r3, #2]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	b29a      	uxth	r2, r3
 800a474:	200e      	movs	r0, #14
 800a476:	183b      	adds	r3, r7, r0
 800a478:	188a      	adds	r2, r1, r2
 800a47a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800a47c:	183b      	adds	r3, r7, r0
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	4a40      	ldr	r2, [pc, #256]	; (800a584 <check_for_error+0x128>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d100      	bne.n	800a488 <check_for_error+0x2c>
 800a486:	e06f      	b.n	800a568 <check_for_error+0x10c>
 800a488:	4a3e      	ldr	r2, [pc, #248]	; (800a584 <check_for_error+0x128>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	dd00      	ble.n	800a490 <check_for_error+0x34>
 800a48e:	e070      	b.n	800a572 <check_for_error+0x116>
 800a490:	4a3d      	ldr	r2, [pc, #244]	; (800a588 <check_for_error+0x12c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d100      	bne.n	800a498 <check_for_error+0x3c>
 800a496:	e062      	b.n	800a55e <check_for_error+0x102>
 800a498:	4a3b      	ldr	r2, [pc, #236]	; (800a588 <check_for_error+0x12c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	dd00      	ble.n	800a4a0 <check_for_error+0x44>
 800a49e:	e068      	b.n	800a572 <check_for_error+0x116>
 800a4a0:	4a3a      	ldr	r2, [pc, #232]	; (800a58c <check_for_error+0x130>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d056      	beq.n	800a554 <check_for_error+0xf8>
 800a4a6:	4a39      	ldr	r2, [pc, #228]	; (800a58c <check_for_error+0x130>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	dd00      	ble.n	800a4ae <check_for_error+0x52>
 800a4ac:	e061      	b.n	800a572 <check_for_error+0x116>
 800a4ae:	4a38      	ldr	r2, [pc, #224]	; (800a590 <check_for_error+0x134>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d04a      	beq.n	800a54a <check_for_error+0xee>
 800a4b4:	4a36      	ldr	r2, [pc, #216]	; (800a590 <check_for_error+0x134>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	dc5b      	bgt.n	800a572 <check_for_error+0x116>
 800a4ba:	4a36      	ldr	r2, [pc, #216]	; (800a594 <check_for_error+0x138>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d03f      	beq.n	800a540 <check_for_error+0xe4>
 800a4c0:	4a34      	ldr	r2, [pc, #208]	; (800a594 <check_for_error+0x138>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	dc55      	bgt.n	800a572 <check_for_error+0x116>
 800a4c6:	4a34      	ldr	r2, [pc, #208]	; (800a598 <check_for_error+0x13c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d034      	beq.n	800a536 <check_for_error+0xda>
 800a4cc:	4a32      	ldr	r2, [pc, #200]	; (800a598 <check_for_error+0x13c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	dc4f      	bgt.n	800a572 <check_for_error+0x116>
 800a4d2:	4a32      	ldr	r2, [pc, #200]	; (800a59c <check_for_error+0x140>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d029      	beq.n	800a52c <check_for_error+0xd0>
 800a4d8:	4a30      	ldr	r2, [pc, #192]	; (800a59c <check_for_error+0x140>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	dc49      	bgt.n	800a572 <check_for_error+0x116>
 800a4de:	4a30      	ldr	r2, [pc, #192]	; (800a5a0 <check_for_error+0x144>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d01e      	beq.n	800a522 <check_for_error+0xc6>
 800a4e4:	4a2e      	ldr	r2, [pc, #184]	; (800a5a0 <check_for_error+0x144>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	dc43      	bgt.n	800a572 <check_for_error+0x116>
 800a4ea:	2222      	movs	r2, #34	; 0x22
 800a4ec:	32ff      	adds	r2, #255	; 0xff
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d012      	beq.n	800a518 <check_for_error+0xbc>
 800a4f2:	2291      	movs	r2, #145	; 0x91
 800a4f4:	0052      	lsls	r2, r2, #1
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	da3b      	bge.n	800a572 <check_for_error+0x116>
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d002      	beq.n	800a504 <check_for_error+0xa8>
 800a4fe:	2b11      	cmp	r3, #17
 800a500:	d005      	beq.n	800a50e <check_for_error+0xb2>
 800a502:	e036      	b.n	800a572 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800a504:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <check_for_error+0x148>)
 800a506:	0018      	movs	r0, r3
 800a508:	f7f8 fdb6 	bl	8003078 <send_debug_logs>
            break;
 800a50c:	e036      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800a50e:	4b26      	ldr	r3, [pc, #152]	; (800a5a8 <check_for_error+0x14c>)
 800a510:	0018      	movs	r0, r3
 800a512:	f7f8 fdb1 	bl	8003078 <send_debug_logs>
            break;
 800a516:	e031      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800a518:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <check_for_error+0x150>)
 800a51a:	0018      	movs	r0, r3
 800a51c:	f7f8 fdac 	bl	8003078 <send_debug_logs>
            break;
 800a520:	e02c      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800a522:	4b23      	ldr	r3, [pc, #140]	; (800a5b0 <check_for_error+0x154>)
 800a524:	0018      	movs	r0, r3
 800a526:	f7f8 fda7 	bl	8003078 <send_debug_logs>
            break;
 800a52a:	e027      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800a52c:	4b21      	ldr	r3, [pc, #132]	; (800a5b4 <check_for_error+0x158>)
 800a52e:	0018      	movs	r0, r3
 800a530:	f7f8 fda2 	bl	8003078 <send_debug_logs>
            break;
 800a534:	e022      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800a536:	4b20      	ldr	r3, [pc, #128]	; (800a5b8 <check_for_error+0x15c>)
 800a538:	0018      	movs	r0, r3
 800a53a:	f7f8 fd9d 	bl	8003078 <send_debug_logs>
            break;
 800a53e:	e01d      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800a540:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <check_for_error+0x160>)
 800a542:	0018      	movs	r0, r3
 800a544:	f7f8 fd98 	bl	8003078 <send_debug_logs>
            break;
 800a548:	e018      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800a54a:	4b1d      	ldr	r3, [pc, #116]	; (800a5c0 <check_for_error+0x164>)
 800a54c:	0018      	movs	r0, r3
 800a54e:	f7f8 fd93 	bl	8003078 <send_debug_logs>
            break;
 800a552:	e013      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800a554:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <check_for_error+0x168>)
 800a556:	0018      	movs	r0, r3
 800a558:	f7f8 fd8e 	bl	8003078 <send_debug_logs>
            break;
 800a55c:	e00e      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800a55e:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <check_for_error+0x16c>)
 800a560:	0018      	movs	r0, r3
 800a562:	f7f8 fd89 	bl	8003078 <send_debug_logs>
            break;
 800a566:	e009      	b.n	800a57c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800a568:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <check_for_error+0x170>)
 800a56a:	0018      	movs	r0, r3
 800a56c:	f7f8 fd84 	bl	8003078 <send_debug_logs>
            break;
 800a570:	e004      	b.n	800a57c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800a572:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <check_for_error+0x174>)
 800a574:	0018      	movs	r0, r3
 800a576:	f7f8 fd7f 	bl	8003078 <send_debug_logs>
            break;
 800a57a:	46c0      	nop			; (mov r8, r8)
    }
}
 800a57c:	46c0      	nop			; (mov r8, r8)
 800a57e:	46bd      	mov	sp, r7
 800a580:	b004      	add	sp, #16
 800a582:	bd80      	pop	{r7, pc}
 800a584:	00004601 	.word	0x00004601
 800a588:	00004501 	.word	0x00004501
 800a58c:	00003501 	.word	0x00003501
 800a590:	00002601 	.word	0x00002601
 800a594:	00002511 	.word	0x00002511
 800a598:	00002501 	.word	0x00002501
 800a59c:	00000611 	.word	0x00000611
 800a5a0:	00000601 	.word	0x00000601
 800a5a4:	080150a4 	.word	0x080150a4
 800a5a8:	080150f0 	.word	0x080150f0
 800a5ac:	08015154 	.word	0x08015154
 800a5b0:	0801518c 	.word	0x0801518c
 800a5b4:	08015230 	.word	0x08015230
 800a5b8:	08015298 	.word	0x08015298
 800a5bc:	080152f8 	.word	0x080152f8
 800a5c0:	08015384 	.word	0x08015384
 800a5c4:	080153e4 	.word	0x080153e4
 800a5c8:	08015490 	.word	0x08015490
 800a5cc:	080154dc 	.word	0x080154dc
 800a5d0:	08015524 	.word	0x08015524

0800a5d4 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800a5d4:	b5b0      	push	{r4, r5, r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800a5de:	230f      	movs	r3, #15
 800a5e0:	18fb      	adds	r3, r7, r3
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800a5e6:	2316      	movs	r3, #22
 800a5e8:	18fb      	adds	r3, r7, r3
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800a5ee:	f7f9 fa0b 	bl	8003a08 <get_systick>
 800a5f2:	0003      	movs	r3, r0
 800a5f4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800a5f6:	2315      	movs	r3, #21
 800a5f8:	18fb      	adds	r3, r7, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800a5fe:	e054      	b.n	800a6aa <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800a600:	4a34      	ldr	r2, [pc, #208]	; (800a6d4 <receive_astronode_answer+0x100>)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	0011      	movs	r1, r2
 800a606:	0018      	movs	r0, r3
 800a608:	f7f9 fa06 	bl	8003a18 <is_systick_timeout_over>
 800a60c:	1e03      	subs	r3, r0, #0
 800a60e:	d005      	beq.n	800a61c <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800a610:	4b31      	ldr	r3, [pc, #196]	; (800a6d8 <receive_astronode_answer+0x104>)
 800a612:	0018      	movs	r0, r3
 800a614:	f7f8 fd30 	bl	8003078 <send_debug_logs>
            return RS_FAILURE;
 800a618:	2300      	movs	r3, #0
 800a61a:	e057      	b.n	800a6cc <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800a61c:	250f      	movs	r5, #15
 800a61e:	197b      	adds	r3, r7, r5
 800a620:	0018      	movs	r0, r3
 800a622:	f7f9 fa0f 	bl	8003a44 <is_astronode_character_received>
 800a626:	0003      	movs	r3, r0
 800a628:	0019      	movs	r1, r3
 800a62a:	2016      	movs	r0, #22
 800a62c:	183b      	adds	r3, r7, r0
 800a62e:	183a      	adds	r2, r7, r0
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	801a      	strh	r2, [r3, #0]
 800a634:	2415      	movs	r4, #21
 800a636:	193b      	adds	r3, r7, r4
 800a638:	193a      	adds	r2, r7, r4
 800a63a:	7812      	ldrb	r2, [r2, #0]
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	2900      	cmp	r1, #0
 800a640:	d033      	beq.n	800a6aa <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800a642:	197b      	adds	r3, r7, r5
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	2b02      	cmp	r3, #2
 800a648:	d105      	bne.n	800a656 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800a64a:	193b      	adds	r3, r7, r4
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
                length = 0;
 800a650:	183b      	adds	r3, r7, r0
 800a652:	2200      	movs	r2, #0
 800a654:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800a656:	2116      	movs	r1, #22
 800a658:	187b      	adds	r3, r7, r1
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	18d3      	adds	r3, r2, r3
 800a660:	220f      	movs	r2, #15
 800a662:	18ba      	adds	r2, r7, r2
 800a664:	7812      	ldrb	r2, [r2, #0]
 800a666:	701a      	strb	r2, [r3, #0]
            length++;
 800a668:	187b      	adds	r3, r7, r1
 800a66a:	881a      	ldrh	r2, [r3, #0]
 800a66c:	187b      	adds	r3, r7, r1
 800a66e:	3201      	adds	r2, #1
 800a670:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800a672:	187b      	adds	r3, r7, r1
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	2bb2      	cmp	r3, #178	; 0xb2
 800a678:	d905      	bls.n	800a686 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800a67a:	4b18      	ldr	r3, [pc, #96]	; (800a6dc <receive_astronode_answer+0x108>)
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7f8 fcfb 	bl	8003078 <send_debug_logs>
                return RS_FAILURE;
 800a682:	2300      	movs	r3, #0
 800a684:	e022      	b.n	800a6cc <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800a686:	230f      	movs	r3, #15
 800a688:	18fb      	adds	r3, r7, r3
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d10c      	bne.n	800a6aa <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800a690:	2216      	movs	r2, #22
 800a692:	18bb      	adds	r3, r7, r2
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d907      	bls.n	800a6aa <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	18ba      	adds	r2, r7, r2
 800a69e:	8812      	ldrh	r2, [r2, #0]
 800a6a0:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800a6a2:	2315      	movs	r3, #21
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800a6aa:	2315      	movs	r3, #21
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4053      	eors	r3, r2
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1a2      	bne.n	800a600 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <receive_astronode_answer+0x10c>)
 800a6bc:	0018      	movs	r0, r3
 800a6be:	f7f8 fcdb 	bl	8003078 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f7f8 fcd7 	bl	8003078 <send_debug_logs>

    return RS_SUCCESS;
 800a6ca:	2301      	movs	r3, #1
}
 800a6cc:	0018      	movs	r0, r3
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	b006      	add	sp, #24
 800a6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a6d4:	000005dc 	.word	0x000005dc
 800a6d8:	08015548 	.word	0x08015548
 800a6dc:	0801556c 	.word	0x0801556c
 800a6e0:	080155b8 	.word	0x080155b8

0800a6e4 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	0002      	movs	r2, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	1dfb      	adds	r3, r7, #7
 800a6f0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800a6f2:	1dfb      	adds	r3, r7, #7
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	091b      	lsrs	r3, r3, #4
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	4b08      	ldr	r3, [pc, #32]	; (800a720 <uint8_to_ascii_buffer+0x3c>)
 800a6fe:	5c9a      	ldrb	r2, [r3, r2]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800a704:	1dfb      	adds	r3, r7, #7
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	220f      	movs	r2, #15
 800a70a:	401a      	ands	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	4903      	ldr	r1, [pc, #12]	; (800a720 <uint8_to_ascii_buffer+0x3c>)
 800a712:	5c8a      	ldrb	r2, [r1, r2]
 800a714:	701a      	strb	r2, [r3, #0]
}
 800a716:	46c0      	nop			; (mov r8, r8)
 800a718:	46bd      	mov	sp, r7
 800a71a:	b002      	add	sp, #8
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	08015918 	.word	0x08015918

0800a724 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800a724:	b5b0      	push	{r4, r5, r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	0008      	movs	r0, r1
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	0019      	movs	r1, r3
 800a732:	230b      	movs	r3, #11
 800a734:	18fb      	adds	r3, r7, r3
 800a736:	1c02      	adds	r2, r0, #0
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	2308      	movs	r3, #8
 800a73c:	18fb      	adds	r3, r7, r3
 800a73e:	1c0a      	adds	r2, r1, #0
 800a740:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <iis2dh_read_reg+0x2a>
 800a748:	2301      	movs	r3, #1
 800a74a:	425b      	negs	r3, r3
 800a74c:	e00f      	b.n	800a76e <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	685c      	ldr	r4, [r3, #4]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68d8      	ldr	r0, [r3, #12]
 800a756:	2308      	movs	r3, #8
 800a758:	18fb      	adds	r3, r7, r3
 800a75a:	881d      	ldrh	r5, [r3, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	230b      	movs	r3, #11
 800a760:	18fb      	adds	r3, r7, r3
 800a762:	7819      	ldrb	r1, [r3, #0]
 800a764:	002b      	movs	r3, r5
 800a766:	47a0      	blx	r4
 800a768:	0003      	movs	r3, r0
 800a76a:	617b      	str	r3, [r7, #20]

  return ret;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	0018      	movs	r0, r3
 800a770:	46bd      	mov	sp, r7
 800a772:	b006      	add	sp, #24
 800a774:	bdb0      	pop	{r4, r5, r7, pc}

0800a776 <iis2dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800a776:	b590      	push	{r4, r7, lr}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_OUT_TEMP_L, buff, 2);
 800a780:	2408      	movs	r4, #8
 800a782:	193a      	adds	r2, r7, r4
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	2302      	movs	r3, #2
 800a788:	210c      	movs	r1, #12
 800a78a:	f7ff ffcb 	bl	800a724 <iis2dh_read_reg>
 800a78e:	0003      	movs	r3, r0
 800a790:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 800a792:	0021      	movs	r1, r4
 800a794:	187b      	adds	r3, r7, r1
 800a796:	785b      	ldrb	r3, [r3, #1]
 800a798:	b21a      	sxth	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	5e9b      	ldrsh	r3, [r3, r2]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	021b      	lsls	r3, r3, #8
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	187b      	adds	r3, r7, r1
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	18d3      	adds	r3, r2, r3
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	b21a      	sxth	r2, r3
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	0018      	movs	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b005      	add	sp, #20
 800a7c2:	bd90      	pop	{r4, r7, pc}

0800a7c4 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	210f      	movs	r1, #15
 800a7d6:	f7ff ffa5 	bl	800a724 <iis2dh_read_reg>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	60fb      	str	r3, [r7, #12]

  return ret;
 800a7de:	68fb      	ldr	r3, [r7, #12]
}
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	b004      	add	sp, #16
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800a7e8:	b590      	push	{r4, r7, lr}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800a7ee:	1dfb      	adds	r3, r7, #7
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800a7f4:	e012      	b.n	800a81c <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800a7f6:	f7f9 f8cf 	bl	8003998 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800a7fa:	1dfc      	adds	r4, r7, #7
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9303      	str	r3, [sp, #12]
 800a800:	2301      	movs	r3, #1
 800a802:	9302      	str	r3, [sp, #8]
 800a804:	2301      	movs	r3, #1
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	2301      	movs	r3, #1
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	2300      	movs	r3, #0
 800a80e:	2201      	movs	r2, #1
 800a810:	2101      	movs	r1, #1
 800a812:	2001      	movs	r0, #1
 800a814:	f7fe fb02 	bl	8008e1c <astronode_send_cfg_wr>
 800a818:	0003      	movs	r3, r0
 800a81a:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 800a81c:	1dfb      	adds	r3, r7, #7
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2201      	movs	r2, #1
 800a822:	4053      	eors	r3, r2
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e5      	bne.n	800a7f6 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800a82a:	1dfb      	adds	r3, r7, #7
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00d      	beq.n	800a84e <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800a832:	f7fe ff59 	bl	80096e8 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800a836:	f7fe fab9 	bl	8008dac <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800a83a:	f7ff f84f 	bl	80098dc <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800a83e:	f7fe fc43 	bl	80090c8 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800a842:	f7fe fb97 	bl	8008f74 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800a846:	f7fe fed3 	bl	80095f0 <astronode_send_pld_fr>
		return true ;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800a84e:	2300      	movs	r3, #0
	}
}
 800a850:	0018      	movs	r0, r3
 800a852:	46bd      	mov	sp, r7
 800a854:	b003      	add	sp, #12
 800a856:	bd90      	pop	{r4, r7, pc}

0800a858 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , const char* payload )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	0002      	movs	r2, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	1dbb      	adds	r3, r7, #6
 800a864:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	0018      	movs	r0, r3
 800a86a:	f7f5 fc4b 	bl	8000104 <strlen>
 800a86e:	0003      	movs	r3, r0
 800a870:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2ba0      	cmp	r3, #160	; 0xa0
 800a876:	d80b      	bhi.n	800a890 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	b29a      	uxth	r2, r3
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	1dbb      	adds	r3, r7, #6
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	0018      	movs	r0, r3
 800a884:	f7fe fe0a 	bl	800949c <astronode_send_pld_er>
 800a888:	1e03      	subs	r3, r0, #0
 800a88a:	d005      	beq.n	800a898 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800a88c:	2301      	movs	r3, #1
 800a88e:	e004      	b.n	800a89a <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <my_astro_add_payload_2_queue+0x4c>)
 800a892:	0018      	movs	r0, r3
 800a894:	f7f8 fbf0 	bl	8003078 <send_debug_logs>
	}
	return false ;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	0018      	movs	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	b004      	add	sp, #16
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	080155e4 	.word	0x080155e4

0800a8a8 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800a8ac:	4b19      	ldr	r3, [pc, #100]	; (800a914 <my_astro_handle_evt+0x6c>)
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f7f8 fbe2 	bl	8003078 <send_debug_logs>
	astronode_send_evt_rr () ;
 800a8b4:	f7fe fcb2 	bl	800921c <astronode_send_evt_rr>
	if (is_sak_available () )
 800a8b8:	f7ff fa9e 	bl	8009df8 <is_sak_available>
 800a8bc:	1e03      	subs	r3, r0, #0
 800a8be:	d007      	beq.n	800a8d0 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800a8c0:	f7fe ff76 	bl	80097b0 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800a8c4:	f7fe ffca 	bl	800985c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800a8c8:	4b13      	ldr	r3, [pc, #76]	; (800a918 <my_astro_handle_evt+0x70>)
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	f7f8 fbd4 	bl	8003078 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800a8d0:	f7ff fa9c 	bl	8009e0c <is_astronode_reset>
 800a8d4:	1e03      	subs	r3, r0, #0
 800a8d6:	d005      	beq.n	800a8e4 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800a8d8:	4b10      	ldr	r3, [pc, #64]	; (800a91c <my_astro_handle_evt+0x74>)
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f7f8 fbcc 	bl	8003078 <send_debug_logs>
	  astronode_send_res_cr () ;
 800a8e0:	f7fe fec2 	bl	8009668 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800a8e4:	f7ff fa9c 	bl	8009e20 <is_command_available>
 800a8e8:	1e03      	subs	r3, r0, #0
 800a8ea:	d00e      	beq.n	800a90a <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800a8ec:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <my_astro_handle_evt+0x78>)
 800a8ee:	0018      	movs	r0, r3
 800a8f0:	f7f8 fbc2 	bl	8003078 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800a8f4:	4b0b      	ldr	r3, [pc, #44]	; (800a924 <my_astro_handle_evt+0x7c>)
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	f7ff f8da 	bl	8009ab0 <astronode_send_cmd_rr>
 800a8fc:	1e03      	subs	r3, r0, #0
 800a8fe:	d002      	beq.n	800a906 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800a900:	4b09      	ldr	r3, [pc, #36]	; (800a928 <my_astro_handle_evt+0x80>)
 800a902:	2201      	movs	r2, #1
 800a904:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800a906:	f7ff f893 	bl	8009a30 <astronode_send_cmd_cr>
	}
	return true ;
 800a90a:	2301      	movs	r3, #1
}
 800a90c:	0018      	movs	r0, r3
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	0801564c 	.word	0x0801564c
 800a918:	08015680 	.word	0x08015680
 800a91c:	080156c4 	.word	0x080156c4
 800a920:	08015700 	.word	0x08015700
 800a924:	20000c28 	.word	0x20000c28
 800a928:	20000c26 	.word	0x20000c26

0800a92c <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	0011      	movs	r1, r2
 800a93c:	0018      	movs	r0, r3
 800a93e:	f7fe fced 	bl	800931c <astronode_send_geo_wr>
}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	46bd      	mov	sp, r7
 800a946:	b002      	add	sp, #8
 800a948:	bd80      	pop	{r7, pc}
	...

0800a94c <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94e:	4ca5      	ldr	r4, [pc, #660]	; (800abe4 <my_gnss_acq_coordinates+0x298>)
 800a950:	44a5      	add	sp, r4
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800a956:	4ba4      	ldr	r3, [pc, #656]	; (800abe8 <my_gnss_acq_coordinates+0x29c>)
 800a958:	18fb      	adds	r3, r7, r3
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800a95e:	4ba3      	ldr	r3, [pc, #652]	; (800abec <my_gnss_acq_coordinates+0x2a0>)
 800a960:	18fb      	adds	r3, r7, r3
 800a962:	2200      	movs	r2, #0
 800a964:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800a966:	4ba2      	ldr	r3, [pc, #648]	; (800abf0 <my_gnss_acq_coordinates+0x2a4>)
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	2200      	movs	r2, #0
 800a96c:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800a96e:	4ba1      	ldr	r3, [pc, #644]	; (800abf4 <my_gnss_acq_coordinates+0x2a8>)
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	2200      	movs	r2, #0
 800a974:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800a976:	4ba0      	ldr	r3, [pc, #640]	; (800abf8 <my_gnss_acq_coordinates+0x2ac>)
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	2200      	movs	r2, #0
 800a97c:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800a97e:	4b9f      	ldr	r3, [pc, #636]	; (800abfc <my_gnss_acq_coordinates+0x2b0>)
 800a980:	2486      	movs	r4, #134	; 0x86
 800a982:	00a4      	lsls	r4, r4, #2
 800a984:	191b      	adds	r3, r3, r4
 800a986:	19db      	adds	r3, r3, r7
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	3304      	adds	r3, #4
 800a98e:	22f6      	movs	r2, #246	; 0xf6
 800a990:	2100      	movs	r1, #0
 800a992:	0018      	movs	r0, r3
 800a994:	f002 fc5a 	bl	800d24c <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800a998:	4b99      	ldr	r3, [pc, #612]	; (800ac00 <my_gnss_acq_coordinates+0x2b4>)
 800a99a:	191b      	adds	r3, r3, r4
 800a99c:	19db      	adds	r3, r3, r7
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	22f6      	movs	r2, #246	; 0xf6
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f002 fc4f 	bl	800d24c <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800a9ae:	4b95      	ldr	r3, [pc, #596]	; (800ac04 <my_gnss_acq_coordinates+0x2b8>)
 800a9b0:	2284      	movs	r2, #132	; 0x84
 800a9b2:	0092      	lsls	r2, r2, #2
 800a9b4:	18ba      	adds	r2, r7, r2
 800a9b6:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800a9b8:	4b93      	ldr	r3, [pc, #588]	; (800ac08 <my_gnss_acq_coordinates+0x2bc>)
 800a9ba:	2283      	movs	r2, #131	; 0x83
 800a9bc:	0092      	lsls	r2, r2, #2
 800a9be:	18ba      	adds	r2, r7, r2
 800a9c0:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800a9c2:	4b92      	ldr	r3, [pc, #584]	; (800ac0c <my_gnss_acq_coordinates+0x2c0>)
 800a9c4:	2282      	movs	r2, #130	; 0x82
 800a9c6:	0092      	lsls	r2, r2, #2
 800a9c8:	18ba      	adds	r2, r7, r2
 800a9ca:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800a9cc:	4b90      	ldr	r3, [pc, #576]	; (800ac10 <my_gnss_acq_coordinates+0x2c4>)
 800a9ce:	2281      	movs	r2, #129	; 0x81
 800a9d0:	0092      	lsls	r2, r2, #2
 800a9d2:	18ba      	adds	r2, r7, r2
 800a9d4:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2230      	movs	r2, #48	; 0x30
 800a9da:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	4b8c      	ldr	r3, [pc, #560]	; (800ac14 <my_gnss_acq_coordinates+0x2c8>)
 800a9e2:	608a      	str	r2, [r1, #8]
 800a9e4:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800a9e6:	f7f9 f915 	bl	8003c14 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800a9ea:	e0c4      	b.n	800ab76 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 800a9ec:	4c80      	ldr	r4, [pc, #512]	; (800abf0 <my_gnss_acq_coordinates+0x2a4>)
 800a9ee:	193b      	adds	r3, r7, r4
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7f8 ff84 	bl	8003900 <my_gnss_receive_byte>
		if ( rx_byte )
 800a9f8:	0020      	movs	r0, r4
 800a9fa:	183b      	adds	r3, r7, r0
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	4c7b      	ldr	r4, [pc, #492]	; (800abec <my_gnss_acq_coordinates+0x2a0>)
 800aa00:	193a      	adds	r2, r7, r4
 800aa02:	1939      	adds	r1, r7, r4
 800aa04:	7809      	ldrb	r1, [r1, #0]
 800aa06:	7011      	strb	r1, [r2, #0]
 800aa08:	4d7b      	ldr	r5, [pc, #492]	; (800abf8 <my_gnss_acq_coordinates+0x2ac>)
 800aa0a:	197a      	adds	r2, r7, r5
 800aa0c:	1979      	adds	r1, r7, r5
 800aa0e:	7809      	ldrb	r1, [r1, #0]
 800aa10:	7011      	strb	r1, [r2, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d100      	bne.n	800aa18 <my_gnss_acq_coordinates+0xcc>
 800aa16:	e0ae      	b.n	800ab76 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800aa18:	4b76      	ldr	r3, [pc, #472]	; (800abf4 <my_gnss_acq_coordinates+0x2a8>)
 800aa1a:	18fa      	adds	r2, r7, r3
 800aa1c:	2684      	movs	r6, #132	; 0x84
 800aa1e:	0076      	lsls	r6, r6, #1
 800aa20:	19b9      	adds	r1, r7, r6
 800aa22:	183b      	adds	r3, r7, r0
 800aa24:	0018      	movs	r0, r3
 800aa26:	f000 fc0f 	bl	800b248 <my_nmea_message>
 800aa2a:	0001      	movs	r1, r0
 800aa2c:	193b      	adds	r3, r7, r4
 800aa2e:	193a      	adds	r2, r7, r4
 800aa30:	7812      	ldrb	r2, [r2, #0]
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	197b      	adds	r3, r7, r5
 800aa36:	197a      	adds	r2, r7, r5
 800aa38:	7812      	ldrb	r2, [r2, #0]
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	2902      	cmp	r1, #2
 800aa3e:	d000      	beq.n	800aa42 <my_gnss_acq_coordinates+0xf6>
 800aa40:	e099      	b.n	800ab76 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800aa42:	19bb      	adds	r3, r7, r6
 800aa44:	0018      	movs	r0, r3
 800aa46:	f000 fcbf 	bl	800b3c8 <is_my_nmea_checksum_ok>
 800aa4a:	0003      	movs	r3, r0
 800aa4c:	0019      	movs	r1, r3
 800aa4e:	193b      	adds	r3, r7, r4
 800aa50:	193a      	adds	r2, r7, r4
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	197b      	adds	r3, r7, r5
 800aa58:	197a      	adds	r2, r7, r5
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	2900      	cmp	r1, #0
 800aa60:	d100      	bne.n	800aa64 <my_gnss_acq_coordinates+0x118>
 800aa62:	e088      	b.n	800ab76 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800aa64:	193b      	adds	r3, r7, r4
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	4053      	eors	r3, r2
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d015      	beq.n	800aa9e <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7c1b      	ldrb	r3, [r3, #16]
 800aa76:	2b33      	cmp	r3, #51	; 0x33
 800aa78:	d111      	bne.n	800aa9e <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800aa7a:	2383      	movs	r3, #131	; 0x83
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	19bb      	adds	r3, r7, r6
 800aa84:	0011      	movs	r1, r2
 800aa86:	0018      	movs	r0, r3
 800aa88:	f002 fc55 	bl	800d336 <strstr>
 800aa8c:	1e03      	subs	r3, r0, #0
 800aa8e:	d006      	beq.n	800aa9e <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800aa90:	19bb      	adds	r3, r7, r6
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 f9bc 	bl	800ae10 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800aa98:	193b      	adds	r3, r7, r4
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800aa9e:	2384      	movs	r3, #132	; 0x84
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	18fb      	adds	r3, r7, r3
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	2484      	movs	r4, #132	; 0x84
 800aaa8:	0064      	lsls	r4, r4, #1
 800aaaa:	193b      	adds	r3, r7, r4
 800aaac:	0011      	movs	r1, r2
 800aaae:	0018      	movs	r0, r3
 800aab0:	f002 fc41 	bl	800d336 <strstr>
 800aab4:	1e03      	subs	r3, r0, #0
 800aab6:	d012      	beq.n	800aade <my_gnss_acq_coordinates+0x192>
 800aab8:	4d4f      	ldr	r5, [pc, #316]	; (800abf8 <my_gnss_acq_coordinates+0x2ac>)
 800aaba:	197b      	adds	r3, r7, r5
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d80d      	bhi.n	800aade <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800aac2:	4b55      	ldr	r3, [pc, #340]	; (800ac18 <my_gnss_acq_coordinates+0x2cc>)
 800aac4:	881a      	ldrh	r2, [r3, #0]
 800aac6:	4b55      	ldr	r3, [pc, #340]	; (800ac1c <my_gnss_acq_coordinates+0x2d0>)
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d85b      	bhi.n	800ab86 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800aace:	193b      	adds	r3, r7, r4
 800aad0:	0018      	movs	r0, r3
 800aad2:	f000 fe1f 	bl	800b714 <my_nmea_get_gsv_tns>
 800aad6:	0003      	movs	r3, r0
 800aad8:	001a      	movs	r2, r3
 800aada:	197b      	adds	r3, r7, r5
 800aadc:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800aade:	2382      	movs	r3, #130	; 0x82
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	18fb      	adds	r3, r7, r3
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	2484      	movs	r4, #132	; 0x84
 800aae8:	0064      	lsls	r4, r4, #1
 800aaea:	193b      	adds	r3, r7, r4
 800aaec:	0011      	movs	r1, r2
 800aaee:	0018      	movs	r0, r3
 800aaf0:	f002 fc21 	bl	800d336 <strstr>
 800aaf4:	1e03      	subs	r3, r0, #0
 800aaf6:	d010      	beq.n	800ab1a <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800aaf8:	193b      	adds	r3, r7, r4
 800aafa:	0018      	movs	r0, r3
 800aafc:	f000 fc10 	bl	800b320 <get_my_nmea_gngsa_fixed_mode_s>
 800ab00:	0003      	movs	r3, r0
 800ab02:	001a      	movs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800ab08:	193b      	adds	r3, r7, r4
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 fc13 	bl	800b336 <get_my_nmea_gngsa_pdop_d>
 800ab10:	0002      	movs	r2, r0
 800ab12:	000b      	movs	r3, r1
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	608a      	str	r2, [r1, #8]
 800ab18:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 800ab1a:	2381      	movs	r3, #129	; 0x81
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	18fb      	adds	r3, r7, r3
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	2384      	movs	r3, #132	; 0x84
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	0011      	movs	r1, r2
 800ab2a:	0018      	movs	r0, r3
 800ab2c:	f002 fc03 	bl	800d336 <strstr>
 800ab30:	1e03      	subs	r3, r0, #0
 800ab32:	d020      	beq.n	800ab76 <my_gnss_acq_coordinates+0x22a>
 800ab34:	4b2d      	ldr	r3, [pc, #180]	; (800abec <my_gnss_acq_coordinates+0x2a0>)
 800ab36:	18fb      	adds	r3, r7, r3
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d01b      	beq.n	800ab76 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7c1b      	ldrb	r3, [r3, #16]
 800ab42:	2b33      	cmp	r3, #51	; 0x33
 800ab44:	d121      	bne.n	800ab8a <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800ab46:	4b2e      	ldr	r3, [pc, #184]	; (800ac00 <my_gnss_acq_coordinates+0x2b4>)
 800ab48:	2186      	movs	r1, #134	; 0x86
 800ab4a:	0089      	lsls	r1, r1, #2
 800ab4c:	185b      	adds	r3, r3, r1
 800ab4e:	19da      	adds	r2, r3, r7
 800ab50:	4b2a      	ldr	r3, [pc, #168]	; (800abfc <my_gnss_acq_coordinates+0x2b0>)
 800ab52:	185b      	adds	r3, r3, r1
 800ab54:	19db      	adds	r3, r3, r7
 800ab56:	0010      	movs	r0, r2
 800ab58:	0019      	movs	r1, r3
 800ab5a:	23fa      	movs	r3, #250	; 0xfa
 800ab5c:	001a      	movs	r2, r3
 800ab5e:	f002 fca2 	bl	800d4a6 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6898      	ldr	r0, [r3, #8]
 800ab66:	68d9      	ldr	r1, [r3, #12]
 800ab68:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <my_gnss_acq_coordinates+0x2d4>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	f7f5 fc7b 	bl	8000468 <__aeabi_dcmple>
 800ab72:	1e03      	subs	r3, r0, #0
 800ab74:	d10b      	bne.n	800ab8e <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800ab76:	4b28      	ldr	r3, [pc, #160]	; (800ac18 <my_gnss_acq_coordinates+0x2cc>)
 800ab78:	881a      	ldrh	r2, [r3, #0]
 800ab7a:	4b2a      	ldr	r3, [pc, #168]	; (800ac24 <my_gnss_acq_coordinates+0x2d8>)
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d200      	bcs.n	800ab84 <my_gnss_acq_coordinates+0x238>
 800ab82:	e733      	b.n	800a9ec <my_gnss_acq_coordinates+0xa0>
 800ab84:	e004      	b.n	800ab90 <my_gnss_acq_coordinates+0x244>
							break ;
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	e002      	b.n	800ab90 <my_gnss_acq_coordinates+0x244>
							break ;
 800ab8a:	46c0      	nop			; (mov r8, r8)
 800ab8c:	e000      	b.n	800ab90 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800ab8e:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800ab90:	f7f9 f850 	bl	8003c34 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800ab94:	4b1a      	ldr	r3, [pc, #104]	; (800ac00 <my_gnss_acq_coordinates+0x2b4>)
 800ab96:	2286      	movs	r2, #134	; 0x86
 800ab98:	0092      	lsls	r2, r2, #2
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	19db      	adds	r3, r3, r7
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	230c      	movs	r3, #12
 800aba8:	18fb      	adds	r3, r7, r3
 800abaa:	0011      	movs	r1, r2
 800abac:	0018      	movs	r0, r3
 800abae:	f000 fcc7 	bl	800b540 <my_nmea_get_gngll_coordinates>
		r = true ;
 800abb2:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <my_gnss_acq_coordinates+0x29c>)
 800abb4:	18fb      	adds	r3, r7, r3
 800abb6:	2201      	movs	r2, #1
 800abb8:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 800abba:	4b17      	ldr	r3, [pc, #92]	; (800ac18 <my_gnss_acq_coordinates+0x2cc>)
 800abbc:	881a      	ldrh	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4a14      	ldr	r2, [pc, #80]	; (800ac18 <my_gnss_acq_coordinates+0x2cc>)
 800abc8:	8812      	ldrh	r2, [r2, #0]
 800abca:	189a      	adds	r2, r3, r2
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	615a      	str	r2, [r3, #20]
	return r ;
 800abd0:	4b05      	ldr	r3, [pc, #20]	; (800abe8 <my_gnss_acq_coordinates+0x29c>)
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	781b      	ldrb	r3, [r3, #0]
}
 800abd6:	0018      	movs	r0, r3
 800abd8:	46bd      	mov	sp, r7
 800abda:	2387      	movs	r3, #135	; 0x87
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	449d      	add	sp, r3
 800abe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	fffffde4 	.word	0xfffffde4
 800abe8:	00000217 	.word	0x00000217
 800abec:	00000216 	.word	0x00000216
 800abf0:	00000203 	.word	0x00000203
 800abf4:	00000202 	.word	0x00000202
 800abf8:	00000215 	.word	0x00000215
 800abfc:	fffffef0 	.word	0xfffffef0
 800ac00:	fffffdf4 	.word	0xfffffdf4
 800ac04:	08015740 	.word	0x08015740
 800ac08:	08015748 	.word	0x08015748
 800ac0c:	08015750 	.word	0x08015750
 800ac10:	08015758 	.word	0x08015758
 800ac14:	408f4000 	.word	0x408f4000
 800ac18:	20000c50 	.word	0x20000c50
 800ac1c:	2000001c 	.word	0x2000001c
 800ac20:	20000020 	.word	0x20000020
 800ac24:	2000001a 	.word	0x2000001a

0800ac28 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <my_rtc_get_dt+0x2c>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f7fb fa6f 	bl	800611c <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <my_rtc_get_dt+0x2c>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	0018      	movs	r0, r3
 800ac46:	f7fb f97b 	bl	8005f40 <HAL_RTC_GetTime>
}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	b002      	add	sp, #8
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	46c0      	nop			; (mov r8, r8)
 800ac54:	200006f4 	.word	0x200006f4

0800ac58 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800ac58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5a:	b08d      	sub	sp, #52	; 0x34
 800ac5c:	af04      	add	r7, sp, #16
 800ac5e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800ac60:	2508      	movs	r5, #8
 800ac62:	1979      	adds	r1, r7, r5
 800ac64:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <my_rtc_get_dt_s+0x7c>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f7fb f969 	bl	8005f40 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800ac6e:	241c      	movs	r4, #28
 800ac70:	1939      	adds	r1, r7, r4
 800ac72:	4b18      	ldr	r3, [pc, #96]	; (800acd4 <my_rtc_get_dt_s+0x7c>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	0018      	movs	r0, r3
 800ac78:	f7fb fa50 	bl	800611c <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800ac7c:	0021      	movs	r1, r4
 800ac7e:	187b      	adds	r3, r7, r1
 800ac80:	78db      	ldrb	r3, [r3, #3]
 800ac82:	22fa      	movs	r2, #250	; 0xfa
 800ac84:	00d2      	lsls	r2, r2, #3
 800ac86:	189a      	adds	r2, r3, r2
 800ac88:	187b      	adds	r3, r7, r1
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	469c      	mov	ip, r3
 800ac8e:	187b      	adds	r3, r7, r1
 800ac90:	789b      	ldrb	r3, [r3, #2]
 800ac92:	001c      	movs	r4, r3
 800ac94:	0028      	movs	r0, r5
 800ac96:	183b      	adds	r3, r7, r0
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	001d      	movs	r5, r3
 800ac9c:	183b      	adds	r3, r7, r0
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	001e      	movs	r6, r3
 800aca2:	183b      	adds	r3, r7, r0
 800aca4:	789b      	ldrb	r3, [r3, #2]
 800aca6:	490c      	ldr	r1, [pc, #48]	; (800acd8 <my_rtc_get_dt_s+0x80>)
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	9303      	str	r3, [sp, #12]
 800acac:	9602      	str	r6, [sp, #8]
 800acae:	9501      	str	r5, [sp, #4]
 800acb0:	9400      	str	r4, [sp, #0]
 800acb2:	4663      	mov	r3, ip
 800acb4:	f002 fa34 	bl	800d120 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800acb8:	211c      	movs	r1, #28
 800acba:	187b      	adds	r3, r7, r1
 800acbc:	78db      	ldrb	r3, [r3, #3]
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	22fa      	movs	r2, #250	; 0xfa
 800acc2:	00d2      	lsls	r2, r2, #3
 800acc4:	4694      	mov	ip, r2
 800acc6:	4463      	add	r3, ip
 800acc8:	b29b      	uxth	r3, r3
}
 800acca:	0018      	movs	r0, r3
 800accc:	46bd      	mov	sp, r7
 800acce:	b009      	add	sp, #36	; 0x24
 800acd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd2:	46c0      	nop			; (mov r8, r8)
 800acd4:	200006f4 	.word	0x200006f4
 800acd8:	080157a8 	.word	0x080157a8

0800acdc <my_rtc_get_ts>:
uint32_t my_rtc_get_ts ( void )
{
 800acdc:	b590      	push	{r4, r7, lr}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
	RTC_DateTypeDef d ;
	RTC_TimeTypeDef t ;

	my_rtc_get_dt ( &d , &t ) ;
 800ace2:	003a      	movs	r2, r7
 800ace4:	2414      	movs	r4, #20
 800ace6:	193b      	adds	r3, r7, r4
 800ace8:	0011      	movs	r1, r2
 800acea:	0018      	movs	r0, r3
 800acec:	f7ff ff9c 	bl	800ac28 <my_rtc_get_dt>
	return my_conv_rtc2timestamp ( &d , &t ) ;
 800acf0:	003a      	movs	r2, r7
 800acf2:	193b      	adds	r3, r7, r4
 800acf4:	0011      	movs	r1, r2
 800acf6:	0018      	movs	r0, r3
 800acf8:	f000 f938 	bl	800af6c <my_conv_rtc2timestamp>
 800acfc:	0003      	movs	r3, r0
}
 800acfe:	0018      	movs	r0, r3
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b007      	add	sp, #28
 800ad04:	bd90      	pop	{r4, r7, pc}
	...

0800ad08 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800ad08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0a:	b0a9      	sub	sp, #164	; 0xa4
 800ad0c:	af02      	add	r7, sp, #8
 800ad0e:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800ad10:	2434      	movs	r4, #52	; 0x34
 800ad12:	193a      	adds	r2, r7, r4
 800ad14:	2548      	movs	r5, #72	; 0x48
 800ad16:	197b      	adds	r3, r7, r5
 800ad18:	0011      	movs	r1, r2
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f7ff ff84 	bl	800ac28 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800ad20:	2680      	movs	r6, #128	; 0x80
 800ad22:	19bb      	adds	r3, r7, r6
 800ad24:	0018      	movs	r0, r3
 800ad26:	f7ff ff97 	bl	800ac58 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800ad2a:	4a36      	ldr	r2, [pc, #216]	; (800ae04 <my_rtc_set_alarm+0xfc>)
 800ad2c:	4936      	ldr	r1, [pc, #216]	; (800ae08 <my_rtc_set_alarm+0x100>)
 800ad2e:	234c      	movs	r3, #76	; 0x4c
 800ad30:	18f8      	adds	r0, r7, r3
 800ad32:	19bb      	adds	r3, r7, r6
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	2335      	movs	r3, #53	; 0x35
 800ad38:	f002 f9f2 	bl	800d120 <sprintf>
	send_debug_logs ( m ) ;
 800ad3c:	234c      	movs	r3, #76	; 0x4c
 800ad3e:	18fb      	adds	r3, r7, r3
 800ad40:	0018      	movs	r0, r3
 800ad42:	f7f8 f999 	bl	8003078 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800ad46:	193a      	adds	r2, r7, r4
 800ad48:	197b      	adds	r3, r7, r5
 800ad4a:	0011      	movs	r1, r2
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f000 f90d 	bl	800af6c <my_conv_rtc2timestamp>
 800ad52:	0002      	movs	r2, r0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	189b      	adds	r3, r3, r2
 800ad58:	2094      	movs	r0, #148	; 0x94
 800ad5a:	183a      	adds	r2, r7, r0
 800ad5c:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800ad5e:	193a      	adds	r2, r7, r4
 800ad60:	1979      	adds	r1, r7, r5
 800ad62:	1838      	adds	r0, r7, r0
 800ad64:	6803      	ldr	r3, [r0, #0]
 800ad66:	0018      	movs	r0, r3
 800ad68:	f000 f974 	bl	800b054 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800ad6c:	193b      	adds	r3, r7, r4
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	210c      	movs	r1, #12
 800ad72:	187b      	adds	r3, r7, r1
 800ad74:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800ad76:	193b      	adds	r3, r7, r4
 800ad78:	785a      	ldrb	r2, [r3, #1]
 800ad7a:	187b      	adds	r3, r7, r1
 800ad7c:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800ad7e:	193b      	adds	r3, r7, r4
 800ad80:	789a      	ldrb	r2, [r3, #2]
 800ad82:	187b      	adds	r3, r7, r1
 800ad84:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800ad86:	0008      	movs	r0, r1
 800ad88:	183b      	adds	r3, r7, r0
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800ad8e:	183b      	adds	r3, r7, r0
 800ad90:	2200      	movs	r2, #0
 800ad92:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800ad94:	183b      	adds	r3, r7, r0
 800ad96:	2200      	movs	r2, #0
 800ad98:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800ad9a:	183b      	adds	r3, r7, r0
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800ada0:	183b      	adds	r3, r7, r0
 800ada2:	2200      	movs	r2, #0
 800ada4:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800ada6:	183b      	adds	r3, r7, r0
 800ada8:	2200      	movs	r2, #0
 800adaa:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800adac:	197b      	adds	r3, r7, r5
 800adae:	7899      	ldrb	r1, [r3, #2]
 800adb0:	183b      	adds	r3, r7, r0
 800adb2:	2220      	movs	r2, #32
 800adb4:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800adb6:	183b      	adds	r3, r7, r0
 800adb8:	2280      	movs	r2, #128	; 0x80
 800adba:	0052      	lsls	r2, r2, #1
 800adbc:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800adbe:	1839      	adds	r1, r7, r0
 800adc0:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <my_rtc_set_alarm+0x104>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	0018      	movs	r0, r3
 800adc6:	f7fb f9f7 	bl	80061b8 <HAL_RTC_SetAlarm_IT>
 800adca:	1e03      	subs	r3, r0, #0
 800adcc:	d114      	bne.n	800adf8 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800adce:	19ba      	adds	r2, r7, r6
 800add0:	1939      	adds	r1, r7, r4
 800add2:	197b      	adds	r3, r7, r5
 800add4:	0018      	movs	r0, r3
 800add6:	f000 f9ff 	bl	800b1d8 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800adda:	4a0a      	ldr	r2, [pc, #40]	; (800ae04 <my_rtc_set_alarm+0xfc>)
 800addc:	490a      	ldr	r1, [pc, #40]	; (800ae08 <my_rtc_set_alarm+0x100>)
 800adde:	244c      	movs	r4, #76	; 0x4c
 800ade0:	1938      	adds	r0, r7, r4
 800ade2:	19bb      	adds	r3, r7, r6
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2349      	movs	r3, #73	; 0x49
 800ade8:	f002 f99a 	bl	800d120 <sprintf>
		send_debug_logs ( m ) ;
 800adec:	193b      	adds	r3, r7, r4
 800adee:	0018      	movs	r0, r3
 800adf0:	f7f8 f942 	bl	8003078 <send_debug_logs>
		return true ;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e000      	b.n	800adfa <my_rtc_set_alarm+0xf2>
	}
	return false ;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	0018      	movs	r0, r3
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b027      	add	sp, #156	; 0x9c
 800ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	080157c8 	.word	0x080157c8
 800ae08:	080157e4 	.word	0x080157e4
 800ae0c:	200006f4 	.word	0x200006f4

0800ae10 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800ae10:	b5b0      	push	{r4, r5, r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800ae18:	2508      	movs	r5, #8
 800ae1a:	197b      	adds	r3, r7, r5
 800ae1c:	1cda      	adds	r2, r3, #3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	0011      	movs	r1, r2
 800ae22:	0018      	movs	r0, r3
 800ae24:	f000 fcae 	bl	800b784 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800ae28:	197b      	adds	r3, r7, r5
 800ae2a:	1c5a      	adds	r2, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	0011      	movs	r1, r2
 800ae30:	0018      	movs	r0, r3
 800ae32:	f000 fce1 	bl	800b7f8 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800ae36:	197b      	adds	r3, r7, r5
 800ae38:	1c9a      	adds	r2, r3, #2
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 fd14 	bl	800b86c <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800ae44:	240c      	movs	r4, #12
 800ae46:	193a      	adds	r2, r7, r4
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	0011      	movs	r1, r2
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f000 fd47 	bl	800b8e0 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800ae52:	193b      	adds	r3, r7, r4
 800ae54:	1c5a      	adds	r2, r3, #1
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	0011      	movs	r1, r2
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f000 fd7a 	bl	800b954 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800ae60:	193b      	adds	r3, r7, r4
 800ae62:	1c9a      	adds	r2, r3, #2
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	0011      	movs	r1, r2
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 fdad 	bl	800b9c8 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800ae6e:	193b      	adds	r3, r7, r4
 800ae70:	1d1a      	adds	r2, r3, #4
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	0011      	movs	r1, r2
 800ae76:	0018      	movs	r0, r3
 800ae78:	f000 fde0 	bl	800ba3c <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800ae7c:	193b      	adds	r3, r7, r4
 800ae7e:	2200      	movs	r2, #0
 800ae80:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800ae82:	193b      	adds	r3, r7, r4
 800ae84:	2200      	movs	r2, #0
 800ae86:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800ae88:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f7fb fc03 	bl	8006696 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800ae90:	1939      	adds	r1, r7, r4
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	0018      	movs	r0, r3
 800ae98:	f7fa ffaa 	bl	8005df0 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800ae9c:	1979      	adds	r1, r7, r5
 800ae9e:	4b06      	ldr	r3, [pc, #24]	; (800aeb8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800aea0:	2200      	movs	r2, #0
 800aea2:	0018      	movs	r0, r3
 800aea4:	f7fb f8a8 	bl	8005ff8 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800aea8:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f7fb fc27 	bl	80066fe <HAL_RTCEx_DisableBypassShadow>
}
 800aeb0:	46c0      	nop			; (mov r8, r8)
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	b008      	add	sp, #32
 800aeb6:	bdb0      	pop	{r4, r5, r7, pc}
 800aeb8:	200006f4 	.word	0x200006f4

0800aebc <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2100      	movs	r1, #0
 800aec8:	0018      	movs	r0, r3
 800aeca:	f001 fefb 	bl	800ccc4 <strtod>
 800aece:	0002      	movs	r2, r0
 800aed0:	000b      	movs	r3, r1
 800aed2:	60ba      	str	r2, [r7, #8]
 800aed4:	60fb      	str	r3, [r7, #12]
    return d ;
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	68fb      	ldr	r3, [r7, #12]
}
 800aeda:	0010      	movs	r0, r2
 800aedc:	0019      	movs	r1, r3
 800aede:	46bd      	mov	sp, r7
 800aee0:	b004      	add	sp, #16
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	0008      	movs	r0, r1
 800aeee:	0011      	movs	r1, r2
 800aef0:	1cfb      	adds	r3, r7, #3
 800aef2:	1c02      	adds	r2, r0, #0
 800aef4:	701a      	strb	r2, [r3, #0]
 800aef6:	1cbb      	adds	r3, r7, #2
 800aef8:	1c0a      	adds	r2, r1, #0
 800aefa:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800aefc:	230f      	movs	r3, #15
 800aefe:	18fb      	adds	r3, r7, r3
 800af00:	2200      	movs	r2, #0
 800af02:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800af04:	230e      	movs	r3, #14
 800af06:	18fb      	adds	r3, r7, r3
 800af08:	2200      	movs	r2, #0
 800af0a:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800af0c:	e01c      	b.n	800af48 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800af0e:	230f      	movs	r3, #15
 800af10:	18fb      	adds	r3, r7, r3
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	18d3      	adds	r3, r2, r3
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	1cfa      	adds	r2, r7, #3
 800af1c:	7812      	ldrb	r2, [r2, #0]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d105      	bne.n	800af2e <my_find_char_position+0x4a>
			p++ ;
 800af22:	210e      	movs	r1, #14
 800af24:	187b      	adds	r3, r7, r1
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	187b      	adds	r3, r7, r1
 800af2a:	3201      	adds	r2, #1
 800af2c:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800af2e:	230e      	movs	r3, #14
 800af30:	18fa      	adds	r2, r7, r3
 800af32:	1cbb      	adds	r3, r7, #2
 800af34:	7812      	ldrb	r2, [r2, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d00e      	beq.n	800af5a <my_find_char_position+0x76>
			break ;
		i++ ;
 800af3c:	210f      	movs	r1, #15
 800af3e:	187b      	adds	r3, r7, r1
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	187b      	adds	r3, r7, r1
 800af44:	3201      	adds	r2, #1
 800af46:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800af48:	230f      	movs	r3, #15
 800af4a:	18fb      	adds	r3, r7, r3
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	18d3      	adds	r3, r2, r3
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1da      	bne.n	800af0e <my_find_char_position+0x2a>
 800af58:	e000      	b.n	800af5c <my_find_char_position+0x78>
			break ;
 800af5a:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800af5c:	230f      	movs	r3, #15
 800af5e:	18fb      	adds	r3, r7, r3
 800af60:	781b      	ldrb	r3, [r3, #0]
}
 800af62:	0018      	movs	r0, r3
 800af64:	46bd      	mov	sp, r7
 800af66:	b004      	add	sp, #16
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	78db      	ldrb	r3, [r3, #3]
 800af7a:	22fa      	movs	r2, #250	; 0xfa
 800af7c:	00d2      	lsls	r2, r2, #3
 800af7e:	4694      	mov	ip, r2
 800af80:	4463      	add	r3, ip
 800af82:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	0013      	movs	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	189b      	adds	r3, r3, r2
 800af90:	009a      	lsls	r2, r3, #2
 800af92:	189a      	adds	r2, r3, r2
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	492c      	ldr	r1, [pc, #176]	; (800b048 <my_conv_rtc2timestamp+0xdc>)
 800af98:	468c      	mov	ip, r1
 800af9a:	4463      	add	r3, ip
 800af9c:	089b      	lsrs	r3, r3, #2
 800af9e:	18d3      	adds	r3, r2, r3
 800afa0:	4a2a      	ldr	r2, [pc, #168]	; (800b04c <my_conv_rtc2timestamp+0xe0>)
 800afa2:	4694      	mov	ip, r2
 800afa4:	4463      	add	r3, ip
 800afa6:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800afa8:	2300      	movs	r3, #0
 800afaa:	613b      	str	r3, [r7, #16]
 800afac:	e00a      	b.n	800afc4 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800afae:	4a28      	ldr	r2, [pc, #160]	; (800b050 <my_conv_rtc2timestamp+0xe4>)
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	18d3      	adds	r3, r2, r3
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	001a      	movs	r2, r3
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	189b      	adds	r3, r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3301      	adds	r3, #1
 800afc2:	613b      	str	r3, [r7, #16]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	3b01      	subs	r3, #1
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	429a      	cmp	r2, r3
 800afce:	dbee      	blt.n	800afae <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	785b      	ldrb	r3, [r3, #1]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d908      	bls.n	800afea <my_conv_rtc2timestamp+0x7e>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	0018      	movs	r0, r3
 800afdc:	f000 f8de 	bl	800b19c <my_conv_is_leap_year>
 800afe0:	1e03      	subs	r3, r0, #0
 800afe2:	d002      	beq.n	800afea <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	3301      	adds	r3, #1
 800afe8:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	789b      	ldrb	r3, [r3, #2]
 800afee:	001a      	movs	r2, r3
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	18d3      	adds	r3, r2, r3
 800aff4:	3b01      	subs	r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	0013      	movs	r3, r2
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	189b      	adds	r3, r3, r2
 800b000:	011a      	lsls	r2, r3, #4
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	0113      	lsls	r3, r2, #4
 800b006:	1a9b      	subs	r3, r3, r2
 800b008:	01db      	lsls	r3, r3, #7
 800b00a:	0019      	movs	r1, r3
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	001a      	movs	r2, r3
 800b012:	0013      	movs	r3, r2
 800b014:	011b      	lsls	r3, r3, #4
 800b016:	1a9b      	subs	r3, r3, r2
 800b018:	011a      	lsls	r2, r3, #4
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	0113      	lsls	r3, r2, #4
 800b01e:	001a      	movs	r2, r3
 800b020:	0013      	movs	r3, r2
 800b022:	18ca      	adds	r2, r1, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	0019      	movs	r1, r3
 800b02a:	000b      	movs	r3, r1
 800b02c:	011b      	lsls	r3, r3, #4
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	18d3      	adds	r3, r2, r3
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	7892      	ldrb	r2, [r2, #2]
 800b038:	189b      	adds	r3, r3, r2
 800b03a:	60bb      	str	r3, [r7, #8]

    return ts ;
 800b03c:	68bb      	ldr	r3, [r7, #8]
}
 800b03e:	0018      	movs	r0, r3
 800b040:	46bd      	mov	sp, r7
 800b042:	b006      	add	sp, #24
 800b044:	bd80      	pop	{r7, pc}
 800b046:	46c0      	nop			; (mov r8, r8)
 800b048:	fffff84f 	.word	0xfffff84f
 800b04c:	fff50736 	.word	0xfff50736
 800b050:	08015928 	.word	0x08015928

0800b054 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b054:	b590      	push	{r4, r7, lr}
 800b056:	b08b      	sub	sp, #44	; 0x2c
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	213c      	movs	r1, #60	; 0x3c
 800b064:	0018      	movs	r0, r3
 800b066:	f7f5 f8ef 	bl	8000248 <__aeabi_uidivmod>
 800b06a:	000b      	movs	r3, r1
 800b06c:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	213c      	movs	r1, #60	; 0x3c
 800b072:	0018      	movs	r0, r3
 800b074:	f7f5 f862 	bl	800013c <__udivsi3>
 800b078:	0003      	movs	r3, r0
 800b07a:	213c      	movs	r1, #60	; 0x3c
 800b07c:	0018      	movs	r0, r3
 800b07e:	f7f5 f8e3 	bl	8000248 <__aeabi_uidivmod>
 800b082:	000b      	movs	r3, r1
 800b084:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	22e1      	movs	r2, #225	; 0xe1
 800b08a:	0111      	lsls	r1, r2, #4
 800b08c:	0018      	movs	r0, r3
 800b08e:	f7f5 f855 	bl	800013c <__udivsi3>
 800b092:	0003      	movs	r3, r0
 800b094:	2118      	movs	r1, #24
 800b096:	0018      	movs	r0, r3
 800b098:	f7f5 f8d6 	bl	8000248 <__aeabi_uidivmod>
 800b09c:	000b      	movs	r3, r1
 800b09e:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	493b      	ldr	r1, [pc, #236]	; (800b190 <my_conv_timestamp2rtc+0x13c>)
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7f5 f849 	bl	800013c <__udivsi3>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800b0ae:	4b39      	ldr	r3, [pc, #228]	; (800b194 <my_conv_timestamp2rtc+0x140>)
 800b0b0:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b0b2:	e00d      	b.n	800b0d0 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	f000 f870 	bl	800b19c <my_conv_is_leap_year>
 800b0bc:	0003      	movs	r3, r0
 800b0be:	336e      	adds	r3, #110	; 0x6e
 800b0c0:	33ff      	adds	r3, #255	; 0xff
 800b0c2:	001a      	movs	r2, r3
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	1a9b      	subs	r3, r3, r2
 800b0c8:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	f000 f862 	bl	800b19c <my_conv_is_leap_year>
 800b0d8:	0003      	movs	r3, r0
 800b0da:	336e      	adds	r3, #110	; 0x6e
 800b0dc:	33ff      	adds	r3, #255	; 0xff
 800b0de:	001a      	movs	r2, r3
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d2e6      	bcs.n	800b0b4 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b0ea:	e018      	b.n	800b11e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800b0ec:	4b2a      	ldr	r3, [pc, #168]	; (800b198 <my_conv_timestamp2rtc+0x144>)
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	0052      	lsls	r2, r2, #1
 800b0f2:	5ad3      	ldrh	r3, [r2, r3]
 800b0f4:	001c      	movs	r4, r3
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d107      	bne.n	800b10c <my_conv_timestamp2rtc+0xb8>
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 f84c 	bl	800b19c <my_conv_is_leap_year>
 800b104:	1e03      	subs	r3, r0, #0
 800b106:	d001      	beq.n	800b10c <my_conv_timestamp2rtc+0xb8>
 800b108:	2301      	movs	r3, #1
 800b10a:	e000      	b.n	800b10e <my_conv_timestamp2rtc+0xba>
 800b10c:	2300      	movs	r3, #0
 800b10e:	191b      	adds	r3, r3, r4
 800b110:	001a      	movs	r2, r3
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b11e:	4b1e      	ldr	r3, [pc, #120]	; (800b198 <my_conv_timestamp2rtc+0x144>)
 800b120:	69fa      	ldr	r2, [r7, #28]
 800b122:	0052      	lsls	r2, r2, #1
 800b124:	5ad3      	ldrh	r3, [r2, r3]
 800b126:	001c      	movs	r4, r3
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d107      	bne.n	800b13e <my_conv_timestamp2rtc+0xea>
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	0018      	movs	r0, r3
 800b132:	f000 f833 	bl	800b19c <my_conv_is_leap_year>
 800b136:	1e03      	subs	r3, r0, #0
 800b138:	d001      	beq.n	800b13e <my_conv_timestamp2rtc+0xea>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <my_conv_timestamp2rtc+0xec>
 800b13e:	2300      	movs	r3, #0
 800b140:	191b      	adds	r3, r3, r4
 800b142:	001a      	movs	r2, r3
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	4293      	cmp	r3, r2
 800b148:	d2d0      	bcs.n	800b0ec <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	3330      	adds	r3, #48	; 0x30
 800b150:	b2da      	uxtb	r2, r3
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	3301      	adds	r3, #1
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	b2db      	uxtb	r3, r3
 800b166:	3301      	adds	r3, #1
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	b2da      	uxtb	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	b2da      	uxtb	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	709a      	strb	r2, [r3, #2]
}
 800b186:	46c0      	nop			; (mov r8, r8)
 800b188:	46bd      	mov	sp, r7
 800b18a:	b00b      	add	sp, #44	; 0x2c
 800b18c:	bd90      	pop	{r4, r7, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	00015180 	.word	0x00015180
 800b194:	000007b2 	.word	0x000007b2
 800b198:	08015934 	.word	0x08015934

0800b19c <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	d106      	bne.n	800b1ba <my_conv_is_leap_year+0x1e>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2164      	movs	r1, #100	; 0x64
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f7f5 f933 	bl	800041c <__aeabi_idivmod>
 800b1b6:	1e0b      	subs	r3, r1, #0
 800b1b8:	d107      	bne.n	800b1ca <my_conv_is_leap_year+0x2e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	22c8      	movs	r2, #200	; 0xc8
 800b1be:	0051      	lsls	r1, r2, #1
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f7f5 f92b 	bl	800041c <__aeabi_idivmod>
 800b1c6:	1e0b      	subs	r3, r1, #0
 800b1c8:	d101      	bne.n	800b1ce <my_conv_is_leap_year+0x32>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e000      	b.n	800b1d0 <my_conv_is_leap_year+0x34>
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	b002      	add	sp, #8
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1da:	b089      	sub	sp, #36	; 0x24
 800b1dc:	af04      	add	r7, sp, #16
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	78db      	ldrb	r3, [r3, #3]
 800b1e8:	22fa      	movs	r2, #250	; 0xfa
 800b1ea:	00d2      	lsls	r2, r2, #3
 800b1ec:	189a      	adds	r2, r3, r2
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	785b      	ldrb	r3, [r3, #1]
 800b1f2:	469c      	mov	ip, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	789b      	ldrb	r3, [r3, #2]
 800b1f8:	001c      	movs	r4, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	001d      	movs	r5, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	785b      	ldrb	r3, [r3, #1]
 800b204:	001e      	movs	r6, r3
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	789b      	ldrb	r3, [r3, #2]
 800b20a:	4906      	ldr	r1, [pc, #24]	; (800b224 <my_conv_dt_2_dts+0x4c>)
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	9303      	str	r3, [sp, #12]
 800b210:	9602      	str	r6, [sp, #8]
 800b212:	9501      	str	r5, [sp, #4]
 800b214:	9400      	str	r4, [sp, #0]
 800b216:	4663      	mov	r3, ip
 800b218:	f001 ff82 	bl	800d120 <sprintf>
}
 800b21c:	46c0      	nop			; (mov r8, r8)
 800b21e:	46bd      	mov	sp, r7
 800b220:	b005      	add	sp, #20
 800b222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b224:	080157f0 	.word	0x080157f0

0800b228 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800b230:	230c      	movs	r3, #12
 800b232:	18f9      	adds	r1, r7, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	220a      	movs	r2, #10
 800b238:	0018      	movs	r0, r3
 800b23a:	f001 fe6d 	bl	800cf18 <strtoul>
 800b23e:	0003      	movs	r3, r0
}
 800b240:	0018      	movs	r0, r3
 800b242:	46bd      	mov	sp, r7
 800b244:	b004      	add	sp, #16
 800b246:	bd80      	pop	{r7, pc}

0800b248 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b24      	cmp	r3, #36	; 0x24
 800b25a:	d117      	bne.n	800b28c <my_nmea_message+0x44>
    {
        *i = 0 ;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	b2d1      	uxtb	r1, r2
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	7011      	strb	r1, [r2, #0]
 800b26e:	001a      	movs	r2, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	189b      	adds	r3, r3, r2
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	7812      	ldrb	r2, [r2, #0]
 800b278:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	001a      	movs	r2, r3
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	189b      	adds	r3, r3, r2
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800b288:	2300      	movs	r3, #0
 800b28a:	e045      	b.n	800b318 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	2b1f      	cmp	r3, #31
 800b292:	d907      	bls.n	800b2a4 <my_nmea_message+0x5c>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b7e      	cmp	r3, #126	; 0x7e
 800b29a:	d803      	bhi.n	800b2a4 <my_nmea_message+0x5c>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d103      	bne.n	800b2ac <my_nmea_message+0x64>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b0d      	cmp	r3, #13
 800b2aa:	d114      	bne.n	800b2d6 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	b2d1      	uxtb	r1, r2
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	7011      	strb	r1, [r2, #0]
 800b2b8:	001a      	movs	r2, r3
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	189b      	adds	r3, r3, r2
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	7812      	ldrb	r2, [r2, #0]
 800b2c2:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	001a      	movs	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	189b      	adds	r3, r3, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e020      	b.n	800b318 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b0a      	cmp	r3, #10
 800b2dc:	d11a      	bne.n	800b314 <my_nmea_message+0xcc>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d916      	bls.n	800b314 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	701a      	strb	r2, [r3, #0]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	001a      	movs	r2, r3
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	189b      	adds	r3, r3, r2
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	2b0d      	cmp	r3, #13
 800b300:	d108      	bne.n	800b314 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	001a      	movs	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	189b      	adds	r3, r3, r2
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800b310:	2302      	movs	r3, #2
 800b312:	e001      	b.n	800b318 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800b314:	2301      	movs	r3, #1
 800b316:	425b      	negs	r3, r3
}
 800b318:	0018      	movs	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b004      	add	sp, #16
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3309      	adds	r3, #9
 800b32c:	781b      	ldrb	r3, [r3, #0]
}
 800b32e:	0018      	movs	r0, r3
 800b330:	46bd      	mov	sp, r7
 800b332:	b002      	add	sp, #8
 800b334:	bd80      	pop	{r7, pc}

0800b336 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800b336:	b5b0      	push	{r4, r5, r7, lr}
 800b338:	b086      	sub	sp, #24
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	220f      	movs	r2, #15
 800b342:	212c      	movs	r1, #44	; 0x2c
 800b344:	0018      	movs	r0, r3
 800b346:	f7ff fdcd 	bl	800aee4 <my_find_char_position>
 800b34a:	0003      	movs	r3, r0
 800b34c:	001a      	movs	r2, r3
 800b34e:	2517      	movs	r5, #23
 800b350:	197b      	adds	r3, r7, r5
 800b352:	3201      	adds	r2, #1
 800b354:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2210      	movs	r2, #16
 800b35a:	212c      	movs	r1, #44	; 0x2c
 800b35c:	0018      	movs	r0, r3
 800b35e:	f7ff fdc1 	bl	800aee4 <my_find_char_position>
 800b362:	0003      	movs	r3, r0
 800b364:	0019      	movs	r1, r3
 800b366:	2416      	movs	r4, #22
 800b368:	193b      	adds	r3, r7, r4
 800b36a:	197a      	adds	r2, r7, r5
 800b36c:	7812      	ldrb	r2, [r2, #0]
 800b36e:	1a8a      	subs	r2, r1, r2
 800b370:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800b372:	193b      	adds	r3, r7, r4
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	3301      	adds	r3, #1
 800b378:	0018      	movs	r0, r3
 800b37a:	f000 fc41 	bl	800bc00 <malloc>
 800b37e:	0003      	movs	r3, r0
 800b380:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800b382:	197b      	adds	r3, r7, r5
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	18d1      	adds	r1, r2, r3
 800b38a:	193b      	adds	r3, r7, r4
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	0018      	movs	r0, r3
 800b392:	f001 ff82 	bl	800d29a <strncpy>
	pdop_s[pdop_length] = '\0';
 800b396:	193b      	adds	r3, r7, r4
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	18d3      	adds	r3, r2, r3
 800b39e:	2200      	movs	r2, #0
 800b3a0:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f7ff fd89 	bl	800aebc <my_string2double_conv>
 800b3aa:	0002      	movs	r2, r0
 800b3ac:	000b      	movs	r3, r1
 800b3ae:	60ba      	str	r2, [r7, #8]
 800b3b0:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	f000 fc2d 	bl	800bc14 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
}
 800b3be:	0010      	movs	r0, r2
 800b3c0:	0019      	movs	r1, r3
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b006      	add	sp, #24
 800b3c6:	bdb0      	pop	{r4, r5, r7, pc}

0800b3c8 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800b3d0:	230f      	movs	r3, #15
 800b3d2:	18fb      	adds	r3, r7, r3
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800b3d8:	230e      	movs	r3, #14
 800b3da:	18fb      	adds	r3, r7, r3
 800b3dc:	2201      	movs	r2, #1
 800b3de:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b3e0:	e00f      	b.n	800b402 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800b3e2:	220e      	movs	r2, #14
 800b3e4:	18bb      	adds	r3, r7, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	18ba      	adds	r2, r7, r2
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	7011      	strb	r1, [r2, #0]
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	189b      	adds	r3, r3, r2
 800b3f4:	7819      	ldrb	r1, [r3, #0]
 800b3f6:	220f      	movs	r2, #15
 800b3f8:	18bb      	adds	r3, r7, r2
 800b3fa:	18ba      	adds	r2, r7, r2
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	404a      	eors	r2, r1
 800b400:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b402:	210e      	movs	r1, #14
 800b404:	187b      	adds	r3, r7, r1
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	18d3      	adds	r3, r2, r3
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	2b2a      	cmp	r3, #42	; 0x2a
 800b410:	d00a      	beq.n	800b428 <is_my_nmea_checksum_ok+0x60>
 800b412:	187b      	adds	r3, r7, r1
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	18d3      	adds	r3, r2, r3
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <is_my_nmea_checksum_ok+0x60>
 800b420:	187b      	adds	r3, r7, r1
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1dc      	bne.n	800b3e2 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800b428:	230f      	movs	r3, #15
 800b42a:	18fb      	adds	r3, r7, r3
 800b42c:	781c      	ldrb	r4, [r3, #0]
 800b42e:	210e      	movs	r1, #14
 800b430:	187b      	adds	r3, r7, r1
 800b432:	187a      	adds	r2, r7, r1
 800b434:	7812      	ldrb	r2, [r2, #0]
 800b436:	3201      	adds	r2, #1
 800b438:	701a      	strb	r2, [r3, #0]
 800b43a:	187b      	adds	r3, r7, r1
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	18d3      	adds	r3, r2, r3
 800b442:	2210      	movs	r2, #16
 800b444:	2100      	movs	r1, #0
 800b446:	0018      	movs	r0, r3
 800b448:	f001 fcd4 	bl	800cdf4 <strtol>
 800b44c:	0003      	movs	r3, r0
 800b44e:	1ae3      	subs	r3, r4, r3
 800b450:	425a      	negs	r2, r3
 800b452:	4153      	adcs	r3, r2
 800b454:	b2db      	uxtb	r3, r3
}
 800b456:	0018      	movs	r0, r3
 800b458:	46bd      	mov	sp, r7
 800b45a:	b005      	add	sp, #20
 800b45c:	bd90      	pop	{r4, r7, pc}
	...

0800b460 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800b460:	b5b0      	push	{r4, r5, r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	000a      	movs	r2, r1
 800b46a:	1cfb      	adds	r3, r7, #3
 800b46c:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800b46e:	2308      	movs	r3, #8
 800b470:	18fa      	adds	r2, r7, r3
 800b472:	492f      	ldr	r1, [pc, #188]	; (800b530 <nmea2decimal+0xd0>)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	0018      	movs	r0, r3
 800b478:	f001 fe72 	bl	800d160 <sscanf>
    min = deg / 100 ;
 800b47c:	68b8      	ldr	r0, [r7, #8]
 800b47e:	68f9      	ldr	r1, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	4b2c      	ldr	r3, [pc, #176]	; (800b534 <nmea2decimal+0xd4>)
 800b484:	f7f5 fcf8 	bl	8000e78 <__aeabi_ddiv>
 800b488:	0002      	movs	r2, r0
 800b48a:	000b      	movs	r3, r1
 800b48c:	613a      	str	r2, [r7, #16]
 800b48e:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800b490:	6938      	ldr	r0, [r7, #16]
 800b492:	6979      	ldr	r1, [r7, #20]
 800b494:	f7f6 ff4c 	bl	8002330 <__aeabi_d2iz>
 800b498:	0003      	movs	r3, r0
 800b49a:	0018      	movs	r0, r3
 800b49c:	f7f6 ff7e 	bl	800239c <__aeabi_i2d>
 800b4a0:	0002      	movs	r2, r0
 800b4a2:	000b      	movs	r3, r1
 800b4a4:	60ba      	str	r2, [r7, #8]
 800b4a6:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6938      	ldr	r0, [r7, #16]
 800b4ae:	6979      	ldr	r1, [r7, #20]
 800b4b0:	f7f6 fb9e 	bl	8001bf0 <__aeabi_dsub>
 800b4b4:	0002      	movs	r2, r0
 800b4b6:	000b      	movs	r3, r1
 800b4b8:	0010      	movs	r0, r2
 800b4ba:	0019      	movs	r1, r3
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4b1e      	ldr	r3, [pc, #120]	; (800b538 <nmea2decimal+0xd8>)
 800b4c0:	f7f6 f8d4 	bl	800166c <__aeabi_dmul>
 800b4c4:	0002      	movs	r2, r0
 800b4c6:	000b      	movs	r3, r1
 800b4c8:	613a      	str	r2, [r7, #16]
 800b4ca:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4b1b      	ldr	r3, [pc, #108]	; (800b53c <nmea2decimal+0xdc>)
 800b4d0:	6938      	ldr	r0, [r7, #16]
 800b4d2:	6979      	ldr	r1, [r7, #20]
 800b4d4:	f7f5 fcd0 	bl	8000e78 <__aeabi_ddiv>
 800b4d8:	0002      	movs	r2, r0
 800b4da:	000b      	movs	r3, r1
 800b4dc:	613a      	str	r2, [r7, #16]
 800b4de:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800b4e0:	1cfb      	adds	r3, r7, #3
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	2b53      	cmp	r3, #83	; 0x53
 800b4e6:	d003      	beq.n	800b4f0 <nmea2decimal+0x90>
 800b4e8:	1cfb      	adds	r3, r7, #3
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b57      	cmp	r3, #87	; 0x57
 800b4ee:	d10e      	bne.n	800b50e <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800b4f0:	68b8      	ldr	r0, [r7, #8]
 800b4f2:	68f9      	ldr	r1, [r7, #12]
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f7f5 f95e 	bl	80007b8 <__aeabi_dadd>
 800b4fc:	0002      	movs	r2, r0
 800b4fe:	000b      	movs	r3, r1
 800b500:	0011      	movs	r1, r2
 800b502:	000c      	movs	r4, r1
 800b504:	2180      	movs	r1, #128	; 0x80
 800b506:	0609      	lsls	r1, r1, #24
 800b508:	4059      	eors	r1, r3
 800b50a:	000d      	movs	r5, r1
 800b50c:	e009      	b.n	800b522 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800b50e:	68b8      	ldr	r0, [r7, #8]
 800b510:	68f9      	ldr	r1, [r7, #12]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	f7f5 f94f 	bl	80007b8 <__aeabi_dadd>
 800b51a:	0002      	movs	r2, r0
 800b51c:	000b      	movs	r3, r1
 800b51e:	0014      	movs	r4, r2
 800b520:	001d      	movs	r5, r3
}
 800b522:	0022      	movs	r2, r4
 800b524:	002b      	movs	r3, r5
 800b526:	0010      	movs	r0, r2
 800b528:	0019      	movs	r1, r3
 800b52a:	46bd      	mov	sp, r7
 800b52c:	b006      	add	sp, #24
 800b52e:	bdb0      	pop	{r4, r5, r7, pc}
 800b530:	08015810 	.word	0x08015810
 800b534:	40590000 	.word	0x40590000
 800b538:	40240000 	.word	0x40240000
 800b53c:	40180000 	.word	0x40180000

0800b540 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800b540:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b542:	b08d      	sub	sp, #52	; 0x34
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	212c      	movs	r1, #44	; 0x2c
 800b550:	0018      	movs	r0, r3
 800b552:	f7ff fcc7 	bl	800aee4 <my_find_char_position>
 800b556:	0003      	movs	r3, r0
 800b558:	001a      	movs	r2, r3
 800b55a:	252f      	movs	r5, #47	; 0x2f
 800b55c:	197b      	adds	r3, r7, r5
 800b55e:	3201      	adds	r2, #1
 800b560:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2202      	movs	r2, #2
 800b566:	212c      	movs	r1, #44	; 0x2c
 800b568:	0018      	movs	r0, r3
 800b56a:	f7ff fcbb 	bl	800aee4 <my_find_char_position>
 800b56e:	0003      	movs	r3, r0
 800b570:	0019      	movs	r1, r3
 800b572:	242e      	movs	r4, #46	; 0x2e
 800b574:	193b      	adds	r3, r7, r4
 800b576:	197a      	adds	r2, r7, r5
 800b578:	7812      	ldrb	r2, [r2, #0]
 800b57a:	1a8a      	subs	r2, r1, r2
 800b57c:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b57e:	193b      	adds	r3, r7, r4
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	0018      	movs	r0, r3
 800b586:	f000 fb3b 	bl	800bc00 <malloc>
 800b58a:	0003      	movs	r3, r0
 800b58c:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b58e:	197b      	adds	r3, r7, r5
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	18d1      	adds	r1, r2, r3
 800b596:	193b      	adds	r3, r7, r4
 800b598:	781a      	ldrb	r2, [r3, #0]
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	0018      	movs	r0, r3
 800b59e:	f001 fe7c 	bl	800d29a <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800b5a2:	193b      	adds	r3, r7, r4
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a8:	18d3      	adds	r3, r2, r3
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b5ae:	197b      	adds	r3, r7, r5
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	193b      	adds	r3, r7, r4
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	18d3      	adds	r3, r2, r3
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	18d2      	adds	r2, r2, r3
 800b5be:	2627      	movs	r6, #39	; 0x27
 800b5c0:	19bb      	adds	r3, r7, r6
 800b5c2:	7812      	ldrb	r2, [r2, #0]
 800b5c4:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800b5c6:	19bb      	adds	r3, r7, r6
 800b5c8:	781a      	ldrb	r2, [r3, #0]
 800b5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5cc:	0011      	movs	r1, r2
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	f7ff ff46 	bl	800b460 <nmea2decimal>
 800b5d4:	0002      	movs	r2, r0
 800b5d6:	000b      	movs	r3, r1
 800b5d8:	61ba      	str	r2, [r7, #24]
 800b5da:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	0018      	movs	r0, r3
 800b5e0:	f000 fb18 	bl	800bc14 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4b49      	ldr	r3, [pc, #292]	; (800b70c <my_nmea_get_gngll_coordinates+0x1cc>)
 800b5e8:	69b8      	ldr	r0, [r7, #24]
 800b5ea:	69f9      	ldr	r1, [r7, #28]
 800b5ec:	f7f6 f83e 	bl	800166c <__aeabi_dmul>
 800b5f0:	0002      	movs	r2, r0
 800b5f2:	000b      	movs	r3, r1
 800b5f4:	0010      	movs	r0, r2
 800b5f6:	0019      	movs	r1, r3
 800b5f8:	f008 fb20 	bl	8013c3c <round>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4b43      	ldr	r3, [pc, #268]	; (800b70c <my_nmea_get_gngll_coordinates+0x1cc>)
 800b600:	f7f5 fc3a 	bl	8000e78 <__aeabi_ddiv>
 800b604:	0002      	movs	r2, r0
 800b606:	000b      	movs	r3, r1
 800b608:	61ba      	str	r2, [r7, #24]
 800b60a:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800b60c:	2200      	movs	r2, #0
 800b60e:	4b40      	ldr	r3, [pc, #256]	; (800b710 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b610:	69b8      	ldr	r0, [r7, #24]
 800b612:	69f9      	ldr	r1, [r7, #28]
 800b614:	f7f6 f82a 	bl	800166c <__aeabi_dmul>
 800b618:	0002      	movs	r2, r0
 800b61a:	000b      	movs	r3, r1
 800b61c:	0010      	movs	r0, r2
 800b61e:	0019      	movs	r1, r3
 800b620:	f7f6 fe86 	bl	8002330 <__aeabi_d2iz>
 800b624:	0002      	movs	r2, r0
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2203      	movs	r2, #3
 800b62e:	212c      	movs	r1, #44	; 0x2c
 800b630:	0018      	movs	r0, r3
 800b632:	f7ff fc57 	bl	800aee4 <my_find_char_position>
 800b636:	0003      	movs	r3, r0
 800b638:	001a      	movs	r2, r3
 800b63a:	197b      	adds	r3, r7, r5
 800b63c:	3201      	adds	r2, #1
 800b63e:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2204      	movs	r2, #4
 800b644:	212c      	movs	r1, #44	; 0x2c
 800b646:	0018      	movs	r0, r3
 800b648:	f7ff fc4c 	bl	800aee4 <my_find_char_position>
 800b64c:	0003      	movs	r3, r0
 800b64e:	0019      	movs	r1, r3
 800b650:	193b      	adds	r3, r7, r4
 800b652:	197a      	adds	r2, r7, r5
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	1a8a      	subs	r2, r1, r2
 800b658:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b65a:	193b      	adds	r3, r7, r4
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	3301      	adds	r3, #1
 800b660:	0018      	movs	r0, r3
 800b662:	f000 facd 	bl	800bc00 <malloc>
 800b666:	0003      	movs	r3, r0
 800b668:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b66a:	197b      	adds	r3, r7, r5
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	18d1      	adds	r1, r2, r3
 800b672:	193b      	adds	r3, r7, r4
 800b674:	781a      	ldrb	r2, [r3, #0]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	0018      	movs	r0, r3
 800b67a:	f001 fe0e 	bl	800d29a <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800b67e:	193b      	adds	r3, r7, r4
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	18d3      	adds	r3, r2, r3
 800b686:	2200      	movs	r2, #0
 800b688:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b68a:	197b      	adds	r3, r7, r5
 800b68c:	781a      	ldrb	r2, [r3, #0]
 800b68e:	193b      	adds	r3, r7, r4
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	18d3      	adds	r3, r2, r3
 800b694:	3301      	adds	r3, #1
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	18d2      	adds	r2, r2, r3
 800b69a:	19bb      	adds	r3, r7, r6
 800b69c:	7812      	ldrb	r2, [r2, #0]
 800b69e:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800b6a0:	19bb      	adds	r3, r7, r6
 800b6a2:	781a      	ldrb	r2, [r3, #0]
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	0011      	movs	r1, r2
 800b6a8:	0018      	movs	r0, r3
 800b6aa:	f7ff fed9 	bl	800b460 <nmea2decimal>
 800b6ae:	0002      	movs	r2, r0
 800b6b0:	000b      	movs	r3, r1
 800b6b2:	60ba      	str	r2, [r7, #8]
 800b6b4:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	f000 faab 	bl	800bc14 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4b12      	ldr	r3, [pc, #72]	; (800b70c <my_nmea_get_gngll_coordinates+0x1cc>)
 800b6c2:	68b8      	ldr	r0, [r7, #8]
 800b6c4:	68f9      	ldr	r1, [r7, #12]
 800b6c6:	f7f5 ffd1 	bl	800166c <__aeabi_dmul>
 800b6ca:	0002      	movs	r2, r0
 800b6cc:	000b      	movs	r3, r1
 800b6ce:	0010      	movs	r0, r2
 800b6d0:	0019      	movs	r1, r3
 800b6d2:	f008 fab3 	bl	8013c3c <round>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	; (800b70c <my_nmea_get_gngll_coordinates+0x1cc>)
 800b6da:	f7f5 fbcd 	bl	8000e78 <__aeabi_ddiv>
 800b6de:	0002      	movs	r2, r0
 800b6e0:	000b      	movs	r3, r1
 800b6e2:	60ba      	str	r2, [r7, #8]
 800b6e4:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4b09      	ldr	r3, [pc, #36]	; (800b710 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b6ea:	68b8      	ldr	r0, [r7, #8]
 800b6ec:	68f9      	ldr	r1, [r7, #12]
 800b6ee:	f7f5 ffbd 	bl	800166c <__aeabi_dmul>
 800b6f2:	0002      	movs	r2, r0
 800b6f4:	000b      	movs	r3, r1
 800b6f6:	0010      	movs	r0, r2
 800b6f8:	0019      	movs	r1, r3
 800b6fa:	f7f6 fe19 	bl	8002330 <__aeabi_d2iz>
 800b6fe:	0002      	movs	r2, r0
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	605a      	str	r2, [r3, #4]
}
 800b704:	46c0      	nop			; (mov r8, r8)
 800b706:	46bd      	mov	sp, r7
 800b708:	b00d      	add	sp, #52	; 0x34
 800b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b70c:	412e8480 	.word	0x412e8480
 800b710:	416312d0 	.word	0x416312d0

0800b714 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800b714:	b5b0      	push	{r4, r5, r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800b71c:	240e      	movs	r4, #14
 800b71e:	193b      	adds	r3, r7, r4
 800b720:	2200      	movs	r2, #0
 800b722:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2203      	movs	r2, #3
 800b728:	212c      	movs	r1, #44	; 0x2c
 800b72a:	0018      	movs	r0, r3
 800b72c:	f7ff fbda 	bl	800aee4 <my_find_char_position>
 800b730:	0003      	movs	r3, r0
 800b732:	001a      	movs	r2, r3
 800b734:	2517      	movs	r5, #23
 800b736:	197b      	adds	r3, r7, r5
 800b738:	3201      	adds	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b73c:	2003      	movs	r0, #3
 800b73e:	f000 fa5f 	bl	800bc00 <malloc>
 800b742:	0003      	movs	r3, r0
 800b744:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b746:	197b      	adds	r3, r7, r5
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	18d1      	adds	r1, r2, r3
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2202      	movs	r2, #2
 800b752:	0018      	movs	r0, r3
 800b754:	f001 fda1 	bl	800d29a <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	3302      	adds	r3, #2
 800b75c:	2200      	movs	r2, #0
 800b75e:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800b760:	193a      	adds	r2, r7, r4
 800b762:	4907      	ldr	r1, [pc, #28]	; (800b780 <my_nmea_get_gsv_tns+0x6c>)
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	0018      	movs	r0, r3
 800b768:	f001 fcfa 	bl	800d160 <sscanf>
	free ( s ) ;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	0018      	movs	r0, r3
 800b770:	f000 fa50 	bl	800bc14 <free>
	return tns ;
 800b774:	193b      	adds	r3, r7, r4
 800b776:	881b      	ldrh	r3, [r3, #0]
}
 800b778:	0018      	movs	r0, r3
 800b77a:	46bd      	mov	sp, r7
 800b77c:	b006      	add	sp, #24
 800b77e:	bdb0      	pop	{r4, r5, r7, pc}
 800b780:	0801581c 	.word	0x0801581c

0800b784 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b784:	b590      	push	{r4, r7, lr}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2209      	movs	r2, #9
 800b792:	212c      	movs	r1, #44	; 0x2c
 800b794:	0018      	movs	r0, r3
 800b796:	f7ff fba5 	bl	800aee4 <my_find_char_position>
 800b79a:	0003      	movs	r3, r0
 800b79c:	001a      	movs	r2, r3
 800b79e:	2417      	movs	r4, #23
 800b7a0:	193b      	adds	r3, r7, r4
 800b7a2:	3205      	adds	r2, #5
 800b7a4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b7a6:	2003      	movs	r0, #3
 800b7a8:	f000 fa2a 	bl	800bc00 <malloc>
 800b7ac:	0003      	movs	r3, r0
 800b7ae:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b7b0:	193b      	adds	r3, r7, r4
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	18d1      	adds	r1, r2, r3
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	0018      	movs	r0, r3
 800b7be:	f001 fd6c 	bl	800d29a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	3302      	adds	r3, #2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b7ca:	240e      	movs	r4, #14
 800b7cc:	193a      	adds	r2, r7, r4
 800b7ce:	4909      	ldr	r1, [pc, #36]	; (800b7f4 <my_nmea_get_rmc_date_yy+0x70>)
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f001 fcc4 	bl	800d160 <sscanf>
	free ( s ) ;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	0018      	movs	r0, r3
 800b7dc:	f000 fa1a 	bl	800bc14 <free>
	*yy = (uint8_t) temp ;
 800b7e0:	193b      	adds	r3, r7, r4
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	701a      	strb	r2, [r3, #0]

}
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	b007      	add	sp, #28
 800b7f0:	bd90      	pop	{r4, r7, pc}
 800b7f2:	46c0      	nop			; (mov r8, r8)
 800b7f4:	0801581c 	.word	0x0801581c

0800b7f8 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b7f8:	b590      	push	{r4, r7, lr}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2209      	movs	r2, #9
 800b806:	212c      	movs	r1, #44	; 0x2c
 800b808:	0018      	movs	r0, r3
 800b80a:	f7ff fb6b 	bl	800aee4 <my_find_char_position>
 800b80e:	0003      	movs	r3, r0
 800b810:	001a      	movs	r2, r3
 800b812:	2417      	movs	r4, #23
 800b814:	193b      	adds	r3, r7, r4
 800b816:	3203      	adds	r2, #3
 800b818:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b81a:	2003      	movs	r0, #3
 800b81c:	f000 f9f0 	bl	800bc00 <malloc>
 800b820:	0003      	movs	r3, r0
 800b822:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b824:	193b      	adds	r3, r7, r4
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	18d1      	adds	r1, r2, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2202      	movs	r2, #2
 800b830:	0018      	movs	r0, r3
 800b832:	f001 fd32 	bl	800d29a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	3302      	adds	r3, #2
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b83e:	240e      	movs	r4, #14
 800b840:	193a      	adds	r2, r7, r4
 800b842:	4909      	ldr	r1, [pc, #36]	; (800b868 <my_nmea_get_rmc_date_mm+0x70>)
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	0018      	movs	r0, r3
 800b848:	f001 fc8a 	bl	800d160 <sscanf>
	free ( s ) ;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	0018      	movs	r0, r3
 800b850:	f000 f9e0 	bl	800bc14 <free>
	*mm = (uint8_t) temp ;
 800b854:	193b      	adds	r3, r7, r4
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	701a      	strb	r2, [r3, #0]

}
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	46bd      	mov	sp, r7
 800b862:	b007      	add	sp, #28
 800b864:	bd90      	pop	{r4, r7, pc}
 800b866:	46c0      	nop			; (mov r8, r8)
 800b868:	0801581c 	.word	0x0801581c

0800b86c <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800b86c:	b590      	push	{r4, r7, lr}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2209      	movs	r2, #9
 800b87a:	212c      	movs	r1, #44	; 0x2c
 800b87c:	0018      	movs	r0, r3
 800b87e:	f7ff fb31 	bl	800aee4 <my_find_char_position>
 800b882:	0003      	movs	r3, r0
 800b884:	001a      	movs	r2, r3
 800b886:	2417      	movs	r4, #23
 800b888:	193b      	adds	r3, r7, r4
 800b88a:	3201      	adds	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b88e:	2003      	movs	r0, #3
 800b890:	f000 f9b6 	bl	800bc00 <malloc>
 800b894:	0003      	movs	r3, r0
 800b896:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b898:	193b      	adds	r3, r7, r4
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	18d1      	adds	r1, r2, r3
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	f001 fcf8 	bl	800d29a <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	3302      	adds	r3, #2
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b8b2:	240e      	movs	r4, #14
 800b8b4:	193a      	adds	r2, r7, r4
 800b8b6:	4909      	ldr	r1, [pc, #36]	; (800b8dc <my_nmea_get_rmc_date_dd+0x70>)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f001 fc50 	bl	800d160 <sscanf>
	free ( s ) ;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f000 f9a6 	bl	800bc14 <free>
	*dd = (uint8_t) temp ;
 800b8c8:	193b      	adds	r3, r7, r4
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	701a      	strb	r2, [r3, #0]

}
 800b8d2:	46c0      	nop			; (mov r8, r8)
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	b007      	add	sp, #28
 800b8d8:	bd90      	pop	{r4, r7, pc}
 800b8da:	46c0      	nop			; (mov r8, r8)
 800b8dc:	0801581c 	.word	0x0801581c

0800b8e0 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800b8e0:	b590      	push	{r4, r7, lr}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	212c      	movs	r1, #44	; 0x2c
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f7ff faf7 	bl	800aee4 <my_find_char_position>
 800b8f6:	0003      	movs	r3, r0
 800b8f8:	001a      	movs	r2, r3
 800b8fa:	2417      	movs	r4, #23
 800b8fc:	193b      	adds	r3, r7, r4
 800b8fe:	3201      	adds	r2, #1
 800b900:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b902:	2003      	movs	r0, #3
 800b904:	f000 f97c 	bl	800bc00 <malloc>
 800b908:	0003      	movs	r3, r0
 800b90a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b90c:	193b      	adds	r3, r7, r4
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	18d1      	adds	r1, r2, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	2202      	movs	r2, #2
 800b918:	0018      	movs	r0, r3
 800b91a:	f001 fcbe 	bl	800d29a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	3302      	adds	r3, #2
 800b922:	2200      	movs	r2, #0
 800b924:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b926:	240e      	movs	r4, #14
 800b928:	193a      	adds	r2, r7, r4
 800b92a:	4909      	ldr	r1, [pc, #36]	; (800b950 <my_nmea_get_rmc_utc_hh+0x70>)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	0018      	movs	r0, r3
 800b930:	f001 fc16 	bl	800d160 <sscanf>
	free ( s ) ;
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	0018      	movs	r0, r3
 800b938:	f000 f96c 	bl	800bc14 <free>
	*hh = (uint8_t) temp ;
 800b93c:	193b      	adds	r3, r7, r4
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b2da      	uxtb	r2, r3
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	701a      	strb	r2, [r3, #0]

}
 800b946:	46c0      	nop			; (mov r8, r8)
 800b948:	46bd      	mov	sp, r7
 800b94a:	b007      	add	sp, #28
 800b94c:	bd90      	pop	{r4, r7, pc}
 800b94e:	46c0      	nop			; (mov r8, r8)
 800b950:	0801581c 	.word	0x0801581c

0800b954 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800b954:	b590      	push	{r4, r7, lr}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	212c      	movs	r1, #44	; 0x2c
 800b964:	0018      	movs	r0, r3
 800b966:	f7ff fabd 	bl	800aee4 <my_find_char_position>
 800b96a:	0003      	movs	r3, r0
 800b96c:	001a      	movs	r2, r3
 800b96e:	2417      	movs	r4, #23
 800b970:	193b      	adds	r3, r7, r4
 800b972:	3203      	adds	r2, #3
 800b974:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b976:	2003      	movs	r0, #3
 800b978:	f000 f942 	bl	800bc00 <malloc>
 800b97c:	0003      	movs	r3, r0
 800b97e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b980:	193b      	adds	r3, r7, r4
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	18d1      	adds	r1, r2, r3
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2202      	movs	r2, #2
 800b98c:	0018      	movs	r0, r3
 800b98e:	f001 fc84 	bl	800d29a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	3302      	adds	r3, #2
 800b996:	2200      	movs	r2, #0
 800b998:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b99a:	240e      	movs	r4, #14
 800b99c:	193a      	adds	r2, r7, r4
 800b99e:	4909      	ldr	r1, [pc, #36]	; (800b9c4 <my_nmea_get_rmc_utc_mm+0x70>)
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f001 fbdc 	bl	800d160 <sscanf>
	free ( s ) ;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f000 f932 	bl	800bc14 <free>
	*mm = (uint8_t) temp ;
 800b9b0:	193b      	adds	r3, r7, r4
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	701a      	strb	r2, [r3, #0]

}
 800b9ba:	46c0      	nop			; (mov r8, r8)
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	b007      	add	sp, #28
 800b9c0:	bd90      	pop	{r4, r7, pc}
 800b9c2:	46c0      	nop			; (mov r8, r8)
 800b9c4:	0801581c 	.word	0x0801581c

0800b9c8 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800b9c8:	b590      	push	{r4, r7, lr}
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	212c      	movs	r1, #44	; 0x2c
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f7ff fa83 	bl	800aee4 <my_find_char_position>
 800b9de:	0003      	movs	r3, r0
 800b9e0:	001a      	movs	r2, r3
 800b9e2:	2417      	movs	r4, #23
 800b9e4:	193b      	adds	r3, r7, r4
 800b9e6:	3205      	adds	r2, #5
 800b9e8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b9ea:	2003      	movs	r0, #3
 800b9ec:	f000 f908 	bl	800bc00 <malloc>
 800b9f0:	0003      	movs	r3, r0
 800b9f2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b9f4:	193b      	adds	r3, r7, r4
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	18d1      	adds	r1, r2, r3
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	2202      	movs	r2, #2
 800ba00:	0018      	movs	r0, r3
 800ba02:	f001 fc4a 	bl	800d29a <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	3302      	adds	r3, #2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba0e:	240e      	movs	r4, #14
 800ba10:	193a      	adds	r2, r7, r4
 800ba12:	4909      	ldr	r1, [pc, #36]	; (800ba38 <my_nmea_get_rmc_utc_ss+0x70>)
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	0018      	movs	r0, r3
 800ba18:	f001 fba2 	bl	800d160 <sscanf>
	free ( s ) ;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	0018      	movs	r0, r3
 800ba20:	f000 f8f8 	bl	800bc14 <free>
	*ss = (uint8_t) temp ;
 800ba24:	193b      	adds	r3, r7, r4
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	701a      	strb	r2, [r3, #0]

}
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	46bd      	mov	sp, r7
 800ba32:	b007      	add	sp, #28
 800ba34:	bd90      	pop	{r4, r7, pc}
 800ba36:	46c0      	nop			; (mov r8, r8)
 800ba38:	0801581c 	.word	0x0801581c

0800ba3c <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	212c      	movs	r1, #44	; 0x2c
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f7ff fa49 	bl	800aee4 <my_find_char_position>
 800ba52:	0003      	movs	r3, r0
 800ba54:	001a      	movs	r2, r3
 800ba56:	240f      	movs	r4, #15
 800ba58:	193b      	adds	r3, r7, r4
 800ba5a:	3208      	adds	r2, #8
 800ba5c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ba5e:	2004      	movs	r0, #4
 800ba60:	f000 f8ce 	bl	800bc00 <malloc>
 800ba64:	0003      	movs	r3, r0
 800ba66:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ba68:	193b      	adds	r3, r7, r4
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	18d1      	adds	r1, r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2203      	movs	r2, #3
 800ba74:	0018      	movs	r0, r3
 800ba76:	f001 fc10 	bl	800d29a <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3303      	adds	r3, #3
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	4906      	ldr	r1, [pc, #24]	; (800baa0 <my_nmea_get_rmc_utc_sss+0x64>)
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	0018      	movs	r0, r3
 800ba8a:	f001 fb69 	bl	800d160 <sscanf>
	free ( s ) ;
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	0018      	movs	r0, r3
 800ba92:	f000 f8bf 	bl	800bc14 <free>
}
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	b005      	add	sp, #20
 800ba9c:	bd90      	pop	{r4, r7, pc}
 800ba9e:	46c0      	nop			; (mov r8, r8)
 800baa0:	08015820 	.word	0x08015820

0800baa4 <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	0018      	movs	r0, r3
 800bab0:	f7f4 fb28 	bl	8000104 <strlen>
 800bab4:	0003      	movs	r3, r0
 800bab6:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800bab8:	2317      	movs	r3, #23
 800baba:	18fb      	adds	r3, r7, r3
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800bac0:	2316      	movs	r3, #22
 800bac2:	18fb      	adds	r3, r7, r3
 800bac4:	2200      	movs	r2, #0
 800bac6:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d902      	bls.n	800bad4 <my_tracker_api_is_cmd+0x30>
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b09      	cmp	r3, #9
 800bad2:	d901      	bls.n	800bad8 <my_tracker_api_is_cmd+0x34>
		return false ;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e04b      	b.n	800bb70 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800bad8:	2317      	movs	r3, #23
 800bada:	18fb      	adds	r3, r7, r3
 800badc:	2200      	movs	r2, #0
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	e025      	b.n	800bb2e <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800bae2:	2317      	movs	r3, #23
 800bae4:	18fb      	adds	r3, r7, r3
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	18d3      	adds	r3, r2, r3
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b2c      	cmp	r3, #44	; 0x2c
 800baf0:	d106      	bne.n	800bb00 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800baf2:	2116      	movs	r1, #22
 800baf4:	187b      	adds	r3, r7, r1
 800baf6:	781a      	ldrb	r2, [r3, #0]
 800baf8:	187b      	adds	r3, r7, r1
 800bafa:	3201      	adds	r2, #1
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	e010      	b.n	800bb22 <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800bb00:	2117      	movs	r1, #23
 800bb02:	187b      	adds	r3, r7, r1
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	18d3      	adds	r3, r2, r3
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	2b2f      	cmp	r3, #47	; 0x2f
 800bb0e:	d906      	bls.n	800bb1e <my_tracker_api_is_cmd+0x7a>
 800bb10:	187b      	adds	r3, r7, r1
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	18d3      	adds	r3, r2, r3
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b39      	cmp	r3, #57	; 0x39
 800bb1c:	d901      	bls.n	800bb22 <my_tracker_api_is_cmd+0x7e>
			return false;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e026      	b.n	800bb70 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800bb22:	2117      	movs	r1, #23
 800bb24:	187b      	adds	r3, r7, r1
 800bb26:	781a      	ldrb	r2, [r3, #0]
 800bb28:	187b      	adds	r3, r7, r1
 800bb2a:	3201      	adds	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	2317      	movs	r3, #23
 800bb30:	18fb      	adds	r3, r7, r3
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d8d3      	bhi.n	800bae2 <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800bb3a:	2316      	movs	r3, #22
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d901      	bls.n	800bb48 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800bb44:	2300      	movs	r3, #0
 800bb46:	e013      	b.n	800bb70 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	212c      	movs	r1, #44	; 0x2c
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f001 fb85 	bl	800d25c <strchr>
 800bb52:	0003      	movs	r3, r0
 800bb54:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800bb56:	68fa      	ldr	r2, [r7, #12]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d802      	bhi.n	800bb6a <my_tracker_api_is_cmd+0xc6>
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <my_tracker_api_is_cmd+0xca>
		return false ;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	e000      	b.n	800bb70 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800bb6e:	2301      	movs	r3, #1
}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b006      	add	sp, #24
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800bb94:	4a19      	ldr	r2, [pc, #100]	; (800bbfc <my_tracker_api_parse_cmd+0x84>)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	0011      	movs	r1, r2
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f001 fb92 	bl	800d2c4 <strtok>
 800bba0:	0003      	movs	r3, r0
 800bba2:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	0018      	movs	r0, r3
 800bba8:	f7ff fb3e 	bl	800b228 <my_conv_string_2_uint32_t>
 800bbac:	0003      	movs	r3, r0
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800bbb4:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <my_tracker_api_parse_cmd+0x84>)
 800bbb6:	0019      	movs	r1, r3
 800bbb8:	2000      	movs	r0, #0
 800bbba:	f001 fb83 	bl	800d2c4 <strtok>
 800bbbe:	0003      	movs	r3, r0
 800bbc0:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f7ff fb2f 	bl	800b228 <my_conv_string_2_uint32_t>
 800bbca:	0002      	movs	r2, r0
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	; (800bbfc <my_tracker_api_parse_cmd+0x84>)
 800bbd2:	0019      	movs	r1, r3
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f001 fb75 	bl	800d2c4 <strtok>
 800bbda:	0003      	movs	r3, r0
 800bbdc:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <my_tracker_api_parse_cmd+0x74>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e000      	b.n	800bbf2 <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800bbf0:	2301      	movs	r3, #1
}
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	b004      	add	sp, #16
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	46c0      	nop			; (mov r8, r8)
 800bbfc:	08015824 	.word	0x08015824

0800bc00 <malloc>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4b03      	ldr	r3, [pc, #12]	; (800bc10 <malloc+0x10>)
 800bc04:	0001      	movs	r1, r0
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	f000 f80e 	bl	800bc28 <_malloc_r>
 800bc0c:	bd10      	pop	{r4, pc}
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	200006d0 	.word	0x200006d0

0800bc14 <free>:
 800bc14:	b510      	push	{r4, lr}
 800bc16:	4b03      	ldr	r3, [pc, #12]	; (800bc24 <free+0x10>)
 800bc18:	0001      	movs	r1, r0
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	f001 fcbe 	bl	800d59c <_free_r>
 800bc20:	bd10      	pop	{r4, pc}
 800bc22:	46c0      	nop			; (mov r8, r8)
 800bc24:	200006d0 	.word	0x200006d0

0800bc28 <_malloc_r>:
 800bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2a:	000d      	movs	r5, r1
 800bc2c:	b087      	sub	sp, #28
 800bc2e:	350b      	adds	r5, #11
 800bc30:	9001      	str	r0, [sp, #4]
 800bc32:	2d16      	cmp	r5, #22
 800bc34:	d908      	bls.n	800bc48 <_malloc_r+0x20>
 800bc36:	2207      	movs	r2, #7
 800bc38:	4395      	bics	r5, r2
 800bc3a:	d506      	bpl.n	800bc4a <_malloc_r+0x22>
 800bc3c:	230c      	movs	r3, #12
 800bc3e:	9a01      	ldr	r2, [sp, #4]
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	2000      	movs	r0, #0
 800bc44:	b007      	add	sp, #28
 800bc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc48:	2510      	movs	r5, #16
 800bc4a:	42a9      	cmp	r1, r5
 800bc4c:	d8f6      	bhi.n	800bc3c <_malloc_r+0x14>
 800bc4e:	9801      	ldr	r0, [sp, #4]
 800bc50:	f000 f9fe 	bl	800c050 <__malloc_lock>
 800bc54:	23fc      	movs	r3, #252	; 0xfc
 800bc56:	4ebe      	ldr	r6, [pc, #760]	; (800bf50 <_malloc_r+0x328>)
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	429d      	cmp	r5, r3
 800bc5c:	d219      	bcs.n	800bc92 <_malloc_r+0x6a>
 800bc5e:	002a      	movs	r2, r5
 800bc60:	3208      	adds	r2, #8
 800bc62:	18b2      	adds	r2, r6, r2
 800bc64:	0011      	movs	r1, r2
 800bc66:	6854      	ldr	r4, [r2, #4]
 800bc68:	3908      	subs	r1, #8
 800bc6a:	08eb      	lsrs	r3, r5, #3
 800bc6c:	428c      	cmp	r4, r1
 800bc6e:	d103      	bne.n	800bc78 <_malloc_r+0x50>
 800bc70:	68d4      	ldr	r4, [r2, #12]
 800bc72:	3302      	adds	r3, #2
 800bc74:	42a2      	cmp	r2, r4
 800bc76:	d022      	beq.n	800bcbe <_malloc_r+0x96>
 800bc78:	2203      	movs	r2, #3
 800bc7a:	6863      	ldr	r3, [r4, #4]
 800bc7c:	68a1      	ldr	r1, [r4, #8]
 800bc7e:	4393      	bics	r3, r2
 800bc80:	68e2      	ldr	r2, [r4, #12]
 800bc82:	18e3      	adds	r3, r4, r3
 800bc84:	60ca      	str	r2, [r1, #12]
 800bc86:	6091      	str	r1, [r2, #8]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	6859      	ldr	r1, [r3, #4]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	605a      	str	r2, [r3, #4]
 800bc90:	e02a      	b.n	800bce8 <_malloc_r+0xc0>
 800bc92:	233f      	movs	r3, #63	; 0x3f
 800bc94:	0a6a      	lsrs	r2, r5, #9
 800bc96:	d003      	beq.n	800bca0 <_malloc_r+0x78>
 800bc98:	2a04      	cmp	r2, #4
 800bc9a:	d82b      	bhi.n	800bcf4 <_malloc_r+0xcc>
 800bc9c:	09ab      	lsrs	r3, r5, #6
 800bc9e:	3338      	adds	r3, #56	; 0x38
 800bca0:	2203      	movs	r2, #3
 800bca2:	4694      	mov	ip, r2
 800bca4:	00d9      	lsls	r1, r3, #3
 800bca6:	1989      	adds	r1, r1, r6
 800bca8:	68cc      	ldr	r4, [r1, #12]
 800bcaa:	428c      	cmp	r4, r1
 800bcac:	d006      	beq.n	800bcbc <_malloc_r+0x94>
 800bcae:	4660      	mov	r0, ip
 800bcb0:	6862      	ldr	r2, [r4, #4]
 800bcb2:	4382      	bics	r2, r0
 800bcb4:	1b57      	subs	r7, r2, r5
 800bcb6:	2f0f      	cmp	r7, #15
 800bcb8:	dd34      	ble.n	800bd24 <_malloc_r+0xfc>
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	6934      	ldr	r4, [r6, #16]
 800bcc0:	49a4      	ldr	r1, [pc, #656]	; (800bf54 <_malloc_r+0x32c>)
 800bcc2:	428c      	cmp	r4, r1
 800bcc4:	d055      	beq.n	800bd72 <_malloc_r+0x14a>
 800bcc6:	2003      	movs	r0, #3
 800bcc8:	6862      	ldr	r2, [r4, #4]
 800bcca:	4382      	bics	r2, r0
 800bccc:	1b50      	subs	r0, r2, r5
 800bcce:	280f      	cmp	r0, #15
 800bcd0:	dd36      	ble.n	800bd40 <_malloc_r+0x118>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	1967      	adds	r7, r4, r5
 800bcd6:	431d      	orrs	r5, r3
 800bcd8:	4303      	orrs	r3, r0
 800bcda:	6065      	str	r5, [r4, #4]
 800bcdc:	6177      	str	r7, [r6, #20]
 800bcde:	6137      	str	r7, [r6, #16]
 800bce0:	60f9      	str	r1, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	50a0      	str	r0, [r4, r2]
 800bce8:	9801      	ldr	r0, [sp, #4]
 800bcea:	f000 f9b9 	bl	800c060 <__malloc_unlock>
 800bcee:	0020      	movs	r0, r4
 800bcf0:	3008      	adds	r0, #8
 800bcf2:	e7a7      	b.n	800bc44 <_malloc_r+0x1c>
 800bcf4:	2a14      	cmp	r2, #20
 800bcf6:	d802      	bhi.n	800bcfe <_malloc_r+0xd6>
 800bcf8:	0013      	movs	r3, r2
 800bcfa:	335b      	adds	r3, #91	; 0x5b
 800bcfc:	e7d0      	b.n	800bca0 <_malloc_r+0x78>
 800bcfe:	2a54      	cmp	r2, #84	; 0x54
 800bd00:	d802      	bhi.n	800bd08 <_malloc_r+0xe0>
 800bd02:	0b2b      	lsrs	r3, r5, #12
 800bd04:	336e      	adds	r3, #110	; 0x6e
 800bd06:	e7cb      	b.n	800bca0 <_malloc_r+0x78>
 800bd08:	23aa      	movs	r3, #170	; 0xaa
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d802      	bhi.n	800bd16 <_malloc_r+0xee>
 800bd10:	0beb      	lsrs	r3, r5, #15
 800bd12:	3377      	adds	r3, #119	; 0x77
 800bd14:	e7c4      	b.n	800bca0 <_malloc_r+0x78>
 800bd16:	4990      	ldr	r1, [pc, #576]	; (800bf58 <_malloc_r+0x330>)
 800bd18:	237e      	movs	r3, #126	; 0x7e
 800bd1a:	428a      	cmp	r2, r1
 800bd1c:	d8c0      	bhi.n	800bca0 <_malloc_r+0x78>
 800bd1e:	0cab      	lsrs	r3, r5, #18
 800bd20:	337c      	adds	r3, #124	; 0x7c
 800bd22:	e7bd      	b.n	800bca0 <_malloc_r+0x78>
 800bd24:	68e0      	ldr	r0, [r4, #12]
 800bd26:	2f00      	cmp	r7, #0
 800bd28:	db08      	blt.n	800bd3c <_malloc_r+0x114>
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	60d8      	str	r0, [r3, #12]
 800bd2e:	6083      	str	r3, [r0, #8]
 800bd30:	2301      	movs	r3, #1
 800bd32:	18a2      	adds	r2, r4, r2
 800bd34:	6851      	ldr	r1, [r2, #4]
 800bd36:	430b      	orrs	r3, r1
 800bd38:	6053      	str	r3, [r2, #4]
 800bd3a:	e7d5      	b.n	800bce8 <_malloc_r+0xc0>
 800bd3c:	0004      	movs	r4, r0
 800bd3e:	e7b4      	b.n	800bcaa <_malloc_r+0x82>
 800bd40:	6171      	str	r1, [r6, #20]
 800bd42:	6131      	str	r1, [r6, #16]
 800bd44:	2800      	cmp	r0, #0
 800bd46:	daf3      	bge.n	800bd30 <_malloc_r+0x108>
 800bd48:	6871      	ldr	r1, [r6, #4]
 800bd4a:	468c      	mov	ip, r1
 800bd4c:	2180      	movs	r1, #128	; 0x80
 800bd4e:	0089      	lsls	r1, r1, #2
 800bd50:	428a      	cmp	r2, r1
 800bd52:	d300      	bcc.n	800bd56 <_malloc_r+0x12e>
 800bd54:	e08c      	b.n	800be70 <_malloc_r+0x248>
 800bd56:	08d1      	lsrs	r1, r2, #3
 800bd58:	0950      	lsrs	r0, r2, #5
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4082      	lsls	r2, r0
 800bd5e:	4660      	mov	r0, ip
 800bd60:	4302      	orrs	r2, r0
 800bd62:	6072      	str	r2, [r6, #4]
 800bd64:	00ca      	lsls	r2, r1, #3
 800bd66:	1992      	adds	r2, r2, r6
 800bd68:	6891      	ldr	r1, [r2, #8]
 800bd6a:	60e2      	str	r2, [r4, #12]
 800bd6c:	60a1      	str	r1, [r4, #8]
 800bd6e:	6094      	str	r4, [r2, #8]
 800bd70:	60cc      	str	r4, [r1, #12]
 800bd72:	2201      	movs	r2, #1
 800bd74:	4876      	ldr	r0, [pc, #472]	; (800bf50 <_malloc_r+0x328>)
 800bd76:	1099      	asrs	r1, r3, #2
 800bd78:	408a      	lsls	r2, r1
 800bd7a:	6841      	ldr	r1, [r0, #4]
 800bd7c:	4291      	cmp	r1, r2
 800bd7e:	d328      	bcc.n	800bdd2 <_malloc_r+0x1aa>
 800bd80:	420a      	tst	r2, r1
 800bd82:	d105      	bne.n	800bd90 <_malloc_r+0x168>
 800bd84:	2403      	movs	r4, #3
 800bd86:	43a3      	bics	r3, r4
 800bd88:	0052      	lsls	r2, r2, #1
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	420a      	tst	r2, r1
 800bd8e:	d0fb      	beq.n	800bd88 <_malloc_r+0x160>
 800bd90:	496f      	ldr	r1, [pc, #444]	; (800bf50 <_malloc_r+0x328>)
 800bd92:	9104      	str	r1, [sp, #16]
 800bd94:	00d9      	lsls	r1, r3, #3
 800bd96:	1841      	adds	r1, r0, r1
 800bd98:	468c      	mov	ip, r1
 800bd9a:	000f      	movs	r7, r1
 800bd9c:	9302      	str	r3, [sp, #8]
 800bd9e:	68fc      	ldr	r4, [r7, #12]
 800bda0:	42bc      	cmp	r4, r7
 800bda2:	d000      	beq.n	800bda6 <_malloc_r+0x17e>
 800bda4:	e09b      	b.n	800bede <_malloc_r+0x2b6>
 800bda6:	2403      	movs	r4, #3
 800bda8:	9902      	ldr	r1, [sp, #8]
 800bdaa:	3708      	adds	r7, #8
 800bdac:	3101      	adds	r1, #1
 800bdae:	9102      	str	r1, [sp, #8]
 800bdb0:	4221      	tst	r1, r4
 800bdb2:	d1f4      	bne.n	800bd9e <_malloc_r+0x176>
 800bdb4:	2103      	movs	r1, #3
 800bdb6:	420b      	tst	r3, r1
 800bdb8:	d000      	beq.n	800bdbc <_malloc_r+0x194>
 800bdba:	e0b7      	b.n	800bf2c <_malloc_r+0x304>
 800bdbc:	6843      	ldr	r3, [r0, #4]
 800bdbe:	4393      	bics	r3, r2
 800bdc0:	6043      	str	r3, [r0, #4]
 800bdc2:	9b04      	ldr	r3, [sp, #16]
 800bdc4:	0052      	lsls	r2, r2, #1
 800bdc6:	6859      	ldr	r1, [r3, #4]
 800bdc8:	4291      	cmp	r1, r2
 800bdca:	d302      	bcc.n	800bdd2 <_malloc_r+0x1aa>
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	d000      	beq.n	800bdd2 <_malloc_r+0x1aa>
 800bdd0:	e0bb      	b.n	800bf4a <_malloc_r+0x322>
 800bdd2:	2203      	movs	r2, #3
 800bdd4:	6883      	ldr	r3, [r0, #8]
 800bdd6:	9302      	str	r3, [sp, #8]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	4393      	bics	r3, r2
 800bddc:	9303      	str	r3, [sp, #12]
 800bdde:	42ab      	cmp	r3, r5
 800bde0:	d303      	bcc.n	800bdea <_malloc_r+0x1c2>
 800bde2:	1b59      	subs	r1, r3, r5
 800bde4:	290f      	cmp	r1, #15
 800bde6:	dd00      	ble.n	800bdea <_malloc_r+0x1c2>
 800bde8:	e123      	b.n	800c032 <_malloc_r+0x40a>
 800bdea:	9b02      	ldr	r3, [sp, #8]
 800bdec:	9a03      	ldr	r2, [sp, #12]
 800bdee:	2008      	movs	r0, #8
 800bdf0:	189e      	adds	r6, r3, r2
 800bdf2:	4b5a      	ldr	r3, [pc, #360]	; (800bf5c <_malloc_r+0x334>)
 800bdf4:	681f      	ldr	r7, [r3, #0]
 800bdf6:	f001 fb4b 	bl	800d490 <sysconf>
 800bdfa:	4b59      	ldr	r3, [pc, #356]	; (800bf60 <_malloc_r+0x338>)
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	197f      	adds	r7, r7, r5
 800be02:	9004      	str	r0, [sp, #16]
 800be04:	3301      	adds	r3, #1
 800be06:	d003      	beq.n	800be10 <_malloc_r+0x1e8>
 800be08:	1e7b      	subs	r3, r7, #1
 800be0a:	181b      	adds	r3, r3, r0
 800be0c:	4247      	negs	r7, r0
 800be0e:	401f      	ands	r7, r3
 800be10:	0039      	movs	r1, r7
 800be12:	9801      	ldr	r0, [sp, #4]
 800be14:	f001 fae8 	bl	800d3e8 <_sbrk_r>
 800be18:	0004      	movs	r4, r0
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d100      	bne.n	800be20 <_malloc_r+0x1f8>
 800be1e:	e0de      	b.n	800bfde <_malloc_r+0x3b6>
 800be20:	4286      	cmp	r6, r0
 800be22:	d904      	bls.n	800be2e <_malloc_r+0x206>
 800be24:	4b4a      	ldr	r3, [pc, #296]	; (800bf50 <_malloc_r+0x328>)
 800be26:	9a02      	ldr	r2, [sp, #8]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d000      	beq.n	800be2e <_malloc_r+0x206>
 800be2c:	e0d7      	b.n	800bfde <_malloc_r+0x3b6>
 800be2e:	4a4d      	ldr	r2, [pc, #308]	; (800bf64 <_malloc_r+0x33c>)
 800be30:	6813      	ldr	r3, [r2, #0]
 800be32:	18fb      	adds	r3, r7, r3
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	9a04      	ldr	r2, [sp, #16]
 800be38:	3a01      	subs	r2, #1
 800be3a:	42a6      	cmp	r6, r4
 800be3c:	d000      	beq.n	800be40 <_malloc_r+0x218>
 800be3e:	e097      	b.n	800bf70 <_malloc_r+0x348>
 800be40:	4216      	tst	r6, r2
 800be42:	d000      	beq.n	800be46 <_malloc_r+0x21e>
 800be44:	e094      	b.n	800bf70 <_malloc_r+0x348>
 800be46:	4b42      	ldr	r3, [pc, #264]	; (800bf50 <_malloc_r+0x328>)
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	19df      	adds	r7, r3, r7
 800be4e:	2301      	movs	r3, #1
 800be50:	433b      	orrs	r3, r7
 800be52:	6053      	str	r3, [r2, #4]
 800be54:	4b43      	ldr	r3, [pc, #268]	; (800bf64 <_malloc_r+0x33c>)
 800be56:	4a44      	ldr	r2, [pc, #272]	; (800bf68 <_malloc_r+0x340>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6811      	ldr	r1, [r2, #0]
 800be5c:	428b      	cmp	r3, r1
 800be5e:	d900      	bls.n	800be62 <_malloc_r+0x23a>
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	4a42      	ldr	r2, [pc, #264]	; (800bf6c <_malloc_r+0x344>)
 800be64:	6811      	ldr	r1, [r2, #0]
 800be66:	428b      	cmp	r3, r1
 800be68:	d800      	bhi.n	800be6c <_malloc_r+0x244>
 800be6a:	e0b8      	b.n	800bfde <_malloc_r+0x3b6>
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	e0b6      	b.n	800bfde <_malloc_r+0x3b6>
 800be70:	0a50      	lsrs	r0, r2, #9
 800be72:	2804      	cmp	r0, #4
 800be74:	d811      	bhi.n	800be9a <_malloc_r+0x272>
 800be76:	0991      	lsrs	r1, r2, #6
 800be78:	3138      	adds	r1, #56	; 0x38
 800be7a:	00cf      	lsls	r7, r1, #3
 800be7c:	19bf      	adds	r7, r7, r6
 800be7e:	68b8      	ldr	r0, [r7, #8]
 800be80:	4287      	cmp	r7, r0
 800be82:	d125      	bne.n	800bed0 <_malloc_r+0x2a8>
 800be84:	2201      	movs	r2, #1
 800be86:	1089      	asrs	r1, r1, #2
 800be88:	408a      	lsls	r2, r1
 800be8a:	4661      	mov	r1, ip
 800be8c:	430a      	orrs	r2, r1
 800be8e:	6072      	str	r2, [r6, #4]
 800be90:	60e7      	str	r7, [r4, #12]
 800be92:	60a0      	str	r0, [r4, #8]
 800be94:	60bc      	str	r4, [r7, #8]
 800be96:	60c4      	str	r4, [r0, #12]
 800be98:	e76b      	b.n	800bd72 <_malloc_r+0x14a>
 800be9a:	2814      	cmp	r0, #20
 800be9c:	d802      	bhi.n	800bea4 <_malloc_r+0x27c>
 800be9e:	0001      	movs	r1, r0
 800bea0:	315b      	adds	r1, #91	; 0x5b
 800bea2:	e7ea      	b.n	800be7a <_malloc_r+0x252>
 800bea4:	2854      	cmp	r0, #84	; 0x54
 800bea6:	d802      	bhi.n	800beae <_malloc_r+0x286>
 800bea8:	0b11      	lsrs	r1, r2, #12
 800beaa:	316e      	adds	r1, #110	; 0x6e
 800beac:	e7e5      	b.n	800be7a <_malloc_r+0x252>
 800beae:	21aa      	movs	r1, #170	; 0xaa
 800beb0:	0049      	lsls	r1, r1, #1
 800beb2:	4288      	cmp	r0, r1
 800beb4:	d802      	bhi.n	800bebc <_malloc_r+0x294>
 800beb6:	0bd1      	lsrs	r1, r2, #15
 800beb8:	3177      	adds	r1, #119	; 0x77
 800beba:	e7de      	b.n	800be7a <_malloc_r+0x252>
 800bebc:	4f26      	ldr	r7, [pc, #152]	; (800bf58 <_malloc_r+0x330>)
 800bebe:	217e      	movs	r1, #126	; 0x7e
 800bec0:	42b8      	cmp	r0, r7
 800bec2:	d8da      	bhi.n	800be7a <_malloc_r+0x252>
 800bec4:	0c91      	lsrs	r1, r2, #18
 800bec6:	317c      	adds	r1, #124	; 0x7c
 800bec8:	e7d7      	b.n	800be7a <_malloc_r+0x252>
 800beca:	6880      	ldr	r0, [r0, #8]
 800becc:	4287      	cmp	r7, r0
 800bece:	d004      	beq.n	800beda <_malloc_r+0x2b2>
 800bed0:	2603      	movs	r6, #3
 800bed2:	6841      	ldr	r1, [r0, #4]
 800bed4:	43b1      	bics	r1, r6
 800bed6:	4291      	cmp	r1, r2
 800bed8:	d8f7      	bhi.n	800beca <_malloc_r+0x2a2>
 800beda:	68c7      	ldr	r7, [r0, #12]
 800bedc:	e7d8      	b.n	800be90 <_malloc_r+0x268>
 800bede:	2603      	movs	r6, #3
 800bee0:	6861      	ldr	r1, [r4, #4]
 800bee2:	43b1      	bics	r1, r6
 800bee4:	9103      	str	r1, [sp, #12]
 800bee6:	68e6      	ldr	r6, [r4, #12]
 800bee8:	1b49      	subs	r1, r1, r5
 800beea:	290f      	cmp	r1, #15
 800beec:	dd10      	ble.n	800bf10 <_malloc_r+0x2e8>
 800beee:	2201      	movs	r2, #1
 800bef0:	1963      	adds	r3, r4, r5
 800bef2:	4315      	orrs	r5, r2
 800bef4:	6065      	str	r5, [r4, #4]
 800bef6:	68a5      	ldr	r5, [r4, #8]
 800bef8:	430a      	orrs	r2, r1
 800befa:	60ee      	str	r6, [r5, #12]
 800befc:	60b5      	str	r5, [r6, #8]
 800befe:	6143      	str	r3, [r0, #20]
 800bf00:	6103      	str	r3, [r0, #16]
 800bf02:	4814      	ldr	r0, [pc, #80]	; (800bf54 <_malloc_r+0x32c>)
 800bf04:	605a      	str	r2, [r3, #4]
 800bf06:	60d8      	str	r0, [r3, #12]
 800bf08:	6098      	str	r0, [r3, #8]
 800bf0a:	9b03      	ldr	r3, [sp, #12]
 800bf0c:	50e1      	str	r1, [r4, r3]
 800bf0e:	e6eb      	b.n	800bce8 <_malloc_r+0xc0>
 800bf10:	2900      	cmp	r1, #0
 800bf12:	db09      	blt.n	800bf28 <_malloc_r+0x300>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	18e1      	adds	r1, r4, r3
 800bf18:	2301      	movs	r3, #1
 800bf1a:	684a      	ldr	r2, [r1, #4]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	604b      	str	r3, [r1, #4]
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	60de      	str	r6, [r3, #12]
 800bf24:	60b3      	str	r3, [r6, #8]
 800bf26:	e6df      	b.n	800bce8 <_malloc_r+0xc0>
 800bf28:	0034      	movs	r4, r6
 800bf2a:	e739      	b.n	800bda0 <_malloc_r+0x178>
 800bf2c:	2108      	movs	r1, #8
 800bf2e:	4249      	negs	r1, r1
 800bf30:	448c      	add	ip, r1
 800bf32:	4661      	mov	r1, ip
 800bf34:	6889      	ldr	r1, [r1, #8]
 800bf36:	3b01      	subs	r3, #1
 800bf38:	4561      	cmp	r1, ip
 800bf3a:	d100      	bne.n	800bf3e <_malloc_r+0x316>
 800bf3c:	e73a      	b.n	800bdb4 <_malloc_r+0x18c>
 800bf3e:	e740      	b.n	800bdc2 <_malloc_r+0x19a>
 800bf40:	3304      	adds	r3, #4
 800bf42:	0052      	lsls	r2, r2, #1
 800bf44:	420a      	tst	r2, r1
 800bf46:	d0fb      	beq.n	800bf40 <_malloc_r+0x318>
 800bf48:	e724      	b.n	800bd94 <_malloc_r+0x16c>
 800bf4a:	9b02      	ldr	r3, [sp, #8]
 800bf4c:	e7fa      	b.n	800bf44 <_malloc_r+0x31c>
 800bf4e:	46c0      	nop			; (mov r8, r8)
 800bf50:	20000028 	.word	0x20000028
 800bf54:	20000030 	.word	0x20000030
 800bf58:	00000554 	.word	0x00000554
 800bf5c:	20000c84 	.word	0x20000c84
 800bf60:	20000430 	.word	0x20000430
 800bf64:	20000c54 	.word	0x20000c54
 800bf68:	20000c7c 	.word	0x20000c7c
 800bf6c:	20000c80 	.word	0x20000c80
 800bf70:	4934      	ldr	r1, [pc, #208]	; (800c044 <_malloc_r+0x41c>)
 800bf72:	6808      	ldr	r0, [r1, #0]
 800bf74:	3001      	adds	r0, #1
 800bf76:	d140      	bne.n	800bffa <_malloc_r+0x3d2>
 800bf78:	600c      	str	r4, [r1, #0]
 800bf7a:	2107      	movs	r1, #7
 800bf7c:	0026      	movs	r6, r4
 800bf7e:	2300      	movs	r3, #0
 800bf80:	400e      	ands	r6, r1
 800bf82:	420c      	tst	r4, r1
 800bf84:	d002      	beq.n	800bf8c <_malloc_r+0x364>
 800bf86:	3308      	adds	r3, #8
 800bf88:	1b9b      	subs	r3, r3, r6
 800bf8a:	18e4      	adds	r4, r4, r3
 800bf8c:	19e1      	adds	r1, r4, r7
 800bf8e:	9105      	str	r1, [sp, #20]
 800bf90:	9f05      	ldr	r7, [sp, #20]
 800bf92:	9904      	ldr	r1, [sp, #16]
 800bf94:	4017      	ands	r7, r2
 800bf96:	18cb      	adds	r3, r1, r3
 800bf98:	1bdf      	subs	r7, r3, r7
 800bf9a:	4017      	ands	r7, r2
 800bf9c:	0039      	movs	r1, r7
 800bf9e:	9801      	ldr	r0, [sp, #4]
 800bfa0:	f001 fa22 	bl	800d3e8 <_sbrk_r>
 800bfa4:	1c43      	adds	r3, r0, #1
 800bfa6:	d107      	bne.n	800bfb8 <_malloc_r+0x390>
 800bfa8:	1e37      	subs	r7, r6, #0
 800bfaa:	9805      	ldr	r0, [sp, #20]
 800bfac:	d004      	beq.n	800bfb8 <_malloc_r+0x390>
 800bfae:	0030      	movs	r0, r6
 800bfb0:	2700      	movs	r7, #0
 800bfb2:	9b05      	ldr	r3, [sp, #20]
 800bfb4:	3808      	subs	r0, #8
 800bfb6:	1818      	adds	r0, r3, r0
 800bfb8:	4a23      	ldr	r2, [pc, #140]	; (800c048 <_malloc_r+0x420>)
 800bfba:	1b00      	subs	r0, r0, r4
 800bfbc:	6813      	ldr	r3, [r2, #0]
 800bfbe:	19c0      	adds	r0, r0, r7
 800bfc0:	19db      	adds	r3, r3, r7
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	4b21      	ldr	r3, [pc, #132]	; (800c04c <_malloc_r+0x424>)
 800bfc8:	9902      	ldr	r1, [sp, #8]
 800bfca:	4310      	orrs	r0, r2
 800bfcc:	609c      	str	r4, [r3, #8]
 800bfce:	6060      	str	r0, [r4, #4]
 800bfd0:	4299      	cmp	r1, r3
 800bfd2:	d100      	bne.n	800bfd6 <_malloc_r+0x3ae>
 800bfd4:	e73e      	b.n	800be54 <_malloc_r+0x22c>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	2b0f      	cmp	r3, #15
 800bfda:	d813      	bhi.n	800c004 <_malloc_r+0x3dc>
 800bfdc:	6062      	str	r2, [r4, #4]
 800bfde:	2203      	movs	r2, #3
 800bfe0:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <_malloc_r+0x424>)
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	4393      	bics	r3, r2
 800bfe8:	1b59      	subs	r1, r3, r5
 800bfea:	42ab      	cmp	r3, r5
 800bfec:	d301      	bcc.n	800bff2 <_malloc_r+0x3ca>
 800bfee:	290f      	cmp	r1, #15
 800bff0:	dc1f      	bgt.n	800c032 <_malloc_r+0x40a>
 800bff2:	9801      	ldr	r0, [sp, #4]
 800bff4:	f000 f834 	bl	800c060 <__malloc_unlock>
 800bff8:	e623      	b.n	800bc42 <_malloc_r+0x1a>
 800bffa:	4913      	ldr	r1, [pc, #76]	; (800c048 <_malloc_r+0x420>)
 800bffc:	1ba6      	subs	r6, r4, r6
 800bffe:	18f6      	adds	r6, r6, r3
 800c000:	600e      	str	r6, [r1, #0]
 800c002:	e7ba      	b.n	800bf7a <_malloc_r+0x352>
 800c004:	2107      	movs	r1, #7
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	3b0c      	subs	r3, #12
 800c00a:	438b      	bics	r3, r1
 800c00c:	9902      	ldr	r1, [sp, #8]
 800c00e:	6849      	ldr	r1, [r1, #4]
 800c010:	400a      	ands	r2, r1
 800c012:	9902      	ldr	r1, [sp, #8]
 800c014:	431a      	orrs	r2, r3
 800c016:	604a      	str	r2, [r1, #4]
 800c018:	18ca      	adds	r2, r1, r3
 800c01a:	2105      	movs	r1, #5
 800c01c:	6051      	str	r1, [r2, #4]
 800c01e:	6091      	str	r1, [r2, #8]
 800c020:	2b0f      	cmp	r3, #15
 800c022:	d800      	bhi.n	800c026 <_malloc_r+0x3fe>
 800c024:	e716      	b.n	800be54 <_malloc_r+0x22c>
 800c026:	9902      	ldr	r1, [sp, #8]
 800c028:	9801      	ldr	r0, [sp, #4]
 800c02a:	3108      	adds	r1, #8
 800c02c:	f001 fab6 	bl	800d59c <_free_r>
 800c030:	e710      	b.n	800be54 <_malloc_r+0x22c>
 800c032:	2201      	movs	r2, #1
 800c034:	0013      	movs	r3, r2
 800c036:	4805      	ldr	r0, [pc, #20]	; (800c04c <_malloc_r+0x424>)
 800c038:	432b      	orrs	r3, r5
 800c03a:	6884      	ldr	r4, [r0, #8]
 800c03c:	6063      	str	r3, [r4, #4]
 800c03e:	1963      	adds	r3, r4, r5
 800c040:	6083      	str	r3, [r0, #8]
 800c042:	e623      	b.n	800bc8c <_malloc_r+0x64>
 800c044:	20000430 	.word	0x20000430
 800c048:	20000c54 	.word	0x20000c54
 800c04c:	20000028 	.word	0x20000028

0800c050 <__malloc_lock>:
 800c050:	b510      	push	{r4, lr}
 800c052:	4802      	ldr	r0, [pc, #8]	; (800c05c <__malloc_lock+0xc>)
 800c054:	f001 fa1a 	bl	800d48c <__retarget_lock_acquire_recursive>
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	46c0      	nop			; (mov r8, r8)
 800c05c:	20000dc9 	.word	0x20000dc9

0800c060 <__malloc_unlock>:
 800c060:	b510      	push	{r4, lr}
 800c062:	4802      	ldr	r0, [pc, #8]	; (800c06c <__malloc_unlock+0xc>)
 800c064:	f001 fa13 	bl	800d48e <__retarget_lock_release_recursive>
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	20000dc9 	.word	0x20000dc9

0800c070 <sulp>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	0016      	movs	r6, r2
 800c074:	000d      	movs	r5, r1
 800c076:	f002 f9e7 	bl	800e448 <__ulp>
 800c07a:	2e00      	cmp	r6, #0
 800c07c:	d00d      	beq.n	800c09a <sulp+0x2a>
 800c07e:	236b      	movs	r3, #107	; 0x6b
 800c080:	006a      	lsls	r2, r5, #1
 800c082:	0d52      	lsrs	r2, r2, #21
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	2b00      	cmp	r3, #0
 800c088:	dd07      	ble.n	800c09a <sulp+0x2a>
 800c08a:	2400      	movs	r4, #0
 800c08c:	4a03      	ldr	r2, [pc, #12]	; (800c09c <sulp+0x2c>)
 800c08e:	051b      	lsls	r3, r3, #20
 800c090:	189d      	adds	r5, r3, r2
 800c092:	002b      	movs	r3, r5
 800c094:	0022      	movs	r2, r4
 800c096:	f7f5 fae9 	bl	800166c <__aeabi_dmul>
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	3ff00000 	.word	0x3ff00000

0800c0a0 <_strtod_l>:
 800c0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0a2:	b0a1      	sub	sp, #132	; 0x84
 800c0a4:	9219      	str	r2, [sp, #100]	; 0x64
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2600      	movs	r6, #0
 800c0aa:	2700      	movs	r7, #0
 800c0ac:	9004      	str	r0, [sp, #16]
 800c0ae:	9107      	str	r1, [sp, #28]
 800c0b0:	921c      	str	r2, [sp, #112]	; 0x70
 800c0b2:	911b      	str	r1, [sp, #108]	; 0x6c
 800c0b4:	780a      	ldrb	r2, [r1, #0]
 800c0b6:	2a2b      	cmp	r2, #43	; 0x2b
 800c0b8:	d055      	beq.n	800c166 <_strtod_l+0xc6>
 800c0ba:	d841      	bhi.n	800c140 <_strtod_l+0xa0>
 800c0bc:	2a0d      	cmp	r2, #13
 800c0be:	d83b      	bhi.n	800c138 <_strtod_l+0x98>
 800c0c0:	2a08      	cmp	r2, #8
 800c0c2:	d83b      	bhi.n	800c13c <_strtod_l+0x9c>
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	d044      	beq.n	800c152 <_strtod_l+0xb2>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	920f      	str	r2, [sp, #60]	; 0x3c
 800c0cc:	2100      	movs	r1, #0
 800c0ce:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c0d0:	9109      	str	r1, [sp, #36]	; 0x24
 800c0d2:	782a      	ldrb	r2, [r5, #0]
 800c0d4:	2a30      	cmp	r2, #48	; 0x30
 800c0d6:	d000      	beq.n	800c0da <_strtod_l+0x3a>
 800c0d8:	e085      	b.n	800c1e6 <_strtod_l+0x146>
 800c0da:	786a      	ldrb	r2, [r5, #1]
 800c0dc:	3120      	adds	r1, #32
 800c0de:	438a      	bics	r2, r1
 800c0e0:	2a58      	cmp	r2, #88	; 0x58
 800c0e2:	d000      	beq.n	800c0e6 <_strtod_l+0x46>
 800c0e4:	e075      	b.n	800c1d2 <_strtod_l+0x132>
 800c0e6:	9302      	str	r3, [sp, #8]
 800c0e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0ea:	4a97      	ldr	r2, [pc, #604]	; (800c348 <_strtod_l+0x2a8>)
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	ab1c      	add	r3, sp, #112	; 0x70
 800c0f0:	9300      	str	r3, [sp, #0]
 800c0f2:	9804      	ldr	r0, [sp, #16]
 800c0f4:	ab1d      	add	r3, sp, #116	; 0x74
 800c0f6:	a91b      	add	r1, sp, #108	; 0x6c
 800c0f8:	f001 fb6c 	bl	800d7d4 <__gethex>
 800c0fc:	230f      	movs	r3, #15
 800c0fe:	0002      	movs	r2, r0
 800c100:	401a      	ands	r2, r3
 800c102:	0004      	movs	r4, r0
 800c104:	9205      	str	r2, [sp, #20]
 800c106:	4218      	tst	r0, r3
 800c108:	d005      	beq.n	800c116 <_strtod_l+0x76>
 800c10a:	2a06      	cmp	r2, #6
 800c10c:	d12d      	bne.n	800c16a <_strtod_l+0xca>
 800c10e:	1c6b      	adds	r3, r5, #1
 800c110:	931b      	str	r3, [sp, #108]	; 0x6c
 800c112:	2300      	movs	r3, #0
 800c114:	930f      	str	r3, [sp, #60]	; 0x3c
 800c116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d002      	beq.n	800c122 <_strtod_l+0x82>
 800c11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c11e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c120:	6013      	str	r3, [r2, #0]
 800c122:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01b      	beq.n	800c160 <_strtod_l+0xc0>
 800c128:	2380      	movs	r3, #128	; 0x80
 800c12a:	0032      	movs	r2, r6
 800c12c:	061b      	lsls	r3, r3, #24
 800c12e:	18fb      	adds	r3, r7, r3
 800c130:	0010      	movs	r0, r2
 800c132:	0019      	movs	r1, r3
 800c134:	b021      	add	sp, #132	; 0x84
 800c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c138:	2a20      	cmp	r2, #32
 800c13a:	d1c5      	bne.n	800c0c8 <_strtod_l+0x28>
 800c13c:	3101      	adds	r1, #1
 800c13e:	e7b8      	b.n	800c0b2 <_strtod_l+0x12>
 800c140:	2a2d      	cmp	r2, #45	; 0x2d
 800c142:	d1c1      	bne.n	800c0c8 <_strtod_l+0x28>
 800c144:	3a2c      	subs	r2, #44	; 0x2c
 800c146:	920f      	str	r2, [sp, #60]	; 0x3c
 800c148:	1c4a      	adds	r2, r1, #1
 800c14a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c14c:	784a      	ldrb	r2, [r1, #1]
 800c14e:	2a00      	cmp	r2, #0
 800c150:	d1bc      	bne.n	800c0cc <_strtod_l+0x2c>
 800c152:	9b07      	ldr	r3, [sp, #28]
 800c154:	931b      	str	r3, [sp, #108]	; 0x6c
 800c156:	2300      	movs	r3, #0
 800c158:	930f      	str	r3, [sp, #60]	; 0x3c
 800c15a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1dd      	bne.n	800c11c <_strtod_l+0x7c>
 800c160:	0032      	movs	r2, r6
 800c162:	003b      	movs	r3, r7
 800c164:	e7e4      	b.n	800c130 <_strtod_l+0x90>
 800c166:	2200      	movs	r2, #0
 800c168:	e7ed      	b.n	800c146 <_strtod_l+0xa6>
 800c16a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	d007      	beq.n	800c180 <_strtod_l+0xe0>
 800c170:	2135      	movs	r1, #53	; 0x35
 800c172:	a81e      	add	r0, sp, #120	; 0x78
 800c174:	f002 fa59 	bl	800e62a <__copybits>
 800c178:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c17a:	9804      	ldr	r0, [sp, #16]
 800c17c:	f001 fe56 	bl	800de2c <_Bfree>
 800c180:	9805      	ldr	r0, [sp, #20]
 800c182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c184:	3801      	subs	r0, #1
 800c186:	2804      	cmp	r0, #4
 800c188:	d806      	bhi.n	800c198 <_strtod_l+0xf8>
 800c18a:	f7f3 ffc3 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c18e:	0312      	.short	0x0312
 800c190:	1e1c      	.short	0x1e1c
 800c192:	12          	.byte	0x12
 800c193:	00          	.byte	0x00
 800c194:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c196:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c198:	05e4      	lsls	r4, r4, #23
 800c19a:	d502      	bpl.n	800c1a2 <_strtod_l+0x102>
 800c19c:	2380      	movs	r3, #128	; 0x80
 800c19e:	061b      	lsls	r3, r3, #24
 800c1a0:	431f      	orrs	r7, r3
 800c1a2:	4b6a      	ldr	r3, [pc, #424]	; (800c34c <_strtod_l+0x2ac>)
 800c1a4:	423b      	tst	r3, r7
 800c1a6:	d1b6      	bne.n	800c116 <_strtod_l+0x76>
 800c1a8:	f001 f944 	bl	800d434 <__errno>
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	6003      	str	r3, [r0, #0]
 800c1b0:	e7b1      	b.n	800c116 <_strtod_l+0x76>
 800c1b2:	4967      	ldr	r1, [pc, #412]	; (800c350 <_strtod_l+0x2b0>)
 800c1b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c1b6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c1b8:	400a      	ands	r2, r1
 800c1ba:	4966      	ldr	r1, [pc, #408]	; (800c354 <_strtod_l+0x2b4>)
 800c1bc:	185b      	adds	r3, r3, r1
 800c1be:	051b      	lsls	r3, r3, #20
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	0017      	movs	r7, r2
 800c1c4:	e7e8      	b.n	800c198 <_strtod_l+0xf8>
 800c1c6:	4f61      	ldr	r7, [pc, #388]	; (800c34c <_strtod_l+0x2ac>)
 800c1c8:	e7e6      	b.n	800c198 <_strtod_l+0xf8>
 800c1ca:	2601      	movs	r6, #1
 800c1cc:	4f62      	ldr	r7, [pc, #392]	; (800c358 <_strtod_l+0x2b8>)
 800c1ce:	4276      	negs	r6, r6
 800c1d0:	e7e2      	b.n	800c198 <_strtod_l+0xf8>
 800c1d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c1d8:	785b      	ldrb	r3, [r3, #1]
 800c1da:	2b30      	cmp	r3, #48	; 0x30
 800c1dc:	d0f9      	beq.n	800c1d2 <_strtod_l+0x132>
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d099      	beq.n	800c116 <_strtod_l+0x76>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	220a      	movs	r2, #10
 800c1ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1ec:	950d      	str	r5, [sp, #52]	; 0x34
 800c1ee:	9310      	str	r3, [sp, #64]	; 0x40
 800c1f0:	9508      	str	r5, [sp, #32]
 800c1f2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c1f4:	7804      	ldrb	r4, [r0, #0]
 800c1f6:	0023      	movs	r3, r4
 800c1f8:	3b30      	subs	r3, #48	; 0x30
 800c1fa:	b2d9      	uxtb	r1, r3
 800c1fc:	2909      	cmp	r1, #9
 800c1fe:	d927      	bls.n	800c250 <_strtod_l+0x1b0>
 800c200:	2201      	movs	r2, #1
 800c202:	4956      	ldr	r1, [pc, #344]	; (800c35c <_strtod_l+0x2bc>)
 800c204:	f001 f838 	bl	800d278 <strncmp>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d031      	beq.n	800c270 <_strtod_l+0x1d0>
 800c20c:	2000      	movs	r0, #0
 800c20e:	0023      	movs	r3, r4
 800c210:	4684      	mov	ip, r0
 800c212:	9a08      	ldr	r2, [sp, #32]
 800c214:	900c      	str	r0, [sp, #48]	; 0x30
 800c216:	9205      	str	r2, [sp, #20]
 800c218:	2220      	movs	r2, #32
 800c21a:	0019      	movs	r1, r3
 800c21c:	4391      	bics	r1, r2
 800c21e:	000a      	movs	r2, r1
 800c220:	2100      	movs	r1, #0
 800c222:	9106      	str	r1, [sp, #24]
 800c224:	2a45      	cmp	r2, #69	; 0x45
 800c226:	d000      	beq.n	800c22a <_strtod_l+0x18a>
 800c228:	e0c2      	b.n	800c3b0 <_strtod_l+0x310>
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c22e:	4303      	orrs	r3, r0
 800c230:	4313      	orrs	r3, r2
 800c232:	428b      	cmp	r3, r1
 800c234:	d08d      	beq.n	800c152 <_strtod_l+0xb2>
 800c236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c238:	9307      	str	r3, [sp, #28]
 800c23a:	3301      	adds	r3, #1
 800c23c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c23e:	9b07      	ldr	r3, [sp, #28]
 800c240:	785b      	ldrb	r3, [r3, #1]
 800c242:	2b2b      	cmp	r3, #43	; 0x2b
 800c244:	d071      	beq.n	800c32a <_strtod_l+0x28a>
 800c246:	000c      	movs	r4, r1
 800c248:	2b2d      	cmp	r3, #45	; 0x2d
 800c24a:	d174      	bne.n	800c336 <_strtod_l+0x296>
 800c24c:	2401      	movs	r4, #1
 800c24e:	e06d      	b.n	800c32c <_strtod_l+0x28c>
 800c250:	9908      	ldr	r1, [sp, #32]
 800c252:	2908      	cmp	r1, #8
 800c254:	dc09      	bgt.n	800c26a <_strtod_l+0x1ca>
 800c256:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c258:	4351      	muls	r1, r2
 800c25a:	185b      	adds	r3, r3, r1
 800c25c:	930d      	str	r3, [sp, #52]	; 0x34
 800c25e:	9b08      	ldr	r3, [sp, #32]
 800c260:	3001      	adds	r0, #1
 800c262:	3301      	adds	r3, #1
 800c264:	9308      	str	r3, [sp, #32]
 800c266:	901b      	str	r0, [sp, #108]	; 0x6c
 800c268:	e7c3      	b.n	800c1f2 <_strtod_l+0x152>
 800c26a:	4355      	muls	r5, r2
 800c26c:	195d      	adds	r5, r3, r5
 800c26e:	e7f6      	b.n	800c25e <_strtod_l+0x1be>
 800c270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	921b      	str	r2, [sp, #108]	; 0x6c
 800c276:	9a08      	ldr	r2, [sp, #32]
 800c278:	785b      	ldrb	r3, [r3, #1]
 800c27a:	2a00      	cmp	r2, #0
 800c27c:	d03a      	beq.n	800c2f4 <_strtod_l+0x254>
 800c27e:	900c      	str	r0, [sp, #48]	; 0x30
 800c280:	9205      	str	r2, [sp, #20]
 800c282:	001a      	movs	r2, r3
 800c284:	3a30      	subs	r2, #48	; 0x30
 800c286:	2a09      	cmp	r2, #9
 800c288:	d912      	bls.n	800c2b0 <_strtod_l+0x210>
 800c28a:	2201      	movs	r2, #1
 800c28c:	4694      	mov	ip, r2
 800c28e:	e7c3      	b.n	800c218 <_strtod_l+0x178>
 800c290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c292:	3001      	adds	r0, #1
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	921b      	str	r2, [sp, #108]	; 0x6c
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	2b30      	cmp	r3, #48	; 0x30
 800c29c:	d0f8      	beq.n	800c290 <_strtod_l+0x1f0>
 800c29e:	001a      	movs	r2, r3
 800c2a0:	3a31      	subs	r2, #49	; 0x31
 800c2a2:	2a08      	cmp	r2, #8
 800c2a4:	d83c      	bhi.n	800c320 <_strtod_l+0x280>
 800c2a6:	900c      	str	r0, [sp, #48]	; 0x30
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c2ac:	9005      	str	r0, [sp, #20]
 800c2ae:	9210      	str	r2, [sp, #64]	; 0x40
 800c2b0:	001a      	movs	r2, r3
 800c2b2:	1c41      	adds	r1, r0, #1
 800c2b4:	3a30      	subs	r2, #48	; 0x30
 800c2b6:	2b30      	cmp	r3, #48	; 0x30
 800c2b8:	d016      	beq.n	800c2e8 <_strtod_l+0x248>
 800c2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2bc:	185b      	adds	r3, r3, r1
 800c2be:	930c      	str	r3, [sp, #48]	; 0x30
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	210a      	movs	r1, #10
 800c2c4:	469c      	mov	ip, r3
 800c2c6:	4484      	add	ip, r0
 800c2c8:	4563      	cmp	r3, ip
 800c2ca:	d115      	bne.n	800c2f8 <_strtod_l+0x258>
 800c2cc:	9905      	ldr	r1, [sp, #20]
 800c2ce:	9b05      	ldr	r3, [sp, #20]
 800c2d0:	3101      	adds	r1, #1
 800c2d2:	1809      	adds	r1, r1, r0
 800c2d4:	181b      	adds	r3, r3, r0
 800c2d6:	9105      	str	r1, [sp, #20]
 800c2d8:	2b08      	cmp	r3, #8
 800c2da:	dc19      	bgt.n	800c310 <_strtod_l+0x270>
 800c2dc:	230a      	movs	r3, #10
 800c2de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c2e0:	434b      	muls	r3, r1
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	18d3      	adds	r3, r2, r3
 800c2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2ea:	0008      	movs	r0, r1
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2f0:	785b      	ldrb	r3, [r3, #1]
 800c2f2:	e7c6      	b.n	800c282 <_strtod_l+0x1e2>
 800c2f4:	9808      	ldr	r0, [sp, #32]
 800c2f6:	e7d0      	b.n	800c29a <_strtod_l+0x1fa>
 800c2f8:	1c5c      	adds	r4, r3, #1
 800c2fa:	2b08      	cmp	r3, #8
 800c2fc:	dc04      	bgt.n	800c308 <_strtod_l+0x268>
 800c2fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c300:	434b      	muls	r3, r1
 800c302:	930d      	str	r3, [sp, #52]	; 0x34
 800c304:	0023      	movs	r3, r4
 800c306:	e7df      	b.n	800c2c8 <_strtod_l+0x228>
 800c308:	2c10      	cmp	r4, #16
 800c30a:	dcfb      	bgt.n	800c304 <_strtod_l+0x264>
 800c30c:	434d      	muls	r5, r1
 800c30e:	e7f9      	b.n	800c304 <_strtod_l+0x264>
 800c310:	9b05      	ldr	r3, [sp, #20]
 800c312:	2100      	movs	r1, #0
 800c314:	2b10      	cmp	r3, #16
 800c316:	dce7      	bgt.n	800c2e8 <_strtod_l+0x248>
 800c318:	230a      	movs	r3, #10
 800c31a:	435d      	muls	r5, r3
 800c31c:	1955      	adds	r5, r2, r5
 800c31e:	e7e3      	b.n	800c2e8 <_strtod_l+0x248>
 800c320:	2200      	movs	r2, #0
 800c322:	920c      	str	r2, [sp, #48]	; 0x30
 800c324:	9205      	str	r2, [sp, #20]
 800c326:	3201      	adds	r2, #1
 800c328:	e7b0      	b.n	800c28c <_strtod_l+0x1ec>
 800c32a:	2400      	movs	r4, #0
 800c32c:	9b07      	ldr	r3, [sp, #28]
 800c32e:	3302      	adds	r3, #2
 800c330:	931b      	str	r3, [sp, #108]	; 0x6c
 800c332:	9b07      	ldr	r3, [sp, #28]
 800c334:	789b      	ldrb	r3, [r3, #2]
 800c336:	001a      	movs	r2, r3
 800c338:	3a30      	subs	r2, #48	; 0x30
 800c33a:	2a09      	cmp	r2, #9
 800c33c:	d914      	bls.n	800c368 <_strtod_l+0x2c8>
 800c33e:	9a07      	ldr	r2, [sp, #28]
 800c340:	921b      	str	r2, [sp, #108]	; 0x6c
 800c342:	2200      	movs	r2, #0
 800c344:	e033      	b.n	800c3ae <_strtod_l+0x30e>
 800c346:	46c0      	nop			; (mov r8, r8)
 800c348:	08015950 	.word	0x08015950
 800c34c:	7ff00000 	.word	0x7ff00000
 800c350:	ffefffff 	.word	0xffefffff
 800c354:	00000433 	.word	0x00000433
 800c358:	7fffffff 	.word	0x7fffffff
 800c35c:	0801594c 	.word	0x0801594c
 800c360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	921b      	str	r2, [sp, #108]	; 0x6c
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	2b30      	cmp	r3, #48	; 0x30
 800c36a:	d0f9      	beq.n	800c360 <_strtod_l+0x2c0>
 800c36c:	2200      	movs	r2, #0
 800c36e:	9206      	str	r2, [sp, #24]
 800c370:	001a      	movs	r2, r3
 800c372:	3a31      	subs	r2, #49	; 0x31
 800c374:	2a08      	cmp	r2, #8
 800c376:	d81b      	bhi.n	800c3b0 <_strtod_l+0x310>
 800c378:	3b30      	subs	r3, #48	; 0x30
 800c37a:	930e      	str	r3, [sp, #56]	; 0x38
 800c37c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c37e:	9306      	str	r3, [sp, #24]
 800c380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c382:	1c59      	adds	r1, r3, #1
 800c384:	911b      	str	r1, [sp, #108]	; 0x6c
 800c386:	785b      	ldrb	r3, [r3, #1]
 800c388:	001a      	movs	r2, r3
 800c38a:	3a30      	subs	r2, #48	; 0x30
 800c38c:	2a09      	cmp	r2, #9
 800c38e:	d93a      	bls.n	800c406 <_strtod_l+0x366>
 800c390:	9a06      	ldr	r2, [sp, #24]
 800c392:	1a8a      	subs	r2, r1, r2
 800c394:	49b2      	ldr	r1, [pc, #712]	; (800c660 <_strtod_l+0x5c0>)
 800c396:	9106      	str	r1, [sp, #24]
 800c398:	2a08      	cmp	r2, #8
 800c39a:	dc04      	bgt.n	800c3a6 <_strtod_l+0x306>
 800c39c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c39e:	9206      	str	r2, [sp, #24]
 800c3a0:	428a      	cmp	r2, r1
 800c3a2:	dd00      	ble.n	800c3a6 <_strtod_l+0x306>
 800c3a4:	9106      	str	r1, [sp, #24]
 800c3a6:	2c00      	cmp	r4, #0
 800c3a8:	d002      	beq.n	800c3b0 <_strtod_l+0x310>
 800c3aa:	9a06      	ldr	r2, [sp, #24]
 800c3ac:	4252      	negs	r2, r2
 800c3ae:	9206      	str	r2, [sp, #24]
 800c3b0:	9a05      	ldr	r2, [sp, #20]
 800c3b2:	2a00      	cmp	r2, #0
 800c3b4:	d14d      	bne.n	800c452 <_strtod_l+0x3b2>
 800c3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b8:	4310      	orrs	r0, r2
 800c3ba:	d000      	beq.n	800c3be <_strtod_l+0x31e>
 800c3bc:	e6ab      	b.n	800c116 <_strtod_l+0x76>
 800c3be:	4662      	mov	r2, ip
 800c3c0:	2a00      	cmp	r2, #0
 800c3c2:	d000      	beq.n	800c3c6 <_strtod_l+0x326>
 800c3c4:	e6c5      	b.n	800c152 <_strtod_l+0xb2>
 800c3c6:	2b69      	cmp	r3, #105	; 0x69
 800c3c8:	d027      	beq.n	800c41a <_strtod_l+0x37a>
 800c3ca:	dc23      	bgt.n	800c414 <_strtod_l+0x374>
 800c3cc:	2b49      	cmp	r3, #73	; 0x49
 800c3ce:	d024      	beq.n	800c41a <_strtod_l+0x37a>
 800c3d0:	2b4e      	cmp	r3, #78	; 0x4e
 800c3d2:	d000      	beq.n	800c3d6 <_strtod_l+0x336>
 800c3d4:	e6bd      	b.n	800c152 <_strtod_l+0xb2>
 800c3d6:	49a3      	ldr	r1, [pc, #652]	; (800c664 <_strtod_l+0x5c4>)
 800c3d8:	a81b      	add	r0, sp, #108	; 0x6c
 800c3da:	f001 fc31 	bl	800dc40 <__match>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d100      	bne.n	800c3e4 <_strtod_l+0x344>
 800c3e2:	e6b6      	b.n	800c152 <_strtod_l+0xb2>
 800c3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b28      	cmp	r3, #40	; 0x28
 800c3ea:	d12c      	bne.n	800c446 <_strtod_l+0x3a6>
 800c3ec:	499e      	ldr	r1, [pc, #632]	; (800c668 <_strtod_l+0x5c8>)
 800c3ee:	aa1e      	add	r2, sp, #120	; 0x78
 800c3f0:	a81b      	add	r0, sp, #108	; 0x6c
 800c3f2:	f001 fc39 	bl	800dc68 <__hexnan>
 800c3f6:	2805      	cmp	r0, #5
 800c3f8:	d125      	bne.n	800c446 <_strtod_l+0x3a6>
 800c3fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c3fc:	4a9b      	ldr	r2, [pc, #620]	; (800c66c <_strtod_l+0x5cc>)
 800c3fe:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c400:	431a      	orrs	r2, r3
 800c402:	0017      	movs	r7, r2
 800c404:	e687      	b.n	800c116 <_strtod_l+0x76>
 800c406:	220a      	movs	r2, #10
 800c408:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c40a:	434a      	muls	r2, r1
 800c40c:	18d2      	adds	r2, r2, r3
 800c40e:	3a30      	subs	r2, #48	; 0x30
 800c410:	920e      	str	r2, [sp, #56]	; 0x38
 800c412:	e7b5      	b.n	800c380 <_strtod_l+0x2e0>
 800c414:	2b6e      	cmp	r3, #110	; 0x6e
 800c416:	d0de      	beq.n	800c3d6 <_strtod_l+0x336>
 800c418:	e69b      	b.n	800c152 <_strtod_l+0xb2>
 800c41a:	4995      	ldr	r1, [pc, #596]	; (800c670 <_strtod_l+0x5d0>)
 800c41c:	a81b      	add	r0, sp, #108	; 0x6c
 800c41e:	f001 fc0f 	bl	800dc40 <__match>
 800c422:	2800      	cmp	r0, #0
 800c424:	d100      	bne.n	800c428 <_strtod_l+0x388>
 800c426:	e694      	b.n	800c152 <_strtod_l+0xb2>
 800c428:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c42a:	4992      	ldr	r1, [pc, #584]	; (800c674 <_strtod_l+0x5d4>)
 800c42c:	3b01      	subs	r3, #1
 800c42e:	a81b      	add	r0, sp, #108	; 0x6c
 800c430:	931b      	str	r3, [sp, #108]	; 0x6c
 800c432:	f001 fc05 	bl	800dc40 <__match>
 800c436:	2800      	cmp	r0, #0
 800c438:	d102      	bne.n	800c440 <_strtod_l+0x3a0>
 800c43a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c43c:	3301      	adds	r3, #1
 800c43e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c440:	2600      	movs	r6, #0
 800c442:	4f8a      	ldr	r7, [pc, #552]	; (800c66c <_strtod_l+0x5cc>)
 800c444:	e667      	b.n	800c116 <_strtod_l+0x76>
 800c446:	488c      	ldr	r0, [pc, #560]	; (800c678 <_strtod_l+0x5d8>)
 800c448:	f001 f836 	bl	800d4b8 <nan>
 800c44c:	0006      	movs	r6, r0
 800c44e:	000f      	movs	r7, r1
 800c450:	e661      	b.n	800c116 <_strtod_l+0x76>
 800c452:	9b06      	ldr	r3, [sp, #24]
 800c454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c456:	1a9b      	subs	r3, r3, r2
 800c458:	9309      	str	r3, [sp, #36]	; 0x24
 800c45a:	9b08      	ldr	r3, [sp, #32]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <_strtod_l+0x3c4>
 800c460:	9b05      	ldr	r3, [sp, #20]
 800c462:	9308      	str	r3, [sp, #32]
 800c464:	9c05      	ldr	r4, [sp, #20]
 800c466:	2c10      	cmp	r4, #16
 800c468:	dd00      	ble.n	800c46c <_strtod_l+0x3cc>
 800c46a:	2410      	movs	r4, #16
 800c46c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c46e:	f7f5 ffc5 	bl	80023fc <__aeabi_ui2d>
 800c472:	9b05      	ldr	r3, [sp, #20]
 800c474:	0006      	movs	r6, r0
 800c476:	000f      	movs	r7, r1
 800c478:	2b09      	cmp	r3, #9
 800c47a:	dd15      	ble.n	800c4a8 <_strtod_l+0x408>
 800c47c:	0022      	movs	r2, r4
 800c47e:	4b7f      	ldr	r3, [pc, #508]	; (800c67c <_strtod_l+0x5dc>)
 800c480:	3a09      	subs	r2, #9
 800c482:	00d2      	lsls	r2, r2, #3
 800c484:	189b      	adds	r3, r3, r2
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	f7f5 f8ef 	bl	800166c <__aeabi_dmul>
 800c48e:	0006      	movs	r6, r0
 800c490:	0028      	movs	r0, r5
 800c492:	000f      	movs	r7, r1
 800c494:	f7f5 ffb2 	bl	80023fc <__aeabi_ui2d>
 800c498:	0002      	movs	r2, r0
 800c49a:	000b      	movs	r3, r1
 800c49c:	0030      	movs	r0, r6
 800c49e:	0039      	movs	r1, r7
 800c4a0:	f7f4 f98a 	bl	80007b8 <__aeabi_dadd>
 800c4a4:	0006      	movs	r6, r0
 800c4a6:	000f      	movs	r7, r1
 800c4a8:	9b05      	ldr	r3, [sp, #20]
 800c4aa:	2b0f      	cmp	r3, #15
 800c4ac:	dc39      	bgt.n	800c522 <_strtod_l+0x482>
 800c4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d100      	bne.n	800c4b6 <_strtod_l+0x416>
 800c4b4:	e62f      	b.n	800c116 <_strtod_l+0x76>
 800c4b6:	dd24      	ble.n	800c502 <_strtod_l+0x462>
 800c4b8:	2b16      	cmp	r3, #22
 800c4ba:	dc09      	bgt.n	800c4d0 <_strtod_l+0x430>
 800c4bc:	496f      	ldr	r1, [pc, #444]	; (800c67c <_strtod_l+0x5dc>)
 800c4be:	00db      	lsls	r3, r3, #3
 800c4c0:	18c9      	adds	r1, r1, r3
 800c4c2:	0032      	movs	r2, r6
 800c4c4:	6808      	ldr	r0, [r1, #0]
 800c4c6:	6849      	ldr	r1, [r1, #4]
 800c4c8:	003b      	movs	r3, r7
 800c4ca:	f7f5 f8cf 	bl	800166c <__aeabi_dmul>
 800c4ce:	e7bd      	b.n	800c44c <_strtod_l+0x3ac>
 800c4d0:	2325      	movs	r3, #37	; 0x25
 800c4d2:	9a05      	ldr	r2, [sp, #20]
 800c4d4:	1a9b      	subs	r3, r3, r2
 800c4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	db22      	blt.n	800c522 <_strtod_l+0x482>
 800c4dc:	240f      	movs	r4, #15
 800c4de:	9b05      	ldr	r3, [sp, #20]
 800c4e0:	4d66      	ldr	r5, [pc, #408]	; (800c67c <_strtod_l+0x5dc>)
 800c4e2:	1ae4      	subs	r4, r4, r3
 800c4e4:	00e1      	lsls	r1, r4, #3
 800c4e6:	1869      	adds	r1, r5, r1
 800c4e8:	0032      	movs	r2, r6
 800c4ea:	6808      	ldr	r0, [r1, #0]
 800c4ec:	6849      	ldr	r1, [r1, #4]
 800c4ee:	003b      	movs	r3, r7
 800c4f0:	f7f5 f8bc 	bl	800166c <__aeabi_dmul>
 800c4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f6:	1b1c      	subs	r4, r3, r4
 800c4f8:	00e4      	lsls	r4, r4, #3
 800c4fa:	192d      	adds	r5, r5, r4
 800c4fc:	682a      	ldr	r2, [r5, #0]
 800c4fe:	686b      	ldr	r3, [r5, #4]
 800c500:	e7e3      	b.n	800c4ca <_strtod_l+0x42a>
 800c502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c504:	3316      	adds	r3, #22
 800c506:	db0c      	blt.n	800c522 <_strtod_l+0x482>
 800c508:	9906      	ldr	r1, [sp, #24]
 800c50a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c50c:	4b5b      	ldr	r3, [pc, #364]	; (800c67c <_strtod_l+0x5dc>)
 800c50e:	1a52      	subs	r2, r2, r1
 800c510:	00d2      	lsls	r2, r2, #3
 800c512:	189b      	adds	r3, r3, r2
 800c514:	0030      	movs	r0, r6
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	0039      	movs	r1, r7
 800c51c:	f7f4 fcac 	bl	8000e78 <__aeabi_ddiv>
 800c520:	e794      	b.n	800c44c <_strtod_l+0x3ac>
 800c522:	9b05      	ldr	r3, [sp, #20]
 800c524:	1b1c      	subs	r4, r3, r4
 800c526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c528:	18e4      	adds	r4, r4, r3
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	dd72      	ble.n	800c614 <_strtod_l+0x574>
 800c52e:	220f      	movs	r2, #15
 800c530:	0023      	movs	r3, r4
 800c532:	4013      	ands	r3, r2
 800c534:	4214      	tst	r4, r2
 800c536:	d00a      	beq.n	800c54e <_strtod_l+0x4ae>
 800c538:	4950      	ldr	r1, [pc, #320]	; (800c67c <_strtod_l+0x5dc>)
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	18c9      	adds	r1, r1, r3
 800c53e:	0032      	movs	r2, r6
 800c540:	6808      	ldr	r0, [r1, #0]
 800c542:	6849      	ldr	r1, [r1, #4]
 800c544:	003b      	movs	r3, r7
 800c546:	f7f5 f891 	bl	800166c <__aeabi_dmul>
 800c54a:	0006      	movs	r6, r0
 800c54c:	000f      	movs	r7, r1
 800c54e:	230f      	movs	r3, #15
 800c550:	439c      	bics	r4, r3
 800c552:	d04a      	beq.n	800c5ea <_strtod_l+0x54a>
 800c554:	3326      	adds	r3, #38	; 0x26
 800c556:	33ff      	adds	r3, #255	; 0xff
 800c558:	429c      	cmp	r4, r3
 800c55a:	dd22      	ble.n	800c5a2 <_strtod_l+0x502>
 800c55c:	2300      	movs	r3, #0
 800c55e:	9305      	str	r3, [sp, #20]
 800c560:	9306      	str	r3, [sp, #24]
 800c562:	930d      	str	r3, [sp, #52]	; 0x34
 800c564:	9308      	str	r3, [sp, #32]
 800c566:	2322      	movs	r3, #34	; 0x22
 800c568:	2600      	movs	r6, #0
 800c56a:	9a04      	ldr	r2, [sp, #16]
 800c56c:	4f3f      	ldr	r7, [pc, #252]	; (800c66c <_strtod_l+0x5cc>)
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c572:	42b3      	cmp	r3, r6
 800c574:	d100      	bne.n	800c578 <_strtod_l+0x4d8>
 800c576:	e5ce      	b.n	800c116 <_strtod_l+0x76>
 800c578:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c57a:	9804      	ldr	r0, [sp, #16]
 800c57c:	f001 fc56 	bl	800de2c <_Bfree>
 800c580:	9908      	ldr	r1, [sp, #32]
 800c582:	9804      	ldr	r0, [sp, #16]
 800c584:	f001 fc52 	bl	800de2c <_Bfree>
 800c588:	9906      	ldr	r1, [sp, #24]
 800c58a:	9804      	ldr	r0, [sp, #16]
 800c58c:	f001 fc4e 	bl	800de2c <_Bfree>
 800c590:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c592:	9804      	ldr	r0, [sp, #16]
 800c594:	f001 fc4a 	bl	800de2c <_Bfree>
 800c598:	9905      	ldr	r1, [sp, #20]
 800c59a:	9804      	ldr	r0, [sp, #16]
 800c59c:	f001 fc46 	bl	800de2c <_Bfree>
 800c5a0:	e5b9      	b.n	800c116 <_strtod_l+0x76>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	0030      	movs	r0, r6
 800c5a6:	0039      	movs	r1, r7
 800c5a8:	4d35      	ldr	r5, [pc, #212]	; (800c680 <_strtod_l+0x5e0>)
 800c5aa:	1124      	asrs	r4, r4, #4
 800c5ac:	9307      	str	r3, [sp, #28]
 800c5ae:	2c01      	cmp	r4, #1
 800c5b0:	dc1e      	bgt.n	800c5f0 <_strtod_l+0x550>
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <_strtod_l+0x51a>
 800c5b6:	0006      	movs	r6, r0
 800c5b8:	000f      	movs	r7, r1
 800c5ba:	4b32      	ldr	r3, [pc, #200]	; (800c684 <_strtod_l+0x5e4>)
 800c5bc:	9a07      	ldr	r2, [sp, #28]
 800c5be:	18ff      	adds	r7, r7, r3
 800c5c0:	4b2f      	ldr	r3, [pc, #188]	; (800c680 <_strtod_l+0x5e0>)
 800c5c2:	00d2      	lsls	r2, r2, #3
 800c5c4:	189d      	adds	r5, r3, r2
 800c5c6:	6828      	ldr	r0, [r5, #0]
 800c5c8:	6869      	ldr	r1, [r5, #4]
 800c5ca:	0032      	movs	r2, r6
 800c5cc:	003b      	movs	r3, r7
 800c5ce:	f7f5 f84d 	bl	800166c <__aeabi_dmul>
 800c5d2:	4b26      	ldr	r3, [pc, #152]	; (800c66c <_strtod_l+0x5cc>)
 800c5d4:	4a2c      	ldr	r2, [pc, #176]	; (800c688 <_strtod_l+0x5e8>)
 800c5d6:	0006      	movs	r6, r0
 800c5d8:	400b      	ands	r3, r1
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d8be      	bhi.n	800c55c <_strtod_l+0x4bc>
 800c5de:	4a2b      	ldr	r2, [pc, #172]	; (800c68c <_strtod_l+0x5ec>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d913      	bls.n	800c60c <_strtod_l+0x56c>
 800c5e4:	2601      	movs	r6, #1
 800c5e6:	4f2a      	ldr	r7, [pc, #168]	; (800c690 <_strtod_l+0x5f0>)
 800c5e8:	4276      	negs	r6, r6
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9307      	str	r3, [sp, #28]
 800c5ee:	e088      	b.n	800c702 <_strtod_l+0x662>
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	4214      	tst	r4, r2
 800c5f4:	d004      	beq.n	800c600 <_strtod_l+0x560>
 800c5f6:	682a      	ldr	r2, [r5, #0]
 800c5f8:	686b      	ldr	r3, [r5, #4]
 800c5fa:	f7f5 f837 	bl	800166c <__aeabi_dmul>
 800c5fe:	2301      	movs	r3, #1
 800c600:	9a07      	ldr	r2, [sp, #28]
 800c602:	1064      	asrs	r4, r4, #1
 800c604:	3201      	adds	r2, #1
 800c606:	9207      	str	r2, [sp, #28]
 800c608:	3508      	adds	r5, #8
 800c60a:	e7d0      	b.n	800c5ae <_strtod_l+0x50e>
 800c60c:	23d4      	movs	r3, #212	; 0xd4
 800c60e:	049b      	lsls	r3, r3, #18
 800c610:	18cf      	adds	r7, r1, r3
 800c612:	e7ea      	b.n	800c5ea <_strtod_l+0x54a>
 800c614:	2c00      	cmp	r4, #0
 800c616:	d0e8      	beq.n	800c5ea <_strtod_l+0x54a>
 800c618:	4264      	negs	r4, r4
 800c61a:	230f      	movs	r3, #15
 800c61c:	0022      	movs	r2, r4
 800c61e:	401a      	ands	r2, r3
 800c620:	421c      	tst	r4, r3
 800c622:	d00a      	beq.n	800c63a <_strtod_l+0x59a>
 800c624:	4b15      	ldr	r3, [pc, #84]	; (800c67c <_strtod_l+0x5dc>)
 800c626:	00d2      	lsls	r2, r2, #3
 800c628:	189b      	adds	r3, r3, r2
 800c62a:	0030      	movs	r0, r6
 800c62c:	681a      	ldr	r2, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	0039      	movs	r1, r7
 800c632:	f7f4 fc21 	bl	8000e78 <__aeabi_ddiv>
 800c636:	0006      	movs	r6, r0
 800c638:	000f      	movs	r7, r1
 800c63a:	1124      	asrs	r4, r4, #4
 800c63c:	d0d5      	beq.n	800c5ea <_strtod_l+0x54a>
 800c63e:	2c1f      	cmp	r4, #31
 800c640:	dd28      	ble.n	800c694 <_strtod_l+0x5f4>
 800c642:	2300      	movs	r3, #0
 800c644:	9305      	str	r3, [sp, #20]
 800c646:	9306      	str	r3, [sp, #24]
 800c648:	930d      	str	r3, [sp, #52]	; 0x34
 800c64a:	9308      	str	r3, [sp, #32]
 800c64c:	2322      	movs	r3, #34	; 0x22
 800c64e:	9a04      	ldr	r2, [sp, #16]
 800c650:	2600      	movs	r6, #0
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c656:	2700      	movs	r7, #0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d18d      	bne.n	800c578 <_strtod_l+0x4d8>
 800c65c:	e55b      	b.n	800c116 <_strtod_l+0x76>
 800c65e:	46c0      	nop			; (mov r8, r8)
 800c660:	00004e1f 	.word	0x00004e1f
 800c664:	08015c81 	.word	0x08015c81
 800c668:	08015964 	.word	0x08015964
 800c66c:	7ff00000 	.word	0x7ff00000
 800c670:	08015c79 	.word	0x08015c79
 800c674:	08015d2f 	.word	0x08015d2f
 800c678:	08015d2b 	.word	0x08015d2b
 800c67c:	08015ba0 	.word	0x08015ba0
 800c680:	08015b78 	.word	0x08015b78
 800c684:	fcb00000 	.word	0xfcb00000
 800c688:	7ca00000 	.word	0x7ca00000
 800c68c:	7c900000 	.word	0x7c900000
 800c690:	7fefffff 	.word	0x7fefffff
 800c694:	2310      	movs	r3, #16
 800c696:	0022      	movs	r2, r4
 800c698:	401a      	ands	r2, r3
 800c69a:	9207      	str	r2, [sp, #28]
 800c69c:	421c      	tst	r4, r3
 800c69e:	d001      	beq.n	800c6a4 <_strtod_l+0x604>
 800c6a0:	335a      	adds	r3, #90	; 0x5a
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	0030      	movs	r0, r6
 800c6a6:	0039      	movs	r1, r7
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	4dc4      	ldr	r5, [pc, #784]	; (800c9bc <_strtod_l+0x91c>)
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	4214      	tst	r4, r2
 800c6b0:	d004      	beq.n	800c6bc <_strtod_l+0x61c>
 800c6b2:	682a      	ldr	r2, [r5, #0]
 800c6b4:	686b      	ldr	r3, [r5, #4]
 800c6b6:	f7f4 ffd9 	bl	800166c <__aeabi_dmul>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	1064      	asrs	r4, r4, #1
 800c6be:	3508      	adds	r5, #8
 800c6c0:	2c00      	cmp	r4, #0
 800c6c2:	d1f3      	bne.n	800c6ac <_strtod_l+0x60c>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <_strtod_l+0x62c>
 800c6c8:	0006      	movs	r6, r0
 800c6ca:	000f      	movs	r7, r1
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00f      	beq.n	800c6f2 <_strtod_l+0x652>
 800c6d2:	236b      	movs	r3, #107	; 0x6b
 800c6d4:	007a      	lsls	r2, r7, #1
 800c6d6:	0d52      	lsrs	r2, r2, #21
 800c6d8:	0039      	movs	r1, r7
 800c6da:	1a9b      	subs	r3, r3, r2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd08      	ble.n	800c6f2 <_strtod_l+0x652>
 800c6e0:	2b1f      	cmp	r3, #31
 800c6e2:	dc00      	bgt.n	800c6e6 <_strtod_l+0x646>
 800c6e4:	e121      	b.n	800c92a <_strtod_l+0x88a>
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	2b34      	cmp	r3, #52	; 0x34
 800c6ea:	dc00      	bgt.n	800c6ee <_strtod_l+0x64e>
 800c6ec:	e116      	b.n	800c91c <_strtod_l+0x87c>
 800c6ee:	27dc      	movs	r7, #220	; 0xdc
 800c6f0:	04bf      	lsls	r7, r7, #18
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	0030      	movs	r0, r6
 800c6f8:	0039      	movs	r1, r7
 800c6fa:	f7f3 fea5 	bl	8000448 <__aeabi_dcmpeq>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d19f      	bne.n	800c642 <_strtod_l+0x5a2>
 800c702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c704:	9a08      	ldr	r2, [sp, #32]
 800c706:	9300      	str	r3, [sp, #0]
 800c708:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c70a:	9b05      	ldr	r3, [sp, #20]
 800c70c:	9804      	ldr	r0, [sp, #16]
 800c70e:	f001 fbdb 	bl	800dec8 <__s2b>
 800c712:	900d      	str	r0, [sp, #52]	; 0x34
 800c714:	2800      	cmp	r0, #0
 800c716:	d100      	bne.n	800c71a <_strtod_l+0x67a>
 800c718:	e720      	b.n	800c55c <_strtod_l+0x4bc>
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	9906      	ldr	r1, [sp, #24]
 800c71e:	17da      	asrs	r2, r3, #31
 800c720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c722:	1a5b      	subs	r3, r3, r1
 800c724:	401a      	ands	r2, r3
 800c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c728:	9215      	str	r2, [sp, #84]	; 0x54
 800c72a:	43db      	mvns	r3, r3
 800c72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c72e:	17db      	asrs	r3, r3, #31
 800c730:	401a      	ands	r2, r3
 800c732:	2300      	movs	r3, #0
 800c734:	9218      	str	r2, [sp, #96]	; 0x60
 800c736:	9305      	str	r3, [sp, #20]
 800c738:	9306      	str	r3, [sp, #24]
 800c73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c73c:	9804      	ldr	r0, [sp, #16]
 800c73e:	6859      	ldr	r1, [r3, #4]
 800c740:	f001 fb4c 	bl	800dddc <_Balloc>
 800c744:	9008      	str	r0, [sp, #32]
 800c746:	2800      	cmp	r0, #0
 800c748:	d100      	bne.n	800c74c <_strtod_l+0x6ac>
 800c74a:	e70c      	b.n	800c566 <_strtod_l+0x4c6>
 800c74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c74e:	300c      	adds	r0, #12
 800c750:	0019      	movs	r1, r3
 800c752:	691a      	ldr	r2, [r3, #16]
 800c754:	310c      	adds	r1, #12
 800c756:	3202      	adds	r2, #2
 800c758:	0092      	lsls	r2, r2, #2
 800c75a:	f000 fea4 	bl	800d4a6 <memcpy>
 800c75e:	ab1e      	add	r3, sp, #120	; 0x78
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	ab1d      	add	r3, sp, #116	; 0x74
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	0032      	movs	r2, r6
 800c768:	003b      	movs	r3, r7
 800c76a:	9804      	ldr	r0, [sp, #16]
 800c76c:	9610      	str	r6, [sp, #64]	; 0x40
 800c76e:	9711      	str	r7, [sp, #68]	; 0x44
 800c770:	f001 fed2 	bl	800e518 <__d2b>
 800c774:	901c      	str	r0, [sp, #112]	; 0x70
 800c776:	2800      	cmp	r0, #0
 800c778:	d100      	bne.n	800c77c <_strtod_l+0x6dc>
 800c77a:	e6f4      	b.n	800c566 <_strtod_l+0x4c6>
 800c77c:	2101      	movs	r1, #1
 800c77e:	9804      	ldr	r0, [sp, #16]
 800c780:	f001 fc36 	bl	800dff0 <__i2b>
 800c784:	9006      	str	r0, [sp, #24]
 800c786:	2800      	cmp	r0, #0
 800c788:	d100      	bne.n	800c78c <_strtod_l+0x6ec>
 800c78a:	e6ec      	b.n	800c566 <_strtod_l+0x4c6>
 800c78c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c78e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c790:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c792:	1ad4      	subs	r4, r2, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	db01      	blt.n	800c79c <_strtod_l+0x6fc>
 800c798:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c79a:	195d      	adds	r5, r3, r5
 800c79c:	9907      	ldr	r1, [sp, #28]
 800c79e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c7a0:	1a5b      	subs	r3, r3, r1
 800c7a2:	2136      	movs	r1, #54	; 0x36
 800c7a4:	189b      	adds	r3, r3, r2
 800c7a6:	1a8a      	subs	r2, r1, r2
 800c7a8:	4985      	ldr	r1, [pc, #532]	; (800c9c0 <_strtod_l+0x920>)
 800c7aa:	2001      	movs	r0, #1
 800c7ac:	468c      	mov	ip, r1
 800c7ae:	2100      	movs	r1, #0
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	9114      	str	r1, [sp, #80]	; 0x50
 800c7b4:	9012      	str	r0, [sp, #72]	; 0x48
 800c7b6:	4563      	cmp	r3, ip
 800c7b8:	da07      	bge.n	800c7ca <_strtod_l+0x72a>
 800c7ba:	4661      	mov	r1, ip
 800c7bc:	1ac9      	subs	r1, r1, r3
 800c7be:	1a52      	subs	r2, r2, r1
 800c7c0:	291f      	cmp	r1, #31
 800c7c2:	dd00      	ble.n	800c7c6 <_strtod_l+0x726>
 800c7c4:	e0b6      	b.n	800c934 <_strtod_l+0x894>
 800c7c6:	4088      	lsls	r0, r1
 800c7c8:	9012      	str	r0, [sp, #72]	; 0x48
 800c7ca:	18ab      	adds	r3, r5, r2
 800c7cc:	930c      	str	r3, [sp, #48]	; 0x30
 800c7ce:	18a4      	adds	r4, r4, r2
 800c7d0:	9b07      	ldr	r3, [sp, #28]
 800c7d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d4:	191c      	adds	r4, r3, r4
 800c7d6:	002b      	movs	r3, r5
 800c7d8:	4295      	cmp	r5, r2
 800c7da:	dd00      	ble.n	800c7de <_strtod_l+0x73e>
 800c7dc:	0013      	movs	r3, r2
 800c7de:	42a3      	cmp	r3, r4
 800c7e0:	dd00      	ble.n	800c7e4 <_strtod_l+0x744>
 800c7e2:	0023      	movs	r3, r4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dd04      	ble.n	800c7f2 <_strtod_l+0x752>
 800c7e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ea:	1ae4      	subs	r4, r4, r3
 800c7ec:	1ad2      	subs	r2, r2, r3
 800c7ee:	920c      	str	r2, [sp, #48]	; 0x30
 800c7f0:	1aed      	subs	r5, r5, r3
 800c7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dd17      	ble.n	800c828 <_strtod_l+0x788>
 800c7f8:	001a      	movs	r2, r3
 800c7fa:	9906      	ldr	r1, [sp, #24]
 800c7fc:	9804      	ldr	r0, [sp, #16]
 800c7fe:	f001 fcbf 	bl	800e180 <__pow5mult>
 800c802:	9006      	str	r0, [sp, #24]
 800c804:	2800      	cmp	r0, #0
 800c806:	d100      	bne.n	800c80a <_strtod_l+0x76a>
 800c808:	e6ad      	b.n	800c566 <_strtod_l+0x4c6>
 800c80a:	0001      	movs	r1, r0
 800c80c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c80e:	9804      	ldr	r0, [sp, #16]
 800c810:	f001 fc06 	bl	800e020 <__multiply>
 800c814:	900e      	str	r0, [sp, #56]	; 0x38
 800c816:	2800      	cmp	r0, #0
 800c818:	d100      	bne.n	800c81c <_strtod_l+0x77c>
 800c81a:	e6a4      	b.n	800c566 <_strtod_l+0x4c6>
 800c81c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c81e:	9804      	ldr	r0, [sp, #16]
 800c820:	f001 fb04 	bl	800de2c <_Bfree>
 800c824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c826:	931c      	str	r3, [sp, #112]	; 0x70
 800c828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dd00      	ble.n	800c830 <_strtod_l+0x790>
 800c82e:	e087      	b.n	800c940 <_strtod_l+0x8a0>
 800c830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c832:	2b00      	cmp	r3, #0
 800c834:	dd08      	ble.n	800c848 <_strtod_l+0x7a8>
 800c836:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c838:	9908      	ldr	r1, [sp, #32]
 800c83a:	9804      	ldr	r0, [sp, #16]
 800c83c:	f001 fca0 	bl	800e180 <__pow5mult>
 800c840:	9008      	str	r0, [sp, #32]
 800c842:	2800      	cmp	r0, #0
 800c844:	d100      	bne.n	800c848 <_strtod_l+0x7a8>
 800c846:	e68e      	b.n	800c566 <_strtod_l+0x4c6>
 800c848:	2c00      	cmp	r4, #0
 800c84a:	dd08      	ble.n	800c85e <_strtod_l+0x7be>
 800c84c:	0022      	movs	r2, r4
 800c84e:	9908      	ldr	r1, [sp, #32]
 800c850:	9804      	ldr	r0, [sp, #16]
 800c852:	f001 fcd7 	bl	800e204 <__lshift>
 800c856:	9008      	str	r0, [sp, #32]
 800c858:	2800      	cmp	r0, #0
 800c85a:	d100      	bne.n	800c85e <_strtod_l+0x7be>
 800c85c:	e683      	b.n	800c566 <_strtod_l+0x4c6>
 800c85e:	2d00      	cmp	r5, #0
 800c860:	dd08      	ble.n	800c874 <_strtod_l+0x7d4>
 800c862:	002a      	movs	r2, r5
 800c864:	9906      	ldr	r1, [sp, #24]
 800c866:	9804      	ldr	r0, [sp, #16]
 800c868:	f001 fccc 	bl	800e204 <__lshift>
 800c86c:	9006      	str	r0, [sp, #24]
 800c86e:	2800      	cmp	r0, #0
 800c870:	d100      	bne.n	800c874 <_strtod_l+0x7d4>
 800c872:	e678      	b.n	800c566 <_strtod_l+0x4c6>
 800c874:	9a08      	ldr	r2, [sp, #32]
 800c876:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c878:	9804      	ldr	r0, [sp, #16]
 800c87a:	f001 fd4d 	bl	800e318 <__mdiff>
 800c87e:	9005      	str	r0, [sp, #20]
 800c880:	2800      	cmp	r0, #0
 800c882:	d100      	bne.n	800c886 <_strtod_l+0x7e6>
 800c884:	e66f      	b.n	800c566 <_strtod_l+0x4c6>
 800c886:	2200      	movs	r2, #0
 800c888:	68c3      	ldr	r3, [r0, #12]
 800c88a:	9906      	ldr	r1, [sp, #24]
 800c88c:	60c2      	str	r2, [r0, #12]
 800c88e:	930c      	str	r3, [sp, #48]	; 0x30
 800c890:	f001 fd26 	bl	800e2e0 <__mcmp>
 800c894:	2800      	cmp	r0, #0
 800c896:	da5d      	bge.n	800c954 <_strtod_l+0x8b4>
 800c898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c89a:	4333      	orrs	r3, r6
 800c89c:	d000      	beq.n	800c8a0 <_strtod_l+0x800>
 800c89e:	e088      	b.n	800c9b2 <_strtod_l+0x912>
 800c8a0:	033b      	lsls	r3, r7, #12
 800c8a2:	d000      	beq.n	800c8a6 <_strtod_l+0x806>
 800c8a4:	e085      	b.n	800c9b2 <_strtod_l+0x912>
 800c8a6:	22d6      	movs	r2, #214	; 0xd6
 800c8a8:	4b46      	ldr	r3, [pc, #280]	; (800c9c4 <_strtod_l+0x924>)
 800c8aa:	04d2      	lsls	r2, r2, #19
 800c8ac:	403b      	ands	r3, r7
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d97f      	bls.n	800c9b2 <_strtod_l+0x912>
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d103      	bne.n	800c8c2 <_strtod_l+0x822>
 800c8ba:	9b05      	ldr	r3, [sp, #20]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	dd77      	ble.n	800c9b2 <_strtod_l+0x912>
 800c8c2:	9905      	ldr	r1, [sp, #20]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	9804      	ldr	r0, [sp, #16]
 800c8c8:	f001 fc9c 	bl	800e204 <__lshift>
 800c8cc:	9906      	ldr	r1, [sp, #24]
 800c8ce:	9005      	str	r0, [sp, #20]
 800c8d0:	f001 fd06 	bl	800e2e0 <__mcmp>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	dd6c      	ble.n	800c9b2 <_strtod_l+0x912>
 800c8d8:	9907      	ldr	r1, [sp, #28]
 800c8da:	003b      	movs	r3, r7
 800c8dc:	4a39      	ldr	r2, [pc, #228]	; (800c9c4 <_strtod_l+0x924>)
 800c8de:	2900      	cmp	r1, #0
 800c8e0:	d100      	bne.n	800c8e4 <_strtod_l+0x844>
 800c8e2:	e094      	b.n	800ca0e <_strtod_l+0x96e>
 800c8e4:	0011      	movs	r1, r2
 800c8e6:	20d6      	movs	r0, #214	; 0xd6
 800c8e8:	4039      	ands	r1, r7
 800c8ea:	04c0      	lsls	r0, r0, #19
 800c8ec:	4281      	cmp	r1, r0
 800c8ee:	dd00      	ble.n	800c8f2 <_strtod_l+0x852>
 800c8f0:	e08d      	b.n	800ca0e <_strtod_l+0x96e>
 800c8f2:	23dc      	movs	r3, #220	; 0xdc
 800c8f4:	049b      	lsls	r3, r3, #18
 800c8f6:	4299      	cmp	r1, r3
 800c8f8:	dc00      	bgt.n	800c8fc <_strtod_l+0x85c>
 800c8fa:	e6a7      	b.n	800c64c <_strtod_l+0x5ac>
 800c8fc:	0030      	movs	r0, r6
 800c8fe:	0039      	movs	r1, r7
 800c900:	4b31      	ldr	r3, [pc, #196]	; (800c9c8 <_strtod_l+0x928>)
 800c902:	2200      	movs	r2, #0
 800c904:	f7f4 feb2 	bl	800166c <__aeabi_dmul>
 800c908:	4b2e      	ldr	r3, [pc, #184]	; (800c9c4 <_strtod_l+0x924>)
 800c90a:	0006      	movs	r6, r0
 800c90c:	000f      	movs	r7, r1
 800c90e:	420b      	tst	r3, r1
 800c910:	d000      	beq.n	800c914 <_strtod_l+0x874>
 800c912:	e631      	b.n	800c578 <_strtod_l+0x4d8>
 800c914:	2322      	movs	r3, #34	; 0x22
 800c916:	9a04      	ldr	r2, [sp, #16]
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	e62d      	b.n	800c578 <_strtod_l+0x4d8>
 800c91c:	234b      	movs	r3, #75	; 0x4b
 800c91e:	1a9a      	subs	r2, r3, r2
 800c920:	3b4c      	subs	r3, #76	; 0x4c
 800c922:	4093      	lsls	r3, r2
 800c924:	4019      	ands	r1, r3
 800c926:	000f      	movs	r7, r1
 800c928:	e6e3      	b.n	800c6f2 <_strtod_l+0x652>
 800c92a:	2201      	movs	r2, #1
 800c92c:	4252      	negs	r2, r2
 800c92e:	409a      	lsls	r2, r3
 800c930:	4016      	ands	r6, r2
 800c932:	e6de      	b.n	800c6f2 <_strtod_l+0x652>
 800c934:	4925      	ldr	r1, [pc, #148]	; (800c9cc <_strtod_l+0x92c>)
 800c936:	1acb      	subs	r3, r1, r3
 800c938:	0001      	movs	r1, r0
 800c93a:	4099      	lsls	r1, r3
 800c93c:	9114      	str	r1, [sp, #80]	; 0x50
 800c93e:	e743      	b.n	800c7c8 <_strtod_l+0x728>
 800c940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c942:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c944:	9804      	ldr	r0, [sp, #16]
 800c946:	f001 fc5d 	bl	800e204 <__lshift>
 800c94a:	901c      	str	r0, [sp, #112]	; 0x70
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d000      	beq.n	800c952 <_strtod_l+0x8b2>
 800c950:	e76e      	b.n	800c830 <_strtod_l+0x790>
 800c952:	e608      	b.n	800c566 <_strtod_l+0x4c6>
 800c954:	970e      	str	r7, [sp, #56]	; 0x38
 800c956:	2800      	cmp	r0, #0
 800c958:	d177      	bne.n	800ca4a <_strtod_l+0x9aa>
 800c95a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c95c:	033b      	lsls	r3, r7, #12
 800c95e:	0b1b      	lsrs	r3, r3, #12
 800c960:	2a00      	cmp	r2, #0
 800c962:	d039      	beq.n	800c9d8 <_strtod_l+0x938>
 800c964:	4a1a      	ldr	r2, [pc, #104]	; (800c9d0 <_strtod_l+0x930>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d139      	bne.n	800c9de <_strtod_l+0x93e>
 800c96a:	2101      	movs	r1, #1
 800c96c:	9b07      	ldr	r3, [sp, #28]
 800c96e:	4249      	negs	r1, r1
 800c970:	0032      	movs	r2, r6
 800c972:	0008      	movs	r0, r1
 800c974:	2b00      	cmp	r3, #0
 800c976:	d00b      	beq.n	800c990 <_strtod_l+0x8f0>
 800c978:	24d4      	movs	r4, #212	; 0xd4
 800c97a:	4b12      	ldr	r3, [pc, #72]	; (800c9c4 <_strtod_l+0x924>)
 800c97c:	0008      	movs	r0, r1
 800c97e:	403b      	ands	r3, r7
 800c980:	04e4      	lsls	r4, r4, #19
 800c982:	42a3      	cmp	r3, r4
 800c984:	d804      	bhi.n	800c990 <_strtod_l+0x8f0>
 800c986:	306c      	adds	r0, #108	; 0x6c
 800c988:	0d1b      	lsrs	r3, r3, #20
 800c98a:	1ac3      	subs	r3, r0, r3
 800c98c:	4099      	lsls	r1, r3
 800c98e:	0008      	movs	r0, r1
 800c990:	4282      	cmp	r2, r0
 800c992:	d124      	bne.n	800c9de <_strtod_l+0x93e>
 800c994:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <_strtod_l+0x934>)
 800c996:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c998:	4299      	cmp	r1, r3
 800c99a:	d102      	bne.n	800c9a2 <_strtod_l+0x902>
 800c99c:	3201      	adds	r2, #1
 800c99e:	d100      	bne.n	800c9a2 <_strtod_l+0x902>
 800c9a0:	e5e1      	b.n	800c566 <_strtod_l+0x4c6>
 800c9a2:	4b08      	ldr	r3, [pc, #32]	; (800c9c4 <_strtod_l+0x924>)
 800c9a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9a6:	2600      	movs	r6, #0
 800c9a8:	401a      	ands	r2, r3
 800c9aa:	0013      	movs	r3, r2
 800c9ac:	2280      	movs	r2, #128	; 0x80
 800c9ae:	0352      	lsls	r2, r2, #13
 800c9b0:	189f      	adds	r7, r3, r2
 800c9b2:	9b07      	ldr	r3, [sp, #28]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1a1      	bne.n	800c8fc <_strtod_l+0x85c>
 800c9b8:	e5de      	b.n	800c578 <_strtod_l+0x4d8>
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	08015978 	.word	0x08015978
 800c9c0:	fffffc02 	.word	0xfffffc02
 800c9c4:	7ff00000 	.word	0x7ff00000
 800c9c8:	39500000 	.word	0x39500000
 800c9cc:	fffffbe2 	.word	0xfffffbe2
 800c9d0:	000fffff 	.word	0x000fffff
 800c9d4:	7fefffff 	.word	0x7fefffff
 800c9d8:	4333      	orrs	r3, r6
 800c9da:	d100      	bne.n	800c9de <_strtod_l+0x93e>
 800c9dc:	e77c      	b.n	800c8d8 <_strtod_l+0x838>
 800c9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d01d      	beq.n	800ca20 <_strtod_l+0x980>
 800c9e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9e8:	4213      	tst	r3, r2
 800c9ea:	d0e2      	beq.n	800c9b2 <_strtod_l+0x912>
 800c9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9ee:	0030      	movs	r0, r6
 800c9f0:	0039      	movs	r1, r7
 800c9f2:	9a07      	ldr	r2, [sp, #28]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d017      	beq.n	800ca28 <_strtod_l+0x988>
 800c9f8:	f7ff fb3a 	bl	800c070 <sulp>
 800c9fc:	0002      	movs	r2, r0
 800c9fe:	000b      	movs	r3, r1
 800ca00:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca02:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca04:	f7f3 fed8 	bl	80007b8 <__aeabi_dadd>
 800ca08:	0006      	movs	r6, r0
 800ca0a:	000f      	movs	r7, r1
 800ca0c:	e7d1      	b.n	800c9b2 <_strtod_l+0x912>
 800ca0e:	2601      	movs	r6, #1
 800ca10:	4013      	ands	r3, r2
 800ca12:	4a98      	ldr	r2, [pc, #608]	; (800cc74 <_strtod_l+0xbd4>)
 800ca14:	4276      	negs	r6, r6
 800ca16:	189b      	adds	r3, r3, r2
 800ca18:	4a97      	ldr	r2, [pc, #604]	; (800cc78 <_strtod_l+0xbd8>)
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	0017      	movs	r7, r2
 800ca1e:	e7c8      	b.n	800c9b2 <_strtod_l+0x912>
 800ca20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca22:	4233      	tst	r3, r6
 800ca24:	d0c5      	beq.n	800c9b2 <_strtod_l+0x912>
 800ca26:	e7e1      	b.n	800c9ec <_strtod_l+0x94c>
 800ca28:	f7ff fb22 	bl	800c070 <sulp>
 800ca2c:	0002      	movs	r2, r0
 800ca2e:	000b      	movs	r3, r1
 800ca30:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ca32:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ca34:	f7f5 f8dc 	bl	8001bf0 <__aeabi_dsub>
 800ca38:	2200      	movs	r2, #0
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	0006      	movs	r6, r0
 800ca3e:	000f      	movs	r7, r1
 800ca40:	f7f3 fd02 	bl	8000448 <__aeabi_dcmpeq>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d0b4      	beq.n	800c9b2 <_strtod_l+0x912>
 800ca48:	e600      	b.n	800c64c <_strtod_l+0x5ac>
 800ca4a:	9906      	ldr	r1, [sp, #24]
 800ca4c:	9805      	ldr	r0, [sp, #20]
 800ca4e:	f001 fdc3 	bl	800e5d8 <__ratio>
 800ca52:	2380      	movs	r3, #128	; 0x80
 800ca54:	2200      	movs	r2, #0
 800ca56:	05db      	lsls	r3, r3, #23
 800ca58:	0004      	movs	r4, r0
 800ca5a:	000d      	movs	r5, r1
 800ca5c:	f7f3 fd04 	bl	8000468 <__aeabi_dcmple>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d06d      	beq.n	800cb40 <_strtod_l+0xaa0>
 800ca64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d000      	beq.n	800ca6c <_strtod_l+0x9cc>
 800ca6a:	e07e      	b.n	800cb6a <_strtod_l+0xaca>
 800ca6c:	2e00      	cmp	r6, #0
 800ca6e:	d158      	bne.n	800cb22 <_strtod_l+0xa82>
 800ca70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca72:	031b      	lsls	r3, r3, #12
 800ca74:	d000      	beq.n	800ca78 <_strtod_l+0x9d8>
 800ca76:	e07f      	b.n	800cb78 <_strtod_l+0xad8>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	0020      	movs	r0, r4
 800ca7c:	0029      	movs	r1, r5
 800ca7e:	4b7f      	ldr	r3, [pc, #508]	; (800cc7c <_strtod_l+0xbdc>)
 800ca80:	f7f3 fce8 	bl	8000454 <__aeabi_dcmplt>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d158      	bne.n	800cb3a <_strtod_l+0xa9a>
 800ca88:	0020      	movs	r0, r4
 800ca8a:	0029      	movs	r1, r5
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4b7c      	ldr	r3, [pc, #496]	; (800cc80 <_strtod_l+0xbe0>)
 800ca90:	f7f4 fdec 	bl	800166c <__aeabi_dmul>
 800ca94:	0004      	movs	r4, r0
 800ca96:	000d      	movs	r5, r1
 800ca98:	2380      	movs	r3, #128	; 0x80
 800ca9a:	061b      	lsls	r3, r3, #24
 800ca9c:	940a      	str	r4, [sp, #40]	; 0x28
 800ca9e:	18eb      	adds	r3, r5, r3
 800caa0:	930b      	str	r3, [sp, #44]	; 0x2c
 800caa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caa6:	9212      	str	r2, [sp, #72]	; 0x48
 800caa8:	9313      	str	r3, [sp, #76]	; 0x4c
 800caaa:	4a76      	ldr	r2, [pc, #472]	; (800cc84 <_strtod_l+0xbe4>)
 800caac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800caae:	4013      	ands	r3, r2
 800cab0:	9314      	str	r3, [sp, #80]	; 0x50
 800cab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cab4:	4b74      	ldr	r3, [pc, #464]	; (800cc88 <_strtod_l+0xbe8>)
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d000      	beq.n	800cabc <_strtod_l+0xa1c>
 800caba:	e091      	b.n	800cbe0 <_strtod_l+0xb40>
 800cabc:	4a73      	ldr	r2, [pc, #460]	; (800cc8c <_strtod_l+0xbec>)
 800cabe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cac0:	4694      	mov	ip, r2
 800cac2:	4463      	add	r3, ip
 800cac4:	001f      	movs	r7, r3
 800cac6:	0030      	movs	r0, r6
 800cac8:	0019      	movs	r1, r3
 800caca:	f001 fcbd 	bl	800e448 <__ulp>
 800cace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad2:	f7f4 fdcb 	bl	800166c <__aeabi_dmul>
 800cad6:	0032      	movs	r2, r6
 800cad8:	003b      	movs	r3, r7
 800cada:	f7f3 fe6d 	bl	80007b8 <__aeabi_dadd>
 800cade:	4a69      	ldr	r2, [pc, #420]	; (800cc84 <_strtod_l+0xbe4>)
 800cae0:	4b6b      	ldr	r3, [pc, #428]	; (800cc90 <_strtod_l+0xbf0>)
 800cae2:	0006      	movs	r6, r0
 800cae4:	400a      	ands	r2, r1
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d949      	bls.n	800cb7e <_strtod_l+0xade>
 800caea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800caec:	4b69      	ldr	r3, [pc, #420]	; (800cc94 <_strtod_l+0xbf4>)
 800caee:	429a      	cmp	r2, r3
 800caf0:	d103      	bne.n	800cafa <_strtod_l+0xa5a>
 800caf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800caf4:	3301      	adds	r3, #1
 800caf6:	d100      	bne.n	800cafa <_strtod_l+0xa5a>
 800caf8:	e535      	b.n	800c566 <_strtod_l+0x4c6>
 800cafa:	2601      	movs	r6, #1
 800cafc:	4f65      	ldr	r7, [pc, #404]	; (800cc94 <_strtod_l+0xbf4>)
 800cafe:	4276      	negs	r6, r6
 800cb00:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cb02:	9804      	ldr	r0, [sp, #16]
 800cb04:	f001 f992 	bl	800de2c <_Bfree>
 800cb08:	9908      	ldr	r1, [sp, #32]
 800cb0a:	9804      	ldr	r0, [sp, #16]
 800cb0c:	f001 f98e 	bl	800de2c <_Bfree>
 800cb10:	9906      	ldr	r1, [sp, #24]
 800cb12:	9804      	ldr	r0, [sp, #16]
 800cb14:	f001 f98a 	bl	800de2c <_Bfree>
 800cb18:	9905      	ldr	r1, [sp, #20]
 800cb1a:	9804      	ldr	r0, [sp, #16]
 800cb1c:	f001 f986 	bl	800de2c <_Bfree>
 800cb20:	e60b      	b.n	800c73a <_strtod_l+0x69a>
 800cb22:	2e01      	cmp	r6, #1
 800cb24:	d103      	bne.n	800cb2e <_strtod_l+0xa8e>
 800cb26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d100      	bne.n	800cb2e <_strtod_l+0xa8e>
 800cb2c:	e58e      	b.n	800c64c <_strtod_l+0x5ac>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	4c59      	ldr	r4, [pc, #356]	; (800cc98 <_strtod_l+0xbf8>)
 800cb32:	930a      	str	r3, [sp, #40]	; 0x28
 800cb34:	940b      	str	r4, [sp, #44]	; 0x2c
 800cb36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cb38:	e01c      	b.n	800cb74 <_strtod_l+0xad4>
 800cb3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cb3c:	4d50      	ldr	r5, [pc, #320]	; (800cc80 <_strtod_l+0xbe0>)
 800cb3e:	e7ab      	b.n	800ca98 <_strtod_l+0x9f8>
 800cb40:	2200      	movs	r2, #0
 800cb42:	0020      	movs	r0, r4
 800cb44:	0029      	movs	r1, r5
 800cb46:	4b4e      	ldr	r3, [pc, #312]	; (800cc80 <_strtod_l+0xbe0>)
 800cb48:	f7f4 fd90 	bl	800166c <__aeabi_dmul>
 800cb4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb4e:	0004      	movs	r4, r0
 800cb50:	000b      	movs	r3, r1
 800cb52:	000d      	movs	r5, r1
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	d104      	bne.n	800cb62 <_strtod_l+0xac2>
 800cb58:	2280      	movs	r2, #128	; 0x80
 800cb5a:	0612      	lsls	r2, r2, #24
 800cb5c:	900a      	str	r0, [sp, #40]	; 0x28
 800cb5e:	188b      	adds	r3, r1, r2
 800cb60:	e79e      	b.n	800caa0 <_strtod_l+0xa00>
 800cb62:	0002      	movs	r2, r0
 800cb64:	920a      	str	r2, [sp, #40]	; 0x28
 800cb66:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb68:	e79b      	b.n	800caa2 <_strtod_l+0xa02>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4c43      	ldr	r4, [pc, #268]	; (800cc7c <_strtod_l+0xbdc>)
 800cb6e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb70:	940b      	str	r4, [sp, #44]	; 0x2c
 800cb72:	2400      	movs	r4, #0
 800cb74:	4d41      	ldr	r5, [pc, #260]	; (800cc7c <_strtod_l+0xbdc>)
 800cb76:	e794      	b.n	800caa2 <_strtod_l+0xa02>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4c47      	ldr	r4, [pc, #284]	; (800cc98 <_strtod_l+0xbf8>)
 800cb7c:	e7f7      	b.n	800cb6e <_strtod_l+0xace>
 800cb7e:	23d4      	movs	r3, #212	; 0xd4
 800cb80:	049b      	lsls	r3, r3, #18
 800cb82:	18cf      	adds	r7, r1, r3
 800cb84:	9b07      	ldr	r3, [sp, #28]
 800cb86:	970e      	str	r7, [sp, #56]	; 0x38
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1b9      	bne.n	800cb00 <_strtod_l+0xa60>
 800cb8c:	4b3d      	ldr	r3, [pc, #244]	; (800cc84 <_strtod_l+0xbe4>)
 800cb8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb90:	403b      	ands	r3, r7
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d1b4      	bne.n	800cb00 <_strtod_l+0xa60>
 800cb96:	0020      	movs	r0, r4
 800cb98:	0029      	movs	r1, r5
 800cb9a:	f7f3 fcef 	bl	800057c <__aeabi_d2lz>
 800cb9e:	f7f3 fd29 	bl	80005f4 <__aeabi_l2d>
 800cba2:	0002      	movs	r2, r0
 800cba4:	000b      	movs	r3, r1
 800cba6:	0020      	movs	r0, r4
 800cba8:	0029      	movs	r1, r5
 800cbaa:	f7f5 f821 	bl	8001bf0 <__aeabi_dsub>
 800cbae:	033b      	lsls	r3, r7, #12
 800cbb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbb2:	0b1b      	lsrs	r3, r3, #12
 800cbb4:	4333      	orrs	r3, r6
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	0004      	movs	r4, r0
 800cbba:	000d      	movs	r5, r1
 800cbbc:	4a37      	ldr	r2, [pc, #220]	; (800cc9c <_strtod_l+0xbfc>)
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d054      	beq.n	800cc6c <_strtod_l+0xbcc>
 800cbc2:	4b37      	ldr	r3, [pc, #220]	; (800cca0 <_strtod_l+0xc00>)
 800cbc4:	f7f3 fc46 	bl	8000454 <__aeabi_dcmplt>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d000      	beq.n	800cbce <_strtod_l+0xb2e>
 800cbcc:	e4d4      	b.n	800c578 <_strtod_l+0x4d8>
 800cbce:	0020      	movs	r0, r4
 800cbd0:	0029      	movs	r1, r5
 800cbd2:	4a34      	ldr	r2, [pc, #208]	; (800cca4 <_strtod_l+0xc04>)
 800cbd4:	4b2a      	ldr	r3, [pc, #168]	; (800cc80 <_strtod_l+0xbe0>)
 800cbd6:	f7f3 fc51 	bl	800047c <__aeabi_dcmpgt>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	d090      	beq.n	800cb00 <_strtod_l+0xa60>
 800cbde:	e4cb      	b.n	800c578 <_strtod_l+0x4d8>
 800cbe0:	9b07      	ldr	r3, [sp, #28]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d02b      	beq.n	800cc3e <_strtod_l+0xb9e>
 800cbe6:	23d4      	movs	r3, #212	; 0xd4
 800cbe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbea:	04db      	lsls	r3, r3, #19
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d826      	bhi.n	800cc3e <_strtod_l+0xb9e>
 800cbf0:	0020      	movs	r0, r4
 800cbf2:	0029      	movs	r1, r5
 800cbf4:	4a2c      	ldr	r2, [pc, #176]	; (800cca8 <_strtod_l+0xc08>)
 800cbf6:	4b2d      	ldr	r3, [pc, #180]	; (800ccac <_strtod_l+0xc0c>)
 800cbf8:	f7f3 fc36 	bl	8000468 <__aeabi_dcmple>
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d017      	beq.n	800cc30 <_strtod_l+0xb90>
 800cc00:	0020      	movs	r0, r4
 800cc02:	0029      	movs	r1, r5
 800cc04:	f7f3 fc9c 	bl	8000540 <__aeabi_d2uiz>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d100      	bne.n	800cc0e <_strtod_l+0xb6e>
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	f7f5 fbf5 	bl	80023fc <__aeabi_ui2d>
 800cc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc14:	0004      	movs	r4, r0
 800cc16:	000b      	movs	r3, r1
 800cc18:	000d      	movs	r5, r1
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	d122      	bne.n	800cc64 <_strtod_l+0xbc4>
 800cc1e:	2280      	movs	r2, #128	; 0x80
 800cc20:	0612      	lsls	r2, r2, #24
 800cc22:	188b      	adds	r3, r1, r2
 800cc24:	9016      	str	r0, [sp, #88]	; 0x58
 800cc26:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc2c:	9212      	str	r2, [sp, #72]	; 0x48
 800cc2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc30:	22d6      	movs	r2, #214	; 0xd6
 800cc32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc34:	04d2      	lsls	r2, r2, #19
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc40:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cc44:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cc46:	f001 fbff 	bl	800e448 <__ulp>
 800cc4a:	0002      	movs	r2, r0
 800cc4c:	000b      	movs	r3, r1
 800cc4e:	0030      	movs	r0, r6
 800cc50:	0039      	movs	r1, r7
 800cc52:	f7f4 fd0b 	bl	800166c <__aeabi_dmul>
 800cc56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc5a:	f7f3 fdad 	bl	80007b8 <__aeabi_dadd>
 800cc5e:	0006      	movs	r6, r0
 800cc60:	000f      	movs	r7, r1
 800cc62:	e78f      	b.n	800cb84 <_strtod_l+0xae4>
 800cc64:	0002      	movs	r2, r0
 800cc66:	9216      	str	r2, [sp, #88]	; 0x58
 800cc68:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc6a:	e7dd      	b.n	800cc28 <_strtod_l+0xb88>
 800cc6c:	4b10      	ldr	r3, [pc, #64]	; (800ccb0 <_strtod_l+0xc10>)
 800cc6e:	f7f3 fbf1 	bl	8000454 <__aeabi_dcmplt>
 800cc72:	e7b2      	b.n	800cbda <_strtod_l+0xb3a>
 800cc74:	fff00000 	.word	0xfff00000
 800cc78:	000fffff 	.word	0x000fffff
 800cc7c:	3ff00000 	.word	0x3ff00000
 800cc80:	3fe00000 	.word	0x3fe00000
 800cc84:	7ff00000 	.word	0x7ff00000
 800cc88:	7fe00000 	.word	0x7fe00000
 800cc8c:	fcb00000 	.word	0xfcb00000
 800cc90:	7c9fffff 	.word	0x7c9fffff
 800cc94:	7fefffff 	.word	0x7fefffff
 800cc98:	bff00000 	.word	0xbff00000
 800cc9c:	94a03595 	.word	0x94a03595
 800cca0:	3fdfffff 	.word	0x3fdfffff
 800cca4:	35afe535 	.word	0x35afe535
 800cca8:	ffc00000 	.word	0xffc00000
 800ccac:	41dfffff 	.word	0x41dfffff
 800ccb0:	3fcfffff 	.word	0x3fcfffff

0800ccb4 <_strtod_r>:
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <_strtod_r+0xc>)
 800ccb8:	f7ff f9f2 	bl	800c0a0 <_strtod_l>
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	46c0      	nop			; (mov r8, r8)
 800ccc0:	20000444 	.word	0x20000444

0800ccc4 <strtod>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	4c04      	ldr	r4, [pc, #16]	; (800ccd8 <strtod+0x14>)
 800ccc8:	000a      	movs	r2, r1
 800ccca:	0001      	movs	r1, r0
 800cccc:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <strtod+0x18>)
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	f7ff f9e6 	bl	800c0a0 <_strtod_l>
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	200006d0 	.word	0x200006d0
 800ccdc:	20000444 	.word	0x20000444

0800cce0 <_strtol_l.constprop.0>:
 800cce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cce2:	b087      	sub	sp, #28
 800cce4:	001e      	movs	r6, r3
 800cce6:	9005      	str	r0, [sp, #20]
 800cce8:	9101      	str	r1, [sp, #4]
 800ccea:	9202      	str	r2, [sp, #8]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d048      	beq.n	800cd82 <_strtol_l.constprop.0+0xa2>
 800ccf0:	000b      	movs	r3, r1
 800ccf2:	2e24      	cmp	r6, #36	; 0x24
 800ccf4:	d845      	bhi.n	800cd82 <_strtol_l.constprop.0+0xa2>
 800ccf6:	4a3b      	ldr	r2, [pc, #236]	; (800cde4 <_strtol_l.constprop.0+0x104>)
 800ccf8:	2108      	movs	r1, #8
 800ccfa:	4694      	mov	ip, r2
 800ccfc:	001a      	movs	r2, r3
 800ccfe:	4660      	mov	r0, ip
 800cd00:	7814      	ldrb	r4, [r2, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	5d00      	ldrb	r0, [r0, r4]
 800cd06:	001d      	movs	r5, r3
 800cd08:	0007      	movs	r7, r0
 800cd0a:	400f      	ands	r7, r1
 800cd0c:	4208      	tst	r0, r1
 800cd0e:	d1f5      	bne.n	800ccfc <_strtol_l.constprop.0+0x1c>
 800cd10:	2c2d      	cmp	r4, #45	; 0x2d
 800cd12:	d13d      	bne.n	800cd90 <_strtol_l.constprop.0+0xb0>
 800cd14:	2701      	movs	r7, #1
 800cd16:	781c      	ldrb	r4, [r3, #0]
 800cd18:	1c95      	adds	r5, r2, #2
 800cd1a:	2e00      	cmp	r6, #0
 800cd1c:	d05e      	beq.n	800cddc <_strtol_l.constprop.0+0xfc>
 800cd1e:	2e10      	cmp	r6, #16
 800cd20:	d109      	bne.n	800cd36 <_strtol_l.constprop.0+0x56>
 800cd22:	2c30      	cmp	r4, #48	; 0x30
 800cd24:	d107      	bne.n	800cd36 <_strtol_l.constprop.0+0x56>
 800cd26:	2220      	movs	r2, #32
 800cd28:	782b      	ldrb	r3, [r5, #0]
 800cd2a:	4393      	bics	r3, r2
 800cd2c:	2b58      	cmp	r3, #88	; 0x58
 800cd2e:	d150      	bne.n	800cdd2 <_strtol_l.constprop.0+0xf2>
 800cd30:	2610      	movs	r6, #16
 800cd32:	786c      	ldrb	r4, [r5, #1]
 800cd34:	3502      	adds	r5, #2
 800cd36:	4b2c      	ldr	r3, [pc, #176]	; (800cde8 <_strtol_l.constprop.0+0x108>)
 800cd38:	0031      	movs	r1, r6
 800cd3a:	18fb      	adds	r3, r7, r3
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	f7f3 fa82 	bl	8000248 <__aeabi_uidivmod>
 800cd44:	2200      	movs	r2, #0
 800cd46:	9104      	str	r1, [sp, #16]
 800cd48:	2101      	movs	r1, #1
 800cd4a:	4684      	mov	ip, r0
 800cd4c:	0010      	movs	r0, r2
 800cd4e:	4249      	negs	r1, r1
 800cd50:	0023      	movs	r3, r4
 800cd52:	3b30      	subs	r3, #48	; 0x30
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	d903      	bls.n	800cd60 <_strtol_l.constprop.0+0x80>
 800cd58:	3b11      	subs	r3, #17
 800cd5a:	2b19      	cmp	r3, #25
 800cd5c:	d81d      	bhi.n	800cd9a <_strtol_l.constprop.0+0xba>
 800cd5e:	330a      	adds	r3, #10
 800cd60:	429e      	cmp	r6, r3
 800cd62:	dd1e      	ble.n	800cda2 <_strtol_l.constprop.0+0xc2>
 800cd64:	1c54      	adds	r4, r2, #1
 800cd66:	d009      	beq.n	800cd7c <_strtol_l.constprop.0+0x9c>
 800cd68:	000a      	movs	r2, r1
 800cd6a:	4584      	cmp	ip, r0
 800cd6c:	d306      	bcc.n	800cd7c <_strtol_l.constprop.0+0x9c>
 800cd6e:	d102      	bne.n	800cd76 <_strtol_l.constprop.0+0x96>
 800cd70:	9c04      	ldr	r4, [sp, #16]
 800cd72:	429c      	cmp	r4, r3
 800cd74:	db02      	blt.n	800cd7c <_strtol_l.constprop.0+0x9c>
 800cd76:	2201      	movs	r2, #1
 800cd78:	4370      	muls	r0, r6
 800cd7a:	1818      	adds	r0, r3, r0
 800cd7c:	782c      	ldrb	r4, [r5, #0]
 800cd7e:	3501      	adds	r5, #1
 800cd80:	e7e6      	b.n	800cd50 <_strtol_l.constprop.0+0x70>
 800cd82:	f000 fb57 	bl	800d434 <__errno>
 800cd86:	2316      	movs	r3, #22
 800cd88:	6003      	str	r3, [r0, #0]
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	b007      	add	sp, #28
 800cd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd90:	2c2b      	cmp	r4, #43	; 0x2b
 800cd92:	d1c2      	bne.n	800cd1a <_strtol_l.constprop.0+0x3a>
 800cd94:	781c      	ldrb	r4, [r3, #0]
 800cd96:	1c95      	adds	r5, r2, #2
 800cd98:	e7bf      	b.n	800cd1a <_strtol_l.constprop.0+0x3a>
 800cd9a:	0023      	movs	r3, r4
 800cd9c:	3b61      	subs	r3, #97	; 0x61
 800cd9e:	2b19      	cmp	r3, #25
 800cda0:	d9dd      	bls.n	800cd5e <_strtol_l.constprop.0+0x7e>
 800cda2:	1c53      	adds	r3, r2, #1
 800cda4:	d109      	bne.n	800cdba <_strtol_l.constprop.0+0xda>
 800cda6:	2322      	movs	r3, #34	; 0x22
 800cda8:	9a05      	ldr	r2, [sp, #20]
 800cdaa:	9803      	ldr	r0, [sp, #12]
 800cdac:	6013      	str	r3, [r2, #0]
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0eb      	beq.n	800cd8c <_strtol_l.constprop.0+0xac>
 800cdb4:	1e6b      	subs	r3, r5, #1
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	e007      	b.n	800cdca <_strtol_l.constprop.0+0xea>
 800cdba:	2f00      	cmp	r7, #0
 800cdbc:	d000      	beq.n	800cdc0 <_strtol_l.constprop.0+0xe0>
 800cdbe:	4240      	negs	r0, r0
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0e2      	beq.n	800cd8c <_strtol_l.constprop.0+0xac>
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	d1f4      	bne.n	800cdb4 <_strtol_l.constprop.0+0xd4>
 800cdca:	9b02      	ldr	r3, [sp, #8]
 800cdcc:	9a01      	ldr	r2, [sp, #4]
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	e7dc      	b.n	800cd8c <_strtol_l.constprop.0+0xac>
 800cdd2:	2430      	movs	r4, #48	; 0x30
 800cdd4:	2e00      	cmp	r6, #0
 800cdd6:	d1ae      	bne.n	800cd36 <_strtol_l.constprop.0+0x56>
 800cdd8:	3608      	adds	r6, #8
 800cdda:	e7ac      	b.n	800cd36 <_strtol_l.constprop.0+0x56>
 800cddc:	2c30      	cmp	r4, #48	; 0x30
 800cdde:	d0a2      	beq.n	800cd26 <_strtol_l.constprop.0+0x46>
 800cde0:	260a      	movs	r6, #10
 800cde2:	e7a8      	b.n	800cd36 <_strtol_l.constprop.0+0x56>
 800cde4:	080159a1 	.word	0x080159a1
 800cde8:	7fffffff 	.word	0x7fffffff

0800cdec <_strtol_r>:
 800cdec:	b510      	push	{r4, lr}
 800cdee:	f7ff ff77 	bl	800cce0 <_strtol_l.constprop.0>
 800cdf2:	bd10      	pop	{r4, pc}

0800cdf4 <strtol>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4c04      	ldr	r4, [pc, #16]	; (800ce08 <strtol+0x14>)
 800cdf8:	0013      	movs	r3, r2
 800cdfa:	000a      	movs	r2, r1
 800cdfc:	0001      	movs	r1, r0
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	f7ff ff6e 	bl	800cce0 <_strtol_l.constprop.0>
 800ce04:	bd10      	pop	{r4, pc}
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	200006d0 	.word	0x200006d0

0800ce0c <_strtoul_l.constprop.0>:
 800ce0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	9202      	str	r2, [sp, #8]
 800ce12:	4a3e      	ldr	r2, [pc, #248]	; (800cf0c <_strtoul_l.constprop.0+0x100>)
 800ce14:	001e      	movs	r6, r3
 800ce16:	9101      	str	r1, [sp, #4]
 800ce18:	000b      	movs	r3, r1
 800ce1a:	4694      	mov	ip, r2
 800ce1c:	2108      	movs	r1, #8
 800ce1e:	9005      	str	r0, [sp, #20]
 800ce20:	001a      	movs	r2, r3
 800ce22:	4660      	mov	r0, ip
 800ce24:	7814      	ldrb	r4, [r2, #0]
 800ce26:	3301      	adds	r3, #1
 800ce28:	5d00      	ldrb	r0, [r0, r4]
 800ce2a:	001d      	movs	r5, r3
 800ce2c:	0007      	movs	r7, r0
 800ce2e:	400f      	ands	r7, r1
 800ce30:	4208      	tst	r0, r1
 800ce32:	d1f5      	bne.n	800ce20 <_strtoul_l.constprop.0+0x14>
 800ce34:	2c2d      	cmp	r4, #45	; 0x2d
 800ce36:	d13d      	bne.n	800ceb4 <_strtoul_l.constprop.0+0xa8>
 800ce38:	2701      	movs	r7, #1
 800ce3a:	781c      	ldrb	r4, [r3, #0]
 800ce3c:	1c95      	adds	r5, r2, #2
 800ce3e:	2e00      	cmp	r6, #0
 800ce40:	d05f      	beq.n	800cf02 <_strtoul_l.constprop.0+0xf6>
 800ce42:	2e10      	cmp	r6, #16
 800ce44:	d109      	bne.n	800ce5a <_strtoul_l.constprop.0+0x4e>
 800ce46:	2c30      	cmp	r4, #48	; 0x30
 800ce48:	d107      	bne.n	800ce5a <_strtoul_l.constprop.0+0x4e>
 800ce4a:	2220      	movs	r2, #32
 800ce4c:	782b      	ldrb	r3, [r5, #0]
 800ce4e:	4393      	bics	r3, r2
 800ce50:	2b58      	cmp	r3, #88	; 0x58
 800ce52:	d151      	bne.n	800cef8 <_strtoul_l.constprop.0+0xec>
 800ce54:	2610      	movs	r6, #16
 800ce56:	786c      	ldrb	r4, [r5, #1]
 800ce58:	3502      	adds	r5, #2
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	0031      	movs	r1, r6
 800ce5e:	4240      	negs	r0, r0
 800ce60:	f7f3 f96c 	bl	800013c <__udivsi3>
 800ce64:	9003      	str	r0, [sp, #12]
 800ce66:	2001      	movs	r0, #1
 800ce68:	0031      	movs	r1, r6
 800ce6a:	4240      	negs	r0, r0
 800ce6c:	f7f3 f9ec 	bl	8000248 <__aeabi_uidivmod>
 800ce70:	2300      	movs	r3, #0
 800ce72:	2201      	movs	r2, #1
 800ce74:	9104      	str	r1, [sp, #16]
 800ce76:	2101      	movs	r1, #1
 800ce78:	0018      	movs	r0, r3
 800ce7a:	4694      	mov	ip, r2
 800ce7c:	4249      	negs	r1, r1
 800ce7e:	0022      	movs	r2, r4
 800ce80:	3a30      	subs	r2, #48	; 0x30
 800ce82:	2a09      	cmp	r2, #9
 800ce84:	d903      	bls.n	800ce8e <_strtoul_l.constprop.0+0x82>
 800ce86:	3a11      	subs	r2, #17
 800ce88:	2a19      	cmp	r2, #25
 800ce8a:	d818      	bhi.n	800cebe <_strtoul_l.constprop.0+0xb2>
 800ce8c:	320a      	adds	r2, #10
 800ce8e:	4296      	cmp	r6, r2
 800ce90:	dd19      	ble.n	800cec6 <_strtoul_l.constprop.0+0xba>
 800ce92:	1c5c      	adds	r4, r3, #1
 800ce94:	d00b      	beq.n	800ceae <_strtoul_l.constprop.0+0xa2>
 800ce96:	9c03      	ldr	r4, [sp, #12]
 800ce98:	000b      	movs	r3, r1
 800ce9a:	4284      	cmp	r4, r0
 800ce9c:	d307      	bcc.n	800ceae <_strtoul_l.constprop.0+0xa2>
 800ce9e:	d103      	bne.n	800cea8 <_strtoul_l.constprop.0+0x9c>
 800cea0:	9c04      	ldr	r4, [sp, #16]
 800cea2:	000b      	movs	r3, r1
 800cea4:	4294      	cmp	r4, r2
 800cea6:	db02      	blt.n	800ceae <_strtoul_l.constprop.0+0xa2>
 800cea8:	4663      	mov	r3, ip
 800ceaa:	4370      	muls	r0, r6
 800ceac:	1810      	adds	r0, r2, r0
 800ceae:	782c      	ldrb	r4, [r5, #0]
 800ceb0:	3501      	adds	r5, #1
 800ceb2:	e7e4      	b.n	800ce7e <_strtoul_l.constprop.0+0x72>
 800ceb4:	2c2b      	cmp	r4, #43	; 0x2b
 800ceb6:	d1c2      	bne.n	800ce3e <_strtoul_l.constprop.0+0x32>
 800ceb8:	781c      	ldrb	r4, [r3, #0]
 800ceba:	1c95      	adds	r5, r2, #2
 800cebc:	e7bf      	b.n	800ce3e <_strtoul_l.constprop.0+0x32>
 800cebe:	0022      	movs	r2, r4
 800cec0:	3a61      	subs	r2, #97	; 0x61
 800cec2:	2a19      	cmp	r2, #25
 800cec4:	d9e2      	bls.n	800ce8c <_strtoul_l.constprop.0+0x80>
 800cec6:	1c5a      	adds	r2, r3, #1
 800cec8:	d108      	bne.n	800cedc <_strtoul_l.constprop.0+0xd0>
 800ceca:	2222      	movs	r2, #34	; 0x22
 800cecc:	9905      	ldr	r1, [sp, #20]
 800cece:	0018      	movs	r0, r3
 800ced0:	600a      	str	r2, [r1, #0]
 800ced2:	9a02      	ldr	r2, [sp, #8]
 800ced4:	2a00      	cmp	r2, #0
 800ced6:	d109      	bne.n	800ceec <_strtoul_l.constprop.0+0xe0>
 800ced8:	b007      	add	sp, #28
 800ceda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cedc:	2f00      	cmp	r7, #0
 800cede:	d000      	beq.n	800cee2 <_strtoul_l.constprop.0+0xd6>
 800cee0:	4240      	negs	r0, r0
 800cee2:	9a02      	ldr	r2, [sp, #8]
 800cee4:	2a00      	cmp	r2, #0
 800cee6:	d0f7      	beq.n	800ced8 <_strtoul_l.constprop.0+0xcc>
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <_strtoul_l.constprop.0+0xe4>
 800ceec:	1e6b      	subs	r3, r5, #1
 800ceee:	9301      	str	r3, [sp, #4]
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	9a01      	ldr	r2, [sp, #4]
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	e7ef      	b.n	800ced8 <_strtoul_l.constprop.0+0xcc>
 800cef8:	2430      	movs	r4, #48	; 0x30
 800cefa:	2e00      	cmp	r6, #0
 800cefc:	d1ad      	bne.n	800ce5a <_strtoul_l.constprop.0+0x4e>
 800cefe:	3608      	adds	r6, #8
 800cf00:	e7ab      	b.n	800ce5a <_strtoul_l.constprop.0+0x4e>
 800cf02:	2c30      	cmp	r4, #48	; 0x30
 800cf04:	d0a1      	beq.n	800ce4a <_strtoul_l.constprop.0+0x3e>
 800cf06:	260a      	movs	r6, #10
 800cf08:	e7a7      	b.n	800ce5a <_strtoul_l.constprop.0+0x4e>
 800cf0a:	46c0      	nop			; (mov r8, r8)
 800cf0c:	080159a1 	.word	0x080159a1

0800cf10 <_strtoul_r>:
 800cf10:	b510      	push	{r4, lr}
 800cf12:	f7ff ff7b 	bl	800ce0c <_strtoul_l.constprop.0>
 800cf16:	bd10      	pop	{r4, pc}

0800cf18 <strtoul>:
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	4c04      	ldr	r4, [pc, #16]	; (800cf2c <strtoul+0x14>)
 800cf1c:	0013      	movs	r3, r2
 800cf1e:	000a      	movs	r2, r1
 800cf20:	0001      	movs	r1, r0
 800cf22:	6820      	ldr	r0, [r4, #0]
 800cf24:	f7ff ff72 	bl	800ce0c <_strtoul_l.constprop.0>
 800cf28:	bd10      	pop	{r4, pc}
 800cf2a:	46c0      	nop			; (mov r8, r8)
 800cf2c:	200006d0 	.word	0x200006d0

0800cf30 <std>:
 800cf30:	2300      	movs	r3, #0
 800cf32:	b510      	push	{r4, lr}
 800cf34:	0004      	movs	r4, r0
 800cf36:	6003      	str	r3, [r0, #0]
 800cf38:	6043      	str	r3, [r0, #4]
 800cf3a:	6083      	str	r3, [r0, #8]
 800cf3c:	8181      	strh	r1, [r0, #12]
 800cf3e:	6643      	str	r3, [r0, #100]	; 0x64
 800cf40:	81c2      	strh	r2, [r0, #14]
 800cf42:	6103      	str	r3, [r0, #16]
 800cf44:	6143      	str	r3, [r0, #20]
 800cf46:	6183      	str	r3, [r0, #24]
 800cf48:	0019      	movs	r1, r3
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	305c      	adds	r0, #92	; 0x5c
 800cf4e:	f000 f97d 	bl	800d24c <memset>
 800cf52:	4b0b      	ldr	r3, [pc, #44]	; (800cf80 <std+0x50>)
 800cf54:	61e4      	str	r4, [r4, #28]
 800cf56:	6223      	str	r3, [r4, #32]
 800cf58:	4b0a      	ldr	r3, [pc, #40]	; (800cf84 <std+0x54>)
 800cf5a:	6263      	str	r3, [r4, #36]	; 0x24
 800cf5c:	4b0a      	ldr	r3, [pc, #40]	; (800cf88 <std+0x58>)
 800cf5e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <std+0x5c>)
 800cf62:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf64:	4b0a      	ldr	r3, [pc, #40]	; (800cf90 <std+0x60>)
 800cf66:	429c      	cmp	r4, r3
 800cf68:	d005      	beq.n	800cf76 <std+0x46>
 800cf6a:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <std+0x64>)
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	d002      	beq.n	800cf76 <std+0x46>
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <std+0x68>)
 800cf72:	429c      	cmp	r4, r3
 800cf74:	d103      	bne.n	800cf7e <std+0x4e>
 800cf76:	0020      	movs	r0, r4
 800cf78:	3058      	adds	r0, #88	; 0x58
 800cf7a:	f000 fa85 	bl	800d488 <__retarget_lock_init_recursive>
 800cf7e:	bd10      	pop	{r4, pc}
 800cf80:	0800d1b1 	.word	0x0800d1b1
 800cf84:	0800d1dd 	.word	0x0800d1dd
 800cf88:	0800d215 	.word	0x0800d215
 800cf8c:	0800d241 	.word	0x0800d241
 800cf90:	20000c88 	.word	0x20000c88
 800cf94:	20000cf0 	.word	0x20000cf0
 800cf98:	20000d58 	.word	0x20000d58

0800cf9c <stdio_exit_handler>:
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	4a03      	ldr	r2, [pc, #12]	; (800cfac <stdio_exit_handler+0x10>)
 800cfa0:	4903      	ldr	r1, [pc, #12]	; (800cfb0 <stdio_exit_handler+0x14>)
 800cfa2:	4804      	ldr	r0, [pc, #16]	; (800cfb4 <stdio_exit_handler+0x18>)
 800cfa4:	f000 f86c 	bl	800d080 <_fwalk_sglue>
 800cfa8:	bd10      	pop	{r4, pc}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	20000438 	.word	0x20000438
 800cfb0:	08010f89 	.word	0x08010f89
 800cfb4:	200005b0 	.word	0x200005b0

0800cfb8 <cleanup_stdio>:
 800cfb8:	6841      	ldr	r1, [r0, #4]
 800cfba:	4b0b      	ldr	r3, [pc, #44]	; (800cfe8 <cleanup_stdio+0x30>)
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	4299      	cmp	r1, r3
 800cfc2:	d001      	beq.n	800cfc8 <cleanup_stdio+0x10>
 800cfc4:	f003 ffe0 	bl	8010f88 <_fclose_r>
 800cfc8:	68a1      	ldr	r1, [r4, #8]
 800cfca:	4b08      	ldr	r3, [pc, #32]	; (800cfec <cleanup_stdio+0x34>)
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	d002      	beq.n	800cfd6 <cleanup_stdio+0x1e>
 800cfd0:	0020      	movs	r0, r4
 800cfd2:	f003 ffd9 	bl	8010f88 <_fclose_r>
 800cfd6:	68e1      	ldr	r1, [r4, #12]
 800cfd8:	4b05      	ldr	r3, [pc, #20]	; (800cff0 <cleanup_stdio+0x38>)
 800cfda:	4299      	cmp	r1, r3
 800cfdc:	d002      	beq.n	800cfe4 <cleanup_stdio+0x2c>
 800cfde:	0020      	movs	r0, r4
 800cfe0:	f003 ffd2 	bl	8010f88 <_fclose_r>
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	46c0      	nop			; (mov r8, r8)
 800cfe8:	20000c88 	.word	0x20000c88
 800cfec:	20000cf0 	.word	0x20000cf0
 800cff0:	20000d58 	.word	0x20000d58

0800cff4 <global_stdio_init.part.0>:
 800cff4:	b510      	push	{r4, lr}
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <global_stdio_init.part.0+0x28>)
 800cff8:	4a09      	ldr	r2, [pc, #36]	; (800d020 <global_stdio_init.part.0+0x2c>)
 800cffa:	2104      	movs	r1, #4
 800cffc:	601a      	str	r2, [r3, #0]
 800cffe:	4809      	ldr	r0, [pc, #36]	; (800d024 <global_stdio_init.part.0+0x30>)
 800d000:	2200      	movs	r2, #0
 800d002:	f7ff ff95 	bl	800cf30 <std>
 800d006:	2201      	movs	r2, #1
 800d008:	2109      	movs	r1, #9
 800d00a:	4807      	ldr	r0, [pc, #28]	; (800d028 <global_stdio_init.part.0+0x34>)
 800d00c:	f7ff ff90 	bl	800cf30 <std>
 800d010:	2202      	movs	r2, #2
 800d012:	2112      	movs	r1, #18
 800d014:	4805      	ldr	r0, [pc, #20]	; (800d02c <global_stdio_init.part.0+0x38>)
 800d016:	f7ff ff8b 	bl	800cf30 <std>
 800d01a:	bd10      	pop	{r4, pc}
 800d01c:	20000dc0 	.word	0x20000dc0
 800d020:	0800cf9d 	.word	0x0800cf9d
 800d024:	20000c88 	.word	0x20000c88
 800d028:	20000cf0 	.word	0x20000cf0
 800d02c:	20000d58 	.word	0x20000d58

0800d030 <__sfp_lock_acquire>:
 800d030:	b510      	push	{r4, lr}
 800d032:	4802      	ldr	r0, [pc, #8]	; (800d03c <__sfp_lock_acquire+0xc>)
 800d034:	f000 fa2a 	bl	800d48c <__retarget_lock_acquire_recursive>
 800d038:	bd10      	pop	{r4, pc}
 800d03a:	46c0      	nop			; (mov r8, r8)
 800d03c:	20000dca 	.word	0x20000dca

0800d040 <__sfp_lock_release>:
 800d040:	b510      	push	{r4, lr}
 800d042:	4802      	ldr	r0, [pc, #8]	; (800d04c <__sfp_lock_release+0xc>)
 800d044:	f000 fa23 	bl	800d48e <__retarget_lock_release_recursive>
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	46c0      	nop			; (mov r8, r8)
 800d04c:	20000dca 	.word	0x20000dca

0800d050 <__sinit>:
 800d050:	b510      	push	{r4, lr}
 800d052:	0004      	movs	r4, r0
 800d054:	f7ff ffec 	bl	800d030 <__sfp_lock_acquire>
 800d058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <__sinit+0x14>
 800d05e:	f7ff ffef 	bl	800d040 <__sfp_lock_release>
 800d062:	bd10      	pop	{r4, pc}
 800d064:	4b04      	ldr	r3, [pc, #16]	; (800d078 <__sinit+0x28>)
 800d066:	6363      	str	r3, [r4, #52]	; 0x34
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <__sinit+0x2c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1f6      	bne.n	800d05e <__sinit+0xe>
 800d070:	f7ff ffc0 	bl	800cff4 <global_stdio_init.part.0>
 800d074:	e7f3      	b.n	800d05e <__sinit+0xe>
 800d076:	46c0      	nop			; (mov r8, r8)
 800d078:	0800cfb9 	.word	0x0800cfb9
 800d07c:	20000dc0 	.word	0x20000dc0

0800d080 <_fwalk_sglue>:
 800d080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d082:	0014      	movs	r4, r2
 800d084:	2600      	movs	r6, #0
 800d086:	9000      	str	r0, [sp, #0]
 800d088:	9101      	str	r1, [sp, #4]
 800d08a:	68a5      	ldr	r5, [r4, #8]
 800d08c:	6867      	ldr	r7, [r4, #4]
 800d08e:	3f01      	subs	r7, #1
 800d090:	d504      	bpl.n	800d09c <_fwalk_sglue+0x1c>
 800d092:	6824      	ldr	r4, [r4, #0]
 800d094:	2c00      	cmp	r4, #0
 800d096:	d1f8      	bne.n	800d08a <_fwalk_sglue+0xa>
 800d098:	0030      	movs	r0, r6
 800d09a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d09c:	89ab      	ldrh	r3, [r5, #12]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d908      	bls.n	800d0b4 <_fwalk_sglue+0x34>
 800d0a2:	220e      	movs	r2, #14
 800d0a4:	5eab      	ldrsh	r3, [r5, r2]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	d004      	beq.n	800d0b4 <_fwalk_sglue+0x34>
 800d0aa:	0029      	movs	r1, r5
 800d0ac:	9800      	ldr	r0, [sp, #0]
 800d0ae:	9b01      	ldr	r3, [sp, #4]
 800d0b0:	4798      	blx	r3
 800d0b2:	4306      	orrs	r6, r0
 800d0b4:	3568      	adds	r5, #104	; 0x68
 800d0b6:	e7ea      	b.n	800d08e <_fwalk_sglue+0xe>

0800d0b8 <snprintf>:
 800d0b8:	b40c      	push	{r2, r3}
 800d0ba:	b530      	push	{r4, r5, lr}
 800d0bc:	4b17      	ldr	r3, [pc, #92]	; (800d11c <snprintf+0x64>)
 800d0be:	000c      	movs	r4, r1
 800d0c0:	681d      	ldr	r5, [r3, #0]
 800d0c2:	b09d      	sub	sp, #116	; 0x74
 800d0c4:	2900      	cmp	r1, #0
 800d0c6:	da08      	bge.n	800d0da <snprintf+0x22>
 800d0c8:	238b      	movs	r3, #139	; 0x8b
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	4240      	negs	r0, r0
 800d0d0:	b01d      	add	sp, #116	; 0x74
 800d0d2:	bc30      	pop	{r4, r5}
 800d0d4:	bc08      	pop	{r3}
 800d0d6:	b002      	add	sp, #8
 800d0d8:	4718      	bx	r3
 800d0da:	2382      	movs	r3, #130	; 0x82
 800d0dc:	466a      	mov	r2, sp
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	8293      	strh	r3, [r2, #20]
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	9002      	str	r0, [sp, #8]
 800d0e6:	9006      	str	r0, [sp, #24]
 800d0e8:	4299      	cmp	r1, r3
 800d0ea:	d000      	beq.n	800d0ee <snprintf+0x36>
 800d0ec:	1e4b      	subs	r3, r1, #1
 800d0ee:	9304      	str	r3, [sp, #16]
 800d0f0:	9307      	str	r3, [sp, #28]
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	466a      	mov	r2, sp
 800d0f6:	425b      	negs	r3, r3
 800d0f8:	82d3      	strh	r3, [r2, #22]
 800d0fa:	0028      	movs	r0, r5
 800d0fc:	ab21      	add	r3, sp, #132	; 0x84
 800d0fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d100:	a902      	add	r1, sp, #8
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	f001 fae2 	bl	800e6cc <_svfprintf_r>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	da01      	bge.n	800d110 <snprintf+0x58>
 800d10c:	238b      	movs	r3, #139	; 0x8b
 800d10e:	602b      	str	r3, [r5, #0]
 800d110:	2c00      	cmp	r4, #0
 800d112:	d0dd      	beq.n	800d0d0 <snprintf+0x18>
 800d114:	2200      	movs	r2, #0
 800d116:	9b02      	ldr	r3, [sp, #8]
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	e7d9      	b.n	800d0d0 <snprintf+0x18>
 800d11c:	200006d0 	.word	0x200006d0

0800d120 <sprintf>:
 800d120:	b40e      	push	{r1, r2, r3}
 800d122:	b500      	push	{lr}
 800d124:	490b      	ldr	r1, [pc, #44]	; (800d154 <sprintf+0x34>)
 800d126:	b09c      	sub	sp, #112	; 0x70
 800d128:	ab1d      	add	r3, sp, #116	; 0x74
 800d12a:	9002      	str	r0, [sp, #8]
 800d12c:	9006      	str	r0, [sp, #24]
 800d12e:	9107      	str	r1, [sp, #28]
 800d130:	9104      	str	r1, [sp, #16]
 800d132:	4809      	ldr	r0, [pc, #36]	; (800d158 <sprintf+0x38>)
 800d134:	4909      	ldr	r1, [pc, #36]	; (800d15c <sprintf+0x3c>)
 800d136:	cb04      	ldmia	r3!, {r2}
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	a902      	add	r1, sp, #8
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	f001 fac4 	bl	800e6cc <_svfprintf_r>
 800d144:	2200      	movs	r2, #0
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	b01c      	add	sp, #112	; 0x70
 800d14c:	bc08      	pop	{r3}
 800d14e:	b003      	add	sp, #12
 800d150:	4718      	bx	r3
 800d152:	46c0      	nop			; (mov r8, r8)
 800d154:	7fffffff 	.word	0x7fffffff
 800d158:	200006d0 	.word	0x200006d0
 800d15c:	ffff0208 	.word	0xffff0208

0800d160 <sscanf>:
 800d160:	b40e      	push	{r1, r2, r3}
 800d162:	b530      	push	{r4, r5, lr}
 800d164:	2381      	movs	r3, #129	; 0x81
 800d166:	b09c      	sub	sp, #112	; 0x70
 800d168:	466a      	mov	r2, sp
 800d16a:	ac1f      	add	r4, sp, #124	; 0x7c
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	cc20      	ldmia	r4!, {r5}
 800d170:	8293      	strh	r3, [r2, #20]
 800d172:	9002      	str	r0, [sp, #8]
 800d174:	9006      	str	r0, [sp, #24]
 800d176:	f7f2 ffc5 	bl	8000104 <strlen>
 800d17a:	4b0b      	ldr	r3, [pc, #44]	; (800d1a8 <sscanf+0x48>)
 800d17c:	466a      	mov	r2, sp
 800d17e:	930a      	str	r3, [sp, #40]	; 0x28
 800d180:	2300      	movs	r3, #0
 800d182:	9003      	str	r0, [sp, #12]
 800d184:	9007      	str	r0, [sp, #28]
 800d186:	4809      	ldr	r0, [pc, #36]	; (800d1ac <sscanf+0x4c>)
 800d188:	930e      	str	r3, [sp, #56]	; 0x38
 800d18a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d18c:	3b01      	subs	r3, #1
 800d18e:	82d3      	strh	r3, [r2, #22]
 800d190:	a902      	add	r1, sp, #8
 800d192:	0023      	movs	r3, r4
 800d194:	002a      	movs	r2, r5
 800d196:	6800      	ldr	r0, [r0, #0]
 800d198:	9401      	str	r4, [sp, #4]
 800d19a:	f002 fcd9 	bl	800fb50 <__ssvfscanf_r>
 800d19e:	b01c      	add	sp, #112	; 0x70
 800d1a0:	bc30      	pop	{r4, r5}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	b003      	add	sp, #12
 800d1a6:	4718      	bx	r3
 800d1a8:	0800d1d9 	.word	0x0800d1d9
 800d1ac:	200006d0 	.word	0x200006d0

0800d1b0 <__sread>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	000c      	movs	r4, r1
 800d1b4:	250e      	movs	r5, #14
 800d1b6:	5f49      	ldrsh	r1, [r1, r5]
 800d1b8:	f000 f902 	bl	800d3c0 <_read_r>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	db03      	blt.n	800d1c8 <__sread+0x18>
 800d1c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d1c2:	181b      	adds	r3, r3, r0
 800d1c4:	6523      	str	r3, [r4, #80]	; 0x50
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	4a02      	ldr	r2, [pc, #8]	; (800d1d4 <__sread+0x24>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	e7f9      	b.n	800d1c6 <__sread+0x16>
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	ffffefff 	.word	0xffffefff

0800d1d8 <__seofread>:
 800d1d8:	2000      	movs	r0, #0
 800d1da:	4770      	bx	lr

0800d1dc <__swrite>:
 800d1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1de:	001f      	movs	r7, r3
 800d1e0:	898b      	ldrh	r3, [r1, #12]
 800d1e2:	0005      	movs	r5, r0
 800d1e4:	000c      	movs	r4, r1
 800d1e6:	0016      	movs	r6, r2
 800d1e8:	05db      	lsls	r3, r3, #23
 800d1ea:	d505      	bpl.n	800d1f8 <__swrite+0x1c>
 800d1ec:	230e      	movs	r3, #14
 800d1ee:	5ec9      	ldrsh	r1, [r1, r3]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2302      	movs	r3, #2
 800d1f4:	f000 f8d0 	bl	800d398 <_lseek_r>
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	4a05      	ldr	r2, [pc, #20]	; (800d210 <__swrite+0x34>)
 800d1fc:	0028      	movs	r0, r5
 800d1fe:	4013      	ands	r3, r2
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	0032      	movs	r2, r6
 800d204:	230e      	movs	r3, #14
 800d206:	5ee1      	ldrsh	r1, [r4, r3]
 800d208:	003b      	movs	r3, r7
 800d20a:	f000 f8ff 	bl	800d40c <_write_r>
 800d20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d210:	ffffefff 	.word	0xffffefff

0800d214 <__sseek>:
 800d214:	b570      	push	{r4, r5, r6, lr}
 800d216:	000c      	movs	r4, r1
 800d218:	250e      	movs	r5, #14
 800d21a:	5f49      	ldrsh	r1, [r1, r5]
 800d21c:	f000 f8bc 	bl	800d398 <_lseek_r>
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	1c42      	adds	r2, r0, #1
 800d224:	d103      	bne.n	800d22e <__sseek+0x1a>
 800d226:	4a05      	ldr	r2, [pc, #20]	; (800d23c <__sseek+0x28>)
 800d228:	4013      	ands	r3, r2
 800d22a:	81a3      	strh	r3, [r4, #12]
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	2280      	movs	r2, #128	; 0x80
 800d230:	0152      	lsls	r2, r2, #5
 800d232:	4313      	orrs	r3, r2
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	6520      	str	r0, [r4, #80]	; 0x50
 800d238:	e7f8      	b.n	800d22c <__sseek+0x18>
 800d23a:	46c0      	nop			; (mov r8, r8)
 800d23c:	ffffefff 	.word	0xffffefff

0800d240 <__sclose>:
 800d240:	b510      	push	{r4, lr}
 800d242:	230e      	movs	r3, #14
 800d244:	5ec9      	ldrsh	r1, [r1, r3]
 800d246:	f000 f895 	bl	800d374 <_close_r>
 800d24a:	bd10      	pop	{r4, pc}

0800d24c <memset>:
 800d24c:	0003      	movs	r3, r0
 800d24e:	1882      	adds	r2, r0, r2
 800d250:	4293      	cmp	r3, r2
 800d252:	d100      	bne.n	800d256 <memset+0xa>
 800d254:	4770      	bx	lr
 800d256:	7019      	strb	r1, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	e7f9      	b.n	800d250 <memset+0x4>

0800d25c <strchr>:
 800d25c:	b2c9      	uxtb	r1, r1
 800d25e:	7803      	ldrb	r3, [r0, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <strchr+0x12>
 800d264:	428b      	cmp	r3, r1
 800d266:	d100      	bne.n	800d26a <strchr+0xe>
 800d268:	4770      	bx	lr
 800d26a:	3001      	adds	r0, #1
 800d26c:	e7f7      	b.n	800d25e <strchr+0x2>
 800d26e:	424b      	negs	r3, r1
 800d270:	4159      	adcs	r1, r3
 800d272:	4249      	negs	r1, r1
 800d274:	4008      	ands	r0, r1
 800d276:	e7f7      	b.n	800d268 <strchr+0xc>

0800d278 <strncmp>:
 800d278:	b530      	push	{r4, r5, lr}
 800d27a:	0005      	movs	r5, r0
 800d27c:	1e10      	subs	r0, r2, #0
 800d27e:	d00b      	beq.n	800d298 <strncmp+0x20>
 800d280:	2400      	movs	r4, #0
 800d282:	3a01      	subs	r2, #1
 800d284:	5d2b      	ldrb	r3, [r5, r4]
 800d286:	5d08      	ldrb	r0, [r1, r4]
 800d288:	4283      	cmp	r3, r0
 800d28a:	d104      	bne.n	800d296 <strncmp+0x1e>
 800d28c:	42a2      	cmp	r2, r4
 800d28e:	d002      	beq.n	800d296 <strncmp+0x1e>
 800d290:	3401      	adds	r4, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1f6      	bne.n	800d284 <strncmp+0xc>
 800d296:	1a18      	subs	r0, r3, r0
 800d298:	bd30      	pop	{r4, r5, pc}

0800d29a <strncpy>:
 800d29a:	0003      	movs	r3, r0
 800d29c:	b530      	push	{r4, r5, lr}
 800d29e:	001d      	movs	r5, r3
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	d006      	beq.n	800d2b2 <strncpy+0x18>
 800d2a4:	780c      	ldrb	r4, [r1, #0]
 800d2a6:	3a01      	subs	r2, #1
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	702c      	strb	r4, [r5, #0]
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	d1f5      	bne.n	800d29e <strncpy+0x4>
 800d2b2:	2100      	movs	r1, #0
 800d2b4:	189a      	adds	r2, r3, r2
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d100      	bne.n	800d2bc <strncpy+0x22>
 800d2ba:	bd30      	pop	{r4, r5, pc}
 800d2bc:	7019      	strb	r1, [r3, #0]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	e7f9      	b.n	800d2b6 <strncpy+0x1c>
	...

0800d2c4 <strtok>:
 800d2c4:	4b03      	ldr	r3, [pc, #12]	; (800d2d4 <strtok+0x10>)
 800d2c6:	b510      	push	{r4, lr}
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	3250      	adds	r2, #80	; 0x50
 800d2ce:	f000 f803 	bl	800d2d8 <__strtok_r>
 800d2d2:	bd10      	pop	{r4, pc}
 800d2d4:	200006d0 	.word	0x200006d0

0800d2d8 <__strtok_r>:
 800d2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d102      	bne.n	800d2e4 <__strtok_r+0xc>
 800d2de:	6810      	ldr	r0, [r2, #0]
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d013      	beq.n	800d30c <__strtok_r+0x34>
 800d2e4:	0004      	movs	r4, r0
 800d2e6:	0020      	movs	r0, r4
 800d2e8:	000e      	movs	r6, r1
 800d2ea:	7805      	ldrb	r5, [r0, #0]
 800d2ec:	3401      	adds	r4, #1
 800d2ee:	7837      	ldrb	r7, [r6, #0]
 800d2f0:	2f00      	cmp	r7, #0
 800d2f2:	d104      	bne.n	800d2fe <__strtok_r+0x26>
 800d2f4:	2d00      	cmp	r5, #0
 800d2f6:	d10f      	bne.n	800d318 <__strtok_r+0x40>
 800d2f8:	0028      	movs	r0, r5
 800d2fa:	6015      	str	r5, [r2, #0]
 800d2fc:	e006      	b.n	800d30c <__strtok_r+0x34>
 800d2fe:	3601      	adds	r6, #1
 800d300:	42bd      	cmp	r5, r7
 800d302:	d1f4      	bne.n	800d2ee <__strtok_r+0x16>
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1ee      	bne.n	800d2e6 <__strtok_r+0xe>
 800d308:	6014      	str	r4, [r2, #0]
 800d30a:	7003      	strb	r3, [r0, #0]
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30e:	002f      	movs	r7, r5
 800d310:	e00f      	b.n	800d332 <__strtok_r+0x5a>
 800d312:	3301      	adds	r3, #1
 800d314:	2e00      	cmp	r6, #0
 800d316:	d104      	bne.n	800d322 <__strtok_r+0x4a>
 800d318:	0023      	movs	r3, r4
 800d31a:	3401      	adds	r4, #1
 800d31c:	781d      	ldrb	r5, [r3, #0]
 800d31e:	0027      	movs	r7, r4
 800d320:	000b      	movs	r3, r1
 800d322:	781e      	ldrb	r6, [r3, #0]
 800d324:	42b5      	cmp	r5, r6
 800d326:	d1f4      	bne.n	800d312 <__strtok_r+0x3a>
 800d328:	2d00      	cmp	r5, #0
 800d32a:	d0f0      	beq.n	800d30e <__strtok_r+0x36>
 800d32c:	2300      	movs	r3, #0
 800d32e:	3c01      	subs	r4, #1
 800d330:	7023      	strb	r3, [r4, #0]
 800d332:	6017      	str	r7, [r2, #0]
 800d334:	e7ea      	b.n	800d30c <__strtok_r+0x34>

0800d336 <strstr>:
 800d336:	780a      	ldrb	r2, [r1, #0]
 800d338:	b530      	push	{r4, r5, lr}
 800d33a:	2a00      	cmp	r2, #0
 800d33c:	d10c      	bne.n	800d358 <strstr+0x22>
 800d33e:	bd30      	pop	{r4, r5, pc}
 800d340:	429a      	cmp	r2, r3
 800d342:	d108      	bne.n	800d356 <strstr+0x20>
 800d344:	2301      	movs	r3, #1
 800d346:	5ccc      	ldrb	r4, [r1, r3]
 800d348:	2c00      	cmp	r4, #0
 800d34a:	d0f8      	beq.n	800d33e <strstr+0x8>
 800d34c:	5cc5      	ldrb	r5, [r0, r3]
 800d34e:	42a5      	cmp	r5, r4
 800d350:	d101      	bne.n	800d356 <strstr+0x20>
 800d352:	3301      	adds	r3, #1
 800d354:	e7f7      	b.n	800d346 <strstr+0x10>
 800d356:	3001      	adds	r0, #1
 800d358:	7803      	ldrb	r3, [r0, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1f0      	bne.n	800d340 <strstr+0xa>
 800d35e:	0018      	movs	r0, r3
 800d360:	e7ed      	b.n	800d33e <strstr+0x8>
	...

0800d364 <__locale_mb_cur_max>:
 800d364:	2294      	movs	r2, #148	; 0x94
 800d366:	4b02      	ldr	r3, [pc, #8]	; (800d370 <__locale_mb_cur_max+0xc>)
 800d368:	0052      	lsls	r2, r2, #1
 800d36a:	5c98      	ldrb	r0, [r3, r2]
 800d36c:	4770      	bx	lr
 800d36e:	46c0      	nop			; (mov r8, r8)
 800d370:	20000444 	.word	0x20000444

0800d374 <_close_r>:
 800d374:	2300      	movs	r3, #0
 800d376:	b570      	push	{r4, r5, r6, lr}
 800d378:	4d06      	ldr	r5, [pc, #24]	; (800d394 <_close_r+0x20>)
 800d37a:	0004      	movs	r4, r0
 800d37c:	0008      	movs	r0, r1
 800d37e:	602b      	str	r3, [r5, #0]
 800d380:	f7f6 ffa7 	bl	80042d2 <_close>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d103      	bne.n	800d390 <_close_r+0x1c>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d000      	beq.n	800d390 <_close_r+0x1c>
 800d38e:	6023      	str	r3, [r4, #0]
 800d390:	bd70      	pop	{r4, r5, r6, pc}
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	20000dc4 	.word	0x20000dc4

0800d398 <_lseek_r>:
 800d398:	b570      	push	{r4, r5, r6, lr}
 800d39a:	0004      	movs	r4, r0
 800d39c:	0008      	movs	r0, r1
 800d39e:	0011      	movs	r1, r2
 800d3a0:	001a      	movs	r2, r3
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	4d05      	ldr	r5, [pc, #20]	; (800d3bc <_lseek_r+0x24>)
 800d3a6:	602b      	str	r3, [r5, #0]
 800d3a8:	f7f6 ffb4 	bl	8004314 <_lseek>
 800d3ac:	1c43      	adds	r3, r0, #1
 800d3ae:	d103      	bne.n	800d3b8 <_lseek_r+0x20>
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d000      	beq.n	800d3b8 <_lseek_r+0x20>
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ba:	46c0      	nop			; (mov r8, r8)
 800d3bc:	20000dc4 	.word	0x20000dc4

0800d3c0 <_read_r>:
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	0004      	movs	r4, r0
 800d3c4:	0008      	movs	r0, r1
 800d3c6:	0011      	movs	r1, r2
 800d3c8:	001a      	movs	r2, r3
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	4d05      	ldr	r5, [pc, #20]	; (800d3e4 <_read_r+0x24>)
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f6 ff46 	bl	8004260 <_read>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d103      	bne.n	800d3e0 <_read_r+0x20>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d000      	beq.n	800d3e0 <_read_r+0x20>
 800d3de:	6023      	str	r3, [r4, #0]
 800d3e0:	bd70      	pop	{r4, r5, r6, pc}
 800d3e2:	46c0      	nop			; (mov r8, r8)
 800d3e4:	20000dc4 	.word	0x20000dc4

0800d3e8 <_sbrk_r>:
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	b570      	push	{r4, r5, r6, lr}
 800d3ec:	4d06      	ldr	r5, [pc, #24]	; (800d408 <_sbrk_r+0x20>)
 800d3ee:	0004      	movs	r4, r0
 800d3f0:	0008      	movs	r0, r1
 800d3f2:	602b      	str	r3, [r5, #0]
 800d3f4:	f7f6 ff9a 	bl	800432c <_sbrk>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d103      	bne.n	800d404 <_sbrk_r+0x1c>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d000      	beq.n	800d404 <_sbrk_r+0x1c>
 800d402:	6023      	str	r3, [r4, #0]
 800d404:	bd70      	pop	{r4, r5, r6, pc}
 800d406:	46c0      	nop			; (mov r8, r8)
 800d408:	20000dc4 	.word	0x20000dc4

0800d40c <_write_r>:
 800d40c:	b570      	push	{r4, r5, r6, lr}
 800d40e:	0004      	movs	r4, r0
 800d410:	0008      	movs	r0, r1
 800d412:	0011      	movs	r1, r2
 800d414:	001a      	movs	r2, r3
 800d416:	2300      	movs	r3, #0
 800d418:	4d05      	ldr	r5, [pc, #20]	; (800d430 <_write_r+0x24>)
 800d41a:	602b      	str	r3, [r5, #0]
 800d41c:	f7f6 ff3d 	bl	800429a <_write>
 800d420:	1c43      	adds	r3, r0, #1
 800d422:	d103      	bne.n	800d42c <_write_r+0x20>
 800d424:	682b      	ldr	r3, [r5, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d000      	beq.n	800d42c <_write_r+0x20>
 800d42a:	6023      	str	r3, [r4, #0]
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	46c0      	nop			; (mov r8, r8)
 800d430:	20000dc4 	.word	0x20000dc4

0800d434 <__errno>:
 800d434:	4b01      	ldr	r3, [pc, #4]	; (800d43c <__errno+0x8>)
 800d436:	6818      	ldr	r0, [r3, #0]
 800d438:	4770      	bx	lr
 800d43a:	46c0      	nop			; (mov r8, r8)
 800d43c:	200006d0 	.word	0x200006d0

0800d440 <__libc_init_array>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	2600      	movs	r6, #0
 800d444:	4c0c      	ldr	r4, [pc, #48]	; (800d478 <__libc_init_array+0x38>)
 800d446:	4d0d      	ldr	r5, [pc, #52]	; (800d47c <__libc_init_array+0x3c>)
 800d448:	1b64      	subs	r4, r4, r5
 800d44a:	10a4      	asrs	r4, r4, #2
 800d44c:	42a6      	cmp	r6, r4
 800d44e:	d109      	bne.n	800d464 <__libc_init_array+0x24>
 800d450:	2600      	movs	r6, #0
 800d452:	f006 fc3f 	bl	8013cd4 <_init>
 800d456:	4c0a      	ldr	r4, [pc, #40]	; (800d480 <__libc_init_array+0x40>)
 800d458:	4d0a      	ldr	r5, [pc, #40]	; (800d484 <__libc_init_array+0x44>)
 800d45a:	1b64      	subs	r4, r4, r5
 800d45c:	10a4      	asrs	r4, r4, #2
 800d45e:	42a6      	cmp	r6, r4
 800d460:	d105      	bne.n	800d46e <__libc_init_array+0x2e>
 800d462:	bd70      	pop	{r4, r5, r6, pc}
 800d464:	00b3      	lsls	r3, r6, #2
 800d466:	58eb      	ldr	r3, [r5, r3]
 800d468:	4798      	blx	r3
 800d46a:	3601      	adds	r6, #1
 800d46c:	e7ee      	b.n	800d44c <__libc_init_array+0xc>
 800d46e:	00b3      	lsls	r3, r6, #2
 800d470:	58eb      	ldr	r3, [r5, r3]
 800d472:	4798      	blx	r3
 800d474:	3601      	adds	r6, #1
 800d476:	e7f2      	b.n	800d45e <__libc_init_array+0x1e>
 800d478:	08015dbc 	.word	0x08015dbc
 800d47c:	08015dbc 	.word	0x08015dbc
 800d480:	08015dc4 	.word	0x08015dc4
 800d484:	08015dbc 	.word	0x08015dbc

0800d488 <__retarget_lock_init_recursive>:
 800d488:	4770      	bx	lr

0800d48a <__retarget_lock_close_recursive>:
 800d48a:	4770      	bx	lr

0800d48c <__retarget_lock_acquire_recursive>:
 800d48c:	4770      	bx	lr

0800d48e <__retarget_lock_release_recursive>:
 800d48e:	4770      	bx	lr

0800d490 <sysconf>:
 800d490:	2380      	movs	r3, #128	; 0x80
 800d492:	b510      	push	{r4, lr}
 800d494:	2808      	cmp	r0, #8
 800d496:	d004      	beq.n	800d4a2 <sysconf+0x12>
 800d498:	f7ff ffcc 	bl	800d434 <__errno>
 800d49c:	2316      	movs	r3, #22
 800d49e:	6003      	str	r3, [r0, #0]
 800d4a0:	3b17      	subs	r3, #23
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	bd10      	pop	{r4, pc}

0800d4a6 <memcpy>:
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	b510      	push	{r4, lr}
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d100      	bne.n	800d4b0 <memcpy+0xa>
 800d4ae:	bd10      	pop	{r4, pc}
 800d4b0:	5ccc      	ldrb	r4, [r1, r3]
 800d4b2:	54c4      	strb	r4, [r0, r3]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	e7f8      	b.n	800d4aa <memcpy+0x4>

0800d4b8 <nan>:
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	4901      	ldr	r1, [pc, #4]	; (800d4c0 <nan+0x8>)
 800d4bc:	4770      	bx	lr
 800d4be:	46c0      	nop			; (mov r8, r8)
 800d4c0:	7ff80000 	.word	0x7ff80000

0800d4c4 <nanf>:
 800d4c4:	4800      	ldr	r0, [pc, #0]	; (800d4c8 <nanf+0x4>)
 800d4c6:	4770      	bx	lr
 800d4c8:	7fc00000 	.word	0x7fc00000

0800d4cc <register_fini>:
 800d4cc:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <register_fini+0x10>)
 800d4ce:	b510      	push	{r4, lr}
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <register_fini+0xe>
 800d4d4:	4802      	ldr	r0, [pc, #8]	; (800d4e0 <register_fini+0x14>)
 800d4d6:	f000 f805 	bl	800d4e4 <atexit>
 800d4da:	bd10      	pop	{r4, pc}
 800d4dc:	00000000 	.word	0x00000000
 800d4e0:	08011241 	.word	0x08011241

0800d4e4 <atexit>:
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	b510      	push	{r4, lr}
 800d4e8:	0001      	movs	r1, r0
 800d4ea:	001a      	movs	r2, r3
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	f003 fef9 	bl	80112e4 <__register_exitproc>
 800d4f2:	bd10      	pop	{r4, pc}

0800d4f4 <_malloc_trim_r>:
 800d4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4f6:	0004      	movs	r4, r0
 800d4f8:	2008      	movs	r0, #8
 800d4fa:	000d      	movs	r5, r1
 800d4fc:	f7ff ffc8 	bl	800d490 <sysconf>
 800d500:	0006      	movs	r6, r0
 800d502:	0020      	movs	r0, r4
 800d504:	f7fe fda4 	bl	800c050 <__malloc_lock>
 800d508:	2203      	movs	r2, #3
 800d50a:	4f21      	ldr	r7, [pc, #132]	; (800d590 <_malloc_trim_r+0x9c>)
 800d50c:	0031      	movs	r1, r6
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	4393      	bics	r3, r2
 800d514:	1b58      	subs	r0, r3, r5
 800d516:	3811      	subs	r0, #17
 800d518:	1980      	adds	r0, r0, r6
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	f7f2 fe0e 	bl	800013c <__udivsi3>
 800d520:	1e45      	subs	r5, r0, #1
 800d522:	4375      	muls	r5, r6
 800d524:	42ae      	cmp	r6, r5
 800d526:	dd04      	ble.n	800d532 <_malloc_trim_r+0x3e>
 800d528:	0020      	movs	r0, r4
 800d52a:	f7fe fd99 	bl	800c060 <__malloc_unlock>
 800d52e:	2000      	movs	r0, #0
 800d530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d532:	2100      	movs	r1, #0
 800d534:	0020      	movs	r0, r4
 800d536:	f7ff ff57 	bl	800d3e8 <_sbrk_r>
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	9a01      	ldr	r2, [sp, #4]
 800d53e:	189b      	adds	r3, r3, r2
 800d540:	4298      	cmp	r0, r3
 800d542:	d1f1      	bne.n	800d528 <_malloc_trim_r+0x34>
 800d544:	0020      	movs	r0, r4
 800d546:	4269      	negs	r1, r5
 800d548:	f7ff ff4e 	bl	800d3e8 <_sbrk_r>
 800d54c:	3001      	adds	r0, #1
 800d54e:	d110      	bne.n	800d572 <_malloc_trim_r+0x7e>
 800d550:	2100      	movs	r1, #0
 800d552:	0020      	movs	r0, r4
 800d554:	f7ff ff48 	bl	800d3e8 <_sbrk_r>
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	1a81      	subs	r1, r0, r2
 800d55c:	290f      	cmp	r1, #15
 800d55e:	dde3      	ble.n	800d528 <_malloc_trim_r+0x34>
 800d560:	4d0c      	ldr	r5, [pc, #48]	; (800d594 <_malloc_trim_r+0xa0>)
 800d562:	4b0d      	ldr	r3, [pc, #52]	; (800d598 <_malloc_trim_r+0xa4>)
 800d564:	682d      	ldr	r5, [r5, #0]
 800d566:	1b40      	subs	r0, r0, r5
 800d568:	6018      	str	r0, [r3, #0]
 800d56a:	2301      	movs	r3, #1
 800d56c:	430b      	orrs	r3, r1
 800d56e:	6053      	str	r3, [r2, #4]
 800d570:	e7da      	b.n	800d528 <_malloc_trim_r+0x34>
 800d572:	2601      	movs	r6, #1
 800d574:	9b01      	ldr	r3, [sp, #4]
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	1b5b      	subs	r3, r3, r5
 800d57a:	4333      	orrs	r3, r6
 800d57c:	6053      	str	r3, [r2, #4]
 800d57e:	4a06      	ldr	r2, [pc, #24]	; (800d598 <_malloc_trim_r+0xa4>)
 800d580:	0020      	movs	r0, r4
 800d582:	6813      	ldr	r3, [r2, #0]
 800d584:	1b5b      	subs	r3, r3, r5
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	f7fe fd6a 	bl	800c060 <__malloc_unlock>
 800d58c:	0030      	movs	r0, r6
 800d58e:	e7cf      	b.n	800d530 <_malloc_trim_r+0x3c>
 800d590:	20000028 	.word	0x20000028
 800d594:	20000430 	.word	0x20000430
 800d598:	20000c54 	.word	0x20000c54

0800d59c <_free_r>:
 800d59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d59e:	1e0d      	subs	r5, r1, #0
 800d5a0:	9001      	str	r0, [sp, #4]
 800d5a2:	d02d      	beq.n	800d600 <_free_r+0x64>
 800d5a4:	f7fe fd54 	bl	800c050 <__malloc_lock>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	0029      	movs	r1, r5
 800d5ac:	469c      	mov	ip, r3
 800d5ae:	3908      	subs	r1, #8
 800d5b0:	684f      	ldr	r7, [r1, #4]
 800d5b2:	4662      	mov	r2, ip
 800d5b4:	003b      	movs	r3, r7
 800d5b6:	4664      	mov	r4, ip
 800d5b8:	4393      	bics	r3, r2
 800d5ba:	18c8      	adds	r0, r1, r3
 800d5bc:	6845      	ldr	r5, [r0, #4]
 800d5be:	3202      	adds	r2, #2
 800d5c0:	4395      	bics	r5, r2
 800d5c2:	4a4a      	ldr	r2, [pc, #296]	; (800d6ec <_free_r+0x150>)
 800d5c4:	4027      	ands	r7, r4
 800d5c6:	6896      	ldr	r6, [r2, #8]
 800d5c8:	4286      	cmp	r6, r0
 800d5ca:	d11a      	bne.n	800d602 <_free_r+0x66>
 800d5cc:	195b      	adds	r3, r3, r5
 800d5ce:	2f00      	cmp	r7, #0
 800d5d0:	d106      	bne.n	800d5e0 <_free_r+0x44>
 800d5d2:	6808      	ldr	r0, [r1, #0]
 800d5d4:	1a09      	subs	r1, r1, r0
 800d5d6:	688d      	ldr	r5, [r1, #8]
 800d5d8:	181b      	adds	r3, r3, r0
 800d5da:	68c8      	ldr	r0, [r1, #12]
 800d5dc:	60e8      	str	r0, [r5, #12]
 800d5de:	6085      	str	r5, [r0, #8]
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	4318      	orrs	r0, r3
 800d5e4:	6048      	str	r0, [r1, #4]
 800d5e6:	6091      	str	r1, [r2, #8]
 800d5e8:	4a41      	ldr	r2, [pc, #260]	; (800d6f0 <_free_r+0x154>)
 800d5ea:	6812      	ldr	r2, [r2, #0]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d804      	bhi.n	800d5fa <_free_r+0x5e>
 800d5f0:	4b40      	ldr	r3, [pc, #256]	; (800d6f4 <_free_r+0x158>)
 800d5f2:	9801      	ldr	r0, [sp, #4]
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	f7ff ff7d 	bl	800d4f4 <_malloc_trim_r>
 800d5fa:	9801      	ldr	r0, [sp, #4]
 800d5fc:	f7fe fd30 	bl	800c060 <__malloc_unlock>
 800d600:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d602:	2600      	movs	r6, #0
 800d604:	6045      	str	r5, [r0, #4]
 800d606:	42b7      	cmp	r7, r6
 800d608:	d109      	bne.n	800d61e <_free_r+0x82>
 800d60a:	680f      	ldr	r7, [r1, #0]
 800d60c:	4c3a      	ldr	r4, [pc, #232]	; (800d6f8 <_free_r+0x15c>)
 800d60e:	1bc9      	subs	r1, r1, r7
 800d610:	19db      	adds	r3, r3, r7
 800d612:	688f      	ldr	r7, [r1, #8]
 800d614:	42a7      	cmp	r7, r4
 800d616:	d02c      	beq.n	800d672 <_free_r+0xd6>
 800d618:	68cc      	ldr	r4, [r1, #12]
 800d61a:	60fc      	str	r4, [r7, #12]
 800d61c:	60a7      	str	r7, [r4, #8]
 800d61e:	1947      	adds	r7, r0, r5
 800d620:	687c      	ldr	r4, [r7, #4]
 800d622:	2701      	movs	r7, #1
 800d624:	423c      	tst	r4, r7
 800d626:	d10b      	bne.n	800d640 <_free_r+0xa4>
 800d628:	195b      	adds	r3, r3, r5
 800d62a:	6885      	ldr	r5, [r0, #8]
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	d122      	bne.n	800d676 <_free_r+0xda>
 800d630:	4c31      	ldr	r4, [pc, #196]	; (800d6f8 <_free_r+0x15c>)
 800d632:	42a5      	cmp	r5, r4
 800d634:	d11f      	bne.n	800d676 <_free_r+0xda>
 800d636:	003e      	movs	r6, r7
 800d638:	6151      	str	r1, [r2, #20]
 800d63a:	6111      	str	r1, [r2, #16]
 800d63c:	60cd      	str	r5, [r1, #12]
 800d63e:	608d      	str	r5, [r1, #8]
 800d640:	2501      	movs	r5, #1
 800d642:	0028      	movs	r0, r5
 800d644:	4318      	orrs	r0, r3
 800d646:	6048      	str	r0, [r1, #4]
 800d648:	50cb      	str	r3, [r1, r3]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	d1d5      	bne.n	800d5fa <_free_r+0x5e>
 800d64e:	2080      	movs	r0, #128	; 0x80
 800d650:	0080      	lsls	r0, r0, #2
 800d652:	4283      	cmp	r3, r0
 800d654:	d213      	bcs.n	800d67e <_free_r+0xe2>
 800d656:	08d8      	lsrs	r0, r3, #3
 800d658:	095b      	lsrs	r3, r3, #5
 800d65a:	409d      	lsls	r5, r3
 800d65c:	6853      	ldr	r3, [r2, #4]
 800d65e:	431d      	orrs	r5, r3
 800d660:	00c3      	lsls	r3, r0, #3
 800d662:	189b      	adds	r3, r3, r2
 800d664:	6055      	str	r5, [r2, #4]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	60cb      	str	r3, [r1, #12]
 800d66a:	608a      	str	r2, [r1, #8]
 800d66c:	6099      	str	r1, [r3, #8]
 800d66e:	60d1      	str	r1, [r2, #12]
 800d670:	e7c3      	b.n	800d5fa <_free_r+0x5e>
 800d672:	4666      	mov	r6, ip
 800d674:	e7d3      	b.n	800d61e <_free_r+0x82>
 800d676:	68c0      	ldr	r0, [r0, #12]
 800d678:	60e8      	str	r0, [r5, #12]
 800d67a:	6085      	str	r5, [r0, #8]
 800d67c:	e7e0      	b.n	800d640 <_free_r+0xa4>
 800d67e:	0a5d      	lsrs	r5, r3, #9
 800d680:	2d04      	cmp	r5, #4
 800d682:	d812      	bhi.n	800d6aa <_free_r+0x10e>
 800d684:	0998      	lsrs	r0, r3, #6
 800d686:	3038      	adds	r0, #56	; 0x38
 800d688:	00c6      	lsls	r6, r0, #3
 800d68a:	18b6      	adds	r6, r6, r2
 800d68c:	68b5      	ldr	r5, [r6, #8]
 800d68e:	2703      	movs	r7, #3
 800d690:	42ae      	cmp	r6, r5
 800d692:	d125      	bne.n	800d6e0 <_free_r+0x144>
 800d694:	2301      	movs	r3, #1
 800d696:	1080      	asrs	r0, r0, #2
 800d698:	4083      	lsls	r3, r0
 800d69a:	6850      	ldr	r0, [r2, #4]
 800d69c:	4303      	orrs	r3, r0
 800d69e:	6053      	str	r3, [r2, #4]
 800d6a0:	60ce      	str	r6, [r1, #12]
 800d6a2:	608d      	str	r5, [r1, #8]
 800d6a4:	60b1      	str	r1, [r6, #8]
 800d6a6:	60e9      	str	r1, [r5, #12]
 800d6a8:	e7a7      	b.n	800d5fa <_free_r+0x5e>
 800d6aa:	2d14      	cmp	r5, #20
 800d6ac:	d802      	bhi.n	800d6b4 <_free_r+0x118>
 800d6ae:	0028      	movs	r0, r5
 800d6b0:	305b      	adds	r0, #91	; 0x5b
 800d6b2:	e7e9      	b.n	800d688 <_free_r+0xec>
 800d6b4:	2d54      	cmp	r5, #84	; 0x54
 800d6b6:	d802      	bhi.n	800d6be <_free_r+0x122>
 800d6b8:	0b18      	lsrs	r0, r3, #12
 800d6ba:	306e      	adds	r0, #110	; 0x6e
 800d6bc:	e7e4      	b.n	800d688 <_free_r+0xec>
 800d6be:	20aa      	movs	r0, #170	; 0xaa
 800d6c0:	0040      	lsls	r0, r0, #1
 800d6c2:	4285      	cmp	r5, r0
 800d6c4:	d802      	bhi.n	800d6cc <_free_r+0x130>
 800d6c6:	0bd8      	lsrs	r0, r3, #15
 800d6c8:	3077      	adds	r0, #119	; 0x77
 800d6ca:	e7dd      	b.n	800d688 <_free_r+0xec>
 800d6cc:	4e0b      	ldr	r6, [pc, #44]	; (800d6fc <_free_r+0x160>)
 800d6ce:	207e      	movs	r0, #126	; 0x7e
 800d6d0:	42b5      	cmp	r5, r6
 800d6d2:	d8d9      	bhi.n	800d688 <_free_r+0xec>
 800d6d4:	0c98      	lsrs	r0, r3, #18
 800d6d6:	307c      	adds	r0, #124	; 0x7c
 800d6d8:	e7d6      	b.n	800d688 <_free_r+0xec>
 800d6da:	68ad      	ldr	r5, [r5, #8]
 800d6dc:	42ae      	cmp	r6, r5
 800d6de:	d003      	beq.n	800d6e8 <_free_r+0x14c>
 800d6e0:	686a      	ldr	r2, [r5, #4]
 800d6e2:	43ba      	bics	r2, r7
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d8f8      	bhi.n	800d6da <_free_r+0x13e>
 800d6e8:	68ee      	ldr	r6, [r5, #12]
 800d6ea:	e7d9      	b.n	800d6a0 <_free_r+0x104>
 800d6ec:	20000028 	.word	0x20000028
 800d6f0:	20000434 	.word	0x20000434
 800d6f4:	20000c84 	.word	0x20000c84
 800d6f8:	20000030 	.word	0x20000030
 800d6fc:	00000554 	.word	0x00000554

0800d700 <rshift>:
 800d700:	0002      	movs	r2, r0
 800d702:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d704:	6904      	ldr	r4, [r0, #16]
 800d706:	114b      	asrs	r3, r1, #5
 800d708:	b085      	sub	sp, #20
 800d70a:	3214      	adds	r2, #20
 800d70c:	9302      	str	r3, [sp, #8]
 800d70e:	114d      	asrs	r5, r1, #5
 800d710:	0013      	movs	r3, r2
 800d712:	42ac      	cmp	r4, r5
 800d714:	dd32      	ble.n	800d77c <rshift+0x7c>
 800d716:	261f      	movs	r6, #31
 800d718:	000f      	movs	r7, r1
 800d71a:	114b      	asrs	r3, r1, #5
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	00a5      	lsls	r5, r4, #2
 800d720:	18d3      	adds	r3, r2, r3
 800d722:	4037      	ands	r7, r6
 800d724:	1955      	adds	r5, r2, r5
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	9701      	str	r7, [sp, #4]
 800d72a:	4231      	tst	r1, r6
 800d72c:	d10d      	bne.n	800d74a <rshift+0x4a>
 800d72e:	0016      	movs	r6, r2
 800d730:	0019      	movs	r1, r3
 800d732:	428d      	cmp	r5, r1
 800d734:	d836      	bhi.n	800d7a4 <rshift+0xa4>
 800d736:	9900      	ldr	r1, [sp, #0]
 800d738:	2300      	movs	r3, #0
 800d73a:	3903      	subs	r1, #3
 800d73c:	428d      	cmp	r5, r1
 800d73e:	d302      	bcc.n	800d746 <rshift+0x46>
 800d740:	9b02      	ldr	r3, [sp, #8]
 800d742:	1ae4      	subs	r4, r4, r3
 800d744:	00a3      	lsls	r3, r4, #2
 800d746:	18d3      	adds	r3, r2, r3
 800d748:	e018      	b.n	800d77c <rshift+0x7c>
 800d74a:	2120      	movs	r1, #32
 800d74c:	9e01      	ldr	r6, [sp, #4]
 800d74e:	9f01      	ldr	r7, [sp, #4]
 800d750:	1b89      	subs	r1, r1, r6
 800d752:	9e00      	ldr	r6, [sp, #0]
 800d754:	9103      	str	r1, [sp, #12]
 800d756:	ce02      	ldmia	r6!, {r1}
 800d758:	4694      	mov	ip, r2
 800d75a:	40f9      	lsrs	r1, r7
 800d75c:	42b5      	cmp	r5, r6
 800d75e:	d816      	bhi.n	800d78e <rshift+0x8e>
 800d760:	9e00      	ldr	r6, [sp, #0]
 800d762:	2300      	movs	r3, #0
 800d764:	3601      	adds	r6, #1
 800d766:	42b5      	cmp	r5, r6
 800d768:	d303      	bcc.n	800d772 <rshift+0x72>
 800d76a:	9b02      	ldr	r3, [sp, #8]
 800d76c:	1ae3      	subs	r3, r4, r3
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	3b04      	subs	r3, #4
 800d772:	18d3      	adds	r3, r2, r3
 800d774:	6019      	str	r1, [r3, #0]
 800d776:	2900      	cmp	r1, #0
 800d778:	d000      	beq.n	800d77c <rshift+0x7c>
 800d77a:	3304      	adds	r3, #4
 800d77c:	1a99      	subs	r1, r3, r2
 800d77e:	1089      	asrs	r1, r1, #2
 800d780:	6101      	str	r1, [r0, #16]
 800d782:	4293      	cmp	r3, r2
 800d784:	d101      	bne.n	800d78a <rshift+0x8a>
 800d786:	2300      	movs	r3, #0
 800d788:	6143      	str	r3, [r0, #20]
 800d78a:	b005      	add	sp, #20
 800d78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d78e:	6837      	ldr	r7, [r6, #0]
 800d790:	9b03      	ldr	r3, [sp, #12]
 800d792:	409f      	lsls	r7, r3
 800d794:	430f      	orrs	r7, r1
 800d796:	4661      	mov	r1, ip
 800d798:	c180      	stmia	r1!, {r7}
 800d79a:	468c      	mov	ip, r1
 800d79c:	9b01      	ldr	r3, [sp, #4]
 800d79e:	ce02      	ldmia	r6!, {r1}
 800d7a0:	40d9      	lsrs	r1, r3
 800d7a2:	e7db      	b.n	800d75c <rshift+0x5c>
 800d7a4:	c980      	ldmia	r1!, {r7}
 800d7a6:	c680      	stmia	r6!, {r7}
 800d7a8:	e7c3      	b.n	800d732 <rshift+0x32>

0800d7aa <__hexdig_fun>:
 800d7aa:	0002      	movs	r2, r0
 800d7ac:	3a30      	subs	r2, #48	; 0x30
 800d7ae:	0003      	movs	r3, r0
 800d7b0:	2a09      	cmp	r2, #9
 800d7b2:	d802      	bhi.n	800d7ba <__hexdig_fun+0x10>
 800d7b4:	3b20      	subs	r3, #32
 800d7b6:	b2d8      	uxtb	r0, r3
 800d7b8:	4770      	bx	lr
 800d7ba:	0002      	movs	r2, r0
 800d7bc:	3a61      	subs	r2, #97	; 0x61
 800d7be:	2a05      	cmp	r2, #5
 800d7c0:	d801      	bhi.n	800d7c6 <__hexdig_fun+0x1c>
 800d7c2:	3b47      	subs	r3, #71	; 0x47
 800d7c4:	e7f7      	b.n	800d7b6 <__hexdig_fun+0xc>
 800d7c6:	001a      	movs	r2, r3
 800d7c8:	3a41      	subs	r2, #65	; 0x41
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	2a05      	cmp	r2, #5
 800d7ce:	d8f3      	bhi.n	800d7b8 <__hexdig_fun+0xe>
 800d7d0:	3b27      	subs	r3, #39	; 0x27
 800d7d2:	e7f0      	b.n	800d7b6 <__hexdig_fun+0xc>

0800d7d4 <__gethex>:
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d6:	b089      	sub	sp, #36	; 0x24
 800d7d8:	9307      	str	r3, [sp, #28]
 800d7da:	2302      	movs	r3, #2
 800d7dc:	9201      	str	r2, [sp, #4]
 800d7de:	680a      	ldr	r2, [r1, #0]
 800d7e0:	425b      	negs	r3, r3
 800d7e2:	9003      	str	r0, [sp, #12]
 800d7e4:	9106      	str	r1, [sp, #24]
 800d7e6:	1c96      	adds	r6, r2, #2
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	199a      	adds	r2, r3, r6
 800d7ec:	9600      	str	r6, [sp, #0]
 800d7ee:	9205      	str	r2, [sp, #20]
 800d7f0:	9a00      	ldr	r2, [sp, #0]
 800d7f2:	3601      	adds	r6, #1
 800d7f4:	7810      	ldrb	r0, [r2, #0]
 800d7f6:	2830      	cmp	r0, #48	; 0x30
 800d7f8:	d0f7      	beq.n	800d7ea <__gethex+0x16>
 800d7fa:	f7ff ffd6 	bl	800d7aa <__hexdig_fun>
 800d7fe:	2300      	movs	r3, #0
 800d800:	001d      	movs	r5, r3
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	4298      	cmp	r0, r3
 800d806:	d11d      	bne.n	800d844 <__gethex+0x70>
 800d808:	2201      	movs	r2, #1
 800d80a:	49a6      	ldr	r1, [pc, #664]	; (800daa4 <__gethex+0x2d0>)
 800d80c:	9800      	ldr	r0, [sp, #0]
 800d80e:	f7ff fd33 	bl	800d278 <strncmp>
 800d812:	0007      	movs	r7, r0
 800d814:	42a8      	cmp	r0, r5
 800d816:	d169      	bne.n	800d8ec <__gethex+0x118>
 800d818:	9b00      	ldr	r3, [sp, #0]
 800d81a:	0034      	movs	r4, r6
 800d81c:	7858      	ldrb	r0, [r3, #1]
 800d81e:	f7ff ffc4 	bl	800d7aa <__hexdig_fun>
 800d822:	2301      	movs	r3, #1
 800d824:	9302      	str	r3, [sp, #8]
 800d826:	42a8      	cmp	r0, r5
 800d828:	d02f      	beq.n	800d88a <__gethex+0xb6>
 800d82a:	9600      	str	r6, [sp, #0]
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	7818      	ldrb	r0, [r3, #0]
 800d830:	2830      	cmp	r0, #48	; 0x30
 800d832:	d009      	beq.n	800d848 <__gethex+0x74>
 800d834:	f7ff ffb9 	bl	800d7aa <__hexdig_fun>
 800d838:	4242      	negs	r2, r0
 800d83a:	4142      	adcs	r2, r0
 800d83c:	2301      	movs	r3, #1
 800d83e:	0035      	movs	r5, r6
 800d840:	9202      	str	r2, [sp, #8]
 800d842:	9305      	str	r3, [sp, #20]
 800d844:	9c00      	ldr	r4, [sp, #0]
 800d846:	e004      	b.n	800d852 <__gethex+0x7e>
 800d848:	9b00      	ldr	r3, [sp, #0]
 800d84a:	3301      	adds	r3, #1
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	e7ed      	b.n	800d82c <__gethex+0x58>
 800d850:	3401      	adds	r4, #1
 800d852:	7820      	ldrb	r0, [r4, #0]
 800d854:	f7ff ffa9 	bl	800d7aa <__hexdig_fun>
 800d858:	1e07      	subs	r7, r0, #0
 800d85a:	d1f9      	bne.n	800d850 <__gethex+0x7c>
 800d85c:	2201      	movs	r2, #1
 800d85e:	0020      	movs	r0, r4
 800d860:	4990      	ldr	r1, [pc, #576]	; (800daa4 <__gethex+0x2d0>)
 800d862:	f7ff fd09 	bl	800d278 <strncmp>
 800d866:	2800      	cmp	r0, #0
 800d868:	d10d      	bne.n	800d886 <__gethex+0xb2>
 800d86a:	2d00      	cmp	r5, #0
 800d86c:	d106      	bne.n	800d87c <__gethex+0xa8>
 800d86e:	3401      	adds	r4, #1
 800d870:	0025      	movs	r5, r4
 800d872:	7820      	ldrb	r0, [r4, #0]
 800d874:	f7ff ff99 	bl	800d7aa <__hexdig_fun>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d102      	bne.n	800d882 <__gethex+0xae>
 800d87c:	1b2d      	subs	r5, r5, r4
 800d87e:	00af      	lsls	r7, r5, #2
 800d880:	e003      	b.n	800d88a <__gethex+0xb6>
 800d882:	3401      	adds	r4, #1
 800d884:	e7f5      	b.n	800d872 <__gethex+0x9e>
 800d886:	2d00      	cmp	r5, #0
 800d888:	d1f8      	bne.n	800d87c <__gethex+0xa8>
 800d88a:	2220      	movs	r2, #32
 800d88c:	7823      	ldrb	r3, [r4, #0]
 800d88e:	0026      	movs	r6, r4
 800d890:	4393      	bics	r3, r2
 800d892:	2b50      	cmp	r3, #80	; 0x50
 800d894:	d11d      	bne.n	800d8d2 <__gethex+0xfe>
 800d896:	7863      	ldrb	r3, [r4, #1]
 800d898:	2b2b      	cmp	r3, #43	; 0x2b
 800d89a:	d02c      	beq.n	800d8f6 <__gethex+0x122>
 800d89c:	2b2d      	cmp	r3, #45	; 0x2d
 800d89e:	d02e      	beq.n	800d8fe <__gethex+0x12a>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	1c66      	adds	r6, r4, #1
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	7830      	ldrb	r0, [r6, #0]
 800d8a8:	f7ff ff7f 	bl	800d7aa <__hexdig_fun>
 800d8ac:	1e43      	subs	r3, r0, #1
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	2b18      	cmp	r3, #24
 800d8b2:	d82b      	bhi.n	800d90c <__gethex+0x138>
 800d8b4:	3810      	subs	r0, #16
 800d8b6:	0005      	movs	r5, r0
 800d8b8:	7870      	ldrb	r0, [r6, #1]
 800d8ba:	f7ff ff76 	bl	800d7aa <__hexdig_fun>
 800d8be:	1e43      	subs	r3, r0, #1
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	3601      	adds	r6, #1
 800d8c4:	2b18      	cmp	r3, #24
 800d8c6:	d91c      	bls.n	800d902 <__gethex+0x12e>
 800d8c8:	9b04      	ldr	r3, [sp, #16]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d000      	beq.n	800d8d0 <__gethex+0xfc>
 800d8ce:	426d      	negs	r5, r5
 800d8d0:	197f      	adds	r7, r7, r5
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	601e      	str	r6, [r3, #0]
 800d8d6:	9b02      	ldr	r3, [sp, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d019      	beq.n	800d910 <__gethex+0x13c>
 800d8dc:	2600      	movs	r6, #0
 800d8de:	9b05      	ldr	r3, [sp, #20]
 800d8e0:	42b3      	cmp	r3, r6
 800d8e2:	d100      	bne.n	800d8e6 <__gethex+0x112>
 800d8e4:	3606      	adds	r6, #6
 800d8e6:	0030      	movs	r0, r6
 800d8e8:	b009      	add	sp, #36	; 0x24
 800d8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	2700      	movs	r7, #0
 800d8f0:	9c00      	ldr	r4, [sp, #0]
 800d8f2:	9302      	str	r3, [sp, #8]
 800d8f4:	e7c9      	b.n	800d88a <__gethex+0xb6>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9304      	str	r3, [sp, #16]
 800d8fa:	1ca6      	adds	r6, r4, #2
 800d8fc:	e7d3      	b.n	800d8a6 <__gethex+0xd2>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e7fa      	b.n	800d8f8 <__gethex+0x124>
 800d902:	230a      	movs	r3, #10
 800d904:	435d      	muls	r5, r3
 800d906:	182d      	adds	r5, r5, r0
 800d908:	3d10      	subs	r5, #16
 800d90a:	e7d5      	b.n	800d8b8 <__gethex+0xe4>
 800d90c:	0026      	movs	r6, r4
 800d90e:	e7e0      	b.n	800d8d2 <__gethex+0xfe>
 800d910:	9b00      	ldr	r3, [sp, #0]
 800d912:	9902      	ldr	r1, [sp, #8]
 800d914:	1ae3      	subs	r3, r4, r3
 800d916:	3b01      	subs	r3, #1
 800d918:	2b07      	cmp	r3, #7
 800d91a:	dc0a      	bgt.n	800d932 <__gethex+0x15e>
 800d91c:	9803      	ldr	r0, [sp, #12]
 800d91e:	f000 fa5d 	bl	800dddc <_Balloc>
 800d922:	1e05      	subs	r5, r0, #0
 800d924:	d108      	bne.n	800d938 <__gethex+0x164>
 800d926:	002a      	movs	r2, r5
 800d928:	21e4      	movs	r1, #228	; 0xe4
 800d92a:	4b5f      	ldr	r3, [pc, #380]	; (800daa8 <__gethex+0x2d4>)
 800d92c:	485f      	ldr	r0, [pc, #380]	; (800daac <__gethex+0x2d8>)
 800d92e:	f003 fd19 	bl	8011364 <__assert_func>
 800d932:	3101      	adds	r1, #1
 800d934:	105b      	asrs	r3, r3, #1
 800d936:	e7ef      	b.n	800d918 <__gethex+0x144>
 800d938:	0003      	movs	r3, r0
 800d93a:	3314      	adds	r3, #20
 800d93c:	9302      	str	r3, [sp, #8]
 800d93e:	9305      	str	r3, [sp, #20]
 800d940:	2300      	movs	r3, #0
 800d942:	001e      	movs	r6, r3
 800d944:	9304      	str	r3, [sp, #16]
 800d946:	9b00      	ldr	r3, [sp, #0]
 800d948:	42a3      	cmp	r3, r4
 800d94a:	d33f      	bcc.n	800d9cc <__gethex+0x1f8>
 800d94c:	9c05      	ldr	r4, [sp, #20]
 800d94e:	9b02      	ldr	r3, [sp, #8]
 800d950:	c440      	stmia	r4!, {r6}
 800d952:	1ae4      	subs	r4, r4, r3
 800d954:	10a4      	asrs	r4, r4, #2
 800d956:	0030      	movs	r0, r6
 800d958:	612c      	str	r4, [r5, #16]
 800d95a:	f000 fb01 	bl	800df60 <__hi0bits>
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	0164      	lsls	r4, r4, #5
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	1a26      	subs	r6, r4, r0
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	429e      	cmp	r6, r3
 800d96a:	dd51      	ble.n	800da10 <__gethex+0x23c>
 800d96c:	1af6      	subs	r6, r6, r3
 800d96e:	0031      	movs	r1, r6
 800d970:	0028      	movs	r0, r5
 800d972:	f000 fe7b 	bl	800e66c <__any_on>
 800d976:	1e04      	subs	r4, r0, #0
 800d978:	d016      	beq.n	800d9a8 <__gethex+0x1d4>
 800d97a:	2401      	movs	r4, #1
 800d97c:	231f      	movs	r3, #31
 800d97e:	0020      	movs	r0, r4
 800d980:	1e72      	subs	r2, r6, #1
 800d982:	4013      	ands	r3, r2
 800d984:	4098      	lsls	r0, r3
 800d986:	0003      	movs	r3, r0
 800d988:	1151      	asrs	r1, r2, #5
 800d98a:	9802      	ldr	r0, [sp, #8]
 800d98c:	0089      	lsls	r1, r1, #2
 800d98e:	5809      	ldr	r1, [r1, r0]
 800d990:	4219      	tst	r1, r3
 800d992:	d009      	beq.n	800d9a8 <__gethex+0x1d4>
 800d994:	42a2      	cmp	r2, r4
 800d996:	dd06      	ble.n	800d9a6 <__gethex+0x1d2>
 800d998:	0028      	movs	r0, r5
 800d99a:	1eb1      	subs	r1, r6, #2
 800d99c:	f000 fe66 	bl	800e66c <__any_on>
 800d9a0:	3402      	adds	r4, #2
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d100      	bne.n	800d9a8 <__gethex+0x1d4>
 800d9a6:	2402      	movs	r4, #2
 800d9a8:	0031      	movs	r1, r6
 800d9aa:	0028      	movs	r0, r5
 800d9ac:	f7ff fea8 	bl	800d700 <rshift>
 800d9b0:	19bf      	adds	r7, r7, r6
 800d9b2:	9b01      	ldr	r3, [sp, #4]
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	42bb      	cmp	r3, r7
 800d9b8:	da3a      	bge.n	800da30 <__gethex+0x25c>
 800d9ba:	0029      	movs	r1, r5
 800d9bc:	9803      	ldr	r0, [sp, #12]
 800d9be:	f000 fa35 	bl	800de2c <_Bfree>
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9c6:	26a3      	movs	r6, #163	; 0xa3
 800d9c8:	6013      	str	r3, [r2, #0]
 800d9ca:	e78c      	b.n	800d8e6 <__gethex+0x112>
 800d9cc:	3c01      	subs	r4, #1
 800d9ce:	7823      	ldrb	r3, [r4, #0]
 800d9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d9d2:	d012      	beq.n	800d9fa <__gethex+0x226>
 800d9d4:	9b04      	ldr	r3, [sp, #16]
 800d9d6:	2b20      	cmp	r3, #32
 800d9d8:	d104      	bne.n	800d9e4 <__gethex+0x210>
 800d9da:	9b05      	ldr	r3, [sp, #20]
 800d9dc:	c340      	stmia	r3!, {r6}
 800d9de:	2600      	movs	r6, #0
 800d9e0:	9305      	str	r3, [sp, #20]
 800d9e2:	9604      	str	r6, [sp, #16]
 800d9e4:	7820      	ldrb	r0, [r4, #0]
 800d9e6:	f7ff fee0 	bl	800d7aa <__hexdig_fun>
 800d9ea:	230f      	movs	r3, #15
 800d9ec:	4018      	ands	r0, r3
 800d9ee:	9b04      	ldr	r3, [sp, #16]
 800d9f0:	4098      	lsls	r0, r3
 800d9f2:	3304      	adds	r3, #4
 800d9f4:	4306      	orrs	r6, r0
 800d9f6:	9304      	str	r3, [sp, #16]
 800d9f8:	e7a5      	b.n	800d946 <__gethex+0x172>
 800d9fa:	9b00      	ldr	r3, [sp, #0]
 800d9fc:	42a3      	cmp	r3, r4
 800d9fe:	d8e9      	bhi.n	800d9d4 <__gethex+0x200>
 800da00:	2201      	movs	r2, #1
 800da02:	0020      	movs	r0, r4
 800da04:	4927      	ldr	r1, [pc, #156]	; (800daa4 <__gethex+0x2d0>)
 800da06:	f7ff fc37 	bl	800d278 <strncmp>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d1e2      	bne.n	800d9d4 <__gethex+0x200>
 800da0e:	e79a      	b.n	800d946 <__gethex+0x172>
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	2400      	movs	r4, #0
 800da14:	429e      	cmp	r6, r3
 800da16:	dacc      	bge.n	800d9b2 <__gethex+0x1de>
 800da18:	1b9e      	subs	r6, r3, r6
 800da1a:	0029      	movs	r1, r5
 800da1c:	0032      	movs	r2, r6
 800da1e:	9803      	ldr	r0, [sp, #12]
 800da20:	f000 fbf0 	bl	800e204 <__lshift>
 800da24:	0003      	movs	r3, r0
 800da26:	3314      	adds	r3, #20
 800da28:	0005      	movs	r5, r0
 800da2a:	1bbf      	subs	r7, r7, r6
 800da2c:	9302      	str	r3, [sp, #8]
 800da2e:	e7c0      	b.n	800d9b2 <__gethex+0x1de>
 800da30:	9b01      	ldr	r3, [sp, #4]
 800da32:	685e      	ldr	r6, [r3, #4]
 800da34:	42be      	cmp	r6, r7
 800da36:	dd70      	ble.n	800db1a <__gethex+0x346>
 800da38:	9b00      	ldr	r3, [sp, #0]
 800da3a:	1bf6      	subs	r6, r6, r7
 800da3c:	42b3      	cmp	r3, r6
 800da3e:	dc37      	bgt.n	800dab0 <__gethex+0x2dc>
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	2b02      	cmp	r3, #2
 800da46:	d024      	beq.n	800da92 <__gethex+0x2be>
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d026      	beq.n	800da9a <__gethex+0x2c6>
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d117      	bne.n	800da80 <__gethex+0x2ac>
 800da50:	9b00      	ldr	r3, [sp, #0]
 800da52:	42b3      	cmp	r3, r6
 800da54:	d114      	bne.n	800da80 <__gethex+0x2ac>
 800da56:	2b01      	cmp	r3, #1
 800da58:	d10b      	bne.n	800da72 <__gethex+0x29e>
 800da5a:	9b01      	ldr	r3, [sp, #4]
 800da5c:	9a07      	ldr	r2, [sp, #28]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	2662      	movs	r6, #98	; 0x62
 800da62:	6013      	str	r3, [r2, #0]
 800da64:	2301      	movs	r3, #1
 800da66:	9a02      	ldr	r2, [sp, #8]
 800da68:	612b      	str	r3, [r5, #16]
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da6e:	601d      	str	r5, [r3, #0]
 800da70:	e739      	b.n	800d8e6 <__gethex+0x112>
 800da72:	9900      	ldr	r1, [sp, #0]
 800da74:	0028      	movs	r0, r5
 800da76:	3901      	subs	r1, #1
 800da78:	f000 fdf8 	bl	800e66c <__any_on>
 800da7c:	2800      	cmp	r0, #0
 800da7e:	d1ec      	bne.n	800da5a <__gethex+0x286>
 800da80:	0029      	movs	r1, r5
 800da82:	9803      	ldr	r0, [sp, #12]
 800da84:	f000 f9d2 	bl	800de2c <_Bfree>
 800da88:	2300      	movs	r3, #0
 800da8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da8c:	2650      	movs	r6, #80	; 0x50
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	e729      	b.n	800d8e6 <__gethex+0x112>
 800da92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1f3      	bne.n	800da80 <__gethex+0x2ac>
 800da98:	e7df      	b.n	800da5a <__gethex+0x286>
 800da9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1dc      	bne.n	800da5a <__gethex+0x286>
 800daa0:	e7ee      	b.n	800da80 <__gethex+0x2ac>
 800daa2:	46c0      	nop			; (mov r8, r8)
 800daa4:	0801594c 	.word	0x0801594c
 800daa8:	08015aa9 	.word	0x08015aa9
 800daac:	08015aba 	.word	0x08015aba
 800dab0:	1e77      	subs	r7, r6, #1
 800dab2:	2c00      	cmp	r4, #0
 800dab4:	d12f      	bne.n	800db16 <__gethex+0x342>
 800dab6:	2f00      	cmp	r7, #0
 800dab8:	d004      	beq.n	800dac4 <__gethex+0x2f0>
 800daba:	0039      	movs	r1, r7
 800dabc:	0028      	movs	r0, r5
 800dabe:	f000 fdd5 	bl	800e66c <__any_on>
 800dac2:	0004      	movs	r4, r0
 800dac4:	231f      	movs	r3, #31
 800dac6:	117a      	asrs	r2, r7, #5
 800dac8:	401f      	ands	r7, r3
 800daca:	3b1e      	subs	r3, #30
 800dacc:	40bb      	lsls	r3, r7
 800dace:	9902      	ldr	r1, [sp, #8]
 800dad0:	0092      	lsls	r2, r2, #2
 800dad2:	5852      	ldr	r2, [r2, r1]
 800dad4:	421a      	tst	r2, r3
 800dad6:	d001      	beq.n	800dadc <__gethex+0x308>
 800dad8:	2302      	movs	r3, #2
 800dada:	431c      	orrs	r4, r3
 800dadc:	9b00      	ldr	r3, [sp, #0]
 800dade:	0031      	movs	r1, r6
 800dae0:	1b9b      	subs	r3, r3, r6
 800dae2:	2602      	movs	r6, #2
 800dae4:	0028      	movs	r0, r5
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	f7ff fe0a 	bl	800d700 <rshift>
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	685f      	ldr	r7, [r3, #4]
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	d041      	beq.n	800db78 <__gethex+0x3a4>
 800daf4:	9b01      	ldr	r3, [sp, #4]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d010      	beq.n	800db1e <__gethex+0x34a>
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	d012      	beq.n	800db26 <__gethex+0x352>
 800db00:	2b01      	cmp	r3, #1
 800db02:	d106      	bne.n	800db12 <__gethex+0x33e>
 800db04:	07a2      	lsls	r2, r4, #30
 800db06:	d504      	bpl.n	800db12 <__gethex+0x33e>
 800db08:	9a02      	ldr	r2, [sp, #8]
 800db0a:	6812      	ldr	r2, [r2, #0]
 800db0c:	4314      	orrs	r4, r2
 800db0e:	421c      	tst	r4, r3
 800db10:	d10c      	bne.n	800db2c <__gethex+0x358>
 800db12:	2310      	movs	r3, #16
 800db14:	e02f      	b.n	800db76 <__gethex+0x3a2>
 800db16:	2401      	movs	r4, #1
 800db18:	e7d4      	b.n	800dac4 <__gethex+0x2f0>
 800db1a:	2601      	movs	r6, #1
 800db1c:	e7e8      	b.n	800daf0 <__gethex+0x31c>
 800db1e:	2301      	movs	r3, #1
 800db20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db22:	1a9b      	subs	r3, r3, r2
 800db24:	930f      	str	r3, [sp, #60]	; 0x3c
 800db26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d0f2      	beq.n	800db12 <__gethex+0x33e>
 800db2c:	692b      	ldr	r3, [r5, #16]
 800db2e:	2000      	movs	r0, #0
 800db30:	9302      	str	r3, [sp, #8]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	002b      	movs	r3, r5
 800db38:	9a04      	ldr	r2, [sp, #16]
 800db3a:	3314      	adds	r3, #20
 800db3c:	1899      	adds	r1, r3, r2
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	1c54      	adds	r4, r2, #1
 800db42:	d01e      	beq.n	800db82 <__gethex+0x3ae>
 800db44:	3201      	adds	r2, #1
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	002b      	movs	r3, r5
 800db4a:	3314      	adds	r3, #20
 800db4c:	2e02      	cmp	r6, #2
 800db4e:	d141      	bne.n	800dbd4 <__gethex+0x400>
 800db50:	9a01      	ldr	r2, [sp, #4]
 800db52:	9900      	ldr	r1, [sp, #0]
 800db54:	6812      	ldr	r2, [r2, #0]
 800db56:	3a01      	subs	r2, #1
 800db58:	428a      	cmp	r2, r1
 800db5a:	d10b      	bne.n	800db74 <__gethex+0x3a0>
 800db5c:	221f      	movs	r2, #31
 800db5e:	9800      	ldr	r0, [sp, #0]
 800db60:	1149      	asrs	r1, r1, #5
 800db62:	4002      	ands	r2, r0
 800db64:	2001      	movs	r0, #1
 800db66:	0004      	movs	r4, r0
 800db68:	4094      	lsls	r4, r2
 800db6a:	0089      	lsls	r1, r1, #2
 800db6c:	58cb      	ldr	r3, [r1, r3]
 800db6e:	4223      	tst	r3, r4
 800db70:	d000      	beq.n	800db74 <__gethex+0x3a0>
 800db72:	2601      	movs	r6, #1
 800db74:	2320      	movs	r3, #32
 800db76:	431e      	orrs	r6, r3
 800db78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db7a:	601d      	str	r5, [r3, #0]
 800db7c:	9b07      	ldr	r3, [sp, #28]
 800db7e:	601f      	str	r7, [r3, #0]
 800db80:	e6b1      	b.n	800d8e6 <__gethex+0x112>
 800db82:	c301      	stmia	r3!, {r0}
 800db84:	4299      	cmp	r1, r3
 800db86:	d8da      	bhi.n	800db3e <__gethex+0x36a>
 800db88:	68ab      	ldr	r3, [r5, #8]
 800db8a:	9a02      	ldr	r2, [sp, #8]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	db18      	blt.n	800dbc2 <__gethex+0x3ee>
 800db90:	6869      	ldr	r1, [r5, #4]
 800db92:	9803      	ldr	r0, [sp, #12]
 800db94:	3101      	adds	r1, #1
 800db96:	f000 f921 	bl	800dddc <_Balloc>
 800db9a:	1e04      	subs	r4, r0, #0
 800db9c:	d104      	bne.n	800dba8 <__gethex+0x3d4>
 800db9e:	0022      	movs	r2, r4
 800dba0:	2184      	movs	r1, #132	; 0x84
 800dba2:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <__gethex+0x440>)
 800dba4:	481c      	ldr	r0, [pc, #112]	; (800dc18 <__gethex+0x444>)
 800dba6:	e6c2      	b.n	800d92e <__gethex+0x15a>
 800dba8:	0029      	movs	r1, r5
 800dbaa:	692a      	ldr	r2, [r5, #16]
 800dbac:	310c      	adds	r1, #12
 800dbae:	3202      	adds	r2, #2
 800dbb0:	0092      	lsls	r2, r2, #2
 800dbb2:	300c      	adds	r0, #12
 800dbb4:	f7ff fc77 	bl	800d4a6 <memcpy>
 800dbb8:	0029      	movs	r1, r5
 800dbba:	9803      	ldr	r0, [sp, #12]
 800dbbc:	f000 f936 	bl	800de2c <_Bfree>
 800dbc0:	0025      	movs	r5, r4
 800dbc2:	692b      	ldr	r3, [r5, #16]
 800dbc4:	1c5a      	adds	r2, r3, #1
 800dbc6:	612a      	str	r2, [r5, #16]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	3304      	adds	r3, #4
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	18eb      	adds	r3, r5, r3
 800dbd0:	605a      	str	r2, [r3, #4]
 800dbd2:	e7b9      	b.n	800db48 <__gethex+0x374>
 800dbd4:	692a      	ldr	r2, [r5, #16]
 800dbd6:	9902      	ldr	r1, [sp, #8]
 800dbd8:	428a      	cmp	r2, r1
 800dbda:	dd09      	ble.n	800dbf0 <__gethex+0x41c>
 800dbdc:	2101      	movs	r1, #1
 800dbde:	0028      	movs	r0, r5
 800dbe0:	f7ff fd8e 	bl	800d700 <rshift>
 800dbe4:	9b01      	ldr	r3, [sp, #4]
 800dbe6:	3701      	adds	r7, #1
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	42bb      	cmp	r3, r7
 800dbec:	dac1      	bge.n	800db72 <__gethex+0x39e>
 800dbee:	e6e4      	b.n	800d9ba <__gethex+0x1e6>
 800dbf0:	221f      	movs	r2, #31
 800dbf2:	9c00      	ldr	r4, [sp, #0]
 800dbf4:	9900      	ldr	r1, [sp, #0]
 800dbf6:	2601      	movs	r6, #1
 800dbf8:	4014      	ands	r4, r2
 800dbfa:	4211      	tst	r1, r2
 800dbfc:	d0ba      	beq.n	800db74 <__gethex+0x3a0>
 800dbfe:	9a04      	ldr	r2, [sp, #16]
 800dc00:	189b      	adds	r3, r3, r2
 800dc02:	3b04      	subs	r3, #4
 800dc04:	6818      	ldr	r0, [r3, #0]
 800dc06:	f000 f9ab 	bl	800df60 <__hi0bits>
 800dc0a:	2320      	movs	r3, #32
 800dc0c:	1b1b      	subs	r3, r3, r4
 800dc0e:	4298      	cmp	r0, r3
 800dc10:	dbe4      	blt.n	800dbdc <__gethex+0x408>
 800dc12:	e7af      	b.n	800db74 <__gethex+0x3a0>
 800dc14:	08015aa9 	.word	0x08015aa9
 800dc18:	08015aba 	.word	0x08015aba

0800dc1c <L_shift>:
 800dc1c:	2308      	movs	r3, #8
 800dc1e:	b570      	push	{r4, r5, r6, lr}
 800dc20:	2520      	movs	r5, #32
 800dc22:	1a9a      	subs	r2, r3, r2
 800dc24:	0092      	lsls	r2, r2, #2
 800dc26:	1aad      	subs	r5, r5, r2
 800dc28:	6843      	ldr	r3, [r0, #4]
 800dc2a:	6804      	ldr	r4, [r0, #0]
 800dc2c:	001e      	movs	r6, r3
 800dc2e:	40ae      	lsls	r6, r5
 800dc30:	40d3      	lsrs	r3, r2
 800dc32:	4334      	orrs	r4, r6
 800dc34:	6004      	str	r4, [r0, #0]
 800dc36:	6043      	str	r3, [r0, #4]
 800dc38:	3004      	adds	r0, #4
 800dc3a:	4288      	cmp	r0, r1
 800dc3c:	d3f4      	bcc.n	800dc28 <L_shift+0xc>
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}

0800dc40 <__match>:
 800dc40:	b530      	push	{r4, r5, lr}
 800dc42:	6803      	ldr	r3, [r0, #0]
 800dc44:	780c      	ldrb	r4, [r1, #0]
 800dc46:	3301      	adds	r3, #1
 800dc48:	2c00      	cmp	r4, #0
 800dc4a:	d102      	bne.n	800dc52 <__match+0x12>
 800dc4c:	6003      	str	r3, [r0, #0]
 800dc4e:	2001      	movs	r0, #1
 800dc50:	bd30      	pop	{r4, r5, pc}
 800dc52:	781a      	ldrb	r2, [r3, #0]
 800dc54:	0015      	movs	r5, r2
 800dc56:	3d41      	subs	r5, #65	; 0x41
 800dc58:	2d19      	cmp	r5, #25
 800dc5a:	d800      	bhi.n	800dc5e <__match+0x1e>
 800dc5c:	3220      	adds	r2, #32
 800dc5e:	3101      	adds	r1, #1
 800dc60:	42a2      	cmp	r2, r4
 800dc62:	d0ef      	beq.n	800dc44 <__match+0x4>
 800dc64:	2000      	movs	r0, #0
 800dc66:	e7f3      	b.n	800dc50 <__match+0x10>

0800dc68 <__hexnan>:
 800dc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc6a:	680b      	ldr	r3, [r1, #0]
 800dc6c:	b08b      	sub	sp, #44	; 0x2c
 800dc6e:	9201      	str	r2, [sp, #4]
 800dc70:	9901      	ldr	r1, [sp, #4]
 800dc72:	115a      	asrs	r2, r3, #5
 800dc74:	0092      	lsls	r2, r2, #2
 800dc76:	188a      	adds	r2, r1, r2
 800dc78:	9202      	str	r2, [sp, #8]
 800dc7a:	0019      	movs	r1, r3
 800dc7c:	221f      	movs	r2, #31
 800dc7e:	4011      	ands	r1, r2
 800dc80:	9008      	str	r0, [sp, #32]
 800dc82:	9106      	str	r1, [sp, #24]
 800dc84:	4213      	tst	r3, r2
 800dc86:	d002      	beq.n	800dc8e <__hexnan+0x26>
 800dc88:	9b02      	ldr	r3, [sp, #8]
 800dc8a:	3304      	adds	r3, #4
 800dc8c:	9302      	str	r3, [sp, #8]
 800dc8e:	9b02      	ldr	r3, [sp, #8]
 800dc90:	2500      	movs	r5, #0
 800dc92:	1f1f      	subs	r7, r3, #4
 800dc94:	003e      	movs	r6, r7
 800dc96:	003c      	movs	r4, r7
 800dc98:	9b08      	ldr	r3, [sp, #32]
 800dc9a:	603d      	str	r5, [r7, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	9507      	str	r5, [sp, #28]
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	9503      	str	r5, [sp, #12]
 800dca4:	9b05      	ldr	r3, [sp, #20]
 800dca6:	3301      	adds	r3, #1
 800dca8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcaa:	9b05      	ldr	r3, [sp, #20]
 800dcac:	785b      	ldrb	r3, [r3, #1]
 800dcae:	9304      	str	r3, [sp, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d028      	beq.n	800dd06 <__hexnan+0x9e>
 800dcb4:	9804      	ldr	r0, [sp, #16]
 800dcb6:	f7ff fd78 	bl	800d7aa <__hexdig_fun>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	d154      	bne.n	800dd68 <__hexnan+0x100>
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	2b20      	cmp	r3, #32
 800dcc2:	d819      	bhi.n	800dcf8 <__hexnan+0x90>
 800dcc4:	9b03      	ldr	r3, [sp, #12]
 800dcc6:	9a07      	ldr	r2, [sp, #28]
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	dd12      	ble.n	800dcf2 <__hexnan+0x8a>
 800dccc:	42b4      	cmp	r4, r6
 800dcce:	d206      	bcs.n	800dcde <__hexnan+0x76>
 800dcd0:	2d07      	cmp	r5, #7
 800dcd2:	dc04      	bgt.n	800dcde <__hexnan+0x76>
 800dcd4:	002a      	movs	r2, r5
 800dcd6:	0031      	movs	r1, r6
 800dcd8:	0020      	movs	r0, r4
 800dcda:	f7ff ff9f 	bl	800dc1c <L_shift>
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	2508      	movs	r5, #8
 800dce2:	429c      	cmp	r4, r3
 800dce4:	d905      	bls.n	800dcf2 <__hexnan+0x8a>
 800dce6:	1f26      	subs	r6, r4, #4
 800dce8:	2500      	movs	r5, #0
 800dcea:	0034      	movs	r4, r6
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	6035      	str	r5, [r6, #0]
 800dcf0:	9307      	str	r3, [sp, #28]
 800dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf4:	9305      	str	r3, [sp, #20]
 800dcf6:	e7d5      	b.n	800dca4 <__hexnan+0x3c>
 800dcf8:	9b04      	ldr	r3, [sp, #16]
 800dcfa:	2b29      	cmp	r3, #41	; 0x29
 800dcfc:	d159      	bne.n	800ddb2 <__hexnan+0x14a>
 800dcfe:	9b05      	ldr	r3, [sp, #20]
 800dd00:	9a08      	ldr	r2, [sp, #32]
 800dd02:	3302      	adds	r3, #2
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d052      	beq.n	800ddb2 <__hexnan+0x14a>
 800dd0c:	42b4      	cmp	r4, r6
 800dd0e:	d206      	bcs.n	800dd1e <__hexnan+0xb6>
 800dd10:	2d07      	cmp	r5, #7
 800dd12:	dc04      	bgt.n	800dd1e <__hexnan+0xb6>
 800dd14:	002a      	movs	r2, r5
 800dd16:	0031      	movs	r1, r6
 800dd18:	0020      	movs	r0, r4
 800dd1a:	f7ff ff7f 	bl	800dc1c <L_shift>
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	429c      	cmp	r4, r3
 800dd22:	d935      	bls.n	800dd90 <__hexnan+0x128>
 800dd24:	001a      	movs	r2, r3
 800dd26:	0023      	movs	r3, r4
 800dd28:	cb02      	ldmia	r3!, {r1}
 800dd2a:	c202      	stmia	r2!, {r1}
 800dd2c:	429f      	cmp	r7, r3
 800dd2e:	d2fb      	bcs.n	800dd28 <__hexnan+0xc0>
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	1c62      	adds	r2, r4, #1
 800dd34:	1ed9      	subs	r1, r3, #3
 800dd36:	2304      	movs	r3, #4
 800dd38:	4291      	cmp	r1, r2
 800dd3a:	d305      	bcc.n	800dd48 <__hexnan+0xe0>
 800dd3c:	9b02      	ldr	r3, [sp, #8]
 800dd3e:	3b04      	subs	r3, #4
 800dd40:	1b1b      	subs	r3, r3, r4
 800dd42:	089b      	lsrs	r3, r3, #2
 800dd44:	3301      	adds	r3, #1
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	9a01      	ldr	r2, [sp, #4]
 800dd4a:	18d3      	adds	r3, r2, r3
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	c304      	stmia	r3!, {r2}
 800dd50:	429f      	cmp	r7, r3
 800dd52:	d2fc      	bcs.n	800dd4e <__hexnan+0xe6>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d104      	bne.n	800dd64 <__hexnan+0xfc>
 800dd5a:	9b01      	ldr	r3, [sp, #4]
 800dd5c:	429f      	cmp	r7, r3
 800dd5e:	d126      	bne.n	800ddae <__hexnan+0x146>
 800dd60:	2301      	movs	r3, #1
 800dd62:	603b      	str	r3, [r7, #0]
 800dd64:	2005      	movs	r0, #5
 800dd66:	e025      	b.n	800ddb4 <__hexnan+0x14c>
 800dd68:	9b03      	ldr	r3, [sp, #12]
 800dd6a:	3501      	adds	r5, #1
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	9303      	str	r3, [sp, #12]
 800dd70:	2d08      	cmp	r5, #8
 800dd72:	dd06      	ble.n	800dd82 <__hexnan+0x11a>
 800dd74:	9b01      	ldr	r3, [sp, #4]
 800dd76:	429c      	cmp	r4, r3
 800dd78:	d9bb      	bls.n	800dcf2 <__hexnan+0x8a>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2501      	movs	r5, #1
 800dd7e:	3c04      	subs	r4, #4
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	220f      	movs	r2, #15
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	4010      	ands	r0, r2
 800dd88:	011b      	lsls	r3, r3, #4
 800dd8a:	4303      	orrs	r3, r0
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	e7b0      	b.n	800dcf2 <__hexnan+0x8a>
 800dd90:	9b06      	ldr	r3, [sp, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d0de      	beq.n	800dd54 <__hexnan+0xec>
 800dd96:	2320      	movs	r3, #32
 800dd98:	9a06      	ldr	r2, [sp, #24]
 800dd9a:	9902      	ldr	r1, [sp, #8]
 800dd9c:	1a9b      	subs	r3, r3, r2
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4252      	negs	r2, r2
 800dda2:	40da      	lsrs	r2, r3
 800dda4:	3904      	subs	r1, #4
 800dda6:	680b      	ldr	r3, [r1, #0]
 800dda8:	4013      	ands	r3, r2
 800ddaa:	600b      	str	r3, [r1, #0]
 800ddac:	e7d2      	b.n	800dd54 <__hexnan+0xec>
 800ddae:	3f04      	subs	r7, #4
 800ddb0:	e7d0      	b.n	800dd54 <__hexnan+0xec>
 800ddb2:	2004      	movs	r0, #4
 800ddb4:	b00b      	add	sp, #44	; 0x2c
 800ddb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddb8 <__ascii_mbtowc>:
 800ddb8:	b082      	sub	sp, #8
 800ddba:	2900      	cmp	r1, #0
 800ddbc:	d100      	bne.n	800ddc0 <__ascii_mbtowc+0x8>
 800ddbe:	a901      	add	r1, sp, #4
 800ddc0:	1e10      	subs	r0, r2, #0
 800ddc2:	d006      	beq.n	800ddd2 <__ascii_mbtowc+0x1a>
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d006      	beq.n	800ddd6 <__ascii_mbtowc+0x1e>
 800ddc8:	7813      	ldrb	r3, [r2, #0]
 800ddca:	600b      	str	r3, [r1, #0]
 800ddcc:	7810      	ldrb	r0, [r2, #0]
 800ddce:	1e43      	subs	r3, r0, #1
 800ddd0:	4198      	sbcs	r0, r3
 800ddd2:	b002      	add	sp, #8
 800ddd4:	4770      	bx	lr
 800ddd6:	2002      	movs	r0, #2
 800ddd8:	4240      	negs	r0, r0
 800ddda:	e7fa      	b.n	800ddd2 <__ascii_mbtowc+0x1a>

0800dddc <_Balloc>:
 800dddc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ddde:	b570      	push	{r4, r5, r6, lr}
 800dde0:	0006      	movs	r6, r0
 800dde2:	000c      	movs	r4, r1
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d012      	beq.n	800de0e <_Balloc+0x32>
 800dde8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ddea:	00a2      	lsls	r2, r4, #2
 800ddec:	189b      	adds	r3, r3, r2
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d115      	bne.n	800de20 <_Balloc+0x44>
 800ddf4:	2101      	movs	r1, #1
 800ddf6:	000d      	movs	r5, r1
 800ddf8:	40a5      	lsls	r5, r4
 800ddfa:	1d6a      	adds	r2, r5, #5
 800ddfc:	0030      	movs	r0, r6
 800ddfe:	0092      	lsls	r2, r2, #2
 800de00:	f003 face 	bl	80113a0 <_calloc_r>
 800de04:	2800      	cmp	r0, #0
 800de06:	d009      	beq.n	800de1c <_Balloc+0x40>
 800de08:	6044      	str	r4, [r0, #4]
 800de0a:	6085      	str	r5, [r0, #8]
 800de0c:	e00a      	b.n	800de24 <_Balloc+0x48>
 800de0e:	2221      	movs	r2, #33	; 0x21
 800de10:	2104      	movs	r1, #4
 800de12:	f003 fac5 	bl	80113a0 <_calloc_r>
 800de16:	6470      	str	r0, [r6, #68]	; 0x44
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1e5      	bne.n	800dde8 <_Balloc+0xc>
 800de1c:	2000      	movs	r0, #0
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	6802      	ldr	r2, [r0, #0]
 800de22:	601a      	str	r2, [r3, #0]
 800de24:	2300      	movs	r3, #0
 800de26:	6103      	str	r3, [r0, #16]
 800de28:	60c3      	str	r3, [r0, #12]
 800de2a:	e7f8      	b.n	800de1e <_Balloc+0x42>

0800de2c <_Bfree>:
 800de2c:	2900      	cmp	r1, #0
 800de2e:	d006      	beq.n	800de3e <_Bfree+0x12>
 800de30:	684a      	ldr	r2, [r1, #4]
 800de32:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800de34:	0092      	lsls	r2, r2, #2
 800de36:	189b      	adds	r3, r3, r2
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	600a      	str	r2, [r1, #0]
 800de3c:	6019      	str	r1, [r3, #0]
 800de3e:	4770      	bx	lr

0800de40 <__multadd>:
 800de40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de42:	000e      	movs	r6, r1
 800de44:	9001      	str	r0, [sp, #4]
 800de46:	000c      	movs	r4, r1
 800de48:	001d      	movs	r5, r3
 800de4a:	2000      	movs	r0, #0
 800de4c:	690f      	ldr	r7, [r1, #16]
 800de4e:	3614      	adds	r6, #20
 800de50:	6833      	ldr	r3, [r6, #0]
 800de52:	3001      	adds	r0, #1
 800de54:	b299      	uxth	r1, r3
 800de56:	4351      	muls	r1, r2
 800de58:	0c1b      	lsrs	r3, r3, #16
 800de5a:	4353      	muls	r3, r2
 800de5c:	1949      	adds	r1, r1, r5
 800de5e:	0c0d      	lsrs	r5, r1, #16
 800de60:	195b      	adds	r3, r3, r5
 800de62:	0c1d      	lsrs	r5, r3, #16
 800de64:	b289      	uxth	r1, r1
 800de66:	041b      	lsls	r3, r3, #16
 800de68:	185b      	adds	r3, r3, r1
 800de6a:	c608      	stmia	r6!, {r3}
 800de6c:	4287      	cmp	r7, r0
 800de6e:	dcef      	bgt.n	800de50 <__multadd+0x10>
 800de70:	2d00      	cmp	r5, #0
 800de72:	d022      	beq.n	800deba <__multadd+0x7a>
 800de74:	68a3      	ldr	r3, [r4, #8]
 800de76:	42bb      	cmp	r3, r7
 800de78:	dc19      	bgt.n	800deae <__multadd+0x6e>
 800de7a:	6861      	ldr	r1, [r4, #4]
 800de7c:	9801      	ldr	r0, [sp, #4]
 800de7e:	3101      	adds	r1, #1
 800de80:	f7ff ffac 	bl	800dddc <_Balloc>
 800de84:	1e06      	subs	r6, r0, #0
 800de86:	d105      	bne.n	800de94 <__multadd+0x54>
 800de88:	0032      	movs	r2, r6
 800de8a:	21ba      	movs	r1, #186	; 0xba
 800de8c:	4b0c      	ldr	r3, [pc, #48]	; (800dec0 <__multadd+0x80>)
 800de8e:	480d      	ldr	r0, [pc, #52]	; (800dec4 <__multadd+0x84>)
 800de90:	f003 fa68 	bl	8011364 <__assert_func>
 800de94:	0021      	movs	r1, r4
 800de96:	6922      	ldr	r2, [r4, #16]
 800de98:	310c      	adds	r1, #12
 800de9a:	3202      	adds	r2, #2
 800de9c:	0092      	lsls	r2, r2, #2
 800de9e:	300c      	adds	r0, #12
 800dea0:	f7ff fb01 	bl	800d4a6 <memcpy>
 800dea4:	0021      	movs	r1, r4
 800dea6:	9801      	ldr	r0, [sp, #4]
 800dea8:	f7ff ffc0 	bl	800de2c <_Bfree>
 800deac:	0034      	movs	r4, r6
 800deae:	1d3b      	adds	r3, r7, #4
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	18e3      	adds	r3, r4, r3
 800deb4:	605d      	str	r5, [r3, #4]
 800deb6:	1c7b      	adds	r3, r7, #1
 800deb8:	6123      	str	r3, [r4, #16]
 800deba:	0020      	movs	r0, r4
 800debc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800debe:	46c0      	nop			; (mov r8, r8)
 800dec0:	08015aa9 	.word	0x08015aa9
 800dec4:	08015b1a 	.word	0x08015b1a

0800dec8 <__s2b>:
 800dec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deca:	0006      	movs	r6, r0
 800decc:	0018      	movs	r0, r3
 800dece:	000c      	movs	r4, r1
 800ded0:	3008      	adds	r0, #8
 800ded2:	2109      	movs	r1, #9
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	0015      	movs	r5, r2
 800ded8:	f7f2 f9ba 	bl	8000250 <__divsi3>
 800dedc:	2301      	movs	r3, #1
 800dede:	2100      	movs	r1, #0
 800dee0:	4283      	cmp	r3, r0
 800dee2:	db0a      	blt.n	800defa <__s2b+0x32>
 800dee4:	0030      	movs	r0, r6
 800dee6:	f7ff ff79 	bl	800dddc <_Balloc>
 800deea:	1e01      	subs	r1, r0, #0
 800deec:	d108      	bne.n	800df00 <__s2b+0x38>
 800deee:	000a      	movs	r2, r1
 800def0:	4b19      	ldr	r3, [pc, #100]	; (800df58 <__s2b+0x90>)
 800def2:	481a      	ldr	r0, [pc, #104]	; (800df5c <__s2b+0x94>)
 800def4:	31d3      	adds	r1, #211	; 0xd3
 800def6:	f003 fa35 	bl	8011364 <__assert_func>
 800defa:	005b      	lsls	r3, r3, #1
 800defc:	3101      	adds	r1, #1
 800defe:	e7ef      	b.n	800dee0 <__s2b+0x18>
 800df00:	9b08      	ldr	r3, [sp, #32]
 800df02:	6143      	str	r3, [r0, #20]
 800df04:	2301      	movs	r3, #1
 800df06:	6103      	str	r3, [r0, #16]
 800df08:	2d09      	cmp	r5, #9
 800df0a:	dd18      	ble.n	800df3e <__s2b+0x76>
 800df0c:	0023      	movs	r3, r4
 800df0e:	3309      	adds	r3, #9
 800df10:	001f      	movs	r7, r3
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	1964      	adds	r4, r4, r5
 800df16:	783b      	ldrb	r3, [r7, #0]
 800df18:	220a      	movs	r2, #10
 800df1a:	0030      	movs	r0, r6
 800df1c:	3b30      	subs	r3, #48	; 0x30
 800df1e:	f7ff ff8f 	bl	800de40 <__multadd>
 800df22:	3701      	adds	r7, #1
 800df24:	0001      	movs	r1, r0
 800df26:	42a7      	cmp	r7, r4
 800df28:	d1f5      	bne.n	800df16 <__s2b+0x4e>
 800df2a:	002c      	movs	r4, r5
 800df2c:	9b00      	ldr	r3, [sp, #0]
 800df2e:	3c08      	subs	r4, #8
 800df30:	191c      	adds	r4, r3, r4
 800df32:	002f      	movs	r7, r5
 800df34:	9b01      	ldr	r3, [sp, #4]
 800df36:	429f      	cmp	r7, r3
 800df38:	db04      	blt.n	800df44 <__s2b+0x7c>
 800df3a:	0008      	movs	r0, r1
 800df3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df3e:	2509      	movs	r5, #9
 800df40:	340a      	adds	r4, #10
 800df42:	e7f6      	b.n	800df32 <__s2b+0x6a>
 800df44:	1b63      	subs	r3, r4, r5
 800df46:	5ddb      	ldrb	r3, [r3, r7]
 800df48:	220a      	movs	r2, #10
 800df4a:	0030      	movs	r0, r6
 800df4c:	3b30      	subs	r3, #48	; 0x30
 800df4e:	f7ff ff77 	bl	800de40 <__multadd>
 800df52:	3701      	adds	r7, #1
 800df54:	0001      	movs	r1, r0
 800df56:	e7ed      	b.n	800df34 <__s2b+0x6c>
 800df58:	08015aa9 	.word	0x08015aa9
 800df5c:	08015b1a 	.word	0x08015b1a

0800df60 <__hi0bits>:
 800df60:	0003      	movs	r3, r0
 800df62:	0c02      	lsrs	r2, r0, #16
 800df64:	2000      	movs	r0, #0
 800df66:	4282      	cmp	r2, r0
 800df68:	d101      	bne.n	800df6e <__hi0bits+0xe>
 800df6a:	041b      	lsls	r3, r3, #16
 800df6c:	3010      	adds	r0, #16
 800df6e:	0e1a      	lsrs	r2, r3, #24
 800df70:	d101      	bne.n	800df76 <__hi0bits+0x16>
 800df72:	3008      	adds	r0, #8
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	0f1a      	lsrs	r2, r3, #28
 800df78:	d101      	bne.n	800df7e <__hi0bits+0x1e>
 800df7a:	3004      	adds	r0, #4
 800df7c:	011b      	lsls	r3, r3, #4
 800df7e:	0f9a      	lsrs	r2, r3, #30
 800df80:	d101      	bne.n	800df86 <__hi0bits+0x26>
 800df82:	3002      	adds	r0, #2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	2b00      	cmp	r3, #0
 800df88:	db03      	blt.n	800df92 <__hi0bits+0x32>
 800df8a:	3001      	adds	r0, #1
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	d400      	bmi.n	800df92 <__hi0bits+0x32>
 800df90:	2020      	movs	r0, #32
 800df92:	4770      	bx	lr

0800df94 <__lo0bits>:
 800df94:	6803      	ldr	r3, [r0, #0]
 800df96:	0001      	movs	r1, r0
 800df98:	2207      	movs	r2, #7
 800df9a:	0018      	movs	r0, r3
 800df9c:	4010      	ands	r0, r2
 800df9e:	4213      	tst	r3, r2
 800dfa0:	d00d      	beq.n	800dfbe <__lo0bits+0x2a>
 800dfa2:	3a06      	subs	r2, #6
 800dfa4:	2000      	movs	r0, #0
 800dfa6:	4213      	tst	r3, r2
 800dfa8:	d105      	bne.n	800dfb6 <__lo0bits+0x22>
 800dfaa:	3002      	adds	r0, #2
 800dfac:	4203      	tst	r3, r0
 800dfae:	d003      	beq.n	800dfb8 <__lo0bits+0x24>
 800dfb0:	40d3      	lsrs	r3, r2
 800dfb2:	0010      	movs	r0, r2
 800dfb4:	600b      	str	r3, [r1, #0]
 800dfb6:	4770      	bx	lr
 800dfb8:	089b      	lsrs	r3, r3, #2
 800dfba:	600b      	str	r3, [r1, #0]
 800dfbc:	e7fb      	b.n	800dfb6 <__lo0bits+0x22>
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	2a00      	cmp	r2, #0
 800dfc2:	d101      	bne.n	800dfc8 <__lo0bits+0x34>
 800dfc4:	2010      	movs	r0, #16
 800dfc6:	0c1b      	lsrs	r3, r3, #16
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	2a00      	cmp	r2, #0
 800dfcc:	d101      	bne.n	800dfd2 <__lo0bits+0x3e>
 800dfce:	3008      	adds	r0, #8
 800dfd0:	0a1b      	lsrs	r3, r3, #8
 800dfd2:	071a      	lsls	r2, r3, #28
 800dfd4:	d101      	bne.n	800dfda <__lo0bits+0x46>
 800dfd6:	3004      	adds	r0, #4
 800dfd8:	091b      	lsrs	r3, r3, #4
 800dfda:	079a      	lsls	r2, r3, #30
 800dfdc:	d101      	bne.n	800dfe2 <__lo0bits+0x4e>
 800dfde:	3002      	adds	r0, #2
 800dfe0:	089b      	lsrs	r3, r3, #2
 800dfe2:	07da      	lsls	r2, r3, #31
 800dfe4:	d4e9      	bmi.n	800dfba <__lo0bits+0x26>
 800dfe6:	3001      	adds	r0, #1
 800dfe8:	085b      	lsrs	r3, r3, #1
 800dfea:	d1e6      	bne.n	800dfba <__lo0bits+0x26>
 800dfec:	2020      	movs	r0, #32
 800dfee:	e7e2      	b.n	800dfb6 <__lo0bits+0x22>

0800dff0 <__i2b>:
 800dff0:	b510      	push	{r4, lr}
 800dff2:	000c      	movs	r4, r1
 800dff4:	2101      	movs	r1, #1
 800dff6:	f7ff fef1 	bl	800dddc <_Balloc>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d107      	bne.n	800e00e <__i2b+0x1e>
 800dffe:	2146      	movs	r1, #70	; 0x46
 800e000:	4c05      	ldr	r4, [pc, #20]	; (800e018 <__i2b+0x28>)
 800e002:	0002      	movs	r2, r0
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <__i2b+0x2c>)
 800e006:	0020      	movs	r0, r4
 800e008:	31ff      	adds	r1, #255	; 0xff
 800e00a:	f003 f9ab 	bl	8011364 <__assert_func>
 800e00e:	2301      	movs	r3, #1
 800e010:	6144      	str	r4, [r0, #20]
 800e012:	6103      	str	r3, [r0, #16]
 800e014:	bd10      	pop	{r4, pc}
 800e016:	46c0      	nop			; (mov r8, r8)
 800e018:	08015b1a 	.word	0x08015b1a
 800e01c:	08015aa9 	.word	0x08015aa9

0800e020 <__multiply>:
 800e020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e022:	0015      	movs	r5, r2
 800e024:	690a      	ldr	r2, [r1, #16]
 800e026:	692b      	ldr	r3, [r5, #16]
 800e028:	000c      	movs	r4, r1
 800e02a:	b08b      	sub	sp, #44	; 0x2c
 800e02c:	429a      	cmp	r2, r3
 800e02e:	da01      	bge.n	800e034 <__multiply+0x14>
 800e030:	002c      	movs	r4, r5
 800e032:	000d      	movs	r5, r1
 800e034:	6927      	ldr	r7, [r4, #16]
 800e036:	692e      	ldr	r6, [r5, #16]
 800e038:	6861      	ldr	r1, [r4, #4]
 800e03a:	19bb      	adds	r3, r7, r6
 800e03c:	9303      	str	r3, [sp, #12]
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	19ba      	adds	r2, r7, r6
 800e042:	4293      	cmp	r3, r2
 800e044:	da00      	bge.n	800e048 <__multiply+0x28>
 800e046:	3101      	adds	r1, #1
 800e048:	f7ff fec8 	bl	800dddc <_Balloc>
 800e04c:	9002      	str	r0, [sp, #8]
 800e04e:	2800      	cmp	r0, #0
 800e050:	d106      	bne.n	800e060 <__multiply+0x40>
 800e052:	21b1      	movs	r1, #177	; 0xb1
 800e054:	4b48      	ldr	r3, [pc, #288]	; (800e178 <__multiply+0x158>)
 800e056:	4849      	ldr	r0, [pc, #292]	; (800e17c <__multiply+0x15c>)
 800e058:	9a02      	ldr	r2, [sp, #8]
 800e05a:	0049      	lsls	r1, r1, #1
 800e05c:	f003 f982 	bl	8011364 <__assert_func>
 800e060:	9b02      	ldr	r3, [sp, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	3314      	adds	r3, #20
 800e066:	469c      	mov	ip, r3
 800e068:	19bb      	adds	r3, r7, r6
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4463      	add	r3, ip
 800e06e:	9304      	str	r3, [sp, #16]
 800e070:	4663      	mov	r3, ip
 800e072:	9904      	ldr	r1, [sp, #16]
 800e074:	428b      	cmp	r3, r1
 800e076:	d32a      	bcc.n	800e0ce <__multiply+0xae>
 800e078:	0023      	movs	r3, r4
 800e07a:	00bf      	lsls	r7, r7, #2
 800e07c:	3314      	adds	r3, #20
 800e07e:	3514      	adds	r5, #20
 800e080:	9308      	str	r3, [sp, #32]
 800e082:	00b6      	lsls	r6, r6, #2
 800e084:	19db      	adds	r3, r3, r7
 800e086:	9305      	str	r3, [sp, #20]
 800e088:	19ab      	adds	r3, r5, r6
 800e08a:	9309      	str	r3, [sp, #36]	; 0x24
 800e08c:	2304      	movs	r3, #4
 800e08e:	9306      	str	r3, [sp, #24]
 800e090:	0023      	movs	r3, r4
 800e092:	9a05      	ldr	r2, [sp, #20]
 800e094:	3315      	adds	r3, #21
 800e096:	9501      	str	r5, [sp, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d305      	bcc.n	800e0a8 <__multiply+0x88>
 800e09c:	1b13      	subs	r3, r2, r4
 800e09e:	3b15      	subs	r3, #21
 800e0a0:	089b      	lsrs	r3, r3, #2
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	9306      	str	r3, [sp, #24]
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d310      	bcc.n	800e0d2 <__multiply+0xb2>
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	dd05      	ble.n	800e0c2 <__multiply+0xa2>
 800e0b6:	9b04      	ldr	r3, [sp, #16]
 800e0b8:	3b04      	subs	r3, #4
 800e0ba:	9304      	str	r3, [sp, #16]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d056      	beq.n	800e170 <__multiply+0x150>
 800e0c2:	9b02      	ldr	r3, [sp, #8]
 800e0c4:	9a03      	ldr	r2, [sp, #12]
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	611a      	str	r2, [r3, #16]
 800e0ca:	b00b      	add	sp, #44	; 0x2c
 800e0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ce:	c304      	stmia	r3!, {r2}
 800e0d0:	e7cf      	b.n	800e072 <__multiply+0x52>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	6818      	ldr	r0, [r3, #0]
 800e0d6:	b280      	uxth	r0, r0
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d01e      	beq.n	800e11a <__multiply+0xfa>
 800e0dc:	4667      	mov	r7, ip
 800e0de:	2500      	movs	r5, #0
 800e0e0:	9e08      	ldr	r6, [sp, #32]
 800e0e2:	ce02      	ldmia	r6!, {r1}
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	9307      	str	r3, [sp, #28]
 800e0e8:	b28b      	uxth	r3, r1
 800e0ea:	4343      	muls	r3, r0
 800e0ec:	001a      	movs	r2, r3
 800e0ee:	466b      	mov	r3, sp
 800e0f0:	8b9b      	ldrh	r3, [r3, #28]
 800e0f2:	18d3      	adds	r3, r2, r3
 800e0f4:	195b      	adds	r3, r3, r5
 800e0f6:	0c0d      	lsrs	r5, r1, #16
 800e0f8:	4345      	muls	r5, r0
 800e0fa:	9a07      	ldr	r2, [sp, #28]
 800e0fc:	0c11      	lsrs	r1, r2, #16
 800e0fe:	1869      	adds	r1, r5, r1
 800e100:	0c1a      	lsrs	r2, r3, #16
 800e102:	188a      	adds	r2, r1, r2
 800e104:	b29b      	uxth	r3, r3
 800e106:	0c15      	lsrs	r5, r2, #16
 800e108:	0412      	lsls	r2, r2, #16
 800e10a:	431a      	orrs	r2, r3
 800e10c:	9b05      	ldr	r3, [sp, #20]
 800e10e:	c704      	stmia	r7!, {r2}
 800e110:	42b3      	cmp	r3, r6
 800e112:	d8e6      	bhi.n	800e0e2 <__multiply+0xc2>
 800e114:	4663      	mov	r3, ip
 800e116:	9a06      	ldr	r2, [sp, #24]
 800e118:	509d      	str	r5, [r3, r2]
 800e11a:	9b01      	ldr	r3, [sp, #4]
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	0c00      	lsrs	r0, r0, #16
 800e120:	d020      	beq.n	800e164 <__multiply+0x144>
 800e122:	4663      	mov	r3, ip
 800e124:	0025      	movs	r5, r4
 800e126:	4661      	mov	r1, ip
 800e128:	2700      	movs	r7, #0
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	3514      	adds	r5, #20
 800e12e:	682a      	ldr	r2, [r5, #0]
 800e130:	680e      	ldr	r6, [r1, #0]
 800e132:	b292      	uxth	r2, r2
 800e134:	4342      	muls	r2, r0
 800e136:	0c36      	lsrs	r6, r6, #16
 800e138:	1992      	adds	r2, r2, r6
 800e13a:	19d2      	adds	r2, r2, r7
 800e13c:	0416      	lsls	r6, r2, #16
 800e13e:	b29b      	uxth	r3, r3
 800e140:	431e      	orrs	r6, r3
 800e142:	600e      	str	r6, [r1, #0]
 800e144:	cd40      	ldmia	r5!, {r6}
 800e146:	684b      	ldr	r3, [r1, #4]
 800e148:	0c36      	lsrs	r6, r6, #16
 800e14a:	4346      	muls	r6, r0
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	0c12      	lsrs	r2, r2, #16
 800e150:	18f3      	adds	r3, r6, r3
 800e152:	189b      	adds	r3, r3, r2
 800e154:	9a05      	ldr	r2, [sp, #20]
 800e156:	0c1f      	lsrs	r7, r3, #16
 800e158:	3104      	adds	r1, #4
 800e15a:	42aa      	cmp	r2, r5
 800e15c:	d8e7      	bhi.n	800e12e <__multiply+0x10e>
 800e15e:	4662      	mov	r2, ip
 800e160:	9906      	ldr	r1, [sp, #24]
 800e162:	5053      	str	r3, [r2, r1]
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	3304      	adds	r3, #4
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	2304      	movs	r3, #4
 800e16c:	449c      	add	ip, r3
 800e16e:	e79b      	b.n	800e0a8 <__multiply+0x88>
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	3b01      	subs	r3, #1
 800e174:	9303      	str	r3, [sp, #12]
 800e176:	e79b      	b.n	800e0b0 <__multiply+0x90>
 800e178:	08015aa9 	.word	0x08015aa9
 800e17c:	08015b1a 	.word	0x08015b1a

0800e180 <__pow5mult>:
 800e180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e182:	2303      	movs	r3, #3
 800e184:	0015      	movs	r5, r2
 800e186:	0007      	movs	r7, r0
 800e188:	000e      	movs	r6, r1
 800e18a:	401a      	ands	r2, r3
 800e18c:	421d      	tst	r5, r3
 800e18e:	d008      	beq.n	800e1a2 <__pow5mult+0x22>
 800e190:	491a      	ldr	r1, [pc, #104]	; (800e1fc <__pow5mult+0x7c>)
 800e192:	3a01      	subs	r2, #1
 800e194:	0092      	lsls	r2, r2, #2
 800e196:	5852      	ldr	r2, [r2, r1]
 800e198:	2300      	movs	r3, #0
 800e19a:	0031      	movs	r1, r6
 800e19c:	f7ff fe50 	bl	800de40 <__multadd>
 800e1a0:	0006      	movs	r6, r0
 800e1a2:	10ad      	asrs	r5, r5, #2
 800e1a4:	d027      	beq.n	800e1f6 <__pow5mult+0x76>
 800e1a6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e1a8:	2c00      	cmp	r4, #0
 800e1aa:	d107      	bne.n	800e1bc <__pow5mult+0x3c>
 800e1ac:	0038      	movs	r0, r7
 800e1ae:	4914      	ldr	r1, [pc, #80]	; (800e200 <__pow5mult+0x80>)
 800e1b0:	f7ff ff1e 	bl	800dff0 <__i2b>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	0004      	movs	r4, r0
 800e1b8:	6438      	str	r0, [r7, #64]	; 0x40
 800e1ba:	6003      	str	r3, [r0, #0]
 800e1bc:	2301      	movs	r3, #1
 800e1be:	421d      	tst	r5, r3
 800e1c0:	d00a      	beq.n	800e1d8 <__pow5mult+0x58>
 800e1c2:	0031      	movs	r1, r6
 800e1c4:	0022      	movs	r2, r4
 800e1c6:	0038      	movs	r0, r7
 800e1c8:	f7ff ff2a 	bl	800e020 <__multiply>
 800e1cc:	0031      	movs	r1, r6
 800e1ce:	9001      	str	r0, [sp, #4]
 800e1d0:	0038      	movs	r0, r7
 800e1d2:	f7ff fe2b 	bl	800de2c <_Bfree>
 800e1d6:	9e01      	ldr	r6, [sp, #4]
 800e1d8:	106d      	asrs	r5, r5, #1
 800e1da:	d00c      	beq.n	800e1f6 <__pow5mult+0x76>
 800e1dc:	6820      	ldr	r0, [r4, #0]
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	d107      	bne.n	800e1f2 <__pow5mult+0x72>
 800e1e2:	0022      	movs	r2, r4
 800e1e4:	0021      	movs	r1, r4
 800e1e6:	0038      	movs	r0, r7
 800e1e8:	f7ff ff1a 	bl	800e020 <__multiply>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	6020      	str	r0, [r4, #0]
 800e1f0:	6003      	str	r3, [r0, #0]
 800e1f2:	0004      	movs	r4, r0
 800e1f4:	e7e2      	b.n	800e1bc <__pow5mult+0x3c>
 800e1f6:	0030      	movs	r0, r6
 800e1f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1fa:	46c0      	nop			; (mov r8, r8)
 800e1fc:	08015c68 	.word	0x08015c68
 800e200:	00000271 	.word	0x00000271

0800e204 <__lshift>:
 800e204:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e206:	000c      	movs	r4, r1
 800e208:	0017      	movs	r7, r2
 800e20a:	6923      	ldr	r3, [r4, #16]
 800e20c:	1155      	asrs	r5, r2, #5
 800e20e:	b087      	sub	sp, #28
 800e210:	18eb      	adds	r3, r5, r3
 800e212:	9302      	str	r3, [sp, #8]
 800e214:	3301      	adds	r3, #1
 800e216:	9301      	str	r3, [sp, #4]
 800e218:	6849      	ldr	r1, [r1, #4]
 800e21a:	68a3      	ldr	r3, [r4, #8]
 800e21c:	9004      	str	r0, [sp, #16]
 800e21e:	9a01      	ldr	r2, [sp, #4]
 800e220:	4293      	cmp	r3, r2
 800e222:	db10      	blt.n	800e246 <__lshift+0x42>
 800e224:	9804      	ldr	r0, [sp, #16]
 800e226:	f7ff fdd9 	bl	800dddc <_Balloc>
 800e22a:	2300      	movs	r3, #0
 800e22c:	0002      	movs	r2, r0
 800e22e:	0006      	movs	r6, r0
 800e230:	0019      	movs	r1, r3
 800e232:	3214      	adds	r2, #20
 800e234:	4298      	cmp	r0, r3
 800e236:	d10c      	bne.n	800e252 <__lshift+0x4e>
 800e238:	31df      	adds	r1, #223	; 0xdf
 800e23a:	0032      	movs	r2, r6
 800e23c:	4b26      	ldr	r3, [pc, #152]	; (800e2d8 <__lshift+0xd4>)
 800e23e:	4827      	ldr	r0, [pc, #156]	; (800e2dc <__lshift+0xd8>)
 800e240:	31ff      	adds	r1, #255	; 0xff
 800e242:	f003 f88f 	bl	8011364 <__assert_func>
 800e246:	3101      	adds	r1, #1
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	e7e8      	b.n	800e21e <__lshift+0x1a>
 800e24c:	0098      	lsls	r0, r3, #2
 800e24e:	5011      	str	r1, [r2, r0]
 800e250:	3301      	adds	r3, #1
 800e252:	42ab      	cmp	r3, r5
 800e254:	dbfa      	blt.n	800e24c <__lshift+0x48>
 800e256:	43eb      	mvns	r3, r5
 800e258:	17db      	asrs	r3, r3, #31
 800e25a:	401d      	ands	r5, r3
 800e25c:	211f      	movs	r1, #31
 800e25e:	0023      	movs	r3, r4
 800e260:	0038      	movs	r0, r7
 800e262:	00ad      	lsls	r5, r5, #2
 800e264:	1955      	adds	r5, r2, r5
 800e266:	6922      	ldr	r2, [r4, #16]
 800e268:	3314      	adds	r3, #20
 800e26a:	0092      	lsls	r2, r2, #2
 800e26c:	4008      	ands	r0, r1
 800e26e:	4684      	mov	ip, r0
 800e270:	189a      	adds	r2, r3, r2
 800e272:	420f      	tst	r7, r1
 800e274:	d02a      	beq.n	800e2cc <__lshift+0xc8>
 800e276:	3101      	adds	r1, #1
 800e278:	1a09      	subs	r1, r1, r0
 800e27a:	9105      	str	r1, [sp, #20]
 800e27c:	2100      	movs	r1, #0
 800e27e:	9503      	str	r5, [sp, #12]
 800e280:	4667      	mov	r7, ip
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	40b8      	lsls	r0, r7
 800e286:	4308      	orrs	r0, r1
 800e288:	9903      	ldr	r1, [sp, #12]
 800e28a:	c101      	stmia	r1!, {r0}
 800e28c:	9103      	str	r1, [sp, #12]
 800e28e:	9805      	ldr	r0, [sp, #20]
 800e290:	cb02      	ldmia	r3!, {r1}
 800e292:	40c1      	lsrs	r1, r0
 800e294:	429a      	cmp	r2, r3
 800e296:	d8f3      	bhi.n	800e280 <__lshift+0x7c>
 800e298:	0020      	movs	r0, r4
 800e29a:	3015      	adds	r0, #21
 800e29c:	2304      	movs	r3, #4
 800e29e:	4282      	cmp	r2, r0
 800e2a0:	d304      	bcc.n	800e2ac <__lshift+0xa8>
 800e2a2:	1b13      	subs	r3, r2, r4
 800e2a4:	3b15      	subs	r3, #21
 800e2a6:	089b      	lsrs	r3, r3, #2
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	50e9      	str	r1, [r5, r3]
 800e2ae:	2900      	cmp	r1, #0
 800e2b0:	d002      	beq.n	800e2b8 <__lshift+0xb4>
 800e2b2:	9b02      	ldr	r3, [sp, #8]
 800e2b4:	3302      	adds	r3, #2
 800e2b6:	9301      	str	r3, [sp, #4]
 800e2b8:	9b01      	ldr	r3, [sp, #4]
 800e2ba:	9804      	ldr	r0, [sp, #16]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	0021      	movs	r1, r4
 800e2c0:	6133      	str	r3, [r6, #16]
 800e2c2:	f7ff fdb3 	bl	800de2c <_Bfree>
 800e2c6:	0030      	movs	r0, r6
 800e2c8:	b007      	add	sp, #28
 800e2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2cc:	cb02      	ldmia	r3!, {r1}
 800e2ce:	c502      	stmia	r5!, {r1}
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d8fb      	bhi.n	800e2cc <__lshift+0xc8>
 800e2d4:	e7f0      	b.n	800e2b8 <__lshift+0xb4>
 800e2d6:	46c0      	nop			; (mov r8, r8)
 800e2d8:	08015aa9 	.word	0x08015aa9
 800e2dc:	08015b1a 	.word	0x08015b1a

0800e2e0 <__mcmp>:
 800e2e0:	b530      	push	{r4, r5, lr}
 800e2e2:	690b      	ldr	r3, [r1, #16]
 800e2e4:	6904      	ldr	r4, [r0, #16]
 800e2e6:	0002      	movs	r2, r0
 800e2e8:	1ae0      	subs	r0, r4, r3
 800e2ea:	429c      	cmp	r4, r3
 800e2ec:	d10e      	bne.n	800e30c <__mcmp+0x2c>
 800e2ee:	3214      	adds	r2, #20
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	3114      	adds	r1, #20
 800e2f4:	0014      	movs	r4, r2
 800e2f6:	18c9      	adds	r1, r1, r3
 800e2f8:	18d2      	adds	r2, r2, r3
 800e2fa:	3a04      	subs	r2, #4
 800e2fc:	3904      	subs	r1, #4
 800e2fe:	6815      	ldr	r5, [r2, #0]
 800e300:	680b      	ldr	r3, [r1, #0]
 800e302:	429d      	cmp	r5, r3
 800e304:	d003      	beq.n	800e30e <__mcmp+0x2e>
 800e306:	2001      	movs	r0, #1
 800e308:	429d      	cmp	r5, r3
 800e30a:	d303      	bcc.n	800e314 <__mcmp+0x34>
 800e30c:	bd30      	pop	{r4, r5, pc}
 800e30e:	4294      	cmp	r4, r2
 800e310:	d3f3      	bcc.n	800e2fa <__mcmp+0x1a>
 800e312:	e7fb      	b.n	800e30c <__mcmp+0x2c>
 800e314:	4240      	negs	r0, r0
 800e316:	e7f9      	b.n	800e30c <__mcmp+0x2c>

0800e318 <__mdiff>:
 800e318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e31a:	000e      	movs	r6, r1
 800e31c:	0007      	movs	r7, r0
 800e31e:	0011      	movs	r1, r2
 800e320:	0030      	movs	r0, r6
 800e322:	b087      	sub	sp, #28
 800e324:	0014      	movs	r4, r2
 800e326:	f7ff ffdb 	bl	800e2e0 <__mcmp>
 800e32a:	1e05      	subs	r5, r0, #0
 800e32c:	d110      	bne.n	800e350 <__mdiff+0x38>
 800e32e:	0001      	movs	r1, r0
 800e330:	0038      	movs	r0, r7
 800e332:	f7ff fd53 	bl	800dddc <_Balloc>
 800e336:	1e02      	subs	r2, r0, #0
 800e338:	d104      	bne.n	800e344 <__mdiff+0x2c>
 800e33a:	4b3f      	ldr	r3, [pc, #252]	; (800e438 <__mdiff+0x120>)
 800e33c:	483f      	ldr	r0, [pc, #252]	; (800e43c <__mdiff+0x124>)
 800e33e:	4940      	ldr	r1, [pc, #256]	; (800e440 <__mdiff+0x128>)
 800e340:	f003 f810 	bl	8011364 <__assert_func>
 800e344:	2301      	movs	r3, #1
 800e346:	6145      	str	r5, [r0, #20]
 800e348:	6103      	str	r3, [r0, #16]
 800e34a:	0010      	movs	r0, r2
 800e34c:	b007      	add	sp, #28
 800e34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e350:	2301      	movs	r3, #1
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	2800      	cmp	r0, #0
 800e356:	db04      	blt.n	800e362 <__mdiff+0x4a>
 800e358:	0023      	movs	r3, r4
 800e35a:	0034      	movs	r4, r6
 800e35c:	001e      	movs	r6, r3
 800e35e:	2300      	movs	r3, #0
 800e360:	9301      	str	r3, [sp, #4]
 800e362:	0038      	movs	r0, r7
 800e364:	6861      	ldr	r1, [r4, #4]
 800e366:	f7ff fd39 	bl	800dddc <_Balloc>
 800e36a:	1e02      	subs	r2, r0, #0
 800e36c:	d103      	bne.n	800e376 <__mdiff+0x5e>
 800e36e:	4b32      	ldr	r3, [pc, #200]	; (800e438 <__mdiff+0x120>)
 800e370:	4832      	ldr	r0, [pc, #200]	; (800e43c <__mdiff+0x124>)
 800e372:	4934      	ldr	r1, [pc, #208]	; (800e444 <__mdiff+0x12c>)
 800e374:	e7e4      	b.n	800e340 <__mdiff+0x28>
 800e376:	9b01      	ldr	r3, [sp, #4]
 800e378:	2700      	movs	r7, #0
 800e37a:	60c3      	str	r3, [r0, #12]
 800e37c:	6920      	ldr	r0, [r4, #16]
 800e37e:	3414      	adds	r4, #20
 800e380:	0083      	lsls	r3, r0, #2
 800e382:	18e3      	adds	r3, r4, r3
 800e384:	0021      	movs	r1, r4
 800e386:	9401      	str	r4, [sp, #4]
 800e388:	0034      	movs	r4, r6
 800e38a:	9302      	str	r3, [sp, #8]
 800e38c:	6933      	ldr	r3, [r6, #16]
 800e38e:	3414      	adds	r4, #20
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	18e3      	adds	r3, r4, r3
 800e394:	9303      	str	r3, [sp, #12]
 800e396:	0013      	movs	r3, r2
 800e398:	3314      	adds	r3, #20
 800e39a:	469c      	mov	ip, r3
 800e39c:	9305      	str	r3, [sp, #20]
 800e39e:	9104      	str	r1, [sp, #16]
 800e3a0:	9b04      	ldr	r3, [sp, #16]
 800e3a2:	cc02      	ldmia	r4!, {r1}
 800e3a4:	cb20      	ldmia	r3!, {r5}
 800e3a6:	9304      	str	r3, [sp, #16]
 800e3a8:	b2ab      	uxth	r3, r5
 800e3aa:	19df      	adds	r7, r3, r7
 800e3ac:	b28b      	uxth	r3, r1
 800e3ae:	1afb      	subs	r3, r7, r3
 800e3b0:	0c09      	lsrs	r1, r1, #16
 800e3b2:	0c2d      	lsrs	r5, r5, #16
 800e3b4:	1a6d      	subs	r5, r5, r1
 800e3b6:	1419      	asrs	r1, r3, #16
 800e3b8:	1869      	adds	r1, r5, r1
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	140f      	asrs	r7, r1, #16
 800e3be:	0409      	lsls	r1, r1, #16
 800e3c0:	4319      	orrs	r1, r3
 800e3c2:	4663      	mov	r3, ip
 800e3c4:	c302      	stmia	r3!, {r1}
 800e3c6:	469c      	mov	ip, r3
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	42a3      	cmp	r3, r4
 800e3cc:	d8e8      	bhi.n	800e3a0 <__mdiff+0x88>
 800e3ce:	0031      	movs	r1, r6
 800e3d0:	9c03      	ldr	r4, [sp, #12]
 800e3d2:	3115      	adds	r1, #21
 800e3d4:	2304      	movs	r3, #4
 800e3d6:	428c      	cmp	r4, r1
 800e3d8:	d304      	bcc.n	800e3e4 <__mdiff+0xcc>
 800e3da:	1ba3      	subs	r3, r4, r6
 800e3dc:	3b15      	subs	r3, #21
 800e3de:	089b      	lsrs	r3, r3, #2
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	9901      	ldr	r1, [sp, #4]
 800e3e6:	18cd      	adds	r5, r1, r3
 800e3e8:	9905      	ldr	r1, [sp, #20]
 800e3ea:	002e      	movs	r6, r5
 800e3ec:	18cb      	adds	r3, r1, r3
 800e3ee:	469c      	mov	ip, r3
 800e3f0:	9902      	ldr	r1, [sp, #8]
 800e3f2:	428e      	cmp	r6, r1
 800e3f4:	d310      	bcc.n	800e418 <__mdiff+0x100>
 800e3f6:	9e02      	ldr	r6, [sp, #8]
 800e3f8:	1ee9      	subs	r1, r5, #3
 800e3fa:	2400      	movs	r4, #0
 800e3fc:	428e      	cmp	r6, r1
 800e3fe:	d304      	bcc.n	800e40a <__mdiff+0xf2>
 800e400:	0031      	movs	r1, r6
 800e402:	3103      	adds	r1, #3
 800e404:	1b49      	subs	r1, r1, r5
 800e406:	0889      	lsrs	r1, r1, #2
 800e408:	008c      	lsls	r4, r1, #2
 800e40a:	191b      	adds	r3, r3, r4
 800e40c:	3b04      	subs	r3, #4
 800e40e:	6819      	ldr	r1, [r3, #0]
 800e410:	2900      	cmp	r1, #0
 800e412:	d00f      	beq.n	800e434 <__mdiff+0x11c>
 800e414:	6110      	str	r0, [r2, #16]
 800e416:	e798      	b.n	800e34a <__mdiff+0x32>
 800e418:	ce02      	ldmia	r6!, {r1}
 800e41a:	b28c      	uxth	r4, r1
 800e41c:	19e4      	adds	r4, r4, r7
 800e41e:	0c0f      	lsrs	r7, r1, #16
 800e420:	1421      	asrs	r1, r4, #16
 800e422:	1879      	adds	r1, r7, r1
 800e424:	b2a4      	uxth	r4, r4
 800e426:	140f      	asrs	r7, r1, #16
 800e428:	0409      	lsls	r1, r1, #16
 800e42a:	4321      	orrs	r1, r4
 800e42c:	4664      	mov	r4, ip
 800e42e:	c402      	stmia	r4!, {r1}
 800e430:	46a4      	mov	ip, r4
 800e432:	e7dd      	b.n	800e3f0 <__mdiff+0xd8>
 800e434:	3801      	subs	r0, #1
 800e436:	e7e9      	b.n	800e40c <__mdiff+0xf4>
 800e438:	08015aa9 	.word	0x08015aa9
 800e43c:	08015b1a 	.word	0x08015b1a
 800e440:	00000237 	.word	0x00000237
 800e444:	00000245 	.word	0x00000245

0800e448 <__ulp>:
 800e448:	2000      	movs	r0, #0
 800e44a:	4b0b      	ldr	r3, [pc, #44]	; (800e478 <__ulp+0x30>)
 800e44c:	4019      	ands	r1, r3
 800e44e:	4b0b      	ldr	r3, [pc, #44]	; (800e47c <__ulp+0x34>)
 800e450:	18c9      	adds	r1, r1, r3
 800e452:	4281      	cmp	r1, r0
 800e454:	dc06      	bgt.n	800e464 <__ulp+0x1c>
 800e456:	4249      	negs	r1, r1
 800e458:	150b      	asrs	r3, r1, #20
 800e45a:	2b13      	cmp	r3, #19
 800e45c:	dc03      	bgt.n	800e466 <__ulp+0x1e>
 800e45e:	2180      	movs	r1, #128	; 0x80
 800e460:	0309      	lsls	r1, r1, #12
 800e462:	4119      	asrs	r1, r3
 800e464:	4770      	bx	lr
 800e466:	3b14      	subs	r3, #20
 800e468:	2001      	movs	r0, #1
 800e46a:	2b1e      	cmp	r3, #30
 800e46c:	dc02      	bgt.n	800e474 <__ulp+0x2c>
 800e46e:	2080      	movs	r0, #128	; 0x80
 800e470:	0600      	lsls	r0, r0, #24
 800e472:	40d8      	lsrs	r0, r3
 800e474:	2100      	movs	r1, #0
 800e476:	e7f5      	b.n	800e464 <__ulp+0x1c>
 800e478:	7ff00000 	.word	0x7ff00000
 800e47c:	fcc00000 	.word	0xfcc00000

0800e480 <__b2d>:
 800e480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e482:	0006      	movs	r6, r0
 800e484:	6903      	ldr	r3, [r0, #16]
 800e486:	3614      	adds	r6, #20
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	18f3      	adds	r3, r6, r3
 800e48c:	1f1d      	subs	r5, r3, #4
 800e48e:	682c      	ldr	r4, [r5, #0]
 800e490:	000f      	movs	r7, r1
 800e492:	0020      	movs	r0, r4
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	f7ff fd63 	bl	800df60 <__hi0bits>
 800e49a:	2220      	movs	r2, #32
 800e49c:	1a12      	subs	r2, r2, r0
 800e49e:	603a      	str	r2, [r7, #0]
 800e4a0:	0003      	movs	r3, r0
 800e4a2:	4a1c      	ldr	r2, [pc, #112]	; (800e514 <__b2d+0x94>)
 800e4a4:	280a      	cmp	r0, #10
 800e4a6:	dc15      	bgt.n	800e4d4 <__b2d+0x54>
 800e4a8:	210b      	movs	r1, #11
 800e4aa:	0027      	movs	r7, r4
 800e4ac:	1a09      	subs	r1, r1, r0
 800e4ae:	40cf      	lsrs	r7, r1
 800e4b0:	433a      	orrs	r2, r7
 800e4b2:	468c      	mov	ip, r1
 800e4b4:	0011      	movs	r1, r2
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	42ae      	cmp	r6, r5
 800e4ba:	d202      	bcs.n	800e4c2 <__b2d+0x42>
 800e4bc:	9a01      	ldr	r2, [sp, #4]
 800e4be:	3a08      	subs	r2, #8
 800e4c0:	6812      	ldr	r2, [r2, #0]
 800e4c2:	3315      	adds	r3, #21
 800e4c4:	409c      	lsls	r4, r3
 800e4c6:	4663      	mov	r3, ip
 800e4c8:	0027      	movs	r7, r4
 800e4ca:	40da      	lsrs	r2, r3
 800e4cc:	4317      	orrs	r7, r2
 800e4ce:	0038      	movs	r0, r7
 800e4d0:	b003      	add	sp, #12
 800e4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d4:	2700      	movs	r7, #0
 800e4d6:	42ae      	cmp	r6, r5
 800e4d8:	d202      	bcs.n	800e4e0 <__b2d+0x60>
 800e4da:	9d01      	ldr	r5, [sp, #4]
 800e4dc:	3d08      	subs	r5, #8
 800e4de:	682f      	ldr	r7, [r5, #0]
 800e4e0:	210b      	movs	r1, #11
 800e4e2:	4249      	negs	r1, r1
 800e4e4:	468c      	mov	ip, r1
 800e4e6:	449c      	add	ip, r3
 800e4e8:	2b0b      	cmp	r3, #11
 800e4ea:	d010      	beq.n	800e50e <__b2d+0x8e>
 800e4ec:	4661      	mov	r1, ip
 800e4ee:	2320      	movs	r3, #32
 800e4f0:	408c      	lsls	r4, r1
 800e4f2:	1a5b      	subs	r3, r3, r1
 800e4f4:	0039      	movs	r1, r7
 800e4f6:	40d9      	lsrs	r1, r3
 800e4f8:	430c      	orrs	r4, r1
 800e4fa:	4322      	orrs	r2, r4
 800e4fc:	0011      	movs	r1, r2
 800e4fe:	2200      	movs	r2, #0
 800e500:	42b5      	cmp	r5, r6
 800e502:	d901      	bls.n	800e508 <__b2d+0x88>
 800e504:	3d04      	subs	r5, #4
 800e506:	682a      	ldr	r2, [r5, #0]
 800e508:	4664      	mov	r4, ip
 800e50a:	40a7      	lsls	r7, r4
 800e50c:	e7dd      	b.n	800e4ca <__b2d+0x4a>
 800e50e:	4322      	orrs	r2, r4
 800e510:	0011      	movs	r1, r2
 800e512:	e7dc      	b.n	800e4ce <__b2d+0x4e>
 800e514:	3ff00000 	.word	0x3ff00000

0800e518 <__d2b>:
 800e518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e51a:	2101      	movs	r1, #1
 800e51c:	0014      	movs	r4, r2
 800e51e:	001d      	movs	r5, r3
 800e520:	9f08      	ldr	r7, [sp, #32]
 800e522:	f7ff fc5b 	bl	800dddc <_Balloc>
 800e526:	1e06      	subs	r6, r0, #0
 800e528:	d105      	bne.n	800e536 <__d2b+0x1e>
 800e52a:	0032      	movs	r2, r6
 800e52c:	4b24      	ldr	r3, [pc, #144]	; (800e5c0 <__d2b+0xa8>)
 800e52e:	4825      	ldr	r0, [pc, #148]	; (800e5c4 <__d2b+0xac>)
 800e530:	4925      	ldr	r1, [pc, #148]	; (800e5c8 <__d2b+0xb0>)
 800e532:	f002 ff17 	bl	8011364 <__assert_func>
 800e536:	032b      	lsls	r3, r5, #12
 800e538:	006d      	lsls	r5, r5, #1
 800e53a:	0b1b      	lsrs	r3, r3, #12
 800e53c:	0d6d      	lsrs	r5, r5, #21
 800e53e:	d125      	bne.n	800e58c <__d2b+0x74>
 800e540:	9301      	str	r3, [sp, #4]
 800e542:	2c00      	cmp	r4, #0
 800e544:	d028      	beq.n	800e598 <__d2b+0x80>
 800e546:	4668      	mov	r0, sp
 800e548:	9400      	str	r4, [sp, #0]
 800e54a:	f7ff fd23 	bl	800df94 <__lo0bits>
 800e54e:	9b01      	ldr	r3, [sp, #4]
 800e550:	9900      	ldr	r1, [sp, #0]
 800e552:	2800      	cmp	r0, #0
 800e554:	d01e      	beq.n	800e594 <__d2b+0x7c>
 800e556:	2220      	movs	r2, #32
 800e558:	001c      	movs	r4, r3
 800e55a:	1a12      	subs	r2, r2, r0
 800e55c:	4094      	lsls	r4, r2
 800e55e:	0022      	movs	r2, r4
 800e560:	40c3      	lsrs	r3, r0
 800e562:	430a      	orrs	r2, r1
 800e564:	6172      	str	r2, [r6, #20]
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	9c01      	ldr	r4, [sp, #4]
 800e56a:	61b4      	str	r4, [r6, #24]
 800e56c:	1e63      	subs	r3, r4, #1
 800e56e:	419c      	sbcs	r4, r3
 800e570:	3401      	adds	r4, #1
 800e572:	6134      	str	r4, [r6, #16]
 800e574:	2d00      	cmp	r5, #0
 800e576:	d017      	beq.n	800e5a8 <__d2b+0x90>
 800e578:	2435      	movs	r4, #53	; 0x35
 800e57a:	4b14      	ldr	r3, [pc, #80]	; (800e5cc <__d2b+0xb4>)
 800e57c:	18ed      	adds	r5, r5, r3
 800e57e:	182d      	adds	r5, r5, r0
 800e580:	603d      	str	r5, [r7, #0]
 800e582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e584:	1a24      	subs	r4, r4, r0
 800e586:	601c      	str	r4, [r3, #0]
 800e588:	0030      	movs	r0, r6
 800e58a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e58c:	2280      	movs	r2, #128	; 0x80
 800e58e:	0352      	lsls	r2, r2, #13
 800e590:	4313      	orrs	r3, r2
 800e592:	e7d5      	b.n	800e540 <__d2b+0x28>
 800e594:	6171      	str	r1, [r6, #20]
 800e596:	e7e7      	b.n	800e568 <__d2b+0x50>
 800e598:	a801      	add	r0, sp, #4
 800e59a:	f7ff fcfb 	bl	800df94 <__lo0bits>
 800e59e:	9b01      	ldr	r3, [sp, #4]
 800e5a0:	2401      	movs	r4, #1
 800e5a2:	6173      	str	r3, [r6, #20]
 800e5a4:	3020      	adds	r0, #32
 800e5a6:	e7e4      	b.n	800e572 <__d2b+0x5a>
 800e5a8:	4b09      	ldr	r3, [pc, #36]	; (800e5d0 <__d2b+0xb8>)
 800e5aa:	18c0      	adds	r0, r0, r3
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <__d2b+0xbc>)
 800e5ae:	6038      	str	r0, [r7, #0]
 800e5b0:	18e3      	adds	r3, r4, r3
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	18f3      	adds	r3, r6, r3
 800e5b6:	6958      	ldr	r0, [r3, #20]
 800e5b8:	f7ff fcd2 	bl	800df60 <__hi0bits>
 800e5bc:	0164      	lsls	r4, r4, #5
 800e5be:	e7e0      	b.n	800e582 <__d2b+0x6a>
 800e5c0:	08015aa9 	.word	0x08015aa9
 800e5c4:	08015b1a 	.word	0x08015b1a
 800e5c8:	0000030f 	.word	0x0000030f
 800e5cc:	fffffbcd 	.word	0xfffffbcd
 800e5d0:	fffffbce 	.word	0xfffffbce
 800e5d4:	3fffffff 	.word	0x3fffffff

0800e5d8 <__ratio>:
 800e5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	000f      	movs	r7, r1
 800e5de:	a904      	add	r1, sp, #16
 800e5e0:	0006      	movs	r6, r0
 800e5e2:	f7ff ff4d 	bl	800e480 <__b2d>
 800e5e6:	9000      	str	r0, [sp, #0]
 800e5e8:	9101      	str	r1, [sp, #4]
 800e5ea:	9c00      	ldr	r4, [sp, #0]
 800e5ec:	9d01      	ldr	r5, [sp, #4]
 800e5ee:	0038      	movs	r0, r7
 800e5f0:	a905      	add	r1, sp, #20
 800e5f2:	f7ff ff45 	bl	800e480 <__b2d>
 800e5f6:	9002      	str	r0, [sp, #8]
 800e5f8:	9103      	str	r1, [sp, #12]
 800e5fa:	9a02      	ldr	r2, [sp, #8]
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	6930      	ldr	r0, [r6, #16]
 800e600:	6939      	ldr	r1, [r7, #16]
 800e602:	9e04      	ldr	r6, [sp, #16]
 800e604:	1a40      	subs	r0, r0, r1
 800e606:	9905      	ldr	r1, [sp, #20]
 800e608:	0140      	lsls	r0, r0, #5
 800e60a:	1a71      	subs	r1, r6, r1
 800e60c:	1841      	adds	r1, r0, r1
 800e60e:	0508      	lsls	r0, r1, #20
 800e610:	2900      	cmp	r1, #0
 800e612:	dd07      	ble.n	800e624 <__ratio+0x4c>
 800e614:	9901      	ldr	r1, [sp, #4]
 800e616:	1845      	adds	r5, r0, r1
 800e618:	0020      	movs	r0, r4
 800e61a:	0029      	movs	r1, r5
 800e61c:	f7f2 fc2c 	bl	8000e78 <__aeabi_ddiv>
 800e620:	b007      	add	sp, #28
 800e622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e624:	9903      	ldr	r1, [sp, #12]
 800e626:	1a0b      	subs	r3, r1, r0
 800e628:	e7f6      	b.n	800e618 <__ratio+0x40>

0800e62a <__copybits>:
 800e62a:	b570      	push	{r4, r5, r6, lr}
 800e62c:	0014      	movs	r4, r2
 800e62e:	0005      	movs	r5, r0
 800e630:	3901      	subs	r1, #1
 800e632:	6913      	ldr	r3, [r2, #16]
 800e634:	1149      	asrs	r1, r1, #5
 800e636:	3101      	adds	r1, #1
 800e638:	0089      	lsls	r1, r1, #2
 800e63a:	3414      	adds	r4, #20
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	1841      	adds	r1, r0, r1
 800e640:	18e3      	adds	r3, r4, r3
 800e642:	42a3      	cmp	r3, r4
 800e644:	d80d      	bhi.n	800e662 <__copybits+0x38>
 800e646:	0014      	movs	r4, r2
 800e648:	3411      	adds	r4, #17
 800e64a:	2500      	movs	r5, #0
 800e64c:	429c      	cmp	r4, r3
 800e64e:	d803      	bhi.n	800e658 <__copybits+0x2e>
 800e650:	1a9b      	subs	r3, r3, r2
 800e652:	3b11      	subs	r3, #17
 800e654:	089b      	lsrs	r3, r3, #2
 800e656:	009d      	lsls	r5, r3, #2
 800e658:	2300      	movs	r3, #0
 800e65a:	1940      	adds	r0, r0, r5
 800e65c:	4281      	cmp	r1, r0
 800e65e:	d803      	bhi.n	800e668 <__copybits+0x3e>
 800e660:	bd70      	pop	{r4, r5, r6, pc}
 800e662:	cc40      	ldmia	r4!, {r6}
 800e664:	c540      	stmia	r5!, {r6}
 800e666:	e7ec      	b.n	800e642 <__copybits+0x18>
 800e668:	c008      	stmia	r0!, {r3}
 800e66a:	e7f7      	b.n	800e65c <__copybits+0x32>

0800e66c <__any_on>:
 800e66c:	0002      	movs	r2, r0
 800e66e:	6900      	ldr	r0, [r0, #16]
 800e670:	b510      	push	{r4, lr}
 800e672:	3214      	adds	r2, #20
 800e674:	114b      	asrs	r3, r1, #5
 800e676:	4298      	cmp	r0, r3
 800e678:	db13      	blt.n	800e6a2 <__any_on+0x36>
 800e67a:	dd0c      	ble.n	800e696 <__any_on+0x2a>
 800e67c:	241f      	movs	r4, #31
 800e67e:	0008      	movs	r0, r1
 800e680:	4020      	ands	r0, r4
 800e682:	4221      	tst	r1, r4
 800e684:	d007      	beq.n	800e696 <__any_on+0x2a>
 800e686:	0099      	lsls	r1, r3, #2
 800e688:	588c      	ldr	r4, [r1, r2]
 800e68a:	0021      	movs	r1, r4
 800e68c:	40c1      	lsrs	r1, r0
 800e68e:	4081      	lsls	r1, r0
 800e690:	2001      	movs	r0, #1
 800e692:	428c      	cmp	r4, r1
 800e694:	d104      	bne.n	800e6a0 <__any_on+0x34>
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	18d3      	adds	r3, r2, r3
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d803      	bhi.n	800e6a6 <__any_on+0x3a>
 800e69e:	2000      	movs	r0, #0
 800e6a0:	bd10      	pop	{r4, pc}
 800e6a2:	0003      	movs	r3, r0
 800e6a4:	e7f7      	b.n	800e696 <__any_on+0x2a>
 800e6a6:	3b04      	subs	r3, #4
 800e6a8:	6819      	ldr	r1, [r3, #0]
 800e6aa:	2900      	cmp	r1, #0
 800e6ac:	d0f5      	beq.n	800e69a <__any_on+0x2e>
 800e6ae:	2001      	movs	r0, #1
 800e6b0:	e7f6      	b.n	800e6a0 <__any_on+0x34>

0800e6b2 <__ascii_wctomb>:
 800e6b2:	0003      	movs	r3, r0
 800e6b4:	1e08      	subs	r0, r1, #0
 800e6b6:	d005      	beq.n	800e6c4 <__ascii_wctomb+0x12>
 800e6b8:	2aff      	cmp	r2, #255	; 0xff
 800e6ba:	d904      	bls.n	800e6c6 <__ascii_wctomb+0x14>
 800e6bc:	228a      	movs	r2, #138	; 0x8a
 800e6be:	2001      	movs	r0, #1
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	4240      	negs	r0, r0
 800e6c4:	4770      	bx	lr
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	700a      	strb	r2, [r1, #0]
 800e6ca:	e7fb      	b.n	800e6c4 <__ascii_wctomb+0x12>

0800e6cc <_svfprintf_r>:
 800e6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ce:	b0d9      	sub	sp, #356	; 0x164
 800e6d0:	001c      	movs	r4, r3
 800e6d2:	910b      	str	r1, [sp, #44]	; 0x2c
 800e6d4:	9208      	str	r2, [sp, #32]
 800e6d6:	900a      	str	r0, [sp, #40]	; 0x28
 800e6d8:	f002 fdae 	bl	8011238 <_localeconv_r>
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	0018      	movs	r0, r3
 800e6e0:	931c      	str	r3, [sp, #112]	; 0x70
 800e6e2:	f7f1 fd0f 	bl	8000104 <strlen>
 800e6e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6e8:	9016      	str	r0, [sp, #88]	; 0x58
 800e6ea:	899b      	ldrh	r3, [r3, #12]
 800e6ec:	061b      	lsls	r3, r3, #24
 800e6ee:	d517      	bpl.n	800e720 <_svfprintf_r+0x54>
 800e6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6f2:	691b      	ldr	r3, [r3, #16]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d113      	bne.n	800e720 <_svfprintf_r+0x54>
 800e6f8:	2140      	movs	r1, #64	; 0x40
 800e6fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6fc:	f7fd fa94 	bl	800bc28 <_malloc_r>
 800e700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e702:	6018      	str	r0, [r3, #0]
 800e704:	6118      	str	r0, [r3, #16]
 800e706:	2800      	cmp	r0, #0
 800e708:	d107      	bne.n	800e71a <_svfprintf_r+0x4e>
 800e70a:	230c      	movs	r3, #12
 800e70c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	3b0d      	subs	r3, #13
 800e712:	9317      	str	r3, [sp, #92]	; 0x5c
 800e714:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e716:	b059      	add	sp, #356	; 0x164
 800e718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e71a:	2340      	movs	r3, #64	; 0x40
 800e71c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e71e:	6153      	str	r3, [r2, #20]
 800e720:	2300      	movs	r3, #0
 800e722:	2200      	movs	r2, #0
 800e724:	932e      	str	r3, [sp, #184]	; 0xb8
 800e726:	932d      	str	r3, [sp, #180]	; 0xb4
 800e728:	930e      	str	r3, [sp, #56]	; 0x38
 800e72a:	2300      	movs	r3, #0
 800e72c:	9214      	str	r2, [sp, #80]	; 0x50
 800e72e:	9315      	str	r3, [sp, #84]	; 0x54
 800e730:	2300      	movs	r3, #0
 800e732:	af2f      	add	r7, sp, #188	; 0xbc
 800e734:	972c      	str	r7, [sp, #176]	; 0xb0
 800e736:	931f      	str	r3, [sp, #124]	; 0x7c
 800e738:	931e      	str	r3, [sp, #120]	; 0x78
 800e73a:	9312      	str	r3, [sp, #72]	; 0x48
 800e73c:	931b      	str	r3, [sp, #108]	; 0x6c
 800e73e:	931d      	str	r3, [sp, #116]	; 0x74
 800e740:	9317      	str	r3, [sp, #92]	; 0x5c
 800e742:	9d08      	ldr	r5, [sp, #32]
 800e744:	782b      	ldrb	r3, [r5, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <_svfprintf_r+0x84>
 800e74a:	2b25      	cmp	r3, #37	; 0x25
 800e74c:	d000      	beq.n	800e750 <_svfprintf_r+0x84>
 800e74e:	e091      	b.n	800e874 <_svfprintf_r+0x1a8>
 800e750:	9b08      	ldr	r3, [sp, #32]
 800e752:	1aee      	subs	r6, r5, r3
 800e754:	429d      	cmp	r5, r3
 800e756:	d016      	beq.n	800e786 <_svfprintf_r+0xba>
 800e758:	603b      	str	r3, [r7, #0]
 800e75a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e75c:	607e      	str	r6, [r7, #4]
 800e75e:	199b      	adds	r3, r3, r6
 800e760:	932e      	str	r3, [sp, #184]	; 0xb8
 800e762:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e764:	3708      	adds	r7, #8
 800e766:	3301      	adds	r3, #1
 800e768:	932d      	str	r3, [sp, #180]	; 0xb4
 800e76a:	2b07      	cmp	r3, #7
 800e76c:	dd08      	ble.n	800e780 <_svfprintf_r+0xb4>
 800e76e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e770:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e772:	aa2c      	add	r2, sp, #176	; 0xb0
 800e774:	f004 f83a 	bl	80127ec <__ssprint_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	d000      	beq.n	800e77e <_svfprintf_r+0xb2>
 800e77c:	e1cf      	b.n	800eb1e <_svfprintf_r+0x452>
 800e77e:	af2f      	add	r7, sp, #188	; 0xbc
 800e780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e782:	199b      	adds	r3, r3, r6
 800e784:	9317      	str	r3, [sp, #92]	; 0x5c
 800e786:	782b      	ldrb	r3, [r5, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d101      	bne.n	800e790 <_svfprintf_r+0xc4>
 800e78c:	f001 f99e 	bl	800facc <_svfprintf_r+0x1400>
 800e790:	221b      	movs	r2, #27
 800e792:	2300      	movs	r3, #0
 800e794:	a91e      	add	r1, sp, #120	; 0x78
 800e796:	1852      	adds	r2, r2, r1
 800e798:	7013      	strb	r3, [r2, #0]
 800e79a:	2201      	movs	r2, #1
 800e79c:	001e      	movs	r6, r3
 800e79e:	4252      	negs	r2, r2
 800e7a0:	3501      	adds	r5, #1
 800e7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800e7a4:	9318      	str	r3, [sp, #96]	; 0x60
 800e7a6:	1c6b      	adds	r3, r5, #1
 800e7a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e7aa:	782b      	ldrb	r3, [r5, #0]
 800e7ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e7b0:	3820      	subs	r0, #32
 800e7b2:	285a      	cmp	r0, #90	; 0x5a
 800e7b4:	d901      	bls.n	800e7ba <_svfprintf_r+0xee>
 800e7b6:	f000 fe20 	bl	800f3fa <_svfprintf_r+0xd2e>
 800e7ba:	f7f1 fcb5 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e7be:	0078      	.short	0x0078
 800e7c0:	061e061e 	.word	0x061e061e
 800e7c4:	061e0082 	.word	0x061e0082
 800e7c8:	061e061e 	.word	0x061e061e
 800e7cc:	061e005d 	.word	0x061e005d
 800e7d0:	0084061e 	.word	0x0084061e
 800e7d4:	061e008c 	.word	0x061e008c
 800e7d8:	0091008a 	.word	0x0091008a
 800e7dc:	00b2061e 	.word	0x00b2061e
 800e7e0:	00b400b4 	.word	0x00b400b4
 800e7e4:	00b400b4 	.word	0x00b400b4
 800e7e8:	00b400b4 	.word	0x00b400b4
 800e7ec:	00b400b4 	.word	0x00b400b4
 800e7f0:	061e00b4 	.word	0x061e00b4
 800e7f4:	061e061e 	.word	0x061e061e
 800e7f8:	061e061e 	.word	0x061e061e
 800e7fc:	061e061e 	.word	0x061e061e
 800e800:	061e013b 	.word	0x061e013b
 800e804:	00f400e0 	.word	0x00f400e0
 800e808:	013b013b 	.word	0x013b013b
 800e80c:	061e013b 	.word	0x061e013b
 800e810:	061e061e 	.word	0x061e061e
 800e814:	00c7061e 	.word	0x00c7061e
 800e818:	061e061e 	.word	0x061e061e
 800e81c:	061e04c7 	.word	0x061e04c7
 800e820:	061e061e 	.word	0x061e061e
 800e824:	061e050a 	.word	0x061e050a
 800e828:	061e052a 	.word	0x061e052a
 800e82c:	055c061e 	.word	0x055c061e
 800e830:	061e061e 	.word	0x061e061e
 800e834:	061e061e 	.word	0x061e061e
 800e838:	061e061e 	.word	0x061e061e
 800e83c:	061e061e 	.word	0x061e061e
 800e840:	061e013b 	.word	0x061e013b
 800e844:	00f600e0 	.word	0x00f600e0
 800e848:	013b013b 	.word	0x013b013b
 800e84c:	00c9013b 	.word	0x00c9013b
 800e850:	00dc00f6 	.word	0x00dc00f6
 800e854:	00d5061e 	.word	0x00d5061e
 800e858:	04a7061e 	.word	0x04a7061e
 800e85c:	04fa04c9 	.word	0x04fa04c9
 800e860:	061e00dc 	.word	0x061e00dc
 800e864:	0080050a 	.word	0x0080050a
 800e868:	061e052c 	.word	0x061e052c
 800e86c:	057c061e 	.word	0x057c061e
 800e870:	0080061e 	.word	0x0080061e
 800e874:	3501      	adds	r5, #1
 800e876:	e765      	b.n	800e744 <_svfprintf_r+0x78>
 800e878:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e87a:	f002 fcdd 	bl	8011238 <_localeconv_r>
 800e87e:	6843      	ldr	r3, [r0, #4]
 800e880:	0018      	movs	r0, r3
 800e882:	931d      	str	r3, [sp, #116]	; 0x74
 800e884:	f7f1 fc3e 	bl	8000104 <strlen>
 800e888:	901b      	str	r0, [sp, #108]	; 0x6c
 800e88a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e88c:	f002 fcd4 	bl	8011238 <_localeconv_r>
 800e890:	6883      	ldr	r3, [r0, #8]
 800e892:	9312      	str	r3, [sp, #72]	; 0x48
 800e894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e896:	2b00      	cmp	r3, #0
 800e898:	d011      	beq.n	800e8be <_svfprintf_r+0x1f2>
 800e89a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00e      	beq.n	800e8be <_svfprintf_r+0x1f2>
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00b      	beq.n	800e8be <_svfprintf_r+0x1f2>
 800e8a6:	2380      	movs	r3, #128	; 0x80
 800e8a8:	00db      	lsls	r3, r3, #3
 800e8aa:	431e      	orrs	r6, r3
 800e8ac:	e007      	b.n	800e8be <_svfprintf_r+0x1f2>
 800e8ae:	231b      	movs	r3, #27
 800e8b0:	aa1e      	add	r2, sp, #120	; 0x78
 800e8b2:	189b      	adds	r3, r3, r2
 800e8b4:	781a      	ldrb	r2, [r3, #0]
 800e8b6:	2a00      	cmp	r2, #0
 800e8b8:	d101      	bne.n	800e8be <_svfprintf_r+0x1f2>
 800e8ba:	3220      	adds	r2, #32
 800e8bc:	701a      	strb	r2, [r3, #0]
 800e8be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800e8c0:	e771      	b.n	800e7a6 <_svfprintf_r+0xda>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e7f1      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e8c6:	cc08      	ldmia	r4!, {r3}
 800e8c8:	9318      	str	r3, [sp, #96]	; 0x60
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	daf7      	bge.n	800e8be <_svfprintf_r+0x1f2>
 800e8ce:	425b      	negs	r3, r3
 800e8d0:	9318      	str	r3, [sp, #96]	; 0x60
 800e8d2:	2304      	movs	r3, #4
 800e8d4:	e7e9      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e8d6:	231b      	movs	r3, #27
 800e8d8:	aa1e      	add	r2, sp, #120	; 0x78
 800e8da:	189b      	adds	r3, r3, r2
 800e8dc:	222b      	movs	r2, #43	; 0x2b
 800e8de:	e7ed      	b.n	800e8bc <_svfprintf_r+0x1f0>
 800e8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e8e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8e4:	7812      	ldrb	r2, [r2, #0]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	920f      	str	r2, [sp, #60]	; 0x3c
 800e8ea:	2a2a      	cmp	r2, #42	; 0x2a
 800e8ec:	d010      	beq.n	800e910 <_svfprintf_r+0x244>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	9209      	str	r2, [sp, #36]	; 0x24
 800e8f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8f6:	3a30      	subs	r2, #48	; 0x30
 800e8f8:	2a09      	cmp	r2, #9
 800e8fa:	d900      	bls.n	800e8fe <_svfprintf_r+0x232>
 800e8fc:	e757      	b.n	800e7ae <_svfprintf_r+0xe2>
 800e8fe:	200a      	movs	r0, #10
 800e900:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e902:	4341      	muls	r1, r0
 800e904:	188a      	adds	r2, r1, r2
 800e906:	9209      	str	r2, [sp, #36]	; 0x24
 800e908:	781a      	ldrb	r2, [r3, #0]
 800e90a:	3301      	adds	r3, #1
 800e90c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e90e:	e7f0      	b.n	800e8f2 <_svfprintf_r+0x226>
 800e910:	cc04      	ldmia	r4!, {r2}
 800e912:	9209      	str	r2, [sp, #36]	; 0x24
 800e914:	2a00      	cmp	r2, #0
 800e916:	da02      	bge.n	800e91e <_svfprintf_r+0x252>
 800e918:	2201      	movs	r2, #1
 800e91a:	4252      	negs	r2, r2
 800e91c:	9209      	str	r2, [sp, #36]	; 0x24
 800e91e:	9313      	str	r3, [sp, #76]	; 0x4c
 800e920:	e7cd      	b.n	800e8be <_svfprintf_r+0x1f2>
 800e922:	2380      	movs	r3, #128	; 0x80
 800e924:	e7c1      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e926:	2200      	movs	r2, #0
 800e928:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e92a:	9218      	str	r2, [sp, #96]	; 0x60
 800e92c:	210a      	movs	r1, #10
 800e92e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e930:	434a      	muls	r2, r1
 800e932:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e934:	3930      	subs	r1, #48	; 0x30
 800e936:	188a      	adds	r2, r1, r2
 800e938:	9218      	str	r2, [sp, #96]	; 0x60
 800e93a:	001a      	movs	r2, r3
 800e93c:	7812      	ldrb	r2, [r2, #0]
 800e93e:	3301      	adds	r3, #1
 800e940:	920f      	str	r2, [sp, #60]	; 0x3c
 800e942:	3a30      	subs	r2, #48	; 0x30
 800e944:	9313      	str	r3, [sp, #76]	; 0x4c
 800e946:	2a09      	cmp	r2, #9
 800e948:	d9f0      	bls.n	800e92c <_svfprintf_r+0x260>
 800e94a:	e730      	b.n	800e7ae <_svfprintf_r+0xe2>
 800e94c:	2308      	movs	r3, #8
 800e94e:	e7ac      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e950:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	2b68      	cmp	r3, #104	; 0x68
 800e956:	d105      	bne.n	800e964 <_svfprintf_r+0x298>
 800e958:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e95a:	3301      	adds	r3, #1
 800e95c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e95e:	2380      	movs	r3, #128	; 0x80
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	e7a2      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e964:	2340      	movs	r3, #64	; 0x40
 800e966:	e7a0      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b6c      	cmp	r3, #108	; 0x6c
 800e96e:	d104      	bne.n	800e97a <_svfprintf_r+0x2ae>
 800e970:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e972:	3301      	adds	r3, #1
 800e974:	9313      	str	r3, [sp, #76]	; 0x4c
 800e976:	2320      	movs	r3, #32
 800e978:	e797      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e97a:	2310      	movs	r3, #16
 800e97c:	e795      	b.n	800e8aa <_svfprintf_r+0x1de>
 800e97e:	0021      	movs	r1, r4
 800e980:	c904      	ldmia	r1!, {r2}
 800e982:	ab3f      	add	r3, sp, #252	; 0xfc
 800e984:	910d      	str	r1, [sp, #52]	; 0x34
 800e986:	211b      	movs	r1, #27
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	2200      	movs	r2, #0
 800e98c:	a81e      	add	r0, sp, #120	; 0x78
 800e98e:	1809      	adds	r1, r1, r0
 800e990:	700a      	strb	r2, [r1, #0]
 800e992:	920c      	str	r2, [sp, #48]	; 0x30
 800e994:	3201      	adds	r2, #1
 800e996:	9209      	str	r2, [sp, #36]	; 0x24
 800e998:	2200      	movs	r2, #0
 800e99a:	9308      	str	r3, [sp, #32]
 800e99c:	0015      	movs	r5, r2
 800e99e:	9219      	str	r2, [sp, #100]	; 0x64
 800e9a0:	9210      	str	r2, [sp, #64]	; 0x40
 800e9a2:	9211      	str	r2, [sp, #68]	; 0x44
 800e9a4:	e1f1      	b.n	800ed8a <_svfprintf_r+0x6be>
 800e9a6:	2310      	movs	r3, #16
 800e9a8:	431e      	orrs	r6, r3
 800e9aa:	06b3      	lsls	r3, r6, #26
 800e9ac:	d531      	bpl.n	800ea12 <_svfprintf_r+0x346>
 800e9ae:	2307      	movs	r3, #7
 800e9b0:	3407      	adds	r4, #7
 800e9b2:	439c      	bics	r4, r3
 800e9b4:	0022      	movs	r2, r4
 800e9b6:	ca18      	ldmia	r2!, {r3, r4}
 800e9b8:	9306      	str	r3, [sp, #24]
 800e9ba:	9407      	str	r4, [sp, #28]
 800e9bc:	920d      	str	r2, [sp, #52]	; 0x34
 800e9be:	9a07      	ldr	r2, [sp, #28]
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	2a00      	cmp	r2, #0
 800e9c4:	da0b      	bge.n	800e9de <_svfprintf_r+0x312>
 800e9c6:	9c06      	ldr	r4, [sp, #24]
 800e9c8:	9d07      	ldr	r5, [sp, #28]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	4261      	negs	r1, r4
 800e9ce:	41aa      	sbcs	r2, r5
 800e9d0:	9106      	str	r1, [sp, #24]
 800e9d2:	9207      	str	r2, [sp, #28]
 800e9d4:	221b      	movs	r2, #27
 800e9d6:	a91e      	add	r1, sp, #120	; 0x78
 800e9d8:	1852      	adds	r2, r2, r1
 800e9da:	212d      	movs	r1, #45	; 0x2d
 800e9dc:	7011      	strb	r1, [r2, #0]
 800e9de:	9907      	ldr	r1, [sp, #28]
 800e9e0:	9a06      	ldr	r2, [sp, #24]
 800e9e2:	430a      	orrs	r2, r1
 800e9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9e6:	3101      	adds	r1, #1
 800e9e8:	d101      	bne.n	800e9ee <_svfprintf_r+0x322>
 800e9ea:	f001 f87b 	bl	800fae4 <_svfprintf_r+0x1418>
 800e9ee:	2180      	movs	r1, #128	; 0x80
 800e9f0:	0034      	movs	r4, r6
 800e9f2:	438c      	bics	r4, r1
 800e9f4:	2a00      	cmp	r2, #0
 800e9f6:	d001      	beq.n	800e9fc <_svfprintf_r+0x330>
 800e9f8:	f001 f879 	bl	800faee <_svfprintf_r+0x1422>
 800e9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9fe:	2a00      	cmp	r2, #0
 800ea00:	d101      	bne.n	800ea06 <_svfprintf_r+0x33a>
 800ea02:	f000 fcef 	bl	800f3e4 <_svfprintf_r+0xd18>
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d001      	beq.n	800ea0e <_svfprintf_r+0x342>
 800ea0a:	f001 f874 	bl	800faf6 <_svfprintf_r+0x142a>
 800ea0e:	f000 fc79 	bl	800f304 <_svfprintf_r+0xc38>
 800ea12:	0022      	movs	r2, r4
 800ea14:	ca08      	ldmia	r2!, {r3}
 800ea16:	920d      	str	r2, [sp, #52]	; 0x34
 800ea18:	06f2      	lsls	r2, r6, #27
 800ea1a:	d503      	bpl.n	800ea24 <_svfprintf_r+0x358>
 800ea1c:	9306      	str	r3, [sp, #24]
 800ea1e:	17db      	asrs	r3, r3, #31
 800ea20:	9307      	str	r3, [sp, #28]
 800ea22:	e7cc      	b.n	800e9be <_svfprintf_r+0x2f2>
 800ea24:	0672      	lsls	r2, r6, #25
 800ea26:	d501      	bpl.n	800ea2c <_svfprintf_r+0x360>
 800ea28:	b21b      	sxth	r3, r3
 800ea2a:	e7f7      	b.n	800ea1c <_svfprintf_r+0x350>
 800ea2c:	05b2      	lsls	r2, r6, #22
 800ea2e:	d5f5      	bpl.n	800ea1c <_svfprintf_r+0x350>
 800ea30:	b25b      	sxtb	r3, r3
 800ea32:	e7f3      	b.n	800ea1c <_svfprintf_r+0x350>
 800ea34:	2307      	movs	r3, #7
 800ea36:	3407      	adds	r4, #7
 800ea38:	439c      	bics	r4, r3
 800ea3a:	0022      	movs	r2, r4
 800ea3c:	ca18      	ldmia	r2!, {r3, r4}
 800ea3e:	920d      	str	r2, [sp, #52]	; 0x34
 800ea40:	2201      	movs	r2, #1
 800ea42:	9314      	str	r3, [sp, #80]	; 0x50
 800ea44:	9415      	str	r4, [sp, #84]	; 0x54
 800ea46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ea4a:	005c      	lsls	r4, r3, #1
 800ea4c:	0864      	lsrs	r4, r4, #1
 800ea4e:	0028      	movs	r0, r5
 800ea50:	0021      	movs	r1, r4
 800ea52:	4b3e      	ldr	r3, [pc, #248]	; (800eb4c <_svfprintf_r+0x480>)
 800ea54:	4252      	negs	r2, r2
 800ea56:	f7f3 fc4d 	bl	80022f4 <__aeabi_dcmpun>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d126      	bne.n	800eaac <_svfprintf_r+0x3e0>
 800ea5e:	2201      	movs	r2, #1
 800ea60:	0028      	movs	r0, r5
 800ea62:	0021      	movs	r1, r4
 800ea64:	4b39      	ldr	r3, [pc, #228]	; (800eb4c <_svfprintf_r+0x480>)
 800ea66:	4252      	negs	r2, r2
 800ea68:	f7f1 fcfe 	bl	8000468 <__aeabi_dcmple>
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d11d      	bne.n	800eaac <_svfprintf_r+0x3e0>
 800ea70:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea72:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea74:	2200      	movs	r2, #0
 800ea76:	2300      	movs	r3, #0
 800ea78:	f7f1 fcec 	bl	8000454 <__aeabi_dcmplt>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d004      	beq.n	800ea8a <_svfprintf_r+0x3be>
 800ea80:	231b      	movs	r3, #27
 800ea82:	aa1e      	add	r2, sp, #120	; 0x78
 800ea84:	189b      	adds	r3, r3, r2
 800ea86:	222d      	movs	r2, #45	; 0x2d
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	4b31      	ldr	r3, [pc, #196]	; (800eb50 <_svfprintf_r+0x484>)
 800ea8c:	9308      	str	r3, [sp, #32]
 800ea8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea90:	2b47      	cmp	r3, #71	; 0x47
 800ea92:	dd01      	ble.n	800ea98 <_svfprintf_r+0x3cc>
 800ea94:	4b2f      	ldr	r3, [pc, #188]	; (800eb54 <_svfprintf_r+0x488>)
 800ea96:	9308      	str	r3, [sp, #32]
 800ea98:	2380      	movs	r3, #128	; 0x80
 800ea9a:	439e      	bics	r6, r3
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	930c      	str	r3, [sp, #48]	; 0x30
 800eaa0:	3303      	adds	r3, #3
 800eaa2:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9319      	str	r3, [sp, #100]	; 0x64
 800eaa8:	f000 fc78 	bl	800f39c <_svfprintf_r+0xcd0>
 800eaac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eab0:	0010      	movs	r0, r2
 800eab2:	0019      	movs	r1, r3
 800eab4:	f7f3 fc1e 	bl	80022f4 <__aeabi_dcmpun>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d00e      	beq.n	800eada <_svfprintf_r+0x40e>
 800eabc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	da04      	bge.n	800eacc <_svfprintf_r+0x400>
 800eac2:	231b      	movs	r3, #27
 800eac4:	aa1e      	add	r2, sp, #120	; 0x78
 800eac6:	189b      	adds	r3, r3, r2
 800eac8:	222d      	movs	r2, #45	; 0x2d
 800eaca:	701a      	strb	r2, [r3, #0]
 800eacc:	4b22      	ldr	r3, [pc, #136]	; (800eb58 <_svfprintf_r+0x48c>)
 800eace:	9308      	str	r3, [sp, #32]
 800ead0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ead2:	2b47      	cmp	r3, #71	; 0x47
 800ead4:	dde0      	ble.n	800ea98 <_svfprintf_r+0x3cc>
 800ead6:	4b21      	ldr	r3, [pc, #132]	; (800eb5c <_svfprintf_r+0x490>)
 800ead8:	e7dd      	b.n	800ea96 <_svfprintf_r+0x3ca>
 800eada:	2320      	movs	r3, #32
 800eadc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eade:	439a      	bics	r2, r3
 800eae0:	9210      	str	r2, [sp, #64]	; 0x40
 800eae2:	2a41      	cmp	r2, #65	; 0x41
 800eae4:	d123      	bne.n	800eb2e <_svfprintf_r+0x462>
 800eae6:	2230      	movs	r2, #48	; 0x30
 800eae8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eaea:	ab25      	add	r3, sp, #148	; 0x94
 800eaec:	701a      	strb	r2, [r3, #0]
 800eaee:	3248      	adds	r2, #72	; 0x48
 800eaf0:	2961      	cmp	r1, #97	; 0x61
 800eaf2:	d000      	beq.n	800eaf6 <_svfprintf_r+0x42a>
 800eaf4:	3a20      	subs	r2, #32
 800eaf6:	705a      	strb	r2, [r3, #1]
 800eaf8:	2302      	movs	r3, #2
 800eafa:	431e      	orrs	r6, r3
 800eafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafe:	2b63      	cmp	r3, #99	; 0x63
 800eb00:	dd2e      	ble.n	800eb60 <_svfprintf_r+0x494>
 800eb02:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb04:	1c59      	adds	r1, r3, #1
 800eb06:	f7fd f88f 	bl	800bc28 <_malloc_r>
 800eb0a:	9008      	str	r0, [sp, #32]
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d000      	beq.n	800eb12 <_svfprintf_r+0x446>
 800eb10:	e216      	b.n	800ef40 <_svfprintf_r+0x874>
 800eb12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb14:	899a      	ldrh	r2, [r3, #12]
 800eb16:	2340      	movs	r3, #64	; 0x40
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb1c:	8193      	strh	r3, [r2, #12]
 800eb1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb20:	899b      	ldrh	r3, [r3, #12]
 800eb22:	065b      	lsls	r3, r3, #25
 800eb24:	d400      	bmi.n	800eb28 <_svfprintf_r+0x45c>
 800eb26:	e5f5      	b.n	800e714 <_svfprintf_r+0x48>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	425b      	negs	r3, r3
 800eb2c:	e5f1      	b.n	800e712 <_svfprintf_r+0x46>
 800eb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb30:	900c      	str	r0, [sp, #48]	; 0x30
 800eb32:	3301      	adds	r3, #1
 800eb34:	d100      	bne.n	800eb38 <_svfprintf_r+0x46c>
 800eb36:	e206      	b.n	800ef46 <_svfprintf_r+0x87a>
 800eb38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb3a:	2b47      	cmp	r3, #71	; 0x47
 800eb3c:	d114      	bne.n	800eb68 <_svfprintf_r+0x49c>
 800eb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d111      	bne.n	800eb68 <_svfprintf_r+0x49c>
 800eb44:	3301      	adds	r3, #1
 800eb46:	9309      	str	r3, [sp, #36]	; 0x24
 800eb48:	e00e      	b.n	800eb68 <_svfprintf_r+0x49c>
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	7fefffff 	.word	0x7fefffff
 800eb50:	08015c74 	.word	0x08015c74
 800eb54:	08015c78 	.word	0x08015c78
 800eb58:	08015c7c 	.word	0x08015c7c
 800eb5c:	08015c80 	.word	0x08015c80
 800eb60:	2300      	movs	r3, #0
 800eb62:	930c      	str	r3, [sp, #48]	; 0x30
 800eb64:	ab3f      	add	r3, sp, #252	; 0xfc
 800eb66:	9308      	str	r3, [sp, #32]
 800eb68:	2380      	movs	r3, #128	; 0x80
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	4333      	orrs	r3, r6
 800eb6e:	931a      	str	r3, [sp, #104]	; 0x68
 800eb70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb72:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	db00      	blt.n	800eb7a <_svfprintf_r+0x4ae>
 800eb78:	e1e7      	b.n	800ef4a <_svfprintf_r+0x87e>
 800eb7a:	2280      	movs	r2, #128	; 0x80
 800eb7c:	0612      	lsls	r2, r2, #24
 800eb7e:	4694      	mov	ip, r2
 800eb80:	4463      	add	r3, ip
 800eb82:	930e      	str	r3, [sp, #56]	; 0x38
 800eb84:	232d      	movs	r3, #45	; 0x2d
 800eb86:	9322      	str	r3, [sp, #136]	; 0x88
 800eb88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb8a:	2b41      	cmp	r3, #65	; 0x41
 800eb8c:	d000      	beq.n	800eb90 <_svfprintf_r+0x4c4>
 800eb8e:	e1f5      	b.n	800ef7c <_svfprintf_r+0x8b0>
 800eb90:	0028      	movs	r0, r5
 800eb92:	aa26      	add	r2, sp, #152	; 0x98
 800eb94:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb96:	f002 fb73 	bl	8011280 <frexp>
 800eb9a:	23ff      	movs	r3, #255	; 0xff
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	059b      	lsls	r3, r3, #22
 800eba0:	f7f2 fd64 	bl	800166c <__aeabi_dmul>
 800eba4:	2200      	movs	r2, #0
 800eba6:	2300      	movs	r3, #0
 800eba8:	0004      	movs	r4, r0
 800ebaa:	000d      	movs	r5, r1
 800ebac:	f7f1 fc4c 	bl	8000448 <__aeabi_dcmpeq>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d001      	beq.n	800ebb8 <_svfprintf_r+0x4ec>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	9326      	str	r3, [sp, #152]	; 0x98
 800ebb8:	4bda      	ldr	r3, [pc, #872]	; (800ef24 <_svfprintf_r+0x858>)
 800ebba:	9319      	str	r3, [sp, #100]	; 0x64
 800ebbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebbe:	2b61      	cmp	r3, #97	; 0x61
 800ebc0:	d001      	beq.n	800ebc6 <_svfprintf_r+0x4fa>
 800ebc2:	4bd9      	ldr	r3, [pc, #868]	; (800ef28 <_svfprintf_r+0x85c>)
 800ebc4:	9319      	str	r3, [sp, #100]	; 0x64
 800ebc6:	9b08      	ldr	r3, [sp, #32]
 800ebc8:	930e      	str	r3, [sp, #56]	; 0x38
 800ebca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	9311      	str	r3, [sp, #68]	; 0x44
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4bd6      	ldr	r3, [pc, #856]	; (800ef2c <_svfprintf_r+0x860>)
 800ebd4:	0020      	movs	r0, r4
 800ebd6:	0029      	movs	r1, r5
 800ebd8:	f7f2 fd48 	bl	800166c <__aeabi_dmul>
 800ebdc:	000d      	movs	r5, r1
 800ebde:	0004      	movs	r4, r0
 800ebe0:	f7f3 fba6 	bl	8002330 <__aeabi_d2iz>
 800ebe4:	9021      	str	r0, [sp, #132]	; 0x84
 800ebe6:	f7f3 fbd9 	bl	800239c <__aeabi_i2d>
 800ebea:	0002      	movs	r2, r0
 800ebec:	000b      	movs	r3, r1
 800ebee:	0020      	movs	r0, r4
 800ebf0:	0029      	movs	r1, r5
 800ebf2:	f7f2 fffd 	bl	8001bf0 <__aeabi_dsub>
 800ebf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebf8:	000d      	movs	r5, r1
 800ebfa:	001a      	movs	r2, r3
 800ebfc:	3201      	adds	r2, #1
 800ebfe:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ec00:	920e      	str	r2, [sp, #56]	; 0x38
 800ec02:	9223      	str	r2, [sp, #140]	; 0x8c
 800ec04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ec06:	0004      	movs	r4, r0
 800ec08:	5c52      	ldrb	r2, [r2, r1]
 800ec0a:	701a      	strb	r2, [r3, #0]
 800ec0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec0e:	9320      	str	r3, [sp, #128]	; 0x80
 800ec10:	3301      	adds	r3, #1
 800ec12:	d00a      	beq.n	800ec2a <_svfprintf_r+0x55e>
 800ec14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec16:	2200      	movs	r2, #0
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ec1c:	0020      	movs	r0, r4
 800ec1e:	2300      	movs	r3, #0
 800ec20:	0029      	movs	r1, r5
 800ec22:	f7f1 fc11 	bl	8000448 <__aeabi_dcmpeq>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d0d2      	beq.n	800ebd0 <_svfprintf_r+0x504>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	0020      	movs	r0, r4
 800ec2e:	0029      	movs	r1, r5
 800ec30:	4bbf      	ldr	r3, [pc, #764]	; (800ef30 <_svfprintf_r+0x864>)
 800ec32:	f7f1 fc23 	bl	800047c <__aeabi_dcmpgt>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d10c      	bne.n	800ec54 <_svfprintf_r+0x588>
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	0020      	movs	r0, r4
 800ec3e:	0029      	movs	r1, r5
 800ec40:	4bbb      	ldr	r3, [pc, #748]	; (800ef30 <_svfprintf_r+0x864>)
 800ec42:	f7f1 fc01 	bl	8000448 <__aeabi_dcmpeq>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d100      	bne.n	800ec4c <_svfprintf_r+0x580>
 800ec4a:	e191      	b.n	800ef70 <_svfprintf_r+0x8a4>
 800ec4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec4e:	07db      	lsls	r3, r3, #31
 800ec50:	d400      	bmi.n	800ec54 <_svfprintf_r+0x588>
 800ec52:	e18d      	b.n	800ef70 <_svfprintf_r+0x8a4>
 800ec54:	2030      	movs	r0, #48	; 0x30
 800ec56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec58:	932a      	str	r3, [sp, #168]	; 0xa8
 800ec5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec5c:	7bdb      	ldrb	r3, [r3, #15]
 800ec5e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ec60:	3a01      	subs	r2, #1
 800ec62:	922a      	str	r2, [sp, #168]	; 0xa8
 800ec64:	7811      	ldrb	r1, [r2, #0]
 800ec66:	4299      	cmp	r1, r3
 800ec68:	d100      	bne.n	800ec6c <_svfprintf_r+0x5a0>
 800ec6a:	e171      	b.n	800ef50 <_svfprintf_r+0x884>
 800ec6c:	1c4b      	adds	r3, r1, #1
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2939      	cmp	r1, #57	; 0x39
 800ec72:	d101      	bne.n	800ec78 <_svfprintf_r+0x5ac>
 800ec74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec76:	7a9b      	ldrb	r3, [r3, #10]
 800ec78:	7013      	strb	r3, [r2, #0]
 800ec7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ec7c:	9a08      	ldr	r2, [sp, #32]
 800ec7e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ec80:	1a9b      	subs	r3, r3, r2
 800ec82:	930e      	str	r3, [sp, #56]	; 0x38
 800ec84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec86:	2b47      	cmp	r3, #71	; 0x47
 800ec88:	d000      	beq.n	800ec8c <_svfprintf_r+0x5c0>
 800ec8a:	e1c4      	b.n	800f016 <_svfprintf_r+0x94a>
 800ec8c:	1ceb      	adds	r3, r5, #3
 800ec8e:	db03      	blt.n	800ec98 <_svfprintf_r+0x5cc>
 800ec90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec92:	42ab      	cmp	r3, r5
 800ec94:	db00      	blt.n	800ec98 <_svfprintf_r+0x5cc>
 800ec96:	e1e6      	b.n	800f066 <_svfprintf_r+0x99a>
 800ec98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec9a:	3b02      	subs	r3, #2
 800ec9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec9e:	223c      	movs	r2, #60	; 0x3c
 800eca0:	466b      	mov	r3, sp
 800eca2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eca4:	189b      	adds	r3, r3, r2
 800eca6:	1e6c      	subs	r4, r5, #1
 800eca8:	3a1c      	subs	r2, #28
 800ecaa:	2000      	movs	r0, #0
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	9426      	str	r4, [sp, #152]	; 0x98
 800ecb0:	4391      	bics	r1, r2
 800ecb2:	2941      	cmp	r1, #65	; 0x41
 800ecb4:	d102      	bne.n	800ecbc <_svfprintf_r+0x5f0>
 800ecb6:	330f      	adds	r3, #15
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	3001      	adds	r0, #1
 800ecbc:	a928      	add	r1, sp, #160	; 0xa0
 800ecbe:	700b      	strb	r3, [r1, #0]
 800ecc0:	232b      	movs	r3, #43	; 0x2b
 800ecc2:	2c00      	cmp	r4, #0
 800ecc4:	da02      	bge.n	800eccc <_svfprintf_r+0x600>
 800ecc6:	2401      	movs	r4, #1
 800ecc8:	3302      	adds	r3, #2
 800ecca:	1b64      	subs	r4, r4, r5
 800eccc:	704b      	strb	r3, [r1, #1]
 800ecce:	2c09      	cmp	r4, #9
 800ecd0:	dc00      	bgt.n	800ecd4 <_svfprintf_r+0x608>
 800ecd2:	e1ba      	b.n	800f04a <_svfprintf_r+0x97e>
 800ecd4:	2337      	movs	r3, #55	; 0x37
 800ecd6:	250a      	movs	r5, #10
 800ecd8:	aa1e      	add	r2, sp, #120	; 0x78
 800ecda:	189b      	adds	r3, r3, r2
 800ecdc:	9310      	str	r3, [sp, #64]	; 0x40
 800ecde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ece0:	0020      	movs	r0, r4
 800ece2:	9309      	str	r3, [sp, #36]	; 0x24
 800ece4:	0029      	movs	r1, r5
 800ece6:	3b01      	subs	r3, #1
 800ece8:	9310      	str	r3, [sp, #64]	; 0x40
 800ecea:	f7f1 fb97 	bl	800041c <__aeabi_idivmod>
 800ecee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecf0:	3130      	adds	r1, #48	; 0x30
 800ecf2:	7019      	strb	r1, [r3, #0]
 800ecf4:	0020      	movs	r0, r4
 800ecf6:	0029      	movs	r1, r5
 800ecf8:	9411      	str	r4, [sp, #68]	; 0x44
 800ecfa:	f7f1 faa9 	bl	8000250 <__divsi3>
 800ecfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed00:	0004      	movs	r4, r0
 800ed02:	2b63      	cmp	r3, #99	; 0x63
 800ed04:	dceb      	bgt.n	800ecde <_svfprintf_r+0x612>
 800ed06:	222a      	movs	r2, #42	; 0x2a
 800ed08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed0a:	a81e      	add	r0, sp, #120	; 0x78
 800ed0c:	1e99      	subs	r1, r3, #2
 800ed0e:	1812      	adds	r2, r2, r0
 800ed10:	2037      	movs	r0, #55	; 0x37
 800ed12:	000b      	movs	r3, r1
 800ed14:	3430      	adds	r4, #48	; 0x30
 800ed16:	700c      	strb	r4, [r1, #0]
 800ed18:	ac1e      	add	r4, sp, #120	; 0x78
 800ed1a:	1900      	adds	r0, r0, r4
 800ed1c:	4283      	cmp	r3, r0
 800ed1e:	d200      	bcs.n	800ed22 <_svfprintf_r+0x656>
 800ed20:	e18e      	b.n	800f040 <_svfprintf_r+0x974>
 800ed22:	2300      	movs	r3, #0
 800ed24:	4281      	cmp	r1, r0
 800ed26:	d804      	bhi.n	800ed32 <_svfprintf_r+0x666>
 800ed28:	aa1e      	add	r2, sp, #120	; 0x78
 800ed2a:	3339      	adds	r3, #57	; 0x39
 800ed2c:	189b      	adds	r3, r3, r2
 800ed2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed30:	1a9b      	subs	r3, r3, r2
 800ed32:	222a      	movs	r2, #42	; 0x2a
 800ed34:	a91e      	add	r1, sp, #120	; 0x78
 800ed36:	1852      	adds	r2, r2, r1
 800ed38:	18d3      	adds	r3, r2, r3
 800ed3a:	aa28      	add	r2, sp, #160	; 0xa0
 800ed3c:	1a9b      	subs	r3, r3, r2
 800ed3e:	931e      	str	r3, [sp, #120]	; 0x78
 800ed40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed44:	4694      	mov	ip, r2
 800ed46:	4463      	add	r3, ip
 800ed48:	9309      	str	r3, [sp, #36]	; 0x24
 800ed4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	dc01      	bgt.n	800ed54 <_svfprintf_r+0x688>
 800ed50:	07f3      	lsls	r3, r6, #31
 800ed52:	d504      	bpl.n	800ed5e <_svfprintf_r+0x692>
 800ed54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ed56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed58:	4694      	mov	ip, r2
 800ed5a:	4463      	add	r3, ip
 800ed5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed5e:	2280      	movs	r2, #128	; 0x80
 800ed60:	4b74      	ldr	r3, [pc, #464]	; (800ef34 <_svfprintf_r+0x868>)
 800ed62:	0052      	lsls	r2, r2, #1
 800ed64:	4033      	ands	r3, r6
 800ed66:	431a      	orrs	r2, r3
 800ed68:	2300      	movs	r3, #0
 800ed6a:	001d      	movs	r5, r3
 800ed6c:	921a      	str	r2, [sp, #104]	; 0x68
 800ed6e:	9310      	str	r3, [sp, #64]	; 0x40
 800ed70:	9311      	str	r3, [sp, #68]	; 0x44
 800ed72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed74:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ed76:	9319      	str	r3, [sp, #100]	; 0x64
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d006      	beq.n	800ed8a <_svfprintf_r+0x6be>
 800ed7c:	231b      	movs	r3, #27
 800ed7e:	aa1e      	add	r2, sp, #120	; 0x78
 800ed80:	189b      	adds	r3, r3, r2
 800ed82:	222d      	movs	r2, #45	; 0x2d
 800ed84:	701a      	strb	r2, [r3, #0]
 800ed86:	2300      	movs	r3, #0
 800ed88:	9319      	str	r3, [sp, #100]	; 0x64
 800ed8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed90:	4293      	cmp	r3, r2
 800ed92:	da00      	bge.n	800ed96 <_svfprintf_r+0x6ca>
 800ed94:	921a      	str	r2, [sp, #104]	; 0x68
 800ed96:	231b      	movs	r3, #27
 800ed98:	aa1e      	add	r2, sp, #120	; 0x78
 800ed9a:	189b      	adds	r3, r3, r2
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	1e5a      	subs	r2, r3, #1
 800eda0:	4193      	sbcs	r3, r2
 800eda2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eda4:	18d3      	adds	r3, r2, r3
 800eda6:	931a      	str	r3, [sp, #104]	; 0x68
 800eda8:	0032      	movs	r2, r6
 800edaa:	2302      	movs	r3, #2
 800edac:	401a      	ands	r2, r3
 800edae:	9220      	str	r2, [sp, #128]	; 0x80
 800edb0:	421e      	tst	r6, r3
 800edb2:	d002      	beq.n	800edba <_svfprintf_r+0x6ee>
 800edb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800edb6:	3302      	adds	r3, #2
 800edb8:	931a      	str	r3, [sp, #104]	; 0x68
 800edba:	2384      	movs	r3, #132	; 0x84
 800edbc:	0032      	movs	r2, r6
 800edbe:	401a      	ands	r2, r3
 800edc0:	9221      	str	r2, [sp, #132]	; 0x84
 800edc2:	421e      	tst	r6, r3
 800edc4:	d11f      	bne.n	800ee06 <_svfprintf_r+0x73a>
 800edc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800edc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800edca:	1a9c      	subs	r4, r3, r2
 800edcc:	2c00      	cmp	r4, #0
 800edce:	dd1a      	ble.n	800ee06 <_svfprintf_r+0x73a>
 800edd0:	0039      	movs	r1, r7
 800edd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800edd4:	4858      	ldr	r0, [pc, #352]	; (800ef38 <_svfprintf_r+0x86c>)
 800edd6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800edd8:	3301      	adds	r3, #1
 800edda:	3108      	adds	r1, #8
 800eddc:	6038      	str	r0, [r7, #0]
 800edde:	2c10      	cmp	r4, #16
 800ede0:	dd00      	ble.n	800ede4 <_svfprintf_r+0x718>
 800ede2:	e31c      	b.n	800f41e <_svfprintf_r+0xd52>
 800ede4:	607c      	str	r4, [r7, #4]
 800ede6:	18a4      	adds	r4, r4, r2
 800ede8:	000f      	movs	r7, r1
 800edea:	942e      	str	r4, [sp, #184]	; 0xb8
 800edec:	932d      	str	r3, [sp, #180]	; 0xb4
 800edee:	2b07      	cmp	r3, #7
 800edf0:	dd09      	ble.n	800ee06 <_svfprintf_r+0x73a>
 800edf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800edf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800edf6:	aa2c      	add	r2, sp, #176	; 0xb0
 800edf8:	f003 fcf8 	bl	80127ec <__ssprint_r>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d001      	beq.n	800ee04 <_svfprintf_r+0x738>
 800ee00:	f000 fe43 	bl	800fa8a <_svfprintf_r+0x13be>
 800ee04:	af2f      	add	r7, sp, #188	; 0xbc
 800ee06:	221b      	movs	r2, #27
 800ee08:	a91e      	add	r1, sp, #120	; 0x78
 800ee0a:	1852      	adds	r2, r2, r1
 800ee0c:	7811      	ldrb	r1, [r2, #0]
 800ee0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ee10:	2900      	cmp	r1, #0
 800ee12:	d014      	beq.n	800ee3e <_svfprintf_r+0x772>
 800ee14:	603a      	str	r2, [r7, #0]
 800ee16:	2201      	movs	r2, #1
 800ee18:	189b      	adds	r3, r3, r2
 800ee1a:	932e      	str	r3, [sp, #184]	; 0xb8
 800ee1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee1e:	607a      	str	r2, [r7, #4]
 800ee20:	189b      	adds	r3, r3, r2
 800ee22:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee24:	3708      	adds	r7, #8
 800ee26:	2b07      	cmp	r3, #7
 800ee28:	dd09      	ble.n	800ee3e <_svfprintf_r+0x772>
 800ee2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee30:	f003 fcdc 	bl	80127ec <__ssprint_r>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d001      	beq.n	800ee3c <_svfprintf_r+0x770>
 800ee38:	f000 fe27 	bl	800fa8a <_svfprintf_r+0x13be>
 800ee3c:	af2f      	add	r7, sp, #188	; 0xbc
 800ee3e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ee42:	2a00      	cmp	r2, #0
 800ee44:	d015      	beq.n	800ee72 <_svfprintf_r+0x7a6>
 800ee46:	aa25      	add	r2, sp, #148	; 0x94
 800ee48:	603a      	str	r2, [r7, #0]
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	189b      	adds	r3, r3, r2
 800ee4e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ee50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	3301      	adds	r3, #1
 800ee56:	932d      	str	r3, [sp, #180]	; 0xb4
 800ee58:	3708      	adds	r7, #8
 800ee5a:	2b07      	cmp	r3, #7
 800ee5c:	dd09      	ble.n	800ee72 <_svfprintf_r+0x7a6>
 800ee5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ee62:	aa2c      	add	r2, sp, #176	; 0xb0
 800ee64:	f003 fcc2 	bl	80127ec <__ssprint_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d001      	beq.n	800ee70 <_svfprintf_r+0x7a4>
 800ee6c:	f000 fe0d 	bl	800fa8a <_svfprintf_r+0x13be>
 800ee70:	af2f      	add	r7, sp, #188	; 0xbc
 800ee72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee74:	2b80      	cmp	r3, #128	; 0x80
 800ee76:	d11f      	bne.n	800eeb8 <_svfprintf_r+0x7ec>
 800ee78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ee7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ee7c:	1a9c      	subs	r4, r3, r2
 800ee7e:	2c00      	cmp	r4, #0
 800ee80:	dd1a      	ble.n	800eeb8 <_svfprintf_r+0x7ec>
 800ee82:	0039      	movs	r1, r7
 800ee84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ee86:	482d      	ldr	r0, [pc, #180]	; (800ef3c <_svfprintf_r+0x870>)
 800ee88:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	3108      	adds	r1, #8
 800ee8e:	6038      	str	r0, [r7, #0]
 800ee90:	2c10      	cmp	r4, #16
 800ee92:	dd00      	ble.n	800ee96 <_svfprintf_r+0x7ca>
 800ee94:	e2d6      	b.n	800f444 <_svfprintf_r+0xd78>
 800ee96:	607c      	str	r4, [r7, #4]
 800ee98:	18a4      	adds	r4, r4, r2
 800ee9a:	000f      	movs	r7, r1
 800ee9c:	942e      	str	r4, [sp, #184]	; 0xb8
 800ee9e:	932d      	str	r3, [sp, #180]	; 0xb4
 800eea0:	2b07      	cmp	r3, #7
 800eea2:	dd09      	ble.n	800eeb8 <_svfprintf_r+0x7ec>
 800eea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eea6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eea8:	aa2c      	add	r2, sp, #176	; 0xb0
 800eeaa:	f003 fc9f 	bl	80127ec <__ssprint_r>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d001      	beq.n	800eeb6 <_svfprintf_r+0x7ea>
 800eeb2:	f000 fdea 	bl	800fa8a <_svfprintf_r+0x13be>
 800eeb6:	af2f      	add	r7, sp, #188	; 0xbc
 800eeb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eeba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eebc:	1a9c      	subs	r4, r3, r2
 800eebe:	2c00      	cmp	r4, #0
 800eec0:	dd1a      	ble.n	800eef8 <_svfprintf_r+0x82c>
 800eec2:	0039      	movs	r1, r7
 800eec4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eec6:	481d      	ldr	r0, [pc, #116]	; (800ef3c <_svfprintf_r+0x870>)
 800eec8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eeca:	3301      	adds	r3, #1
 800eecc:	3108      	adds	r1, #8
 800eece:	6038      	str	r0, [r7, #0]
 800eed0:	2c10      	cmp	r4, #16
 800eed2:	dd00      	ble.n	800eed6 <_svfprintf_r+0x80a>
 800eed4:	e2c9      	b.n	800f46a <_svfprintf_r+0xd9e>
 800eed6:	18a2      	adds	r2, r4, r2
 800eed8:	607c      	str	r4, [r7, #4]
 800eeda:	922e      	str	r2, [sp, #184]	; 0xb8
 800eedc:	000f      	movs	r7, r1
 800eede:	932d      	str	r3, [sp, #180]	; 0xb4
 800eee0:	2b07      	cmp	r3, #7
 800eee2:	dd09      	ble.n	800eef8 <_svfprintf_r+0x82c>
 800eee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eee6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eee8:	aa2c      	add	r2, sp, #176	; 0xb0
 800eeea:	f003 fc7f 	bl	80127ec <__ssprint_r>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d001      	beq.n	800eef6 <_svfprintf_r+0x82a>
 800eef2:	f000 fdca 	bl	800fa8a <_svfprintf_r+0x13be>
 800eef6:	af2f      	add	r7, sp, #188	; 0xbc
 800eef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eefa:	9319      	str	r3, [sp, #100]	; 0x64
 800eefc:	05f3      	lsls	r3, r6, #23
 800eefe:	d500      	bpl.n	800ef02 <_svfprintf_r+0x836>
 800ef00:	e2ce      	b.n	800f4a0 <_svfprintf_r+0xdd4>
 800ef02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef04:	9b08      	ldr	r3, [sp, #32]
 800ef06:	4694      	mov	ip, r2
 800ef08:	603b      	str	r3, [r7, #0]
 800ef0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0c:	607b      	str	r3, [r7, #4]
 800ef0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef10:	4463      	add	r3, ip
 800ef12:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef16:	3301      	adds	r3, #1
 800ef18:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef1a:	2b07      	cmp	r3, #7
 800ef1c:	dd00      	ble.n	800ef20 <_svfprintf_r+0x854>
 800ef1e:	e3a3      	b.n	800f668 <_svfprintf_r+0xf9c>
 800ef20:	3708      	adds	r7, #8
 800ef22:	e301      	b.n	800f528 <_svfprintf_r+0xe5c>
 800ef24:	08015c84 	.word	0x08015c84
 800ef28:	08015c95 	.word	0x08015c95
 800ef2c:	40300000 	.word	0x40300000
 800ef30:	3fe00000 	.word	0x3fe00000
 800ef34:	fffffbff 	.word	0xfffffbff
 800ef38:	08015ca8 	.word	0x08015ca8
 800ef3c:	08015cb8 	.word	0x08015cb8
 800ef40:	9b08      	ldr	r3, [sp, #32]
 800ef42:	930c      	str	r3, [sp, #48]	; 0x30
 800ef44:	e610      	b.n	800eb68 <_svfprintf_r+0x49c>
 800ef46:	2306      	movs	r3, #6
 800ef48:	e5fd      	b.n	800eb46 <_svfprintf_r+0x47a>
 800ef4a:	930e      	str	r3, [sp, #56]	; 0x38
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	e61a      	b.n	800eb86 <_svfprintf_r+0x4ba>
 800ef50:	7010      	strb	r0, [r2, #0]
 800ef52:	e684      	b.n	800ec5e <_svfprintf_r+0x592>
 800ef54:	7018      	strb	r0, [r3, #0]
 800ef56:	3301      	adds	r3, #1
 800ef58:	1aca      	subs	r2, r1, r3
 800ef5a:	d5fb      	bpl.n	800ef54 <_svfprintf_r+0x888>
 800ef5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef5e:	2300      	movs	r3, #0
 800ef60:	3201      	adds	r2, #1
 800ef62:	db01      	blt.n	800ef68 <_svfprintf_r+0x89c>
 800ef64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ef66:	3301      	adds	r3, #1
 800ef68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	9323      	str	r3, [sp, #140]	; 0x8c
 800ef6e:	e684      	b.n	800ec7a <_svfprintf_r+0x5ae>
 800ef70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef72:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ef74:	2030      	movs	r0, #48	; 0x30
 800ef76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef78:	1851      	adds	r1, r2, r1
 800ef7a:	e7ed      	b.n	800ef58 <_svfprintf_r+0x88c>
 800ef7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef7e:	2303      	movs	r3, #3
 800ef80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ef82:	2a46      	cmp	r2, #70	; 0x46
 800ef84:	d006      	beq.n	800ef94 <_svfprintf_r+0x8c8>
 800ef86:	0014      	movs	r4, r2
 800ef88:	3c45      	subs	r4, #69	; 0x45
 800ef8a:	4262      	negs	r2, r4
 800ef8c:	4154      	adcs	r4, r2
 800ef8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef90:	3b01      	subs	r3, #1
 800ef92:	1914      	adds	r4, r2, r4
 800ef94:	aa2a      	add	r2, sp, #168	; 0xa8
 800ef96:	9204      	str	r2, [sp, #16]
 800ef98:	aa27      	add	r2, sp, #156	; 0x9c
 800ef9a:	9203      	str	r2, [sp, #12]
 800ef9c:	aa26      	add	r2, sp, #152	; 0x98
 800ef9e:	9202      	str	r2, [sp, #8]
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	002a      	movs	r2, r5
 800efa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efa8:	9401      	str	r4, [sp, #4]
 800efaa:	f002 fad7 	bl	801155c <_dtoa_r>
 800efae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efb0:	9008      	str	r0, [sp, #32]
 800efb2:	2b47      	cmp	r3, #71	; 0x47
 800efb4:	d103      	bne.n	800efbe <_svfprintf_r+0x8f2>
 800efb6:	07f3      	lsls	r3, r6, #31
 800efb8:	d401      	bmi.n	800efbe <_svfprintf_r+0x8f2>
 800efba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800efbc:	e65e      	b.n	800ec7c <_svfprintf_r+0x5b0>
 800efbe:	9b08      	ldr	r3, [sp, #32]
 800efc0:	191b      	adds	r3, r3, r4
 800efc2:	9311      	str	r3, [sp, #68]	; 0x44
 800efc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efc6:	2b46      	cmp	r3, #70	; 0x46
 800efc8:	d112      	bne.n	800eff0 <_svfprintf_r+0x924>
 800efca:	9b08      	ldr	r3, [sp, #32]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	2b30      	cmp	r3, #48	; 0x30
 800efd0:	d10a      	bne.n	800efe8 <_svfprintf_r+0x91c>
 800efd2:	2200      	movs	r2, #0
 800efd4:	2300      	movs	r3, #0
 800efd6:	0028      	movs	r0, r5
 800efd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800efda:	f7f1 fa35 	bl	8000448 <__aeabi_dcmpeq>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d102      	bne.n	800efe8 <_svfprintf_r+0x91c>
 800efe2:	2301      	movs	r3, #1
 800efe4:	1b1b      	subs	r3, r3, r4
 800efe6:	9326      	str	r3, [sp, #152]	; 0x98
 800efe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800efec:	18d3      	adds	r3, r2, r3
 800efee:	9311      	str	r3, [sp, #68]	; 0x44
 800eff0:	2200      	movs	r2, #0
 800eff2:	2300      	movs	r3, #0
 800eff4:	0028      	movs	r0, r5
 800eff6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eff8:	f7f1 fa26 	bl	8000448 <__aeabi_dcmpeq>
 800effc:	2800      	cmp	r0, #0
 800effe:	d001      	beq.n	800f004 <_svfprintf_r+0x938>
 800f000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f002:	932a      	str	r3, [sp, #168]	; 0xa8
 800f004:	2230      	movs	r2, #48	; 0x30
 800f006:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f008:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f00a:	4299      	cmp	r1, r3
 800f00c:	d9d5      	bls.n	800efba <_svfprintf_r+0x8ee>
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	912a      	str	r1, [sp, #168]	; 0xa8
 800f012:	701a      	strb	r2, [r3, #0]
 800f014:	e7f7      	b.n	800f006 <_svfprintf_r+0x93a>
 800f016:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f018:	2b46      	cmp	r3, #70	; 0x46
 800f01a:	d000      	beq.n	800f01e <_svfprintf_r+0x952>
 800f01c:	e63f      	b.n	800ec9e <_svfprintf_r+0x5d2>
 800f01e:	2201      	movs	r2, #1
 800f020:	0033      	movs	r3, r6
 800f022:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f024:	4013      	ands	r3, r2
 800f026:	430b      	orrs	r3, r1
 800f028:	2d00      	cmp	r5, #0
 800f02a:	dd2c      	ble.n	800f086 <_svfprintf_r+0x9ba>
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d046      	beq.n	800f0be <_svfprintf_r+0x9f2>
 800f030:	000a      	movs	r2, r1
 800f032:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f034:	18eb      	adds	r3, r5, r3
 800f036:	18d3      	adds	r3, r2, r3
 800f038:	9309      	str	r3, [sp, #36]	; 0x24
 800f03a:	2366      	movs	r3, #102	; 0x66
 800f03c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f03e:	e030      	b.n	800f0a2 <_svfprintf_r+0x9d6>
 800f040:	781c      	ldrb	r4, [r3, #0]
 800f042:	3301      	adds	r3, #1
 800f044:	7014      	strb	r4, [r2, #0]
 800f046:	3201      	adds	r2, #1
 800f048:	e668      	b.n	800ed1c <_svfprintf_r+0x650>
 800f04a:	222a      	movs	r2, #42	; 0x2a
 800f04c:	ab1e      	add	r3, sp, #120	; 0x78
 800f04e:	18d2      	adds	r2, r2, r3
 800f050:	2800      	cmp	r0, #0
 800f052:	d104      	bne.n	800f05e <_svfprintf_r+0x992>
 800f054:	2330      	movs	r3, #48	; 0x30
 800f056:	222b      	movs	r2, #43	; 0x2b
 800f058:	708b      	strb	r3, [r1, #2]
 800f05a:	ab1e      	add	r3, sp, #120	; 0x78
 800f05c:	18d2      	adds	r2, r2, r3
 800f05e:	3430      	adds	r4, #48	; 0x30
 800f060:	1c53      	adds	r3, r2, #1
 800f062:	7014      	strb	r4, [r2, #0]
 800f064:	e669      	b.n	800ed3a <_svfprintf_r+0x66e>
 800f066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f068:	42ab      	cmp	r3, r5
 800f06a:	dd12      	ble.n	800f092 <_svfprintf_r+0x9c6>
 800f06c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f070:	4694      	mov	ip, r2
 800f072:	4463      	add	r3, ip
 800f074:	9309      	str	r3, [sp, #36]	; 0x24
 800f076:	2367      	movs	r3, #103	; 0x67
 800f078:	930f      	str	r3, [sp, #60]	; 0x3c
 800f07a:	2d00      	cmp	r5, #0
 800f07c:	dc11      	bgt.n	800f0a2 <_svfprintf_r+0x9d6>
 800f07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f080:	1b5b      	subs	r3, r3, r5
 800f082:	3301      	adds	r3, #1
 800f084:	e00c      	b.n	800f0a0 <_svfprintf_r+0x9d4>
 800f086:	2b00      	cmp	r3, #0
 800f088:	d01b      	beq.n	800f0c2 <_svfprintf_r+0x9f6>
 800f08a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f08e:	3301      	adds	r3, #1
 800f090:	e7d1      	b.n	800f036 <_svfprintf_r+0x96a>
 800f092:	2367      	movs	r3, #103	; 0x67
 800f094:	9509      	str	r5, [sp, #36]	; 0x24
 800f096:	930f      	str	r3, [sp, #60]	; 0x3c
 800f098:	07f3      	lsls	r3, r6, #31
 800f09a:	d502      	bpl.n	800f0a2 <_svfprintf_r+0x9d6>
 800f09c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f09e:	18eb      	adds	r3, r5, r3
 800f0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0a2:	2380      	movs	r3, #128	; 0x80
 800f0a4:	0032      	movs	r2, r6
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	401a      	ands	r2, r3
 800f0aa:	9211      	str	r2, [sp, #68]	; 0x44
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	9210      	str	r2, [sp, #64]	; 0x40
 800f0b0:	421e      	tst	r6, r3
 800f0b2:	d100      	bne.n	800f0b6 <_svfprintf_r+0x9ea>
 800f0b4:	e65d      	b.n	800ed72 <_svfprintf_r+0x6a6>
 800f0b6:	4295      	cmp	r5, r2
 800f0b8:	dc25      	bgt.n	800f106 <_svfprintf_r+0xa3a>
 800f0ba:	9211      	str	r2, [sp, #68]	; 0x44
 800f0bc:	e659      	b.n	800ed72 <_svfprintf_r+0x6a6>
 800f0be:	9509      	str	r5, [sp, #36]	; 0x24
 800f0c0:	e7bb      	b.n	800f03a <_svfprintf_r+0x96e>
 800f0c2:	2366      	movs	r3, #102	; 0x66
 800f0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800f0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0c8:	e7eb      	b.n	800f0a2 <_svfprintf_r+0x9d6>
 800f0ca:	42ab      	cmp	r3, r5
 800f0cc:	da0e      	bge.n	800f0ec <_svfprintf_r+0xa20>
 800f0ce:	1aed      	subs	r5, r5, r3
 800f0d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0d2:	785b      	ldrb	r3, [r3, #1]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d012      	beq.n	800f0fe <_svfprintf_r+0xa32>
 800f0d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0da:	3301      	adds	r3, #1
 800f0dc:	9311      	str	r3, [sp, #68]	; 0x44
 800f0de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	9312      	str	r3, [sp, #72]	; 0x48
 800f0e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	2bff      	cmp	r3, #255	; 0xff
 800f0ea:	d1ee      	bne.n	800f0ca <_svfprintf_r+0x9fe>
 800f0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0f0:	189b      	adds	r3, r3, r2
 800f0f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f0f4:	4353      	muls	r3, r2
 800f0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0f8:	189b      	adds	r3, r3, r2
 800f0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f0fc:	e639      	b.n	800ed72 <_svfprintf_r+0x6a6>
 800f0fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f100:	3301      	adds	r3, #1
 800f102:	9310      	str	r3, [sp, #64]	; 0x40
 800f104:	e7ee      	b.n	800f0e4 <_svfprintf_r+0xa18>
 800f106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f108:	9311      	str	r3, [sp, #68]	; 0x44
 800f10a:	e7eb      	b.n	800f0e4 <_svfprintf_r+0xa18>
 800f10c:	1d23      	adds	r3, r4, #4
 800f10e:	930d      	str	r3, [sp, #52]	; 0x34
 800f110:	06b3      	lsls	r3, r6, #26
 800f112:	d509      	bpl.n	800f128 <_svfprintf_r+0xa5c>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	17d2      	asrs	r2, r2, #31
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f120:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f122:	9308      	str	r3, [sp, #32]
 800f124:	f7ff fb0d 	bl	800e742 <_svfprintf_r+0x76>
 800f128:	06f3      	lsls	r3, r6, #27
 800f12a:	d503      	bpl.n	800f134 <_svfprintf_r+0xa68>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	e7f4      	b.n	800f11e <_svfprintf_r+0xa52>
 800f134:	0673      	lsls	r3, r6, #25
 800f136:	d503      	bpl.n	800f140 <_svfprintf_r+0xa74>
 800f138:	6823      	ldr	r3, [r4, #0]
 800f13a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f13c:	801a      	strh	r2, [r3, #0]
 800f13e:	e7ee      	b.n	800f11e <_svfprintf_r+0xa52>
 800f140:	05b6      	lsls	r6, r6, #22
 800f142:	d5f3      	bpl.n	800f12c <_svfprintf_r+0xa60>
 800f144:	6823      	ldr	r3, [r4, #0]
 800f146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f148:	701a      	strb	r2, [r3, #0]
 800f14a:	e7e8      	b.n	800f11e <_svfprintf_r+0xa52>
 800f14c:	2310      	movs	r3, #16
 800f14e:	431e      	orrs	r6, r3
 800f150:	2320      	movs	r3, #32
 800f152:	0030      	movs	r0, r6
 800f154:	4018      	ands	r0, r3
 800f156:	421e      	tst	r6, r3
 800f158:	d00f      	beq.n	800f17a <_svfprintf_r+0xaae>
 800f15a:	3b19      	subs	r3, #25
 800f15c:	3407      	adds	r4, #7
 800f15e:	439c      	bics	r4, r3
 800f160:	0022      	movs	r2, r4
 800f162:	ca18      	ldmia	r2!, {r3, r4}
 800f164:	9306      	str	r3, [sp, #24]
 800f166:	9407      	str	r4, [sp, #28]
 800f168:	920d      	str	r2, [sp, #52]	; 0x34
 800f16a:	4bc9      	ldr	r3, [pc, #804]	; (800f490 <_svfprintf_r+0xdc4>)
 800f16c:	401e      	ands	r6, r3
 800f16e:	2300      	movs	r3, #0
 800f170:	221b      	movs	r2, #27
 800f172:	a91e      	add	r1, sp, #120	; 0x78
 800f174:	1852      	adds	r2, r2, r1
 800f176:	2100      	movs	r1, #0
 800f178:	e430      	b.n	800e9dc <_svfprintf_r+0x310>
 800f17a:	0022      	movs	r2, r4
 800f17c:	ca08      	ldmia	r2!, {r3}
 800f17e:	0031      	movs	r1, r6
 800f180:	920d      	str	r2, [sp, #52]	; 0x34
 800f182:	2210      	movs	r2, #16
 800f184:	4011      	ands	r1, r2
 800f186:	4216      	tst	r6, r2
 800f188:	d002      	beq.n	800f190 <_svfprintf_r+0xac4>
 800f18a:	9306      	str	r3, [sp, #24]
 800f18c:	9007      	str	r0, [sp, #28]
 800f18e:	e7ec      	b.n	800f16a <_svfprintf_r+0xa9e>
 800f190:	2240      	movs	r2, #64	; 0x40
 800f192:	0030      	movs	r0, r6
 800f194:	4010      	ands	r0, r2
 800f196:	4216      	tst	r6, r2
 800f198:	d003      	beq.n	800f1a2 <_svfprintf_r+0xad6>
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	9306      	str	r3, [sp, #24]
 800f19e:	9107      	str	r1, [sp, #28]
 800f1a0:	e7e3      	b.n	800f16a <_svfprintf_r+0xa9e>
 800f1a2:	2280      	movs	r2, #128	; 0x80
 800f1a4:	0031      	movs	r1, r6
 800f1a6:	0092      	lsls	r2, r2, #2
 800f1a8:	4011      	ands	r1, r2
 800f1aa:	4216      	tst	r6, r2
 800f1ac:	d0f6      	beq.n	800f19c <_svfprintf_r+0xad0>
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	e7eb      	b.n	800f18a <_svfprintf_r+0xabe>
 800f1b2:	0023      	movs	r3, r4
 800f1b4:	cb04      	ldmia	r3!, {r2}
 800f1b6:	49b7      	ldr	r1, [pc, #732]	; (800f494 <_svfprintf_r+0xdc8>)
 800f1b8:	9206      	str	r2, [sp, #24]
 800f1ba:	aa25      	add	r2, sp, #148	; 0x94
 800f1bc:	8011      	strh	r1, [r2, #0]
 800f1be:	4ab6      	ldr	r2, [pc, #728]	; (800f498 <_svfprintf_r+0xdcc>)
 800f1c0:	930d      	str	r3, [sp, #52]	; 0x34
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	921f      	str	r2, [sp, #124]	; 0x7c
 800f1c6:	2278      	movs	r2, #120	; 0x78
 800f1c8:	9307      	str	r3, [sp, #28]
 800f1ca:	3302      	adds	r3, #2
 800f1cc:	431e      	orrs	r6, r3
 800f1ce:	920f      	str	r2, [sp, #60]	; 0x3c
 800f1d0:	e7ce      	b.n	800f170 <_svfprintf_r+0xaa4>
 800f1d2:	0023      	movs	r3, r4
 800f1d4:	cb04      	ldmia	r3!, {r2}
 800f1d6:	2400      	movs	r4, #0
 800f1d8:	930d      	str	r3, [sp, #52]	; 0x34
 800f1da:	231b      	movs	r3, #27
 800f1dc:	9208      	str	r2, [sp, #32]
 800f1de:	aa1e      	add	r2, sp, #120	; 0x78
 800f1e0:	189b      	adds	r3, r3, r2
 800f1e2:	701c      	strb	r4, [r3, #0]
 800f1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	d00e      	beq.n	800f208 <_svfprintf_r+0xb3c>
 800f1ea:	0021      	movs	r1, r4
 800f1ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1ee:	9808      	ldr	r0, [sp, #32]
 800f1f0:	f002 f83a 	bl	8011268 <memchr>
 800f1f4:	900c      	str	r0, [sp, #48]	; 0x30
 800f1f6:	42a0      	cmp	r0, r4
 800f1f8:	d100      	bne.n	800f1fc <_svfprintf_r+0xb30>
 800f1fa:	e10d      	b.n	800f418 <_svfprintf_r+0xd4c>
 800f1fc:	9a08      	ldr	r2, [sp, #32]
 800f1fe:	1a83      	subs	r3, r0, r2
 800f200:	9309      	str	r3, [sp, #36]	; 0x24
 800f202:	0023      	movs	r3, r4
 800f204:	940c      	str	r4, [sp, #48]	; 0x30
 800f206:	e44e      	b.n	800eaa6 <_svfprintf_r+0x3da>
 800f208:	9808      	ldr	r0, [sp, #32]
 800f20a:	f7f0 ff7b 	bl	8000104 <strlen>
 800f20e:	9009      	str	r0, [sp, #36]	; 0x24
 800f210:	e7f7      	b.n	800f202 <_svfprintf_r+0xb36>
 800f212:	2310      	movs	r3, #16
 800f214:	431e      	orrs	r6, r3
 800f216:	2320      	movs	r3, #32
 800f218:	0030      	movs	r0, r6
 800f21a:	4018      	ands	r0, r3
 800f21c:	421e      	tst	r6, r3
 800f21e:	d009      	beq.n	800f234 <_svfprintf_r+0xb68>
 800f220:	3b19      	subs	r3, #25
 800f222:	3407      	adds	r4, #7
 800f224:	439c      	bics	r4, r3
 800f226:	0022      	movs	r2, r4
 800f228:	ca18      	ldmia	r2!, {r3, r4}
 800f22a:	9306      	str	r3, [sp, #24]
 800f22c:	9407      	str	r4, [sp, #28]
 800f22e:	920d      	str	r2, [sp, #52]	; 0x34
 800f230:	2301      	movs	r3, #1
 800f232:	e79d      	b.n	800f170 <_svfprintf_r+0xaa4>
 800f234:	0023      	movs	r3, r4
 800f236:	cb04      	ldmia	r3!, {r2}
 800f238:	0031      	movs	r1, r6
 800f23a:	930d      	str	r3, [sp, #52]	; 0x34
 800f23c:	2310      	movs	r3, #16
 800f23e:	4019      	ands	r1, r3
 800f240:	421e      	tst	r6, r3
 800f242:	d003      	beq.n	800f24c <_svfprintf_r+0xb80>
 800f244:	9206      	str	r2, [sp, #24]
 800f246:	9007      	str	r0, [sp, #28]
 800f248:	3b0f      	subs	r3, #15
 800f24a:	e791      	b.n	800f170 <_svfprintf_r+0xaa4>
 800f24c:	2340      	movs	r3, #64	; 0x40
 800f24e:	0030      	movs	r0, r6
 800f250:	4018      	ands	r0, r3
 800f252:	421e      	tst	r6, r3
 800f254:	d003      	beq.n	800f25e <_svfprintf_r+0xb92>
 800f256:	b293      	uxth	r3, r2
 800f258:	9306      	str	r3, [sp, #24]
 800f25a:	9107      	str	r1, [sp, #28]
 800f25c:	e7e8      	b.n	800f230 <_svfprintf_r+0xb64>
 800f25e:	2380      	movs	r3, #128	; 0x80
 800f260:	0031      	movs	r1, r6
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4019      	ands	r1, r3
 800f266:	421e      	tst	r6, r3
 800f268:	d003      	beq.n	800f272 <_svfprintf_r+0xba6>
 800f26a:	b2d3      	uxtb	r3, r2
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	9007      	str	r0, [sp, #28]
 800f270:	e7de      	b.n	800f230 <_svfprintf_r+0xb64>
 800f272:	9206      	str	r2, [sp, #24]
 800f274:	e7f1      	b.n	800f25a <_svfprintf_r+0xb8e>
 800f276:	4b89      	ldr	r3, [pc, #548]	; (800f49c <_svfprintf_r+0xdd0>)
 800f278:	0030      	movs	r0, r6
 800f27a:	931f      	str	r3, [sp, #124]	; 0x7c
 800f27c:	2320      	movs	r3, #32
 800f27e:	4018      	ands	r0, r3
 800f280:	421e      	tst	r6, r3
 800f282:	d01a      	beq.n	800f2ba <_svfprintf_r+0xbee>
 800f284:	3b19      	subs	r3, #25
 800f286:	3407      	adds	r4, #7
 800f288:	439c      	bics	r4, r3
 800f28a:	0022      	movs	r2, r4
 800f28c:	ca18      	ldmia	r2!, {r3, r4}
 800f28e:	9306      	str	r3, [sp, #24]
 800f290:	9407      	str	r4, [sp, #28]
 800f292:	920d      	str	r2, [sp, #52]	; 0x34
 800f294:	07f3      	lsls	r3, r6, #31
 800f296:	d50a      	bpl.n	800f2ae <_svfprintf_r+0xbe2>
 800f298:	9b06      	ldr	r3, [sp, #24]
 800f29a:	9a07      	ldr	r2, [sp, #28]
 800f29c:	4313      	orrs	r3, r2
 800f29e:	d006      	beq.n	800f2ae <_svfprintf_r+0xbe2>
 800f2a0:	2230      	movs	r2, #48	; 0x30
 800f2a2:	ab25      	add	r3, sp, #148	; 0x94
 800f2a4:	701a      	strb	r2, [r3, #0]
 800f2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2a8:	705a      	strb	r2, [r3, #1]
 800f2aa:	2302      	movs	r3, #2
 800f2ac:	431e      	orrs	r6, r3
 800f2ae:	4b78      	ldr	r3, [pc, #480]	; (800f490 <_svfprintf_r+0xdc4>)
 800f2b0:	401e      	ands	r6, r3
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	e75c      	b.n	800f170 <_svfprintf_r+0xaa4>
 800f2b6:	4b78      	ldr	r3, [pc, #480]	; (800f498 <_svfprintf_r+0xdcc>)
 800f2b8:	e7de      	b.n	800f278 <_svfprintf_r+0xbac>
 800f2ba:	0023      	movs	r3, r4
 800f2bc:	cb04      	ldmia	r3!, {r2}
 800f2be:	0031      	movs	r1, r6
 800f2c0:	930d      	str	r3, [sp, #52]	; 0x34
 800f2c2:	2310      	movs	r3, #16
 800f2c4:	4019      	ands	r1, r3
 800f2c6:	421e      	tst	r6, r3
 800f2c8:	d002      	beq.n	800f2d0 <_svfprintf_r+0xc04>
 800f2ca:	9206      	str	r2, [sp, #24]
 800f2cc:	9007      	str	r0, [sp, #28]
 800f2ce:	e7e1      	b.n	800f294 <_svfprintf_r+0xbc8>
 800f2d0:	2340      	movs	r3, #64	; 0x40
 800f2d2:	0030      	movs	r0, r6
 800f2d4:	4018      	ands	r0, r3
 800f2d6:	421e      	tst	r6, r3
 800f2d8:	d003      	beq.n	800f2e2 <_svfprintf_r+0xc16>
 800f2da:	b293      	uxth	r3, r2
 800f2dc:	9306      	str	r3, [sp, #24]
 800f2de:	9107      	str	r1, [sp, #28]
 800f2e0:	e7d8      	b.n	800f294 <_svfprintf_r+0xbc8>
 800f2e2:	2380      	movs	r3, #128	; 0x80
 800f2e4:	0031      	movs	r1, r6
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	4019      	ands	r1, r3
 800f2ea:	421e      	tst	r6, r3
 800f2ec:	d002      	beq.n	800f2f4 <_svfprintf_r+0xc28>
 800f2ee:	b2d3      	uxtb	r3, r2
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	e7eb      	b.n	800f2cc <_svfprintf_r+0xc00>
 800f2f4:	9206      	str	r2, [sp, #24]
 800f2f6:	e7f2      	b.n	800f2de <_svfprintf_r+0xc12>
 800f2f8:	9b07      	ldr	r3, [sp, #28]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d10a      	bne.n	800f314 <_svfprintf_r+0xc48>
 800f2fe:	9b06      	ldr	r3, [sp, #24]
 800f300:	2b09      	cmp	r3, #9
 800f302:	d807      	bhi.n	800f314 <_svfprintf_r+0xc48>
 800f304:	23e7      	movs	r3, #231	; 0xe7
 800f306:	aa1e      	add	r2, sp, #120	; 0x78
 800f308:	189b      	adds	r3, r3, r2
 800f30a:	9a06      	ldr	r2, [sp, #24]
 800f30c:	3230      	adds	r2, #48	; 0x30
 800f30e:	701a      	strb	r2, [r3, #0]
 800f310:	f000 fc18 	bl	800fb44 <_svfprintf_r+0x1478>
 800f314:	2680      	movs	r6, #128	; 0x80
 800f316:	2300      	movs	r3, #0
 800f318:	00f6      	lsls	r6, r6, #3
 800f31a:	930e      	str	r3, [sp, #56]	; 0x38
 800f31c:	ad58      	add	r5, sp, #352	; 0x160
 800f31e:	4026      	ands	r6, r4
 800f320:	220a      	movs	r2, #10
 800f322:	9806      	ldr	r0, [sp, #24]
 800f324:	9907      	ldr	r1, [sp, #28]
 800f326:	2300      	movs	r3, #0
 800f328:	f7f1 f8bc 	bl	80004a4 <__aeabi_uldivmod>
 800f32c:	1e6b      	subs	r3, r5, #1
 800f32e:	3230      	adds	r2, #48	; 0x30
 800f330:	9308      	str	r3, [sp, #32]
 800f332:	701a      	strb	r2, [r3, #0]
 800f334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f336:	900c      	str	r0, [sp, #48]	; 0x30
 800f338:	3301      	adds	r3, #1
 800f33a:	9110      	str	r1, [sp, #64]	; 0x40
 800f33c:	930e      	str	r3, [sp, #56]	; 0x38
 800f33e:	2e00      	cmp	r6, #0
 800f340:	d01d      	beq.n	800f37e <_svfprintf_r+0xcb2>
 800f342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d118      	bne.n	800f37e <_svfprintf_r+0xcb2>
 800f34c:	2aff      	cmp	r2, #255	; 0xff
 800f34e:	d016      	beq.n	800f37e <_svfprintf_r+0xcb2>
 800f350:	9b07      	ldr	r3, [sp, #28]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d102      	bne.n	800f35c <_svfprintf_r+0xc90>
 800f356:	9b06      	ldr	r3, [sp, #24]
 800f358:	2b09      	cmp	r3, #9
 800f35a:	d910      	bls.n	800f37e <_svfprintf_r+0xcb2>
 800f35c:	9b08      	ldr	r3, [sp, #32]
 800f35e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f360:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f362:	1a9b      	subs	r3, r3, r2
 800f364:	0018      	movs	r0, r3
 800f366:	9308      	str	r3, [sp, #32]
 800f368:	f7fd ff97 	bl	800d29a <strncpy>
 800f36c:	2200      	movs	r2, #0
 800f36e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f370:	920e      	str	r2, [sp, #56]	; 0x38
 800f372:	785b      	ldrb	r3, [r3, #1]
 800f374:	1e5a      	subs	r2, r3, #1
 800f376:	4193      	sbcs	r3, r2
 800f378:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f37a:	18d3      	adds	r3, r2, r3
 800f37c:	9312      	str	r3, [sp, #72]	; 0x48
 800f37e:	9b07      	ldr	r3, [sp, #28]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d10f      	bne.n	800f3a4 <_svfprintf_r+0xcd8>
 800f384:	9b06      	ldr	r3, [sp, #24]
 800f386:	2b09      	cmp	r3, #9
 800f388:	d80c      	bhi.n	800f3a4 <_svfprintf_r+0xcd8>
 800f38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38c:	9a08      	ldr	r2, [sp, #32]
 800f38e:	9319      	str	r3, [sp, #100]	; 0x64
 800f390:	ab58      	add	r3, sp, #352	; 0x160
 800f392:	1a9b      	subs	r3, r3, r2
 800f394:	9309      	str	r3, [sp, #36]	; 0x24
 800f396:	2300      	movs	r3, #0
 800f398:	0026      	movs	r6, r4
 800f39a:	930c      	str	r3, [sp, #48]	; 0x30
 800f39c:	001d      	movs	r5, r3
 800f39e:	9310      	str	r3, [sp, #64]	; 0x40
 800f3a0:	9311      	str	r3, [sp, #68]	; 0x44
 800f3a2:	e4f2      	b.n	800ed8a <_svfprintf_r+0x6be>
 800f3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3a6:	9d08      	ldr	r5, [sp, #32]
 800f3a8:	9306      	str	r3, [sp, #24]
 800f3aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3ac:	9307      	str	r3, [sp, #28]
 800f3ae:	e7b7      	b.n	800f320 <_svfprintf_r+0xc54>
 800f3b0:	200f      	movs	r0, #15
 800f3b2:	ab58      	add	r3, sp, #352	; 0x160
 800f3b4:	9308      	str	r3, [sp, #32]
 800f3b6:	9b08      	ldr	r3, [sp, #32]
 800f3b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	9308      	str	r3, [sp, #32]
 800f3be:	9b06      	ldr	r3, [sp, #24]
 800f3c0:	4003      	ands	r3, r0
 800f3c2:	5cd3      	ldrb	r3, [r2, r3]
 800f3c4:	9a08      	ldr	r2, [sp, #32]
 800f3c6:	7013      	strb	r3, [r2, #0]
 800f3c8:	9b07      	ldr	r3, [sp, #28]
 800f3ca:	0719      	lsls	r1, r3, #28
 800f3cc:	9b06      	ldr	r3, [sp, #24]
 800f3ce:	091a      	lsrs	r2, r3, #4
 800f3d0:	9b07      	ldr	r3, [sp, #28]
 800f3d2:	4311      	orrs	r1, r2
 800f3d4:	091b      	lsrs	r3, r3, #4
 800f3d6:	9307      	str	r3, [sp, #28]
 800f3d8:	000b      	movs	r3, r1
 800f3da:	9a07      	ldr	r2, [sp, #28]
 800f3dc:	9106      	str	r1, [sp, #24]
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	d1e9      	bne.n	800f3b6 <_svfprintf_r+0xcea>
 800f3e2:	e7d2      	b.n	800f38a <_svfprintf_r+0xcbe>
 800f3e4:	aa58      	add	r2, sp, #352	; 0x160
 800f3e6:	9208      	str	r2, [sp, #32]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d1ce      	bne.n	800f38a <_svfprintf_r+0xcbe>
 800f3ec:	07f6      	lsls	r6, r6, #31
 800f3ee:	d5cc      	bpl.n	800f38a <_svfprintf_r+0xcbe>
 800f3f0:	aa1e      	add	r2, sp, #120	; 0x78
 800f3f2:	33e7      	adds	r3, #231	; 0xe7
 800f3f4:	189b      	adds	r3, r3, r2
 800f3f6:	2230      	movs	r2, #48	; 0x30
 800f3f8:	e789      	b.n	800f30e <_svfprintf_r+0xc42>
 800f3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d100      	bne.n	800f402 <_svfprintf_r+0xd36>
 800f400:	e364      	b.n	800facc <_svfprintf_r+0x1400>
 800f402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f404:	211b      	movs	r1, #27
 800f406:	ab3f      	add	r3, sp, #252	; 0xfc
 800f408:	701a      	strb	r2, [r3, #0]
 800f40a:	2200      	movs	r2, #0
 800f40c:	a81e      	add	r0, sp, #120	; 0x78
 800f40e:	1809      	adds	r1, r1, r0
 800f410:	700a      	strb	r2, [r1, #0]
 800f412:	940d      	str	r4, [sp, #52]	; 0x34
 800f414:	f7ff fabd 	bl	800e992 <_svfprintf_r+0x2c6>
 800f418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f41a:	f7ff fb44 	bl	800eaa6 <_svfprintf_r+0x3da>
 800f41e:	2010      	movs	r0, #16
 800f420:	1812      	adds	r2, r2, r0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	922e      	str	r2, [sp, #184]	; 0xb8
 800f426:	932d      	str	r3, [sp, #180]	; 0xb4
 800f428:	2b07      	cmp	r3, #7
 800f42a:	dd08      	ble.n	800f43e <_svfprintf_r+0xd72>
 800f42c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f42e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f430:	aa2c      	add	r2, sp, #176	; 0xb0
 800f432:	f003 f9db 	bl	80127ec <__ssprint_r>
 800f436:	2800      	cmp	r0, #0
 800f438:	d000      	beq.n	800f43c <_svfprintf_r+0xd70>
 800f43a:	e326      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f43c:	a92f      	add	r1, sp, #188	; 0xbc
 800f43e:	000f      	movs	r7, r1
 800f440:	3c10      	subs	r4, #16
 800f442:	e4c5      	b.n	800edd0 <_svfprintf_r+0x704>
 800f444:	2010      	movs	r0, #16
 800f446:	1812      	adds	r2, r2, r0
 800f448:	6078      	str	r0, [r7, #4]
 800f44a:	922e      	str	r2, [sp, #184]	; 0xb8
 800f44c:	932d      	str	r3, [sp, #180]	; 0xb4
 800f44e:	2b07      	cmp	r3, #7
 800f450:	dd08      	ble.n	800f464 <_svfprintf_r+0xd98>
 800f452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f454:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f456:	aa2c      	add	r2, sp, #176	; 0xb0
 800f458:	f003 f9c8 	bl	80127ec <__ssprint_r>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d000      	beq.n	800f462 <_svfprintf_r+0xd96>
 800f460:	e313      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f462:	a92f      	add	r1, sp, #188	; 0xbc
 800f464:	000f      	movs	r7, r1
 800f466:	3c10      	subs	r4, #16
 800f468:	e50b      	b.n	800ee82 <_svfprintf_r+0x7b6>
 800f46a:	2010      	movs	r0, #16
 800f46c:	1812      	adds	r2, r2, r0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	922e      	str	r2, [sp, #184]	; 0xb8
 800f472:	932d      	str	r3, [sp, #180]	; 0xb4
 800f474:	2b07      	cmp	r3, #7
 800f476:	dd08      	ble.n	800f48a <_svfprintf_r+0xdbe>
 800f478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f47a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f47c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f47e:	f003 f9b5 	bl	80127ec <__ssprint_r>
 800f482:	2800      	cmp	r0, #0
 800f484:	d000      	beq.n	800f488 <_svfprintf_r+0xdbc>
 800f486:	e300      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f488:	a92f      	add	r1, sp, #188	; 0xbc
 800f48a:	000f      	movs	r7, r1
 800f48c:	3c10      	subs	r4, #16
 800f48e:	e518      	b.n	800eec2 <_svfprintf_r+0x7f6>
 800f490:	fffffbff 	.word	0xfffffbff
 800f494:	00007830 	.word	0x00007830
 800f498:	08015c84 	.word	0x08015c84
 800f49c:	08015c95 	.word	0x08015c95
 800f4a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f4a2:	2b65      	cmp	r3, #101	; 0x65
 800f4a4:	dc00      	bgt.n	800f4a8 <_svfprintf_r+0xddc>
 800f4a6:	e241      	b.n	800f92c <_svfprintf_r+0x1260>
 800f4a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f4aa:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	f7f0 ffca 	bl	8000448 <__aeabi_dcmpeq>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d077      	beq.n	800f5a8 <_svfprintf_r+0xedc>
 800f4b8:	4bca      	ldr	r3, [pc, #808]	; (800f7e4 <_svfprintf_r+0x1118>)
 800f4ba:	603b      	str	r3, [r7, #0]
 800f4bc:	2301      	movs	r3, #1
 800f4be:	607b      	str	r3, [r7, #4]
 800f4c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	932e      	str	r3, [sp, #184]	; 0xb8
 800f4c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	932d      	str	r3, [sp, #180]	; 0xb4
 800f4ce:	2b07      	cmp	r3, #7
 800f4d0:	dd08      	ble.n	800f4e4 <_svfprintf_r+0xe18>
 800f4d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f4d6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f4d8:	f003 f988 	bl	80127ec <__ssprint_r>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d000      	beq.n	800f4e2 <_svfprintf_r+0xe16>
 800f4e0:	e2d3      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f4e2:	af2f      	add	r7, sp, #188	; 0xbc
 800f4e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f4e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	db01      	blt.n	800f4f0 <_svfprintf_r+0xe24>
 800f4ec:	07f3      	lsls	r3, r6, #31
 800f4ee:	d51b      	bpl.n	800f528 <_svfprintf_r+0xe5c>
 800f4f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f4f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f4f4:	603b      	str	r3, [r7, #0]
 800f4f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f4f8:	607b      	str	r3, [r7, #4]
 800f4fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	189b      	adds	r3, r3, r2
 800f500:	932e      	str	r3, [sp, #184]	; 0xb8
 800f502:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f504:	3301      	adds	r3, #1
 800f506:	932d      	str	r3, [sp, #180]	; 0xb4
 800f508:	2b07      	cmp	r3, #7
 800f50a:	dd08      	ble.n	800f51e <_svfprintf_r+0xe52>
 800f50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f50e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f510:	aa2c      	add	r2, sp, #176	; 0xb0
 800f512:	f003 f96b 	bl	80127ec <__ssprint_r>
 800f516:	2800      	cmp	r0, #0
 800f518:	d000      	beq.n	800f51c <_svfprintf_r+0xe50>
 800f51a:	e2b6      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f51c:	af2f      	add	r7, sp, #188	; 0xbc
 800f51e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f520:	2510      	movs	r5, #16
 800f522:	1e5c      	subs	r4, r3, #1
 800f524:	2c00      	cmp	r4, #0
 800f526:	dc2e      	bgt.n	800f586 <_svfprintf_r+0xeba>
 800f528:	0776      	lsls	r6, r6, #29
 800f52a:	d500      	bpl.n	800f52e <_svfprintf_r+0xe62>
 800f52c:	e290      	b.n	800fa50 <_svfprintf_r+0x1384>
 800f52e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f530:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f532:	4293      	cmp	r3, r2
 800f534:	da00      	bge.n	800f538 <_svfprintf_r+0xe6c>
 800f536:	0013      	movs	r3, r2
 800f538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f53a:	18d3      	adds	r3, r2, r3
 800f53c:	9317      	str	r3, [sp, #92]	; 0x5c
 800f53e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f540:	2b00      	cmp	r3, #0
 800f542:	d007      	beq.n	800f554 <_svfprintf_r+0xe88>
 800f544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f546:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f548:	aa2c      	add	r2, sp, #176	; 0xb0
 800f54a:	f003 f94f 	bl	80127ec <__ssprint_r>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d000      	beq.n	800f554 <_svfprintf_r+0xe88>
 800f552:	e29a      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f554:	2300      	movs	r3, #0
 800f556:	932d      	str	r3, [sp, #180]	; 0xb4
 800f558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d000      	beq.n	800f560 <_svfprintf_r+0xe94>
 800f55e:	e2b0      	b.n	800fac2 <_svfprintf_r+0x13f6>
 800f560:	af2f      	add	r7, sp, #188	; 0xbc
 800f562:	e5dc      	b.n	800f11e <_svfprintf_r+0xa52>
 800f564:	3210      	adds	r2, #16
 800f566:	607d      	str	r5, [r7, #4]
 800f568:	922e      	str	r2, [sp, #184]	; 0xb8
 800f56a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f56c:	2b07      	cmp	r3, #7
 800f56e:	dd08      	ble.n	800f582 <_svfprintf_r+0xeb6>
 800f570:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f572:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f574:	aa2c      	add	r2, sp, #176	; 0xb0
 800f576:	f003 f939 	bl	80127ec <__ssprint_r>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d000      	beq.n	800f580 <_svfprintf_r+0xeb4>
 800f57e:	e284      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f580:	a92f      	add	r1, sp, #188	; 0xbc
 800f582:	000f      	movs	r7, r1
 800f584:	3c10      	subs	r4, #16
 800f586:	0039      	movs	r1, r7
 800f588:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f58a:	4897      	ldr	r0, [pc, #604]	; (800f7e8 <_svfprintf_r+0x111c>)
 800f58c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f58e:	3301      	adds	r3, #1
 800f590:	3108      	adds	r1, #8
 800f592:	6038      	str	r0, [r7, #0]
 800f594:	2c10      	cmp	r4, #16
 800f596:	dce5      	bgt.n	800f564 <_svfprintf_r+0xe98>
 800f598:	607c      	str	r4, [r7, #4]
 800f59a:	18a4      	adds	r4, r4, r2
 800f59c:	942e      	str	r4, [sp, #184]	; 0xb8
 800f59e:	000f      	movs	r7, r1
 800f5a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5a2:	2b07      	cmp	r3, #7
 800f5a4:	ddc0      	ble.n	800f528 <_svfprintf_r+0xe5c>
 800f5a6:	e05f      	b.n	800f668 <_svfprintf_r+0xf9c>
 800f5a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	dc78      	bgt.n	800f6a0 <_svfprintf_r+0xfd4>
 800f5ae:	4b8d      	ldr	r3, [pc, #564]	; (800f7e4 <_svfprintf_r+0x1118>)
 800f5b0:	603b      	str	r3, [r7, #0]
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	607b      	str	r3, [r7, #4]
 800f5b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800f5be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5c4:	2b07      	cmp	r3, #7
 800f5c6:	dd08      	ble.n	800f5da <_svfprintf_r+0xf0e>
 800f5c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5ce:	f003 f90d 	bl	80127ec <__ssprint_r>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d000      	beq.n	800f5d8 <_svfprintf_r+0xf0c>
 800f5d6:	e258      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f5d8:	af2f      	add	r7, sp, #188	; 0xbc
 800f5da:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f5dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5de:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	4031      	ands	r1, r6
 800f5e6:	430b      	orrs	r3, r1
 800f5e8:	d09e      	beq.n	800f528 <_svfprintf_r+0xe5c>
 800f5ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f5ec:	603b      	str	r3, [r7, #0]
 800f5ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f5f0:	607b      	str	r3, [r7, #4]
 800f5f2:	189a      	adds	r2, r3, r2
 800f5f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f5f6:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	dd08      	ble.n	800f614 <_svfprintf_r+0xf48>
 800f602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f604:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f606:	aa2c      	add	r2, sp, #176	; 0xb0
 800f608:	f003 f8f0 	bl	80127ec <__ssprint_r>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d000      	beq.n	800f612 <_svfprintf_r+0xf46>
 800f610:	e23b      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f612:	af2f      	add	r7, sp, #188	; 0xbc
 800f614:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f616:	2c00      	cmp	r4, #0
 800f618:	da19      	bge.n	800f64e <_svfprintf_r+0xf82>
 800f61a:	0038      	movs	r0, r7
 800f61c:	2510      	movs	r5, #16
 800f61e:	4264      	negs	r4, r4
 800f620:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f622:	4a71      	ldr	r2, [pc, #452]	; (800f7e8 <_svfprintf_r+0x111c>)
 800f624:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f626:	3101      	adds	r1, #1
 800f628:	3708      	adds	r7, #8
 800f62a:	6002      	str	r2, [r0, #0]
 800f62c:	2c10      	cmp	r4, #16
 800f62e:	dc25      	bgt.n	800f67c <_svfprintf_r+0xfb0>
 800f630:	6044      	str	r4, [r0, #4]
 800f632:	18e4      	adds	r4, r4, r3
 800f634:	942e      	str	r4, [sp, #184]	; 0xb8
 800f636:	912d      	str	r1, [sp, #180]	; 0xb4
 800f638:	2907      	cmp	r1, #7
 800f63a:	dd08      	ble.n	800f64e <_svfprintf_r+0xf82>
 800f63c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f63e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f640:	aa2c      	add	r2, sp, #176	; 0xb0
 800f642:	f003 f8d3 	bl	80127ec <__ssprint_r>
 800f646:	2800      	cmp	r0, #0
 800f648:	d000      	beq.n	800f64c <_svfprintf_r+0xf80>
 800f64a:	e21e      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f64c:	af2f      	add	r7, sp, #188	; 0xbc
 800f64e:	9b08      	ldr	r3, [sp, #32]
 800f650:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f652:	603b      	str	r3, [r7, #0]
 800f654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f656:	18d2      	adds	r2, r2, r3
 800f658:	922e      	str	r2, [sp, #184]	; 0xb8
 800f65a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f65c:	607b      	str	r3, [r7, #4]
 800f65e:	3201      	adds	r2, #1
 800f660:	922d      	str	r2, [sp, #180]	; 0xb4
 800f662:	2a07      	cmp	r2, #7
 800f664:	dc00      	bgt.n	800f668 <_svfprintf_r+0xf9c>
 800f666:	e45b      	b.n	800ef20 <_svfprintf_r+0x854>
 800f668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f66a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f66c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f66e:	f003 f8bd 	bl	80127ec <__ssprint_r>
 800f672:	2800      	cmp	r0, #0
 800f674:	d000      	beq.n	800f678 <_svfprintf_r+0xfac>
 800f676:	e208      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f678:	af2f      	add	r7, sp, #188	; 0xbc
 800f67a:	e755      	b.n	800f528 <_svfprintf_r+0xe5c>
 800f67c:	3310      	adds	r3, #16
 800f67e:	6045      	str	r5, [r0, #4]
 800f680:	932e      	str	r3, [sp, #184]	; 0xb8
 800f682:	912d      	str	r1, [sp, #180]	; 0xb4
 800f684:	2907      	cmp	r1, #7
 800f686:	dd08      	ble.n	800f69a <_svfprintf_r+0xfce>
 800f688:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f68a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f68c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f68e:	f003 f8ad 	bl	80127ec <__ssprint_r>
 800f692:	2800      	cmp	r0, #0
 800f694:	d000      	beq.n	800f698 <_svfprintf_r+0xfcc>
 800f696:	e1f8      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f698:	af2f      	add	r7, sp, #188	; 0xbc
 800f69a:	0038      	movs	r0, r7
 800f69c:	3c10      	subs	r4, #16
 800f69e:	e7bf      	b.n	800f620 <_svfprintf_r+0xf54>
 800f6a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6a2:	002c      	movs	r4, r5
 800f6a4:	429d      	cmp	r5, r3
 800f6a6:	dd00      	ble.n	800f6aa <_svfprintf_r+0xfde>
 800f6a8:	001c      	movs	r4, r3
 800f6aa:	2c00      	cmp	r4, #0
 800f6ac:	dd14      	ble.n	800f6d8 <_svfprintf_r+0x100c>
 800f6ae:	9b08      	ldr	r3, [sp, #32]
 800f6b0:	607c      	str	r4, [r7, #4]
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	18e3      	adds	r3, r4, r3
 800f6ba:	932e      	str	r3, [sp, #184]	; 0xb8
 800f6bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f6be:	3301      	adds	r3, #1
 800f6c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6c2:	2b07      	cmp	r3, #7
 800f6c4:	dd08      	ble.n	800f6d8 <_svfprintf_r+0x100c>
 800f6c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800f6cc:	f003 f88e 	bl	80127ec <__ssprint_r>
 800f6d0:	2800      	cmp	r0, #0
 800f6d2:	d000      	beq.n	800f6d6 <_svfprintf_r+0x100a>
 800f6d4:	e1d9      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f6d6:	af2f      	add	r7, sp, #188	; 0xbc
 800f6d8:	43e3      	mvns	r3, r4
 800f6da:	17db      	asrs	r3, r3, #31
 800f6dc:	401c      	ands	r4, r3
 800f6de:	1b2c      	subs	r4, r5, r4
 800f6e0:	2c00      	cmp	r4, #0
 800f6e2:	dd18      	ble.n	800f716 <_svfprintf_r+0x104a>
 800f6e4:	0039      	movs	r1, r7
 800f6e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f6e8:	483f      	ldr	r0, [pc, #252]	; (800f7e8 <_svfprintf_r+0x111c>)
 800f6ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	3108      	adds	r1, #8
 800f6f0:	6038      	str	r0, [r7, #0]
 800f6f2:	2c10      	cmp	r4, #16
 800f6f4:	dc7a      	bgt.n	800f7ec <_svfprintf_r+0x1120>
 800f6f6:	607c      	str	r4, [r7, #4]
 800f6f8:	18a4      	adds	r4, r4, r2
 800f6fa:	000f      	movs	r7, r1
 800f6fc:	942e      	str	r4, [sp, #184]	; 0xb8
 800f6fe:	932d      	str	r3, [sp, #180]	; 0xb4
 800f700:	2b07      	cmp	r3, #7
 800f702:	dd08      	ble.n	800f716 <_svfprintf_r+0x104a>
 800f704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f706:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f708:	aa2c      	add	r2, sp, #176	; 0xb0
 800f70a:	f003 f86f 	bl	80127ec <__ssprint_r>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d000      	beq.n	800f714 <_svfprintf_r+0x1048>
 800f712:	e1ba      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f714:	af2f      	add	r7, sp, #188	; 0xbc
 800f716:	9b08      	ldr	r3, [sp, #32]
 800f718:	195d      	adds	r5, r3, r5
 800f71a:	0573      	lsls	r3, r6, #21
 800f71c:	d50b      	bpl.n	800f736 <_svfprintf_r+0x106a>
 800f71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f720:	2b00      	cmp	r3, #0
 800f722:	d176      	bne.n	800f812 <_svfprintf_r+0x1146>
 800f724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f726:	2b00      	cmp	r3, #0
 800f728:	d176      	bne.n	800f818 <_svfprintf_r+0x114c>
 800f72a:	9b08      	ldr	r3, [sp, #32]
 800f72c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f72e:	189b      	adds	r3, r3, r2
 800f730:	429d      	cmp	r5, r3
 800f732:	d900      	bls.n	800f736 <_svfprintf_r+0x106a>
 800f734:	001d      	movs	r5, r3
 800f736:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f73a:	4293      	cmp	r3, r2
 800f73c:	db01      	blt.n	800f742 <_svfprintf_r+0x1076>
 800f73e:	07f3      	lsls	r3, r6, #31
 800f740:	d516      	bpl.n	800f770 <_svfprintf_r+0x10a4>
 800f742:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f744:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f746:	603b      	str	r3, [r7, #0]
 800f748:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f74a:	607b      	str	r3, [r7, #4]
 800f74c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f74e:	3708      	adds	r7, #8
 800f750:	189b      	adds	r3, r3, r2
 800f752:	932e      	str	r3, [sp, #184]	; 0xb8
 800f754:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f756:	3301      	adds	r3, #1
 800f758:	932d      	str	r3, [sp, #180]	; 0xb4
 800f75a:	2b07      	cmp	r3, #7
 800f75c:	dd08      	ble.n	800f770 <_svfprintf_r+0x10a4>
 800f75e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f760:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f762:	aa2c      	add	r2, sp, #176	; 0xb0
 800f764:	f003 f842 	bl	80127ec <__ssprint_r>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d000      	beq.n	800f76e <_svfprintf_r+0x10a2>
 800f76c:	e18d      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f76e:	af2f      	add	r7, sp, #188	; 0xbc
 800f770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f772:	9b08      	ldr	r3, [sp, #32]
 800f774:	4694      	mov	ip, r2
 800f776:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f778:	4463      	add	r3, ip
 800f77a:	1b5b      	subs	r3, r3, r5
 800f77c:	1b14      	subs	r4, r2, r4
 800f77e:	429c      	cmp	r4, r3
 800f780:	dd00      	ble.n	800f784 <_svfprintf_r+0x10b8>
 800f782:	001c      	movs	r4, r3
 800f784:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f786:	2c00      	cmp	r4, #0
 800f788:	dd12      	ble.n	800f7b0 <_svfprintf_r+0x10e4>
 800f78a:	18e3      	adds	r3, r4, r3
 800f78c:	932e      	str	r3, [sp, #184]	; 0xb8
 800f78e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f790:	603d      	str	r5, [r7, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	607c      	str	r4, [r7, #4]
 800f796:	932d      	str	r3, [sp, #180]	; 0xb4
 800f798:	3708      	adds	r7, #8
 800f79a:	2b07      	cmp	r3, #7
 800f79c:	dd08      	ble.n	800f7b0 <_svfprintf_r+0x10e4>
 800f79e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7a4:	f003 f822 	bl	80127ec <__ssprint_r>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d000      	beq.n	800f7ae <_svfprintf_r+0x10e2>
 800f7ac:	e16d      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f7ae:	af2f      	add	r7, sp, #188	; 0xbc
 800f7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f7b4:	2510      	movs	r5, #16
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	43e2      	mvns	r2, r4
 800f7ba:	17d2      	asrs	r2, r2, #31
 800f7bc:	4014      	ands	r4, r2
 800f7be:	1b1c      	subs	r4, r3, r4
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	dc00      	bgt.n	800f7c6 <_svfprintf_r+0x10fa>
 800f7c4:	e6b0      	b.n	800f528 <_svfprintf_r+0xe5c>
 800f7c6:	0039      	movs	r1, r7
 800f7c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f7ca:	4807      	ldr	r0, [pc, #28]	; (800f7e8 <_svfprintf_r+0x111c>)
 800f7cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	3108      	adds	r1, #8
 800f7d2:	6038      	str	r0, [r7, #0]
 800f7d4:	2c10      	cmp	r4, #16
 800f7d6:	dd00      	ble.n	800f7da <_svfprintf_r+0x110e>
 800f7d8:	e096      	b.n	800f908 <_svfprintf_r+0x123c>
 800f7da:	1912      	adds	r2, r2, r4
 800f7dc:	607c      	str	r4, [r7, #4]
 800f7de:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7e0:	e6dd      	b.n	800f59e <_svfprintf_r+0xed2>
 800f7e2:	46c0      	nop			; (mov r8, r8)
 800f7e4:	08015ca6 	.word	0x08015ca6
 800f7e8:	08015cb8 	.word	0x08015cb8
 800f7ec:	2010      	movs	r0, #16
 800f7ee:	1812      	adds	r2, r2, r0
 800f7f0:	6078      	str	r0, [r7, #4]
 800f7f2:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f7f6:	2b07      	cmp	r3, #7
 800f7f8:	dd08      	ble.n	800f80c <_svfprintf_r+0x1140>
 800f7fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800f800:	f002 fff4 	bl	80127ec <__ssprint_r>
 800f804:	2800      	cmp	r0, #0
 800f806:	d000      	beq.n	800f80a <_svfprintf_r+0x113e>
 800f808:	e13f      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f80a:	a92f      	add	r1, sp, #188	; 0xbc
 800f80c:	000f      	movs	r7, r1
 800f80e:	3c10      	subs	r4, #16
 800f810:	e768      	b.n	800f6e4 <_svfprintf_r+0x1018>
 800f812:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f814:	2b00      	cmp	r3, #0
 800f816:	d05d      	beq.n	800f8d4 <_svfprintf_r+0x1208>
 800f818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f81a:	3b01      	subs	r3, #1
 800f81c:	9310      	str	r3, [sp, #64]	; 0x40
 800f81e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f820:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f826:	607b      	str	r3, [r7, #4]
 800f828:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f82a:	3708      	adds	r7, #8
 800f82c:	189b      	adds	r3, r3, r2
 800f82e:	932e      	str	r3, [sp, #184]	; 0xb8
 800f830:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f832:	3301      	adds	r3, #1
 800f834:	932d      	str	r3, [sp, #180]	; 0xb4
 800f836:	2b07      	cmp	r3, #7
 800f838:	dd08      	ble.n	800f84c <_svfprintf_r+0x1180>
 800f83a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f83c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f83e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f840:	f002 ffd4 	bl	80127ec <__ssprint_r>
 800f844:	2800      	cmp	r0, #0
 800f846:	d000      	beq.n	800f84a <_svfprintf_r+0x117e>
 800f848:	e11f      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f84a:	af2f      	add	r7, sp, #188	; 0xbc
 800f84c:	9b08      	ldr	r3, [sp, #32]
 800f84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f850:	189c      	adds	r4, r3, r2
 800f852:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f854:	1b64      	subs	r4, r4, r5
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	429c      	cmp	r4, r3
 800f85a:	dd00      	ble.n	800f85e <_svfprintf_r+0x1192>
 800f85c:	001c      	movs	r4, r3
 800f85e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f860:	2c00      	cmp	r4, #0
 800f862:	dd12      	ble.n	800f88a <_svfprintf_r+0x11be>
 800f864:	18e3      	adds	r3, r4, r3
 800f866:	932e      	str	r3, [sp, #184]	; 0xb8
 800f868:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f86a:	603d      	str	r5, [r7, #0]
 800f86c:	3301      	adds	r3, #1
 800f86e:	607c      	str	r4, [r7, #4]
 800f870:	932d      	str	r3, [sp, #180]	; 0xb4
 800f872:	3708      	adds	r7, #8
 800f874:	2b07      	cmp	r3, #7
 800f876:	dd08      	ble.n	800f88a <_svfprintf_r+0x11be>
 800f878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f87a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f87c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f87e:	f002 ffb5 	bl	80127ec <__ssprint_r>
 800f882:	2800      	cmp	r0, #0
 800f884:	d000      	beq.n	800f888 <_svfprintf_r+0x11bc>
 800f886:	e100      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f888:	af2f      	add	r7, sp, #188	; 0xbc
 800f88a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f88c:	781a      	ldrb	r2, [r3, #0]
 800f88e:	43e3      	mvns	r3, r4
 800f890:	17db      	asrs	r3, r3, #31
 800f892:	401c      	ands	r4, r3
 800f894:	1b14      	subs	r4, r2, r4
 800f896:	2c00      	cmp	r4, #0
 800f898:	dd18      	ble.n	800f8cc <_svfprintf_r+0x1200>
 800f89a:	0039      	movs	r1, r7
 800f89c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f89e:	48aa      	ldr	r0, [pc, #680]	; (800fb48 <_svfprintf_r+0x147c>)
 800f8a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	3108      	adds	r1, #8
 800f8a6:	6038      	str	r0, [r7, #0]
 800f8a8:	2c10      	cmp	r4, #16
 800f8aa:	dc1a      	bgt.n	800f8e2 <_svfprintf_r+0x1216>
 800f8ac:	1912      	adds	r2, r2, r4
 800f8ae:	607c      	str	r4, [r7, #4]
 800f8b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800f8b2:	000f      	movs	r7, r1
 800f8b4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8b6:	2b07      	cmp	r3, #7
 800f8b8:	dd08      	ble.n	800f8cc <_svfprintf_r+0x1200>
 800f8ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8be:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8c0:	f002 ff94 	bl	80127ec <__ssprint_r>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d000      	beq.n	800f8ca <_svfprintf_r+0x11fe>
 800f8c8:	e0df      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f8ca:	af2f      	add	r7, sp, #188	; 0xbc
 800f8cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	18ed      	adds	r5, r5, r3
 800f8d2:	e724      	b.n	800f71e <_svfprintf_r+0x1052>
 800f8d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f8d6:	3b01      	subs	r3, #1
 800f8d8:	9312      	str	r3, [sp, #72]	; 0x48
 800f8da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	9311      	str	r3, [sp, #68]	; 0x44
 800f8e0:	e79d      	b.n	800f81e <_svfprintf_r+0x1152>
 800f8e2:	2010      	movs	r0, #16
 800f8e4:	1812      	adds	r2, r2, r0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	922e      	str	r2, [sp, #184]	; 0xb8
 800f8ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8ec:	2b07      	cmp	r3, #7
 800f8ee:	dd08      	ble.n	800f902 <_svfprintf_r+0x1236>
 800f8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8f6:	f002 ff79 	bl	80127ec <__ssprint_r>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d000      	beq.n	800f900 <_svfprintf_r+0x1234>
 800f8fe:	e0c4      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f900:	a92f      	add	r1, sp, #188	; 0xbc
 800f902:	000f      	movs	r7, r1
 800f904:	3c10      	subs	r4, #16
 800f906:	e7c8      	b.n	800f89a <_svfprintf_r+0x11ce>
 800f908:	3210      	adds	r2, #16
 800f90a:	607d      	str	r5, [r7, #4]
 800f90c:	922e      	str	r2, [sp, #184]	; 0xb8
 800f90e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f910:	2b07      	cmp	r3, #7
 800f912:	dd08      	ble.n	800f926 <_svfprintf_r+0x125a>
 800f914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f916:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f918:	aa2c      	add	r2, sp, #176	; 0xb0
 800f91a:	f002 ff67 	bl	80127ec <__ssprint_r>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d000      	beq.n	800f924 <_svfprintf_r+0x1258>
 800f922:	e0b2      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f924:	a92f      	add	r1, sp, #188	; 0xbc
 800f926:	000f      	movs	r7, r1
 800f928:	3c10      	subs	r4, #16
 800f92a:	e74c      	b.n	800f7c6 <_svfprintf_r+0x10fa>
 800f92c:	003c      	movs	r4, r7
 800f92e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f930:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f934:	3101      	adds	r1, #1
 800f936:	3301      	adds	r3, #1
 800f938:	3408      	adds	r4, #8
 800f93a:	2a01      	cmp	r2, #1
 800f93c:	dc03      	bgt.n	800f946 <_svfprintf_r+0x127a>
 800f93e:	2201      	movs	r2, #1
 800f940:	4216      	tst	r6, r2
 800f942:	d100      	bne.n	800f946 <_svfprintf_r+0x127a>
 800f944:	e07f      	b.n	800fa46 <_svfprintf_r+0x137a>
 800f946:	9a08      	ldr	r2, [sp, #32]
 800f948:	912e      	str	r1, [sp, #184]	; 0xb8
 800f94a:	603a      	str	r2, [r7, #0]
 800f94c:	2201      	movs	r2, #1
 800f94e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f950:	607a      	str	r2, [r7, #4]
 800f952:	2b07      	cmp	r3, #7
 800f954:	dd08      	ble.n	800f968 <_svfprintf_r+0x129c>
 800f956:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f958:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f95a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f95c:	f002 ff46 	bl	80127ec <__ssprint_r>
 800f960:	2800      	cmp	r0, #0
 800f962:	d000      	beq.n	800f966 <_svfprintf_r+0x129a>
 800f964:	e091      	b.n	800fa8a <_svfprintf_r+0x13be>
 800f966:	ac2f      	add	r4, sp, #188	; 0xbc
 800f968:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f96a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f970:	6063      	str	r3, [r4, #4]
 800f972:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f974:	3408      	adds	r4, #8
 800f976:	189b      	adds	r3, r3, r2
 800f978:	932e      	str	r3, [sp, #184]	; 0xb8
 800f97a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f97c:	3301      	adds	r3, #1
 800f97e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f980:	2b07      	cmp	r3, #7
 800f982:	dd07      	ble.n	800f994 <_svfprintf_r+0x12c8>
 800f984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f986:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f988:	aa2c      	add	r2, sp, #176	; 0xb0
 800f98a:	f002 ff2f 	bl	80127ec <__ssprint_r>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d17b      	bne.n	800fa8a <_svfprintf_r+0x13be>
 800f992:	ac2f      	add	r4, sp, #188	; 0xbc
 800f994:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f996:	2200      	movs	r2, #0
 800f998:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f99a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f99c:	9309      	str	r3, [sp, #36]	; 0x24
 800f99e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9a0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f9a2:	1e5d      	subs	r5, r3, #1
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f7f0 fd4f 	bl	8000448 <__aeabi_dcmpeq>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d126      	bne.n	800f9fc <_svfprintf_r+0x1330>
 800f9ae:	9b08      	ldr	r3, [sp, #32]
 800f9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f9b6:	6023      	str	r3, [r4, #0]
 800f9b8:	1e7b      	subs	r3, r7, #1
 800f9ba:	3201      	adds	r2, #1
 800f9bc:	185b      	adds	r3, r3, r1
 800f9be:	6065      	str	r5, [r4, #4]
 800f9c0:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9c2:	922d      	str	r2, [sp, #180]	; 0xb4
 800f9c4:	3408      	adds	r4, #8
 800f9c6:	2a07      	cmp	r2, #7
 800f9c8:	dd07      	ble.n	800f9da <_svfprintf_r+0x130e>
 800f9ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9ce:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9d0:	f002 ff0c 	bl	80127ec <__ssprint_r>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	d158      	bne.n	800fa8a <_svfprintf_r+0x13be>
 800f9d8:	ac2f      	add	r4, sp, #188	; 0xbc
 800f9da:	ab28      	add	r3, sp, #160	; 0xa0
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f9e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f9e2:	6063      	str	r3, [r4, #4]
 800f9e4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9e6:	189b      	adds	r3, r3, r2
 800f9e8:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9f0:	2b07      	cmp	r3, #7
 800f9f2:	dd00      	ble.n	800f9f6 <_svfprintf_r+0x132a>
 800f9f4:	e638      	b.n	800f668 <_svfprintf_r+0xf9c>
 800f9f6:	3408      	adds	r4, #8
 800f9f8:	0027      	movs	r7, r4
 800f9fa:	e595      	b.n	800f528 <_svfprintf_r+0xe5c>
 800f9fc:	2710      	movs	r7, #16
 800f9fe:	2d00      	cmp	r5, #0
 800fa00:	ddeb      	ble.n	800f9da <_svfprintf_r+0x130e>
 800fa02:	0021      	movs	r1, r4
 800fa04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa06:	4850      	ldr	r0, [pc, #320]	; (800fb48 <_svfprintf_r+0x147c>)
 800fa08:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	3108      	adds	r1, #8
 800fa0e:	6020      	str	r0, [r4, #0]
 800fa10:	2d10      	cmp	r5, #16
 800fa12:	dc07      	bgt.n	800fa24 <_svfprintf_r+0x1358>
 800fa14:	6065      	str	r5, [r4, #4]
 800fa16:	000c      	movs	r4, r1
 800fa18:	18ad      	adds	r5, r5, r2
 800fa1a:	952e      	str	r5, [sp, #184]	; 0xb8
 800fa1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa1e:	2b07      	cmp	r3, #7
 800fa20:	dddb      	ble.n	800f9da <_svfprintf_r+0x130e>
 800fa22:	e7d2      	b.n	800f9ca <_svfprintf_r+0x12fe>
 800fa24:	3210      	adds	r2, #16
 800fa26:	6067      	str	r7, [r4, #4]
 800fa28:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa2a:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa2c:	2b07      	cmp	r3, #7
 800fa2e:	dd07      	ble.n	800fa40 <_svfprintf_r+0x1374>
 800fa30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa34:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa36:	f002 fed9 	bl	80127ec <__ssprint_r>
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d125      	bne.n	800fa8a <_svfprintf_r+0x13be>
 800fa3e:	a92f      	add	r1, sp, #188	; 0xbc
 800fa40:	000c      	movs	r4, r1
 800fa42:	3d10      	subs	r5, #16
 800fa44:	e7dd      	b.n	800fa02 <_svfprintf_r+0x1336>
 800fa46:	9808      	ldr	r0, [sp, #32]
 800fa48:	912e      	str	r1, [sp, #184]	; 0xb8
 800fa4a:	c705      	stmia	r7!, {r0, r2}
 800fa4c:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa4e:	e7e6      	b.n	800fa1e <_svfprintf_r+0x1352>
 800fa50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fa52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fa54:	2510      	movs	r5, #16
 800fa56:	1a9c      	subs	r4, r3, r2
 800fa58:	2c00      	cmp	r4, #0
 800fa5a:	dc00      	bgt.n	800fa5e <_svfprintf_r+0x1392>
 800fa5c:	e567      	b.n	800f52e <_svfprintf_r+0xe62>
 800fa5e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa60:	493a      	ldr	r1, [pc, #232]	; (800fb4c <_svfprintf_r+0x1480>)
 800fa62:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fa64:	3301      	adds	r3, #1
 800fa66:	6039      	str	r1, [r7, #0]
 800fa68:	2c10      	cmp	r4, #16
 800fa6a:	dc19      	bgt.n	800faa0 <_svfprintf_r+0x13d4>
 800fa6c:	607c      	str	r4, [r7, #4]
 800fa6e:	18a4      	adds	r4, r4, r2
 800fa70:	942e      	str	r4, [sp, #184]	; 0xb8
 800fa72:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa74:	2b07      	cmp	r3, #7
 800fa76:	dc00      	bgt.n	800fa7a <_svfprintf_r+0x13ae>
 800fa78:	e559      	b.n	800f52e <_svfprintf_r+0xe62>
 800fa7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa7e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa80:	f002 feb4 	bl	80127ec <__ssprint_r>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d100      	bne.n	800fa8a <_svfprintf_r+0x13be>
 800fa88:	e551      	b.n	800f52e <_svfprintf_r+0xe62>
 800fa8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d101      	bne.n	800fa94 <_svfprintf_r+0x13c8>
 800fa90:	f7ff f845 	bl	800eb1e <_svfprintf_r+0x452>
 800fa94:	0019      	movs	r1, r3
 800fa96:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa98:	f7fd fd80 	bl	800d59c <_free_r>
 800fa9c:	f7ff f83f 	bl	800eb1e <_svfprintf_r+0x452>
 800faa0:	3210      	adds	r2, #16
 800faa2:	607d      	str	r5, [r7, #4]
 800faa4:	922e      	str	r2, [sp, #184]	; 0xb8
 800faa6:	932d      	str	r3, [sp, #180]	; 0xb4
 800faa8:	3708      	adds	r7, #8
 800faaa:	2b07      	cmp	r3, #7
 800faac:	dd07      	ble.n	800fabe <_svfprintf_r+0x13f2>
 800faae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fab2:	aa2c      	add	r2, sp, #176	; 0xb0
 800fab4:	f002 fe9a 	bl	80127ec <__ssprint_r>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d1e6      	bne.n	800fa8a <_svfprintf_r+0x13be>
 800fabc:	af2f      	add	r7, sp, #188	; 0xbc
 800fabe:	3c10      	subs	r4, #16
 800fac0:	e7cd      	b.n	800fa5e <_svfprintf_r+0x1392>
 800fac2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fac6:	f7fd fd69 	bl	800d59c <_free_r>
 800faca:	e549      	b.n	800f560 <_svfprintf_r+0xe94>
 800facc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800face:	2b00      	cmp	r3, #0
 800fad0:	d101      	bne.n	800fad6 <_svfprintf_r+0x140a>
 800fad2:	f7ff f824 	bl	800eb1e <_svfprintf_r+0x452>
 800fad6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fada:	aa2c      	add	r2, sp, #176	; 0xb0
 800fadc:	f002 fe86 	bl	80127ec <__ssprint_r>
 800fae0:	f7ff f81d 	bl	800eb1e <_svfprintf_r+0x452>
 800fae4:	0034      	movs	r4, r6
 800fae6:	2a00      	cmp	r2, #0
 800fae8:	d101      	bne.n	800faee <_svfprintf_r+0x1422>
 800faea:	f7fe ff8c 	bl	800ea06 <_svfprintf_r+0x33a>
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d101      	bne.n	800faf6 <_svfprintf_r+0x142a>
 800faf2:	f7ff fc01 	bl	800f2f8 <_svfprintf_r+0xc2c>
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	d100      	bne.n	800fafc <_svfprintf_r+0x1430>
 800fafa:	e459      	b.n	800f3b0 <_svfprintf_r+0xce4>
 800fafc:	2507      	movs	r5, #7
 800fafe:	ab58      	add	r3, sp, #352	; 0x160
 800fb00:	9308      	str	r3, [sp, #32]
 800fb02:	9a08      	ldr	r2, [sp, #32]
 800fb04:	0013      	movs	r3, r2
 800fb06:	3b01      	subs	r3, #1
 800fb08:	9308      	str	r3, [sp, #32]
 800fb0a:	9b06      	ldr	r3, [sp, #24]
 800fb0c:	9908      	ldr	r1, [sp, #32]
 800fb0e:	402b      	ands	r3, r5
 800fb10:	3330      	adds	r3, #48	; 0x30
 800fb12:	700b      	strb	r3, [r1, #0]
 800fb14:	9907      	ldr	r1, [sp, #28]
 800fb16:	074e      	lsls	r6, r1, #29
 800fb18:	9906      	ldr	r1, [sp, #24]
 800fb1a:	08c8      	lsrs	r0, r1, #3
 800fb1c:	9907      	ldr	r1, [sp, #28]
 800fb1e:	4306      	orrs	r6, r0
 800fb20:	08c9      	lsrs	r1, r1, #3
 800fb22:	9107      	str	r1, [sp, #28]
 800fb24:	0031      	movs	r1, r6
 800fb26:	9807      	ldr	r0, [sp, #28]
 800fb28:	9606      	str	r6, [sp, #24]
 800fb2a:	4301      	orrs	r1, r0
 800fb2c:	d1e9      	bne.n	800fb02 <_svfprintf_r+0x1436>
 800fb2e:	07e1      	lsls	r1, r4, #31
 800fb30:	d400      	bmi.n	800fb34 <_svfprintf_r+0x1468>
 800fb32:	e42a      	b.n	800f38a <_svfprintf_r+0xcbe>
 800fb34:	2b30      	cmp	r3, #48	; 0x30
 800fb36:	d100      	bne.n	800fb3a <_svfprintf_r+0x146e>
 800fb38:	e427      	b.n	800f38a <_svfprintf_r+0xcbe>
 800fb3a:	2130      	movs	r1, #48	; 0x30
 800fb3c:	9b08      	ldr	r3, [sp, #32]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	7019      	strb	r1, [r3, #0]
 800fb42:	1e93      	subs	r3, r2, #2
 800fb44:	9308      	str	r3, [sp, #32]
 800fb46:	e420      	b.n	800f38a <_svfprintf_r+0xcbe>
 800fb48:	08015cb8 	.word	0x08015cb8
 800fb4c:	08015ca8 	.word	0x08015ca8

0800fb50 <__ssvfscanf_r>:
 800fb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb52:	4ca7      	ldr	r4, [pc, #668]	; (800fdf0 <__ssvfscanf_r+0x2a0>)
 800fb54:	44a5      	add	sp, r4
 800fb56:	af02      	add	r7, sp, #8
 800fb58:	633b      	str	r3, [r7, #48]	; 0x30
 800fb5a:	000b      	movs	r3, r1
 800fb5c:	6378      	str	r0, [r7, #52]	; 0x34
 800fb5e:	6479      	str	r1, [r7, #68]	; 0x44
 800fb60:	61ba      	str	r2, [r7, #24]
 800fb62:	220c      	movs	r2, #12
 800fb64:	5e9a      	ldrsh	r2, [r3, r2]
 800fb66:	2380      	movs	r3, #128	; 0x80
 800fb68:	019b      	lsls	r3, r3, #6
 800fb6a:	421a      	tst	r2, r3
 800fb6c:	d105      	bne.n	800fb7a <__ssvfscanf_r+0x2a>
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	818b      	strh	r3, [r1, #12]
 800fb72:	4aa0      	ldr	r2, [pc, #640]	; (800fdf4 <__ssvfscanf_r+0x2a4>)
 800fb74:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fb76:	4013      	ands	r3, r2
 800fb78:	664b      	str	r3, [r1, #100]	; 0x64
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	617b      	str	r3, [r7, #20]
 800fb7e:	643b      	str	r3, [r7, #64]	; 0x40
 800fb80:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb82:	627b      	str	r3, [r7, #36]	; 0x24
 800fb84:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	69ba      	ldr	r2, [r7, #24]
 800fb8c:	781b      	ldrb	r3, [r3, #0]
 800fb8e:	3201      	adds	r2, #1
 800fb90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb92:	61ba      	str	r2, [r7, #24]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d100      	bne.n	800fb9a <__ssvfscanf_r+0x4a>
 800fb98:	e0d7      	b.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fb9a:	2608      	movs	r6, #8
 800fb9c:	2108      	movs	r1, #8
 800fb9e:	4a96      	ldr	r2, [pc, #600]	; (800fdf8 <__ssvfscanf_r+0x2a8>)
 800fba0:	5cd2      	ldrb	r2, [r2, r3]
 800fba2:	4016      	ands	r6, r2
 800fba4:	420a      	tst	r2, r1
 800fba6:	d01d      	beq.n	800fbe4 <__ssvfscanf_r+0x94>
 800fba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dd12      	ble.n	800fbd6 <__ssvfscanf_r+0x86>
 800fbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbb2:	4991      	ldr	r1, [pc, #580]	; (800fdf8 <__ssvfscanf_r+0x2a8>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	781a      	ldrb	r2, [r3, #0]
 800fbb8:	5c8a      	ldrb	r2, [r1, r2]
 800fbba:	2108      	movs	r1, #8
 800fbbc:	420a      	tst	r2, r1
 800fbbe:	d0e3      	beq.n	800fb88 <__ssvfscanf_r+0x38>
 800fbc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbc4:	3201      	adds	r2, #1
 800fbc6:	63ba      	str	r2, [r7, #56]	; 0x38
 800fbc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6852      	ldr	r2, [r2, #4]
 800fbce:	600b      	str	r3, [r1, #0]
 800fbd0:	3a01      	subs	r2, #1
 800fbd2:	604a      	str	r2, [r1, #4]
 800fbd4:	e7e8      	b.n	800fba8 <__ssvfscanf_r+0x58>
 800fbd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fbd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbda:	f002 fec7 	bl	801296c <__ssrefill_r>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d0e6      	beq.n	800fbb0 <__ssvfscanf_r+0x60>
 800fbe2:	e7d1      	b.n	800fb88 <__ssvfscanf_r+0x38>
 800fbe4:	2b25      	cmp	r3, #37	; 0x25
 800fbe6:	d165      	bne.n	800fcb4 <__ssvfscanf_r+0x164>
 800fbe8:	250a      	movs	r5, #10
 800fbea:	2480      	movs	r4, #128	; 0x80
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	63fe      	str	r6, [r7, #60]	; 0x3c
 800fbf0:	3b16      	subs	r3, #22
 800fbf2:	69b9      	ldr	r1, [r7, #24]
 800fbf4:	3101      	adds	r1, #1
 800fbf6:	61b9      	str	r1, [r7, #24]
 800fbf8:	7811      	ldrb	r1, [r2, #0]
 800fbfa:	0008      	movs	r0, r1
 800fbfc:	3825      	subs	r0, #37	; 0x25
 800fbfe:	2855      	cmp	r0, #85	; 0x55
 800fc00:	d900      	bls.n	800fc04 <__ssvfscanf_r+0xb4>
 800fc02:	e170      	b.n	800fee6 <__ssvfscanf_r+0x396>
 800fc04:	f7f0 fa90 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fc08:	016f0056 	.word	0x016f0056
 800fc0c:	016f016f 	.word	0x016f016f
 800fc10:	0081016f 	.word	0x0081016f
 800fc14:	016f016f 	.word	0x016f016f
 800fc18:	016f016f 	.word	0x016f016f
 800fc1c:	00b8016f 	.word	0x00b8016f
 800fc20:	00b800b8 	.word	0x00b800b8
 800fc24:	00b800b8 	.word	0x00b800b8
 800fc28:	00b800b8 	.word	0x00b800b8
 800fc2c:	00b800b8 	.word	0x00b800b8
 800fc30:	016f00b8 	.word	0x016f00b8
 800fc34:	016f016f 	.word	0x016f016f
 800fc38:	016f016f 	.word	0x016f016f
 800fc3c:	016f016f 	.word	0x016f016f
 800fc40:	016f00d8 	.word	0x016f00d8
 800fc44:	00c1010a 	.word	0x00c1010a
 800fc48:	00d800d8 	.word	0x00d800d8
 800fc4c:	016f00d8 	.word	0x016f00d8
 800fc50:	016f016f 	.word	0x016f016f
 800fc54:	009f016f 	.word	0x009f016f
 800fc58:	016f016f 	.word	0x016f016f
 800fc5c:	016f00c9 	.word	0x016f00c9
 800fc60:	016f016f 	.word	0x016f016f
 800fc64:	016f00f0 	.word	0x016f00f0
 800fc68:	016f016f 	.word	0x016f016f
 800fc6c:	00d1016f 	.word	0x00d1016f
 800fc70:	016f016f 	.word	0x016f016f
 800fc74:	016f00fe 	.word	0x016f00fe
 800fc78:	016f016f 	.word	0x016f016f
 800fc7c:	016f016f 	.word	0x016f016f
 800fc80:	016f00d8 	.word	0x016f00d8
 800fc84:	00c3010c 	.word	0x00c3010c
 800fc88:	00d800d8 	.word	0x00d800d8
 800fc8c:	009400d8 	.word	0x009400d8
 800fc90:	009f012f 	.word	0x009f012f
 800fc94:	0088016f 	.word	0x0088016f
 800fc98:	011200a9 	.word	0x011200a9
 800fc9c:	011000cb 	.word	0x011000cb
 800fca0:	016f016f 	.word	0x016f016f
 800fca4:	00a600f2 	.word	0x00a600f2
 800fca8:	016f00cf 	.word	0x016f00cf
 800fcac:	00d1016f 	.word	0x00d1016f
 800fcb0:	00a6016f 	.word	0x00a6016f
 800fcb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	dd12      	ble.n	800fce2 <__ssvfscanf_r+0x192>
 800fcbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcbe:	69ba      	ldr	r2, [r7, #24]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3a01      	subs	r2, #1
 800fcc4:	7819      	ldrb	r1, [r3, #0]
 800fcc6:	7812      	ldrb	r2, [r2, #0]
 800fcc8:	4291      	cmp	r1, r2
 800fcca:	d13e      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcd0:	6852      	ldr	r2, [r2, #4]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	600b      	str	r3, [r1, #0]
 800fcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd8:	3a01      	subs	r2, #1
 800fcda:	604a      	str	r2, [r1, #4]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	63bb      	str	r3, [r7, #56]	; 0x38
 800fce0:	e752      	b.n	800fb88 <__ssvfscanf_r+0x38>
 800fce2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fce4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fce6:	f002 fe41 	bl	801296c <__ssrefill_r>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	d0e6      	beq.n	800fcbc <__ssvfscanf_r+0x16c>
 800fcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d003      	beq.n	800fcfc <__ssvfscanf_r+0x1ac>
 800fcf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf6:	899b      	ldrh	r3, [r3, #12]
 800fcf8:	065b      	lsls	r3, r3, #25
 800fcfa:	d526      	bpl.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d000      	beq.n	800fd04 <__ssvfscanf_r+0x1b4>
 800fd02:	e0f6      	b.n	800fef2 <__ssvfscanf_r+0x3a2>
 800fd04:	3b01      	subs	r3, #1
 800fd06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd08:	e104      	b.n	800ff14 <__ssvfscanf_r+0x3c4>
 800fd0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd0c:	4332      	orrs	r2, r6
 800fd0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fd10:	d11b      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd12:	2610      	movs	r6, #16
 800fd14:	69ba      	ldr	r2, [r7, #24]
 800fd16:	e76c      	b.n	800fbf2 <__ssvfscanf_r+0xa2>
 800fd18:	421e      	tst	r6, r3
 800fd1a:	d116      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd1c:	7851      	ldrb	r1, [r2, #1]
 800fd1e:	296c      	cmp	r1, #108	; 0x6c
 800fd20:	d103      	bne.n	800fd2a <__ssvfscanf_r+0x1da>
 800fd22:	3202      	adds	r2, #2
 800fd24:	61ba      	str	r2, [r7, #24]
 800fd26:	2202      	movs	r2, #2
 800fd28:	e000      	b.n	800fd2c <__ssvfscanf_r+0x1dc>
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	4316      	orrs	r6, r2
 800fd2e:	e7f1      	b.n	800fd14 <__ssvfscanf_r+0x1c4>
 800fd30:	421e      	tst	r6, r3
 800fd32:	d10a      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd34:	7851      	ldrb	r1, [r2, #1]
 800fd36:	2968      	cmp	r1, #104	; 0x68
 800fd38:	d103      	bne.n	800fd42 <__ssvfscanf_r+0x1f2>
 800fd3a:	3202      	adds	r2, #2
 800fd3c:	61ba      	str	r2, [r7, #24]
 800fd3e:	2208      	movs	r2, #8
 800fd40:	e7f4      	b.n	800fd2c <__ssvfscanf_r+0x1dc>
 800fd42:	2204      	movs	r2, #4
 800fd44:	e7f2      	b.n	800fd2c <__ssvfscanf_r+0x1dc>
 800fd46:	421e      	tst	r6, r3
 800fd48:	d0ed      	beq.n	800fd26 <__ssvfscanf_r+0x1d6>
 800fd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d000      	beq.n	800fd52 <__ssvfscanf_r+0x202>
 800fd50:	e0da      	b.n	800ff08 <__ssvfscanf_r+0x3b8>
 800fd52:	e0df      	b.n	800ff14 <__ssvfscanf_r+0x3c4>
 800fd54:	421e      	tst	r6, r3
 800fd56:	d0dd      	beq.n	800fd14 <__ssvfscanf_r+0x1c4>
 800fd58:	e7f7      	b.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd5a:	228f      	movs	r2, #143	; 0x8f
 800fd5c:	218f      	movs	r1, #143	; 0x8f
 800fd5e:	4032      	ands	r2, r6
 800fd60:	420e      	tst	r6, r1
 800fd62:	d1f2      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fd66:	2900      	cmp	r1, #0
 800fd68:	d104      	bne.n	800fd74 <__ssvfscanf_r+0x224>
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	a902      	add	r1, sp, #8
 800fd6e:	6439      	str	r1, [r7, #64]	; 0x40
 800fd70:	600a      	str	r2, [r1, #0]
 800fd72:	604a      	str	r2, [r1, #4]
 800fd74:	4326      	orrs	r6, r4
 800fd76:	e7cd      	b.n	800fd14 <__ssvfscanf_r+0x1c4>
 800fd78:	228f      	movs	r2, #143	; 0x8f
 800fd7a:	4216      	tst	r6, r2
 800fd7c:	d1e5      	bne.n	800fd4a <__ssvfscanf_r+0x1fa>
 800fd7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd80:	436a      	muls	r2, r5
 800fd82:	3a30      	subs	r2, #48	; 0x30
 800fd84:	188a      	adds	r2, r1, r2
 800fd86:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fd88:	e7c4      	b.n	800fd14 <__ssvfscanf_r+0x1c4>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	431e      	orrs	r6, r3
 800fd8e:	4b1b      	ldr	r3, [pc, #108]	; (800fdfc <__ssvfscanf_r+0x2ac>)
 800fd90:	617b      	str	r3, [r7, #20]
 800fd92:	230a      	movs	r3, #10
 800fd94:	2403      	movs	r4, #3
 800fd96:	627b      	str	r3, [r7, #36]	; 0x24
 800fd98:	e00f      	b.n	800fdba <__ssvfscanf_r+0x26a>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	431e      	orrs	r6, r3
 800fd9e:	4b18      	ldr	r3, [pc, #96]	; (800fe00 <__ssvfscanf_r+0x2b0>)
 800fda0:	617b      	str	r3, [r7, #20]
 800fda2:	2308      	movs	r3, #8
 800fda4:	e7f6      	b.n	800fd94 <__ssvfscanf_r+0x244>
 800fda6:	4b16      	ldr	r3, [pc, #88]	; (800fe00 <__ssvfscanf_r+0x2b0>)
 800fda8:	e7f2      	b.n	800fd90 <__ssvfscanf_r+0x240>
 800fdaa:	2380      	movs	r3, #128	; 0x80
 800fdac:	009b      	lsls	r3, r3, #2
 800fdae:	431e      	orrs	r6, r3
 800fdb0:	4b13      	ldr	r3, [pc, #76]	; (800fe00 <__ssvfscanf_r+0x2b0>)
 800fdb2:	617b      	str	r3, [r7, #20]
 800fdb4:	2310      	movs	r3, #16
 800fdb6:	e7ed      	b.n	800fd94 <__ssvfscanf_r+0x244>
 800fdb8:	2404      	movs	r4, #4
 800fdba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	dd55      	ble.n	800fe6e <__ssvfscanf_r+0x31e>
 800fdc2:	0673      	lsls	r3, r6, #25
 800fdc4:	d407      	bmi.n	800fdd6 <__ssvfscanf_r+0x286>
 800fdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdc8:	490b      	ldr	r1, [pc, #44]	; (800fdf8 <__ssvfscanf_r+0x2a8>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	781a      	ldrb	r2, [r3, #0]
 800fdce:	5c8a      	ldrb	r2, [r1, r2]
 800fdd0:	2108      	movs	r1, #8
 800fdd2:	420a      	tst	r2, r1
 800fdd4:	d152      	bne.n	800fe7c <__ssvfscanf_r+0x32c>
 800fdd6:	1e60      	subs	r0, r4, #1
 800fdd8:	2803      	cmp	r0, #3
 800fdda:	d863      	bhi.n	800fea4 <__ssvfscanf_r+0x354>
 800fddc:	f7f0 f9a4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fde0:	03bd01da 	.word	0x03bd01da
 800fde4:	068a0579 	.word	0x068a0579
 800fde8:	2301      	movs	r3, #1
 800fdea:	431e      	orrs	r6, r3
 800fdec:	2402      	movs	r4, #2
 800fdee:	e7e4      	b.n	800fdba <__ssvfscanf_r+0x26a>
 800fdf0:	fffffd34 	.word	0xfffffd34
 800fdf4:	ffffdfff 	.word	0xffffdfff
 800fdf8:	080159a1 	.word	0x080159a1
 800fdfc:	0800cded 	.word	0x0800cded
 800fe00:	0800cf11 	.word	0x0800cf11
 800fe04:	2248      	movs	r2, #72	; 0x48
 800fe06:	2318      	movs	r3, #24
 800fe08:	189b      	adds	r3, r3, r2
 800fe0a:	19d8      	adds	r0, r3, r7
 800fe0c:	69b9      	ldr	r1, [r7, #24]
 800fe0e:	f001 f9d7 	bl	80111c0 <__sccl>
 800fe12:	2340      	movs	r3, #64	; 0x40
 800fe14:	2401      	movs	r4, #1
 800fe16:	61b8      	str	r0, [r7, #24]
 800fe18:	431e      	orrs	r6, r3
 800fe1a:	e7ce      	b.n	800fdba <__ssvfscanf_r+0x26a>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	431e      	orrs	r6, r3
 800fe20:	2340      	movs	r3, #64	; 0x40
 800fe22:	2400      	movs	r4, #0
 800fe24:	431e      	orrs	r6, r3
 800fe26:	e7c8      	b.n	800fdba <__ssvfscanf_r+0x26a>
 800fe28:	2388      	movs	r3, #136	; 0x88
 800fe2a:	e7bf      	b.n	800fdac <__ssvfscanf_r+0x25c>
 800fe2c:	06f3      	lsls	r3, r6, #27
 800fe2e:	d500      	bpl.n	800fe32 <__ssvfscanf_r+0x2e2>
 800fe30:	e6aa      	b.n	800fb88 <__ssvfscanf_r+0x38>
 800fe32:	2108      	movs	r1, #8
 800fe34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe36:	cb04      	ldmia	r3!, {r2}
 800fe38:	420e      	tst	r6, r1
 800fe3a:	d003      	beq.n	800fe44 <__ssvfscanf_r+0x2f4>
 800fe3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe3e:	7011      	strb	r1, [r2, #0]
 800fe40:	633b      	str	r3, [r7, #48]	; 0x30
 800fe42:	e6a1      	b.n	800fb88 <__ssvfscanf_r+0x38>
 800fe44:	0771      	lsls	r1, r6, #29
 800fe46:	d502      	bpl.n	800fe4e <__ssvfscanf_r+0x2fe>
 800fe48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe4a:	8011      	strh	r1, [r2, #0]
 800fe4c:	e7f8      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 800fe4e:	07f1      	lsls	r1, r6, #31
 800fe50:	d502      	bpl.n	800fe58 <__ssvfscanf_r+0x308>
 800fe52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe54:	6011      	str	r1, [r2, #0]
 800fe56:	e7f3      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 800fe58:	07b6      	lsls	r6, r6, #30
 800fe5a:	d5fa      	bpl.n	800fe52 <__ssvfscanf_r+0x302>
 800fe5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe5e:	6011      	str	r1, [r2, #0]
 800fe60:	17c9      	asrs	r1, r1, #31
 800fe62:	6051      	str	r1, [r2, #4]
 800fe64:	e7ec      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 800fe66:	4ba2      	ldr	r3, [pc, #648]	; (80100f0 <__ssvfscanf_r+0x5a0>)
 800fe68:	617b      	str	r3, [r7, #20]
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e792      	b.n	800fd94 <__ssvfscanf_r+0x244>
 800fe6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe72:	f002 fd7b 	bl	801296c <__ssrefill_r>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d0a3      	beq.n	800fdc2 <__ssvfscanf_r+0x272>
 800fe7a:	e738      	b.n	800fcee <__ssvfscanf_r+0x19e>
 800fe7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe80:	3201      	adds	r2, #1
 800fe82:	63ba      	str	r2, [r7, #56]	; 0x38
 800fe84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe86:	6852      	ldr	r2, [r2, #4]
 800fe88:	3a01      	subs	r2, #1
 800fe8a:	604a      	str	r2, [r1, #4]
 800fe8c:	2a00      	cmp	r2, #0
 800fe8e:	dd02      	ble.n	800fe96 <__ssvfscanf_r+0x346>
 800fe90:	3301      	adds	r3, #1
 800fe92:	600b      	str	r3, [r1, #0]
 800fe94:	e797      	b.n	800fdc6 <__ssvfscanf_r+0x276>
 800fe96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe9a:	f002 fd67 	bl	801296c <__ssrefill_r>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d091      	beq.n	800fdc6 <__ssvfscanf_r+0x276>
 800fea2:	e724      	b.n	800fcee <__ssvfscanf_r+0x19e>
 800fea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fea6:	2301      	movs	r3, #1
 800fea8:	2a00      	cmp	r2, #0
 800feaa:	d100      	bne.n	800feae <__ssvfscanf_r+0x35e>
 800feac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800feae:	2210      	movs	r2, #16
 800feb0:	0034      	movs	r4, r6
 800feb2:	4032      	ands	r2, r6
 800feb4:	623a      	str	r2, [r7, #32]
 800feb6:	401c      	ands	r4, r3
 800feb8:	421e      	tst	r6, r3
 800feba:	d100      	bne.n	800febe <__ssvfscanf_r+0x36e>
 800febc:	e0f3      	b.n	80100a6 <__ssvfscanf_r+0x556>
 800febe:	2a00      	cmp	r2, #0
 800fec0:	d000      	beq.n	800fec4 <__ssvfscanf_r+0x374>
 800fec2:	e0b6      	b.n	8010032 <__ssvfscanf_r+0x4e2>
 800fec4:	2080      	movs	r0, #128	; 0x80
 800fec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec8:	cb10      	ldmia	r3!, {r4}
 800feca:	613b      	str	r3, [r7, #16]
 800fecc:	4206      	tst	r6, r0
 800fece:	d100      	bne.n	800fed2 <__ssvfscanf_r+0x382>
 800fed0:	e0b7      	b.n	8010042 <__ssvfscanf_r+0x4f2>
 800fed2:	2c00      	cmp	r4, #0
 800fed4:	d007      	beq.n	800fee6 <__ssvfscanf_r+0x396>
 800fed6:	f7fb fe93 	bl	800bc00 <malloc>
 800feda:	6338      	str	r0, [r7, #48]	; 0x30
 800fedc:	2800      	cmp	r0, #0
 800fede:	d11f      	bne.n	800ff20 <__ssvfscanf_r+0x3d0>
 800fee0:	2301      	movs	r3, #1
 800fee2:	425b      	negs	r3, r3
 800fee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d013      	beq.n	800ff14 <__ssvfscanf_r+0x3c4>
 800feec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feee:	3301      	adds	r3, #1
 800fef0:	d10a      	bne.n	800ff08 <__ssvfscanf_r+0x3b8>
 800fef2:	2400      	movs	r4, #0
 800fef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef6:	681d      	ldr	r5, [r3, #0]
 800fef8:	88db      	ldrh	r3, [r3, #6]
 800fefa:	42a3      	cmp	r3, r4
 800fefc:	dd01      	ble.n	800ff02 <__ssvfscanf_r+0x3b2>
 800fefe:	f001 f82a 	bl	8010f56 <__ssvfscanf_r+0x1406>
 800ff02:	2301      	movs	r3, #1
 800ff04:	425b      	negs	r3, r3
 800ff06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff0a:	6818      	ldr	r0, [r3, #0]
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d001      	beq.n	800ff14 <__ssvfscanf_r+0x3c4>
 800ff10:	f7fb fe80 	bl	800bc14 <free>
 800ff14:	46bd      	mov	sp, r7
 800ff16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff18:	23b1      	movs	r3, #177	; 0xb1
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	449d      	add	sp, r3
 800ff1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff22:	6023      	str	r3, [r4, #0]
 800ff24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff26:	88de      	ldrh	r6, [r3, #6]
 800ff28:	889d      	ldrh	r5, [r3, #4]
 800ff2a:	42ae      	cmp	r6, r5
 800ff2c:	d30e      	bcc.n	800ff4c <__ssvfscanf_r+0x3fc>
 800ff2e:	4b71      	ldr	r3, [pc, #452]	; (80100f4 <__ssvfscanf_r+0x5a4>)
 800ff30:	429d      	cmp	r5, r3
 800ff32:	d8d5      	bhi.n	800fee0 <__ssvfscanf_r+0x390>
 800ff34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff36:	3508      	adds	r5, #8
 800ff38:	b2ad      	uxth	r5, r5
 800ff3a:	6818      	ldr	r0, [r3, #0]
 800ff3c:	00a9      	lsls	r1, r5, #2
 800ff3e:	f002 f901 	bl	8012144 <realloc>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d0cc      	beq.n	800fee0 <__ssvfscanf_r+0x390>
 800ff46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff48:	6018      	str	r0, [r3, #0]
 800ff4a:	809d      	strh	r5, [r3, #4]
 800ff4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff4e:	1c72      	adds	r2, r6, #1
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	00b6      	lsls	r6, r6, #2
 800ff54:	50f4      	str	r4, [r6, r3]
 800ff56:	2320      	movs	r3, #32
 800ff58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff5a:	0026      	movs	r6, r4
 800ff5c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ff5e:	80ca      	strh	r2, [r1, #6]
 800ff60:	61fb      	str	r3, [r7, #28]
 800ff62:	2500      	movs	r5, #0
 800ff64:	f7fd f9fe 	bl	800d364 <__locale_mb_cur_max>
 800ff68:	42a8      	cmp	r0, r5
 800ff6a:	d100      	bne.n	800ff6e <__ssvfscanf_r+0x41e>
 800ff6c:	e6bf      	b.n	800fcee <__ssvfscanf_r+0x19e>
 800ff6e:	1c6a      	adds	r2, r5, #1
 800ff70:	60fa      	str	r2, [r7, #12]
 800ff72:	228c      	movs	r2, #140	; 0x8c
 800ff74:	2048      	movs	r0, #72	; 0x48
 800ff76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff78:	0052      	lsls	r2, r2, #1
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	1812      	adds	r2, r2, r0
 800ff7e:	7819      	ldrb	r1, [r3, #0]
 800ff80:	19d2      	adds	r2, r2, r7
 800ff82:	5551      	strb	r1, [r2, r5]
 800ff84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff88:	6852      	ldr	r2, [r2, #4]
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	600b      	str	r3, [r1, #0]
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	3a01      	subs	r2, #1
 800ff92:	604a      	str	r2, [r1, #4]
 800ff94:	2b03      	cmp	r3, #3
 800ff96:	d102      	bne.n	800ff9e <__ssvfscanf_r+0x44e>
 800ff98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff9a:	2b04      	cmp	r3, #4
 800ff9c:	d007      	beq.n	800ffae <__ssvfscanf_r+0x45e>
 800ff9e:	2048      	movs	r0, #72	; 0x48
 800ffa0:	2310      	movs	r3, #16
 800ffa2:	181b      	adds	r3, r3, r0
 800ffa4:	2208      	movs	r2, #8
 800ffa6:	2100      	movs	r1, #0
 800ffa8:	19d8      	adds	r0, r3, r7
 800ffaa:	f7fd f94f 	bl	800d24c <memset>
 800ffae:	2148      	movs	r1, #72	; 0x48
 800ffb0:	2310      	movs	r3, #16
 800ffb2:	228c      	movs	r2, #140	; 0x8c
 800ffb4:	185b      	adds	r3, r3, r1
 800ffb6:	0052      	lsls	r2, r2, #1
 800ffb8:	19db      	adds	r3, r3, r7
 800ffba:	1852      	adds	r2, r2, r1
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	0021      	movs	r1, r4
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffc4:	19d2      	adds	r2, r2, r7
 800ffc6:	f002 fbd1 	bl	801276c <_mbrtowc_r>
 800ffca:	0003      	movs	r3, r0
 800ffcc:	62b8      	str	r0, [r7, #40]	; 0x28
 800ffce:	3301      	adds	r3, #1
 800ffd0:	d100      	bne.n	800ffd4 <__ssvfscanf_r+0x484>
 800ffd2:	e68c      	b.n	800fcee <__ssvfscanf_r+0x19e>
 800ffd4:	2800      	cmp	r0, #0
 800ffd6:	d139      	bne.n	801004c <__ssvfscanf_r+0x4fc>
 800ffd8:	6a3b      	ldr	r3, [r7, #32]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d100      	bne.n	800ffe0 <__ssvfscanf_r+0x490>
 800ffde:	6023      	str	r3, [r4, #0]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe4:	4694      	mov	ip, r2
 800ffe6:	4463      	add	r3, ip
 800ffe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	2b03      	cmp	r3, #3
 800ffee:	d102      	bne.n	800fff6 <__ssvfscanf_r+0x4a6>
 800fff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	d002      	beq.n	800fffc <__ssvfscanf_r+0x4ac>
 800fff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff8:	3b01      	subs	r3, #1
 800fffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fffc:	6a3b      	ldr	r3, [r7, #32]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d115      	bne.n	801002e <__ssvfscanf_r+0x4de>
 8010002:	2e00      	cmp	r6, #0
 8010004:	d012      	beq.n	801002c <__ssvfscanf_r+0x4dc>
 8010006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	1ae5      	subs	r5, r4, r3
 801000c:	10ab      	asrs	r3, r5, #2
 801000e:	4293      	cmp	r3, r2
 8010010:	d30c      	bcc.n	801002c <__ssvfscanf_r+0x4dc>
 8010012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010014:	00d1      	lsls	r1, r2, #3
 8010016:	f002 f895 	bl	8012144 <realloc>
 801001a:	6338      	str	r0, [r7, #48]	; 0x30
 801001c:	2800      	cmp	r0, #0
 801001e:	d100      	bne.n	8010022 <__ssvfscanf_r+0x4d2>
 8010020:	e75e      	b.n	800fee0 <__ssvfscanf_r+0x390>
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	1944      	adds	r4, r0, r5
 8010026:	005b      	lsls	r3, r3, #1
 8010028:	6030      	str	r0, [r6, #0]
 801002a:	61fb      	str	r3, [r7, #28]
 801002c:	3404      	adds	r4, #4
 801002e:	2500      	movs	r5, #0
 8010030:	e010      	b.n	8010054 <__ssvfscanf_r+0x504>
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	613b      	str	r3, [r7, #16]
 8010036:	2300      	movs	r3, #0
 8010038:	001e      	movs	r6, r3
 801003a:	001c      	movs	r4, r3
 801003c:	61fb      	str	r3, [r7, #28]
 801003e:	633b      	str	r3, [r7, #48]	; 0x30
 8010040:	e78f      	b.n	800ff62 <__ssvfscanf_r+0x412>
 8010042:	6a3b      	ldr	r3, [r7, #32]
 8010044:	001e      	movs	r6, r3
 8010046:	61fb      	str	r3, [r7, #28]
 8010048:	633b      	str	r3, [r7, #48]	; 0x30
 801004a:	e78a      	b.n	800ff62 <__ssvfscanf_r+0x412>
 801004c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801004e:	68fd      	ldr	r5, [r7, #12]
 8010050:	3302      	adds	r3, #2
 8010052:	d1c5      	bne.n	800ffe0 <__ssvfscanf_r+0x490>
 8010054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	dc12      	bgt.n	8010082 <__ssvfscanf_r+0x532>
 801005c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801005e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010060:	f002 fc84 	bl	801296c <__ssrefill_r>
 8010064:	2800      	cmp	r0, #0
 8010066:	d00c      	beq.n	8010082 <__ssvfscanf_r+0x532>
 8010068:	2d00      	cmp	r5, #0
 801006a:	d000      	beq.n	801006e <__ssvfscanf_r+0x51e>
 801006c:	e63f      	b.n	800fcee <__ssvfscanf_r+0x19e>
 801006e:	2e00      	cmp	r6, #0
 8010070:	d10c      	bne.n	801008c <__ssvfscanf_r+0x53c>
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	425a      	negs	r2, r3
 8010076:	4153      	adcs	r3, r2
 8010078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801007a:	18d3      	adds	r3, r2, r3
 801007c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	e6de      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 8010082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010084:	2b00      	cmp	r3, #0
 8010086:	d000      	beq.n	801008a <__ssvfscanf_r+0x53a>
 8010088:	e76c      	b.n	800ff64 <__ssvfscanf_r+0x414>
 801008a:	e7f0      	b.n	801006e <__ssvfscanf_r+0x51e>
 801008c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008e:	69fa      	ldr	r2, [r7, #28]
 8010090:	1ae1      	subs	r1, r4, r3
 8010092:	108b      	asrs	r3, r1, #2
 8010094:	429a      	cmp	r2, r3
 8010096:	d9ec      	bls.n	8010072 <__ssvfscanf_r+0x522>
 8010098:	6830      	ldr	r0, [r6, #0]
 801009a:	f002 f853 	bl	8012144 <realloc>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d0e7      	beq.n	8010072 <__ssvfscanf_r+0x522>
 80100a2:	6030      	str	r0, [r6, #0]
 80100a4:	e7e5      	b.n	8010072 <__ssvfscanf_r+0x522>
 80100a6:	6a3b      	ldr	r3, [r7, #32]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d025      	beq.n	80100f8 <__ssvfscanf_r+0x5a8>
 80100ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100b4:	6812      	ldr	r2, [r2, #0]
 80100b6:	4299      	cmp	r1, r3
 80100b8:	dd11      	ble.n	80100de <__ssvfscanf_r+0x58e>
 80100ba:	1ac9      	subs	r1, r1, r3
 80100bc:	18d2      	adds	r2, r2, r3
 80100be:	18e4      	adds	r4, r4, r3
 80100c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80100c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80100c6:	0019      	movs	r1, r3
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	f002 fc4f 	bl	801296c <__ssrefill_r>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d0ec      	beq.n	80100ac <__ssvfscanf_r+0x55c>
 80100d2:	2c00      	cmp	r4, #0
 80100d4:	d100      	bne.n	80100d8 <__ssvfscanf_r+0x588>
 80100d6:	e60a      	b.n	800fcee <__ssvfscanf_r+0x19e>
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	191b      	adds	r3, r3, r4
 80100dc:	e5ff      	b.n	800fcde <__ssvfscanf_r+0x18e>
 80100de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80100e0:	1a5b      	subs	r3, r3, r1
 80100e2:	1864      	adds	r4, r4, r1
 80100e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100e6:	604b      	str	r3, [r1, #4]
 80100e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ea:	18d2      	adds	r2, r2, r3
 80100ec:	600a      	str	r2, [r1, #0]
 80100ee:	e7f3      	b.n	80100d8 <__ssvfscanf_r+0x588>
 80100f0:	0800cded 	.word	0x0800cded
 80100f4:	0000fff6 	.word	0x0000fff6
 80100f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fa:	0034      	movs	r4, r6
 80100fc:	cb20      	ldmia	r3!, {r5}
 80100fe:	633b      	str	r3, [r7, #48]	; 0x30
 8010100:	2380      	movs	r3, #128	; 0x80
 8010102:	401c      	ands	r4, r3
 8010104:	421e      	tst	r6, r3
 8010106:	d028      	beq.n	801015a <__ssvfscanf_r+0x60a>
 8010108:	2d00      	cmp	r5, #0
 801010a:	d100      	bne.n	801010e <__ssvfscanf_r+0x5be>
 801010c:	e61d      	b.n	800fd4a <__ssvfscanf_r+0x1fa>
 801010e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010110:	f7fb fd76 	bl	800bc00 <malloc>
 8010114:	6238      	str	r0, [r7, #32]
 8010116:	2800      	cmp	r0, #0
 8010118:	d100      	bne.n	801011c <__ssvfscanf_r+0x5cc>
 801011a:	e5ef      	b.n	800fcfc <__ssvfscanf_r+0x1ac>
 801011c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801011e:	6028      	str	r0, [r5, #0]
 8010120:	88de      	ldrh	r6, [r3, #6]
 8010122:	889c      	ldrh	r4, [r3, #4]
 8010124:	6818      	ldr	r0, [r3, #0]
 8010126:	42a6      	cmp	r6, r4
 8010128:	d30e      	bcc.n	8010148 <__ssvfscanf_r+0x5f8>
 801012a:	4bbf      	ldr	r3, [pc, #764]	; (8010428 <__ssvfscanf_r+0x8d8>)
 801012c:	429c      	cmp	r4, r3
 801012e:	d900      	bls.n	8010132 <__ssvfscanf_r+0x5e2>
 8010130:	e6df      	b.n	800fef2 <__ssvfscanf_r+0x3a2>
 8010132:	3408      	adds	r4, #8
 8010134:	b2a4      	uxth	r4, r4
 8010136:	00a1      	lsls	r1, r4, #2
 8010138:	f002 f804 	bl	8012144 <realloc>
 801013c:	2800      	cmp	r0, #0
 801013e:	d100      	bne.n	8010142 <__ssvfscanf_r+0x5f2>
 8010140:	e6d7      	b.n	800fef2 <__ssvfscanf_r+0x3a2>
 8010142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010144:	6018      	str	r0, [r3, #0]
 8010146:	809c      	strh	r4, [r3, #4]
 8010148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801014a:	1c72      	adds	r2, r6, #1
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010150:	00b6      	lsls	r6, r6, #2
 8010152:	002c      	movs	r4, r5
 8010154:	50f5      	str	r5, [r6, r3]
 8010156:	6a3d      	ldr	r5, [r7, #32]
 8010158:	80ca      	strh	r2, [r1, #6]
 801015a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801015c:	0029      	movs	r1, r5
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	2201      	movs	r2, #1
 8010162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010164:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010166:	f002 fc20 	bl	80129aa <_sfread_r>
 801016a:	1e05      	subs	r5, r0, #0
 801016c:	d100      	bne.n	8010170 <__ssvfscanf_r+0x620>
 801016e:	e5be      	b.n	800fcee <__ssvfscanf_r+0x19e>
 8010170:	2c00      	cmp	r4, #0
 8010172:	d009      	beq.n	8010188 <__ssvfscanf_r+0x638>
 8010174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010176:	4283      	cmp	r3, r0
 8010178:	d906      	bls.n	8010188 <__ssvfscanf_r+0x638>
 801017a:	0001      	movs	r1, r0
 801017c:	6820      	ldr	r0, [r4, #0]
 801017e:	f001 ffe1 	bl	8012144 <realloc>
 8010182:	2800      	cmp	r0, #0
 8010184:	d000      	beq.n	8010188 <__ssvfscanf_r+0x638>
 8010186:	6020      	str	r0, [r4, #0]
 8010188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018a:	195b      	adds	r3, r3, r5
 801018c:	63bb      	str	r3, [r7, #56]	; 0x38
 801018e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010190:	3301      	adds	r3, #1
 8010192:	e4f8      	b.n	800fb86 <__ssvfscanf_r+0x36>
 8010194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d101      	bne.n	801019e <__ssvfscanf_r+0x64e>
 801019a:	3b01      	subs	r3, #1
 801019c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801019e:	2210      	movs	r2, #16
 80101a0:	2301      	movs	r3, #1
 80101a2:	0034      	movs	r4, r6
 80101a4:	4032      	ands	r2, r6
 80101a6:	401c      	ands	r4, r3
 80101a8:	623a      	str	r2, [r7, #32]
 80101aa:	421e      	tst	r6, r3
 80101ac:	d100      	bne.n	80101b0 <__ssvfscanf_r+0x660>
 80101ae:	e116      	b.n	80103de <__ssvfscanf_r+0x88e>
 80101b0:	2a00      	cmp	r2, #0
 80101b2:	d000      	beq.n	80101b6 <__ssvfscanf_r+0x666>
 80101b4:	e0b0      	b.n	8010318 <__ssvfscanf_r+0x7c8>
 80101b6:	2080      	movs	r0, #128	; 0x80
 80101b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ba:	cb10      	ldmia	r3!, {r4}
 80101bc:	60fb      	str	r3, [r7, #12]
 80101be:	4206      	tst	r6, r0
 80101c0:	d100      	bne.n	80101c4 <__ssvfscanf_r+0x674>
 80101c2:	e0b2      	b.n	801032a <__ssvfscanf_r+0x7da>
 80101c4:	2c00      	cmp	r4, #0
 80101c6:	d100      	bne.n	80101ca <__ssvfscanf_r+0x67a>
 80101c8:	e68d      	b.n	800fee6 <__ssvfscanf_r+0x396>
 80101ca:	f7fb fd19 	bl	800bc00 <malloc>
 80101ce:	6338      	str	r0, [r7, #48]	; 0x30
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d100      	bne.n	80101d6 <__ssvfscanf_r+0x686>
 80101d4:	e684      	b.n	800fee0 <__ssvfscanf_r+0x390>
 80101d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101dc:	88de      	ldrh	r6, [r3, #6]
 80101de:	889d      	ldrh	r5, [r3, #4]
 80101e0:	42ae      	cmp	r6, r5
 80101e2:	d310      	bcc.n	8010206 <__ssvfscanf_r+0x6b6>
 80101e4:	4b90      	ldr	r3, [pc, #576]	; (8010428 <__ssvfscanf_r+0x8d8>)
 80101e6:	429d      	cmp	r5, r3
 80101e8:	d900      	bls.n	80101ec <__ssvfscanf_r+0x69c>
 80101ea:	e679      	b.n	800fee0 <__ssvfscanf_r+0x390>
 80101ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101ee:	3508      	adds	r5, #8
 80101f0:	b2ad      	uxth	r5, r5
 80101f2:	6818      	ldr	r0, [r3, #0]
 80101f4:	00a9      	lsls	r1, r5, #2
 80101f6:	f001 ffa5 	bl	8012144 <realloc>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d100      	bne.n	8010200 <__ssvfscanf_r+0x6b0>
 80101fe:	e66f      	b.n	800fee0 <__ssvfscanf_r+0x390>
 8010200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010202:	6018      	str	r0, [r3, #0]
 8010204:	809d      	strh	r5, [r3, #4]
 8010206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010208:	1c72      	adds	r2, r6, #1
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	00b6      	lsls	r6, r6, #2
 801020e:	50f4      	str	r4, [r6, r3]
 8010210:	2320      	movs	r3, #32
 8010212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010214:	0026      	movs	r6, r4
 8010216:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010218:	80ca      	strh	r2, [r1, #6]
 801021a:	613b      	str	r3, [r7, #16]
 801021c:	2500      	movs	r5, #0
 801021e:	f7fd f8a1 	bl	800d364 <__locale_mb_cur_max>
 8010222:	42a8      	cmp	r0, r5
 8010224:	d100      	bne.n	8010228 <__ssvfscanf_r+0x6d8>
 8010226:	e562      	b.n	800fcee <__ssvfscanf_r+0x19e>
 8010228:	1c6a      	adds	r2, r5, #1
 801022a:	61fa      	str	r2, [r7, #28]
 801022c:	228c      	movs	r2, #140	; 0x8c
 801022e:	2048      	movs	r0, #72	; 0x48
 8010230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010232:	0052      	lsls	r2, r2, #1
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	1812      	adds	r2, r2, r0
 8010238:	7819      	ldrb	r1, [r3, #0]
 801023a:	19d2      	adds	r2, r2, r7
 801023c:	5551      	strb	r1, [r2, r5]
 801023e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010240:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010242:	6852      	ldr	r2, [r2, #4]
 8010244:	3301      	adds	r3, #1
 8010246:	600b      	str	r3, [r1, #0]
 8010248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024a:	3a01      	subs	r2, #1
 801024c:	604a      	str	r2, [r1, #4]
 801024e:	2b03      	cmp	r3, #3
 8010250:	d102      	bne.n	8010258 <__ssvfscanf_r+0x708>
 8010252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010254:	2b04      	cmp	r3, #4
 8010256:	d006      	beq.n	8010266 <__ssvfscanf_r+0x716>
 8010258:	2048      	movs	r0, #72	; 0x48
 801025a:	2208      	movs	r2, #8
 801025c:	1813      	adds	r3, r2, r0
 801025e:	2100      	movs	r1, #0
 8010260:	19d8      	adds	r0, r3, r7
 8010262:	f7fc fff3 	bl	800d24c <memset>
 8010266:	2148      	movs	r1, #72	; 0x48
 8010268:	2308      	movs	r3, #8
 801026a:	228c      	movs	r2, #140	; 0x8c
 801026c:	185b      	adds	r3, r3, r1
 801026e:	0052      	lsls	r2, r2, #1
 8010270:	19db      	adds	r3, r3, r7
 8010272:	1852      	adds	r2, r2, r1
 8010274:	9300      	str	r3, [sp, #0]
 8010276:	0021      	movs	r1, r4
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801027c:	19d2      	adds	r2, r2, r7
 801027e:	f002 fa75 	bl	801276c <_mbrtowc_r>
 8010282:	0003      	movs	r3, r0
 8010284:	62b8      	str	r0, [r7, #40]	; 0x28
 8010286:	3301      	adds	r3, #1
 8010288:	d100      	bne.n	801028c <__ssvfscanf_r+0x73c>
 801028a:	e530      	b.n	800fcee <__ssvfscanf_r+0x19e>
 801028c:	2800      	cmp	r0, #0
 801028e:	d151      	bne.n	8010334 <__ssvfscanf_r+0x7e4>
 8010290:	6020      	str	r0, [r4, #0]
 8010292:	2301      	movs	r3, #1
 8010294:	6825      	ldr	r5, [r4, #0]
 8010296:	425b      	negs	r3, r3
 8010298:	1c6a      	adds	r2, r5, #1
 801029a:	d01a      	beq.n	80102d2 <__ssvfscanf_r+0x782>
 801029c:	2048      	movs	r0, #72	; 0x48
 801029e:	3311      	adds	r3, #17
 80102a0:	181b      	adds	r3, r3, r0
 80102a2:	2208      	movs	r2, #8
 80102a4:	2100      	movs	r1, #0
 80102a6:	19d8      	adds	r0, r3, r7
 80102a8:	f7fc ffd0 	bl	800d24c <memset>
 80102ac:	4b5f      	ldr	r3, [pc, #380]	; (801042c <__ssvfscanf_r+0x8dc>)
 80102ae:	2148      	movs	r1, #72	; 0x48
 80102b0:	33e0      	adds	r3, #224	; 0xe0
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	2310      	movs	r3, #16
 80102b6:	4694      	mov	ip, r2
 80102b8:	185b      	adds	r3, r3, r1
 80102ba:	002a      	movs	r2, r5
 80102bc:	19db      	adds	r3, r3, r7
 80102be:	4665      	mov	r5, ip
 80102c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102c2:	1879      	adds	r1, r7, r1
 80102c4:	47a8      	blx	r5
 80102c6:	2300      	movs	r3, #0
 80102c8:	2801      	cmp	r0, #1
 80102ca:	d102      	bne.n	80102d2 <__ssvfscanf_r+0x782>
 80102cc:	3348      	adds	r3, #72	; 0x48
 80102ce:	18fb      	adds	r3, r7, r3
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	2218      	movs	r2, #24
 80102d4:	2148      	movs	r1, #72	; 0x48
 80102d6:	1852      	adds	r2, r2, r1
 80102d8:	19d2      	adds	r2, r2, r7
 80102da:	5cd3      	ldrb	r3, [r2, r3]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d149      	bne.n	8010374 <__ssvfscanf_r+0x824>
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d137      	bne.n	8010356 <__ssvfscanf_r+0x806>
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d113      	bne.n	8010314 <__ssvfscanf_r+0x7c4>
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	2e00      	cmp	r6, #0
 80102f0:	d00d      	beq.n	801030e <__ssvfscanf_r+0x7be>
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	1ae4      	subs	r4, r4, r3
 80102f8:	10a3      	asrs	r3, r4, #2
 80102fa:	3301      	adds	r3, #1
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d906      	bls.n	801030e <__ssvfscanf_r+0x7be>
 8010300:	6830      	ldr	r0, [r6, #0]
 8010302:	1d21      	adds	r1, r4, #4
 8010304:	f001 ff1e 	bl	8012144 <realloc>
 8010308:	2800      	cmp	r0, #0
 801030a:	d000      	beq.n	801030e <__ssvfscanf_r+0x7be>
 801030c:	6030      	str	r0, [r6, #0]
 801030e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010310:	3301      	adds	r3, #1
 8010312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	e593      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	2300      	movs	r3, #0
 801031e:	001e      	movs	r6, r3
 8010320:	613b      	str	r3, [r7, #16]
 8010322:	633b      	str	r3, [r7, #48]	; 0x30
 8010324:	334c      	adds	r3, #76	; 0x4c
 8010326:	18fc      	adds	r4, r7, r3
 8010328:	e778      	b.n	801021c <__ssvfscanf_r+0x6cc>
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	001e      	movs	r6, r3
 801032e:	613b      	str	r3, [r7, #16]
 8010330:	633b      	str	r3, [r7, #48]	; 0x30
 8010332:	e773      	b.n	801021c <__ssvfscanf_r+0x6cc>
 8010334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010336:	69fd      	ldr	r5, [r7, #28]
 8010338:	3302      	adds	r3, #2
 801033a:	d1aa      	bne.n	8010292 <__ssvfscanf_r+0x742>
 801033c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	dc47      	bgt.n	80103d4 <__ssvfscanf_r+0x884>
 8010344:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010348:	f002 fb10 	bl	801296c <__ssrefill_r>
 801034c:	2800      	cmp	r0, #0
 801034e:	d041      	beq.n	80103d4 <__ssvfscanf_r+0x884>
 8010350:	2d00      	cmp	r5, #0
 8010352:	d0c8      	beq.n	80102e6 <__ssvfscanf_r+0x796>
 8010354:	e4cb      	b.n	800fcee <__ssvfscanf_r+0x19e>
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	2248      	movs	r2, #72	; 0x48
 801035a:	3b01      	subs	r3, #1
 801035c:	61fb      	str	r3, [r7, #28]
 801035e:	238c      	movs	r3, #140	; 0x8c
 8010360:	005b      	lsls	r3, r3, #1
 8010362:	189b      	adds	r3, r3, r2
 8010364:	69fa      	ldr	r2, [r7, #28]
 8010366:	19db      	adds	r3, r3, r7
 8010368:	5cd1      	ldrb	r1, [r2, r3]
 801036a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801036c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801036e:	f002 fac1 	bl	80128f4 <_sungetc_r>
 8010372:	e7b5      	b.n	80102e0 <__ssvfscanf_r+0x790>
 8010374:	69fa      	ldr	r2, [r7, #28]
 8010376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010378:	4694      	mov	ip, r2
 801037a:	4463      	add	r3, ip
 801037c:	63bb      	str	r3, [r7, #56]	; 0x38
 801037e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010380:	2b03      	cmp	r3, #3
 8010382:	d102      	bne.n	801038a <__ssvfscanf_r+0x83a>
 8010384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010386:	2b04      	cmp	r3, #4
 8010388:	d002      	beq.n	8010390 <__ssvfscanf_r+0x840>
 801038a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038c:	3b01      	subs	r3, #1
 801038e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010390:	6a3b      	ldr	r3, [r7, #32]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d11a      	bne.n	80103cc <__ssvfscanf_r+0x87c>
 8010396:	3404      	adds	r4, #4
 8010398:	2e00      	cmp	r6, #0
 801039a:	d019      	beq.n	80103d0 <__ssvfscanf_r+0x880>
 801039c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039e:	693a      	ldr	r2, [r7, #16]
 80103a0:	1ae3      	subs	r3, r4, r3
 80103a2:	61fb      	str	r3, [r7, #28]
 80103a4:	6a3d      	ldr	r5, [r7, #32]
 80103a6:	109b      	asrs	r3, r3, #2
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d3c7      	bcc.n	801033c <__ssvfscanf_r+0x7ec>
 80103ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ae:	00d1      	lsls	r1, r2, #3
 80103b0:	f001 fec8 	bl	8012144 <realloc>
 80103b4:	6338      	str	r0, [r7, #48]	; 0x30
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d100      	bne.n	80103bc <__ssvfscanf_r+0x86c>
 80103ba:	e591      	b.n	800fee0 <__ssvfscanf_r+0x390>
 80103bc:	4684      	mov	ip, r0
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	69fc      	ldr	r4, [r7, #28]
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	4464      	add	r4, ip
 80103c6:	6030      	str	r0, [r6, #0]
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	e7b7      	b.n	801033c <__ssvfscanf_r+0x7ec>
 80103cc:	2500      	movs	r5, #0
 80103ce:	e7b5      	b.n	801033c <__ssvfscanf_r+0x7ec>
 80103d0:	0035      	movs	r5, r6
 80103d2:	e7b3      	b.n	801033c <__ssvfscanf_r+0x7ec>
 80103d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d000      	beq.n	80103dc <__ssvfscanf_r+0x88c>
 80103da:	e720      	b.n	801021e <__ssvfscanf_r+0x6ce>
 80103dc:	e783      	b.n	80102e6 <__ssvfscanf_r+0x796>
 80103de:	6a3b      	ldr	r3, [r7, #32]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d025      	beq.n	8010430 <__ssvfscanf_r+0x8e0>
 80103e4:	2118      	movs	r1, #24
 80103e6:	2048      	movs	r0, #72	; 0x48
 80103e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103ea:	1809      	adds	r1, r1, r0
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	19c9      	adds	r1, r1, r7
 80103f0:	781a      	ldrb	r2, [r3, #0]
 80103f2:	5c8a      	ldrb	r2, [r1, r2]
 80103f4:	2a00      	cmp	r2, #0
 80103f6:	d103      	bne.n	8010400 <__ssvfscanf_r+0x8b0>
 80103f8:	2c00      	cmp	r4, #0
 80103fa:	d000      	beq.n	80103fe <__ssvfscanf_r+0x8ae>
 80103fc:	e66c      	b.n	80100d8 <__ssvfscanf_r+0x588>
 80103fe:	e4a4      	b.n	800fd4a <__ssvfscanf_r+0x1fa>
 8010400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010404:	6852      	ldr	r2, [r2, #4]
 8010406:	3301      	adds	r3, #1
 8010408:	600b      	str	r3, [r1, #0]
 801040a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801040c:	3a01      	subs	r2, #1
 801040e:	3401      	adds	r4, #1
 8010410:	604a      	str	r2, [r1, #4]
 8010412:	429c      	cmp	r4, r3
 8010414:	d100      	bne.n	8010418 <__ssvfscanf_r+0x8c8>
 8010416:	e65f      	b.n	80100d8 <__ssvfscanf_r+0x588>
 8010418:	2a00      	cmp	r2, #0
 801041a:	dce3      	bgt.n	80103e4 <__ssvfscanf_r+0x894>
 801041c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801041e:	f002 faa5 	bl	801296c <__ssrefill_r>
 8010422:	2800      	cmp	r0, #0
 8010424:	d0de      	beq.n	80103e4 <__ssvfscanf_r+0x894>
 8010426:	e657      	b.n	80100d8 <__ssvfscanf_r+0x588>
 8010428:	0000fff6 	.word	0x0000fff6
 801042c:	20000444 	.word	0x20000444
 8010430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010432:	0032      	movs	r2, r6
 8010434:	cb20      	ldmia	r3!, {r5}
 8010436:	61fb      	str	r3, [r7, #28]
 8010438:	2380      	movs	r3, #128	; 0x80
 801043a:	401a      	ands	r2, r3
 801043c:	421e      	tst	r6, r3
 801043e:	d100      	bne.n	8010442 <__ssvfscanf_r+0x8f2>
 8010440:	e086      	b.n	8010550 <__ssvfscanf_r+0xa00>
 8010442:	2d00      	cmp	r5, #0
 8010444:	d100      	bne.n	8010448 <__ssvfscanf_r+0x8f8>
 8010446:	e480      	b.n	800fd4a <__ssvfscanf_r+0x1fa>
 8010448:	2020      	movs	r0, #32
 801044a:	f7fb fbd9 	bl	800bc00 <malloc>
 801044e:	6338      	str	r0, [r7, #48]	; 0x30
 8010450:	2800      	cmp	r0, #0
 8010452:	d100      	bne.n	8010456 <__ssvfscanf_r+0x906>
 8010454:	e452      	b.n	800fcfc <__ssvfscanf_r+0x1ac>
 8010456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010458:	6028      	str	r0, [r5, #0]
 801045a:	88de      	ldrh	r6, [r3, #6]
 801045c:	889c      	ldrh	r4, [r3, #4]
 801045e:	6818      	ldr	r0, [r3, #0]
 8010460:	42a6      	cmp	r6, r4
 8010462:	d30e      	bcc.n	8010482 <__ssvfscanf_r+0x932>
 8010464:	4bc3      	ldr	r3, [pc, #780]	; (8010774 <__ssvfscanf_r+0xc24>)
 8010466:	429c      	cmp	r4, r3
 8010468:	d900      	bls.n	801046c <__ssvfscanf_r+0x91c>
 801046a:	e542      	b.n	800fef2 <__ssvfscanf_r+0x3a2>
 801046c:	3408      	adds	r4, #8
 801046e:	b2a4      	uxth	r4, r4
 8010470:	00a1      	lsls	r1, r4, #2
 8010472:	f001 fe67 	bl	8012144 <realloc>
 8010476:	2800      	cmp	r0, #0
 8010478:	d100      	bne.n	801047c <__ssvfscanf_r+0x92c>
 801047a:	e53a      	b.n	800fef2 <__ssvfscanf_r+0x3a2>
 801047c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801047e:	6018      	str	r0, [r3, #0]
 8010480:	809c      	strh	r4, [r3, #4]
 8010482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010484:	1c72      	adds	r2, r6, #1
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	00b6      	lsls	r6, r6, #2
 801048a:	50f5      	str	r5, [r6, r3]
 801048c:	2320      	movs	r3, #32
 801048e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010490:	002e      	movs	r6, r5
 8010492:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010494:	80ca      	strh	r2, [r1, #6]
 8010496:	623b      	str	r3, [r7, #32]
 8010498:	002c      	movs	r4, r5
 801049a:	2118      	movs	r1, #24
 801049c:	2048      	movs	r0, #72	; 0x48
 801049e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104a0:	1809      	adds	r1, r1, r0
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	19c9      	adds	r1, r1, r7
 80104a6:	781a      	ldrb	r2, [r3, #0]
 80104a8:	5c8a      	ldrb	r2, [r1, r2]
 80104aa:	2a00      	cmp	r2, #0
 80104ac:	d101      	bne.n	80104b2 <__ssvfscanf_r+0x962>
 80104ae:	633d      	str	r5, [r7, #48]	; 0x30
 80104b0:	e031      	b.n	8010516 <__ssvfscanf_r+0x9c6>
 80104b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80104b6:	6852      	ldr	r2, [r2, #4]
 80104b8:	3a01      	subs	r2, #1
 80104ba:	604a      	str	r2, [r1, #4]
 80104bc:	1c5a      	adds	r2, r3, #1
 80104be:	600a      	str	r2, [r1, #0]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	1c6a      	adds	r2, r5, #1
 80104c4:	633a      	str	r2, [r7, #48]	; 0x30
 80104c6:	702b      	strb	r3, [r5, #0]
 80104c8:	2e00      	cmp	r6, #0
 80104ca:	d010      	beq.n	80104ee <__ssvfscanf_r+0x99e>
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	1b15      	subs	r5, r2, r4
 80104d0:	429d      	cmp	r5, r3
 80104d2:	d30c      	bcc.n	80104ee <__ssvfscanf_r+0x99e>
 80104d4:	005b      	lsls	r3, r3, #1
 80104d6:	0020      	movs	r0, r4
 80104d8:	0019      	movs	r1, r3
 80104da:	623b      	str	r3, [r7, #32]
 80104dc:	f001 fe32 	bl	8012144 <realloc>
 80104e0:	1e04      	subs	r4, r0, #0
 80104e2:	d101      	bne.n	80104e8 <__ssvfscanf_r+0x998>
 80104e4:	f7ff fc0a 	bl	800fcfc <__ssvfscanf_r+0x1ac>
 80104e8:	1943      	adds	r3, r0, r5
 80104ea:	633b      	str	r3, [r7, #48]	; 0x30
 80104ec:	6030      	str	r0, [r6, #0]
 80104ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104f0:	3b01      	subs	r3, #1
 80104f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d00e      	beq.n	8010516 <__ssvfscanf_r+0x9c6>
 80104f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	dc2a      	bgt.n	8010556 <__ssvfscanf_r+0xa06>
 8010500:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010502:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010504:	f002 fa32 	bl	801296c <__ssrefill_r>
 8010508:	2800      	cmp	r0, #0
 801050a:	d024      	beq.n	8010556 <__ssvfscanf_r+0xa06>
 801050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050e:	42a3      	cmp	r3, r4
 8010510:	d101      	bne.n	8010516 <__ssvfscanf_r+0x9c6>
 8010512:	f7ff fbec 	bl	800fcee <__ssvfscanf_r+0x19e>
 8010516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010518:	1b1d      	subs	r5, r3, r4
 801051a:	42a3      	cmp	r3, r4
 801051c:	d101      	bne.n	8010522 <__ssvfscanf_r+0x9d2>
 801051e:	f7ff fc14 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 8010522:	2300      	movs	r3, #0
 8010524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010526:	7013      	strb	r3, [r2, #0]
 8010528:	429e      	cmp	r6, r3
 801052a:	d009      	beq.n	8010540 <__ssvfscanf_r+0x9f0>
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	1c69      	adds	r1, r5, #1
 8010530:	428b      	cmp	r3, r1
 8010532:	d905      	bls.n	8010540 <__ssvfscanf_r+0x9f0>
 8010534:	6830      	ldr	r0, [r6, #0]
 8010536:	f001 fe05 	bl	8012144 <realloc>
 801053a:	2800      	cmp	r0, #0
 801053c:	d000      	beq.n	8010540 <__ssvfscanf_r+0x9f0>
 801053e:	6030      	str	r0, [r6, #0]
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	3301      	adds	r3, #1
 8010544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010548:	195b      	adds	r3, r3, r5
 801054a:	63bb      	str	r3, [r7, #56]	; 0x38
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	e477      	b.n	800fe40 <__ssvfscanf_r+0x2f0>
 8010550:	0016      	movs	r6, r2
 8010552:	623a      	str	r2, [r7, #32]
 8010554:	e7a0      	b.n	8010498 <__ssvfscanf_r+0x948>
 8010556:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010558:	e79f      	b.n	801049a <__ssvfscanf_r+0x94a>
 801055a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801055c:	2b00      	cmp	r3, #0
 801055e:	d101      	bne.n	8010564 <__ssvfscanf_r+0xa14>
 8010560:	3b01      	subs	r3, #1
 8010562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010564:	2210      	movs	r2, #16
 8010566:	2301      	movs	r3, #1
 8010568:	0034      	movs	r4, r6
 801056a:	4032      	ands	r2, r6
 801056c:	401c      	ands	r4, r3
 801056e:	61fa      	str	r2, [r7, #28]
 8010570:	421e      	tst	r6, r3
 8010572:	d100      	bne.n	8010576 <__ssvfscanf_r+0xa26>
 8010574:	e102      	b.n	801077c <__ssvfscanf_r+0xc2c>
 8010576:	2a00      	cmp	r2, #0
 8010578:	d000      	beq.n	801057c <__ssvfscanf_r+0xa2c>
 801057a:	e09f      	b.n	80106bc <__ssvfscanf_r+0xb6c>
 801057c:	2080      	movs	r0, #128	; 0x80
 801057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010580:	cb10      	ldmia	r3!, {r4}
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	4206      	tst	r6, r0
 8010586:	d100      	bne.n	801058a <__ssvfscanf_r+0xa3a>
 8010588:	e0a1      	b.n	80106ce <__ssvfscanf_r+0xb7e>
 801058a:	2c00      	cmp	r4, #0
 801058c:	d100      	bne.n	8010590 <__ssvfscanf_r+0xa40>
 801058e:	e4aa      	b.n	800fee6 <__ssvfscanf_r+0x396>
 8010590:	f7fb fb36 	bl	800bc00 <malloc>
 8010594:	6338      	str	r0, [r7, #48]	; 0x30
 8010596:	2800      	cmp	r0, #0
 8010598:	d100      	bne.n	801059c <__ssvfscanf_r+0xa4c>
 801059a:	e4a1      	b.n	800fee0 <__ssvfscanf_r+0x390>
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	6023      	str	r3, [r4, #0]
 80105a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105a2:	88de      	ldrh	r6, [r3, #6]
 80105a4:	889d      	ldrh	r5, [r3, #4]
 80105a6:	42ae      	cmp	r6, r5
 80105a8:	d310      	bcc.n	80105cc <__ssvfscanf_r+0xa7c>
 80105aa:	4b72      	ldr	r3, [pc, #456]	; (8010774 <__ssvfscanf_r+0xc24>)
 80105ac:	429d      	cmp	r5, r3
 80105ae:	d900      	bls.n	80105b2 <__ssvfscanf_r+0xa62>
 80105b0:	e496      	b.n	800fee0 <__ssvfscanf_r+0x390>
 80105b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b4:	3508      	adds	r5, #8
 80105b6:	b2ad      	uxth	r5, r5
 80105b8:	6818      	ldr	r0, [r3, #0]
 80105ba:	00a9      	lsls	r1, r5, #2
 80105bc:	f001 fdc2 	bl	8012144 <realloc>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d100      	bne.n	80105c6 <__ssvfscanf_r+0xa76>
 80105c4:	e48c      	b.n	800fee0 <__ssvfscanf_r+0x390>
 80105c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105c8:	6018      	str	r0, [r3, #0]
 80105ca:	809d      	strh	r5, [r3, #4]
 80105cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ce:	1c72      	adds	r2, r6, #1
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	00b6      	lsls	r6, r6, #2
 80105d4:	50f4      	str	r4, [r6, r3]
 80105d6:	2320      	movs	r3, #32
 80105d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105da:	0025      	movs	r5, r4
 80105dc:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80105de:	80ca      	strh	r2, [r1, #6]
 80105e0:	613b      	str	r3, [r7, #16]
 80105e2:	2300      	movs	r3, #0
 80105e4:	623b      	str	r3, [r7, #32]
 80105e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105e8:	4a63      	ldr	r2, [pc, #396]	; (8010778 <__ssvfscanf_r+0xc28>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	5cd3      	ldrb	r3, [r2, r3]
 80105f0:	2208      	movs	r2, #8
 80105f2:	4213      	tst	r3, r2
 80105f4:	d149      	bne.n	801068a <__ssvfscanf_r+0xb3a>
 80105f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d046      	beq.n	801068a <__ssvfscanf_r+0xb3a>
 80105fc:	f7fc feb2 	bl	800d364 <__locale_mb_cur_max>
 8010600:	6a3b      	ldr	r3, [r7, #32]
 8010602:	4298      	cmp	r0, r3
 8010604:	d101      	bne.n	801060a <__ssvfscanf_r+0xaba>
 8010606:	f7ff fb72 	bl	800fcee <__ssvfscanf_r+0x19e>
 801060a:	6a3a      	ldr	r2, [r7, #32]
 801060c:	2048      	movs	r0, #72	; 0x48
 801060e:	1c56      	adds	r6, r2, #1
 8010610:	228c      	movs	r2, #140	; 0x8c
 8010612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010614:	0052      	lsls	r2, r2, #1
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	1812      	adds	r2, r2, r0
 801061a:	7819      	ldrb	r1, [r3, #0]
 801061c:	6a38      	ldr	r0, [r7, #32]
 801061e:	19d2      	adds	r2, r2, r7
 8010620:	5411      	strb	r1, [r2, r0]
 8010622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010624:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010626:	6852      	ldr	r2, [r2, #4]
 8010628:	3301      	adds	r3, #1
 801062a:	600b      	str	r3, [r1, #0]
 801062c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062e:	3a01      	subs	r2, #1
 8010630:	604a      	str	r2, [r1, #4]
 8010632:	2b03      	cmp	r3, #3
 8010634:	d102      	bne.n	801063c <__ssvfscanf_r+0xaec>
 8010636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010638:	2b04      	cmp	r3, #4
 801063a:	d007      	beq.n	801064c <__ssvfscanf_r+0xafc>
 801063c:	2048      	movs	r0, #72	; 0x48
 801063e:	2310      	movs	r3, #16
 8010640:	181b      	adds	r3, r3, r0
 8010642:	2208      	movs	r2, #8
 8010644:	2100      	movs	r1, #0
 8010646:	19d8      	adds	r0, r3, r7
 8010648:	f7fc fe00 	bl	800d24c <memset>
 801064c:	2148      	movs	r1, #72	; 0x48
 801064e:	2310      	movs	r3, #16
 8010650:	228c      	movs	r2, #140	; 0x8c
 8010652:	185b      	adds	r3, r3, r1
 8010654:	0052      	lsls	r2, r2, #1
 8010656:	19db      	adds	r3, r3, r7
 8010658:	1852      	adds	r2, r2, r1
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	0021      	movs	r1, r4
 801065e:	0033      	movs	r3, r6
 8010660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010662:	19d2      	adds	r2, r2, r7
 8010664:	f002 f882 	bl	801276c <_mbrtowc_r>
 8010668:	0003      	movs	r3, r0
 801066a:	62b8      	str	r0, [r7, #40]	; 0x28
 801066c:	3301      	adds	r3, #1
 801066e:	d101      	bne.n	8010674 <__ssvfscanf_r+0xb24>
 8010670:	f7ff fb3d 	bl	800fcee <__ssvfscanf_r+0x19e>
 8010674:	2800      	cmp	r0, #0
 8010676:	d12f      	bne.n	80106d8 <__ssvfscanf_r+0xb88>
 8010678:	6020      	str	r0, [r4, #0]
 801067a:	6820      	ldr	r0, [r4, #0]
 801067c:	f002 f894 	bl	80127a8 <iswspace>
 8010680:	6238      	str	r0, [r7, #32]
 8010682:	2800      	cmp	r0, #0
 8010684:	d04a      	beq.n	801071c <__ssvfscanf_r+0xbcc>
 8010686:	2e00      	cmp	r6, #0
 8010688:	d13c      	bne.n	8010704 <__ssvfscanf_r+0xbb4>
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d000      	beq.n	8010692 <__ssvfscanf_r+0xb42>
 8010690:	e640      	b.n	8010314 <__ssvfscanf_r+0x7c4>
 8010692:	6023      	str	r3, [r4, #0]
 8010694:	2d00      	cmp	r5, #0
 8010696:	d100      	bne.n	801069a <__ssvfscanf_r+0xb4a>
 8010698:	e639      	b.n	801030e <__ssvfscanf_r+0x7be>
 801069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801069c:	693a      	ldr	r2, [r7, #16]
 801069e:	1ae4      	subs	r4, r4, r3
 80106a0:	10a3      	asrs	r3, r4, #2
 80106a2:	3301      	adds	r3, #1
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d800      	bhi.n	80106aa <__ssvfscanf_r+0xb5a>
 80106a8:	e631      	b.n	801030e <__ssvfscanf_r+0x7be>
 80106aa:	6828      	ldr	r0, [r5, #0]
 80106ac:	1d21      	adds	r1, r4, #4
 80106ae:	f001 fd49 	bl	8012144 <realloc>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d100      	bne.n	80106b8 <__ssvfscanf_r+0xb68>
 80106b6:	e62a      	b.n	801030e <__ssvfscanf_r+0x7be>
 80106b8:	6028      	str	r0, [r5, #0]
 80106ba:	e628      	b.n	801030e <__ssvfscanf_r+0x7be>
 80106bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106be:	60fb      	str	r3, [r7, #12]
 80106c0:	2300      	movs	r3, #0
 80106c2:	001d      	movs	r5, r3
 80106c4:	613b      	str	r3, [r7, #16]
 80106c6:	633b      	str	r3, [r7, #48]	; 0x30
 80106c8:	334c      	adds	r3, #76	; 0x4c
 80106ca:	18fc      	adds	r4, r7, r3
 80106cc:	e789      	b.n	80105e2 <__ssvfscanf_r+0xa92>
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	001d      	movs	r5, r3
 80106d2:	613b      	str	r3, [r7, #16]
 80106d4:	633b      	str	r3, [r7, #48]	; 0x30
 80106d6:	e784      	b.n	80105e2 <__ssvfscanf_r+0xa92>
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	623e      	str	r6, [r7, #32]
 80106dc:	3302      	adds	r3, #2
 80106de:	d1cc      	bne.n	801067a <__ssvfscanf_r+0xb2a>
 80106e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	dd00      	ble.n	80106ea <__ssvfscanf_r+0xb9a>
 80106e8:	e77d      	b.n	80105e6 <__ssvfscanf_r+0xa96>
 80106ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106ee:	f002 f93d 	bl	801296c <__ssrefill_r>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d100      	bne.n	80106f8 <__ssvfscanf_r+0xba8>
 80106f6:	e776      	b.n	80105e6 <__ssvfscanf_r+0xa96>
 80106f8:	6a3b      	ldr	r3, [r7, #32]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <__ssvfscanf_r+0xbb2>
 80106fe:	f7ff faf6 	bl	800fcee <__ssvfscanf_r+0x19e>
 8010702:	e7c2      	b.n	801068a <__ssvfscanf_r+0xb3a>
 8010704:	238c      	movs	r3, #140	; 0x8c
 8010706:	2248      	movs	r2, #72	; 0x48
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	189b      	adds	r3, r3, r2
 801070c:	3e01      	subs	r6, #1
 801070e:	19db      	adds	r3, r3, r7
 8010710:	5cf1      	ldrb	r1, [r6, r3]
 8010712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010714:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010716:	f002 f8ed 	bl	80128f4 <_sungetc_r>
 801071a:	e7b4      	b.n	8010686 <__ssvfscanf_r+0xb36>
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	199b      	adds	r3, r3, r6
 8010720:	63bb      	str	r3, [r7, #56]	; 0x38
 8010722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010724:	2b03      	cmp	r3, #3
 8010726:	d102      	bne.n	801072e <__ssvfscanf_r+0xbde>
 8010728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801072a:	2b04      	cmp	r3, #4
 801072c:	d002      	beq.n	8010734 <__ssvfscanf_r+0xbe4>
 801072e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010730:	3b01      	subs	r3, #1
 8010732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010734:	69fb      	ldr	r3, [r7, #28]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1d2      	bne.n	80106e0 <__ssvfscanf_r+0xb90>
 801073a:	3404      	adds	r4, #4
 801073c:	2d00      	cmp	r5, #0
 801073e:	d016      	beq.n	801076e <__ssvfscanf_r+0xc1e>
 8010740:	69fa      	ldr	r2, [r7, #28]
 8010742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010744:	623a      	str	r2, [r7, #32]
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	1ae6      	subs	r6, r4, r3
 801074a:	10b3      	asrs	r3, r6, #2
 801074c:	4293      	cmp	r3, r2
 801074e:	d3c7      	bcc.n	80106e0 <__ssvfscanf_r+0xb90>
 8010750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010752:	00d1      	lsls	r1, r2, #3
 8010754:	f001 fcf6 	bl	8012144 <realloc>
 8010758:	6338      	str	r0, [r7, #48]	; 0x30
 801075a:	2800      	cmp	r0, #0
 801075c:	d101      	bne.n	8010762 <__ssvfscanf_r+0xc12>
 801075e:	f7ff fbbf 	bl	800fee0 <__ssvfscanf_r+0x390>
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	1984      	adds	r4, r0, r6
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	6028      	str	r0, [r5, #0]
 801076a:	613b      	str	r3, [r7, #16]
 801076c:	e7b8      	b.n	80106e0 <__ssvfscanf_r+0xb90>
 801076e:	623d      	str	r5, [r7, #32]
 8010770:	e7b6      	b.n	80106e0 <__ssvfscanf_r+0xb90>
 8010772:	46c0      	nop			; (mov r8, r8)
 8010774:	0000fff6 	.word	0x0000fff6
 8010778:	080159a1 	.word	0x080159a1
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d01c      	beq.n	80107bc <__ssvfscanf_r+0xc6c>
 8010782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010784:	49bf      	ldr	r1, [pc, #764]	; (8010a84 <__ssvfscanf_r+0xf34>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	781a      	ldrb	r2, [r3, #0]
 801078a:	5c8a      	ldrb	r2, [r1, r2]
 801078c:	2108      	movs	r1, #8
 801078e:	420a      	tst	r2, r1
 8010790:	d000      	beq.n	8010794 <__ssvfscanf_r+0xc44>
 8010792:	e4a1      	b.n	80100d8 <__ssvfscanf_r+0x588>
 8010794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010798:	6852      	ldr	r2, [r2, #4]
 801079a:	3301      	adds	r3, #1
 801079c:	600b      	str	r3, [r1, #0]
 801079e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107a0:	3a01      	subs	r2, #1
 80107a2:	3401      	adds	r4, #1
 80107a4:	604a      	str	r2, [r1, #4]
 80107a6:	429c      	cmp	r4, r3
 80107a8:	d100      	bne.n	80107ac <__ssvfscanf_r+0xc5c>
 80107aa:	e495      	b.n	80100d8 <__ssvfscanf_r+0x588>
 80107ac:	2a00      	cmp	r2, #0
 80107ae:	dce8      	bgt.n	8010782 <__ssvfscanf_r+0xc32>
 80107b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107b2:	f002 f8db 	bl	801296c <__ssrefill_r>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d0e3      	beq.n	8010782 <__ssvfscanf_r+0xc32>
 80107ba:	e48d      	b.n	80100d8 <__ssvfscanf_r+0x588>
 80107bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107be:	0032      	movs	r2, r6
 80107c0:	cb10      	ldmia	r3!, {r4}
 80107c2:	61fb      	str	r3, [r7, #28]
 80107c4:	2380      	movs	r3, #128	; 0x80
 80107c6:	401a      	ands	r2, r3
 80107c8:	421e      	tst	r6, r3
 80107ca:	d039      	beq.n	8010840 <__ssvfscanf_r+0xcf0>
 80107cc:	2c00      	cmp	r4, #0
 80107ce:	d101      	bne.n	80107d4 <__ssvfscanf_r+0xc84>
 80107d0:	f7ff fabb 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 80107d4:	2020      	movs	r0, #32
 80107d6:	f7fb fa13 	bl	800bc00 <malloc>
 80107da:	6338      	str	r0, [r7, #48]	; 0x30
 80107dc:	2800      	cmp	r0, #0
 80107de:	d101      	bne.n	80107e4 <__ssvfscanf_r+0xc94>
 80107e0:	f7ff fa8c 	bl	800fcfc <__ssvfscanf_r+0x1ac>
 80107e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e6:	6020      	str	r0, [r4, #0]
 80107e8:	88de      	ldrh	r6, [r3, #6]
 80107ea:	889d      	ldrh	r5, [r3, #4]
 80107ec:	6818      	ldr	r0, [r3, #0]
 80107ee:	42ae      	cmp	r6, r5
 80107f0:	d310      	bcc.n	8010814 <__ssvfscanf_r+0xcc4>
 80107f2:	4ba5      	ldr	r3, [pc, #660]	; (8010a88 <__ssvfscanf_r+0xf38>)
 80107f4:	429d      	cmp	r5, r3
 80107f6:	d901      	bls.n	80107fc <__ssvfscanf_r+0xcac>
 80107f8:	f7ff fb7b 	bl	800fef2 <__ssvfscanf_r+0x3a2>
 80107fc:	3508      	adds	r5, #8
 80107fe:	b2ad      	uxth	r5, r5
 8010800:	00a9      	lsls	r1, r5, #2
 8010802:	f001 fc9f 	bl	8012144 <realloc>
 8010806:	2800      	cmp	r0, #0
 8010808:	d101      	bne.n	801080e <__ssvfscanf_r+0xcbe>
 801080a:	f7ff fb72 	bl	800fef2 <__ssvfscanf_r+0x3a2>
 801080e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010810:	6018      	str	r0, [r3, #0]
 8010812:	809d      	strh	r5, [r3, #4]
 8010814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010816:	1c72      	adds	r2, r6, #1
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	00b6      	lsls	r6, r6, #2
 801081c:	50f4      	str	r4, [r6, r3]
 801081e:	2320      	movs	r3, #32
 8010820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010822:	0026      	movs	r6, r4
 8010824:	80ca      	strh	r2, [r1, #6]
 8010826:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010828:	633b      	str	r3, [r7, #48]	; 0x30
 801082a:	0025      	movs	r5, r4
 801082c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801082e:	4995      	ldr	r1, [pc, #596]	; (8010a84 <__ssvfscanf_r+0xf34>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	781a      	ldrb	r2, [r3, #0]
 8010834:	5c8a      	ldrb	r2, [r1, r2]
 8010836:	2108      	movs	r1, #8
 8010838:	420a      	tst	r2, r1
 801083a:	d004      	beq.n	8010846 <__ssvfscanf_r+0xcf6>
 801083c:	623c      	str	r4, [r7, #32]
 801083e:	e031      	b.n	80108a4 <__ssvfscanf_r+0xd54>
 8010840:	0016      	movs	r6, r2
 8010842:	633a      	str	r2, [r7, #48]	; 0x30
 8010844:	e7f1      	b.n	801082a <__ssvfscanf_r+0xcda>
 8010846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801084a:	6852      	ldr	r2, [r2, #4]
 801084c:	3a01      	subs	r2, #1
 801084e:	604a      	str	r2, [r1, #4]
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	600a      	str	r2, [r1, #0]
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	1c62      	adds	r2, r4, #1
 8010858:	623a      	str	r2, [r7, #32]
 801085a:	7023      	strb	r3, [r4, #0]
 801085c:	2e00      	cmp	r6, #0
 801085e:	d010      	beq.n	8010882 <__ssvfscanf_r+0xd32>
 8010860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010862:	1b54      	subs	r4, r2, r5
 8010864:	429c      	cmp	r4, r3
 8010866:	d30c      	bcc.n	8010882 <__ssvfscanf_r+0xd32>
 8010868:	005b      	lsls	r3, r3, #1
 801086a:	0028      	movs	r0, r5
 801086c:	0019      	movs	r1, r3
 801086e:	633b      	str	r3, [r7, #48]	; 0x30
 8010870:	f001 fc68 	bl	8012144 <realloc>
 8010874:	1e05      	subs	r5, r0, #0
 8010876:	d101      	bne.n	801087c <__ssvfscanf_r+0xd2c>
 8010878:	f7ff fa40 	bl	800fcfc <__ssvfscanf_r+0x1ac>
 801087c:	1903      	adds	r3, r0, r4
 801087e:	623b      	str	r3, [r7, #32]
 8010880:	6030      	str	r0, [r6, #0]
 8010882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010884:	3b01      	subs	r3, #1
 8010886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00b      	beq.n	80108a4 <__ssvfscanf_r+0xd54>
 801088c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	dd01      	ble.n	8010898 <__ssvfscanf_r+0xd48>
 8010894:	6a3c      	ldr	r4, [r7, #32]
 8010896:	e7c9      	b.n	801082c <__ssvfscanf_r+0xcdc>
 8010898:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801089a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801089c:	f002 f866 	bl	801296c <__ssrefill_r>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d0f7      	beq.n	8010894 <__ssvfscanf_r+0xd44>
 80108a4:	2300      	movs	r3, #0
 80108a6:	6a3a      	ldr	r2, [r7, #32]
 80108a8:	7013      	strb	r3, [r2, #0]
 80108aa:	1b55      	subs	r5, r2, r5
 80108ac:	2e00      	cmp	r6, #0
 80108ae:	d009      	beq.n	80108c4 <__ssvfscanf_r+0xd74>
 80108b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b2:	1c69      	adds	r1, r5, #1
 80108b4:	428b      	cmp	r3, r1
 80108b6:	d905      	bls.n	80108c4 <__ssvfscanf_r+0xd74>
 80108b8:	6830      	ldr	r0, [r6, #0]
 80108ba:	f001 fc43 	bl	8012144 <realloc>
 80108be:	2800      	cmp	r0, #0
 80108c0:	d000      	beq.n	80108c4 <__ssvfscanf_r+0xd74>
 80108c2:	6030      	str	r0, [r6, #0]
 80108c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c6:	195b      	adds	r3, r3, r5
 80108c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80108ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108cc:	3301      	adds	r3, #1
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108d0:	e63c      	b.n	801054c <__ssvfscanf_r+0x9fc>
 80108d2:	22ae      	movs	r2, #174	; 0xae
 80108d4:	2100      	movs	r1, #0
 80108d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d8:	0052      	lsls	r2, r2, #1
 80108da:	3b01      	subs	r3, #1
 80108dc:	6239      	str	r1, [r7, #32]
 80108de:	4293      	cmp	r3, r2
 80108e0:	d906      	bls.n	80108f0 <__ssvfscanf_r+0xda0>
 80108e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e4:	3b5e      	subs	r3, #94	; 0x5e
 80108e6:	3bff      	subs	r3, #255	; 0xff
 80108e8:	623b      	str	r3, [r7, #32]
 80108ea:	235e      	movs	r3, #94	; 0x5e
 80108ec:	33ff      	adds	r3, #255	; 0xff
 80108ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108f0:	24d8      	movs	r4, #216	; 0xd8
 80108f2:	2300      	movs	r3, #0
 80108f4:	2248      	movs	r2, #72	; 0x48
 80108f6:	0124      	lsls	r4, r4, #4
 80108f8:	4334      	orrs	r4, r6
 80108fa:	2680      	movs	r6, #128	; 0x80
 80108fc:	61fb      	str	r3, [r7, #28]
 80108fe:	3319      	adds	r3, #25
 8010900:	33ff      	adds	r3, #255	; 0xff
 8010902:	189b      	adds	r3, r3, r2
 8010904:	19dd      	adds	r5, r3, r7
 8010906:	00b6      	lsls	r6, r6, #2
 8010908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	7813      	ldrb	r3, [r2, #0]
 801090e:	2b39      	cmp	r3, #57	; 0x39
 8010910:	d80f      	bhi.n	8010932 <__ssvfscanf_r+0xde2>
 8010912:	2b2a      	cmp	r3, #42	; 0x2a
 8010914:	d91b      	bls.n	801094e <__ssvfscanf_r+0xdfe>
 8010916:	0018      	movs	r0, r3
 8010918:	382b      	subs	r0, #43	; 0x2b
 801091a:	280e      	cmp	r0, #14
 801091c:	d817      	bhi.n	801094e <__ssvfscanf_r+0xdfe>
 801091e:	f7ef fbf9 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010922:	168f      	.short	0x168f
 8010924:	5416168f 	.word	0x5416168f
 8010928:	80808080 	.word	0x80808080
 801092c:	87808080 	.word	0x87808080
 8010930:	87          	.byte	0x87
 8010931:	00          	.byte	0x00
 8010932:	2b66      	cmp	r3, #102	; 0x66
 8010934:	d83a      	bhi.n	80109ac <__ssvfscanf_r+0xe5c>
 8010936:	2b60      	cmp	r3, #96	; 0x60
 8010938:	d803      	bhi.n	8010942 <__ssvfscanf_r+0xdf2>
 801093a:	2b46      	cmp	r3, #70	; 0x46
 801093c:	d805      	bhi.n	801094a <__ssvfscanf_r+0xdfa>
 801093e:	2b40      	cmp	r3, #64	; 0x40
 8010940:	d905      	bls.n	801094e <__ssvfscanf_r+0xdfe>
 8010942:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010944:	290a      	cmp	r1, #10
 8010946:	dc71      	bgt.n	8010a2c <__ssvfscanf_r+0xedc>
 8010948:	e001      	b.n	801094e <__ssvfscanf_r+0xdfe>
 801094a:	2b58      	cmp	r3, #88	; 0x58
 801094c:	d030      	beq.n	80109b0 <__ssvfscanf_r+0xe60>
 801094e:	05e3      	lsls	r3, r4, #23
 8010950:	d515      	bpl.n	801097e <__ssvfscanf_r+0xe2e>
 8010952:	238c      	movs	r3, #140	; 0x8c
 8010954:	2248      	movs	r2, #72	; 0x48
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	189b      	adds	r3, r3, r2
 801095a:	19db      	adds	r3, r3, r7
 801095c:	429d      	cmp	r5, r3
 801095e:	d905      	bls.n	801096c <__ssvfscanf_r+0xe1c>
 8010960:	3d01      	subs	r5, #1
 8010962:	7829      	ldrb	r1, [r5, #0]
 8010964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010966:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010968:	f001 ffc4 	bl	80128f4 <_sungetc_r>
 801096c:	238c      	movs	r3, #140	; 0x8c
 801096e:	2248      	movs	r2, #72	; 0x48
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	189b      	adds	r3, r3, r2
 8010974:	19db      	adds	r3, r3, r7
 8010976:	429d      	cmp	r5, r3
 8010978:	d101      	bne.n	801097e <__ssvfscanf_r+0xe2e>
 801097a:	f7ff f9e6 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 801097e:	2310      	movs	r3, #16
 8010980:	0022      	movs	r2, r4
 8010982:	401a      	ands	r2, r3
 8010984:	421c      	tst	r4, r3
 8010986:	d171      	bne.n	8010a6c <__ssvfscanf_r+0xf1c>
 8010988:	218c      	movs	r1, #140	; 0x8c
 801098a:	2048      	movs	r0, #72	; 0x48
 801098c:	0049      	lsls	r1, r1, #1
 801098e:	1809      	adds	r1, r1, r0
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	697e      	ldr	r6, [r7, #20]
 8010994:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010996:	19c9      	adds	r1, r1, r7
 8010998:	702a      	strb	r2, [r5, #0]
 801099a:	47b0      	blx	r6
 801099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099e:	1d1e      	adds	r6, r3, #4
 80109a0:	06a3      	lsls	r3, r4, #26
 80109a2:	d559      	bpl.n	8010a58 <__ssvfscanf_r+0xf08>
 80109a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	6018      	str	r0, [r3, #0]
 80109aa:	e05b      	b.n	8010a64 <__ssvfscanf_r+0xf14>
 80109ac:	2b78      	cmp	r3, #120	; 0x78
 80109ae:	d1ce      	bne.n	801094e <__ssvfscanf_r+0xdfe>
 80109b0:	21c0      	movs	r1, #192	; 0xc0
 80109b2:	00c9      	lsls	r1, r1, #3
 80109b4:	4021      	ands	r1, r4
 80109b6:	42b1      	cmp	r1, r6
 80109b8:	d1c9      	bne.n	801094e <__ssvfscanf_r+0xdfe>
 80109ba:	4934      	ldr	r1, [pc, #208]	; (8010a8c <__ssvfscanf_r+0xf3c>)
 80109bc:	4021      	ands	r1, r4
 80109be:	24a0      	movs	r4, #160	; 0xa0
 80109c0:	00e4      	lsls	r4, r4, #3
 80109c2:	430c      	orrs	r4, r1
 80109c4:	2110      	movs	r1, #16
 80109c6:	6279      	str	r1, [r7, #36]	; 0x24
 80109c8:	e00b      	b.n	80109e2 <__ssvfscanf_r+0xe92>
 80109ca:	0521      	lsls	r1, r4, #20
 80109cc:	d509      	bpl.n	80109e2 <__ssvfscanf_r+0xe92>
 80109ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109d0:	2900      	cmp	r1, #0
 80109d2:	d102      	bne.n	80109da <__ssvfscanf_r+0xe8a>
 80109d4:	3108      	adds	r1, #8
 80109d6:	4334      	orrs	r4, r6
 80109d8:	6279      	str	r1, [r7, #36]	; 0x24
 80109da:	0561      	lsls	r1, r4, #21
 80109dc:	d504      	bpl.n	80109e8 <__ssvfscanf_r+0xe98>
 80109de:	492c      	ldr	r1, [pc, #176]	; (8010a90 <__ssvfscanf_r+0xf40>)
 80109e0:	400c      	ands	r4, r1
 80109e2:	702b      	strb	r3, [r5, #0]
 80109e4:	3501      	adds	r5, #1
 80109e6:	e00c      	b.n	8010a02 <__ssvfscanf_r+0xeb2>
 80109e8:	4b2a      	ldr	r3, [pc, #168]	; (8010a94 <__ssvfscanf_r+0xf44>)
 80109ea:	401c      	ands	r4, r3
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d004      	beq.n	80109fc <__ssvfscanf_r+0xeac>
 80109f2:	3b01      	subs	r3, #1
 80109f4:	623b      	str	r3, [r7, #32]
 80109f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f8:	3301      	adds	r3, #1
 80109fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	3301      	adds	r3, #1
 8010a00:	61fb      	str	r3, [r7, #28]
 8010a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	3b01      	subs	r3, #1
 8010a0a:	604b      	str	r3, [r1, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	dd1c      	ble.n	8010a4a <__ssvfscanf_r+0xefa>
 8010a10:	3201      	adds	r2, #1
 8010a12:	600a      	str	r2, [r1, #0]
 8010a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a16:	3b01      	subs	r3, #1
 8010a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d000      	beq.n	8010a20 <__ssvfscanf_r+0xed0>
 8010a1e:	e773      	b.n	8010908 <__ssvfscanf_r+0xdb8>
 8010a20:	e795      	b.n	801094e <__ssvfscanf_r+0xdfe>
 8010a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a24:	491c      	ldr	r1, [pc, #112]	; (8010a98 <__ssvfscanf_r+0xf48>)
 8010a26:	0040      	lsls	r0, r0, #1
 8010a28:	5e41      	ldrsh	r1, [r0, r1]
 8010a2a:	6279      	str	r1, [r7, #36]	; 0x24
 8010a2c:	491b      	ldr	r1, [pc, #108]	; (8010a9c <__ssvfscanf_r+0xf4c>)
 8010a2e:	e7d7      	b.n	80109e0 <__ssvfscanf_r+0xe90>
 8010a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a32:	4919      	ldr	r1, [pc, #100]	; (8010a98 <__ssvfscanf_r+0xf48>)
 8010a34:	0040      	lsls	r0, r0, #1
 8010a36:	5e41      	ldrsh	r1, [r0, r1]
 8010a38:	6279      	str	r1, [r7, #36]	; 0x24
 8010a3a:	2908      	cmp	r1, #8
 8010a3c:	dcf6      	bgt.n	8010a2c <__ssvfscanf_r+0xedc>
 8010a3e:	e786      	b.n	801094e <__ssvfscanf_r+0xdfe>
 8010a40:	2180      	movs	r1, #128	; 0x80
 8010a42:	420c      	tst	r4, r1
 8010a44:	d083      	beq.n	801094e <__ssvfscanf_r+0xdfe>
 8010a46:	438c      	bics	r4, r1
 8010a48:	e7cb      	b.n	80109e2 <__ssvfscanf_r+0xe92>
 8010a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a4e:	f001 ff8d 	bl	801296c <__ssrefill_r>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	d0de      	beq.n	8010a14 <__ssvfscanf_r+0xec4>
 8010a56:	e77a      	b.n	801094e <__ssvfscanf_r+0xdfe>
 8010a58:	2308      	movs	r3, #8
 8010a5a:	421c      	tst	r4, r3
 8010a5c:	d020      	beq.n	8010aa0 <__ssvfscanf_r+0xf50>
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	7018      	strb	r0, [r3, #0]
 8010a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a66:	633e      	str	r6, [r7, #48]	; 0x30
 8010a68:	3301      	adds	r3, #1
 8010a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a6c:	238c      	movs	r3, #140	; 0x8c
 8010a6e:	2248      	movs	r2, #72	; 0x48
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	189b      	adds	r3, r3, r2
 8010a74:	19db      	adds	r3, r3, r7
 8010a76:	1aed      	subs	r5, r5, r3
 8010a78:	69fb      	ldr	r3, [r7, #28]
 8010a7a:	18ed      	adds	r5, r5, r3
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	195b      	adds	r3, r3, r5
 8010a80:	f7ff f92d 	bl	800fcde <__ssvfscanf_r+0x18e>
 8010a84:	080159a1 	.word	0x080159a1
 8010a88:	0000fff6 	.word	0x0000fff6
 8010a8c:	fffffdff 	.word	0xfffffdff
 8010a90:	fffffa7f 	.word	0xfffffa7f
 8010a94:	fffffc7f 	.word	0xfffffc7f
 8010a98:	08015cce 	.word	0x08015cce
 8010a9c:	fffff47f 	.word	0xfffff47f
 8010aa0:	0763      	lsls	r3, r4, #29
 8010aa2:	d503      	bpl.n	8010aac <__ssvfscanf_r+0xf5c>
 8010aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	8018      	strh	r0, [r3, #0]
 8010aaa:	e7db      	b.n	8010a64 <__ssvfscanf_r+0xf14>
 8010aac:	2301      	movs	r3, #1
 8010aae:	0022      	movs	r2, r4
 8010ab0:	401a      	ands	r2, r3
 8010ab2:	421c      	tst	r4, r3
 8010ab4:	d000      	beq.n	8010ab8 <__ssvfscanf_r+0xf68>
 8010ab6:	e775      	b.n	80109a4 <__ssvfscanf_r+0xe54>
 8010ab8:	07a4      	lsls	r4, r4, #30
 8010aba:	d400      	bmi.n	8010abe <__ssvfscanf_r+0xf6e>
 8010abc:	e772      	b.n	80109a4 <__ssvfscanf_r+0xe54>
 8010abe:	4ba8      	ldr	r3, [pc, #672]	; (8010d60 <__ssvfscanf_r+0x1210>)
 8010ac0:	6979      	ldr	r1, [r7, #20]
 8010ac2:	4299      	cmp	r1, r3
 8010ac4:	d10c      	bne.n	8010ae0 <__ssvfscanf_r+0xf90>
 8010ac6:	218c      	movs	r1, #140	; 0x8c
 8010ac8:	2048      	movs	r0, #72	; 0x48
 8010aca:	0049      	lsls	r1, r1, #1
 8010acc:	1809      	adds	r1, r1, r0
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ad2:	19c9      	adds	r1, r1, r7
 8010ad4:	f001 fe46 	bl	8012764 <_strtoull_r>
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	c303      	stmia	r3!, {r0, r1}
 8010ade:	e7c1      	b.n	8010a64 <__ssvfscanf_r+0xf14>
 8010ae0:	218c      	movs	r1, #140	; 0x8c
 8010ae2:	2048      	movs	r0, #72	; 0x48
 8010ae4:	0049      	lsls	r1, r1, #1
 8010ae6:	1809      	adds	r1, r1, r0
 8010ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010aec:	19c9      	adds	r1, r1, r7
 8010aee:	f001 fd87 	bl	8012600 <_strtoll_r>
 8010af2:	e7f1      	b.n	8010ad8 <__ssvfscanf_r+0xf88>
 8010af4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010af6:	f000 fb9f 	bl	8011238 <_localeconv_r>
 8010afa:	22ae      	movs	r2, #174	; 0xae
 8010afc:	2100      	movs	r1, #0
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	0052      	lsls	r2, r2, #1
 8010b02:	603b      	str	r3, [r7, #0]
 8010b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b06:	60f9      	str	r1, [r7, #12]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d906      	bls.n	8010b1c <__ssvfscanf_r+0xfcc>
 8010b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b10:	3b5e      	subs	r3, #94	; 0x5e
 8010b12:	3bff      	subs	r3, #255	; 0xff
 8010b14:	60fb      	str	r3, [r7, #12]
 8010b16:	235e      	movs	r3, #94	; 0x5e
 8010b18:	33ff      	adds	r3, #255	; 0xff
 8010b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b1c:	23f0      	movs	r3, #240	; 0xf0
 8010b1e:	00db      	lsls	r3, r3, #3
 8010b20:	431e      	orrs	r6, r3
 8010b22:	238c      	movs	r3, #140	; 0x8c
 8010b24:	2248      	movs	r2, #72	; 0x48
 8010b26:	2400      	movs	r4, #0
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	189b      	adds	r3, r3, r2
 8010b2c:	623c      	str	r4, [r7, #32]
 8010b2e:	607c      	str	r4, [r7, #4]
 8010b30:	60bc      	str	r4, [r7, #8]
 8010b32:	61fc      	str	r4, [r7, #28]
 8010b34:	613c      	str	r4, [r7, #16]
 8010b36:	19dd      	adds	r5, r3, r7
 8010b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	781a      	ldrb	r2, [r3, #0]
 8010b3e:	0010      	movs	r0, r2
 8010b40:	382b      	subs	r0, #43	; 0x2b
 8010b42:	284e      	cmp	r0, #78	; 0x4e
 8010b44:	d900      	bls.n	8010b48 <__ssvfscanf_r+0xff8>
 8010b46:	e133      	b.n	8010db0 <__ssvfscanf_r+0x1260>
 8010b48:	f7ef faee 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010b4c:	0132009b 	.word	0x0132009b
 8010b50:	0132009b 	.word	0x0132009b
 8010b54:	004f0132 	.word	0x004f0132
 8010b58:	00720072 	.word	0x00720072
 8010b5c:	00720072 	.word	0x00720072
 8010b60:	00720072 	.word	0x00720072
 8010b64:	00720072 	.word	0x00720072
 8010b68:	01320072 	.word	0x01320072
 8010b6c:	01320132 	.word	0x01320132
 8010b70:	01320132 	.word	0x01320132
 8010b74:	01320132 	.word	0x01320132
 8010b78:	007b00bc 	.word	0x007b00bc
 8010b7c:	007b007b 	.word	0x007b007b
 8010b80:	00f7012f 	.word	0x00f7012f
 8010b84:	01320132 	.word	0x01320132
 8010b88:	013200e3 	.word	0x013200e3
 8010b8c:	01320132 	.word	0x01320132
 8010b90:	00a00132 	.word	0x00a00132
 8010b94:	01120132 	.word	0x01120132
 8010b98:	01320132 	.word	0x01320132
 8010b9c:	01010132 	.word	0x01010132
 8010ba0:	01320132 	.word	0x01320132
 8010ba4:	00820132 	.word	0x00820132
 8010ba8:	01320105 	.word	0x01320105
 8010bac:	01320132 	.word	0x01320132
 8010bb0:	01320132 	.word	0x01320132
 8010bb4:	01320132 	.word	0x01320132
 8010bb8:	007b00bc 	.word	0x007b00bc
 8010bbc:	007b007b 	.word	0x007b007b
 8010bc0:	00f7012f 	.word	0x00f7012f
 8010bc4:	01320132 	.word	0x01320132
 8010bc8:	013200e3 	.word	0x013200e3
 8010bcc:	01320132 	.word	0x01320132
 8010bd0:	00a00132 	.word	0x00a00132
 8010bd4:	01120132 	.word	0x01120132
 8010bd8:	01320132 	.word	0x01320132
 8010bdc:	01010132 	.word	0x01010132
 8010be0:	01320132 	.word	0x01320132
 8010be4:	00820132 	.word	0x00820132
 8010be8:	0105      	.short	0x0105
 8010bea:	05f1      	lsls	r1, r6, #23
 8010bec:	d520      	bpl.n	8010c30 <__ssvfscanf_r+0x10e0>
 8010bee:	2280      	movs	r2, #128	; 0x80
 8010bf0:	4396      	bics	r6, r2
 8010bf2:	69fa      	ldr	r2, [r7, #28]
 8010bf4:	3201      	adds	r2, #1
 8010bf6:	61fa      	str	r2, [r7, #28]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	2a00      	cmp	r2, #0
 8010bfc:	d004      	beq.n	8010c08 <__ssvfscanf_r+0x10b8>
 8010bfe:	3a01      	subs	r2, #1
 8010c00:	60fa      	str	r2, [r7, #12]
 8010c02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c04:	3201      	adds	r2, #1
 8010c06:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010c0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c0c:	3a01      	subs	r2, #1
 8010c0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c12:	3201      	adds	r2, #1
 8010c14:	63ba      	str	r2, [r7, #56]	; 0x38
 8010c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c18:	6852      	ldr	r2, [r2, #4]
 8010c1a:	3a01      	subs	r2, #1
 8010c1c:	604a      	str	r2, [r1, #4]
 8010c1e:	2a00      	cmp	r2, #0
 8010c20:	dc00      	bgt.n	8010c24 <__ssvfscanf_r+0x10d4>
 8010c22:	e0d6      	b.n	8010dd2 <__ssvfscanf_r+0x1282>
 8010c24:	3301      	adds	r3, #1
 8010c26:	600b      	str	r3, [r1, #0]
 8010c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d184      	bne.n	8010b38 <__ssvfscanf_r+0xfe8>
 8010c2e:	e057      	b.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c30:	6a39      	ldr	r1, [r7, #32]
 8010c32:	1909      	adds	r1, r1, r4
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d153      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c38:	494a      	ldr	r1, [pc, #296]	; (8010d64 <__ssvfscanf_r+0x1214>)
 8010c3a:	400e      	ands	r6, r1
 8010c3c:	702a      	strb	r2, [r5, #0]
 8010c3e:	3501      	adds	r5, #1
 8010c40:	e7e2      	b.n	8010c08 <__ssvfscanf_r+0x10b8>
 8010c42:	0531      	lsls	r1, r6, #20
 8010c44:	d54c      	bpl.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c46:	6a39      	ldr	r1, [r7, #32]
 8010c48:	1909      	adds	r1, r1, r4
 8010c4a:	2900      	cmp	r1, #0
 8010c4c:	d040      	beq.n	8010cd0 <__ssvfscanf_r+0x1180>
 8010c4e:	e047      	b.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c50:	2198      	movs	r1, #152	; 0x98
 8010c52:	2080      	movs	r0, #128	; 0x80
 8010c54:	0109      	lsls	r1, r1, #4
 8010c56:	4031      	ands	r1, r6
 8010c58:	0040      	lsls	r0, r0, #1
 8010c5a:	4281      	cmp	r1, r0
 8010c5c:	d140      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c5e:	69f9      	ldr	r1, [r7, #28]
 8010c60:	2901      	cmp	r1, #1
 8010c62:	d13d      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c64:	2080      	movs	r0, #128	; 0x80
 8010c66:	4940      	ldr	r1, [pc, #256]	; (8010d68 <__ssvfscanf_r+0x1218>)
 8010c68:	0100      	lsls	r0, r0, #4
 8010c6a:	400e      	ands	r6, r1
 8010c6c:	3132      	adds	r1, #50	; 0x32
 8010c6e:	31ff      	adds	r1, #255	; 0xff
 8010c70:	7029      	strb	r1, [r5, #0]
 8010c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c74:	4306      	orrs	r6, r0
 8010c76:	3901      	subs	r1, #1
 8010c78:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010c7a:	3501      	adds	r5, #1
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	61f9      	str	r1, [r7, #28]
 8010c80:	e7dc      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010c82:	2180      	movs	r1, #128	; 0x80
 8010c84:	420e      	tst	r6, r1
 8010c86:	d02b      	beq.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010c88:	438e      	bics	r6, r1
 8010c8a:	e7d7      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010c8c:	6a39      	ldr	r1, [r7, #32]
 8010c8e:	2900      	cmp	r1, #0
 8010c90:	d10d      	bne.n	8010cae <__ssvfscanf_r+0x115e>
 8010c92:	69f9      	ldr	r1, [r7, #28]
 8010c94:	2900      	cmp	r1, #0
 8010c96:	d10e      	bne.n	8010cb6 <__ssvfscanf_r+0x1166>
 8010c98:	21e0      	movs	r1, #224	; 0xe0
 8010c9a:	0030      	movs	r0, r6
 8010c9c:	00c9      	lsls	r1, r1, #3
 8010c9e:	4008      	ands	r0, r1
 8010ca0:	4288      	cmp	r0, r1
 8010ca2:	d108      	bne.n	8010cb6 <__ssvfscanf_r+0x1166>
 8010ca4:	4931      	ldr	r1, [pc, #196]	; (8010d6c <__ssvfscanf_r+0x121c>)
 8010ca6:	400e      	ands	r6, r1
 8010ca8:	2101      	movs	r1, #1
 8010caa:	6239      	str	r1, [r7, #32]
 8010cac:	e7c6      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010cae:	6a39      	ldr	r1, [r7, #32]
 8010cb0:	2902      	cmp	r1, #2
 8010cb2:	d100      	bne.n	8010cb6 <__ssvfscanf_r+0x1166>
 8010cb4:	e089      	b.n	8010dca <__ssvfscanf_r+0x127a>
 8010cb6:	2c01      	cmp	r4, #1
 8010cb8:	d001      	beq.n	8010cbe <__ssvfscanf_r+0x116e>
 8010cba:	2c04      	cmp	r4, #4
 8010cbc:	d110      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010cbe:	3401      	adds	r4, #1
 8010cc0:	b2e4      	uxtb	r4, r4
 8010cc2:	e7bb      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010cc4:	0531      	lsls	r1, r6, #20
 8010cc6:	d508      	bpl.n	8010cda <__ssvfscanf_r+0x118a>
 8010cc8:	6a39      	ldr	r1, [r7, #32]
 8010cca:	1909      	adds	r1, r1, r4
 8010ccc:	2900      	cmp	r1, #0
 8010cce:	d104      	bne.n	8010cda <__ssvfscanf_r+0x118a>
 8010cd0:	4824      	ldr	r0, [pc, #144]	; (8010d64 <__ssvfscanf_r+0x1214>)
 8010cd2:	000c      	movs	r4, r1
 8010cd4:	4006      	ands	r6, r0
 8010cd6:	6239      	str	r1, [r7, #32]
 8010cd8:	e7b0      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010cda:	6a39      	ldr	r1, [r7, #32]
 8010cdc:	2901      	cmp	r1, #1
 8010cde:	d076      	beq.n	8010dce <__ssvfscanf_r+0x127e>
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d001      	beq.n	8010cea <__ssvfscanf_r+0x119a>
 8010ce6:	4b20      	ldr	r3, [pc, #128]	; (8010d68 <__ssvfscanf_r+0x1218>)
 8010ce8:	401e      	ands	r6, r3
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	3b01      	subs	r3, #1
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d877      	bhi.n	8010de2 <__ssvfscanf_r+0x1292>
 8010cf2:	238c      	movs	r3, #140	; 0x8c
 8010cf4:	2248      	movs	r2, #72	; 0x48
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	189b      	adds	r3, r3, r2
 8010cfa:	19db      	adds	r3, r3, r7
 8010cfc:	429d      	cmp	r5, r3
 8010cfe:	d801      	bhi.n	8010d04 <__ssvfscanf_r+0x11b4>
 8010d00:	f7ff f823 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 8010d04:	3d01      	subs	r5, #1
 8010d06:	7829      	ldrb	r1, [r5, #0]
 8010d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d0c:	f001 fdf2 	bl	80128f4 <_sungetc_r>
 8010d10:	e7ef      	b.n	8010cf2 <__ssvfscanf_r+0x11a2>
 8010d12:	2c00      	cmp	r4, #0
 8010d14:	d10c      	bne.n	8010d30 <__ssvfscanf_r+0x11e0>
 8010d16:	69f9      	ldr	r1, [r7, #28]
 8010d18:	2900      	cmp	r1, #0
 8010d1a:	d1e4      	bne.n	8010ce6 <__ssvfscanf_r+0x1196>
 8010d1c:	21e0      	movs	r1, #224	; 0xe0
 8010d1e:	0030      	movs	r0, r6
 8010d20:	00c9      	lsls	r1, r1, #3
 8010d22:	4008      	ands	r0, r1
 8010d24:	4288      	cmp	r0, r1
 8010d26:	d1e0      	bne.n	8010cea <__ssvfscanf_r+0x119a>
 8010d28:	4910      	ldr	r1, [pc, #64]	; (8010d6c <__ssvfscanf_r+0x121c>)
 8010d2a:	3401      	adds	r4, #1
 8010d2c:	400e      	ands	r6, r1
 8010d2e:	e785      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010d30:	20fd      	movs	r0, #253	; 0xfd
 8010d32:	1ee1      	subs	r1, r4, #3
 8010d34:	4201      	tst	r1, r0
 8010d36:	d1d3      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d38:	e7c1      	b.n	8010cbe <__ssvfscanf_r+0x116e>
 8010d3a:	0531      	lsls	r1, r6, #20
 8010d3c:	d503      	bpl.n	8010d46 <__ssvfscanf_r+0x11f6>
 8010d3e:	6a39      	ldr	r1, [r7, #32]
 8010d40:	1909      	adds	r1, r1, r4
 8010d42:	2900      	cmp	r1, #0
 8010d44:	d0c4      	beq.n	8010cd0 <__ssvfscanf_r+0x1180>
 8010d46:	2c02      	cmp	r4, #2
 8010d48:	d1ca      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d4a:	2403      	movs	r4, #3
 8010d4c:	e776      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010d4e:	2c06      	cmp	r4, #6
 8010d50:	d1c6      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d52:	2407      	movs	r4, #7
 8010d54:	e772      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010d56:	2c07      	cmp	r4, #7
 8010d58:	d1c2      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d5a:	2408      	movs	r4, #8
 8010d5c:	e76e      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010d5e:	46c0      	nop			; (mov r8, r8)
 8010d60:	0800cf11 	.word	0x0800cf11
 8010d64:	fffffe7f 	.word	0xfffffe7f
 8010d68:	fffffeff 	.word	0xfffffeff
 8010d6c:	fffff87f 	.word	0xfffff87f
 8010d70:	0531      	lsls	r1, r6, #20
 8010d72:	d5b5      	bpl.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d74:	21a0      	movs	r1, #160	; 0xa0
 8010d76:	2080      	movs	r0, #128	; 0x80
 8010d78:	00c9      	lsls	r1, r1, #3
 8010d7a:	00c0      	lsls	r0, r0, #3
 8010d7c:	4031      	ands	r1, r6
 8010d7e:	4281      	cmp	r1, r0
 8010d80:	d004      	beq.n	8010d8c <__ssvfscanf_r+0x123c>
 8010d82:	4206      	tst	r6, r0
 8010d84:	d0ac      	beq.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010d86:	69f9      	ldr	r1, [r7, #28]
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	d0ae      	beq.n	8010cea <__ssvfscanf_r+0x119a>
 8010d8c:	2180      	movs	r1, #128	; 0x80
 8010d8e:	0089      	lsls	r1, r1, #2
 8010d90:	420e      	tst	r6, r1
 8010d92:	d104      	bne.n	8010d9e <__ssvfscanf_r+0x124e>
 8010d94:	69f9      	ldr	r1, [r7, #28]
 8010d96:	6938      	ldr	r0, [r7, #16]
 8010d98:	607d      	str	r5, [r7, #4]
 8010d9a:	1a09      	subs	r1, r1, r0
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	20c0      	movs	r0, #192	; 0xc0
 8010da0:	4973      	ldr	r1, [pc, #460]	; (8010f70 <__ssvfscanf_r+0x1420>)
 8010da2:	0040      	lsls	r0, r0, #1
 8010da4:	400e      	ands	r6, r1
 8010da6:	4306      	orrs	r6, r0
 8010da8:	e768      	b.n	8010c7c <__ssvfscanf_r+0x112c>
 8010daa:	0531      	lsls	r1, r6, #20
 8010dac:	d5e2      	bpl.n	8010d74 <__ssvfscanf_r+0x1224>
 8010dae:	e74a      	b.n	8010c46 <__ssvfscanf_r+0x10f6>
 8010db0:	6839      	ldr	r1, [r7, #0]
 8010db2:	7809      	ldrb	r1, [r1, #0]
 8010db4:	4291      	cmp	r1, r2
 8010db6:	d193      	bne.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010db8:	2180      	movs	r1, #128	; 0x80
 8010dba:	0089      	lsls	r1, r1, #2
 8010dbc:	420e      	tst	r6, r1
 8010dbe:	d08f      	beq.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010dc0:	496c      	ldr	r1, [pc, #432]	; (8010f74 <__ssvfscanf_r+0x1424>)
 8010dc2:	400e      	ands	r6, r1
 8010dc4:	69f9      	ldr	r1, [r7, #28]
 8010dc6:	6139      	str	r1, [r7, #16]
 8010dc8:	e738      	b.n	8010c3c <__ssvfscanf_r+0x10ec>
 8010dca:	2103      	movs	r1, #3
 8010dcc:	e76d      	b.n	8010caa <__ssvfscanf_r+0x115a>
 8010dce:	2102      	movs	r1, #2
 8010dd0:	e76b      	b.n	8010caa <__ssvfscanf_r+0x115a>
 8010dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010dd6:	f001 fdc9 	bl	801296c <__ssrefill_r>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d100      	bne.n	8010de0 <__ssvfscanf_r+0x1290>
 8010dde:	e723      	b.n	8010c28 <__ssvfscanf_r+0x10d8>
 8010de0:	e77e      	b.n	8010ce0 <__ssvfscanf_r+0x1190>
 8010de2:	1e63      	subs	r3, r4, #1
 8010de4:	2b06      	cmp	r3, #6
 8010de6:	d825      	bhi.n	8010e34 <__ssvfscanf_r+0x12e4>
 8010de8:	2c02      	cmp	r4, #2
 8010dea:	d837      	bhi.n	8010e5c <__ssvfscanf_r+0x130c>
 8010dec:	238c      	movs	r3, #140	; 0x8c
 8010dee:	2248      	movs	r2, #72	; 0x48
 8010df0:	005b      	lsls	r3, r3, #1
 8010df2:	189b      	adds	r3, r3, r2
 8010df4:	19db      	adds	r3, r3, r7
 8010df6:	429d      	cmp	r5, r3
 8010df8:	d801      	bhi.n	8010dfe <__ssvfscanf_r+0x12ae>
 8010dfa:	f7fe ffa6 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 8010dfe:	3d01      	subs	r5, #1
 8010e00:	7829      	ldrb	r1, [r5, #0]
 8010e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e06:	f001 fd75 	bl	80128f4 <_sungetc_r>
 8010e0a:	e7ef      	b.n	8010dec <__ssvfscanf_r+0x129c>
 8010e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e10:	3b01      	subs	r3, #1
 8010e12:	7819      	ldrb	r1, [r3, #0]
 8010e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e18:	f001 fd6c 	bl	80128f4 <_sungetc_r>
 8010e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e1e:	6a3a      	ldr	r2, [r7, #32]
 8010e20:	189b      	adds	r3, r3, r2
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	2b03      	cmp	r3, #3
 8010e26:	d8f1      	bhi.n	8010e0c <__ssvfscanf_r+0x12bc>
 8010e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2a:	3c03      	subs	r4, #3
 8010e2c:	b2e4      	uxtb	r4, r4
 8010e2e:	1b1b      	subs	r3, r3, r4
 8010e30:	1b2d      	subs	r5, r5, r4
 8010e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e34:	05f3      	lsls	r3, r6, #23
 8010e36:	d52f      	bpl.n	8010e98 <__ssvfscanf_r+0x1348>
 8010e38:	0573      	lsls	r3, r6, #21
 8010e3a:	d514      	bpl.n	8010e66 <__ssvfscanf_r+0x1316>
 8010e3c:	238c      	movs	r3, #140	; 0x8c
 8010e3e:	2248      	movs	r2, #72	; 0x48
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	189b      	adds	r3, r3, r2
 8010e44:	19db      	adds	r3, r3, r7
 8010e46:	429d      	cmp	r5, r3
 8010e48:	d801      	bhi.n	8010e4e <__ssvfscanf_r+0x12fe>
 8010e4a:	f7fe ff7e 	bl	800fd4a <__ssvfscanf_r+0x1fa>
 8010e4e:	3d01      	subs	r5, #1
 8010e50:	7829      	ldrb	r1, [r5, #0]
 8010e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e56:	f001 fd4d 	bl	80128f4 <_sungetc_r>
 8010e5a:	e7ef      	b.n	8010e3c <__ssvfscanf_r+0x12ec>
 8010e5c:	1b63      	subs	r3, r4, r5
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	63fd      	str	r5, [r7, #60]	; 0x3c
 8010e62:	623b      	str	r3, [r7, #32]
 8010e64:	e7da      	b.n	8010e1c <__ssvfscanf_r+0x12cc>
 8010e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e68:	1e6c      	subs	r4, r5, #1
 8010e6a:	7821      	ldrb	r1, [r4, #0]
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e70:	2965      	cmp	r1, #101	; 0x65
 8010e72:	d00a      	beq.n	8010e8a <__ssvfscanf_r+0x133a>
 8010e74:	2945      	cmp	r1, #69	; 0x45
 8010e76:	d008      	beq.n	8010e8a <__ssvfscanf_r+0x133a>
 8010e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e7c:	f001 fd3a 	bl	80128f4 <_sungetc_r>
 8010e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e82:	1eac      	subs	r4, r5, #2
 8010e84:	3b02      	subs	r3, #2
 8010e86:	7821      	ldrb	r1, [r4, #0]
 8010e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010e8a:	0025      	movs	r5, r4
 8010e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e90:	f001 fd30 	bl	80128f4 <_sungetc_r>
 8010e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8010e98:	2310      	movs	r3, #16
 8010e9a:	0032      	movs	r2, r6
 8010e9c:	401a      	ands	r2, r3
 8010e9e:	421e      	tst	r6, r3
 8010ea0:	d001      	beq.n	8010ea6 <__ssvfscanf_r+0x1356>
 8010ea2:	f7fe fe71 	bl	800fb88 <__ssvfscanf_r+0x38>
 8010ea6:	23c0      	movs	r3, #192	; 0xc0
 8010ea8:	2180      	movs	r1, #128	; 0x80
 8010eaa:	00db      	lsls	r3, r3, #3
 8010eac:	702a      	strb	r2, [r5, #0]
 8010eae:	4033      	ands	r3, r6
 8010eb0:	00c9      	lsls	r1, r1, #3
 8010eb2:	428b      	cmp	r3, r1
 8010eb4:	d11f      	bne.n	8010ef6 <__ssvfscanf_r+0x13a6>
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	69fa      	ldr	r2, [r7, #28]
 8010eba:	69f9      	ldr	r1, [r7, #28]
 8010ebc:	1a9a      	subs	r2, r3, r2
 8010ebe:	428b      	cmp	r3, r1
 8010ec0:	d125      	bne.n	8010f0e <__ssvfscanf_r+0x13be>
 8010ec2:	238c      	movs	r3, #140	; 0x8c
 8010ec4:	2148      	movs	r1, #72	; 0x48
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	185b      	adds	r3, r3, r1
 8010eca:	19d9      	adds	r1, r3, r7
 8010ecc:	2200      	movs	r2, #0
 8010ece:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ed0:	f7fb fef0 	bl	800ccb4 <_strtod_r>
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	0004      	movs	r4, r0
 8010ed8:	3304      	adds	r3, #4
 8010eda:	000d      	movs	r5, r1
 8010edc:	623b      	str	r3, [r7, #32]
 8010ede:	07f3      	lsls	r3, r6, #31
 8010ee0:	d523      	bpl.n	8010f2a <__ssvfscanf_r+0x13da>
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	601c      	str	r4, [r3, #0]
 8010ee8:	605d      	str	r5, [r3, #4]
 8010eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eec:	3301      	adds	r3, #1
 8010eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ef0:	6a3b      	ldr	r3, [r7, #32]
 8010ef2:	f7fe ffa5 	bl	800fe40 <__ssvfscanf_r+0x2f0>
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d0e2      	beq.n	8010ec2 <__ssvfscanf_r+0x1372>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f00:	1c59      	adds	r1, r3, #1
 8010f02:	230a      	movs	r3, #10
 8010f04:	f7fb ff72 	bl	800cdec <_strtol_r>
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	687d      	ldr	r5, [r7, #4]
 8010f0c:	1ac2      	subs	r2, r0, r3
 8010f0e:	2148      	movs	r1, #72	; 0x48
 8010f10:	4b19      	ldr	r3, [pc, #100]	; (8010f78 <__ssvfscanf_r+0x1428>)
 8010f12:	185b      	adds	r3, r3, r1
 8010f14:	19db      	adds	r3, r3, r7
 8010f16:	429d      	cmp	r5, r3
 8010f18:	d302      	bcc.n	8010f20 <__ssvfscanf_r+0x13d0>
 8010f1a:	4b18      	ldr	r3, [pc, #96]	; (8010f7c <__ssvfscanf_r+0x142c>)
 8010f1c:	185b      	adds	r3, r3, r1
 8010f1e:	19dd      	adds	r5, r3, r7
 8010f20:	0028      	movs	r0, r5
 8010f22:	4917      	ldr	r1, [pc, #92]	; (8010f80 <__ssvfscanf_r+0x1430>)
 8010f24:	f7fc f8fc 	bl	800d120 <sprintf>
 8010f28:	e7cb      	b.n	8010ec2 <__ssvfscanf_r+0x1372>
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f30:	07b6      	lsls	r6, r6, #30
 8010f32:	d4d8      	bmi.n	8010ee6 <__ssvfscanf_r+0x1396>
 8010f34:	0002      	movs	r2, r0
 8010f36:	000b      	movs	r3, r1
 8010f38:	f7f1 f9dc 	bl	80022f4 <__aeabi_dcmpun>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	d005      	beq.n	8010f4c <__ssvfscanf_r+0x13fc>
 8010f40:	4810      	ldr	r0, [pc, #64]	; (8010f84 <__ssvfscanf_r+0x1434>)
 8010f42:	f7fc fabf 	bl	800d4c4 <nanf>
 8010f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f48:	6018      	str	r0, [r3, #0]
 8010f4a:	e7ce      	b.n	8010eea <__ssvfscanf_r+0x139a>
 8010f4c:	0020      	movs	r0, r4
 8010f4e:	0029      	movs	r1, r5
 8010f50:	f7f1 fa7a 	bl	8002448 <__aeabi_d2f>
 8010f54:	e7f7      	b.n	8010f46 <__ssvfscanf_r+0x13f6>
 8010f56:	00a3      	lsls	r3, r4, #2
 8010f58:	18ed      	adds	r5, r5, r3
 8010f5a:	682b      	ldr	r3, [r5, #0]
 8010f5c:	3401      	adds	r4, #1
 8010f5e:	6818      	ldr	r0, [r3, #0]
 8010f60:	f7fa fe58 	bl	800bc14 <free>
 8010f64:	2200      	movs	r2, #0
 8010f66:	682b      	ldr	r3, [r5, #0]
 8010f68:	601a      	str	r2, [r3, #0]
 8010f6a:	f7fe ffc3 	bl	800fef4 <__ssvfscanf_r+0x3a4>
 8010f6e:	46c0      	nop			; (mov r8, r8)
 8010f70:	fffff07f 	.word	0xfffff07f
 8010f74:	fffffd7f 	.word	0xfffffd7f
 8010f78:	0000026b 	.word	0x0000026b
 8010f7c:	0000026a 	.word	0x0000026a
 8010f80:	08015cc8 	.word	0x08015cc8
 8010f84:	08015d2b 	.word	0x08015d2b

08010f88 <_fclose_r>:
 8010f88:	b570      	push	{r4, r5, r6, lr}
 8010f8a:	0005      	movs	r5, r0
 8010f8c:	1e0c      	subs	r4, r1, #0
 8010f8e:	d102      	bne.n	8010f96 <_fclose_r+0xe>
 8010f90:	2600      	movs	r6, #0
 8010f92:	0030      	movs	r0, r6
 8010f94:	bd70      	pop	{r4, r5, r6, pc}
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d004      	beq.n	8010fa4 <_fclose_r+0x1c>
 8010f9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d101      	bne.n	8010fa4 <_fclose_r+0x1c>
 8010fa0:	f7fc f856 	bl	800d050 <__sinit>
 8010fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fa6:	07db      	lsls	r3, r3, #31
 8010fa8:	d405      	bmi.n	8010fb6 <_fclose_r+0x2e>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	059b      	lsls	r3, r3, #22
 8010fae:	d402      	bmi.n	8010fb6 <_fclose_r+0x2e>
 8010fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fb2:	f7fc fa6b 	bl	800d48c <__retarget_lock_acquire_recursive>
 8010fb6:	220c      	movs	r2, #12
 8010fb8:	5ea3      	ldrsh	r3, [r4, r2]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d109      	bne.n	8010fd2 <_fclose_r+0x4a>
 8010fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	0016      	movs	r6, r2
 8010fc4:	401e      	ands	r6, r3
 8010fc6:	421a      	tst	r2, r3
 8010fc8:	d1e2      	bne.n	8010f90 <_fclose_r+0x8>
 8010fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fcc:	f7fc fa5f 	bl	800d48e <__retarget_lock_release_recursive>
 8010fd0:	e7df      	b.n	8010f92 <_fclose_r+0xa>
 8010fd2:	0021      	movs	r1, r4
 8010fd4:	0028      	movs	r0, r5
 8010fd6:	f000 f837 	bl	8011048 <__sflush_r>
 8010fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010fdc:	0006      	movs	r6, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d006      	beq.n	8010ff0 <_fclose_r+0x68>
 8010fe2:	0028      	movs	r0, r5
 8010fe4:	69e1      	ldr	r1, [r4, #28]
 8010fe6:	4798      	blx	r3
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	da01      	bge.n	8010ff0 <_fclose_r+0x68>
 8010fec:	2601      	movs	r6, #1
 8010fee:	4276      	negs	r6, r6
 8010ff0:	89a3      	ldrh	r3, [r4, #12]
 8010ff2:	061b      	lsls	r3, r3, #24
 8010ff4:	d503      	bpl.n	8010ffe <_fclose_r+0x76>
 8010ff6:	0028      	movs	r0, r5
 8010ff8:	6921      	ldr	r1, [r4, #16]
 8010ffa:	f7fc facf 	bl	800d59c <_free_r>
 8010ffe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011000:	2900      	cmp	r1, #0
 8011002:	d008      	beq.n	8011016 <_fclose_r+0x8e>
 8011004:	0023      	movs	r3, r4
 8011006:	3340      	adds	r3, #64	; 0x40
 8011008:	4299      	cmp	r1, r3
 801100a:	d002      	beq.n	8011012 <_fclose_r+0x8a>
 801100c:	0028      	movs	r0, r5
 801100e:	f7fc fac5 	bl	800d59c <_free_r>
 8011012:	2300      	movs	r3, #0
 8011014:	6323      	str	r3, [r4, #48]	; 0x30
 8011016:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011018:	2900      	cmp	r1, #0
 801101a:	d004      	beq.n	8011026 <_fclose_r+0x9e>
 801101c:	0028      	movs	r0, r5
 801101e:	f7fc fabd 	bl	800d59c <_free_r>
 8011022:	2300      	movs	r3, #0
 8011024:	6463      	str	r3, [r4, #68]	; 0x44
 8011026:	f7fc f803 	bl	800d030 <__sfp_lock_acquire>
 801102a:	2300      	movs	r3, #0
 801102c:	81a3      	strh	r3, [r4, #12]
 801102e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011030:	07db      	lsls	r3, r3, #31
 8011032:	d402      	bmi.n	801103a <_fclose_r+0xb2>
 8011034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011036:	f7fc fa2a 	bl	800d48e <__retarget_lock_release_recursive>
 801103a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801103c:	f7fc fa25 	bl	800d48a <__retarget_lock_close_recursive>
 8011040:	f7fb fffe 	bl	800d040 <__sfp_lock_release>
 8011044:	e7a5      	b.n	8010f92 <_fclose_r+0xa>
	...

08011048 <__sflush_r>:
 8011048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801104a:	230c      	movs	r3, #12
 801104c:	5eca      	ldrsh	r2, [r1, r3]
 801104e:	000c      	movs	r4, r1
 8011050:	0005      	movs	r5, r0
 8011052:	b291      	uxth	r1, r2
 8011054:	0713      	lsls	r3, r2, #28
 8011056:	d464      	bmi.n	8011122 <__sflush_r+0xda>
 8011058:	2380      	movs	r3, #128	; 0x80
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	4313      	orrs	r3, r2
 801105e:	6862      	ldr	r2, [r4, #4]
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	2a00      	cmp	r2, #0
 8011064:	dc04      	bgt.n	8011070 <__sflush_r+0x28>
 8011066:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011068:	2a00      	cmp	r2, #0
 801106a:	dc01      	bgt.n	8011070 <__sflush_r+0x28>
 801106c:	2000      	movs	r0, #0
 801106e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011070:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8011072:	2f00      	cmp	r7, #0
 8011074:	d0fa      	beq.n	801106c <__sflush_r+0x24>
 8011076:	2200      	movs	r2, #0
 8011078:	2080      	movs	r0, #128	; 0x80
 801107a:	682e      	ldr	r6, [r5, #0]
 801107c:	602a      	str	r2, [r5, #0]
 801107e:	001a      	movs	r2, r3
 8011080:	0140      	lsls	r0, r0, #5
 8011082:	69e1      	ldr	r1, [r4, #28]
 8011084:	4002      	ands	r2, r0
 8011086:	4203      	tst	r3, r0
 8011088:	d038      	beq.n	80110fc <__sflush_r+0xb4>
 801108a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	075b      	lsls	r3, r3, #29
 8011090:	d506      	bpl.n	80110a0 <__sflush_r+0x58>
 8011092:	6863      	ldr	r3, [r4, #4]
 8011094:	1ac0      	subs	r0, r0, r3
 8011096:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011098:	2b00      	cmp	r3, #0
 801109a:	d001      	beq.n	80110a0 <__sflush_r+0x58>
 801109c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801109e:	1ac0      	subs	r0, r0, r3
 80110a0:	0002      	movs	r2, r0
 80110a2:	2300      	movs	r3, #0
 80110a4:	0028      	movs	r0, r5
 80110a6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80110a8:	69e1      	ldr	r1, [r4, #28]
 80110aa:	47b8      	blx	r7
 80110ac:	89a2      	ldrh	r2, [r4, #12]
 80110ae:	1c43      	adds	r3, r0, #1
 80110b0:	d106      	bne.n	80110c0 <__sflush_r+0x78>
 80110b2:	6829      	ldr	r1, [r5, #0]
 80110b4:	291d      	cmp	r1, #29
 80110b6:	d830      	bhi.n	801111a <__sflush_r+0xd2>
 80110b8:	4b2c      	ldr	r3, [pc, #176]	; (801116c <__sflush_r+0x124>)
 80110ba:	410b      	asrs	r3, r1
 80110bc:	07db      	lsls	r3, r3, #31
 80110be:	d42c      	bmi.n	801111a <__sflush_r+0xd2>
 80110c0:	4b2b      	ldr	r3, [pc, #172]	; (8011170 <__sflush_r+0x128>)
 80110c2:	4013      	ands	r3, r2
 80110c4:	2200      	movs	r2, #0
 80110c6:	6062      	str	r2, [r4, #4]
 80110c8:	6922      	ldr	r2, [r4, #16]
 80110ca:	b21b      	sxth	r3, r3
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	6022      	str	r2, [r4, #0]
 80110d0:	04db      	lsls	r3, r3, #19
 80110d2:	d505      	bpl.n	80110e0 <__sflush_r+0x98>
 80110d4:	1c43      	adds	r3, r0, #1
 80110d6:	d102      	bne.n	80110de <__sflush_r+0x96>
 80110d8:	682b      	ldr	r3, [r5, #0]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d100      	bne.n	80110e0 <__sflush_r+0x98>
 80110de:	6520      	str	r0, [r4, #80]	; 0x50
 80110e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80110e2:	602e      	str	r6, [r5, #0]
 80110e4:	2900      	cmp	r1, #0
 80110e6:	d0c1      	beq.n	801106c <__sflush_r+0x24>
 80110e8:	0023      	movs	r3, r4
 80110ea:	3340      	adds	r3, #64	; 0x40
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d002      	beq.n	80110f6 <__sflush_r+0xae>
 80110f0:	0028      	movs	r0, r5
 80110f2:	f7fc fa53 	bl	800d59c <_free_r>
 80110f6:	2000      	movs	r0, #0
 80110f8:	6320      	str	r0, [r4, #48]	; 0x30
 80110fa:	e7b8      	b.n	801106e <__sflush_r+0x26>
 80110fc:	2301      	movs	r3, #1
 80110fe:	0028      	movs	r0, r5
 8011100:	47b8      	blx	r7
 8011102:	1c43      	adds	r3, r0, #1
 8011104:	d1c2      	bne.n	801108c <__sflush_r+0x44>
 8011106:	682b      	ldr	r3, [r5, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d0bf      	beq.n	801108c <__sflush_r+0x44>
 801110c:	2b1d      	cmp	r3, #29
 801110e:	d001      	beq.n	8011114 <__sflush_r+0xcc>
 8011110:	2b16      	cmp	r3, #22
 8011112:	d101      	bne.n	8011118 <__sflush_r+0xd0>
 8011114:	602e      	str	r6, [r5, #0]
 8011116:	e7a9      	b.n	801106c <__sflush_r+0x24>
 8011118:	89a2      	ldrh	r2, [r4, #12]
 801111a:	2340      	movs	r3, #64	; 0x40
 801111c:	4313      	orrs	r3, r2
 801111e:	81a3      	strh	r3, [r4, #12]
 8011120:	e7a5      	b.n	801106e <__sflush_r+0x26>
 8011122:	6926      	ldr	r6, [r4, #16]
 8011124:	2e00      	cmp	r6, #0
 8011126:	d0a1      	beq.n	801106c <__sflush_r+0x24>
 8011128:	6827      	ldr	r7, [r4, #0]
 801112a:	6026      	str	r6, [r4, #0]
 801112c:	1bbb      	subs	r3, r7, r6
 801112e:	9301      	str	r3, [sp, #4]
 8011130:	2300      	movs	r3, #0
 8011132:	0789      	lsls	r1, r1, #30
 8011134:	d100      	bne.n	8011138 <__sflush_r+0xf0>
 8011136:	6963      	ldr	r3, [r4, #20]
 8011138:	60a3      	str	r3, [r4, #8]
 801113a:	9b01      	ldr	r3, [sp, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	dc00      	bgt.n	8011142 <__sflush_r+0xfa>
 8011140:	e794      	b.n	801106c <__sflush_r+0x24>
 8011142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011144:	0032      	movs	r2, r6
 8011146:	001f      	movs	r7, r3
 8011148:	0028      	movs	r0, r5
 801114a:	9b01      	ldr	r3, [sp, #4]
 801114c:	69e1      	ldr	r1, [r4, #28]
 801114e:	47b8      	blx	r7
 8011150:	2800      	cmp	r0, #0
 8011152:	dc06      	bgt.n	8011162 <__sflush_r+0x11a>
 8011154:	2340      	movs	r3, #64	; 0x40
 8011156:	2001      	movs	r0, #1
 8011158:	89a2      	ldrh	r2, [r4, #12]
 801115a:	4240      	negs	r0, r0
 801115c:	4313      	orrs	r3, r2
 801115e:	81a3      	strh	r3, [r4, #12]
 8011160:	e785      	b.n	801106e <__sflush_r+0x26>
 8011162:	9b01      	ldr	r3, [sp, #4]
 8011164:	1836      	adds	r6, r6, r0
 8011166:	1a1b      	subs	r3, r3, r0
 8011168:	9301      	str	r3, [sp, #4]
 801116a:	e7e6      	b.n	801113a <__sflush_r+0xf2>
 801116c:	dfbffffe 	.word	0xdfbffffe
 8011170:	fffff7ff 	.word	0xfffff7ff

08011174 <_fflush_r>:
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	0005      	movs	r5, r0
 8011178:	000c      	movs	r4, r1
 801117a:	2800      	cmp	r0, #0
 801117c:	d004      	beq.n	8011188 <_fflush_r+0x14>
 801117e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <_fflush_r+0x14>
 8011184:	f7fb ff64 	bl	800d050 <__sinit>
 8011188:	220c      	movs	r2, #12
 801118a:	5ea3      	ldrsh	r3, [r4, r2]
 801118c:	1e1e      	subs	r6, r3, #0
 801118e:	d015      	beq.n	80111bc <_fflush_r+0x48>
 8011190:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011192:	07d2      	lsls	r2, r2, #31
 8011194:	d404      	bmi.n	80111a0 <_fflush_r+0x2c>
 8011196:	059b      	lsls	r3, r3, #22
 8011198:	d402      	bmi.n	80111a0 <_fflush_r+0x2c>
 801119a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801119c:	f7fc f976 	bl	800d48c <__retarget_lock_acquire_recursive>
 80111a0:	0021      	movs	r1, r4
 80111a2:	0028      	movs	r0, r5
 80111a4:	f7ff ff50 	bl	8011048 <__sflush_r>
 80111a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111aa:	0006      	movs	r6, r0
 80111ac:	07db      	lsls	r3, r3, #31
 80111ae:	d405      	bmi.n	80111bc <_fflush_r+0x48>
 80111b0:	89a3      	ldrh	r3, [r4, #12]
 80111b2:	059b      	lsls	r3, r3, #22
 80111b4:	d402      	bmi.n	80111bc <_fflush_r+0x48>
 80111b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111b8:	f7fc f969 	bl	800d48e <__retarget_lock_release_recursive>
 80111bc:	0030      	movs	r0, r6
 80111be:	bd70      	pop	{r4, r5, r6, pc}

080111c0 <__sccl>:
 80111c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111c2:	780b      	ldrb	r3, [r1, #0]
 80111c4:	0004      	movs	r4, r0
 80111c6:	2b5e      	cmp	r3, #94	; 0x5e
 80111c8:	d019      	beq.n	80111fe <__sccl+0x3e>
 80111ca:	2200      	movs	r2, #0
 80111cc:	1c4d      	adds	r5, r1, #1
 80111ce:	0021      	movs	r1, r4
 80111d0:	1c60      	adds	r0, r4, #1
 80111d2:	30ff      	adds	r0, #255	; 0xff
 80111d4:	700a      	strb	r2, [r1, #0]
 80111d6:	3101      	adds	r1, #1
 80111d8:	4281      	cmp	r1, r0
 80111da:	d1fb      	bne.n	80111d4 <__sccl+0x14>
 80111dc:	1e68      	subs	r0, r5, #1
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d00c      	beq.n	80111fc <__sccl+0x3c>
 80111e2:	2101      	movs	r1, #1
 80111e4:	262d      	movs	r6, #45	; 0x2d
 80111e6:	404a      	eors	r2, r1
 80111e8:	0028      	movs	r0, r5
 80111ea:	54e2      	strb	r2, [r4, r3]
 80111ec:	7801      	ldrb	r1, [r0, #0]
 80111ee:	1c45      	adds	r5, r0, #1
 80111f0:	292d      	cmp	r1, #45	; 0x2d
 80111f2:	d00c      	beq.n	801120e <__sccl+0x4e>
 80111f4:	295d      	cmp	r1, #93	; 0x5d
 80111f6:	d01d      	beq.n	8011234 <__sccl+0x74>
 80111f8:	2900      	cmp	r1, #0
 80111fa:	d104      	bne.n	8011206 <__sccl+0x46>
 80111fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111fe:	2201      	movs	r2, #1
 8011200:	784b      	ldrb	r3, [r1, #1]
 8011202:	1c8d      	adds	r5, r1, #2
 8011204:	e7e3      	b.n	80111ce <__sccl+0xe>
 8011206:	000b      	movs	r3, r1
 8011208:	e7ee      	b.n	80111e8 <__sccl+0x28>
 801120a:	0033      	movs	r3, r6
 801120c:	e7ec      	b.n	80111e8 <__sccl+0x28>
 801120e:	7841      	ldrb	r1, [r0, #1]
 8011210:	295d      	cmp	r1, #93	; 0x5d
 8011212:	d0fa      	beq.n	801120a <__sccl+0x4a>
 8011214:	428b      	cmp	r3, r1
 8011216:	dcf8      	bgt.n	801120a <__sccl+0x4a>
 8011218:	001d      	movs	r5, r3
 801121a:	3002      	adds	r0, #2
 801121c:	3501      	adds	r5, #1
 801121e:	5562      	strb	r2, [r4, r5]
 8011220:	42a9      	cmp	r1, r5
 8011222:	dcfb      	bgt.n	801121c <__sccl+0x5c>
 8011224:	2500      	movs	r5, #0
 8011226:	1c5f      	adds	r7, r3, #1
 8011228:	428b      	cmp	r3, r1
 801122a:	da01      	bge.n	8011230 <__sccl+0x70>
 801122c:	1acd      	subs	r5, r1, r3
 801122e:	3d01      	subs	r5, #1
 8011230:	197b      	adds	r3, r7, r5
 8011232:	e7db      	b.n	80111ec <__sccl+0x2c>
 8011234:	0028      	movs	r0, r5
 8011236:	e7e1      	b.n	80111fc <__sccl+0x3c>

08011238 <_localeconv_r>:
 8011238:	4800      	ldr	r0, [pc, #0]	; (801123c <_localeconv_r+0x4>)
 801123a:	4770      	bx	lr
 801123c:	20000534 	.word	0x20000534

08011240 <__libc_fini_array>:
 8011240:	b570      	push	{r4, r5, r6, lr}
 8011242:	4c07      	ldr	r4, [pc, #28]	; (8011260 <__libc_fini_array+0x20>)
 8011244:	4d07      	ldr	r5, [pc, #28]	; (8011264 <__libc_fini_array+0x24>)
 8011246:	1b64      	subs	r4, r4, r5
 8011248:	10a4      	asrs	r4, r4, #2
 801124a:	2c00      	cmp	r4, #0
 801124c:	d102      	bne.n	8011254 <__libc_fini_array+0x14>
 801124e:	f002 fd47 	bl	8013ce0 <_fini>
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	3c01      	subs	r4, #1
 8011256:	00a3      	lsls	r3, r4, #2
 8011258:	58eb      	ldr	r3, [r5, r3]
 801125a:	4798      	blx	r3
 801125c:	e7f5      	b.n	801124a <__libc_fini_array+0xa>
 801125e:	46c0      	nop			; (mov r8, r8)
 8011260:	08015dc8 	.word	0x08015dc8
 8011264:	08015dc4 	.word	0x08015dc4

08011268 <memchr>:
 8011268:	b2c9      	uxtb	r1, r1
 801126a:	1882      	adds	r2, r0, r2
 801126c:	4290      	cmp	r0, r2
 801126e:	d101      	bne.n	8011274 <memchr+0xc>
 8011270:	2000      	movs	r0, #0
 8011272:	4770      	bx	lr
 8011274:	7803      	ldrb	r3, [r0, #0]
 8011276:	428b      	cmp	r3, r1
 8011278:	d0fb      	beq.n	8011272 <memchr+0xa>
 801127a:	3001      	adds	r0, #1
 801127c:	e7f6      	b.n	801126c <memchr+0x4>
	...

08011280 <frexp>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	0014      	movs	r4, r2
 8011284:	2500      	movs	r5, #0
 8011286:	6025      	str	r5, [r4, #0]
 8011288:	4d10      	ldr	r5, [pc, #64]	; (80112cc <frexp+0x4c>)
 801128a:	004b      	lsls	r3, r1, #1
 801128c:	000a      	movs	r2, r1
 801128e:	085b      	lsrs	r3, r3, #1
 8011290:	42ab      	cmp	r3, r5
 8011292:	dc1a      	bgt.n	80112ca <frexp+0x4a>
 8011294:	001d      	movs	r5, r3
 8011296:	4305      	orrs	r5, r0
 8011298:	d017      	beq.n	80112ca <frexp+0x4a>
 801129a:	4d0d      	ldr	r5, [pc, #52]	; (80112d0 <frexp+0x50>)
 801129c:	4229      	tst	r1, r5
 801129e:	d109      	bne.n	80112b4 <frexp+0x34>
 80112a0:	2200      	movs	r2, #0
 80112a2:	4b0c      	ldr	r3, [pc, #48]	; (80112d4 <frexp+0x54>)
 80112a4:	f7f0 f9e2 	bl	800166c <__aeabi_dmul>
 80112a8:	2536      	movs	r5, #54	; 0x36
 80112aa:	000a      	movs	r2, r1
 80112ac:	004b      	lsls	r3, r1, #1
 80112ae:	426d      	negs	r5, r5
 80112b0:	085b      	lsrs	r3, r3, #1
 80112b2:	6025      	str	r5, [r4, #0]
 80112b4:	4d08      	ldr	r5, [pc, #32]	; (80112d8 <frexp+0x58>)
 80112b6:	151b      	asrs	r3, r3, #20
 80112b8:	195b      	adds	r3, r3, r5
 80112ba:	6825      	ldr	r5, [r4, #0]
 80112bc:	18eb      	adds	r3, r5, r3
 80112be:	6023      	str	r3, [r4, #0]
 80112c0:	4b06      	ldr	r3, [pc, #24]	; (80112dc <frexp+0x5c>)
 80112c2:	401a      	ands	r2, r3
 80112c4:	4b06      	ldr	r3, [pc, #24]	; (80112e0 <frexp+0x60>)
 80112c6:	4313      	orrs	r3, r2
 80112c8:	0019      	movs	r1, r3
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	7fefffff 	.word	0x7fefffff
 80112d0:	7ff00000 	.word	0x7ff00000
 80112d4:	43500000 	.word	0x43500000
 80112d8:	fffffc02 	.word	0xfffffc02
 80112dc:	800fffff 	.word	0x800fffff
 80112e0:	3fe00000 	.word	0x3fe00000

080112e4 <__register_exitproc>:
 80112e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112e6:	4f1c      	ldr	r7, [pc, #112]	; (8011358 <__register_exitproc+0x74>)
 80112e8:	0004      	movs	r4, r0
 80112ea:	6838      	ldr	r0, [r7, #0]
 80112ec:	0016      	movs	r6, r2
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	9100      	str	r1, [sp, #0]
 80112f2:	f7fc f8cb 	bl	800d48c <__retarget_lock_acquire_recursive>
 80112f6:	4a19      	ldr	r2, [pc, #100]	; (801135c <__register_exitproc+0x78>)
 80112f8:	6813      	ldr	r3, [r2, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <__register_exitproc+0x1e>
 80112fe:	4b18      	ldr	r3, [pc, #96]	; (8011360 <__register_exitproc+0x7c>)
 8011300:	6013      	str	r3, [r2, #0]
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	6838      	ldr	r0, [r7, #0]
 8011306:	2a1f      	cmp	r2, #31
 8011308:	dd04      	ble.n	8011314 <__register_exitproc+0x30>
 801130a:	f7fc f8c0 	bl	800d48e <__retarget_lock_release_recursive>
 801130e:	2001      	movs	r0, #1
 8011310:	4240      	negs	r0, r0
 8011312:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011314:	2c00      	cmp	r4, #0
 8011316:	d014      	beq.n	8011342 <__register_exitproc+0x5e>
 8011318:	0091      	lsls	r1, r2, #2
 801131a:	1859      	adds	r1, r3, r1
 801131c:	000f      	movs	r7, r1
 801131e:	3788      	adds	r7, #136	; 0x88
 8011320:	603e      	str	r6, [r7, #0]
 8011322:	2701      	movs	r7, #1
 8011324:	001e      	movs	r6, r3
 8011326:	4097      	lsls	r7, r2
 8011328:	3685      	adds	r6, #133	; 0x85
 801132a:	36ff      	adds	r6, #255	; 0xff
 801132c:	6875      	ldr	r5, [r6, #4]
 801132e:	31fc      	adds	r1, #252	; 0xfc
 8011330:	433d      	orrs	r5, r7
 8011332:	6075      	str	r5, [r6, #4]
 8011334:	9d01      	ldr	r5, [sp, #4]
 8011336:	60cd      	str	r5, [r1, #12]
 8011338:	2c02      	cmp	r4, #2
 801133a:	d102      	bne.n	8011342 <__register_exitproc+0x5e>
 801133c:	68b1      	ldr	r1, [r6, #8]
 801133e:	4339      	orrs	r1, r7
 8011340:	60b1      	str	r1, [r6, #8]
 8011342:	1c51      	adds	r1, r2, #1
 8011344:	6059      	str	r1, [r3, #4]
 8011346:	3202      	adds	r2, #2
 8011348:	9900      	ldr	r1, [sp, #0]
 801134a:	0092      	lsls	r2, r2, #2
 801134c:	50d1      	str	r1, [r2, r3]
 801134e:	f7fc f89e 	bl	800d48e <__retarget_lock_release_recursive>
 8011352:	2000      	movs	r0, #0
 8011354:	e7dd      	b.n	8011312 <__register_exitproc+0x2e>
 8011356:	46c0      	nop			; (mov r8, r8)
 8011358:	200006d4 	.word	0x200006d4
 801135c:	20000dcc 	.word	0x20000dcc
 8011360:	20000dd0 	.word	0x20000dd0

08011364 <__assert_func>:
 8011364:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011366:	0014      	movs	r4, r2
 8011368:	001a      	movs	r2, r3
 801136a:	4b09      	ldr	r3, [pc, #36]	; (8011390 <__assert_func+0x2c>)
 801136c:	0005      	movs	r5, r0
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	000e      	movs	r6, r1
 8011372:	68d8      	ldr	r0, [r3, #12]
 8011374:	4b07      	ldr	r3, [pc, #28]	; (8011394 <__assert_func+0x30>)
 8011376:	2c00      	cmp	r4, #0
 8011378:	d101      	bne.n	801137e <__assert_func+0x1a>
 801137a:	4b07      	ldr	r3, [pc, #28]	; (8011398 <__assert_func+0x34>)
 801137c:	001c      	movs	r4, r3
 801137e:	4907      	ldr	r1, [pc, #28]	; (801139c <__assert_func+0x38>)
 8011380:	9301      	str	r3, [sp, #4]
 8011382:	9402      	str	r4, [sp, #8]
 8011384:	002b      	movs	r3, r5
 8011386:	9600      	str	r6, [sp, #0]
 8011388:	f001 fa20 	bl	80127cc <fiprintf>
 801138c:	f002 fb08 	bl	80139a0 <abort>
 8011390:	200006d0 	.word	0x200006d0
 8011394:	08015cf0 	.word	0x08015cf0
 8011398:	08015d2b 	.word	0x08015d2b
 801139c:	08015cfd 	.word	0x08015cfd

080113a0 <_calloc_r>:
 80113a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113a2:	2400      	movs	r4, #0
 80113a4:	0c0b      	lsrs	r3, r1, #16
 80113a6:	0c16      	lsrs	r6, r2, #16
 80113a8:	42a3      	cmp	r3, r4
 80113aa:	d133      	bne.n	8011414 <_calloc_r+0x74>
 80113ac:	42a6      	cmp	r6, r4
 80113ae:	d121      	bne.n	80113f4 <_calloc_r+0x54>
 80113b0:	b28b      	uxth	r3, r1
 80113b2:	b291      	uxth	r1, r2
 80113b4:	4359      	muls	r1, r3
 80113b6:	f7fa fc37 	bl	800bc28 <_malloc_r>
 80113ba:	1e05      	subs	r5, r0, #0
 80113bc:	d033      	beq.n	8011426 <_calloc_r+0x86>
 80113be:	0003      	movs	r3, r0
 80113c0:	3b08      	subs	r3, #8
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	2303      	movs	r3, #3
 80113c6:	439a      	bics	r2, r3
 80113c8:	3a04      	subs	r2, #4
 80113ca:	2a24      	cmp	r2, #36	; 0x24
 80113cc:	d832      	bhi.n	8011434 <_calloc_r+0x94>
 80113ce:	0003      	movs	r3, r0
 80113d0:	2a13      	cmp	r2, #19
 80113d2:	d90a      	bls.n	80113ea <_calloc_r+0x4a>
 80113d4:	6004      	str	r4, [r0, #0]
 80113d6:	6044      	str	r4, [r0, #4]
 80113d8:	3308      	adds	r3, #8
 80113da:	2a1b      	cmp	r2, #27
 80113dc:	d905      	bls.n	80113ea <_calloc_r+0x4a>
 80113de:	6084      	str	r4, [r0, #8]
 80113e0:	60c4      	str	r4, [r0, #12]
 80113e2:	2a24      	cmp	r2, #36	; 0x24
 80113e4:	d021      	beq.n	801142a <_calloc_r+0x8a>
 80113e6:	0003      	movs	r3, r0
 80113e8:	3310      	adds	r3, #16
 80113ea:	2200      	movs	r2, #0
 80113ec:	601a      	str	r2, [r3, #0]
 80113ee:	605a      	str	r2, [r3, #4]
 80113f0:	609a      	str	r2, [r3, #8]
 80113f2:	e018      	b.n	8011426 <_calloc_r+0x86>
 80113f4:	1c33      	adds	r3, r6, #0
 80113f6:	1c0d      	adds	r5, r1, #0
 80113f8:	b289      	uxth	r1, r1
 80113fa:	b292      	uxth	r2, r2
 80113fc:	434a      	muls	r2, r1
 80113fe:	b2ad      	uxth	r5, r5
 8011400:	b299      	uxth	r1, r3
 8011402:	4369      	muls	r1, r5
 8011404:	0c13      	lsrs	r3, r2, #16
 8011406:	18c9      	adds	r1, r1, r3
 8011408:	0c0b      	lsrs	r3, r1, #16
 801140a:	d107      	bne.n	801141c <_calloc_r+0x7c>
 801140c:	0409      	lsls	r1, r1, #16
 801140e:	b292      	uxth	r2, r2
 8011410:	4311      	orrs	r1, r2
 8011412:	e7d0      	b.n	80113b6 <_calloc_r+0x16>
 8011414:	2e00      	cmp	r6, #0
 8011416:	d101      	bne.n	801141c <_calloc_r+0x7c>
 8011418:	1c15      	adds	r5, r2, #0
 801141a:	e7ed      	b.n	80113f8 <_calloc_r+0x58>
 801141c:	f7fc f80a 	bl	800d434 <__errno>
 8011420:	230c      	movs	r3, #12
 8011422:	2500      	movs	r5, #0
 8011424:	6003      	str	r3, [r0, #0]
 8011426:	0028      	movs	r0, r5
 8011428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801142a:	0003      	movs	r3, r0
 801142c:	6104      	str	r4, [r0, #16]
 801142e:	3318      	adds	r3, #24
 8011430:	6144      	str	r4, [r0, #20]
 8011432:	e7da      	b.n	80113ea <_calloc_r+0x4a>
 8011434:	2100      	movs	r1, #0
 8011436:	f7fb ff09 	bl	800d24c <memset>
 801143a:	e7f4      	b.n	8011426 <_calloc_r+0x86>

0801143c <quorem>:
 801143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801143e:	6902      	ldr	r2, [r0, #16]
 8011440:	690b      	ldr	r3, [r1, #16]
 8011442:	b089      	sub	sp, #36	; 0x24
 8011444:	0007      	movs	r7, r0
 8011446:	9104      	str	r1, [sp, #16]
 8011448:	2000      	movs	r0, #0
 801144a:	429a      	cmp	r2, r3
 801144c:	db69      	blt.n	8011522 <quorem+0xe6>
 801144e:	3b01      	subs	r3, #1
 8011450:	009c      	lsls	r4, r3, #2
 8011452:	9301      	str	r3, [sp, #4]
 8011454:	000b      	movs	r3, r1
 8011456:	3314      	adds	r3, #20
 8011458:	9306      	str	r3, [sp, #24]
 801145a:	191b      	adds	r3, r3, r4
 801145c:	9305      	str	r3, [sp, #20]
 801145e:	003b      	movs	r3, r7
 8011460:	3314      	adds	r3, #20
 8011462:	9303      	str	r3, [sp, #12]
 8011464:	191c      	adds	r4, r3, r4
 8011466:	9b05      	ldr	r3, [sp, #20]
 8011468:	6826      	ldr	r6, [r4, #0]
 801146a:	681d      	ldr	r5, [r3, #0]
 801146c:	0030      	movs	r0, r6
 801146e:	3501      	adds	r5, #1
 8011470:	0029      	movs	r1, r5
 8011472:	f7ee fe63 	bl	800013c <__udivsi3>
 8011476:	9002      	str	r0, [sp, #8]
 8011478:	42ae      	cmp	r6, r5
 801147a:	d329      	bcc.n	80114d0 <quorem+0x94>
 801147c:	9b06      	ldr	r3, [sp, #24]
 801147e:	2600      	movs	r6, #0
 8011480:	469c      	mov	ip, r3
 8011482:	9d03      	ldr	r5, [sp, #12]
 8011484:	9606      	str	r6, [sp, #24]
 8011486:	4662      	mov	r2, ip
 8011488:	ca08      	ldmia	r2!, {r3}
 801148a:	6828      	ldr	r0, [r5, #0]
 801148c:	4694      	mov	ip, r2
 801148e:	9a02      	ldr	r2, [sp, #8]
 8011490:	b299      	uxth	r1, r3
 8011492:	4351      	muls	r1, r2
 8011494:	0c1b      	lsrs	r3, r3, #16
 8011496:	4353      	muls	r3, r2
 8011498:	1989      	adds	r1, r1, r6
 801149a:	0c0a      	lsrs	r2, r1, #16
 801149c:	189b      	adds	r3, r3, r2
 801149e:	9307      	str	r3, [sp, #28]
 80114a0:	0c1e      	lsrs	r6, r3, #16
 80114a2:	9b06      	ldr	r3, [sp, #24]
 80114a4:	b282      	uxth	r2, r0
 80114a6:	18d2      	adds	r2, r2, r3
 80114a8:	466b      	mov	r3, sp
 80114aa:	b289      	uxth	r1, r1
 80114ac:	8b9b      	ldrh	r3, [r3, #28]
 80114ae:	1a52      	subs	r2, r2, r1
 80114b0:	0c01      	lsrs	r1, r0, #16
 80114b2:	1ac9      	subs	r1, r1, r3
 80114b4:	1413      	asrs	r3, r2, #16
 80114b6:	18cb      	adds	r3, r1, r3
 80114b8:	1419      	asrs	r1, r3, #16
 80114ba:	b292      	uxth	r2, r2
 80114bc:	041b      	lsls	r3, r3, #16
 80114be:	4313      	orrs	r3, r2
 80114c0:	c508      	stmia	r5!, {r3}
 80114c2:	9b05      	ldr	r3, [sp, #20]
 80114c4:	9106      	str	r1, [sp, #24]
 80114c6:	4563      	cmp	r3, ip
 80114c8:	d2dd      	bcs.n	8011486 <quorem+0x4a>
 80114ca:	6823      	ldr	r3, [r4, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d030      	beq.n	8011532 <quorem+0xf6>
 80114d0:	0038      	movs	r0, r7
 80114d2:	9904      	ldr	r1, [sp, #16]
 80114d4:	f7fc ff04 	bl	800e2e0 <__mcmp>
 80114d8:	2800      	cmp	r0, #0
 80114da:	db21      	blt.n	8011520 <quorem+0xe4>
 80114dc:	0038      	movs	r0, r7
 80114de:	2600      	movs	r6, #0
 80114e0:	9b02      	ldr	r3, [sp, #8]
 80114e2:	9c04      	ldr	r4, [sp, #16]
 80114e4:	3301      	adds	r3, #1
 80114e6:	9302      	str	r3, [sp, #8]
 80114e8:	3014      	adds	r0, #20
 80114ea:	3414      	adds	r4, #20
 80114ec:	6803      	ldr	r3, [r0, #0]
 80114ee:	cc02      	ldmia	r4!, {r1}
 80114f0:	b29d      	uxth	r5, r3
 80114f2:	19ad      	adds	r5, r5, r6
 80114f4:	b28a      	uxth	r2, r1
 80114f6:	1aaa      	subs	r2, r5, r2
 80114f8:	0c09      	lsrs	r1, r1, #16
 80114fa:	0c1b      	lsrs	r3, r3, #16
 80114fc:	1a5b      	subs	r3, r3, r1
 80114fe:	1411      	asrs	r1, r2, #16
 8011500:	185b      	adds	r3, r3, r1
 8011502:	141e      	asrs	r6, r3, #16
 8011504:	b292      	uxth	r2, r2
 8011506:	041b      	lsls	r3, r3, #16
 8011508:	4313      	orrs	r3, r2
 801150a:	c008      	stmia	r0!, {r3}
 801150c:	9b05      	ldr	r3, [sp, #20]
 801150e:	42a3      	cmp	r3, r4
 8011510:	d2ec      	bcs.n	80114ec <quorem+0xb0>
 8011512:	9b01      	ldr	r3, [sp, #4]
 8011514:	9a03      	ldr	r2, [sp, #12]
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	18d3      	adds	r3, r2, r3
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	2a00      	cmp	r2, #0
 801151e:	d015      	beq.n	801154c <quorem+0x110>
 8011520:	9802      	ldr	r0, [sp, #8]
 8011522:	b009      	add	sp, #36	; 0x24
 8011524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d106      	bne.n	801153a <quorem+0xfe>
 801152c:	9b01      	ldr	r3, [sp, #4]
 801152e:	3b01      	subs	r3, #1
 8011530:	9301      	str	r3, [sp, #4]
 8011532:	9b03      	ldr	r3, [sp, #12]
 8011534:	3c04      	subs	r4, #4
 8011536:	42a3      	cmp	r3, r4
 8011538:	d3f5      	bcc.n	8011526 <quorem+0xea>
 801153a:	9b01      	ldr	r3, [sp, #4]
 801153c:	613b      	str	r3, [r7, #16]
 801153e:	e7c7      	b.n	80114d0 <quorem+0x94>
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	2a00      	cmp	r2, #0
 8011544:	d106      	bne.n	8011554 <quorem+0x118>
 8011546:	9a01      	ldr	r2, [sp, #4]
 8011548:	3a01      	subs	r2, #1
 801154a:	9201      	str	r2, [sp, #4]
 801154c:	9a03      	ldr	r2, [sp, #12]
 801154e:	3b04      	subs	r3, #4
 8011550:	429a      	cmp	r2, r3
 8011552:	d3f5      	bcc.n	8011540 <quorem+0x104>
 8011554:	9b01      	ldr	r3, [sp, #4]
 8011556:	613b      	str	r3, [r7, #16]
 8011558:	e7e2      	b.n	8011520 <quorem+0xe4>
	...

0801155c <_dtoa_r>:
 801155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801155e:	0014      	movs	r4, r2
 8011560:	001d      	movs	r5, r3
 8011562:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8011564:	b09d      	sub	sp, #116	; 0x74
 8011566:	9408      	str	r4, [sp, #32]
 8011568:	9509      	str	r5, [sp, #36]	; 0x24
 801156a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801156c:	9004      	str	r0, [sp, #16]
 801156e:	2900      	cmp	r1, #0
 8011570:	d009      	beq.n	8011586 <_dtoa_r+0x2a>
 8011572:	2301      	movs	r3, #1
 8011574:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011576:	4093      	lsls	r3, r2
 8011578:	604a      	str	r2, [r1, #4]
 801157a:	608b      	str	r3, [r1, #8]
 801157c:	f7fc fc56 	bl	800de2c <_Bfree>
 8011580:	2300      	movs	r3, #0
 8011582:	9a04      	ldr	r2, [sp, #16]
 8011584:	6393      	str	r3, [r2, #56]	; 0x38
 8011586:	2d00      	cmp	r5, #0
 8011588:	da1e      	bge.n	80115c8 <_dtoa_r+0x6c>
 801158a:	2301      	movs	r3, #1
 801158c:	6033      	str	r3, [r6, #0]
 801158e:	006b      	lsls	r3, r5, #1
 8011590:	085b      	lsrs	r3, r3, #1
 8011592:	9309      	str	r3, [sp, #36]	; 0x24
 8011594:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011596:	4bb5      	ldr	r3, [pc, #724]	; (801186c <_dtoa_r+0x310>)
 8011598:	4ab4      	ldr	r2, [pc, #720]	; (801186c <_dtoa_r+0x310>)
 801159a:	403b      	ands	r3, r7
 801159c:	4293      	cmp	r3, r2
 801159e:	d116      	bne.n	80115ce <_dtoa_r+0x72>
 80115a0:	4bb3      	ldr	r3, [pc, #716]	; (8011870 <_dtoa_r+0x314>)
 80115a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	033b      	lsls	r3, r7, #12
 80115a8:	0b1b      	lsrs	r3, r3, #12
 80115aa:	4323      	orrs	r3, r4
 80115ac:	d101      	bne.n	80115b2 <_dtoa_r+0x56>
 80115ae:	f000 fdb2 	bl	8012116 <_dtoa_r+0xbba>
 80115b2:	4bb0      	ldr	r3, [pc, #704]	; (8011874 <_dtoa_r+0x318>)
 80115b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80115b6:	9306      	str	r3, [sp, #24]
 80115b8:	2a00      	cmp	r2, #0
 80115ba:	d002      	beq.n	80115c2 <_dtoa_r+0x66>
 80115bc:	4bae      	ldr	r3, [pc, #696]	; (8011878 <_dtoa_r+0x31c>)
 80115be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80115c0:	6013      	str	r3, [r2, #0]
 80115c2:	9806      	ldr	r0, [sp, #24]
 80115c4:	b01d      	add	sp, #116	; 0x74
 80115c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c8:	2300      	movs	r3, #0
 80115ca:	6033      	str	r3, [r6, #0]
 80115cc:	e7e2      	b.n	8011594 <_dtoa_r+0x38>
 80115ce:	9a08      	ldr	r2, [sp, #32]
 80115d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115d2:	9210      	str	r2, [sp, #64]	; 0x40
 80115d4:	9311      	str	r3, [sp, #68]	; 0x44
 80115d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80115d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80115da:	2200      	movs	r2, #0
 80115dc:	2300      	movs	r3, #0
 80115de:	f7ee ff33 	bl	8000448 <__aeabi_dcmpeq>
 80115e2:	1e06      	subs	r6, r0, #0
 80115e4:	d009      	beq.n	80115fa <_dtoa_r+0x9e>
 80115e6:	2301      	movs	r3, #1
 80115e8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80115ea:	6013      	str	r3, [r2, #0]
 80115ec:	4ba3      	ldr	r3, [pc, #652]	; (801187c <_dtoa_r+0x320>)
 80115ee:	9306      	str	r3, [sp, #24]
 80115f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d0e5      	beq.n	80115c2 <_dtoa_r+0x66>
 80115f6:	4ba2      	ldr	r3, [pc, #648]	; (8011880 <_dtoa_r+0x324>)
 80115f8:	e7e1      	b.n	80115be <_dtoa_r+0x62>
 80115fa:	ab1a      	add	r3, sp, #104	; 0x68
 80115fc:	9301      	str	r3, [sp, #4]
 80115fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8011600:	9300      	str	r3, [sp, #0]
 8011602:	9804      	ldr	r0, [sp, #16]
 8011604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011608:	f7fc ff86 	bl	800e518 <__d2b>
 801160c:	007a      	lsls	r2, r7, #1
 801160e:	9005      	str	r0, [sp, #20]
 8011610:	0d52      	lsrs	r2, r2, #21
 8011612:	d100      	bne.n	8011616 <_dtoa_r+0xba>
 8011614:	e07b      	b.n	801170e <_dtoa_r+0x1b2>
 8011616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011618:	9617      	str	r6, [sp, #92]	; 0x5c
 801161a:	0319      	lsls	r1, r3, #12
 801161c:	4b99      	ldr	r3, [pc, #612]	; (8011884 <_dtoa_r+0x328>)
 801161e:	0b09      	lsrs	r1, r1, #12
 8011620:	430b      	orrs	r3, r1
 8011622:	4999      	ldr	r1, [pc, #612]	; (8011888 <_dtoa_r+0x32c>)
 8011624:	1857      	adds	r7, r2, r1
 8011626:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011628:	9911      	ldr	r1, [sp, #68]	; 0x44
 801162a:	0019      	movs	r1, r3
 801162c:	2200      	movs	r2, #0
 801162e:	4b97      	ldr	r3, [pc, #604]	; (801188c <_dtoa_r+0x330>)
 8011630:	f7f0 fade 	bl	8001bf0 <__aeabi_dsub>
 8011634:	4a96      	ldr	r2, [pc, #600]	; (8011890 <_dtoa_r+0x334>)
 8011636:	4b97      	ldr	r3, [pc, #604]	; (8011894 <_dtoa_r+0x338>)
 8011638:	f7f0 f818 	bl	800166c <__aeabi_dmul>
 801163c:	4a96      	ldr	r2, [pc, #600]	; (8011898 <_dtoa_r+0x33c>)
 801163e:	4b97      	ldr	r3, [pc, #604]	; (801189c <_dtoa_r+0x340>)
 8011640:	f7ef f8ba 	bl	80007b8 <__aeabi_dadd>
 8011644:	0004      	movs	r4, r0
 8011646:	0038      	movs	r0, r7
 8011648:	000d      	movs	r5, r1
 801164a:	f7f0 fea7 	bl	800239c <__aeabi_i2d>
 801164e:	4a94      	ldr	r2, [pc, #592]	; (80118a0 <_dtoa_r+0x344>)
 8011650:	4b94      	ldr	r3, [pc, #592]	; (80118a4 <_dtoa_r+0x348>)
 8011652:	f7f0 f80b 	bl	800166c <__aeabi_dmul>
 8011656:	0002      	movs	r2, r0
 8011658:	000b      	movs	r3, r1
 801165a:	0020      	movs	r0, r4
 801165c:	0029      	movs	r1, r5
 801165e:	f7ef f8ab 	bl	80007b8 <__aeabi_dadd>
 8011662:	0004      	movs	r4, r0
 8011664:	000d      	movs	r5, r1
 8011666:	f7f0 fe63 	bl	8002330 <__aeabi_d2iz>
 801166a:	2200      	movs	r2, #0
 801166c:	9003      	str	r0, [sp, #12]
 801166e:	2300      	movs	r3, #0
 8011670:	0020      	movs	r0, r4
 8011672:	0029      	movs	r1, r5
 8011674:	f7ee feee 	bl	8000454 <__aeabi_dcmplt>
 8011678:	2800      	cmp	r0, #0
 801167a:	d00b      	beq.n	8011694 <_dtoa_r+0x138>
 801167c:	9803      	ldr	r0, [sp, #12]
 801167e:	f7f0 fe8d 	bl	800239c <__aeabi_i2d>
 8011682:	002b      	movs	r3, r5
 8011684:	0022      	movs	r2, r4
 8011686:	f7ee fedf 	bl	8000448 <__aeabi_dcmpeq>
 801168a:	4243      	negs	r3, r0
 801168c:	4158      	adcs	r0, r3
 801168e:	9b03      	ldr	r3, [sp, #12]
 8011690:	1a1b      	subs	r3, r3, r0
 8011692:	9303      	str	r3, [sp, #12]
 8011694:	2301      	movs	r3, #1
 8011696:	9316      	str	r3, [sp, #88]	; 0x58
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	2b16      	cmp	r3, #22
 801169c:	d810      	bhi.n	80116c0 <_dtoa_r+0x164>
 801169e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80116a0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80116a2:	9a03      	ldr	r2, [sp, #12]
 80116a4:	4b80      	ldr	r3, [pc, #512]	; (80118a8 <_dtoa_r+0x34c>)
 80116a6:	00d2      	lsls	r2, r2, #3
 80116a8:	189b      	adds	r3, r3, r2
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	f7ee fed1 	bl	8000454 <__aeabi_dcmplt>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d047      	beq.n	8011746 <_dtoa_r+0x1ea>
 80116b6:	9b03      	ldr	r3, [sp, #12]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	9303      	str	r3, [sp, #12]
 80116bc:	2300      	movs	r3, #0
 80116be:	9316      	str	r3, [sp, #88]	; 0x58
 80116c0:	2200      	movs	r2, #0
 80116c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80116c4:	920a      	str	r2, [sp, #40]	; 0x28
 80116c6:	1bdb      	subs	r3, r3, r7
 80116c8:	1e5a      	subs	r2, r3, #1
 80116ca:	d53e      	bpl.n	801174a <_dtoa_r+0x1ee>
 80116cc:	2201      	movs	r2, #1
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	930a      	str	r3, [sp, #40]	; 0x28
 80116d2:	2300      	movs	r3, #0
 80116d4:	930c      	str	r3, [sp, #48]	; 0x30
 80116d6:	9b03      	ldr	r3, [sp, #12]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	db38      	blt.n	801174e <_dtoa_r+0x1f2>
 80116dc:	9a03      	ldr	r2, [sp, #12]
 80116de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116e0:	4694      	mov	ip, r2
 80116e2:	4463      	add	r3, ip
 80116e4:	930c      	str	r3, [sp, #48]	; 0x30
 80116e6:	2300      	movs	r3, #0
 80116e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80116ea:	930d      	str	r3, [sp, #52]	; 0x34
 80116ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80116ee:	2401      	movs	r4, #1
 80116f0:	2b09      	cmp	r3, #9
 80116f2:	d867      	bhi.n	80117c4 <_dtoa_r+0x268>
 80116f4:	2b05      	cmp	r3, #5
 80116f6:	dd02      	ble.n	80116fe <_dtoa_r+0x1a2>
 80116f8:	2400      	movs	r4, #0
 80116fa:	3b04      	subs	r3, #4
 80116fc:	9322      	str	r3, [sp, #136]	; 0x88
 80116fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011700:	1e98      	subs	r0, r3, #2
 8011702:	2803      	cmp	r0, #3
 8011704:	d867      	bhi.n	80117d6 <_dtoa_r+0x27a>
 8011706:	f7ee fd05 	bl	8000114 <__gnu_thumb1_case_uqi>
 801170a:	3a2b      	.short	0x3a2b
 801170c:	5b38      	.short	0x5b38
 801170e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011710:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011712:	18f6      	adds	r6, r6, r3
 8011714:	4b65      	ldr	r3, [pc, #404]	; (80118ac <_dtoa_r+0x350>)
 8011716:	18f2      	adds	r2, r6, r3
 8011718:	2a20      	cmp	r2, #32
 801171a:	dd0f      	ble.n	801173c <_dtoa_r+0x1e0>
 801171c:	2340      	movs	r3, #64	; 0x40
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	409f      	lsls	r7, r3
 8011722:	4b63      	ldr	r3, [pc, #396]	; (80118b0 <_dtoa_r+0x354>)
 8011724:	0038      	movs	r0, r7
 8011726:	18f3      	adds	r3, r6, r3
 8011728:	40dc      	lsrs	r4, r3
 801172a:	4320      	orrs	r0, r4
 801172c:	f7f0 fe66 	bl	80023fc <__aeabi_ui2d>
 8011730:	2201      	movs	r2, #1
 8011732:	4b60      	ldr	r3, [pc, #384]	; (80118b4 <_dtoa_r+0x358>)
 8011734:	1e77      	subs	r7, r6, #1
 8011736:	18cb      	adds	r3, r1, r3
 8011738:	9217      	str	r2, [sp, #92]	; 0x5c
 801173a:	e776      	b.n	801162a <_dtoa_r+0xce>
 801173c:	2320      	movs	r3, #32
 801173e:	0020      	movs	r0, r4
 8011740:	1a9b      	subs	r3, r3, r2
 8011742:	4098      	lsls	r0, r3
 8011744:	e7f2      	b.n	801172c <_dtoa_r+0x1d0>
 8011746:	9016      	str	r0, [sp, #88]	; 0x58
 8011748:	e7ba      	b.n	80116c0 <_dtoa_r+0x164>
 801174a:	920c      	str	r2, [sp, #48]	; 0x30
 801174c:	e7c3      	b.n	80116d6 <_dtoa_r+0x17a>
 801174e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011750:	9a03      	ldr	r2, [sp, #12]
 8011752:	1a9b      	subs	r3, r3, r2
 8011754:	930a      	str	r3, [sp, #40]	; 0x28
 8011756:	4253      	negs	r3, r2
 8011758:	930d      	str	r3, [sp, #52]	; 0x34
 801175a:	2300      	movs	r3, #0
 801175c:	9313      	str	r3, [sp, #76]	; 0x4c
 801175e:	e7c5      	b.n	80116ec <_dtoa_r+0x190>
 8011760:	2300      	movs	r3, #0
 8011762:	930f      	str	r3, [sp, #60]	; 0x3c
 8011764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011766:	930b      	str	r3, [sp, #44]	; 0x2c
 8011768:	9307      	str	r3, [sp, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	dc13      	bgt.n	8011796 <_dtoa_r+0x23a>
 801176e:	2301      	movs	r3, #1
 8011770:	001a      	movs	r2, r3
 8011772:	930b      	str	r3, [sp, #44]	; 0x2c
 8011774:	9307      	str	r3, [sp, #28]
 8011776:	9223      	str	r2, [sp, #140]	; 0x8c
 8011778:	e00d      	b.n	8011796 <_dtoa_r+0x23a>
 801177a:	2301      	movs	r3, #1
 801177c:	e7f1      	b.n	8011762 <_dtoa_r+0x206>
 801177e:	2300      	movs	r3, #0
 8011780:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011782:	930f      	str	r3, [sp, #60]	; 0x3c
 8011784:	4694      	mov	ip, r2
 8011786:	9b03      	ldr	r3, [sp, #12]
 8011788:	4463      	add	r3, ip
 801178a:	930b      	str	r3, [sp, #44]	; 0x2c
 801178c:	3301      	adds	r3, #1
 801178e:	9307      	str	r3, [sp, #28]
 8011790:	2b00      	cmp	r3, #0
 8011792:	dc00      	bgt.n	8011796 <_dtoa_r+0x23a>
 8011794:	2301      	movs	r3, #1
 8011796:	2100      	movs	r1, #0
 8011798:	2204      	movs	r2, #4
 801179a:	0010      	movs	r0, r2
 801179c:	3014      	adds	r0, #20
 801179e:	4298      	cmp	r0, r3
 80117a0:	d91d      	bls.n	80117de <_dtoa_r+0x282>
 80117a2:	9b04      	ldr	r3, [sp, #16]
 80117a4:	0018      	movs	r0, r3
 80117a6:	63d9      	str	r1, [r3, #60]	; 0x3c
 80117a8:	f7fc fb18 	bl	800dddc <_Balloc>
 80117ac:	9006      	str	r0, [sp, #24]
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d118      	bne.n	80117e4 <_dtoa_r+0x288>
 80117b2:	21b0      	movs	r1, #176	; 0xb0
 80117b4:	4b40      	ldr	r3, [pc, #256]	; (80118b8 <_dtoa_r+0x35c>)
 80117b6:	4841      	ldr	r0, [pc, #260]	; (80118bc <_dtoa_r+0x360>)
 80117b8:	9a06      	ldr	r2, [sp, #24]
 80117ba:	31ff      	adds	r1, #255	; 0xff
 80117bc:	f7ff fdd2 	bl	8011364 <__assert_func>
 80117c0:	2301      	movs	r3, #1
 80117c2:	e7dd      	b.n	8011780 <_dtoa_r+0x224>
 80117c4:	2300      	movs	r3, #0
 80117c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80117c8:	9322      	str	r3, [sp, #136]	; 0x88
 80117ca:	3b01      	subs	r3, #1
 80117cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80117ce:	9307      	str	r3, [sp, #28]
 80117d0:	2200      	movs	r2, #0
 80117d2:	3313      	adds	r3, #19
 80117d4:	e7cf      	b.n	8011776 <_dtoa_r+0x21a>
 80117d6:	2301      	movs	r3, #1
 80117d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80117da:	3b02      	subs	r3, #2
 80117dc:	e7f6      	b.n	80117cc <_dtoa_r+0x270>
 80117de:	3101      	adds	r1, #1
 80117e0:	0052      	lsls	r2, r2, #1
 80117e2:	e7da      	b.n	801179a <_dtoa_r+0x23e>
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	9a06      	ldr	r2, [sp, #24]
 80117e8:	639a      	str	r2, [r3, #56]	; 0x38
 80117ea:	9b07      	ldr	r3, [sp, #28]
 80117ec:	2b0e      	cmp	r3, #14
 80117ee:	d900      	bls.n	80117f2 <_dtoa_r+0x296>
 80117f0:	e0e3      	b.n	80119ba <_dtoa_r+0x45e>
 80117f2:	2c00      	cmp	r4, #0
 80117f4:	d100      	bne.n	80117f8 <_dtoa_r+0x29c>
 80117f6:	e0e0      	b.n	80119ba <_dtoa_r+0x45e>
 80117f8:	9b03      	ldr	r3, [sp, #12]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	dd62      	ble.n	80118c4 <_dtoa_r+0x368>
 80117fe:	210f      	movs	r1, #15
 8011800:	9a03      	ldr	r2, [sp, #12]
 8011802:	4b29      	ldr	r3, [pc, #164]	; (80118a8 <_dtoa_r+0x34c>)
 8011804:	400a      	ands	r2, r1
 8011806:	00d2      	lsls	r2, r2, #3
 8011808:	189b      	adds	r3, r3, r2
 801180a:	681e      	ldr	r6, [r3, #0]
 801180c:	685f      	ldr	r7, [r3, #4]
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	2402      	movs	r4, #2
 8011812:	111d      	asrs	r5, r3, #4
 8011814:	05db      	lsls	r3, r3, #23
 8011816:	d50a      	bpl.n	801182e <_dtoa_r+0x2d2>
 8011818:	4b29      	ldr	r3, [pc, #164]	; (80118c0 <_dtoa_r+0x364>)
 801181a:	400d      	ands	r5, r1
 801181c:	6a1a      	ldr	r2, [r3, #32]
 801181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011820:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011822:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011824:	f7ef fb28 	bl	8000e78 <__aeabi_ddiv>
 8011828:	9008      	str	r0, [sp, #32]
 801182a:	9109      	str	r1, [sp, #36]	; 0x24
 801182c:	3401      	adds	r4, #1
 801182e:	4b24      	ldr	r3, [pc, #144]	; (80118c0 <_dtoa_r+0x364>)
 8011830:	930e      	str	r3, [sp, #56]	; 0x38
 8011832:	2d00      	cmp	r5, #0
 8011834:	d108      	bne.n	8011848 <_dtoa_r+0x2ec>
 8011836:	9808      	ldr	r0, [sp, #32]
 8011838:	9909      	ldr	r1, [sp, #36]	; 0x24
 801183a:	0032      	movs	r2, r6
 801183c:	003b      	movs	r3, r7
 801183e:	f7ef fb1b 	bl	8000e78 <__aeabi_ddiv>
 8011842:	9008      	str	r0, [sp, #32]
 8011844:	9109      	str	r1, [sp, #36]	; 0x24
 8011846:	e058      	b.n	80118fa <_dtoa_r+0x39e>
 8011848:	2301      	movs	r3, #1
 801184a:	421d      	tst	r5, r3
 801184c:	d009      	beq.n	8011862 <_dtoa_r+0x306>
 801184e:	18e4      	adds	r4, r4, r3
 8011850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011852:	0030      	movs	r0, r6
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	0039      	movs	r1, r7
 801185a:	f7ef ff07 	bl	800166c <__aeabi_dmul>
 801185e:	0006      	movs	r6, r0
 8011860:	000f      	movs	r7, r1
 8011862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011864:	106d      	asrs	r5, r5, #1
 8011866:	3308      	adds	r3, #8
 8011868:	e7e2      	b.n	8011830 <_dtoa_r+0x2d4>
 801186a:	46c0      	nop			; (mov r8, r8)
 801186c:	7ff00000 	.word	0x7ff00000
 8011870:	0000270f 	.word	0x0000270f
 8011874:	08015d35 	.word	0x08015d35
 8011878:	08015d38 	.word	0x08015d38
 801187c:	08015ca6 	.word	0x08015ca6
 8011880:	08015ca7 	.word	0x08015ca7
 8011884:	3ff00000 	.word	0x3ff00000
 8011888:	fffffc01 	.word	0xfffffc01
 801188c:	3ff80000 	.word	0x3ff80000
 8011890:	636f4361 	.word	0x636f4361
 8011894:	3fd287a7 	.word	0x3fd287a7
 8011898:	8b60c8b3 	.word	0x8b60c8b3
 801189c:	3fc68a28 	.word	0x3fc68a28
 80118a0:	509f79fb 	.word	0x509f79fb
 80118a4:	3fd34413 	.word	0x3fd34413
 80118a8:	08015ba0 	.word	0x08015ba0
 80118ac:	00000432 	.word	0x00000432
 80118b0:	00000412 	.word	0x00000412
 80118b4:	fe100000 	.word	0xfe100000
 80118b8:	08015aa9 	.word	0x08015aa9
 80118bc:	08015d39 	.word	0x08015d39
 80118c0:	08015b78 	.word	0x08015b78
 80118c4:	9b03      	ldr	r3, [sp, #12]
 80118c6:	2402      	movs	r4, #2
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d016      	beq.n	80118fa <_dtoa_r+0x39e>
 80118cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80118ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 80118d0:	220f      	movs	r2, #15
 80118d2:	425d      	negs	r5, r3
 80118d4:	402a      	ands	r2, r5
 80118d6:	4bdd      	ldr	r3, [pc, #884]	; (8011c4c <_dtoa_r+0x6f0>)
 80118d8:	00d2      	lsls	r2, r2, #3
 80118da:	189b      	adds	r3, r3, r2
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f7ef fec4 	bl	800166c <__aeabi_dmul>
 80118e4:	2701      	movs	r7, #1
 80118e6:	2300      	movs	r3, #0
 80118e8:	9008      	str	r0, [sp, #32]
 80118ea:	9109      	str	r1, [sp, #36]	; 0x24
 80118ec:	4ed8      	ldr	r6, [pc, #864]	; (8011c50 <_dtoa_r+0x6f4>)
 80118ee:	112d      	asrs	r5, r5, #4
 80118f0:	2d00      	cmp	r5, #0
 80118f2:	d000      	beq.n	80118f6 <_dtoa_r+0x39a>
 80118f4:	e091      	b.n	8011a1a <_dtoa_r+0x4be>
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1a3      	bne.n	8011842 <_dtoa_r+0x2e6>
 80118fa:	9e08      	ldr	r6, [sp, #32]
 80118fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80118fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011900:	2b00      	cmp	r3, #0
 8011902:	d100      	bne.n	8011906 <_dtoa_r+0x3aa>
 8011904:	e094      	b.n	8011a30 <_dtoa_r+0x4d4>
 8011906:	2200      	movs	r2, #0
 8011908:	0030      	movs	r0, r6
 801190a:	0039      	movs	r1, r7
 801190c:	4bd1      	ldr	r3, [pc, #836]	; (8011c54 <_dtoa_r+0x6f8>)
 801190e:	f7ee fda1 	bl	8000454 <__aeabi_dcmplt>
 8011912:	2800      	cmp	r0, #0
 8011914:	d100      	bne.n	8011918 <_dtoa_r+0x3bc>
 8011916:	e08b      	b.n	8011a30 <_dtoa_r+0x4d4>
 8011918:	9b07      	ldr	r3, [sp, #28]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d100      	bne.n	8011920 <_dtoa_r+0x3c4>
 801191e:	e087      	b.n	8011a30 <_dtoa_r+0x4d4>
 8011920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011922:	2b00      	cmp	r3, #0
 8011924:	dd45      	ble.n	80119b2 <_dtoa_r+0x456>
 8011926:	9b03      	ldr	r3, [sp, #12]
 8011928:	2200      	movs	r2, #0
 801192a:	3b01      	subs	r3, #1
 801192c:	930e      	str	r3, [sp, #56]	; 0x38
 801192e:	0030      	movs	r0, r6
 8011930:	4bc9      	ldr	r3, [pc, #804]	; (8011c58 <_dtoa_r+0x6fc>)
 8011932:	0039      	movs	r1, r7
 8011934:	f7ef fe9a 	bl	800166c <__aeabi_dmul>
 8011938:	9008      	str	r0, [sp, #32]
 801193a:	9109      	str	r1, [sp, #36]	; 0x24
 801193c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801193e:	3401      	adds	r4, #1
 8011940:	0020      	movs	r0, r4
 8011942:	9e08      	ldr	r6, [sp, #32]
 8011944:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011946:	9312      	str	r3, [sp, #72]	; 0x48
 8011948:	f7f0 fd28 	bl	800239c <__aeabi_i2d>
 801194c:	0032      	movs	r2, r6
 801194e:	003b      	movs	r3, r7
 8011950:	f7ef fe8c 	bl	800166c <__aeabi_dmul>
 8011954:	2200      	movs	r2, #0
 8011956:	4bc1      	ldr	r3, [pc, #772]	; (8011c5c <_dtoa_r+0x700>)
 8011958:	f7ee ff2e 	bl	80007b8 <__aeabi_dadd>
 801195c:	4ac0      	ldr	r2, [pc, #768]	; (8011c60 <_dtoa_r+0x704>)
 801195e:	9014      	str	r0, [sp, #80]	; 0x50
 8011960:	9115      	str	r1, [sp, #84]	; 0x54
 8011962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011964:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011966:	4694      	mov	ip, r2
 8011968:	9308      	str	r3, [sp, #32]
 801196a:	9409      	str	r4, [sp, #36]	; 0x24
 801196c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801196e:	4463      	add	r3, ip
 8011970:	9318      	str	r3, [sp, #96]	; 0x60
 8011972:	9309      	str	r3, [sp, #36]	; 0x24
 8011974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011976:	2b00      	cmp	r3, #0
 8011978:	d15e      	bne.n	8011a38 <_dtoa_r+0x4dc>
 801197a:	2200      	movs	r2, #0
 801197c:	4bb9      	ldr	r3, [pc, #740]	; (8011c64 <_dtoa_r+0x708>)
 801197e:	0030      	movs	r0, r6
 8011980:	0039      	movs	r1, r7
 8011982:	f7f0 f935 	bl	8001bf0 <__aeabi_dsub>
 8011986:	9a08      	ldr	r2, [sp, #32]
 8011988:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801198a:	0004      	movs	r4, r0
 801198c:	000d      	movs	r5, r1
 801198e:	f7ee fd75 	bl	800047c <__aeabi_dcmpgt>
 8011992:	2800      	cmp	r0, #0
 8011994:	d000      	beq.n	8011998 <_dtoa_r+0x43c>
 8011996:	e2b3      	b.n	8011f00 <_dtoa_r+0x9a4>
 8011998:	48b3      	ldr	r0, [pc, #716]	; (8011c68 <_dtoa_r+0x70c>)
 801199a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801199c:	4684      	mov	ip, r0
 801199e:	4461      	add	r1, ip
 80119a0:	000b      	movs	r3, r1
 80119a2:	0020      	movs	r0, r4
 80119a4:	0029      	movs	r1, r5
 80119a6:	9a08      	ldr	r2, [sp, #32]
 80119a8:	f7ee fd54 	bl	8000454 <__aeabi_dcmplt>
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d000      	beq.n	80119b2 <_dtoa_r+0x456>
 80119b0:	e2a3      	b.n	8011efa <_dtoa_r+0x99e>
 80119b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80119b6:	9308      	str	r3, [sp, #32]
 80119b8:	9409      	str	r4, [sp, #36]	; 0x24
 80119ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80119bc:	2b00      	cmp	r3, #0
 80119be:	da00      	bge.n	80119c2 <_dtoa_r+0x466>
 80119c0:	e179      	b.n	8011cb6 <_dtoa_r+0x75a>
 80119c2:	9a03      	ldr	r2, [sp, #12]
 80119c4:	2a0e      	cmp	r2, #14
 80119c6:	dd00      	ble.n	80119ca <_dtoa_r+0x46e>
 80119c8:	e175      	b.n	8011cb6 <_dtoa_r+0x75a>
 80119ca:	4ba0      	ldr	r3, [pc, #640]	; (8011c4c <_dtoa_r+0x6f0>)
 80119cc:	00d2      	lsls	r2, r2, #3
 80119ce:	189b      	adds	r3, r3, r2
 80119d0:	681e      	ldr	r6, [r3, #0]
 80119d2:	685f      	ldr	r7, [r3, #4]
 80119d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	db00      	blt.n	80119dc <_dtoa_r+0x480>
 80119da:	e0e5      	b.n	8011ba8 <_dtoa_r+0x64c>
 80119dc:	9b07      	ldr	r3, [sp, #28]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	dd00      	ble.n	80119e4 <_dtoa_r+0x488>
 80119e2:	e0e1      	b.n	8011ba8 <_dtoa_r+0x64c>
 80119e4:	d000      	beq.n	80119e8 <_dtoa_r+0x48c>
 80119e6:	e288      	b.n	8011efa <_dtoa_r+0x99e>
 80119e8:	2200      	movs	r2, #0
 80119ea:	0030      	movs	r0, r6
 80119ec:	0039      	movs	r1, r7
 80119ee:	4b9d      	ldr	r3, [pc, #628]	; (8011c64 <_dtoa_r+0x708>)
 80119f0:	f7ef fe3c 	bl	800166c <__aeabi_dmul>
 80119f4:	9a08      	ldr	r2, [sp, #32]
 80119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f8:	f7ee fd4a 	bl	8000490 <__aeabi_dcmpge>
 80119fc:	9e07      	ldr	r6, [sp, #28]
 80119fe:	0037      	movs	r7, r6
 8011a00:	2800      	cmp	r0, #0
 8011a02:	d000      	beq.n	8011a06 <_dtoa_r+0x4aa>
 8011a04:	e25f      	b.n	8011ec6 <_dtoa_r+0x96a>
 8011a06:	9b06      	ldr	r3, [sp, #24]
 8011a08:	9a06      	ldr	r2, [sp, #24]
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	9308      	str	r3, [sp, #32]
 8011a0e:	2331      	movs	r3, #49	; 0x31
 8011a10:	7013      	strb	r3, [r2, #0]
 8011a12:	9b03      	ldr	r3, [sp, #12]
 8011a14:	3301      	adds	r3, #1
 8011a16:	9303      	str	r3, [sp, #12]
 8011a18:	e25a      	b.n	8011ed0 <_dtoa_r+0x974>
 8011a1a:	423d      	tst	r5, r7
 8011a1c:	d005      	beq.n	8011a2a <_dtoa_r+0x4ce>
 8011a1e:	6832      	ldr	r2, [r6, #0]
 8011a20:	6873      	ldr	r3, [r6, #4]
 8011a22:	f7ef fe23 	bl	800166c <__aeabi_dmul>
 8011a26:	003b      	movs	r3, r7
 8011a28:	3401      	adds	r4, #1
 8011a2a:	106d      	asrs	r5, r5, #1
 8011a2c:	3608      	adds	r6, #8
 8011a2e:	e75f      	b.n	80118f0 <_dtoa_r+0x394>
 8011a30:	9b03      	ldr	r3, [sp, #12]
 8011a32:	930e      	str	r3, [sp, #56]	; 0x38
 8011a34:	9b07      	ldr	r3, [sp, #28]
 8011a36:	e783      	b.n	8011940 <_dtoa_r+0x3e4>
 8011a38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a3a:	4b84      	ldr	r3, [pc, #528]	; (8011c4c <_dtoa_r+0x6f0>)
 8011a3c:	3a01      	subs	r2, #1
 8011a3e:	00d2      	lsls	r2, r2, #3
 8011a40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011a42:	189b      	adds	r3, r3, r2
 8011a44:	9c08      	ldr	r4, [sp, #32]
 8011a46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	2900      	cmp	r1, #0
 8011a4e:	d051      	beq.n	8011af4 <_dtoa_r+0x598>
 8011a50:	2000      	movs	r0, #0
 8011a52:	4986      	ldr	r1, [pc, #536]	; (8011c6c <_dtoa_r+0x710>)
 8011a54:	f7ef fa10 	bl	8000e78 <__aeabi_ddiv>
 8011a58:	0022      	movs	r2, r4
 8011a5a:	002b      	movs	r3, r5
 8011a5c:	f7f0 f8c8 	bl	8001bf0 <__aeabi_dsub>
 8011a60:	9a06      	ldr	r2, [sp, #24]
 8011a62:	0004      	movs	r4, r0
 8011a64:	4694      	mov	ip, r2
 8011a66:	000d      	movs	r5, r1
 8011a68:	9b06      	ldr	r3, [sp, #24]
 8011a6a:	9314      	str	r3, [sp, #80]	; 0x50
 8011a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a6e:	4463      	add	r3, ip
 8011a70:	9318      	str	r3, [sp, #96]	; 0x60
 8011a72:	0039      	movs	r1, r7
 8011a74:	0030      	movs	r0, r6
 8011a76:	f7f0 fc5b 	bl	8002330 <__aeabi_d2iz>
 8011a7a:	9012      	str	r0, [sp, #72]	; 0x48
 8011a7c:	f7f0 fc8e 	bl	800239c <__aeabi_i2d>
 8011a80:	0002      	movs	r2, r0
 8011a82:	000b      	movs	r3, r1
 8011a84:	0030      	movs	r0, r6
 8011a86:	0039      	movs	r1, r7
 8011a88:	f7f0 f8b2 	bl	8001bf0 <__aeabi_dsub>
 8011a8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a90:	3301      	adds	r3, #1
 8011a92:	9308      	str	r3, [sp, #32]
 8011a94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a96:	0006      	movs	r6, r0
 8011a98:	3330      	adds	r3, #48	; 0x30
 8011a9a:	7013      	strb	r3, [r2, #0]
 8011a9c:	0022      	movs	r2, r4
 8011a9e:	002b      	movs	r3, r5
 8011aa0:	000f      	movs	r7, r1
 8011aa2:	f7ee fcd7 	bl	8000454 <__aeabi_dcmplt>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d174      	bne.n	8011b94 <_dtoa_r+0x638>
 8011aaa:	0032      	movs	r2, r6
 8011aac:	003b      	movs	r3, r7
 8011aae:	2000      	movs	r0, #0
 8011ab0:	4968      	ldr	r1, [pc, #416]	; (8011c54 <_dtoa_r+0x6f8>)
 8011ab2:	f7f0 f89d 	bl	8001bf0 <__aeabi_dsub>
 8011ab6:	0022      	movs	r2, r4
 8011ab8:	002b      	movs	r3, r5
 8011aba:	f7ee fccb 	bl	8000454 <__aeabi_dcmplt>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d000      	beq.n	8011ac4 <_dtoa_r+0x568>
 8011ac2:	e0d7      	b.n	8011c74 <_dtoa_r+0x718>
 8011ac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011ac6:	9a08      	ldr	r2, [sp, #32]
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d100      	bne.n	8011ace <_dtoa_r+0x572>
 8011acc:	e771      	b.n	80119b2 <_dtoa_r+0x456>
 8011ace:	2200      	movs	r2, #0
 8011ad0:	0020      	movs	r0, r4
 8011ad2:	0029      	movs	r1, r5
 8011ad4:	4b60      	ldr	r3, [pc, #384]	; (8011c58 <_dtoa_r+0x6fc>)
 8011ad6:	f7ef fdc9 	bl	800166c <__aeabi_dmul>
 8011ada:	4b5f      	ldr	r3, [pc, #380]	; (8011c58 <_dtoa_r+0x6fc>)
 8011adc:	0004      	movs	r4, r0
 8011ade:	000d      	movs	r5, r1
 8011ae0:	0030      	movs	r0, r6
 8011ae2:	0039      	movs	r1, r7
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	f7ef fdc1 	bl	800166c <__aeabi_dmul>
 8011aea:	9b08      	ldr	r3, [sp, #32]
 8011aec:	0006      	movs	r6, r0
 8011aee:	000f      	movs	r7, r1
 8011af0:	9314      	str	r3, [sp, #80]	; 0x50
 8011af2:	e7be      	b.n	8011a72 <_dtoa_r+0x516>
 8011af4:	0020      	movs	r0, r4
 8011af6:	0029      	movs	r1, r5
 8011af8:	f7ef fdb8 	bl	800166c <__aeabi_dmul>
 8011afc:	9a06      	ldr	r2, [sp, #24]
 8011afe:	9b06      	ldr	r3, [sp, #24]
 8011b00:	4694      	mov	ip, r2
 8011b02:	9308      	str	r3, [sp, #32]
 8011b04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b06:	9014      	str	r0, [sp, #80]	; 0x50
 8011b08:	9115      	str	r1, [sp, #84]	; 0x54
 8011b0a:	4463      	add	r3, ip
 8011b0c:	9319      	str	r3, [sp, #100]	; 0x64
 8011b0e:	0030      	movs	r0, r6
 8011b10:	0039      	movs	r1, r7
 8011b12:	f7f0 fc0d 	bl	8002330 <__aeabi_d2iz>
 8011b16:	9018      	str	r0, [sp, #96]	; 0x60
 8011b18:	f7f0 fc40 	bl	800239c <__aeabi_i2d>
 8011b1c:	0002      	movs	r2, r0
 8011b1e:	000b      	movs	r3, r1
 8011b20:	0030      	movs	r0, r6
 8011b22:	0039      	movs	r1, r7
 8011b24:	f7f0 f864 	bl	8001bf0 <__aeabi_dsub>
 8011b28:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011b2a:	9b08      	ldr	r3, [sp, #32]
 8011b2c:	3630      	adds	r6, #48	; 0x30
 8011b2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011b30:	701e      	strb	r6, [r3, #0]
 8011b32:	3301      	adds	r3, #1
 8011b34:	0004      	movs	r4, r0
 8011b36:	000d      	movs	r5, r1
 8011b38:	9308      	str	r3, [sp, #32]
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	d12d      	bne.n	8011b9a <_dtoa_r+0x63e>
 8011b3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011b40:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011b42:	9a06      	ldr	r2, [sp, #24]
 8011b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b46:	4694      	mov	ip, r2
 8011b48:	4463      	add	r3, ip
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	9308      	str	r3, [sp, #32]
 8011b4e:	4b47      	ldr	r3, [pc, #284]	; (8011c6c <_dtoa_r+0x710>)
 8011b50:	f7ee fe32 	bl	80007b8 <__aeabi_dadd>
 8011b54:	0002      	movs	r2, r0
 8011b56:	000b      	movs	r3, r1
 8011b58:	0020      	movs	r0, r4
 8011b5a:	0029      	movs	r1, r5
 8011b5c:	f7ee fc8e 	bl	800047c <__aeabi_dcmpgt>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	d000      	beq.n	8011b66 <_dtoa_r+0x60a>
 8011b64:	e086      	b.n	8011c74 <_dtoa_r+0x718>
 8011b66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	493f      	ldr	r1, [pc, #252]	; (8011c6c <_dtoa_r+0x710>)
 8011b6e:	f7f0 f83f 	bl	8001bf0 <__aeabi_dsub>
 8011b72:	0002      	movs	r2, r0
 8011b74:	000b      	movs	r3, r1
 8011b76:	0020      	movs	r0, r4
 8011b78:	0029      	movs	r1, r5
 8011b7a:	f7ee fc6b 	bl	8000454 <__aeabi_dcmplt>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d100      	bne.n	8011b84 <_dtoa_r+0x628>
 8011b82:	e716      	b.n	80119b2 <_dtoa_r+0x456>
 8011b84:	9b08      	ldr	r3, [sp, #32]
 8011b86:	001a      	movs	r2, r3
 8011b88:	3a01      	subs	r2, #1
 8011b8a:	9208      	str	r2, [sp, #32]
 8011b8c:	7812      	ldrb	r2, [r2, #0]
 8011b8e:	2a30      	cmp	r2, #48	; 0x30
 8011b90:	d0f8      	beq.n	8011b84 <_dtoa_r+0x628>
 8011b92:	9308      	str	r3, [sp, #32]
 8011b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b96:	9303      	str	r3, [sp, #12]
 8011b98:	e046      	b.n	8011c28 <_dtoa_r+0x6cc>
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	4b2e      	ldr	r3, [pc, #184]	; (8011c58 <_dtoa_r+0x6fc>)
 8011b9e:	f7ef fd65 	bl	800166c <__aeabi_dmul>
 8011ba2:	0006      	movs	r6, r0
 8011ba4:	000f      	movs	r7, r1
 8011ba6:	e7b2      	b.n	8011b0e <_dtoa_r+0x5b2>
 8011ba8:	9b06      	ldr	r3, [sp, #24]
 8011baa:	9a06      	ldr	r2, [sp, #24]
 8011bac:	930a      	str	r3, [sp, #40]	; 0x28
 8011bae:	9b07      	ldr	r3, [sp, #28]
 8011bb0:	9c08      	ldr	r4, [sp, #32]
 8011bb2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011bb4:	3b01      	subs	r3, #1
 8011bb6:	189b      	adds	r3, r3, r2
 8011bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bba:	0032      	movs	r2, r6
 8011bbc:	003b      	movs	r3, r7
 8011bbe:	0020      	movs	r0, r4
 8011bc0:	0029      	movs	r1, r5
 8011bc2:	f7ef f959 	bl	8000e78 <__aeabi_ddiv>
 8011bc6:	f7f0 fbb3 	bl	8002330 <__aeabi_d2iz>
 8011bca:	9007      	str	r0, [sp, #28]
 8011bcc:	f7f0 fbe6 	bl	800239c <__aeabi_i2d>
 8011bd0:	0032      	movs	r2, r6
 8011bd2:	003b      	movs	r3, r7
 8011bd4:	f7ef fd4a 	bl	800166c <__aeabi_dmul>
 8011bd8:	0002      	movs	r2, r0
 8011bda:	000b      	movs	r3, r1
 8011bdc:	0020      	movs	r0, r4
 8011bde:	0029      	movs	r1, r5
 8011be0:	f7f0 f806 	bl	8001bf0 <__aeabi_dsub>
 8011be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be6:	001a      	movs	r2, r3
 8011be8:	3201      	adds	r2, #1
 8011bea:	920a      	str	r2, [sp, #40]	; 0x28
 8011bec:	9208      	str	r2, [sp, #32]
 8011bee:	9a07      	ldr	r2, [sp, #28]
 8011bf0:	3230      	adds	r2, #48	; 0x30
 8011bf2:	701a      	strb	r2, [r3, #0]
 8011bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d14f      	bne.n	8011c9a <_dtoa_r+0x73e>
 8011bfa:	0002      	movs	r2, r0
 8011bfc:	000b      	movs	r3, r1
 8011bfe:	f7ee fddb 	bl	80007b8 <__aeabi_dadd>
 8011c02:	0032      	movs	r2, r6
 8011c04:	003b      	movs	r3, r7
 8011c06:	0004      	movs	r4, r0
 8011c08:	000d      	movs	r5, r1
 8011c0a:	f7ee fc37 	bl	800047c <__aeabi_dcmpgt>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d12e      	bne.n	8011c70 <_dtoa_r+0x714>
 8011c12:	0032      	movs	r2, r6
 8011c14:	003b      	movs	r3, r7
 8011c16:	0020      	movs	r0, r4
 8011c18:	0029      	movs	r1, r5
 8011c1a:	f7ee fc15 	bl	8000448 <__aeabi_dcmpeq>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d002      	beq.n	8011c28 <_dtoa_r+0x6cc>
 8011c22:	9b07      	ldr	r3, [sp, #28]
 8011c24:	07de      	lsls	r6, r3, #31
 8011c26:	d423      	bmi.n	8011c70 <_dtoa_r+0x714>
 8011c28:	9905      	ldr	r1, [sp, #20]
 8011c2a:	9804      	ldr	r0, [sp, #16]
 8011c2c:	f7fc f8fe 	bl	800de2c <_Bfree>
 8011c30:	2300      	movs	r3, #0
 8011c32:	9a08      	ldr	r2, [sp, #32]
 8011c34:	7013      	strb	r3, [r2, #0]
 8011c36:	9b03      	ldr	r3, [sp, #12]
 8011c38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	6013      	str	r3, [r2, #0]
 8011c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d100      	bne.n	8011c46 <_dtoa_r+0x6ea>
 8011c44:	e4bd      	b.n	80115c2 <_dtoa_r+0x66>
 8011c46:	9a08      	ldr	r2, [sp, #32]
 8011c48:	601a      	str	r2, [r3, #0]
 8011c4a:	e4ba      	b.n	80115c2 <_dtoa_r+0x66>
 8011c4c:	08015ba0 	.word	0x08015ba0
 8011c50:	08015b78 	.word	0x08015b78
 8011c54:	3ff00000 	.word	0x3ff00000
 8011c58:	40240000 	.word	0x40240000
 8011c5c:	401c0000 	.word	0x401c0000
 8011c60:	fcc00000 	.word	0xfcc00000
 8011c64:	40140000 	.word	0x40140000
 8011c68:	7cc00000 	.word	0x7cc00000
 8011c6c:	3fe00000 	.word	0x3fe00000
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	930e      	str	r3, [sp, #56]	; 0x38
 8011c74:	9b08      	ldr	r3, [sp, #32]
 8011c76:	9308      	str	r3, [sp, #32]
 8011c78:	3b01      	subs	r3, #1
 8011c7a:	781a      	ldrb	r2, [r3, #0]
 8011c7c:	2a39      	cmp	r2, #57	; 0x39
 8011c7e:	d108      	bne.n	8011c92 <_dtoa_r+0x736>
 8011c80:	9a06      	ldr	r2, [sp, #24]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d1f7      	bne.n	8011c76 <_dtoa_r+0x71a>
 8011c86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c88:	9906      	ldr	r1, [sp, #24]
 8011c8a:	3201      	adds	r2, #1
 8011c8c:	920e      	str	r2, [sp, #56]	; 0x38
 8011c8e:	2230      	movs	r2, #48	; 0x30
 8011c90:	700a      	strb	r2, [r1, #0]
 8011c92:	781a      	ldrb	r2, [r3, #0]
 8011c94:	3201      	adds	r2, #1
 8011c96:	701a      	strb	r2, [r3, #0]
 8011c98:	e77c      	b.n	8011b94 <_dtoa_r+0x638>
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	4ba9      	ldr	r3, [pc, #676]	; (8011f44 <_dtoa_r+0x9e8>)
 8011c9e:	f7ef fce5 	bl	800166c <__aeabi_dmul>
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	0004      	movs	r4, r0
 8011ca8:	000d      	movs	r5, r1
 8011caa:	f7ee fbcd 	bl	8000448 <__aeabi_dcmpeq>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	d100      	bne.n	8011cb4 <_dtoa_r+0x758>
 8011cb2:	e782      	b.n	8011bba <_dtoa_r+0x65e>
 8011cb4:	e7b8      	b.n	8011c28 <_dtoa_r+0x6cc>
 8011cb6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011cb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011cba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011cbc:	2f00      	cmp	r7, #0
 8011cbe:	d012      	beq.n	8011ce6 <_dtoa_r+0x78a>
 8011cc0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011cc2:	2a01      	cmp	r2, #1
 8011cc4:	dc6e      	bgt.n	8011da4 <_dtoa_r+0x848>
 8011cc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	d065      	beq.n	8011d98 <_dtoa_r+0x83c>
 8011ccc:	4a9e      	ldr	r2, [pc, #632]	; (8011f48 <_dtoa_r+0x9ec>)
 8011cce:	189b      	adds	r3, r3, r2
 8011cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cd2:	2101      	movs	r1, #1
 8011cd4:	18d2      	adds	r2, r2, r3
 8011cd6:	920a      	str	r2, [sp, #40]	; 0x28
 8011cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cda:	9804      	ldr	r0, [sp, #16]
 8011cdc:	18d3      	adds	r3, r2, r3
 8011cde:	930c      	str	r3, [sp, #48]	; 0x30
 8011ce0:	f7fc f986 	bl	800dff0 <__i2b>
 8011ce4:	0007      	movs	r7, r0
 8011ce6:	2c00      	cmp	r4, #0
 8011ce8:	d00e      	beq.n	8011d08 <_dtoa_r+0x7ac>
 8011cea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	dd0b      	ble.n	8011d08 <_dtoa_r+0x7ac>
 8011cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cf2:	0023      	movs	r3, r4
 8011cf4:	4294      	cmp	r4, r2
 8011cf6:	dd00      	ble.n	8011cfa <_dtoa_r+0x79e>
 8011cf8:	0013      	movs	r3, r2
 8011cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cfc:	1ae4      	subs	r4, r4, r3
 8011cfe:	1ad2      	subs	r2, r2, r3
 8011d00:	920a      	str	r2, [sp, #40]	; 0x28
 8011d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	930c      	str	r3, [sp, #48]	; 0x30
 8011d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d01e      	beq.n	8011d4c <_dtoa_r+0x7f0>
 8011d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d05c      	beq.n	8011dce <_dtoa_r+0x872>
 8011d14:	2d00      	cmp	r5, #0
 8011d16:	dd10      	ble.n	8011d3a <_dtoa_r+0x7de>
 8011d18:	0039      	movs	r1, r7
 8011d1a:	002a      	movs	r2, r5
 8011d1c:	9804      	ldr	r0, [sp, #16]
 8011d1e:	f7fc fa2f 	bl	800e180 <__pow5mult>
 8011d22:	9a05      	ldr	r2, [sp, #20]
 8011d24:	0001      	movs	r1, r0
 8011d26:	0007      	movs	r7, r0
 8011d28:	9804      	ldr	r0, [sp, #16]
 8011d2a:	f7fc f979 	bl	800e020 <__multiply>
 8011d2e:	0006      	movs	r6, r0
 8011d30:	9905      	ldr	r1, [sp, #20]
 8011d32:	9804      	ldr	r0, [sp, #16]
 8011d34:	f7fc f87a 	bl	800de2c <_Bfree>
 8011d38:	9605      	str	r6, [sp, #20]
 8011d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d3c:	1b5a      	subs	r2, r3, r5
 8011d3e:	42ab      	cmp	r3, r5
 8011d40:	d004      	beq.n	8011d4c <_dtoa_r+0x7f0>
 8011d42:	9905      	ldr	r1, [sp, #20]
 8011d44:	9804      	ldr	r0, [sp, #16]
 8011d46:	f7fc fa1b 	bl	800e180 <__pow5mult>
 8011d4a:	9005      	str	r0, [sp, #20]
 8011d4c:	2101      	movs	r1, #1
 8011d4e:	9804      	ldr	r0, [sp, #16]
 8011d50:	f7fc f94e 	bl	800dff0 <__i2b>
 8011d54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d56:	0006      	movs	r6, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	dd3a      	ble.n	8011dd2 <_dtoa_r+0x876>
 8011d5c:	001a      	movs	r2, r3
 8011d5e:	0001      	movs	r1, r0
 8011d60:	9804      	ldr	r0, [sp, #16]
 8011d62:	f7fc fa0d 	bl	800e180 <__pow5mult>
 8011d66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d68:	0006      	movs	r6, r0
 8011d6a:	2500      	movs	r5, #0
 8011d6c:	2b01      	cmp	r3, #1
 8011d6e:	dc38      	bgt.n	8011de2 <_dtoa_r+0x886>
 8011d70:	2500      	movs	r5, #0
 8011d72:	9b08      	ldr	r3, [sp, #32]
 8011d74:	42ab      	cmp	r3, r5
 8011d76:	d130      	bne.n	8011dda <_dtoa_r+0x87e>
 8011d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d7a:	031b      	lsls	r3, r3, #12
 8011d7c:	42ab      	cmp	r3, r5
 8011d7e:	d12c      	bne.n	8011dda <_dtoa_r+0x87e>
 8011d80:	4b72      	ldr	r3, [pc, #456]	; (8011f4c <_dtoa_r+0x9f0>)
 8011d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d84:	4213      	tst	r3, r2
 8011d86:	d028      	beq.n	8011dda <_dtoa_r+0x87e>
 8011d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d8a:	3501      	adds	r5, #1
 8011d8c:	3301      	adds	r3, #1
 8011d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d92:	3301      	adds	r3, #1
 8011d94:	930c      	str	r3, [sp, #48]	; 0x30
 8011d96:	e020      	b.n	8011dda <_dtoa_r+0x87e>
 8011d98:	2336      	movs	r3, #54	; 0x36
 8011d9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011d9c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011d9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011da0:	1a9b      	subs	r3, r3, r2
 8011da2:	e795      	b.n	8011cd0 <_dtoa_r+0x774>
 8011da4:	9b07      	ldr	r3, [sp, #28]
 8011da6:	1e5d      	subs	r5, r3, #1
 8011da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011daa:	42ab      	cmp	r3, r5
 8011dac:	db07      	blt.n	8011dbe <_dtoa_r+0x862>
 8011dae:	1b5d      	subs	r5, r3, r5
 8011db0:	9b07      	ldr	r3, [sp, #28]
 8011db2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	da8b      	bge.n	8011cd0 <_dtoa_r+0x774>
 8011db8:	1ae4      	subs	r4, r4, r3
 8011dba:	2300      	movs	r3, #0
 8011dbc:	e788      	b.n	8011cd0 <_dtoa_r+0x774>
 8011dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011dc2:	1aeb      	subs	r3, r5, r3
 8011dc4:	18d3      	adds	r3, r2, r3
 8011dc6:	950d      	str	r5, [sp, #52]	; 0x34
 8011dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8011dca:	2500      	movs	r5, #0
 8011dcc:	e7f0      	b.n	8011db0 <_dtoa_r+0x854>
 8011dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dd0:	e7b7      	b.n	8011d42 <_dtoa_r+0x7e6>
 8011dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011dd4:	2500      	movs	r5, #0
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	ddca      	ble.n	8011d70 <_dtoa_r+0x814>
 8011dda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ddc:	2001      	movs	r0, #1
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d008      	beq.n	8011df4 <_dtoa_r+0x898>
 8011de2:	6933      	ldr	r3, [r6, #16]
 8011de4:	3303      	adds	r3, #3
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	18f3      	adds	r3, r6, r3
 8011dea:	6858      	ldr	r0, [r3, #4]
 8011dec:	f7fc f8b8 	bl	800df60 <__hi0bits>
 8011df0:	2320      	movs	r3, #32
 8011df2:	1a18      	subs	r0, r3, r0
 8011df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011df6:	1818      	adds	r0, r3, r0
 8011df8:	0002      	movs	r2, r0
 8011dfa:	231f      	movs	r3, #31
 8011dfc:	401a      	ands	r2, r3
 8011dfe:	4218      	tst	r0, r3
 8011e00:	d047      	beq.n	8011e92 <_dtoa_r+0x936>
 8011e02:	3301      	adds	r3, #1
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	2b04      	cmp	r3, #4
 8011e08:	dd3f      	ble.n	8011e8a <_dtoa_r+0x92e>
 8011e0a:	231c      	movs	r3, #28
 8011e0c:	1a9b      	subs	r3, r3, r2
 8011e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e10:	18e4      	adds	r4, r4, r3
 8011e12:	18d2      	adds	r2, r2, r3
 8011e14:	920a      	str	r2, [sp, #40]	; 0x28
 8011e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e18:	18d3      	adds	r3, r2, r3
 8011e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	dd05      	ble.n	8011e2e <_dtoa_r+0x8d2>
 8011e22:	001a      	movs	r2, r3
 8011e24:	9905      	ldr	r1, [sp, #20]
 8011e26:	9804      	ldr	r0, [sp, #16]
 8011e28:	f7fc f9ec 	bl	800e204 <__lshift>
 8011e2c:	9005      	str	r0, [sp, #20]
 8011e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	dd05      	ble.n	8011e40 <_dtoa_r+0x8e4>
 8011e34:	0031      	movs	r1, r6
 8011e36:	001a      	movs	r2, r3
 8011e38:	9804      	ldr	r0, [sp, #16]
 8011e3a:	f7fc f9e3 	bl	800e204 <__lshift>
 8011e3e:	0006      	movs	r6, r0
 8011e40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d027      	beq.n	8011e96 <_dtoa_r+0x93a>
 8011e46:	0031      	movs	r1, r6
 8011e48:	9805      	ldr	r0, [sp, #20]
 8011e4a:	f7fc fa49 	bl	800e2e0 <__mcmp>
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	da21      	bge.n	8011e96 <_dtoa_r+0x93a>
 8011e52:	9b03      	ldr	r3, [sp, #12]
 8011e54:	220a      	movs	r2, #10
 8011e56:	3b01      	subs	r3, #1
 8011e58:	9303      	str	r3, [sp, #12]
 8011e5a:	9905      	ldr	r1, [sp, #20]
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9804      	ldr	r0, [sp, #16]
 8011e60:	f7fb ffee 	bl	800de40 <__multadd>
 8011e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e66:	9005      	str	r0, [sp, #20]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d100      	bne.n	8011e6e <_dtoa_r+0x912>
 8011e6c:	e15d      	b.n	801212a <_dtoa_r+0xbce>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	0039      	movs	r1, r7
 8011e72:	220a      	movs	r2, #10
 8011e74:	9804      	ldr	r0, [sp, #16]
 8011e76:	f7fb ffe3 	bl	800de40 <__multadd>
 8011e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e7c:	0007      	movs	r7, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	dc49      	bgt.n	8011f16 <_dtoa_r+0x9ba>
 8011e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	dc0e      	bgt.n	8011ea6 <_dtoa_r+0x94a>
 8011e88:	e045      	b.n	8011f16 <_dtoa_r+0x9ba>
 8011e8a:	2b04      	cmp	r3, #4
 8011e8c:	d0c6      	beq.n	8011e1c <_dtoa_r+0x8c0>
 8011e8e:	331c      	adds	r3, #28
 8011e90:	e7bd      	b.n	8011e0e <_dtoa_r+0x8b2>
 8011e92:	0013      	movs	r3, r2
 8011e94:	e7fb      	b.n	8011e8e <_dtoa_r+0x932>
 8011e96:	9b07      	ldr	r3, [sp, #28]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dc36      	bgt.n	8011f0a <_dtoa_r+0x9ae>
 8011e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	dd33      	ble.n	8011f0a <_dtoa_r+0x9ae>
 8011ea2:	9b07      	ldr	r3, [sp, #28]
 8011ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10c      	bne.n	8011ec6 <_dtoa_r+0x96a>
 8011eac:	0031      	movs	r1, r6
 8011eae:	2205      	movs	r2, #5
 8011eb0:	9804      	ldr	r0, [sp, #16]
 8011eb2:	f7fb ffc5 	bl	800de40 <__multadd>
 8011eb6:	0006      	movs	r6, r0
 8011eb8:	0001      	movs	r1, r0
 8011eba:	9805      	ldr	r0, [sp, #20]
 8011ebc:	f7fc fa10 	bl	800e2e0 <__mcmp>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	dd00      	ble.n	8011ec6 <_dtoa_r+0x96a>
 8011ec4:	e59f      	b.n	8011a06 <_dtoa_r+0x4aa>
 8011ec6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011ec8:	43db      	mvns	r3, r3
 8011eca:	9303      	str	r3, [sp, #12]
 8011ecc:	9b06      	ldr	r3, [sp, #24]
 8011ece:	9308      	str	r3, [sp, #32]
 8011ed0:	2500      	movs	r5, #0
 8011ed2:	0031      	movs	r1, r6
 8011ed4:	9804      	ldr	r0, [sp, #16]
 8011ed6:	f7fb ffa9 	bl	800de2c <_Bfree>
 8011eda:	2f00      	cmp	r7, #0
 8011edc:	d100      	bne.n	8011ee0 <_dtoa_r+0x984>
 8011ede:	e6a3      	b.n	8011c28 <_dtoa_r+0x6cc>
 8011ee0:	2d00      	cmp	r5, #0
 8011ee2:	d005      	beq.n	8011ef0 <_dtoa_r+0x994>
 8011ee4:	42bd      	cmp	r5, r7
 8011ee6:	d003      	beq.n	8011ef0 <_dtoa_r+0x994>
 8011ee8:	0029      	movs	r1, r5
 8011eea:	9804      	ldr	r0, [sp, #16]
 8011eec:	f7fb ff9e 	bl	800de2c <_Bfree>
 8011ef0:	0039      	movs	r1, r7
 8011ef2:	9804      	ldr	r0, [sp, #16]
 8011ef4:	f7fb ff9a 	bl	800de2c <_Bfree>
 8011ef8:	e696      	b.n	8011c28 <_dtoa_r+0x6cc>
 8011efa:	2600      	movs	r6, #0
 8011efc:	0037      	movs	r7, r6
 8011efe:	e7e2      	b.n	8011ec6 <_dtoa_r+0x96a>
 8011f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f02:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8011f04:	9303      	str	r3, [sp, #12]
 8011f06:	0037      	movs	r7, r6
 8011f08:	e57d      	b.n	8011a06 <_dtoa_r+0x4aa>
 8011f0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d100      	bne.n	8011f12 <_dtoa_r+0x9b6>
 8011f10:	e0c3      	b.n	801209a <_dtoa_r+0xb3e>
 8011f12:	9b07      	ldr	r3, [sp, #28]
 8011f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f16:	2c00      	cmp	r4, #0
 8011f18:	dd05      	ble.n	8011f26 <_dtoa_r+0x9ca>
 8011f1a:	0039      	movs	r1, r7
 8011f1c:	0022      	movs	r2, r4
 8011f1e:	9804      	ldr	r0, [sp, #16]
 8011f20:	f7fc f970 	bl	800e204 <__lshift>
 8011f24:	0007      	movs	r7, r0
 8011f26:	0038      	movs	r0, r7
 8011f28:	2d00      	cmp	r5, #0
 8011f2a:	d024      	beq.n	8011f76 <_dtoa_r+0xa1a>
 8011f2c:	6879      	ldr	r1, [r7, #4]
 8011f2e:	9804      	ldr	r0, [sp, #16]
 8011f30:	f7fb ff54 	bl	800dddc <_Balloc>
 8011f34:	1e04      	subs	r4, r0, #0
 8011f36:	d111      	bne.n	8011f5c <_dtoa_r+0xa00>
 8011f38:	0022      	movs	r2, r4
 8011f3a:	4b05      	ldr	r3, [pc, #20]	; (8011f50 <_dtoa_r+0x9f4>)
 8011f3c:	4805      	ldr	r0, [pc, #20]	; (8011f54 <_dtoa_r+0x9f8>)
 8011f3e:	4906      	ldr	r1, [pc, #24]	; (8011f58 <_dtoa_r+0x9fc>)
 8011f40:	e43c      	b.n	80117bc <_dtoa_r+0x260>
 8011f42:	46c0      	nop			; (mov r8, r8)
 8011f44:	40240000 	.word	0x40240000
 8011f48:	00000433 	.word	0x00000433
 8011f4c:	7ff00000 	.word	0x7ff00000
 8011f50:	08015aa9 	.word	0x08015aa9
 8011f54:	08015d39 	.word	0x08015d39
 8011f58:	000002ef 	.word	0x000002ef
 8011f5c:	0039      	movs	r1, r7
 8011f5e:	693a      	ldr	r2, [r7, #16]
 8011f60:	310c      	adds	r1, #12
 8011f62:	3202      	adds	r2, #2
 8011f64:	0092      	lsls	r2, r2, #2
 8011f66:	300c      	adds	r0, #12
 8011f68:	f7fb fa9d 	bl	800d4a6 <memcpy>
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	0021      	movs	r1, r4
 8011f70:	9804      	ldr	r0, [sp, #16]
 8011f72:	f7fc f947 	bl	800e204 <__lshift>
 8011f76:	9b06      	ldr	r3, [sp, #24]
 8011f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011f7a:	9307      	str	r3, [sp, #28]
 8011f7c:	3b01      	subs	r3, #1
 8011f7e:	189b      	adds	r3, r3, r2
 8011f80:	2201      	movs	r2, #1
 8011f82:	003d      	movs	r5, r7
 8011f84:	0007      	movs	r7, r0
 8011f86:	930e      	str	r3, [sp, #56]	; 0x38
 8011f88:	9b08      	ldr	r3, [sp, #32]
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8011f8e:	0031      	movs	r1, r6
 8011f90:	9805      	ldr	r0, [sp, #20]
 8011f92:	f7ff fa53 	bl	801143c <quorem>
 8011f96:	0029      	movs	r1, r5
 8011f98:	0004      	movs	r4, r0
 8011f9a:	900b      	str	r0, [sp, #44]	; 0x2c
 8011f9c:	9805      	ldr	r0, [sp, #20]
 8011f9e:	f7fc f99f 	bl	800e2e0 <__mcmp>
 8011fa2:	003a      	movs	r2, r7
 8011fa4:	900c      	str	r0, [sp, #48]	; 0x30
 8011fa6:	0031      	movs	r1, r6
 8011fa8:	9804      	ldr	r0, [sp, #16]
 8011faa:	f7fc f9b5 	bl	800e318 <__mdiff>
 8011fae:	2201      	movs	r2, #1
 8011fb0:	68c3      	ldr	r3, [r0, #12]
 8011fb2:	3430      	adds	r4, #48	; 0x30
 8011fb4:	9008      	str	r0, [sp, #32]
 8011fb6:	920a      	str	r2, [sp, #40]	; 0x28
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d104      	bne.n	8011fc6 <_dtoa_r+0xa6a>
 8011fbc:	0001      	movs	r1, r0
 8011fbe:	9805      	ldr	r0, [sp, #20]
 8011fc0:	f7fc f98e 	bl	800e2e0 <__mcmp>
 8011fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8011fc6:	9908      	ldr	r1, [sp, #32]
 8011fc8:	9804      	ldr	r0, [sp, #16]
 8011fca:	f7fb ff2f 	bl	800de2c <_Bfree>
 8011fce:	9b07      	ldr	r3, [sp, #28]
 8011fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	9308      	str	r3, [sp, #32]
 8011fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	d109      	bne.n	8011ff4 <_dtoa_r+0xa98>
 8011fe0:	2c39      	cmp	r4, #57	; 0x39
 8011fe2:	d022      	beq.n	801202a <_dtoa_r+0xace>
 8011fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	dd01      	ble.n	8011fee <_dtoa_r+0xa92>
 8011fea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011fec:	3431      	adds	r4, #49	; 0x31
 8011fee:	9b07      	ldr	r3, [sp, #28]
 8011ff0:	701c      	strb	r4, [r3, #0]
 8011ff2:	e76e      	b.n	8011ed2 <_dtoa_r+0x976>
 8011ff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	db04      	blt.n	8012004 <_dtoa_r+0xaa8>
 8011ffa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012000:	4313      	orrs	r3, r2
 8012002:	d11e      	bne.n	8012042 <_dtoa_r+0xae6>
 8012004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012006:	2b00      	cmp	r3, #0
 8012008:	ddf1      	ble.n	8011fee <_dtoa_r+0xa92>
 801200a:	9905      	ldr	r1, [sp, #20]
 801200c:	2201      	movs	r2, #1
 801200e:	9804      	ldr	r0, [sp, #16]
 8012010:	f7fc f8f8 	bl	800e204 <__lshift>
 8012014:	0031      	movs	r1, r6
 8012016:	9005      	str	r0, [sp, #20]
 8012018:	f7fc f962 	bl	800e2e0 <__mcmp>
 801201c:	2800      	cmp	r0, #0
 801201e:	dc02      	bgt.n	8012026 <_dtoa_r+0xaca>
 8012020:	d1e5      	bne.n	8011fee <_dtoa_r+0xa92>
 8012022:	07e3      	lsls	r3, r4, #31
 8012024:	d5e3      	bpl.n	8011fee <_dtoa_r+0xa92>
 8012026:	2c39      	cmp	r4, #57	; 0x39
 8012028:	d1df      	bne.n	8011fea <_dtoa_r+0xa8e>
 801202a:	2339      	movs	r3, #57	; 0x39
 801202c:	9a07      	ldr	r2, [sp, #28]
 801202e:	7013      	strb	r3, [r2, #0]
 8012030:	9b08      	ldr	r3, [sp, #32]
 8012032:	9308      	str	r3, [sp, #32]
 8012034:	3b01      	subs	r3, #1
 8012036:	781a      	ldrb	r2, [r3, #0]
 8012038:	2a39      	cmp	r2, #57	; 0x39
 801203a:	d063      	beq.n	8012104 <_dtoa_r+0xba8>
 801203c:	3201      	adds	r2, #1
 801203e:	701a      	strb	r2, [r3, #0]
 8012040:	e747      	b.n	8011ed2 <_dtoa_r+0x976>
 8012042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012044:	2b00      	cmp	r3, #0
 8012046:	dd03      	ble.n	8012050 <_dtoa_r+0xaf4>
 8012048:	2c39      	cmp	r4, #57	; 0x39
 801204a:	d0ee      	beq.n	801202a <_dtoa_r+0xace>
 801204c:	3401      	adds	r4, #1
 801204e:	e7ce      	b.n	8011fee <_dtoa_r+0xa92>
 8012050:	9b07      	ldr	r3, [sp, #28]
 8012052:	9a07      	ldr	r2, [sp, #28]
 8012054:	701c      	strb	r4, [r3, #0]
 8012056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012058:	4293      	cmp	r3, r2
 801205a:	d03e      	beq.n	80120da <_dtoa_r+0xb7e>
 801205c:	2300      	movs	r3, #0
 801205e:	220a      	movs	r2, #10
 8012060:	9905      	ldr	r1, [sp, #20]
 8012062:	9804      	ldr	r0, [sp, #16]
 8012064:	f7fb feec 	bl	800de40 <__multadd>
 8012068:	2300      	movs	r3, #0
 801206a:	9005      	str	r0, [sp, #20]
 801206c:	220a      	movs	r2, #10
 801206e:	0029      	movs	r1, r5
 8012070:	9804      	ldr	r0, [sp, #16]
 8012072:	42bd      	cmp	r5, r7
 8012074:	d106      	bne.n	8012084 <_dtoa_r+0xb28>
 8012076:	f7fb fee3 	bl	800de40 <__multadd>
 801207a:	0005      	movs	r5, r0
 801207c:	0007      	movs	r7, r0
 801207e:	9b08      	ldr	r3, [sp, #32]
 8012080:	9307      	str	r3, [sp, #28]
 8012082:	e784      	b.n	8011f8e <_dtoa_r+0xa32>
 8012084:	f7fb fedc 	bl	800de40 <__multadd>
 8012088:	0039      	movs	r1, r7
 801208a:	0005      	movs	r5, r0
 801208c:	2300      	movs	r3, #0
 801208e:	220a      	movs	r2, #10
 8012090:	9804      	ldr	r0, [sp, #16]
 8012092:	f7fb fed5 	bl	800de40 <__multadd>
 8012096:	0007      	movs	r7, r0
 8012098:	e7f1      	b.n	801207e <_dtoa_r+0xb22>
 801209a:	9b07      	ldr	r3, [sp, #28]
 801209c:	930b      	str	r3, [sp, #44]	; 0x2c
 801209e:	2500      	movs	r5, #0
 80120a0:	0031      	movs	r1, r6
 80120a2:	9805      	ldr	r0, [sp, #20]
 80120a4:	f7ff f9ca 	bl	801143c <quorem>
 80120a8:	9b06      	ldr	r3, [sp, #24]
 80120aa:	3030      	adds	r0, #48	; 0x30
 80120ac:	5558      	strb	r0, [r3, r5]
 80120ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120b0:	3501      	adds	r5, #1
 80120b2:	0004      	movs	r4, r0
 80120b4:	42ab      	cmp	r3, r5
 80120b6:	dd07      	ble.n	80120c8 <_dtoa_r+0xb6c>
 80120b8:	2300      	movs	r3, #0
 80120ba:	220a      	movs	r2, #10
 80120bc:	9905      	ldr	r1, [sp, #20]
 80120be:	9804      	ldr	r0, [sp, #16]
 80120c0:	f7fb febe 	bl	800de40 <__multadd>
 80120c4:	9005      	str	r0, [sp, #20]
 80120c6:	e7eb      	b.n	80120a0 <_dtoa_r+0xb44>
 80120c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120ca:	2301      	movs	r3, #1
 80120cc:	2a00      	cmp	r2, #0
 80120ce:	dd00      	ble.n	80120d2 <_dtoa_r+0xb76>
 80120d0:	0013      	movs	r3, r2
 80120d2:	2500      	movs	r5, #0
 80120d4:	9a06      	ldr	r2, [sp, #24]
 80120d6:	18d3      	adds	r3, r2, r3
 80120d8:	9308      	str	r3, [sp, #32]
 80120da:	9905      	ldr	r1, [sp, #20]
 80120dc:	2201      	movs	r2, #1
 80120de:	9804      	ldr	r0, [sp, #16]
 80120e0:	f7fc f890 	bl	800e204 <__lshift>
 80120e4:	0031      	movs	r1, r6
 80120e6:	9005      	str	r0, [sp, #20]
 80120e8:	f7fc f8fa 	bl	800e2e0 <__mcmp>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	dc9f      	bgt.n	8012030 <_dtoa_r+0xad4>
 80120f0:	d101      	bne.n	80120f6 <_dtoa_r+0xb9a>
 80120f2:	07e4      	lsls	r4, r4, #31
 80120f4:	d49c      	bmi.n	8012030 <_dtoa_r+0xad4>
 80120f6:	9b08      	ldr	r3, [sp, #32]
 80120f8:	9308      	str	r3, [sp, #32]
 80120fa:	3b01      	subs	r3, #1
 80120fc:	781a      	ldrb	r2, [r3, #0]
 80120fe:	2a30      	cmp	r2, #48	; 0x30
 8012100:	d0fa      	beq.n	80120f8 <_dtoa_r+0xb9c>
 8012102:	e6e6      	b.n	8011ed2 <_dtoa_r+0x976>
 8012104:	9a06      	ldr	r2, [sp, #24]
 8012106:	429a      	cmp	r2, r3
 8012108:	d193      	bne.n	8012032 <_dtoa_r+0xad6>
 801210a:	9b03      	ldr	r3, [sp, #12]
 801210c:	3301      	adds	r3, #1
 801210e:	9303      	str	r3, [sp, #12]
 8012110:	2331      	movs	r3, #49	; 0x31
 8012112:	7013      	strb	r3, [r2, #0]
 8012114:	e6dd      	b.n	8011ed2 <_dtoa_r+0x976>
 8012116:	4b09      	ldr	r3, [pc, #36]	; (801213c <_dtoa_r+0xbe0>)
 8012118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801211a:	9306      	str	r3, [sp, #24]
 801211c:	4b08      	ldr	r3, [pc, #32]	; (8012140 <_dtoa_r+0xbe4>)
 801211e:	2a00      	cmp	r2, #0
 8012120:	d001      	beq.n	8012126 <_dtoa_r+0xbca>
 8012122:	f7ff fa4c 	bl	80115be <_dtoa_r+0x62>
 8012126:	f7ff fa4c 	bl	80115c2 <_dtoa_r+0x66>
 801212a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801212c:	2b00      	cmp	r3, #0
 801212e:	dcb6      	bgt.n	801209e <_dtoa_r+0xb42>
 8012130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012132:	2b02      	cmp	r3, #2
 8012134:	dd00      	ble.n	8012138 <_dtoa_r+0xbdc>
 8012136:	e6b6      	b.n	8011ea6 <_dtoa_r+0x94a>
 8012138:	e7b1      	b.n	801209e <_dtoa_r+0xb42>
 801213a:	46c0      	nop			; (mov r8, r8)
 801213c:	08015d2c 	.word	0x08015d2c
 8012140:	08015d34 	.word	0x08015d34

08012144 <realloc>:
 8012144:	b510      	push	{r4, lr}
 8012146:	4b03      	ldr	r3, [pc, #12]	; (8012154 <realloc+0x10>)
 8012148:	000a      	movs	r2, r1
 801214a:	0001      	movs	r1, r0
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	f000 f803 	bl	8012158 <_realloc_r>
 8012152:	bd10      	pop	{r4, pc}
 8012154:	200006d0 	.word	0x200006d0

08012158 <_realloc_r>:
 8012158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801215a:	b087      	sub	sp, #28
 801215c:	1e0c      	subs	r4, r1, #0
 801215e:	9001      	str	r0, [sp, #4]
 8012160:	9205      	str	r2, [sp, #20]
 8012162:	d106      	bne.n	8012172 <_realloc_r+0x1a>
 8012164:	0011      	movs	r1, r2
 8012166:	f7f9 fd5f 	bl	800bc28 <_malloc_r>
 801216a:	0007      	movs	r7, r0
 801216c:	0038      	movs	r0, r7
 801216e:	b007      	add	sp, #28
 8012170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012172:	9801      	ldr	r0, [sp, #4]
 8012174:	f7f9 ff6c 	bl	800c050 <__malloc_lock>
 8012178:	0023      	movs	r3, r4
 801217a:	3b08      	subs	r3, #8
 801217c:	685f      	ldr	r7, [r3, #4]
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	9b05      	ldr	r3, [sp, #20]
 8012182:	330b      	adds	r3, #11
 8012184:	2b16      	cmp	r3, #22
 8012186:	d908      	bls.n	801219a <_realloc_r+0x42>
 8012188:	2207      	movs	r2, #7
 801218a:	4393      	bics	r3, r2
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	d506      	bpl.n	801219e <_realloc_r+0x46>
 8012190:	230c      	movs	r3, #12
 8012192:	9a01      	ldr	r2, [sp, #4]
 8012194:	2700      	movs	r7, #0
 8012196:	6013      	str	r3, [r2, #0]
 8012198:	e7e8      	b.n	801216c <_realloc_r+0x14>
 801219a:	2310      	movs	r3, #16
 801219c:	9300      	str	r3, [sp, #0]
 801219e:	9b00      	ldr	r3, [sp, #0]
 80121a0:	9a05      	ldr	r2, [sp, #20]
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d3f4      	bcc.n	8012190 <_realloc_r+0x38>
 80121a6:	9b04      	ldr	r3, [sp, #16]
 80121a8:	003a      	movs	r2, r7
 80121aa:	9302      	str	r3, [sp, #8]
 80121ac:	2303      	movs	r3, #3
 80121ae:	439a      	bics	r2, r3
 80121b0:	9b00      	ldr	r3, [sp, #0]
 80121b2:	9203      	str	r2, [sp, #12]
 80121b4:	4293      	cmp	r3, r2
 80121b6:	dc00      	bgt.n	80121ba <_realloc_r+0x62>
 80121b8:	e169      	b.n	801248e <_realloc_r+0x336>
 80121ba:	9b04      	ldr	r3, [sp, #16]
 80121bc:	48b8      	ldr	r0, [pc, #736]	; (80124a0 <_realloc_r+0x348>)
 80121be:	189b      	adds	r3, r3, r2
 80121c0:	6882      	ldr	r2, [r0, #8]
 80121c2:	4694      	mov	ip, r2
 80121c4:	685a      	ldr	r2, [r3, #4]
 80121c6:	459c      	cmp	ip, r3
 80121c8:	d006      	beq.n	80121d8 <_realloc_r+0x80>
 80121ca:	2501      	movs	r5, #1
 80121cc:	0011      	movs	r1, r2
 80121ce:	43a9      	bics	r1, r5
 80121d0:	1859      	adds	r1, r3, r1
 80121d2:	6849      	ldr	r1, [r1, #4]
 80121d4:	4229      	tst	r1, r5
 80121d6:	d144      	bne.n	8012262 <_realloc_r+0x10a>
 80121d8:	2103      	movs	r1, #3
 80121da:	438a      	bics	r2, r1
 80121dc:	9903      	ldr	r1, [sp, #12]
 80121de:	188e      	adds	r6, r1, r2
 80121e0:	9900      	ldr	r1, [sp, #0]
 80121e2:	459c      	cmp	ip, r3
 80121e4:	d117      	bne.n	8012216 <_realloc_r+0xbe>
 80121e6:	3110      	adds	r1, #16
 80121e8:	42b1      	cmp	r1, r6
 80121ea:	dc3c      	bgt.n	8012266 <_realloc_r+0x10e>
 80121ec:	9a00      	ldr	r2, [sp, #0]
 80121ee:	2101      	movs	r1, #1
 80121f0:	4694      	mov	ip, r2
 80121f2:	1ab6      	subs	r6, r6, r2
 80121f4:	0022      	movs	r2, r4
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	430e      	orrs	r6, r1
 80121fa:	4463      	add	r3, ip
 80121fc:	6083      	str	r3, [r0, #8]
 80121fe:	3a08      	subs	r2, #8
 8012200:	605e      	str	r6, [r3, #4]
 8012202:	6853      	ldr	r3, [r2, #4]
 8012204:	9801      	ldr	r0, [sp, #4]
 8012206:	400b      	ands	r3, r1
 8012208:	4661      	mov	r1, ip
 801220a:	430b      	orrs	r3, r1
 801220c:	6053      	str	r3, [r2, #4]
 801220e:	f7f9 ff27 	bl	800c060 <__malloc_unlock>
 8012212:	0027      	movs	r7, r4
 8012214:	e7aa      	b.n	801216c <_realloc_r+0x14>
 8012216:	42b1      	cmp	r1, r6
 8012218:	dc25      	bgt.n	8012266 <_realloc_r+0x10e>
 801221a:	68da      	ldr	r2, [r3, #12]
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	60da      	str	r2, [r3, #12]
 8012220:	6093      	str	r3, [r2, #8]
 8012222:	9b00      	ldr	r3, [sp, #0]
 8012224:	9a02      	ldr	r2, [sp, #8]
 8012226:	1af4      	subs	r4, r6, r3
 8012228:	9b02      	ldr	r3, [sp, #8]
 801222a:	1992      	adds	r2, r2, r6
 801222c:	6858      	ldr	r0, [r3, #4]
 801222e:	2301      	movs	r3, #1
 8012230:	4018      	ands	r0, r3
 8012232:	2c0f      	cmp	r4, #15
 8012234:	d800      	bhi.n	8012238 <_realloc_r+0xe0>
 8012236:	e12c      	b.n	8012492 <_realloc_r+0x33a>
 8012238:	9d00      	ldr	r5, [sp, #0]
 801223a:	9902      	ldr	r1, [sp, #8]
 801223c:	4328      	orrs	r0, r5
 801223e:	1949      	adds	r1, r1, r5
 8012240:	9d02      	ldr	r5, [sp, #8]
 8012242:	431c      	orrs	r4, r3
 8012244:	6068      	str	r0, [r5, #4]
 8012246:	604c      	str	r4, [r1, #4]
 8012248:	6850      	ldr	r0, [r2, #4]
 801224a:	3108      	adds	r1, #8
 801224c:	4303      	orrs	r3, r0
 801224e:	6053      	str	r3, [r2, #4]
 8012250:	9801      	ldr	r0, [sp, #4]
 8012252:	f7fb f9a3 	bl	800d59c <_free_r>
 8012256:	9801      	ldr	r0, [sp, #4]
 8012258:	f7f9 ff02 	bl	800c060 <__malloc_unlock>
 801225c:	9f02      	ldr	r7, [sp, #8]
 801225e:	3708      	adds	r7, #8
 8012260:	e784      	b.n	801216c <_realloc_r+0x14>
 8012262:	2200      	movs	r2, #0
 8012264:	0013      	movs	r3, r2
 8012266:	07ff      	lsls	r7, r7, #31
 8012268:	d500      	bpl.n	801226c <_realloc_r+0x114>
 801226a:	e0c6      	b.n	80123fa <_realloc_r+0x2a2>
 801226c:	0021      	movs	r1, r4
 801226e:	2003      	movs	r0, #3
 8012270:	3908      	subs	r1, #8
 8012272:	680d      	ldr	r5, [r1, #0]
 8012274:	9904      	ldr	r1, [sp, #16]
 8012276:	1b4d      	subs	r5, r1, r5
 8012278:	6869      	ldr	r1, [r5, #4]
 801227a:	4381      	bics	r1, r0
 801227c:	9803      	ldr	r0, [sp, #12]
 801227e:	180f      	adds	r7, r1, r0
 8012280:	2b00      	cmp	r3, #0
 8012282:	d100      	bne.n	8012286 <_realloc_r+0x12e>
 8012284:	e084      	b.n	8012390 <_realloc_r+0x238>
 8012286:	19d6      	adds	r6, r2, r7
 8012288:	459c      	cmp	ip, r3
 801228a:	d148      	bne.n	801231e <_realloc_r+0x1c6>
 801228c:	9b00      	ldr	r3, [sp, #0]
 801228e:	3310      	adds	r3, #16
 8012290:	42b3      	cmp	r3, r6
 8012292:	dc7d      	bgt.n	8012390 <_realloc_r+0x238>
 8012294:	68aa      	ldr	r2, [r5, #8]
 8012296:	68eb      	ldr	r3, [r5, #12]
 8012298:	002f      	movs	r7, r5
 801229a:	60d3      	str	r3, [r2, #12]
 801229c:	609a      	str	r2, [r3, #8]
 801229e:	0002      	movs	r2, r0
 80122a0:	3a04      	subs	r2, #4
 80122a2:	3708      	adds	r7, #8
 80122a4:	2a24      	cmp	r2, #36	; 0x24
 80122a6:	d835      	bhi.n	8012314 <_realloc_r+0x1bc>
 80122a8:	003b      	movs	r3, r7
 80122aa:	2a13      	cmp	r2, #19
 80122ac:	d908      	bls.n	80122c0 <_realloc_r+0x168>
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	60ab      	str	r3, [r5, #8]
 80122b2:	6863      	ldr	r3, [r4, #4]
 80122b4:	60eb      	str	r3, [r5, #12]
 80122b6:	2a1b      	cmp	r2, #27
 80122b8:	d81a      	bhi.n	80122f0 <_realloc_r+0x198>
 80122ba:	002b      	movs	r3, r5
 80122bc:	3408      	adds	r4, #8
 80122be:	3310      	adds	r3, #16
 80122c0:	6822      	ldr	r2, [r4, #0]
 80122c2:	601a      	str	r2, [r3, #0]
 80122c4:	6862      	ldr	r2, [r4, #4]
 80122c6:	605a      	str	r2, [r3, #4]
 80122c8:	68a2      	ldr	r2, [r4, #8]
 80122ca:	609a      	str	r2, [r3, #8]
 80122cc:	9b00      	ldr	r3, [sp, #0]
 80122ce:	4a74      	ldr	r2, [pc, #464]	; (80124a0 <_realloc_r+0x348>)
 80122d0:	18eb      	adds	r3, r5, r3
 80122d2:	6093      	str	r3, [r2, #8]
 80122d4:	9a00      	ldr	r2, [sp, #0]
 80122d6:	1ab6      	subs	r6, r6, r2
 80122d8:	2201      	movs	r2, #1
 80122da:	4316      	orrs	r6, r2
 80122dc:	605e      	str	r6, [r3, #4]
 80122de:	686b      	ldr	r3, [r5, #4]
 80122e0:	4013      	ands	r3, r2
 80122e2:	9a00      	ldr	r2, [sp, #0]
 80122e4:	4313      	orrs	r3, r2
 80122e6:	606b      	str	r3, [r5, #4]
 80122e8:	9801      	ldr	r0, [sp, #4]
 80122ea:	f7f9 feb9 	bl	800c060 <__malloc_unlock>
 80122ee:	e73d      	b.n	801216c <_realloc_r+0x14>
 80122f0:	68a3      	ldr	r3, [r4, #8]
 80122f2:	612b      	str	r3, [r5, #16]
 80122f4:	68e3      	ldr	r3, [r4, #12]
 80122f6:	616b      	str	r3, [r5, #20]
 80122f8:	2a24      	cmp	r2, #36	; 0x24
 80122fa:	d003      	beq.n	8012304 <_realloc_r+0x1ac>
 80122fc:	002b      	movs	r3, r5
 80122fe:	3410      	adds	r4, #16
 8012300:	3318      	adds	r3, #24
 8012302:	e7dd      	b.n	80122c0 <_realloc_r+0x168>
 8012304:	6923      	ldr	r3, [r4, #16]
 8012306:	61ab      	str	r3, [r5, #24]
 8012308:	002b      	movs	r3, r5
 801230a:	6962      	ldr	r2, [r4, #20]
 801230c:	3320      	adds	r3, #32
 801230e:	61ea      	str	r2, [r5, #28]
 8012310:	3418      	adds	r4, #24
 8012312:	e7d5      	b.n	80122c0 <_realloc_r+0x168>
 8012314:	0021      	movs	r1, r4
 8012316:	0038      	movs	r0, r7
 8012318:	f001 fb2f 	bl	801397a <memmove>
 801231c:	e7d6      	b.n	80122cc <_realloc_r+0x174>
 801231e:	9a00      	ldr	r2, [sp, #0]
 8012320:	42b2      	cmp	r2, r6
 8012322:	dc35      	bgt.n	8012390 <_realloc_r+0x238>
 8012324:	0028      	movs	r0, r5
 8012326:	68da      	ldr	r2, [r3, #12]
 8012328:	689b      	ldr	r3, [r3, #8]
 801232a:	3008      	adds	r0, #8
 801232c:	60da      	str	r2, [r3, #12]
 801232e:	6093      	str	r3, [r2, #8]
 8012330:	68aa      	ldr	r2, [r5, #8]
 8012332:	68eb      	ldr	r3, [r5, #12]
 8012334:	60d3      	str	r3, [r2, #12]
 8012336:	609a      	str	r2, [r3, #8]
 8012338:	9a03      	ldr	r2, [sp, #12]
 801233a:	3a04      	subs	r2, #4
 801233c:	2a24      	cmp	r2, #36	; 0x24
 801233e:	d823      	bhi.n	8012388 <_realloc_r+0x230>
 8012340:	2a13      	cmp	r2, #19
 8012342:	d907      	bls.n	8012354 <_realloc_r+0x1fc>
 8012344:	6823      	ldr	r3, [r4, #0]
 8012346:	60ab      	str	r3, [r5, #8]
 8012348:	6863      	ldr	r3, [r4, #4]
 801234a:	60eb      	str	r3, [r5, #12]
 801234c:	2a1b      	cmp	r2, #27
 801234e:	d809      	bhi.n	8012364 <_realloc_r+0x20c>
 8012350:	3408      	adds	r4, #8
 8012352:	3008      	adds	r0, #8
 8012354:	6823      	ldr	r3, [r4, #0]
 8012356:	6003      	str	r3, [r0, #0]
 8012358:	6863      	ldr	r3, [r4, #4]
 801235a:	6043      	str	r3, [r0, #4]
 801235c:	68a3      	ldr	r3, [r4, #8]
 801235e:	6083      	str	r3, [r0, #8]
 8012360:	9502      	str	r5, [sp, #8]
 8012362:	e75e      	b.n	8012222 <_realloc_r+0xca>
 8012364:	68a3      	ldr	r3, [r4, #8]
 8012366:	612b      	str	r3, [r5, #16]
 8012368:	68e3      	ldr	r3, [r4, #12]
 801236a:	616b      	str	r3, [r5, #20]
 801236c:	2a24      	cmp	r2, #36	; 0x24
 801236e:	d003      	beq.n	8012378 <_realloc_r+0x220>
 8012370:	0028      	movs	r0, r5
 8012372:	3410      	adds	r4, #16
 8012374:	3018      	adds	r0, #24
 8012376:	e7ed      	b.n	8012354 <_realloc_r+0x1fc>
 8012378:	0028      	movs	r0, r5
 801237a:	6923      	ldr	r3, [r4, #16]
 801237c:	3020      	adds	r0, #32
 801237e:	61ab      	str	r3, [r5, #24]
 8012380:	6963      	ldr	r3, [r4, #20]
 8012382:	3418      	adds	r4, #24
 8012384:	61eb      	str	r3, [r5, #28]
 8012386:	e7e5      	b.n	8012354 <_realloc_r+0x1fc>
 8012388:	0021      	movs	r1, r4
 801238a:	f001 faf6 	bl	801397a <memmove>
 801238e:	e7e7      	b.n	8012360 <_realloc_r+0x208>
 8012390:	9b00      	ldr	r3, [sp, #0]
 8012392:	42bb      	cmp	r3, r7
 8012394:	dc31      	bgt.n	80123fa <_realloc_r+0x2a2>
 8012396:	0028      	movs	r0, r5
 8012398:	68aa      	ldr	r2, [r5, #8]
 801239a:	68eb      	ldr	r3, [r5, #12]
 801239c:	3008      	adds	r0, #8
 801239e:	60d3      	str	r3, [r2, #12]
 80123a0:	609a      	str	r2, [r3, #8]
 80123a2:	9a03      	ldr	r2, [sp, #12]
 80123a4:	3a04      	subs	r2, #4
 80123a6:	2a24      	cmp	r2, #36	; 0x24
 80123a8:	d823      	bhi.n	80123f2 <_realloc_r+0x29a>
 80123aa:	2a13      	cmp	r2, #19
 80123ac:	d907      	bls.n	80123be <_realloc_r+0x266>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	60ab      	str	r3, [r5, #8]
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	60eb      	str	r3, [r5, #12]
 80123b6:	2a1b      	cmp	r2, #27
 80123b8:	d809      	bhi.n	80123ce <_realloc_r+0x276>
 80123ba:	3408      	adds	r4, #8
 80123bc:	3008      	adds	r0, #8
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	6003      	str	r3, [r0, #0]
 80123c2:	6863      	ldr	r3, [r4, #4]
 80123c4:	6043      	str	r3, [r0, #4]
 80123c6:	68a3      	ldr	r3, [r4, #8]
 80123c8:	6083      	str	r3, [r0, #8]
 80123ca:	003e      	movs	r6, r7
 80123cc:	e7c8      	b.n	8012360 <_realloc_r+0x208>
 80123ce:	68a3      	ldr	r3, [r4, #8]
 80123d0:	612b      	str	r3, [r5, #16]
 80123d2:	68e3      	ldr	r3, [r4, #12]
 80123d4:	616b      	str	r3, [r5, #20]
 80123d6:	2a24      	cmp	r2, #36	; 0x24
 80123d8:	d003      	beq.n	80123e2 <_realloc_r+0x28a>
 80123da:	0028      	movs	r0, r5
 80123dc:	3410      	adds	r4, #16
 80123de:	3018      	adds	r0, #24
 80123e0:	e7ed      	b.n	80123be <_realloc_r+0x266>
 80123e2:	0028      	movs	r0, r5
 80123e4:	6923      	ldr	r3, [r4, #16]
 80123e6:	3020      	adds	r0, #32
 80123e8:	61ab      	str	r3, [r5, #24]
 80123ea:	6963      	ldr	r3, [r4, #20]
 80123ec:	3418      	adds	r4, #24
 80123ee:	61eb      	str	r3, [r5, #28]
 80123f0:	e7e5      	b.n	80123be <_realloc_r+0x266>
 80123f2:	0021      	movs	r1, r4
 80123f4:	f001 fac1 	bl	801397a <memmove>
 80123f8:	e7e7      	b.n	80123ca <_realloc_r+0x272>
 80123fa:	9905      	ldr	r1, [sp, #20]
 80123fc:	9801      	ldr	r0, [sp, #4]
 80123fe:	f7f9 fc13 	bl	800bc28 <_malloc_r>
 8012402:	1e07      	subs	r7, r0, #0
 8012404:	d100      	bne.n	8012408 <_realloc_r+0x2b0>
 8012406:	e76f      	b.n	80122e8 <_realloc_r+0x190>
 8012408:	0023      	movs	r3, r4
 801240a:	2201      	movs	r2, #1
 801240c:	3b08      	subs	r3, #8
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	4393      	bics	r3, r2
 8012412:	9a04      	ldr	r2, [sp, #16]
 8012414:	18d3      	adds	r3, r2, r3
 8012416:	0002      	movs	r2, r0
 8012418:	3a08      	subs	r2, #8
 801241a:	4293      	cmp	r3, r2
 801241c:	d105      	bne.n	801242a <_realloc_r+0x2d2>
 801241e:	685e      	ldr	r6, [r3, #4]
 8012420:	2303      	movs	r3, #3
 8012422:	439e      	bics	r6, r3
 8012424:	9b03      	ldr	r3, [sp, #12]
 8012426:	18f6      	adds	r6, r6, r3
 8012428:	e6fb      	b.n	8012222 <_realloc_r+0xca>
 801242a:	9a03      	ldr	r2, [sp, #12]
 801242c:	3a04      	subs	r2, #4
 801242e:	2a24      	cmp	r2, #36	; 0x24
 8012430:	d829      	bhi.n	8012486 <_realloc_r+0x32e>
 8012432:	0003      	movs	r3, r0
 8012434:	0021      	movs	r1, r4
 8012436:	2a13      	cmp	r2, #19
 8012438:	d908      	bls.n	801244c <_realloc_r+0x2f4>
 801243a:	6823      	ldr	r3, [r4, #0]
 801243c:	6003      	str	r3, [r0, #0]
 801243e:	6863      	ldr	r3, [r4, #4]
 8012440:	6043      	str	r3, [r0, #4]
 8012442:	2a1b      	cmp	r2, #27
 8012444:	d80d      	bhi.n	8012462 <_realloc_r+0x30a>
 8012446:	0003      	movs	r3, r0
 8012448:	3108      	adds	r1, #8
 801244a:	3308      	adds	r3, #8
 801244c:	680a      	ldr	r2, [r1, #0]
 801244e:	601a      	str	r2, [r3, #0]
 8012450:	684a      	ldr	r2, [r1, #4]
 8012452:	605a      	str	r2, [r3, #4]
 8012454:	688a      	ldr	r2, [r1, #8]
 8012456:	609a      	str	r2, [r3, #8]
 8012458:	0021      	movs	r1, r4
 801245a:	9801      	ldr	r0, [sp, #4]
 801245c:	f7fb f89e 	bl	800d59c <_free_r>
 8012460:	e742      	b.n	80122e8 <_realloc_r+0x190>
 8012462:	68a3      	ldr	r3, [r4, #8]
 8012464:	6083      	str	r3, [r0, #8]
 8012466:	68e3      	ldr	r3, [r4, #12]
 8012468:	60c3      	str	r3, [r0, #12]
 801246a:	2a24      	cmp	r2, #36	; 0x24
 801246c:	d003      	beq.n	8012476 <_realloc_r+0x31e>
 801246e:	0003      	movs	r3, r0
 8012470:	3110      	adds	r1, #16
 8012472:	3310      	adds	r3, #16
 8012474:	e7ea      	b.n	801244c <_realloc_r+0x2f4>
 8012476:	6923      	ldr	r3, [r4, #16]
 8012478:	3118      	adds	r1, #24
 801247a:	6103      	str	r3, [r0, #16]
 801247c:	0003      	movs	r3, r0
 801247e:	6962      	ldr	r2, [r4, #20]
 8012480:	3318      	adds	r3, #24
 8012482:	6142      	str	r2, [r0, #20]
 8012484:	e7e2      	b.n	801244c <_realloc_r+0x2f4>
 8012486:	0021      	movs	r1, r4
 8012488:	f001 fa77 	bl	801397a <memmove>
 801248c:	e7e4      	b.n	8012458 <_realloc_r+0x300>
 801248e:	9e03      	ldr	r6, [sp, #12]
 8012490:	e6c7      	b.n	8012222 <_realloc_r+0xca>
 8012492:	9902      	ldr	r1, [sp, #8]
 8012494:	4306      	orrs	r6, r0
 8012496:	604e      	str	r6, [r1, #4]
 8012498:	6851      	ldr	r1, [r2, #4]
 801249a:	430b      	orrs	r3, r1
 801249c:	6053      	str	r3, [r2, #4]
 801249e:	e6da      	b.n	8012256 <_realloc_r+0xfe>
 80124a0:	20000028 	.word	0x20000028

080124a4 <_strtoll_l.constprop.0>:
 80124a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124a6:	b08d      	sub	sp, #52	; 0x34
 80124a8:	9203      	str	r2, [sp, #12]
 80124aa:	4a53      	ldr	r2, [pc, #332]	; (80125f8 <_strtoll_l.constprop.0+0x154>)
 80124ac:	001e      	movs	r6, r3
 80124ae:	9102      	str	r1, [sp, #8]
 80124b0:	000b      	movs	r3, r1
 80124b2:	4694      	mov	ip, r2
 80124b4:	2108      	movs	r1, #8
 80124b6:	900a      	str	r0, [sp, #40]	; 0x28
 80124b8:	001a      	movs	r2, r3
 80124ba:	4660      	mov	r0, ip
 80124bc:	7814      	ldrb	r4, [r2, #0]
 80124be:	3301      	adds	r3, #1
 80124c0:	5d00      	ldrb	r0, [r0, r4]
 80124c2:	001d      	movs	r5, r3
 80124c4:	0007      	movs	r7, r0
 80124c6:	400f      	ands	r7, r1
 80124c8:	4208      	tst	r0, r1
 80124ca:	d1f5      	bne.n	80124b8 <_strtoll_l.constprop.0+0x14>
 80124cc:	2c2d      	cmp	r4, #45	; 0x2d
 80124ce:	d153      	bne.n	8012578 <_strtoll_l.constprop.0+0xd4>
 80124d0:	781c      	ldrb	r4, [r3, #0]
 80124d2:	2301      	movs	r3, #1
 80124d4:	1c95      	adds	r5, r2, #2
 80124d6:	9301      	str	r3, [sp, #4]
 80124d8:	2e00      	cmp	r6, #0
 80124da:	d100      	bne.n	80124de <_strtoll_l.constprop.0+0x3a>
 80124dc:	e086      	b.n	80125ec <_strtoll_l.constprop.0+0x148>
 80124de:	2e10      	cmp	r6, #16
 80124e0:	d10a      	bne.n	80124f8 <_strtoll_l.constprop.0+0x54>
 80124e2:	2c30      	cmp	r4, #48	; 0x30
 80124e4:	d108      	bne.n	80124f8 <_strtoll_l.constprop.0+0x54>
 80124e6:	2220      	movs	r2, #32
 80124e8:	782b      	ldrb	r3, [r5, #0]
 80124ea:	4393      	bics	r3, r2
 80124ec:	2b58      	cmp	r3, #88	; 0x58
 80124ee:	d000      	beq.n	80124f2 <_strtoll_l.constprop.0+0x4e>
 80124f0:	e076      	b.n	80125e0 <_strtoll_l.constprop.0+0x13c>
 80124f2:	2610      	movs	r6, #16
 80124f4:	786c      	ldrb	r4, [r5, #1]
 80124f6:	3502      	adds	r5, #2
 80124f8:	2001      	movs	r0, #1
 80124fa:	2300      	movs	r3, #0
 80124fc:	493f      	ldr	r1, [pc, #252]	; (80125fc <_strtoll_l.constprop.0+0x158>)
 80124fe:	9a01      	ldr	r2, [sp, #4]
 8012500:	4240      	negs	r0, r0
 8012502:	1812      	adds	r2, r2, r0
 8012504:	414b      	adcs	r3, r1
 8012506:	9204      	str	r2, [sp, #16]
 8012508:	9305      	str	r3, [sp, #20]
 801250a:	9804      	ldr	r0, [sp, #16]
 801250c:	9905      	ldr	r1, [sp, #20]
 801250e:	17f3      	asrs	r3, r6, #31
 8012510:	0032      	movs	r2, r6
 8012512:	930b      	str	r3, [sp, #44]	; 0x2c
 8012514:	f7ed ffc6 	bl	80004a4 <__aeabi_uldivmod>
 8012518:	2300      	movs	r3, #0
 801251a:	000f      	movs	r7, r1
 801251c:	9008      	str	r0, [sp, #32]
 801251e:	2100      	movs	r1, #0
 8012520:	2000      	movs	r0, #0
 8012522:	9209      	str	r2, [sp, #36]	; 0x24
 8012524:	0022      	movs	r2, r4
 8012526:	3a30      	subs	r2, #48	; 0x30
 8012528:	2a09      	cmp	r2, #9
 801252a:	d82b      	bhi.n	8012584 <_strtoll_l.constprop.0+0xe0>
 801252c:	0014      	movs	r4, r2
 801252e:	42a6      	cmp	r6, r4
 8012530:	dd37      	ble.n	80125a2 <_strtoll_l.constprop.0+0xfe>
 8012532:	1c5a      	adds	r2, r3, #1
 8012534:	d01d      	beq.n	8012572 <_strtoll_l.constprop.0+0xce>
 8012536:	42b9      	cmp	r1, r7
 8012538:	d830      	bhi.n	801259c <_strtoll_l.constprop.0+0xf8>
 801253a:	d102      	bne.n	8012542 <_strtoll_l.constprop.0+0x9e>
 801253c:	9b08      	ldr	r3, [sp, #32]
 801253e:	4298      	cmp	r0, r3
 8012540:	d82c      	bhi.n	801259c <_strtoll_l.constprop.0+0xf8>
 8012542:	9b08      	ldr	r3, [sp, #32]
 8012544:	4283      	cmp	r3, r0
 8012546:	d106      	bne.n	8012556 <_strtoll_l.constprop.0+0xb2>
 8012548:	428f      	cmp	r7, r1
 801254a:	d104      	bne.n	8012556 <_strtoll_l.constprop.0+0xb2>
 801254c:	2301      	movs	r3, #1
 801254e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012550:	425b      	negs	r3, r3
 8012552:	42a2      	cmp	r2, r4
 8012554:	db0d      	blt.n	8012572 <_strtoll_l.constprop.0+0xce>
 8012556:	000b      	movs	r3, r1
 8012558:	0002      	movs	r2, r0
 801255a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801255c:	0030      	movs	r0, r6
 801255e:	f7ed ffc1 	bl	80004e4 <__aeabi_lmul>
 8012562:	17e3      	asrs	r3, r4, #31
 8012564:	9406      	str	r4, [sp, #24]
 8012566:	9307      	str	r3, [sp, #28]
 8012568:	9b06      	ldr	r3, [sp, #24]
 801256a:	9c07      	ldr	r4, [sp, #28]
 801256c:	18c0      	adds	r0, r0, r3
 801256e:	4161      	adcs	r1, r4
 8012570:	2301      	movs	r3, #1
 8012572:	782c      	ldrb	r4, [r5, #0]
 8012574:	3501      	adds	r5, #1
 8012576:	e7d5      	b.n	8012524 <_strtoll_l.constprop.0+0x80>
 8012578:	9701      	str	r7, [sp, #4]
 801257a:	2c2b      	cmp	r4, #43	; 0x2b
 801257c:	d1ac      	bne.n	80124d8 <_strtoll_l.constprop.0+0x34>
 801257e:	781c      	ldrb	r4, [r3, #0]
 8012580:	1c95      	adds	r5, r2, #2
 8012582:	e7a9      	b.n	80124d8 <_strtoll_l.constprop.0+0x34>
 8012584:	0022      	movs	r2, r4
 8012586:	3a41      	subs	r2, #65	; 0x41
 8012588:	2a19      	cmp	r2, #25
 801258a:	d801      	bhi.n	8012590 <_strtoll_l.constprop.0+0xec>
 801258c:	3c37      	subs	r4, #55	; 0x37
 801258e:	e7ce      	b.n	801252e <_strtoll_l.constprop.0+0x8a>
 8012590:	0022      	movs	r2, r4
 8012592:	3a61      	subs	r2, #97	; 0x61
 8012594:	2a19      	cmp	r2, #25
 8012596:	d804      	bhi.n	80125a2 <_strtoll_l.constprop.0+0xfe>
 8012598:	3c57      	subs	r4, #87	; 0x57
 801259a:	e7c8      	b.n	801252e <_strtoll_l.constprop.0+0x8a>
 801259c:	2301      	movs	r3, #1
 801259e:	425b      	negs	r3, r3
 80125a0:	e7e7      	b.n	8012572 <_strtoll_l.constprop.0+0xce>
 80125a2:	1c5a      	adds	r2, r3, #1
 80125a4:	d109      	bne.n	80125ba <_strtoll_l.constprop.0+0x116>
 80125a6:	9804      	ldr	r0, [sp, #16]
 80125a8:	9905      	ldr	r1, [sp, #20]
 80125aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125ac:	3323      	adds	r3, #35	; 0x23
 80125ae:	6013      	str	r3, [r2, #0]
 80125b0:	9b03      	ldr	r3, [sp, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d10e      	bne.n	80125d4 <_strtoll_l.constprop.0+0x130>
 80125b6:	b00d      	add	sp, #52	; 0x34
 80125b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125ba:	9a01      	ldr	r2, [sp, #4]
 80125bc:	2a00      	cmp	r2, #0
 80125be:	d004      	beq.n	80125ca <_strtoll_l.constprop.0+0x126>
 80125c0:	0006      	movs	r6, r0
 80125c2:	000f      	movs	r7, r1
 80125c4:	2100      	movs	r1, #0
 80125c6:	4270      	negs	r0, r6
 80125c8:	41b9      	sbcs	r1, r7
 80125ca:	9a03      	ldr	r2, [sp, #12]
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	d0f2      	beq.n	80125b6 <_strtoll_l.constprop.0+0x112>
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d001      	beq.n	80125d8 <_strtoll_l.constprop.0+0x134>
 80125d4:	1e6b      	subs	r3, r5, #1
 80125d6:	9302      	str	r3, [sp, #8]
 80125d8:	9b03      	ldr	r3, [sp, #12]
 80125da:	9a02      	ldr	r2, [sp, #8]
 80125dc:	601a      	str	r2, [r3, #0]
 80125de:	e7ea      	b.n	80125b6 <_strtoll_l.constprop.0+0x112>
 80125e0:	2430      	movs	r4, #48	; 0x30
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	d000      	beq.n	80125e8 <_strtoll_l.constprop.0+0x144>
 80125e6:	e787      	b.n	80124f8 <_strtoll_l.constprop.0+0x54>
 80125e8:	3608      	adds	r6, #8
 80125ea:	e785      	b.n	80124f8 <_strtoll_l.constprop.0+0x54>
 80125ec:	2c30      	cmp	r4, #48	; 0x30
 80125ee:	d100      	bne.n	80125f2 <_strtoll_l.constprop.0+0x14e>
 80125f0:	e779      	b.n	80124e6 <_strtoll_l.constprop.0+0x42>
 80125f2:	260a      	movs	r6, #10
 80125f4:	e780      	b.n	80124f8 <_strtoll_l.constprop.0+0x54>
 80125f6:	46c0      	nop			; (mov r8, r8)
 80125f8:	080159a1 	.word	0x080159a1
 80125fc:	7fffffff 	.word	0x7fffffff

08012600 <_strtoll_r>:
 8012600:	b510      	push	{r4, lr}
 8012602:	f7ff ff4f 	bl	80124a4 <_strtoll_l.constprop.0>
 8012606:	bd10      	pop	{r4, pc}

08012608 <_strtoull_l.constprop.0>:
 8012608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801260a:	b08b      	sub	sp, #44	; 0x2c
 801260c:	9202      	str	r2, [sp, #8]
 801260e:	4a54      	ldr	r2, [pc, #336]	; (8012760 <_strtoull_l.constprop.0+0x158>)
 8012610:	001e      	movs	r6, r3
 8012612:	9101      	str	r1, [sp, #4]
 8012614:	000b      	movs	r3, r1
 8012616:	4694      	mov	ip, r2
 8012618:	2108      	movs	r1, #8
 801261a:	9009      	str	r0, [sp, #36]	; 0x24
 801261c:	001a      	movs	r2, r3
 801261e:	4660      	mov	r0, ip
 8012620:	7814      	ldrb	r4, [r2, #0]
 8012622:	3301      	adds	r3, #1
 8012624:	5d00      	ldrb	r0, [r0, r4]
 8012626:	001d      	movs	r5, r3
 8012628:	0007      	movs	r7, r0
 801262a:	400f      	ands	r7, r1
 801262c:	4208      	tst	r0, r1
 801262e:	d1f5      	bne.n	801261c <_strtoull_l.constprop.0+0x14>
 8012630:	2c2d      	cmp	r4, #45	; 0x2d
 8012632:	d154      	bne.n	80126de <_strtoull_l.constprop.0+0xd6>
 8012634:	781c      	ldrb	r4, [r3, #0]
 8012636:	2301      	movs	r3, #1
 8012638:	1c95      	adds	r5, r2, #2
 801263a:	9306      	str	r3, [sp, #24]
 801263c:	2e00      	cmp	r6, #0
 801263e:	d100      	bne.n	8012642 <_strtoull_l.constprop.0+0x3a>
 8012640:	e088      	b.n	8012754 <_strtoull_l.constprop.0+0x14c>
 8012642:	2e10      	cmp	r6, #16
 8012644:	d10a      	bne.n	801265c <_strtoull_l.constprop.0+0x54>
 8012646:	2c30      	cmp	r4, #48	; 0x30
 8012648:	d108      	bne.n	801265c <_strtoull_l.constprop.0+0x54>
 801264a:	2220      	movs	r2, #32
 801264c:	782b      	ldrb	r3, [r5, #0]
 801264e:	4393      	bics	r3, r2
 8012650:	2b58      	cmp	r3, #88	; 0x58
 8012652:	d000      	beq.n	8012656 <_strtoull_l.constprop.0+0x4e>
 8012654:	e078      	b.n	8012748 <_strtoull_l.constprop.0+0x140>
 8012656:	2610      	movs	r6, #16
 8012658:	786c      	ldrb	r4, [r5, #1]
 801265a:	3502      	adds	r5, #2
 801265c:	17f7      	asrs	r7, r6, #31
 801265e:	0032      	movs	r2, r6
 8012660:	003b      	movs	r3, r7
 8012662:	2001      	movs	r0, #1
 8012664:	4240      	negs	r0, r0
 8012666:	17c1      	asrs	r1, r0, #31
 8012668:	f7ed ff1c 	bl	80004a4 <__aeabi_uldivmod>
 801266c:	0032      	movs	r2, r6
 801266e:	9007      	str	r0, [sp, #28]
 8012670:	9103      	str	r1, [sp, #12]
 8012672:	003b      	movs	r3, r7
 8012674:	2001      	movs	r0, #1
 8012676:	4240      	negs	r0, r0
 8012678:	17c1      	asrs	r1, r0, #31
 801267a:	f7ed ff13 	bl	80004a4 <__aeabi_uldivmod>
 801267e:	2300      	movs	r3, #0
 8012680:	2000      	movs	r0, #0
 8012682:	2100      	movs	r1, #0
 8012684:	9208      	str	r2, [sp, #32]
 8012686:	0022      	movs	r2, r4
 8012688:	3a30      	subs	r2, #48	; 0x30
 801268a:	2a09      	cmp	r2, #9
 801268c:	d82d      	bhi.n	80126ea <_strtoull_l.constprop.0+0xe2>
 801268e:	0014      	movs	r4, r2
 8012690:	42a6      	cmp	r6, r4
 8012692:	dd39      	ble.n	8012708 <_strtoull_l.constprop.0+0x100>
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	d01f      	beq.n	80126d8 <_strtoull_l.constprop.0+0xd0>
 8012698:	9b03      	ldr	r3, [sp, #12]
 801269a:	4299      	cmp	r1, r3
 801269c:	d831      	bhi.n	8012702 <_strtoull_l.constprop.0+0xfa>
 801269e:	d102      	bne.n	80126a6 <_strtoull_l.constprop.0+0x9e>
 80126a0:	9b07      	ldr	r3, [sp, #28]
 80126a2:	4298      	cmp	r0, r3
 80126a4:	d82d      	bhi.n	8012702 <_strtoull_l.constprop.0+0xfa>
 80126a6:	9b07      	ldr	r3, [sp, #28]
 80126a8:	4283      	cmp	r3, r0
 80126aa:	d107      	bne.n	80126bc <_strtoull_l.constprop.0+0xb4>
 80126ac:	9b03      	ldr	r3, [sp, #12]
 80126ae:	428b      	cmp	r3, r1
 80126b0:	d104      	bne.n	80126bc <_strtoull_l.constprop.0+0xb4>
 80126b2:	2301      	movs	r3, #1
 80126b4:	9a08      	ldr	r2, [sp, #32]
 80126b6:	425b      	negs	r3, r3
 80126b8:	42a2      	cmp	r2, r4
 80126ba:	db0d      	blt.n	80126d8 <_strtoull_l.constprop.0+0xd0>
 80126bc:	000b      	movs	r3, r1
 80126be:	0002      	movs	r2, r0
 80126c0:	0039      	movs	r1, r7
 80126c2:	0030      	movs	r0, r6
 80126c4:	f7ed ff0e 	bl	80004e4 <__aeabi_lmul>
 80126c8:	17e3      	asrs	r3, r4, #31
 80126ca:	9404      	str	r4, [sp, #16]
 80126cc:	9305      	str	r3, [sp, #20]
 80126ce:	9b04      	ldr	r3, [sp, #16]
 80126d0:	9c05      	ldr	r4, [sp, #20]
 80126d2:	18c0      	adds	r0, r0, r3
 80126d4:	4161      	adcs	r1, r4
 80126d6:	2301      	movs	r3, #1
 80126d8:	782c      	ldrb	r4, [r5, #0]
 80126da:	3501      	adds	r5, #1
 80126dc:	e7d3      	b.n	8012686 <_strtoull_l.constprop.0+0x7e>
 80126de:	9706      	str	r7, [sp, #24]
 80126e0:	2c2b      	cmp	r4, #43	; 0x2b
 80126e2:	d1ab      	bne.n	801263c <_strtoull_l.constprop.0+0x34>
 80126e4:	781c      	ldrb	r4, [r3, #0]
 80126e6:	1c95      	adds	r5, r2, #2
 80126e8:	e7a8      	b.n	801263c <_strtoull_l.constprop.0+0x34>
 80126ea:	0022      	movs	r2, r4
 80126ec:	3a41      	subs	r2, #65	; 0x41
 80126ee:	2a19      	cmp	r2, #25
 80126f0:	d801      	bhi.n	80126f6 <_strtoull_l.constprop.0+0xee>
 80126f2:	3c37      	subs	r4, #55	; 0x37
 80126f4:	e7cc      	b.n	8012690 <_strtoull_l.constprop.0+0x88>
 80126f6:	0022      	movs	r2, r4
 80126f8:	3a61      	subs	r2, #97	; 0x61
 80126fa:	2a19      	cmp	r2, #25
 80126fc:	d804      	bhi.n	8012708 <_strtoull_l.constprop.0+0x100>
 80126fe:	3c57      	subs	r4, #87	; 0x57
 8012700:	e7c6      	b.n	8012690 <_strtoull_l.constprop.0+0x88>
 8012702:	2301      	movs	r3, #1
 8012704:	425b      	negs	r3, r3
 8012706:	e7e7      	b.n	80126d8 <_strtoull_l.constprop.0+0xd0>
 8012708:	1c5a      	adds	r2, r3, #1
 801270a:	d10a      	bne.n	8012722 <_strtoull_l.constprop.0+0x11a>
 801270c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801270e:	3323      	adds	r3, #35	; 0x23
 8012710:	6013      	str	r3, [r2, #0]
 8012712:	9b02      	ldr	r3, [sp, #8]
 8012714:	2001      	movs	r0, #1
 8012716:	4240      	negs	r0, r0
 8012718:	17c1      	asrs	r1, r0, #31
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10e      	bne.n	801273c <_strtoull_l.constprop.0+0x134>
 801271e:	b00b      	add	sp, #44	; 0x2c
 8012720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012722:	9a06      	ldr	r2, [sp, #24]
 8012724:	2a00      	cmp	r2, #0
 8012726:	d004      	beq.n	8012732 <_strtoull_l.constprop.0+0x12a>
 8012728:	0006      	movs	r6, r0
 801272a:	000f      	movs	r7, r1
 801272c:	2100      	movs	r1, #0
 801272e:	4270      	negs	r0, r6
 8012730:	41b9      	sbcs	r1, r7
 8012732:	9a02      	ldr	r2, [sp, #8]
 8012734:	2a00      	cmp	r2, #0
 8012736:	d0f2      	beq.n	801271e <_strtoull_l.constprop.0+0x116>
 8012738:	2b00      	cmp	r3, #0
 801273a:	d001      	beq.n	8012740 <_strtoull_l.constprop.0+0x138>
 801273c:	1e6b      	subs	r3, r5, #1
 801273e:	9301      	str	r3, [sp, #4]
 8012740:	9b02      	ldr	r3, [sp, #8]
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	601a      	str	r2, [r3, #0]
 8012746:	e7ea      	b.n	801271e <_strtoull_l.constprop.0+0x116>
 8012748:	2430      	movs	r4, #48	; 0x30
 801274a:	2e00      	cmp	r6, #0
 801274c:	d000      	beq.n	8012750 <_strtoull_l.constprop.0+0x148>
 801274e:	e785      	b.n	801265c <_strtoull_l.constprop.0+0x54>
 8012750:	3608      	adds	r6, #8
 8012752:	e783      	b.n	801265c <_strtoull_l.constprop.0+0x54>
 8012754:	2c30      	cmp	r4, #48	; 0x30
 8012756:	d100      	bne.n	801275a <_strtoull_l.constprop.0+0x152>
 8012758:	e777      	b.n	801264a <_strtoull_l.constprop.0+0x42>
 801275a:	260a      	movs	r6, #10
 801275c:	e77e      	b.n	801265c <_strtoull_l.constprop.0+0x54>
 801275e:	46c0      	nop			; (mov r8, r8)
 8012760:	080159a1 	.word	0x080159a1

08012764 <_strtoull_r>:
 8012764:	b510      	push	{r4, lr}
 8012766:	f7ff ff4f 	bl	8012608 <_strtoull_l.constprop.0>
 801276a:	bd10      	pop	{r4, pc}

0801276c <_mbrtowc_r>:
 801276c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801276e:	0004      	movs	r4, r0
 8012770:	0010      	movs	r0, r2
 8012772:	4a0b      	ldr	r2, [pc, #44]	; (80127a0 <_mbrtowc_r+0x34>)
 8012774:	9d06      	ldr	r5, [sp, #24]
 8012776:	32e4      	adds	r2, #228	; 0xe4
 8012778:	6816      	ldr	r6, [r2, #0]
 801277a:	2800      	cmp	r0, #0
 801277c:	d10c      	bne.n	8012798 <_mbrtowc_r+0x2c>
 801277e:	2301      	movs	r3, #1
 8012780:	0001      	movs	r1, r0
 8012782:	4a08      	ldr	r2, [pc, #32]	; (80127a4 <_mbrtowc_r+0x38>)
 8012784:	9500      	str	r5, [sp, #0]
 8012786:	0020      	movs	r0, r4
 8012788:	47b0      	blx	r6
 801278a:	1c43      	adds	r3, r0, #1
 801278c:	d103      	bne.n	8012796 <_mbrtowc_r+0x2a>
 801278e:	2300      	movs	r3, #0
 8012790:	602b      	str	r3, [r5, #0]
 8012792:	338a      	adds	r3, #138	; 0x8a
 8012794:	6023      	str	r3, [r4, #0]
 8012796:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8012798:	0002      	movs	r2, r0
 801279a:	9500      	str	r5, [sp, #0]
 801279c:	e7f3      	b.n	8012786 <_mbrtowc_r+0x1a>
 801279e:	46c0      	nop			; (mov r8, r8)
 80127a0:	20000444 	.word	0x20000444
 80127a4:	08015d2b 	.word	0x08015d2b

080127a8 <iswspace>:
 80127a8:	b510      	push	{r4, lr}
 80127aa:	2100      	movs	r1, #0
 80127ac:	f000 f802 	bl	80127b4 <iswspace_l>
 80127b0:	bd10      	pop	{r4, pc}
	...

080127b4 <iswspace_l>:
 80127b4:	0003      	movs	r3, r0
 80127b6:	2000      	movs	r0, #0
 80127b8:	2bff      	cmp	r3, #255	; 0xff
 80127ba:	d803      	bhi.n	80127c4 <iswspace_l+0x10>
 80127bc:	4a02      	ldr	r2, [pc, #8]	; (80127c8 <iswspace_l+0x14>)
 80127be:	5cd0      	ldrb	r0, [r2, r3]
 80127c0:	2308      	movs	r3, #8
 80127c2:	4018      	ands	r0, r3
 80127c4:	4770      	bx	lr
 80127c6:	46c0      	nop			; (mov r8, r8)
 80127c8:	080159a1 	.word	0x080159a1

080127cc <fiprintf>:
 80127cc:	b40e      	push	{r1, r2, r3}
 80127ce:	b517      	push	{r0, r1, r2, r4, lr}
 80127d0:	4c05      	ldr	r4, [pc, #20]	; (80127e8 <fiprintf+0x1c>)
 80127d2:	ab05      	add	r3, sp, #20
 80127d4:	cb04      	ldmia	r3!, {r2}
 80127d6:	0001      	movs	r1, r0
 80127d8:	6820      	ldr	r0, [r4, #0]
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	f000 f954 	bl	8012a88 <_vfiprintf_r>
 80127e0:	bc1e      	pop	{r1, r2, r3, r4}
 80127e2:	bc08      	pop	{r3}
 80127e4:	b003      	add	sp, #12
 80127e6:	4718      	bx	r3
 80127e8:	200006d0 	.word	0x200006d0

080127ec <__ssprint_r>:
 80127ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ee:	6813      	ldr	r3, [r2, #0]
 80127f0:	b087      	sub	sp, #28
 80127f2:	0017      	movs	r7, r2
 80127f4:	9303      	str	r3, [sp, #12]
 80127f6:	6893      	ldr	r3, [r2, #8]
 80127f8:	2200      	movs	r2, #0
 80127fa:	000c      	movs	r4, r1
 80127fc:	9005      	str	r0, [sp, #20]
 80127fe:	9202      	str	r2, [sp, #8]
 8012800:	9201      	str	r2, [sp, #4]
 8012802:	4293      	cmp	r3, r2
 8012804:	d10d      	bne.n	8012822 <__ssprint_r+0x36>
 8012806:	2000      	movs	r0, #0
 8012808:	2300      	movs	r3, #0
 801280a:	607b      	str	r3, [r7, #4]
 801280c:	b007      	add	sp, #28
 801280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012810:	9b03      	ldr	r3, [sp, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	9302      	str	r3, [sp, #8]
 8012816:	9b03      	ldr	r3, [sp, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	9301      	str	r3, [sp, #4]
 801281c:	9b03      	ldr	r3, [sp, #12]
 801281e:	3308      	adds	r3, #8
 8012820:	9303      	str	r3, [sp, #12]
 8012822:	9a01      	ldr	r2, [sp, #4]
 8012824:	68a6      	ldr	r6, [r4, #8]
 8012826:	6823      	ldr	r3, [r4, #0]
 8012828:	2a00      	cmp	r2, #0
 801282a:	d0f1      	beq.n	8012810 <__ssprint_r+0x24>
 801282c:	42b2      	cmp	r2, r6
 801282e:	d32e      	bcc.n	801288e <__ssprint_r+0xa2>
 8012830:	2190      	movs	r1, #144	; 0x90
 8012832:	89a2      	ldrh	r2, [r4, #12]
 8012834:	00c9      	lsls	r1, r1, #3
 8012836:	420a      	tst	r2, r1
 8012838:	d029      	beq.n	801288e <__ssprint_r+0xa2>
 801283a:	2003      	movs	r0, #3
 801283c:	6921      	ldr	r1, [r4, #16]
 801283e:	1a5b      	subs	r3, r3, r1
 8012840:	9304      	str	r3, [sp, #16]
 8012842:	6963      	ldr	r3, [r4, #20]
 8012844:	4343      	muls	r3, r0
 8012846:	0fdd      	lsrs	r5, r3, #31
 8012848:	18ed      	adds	r5, r5, r3
 801284a:	9b04      	ldr	r3, [sp, #16]
 801284c:	9801      	ldr	r0, [sp, #4]
 801284e:	3301      	adds	r3, #1
 8012850:	181b      	adds	r3, r3, r0
 8012852:	106d      	asrs	r5, r5, #1
 8012854:	42ab      	cmp	r3, r5
 8012856:	d900      	bls.n	801285a <__ssprint_r+0x6e>
 8012858:	001d      	movs	r5, r3
 801285a:	0552      	lsls	r2, r2, #21
 801285c:	d532      	bpl.n	80128c4 <__ssprint_r+0xd8>
 801285e:	0029      	movs	r1, r5
 8012860:	9805      	ldr	r0, [sp, #20]
 8012862:	f7f9 f9e1 	bl	800bc28 <_malloc_r>
 8012866:	1e06      	subs	r6, r0, #0
 8012868:	d036      	beq.n	80128d8 <__ssprint_r+0xec>
 801286a:	9a04      	ldr	r2, [sp, #16]
 801286c:	6921      	ldr	r1, [r4, #16]
 801286e:	f7fa fe1a 	bl	800d4a6 <memcpy>
 8012872:	89a2      	ldrh	r2, [r4, #12]
 8012874:	4b1e      	ldr	r3, [pc, #120]	; (80128f0 <__ssprint_r+0x104>)
 8012876:	401a      	ands	r2, r3
 8012878:	2380      	movs	r3, #128	; 0x80
 801287a:	4313      	orrs	r3, r2
 801287c:	81a3      	strh	r3, [r4, #12]
 801287e:	9b04      	ldr	r3, [sp, #16]
 8012880:	6126      	str	r6, [r4, #16]
 8012882:	18f6      	adds	r6, r6, r3
 8012884:	6026      	str	r6, [r4, #0]
 8012886:	6165      	str	r5, [r4, #20]
 8012888:	9e01      	ldr	r6, [sp, #4]
 801288a:	1aed      	subs	r5, r5, r3
 801288c:	60a5      	str	r5, [r4, #8]
 801288e:	9b01      	ldr	r3, [sp, #4]
 8012890:	429e      	cmp	r6, r3
 8012892:	d900      	bls.n	8012896 <__ssprint_r+0xaa>
 8012894:	001e      	movs	r6, r3
 8012896:	0032      	movs	r2, r6
 8012898:	9902      	ldr	r1, [sp, #8]
 801289a:	6820      	ldr	r0, [r4, #0]
 801289c:	f001 f86d 	bl	801397a <memmove>
 80128a0:	9a01      	ldr	r2, [sp, #4]
 80128a2:	68a3      	ldr	r3, [r4, #8]
 80128a4:	4694      	mov	ip, r2
 80128a6:	1b9b      	subs	r3, r3, r6
 80128a8:	60a3      	str	r3, [r4, #8]
 80128aa:	6823      	ldr	r3, [r4, #0]
 80128ac:	199b      	adds	r3, r3, r6
 80128ae:	6023      	str	r3, [r4, #0]
 80128b0:	9b02      	ldr	r3, [sp, #8]
 80128b2:	4463      	add	r3, ip
 80128b4:	9302      	str	r3, [sp, #8]
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	1a9b      	subs	r3, r3, r2
 80128ba:	60bb      	str	r3, [r7, #8]
 80128bc:	d0a3      	beq.n	8012806 <__ssprint_r+0x1a>
 80128be:	2300      	movs	r3, #0
 80128c0:	9301      	str	r3, [sp, #4]
 80128c2:	e7ae      	b.n	8012822 <__ssprint_r+0x36>
 80128c4:	002a      	movs	r2, r5
 80128c6:	9805      	ldr	r0, [sp, #20]
 80128c8:	f7ff fc46 	bl	8012158 <_realloc_r>
 80128cc:	1e06      	subs	r6, r0, #0
 80128ce:	d1d6      	bne.n	801287e <__ssprint_r+0x92>
 80128d0:	6921      	ldr	r1, [r4, #16]
 80128d2:	9805      	ldr	r0, [sp, #20]
 80128d4:	f7fa fe62 	bl	800d59c <_free_r>
 80128d8:	230c      	movs	r3, #12
 80128da:	9a05      	ldr	r2, [sp, #20]
 80128dc:	2001      	movs	r0, #1
 80128de:	6013      	str	r3, [r2, #0]
 80128e0:	89a2      	ldrh	r2, [r4, #12]
 80128e2:	3334      	adds	r3, #52	; 0x34
 80128e4:	4313      	orrs	r3, r2
 80128e6:	81a3      	strh	r3, [r4, #12]
 80128e8:	2300      	movs	r3, #0
 80128ea:	4240      	negs	r0, r0
 80128ec:	60bb      	str	r3, [r7, #8]
 80128ee:	e78b      	b.n	8012808 <__ssprint_r+0x1c>
 80128f0:	fffffb7f 	.word	0xfffffb7f

080128f4 <_sungetc_r>:
 80128f4:	b570      	push	{r4, r5, r6, lr}
 80128f6:	0014      	movs	r4, r2
 80128f8:	1c4b      	adds	r3, r1, #1
 80128fa:	d103      	bne.n	8012904 <_sungetc_r+0x10>
 80128fc:	2501      	movs	r5, #1
 80128fe:	426d      	negs	r5, r5
 8012900:	0028      	movs	r0, r5
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	8993      	ldrh	r3, [r2, #12]
 8012906:	2220      	movs	r2, #32
 8012908:	4393      	bics	r3, r2
 801290a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801290c:	81a3      	strh	r3, [r4, #12]
 801290e:	b2ce      	uxtb	r6, r1
 8012910:	6863      	ldr	r3, [r4, #4]
 8012912:	b2cd      	uxtb	r5, r1
 8012914:	2a00      	cmp	r2, #0
 8012916:	d010      	beq.n	801293a <_sungetc_r+0x46>
 8012918:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801291a:	429a      	cmp	r2, r3
 801291c:	dd07      	ble.n	801292e <_sungetc_r+0x3a>
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	3b01      	subs	r3, #1
 8012922:	6023      	str	r3, [r4, #0]
 8012924:	701e      	strb	r6, [r3, #0]
 8012926:	6863      	ldr	r3, [r4, #4]
 8012928:	3301      	adds	r3, #1
 801292a:	6063      	str	r3, [r4, #4]
 801292c:	e7e8      	b.n	8012900 <_sungetc_r+0xc>
 801292e:	0021      	movs	r1, r4
 8012930:	f000 ff1a 	bl	8013768 <__submore>
 8012934:	2800      	cmp	r0, #0
 8012936:	d0f2      	beq.n	801291e <_sungetc_r+0x2a>
 8012938:	e7e0      	b.n	80128fc <_sungetc_r+0x8>
 801293a:	6921      	ldr	r1, [r4, #16]
 801293c:	6822      	ldr	r2, [r4, #0]
 801293e:	2900      	cmp	r1, #0
 8012940:	d007      	beq.n	8012952 <_sungetc_r+0x5e>
 8012942:	4291      	cmp	r1, r2
 8012944:	d205      	bcs.n	8012952 <_sungetc_r+0x5e>
 8012946:	1e51      	subs	r1, r2, #1
 8012948:	7808      	ldrb	r0, [r1, #0]
 801294a:	42a8      	cmp	r0, r5
 801294c:	d101      	bne.n	8012952 <_sungetc_r+0x5e>
 801294e:	6021      	str	r1, [r4, #0]
 8012950:	e7ea      	b.n	8012928 <_sungetc_r+0x34>
 8012952:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012954:	0023      	movs	r3, r4
 8012956:	3340      	adds	r3, #64	; 0x40
 8012958:	6323      	str	r3, [r4, #48]	; 0x30
 801295a:	2303      	movs	r3, #3
 801295c:	6363      	str	r3, [r4, #52]	; 0x34
 801295e:	0023      	movs	r3, r4
 8012960:	3342      	adds	r3, #66	; 0x42
 8012962:	63a2      	str	r2, [r4, #56]	; 0x38
 8012964:	701e      	strb	r6, [r3, #0]
 8012966:	6023      	str	r3, [r4, #0]
 8012968:	2301      	movs	r3, #1
 801296a:	e7de      	b.n	801292a <_sungetc_r+0x36>

0801296c <__ssrefill_r>:
 801296c:	b510      	push	{r4, lr}
 801296e:	000c      	movs	r4, r1
 8012970:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012972:	2900      	cmp	r1, #0
 8012974:	d00e      	beq.n	8012994 <__ssrefill_r+0x28>
 8012976:	0023      	movs	r3, r4
 8012978:	3340      	adds	r3, #64	; 0x40
 801297a:	4299      	cmp	r1, r3
 801297c:	d001      	beq.n	8012982 <__ssrefill_r+0x16>
 801297e:	f7fa fe0d 	bl	800d59c <_free_r>
 8012982:	2000      	movs	r0, #0
 8012984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012986:	6320      	str	r0, [r4, #48]	; 0x30
 8012988:	6063      	str	r3, [r4, #4]
 801298a:	4283      	cmp	r3, r0
 801298c:	d002      	beq.n	8012994 <__ssrefill_r+0x28>
 801298e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012990:	6023      	str	r3, [r4, #0]
 8012992:	bd10      	pop	{r4, pc}
 8012994:	6923      	ldr	r3, [r4, #16]
 8012996:	2001      	movs	r0, #1
 8012998:	6023      	str	r3, [r4, #0]
 801299a:	2300      	movs	r3, #0
 801299c:	89a2      	ldrh	r2, [r4, #12]
 801299e:	6063      	str	r3, [r4, #4]
 80129a0:	3320      	adds	r3, #32
 80129a2:	4313      	orrs	r3, r2
 80129a4:	81a3      	strh	r3, [r4, #12]
 80129a6:	4240      	negs	r0, r0
 80129a8:	e7f3      	b.n	8012992 <__ssrefill_r+0x26>

080129aa <_sfread_r>:
 80129aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129ac:	0014      	movs	r4, r2
 80129ae:	435c      	muls	r4, r3
 80129b0:	b087      	sub	sp, #28
 80129b2:	1e26      	subs	r6, r4, #0
 80129b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129b6:	9005      	str	r0, [sp, #20]
 80129b8:	9101      	str	r1, [sp, #4]
 80129ba:	9202      	str	r2, [sp, #8]
 80129bc:	9303      	str	r3, [sp, #12]
 80129be:	d11e      	bne.n	80129fe <_sfread_r+0x54>
 80129c0:	0020      	movs	r0, r4
 80129c2:	b007      	add	sp, #28
 80129c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c6:	003a      	movs	r2, r7
 80129c8:	9801      	ldr	r0, [sp, #4]
 80129ca:	f7fa fd6c 	bl	800d4a6 <memcpy>
 80129ce:	682b      	ldr	r3, [r5, #0]
 80129d0:	0029      	movs	r1, r5
 80129d2:	19db      	adds	r3, r3, r7
 80129d4:	602b      	str	r3, [r5, #0]
 80129d6:	2300      	movs	r3, #0
 80129d8:	606b      	str	r3, [r5, #4]
 80129da:	9b01      	ldr	r3, [sp, #4]
 80129dc:	9805      	ldr	r0, [sp, #20]
 80129de:	19db      	adds	r3, r3, r7
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	1bf3      	subs	r3, r6, r7
 80129e4:	9304      	str	r3, [sp, #16]
 80129e6:	f7ff ffc1 	bl	801296c <__ssrefill_r>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d006      	beq.n	80129fc <_sfread_r+0x52>
 80129ee:	193c      	adds	r4, r7, r4
 80129f0:	1ba0      	subs	r0, r4, r6
 80129f2:	9902      	ldr	r1, [sp, #8]
 80129f4:	f7ed fba2 	bl	800013c <__udivsi3>
 80129f8:	0004      	movs	r4, r0
 80129fa:	e7e1      	b.n	80129c0 <_sfread_r+0x16>
 80129fc:	9e04      	ldr	r6, [sp, #16]
 80129fe:	686f      	ldr	r7, [r5, #4]
 8012a00:	6829      	ldr	r1, [r5, #0]
 8012a02:	42b7      	cmp	r7, r6
 8012a04:	d3df      	bcc.n	80129c6 <_sfread_r+0x1c>
 8012a06:	0032      	movs	r2, r6
 8012a08:	9801      	ldr	r0, [sp, #4]
 8012a0a:	f7fa fd4c 	bl	800d4a6 <memcpy>
 8012a0e:	686b      	ldr	r3, [r5, #4]
 8012a10:	9c03      	ldr	r4, [sp, #12]
 8012a12:	1b9b      	subs	r3, r3, r6
 8012a14:	606b      	str	r3, [r5, #4]
 8012a16:	682b      	ldr	r3, [r5, #0]
 8012a18:	199b      	adds	r3, r3, r6
 8012a1a:	602b      	str	r3, [r5, #0]
 8012a1c:	e7d0      	b.n	80129c0 <_sfread_r+0x16>

08012a1e <__sprint_r>:
 8012a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a20:	6893      	ldr	r3, [r2, #8]
 8012a22:	b085      	sub	sp, #20
 8012a24:	9001      	str	r0, [sp, #4]
 8012a26:	000d      	movs	r5, r1
 8012a28:	0014      	movs	r4, r2
 8012a2a:	1e18      	subs	r0, r3, #0
 8012a2c:	d018      	beq.n	8012a60 <__sprint_r+0x42>
 8012a2e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012a30:	049b      	lsls	r3, r3, #18
 8012a32:	d524      	bpl.n	8012a7e <__sprint_r+0x60>
 8012a34:	6817      	ldr	r7, [r2, #0]
 8012a36:	2600      	movs	r6, #0
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	9302      	str	r3, [sp, #8]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	089b      	lsrs	r3, r3, #2
 8012a42:	9303      	str	r3, [sp, #12]
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	42b3      	cmp	r3, r6
 8012a48:	dc0e      	bgt.n	8012a68 <__sprint_r+0x4a>
 8012a4a:	2203      	movs	r2, #3
 8012a4c:	9b00      	ldr	r3, [sp, #0]
 8012a4e:	68a0      	ldr	r0, [r4, #8]
 8012a50:	4393      	bics	r3, r2
 8012a52:	1ac0      	subs	r0, r0, r3
 8012a54:	60a0      	str	r0, [r4, #8]
 8012a56:	3708      	adds	r7, #8
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d1ec      	bne.n	8012a36 <__sprint_r+0x18>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	60a3      	str	r3, [r4, #8]
 8012a60:	2300      	movs	r3, #0
 8012a62:	6063      	str	r3, [r4, #4]
 8012a64:	b005      	add	sp, #20
 8012a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a68:	9902      	ldr	r1, [sp, #8]
 8012a6a:	00b3      	lsls	r3, r6, #2
 8012a6c:	58c9      	ldr	r1, [r1, r3]
 8012a6e:	002a      	movs	r2, r5
 8012a70:	9801      	ldr	r0, [sp, #4]
 8012a72:	f000 ff59 	bl	8013928 <_fputwc_r>
 8012a76:	1c43      	adds	r3, r0, #1
 8012a78:	d0f0      	beq.n	8012a5c <__sprint_r+0x3e>
 8012a7a:	3601      	adds	r6, #1
 8012a7c:	e7e2      	b.n	8012a44 <__sprint_r+0x26>
 8012a7e:	9801      	ldr	r0, [sp, #4]
 8012a80:	f000 fd14 	bl	80134ac <__sfvwrite_r>
 8012a84:	e7ea      	b.n	8012a5c <__sprint_r+0x3e>
	...

08012a88 <_vfiprintf_r>:
 8012a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a8a:	b0c1      	sub	sp, #260	; 0x104
 8012a8c:	001c      	movs	r4, r3
 8012a8e:	001f      	movs	r7, r3
 8012a90:	9006      	str	r0, [sp, #24]
 8012a92:	9103      	str	r1, [sp, #12]
 8012a94:	9207      	str	r2, [sp, #28]
 8012a96:	2800      	cmp	r0, #0
 8012a98:	d004      	beq.n	8012aa4 <_vfiprintf_r+0x1c>
 8012a9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d101      	bne.n	8012aa4 <_vfiprintf_r+0x1c>
 8012aa0:	f7fa fad6 	bl	800d050 <__sinit>
 8012aa4:	9b03      	ldr	r3, [sp, #12]
 8012aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012aa8:	07db      	lsls	r3, r3, #31
 8012aaa:	d407      	bmi.n	8012abc <_vfiprintf_r+0x34>
 8012aac:	9b03      	ldr	r3, [sp, #12]
 8012aae:	899b      	ldrh	r3, [r3, #12]
 8012ab0:	059b      	lsls	r3, r3, #22
 8012ab2:	d403      	bmi.n	8012abc <_vfiprintf_r+0x34>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012ab8:	f7fa fce8 	bl	800d48c <__retarget_lock_acquire_recursive>
 8012abc:	9b03      	ldr	r3, [sp, #12]
 8012abe:	220c      	movs	r2, #12
 8012ac0:	5e9a      	ldrsh	r2, [r3, r2]
 8012ac2:	2380      	movs	r3, #128	; 0x80
 8012ac4:	019b      	lsls	r3, r3, #6
 8012ac6:	421a      	tst	r2, r3
 8012ac8:	d107      	bne.n	8012ada <_vfiprintf_r+0x52>
 8012aca:	4313      	orrs	r3, r2
 8012acc:	9a03      	ldr	r2, [sp, #12]
 8012ace:	8193      	strh	r3, [r2, #12]
 8012ad0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012ad2:	4aa3      	ldr	r2, [pc, #652]	; (8012d60 <_vfiprintf_r+0x2d8>)
 8012ad4:	4013      	ands	r3, r2
 8012ad6:	9a03      	ldr	r2, [sp, #12]
 8012ad8:	6653      	str	r3, [r2, #100]	; 0x64
 8012ada:	9b03      	ldr	r3, [sp, #12]
 8012adc:	899b      	ldrh	r3, [r3, #12]
 8012ade:	071b      	lsls	r3, r3, #28
 8012ae0:	d503      	bpl.n	8012aea <_vfiprintf_r+0x62>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d118      	bne.n	8012b1c <_vfiprintf_r+0x94>
 8012aea:	9903      	ldr	r1, [sp, #12]
 8012aec:	9806      	ldr	r0, [sp, #24]
 8012aee:	f000 fe79 	bl	80137e4 <__swsetup_r>
 8012af2:	2800      	cmp	r0, #0
 8012af4:	d012      	beq.n	8012b1c <_vfiprintf_r+0x94>
 8012af6:	9b03      	ldr	r3, [sp, #12]
 8012af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012afa:	07db      	lsls	r3, r3, #31
 8012afc:	d505      	bpl.n	8012b0a <_vfiprintf_r+0x82>
 8012afe:	2301      	movs	r3, #1
 8012b00:	425b      	negs	r3, r3
 8012b02:	9308      	str	r3, [sp, #32]
 8012b04:	9808      	ldr	r0, [sp, #32]
 8012b06:	b041      	add	sp, #260	; 0x104
 8012b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b0a:	9b03      	ldr	r3, [sp, #12]
 8012b0c:	899b      	ldrh	r3, [r3, #12]
 8012b0e:	059b      	lsls	r3, r3, #22
 8012b10:	d4f5      	bmi.n	8012afe <_vfiprintf_r+0x76>
 8012b12:	9b03      	ldr	r3, [sp, #12]
 8012b14:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012b16:	f7fa fcba 	bl	800d48e <__retarget_lock_release_recursive>
 8012b1a:	e7f0      	b.n	8012afe <_vfiprintf_r+0x76>
 8012b1c:	221a      	movs	r2, #26
 8012b1e:	9b03      	ldr	r3, [sp, #12]
 8012b20:	899b      	ldrh	r3, [r3, #12]
 8012b22:	401a      	ands	r2, r3
 8012b24:	2a0a      	cmp	r2, #10
 8012b26:	d116      	bne.n	8012b56 <_vfiprintf_r+0xce>
 8012b28:	9a03      	ldr	r2, [sp, #12]
 8012b2a:	210e      	movs	r1, #14
 8012b2c:	5e52      	ldrsh	r2, [r2, r1]
 8012b2e:	2a00      	cmp	r2, #0
 8012b30:	db11      	blt.n	8012b56 <_vfiprintf_r+0xce>
 8012b32:	9a03      	ldr	r2, [sp, #12]
 8012b34:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012b36:	07d2      	lsls	r2, r2, #31
 8012b38:	d405      	bmi.n	8012b46 <_vfiprintf_r+0xbe>
 8012b3a:	059b      	lsls	r3, r3, #22
 8012b3c:	d403      	bmi.n	8012b46 <_vfiprintf_r+0xbe>
 8012b3e:	9b03      	ldr	r3, [sp, #12]
 8012b40:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012b42:	f7fa fca4 	bl	800d48e <__retarget_lock_release_recursive>
 8012b46:	0023      	movs	r3, r4
 8012b48:	9a07      	ldr	r2, [sp, #28]
 8012b4a:	9903      	ldr	r1, [sp, #12]
 8012b4c:	9806      	ldr	r0, [sp, #24]
 8012b4e:	f000 fc69 	bl	8013424 <__sbprintf>
 8012b52:	9008      	str	r0, [sp, #32]
 8012b54:	e7d6      	b.n	8012b04 <_vfiprintf_r+0x7c>
 8012b56:	2300      	movs	r3, #0
 8012b58:	ad17      	add	r5, sp, #92	; 0x5c
 8012b5a:	9514      	str	r5, [sp, #80]	; 0x50
 8012b5c:	9316      	str	r3, [sp, #88]	; 0x58
 8012b5e:	9315      	str	r3, [sp, #84]	; 0x54
 8012b60:	930c      	str	r3, [sp, #48]	; 0x30
 8012b62:	930d      	str	r3, [sp, #52]	; 0x34
 8012b64:	930e      	str	r3, [sp, #56]	; 0x38
 8012b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b68:	9308      	str	r3, [sp, #32]
 8012b6a:	9c07      	ldr	r4, [sp, #28]
 8012b6c:	7823      	ldrb	r3, [r4, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d002      	beq.n	8012b78 <_vfiprintf_r+0xf0>
 8012b72:	2b25      	cmp	r3, #37	; 0x25
 8012b74:	d000      	beq.n	8012b78 <_vfiprintf_r+0xf0>
 8012b76:	e08d      	b.n	8012c94 <_vfiprintf_r+0x20c>
 8012b78:	9b07      	ldr	r3, [sp, #28]
 8012b7a:	1ae6      	subs	r6, r4, r3
 8012b7c:	429c      	cmp	r4, r3
 8012b7e:	d016      	beq.n	8012bae <_vfiprintf_r+0x126>
 8012b80:	602b      	str	r3, [r5, #0]
 8012b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012b84:	606e      	str	r6, [r5, #4]
 8012b86:	199b      	adds	r3, r3, r6
 8012b88:	9316      	str	r3, [sp, #88]	; 0x58
 8012b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b8c:	3508      	adds	r5, #8
 8012b8e:	3301      	adds	r3, #1
 8012b90:	9315      	str	r3, [sp, #84]	; 0x54
 8012b92:	2b07      	cmp	r3, #7
 8012b94:	dd08      	ble.n	8012ba8 <_vfiprintf_r+0x120>
 8012b96:	9903      	ldr	r1, [sp, #12]
 8012b98:	9806      	ldr	r0, [sp, #24]
 8012b9a:	aa14      	add	r2, sp, #80	; 0x50
 8012b9c:	f7ff ff3f 	bl	8012a1e <__sprint_r>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	d000      	beq.n	8012ba6 <_vfiprintf_r+0x11e>
 8012ba4:	e3d9      	b.n	801335a <_vfiprintf_r+0x8d2>
 8012ba6:	ad17      	add	r5, sp, #92	; 0x5c
 8012ba8:	9b08      	ldr	r3, [sp, #32]
 8012baa:	199b      	adds	r3, r3, r6
 8012bac:	9308      	str	r3, [sp, #32]
 8012bae:	7823      	ldrb	r3, [r4, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d101      	bne.n	8012bb8 <_vfiprintf_r+0x130>
 8012bb4:	f000 fbf6 	bl	80133a4 <_vfiprintf_r+0x91c>
 8012bb8:	2200      	movs	r2, #0
 8012bba:	a912      	add	r1, sp, #72	; 0x48
 8012bbc:	70ca      	strb	r2, [r1, #3]
 8012bbe:	2101      	movs	r1, #1
 8012bc0:	1c63      	adds	r3, r4, #1
 8012bc2:	0014      	movs	r4, r2
 8012bc4:	4249      	negs	r1, r1
 8012bc6:	9105      	str	r1, [sp, #20]
 8012bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8012bca:	1c5a      	adds	r2, r3, #1
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	9207      	str	r2, [sp, #28]
 8012bd0:	0018      	movs	r0, r3
 8012bd2:	3820      	subs	r0, #32
 8012bd4:	285a      	cmp	r0, #90	; 0x5a
 8012bd6:	d900      	bls.n	8012bda <_vfiprintf_r+0x152>
 8012bd8:	e362      	b.n	80132a0 <_vfiprintf_r+0x818>
 8012bda:	f7ed faa5 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012bde:	0078      	.short	0x0078
 8012be0:	03610361 	.word	0x03610361
 8012be4:	03610081 	.word	0x03610081
 8012be8:	03610361 	.word	0x03610361
 8012bec:	0361005d 	.word	0x0361005d
 8012bf0:	00830361 	.word	0x00830361
 8012bf4:	0361008b 	.word	0x0361008b
 8012bf8:	008f0089 	.word	0x008f0089
 8012bfc:	00ad0361 	.word	0x00ad0361
 8012c00:	00af00af 	.word	0x00af00af
 8012c04:	00af00af 	.word	0x00af00af
 8012c08:	00af00af 	.word	0x00af00af
 8012c0c:	00af00af 	.word	0x00af00af
 8012c10:	036100af 	.word	0x036100af
 8012c14:	03610361 	.word	0x03610361
 8012c18:	03610361 	.word	0x03610361
 8012c1c:	03610361 	.word	0x03610361
 8012c20:	03610361 	.word	0x03610361
 8012c24:	00e600da 	.word	0x00e600da
 8012c28:	03610361 	.word	0x03610361
 8012c2c:	03610361 	.word	0x03610361
 8012c30:	03610361 	.word	0x03610361
 8012c34:	03610361 	.word	0x03610361
 8012c38:	03610361 	.word	0x03610361
 8012c3c:	03610143 	.word	0x03610143
 8012c40:	03610361 	.word	0x03610361
 8012c44:	03610182 	.word	0x03610182
 8012c48:	0361027c 	.word	0x0361027c
 8012c4c:	02ae0361 	.word	0x02ae0361
 8012c50:	03610361 	.word	0x03610361
 8012c54:	03610361 	.word	0x03610361
 8012c58:	03610361 	.word	0x03610361
 8012c5c:	03610361 	.word	0x03610361
 8012c60:	03610361 	.word	0x03610361
 8012c64:	00e800da 	.word	0x00e800da
 8012c68:	03610361 	.word	0x03610361
 8012c6c:	00c30361 	.word	0x00c30361
 8012c70:	00d600e8 	.word	0x00d600e8
 8012c74:	00cf0361 	.word	0x00cf0361
 8012c78:	01260361 	.word	0x01260361
 8012c7c:	01740145 	.word	0x01740145
 8012c80:	036100d6 	.word	0x036100d6
 8012c84:	007f0182 	.word	0x007f0182
 8012c88:	0361027e 	.word	0x0361027e
 8012c8c:	02cd0361 	.word	0x02cd0361
 8012c90:	007f0361 	.word	0x007f0361
 8012c94:	3401      	adds	r4, #1
 8012c96:	e769      	b.n	8012b6c <_vfiprintf_r+0xe4>
 8012c98:	9806      	ldr	r0, [sp, #24]
 8012c9a:	f7fe facd 	bl	8011238 <_localeconv_r>
 8012c9e:	6843      	ldr	r3, [r0, #4]
 8012ca0:	0018      	movs	r0, r3
 8012ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ca4:	f7ed fa2e 	bl	8000104 <strlen>
 8012ca8:	900e      	str	r0, [sp, #56]	; 0x38
 8012caa:	9806      	ldr	r0, [sp, #24]
 8012cac:	f7fe fac4 	bl	8011238 <_localeconv_r>
 8012cb0:	6883      	ldr	r3, [r0, #8]
 8012cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8012cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d010      	beq.n	8012cdc <_vfiprintf_r+0x254>
 8012cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00d      	beq.n	8012cdc <_vfiprintf_r+0x254>
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00a      	beq.n	8012cdc <_vfiprintf_r+0x254>
 8012cc6:	2380      	movs	r3, #128	; 0x80
 8012cc8:	00db      	lsls	r3, r3, #3
 8012cca:	431c      	orrs	r4, r3
 8012ccc:	e006      	b.n	8012cdc <_vfiprintf_r+0x254>
 8012cce:	ab12      	add	r3, sp, #72	; 0x48
 8012cd0:	78da      	ldrb	r2, [r3, #3]
 8012cd2:	3303      	adds	r3, #3
 8012cd4:	2a00      	cmp	r2, #0
 8012cd6:	d101      	bne.n	8012cdc <_vfiprintf_r+0x254>
 8012cd8:	3220      	adds	r2, #32
 8012cda:	701a      	strb	r2, [r3, #0]
 8012cdc:	9b07      	ldr	r3, [sp, #28]
 8012cde:	e774      	b.n	8012bca <_vfiprintf_r+0x142>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e7f2      	b.n	8012cca <_vfiprintf_r+0x242>
 8012ce4:	cf08      	ldmia	r7!, {r3}
 8012ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	daf7      	bge.n	8012cdc <_vfiprintf_r+0x254>
 8012cec:	425b      	negs	r3, r3
 8012cee:	9309      	str	r3, [sp, #36]	; 0x24
 8012cf0:	2304      	movs	r3, #4
 8012cf2:	e7ea      	b.n	8012cca <_vfiprintf_r+0x242>
 8012cf4:	222b      	movs	r2, #43	; 0x2b
 8012cf6:	ab12      	add	r3, sp, #72	; 0x48
 8012cf8:	70da      	strb	r2, [r3, #3]
 8012cfa:	e7ef      	b.n	8012cdc <_vfiprintf_r+0x254>
 8012cfc:	9b07      	ldr	r3, [sp, #28]
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	781b      	ldrb	r3, [r3, #0]
 8012d02:	2b2a      	cmp	r3, #42	; 0x2a
 8012d04:	d00f      	beq.n	8012d26 <_vfiprintf_r+0x29e>
 8012d06:	2100      	movs	r1, #0
 8012d08:	9105      	str	r1, [sp, #20]
 8012d0a:	0019      	movs	r1, r3
 8012d0c:	3930      	subs	r1, #48	; 0x30
 8012d0e:	9207      	str	r2, [sp, #28]
 8012d10:	2909      	cmp	r1, #9
 8012d12:	d900      	bls.n	8012d16 <_vfiprintf_r+0x28e>
 8012d14:	e75c      	b.n	8012bd0 <_vfiprintf_r+0x148>
 8012d16:	200a      	movs	r0, #10
 8012d18:	9b05      	ldr	r3, [sp, #20]
 8012d1a:	4343      	muls	r3, r0
 8012d1c:	185b      	adds	r3, r3, r1
 8012d1e:	9305      	str	r3, [sp, #20]
 8012d20:	7813      	ldrb	r3, [r2, #0]
 8012d22:	3201      	adds	r2, #1
 8012d24:	e7f1      	b.n	8012d0a <_vfiprintf_r+0x282>
 8012d26:	cf08      	ldmia	r7!, {r3}
 8012d28:	9305      	str	r3, [sp, #20]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	da02      	bge.n	8012d34 <_vfiprintf_r+0x2ac>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	425b      	negs	r3, r3
 8012d32:	9305      	str	r3, [sp, #20]
 8012d34:	9207      	str	r2, [sp, #28]
 8012d36:	e7d1      	b.n	8012cdc <_vfiprintf_r+0x254>
 8012d38:	2380      	movs	r3, #128	; 0x80
 8012d3a:	e7c6      	b.n	8012cca <_vfiprintf_r+0x242>
 8012d3c:	2100      	movs	r1, #0
 8012d3e:	9a07      	ldr	r2, [sp, #28]
 8012d40:	9109      	str	r1, [sp, #36]	; 0x24
 8012d42:	200a      	movs	r0, #10
 8012d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d46:	3b30      	subs	r3, #48	; 0x30
 8012d48:	4341      	muls	r1, r0
 8012d4a:	185b      	adds	r3, r3, r1
 8012d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d4e:	0013      	movs	r3, r2
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	3201      	adds	r2, #1
 8012d54:	0019      	movs	r1, r3
 8012d56:	3930      	subs	r1, #48	; 0x30
 8012d58:	9207      	str	r2, [sp, #28]
 8012d5a:	2909      	cmp	r1, #9
 8012d5c:	d9f1      	bls.n	8012d42 <_vfiprintf_r+0x2ba>
 8012d5e:	e737      	b.n	8012bd0 <_vfiprintf_r+0x148>
 8012d60:	ffffdfff 	.word	0xffffdfff
 8012d64:	9b07      	ldr	r3, [sp, #28]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	2b68      	cmp	r3, #104	; 0x68
 8012d6a:	d105      	bne.n	8012d78 <_vfiprintf_r+0x2f0>
 8012d6c:	9b07      	ldr	r3, [sp, #28]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	9307      	str	r3, [sp, #28]
 8012d72:	2380      	movs	r3, #128	; 0x80
 8012d74:	009b      	lsls	r3, r3, #2
 8012d76:	e7a8      	b.n	8012cca <_vfiprintf_r+0x242>
 8012d78:	2340      	movs	r3, #64	; 0x40
 8012d7a:	e7a6      	b.n	8012cca <_vfiprintf_r+0x242>
 8012d7c:	9b07      	ldr	r3, [sp, #28]
 8012d7e:	781b      	ldrb	r3, [r3, #0]
 8012d80:	2b6c      	cmp	r3, #108	; 0x6c
 8012d82:	d104      	bne.n	8012d8e <_vfiprintf_r+0x306>
 8012d84:	9b07      	ldr	r3, [sp, #28]
 8012d86:	3301      	adds	r3, #1
 8012d88:	9307      	str	r3, [sp, #28]
 8012d8a:	2320      	movs	r3, #32
 8012d8c:	e79d      	b.n	8012cca <_vfiprintf_r+0x242>
 8012d8e:	2310      	movs	r3, #16
 8012d90:	e79b      	b.n	8012cca <_vfiprintf_r+0x242>
 8012d92:	003a      	movs	r2, r7
 8012d94:	ca08      	ldmia	r2!, {r3}
 8012d96:	ae27      	add	r6, sp, #156	; 0x9c
 8012d98:	7033      	strb	r3, [r6, #0]
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	9204      	str	r2, [sp, #16]
 8012d9e:	aa12      	add	r2, sp, #72	; 0x48
 8012da0:	70d3      	strb	r3, [r2, #3]
 8012da2:	2201      	movs	r2, #1
 8012da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8012da6:	9205      	str	r2, [sp, #20]
 8012da8:	e0b0      	b.n	8012f0c <_vfiprintf_r+0x484>
 8012daa:	2310      	movs	r3, #16
 8012dac:	431c      	orrs	r4, r3
 8012dae:	06a3      	lsls	r3, r4, #26
 8012db0:	d52a      	bpl.n	8012e08 <_vfiprintf_r+0x380>
 8012db2:	2307      	movs	r3, #7
 8012db4:	3707      	adds	r7, #7
 8012db6:	439f      	bics	r7, r3
 8012db8:	0039      	movs	r1, r7
 8012dba:	c90c      	ldmia	r1!, {r2, r3}
 8012dbc:	9200      	str	r2, [sp, #0]
 8012dbe:	9301      	str	r3, [sp, #4]
 8012dc0:	9104      	str	r1, [sp, #16]
 8012dc2:	9a01      	ldr	r2, [sp, #4]
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	2a00      	cmp	r2, #0
 8012dc8:	da09      	bge.n	8012dde <_vfiprintf_r+0x356>
 8012dca:	9e00      	ldr	r6, [sp, #0]
 8012dcc:	9f01      	ldr	r7, [sp, #4]
 8012dce:	2200      	movs	r2, #0
 8012dd0:	4271      	negs	r1, r6
 8012dd2:	41ba      	sbcs	r2, r7
 8012dd4:	9100      	str	r1, [sp, #0]
 8012dd6:	9201      	str	r2, [sp, #4]
 8012dd8:	212d      	movs	r1, #45	; 0x2d
 8012dda:	aa12      	add	r2, sp, #72	; 0x48
 8012ddc:	70d1      	strb	r1, [r2, #3]
 8012dde:	9901      	ldr	r1, [sp, #4]
 8012de0:	9a00      	ldr	r2, [sp, #0]
 8012de2:	430a      	orrs	r2, r1
 8012de4:	9905      	ldr	r1, [sp, #20]
 8012de6:	3101      	adds	r1, #1
 8012de8:	d100      	bne.n	8012dec <_vfiprintf_r+0x364>
 8012dea:	e2e9      	b.n	80133c0 <_vfiprintf_r+0x938>
 8012dec:	2180      	movs	r1, #128	; 0x80
 8012dee:	0027      	movs	r7, r4
 8012df0:	438f      	bics	r7, r1
 8012df2:	2a00      	cmp	r2, #0
 8012df4:	d000      	beq.n	8012df8 <_vfiprintf_r+0x370>
 8012df6:	e2e7      	b.n	80133c8 <_vfiprintf_r+0x940>
 8012df8:	9a05      	ldr	r2, [sp, #20]
 8012dfa:	2a00      	cmp	r2, #0
 8012dfc:	d100      	bne.n	8012e00 <_vfiprintf_r+0x378>
 8012dfe:	e243      	b.n	8013288 <_vfiprintf_r+0x800>
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d000      	beq.n	8012e06 <_vfiprintf_r+0x37e>
 8012e04:	e2e3      	b.n	80133ce <_vfiprintf_r+0x946>
 8012e06:	e1e7      	b.n	80131d8 <_vfiprintf_r+0x750>
 8012e08:	003a      	movs	r2, r7
 8012e0a:	ca08      	ldmia	r2!, {r3}
 8012e0c:	9204      	str	r2, [sp, #16]
 8012e0e:	06e2      	lsls	r2, r4, #27
 8012e10:	d503      	bpl.n	8012e1a <_vfiprintf_r+0x392>
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	17db      	asrs	r3, r3, #31
 8012e16:	9301      	str	r3, [sp, #4]
 8012e18:	e7d3      	b.n	8012dc2 <_vfiprintf_r+0x33a>
 8012e1a:	0662      	lsls	r2, r4, #25
 8012e1c:	d501      	bpl.n	8012e22 <_vfiprintf_r+0x39a>
 8012e1e:	b21b      	sxth	r3, r3
 8012e20:	e7f7      	b.n	8012e12 <_vfiprintf_r+0x38a>
 8012e22:	05a2      	lsls	r2, r4, #22
 8012e24:	d5f5      	bpl.n	8012e12 <_vfiprintf_r+0x38a>
 8012e26:	b25b      	sxtb	r3, r3
 8012e28:	e7f3      	b.n	8012e12 <_vfiprintf_r+0x38a>
 8012e2a:	1d3b      	adds	r3, r7, #4
 8012e2c:	9304      	str	r3, [sp, #16]
 8012e2e:	06a3      	lsls	r3, r4, #26
 8012e30:	d506      	bpl.n	8012e40 <_vfiprintf_r+0x3b8>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	9a08      	ldr	r2, [sp, #32]
 8012e36:	601a      	str	r2, [r3, #0]
 8012e38:	17d2      	asrs	r2, r2, #31
 8012e3a:	605a      	str	r2, [r3, #4]
 8012e3c:	9f04      	ldr	r7, [sp, #16]
 8012e3e:	e694      	b.n	8012b6a <_vfiprintf_r+0xe2>
 8012e40:	06e3      	lsls	r3, r4, #27
 8012e42:	d503      	bpl.n	8012e4c <_vfiprintf_r+0x3c4>
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	9a08      	ldr	r2, [sp, #32]
 8012e48:	601a      	str	r2, [r3, #0]
 8012e4a:	e7f7      	b.n	8012e3c <_vfiprintf_r+0x3b4>
 8012e4c:	0663      	lsls	r3, r4, #25
 8012e4e:	d503      	bpl.n	8012e58 <_vfiprintf_r+0x3d0>
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	9a08      	ldr	r2, [sp, #32]
 8012e54:	801a      	strh	r2, [r3, #0]
 8012e56:	e7f1      	b.n	8012e3c <_vfiprintf_r+0x3b4>
 8012e58:	05a4      	lsls	r4, r4, #22
 8012e5a:	d5f3      	bpl.n	8012e44 <_vfiprintf_r+0x3bc>
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	9a08      	ldr	r2, [sp, #32]
 8012e60:	701a      	strb	r2, [r3, #0]
 8012e62:	e7eb      	b.n	8012e3c <_vfiprintf_r+0x3b4>
 8012e64:	2310      	movs	r3, #16
 8012e66:	431c      	orrs	r4, r3
 8012e68:	2320      	movs	r3, #32
 8012e6a:	0020      	movs	r0, r4
 8012e6c:	4018      	ands	r0, r3
 8012e6e:	421c      	tst	r4, r3
 8012e70:	d00d      	beq.n	8012e8e <_vfiprintf_r+0x406>
 8012e72:	3b19      	subs	r3, #25
 8012e74:	3707      	adds	r7, #7
 8012e76:	439f      	bics	r7, r3
 8012e78:	0039      	movs	r1, r7
 8012e7a:	c90c      	ldmia	r1!, {r2, r3}
 8012e7c:	9200      	str	r2, [sp, #0]
 8012e7e:	9301      	str	r3, [sp, #4]
 8012e80:	9104      	str	r1, [sp, #16]
 8012e82:	4bcc      	ldr	r3, [pc, #816]	; (80131b4 <_vfiprintf_r+0x72c>)
 8012e84:	401c      	ands	r4, r3
 8012e86:	2300      	movs	r3, #0
 8012e88:	2100      	movs	r1, #0
 8012e8a:	aa12      	add	r2, sp, #72	; 0x48
 8012e8c:	e7a6      	b.n	8012ddc <_vfiprintf_r+0x354>
 8012e8e:	003a      	movs	r2, r7
 8012e90:	ca08      	ldmia	r2!, {r3}
 8012e92:	0021      	movs	r1, r4
 8012e94:	9204      	str	r2, [sp, #16]
 8012e96:	2210      	movs	r2, #16
 8012e98:	4011      	ands	r1, r2
 8012e9a:	4214      	tst	r4, r2
 8012e9c:	d002      	beq.n	8012ea4 <_vfiprintf_r+0x41c>
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	9001      	str	r0, [sp, #4]
 8012ea2:	e7ee      	b.n	8012e82 <_vfiprintf_r+0x3fa>
 8012ea4:	2240      	movs	r2, #64	; 0x40
 8012ea6:	0020      	movs	r0, r4
 8012ea8:	4010      	ands	r0, r2
 8012eaa:	4214      	tst	r4, r2
 8012eac:	d003      	beq.n	8012eb6 <_vfiprintf_r+0x42e>
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	9300      	str	r3, [sp, #0]
 8012eb2:	9101      	str	r1, [sp, #4]
 8012eb4:	e7e5      	b.n	8012e82 <_vfiprintf_r+0x3fa>
 8012eb6:	2280      	movs	r2, #128	; 0x80
 8012eb8:	0021      	movs	r1, r4
 8012eba:	0092      	lsls	r2, r2, #2
 8012ebc:	4011      	ands	r1, r2
 8012ebe:	4214      	tst	r4, r2
 8012ec0:	d0f6      	beq.n	8012eb0 <_vfiprintf_r+0x428>
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	e7eb      	b.n	8012e9e <_vfiprintf_r+0x416>
 8012ec6:	003b      	movs	r3, r7
 8012ec8:	cb04      	ldmia	r3!, {r2}
 8012eca:	49bb      	ldr	r1, [pc, #748]	; (80131b8 <_vfiprintf_r+0x730>)
 8012ecc:	9304      	str	r3, [sp, #16]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	9200      	str	r2, [sp, #0]
 8012ed2:	aa13      	add	r2, sp, #76	; 0x4c
 8012ed4:	8011      	strh	r1, [r2, #0]
 8012ed6:	4ab9      	ldr	r2, [pc, #740]	; (80131bc <_vfiprintf_r+0x734>)
 8012ed8:	9301      	str	r3, [sp, #4]
 8012eda:	3302      	adds	r3, #2
 8012edc:	431c      	orrs	r4, r3
 8012ede:	920c      	str	r2, [sp, #48]	; 0x30
 8012ee0:	e7d2      	b.n	8012e88 <_vfiprintf_r+0x400>
 8012ee2:	003b      	movs	r3, r7
 8012ee4:	2700      	movs	r7, #0
 8012ee6:	cb40      	ldmia	r3!, {r6}
 8012ee8:	9304      	str	r3, [sp, #16]
 8012eea:	ab12      	add	r3, sp, #72	; 0x48
 8012eec:	70df      	strb	r7, [r3, #3]
 8012eee:	9b05      	ldr	r3, [sp, #20]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	d100      	bne.n	8012ef6 <_vfiprintf_r+0x46e>
 8012ef4:	e0ea      	b.n	80130cc <_vfiprintf_r+0x644>
 8012ef6:	0039      	movs	r1, r7
 8012ef8:	0030      	movs	r0, r6
 8012efa:	9a05      	ldr	r2, [sp, #20]
 8012efc:	f7fe f9b4 	bl	8011268 <memchr>
 8012f00:	900b      	str	r0, [sp, #44]	; 0x2c
 8012f02:	42b8      	cmp	r0, r7
 8012f04:	d002      	beq.n	8012f0c <_vfiprintf_r+0x484>
 8012f06:	1b83      	subs	r3, r0, r6
 8012f08:	9305      	str	r3, [sp, #20]
 8012f0a:	970b      	str	r7, [sp, #44]	; 0x2c
 8012f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f0e:	9a05      	ldr	r2, [sp, #20]
 8012f10:	930a      	str	r3, [sp, #40]	; 0x28
 8012f12:	4293      	cmp	r3, r2
 8012f14:	da00      	bge.n	8012f18 <_vfiprintf_r+0x490>
 8012f16:	920a      	str	r2, [sp, #40]	; 0x28
 8012f18:	ab12      	add	r3, sp, #72	; 0x48
 8012f1a:	3303      	adds	r3, #3
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	1e5a      	subs	r2, r3, #1
 8012f20:	4193      	sbcs	r3, r2
 8012f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f24:	18d3      	adds	r3, r2, r3
 8012f26:	930a      	str	r3, [sp, #40]	; 0x28
 8012f28:	0022      	movs	r2, r4
 8012f2a:	2302      	movs	r3, #2
 8012f2c:	401a      	ands	r2, r3
 8012f2e:	9210      	str	r2, [sp, #64]	; 0x40
 8012f30:	421c      	tst	r4, r3
 8012f32:	d002      	beq.n	8012f3a <_vfiprintf_r+0x4b2>
 8012f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f36:	3302      	adds	r3, #2
 8012f38:	930a      	str	r3, [sp, #40]	; 0x28
 8012f3a:	2384      	movs	r3, #132	; 0x84
 8012f3c:	0022      	movs	r2, r4
 8012f3e:	401a      	ands	r2, r3
 8012f40:	9211      	str	r2, [sp, #68]	; 0x44
 8012f42:	421c      	tst	r4, r3
 8012f44:	d11e      	bne.n	8012f84 <_vfiprintf_r+0x4fc>
 8012f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f4a:	1a9f      	subs	r7, r3, r2
 8012f4c:	2f00      	cmp	r7, #0
 8012f4e:	dd19      	ble.n	8012f84 <_vfiprintf_r+0x4fc>
 8012f50:	0029      	movs	r1, r5
 8012f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f54:	489a      	ldr	r0, [pc, #616]	; (80131c0 <_vfiprintf_r+0x738>)
 8012f56:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012f58:	3301      	adds	r3, #1
 8012f5a:	3108      	adds	r1, #8
 8012f5c:	6028      	str	r0, [r5, #0]
 8012f5e:	2f10      	cmp	r7, #16
 8012f60:	dd00      	ble.n	8012f64 <_vfiprintf_r+0x4dc>
 8012f62:	e1a7      	b.n	80132b4 <_vfiprintf_r+0x82c>
 8012f64:	606f      	str	r7, [r5, #4]
 8012f66:	18bf      	adds	r7, r7, r2
 8012f68:	000d      	movs	r5, r1
 8012f6a:	9716      	str	r7, [sp, #88]	; 0x58
 8012f6c:	9315      	str	r3, [sp, #84]	; 0x54
 8012f6e:	2b07      	cmp	r3, #7
 8012f70:	dd08      	ble.n	8012f84 <_vfiprintf_r+0x4fc>
 8012f72:	9903      	ldr	r1, [sp, #12]
 8012f74:	9806      	ldr	r0, [sp, #24]
 8012f76:	aa14      	add	r2, sp, #80	; 0x50
 8012f78:	f7ff fd51 	bl	8012a1e <__sprint_r>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d000      	beq.n	8012f82 <_vfiprintf_r+0x4fa>
 8012f80:	e1eb      	b.n	801335a <_vfiprintf_r+0x8d2>
 8012f82:	ad17      	add	r5, sp, #92	; 0x5c
 8012f84:	a912      	add	r1, sp, #72	; 0x48
 8012f86:	78c8      	ldrb	r0, [r1, #3]
 8012f88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f8c:	3103      	adds	r1, #3
 8012f8e:	2800      	cmp	r0, #0
 8012f90:	d012      	beq.n	8012fb8 <_vfiprintf_r+0x530>
 8012f92:	6029      	str	r1, [r5, #0]
 8012f94:	2101      	movs	r1, #1
 8012f96:	3301      	adds	r3, #1
 8012f98:	1852      	adds	r2, r2, r1
 8012f9a:	6069      	str	r1, [r5, #4]
 8012f9c:	9216      	str	r2, [sp, #88]	; 0x58
 8012f9e:	9315      	str	r3, [sp, #84]	; 0x54
 8012fa0:	3508      	adds	r5, #8
 8012fa2:	2b07      	cmp	r3, #7
 8012fa4:	dd08      	ble.n	8012fb8 <_vfiprintf_r+0x530>
 8012fa6:	9903      	ldr	r1, [sp, #12]
 8012fa8:	9806      	ldr	r0, [sp, #24]
 8012faa:	aa14      	add	r2, sp, #80	; 0x50
 8012fac:	f7ff fd37 	bl	8012a1e <__sprint_r>
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	d000      	beq.n	8012fb6 <_vfiprintf_r+0x52e>
 8012fb4:	e1d1      	b.n	801335a <_vfiprintf_r+0x8d2>
 8012fb6:	ad17      	add	r5, sp, #92	; 0x5c
 8012fb8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012fba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fbe:	2900      	cmp	r1, #0
 8012fc0:	d013      	beq.n	8012fea <_vfiprintf_r+0x562>
 8012fc2:	a913      	add	r1, sp, #76	; 0x4c
 8012fc4:	6029      	str	r1, [r5, #0]
 8012fc6:	2102      	movs	r1, #2
 8012fc8:	3301      	adds	r3, #1
 8012fca:	1852      	adds	r2, r2, r1
 8012fcc:	6069      	str	r1, [r5, #4]
 8012fce:	9216      	str	r2, [sp, #88]	; 0x58
 8012fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8012fd2:	3508      	adds	r5, #8
 8012fd4:	2b07      	cmp	r3, #7
 8012fd6:	dd08      	ble.n	8012fea <_vfiprintf_r+0x562>
 8012fd8:	9903      	ldr	r1, [sp, #12]
 8012fda:	9806      	ldr	r0, [sp, #24]
 8012fdc:	aa14      	add	r2, sp, #80	; 0x50
 8012fde:	f7ff fd1e 	bl	8012a1e <__sprint_r>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d000      	beq.n	8012fe8 <_vfiprintf_r+0x560>
 8012fe6:	e1b8      	b.n	801335a <_vfiprintf_r+0x8d2>
 8012fe8:	ad17      	add	r5, sp, #92	; 0x5c
 8012fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012fec:	2b80      	cmp	r3, #128	; 0x80
 8012fee:	d11e      	bne.n	801302e <_vfiprintf_r+0x5a6>
 8012ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ff4:	1a9f      	subs	r7, r3, r2
 8012ff6:	2f00      	cmp	r7, #0
 8012ff8:	dd19      	ble.n	801302e <_vfiprintf_r+0x5a6>
 8012ffa:	0029      	movs	r1, r5
 8012ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ffe:	4871      	ldr	r0, [pc, #452]	; (80131c4 <_vfiprintf_r+0x73c>)
 8013000:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013002:	3301      	adds	r3, #1
 8013004:	3108      	adds	r1, #8
 8013006:	6028      	str	r0, [r5, #0]
 8013008:	2f10      	cmp	r7, #16
 801300a:	dd00      	ble.n	801300e <_vfiprintf_r+0x586>
 801300c:	e164      	b.n	80132d8 <_vfiprintf_r+0x850>
 801300e:	606f      	str	r7, [r5, #4]
 8013010:	18bf      	adds	r7, r7, r2
 8013012:	000d      	movs	r5, r1
 8013014:	9716      	str	r7, [sp, #88]	; 0x58
 8013016:	9315      	str	r3, [sp, #84]	; 0x54
 8013018:	2b07      	cmp	r3, #7
 801301a:	dd08      	ble.n	801302e <_vfiprintf_r+0x5a6>
 801301c:	9903      	ldr	r1, [sp, #12]
 801301e:	9806      	ldr	r0, [sp, #24]
 8013020:	aa14      	add	r2, sp, #80	; 0x50
 8013022:	f7ff fcfc 	bl	8012a1e <__sprint_r>
 8013026:	2800      	cmp	r0, #0
 8013028:	d000      	beq.n	801302c <_vfiprintf_r+0x5a4>
 801302a:	e196      	b.n	801335a <_vfiprintf_r+0x8d2>
 801302c:	ad17      	add	r5, sp, #92	; 0x5c
 801302e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013030:	9a05      	ldr	r2, [sp, #20]
 8013032:	1a9f      	subs	r7, r3, r2
 8013034:	2f00      	cmp	r7, #0
 8013036:	dd19      	ble.n	801306c <_vfiprintf_r+0x5e4>
 8013038:	0029      	movs	r1, r5
 801303a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801303c:	4861      	ldr	r0, [pc, #388]	; (80131c4 <_vfiprintf_r+0x73c>)
 801303e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013040:	3301      	adds	r3, #1
 8013042:	3108      	adds	r1, #8
 8013044:	6028      	str	r0, [r5, #0]
 8013046:	2f10      	cmp	r7, #16
 8013048:	dd00      	ble.n	801304c <_vfiprintf_r+0x5c4>
 801304a:	e157      	b.n	80132fc <_vfiprintf_r+0x874>
 801304c:	606f      	str	r7, [r5, #4]
 801304e:	18bf      	adds	r7, r7, r2
 8013050:	000d      	movs	r5, r1
 8013052:	9716      	str	r7, [sp, #88]	; 0x58
 8013054:	9315      	str	r3, [sp, #84]	; 0x54
 8013056:	2b07      	cmp	r3, #7
 8013058:	dd08      	ble.n	801306c <_vfiprintf_r+0x5e4>
 801305a:	9903      	ldr	r1, [sp, #12]
 801305c:	9806      	ldr	r0, [sp, #24]
 801305e:	aa14      	add	r2, sp, #80	; 0x50
 8013060:	f7ff fcdd 	bl	8012a1e <__sprint_r>
 8013064:	2800      	cmp	r0, #0
 8013066:	d000      	beq.n	801306a <_vfiprintf_r+0x5e2>
 8013068:	e177      	b.n	801335a <_vfiprintf_r+0x8d2>
 801306a:	ad17      	add	r5, sp, #92	; 0x5c
 801306c:	9b05      	ldr	r3, [sp, #20]
 801306e:	9a05      	ldr	r2, [sp, #20]
 8013070:	606b      	str	r3, [r5, #4]
 8013072:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013074:	602e      	str	r6, [r5, #0]
 8013076:	189b      	adds	r3, r3, r2
 8013078:	9316      	str	r3, [sp, #88]	; 0x58
 801307a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801307c:	3508      	adds	r5, #8
 801307e:	3301      	adds	r3, #1
 8013080:	9315      	str	r3, [sp, #84]	; 0x54
 8013082:	2b07      	cmp	r3, #7
 8013084:	dd08      	ble.n	8013098 <_vfiprintf_r+0x610>
 8013086:	9903      	ldr	r1, [sp, #12]
 8013088:	9806      	ldr	r0, [sp, #24]
 801308a:	aa14      	add	r2, sp, #80	; 0x50
 801308c:	f7ff fcc7 	bl	8012a1e <__sprint_r>
 8013090:	2800      	cmp	r0, #0
 8013092:	d000      	beq.n	8013096 <_vfiprintf_r+0x60e>
 8013094:	e161      	b.n	801335a <_vfiprintf_r+0x8d2>
 8013096:	ad17      	add	r5, sp, #92	; 0x5c
 8013098:	0764      	lsls	r4, r4, #29
 801309a:	d500      	bpl.n	801309e <_vfiprintf_r+0x616>
 801309c:	e140      	b.n	8013320 <_vfiprintf_r+0x898>
 801309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130a2:	4293      	cmp	r3, r2
 80130a4:	da00      	bge.n	80130a8 <_vfiprintf_r+0x620>
 80130a6:	0013      	movs	r3, r2
 80130a8:	9a08      	ldr	r2, [sp, #32]
 80130aa:	18d3      	adds	r3, r2, r3
 80130ac:	9308      	str	r3, [sp, #32]
 80130ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d007      	beq.n	80130c4 <_vfiprintf_r+0x63c>
 80130b4:	9903      	ldr	r1, [sp, #12]
 80130b6:	9806      	ldr	r0, [sp, #24]
 80130b8:	aa14      	add	r2, sp, #80	; 0x50
 80130ba:	f7ff fcb0 	bl	8012a1e <__sprint_r>
 80130be:	2800      	cmp	r0, #0
 80130c0:	d000      	beq.n	80130c4 <_vfiprintf_r+0x63c>
 80130c2:	e14a      	b.n	801335a <_vfiprintf_r+0x8d2>
 80130c4:	2300      	movs	r3, #0
 80130c6:	ad17      	add	r5, sp, #92	; 0x5c
 80130c8:	9315      	str	r3, [sp, #84]	; 0x54
 80130ca:	e6b7      	b.n	8012e3c <_vfiprintf_r+0x3b4>
 80130cc:	0030      	movs	r0, r6
 80130ce:	f7ed f819 	bl	8000104 <strlen>
 80130d2:	9005      	str	r0, [sp, #20]
 80130d4:	e719      	b.n	8012f0a <_vfiprintf_r+0x482>
 80130d6:	2310      	movs	r3, #16
 80130d8:	431c      	orrs	r4, r3
 80130da:	2320      	movs	r3, #32
 80130dc:	0020      	movs	r0, r4
 80130de:	4018      	ands	r0, r3
 80130e0:	421c      	tst	r4, r3
 80130e2:	d009      	beq.n	80130f8 <_vfiprintf_r+0x670>
 80130e4:	3b19      	subs	r3, #25
 80130e6:	3707      	adds	r7, #7
 80130e8:	439f      	bics	r7, r3
 80130ea:	0039      	movs	r1, r7
 80130ec:	c90c      	ldmia	r1!, {r2, r3}
 80130ee:	9200      	str	r2, [sp, #0]
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	9104      	str	r1, [sp, #16]
 80130f4:	2301      	movs	r3, #1
 80130f6:	e6c7      	b.n	8012e88 <_vfiprintf_r+0x400>
 80130f8:	003b      	movs	r3, r7
 80130fa:	cb04      	ldmia	r3!, {r2}
 80130fc:	0021      	movs	r1, r4
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	2310      	movs	r3, #16
 8013102:	4019      	ands	r1, r3
 8013104:	421c      	tst	r4, r3
 8013106:	d003      	beq.n	8013110 <_vfiprintf_r+0x688>
 8013108:	9200      	str	r2, [sp, #0]
 801310a:	9001      	str	r0, [sp, #4]
 801310c:	3b0f      	subs	r3, #15
 801310e:	e6bb      	b.n	8012e88 <_vfiprintf_r+0x400>
 8013110:	2340      	movs	r3, #64	; 0x40
 8013112:	0020      	movs	r0, r4
 8013114:	4018      	ands	r0, r3
 8013116:	421c      	tst	r4, r3
 8013118:	d003      	beq.n	8013122 <_vfiprintf_r+0x69a>
 801311a:	b293      	uxth	r3, r2
 801311c:	9300      	str	r3, [sp, #0]
 801311e:	9101      	str	r1, [sp, #4]
 8013120:	e7e8      	b.n	80130f4 <_vfiprintf_r+0x66c>
 8013122:	2380      	movs	r3, #128	; 0x80
 8013124:	0021      	movs	r1, r4
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4019      	ands	r1, r3
 801312a:	421c      	tst	r4, r3
 801312c:	d003      	beq.n	8013136 <_vfiprintf_r+0x6ae>
 801312e:	b2d3      	uxtb	r3, r2
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	9001      	str	r0, [sp, #4]
 8013134:	e7de      	b.n	80130f4 <_vfiprintf_r+0x66c>
 8013136:	9200      	str	r2, [sp, #0]
 8013138:	e7f1      	b.n	801311e <_vfiprintf_r+0x696>
 801313a:	4a23      	ldr	r2, [pc, #140]	; (80131c8 <_vfiprintf_r+0x740>)
 801313c:	0020      	movs	r0, r4
 801313e:	920c      	str	r2, [sp, #48]	; 0x30
 8013140:	2220      	movs	r2, #32
 8013142:	4010      	ands	r0, r2
 8013144:	4214      	tst	r4, r2
 8013146:	d019      	beq.n	801317c <_vfiprintf_r+0x6f4>
 8013148:	3a19      	subs	r2, #25
 801314a:	3707      	adds	r7, #7
 801314c:	4397      	bics	r7, r2
 801314e:	0038      	movs	r0, r7
 8013150:	c806      	ldmia	r0!, {r1, r2}
 8013152:	9100      	str	r1, [sp, #0]
 8013154:	9201      	str	r2, [sp, #4]
 8013156:	9004      	str	r0, [sp, #16]
 8013158:	07e2      	lsls	r2, r4, #31
 801315a:	d509      	bpl.n	8013170 <_vfiprintf_r+0x6e8>
 801315c:	9a00      	ldr	r2, [sp, #0]
 801315e:	9901      	ldr	r1, [sp, #4]
 8013160:	430a      	orrs	r2, r1
 8013162:	d005      	beq.n	8013170 <_vfiprintf_r+0x6e8>
 8013164:	aa13      	add	r2, sp, #76	; 0x4c
 8013166:	2130      	movs	r1, #48	; 0x30
 8013168:	7053      	strb	r3, [r2, #1]
 801316a:	2302      	movs	r3, #2
 801316c:	7011      	strb	r1, [r2, #0]
 801316e:	431c      	orrs	r4, r3
 8013170:	4b10      	ldr	r3, [pc, #64]	; (80131b4 <_vfiprintf_r+0x72c>)
 8013172:	401c      	ands	r4, r3
 8013174:	2302      	movs	r3, #2
 8013176:	e687      	b.n	8012e88 <_vfiprintf_r+0x400>
 8013178:	4a10      	ldr	r2, [pc, #64]	; (80131bc <_vfiprintf_r+0x734>)
 801317a:	e7df      	b.n	801313c <_vfiprintf_r+0x6b4>
 801317c:	0039      	movs	r1, r7
 801317e:	c904      	ldmia	r1!, {r2}
 8013180:	0026      	movs	r6, r4
 8013182:	9104      	str	r1, [sp, #16]
 8013184:	2110      	movs	r1, #16
 8013186:	400e      	ands	r6, r1
 8013188:	420c      	tst	r4, r1
 801318a:	d002      	beq.n	8013192 <_vfiprintf_r+0x70a>
 801318c:	9200      	str	r2, [sp, #0]
 801318e:	9001      	str	r0, [sp, #4]
 8013190:	e7e2      	b.n	8013158 <_vfiprintf_r+0x6d0>
 8013192:	2140      	movs	r1, #64	; 0x40
 8013194:	0020      	movs	r0, r4
 8013196:	4008      	ands	r0, r1
 8013198:	420c      	tst	r4, r1
 801319a:	d003      	beq.n	80131a4 <_vfiprintf_r+0x71c>
 801319c:	b292      	uxth	r2, r2
 801319e:	9200      	str	r2, [sp, #0]
 80131a0:	9601      	str	r6, [sp, #4]
 80131a2:	e7d9      	b.n	8013158 <_vfiprintf_r+0x6d0>
 80131a4:	2180      	movs	r1, #128	; 0x80
 80131a6:	0026      	movs	r6, r4
 80131a8:	0089      	lsls	r1, r1, #2
 80131aa:	400e      	ands	r6, r1
 80131ac:	420c      	tst	r4, r1
 80131ae:	d0f6      	beq.n	801319e <_vfiprintf_r+0x716>
 80131b0:	b2d2      	uxtb	r2, r2
 80131b2:	e7eb      	b.n	801318c <_vfiprintf_r+0x704>
 80131b4:	fffffbff 	.word	0xfffffbff
 80131b8:	00007830 	.word	0x00007830
 80131bc:	08015c84 	.word	0x08015c84
 80131c0:	08015d91 	.word	0x08015d91
 80131c4:	08015da1 	.word	0x08015da1
 80131c8:	08015c95 	.word	0x08015c95
 80131cc:	9b01      	ldr	r3, [sp, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d109      	bne.n	80131e6 <_vfiprintf_r+0x75e>
 80131d2:	9b00      	ldr	r3, [sp, #0]
 80131d4:	2b09      	cmp	r3, #9
 80131d6:	d806      	bhi.n	80131e6 <_vfiprintf_r+0x75e>
 80131d8:	26b7      	movs	r6, #183	; 0xb7
 80131da:	ab12      	add	r3, sp, #72	; 0x48
 80131dc:	18f6      	adds	r6, r6, r3
 80131de:	9b00      	ldr	r3, [sp, #0]
 80131e0:	3330      	adds	r3, #48	; 0x30
 80131e2:	7033      	strb	r3, [r6, #0]
 80131e4:	e115      	b.n	8013412 <_vfiprintf_r+0x98a>
 80131e6:	2380      	movs	r3, #128	; 0x80
 80131e8:	2400      	movs	r4, #0
 80131ea:	00db      	lsls	r3, r3, #3
 80131ec:	403b      	ands	r3, r7
 80131ee:	ae40      	add	r6, sp, #256	; 0x100
 80131f0:	930a      	str	r3, [sp, #40]	; 0x28
 80131f2:	220a      	movs	r2, #10
 80131f4:	9800      	ldr	r0, [sp, #0]
 80131f6:	9901      	ldr	r1, [sp, #4]
 80131f8:	2300      	movs	r3, #0
 80131fa:	f7ed f953 	bl	80004a4 <__aeabi_uldivmod>
 80131fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013200:	3e01      	subs	r6, #1
 8013202:	3230      	adds	r2, #48	; 0x30
 8013204:	900b      	str	r0, [sp, #44]	; 0x2c
 8013206:	9110      	str	r1, [sp, #64]	; 0x40
 8013208:	7032      	strb	r2, [r6, #0]
 801320a:	3401      	adds	r4, #1
 801320c:	2b00      	cmp	r3, #0
 801320e:	d01a      	beq.n	8013246 <_vfiprintf_r+0x7be>
 8013210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	42a3      	cmp	r3, r4
 8013216:	d116      	bne.n	8013246 <_vfiprintf_r+0x7be>
 8013218:	2cff      	cmp	r4, #255	; 0xff
 801321a:	d014      	beq.n	8013246 <_vfiprintf_r+0x7be>
 801321c:	9b01      	ldr	r3, [sp, #4]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d102      	bne.n	8013228 <_vfiprintf_r+0x7a0>
 8013222:	9b00      	ldr	r3, [sp, #0]
 8013224:	2b09      	cmp	r3, #9
 8013226:	d90e      	bls.n	8013246 <_vfiprintf_r+0x7be>
 8013228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801322a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801322c:	1af6      	subs	r6, r6, r3
 801322e:	001a      	movs	r2, r3
 8013230:	0030      	movs	r0, r6
 8013232:	f7fa f832 	bl	800d29a <strncpy>
 8013236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013238:	2400      	movs	r4, #0
 801323a:	785b      	ldrb	r3, [r3, #1]
 801323c:	1e5a      	subs	r2, r3, #1
 801323e:	4193      	sbcs	r3, r2
 8013240:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013242:	18d3      	adds	r3, r2, r3
 8013244:	930d      	str	r3, [sp, #52]	; 0x34
 8013246:	9b01      	ldr	r3, [sp, #4]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d103      	bne.n	8013254 <_vfiprintf_r+0x7cc>
 801324c:	9b00      	ldr	r3, [sp, #0]
 801324e:	2b09      	cmp	r3, #9
 8013250:	d800      	bhi.n	8013254 <_vfiprintf_r+0x7cc>
 8013252:	e0de      	b.n	8013412 <_vfiprintf_r+0x98a>
 8013254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013256:	9300      	str	r3, [sp, #0]
 8013258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	e7c9      	b.n	80131f2 <_vfiprintf_r+0x76a>
 801325e:	200f      	movs	r0, #15
 8013260:	9b00      	ldr	r3, [sp, #0]
 8013262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013264:	4003      	ands	r3, r0
 8013266:	5cd3      	ldrb	r3, [r2, r3]
 8013268:	3e01      	subs	r6, #1
 801326a:	7033      	strb	r3, [r6, #0]
 801326c:	9b01      	ldr	r3, [sp, #4]
 801326e:	0719      	lsls	r1, r3, #28
 8013270:	9b00      	ldr	r3, [sp, #0]
 8013272:	091a      	lsrs	r2, r3, #4
 8013274:	9b01      	ldr	r3, [sp, #4]
 8013276:	4311      	orrs	r1, r2
 8013278:	091b      	lsrs	r3, r3, #4
 801327a:	9301      	str	r3, [sp, #4]
 801327c:	000b      	movs	r3, r1
 801327e:	9a01      	ldr	r2, [sp, #4]
 8013280:	9100      	str	r1, [sp, #0]
 8013282:	4313      	orrs	r3, r2
 8013284:	d1ec      	bne.n	8013260 <_vfiprintf_r+0x7d8>
 8013286:	e0c4      	b.n	8013412 <_vfiprintf_r+0x98a>
 8013288:	ae40      	add	r6, sp, #256	; 0x100
 801328a:	2b00      	cmp	r3, #0
 801328c:	d000      	beq.n	8013290 <_vfiprintf_r+0x808>
 801328e:	e0c0      	b.n	8013412 <_vfiprintf_r+0x98a>
 8013290:	07e4      	lsls	r4, r4, #31
 8013292:	d400      	bmi.n	8013296 <_vfiprintf_r+0x80e>
 8013294:	e0bd      	b.n	8013412 <_vfiprintf_r+0x98a>
 8013296:	26b7      	movs	r6, #183	; 0xb7
 8013298:	ab12      	add	r3, sp, #72	; 0x48
 801329a:	18f6      	adds	r6, r6, r3
 801329c:	2330      	movs	r3, #48	; 0x30
 801329e:	e7a0      	b.n	80131e2 <_vfiprintf_r+0x75a>
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d100      	bne.n	80132a6 <_vfiprintf_r+0x81e>
 80132a4:	e07e      	b.n	80133a4 <_vfiprintf_r+0x91c>
 80132a6:	ae27      	add	r6, sp, #156	; 0x9c
 80132a8:	7033      	strb	r3, [r6, #0]
 80132aa:	2300      	movs	r3, #0
 80132ac:	aa12      	add	r2, sp, #72	; 0x48
 80132ae:	70d3      	strb	r3, [r2, #3]
 80132b0:	9704      	str	r7, [sp, #16]
 80132b2:	e576      	b.n	8012da2 <_vfiprintf_r+0x31a>
 80132b4:	2010      	movs	r0, #16
 80132b6:	1812      	adds	r2, r2, r0
 80132b8:	6068      	str	r0, [r5, #4]
 80132ba:	9216      	str	r2, [sp, #88]	; 0x58
 80132bc:	9315      	str	r3, [sp, #84]	; 0x54
 80132be:	2b07      	cmp	r3, #7
 80132c0:	dd07      	ble.n	80132d2 <_vfiprintf_r+0x84a>
 80132c2:	9903      	ldr	r1, [sp, #12]
 80132c4:	9806      	ldr	r0, [sp, #24]
 80132c6:	aa14      	add	r2, sp, #80	; 0x50
 80132c8:	f7ff fba9 	bl	8012a1e <__sprint_r>
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d144      	bne.n	801335a <_vfiprintf_r+0x8d2>
 80132d0:	a917      	add	r1, sp, #92	; 0x5c
 80132d2:	000d      	movs	r5, r1
 80132d4:	3f10      	subs	r7, #16
 80132d6:	e63b      	b.n	8012f50 <_vfiprintf_r+0x4c8>
 80132d8:	2010      	movs	r0, #16
 80132da:	1812      	adds	r2, r2, r0
 80132dc:	6068      	str	r0, [r5, #4]
 80132de:	9216      	str	r2, [sp, #88]	; 0x58
 80132e0:	9315      	str	r3, [sp, #84]	; 0x54
 80132e2:	2b07      	cmp	r3, #7
 80132e4:	dd07      	ble.n	80132f6 <_vfiprintf_r+0x86e>
 80132e6:	9903      	ldr	r1, [sp, #12]
 80132e8:	9806      	ldr	r0, [sp, #24]
 80132ea:	aa14      	add	r2, sp, #80	; 0x50
 80132ec:	f7ff fb97 	bl	8012a1e <__sprint_r>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	d132      	bne.n	801335a <_vfiprintf_r+0x8d2>
 80132f4:	a917      	add	r1, sp, #92	; 0x5c
 80132f6:	000d      	movs	r5, r1
 80132f8:	3f10      	subs	r7, #16
 80132fa:	e67e      	b.n	8012ffa <_vfiprintf_r+0x572>
 80132fc:	2010      	movs	r0, #16
 80132fe:	1812      	adds	r2, r2, r0
 8013300:	6068      	str	r0, [r5, #4]
 8013302:	9216      	str	r2, [sp, #88]	; 0x58
 8013304:	9315      	str	r3, [sp, #84]	; 0x54
 8013306:	2b07      	cmp	r3, #7
 8013308:	dd07      	ble.n	801331a <_vfiprintf_r+0x892>
 801330a:	9903      	ldr	r1, [sp, #12]
 801330c:	9806      	ldr	r0, [sp, #24]
 801330e:	aa14      	add	r2, sp, #80	; 0x50
 8013310:	f7ff fb85 	bl	8012a1e <__sprint_r>
 8013314:	2800      	cmp	r0, #0
 8013316:	d120      	bne.n	801335a <_vfiprintf_r+0x8d2>
 8013318:	a917      	add	r1, sp, #92	; 0x5c
 801331a:	000d      	movs	r5, r1
 801331c:	3f10      	subs	r7, #16
 801331e:	e68b      	b.n	8013038 <_vfiprintf_r+0x5b0>
 8013320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013324:	2610      	movs	r6, #16
 8013326:	1a9c      	subs	r4, r3, r2
 8013328:	2c00      	cmp	r4, #0
 801332a:	dc00      	bgt.n	801332e <_vfiprintf_r+0x8a6>
 801332c:	e6b7      	b.n	801309e <_vfiprintf_r+0x616>
 801332e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013330:	4a3b      	ldr	r2, [pc, #236]	; (8013420 <_vfiprintf_r+0x998>)
 8013332:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013334:	3101      	adds	r1, #1
 8013336:	602a      	str	r2, [r5, #0]
 8013338:	2c10      	cmp	r4, #16
 801333a:	dc22      	bgt.n	8013382 <_vfiprintf_r+0x8fa>
 801333c:	606c      	str	r4, [r5, #4]
 801333e:	18e4      	adds	r4, r4, r3
 8013340:	9416      	str	r4, [sp, #88]	; 0x58
 8013342:	9115      	str	r1, [sp, #84]	; 0x54
 8013344:	2907      	cmp	r1, #7
 8013346:	dc00      	bgt.n	801334a <_vfiprintf_r+0x8c2>
 8013348:	e6a9      	b.n	801309e <_vfiprintf_r+0x616>
 801334a:	9903      	ldr	r1, [sp, #12]
 801334c:	9806      	ldr	r0, [sp, #24]
 801334e:	aa14      	add	r2, sp, #80	; 0x50
 8013350:	f7ff fb65 	bl	8012a1e <__sprint_r>
 8013354:	2800      	cmp	r0, #0
 8013356:	d100      	bne.n	801335a <_vfiprintf_r+0x8d2>
 8013358:	e6a1      	b.n	801309e <_vfiprintf_r+0x616>
 801335a:	9b03      	ldr	r3, [sp, #12]
 801335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801335e:	07db      	lsls	r3, r3, #31
 8013360:	d407      	bmi.n	8013372 <_vfiprintf_r+0x8ea>
 8013362:	9b03      	ldr	r3, [sp, #12]
 8013364:	899b      	ldrh	r3, [r3, #12]
 8013366:	059b      	lsls	r3, r3, #22
 8013368:	d403      	bmi.n	8013372 <_vfiprintf_r+0x8ea>
 801336a:	9b03      	ldr	r3, [sp, #12]
 801336c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801336e:	f7fa f88e 	bl	800d48e <__retarget_lock_release_recursive>
 8013372:	9b03      	ldr	r3, [sp, #12]
 8013374:	899b      	ldrh	r3, [r3, #12]
 8013376:	065b      	lsls	r3, r3, #25
 8013378:	d401      	bmi.n	801337e <_vfiprintf_r+0x8f6>
 801337a:	f7ff fbc3 	bl	8012b04 <_vfiprintf_r+0x7c>
 801337e:	f7ff fbbe 	bl	8012afe <_vfiprintf_r+0x76>
 8013382:	3310      	adds	r3, #16
 8013384:	606e      	str	r6, [r5, #4]
 8013386:	9316      	str	r3, [sp, #88]	; 0x58
 8013388:	9115      	str	r1, [sp, #84]	; 0x54
 801338a:	3508      	adds	r5, #8
 801338c:	2907      	cmp	r1, #7
 801338e:	dd07      	ble.n	80133a0 <_vfiprintf_r+0x918>
 8013390:	9903      	ldr	r1, [sp, #12]
 8013392:	9806      	ldr	r0, [sp, #24]
 8013394:	aa14      	add	r2, sp, #80	; 0x50
 8013396:	f7ff fb42 	bl	8012a1e <__sprint_r>
 801339a:	2800      	cmp	r0, #0
 801339c:	d1dd      	bne.n	801335a <_vfiprintf_r+0x8d2>
 801339e:	ad17      	add	r5, sp, #92	; 0x5c
 80133a0:	3c10      	subs	r4, #16
 80133a2:	e7c4      	b.n	801332e <_vfiprintf_r+0x8a6>
 80133a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d102      	bne.n	80133b0 <_vfiprintf_r+0x928>
 80133aa:	2300      	movs	r3, #0
 80133ac:	9315      	str	r3, [sp, #84]	; 0x54
 80133ae:	e7d4      	b.n	801335a <_vfiprintf_r+0x8d2>
 80133b0:	9903      	ldr	r1, [sp, #12]
 80133b2:	9806      	ldr	r0, [sp, #24]
 80133b4:	aa14      	add	r2, sp, #80	; 0x50
 80133b6:	f7ff fb32 	bl	8012a1e <__sprint_r>
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d0f5      	beq.n	80133aa <_vfiprintf_r+0x922>
 80133be:	e7cc      	b.n	801335a <_vfiprintf_r+0x8d2>
 80133c0:	0027      	movs	r7, r4
 80133c2:	2a00      	cmp	r2, #0
 80133c4:	d100      	bne.n	80133c8 <_vfiprintf_r+0x940>
 80133c6:	e51b      	b.n	8012e00 <_vfiprintf_r+0x378>
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d100      	bne.n	80133ce <_vfiprintf_r+0x946>
 80133cc:	e6fe      	b.n	80131cc <_vfiprintf_r+0x744>
 80133ce:	ae40      	add	r6, sp, #256	; 0x100
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d100      	bne.n	80133d6 <_vfiprintf_r+0x94e>
 80133d4:	e743      	b.n	801325e <_vfiprintf_r+0x7d6>
 80133d6:	2307      	movs	r3, #7
 80133d8:	469c      	mov	ip, r3
 80133da:	4663      	mov	r3, ip
 80133dc:	9900      	ldr	r1, [sp, #0]
 80133de:	0032      	movs	r2, r6
 80133e0:	400b      	ands	r3, r1
 80133e2:	9901      	ldr	r1, [sp, #4]
 80133e4:	3e01      	subs	r6, #1
 80133e6:	074c      	lsls	r4, r1, #29
 80133e8:	9900      	ldr	r1, [sp, #0]
 80133ea:	3330      	adds	r3, #48	; 0x30
 80133ec:	08c8      	lsrs	r0, r1, #3
 80133ee:	9901      	ldr	r1, [sp, #4]
 80133f0:	4304      	orrs	r4, r0
 80133f2:	08c9      	lsrs	r1, r1, #3
 80133f4:	9101      	str	r1, [sp, #4]
 80133f6:	0021      	movs	r1, r4
 80133f8:	9801      	ldr	r0, [sp, #4]
 80133fa:	7033      	strb	r3, [r6, #0]
 80133fc:	9400      	str	r4, [sp, #0]
 80133fe:	4301      	orrs	r1, r0
 8013400:	d1eb      	bne.n	80133da <_vfiprintf_r+0x952>
 8013402:	07f9      	lsls	r1, r7, #31
 8013404:	d505      	bpl.n	8013412 <_vfiprintf_r+0x98a>
 8013406:	2b30      	cmp	r3, #48	; 0x30
 8013408:	d003      	beq.n	8013412 <_vfiprintf_r+0x98a>
 801340a:	2330      	movs	r3, #48	; 0x30
 801340c:	3e01      	subs	r6, #1
 801340e:	7033      	strb	r3, [r6, #0]
 8013410:	1e96      	subs	r6, r2, #2
 8013412:	9b05      	ldr	r3, [sp, #20]
 8013414:	003c      	movs	r4, r7
 8013416:	930b      	str	r3, [sp, #44]	; 0x2c
 8013418:	ab40      	add	r3, sp, #256	; 0x100
 801341a:	1b9b      	subs	r3, r3, r6
 801341c:	9305      	str	r3, [sp, #20]
 801341e:	e575      	b.n	8012f0c <_vfiprintf_r+0x484>
 8013420:	08015d91 	.word	0x08015d91

08013424 <__sbprintf>:
 8013424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013426:	0015      	movs	r5, r2
 8013428:	2202      	movs	r2, #2
 801342a:	4c1e      	ldr	r4, [pc, #120]	; (80134a4 <__sbprintf+0x80>)
 801342c:	001f      	movs	r7, r3
 801342e:	898b      	ldrh	r3, [r1, #12]
 8013430:	44a5      	add	sp, r4
 8013432:	4393      	bics	r3, r2
 8013434:	466a      	mov	r2, sp
 8013436:	8193      	strh	r3, [r2, #12]
 8013438:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801343a:	0006      	movs	r6, r0
 801343c:	9319      	str	r3, [sp, #100]	; 0x64
 801343e:	89cb      	ldrh	r3, [r1, #14]
 8013440:	a816      	add	r0, sp, #88	; 0x58
 8013442:	81d3      	strh	r3, [r2, #14]
 8013444:	69cb      	ldr	r3, [r1, #28]
 8013446:	000c      	movs	r4, r1
 8013448:	9307      	str	r3, [sp, #28]
 801344a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801344c:	9309      	str	r3, [sp, #36]	; 0x24
 801344e:	ab1a      	add	r3, sp, #104	; 0x68
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	9304      	str	r3, [sp, #16]
 8013454:	2380      	movs	r3, #128	; 0x80
 8013456:	00db      	lsls	r3, r3, #3
 8013458:	9302      	str	r3, [sp, #8]
 801345a:	9305      	str	r3, [sp, #20]
 801345c:	2300      	movs	r3, #0
 801345e:	9306      	str	r3, [sp, #24]
 8013460:	f7fa f812 	bl	800d488 <__retarget_lock_init_recursive>
 8013464:	002a      	movs	r2, r5
 8013466:	003b      	movs	r3, r7
 8013468:	4669      	mov	r1, sp
 801346a:	0030      	movs	r0, r6
 801346c:	f7ff fb0c 	bl	8012a88 <_vfiprintf_r>
 8013470:	1e05      	subs	r5, r0, #0
 8013472:	db07      	blt.n	8013484 <__sbprintf+0x60>
 8013474:	4669      	mov	r1, sp
 8013476:	0030      	movs	r0, r6
 8013478:	f7fd fe7c 	bl	8011174 <_fflush_r>
 801347c:	2800      	cmp	r0, #0
 801347e:	d001      	beq.n	8013484 <__sbprintf+0x60>
 8013480:	2501      	movs	r5, #1
 8013482:	426d      	negs	r5, r5
 8013484:	466b      	mov	r3, sp
 8013486:	899a      	ldrh	r2, [r3, #12]
 8013488:	2340      	movs	r3, #64	; 0x40
 801348a:	421a      	tst	r2, r3
 801348c:	d002      	beq.n	8013494 <__sbprintf+0x70>
 801348e:	89a2      	ldrh	r2, [r4, #12]
 8013490:	4313      	orrs	r3, r2
 8013492:	81a3      	strh	r3, [r4, #12]
 8013494:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013496:	f7f9 fff8 	bl	800d48a <__retarget_lock_close_recursive>
 801349a:	0028      	movs	r0, r5
 801349c:	4b02      	ldr	r3, [pc, #8]	; (80134a8 <__sbprintf+0x84>)
 801349e:	449d      	add	sp, r3
 80134a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a2:	46c0      	nop			; (mov r8, r8)
 80134a4:	fffffb94 	.word	0xfffffb94
 80134a8:	0000046c 	.word	0x0000046c

080134ac <__sfvwrite_r>:
 80134ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134ae:	6893      	ldr	r3, [r2, #8]
 80134b0:	b087      	sub	sp, #28
 80134b2:	000c      	movs	r4, r1
 80134b4:	9002      	str	r0, [sp, #8]
 80134b6:	9204      	str	r2, [sp, #16]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d102      	bne.n	80134c2 <__sfvwrite_r+0x16>
 80134bc:	2000      	movs	r0, #0
 80134be:	b007      	add	sp, #28
 80134c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134c2:	898b      	ldrh	r3, [r1, #12]
 80134c4:	071b      	lsls	r3, r3, #28
 80134c6:	d557      	bpl.n	8013578 <__sfvwrite_r+0xcc>
 80134c8:	690b      	ldr	r3, [r1, #16]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d054      	beq.n	8013578 <__sfvwrite_r+0xcc>
 80134ce:	9b04      	ldr	r3, [sp, #16]
 80134d0:	2202      	movs	r2, #2
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	9301      	str	r3, [sp, #4]
 80134d6:	89a3      	ldrh	r3, [r4, #12]
 80134d8:	001f      	movs	r7, r3
 80134da:	4017      	ands	r7, r2
 80134dc:	4213      	tst	r3, r2
 80134de:	d171      	bne.n	80135c4 <__sfvwrite_r+0x118>
 80134e0:	2201      	movs	r2, #1
 80134e2:	2101      	movs	r1, #1
 80134e4:	401a      	ands	r2, r3
 80134e6:	420b      	tst	r3, r1
 80134e8:	d100      	bne.n	80134ec <__sfvwrite_r+0x40>
 80134ea:	e0a5      	b.n	8013638 <__sfvwrite_r+0x18c>
 80134ec:	0038      	movs	r0, r7
 80134ee:	003e      	movs	r6, r7
 80134f0:	9703      	str	r7, [sp, #12]
 80134f2:	9b03      	ldr	r3, [sp, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d100      	bne.n	80134fa <__sfvwrite_r+0x4e>
 80134f8:	e10b      	b.n	8013712 <__sfvwrite_r+0x266>
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d10a      	bne.n	8013514 <__sfvwrite_r+0x68>
 80134fe:	001a      	movs	r2, r3
 8013500:	210a      	movs	r1, #10
 8013502:	0030      	movs	r0, r6
 8013504:	f7fd feb0 	bl	8011268 <memchr>
 8013508:	9b03      	ldr	r3, [sp, #12]
 801350a:	1c5f      	adds	r7, r3, #1
 801350c:	2800      	cmp	r0, #0
 801350e:	d001      	beq.n	8013514 <__sfvwrite_r+0x68>
 8013510:	3001      	adds	r0, #1
 8013512:	1b87      	subs	r7, r0, r6
 8013514:	9b03      	ldr	r3, [sp, #12]
 8013516:	9705      	str	r7, [sp, #20]
 8013518:	429f      	cmp	r7, r3
 801351a:	d900      	bls.n	801351e <__sfvwrite_r+0x72>
 801351c:	9305      	str	r3, [sp, #20]
 801351e:	6820      	ldr	r0, [r4, #0]
 8013520:	6922      	ldr	r2, [r4, #16]
 8013522:	68a5      	ldr	r5, [r4, #8]
 8013524:	6963      	ldr	r3, [r4, #20]
 8013526:	4290      	cmp	r0, r2
 8013528:	d800      	bhi.n	801352c <__sfvwrite_r+0x80>
 801352a:	e0fb      	b.n	8013724 <__sfvwrite_r+0x278>
 801352c:	9a05      	ldr	r2, [sp, #20]
 801352e:	18ed      	adds	r5, r5, r3
 8013530:	42aa      	cmp	r2, r5
 8013532:	dc00      	bgt.n	8013536 <__sfvwrite_r+0x8a>
 8013534:	e0f6      	b.n	8013724 <__sfvwrite_r+0x278>
 8013536:	0031      	movs	r1, r6
 8013538:	002a      	movs	r2, r5
 801353a:	f000 fa1e 	bl	801397a <memmove>
 801353e:	6823      	ldr	r3, [r4, #0]
 8013540:	0021      	movs	r1, r4
 8013542:	195b      	adds	r3, r3, r5
 8013544:	9802      	ldr	r0, [sp, #8]
 8013546:	6023      	str	r3, [r4, #0]
 8013548:	f7fd fe14 	bl	8011174 <_fflush_r>
 801354c:	2800      	cmp	r0, #0
 801354e:	d16e      	bne.n	801362e <__sfvwrite_r+0x182>
 8013550:	2001      	movs	r0, #1
 8013552:	1b7f      	subs	r7, r7, r5
 8013554:	d105      	bne.n	8013562 <__sfvwrite_r+0xb6>
 8013556:	0021      	movs	r1, r4
 8013558:	9802      	ldr	r0, [sp, #8]
 801355a:	f7fd fe0b 	bl	8011174 <_fflush_r>
 801355e:	2800      	cmp	r0, #0
 8013560:	d165      	bne.n	801362e <__sfvwrite_r+0x182>
 8013562:	9b03      	ldr	r3, [sp, #12]
 8013564:	9a04      	ldr	r2, [sp, #16]
 8013566:	1b5b      	subs	r3, r3, r5
 8013568:	9303      	str	r3, [sp, #12]
 801356a:	9b04      	ldr	r3, [sp, #16]
 801356c:	1976      	adds	r6, r6, r5
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	1b5b      	subs	r3, r3, r5
 8013572:	6093      	str	r3, [r2, #8]
 8013574:	d1bd      	bne.n	80134f2 <__sfvwrite_r+0x46>
 8013576:	e7a1      	b.n	80134bc <__sfvwrite_r+0x10>
 8013578:	0021      	movs	r1, r4
 801357a:	9802      	ldr	r0, [sp, #8]
 801357c:	f000 f932 	bl	80137e4 <__swsetup_r>
 8013580:	2800      	cmp	r0, #0
 8013582:	d0a4      	beq.n	80134ce <__sfvwrite_r+0x22>
 8013584:	2001      	movs	r0, #1
 8013586:	4240      	negs	r0, r0
 8013588:	e799      	b.n	80134be <__sfvwrite_r+0x12>
 801358a:	9b01      	ldr	r3, [sp, #4]
 801358c:	681e      	ldr	r6, [r3, #0]
 801358e:	685d      	ldr	r5, [r3, #4]
 8013590:	3308      	adds	r3, #8
 8013592:	9301      	str	r3, [sp, #4]
 8013594:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8013596:	69e1      	ldr	r1, [r4, #28]
 8013598:	2d00      	cmp	r5, #0
 801359a:	d0f6      	beq.n	801358a <__sfvwrite_r+0xde>
 801359c:	4a6e      	ldr	r2, [pc, #440]	; (8013758 <__sfvwrite_r+0x2ac>)
 801359e:	002b      	movs	r3, r5
 80135a0:	4295      	cmp	r5, r2
 80135a2:	d900      	bls.n	80135a6 <__sfvwrite_r+0xfa>
 80135a4:	0013      	movs	r3, r2
 80135a6:	0032      	movs	r2, r6
 80135a8:	9802      	ldr	r0, [sp, #8]
 80135aa:	47b8      	blx	r7
 80135ac:	2800      	cmp	r0, #0
 80135ae:	dd3e      	ble.n	801362e <__sfvwrite_r+0x182>
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	9a04      	ldr	r2, [sp, #16]
 80135b4:	689b      	ldr	r3, [r3, #8]
 80135b6:	1836      	adds	r6, r6, r0
 80135b8:	1a1b      	subs	r3, r3, r0
 80135ba:	1a2d      	subs	r5, r5, r0
 80135bc:	6093      	str	r3, [r2, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1e8      	bne.n	8013594 <__sfvwrite_r+0xe8>
 80135c2:	e77b      	b.n	80134bc <__sfvwrite_r+0x10>
 80135c4:	2600      	movs	r6, #0
 80135c6:	0035      	movs	r5, r6
 80135c8:	e7e4      	b.n	8013594 <__sfvwrite_r+0xe8>
 80135ca:	9b01      	ldr	r3, [sp, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	9303      	str	r3, [sp, #12]
 80135d0:	9b01      	ldr	r3, [sp, #4]
 80135d2:	685d      	ldr	r5, [r3, #4]
 80135d4:	3308      	adds	r3, #8
 80135d6:	9301      	str	r3, [sp, #4]
 80135d8:	220c      	movs	r2, #12
 80135da:	5ea3      	ldrsh	r3, [r4, r2]
 80135dc:	6820      	ldr	r0, [r4, #0]
 80135de:	68a6      	ldr	r6, [r4, #8]
 80135e0:	2d00      	cmp	r5, #0
 80135e2:	d0f2      	beq.n	80135ca <__sfvwrite_r+0x11e>
 80135e4:	2180      	movs	r1, #128	; 0x80
 80135e6:	0089      	lsls	r1, r1, #2
 80135e8:	b29a      	uxth	r2, r3
 80135ea:	420b      	tst	r3, r1
 80135ec:	d062      	beq.n	80136b4 <__sfvwrite_r+0x208>
 80135ee:	42ae      	cmp	r6, r5
 80135f0:	d837      	bhi.n	8013662 <__sfvwrite_r+0x1b6>
 80135f2:	2390      	movs	r3, #144	; 0x90
 80135f4:	00db      	lsls	r3, r3, #3
 80135f6:	421a      	tst	r2, r3
 80135f8:	d033      	beq.n	8013662 <__sfvwrite_r+0x1b6>
 80135fa:	6921      	ldr	r1, [r4, #16]
 80135fc:	1a43      	subs	r3, r0, r1
 80135fe:	2003      	movs	r0, #3
 8013600:	9305      	str	r3, [sp, #20]
 8013602:	6963      	ldr	r3, [r4, #20]
 8013604:	4343      	muls	r3, r0
 8013606:	0fdf      	lsrs	r7, r3, #31
 8013608:	18ff      	adds	r7, r7, r3
 801360a:	9b05      	ldr	r3, [sp, #20]
 801360c:	107f      	asrs	r7, r7, #1
 801360e:	3301      	adds	r3, #1
 8013610:	195b      	adds	r3, r3, r5
 8013612:	42bb      	cmp	r3, r7
 8013614:	d900      	bls.n	8013618 <__sfvwrite_r+0x16c>
 8013616:	001f      	movs	r7, r3
 8013618:	0552      	lsls	r2, r2, #21
 801361a:	d53c      	bpl.n	8013696 <__sfvwrite_r+0x1ea>
 801361c:	0039      	movs	r1, r7
 801361e:	9802      	ldr	r0, [sp, #8]
 8013620:	f7f8 fb02 	bl	800bc28 <_malloc_r>
 8013624:	1e06      	subs	r6, r0, #0
 8013626:	d10a      	bne.n	801363e <__sfvwrite_r+0x192>
 8013628:	230c      	movs	r3, #12
 801362a:	9a02      	ldr	r2, [sp, #8]
 801362c:	6013      	str	r3, [r2, #0]
 801362e:	2340      	movs	r3, #64	; 0x40
 8013630:	89a2      	ldrh	r2, [r4, #12]
 8013632:	4313      	orrs	r3, r2
 8013634:	81a3      	strh	r3, [r4, #12]
 8013636:	e7a5      	b.n	8013584 <__sfvwrite_r+0xd8>
 8013638:	0015      	movs	r5, r2
 801363a:	9203      	str	r2, [sp, #12]
 801363c:	e7cc      	b.n	80135d8 <__sfvwrite_r+0x12c>
 801363e:	9a05      	ldr	r2, [sp, #20]
 8013640:	6921      	ldr	r1, [r4, #16]
 8013642:	f7f9 ff30 	bl	800d4a6 <memcpy>
 8013646:	89a2      	ldrh	r2, [r4, #12]
 8013648:	4b44      	ldr	r3, [pc, #272]	; (801375c <__sfvwrite_r+0x2b0>)
 801364a:	401a      	ands	r2, r3
 801364c:	2380      	movs	r3, #128	; 0x80
 801364e:	4313      	orrs	r3, r2
 8013650:	81a3      	strh	r3, [r4, #12]
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	6126      	str	r6, [r4, #16]
 8013656:	18f6      	adds	r6, r6, r3
 8013658:	6026      	str	r6, [r4, #0]
 801365a:	002e      	movs	r6, r5
 801365c:	6167      	str	r7, [r4, #20]
 801365e:	1aff      	subs	r7, r7, r3
 8013660:	60a7      	str	r7, [r4, #8]
 8013662:	002f      	movs	r7, r5
 8013664:	42ae      	cmp	r6, r5
 8013666:	d900      	bls.n	801366a <__sfvwrite_r+0x1be>
 8013668:	002e      	movs	r6, r5
 801366a:	0032      	movs	r2, r6
 801366c:	9903      	ldr	r1, [sp, #12]
 801366e:	6820      	ldr	r0, [r4, #0]
 8013670:	f000 f983 	bl	801397a <memmove>
 8013674:	68a3      	ldr	r3, [r4, #8]
 8013676:	1b9b      	subs	r3, r3, r6
 8013678:	60a3      	str	r3, [r4, #8]
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	199b      	adds	r3, r3, r6
 801367e:	6023      	str	r3, [r4, #0]
 8013680:	9b03      	ldr	r3, [sp, #12]
 8013682:	9a04      	ldr	r2, [sp, #16]
 8013684:	19db      	adds	r3, r3, r7
 8013686:	9303      	str	r3, [sp, #12]
 8013688:	9b04      	ldr	r3, [sp, #16]
 801368a:	1bed      	subs	r5, r5, r7
 801368c:	689b      	ldr	r3, [r3, #8]
 801368e:	1bdb      	subs	r3, r3, r7
 8013690:	6093      	str	r3, [r2, #8]
 8013692:	d1a1      	bne.n	80135d8 <__sfvwrite_r+0x12c>
 8013694:	e712      	b.n	80134bc <__sfvwrite_r+0x10>
 8013696:	003a      	movs	r2, r7
 8013698:	9802      	ldr	r0, [sp, #8]
 801369a:	f7fe fd5d 	bl	8012158 <_realloc_r>
 801369e:	1e06      	subs	r6, r0, #0
 80136a0:	d1d7      	bne.n	8013652 <__sfvwrite_r+0x1a6>
 80136a2:	6921      	ldr	r1, [r4, #16]
 80136a4:	9802      	ldr	r0, [sp, #8]
 80136a6:	f7f9 ff79 	bl	800d59c <_free_r>
 80136aa:	2280      	movs	r2, #128	; 0x80
 80136ac:	89a3      	ldrh	r3, [r4, #12]
 80136ae:	4393      	bics	r3, r2
 80136b0:	81a3      	strh	r3, [r4, #12]
 80136b2:	e7b9      	b.n	8013628 <__sfvwrite_r+0x17c>
 80136b4:	6923      	ldr	r3, [r4, #16]
 80136b6:	4283      	cmp	r3, r0
 80136b8:	d302      	bcc.n	80136c0 <__sfvwrite_r+0x214>
 80136ba:	6967      	ldr	r7, [r4, #20]
 80136bc:	42af      	cmp	r7, r5
 80136be:	d916      	bls.n	80136ee <__sfvwrite_r+0x242>
 80136c0:	42ae      	cmp	r6, r5
 80136c2:	d900      	bls.n	80136c6 <__sfvwrite_r+0x21a>
 80136c4:	002e      	movs	r6, r5
 80136c6:	0032      	movs	r2, r6
 80136c8:	9903      	ldr	r1, [sp, #12]
 80136ca:	f000 f956 	bl	801397a <memmove>
 80136ce:	68a3      	ldr	r3, [r4, #8]
 80136d0:	6822      	ldr	r2, [r4, #0]
 80136d2:	1b9b      	subs	r3, r3, r6
 80136d4:	1992      	adds	r2, r2, r6
 80136d6:	0037      	movs	r7, r6
 80136d8:	60a3      	str	r3, [r4, #8]
 80136da:	6022      	str	r2, [r4, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d1cf      	bne.n	8013680 <__sfvwrite_r+0x1d4>
 80136e0:	0021      	movs	r1, r4
 80136e2:	9802      	ldr	r0, [sp, #8]
 80136e4:	f7fd fd46 	bl	8011174 <_fflush_r>
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d0c9      	beq.n	8013680 <__sfvwrite_r+0x1d4>
 80136ec:	e79f      	b.n	801362e <__sfvwrite_r+0x182>
 80136ee:	4b1c      	ldr	r3, [pc, #112]	; (8013760 <__sfvwrite_r+0x2b4>)
 80136f0:	0028      	movs	r0, r5
 80136f2:	429d      	cmp	r5, r3
 80136f4:	d900      	bls.n	80136f8 <__sfvwrite_r+0x24c>
 80136f6:	481b      	ldr	r0, [pc, #108]	; (8013764 <__sfvwrite_r+0x2b8>)
 80136f8:	0039      	movs	r1, r7
 80136fa:	f7ec fda9 	bl	8000250 <__divsi3>
 80136fe:	003b      	movs	r3, r7
 8013700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013702:	4343      	muls	r3, r0
 8013704:	9a03      	ldr	r2, [sp, #12]
 8013706:	69e1      	ldr	r1, [r4, #28]
 8013708:	9802      	ldr	r0, [sp, #8]
 801370a:	47b0      	blx	r6
 801370c:	1e07      	subs	r7, r0, #0
 801370e:	dcb7      	bgt.n	8013680 <__sfvwrite_r+0x1d4>
 8013710:	e78d      	b.n	801362e <__sfvwrite_r+0x182>
 8013712:	9b01      	ldr	r3, [sp, #4]
 8013714:	2000      	movs	r0, #0
 8013716:	681e      	ldr	r6, [r3, #0]
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	9303      	str	r3, [sp, #12]
 801371c:	9b01      	ldr	r3, [sp, #4]
 801371e:	3308      	adds	r3, #8
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	e6e6      	b.n	80134f2 <__sfvwrite_r+0x46>
 8013724:	9a05      	ldr	r2, [sp, #20]
 8013726:	4293      	cmp	r3, r2
 8013728:	dc08      	bgt.n	801373c <__sfvwrite_r+0x290>
 801372a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801372c:	0032      	movs	r2, r6
 801372e:	69e1      	ldr	r1, [r4, #28]
 8013730:	9802      	ldr	r0, [sp, #8]
 8013732:	47a8      	blx	r5
 8013734:	1e05      	subs	r5, r0, #0
 8013736:	dd00      	ble.n	801373a <__sfvwrite_r+0x28e>
 8013738:	e70a      	b.n	8013550 <__sfvwrite_r+0xa4>
 801373a:	e778      	b.n	801362e <__sfvwrite_r+0x182>
 801373c:	9a05      	ldr	r2, [sp, #20]
 801373e:	0031      	movs	r1, r6
 8013740:	f000 f91b 	bl	801397a <memmove>
 8013744:	9a05      	ldr	r2, [sp, #20]
 8013746:	68a3      	ldr	r3, [r4, #8]
 8013748:	0015      	movs	r5, r2
 801374a:	1a9b      	subs	r3, r3, r2
 801374c:	60a3      	str	r3, [r4, #8]
 801374e:	6823      	ldr	r3, [r4, #0]
 8013750:	189b      	adds	r3, r3, r2
 8013752:	6023      	str	r3, [r4, #0]
 8013754:	e6fc      	b.n	8013550 <__sfvwrite_r+0xa4>
 8013756:	46c0      	nop			; (mov r8, r8)
 8013758:	7ffffc00 	.word	0x7ffffc00
 801375c:	fffffb7f 	.word	0xfffffb7f
 8013760:	7ffffffe 	.word	0x7ffffffe
 8013764:	7fffffff 	.word	0x7fffffff

08013768 <__submore>:
 8013768:	000b      	movs	r3, r1
 801376a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801376c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801376e:	3340      	adds	r3, #64	; 0x40
 8013770:	000c      	movs	r4, r1
 8013772:	429d      	cmp	r5, r3
 8013774:	d11c      	bne.n	80137b0 <__submore+0x48>
 8013776:	2680      	movs	r6, #128	; 0x80
 8013778:	00f6      	lsls	r6, r6, #3
 801377a:	0031      	movs	r1, r6
 801377c:	f7f8 fa54 	bl	800bc28 <_malloc_r>
 8013780:	2800      	cmp	r0, #0
 8013782:	d102      	bne.n	801378a <__submore+0x22>
 8013784:	2001      	movs	r0, #1
 8013786:	4240      	negs	r0, r0
 8013788:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801378a:	0023      	movs	r3, r4
 801378c:	6320      	str	r0, [r4, #48]	; 0x30
 801378e:	6366      	str	r6, [r4, #52]	; 0x34
 8013790:	3342      	adds	r3, #66	; 0x42
 8013792:	781a      	ldrb	r2, [r3, #0]
 8013794:	4b10      	ldr	r3, [pc, #64]	; (80137d8 <__submore+0x70>)
 8013796:	54c2      	strb	r2, [r0, r3]
 8013798:	0023      	movs	r3, r4
 801379a:	3341      	adds	r3, #65	; 0x41
 801379c:	781a      	ldrb	r2, [r3, #0]
 801379e:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <__submore+0x74>)
 80137a0:	54c2      	strb	r2, [r0, r3]
 80137a2:	782a      	ldrb	r2, [r5, #0]
 80137a4:	4b0e      	ldr	r3, [pc, #56]	; (80137e0 <__submore+0x78>)
 80137a6:	54c2      	strb	r2, [r0, r3]
 80137a8:	18c0      	adds	r0, r0, r3
 80137aa:	6020      	str	r0, [r4, #0]
 80137ac:	2000      	movs	r0, #0
 80137ae:	e7eb      	b.n	8013788 <__submore+0x20>
 80137b0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80137b2:	0029      	movs	r1, r5
 80137b4:	0073      	lsls	r3, r6, #1
 80137b6:	001a      	movs	r2, r3
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	f7fe fccd 	bl	8012158 <_realloc_r>
 80137be:	1e05      	subs	r5, r0, #0
 80137c0:	d0e0      	beq.n	8013784 <__submore+0x1c>
 80137c2:	1987      	adds	r7, r0, r6
 80137c4:	0001      	movs	r1, r0
 80137c6:	0032      	movs	r2, r6
 80137c8:	0038      	movs	r0, r7
 80137ca:	f7f9 fe6c 	bl	800d4a6 <memcpy>
 80137ce:	9b01      	ldr	r3, [sp, #4]
 80137d0:	6027      	str	r7, [r4, #0]
 80137d2:	6325      	str	r5, [r4, #48]	; 0x30
 80137d4:	6363      	str	r3, [r4, #52]	; 0x34
 80137d6:	e7e9      	b.n	80137ac <__submore+0x44>
 80137d8:	000003ff 	.word	0x000003ff
 80137dc:	000003fe 	.word	0x000003fe
 80137e0:	000003fd 	.word	0x000003fd

080137e4 <__swsetup_r>:
 80137e4:	4b30      	ldr	r3, [pc, #192]	; (80138a8 <__swsetup_r+0xc4>)
 80137e6:	b570      	push	{r4, r5, r6, lr}
 80137e8:	0005      	movs	r5, r0
 80137ea:	6818      	ldr	r0, [r3, #0]
 80137ec:	000c      	movs	r4, r1
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d004      	beq.n	80137fc <__swsetup_r+0x18>
 80137f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d101      	bne.n	80137fc <__swsetup_r+0x18>
 80137f8:	f7f9 fc2a 	bl	800d050 <__sinit>
 80137fc:	230c      	movs	r3, #12
 80137fe:	5ee2      	ldrsh	r2, [r4, r3]
 8013800:	b293      	uxth	r3, r2
 8013802:	0711      	lsls	r1, r2, #28
 8013804:	d423      	bmi.n	801384e <__swsetup_r+0x6a>
 8013806:	06d9      	lsls	r1, r3, #27
 8013808:	d407      	bmi.n	801381a <__swsetup_r+0x36>
 801380a:	2309      	movs	r3, #9
 801380c:	2001      	movs	r0, #1
 801380e:	602b      	str	r3, [r5, #0]
 8013810:	3337      	adds	r3, #55	; 0x37
 8013812:	4313      	orrs	r3, r2
 8013814:	81a3      	strh	r3, [r4, #12]
 8013816:	4240      	negs	r0, r0
 8013818:	bd70      	pop	{r4, r5, r6, pc}
 801381a:	075b      	lsls	r3, r3, #29
 801381c:	d513      	bpl.n	8013846 <__swsetup_r+0x62>
 801381e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013820:	2900      	cmp	r1, #0
 8013822:	d008      	beq.n	8013836 <__swsetup_r+0x52>
 8013824:	0023      	movs	r3, r4
 8013826:	3340      	adds	r3, #64	; 0x40
 8013828:	4299      	cmp	r1, r3
 801382a:	d002      	beq.n	8013832 <__swsetup_r+0x4e>
 801382c:	0028      	movs	r0, r5
 801382e:	f7f9 feb5 	bl	800d59c <_free_r>
 8013832:	2300      	movs	r3, #0
 8013834:	6323      	str	r3, [r4, #48]	; 0x30
 8013836:	2224      	movs	r2, #36	; 0x24
 8013838:	89a3      	ldrh	r3, [r4, #12]
 801383a:	4393      	bics	r3, r2
 801383c:	81a3      	strh	r3, [r4, #12]
 801383e:	2300      	movs	r3, #0
 8013840:	6063      	str	r3, [r4, #4]
 8013842:	6923      	ldr	r3, [r4, #16]
 8013844:	6023      	str	r3, [r4, #0]
 8013846:	2308      	movs	r3, #8
 8013848:	89a2      	ldrh	r2, [r4, #12]
 801384a:	4313      	orrs	r3, r2
 801384c:	81a3      	strh	r3, [r4, #12]
 801384e:	6923      	ldr	r3, [r4, #16]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d10b      	bne.n	801386c <__swsetup_r+0x88>
 8013854:	21a0      	movs	r1, #160	; 0xa0
 8013856:	2280      	movs	r2, #128	; 0x80
 8013858:	89a3      	ldrh	r3, [r4, #12]
 801385a:	0089      	lsls	r1, r1, #2
 801385c:	0092      	lsls	r2, r2, #2
 801385e:	400b      	ands	r3, r1
 8013860:	4293      	cmp	r3, r2
 8013862:	d003      	beq.n	801386c <__swsetup_r+0x88>
 8013864:	0021      	movs	r1, r4
 8013866:	0028      	movs	r0, r5
 8013868:	f000 f8e8 	bl	8013a3c <__smakebuf_r>
 801386c:	220c      	movs	r2, #12
 801386e:	5ea3      	ldrsh	r3, [r4, r2]
 8013870:	2001      	movs	r0, #1
 8013872:	001a      	movs	r2, r3
 8013874:	b299      	uxth	r1, r3
 8013876:	4002      	ands	r2, r0
 8013878:	4203      	tst	r3, r0
 801387a:	d00f      	beq.n	801389c <__swsetup_r+0xb8>
 801387c:	2200      	movs	r2, #0
 801387e:	60a2      	str	r2, [r4, #8]
 8013880:	6962      	ldr	r2, [r4, #20]
 8013882:	4252      	negs	r2, r2
 8013884:	61a2      	str	r2, [r4, #24]
 8013886:	2000      	movs	r0, #0
 8013888:	6922      	ldr	r2, [r4, #16]
 801388a:	4282      	cmp	r2, r0
 801388c:	d1c4      	bne.n	8013818 <__swsetup_r+0x34>
 801388e:	0609      	lsls	r1, r1, #24
 8013890:	d5c2      	bpl.n	8013818 <__swsetup_r+0x34>
 8013892:	2240      	movs	r2, #64	; 0x40
 8013894:	4313      	orrs	r3, r2
 8013896:	81a3      	strh	r3, [r4, #12]
 8013898:	3801      	subs	r0, #1
 801389a:	e7bd      	b.n	8013818 <__swsetup_r+0x34>
 801389c:	0788      	lsls	r0, r1, #30
 801389e:	d400      	bmi.n	80138a2 <__swsetup_r+0xbe>
 80138a0:	6962      	ldr	r2, [r4, #20]
 80138a2:	60a2      	str	r2, [r4, #8]
 80138a4:	e7ef      	b.n	8013886 <__swsetup_r+0xa2>
 80138a6:	46c0      	nop			; (mov r8, r8)
 80138a8:	200006d0 	.word	0x200006d0

080138ac <__fputwc>:
 80138ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ae:	b085      	sub	sp, #20
 80138b0:	000e      	movs	r6, r1
 80138b2:	0015      	movs	r5, r2
 80138b4:	9001      	str	r0, [sp, #4]
 80138b6:	f7f9 fd55 	bl	800d364 <__locale_mb_cur_max>
 80138ba:	0004      	movs	r4, r0
 80138bc:	2801      	cmp	r0, #1
 80138be:	d119      	bne.n	80138f4 <__fputwc+0x48>
 80138c0:	1e73      	subs	r3, r6, #1
 80138c2:	2bfe      	cmp	r3, #254	; 0xfe
 80138c4:	d816      	bhi.n	80138f4 <__fputwc+0x48>
 80138c6:	ab02      	add	r3, sp, #8
 80138c8:	711e      	strb	r6, [r3, #4]
 80138ca:	2700      	movs	r7, #0
 80138cc:	42a7      	cmp	r7, r4
 80138ce:	d020      	beq.n	8013912 <__fputwc+0x66>
 80138d0:	ab03      	add	r3, sp, #12
 80138d2:	5dd9      	ldrb	r1, [r3, r7]
 80138d4:	68ab      	ldr	r3, [r5, #8]
 80138d6:	3b01      	subs	r3, #1
 80138d8:	60ab      	str	r3, [r5, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	da04      	bge.n	80138e8 <__fputwc+0x3c>
 80138de:	69aa      	ldr	r2, [r5, #24]
 80138e0:	4293      	cmp	r3, r2
 80138e2:	db19      	blt.n	8013918 <__fputwc+0x6c>
 80138e4:	290a      	cmp	r1, #10
 80138e6:	d017      	beq.n	8013918 <__fputwc+0x6c>
 80138e8:	682b      	ldr	r3, [r5, #0]
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	602a      	str	r2, [r5, #0]
 80138ee:	7019      	strb	r1, [r3, #0]
 80138f0:	3701      	adds	r7, #1
 80138f2:	e7eb      	b.n	80138cc <__fputwc+0x20>
 80138f4:	002b      	movs	r3, r5
 80138f6:	0032      	movs	r2, r6
 80138f8:	9801      	ldr	r0, [sp, #4]
 80138fa:	335c      	adds	r3, #92	; 0x5c
 80138fc:	a903      	add	r1, sp, #12
 80138fe:	f000 f857 	bl	80139b0 <_wcrtomb_r>
 8013902:	0004      	movs	r4, r0
 8013904:	1c43      	adds	r3, r0, #1
 8013906:	d1e0      	bne.n	80138ca <__fputwc+0x1e>
 8013908:	2340      	movs	r3, #64	; 0x40
 801390a:	0006      	movs	r6, r0
 801390c:	89aa      	ldrh	r2, [r5, #12]
 801390e:	4313      	orrs	r3, r2
 8013910:	81ab      	strh	r3, [r5, #12]
 8013912:	0030      	movs	r0, r6
 8013914:	b005      	add	sp, #20
 8013916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013918:	002a      	movs	r2, r5
 801391a:	9801      	ldr	r0, [sp, #4]
 801391c:	f000 f8cc 	bl	8013ab8 <__swbuf_r>
 8013920:	1c43      	adds	r3, r0, #1
 8013922:	d1e5      	bne.n	80138f0 <__fputwc+0x44>
 8013924:	0006      	movs	r6, r0
 8013926:	e7f4      	b.n	8013912 <__fputwc+0x66>

08013928 <_fputwc_r>:
 8013928:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801392a:	b570      	push	{r4, r5, r6, lr}
 801392c:	0005      	movs	r5, r0
 801392e:	000e      	movs	r6, r1
 8013930:	0014      	movs	r4, r2
 8013932:	07db      	lsls	r3, r3, #31
 8013934:	d405      	bmi.n	8013942 <_fputwc_r+0x1a>
 8013936:	8993      	ldrh	r3, [r2, #12]
 8013938:	059b      	lsls	r3, r3, #22
 801393a:	d402      	bmi.n	8013942 <_fputwc_r+0x1a>
 801393c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801393e:	f7f9 fda5 	bl	800d48c <__retarget_lock_acquire_recursive>
 8013942:	230c      	movs	r3, #12
 8013944:	5ee2      	ldrsh	r2, [r4, r3]
 8013946:	2380      	movs	r3, #128	; 0x80
 8013948:	019b      	lsls	r3, r3, #6
 801394a:	421a      	tst	r2, r3
 801394c:	d104      	bne.n	8013958 <_fputwc_r+0x30>
 801394e:	431a      	orrs	r2, r3
 8013950:	81a2      	strh	r2, [r4, #12]
 8013952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013954:	4313      	orrs	r3, r2
 8013956:	6663      	str	r3, [r4, #100]	; 0x64
 8013958:	0028      	movs	r0, r5
 801395a:	0022      	movs	r2, r4
 801395c:	0031      	movs	r1, r6
 801395e:	f7ff ffa5 	bl	80138ac <__fputwc>
 8013962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013964:	0005      	movs	r5, r0
 8013966:	07db      	lsls	r3, r3, #31
 8013968:	d405      	bmi.n	8013976 <_fputwc_r+0x4e>
 801396a:	89a3      	ldrh	r3, [r4, #12]
 801396c:	059b      	lsls	r3, r3, #22
 801396e:	d402      	bmi.n	8013976 <_fputwc_r+0x4e>
 8013970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013972:	f7f9 fd8c 	bl	800d48e <__retarget_lock_release_recursive>
 8013976:	0028      	movs	r0, r5
 8013978:	bd70      	pop	{r4, r5, r6, pc}

0801397a <memmove>:
 801397a:	b510      	push	{r4, lr}
 801397c:	4288      	cmp	r0, r1
 801397e:	d902      	bls.n	8013986 <memmove+0xc>
 8013980:	188b      	adds	r3, r1, r2
 8013982:	4298      	cmp	r0, r3
 8013984:	d303      	bcc.n	801398e <memmove+0x14>
 8013986:	2300      	movs	r3, #0
 8013988:	e007      	b.n	801399a <memmove+0x20>
 801398a:	5c8b      	ldrb	r3, [r1, r2]
 801398c:	5483      	strb	r3, [r0, r2]
 801398e:	3a01      	subs	r2, #1
 8013990:	d2fb      	bcs.n	801398a <memmove+0x10>
 8013992:	bd10      	pop	{r4, pc}
 8013994:	5ccc      	ldrb	r4, [r1, r3]
 8013996:	54c4      	strb	r4, [r0, r3]
 8013998:	3301      	adds	r3, #1
 801399a:	429a      	cmp	r2, r3
 801399c:	d1fa      	bne.n	8013994 <memmove+0x1a>
 801399e:	e7f8      	b.n	8013992 <memmove+0x18>

080139a0 <abort>:
 80139a0:	2006      	movs	r0, #6
 80139a2:	b510      	push	{r4, lr}
 80139a4:	f000 f906 	bl	8013bb4 <raise>
 80139a8:	2001      	movs	r0, #1
 80139aa:	f7f0 fc4d 	bl	8004248 <_exit>
	...

080139b0 <_wcrtomb_r>:
 80139b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80139b2:	001d      	movs	r5, r3
 80139b4:	4b09      	ldr	r3, [pc, #36]	; (80139dc <_wcrtomb_r+0x2c>)
 80139b6:	0004      	movs	r4, r0
 80139b8:	33e0      	adds	r3, #224	; 0xe0
 80139ba:	681e      	ldr	r6, [r3, #0]
 80139bc:	002b      	movs	r3, r5
 80139be:	2900      	cmp	r1, #0
 80139c0:	d101      	bne.n	80139c6 <_wcrtomb_r+0x16>
 80139c2:	000a      	movs	r2, r1
 80139c4:	a901      	add	r1, sp, #4
 80139c6:	0020      	movs	r0, r4
 80139c8:	47b0      	blx	r6
 80139ca:	1c43      	adds	r3, r0, #1
 80139cc:	d103      	bne.n	80139d6 <_wcrtomb_r+0x26>
 80139ce:	2300      	movs	r3, #0
 80139d0:	602b      	str	r3, [r5, #0]
 80139d2:	338a      	adds	r3, #138	; 0x8a
 80139d4:	6023      	str	r3, [r4, #0]
 80139d6:	b004      	add	sp, #16
 80139d8:	bd70      	pop	{r4, r5, r6, pc}
 80139da:	46c0      	nop			; (mov r8, r8)
 80139dc:	20000444 	.word	0x20000444

080139e0 <__swhatbuf_r>:
 80139e0:	b570      	push	{r4, r5, r6, lr}
 80139e2:	000e      	movs	r6, r1
 80139e4:	001d      	movs	r5, r3
 80139e6:	230e      	movs	r3, #14
 80139e8:	5ec9      	ldrsh	r1, [r1, r3]
 80139ea:	0014      	movs	r4, r2
 80139ec:	b096      	sub	sp, #88	; 0x58
 80139ee:	2900      	cmp	r1, #0
 80139f0:	da09      	bge.n	8013a06 <__swhatbuf_r+0x26>
 80139f2:	89b2      	ldrh	r2, [r6, #12]
 80139f4:	2380      	movs	r3, #128	; 0x80
 80139f6:	0011      	movs	r1, r2
 80139f8:	4019      	ands	r1, r3
 80139fa:	421a      	tst	r2, r3
 80139fc:	d018      	beq.n	8013a30 <__swhatbuf_r+0x50>
 80139fe:	2100      	movs	r1, #0
 8013a00:	3b40      	subs	r3, #64	; 0x40
 8013a02:	0008      	movs	r0, r1
 8013a04:	e010      	b.n	8013a28 <__swhatbuf_r+0x48>
 8013a06:	466a      	mov	r2, sp
 8013a08:	f000 f8de 	bl	8013bc8 <_fstat_r>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	dbf0      	blt.n	80139f2 <__swhatbuf_r+0x12>
 8013a10:	23f0      	movs	r3, #240	; 0xf0
 8013a12:	9901      	ldr	r1, [sp, #4]
 8013a14:	021b      	lsls	r3, r3, #8
 8013a16:	4019      	ands	r1, r3
 8013a18:	4b07      	ldr	r3, [pc, #28]	; (8013a38 <__swhatbuf_r+0x58>)
 8013a1a:	2080      	movs	r0, #128	; 0x80
 8013a1c:	18c9      	adds	r1, r1, r3
 8013a1e:	424b      	negs	r3, r1
 8013a20:	4159      	adcs	r1, r3
 8013a22:	2380      	movs	r3, #128	; 0x80
 8013a24:	0100      	lsls	r0, r0, #4
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	6029      	str	r1, [r5, #0]
 8013a2a:	6023      	str	r3, [r4, #0]
 8013a2c:	b016      	add	sp, #88	; 0x58
 8013a2e:	bd70      	pop	{r4, r5, r6, pc}
 8013a30:	2380      	movs	r3, #128	; 0x80
 8013a32:	00db      	lsls	r3, r3, #3
 8013a34:	e7e5      	b.n	8013a02 <__swhatbuf_r+0x22>
 8013a36:	46c0      	nop			; (mov r8, r8)
 8013a38:	ffffe000 	.word	0xffffe000

08013a3c <__smakebuf_r>:
 8013a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a3e:	2602      	movs	r6, #2
 8013a40:	898b      	ldrh	r3, [r1, #12]
 8013a42:	0005      	movs	r5, r0
 8013a44:	000c      	movs	r4, r1
 8013a46:	4233      	tst	r3, r6
 8013a48:	d006      	beq.n	8013a58 <__smakebuf_r+0x1c>
 8013a4a:	0023      	movs	r3, r4
 8013a4c:	3343      	adds	r3, #67	; 0x43
 8013a4e:	6023      	str	r3, [r4, #0]
 8013a50:	6123      	str	r3, [r4, #16]
 8013a52:	2301      	movs	r3, #1
 8013a54:	6163      	str	r3, [r4, #20]
 8013a56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013a58:	466a      	mov	r2, sp
 8013a5a:	ab01      	add	r3, sp, #4
 8013a5c:	f7ff ffc0 	bl	80139e0 <__swhatbuf_r>
 8013a60:	9900      	ldr	r1, [sp, #0]
 8013a62:	0007      	movs	r7, r0
 8013a64:	0028      	movs	r0, r5
 8013a66:	f7f8 f8df 	bl	800bc28 <_malloc_r>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d108      	bne.n	8013a80 <__smakebuf_r+0x44>
 8013a6e:	220c      	movs	r2, #12
 8013a70:	5ea3      	ldrsh	r3, [r4, r2]
 8013a72:	059a      	lsls	r2, r3, #22
 8013a74:	d4ef      	bmi.n	8013a56 <__smakebuf_r+0x1a>
 8013a76:	2203      	movs	r2, #3
 8013a78:	4393      	bics	r3, r2
 8013a7a:	431e      	orrs	r6, r3
 8013a7c:	81a6      	strh	r6, [r4, #12]
 8013a7e:	e7e4      	b.n	8013a4a <__smakebuf_r+0xe>
 8013a80:	2380      	movs	r3, #128	; 0x80
 8013a82:	89a2      	ldrh	r2, [r4, #12]
 8013a84:	6020      	str	r0, [r4, #0]
 8013a86:	4313      	orrs	r3, r2
 8013a88:	81a3      	strh	r3, [r4, #12]
 8013a8a:	9b00      	ldr	r3, [sp, #0]
 8013a8c:	6120      	str	r0, [r4, #16]
 8013a8e:	6163      	str	r3, [r4, #20]
 8013a90:	9b01      	ldr	r3, [sp, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00c      	beq.n	8013ab0 <__smakebuf_r+0x74>
 8013a96:	0028      	movs	r0, r5
 8013a98:	230e      	movs	r3, #14
 8013a9a:	5ee1      	ldrsh	r1, [r4, r3]
 8013a9c:	f000 f8a6 	bl	8013bec <_isatty_r>
 8013aa0:	2800      	cmp	r0, #0
 8013aa2:	d005      	beq.n	8013ab0 <__smakebuf_r+0x74>
 8013aa4:	2303      	movs	r3, #3
 8013aa6:	89a2      	ldrh	r2, [r4, #12]
 8013aa8:	439a      	bics	r2, r3
 8013aaa:	3b02      	subs	r3, #2
 8013aac:	4313      	orrs	r3, r2
 8013aae:	81a3      	strh	r3, [r4, #12]
 8013ab0:	89a3      	ldrh	r3, [r4, #12]
 8013ab2:	433b      	orrs	r3, r7
 8013ab4:	81a3      	strh	r3, [r4, #12]
 8013ab6:	e7ce      	b.n	8013a56 <__smakebuf_r+0x1a>

08013ab8 <__swbuf_r>:
 8013ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aba:	0006      	movs	r6, r0
 8013abc:	000d      	movs	r5, r1
 8013abe:	0014      	movs	r4, r2
 8013ac0:	2800      	cmp	r0, #0
 8013ac2:	d004      	beq.n	8013ace <__swbuf_r+0x16>
 8013ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d101      	bne.n	8013ace <__swbuf_r+0x16>
 8013aca:	f7f9 fac1 	bl	800d050 <__sinit>
 8013ace:	69a3      	ldr	r3, [r4, #24]
 8013ad0:	60a3      	str	r3, [r4, #8]
 8013ad2:	89a3      	ldrh	r3, [r4, #12]
 8013ad4:	071b      	lsls	r3, r3, #28
 8013ad6:	d52e      	bpl.n	8013b36 <__swbuf_r+0x7e>
 8013ad8:	6923      	ldr	r3, [r4, #16]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d02b      	beq.n	8013b36 <__swbuf_r+0x7e>
 8013ade:	230c      	movs	r3, #12
 8013ae0:	5ee2      	ldrsh	r2, [r4, r3]
 8013ae2:	2380      	movs	r3, #128	; 0x80
 8013ae4:	019b      	lsls	r3, r3, #6
 8013ae6:	b2ef      	uxtb	r7, r5
 8013ae8:	b2ed      	uxtb	r5, r5
 8013aea:	421a      	tst	r2, r3
 8013aec:	d02c      	beq.n	8013b48 <__swbuf_r+0x90>
 8013aee:	6923      	ldr	r3, [r4, #16]
 8013af0:	6820      	ldr	r0, [r4, #0]
 8013af2:	1ac0      	subs	r0, r0, r3
 8013af4:	6963      	ldr	r3, [r4, #20]
 8013af6:	4283      	cmp	r3, r0
 8013af8:	dc05      	bgt.n	8013b06 <__swbuf_r+0x4e>
 8013afa:	0021      	movs	r1, r4
 8013afc:	0030      	movs	r0, r6
 8013afe:	f7fd fb39 	bl	8011174 <_fflush_r>
 8013b02:	2800      	cmp	r0, #0
 8013b04:	d11d      	bne.n	8013b42 <__swbuf_r+0x8a>
 8013b06:	68a3      	ldr	r3, [r4, #8]
 8013b08:	3001      	adds	r0, #1
 8013b0a:	3b01      	subs	r3, #1
 8013b0c:	60a3      	str	r3, [r4, #8]
 8013b0e:	6823      	ldr	r3, [r4, #0]
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	6022      	str	r2, [r4, #0]
 8013b14:	701f      	strb	r7, [r3, #0]
 8013b16:	6963      	ldr	r3, [r4, #20]
 8013b18:	4283      	cmp	r3, r0
 8013b1a:	d004      	beq.n	8013b26 <__swbuf_r+0x6e>
 8013b1c:	89a3      	ldrh	r3, [r4, #12]
 8013b1e:	07db      	lsls	r3, r3, #31
 8013b20:	d507      	bpl.n	8013b32 <__swbuf_r+0x7a>
 8013b22:	2d0a      	cmp	r5, #10
 8013b24:	d105      	bne.n	8013b32 <__swbuf_r+0x7a>
 8013b26:	0021      	movs	r1, r4
 8013b28:	0030      	movs	r0, r6
 8013b2a:	f7fd fb23 	bl	8011174 <_fflush_r>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d107      	bne.n	8013b42 <__swbuf_r+0x8a>
 8013b32:	0028      	movs	r0, r5
 8013b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b36:	0021      	movs	r1, r4
 8013b38:	0030      	movs	r0, r6
 8013b3a:	f7ff fe53 	bl	80137e4 <__swsetup_r>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d0cd      	beq.n	8013ade <__swbuf_r+0x26>
 8013b42:	2501      	movs	r5, #1
 8013b44:	426d      	negs	r5, r5
 8013b46:	e7f4      	b.n	8013b32 <__swbuf_r+0x7a>
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	4a02      	ldr	r2, [pc, #8]	; (8013b58 <__swbuf_r+0xa0>)
 8013b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b50:	4013      	ands	r3, r2
 8013b52:	6663      	str	r3, [r4, #100]	; 0x64
 8013b54:	e7cb      	b.n	8013aee <__swbuf_r+0x36>
 8013b56:	46c0      	nop			; (mov r8, r8)
 8013b58:	ffffdfff 	.word	0xffffdfff

08013b5c <_raise_r>:
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	0004      	movs	r4, r0
 8013b60:	000d      	movs	r5, r1
 8013b62:	291f      	cmp	r1, #31
 8013b64:	d904      	bls.n	8013b70 <_raise_r+0x14>
 8013b66:	2316      	movs	r3, #22
 8013b68:	6003      	str	r3, [r0, #0]
 8013b6a:	2001      	movs	r0, #1
 8013b6c:	4240      	negs	r0, r0
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}
 8013b70:	0003      	movs	r3, r0
 8013b72:	33fc      	adds	r3, #252	; 0xfc
 8013b74:	69db      	ldr	r3, [r3, #28]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d004      	beq.n	8013b84 <_raise_r+0x28>
 8013b7a:	008a      	lsls	r2, r1, #2
 8013b7c:	189b      	adds	r3, r3, r2
 8013b7e:	681a      	ldr	r2, [r3, #0]
 8013b80:	2a00      	cmp	r2, #0
 8013b82:	d108      	bne.n	8013b96 <_raise_r+0x3a>
 8013b84:	0020      	movs	r0, r4
 8013b86:	f000 f855 	bl	8013c34 <_getpid_r>
 8013b8a:	002a      	movs	r2, r5
 8013b8c:	0001      	movs	r1, r0
 8013b8e:	0020      	movs	r0, r4
 8013b90:	f000 f83e 	bl	8013c10 <_kill_r>
 8013b94:	e7eb      	b.n	8013b6e <_raise_r+0x12>
 8013b96:	2000      	movs	r0, #0
 8013b98:	2a01      	cmp	r2, #1
 8013b9a:	d0e8      	beq.n	8013b6e <_raise_r+0x12>
 8013b9c:	1c51      	adds	r1, r2, #1
 8013b9e:	d103      	bne.n	8013ba8 <_raise_r+0x4c>
 8013ba0:	2316      	movs	r3, #22
 8013ba2:	3001      	adds	r0, #1
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	e7e2      	b.n	8013b6e <_raise_r+0x12>
 8013ba8:	2400      	movs	r4, #0
 8013baa:	0028      	movs	r0, r5
 8013bac:	601c      	str	r4, [r3, #0]
 8013bae:	4790      	blx	r2
 8013bb0:	0020      	movs	r0, r4
 8013bb2:	e7dc      	b.n	8013b6e <_raise_r+0x12>

08013bb4 <raise>:
 8013bb4:	b510      	push	{r4, lr}
 8013bb6:	4b03      	ldr	r3, [pc, #12]	; (8013bc4 <raise+0x10>)
 8013bb8:	0001      	movs	r1, r0
 8013bba:	6818      	ldr	r0, [r3, #0]
 8013bbc:	f7ff ffce 	bl	8013b5c <_raise_r>
 8013bc0:	bd10      	pop	{r4, pc}
 8013bc2:	46c0      	nop			; (mov r8, r8)
 8013bc4:	200006d0 	.word	0x200006d0

08013bc8 <_fstat_r>:
 8013bc8:	2300      	movs	r3, #0
 8013bca:	b570      	push	{r4, r5, r6, lr}
 8013bcc:	4d06      	ldr	r5, [pc, #24]	; (8013be8 <_fstat_r+0x20>)
 8013bce:	0004      	movs	r4, r0
 8013bd0:	0008      	movs	r0, r1
 8013bd2:	0011      	movs	r1, r2
 8013bd4:	602b      	str	r3, [r5, #0]
 8013bd6:	f7f0 fb86 	bl	80042e6 <_fstat>
 8013bda:	1c43      	adds	r3, r0, #1
 8013bdc:	d103      	bne.n	8013be6 <_fstat_r+0x1e>
 8013bde:	682b      	ldr	r3, [r5, #0]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d000      	beq.n	8013be6 <_fstat_r+0x1e>
 8013be4:	6023      	str	r3, [r4, #0]
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
 8013be8:	20000dc4 	.word	0x20000dc4

08013bec <_isatty_r>:
 8013bec:	2300      	movs	r3, #0
 8013bee:	b570      	push	{r4, r5, r6, lr}
 8013bf0:	4d06      	ldr	r5, [pc, #24]	; (8013c0c <_isatty_r+0x20>)
 8013bf2:	0004      	movs	r4, r0
 8013bf4:	0008      	movs	r0, r1
 8013bf6:	602b      	str	r3, [r5, #0]
 8013bf8:	f7f0 fb83 	bl	8004302 <_isatty>
 8013bfc:	1c43      	adds	r3, r0, #1
 8013bfe:	d103      	bne.n	8013c08 <_isatty_r+0x1c>
 8013c00:	682b      	ldr	r3, [r5, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d000      	beq.n	8013c08 <_isatty_r+0x1c>
 8013c06:	6023      	str	r3, [r4, #0]
 8013c08:	bd70      	pop	{r4, r5, r6, pc}
 8013c0a:	46c0      	nop			; (mov r8, r8)
 8013c0c:	20000dc4 	.word	0x20000dc4

08013c10 <_kill_r>:
 8013c10:	2300      	movs	r3, #0
 8013c12:	b570      	push	{r4, r5, r6, lr}
 8013c14:	4d06      	ldr	r5, [pc, #24]	; (8013c30 <_kill_r+0x20>)
 8013c16:	0004      	movs	r4, r0
 8013c18:	0008      	movs	r0, r1
 8013c1a:	0011      	movs	r1, r2
 8013c1c:	602b      	str	r3, [r5, #0]
 8013c1e:	f7f0 fb03 	bl	8004228 <_kill>
 8013c22:	1c43      	adds	r3, r0, #1
 8013c24:	d103      	bne.n	8013c2e <_kill_r+0x1e>
 8013c26:	682b      	ldr	r3, [r5, #0]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d000      	beq.n	8013c2e <_kill_r+0x1e>
 8013c2c:	6023      	str	r3, [r4, #0]
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}
 8013c30:	20000dc4 	.word	0x20000dc4

08013c34 <_getpid_r>:
 8013c34:	b510      	push	{r4, lr}
 8013c36:	f7f0 faf1 	bl	800421c <_getpid>
 8013c3a:	bd10      	pop	{r4, pc}

08013c3c <round>:
 8013c3c:	b570      	push	{r4, r5, r6, lr}
 8013c3e:	004a      	lsls	r2, r1, #1
 8013c40:	000d      	movs	r5, r1
 8013c42:	4920      	ldr	r1, [pc, #128]	; (8013cc4 <round+0x88>)
 8013c44:	0d52      	lsrs	r2, r2, #21
 8013c46:	1851      	adds	r1, r2, r1
 8013c48:	0006      	movs	r6, r0
 8013c4a:	2913      	cmp	r1, #19
 8013c4c:	dc18      	bgt.n	8013c80 <round+0x44>
 8013c4e:	2900      	cmp	r1, #0
 8013c50:	da09      	bge.n	8013c66 <round+0x2a>
 8013c52:	0feb      	lsrs	r3, r5, #31
 8013c54:	2200      	movs	r2, #0
 8013c56:	07db      	lsls	r3, r3, #31
 8013c58:	3101      	adds	r1, #1
 8013c5a:	d101      	bne.n	8013c60 <round+0x24>
 8013c5c:	491a      	ldr	r1, [pc, #104]	; (8013cc8 <round+0x8c>)
 8013c5e:	430b      	orrs	r3, r1
 8013c60:	0019      	movs	r1, r3
 8013c62:	0010      	movs	r0, r2
 8013c64:	e017      	b.n	8013c96 <round+0x5a>
 8013c66:	4c19      	ldr	r4, [pc, #100]	; (8013ccc <round+0x90>)
 8013c68:	410c      	asrs	r4, r1
 8013c6a:	0022      	movs	r2, r4
 8013c6c:	402a      	ands	r2, r5
 8013c6e:	4302      	orrs	r2, r0
 8013c70:	d013      	beq.n	8013c9a <round+0x5e>
 8013c72:	2280      	movs	r2, #128	; 0x80
 8013c74:	0312      	lsls	r2, r2, #12
 8013c76:	410a      	asrs	r2, r1
 8013c78:	1953      	adds	r3, r2, r5
 8013c7a:	43a3      	bics	r3, r4
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	e7ef      	b.n	8013c60 <round+0x24>
 8013c80:	2933      	cmp	r1, #51	; 0x33
 8013c82:	dd0d      	ble.n	8013ca0 <round+0x64>
 8013c84:	2380      	movs	r3, #128	; 0x80
 8013c86:	00db      	lsls	r3, r3, #3
 8013c88:	4299      	cmp	r1, r3
 8013c8a:	d106      	bne.n	8013c9a <round+0x5e>
 8013c8c:	0002      	movs	r2, r0
 8013c8e:	002b      	movs	r3, r5
 8013c90:	0029      	movs	r1, r5
 8013c92:	f7ec fd91 	bl	80007b8 <__aeabi_dadd>
 8013c96:	0006      	movs	r6, r0
 8013c98:	000d      	movs	r5, r1
 8013c9a:	0030      	movs	r0, r6
 8013c9c:	0029      	movs	r1, r5
 8013c9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ca0:	4c0b      	ldr	r4, [pc, #44]	; (8013cd0 <round+0x94>)
 8013ca2:	1912      	adds	r2, r2, r4
 8013ca4:	2401      	movs	r4, #1
 8013ca6:	4264      	negs	r4, r4
 8013ca8:	40d4      	lsrs	r4, r2
 8013caa:	4220      	tst	r0, r4
 8013cac:	d0f5      	beq.n	8013c9a <round+0x5e>
 8013cae:	2233      	movs	r2, #51	; 0x33
 8013cb0:	1a51      	subs	r1, r2, r1
 8013cb2:	3a32      	subs	r2, #50	; 0x32
 8013cb4:	408a      	lsls	r2, r1
 8013cb6:	1812      	adds	r2, r2, r0
 8013cb8:	4282      	cmp	r2, r0
 8013cba:	4180      	sbcs	r0, r0
 8013cbc:	4240      	negs	r0, r0
 8013cbe:	182b      	adds	r3, r5, r0
 8013cc0:	43a2      	bics	r2, r4
 8013cc2:	e7cd      	b.n	8013c60 <round+0x24>
 8013cc4:	fffffc01 	.word	0xfffffc01
 8013cc8:	3ff00000 	.word	0x3ff00000
 8013ccc:	000fffff 	.word	0x000fffff
 8013cd0:	fffffbed 	.word	0xfffffbed

08013cd4 <_init>:
 8013cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd6:	46c0      	nop			; (mov r8, r8)
 8013cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cda:	bc08      	pop	{r3}
 8013cdc:	469e      	mov	lr, r3
 8013cde:	4770      	bx	lr

08013ce0 <_fini>:
 8013ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce2:	46c0      	nop			; (mov r8, r8)
 8013ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ce6:	bc08      	pop	{r3}
 8013ce8:	469e      	mov	lr, r3
 8013cea:	4770      	bx	lr
