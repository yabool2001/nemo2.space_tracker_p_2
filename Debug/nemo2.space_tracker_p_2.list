
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004814  08004814  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800481c  0800481c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800481c  0800481c  0001481c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000014  0800483c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800483c  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015418  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  00035497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00037de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00039138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd41  00000000  00000000  0003a06e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e0a  00000000  00000000  00057daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c45d6  00000000  00000000  0006ebb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000484c  00000000  00000000  00133190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001379dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800474c 	.word	0x0800474c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	0800474c 	.word	0x0800474c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_uldivmod>:
 8000400:	2b00      	cmp	r3, #0
 8000402:	d111      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000404:	2a00      	cmp	r2, #0
 8000406:	d10f      	bne.n	8000428 <__aeabi_uldivmod+0x28>
 8000408:	2900      	cmp	r1, #0
 800040a:	d100      	bne.n	800040e <__aeabi_uldivmod+0xe>
 800040c:	2800      	cmp	r0, #0
 800040e:	d002      	beq.n	8000416 <__aeabi_uldivmod+0x16>
 8000410:	2100      	movs	r1, #0
 8000412:	43c9      	mvns	r1, r1
 8000414:	0008      	movs	r0, r1
 8000416:	b407      	push	{r0, r1, r2}
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <__aeabi_uldivmod+0x24>)
 800041a:	a102      	add	r1, pc, #8	; (adr r1, 8000424 <__aeabi_uldivmod+0x24>)
 800041c:	1840      	adds	r0, r0, r1
 800041e:	9002      	str	r0, [sp, #8]
 8000420:	bd03      	pop	{r0, r1, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	ffffffd9 	.word	0xffffffd9
 8000428:	b403      	push	{r0, r1}
 800042a:	4668      	mov	r0, sp
 800042c:	b501      	push	{r0, lr}
 800042e:	9802      	ldr	r0, [sp, #8]
 8000430:	f000 f806 	bl	8000440 <__udivmoddi4>
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	469e      	mov	lr, r3
 8000438:	b002      	add	sp, #8
 800043a:	bc0c      	pop	{r2, r3}
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__udivmoddi4>:
 8000440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	b5e0      	push	{r5, r6, r7, lr}
 800044c:	0004      	movs	r4, r0
 800044e:	000d      	movs	r5, r1
 8000450:	4692      	mov	sl, r2
 8000452:	4699      	mov	r9, r3
 8000454:	b083      	sub	sp, #12
 8000456:	428b      	cmp	r3, r1
 8000458:	d830      	bhi.n	80004bc <__udivmoddi4+0x7c>
 800045a:	d02d      	beq.n	80004b8 <__udivmoddi4+0x78>
 800045c:	4649      	mov	r1, r9
 800045e:	4650      	mov	r0, sl
 8000460:	f000 f8ba 	bl	80005d8 <__clzdi2>
 8000464:	0029      	movs	r1, r5
 8000466:	0006      	movs	r6, r0
 8000468:	0020      	movs	r0, r4
 800046a:	f000 f8b5 	bl	80005d8 <__clzdi2>
 800046e:	1a33      	subs	r3, r6, r0
 8000470:	4698      	mov	r8, r3
 8000472:	3b20      	subs	r3, #32
 8000474:	d434      	bmi.n	80004e0 <__udivmoddi4+0xa0>
 8000476:	469b      	mov	fp, r3
 8000478:	4653      	mov	r3, sl
 800047a:	465a      	mov	r2, fp
 800047c:	4093      	lsls	r3, r2
 800047e:	4642      	mov	r2, r8
 8000480:	001f      	movs	r7, r3
 8000482:	4653      	mov	r3, sl
 8000484:	4093      	lsls	r3, r2
 8000486:	001e      	movs	r6, r3
 8000488:	42af      	cmp	r7, r5
 800048a:	d83b      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800048c:	42af      	cmp	r7, r5
 800048e:	d100      	bne.n	8000492 <__udivmoddi4+0x52>
 8000490:	e079      	b.n	8000586 <__udivmoddi4+0x146>
 8000492:	465b      	mov	r3, fp
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5e>
 800049c:	e076      	b.n	800058c <__udivmoddi4+0x14c>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	465a      	mov	r2, fp
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4642      	mov	r2, r8
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e029      	b.n	800050c <__udivmoddi4+0xcc>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9cf      	bls.n	800045c <__udivmoddi4+0x1c>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8e>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b003      	add	sp, #12
 80004d4:	bcf0      	pop	{r4, r5, r6, r7}
 80004d6:	46bb      	mov	fp, r7
 80004d8:	46b2      	mov	sl, r6
 80004da:	46a9      	mov	r9, r5
 80004dc:	46a0      	mov	r8, r4
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	4642      	mov	r2, r8
 80004e2:	469b      	mov	fp, r3
 80004e4:	2320      	movs	r3, #32
 80004e6:	1a9b      	subs	r3, r3, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	40da      	lsrs	r2, r3
 80004ec:	4641      	mov	r1, r8
 80004ee:	0013      	movs	r3, r2
 80004f0:	464a      	mov	r2, r9
 80004f2:	408a      	lsls	r2, r1
 80004f4:	0017      	movs	r7, r2
 80004f6:	4642      	mov	r2, r8
 80004f8:	431f      	orrs	r7, r3
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001e      	movs	r6, r3
 8000500:	42af      	cmp	r7, r5
 8000502:	d9c3      	bls.n	800048c <__udivmoddi4+0x4c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	4643      	mov	r3, r8
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0d8      	beq.n	80004c4 <__udivmoddi4+0x84>
 8000512:	07fb      	lsls	r3, r7, #31
 8000514:	0872      	lsrs	r2, r6, #1
 8000516:	431a      	orrs	r2, r3
 8000518:	4646      	mov	r6, r8
 800051a:	087b      	lsrs	r3, r7, #1
 800051c:	e00e      	b.n	800053c <__udivmoddi4+0xfc>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d101      	bne.n	8000526 <__udivmoddi4+0xe6>
 8000522:	42a2      	cmp	r2, r4
 8000524:	d80c      	bhi.n	8000540 <__udivmoddi4+0x100>
 8000526:	1aa4      	subs	r4, r4, r2
 8000528:	419d      	sbcs	r5, r3
 800052a:	2001      	movs	r0, #1
 800052c:	1924      	adds	r4, r4, r4
 800052e:	416d      	adcs	r5, r5
 8000530:	2100      	movs	r1, #0
 8000532:	3e01      	subs	r6, #1
 8000534:	1824      	adds	r4, r4, r0
 8000536:	414d      	adcs	r5, r1
 8000538:	2e00      	cmp	r6, #0
 800053a:	d006      	beq.n	800054a <__udivmoddi4+0x10a>
 800053c:	42ab      	cmp	r3, r5
 800053e:	d9ee      	bls.n	800051e <__udivmoddi4+0xde>
 8000540:	3e01      	subs	r6, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2e00      	cmp	r6, #0
 8000548:	d1f8      	bne.n	800053c <__udivmoddi4+0xfc>
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	465b      	mov	r3, fp
 8000550:	1900      	adds	r0, r0, r4
 8000552:	4169      	adcs	r1, r5
 8000554:	2b00      	cmp	r3, #0
 8000556:	db24      	blt.n	80005a2 <__udivmoddi4+0x162>
 8000558:	002b      	movs	r3, r5
 800055a:	465a      	mov	r2, fp
 800055c:	4644      	mov	r4, r8
 800055e:	40d3      	lsrs	r3, r2
 8000560:	002a      	movs	r2, r5
 8000562:	40e2      	lsrs	r2, r4
 8000564:	001c      	movs	r4, r3
 8000566:	465b      	mov	r3, fp
 8000568:	0015      	movs	r5, r2
 800056a:	2b00      	cmp	r3, #0
 800056c:	db2a      	blt.n	80005c4 <__udivmoddi4+0x184>
 800056e:	0026      	movs	r6, r4
 8000570:	409e      	lsls	r6, r3
 8000572:	0033      	movs	r3, r6
 8000574:	0026      	movs	r6, r4
 8000576:	4647      	mov	r7, r8
 8000578:	40be      	lsls	r6, r7
 800057a:	0032      	movs	r2, r6
 800057c:	1a80      	subs	r0, r0, r2
 800057e:	4199      	sbcs	r1, r3
 8000580:	9000      	str	r0, [sp, #0]
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	e79e      	b.n	80004c4 <__udivmoddi4+0x84>
 8000586:	42a3      	cmp	r3, r4
 8000588:	d8bc      	bhi.n	8000504 <__udivmoddi4+0xc4>
 800058a:	e782      	b.n	8000492 <__udivmoddi4+0x52>
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	2100      	movs	r1, #0
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	2200      	movs	r2, #0
 8000596:	9100      	str	r1, [sp, #0]
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	2201      	movs	r2, #1
 800059c:	40da      	lsrs	r2, r3
 800059e:	9201      	str	r2, [sp, #4]
 80005a0:	e785      	b.n	80004ae <__udivmoddi4+0x6e>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	4646      	mov	r6, r8
 80005ac:	409a      	lsls	r2, r3
 80005ae:	0023      	movs	r3, r4
 80005b0:	40f3      	lsrs	r3, r6
 80005b2:	4644      	mov	r4, r8
 80005b4:	4313      	orrs	r3, r2
 80005b6:	002a      	movs	r2, r5
 80005b8:	40e2      	lsrs	r2, r4
 80005ba:	001c      	movs	r4, r3
 80005bc:	465b      	mov	r3, fp
 80005be:	0015      	movs	r5, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	dad4      	bge.n	800056e <__udivmoddi4+0x12e>
 80005c4:	4642      	mov	r2, r8
 80005c6:	002f      	movs	r7, r5
 80005c8:	2320      	movs	r3, #32
 80005ca:	0026      	movs	r6, r4
 80005cc:	4097      	lsls	r7, r2
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	40de      	lsrs	r6, r3
 80005d2:	003b      	movs	r3, r7
 80005d4:	4333      	orrs	r3, r6
 80005d6:	e7cd      	b.n	8000574 <__udivmoddi4+0x134>

080005d8 <__clzdi2>:
 80005d8:	b510      	push	{r4, lr}
 80005da:	2900      	cmp	r1, #0
 80005dc:	d103      	bne.n	80005e6 <__clzdi2+0xe>
 80005de:	f000 f807 	bl	80005f0 <__clzsi2>
 80005e2:	3020      	adds	r0, #32
 80005e4:	e002      	b.n	80005ec <__clzdi2+0x14>
 80005e6:	0008      	movs	r0, r1
 80005e8:	f000 f802 	bl	80005f0 <__clzsi2>
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzsi2>:
 80005f0:	211c      	movs	r1, #28
 80005f2:	2301      	movs	r3, #1
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0xe>
 80005fa:	0c00      	lsrs	r0, r0, #16
 80005fc:	3910      	subs	r1, #16
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	4298      	cmp	r0, r3
 8000602:	d301      	bcc.n	8000608 <__clzsi2+0x18>
 8000604:	0a00      	lsrs	r0, r0, #8
 8000606:	3908      	subs	r1, #8
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0x22>
 800060e:	0900      	lsrs	r0, r0, #4
 8000610:	3904      	subs	r1, #4
 8000612:	a202      	add	r2, pc, #8	; (adr r2, 800061c <__clzsi2+0x2c>)
 8000614:	5c10      	ldrb	r0, [r2, r0]
 8000616:	1840      	adds	r0, r0, r1
 8000618:	4770      	bx	lr
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	02020304 	.word	0x02020304
 8000620:	01010101 	.word	0x01010101
	...

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe10 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f824 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 fab6 	bl	8000ba8 <MX_GPIO_Init>
  MX_RTC_Init();
 800063c:	f000 f876 	bl	800072c <MX_RTC_Init>
  MX_TIM6_Init();
 8000640:	f000 f956 	bl	80008f0 <MX_TIM6_Init>
  MX_SPI1_Init();
 8000644:	f000 f916 	bl	8000874 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000648:	f000 f990 	bl	800096c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 f9dc 	bl	8000a08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000650:	f000 fa28 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000654:	f000 fa74 	bl	8000b40 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  HAL_UART_Transmit ( &huart2 , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <main+0x4c>)
 800065a:	681c      	ldr	r4, [r3, #0]
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x4c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff fd4f 	bl	8000104 <strlen>
 8000666:	0003      	movs	r3, r0
 8000668:	b29a      	uxth	r2, r3
 800066a:	23fa      	movs	r3, #250	; 0xfa
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <main+0x50>)
 8000670:	0021      	movs	r1, r4
 8000672:	f003 f88d 	bl	8003790 <HAL_UART_Transmit>
  // HAL_GPIO_TogglePin ( LDB_GPIO_Port , LDB_Pin ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x4a>
 8000678:	20000000 	.word	0x20000000
 800067c:	200001a0 	.word	0x200001a0

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b095      	sub	sp, #84	; 0x54
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	2414      	movs	r4, #20
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	233c      	movs	r3, #60	; 0x3c
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 ffc5 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	0018      	movs	r0, r3
 800069a:	2310      	movs	r3, #16
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f003 ffbe 	bl	8004620 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f8e5 	bl	8001878 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ae:	f001 f8d5 	bl	800185c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <SystemClock_Config+0xa8>)
 80006b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <SystemClock_Config+0xa8>)
 80006b8:	2118      	movs	r1, #24
 80006ba:	438a      	bics	r2, r1
 80006bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2206      	movs	r2, #6
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2201      	movs	r2, #1
 80006c8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2240      	movs	r2, #64	; 0x40
 80006dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 f912 	bl	8001910 <HAL_RCC_OscConfig>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f0:	f000 fb40 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2207      	movs	r2, #7
 80006f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2100      	movs	r1, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fc5d 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071a:	f000 fb2b 	bl	8000d74 <Error_Handler>
  }
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b015      	add	sp, #84	; 0x54
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000

0800072c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	; 0x40
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000732:	232c      	movs	r3, #44	; 0x2c
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	0018      	movs	r0, r3
 8000738:	2314      	movs	r3, #20
 800073a:	001a      	movs	r2, r3
 800073c:	2100      	movs	r1, #0
 800073e:	f003 ff6f 	bl	8004620 <memset>
  RTC_DateTypeDef sDate = {0};
 8000742:	2328      	movs	r3, #40	; 0x28
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800074a:	003b      	movs	r3, r7
 800074c:	0018      	movs	r0, r3
 800074e:	2328      	movs	r3, #40	; 0x28
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f003 ff64 	bl	8004620 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <MX_RTC_Init+0x140>)
 800075a:	4a45      	ldr	r2, [pc, #276]	; (8000870 <MX_RTC_Init+0x144>)
 800075c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075e:	4b43      	ldr	r3, [pc, #268]	; (800086c <MX_RTC_Init+0x140>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000764:	4b41      	ldr	r3, [pc, #260]	; (800086c <MX_RTC_Init+0x140>)
 8000766:	227f      	movs	r2, #127	; 0x7f
 8000768:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800076a:	4b40      	ldr	r3, [pc, #256]	; (800086c <MX_RTC_Init+0x140>)
 800076c:	22ff      	movs	r2, #255	; 0xff
 800076e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000770:	4b3e      	ldr	r3, [pc, #248]	; (800086c <MX_RTC_Init+0x140>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000776:	4b3d      	ldr	r3, [pc, #244]	; (800086c <MX_RTC_Init+0x140>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800077c:	4b3b      	ldr	r3, [pc, #236]	; (800086c <MX_RTC_Init+0x140>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000782:	4b3a      	ldr	r3, [pc, #232]	; (800086c <MX_RTC_Init+0x140>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	05d2      	lsls	r2, r2, #23
 8000788:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800078a:	4b38      	ldr	r3, [pc, #224]	; (800086c <MX_RTC_Init+0x140>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000790:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_RTC_Init+0x140>)
 8000792:	0018      	movs	r0, r3
 8000794:	f002 f802 	bl	800279c <HAL_RTC_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800079c:	f000 faea 	bl	8000d74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007a0:	212c      	movs	r1, #44	; 0x2c
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2200      	movs	r2, #0
 80007b2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007c6:	1879      	adds	r1, r7, r1
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_RTC_Init+0x140>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 f887 	bl	80028e0 <HAL_RTC_SetTime>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80007d6:	f000 facd 	bl	8000d74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80007da:	2128      	movs	r1, #40	; 0x28
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2206      	movs	r2, #6
 80007e0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2201      	movs	r2, #1
 80007e6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007f4:	1879      	adds	r1, r7, r1
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_RTC_Init+0x140>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	0018      	movs	r0, r3
 80007fc:	f002 f918 	bl	8002a30 <HAL_RTC_SetDate>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000804:	f000 fab6 	bl	8000d74 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000814:	003b      	movs	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800081a:	003b      	movs	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000826:	003b      	movs	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800083e:	003b      	movs	r3, r7
 8000840:	2220      	movs	r2, #32
 8000842:	2101      	movs	r1, #1
 8000844:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000846:	003b      	movs	r3, r7
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800084e:	0039      	movs	r1, r7
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_RTC_Init+0x140>)
 8000852:	2201      	movs	r2, #1
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f97d 	bl	8002b54 <HAL_RTC_SetAlarm_IT>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800085e:	f000 fa89 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b010      	add	sp, #64	; 0x40
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000030 	.word	0x20000030
 8000870:	40002800 	.word	0x40002800

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_SPI1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_SPI1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000880:	2282      	movs	r2, #130	; 0x82
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x74>)
 800088e:	22e0      	movs	r2, #224	; 0xe0
 8000890:	00d2      	lsls	r2, r2, #3
 8000892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008c2:	2207      	movs	r2, #7
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008ce:	2208      	movs	r2, #8
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 fb9f 	bl	8003018 <HAL_SPI_Init>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 fa49 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000005c 	.word	0x2000005c
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	0018      	movs	r0, r3
 80008fa:	230c      	movs	r3, #12
 80008fc:	001a      	movs	r2, r3
 80008fe:	2100      	movs	r1, #0
 8000900:	f003 fe8e 	bl	8004620 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_TIM6_Init+0x6c>)
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <MX_TIM6_Init+0x70>)
 8000908:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_TIM6_Init+0x6c>)
 800090c:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_TIM6_Init+0x74>)
 800090e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_TIM6_Init+0x6c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_TIM6_Init+0x6c>)
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_TIM6_Init+0x78>)
 800091a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_TIM6_Init+0x6c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_TIM6_Init+0x6c>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fc2f 	bl	8003188 <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800092e:	f000 fa21 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800093e:	1d3a      	adds	r2, r7, #4
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_TIM6_Init+0x6c>)
 8000942:	0011      	movs	r1, r2
 8000944:	0018      	movs	r0, r3
 8000946:	f002 fe3f 	bl	80035c8 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800094e:	f000 fa11 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	200000c0 	.word	0x200000c0
 8000960:	40001000 	.word	0x40001000
 8000964:	00003e7f 	.word	0x00003e7f
 8000968:	000003e7 	.word	0x000003e7

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000972:	4a24      	ldr	r2, [pc, #144]	; (8000a04 <MX_USART1_UART_Init+0x98>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000978:	22e1      	movs	r2, #225	; 0xe1
 800097a:	0252      	lsls	r2, r2, #9
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 fe94 	bl	80036e4 <HAL_UART_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f9d8 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009c6:	2100      	movs	r1, #0
 80009c8:	0018      	movs	r0, r3
 80009ca:	f003 fd49 	bl	8004460 <HAL_UARTEx_SetTxFifoThreshold>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f9cf 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009d8:	2100      	movs	r1, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 fd80 	bl	80044e0 <HAL_UARTEx_SetRxFifoThreshold>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f9c6 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MX_USART1_UART_Init+0x94>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f003 fcfe 	bl	80043ec <HAL_UARTEx_DisableFifoMode>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f9be 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	2000010c 	.word	0x2000010c
 8000a04:	40013800 	.word	0x40013800

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <MX_USART2_UART_Init+0x98>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a14:	22e1      	movs	r2, #225	; 0xe1
 8000a16:	0252      	lsls	r2, r2, #9
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fe46 	bl	80036e4 <HAL_UART_Init>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f98a 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f003 fcfb 	bl	8004460 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6e:	f000 f981 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 fd32 	bl	80044e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f978 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <MX_USART2_UART_Init+0x94>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f003 fcb0 	bl	80043ec <HAL_UARTEx_DisableFifoMode>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f970 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	200001a0 	.word	0x200001a0
 8000aa0:	40004400 	.word	0x40004400

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aaa:	4a24      	ldr	r2, [pc, #144]	; (8000b3c <MX_USART3_UART_Init+0x98>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ab0:	2296      	movs	r2, #150	; 0x96
 8000ab2:	0192      	lsls	r2, r2, #6
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fdf8 	bl	80036e4 <HAL_UART_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f93c 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	0018      	movs	r0, r3
 8000b02:	f003 fcad 	bl	8004460 <HAL_UARTEx_SetTxFifoThreshold>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 f933 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f003 fce4 	bl	80044e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 f92a 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <MX_USART3_UART_Init+0x94>)
 8000b22:	0018      	movs	r0, r3
 8000b24:	f003 fc62 	bl	80043ec <HAL_UARTEx_DisableFifoMode>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 f922 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000234 	.word	0x20000234
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <MX_USART5_UART_Init+0x64>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b4c:	22e1      	movs	r2, #225	; 0xe1
 8000b4e:	0252      	lsls	r2, r2, #9
 8000b50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <MX_USART5_UART_Init+0x60>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f002 fdaa 	bl	80036e4 <HAL_UART_Init>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000b94:	f000 f8ee 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	200002c8 	.word	0x200002c8
 8000ba4:	40005000 	.word	0x40005000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	2414      	movs	r4, #20
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f003 fd31 	bl	8004620 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b68      	ldr	r3, [pc, #416]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc2:	4b67      	ldr	r3, [pc, #412]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bca:	4b65      	ldr	r3, [pc, #404]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b62      	ldr	r3, [pc, #392]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bda:	4b61      	ldr	r3, [pc, #388]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bdc:	2101      	movs	r1, #1
 8000bde:	430a      	orrs	r2, r1
 8000be0:	635a      	str	r2, [r3, #52]	; 0x34
 8000be2:	4b5f      	ldr	r3, [pc, #380]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	2201      	movs	r2, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b5c      	ldr	r3, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	635a      	str	r2, [r3, #52]	; 0x34
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x1b8>)
 8000c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c16:	2208      	movs	r2, #8
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c1e:	23a0      	movs	r3, #160	; 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	2200      	movs	r2, #0
 8000c24:	2110      	movs	r1, #16
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fdfa 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000c2c:	494d      	ldr	r1, [pc, #308]	; (8000d64 <MX_GPIO_Init+0x1bc>)
 8000c2e:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <MX_GPIO_Init+0x1c0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fdf4 	bl	8001820 <HAL_GPIO_WritePin>
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <MX_GPIO_Init+0x1c4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fdee 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2288      	movs	r2, #136	; 0x88
 8000c4e:	0352      	lsls	r2, r2, #13
 8000c50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8000c58:	193a      	adds	r2, r7, r4
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fc71 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fc61 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2210      	movs	r2, #16
 8000c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2201      	movs	r2, #1
 8000c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	193a      	adds	r2, r7, r4
 8000ca0:	23a0      	movs	r3, #160	; 0xa0
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fc4e 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_RST_Pin GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x1bc>)
 8000cb0:	601a      	str	r2, [r3, #0]
                          |GNSS_RST_Pin|GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <MX_GPIO_Init+0x1c0>)
 8000cc8:	0019      	movs	r1, r3
 8000cca:	0010      	movs	r0, r2
 8000ccc:	f000 fc3c 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8000cd0:	0021      	movs	r1, r4
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2224      	movs	r2, #36	; 0x24
 8000cd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2288      	movs	r2, #136	; 0x88
 8000cdc:	0352      	lsls	r2, r2, #13
 8000cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	000c      	movs	r4, r1
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	4a1f      	ldr	r2, [pc, #124]	; (8000d68 <MX_GPIO_Init+0x1c0>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f000 fc2a 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <MX_GPIO_Init+0x1c8>)
 8000cf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <MX_GPIO_Init+0x1c0>)
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	f000 fc1b 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2203      	movs	r2, #3
 8000d16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	193b      	adds	r3, r7, r4
 8000d2c:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_GPIO_Init+0x1c4>)
 8000d2e:	0019      	movs	r1, r3
 8000d30:	0010      	movs	r0, r2
 8000d32:	f000 fc09 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <MX_GPIO_Init+0x1c4>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f000 fbf9 	bl	8001548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b00b      	add	sp, #44	; 0x2c
 8000d5c:	bd90      	pop	{r4, r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40021000 	.word	0x40021000
 8000d64:	0000ac03 	.word	0x0000ac03
 8000d68:	50000400 	.word	0x50000400
 8000d6c:	50000c00 	.word	0x50000c00
 8000d70:	00004040 	.word	0x00004040

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0549      	lsls	r1, r1, #21
 8000da8:	430a      	orrs	r2, r1
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	055b      	lsls	r3, r3, #21
 8000db4:	4013      	ands	r3, r2
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 face 	bl	8001360 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b097      	sub	sp, #92	; 0x5c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	240c      	movs	r4, #12
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	234c      	movs	r3, #76	; 0x4c
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f003 fc1c 	bl	8004620 <memset>
  if(hrtc->Instance==RTC)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_RTC_MspInit+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0292      	lsls	r2, r2, #10
 8000df8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0052      	lsls	r2, r2, #1
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fa8d 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e0e:	f7ff ffb1 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0209      	lsls	r1, r1, #8
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	00c9      	lsls	r1, r1, #3
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_RTC_MspInit+0x88>)
 8000e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4013      	ands	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2103      	movs	r1, #3
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fb4f 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fb61 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b017      	add	sp, #92	; 0x5c
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	40002800 	.word	0x40002800
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b08b      	sub	sp, #44	; 0x2c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	2414      	movs	r4, #20
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	0018      	movs	r0, r3
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f003 fbd6 	bl	8004620 <memset>
  if(hspi->Instance==SPI1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0149      	lsls	r1, r1, #5
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_SPI_MspInit+0x90>)
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8000eb2:	0021      	movs	r1, r4
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	22e0      	movs	r2, #224	; 0xe0
 8000eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	23a0      	movs	r3, #160	; 0xa0
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fb34 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b00b      	add	sp, #44	; 0x2c
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x44>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d113      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f08:	2110      	movs	r1, #16
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0x48>)
 8000f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f12:	2210      	movs	r2, #16
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	2011      	movs	r0, #17
 8000f20:	f000 fae0 	bl	80014e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000f24:	2011      	movs	r0, #17
 8000f26:	f000 faf2 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40001000 	.word	0x40001000
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b0a3      	sub	sp, #140	; 0x8c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	2374      	movs	r3, #116	; 0x74
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f003 fb66 	bl	8004620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f54:	2428      	movs	r4, #40	; 0x28
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	234c      	movs	r3, #76	; 0x4c
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f003 fb5e 	bl	8004620 <memset>
  if(huart->Instance==USART1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a84      	ldr	r2, [pc, #528]	; (800117c <HAL_UART_MspInit+0x240>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d140      	bne.n	8000ff0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 f9d1 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f86:	f7ff fef5 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f8a:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8e:	4b7c      	ldr	r3, [pc, #496]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	01c9      	lsls	r1, r1, #7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
 8000f98:	4b79      	ldr	r3, [pc, #484]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	01db      	lsls	r3, r3, #7
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000faa:	4b75      	ldr	r3, [pc, #468]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb2:	4b73      	ldr	r3, [pc, #460]	; (8001180 <HAL_UART_MspInit+0x244>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	623b      	str	r3, [r7, #32]
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8000fbe:	2174      	movs	r1, #116	; 0x74
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	22c0      	movs	r2, #192	; 0xc0
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2202      	movs	r2, #2
 8000fcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	187a      	adds	r2, r7, r1
 8000fe2:	23a0      	movs	r3, #160	; 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 faad 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8000fee:	e0c0      	b.n	8001172 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a63      	ldr	r2, [pc, #396]	; (8001184 <HAL_UART_MspInit+0x248>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d140      	bne.n	800107c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ffa:	2128      	movs	r1, #40	; 0x28
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	2202      	movs	r2, #2
 8001000:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001002:	187b      	adds	r3, r7, r1
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	187b      	adds	r3, r7, r1
 800100a:	0018      	movs	r0, r3
 800100c:	f001 f98a 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8001010:	1e03      	subs	r3, r0, #0
 8001012:	d001      	beq.n	8001018 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8001014:	f7ff feae 	bl	8000d74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001018:	4b59      	ldr	r3, [pc, #356]	; (8001180 <HAL_UART_MspInit+0x244>)
 800101a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <HAL_UART_MspInit+0x244>)
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	0289      	lsls	r1, r1, #10
 8001022:	430a      	orrs	r2, r1
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b52      	ldr	r3, [pc, #328]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	4b51      	ldr	r3, [pc, #324]	; (8001180 <HAL_UART_MspInit+0x244>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
 8001040:	4b4f      	ldr	r3, [pc, #316]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 800104c:	2174      	movs	r1, #116	; 0x74
 800104e:	187b      	adds	r3, r7, r1
 8001050:	220c      	movs	r2, #12
 8001052:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2202      	movs	r2, #2
 8001058:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2201      	movs	r2, #1
 800106a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	187a      	adds	r2, r7, r1
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	0011      	movs	r1, r2
 8001074:	0018      	movs	r0, r3
 8001076:	f000 fa67 	bl	8001548 <HAL_GPIO_Init>
}
 800107a:	e07a      	b.n	8001172 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a41      	ldr	r2, [pc, #260]	; (8001188 <HAL_UART_MspInit+0x24c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d140      	bne.n	8001108 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001086:	2128      	movs	r1, #40	; 0x28
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2204      	movs	r2, #4
 800108c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	187b      	adds	r3, r7, r1
 8001096:	0018      	movs	r0, r3
 8001098:	f001 f944 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80010a0:	f7ff fe68 	bl	8000d74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	02c9      	lsls	r1, r1, #11
 80010ae:	430a      	orrs	r2, r1
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	02db      	lsls	r3, r3, #11
 80010ba:	4013      	ands	r3, r2
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010c6:	2102      	movs	r1, #2
 80010c8:	430a      	orrs	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_UART_MspInit+0x244>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	2202      	movs	r2, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80010d8:	2174      	movs	r1, #116	; 0x74
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	22c0      	movs	r2, #192	; 0xc0
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2202      	movs	r2, #2
 80010e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2204      	movs	r2, #4
 80010f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_UART_MspInit+0x250>)
 80010fe:	0019      	movs	r1, r3
 8001100:	0010      	movs	r0, r2
 8001102:	f000 fa21 	bl	8001548 <HAL_GPIO_Init>
}
 8001106:	e034      	b.n	8001172 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <HAL_UART_MspInit+0x254>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d12f      	bne.n	8001172 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0049      	lsls	r1, r1, #1
 800111c:	430a      	orrs	r2, r1
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001122:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_UART_MspInit+0x244>)
 8001134:	2102      	movs	r1, #2
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_UART_MspInit+0x244>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8001146:	2174      	movs	r1, #116	; 0x74
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2218      	movs	r2, #24
 800114c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	187b      	adds	r3, r7, r1
 8001150:	2202      	movs	r2, #2
 8001152:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	187b      	adds	r3, r7, r1
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8001160:	187b      	adds	r3, r7, r1
 8001162:	2203      	movs	r2, #3
 8001164:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	187b      	adds	r3, r7, r1
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <HAL_UART_MspInit+0x250>)
 800116a:	0019      	movs	r1, r3
 800116c:	0010      	movs	r0, r2
 800116e:	f000 f9eb 	bl	8001548 <HAL_GPIO_Init>
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b023      	add	sp, #140	; 0x8c
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	40013800 	.word	0x40013800
 8001180:	40021000 	.word	0x40021000
 8001184:	40004400 	.word	0x40004400
 8001188:	40004800 	.word	0x40004800
 800118c:	50000400 	.word	0x50000400
 8001190:	40005000 	.word	0x40005000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8b6 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <RTC_TAMP_IRQHandler+0x14>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f001 fe02 	bl	8002dd4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20000030 	.word	0x20000030

080011dc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f002 f828 	bl	8003238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	200000c0 	.word	0x200000c0

080011f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001204:	f7ff fff6 	bl	80011f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800122e:	f003 f9ff 	bl	8004630 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001232:	f7ff f9fb 	bl	800062c <main>

08001236 <LoopForever>:

LoopForever:
  b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   r0, =_estack
 8001238:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001244:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 8001248:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800124c:	200004f8 	.word	0x200004f8

08001250 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_COMP_IRQHandler>
	...

08001254 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_Init+0x3c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Init+0x3c>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0049      	lsls	r1, r1, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f810 	bl	8001294 <HAL_InitTick>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d003      	beq.n	8001280 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e001      	b.n	8001284 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fd7e 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40022000 	.word	0x40022000

08001294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800129c:	230f      	movs	r3, #15
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_InitTick+0x88>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d02b      	beq.n	8001304 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_InitTick+0x8c>)
 80012ae:	681c      	ldr	r4, [r3, #0]
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_InitTick+0x88>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	0019      	movs	r1, r3
 80012b6:	23fa      	movs	r3, #250	; 0xfa
 80012b8:	0098      	lsls	r0, r3, #2
 80012ba:	f7fe ff2b 	bl	8000114 <__udivsi3>
 80012be:	0003      	movs	r3, r0
 80012c0:	0019      	movs	r1, r3
 80012c2:	0020      	movs	r0, r4
 80012c4:	f7fe ff26 	bl	8000114 <__udivsi3>
 80012c8:	0003      	movs	r3, r0
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f92f 	bl	800152e <HAL_SYSTICK_Config>
 80012d0:	1e03      	subs	r3, r0, #0
 80012d2:	d112      	bne.n	80012fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d80a      	bhi.n	80012f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2301      	movs	r3, #1
 80012de:	425b      	negs	r3, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f8fe 	bl	80014e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_InitTick+0x90>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00d      	b.n	800130c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012f0:	230f      	movs	r3, #15
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
 80012f8:	e008      	b.n	800130c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012fa:	230f      	movs	r3, #15
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e003      	b.n	800130c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001304:	230f      	movs	r3, #15
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	781b      	ldrb	r3, [r3, #0]
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b005      	add	sp, #20
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	2000000c 	.word	0x2000000c
 8001320:	20000004 	.word	0x20000004
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x1c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	001a      	movs	r2, r3
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x20>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	18d2      	adds	r2, r2, r3
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_IncTick+0x20>)
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	2000000c 	.word	0x2000000c
 8001348:	2000035c 	.word	0x2000035c

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b02      	ldr	r3, [pc, #8]	; (800135c <HAL_GetTick+0x10>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	2000035c 	.word	0x2000035c

08001360 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40010000 	.word	0x40010000
 8001388:	fffff9ff 	.word	0xfffff9ff

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	0002      	movs	r2, r0
 8001394:	1dfb      	adds	r3, r7, #7
 8001396:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b7f      	cmp	r3, #127	; 0x7f
 800139e:	d809      	bhi.n	80013b4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a0:	1dfb      	adds	r3, r7, #7
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	001a      	movs	r2, r3
 80013a6:	231f      	movs	r3, #31
 80013a8:	401a      	ands	r2, r3
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_EnableIRQ+0x30>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	4091      	lsls	r1, r2
 80013b0:	000a      	movs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0002      	movs	r2, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b7f      	cmp	r3, #127	; 0x7f
 80013d4:	d828      	bhi.n	8001428 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <__NVIC_SetPriority+0xd4>)
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	33c0      	adds	r3, #192	; 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	589b      	ldr	r3, [r3, r2]
 80013e6:	1dfa      	adds	r2, r7, #7
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	0011      	movs	r1, r2
 80013ec:	2203      	movs	r2, #3
 80013ee:	400a      	ands	r2, r1
 80013f0:	00d2      	lsls	r2, r2, #3
 80013f2:	21ff      	movs	r1, #255	; 0xff
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	43d2      	mvns	r2, r2
 80013fa:	401a      	ands	r2, r3
 80013fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	019b      	lsls	r3, r3, #6
 8001402:	22ff      	movs	r2, #255	; 0xff
 8001404:	401a      	ands	r2, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	2303      	movs	r3, #3
 800140e:	4003      	ands	r3, r0
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001414:	481f      	ldr	r0, [pc, #124]	; (8001494 <__NVIC_SetPriority+0xd4>)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	430a      	orrs	r2, r1
 8001420:	33c0      	adds	r3, #192	; 0xc0
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001426:	e031      	b.n	800148c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <__NVIC_SetPriority+0xd8>)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	0019      	movs	r1, r3
 8001430:	230f      	movs	r3, #15
 8001432:	400b      	ands	r3, r1
 8001434:	3b08      	subs	r3, #8
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3306      	adds	r3, #6
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	18d3      	adds	r3, r2, r3
 800143e:	3304      	adds	r3, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	1dfa      	adds	r2, r7, #7
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	0011      	movs	r1, r2
 8001448:	2203      	movs	r2, #3
 800144a:	400a      	ands	r2, r1
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	21ff      	movs	r1, #255	; 0xff
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	43d2      	mvns	r2, r2
 8001456:	401a      	ands	r2, r3
 8001458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	22ff      	movs	r2, #255	; 0xff
 8001460:	401a      	ands	r2, r3
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	2303      	movs	r3, #3
 800146a:	4003      	ands	r3, r0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <__NVIC_SetPriority+0xd8>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	001c      	movs	r4, r3
 8001478:	230f      	movs	r3, #15
 800147a:	4023      	ands	r3, r4
 800147c:	3b08      	subs	r3, #8
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	430a      	orrs	r2, r1
 8001482:	3306      	adds	r3, #6
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	18c3      	adds	r3, r0, r3
 8001488:	3304      	adds	r3, #4
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b003      	add	sp, #12
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	045b      	lsls	r3, r3, #17
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d301      	bcc.n	80014b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b0:	2301      	movs	r3, #1
 80014b2:	e010      	b.n	80014d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <SysTick_Config+0x44>)
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	3a01      	subs	r2, #1
 80014ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014bc:	2301      	movs	r3, #1
 80014be:	425b      	negs	r3, r3
 80014c0:	2103      	movs	r1, #3
 80014c2:	0018      	movs	r0, r3
 80014c4:	f7ff ff7c 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x44>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x44>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	210f      	movs	r1, #15
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	1c02      	adds	r2, r0, #0
 80014f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	0002      	movs	r2, r0
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	0018      	movs	r0, r3
 8001522:	f7ff ff33 	bl	800138c <__NVIC_EnableIRQ>
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ffaf 	bl	800149c <SysTick_Config>
 800153e:	0003      	movs	r3, r0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e14d      	b.n	80017f4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4091      	lsls	r1, r2
 8001562:	000a      	movs	r2, r1
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d100      	bne.n	8001570 <HAL_GPIO_Init+0x28>
 800156e:	e13e      	b.n	80017ee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	4013      	ands	r3, r2
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x40>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	409a      	lsls	r2, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	2201      	movs	r2, #1
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	409a      	lsls	r2, r3
 8001604:	0013      	movs	r3, r2
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	4013      	ands	r3, r2
 800162e:	2b02      	cmp	r3, #2
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	58d3      	ldr	r3, [r2, r3]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2207      	movs	r2, #7
 8001644:	4013      	ands	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2107      	movs	r1, #7
 800165e:	400b      	ands	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	6939      	ldr	r1, [r7, #16]
 8001678:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	43da      	mvns	r2, r3
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2203      	movs	r2, #3
 8001698:	401a      	ands	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	23c0      	movs	r3, #192	; 0xc0
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d100      	bne.n	80016bc <HAL_GPIO_Init+0x174>
 80016ba:	e098      	b.n	80017ee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016bc:	4a53      	ldr	r2, [pc, #332]	; (800180c <HAL_GPIO_Init+0x2c4>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3318      	adds	r3, #24
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	589b      	ldr	r3, [r3, r2]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2203      	movs	r2, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	220f      	movs	r2, #15
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	23a0      	movs	r3, #160	; 0xa0
 80016e4:	05db      	lsls	r3, r3, #23
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x1d6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x1d2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_GPIO_Init+0x2cc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x1ce>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a46      	ldr	r2, [pc, #280]	; (8001818 <HAL_GPIO_Init+0x2d0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x1ca>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a45      	ldr	r2, [pc, #276]	; (800181c <HAL_GPIO_Init+0x2d4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x1c6>
 800170a:	2304      	movs	r3, #4
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x1d8>
 800170e:	2305      	movs	r3, #5
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x1d8>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x1d8>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x1d8>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x1d8>
 800171e:	2300      	movs	r3, #0
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	2103      	movs	r1, #3
 8001724:	400a      	ands	r2, r1
 8001726:	00d2      	lsls	r2, r2, #3
 8001728:	4093      	lsls	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001730:	4936      	ldr	r1, [pc, #216]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3318      	adds	r3, #24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	035b      	lsls	r3, r3, #13
 8001756:	4013      	ands	r3, r2
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_GPIO_Init+0x2c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	039b      	lsls	r3, r3, #14
 8001780:	4013      	ands	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_GPIO_Init+0x2c4>)
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_GPIO_Init+0x2c4>)
 8001794:	2384      	movs	r3, #132	; 0x84
 8001796:	58d3      	ldr	r3, [r2, r3]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43da      	mvns	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	4013      	ands	r3, r2
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b8:	4914      	ldr	r1, [pc, #80]	; (800180c <HAL_GPIO_Init+0x2c4>)
 80017ba:	2284      	movs	r2, #132	; 0x84
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_GPIO_Init+0x2c4>)
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	58d3      	ldr	r3, [r2, r3]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4013      	ands	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4909      	ldr	r1, [pc, #36]	; (800180c <HAL_GPIO_Init+0x2c4>)
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	1e13      	subs	r3, r2, #0
 80017fe:	d000      	beq.n	8001802 <HAL_GPIO_Init+0x2ba>
 8001800:	e6aa      	b.n	8001558 <HAL_GPIO_Init+0x10>
  }
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b006      	add	sp, #24
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021800 	.word	0x40021800
 8001810:	50000400 	.word	0x50000400
 8001814:	50000800 	.word	0x50000800
 8001818:	50000c00 	.word	0x50000c00
 800181c:	50001000 	.word	0x50001000

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	0008      	movs	r0, r1
 800182a:	0011      	movs	r1, r2
 800182c:	1cbb      	adds	r3, r7, #2
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	1c7b      	adds	r3, r7, #1
 8001834:	1c0a      	adds	r2, r1, #0
 8001836:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	1c7b      	adds	r3, r7, #1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001840:	1cbb      	adds	r3, r7, #2
 8001842:	881a      	ldrh	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184a:	1cbb      	adds	r3, r7, #2
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0049      	lsls	r1, r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40007000 	.word	0x40007000

08001878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d11f      	bne.n	80018dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	0013      	movs	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	189b      	adds	r3, r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4912      	ldr	r1, [pc, #72]	; (80018f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7fe fc32 	bl	8000114 <__udivsi3>
 80018b0:	0003      	movs	r3, r0
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b6:	e008      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e001      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e009      	b.n	80018de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	401a      	ands	r2, r3
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	429a      	cmp	r2, r3
 80018da:	d0ed      	beq.n	80018b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b004      	add	sp, #16
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	40007000 	.word	0x40007000
 80018ec:	fffff9ff 	.word	0xfffff9ff
 80018f0:	20000004 	.word	0x20000004
 80018f4:	000f4240 	.word	0x000f4240

080018f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <LL_RCC_GetAPB1Prescaler+0x14>)
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	23e0      	movs	r3, #224	; 0xe0
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4013      	ands	r3, r2
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	f000 fb50 	bl	8001fc4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d100      	bne.n	8001930 <HAL_RCC_OscConfig+0x20>
 800192e:	e07c      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001930:	4bc3      	ldr	r3, [pc, #780]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2238      	movs	r2, #56	; 0x38
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193a:	4bc1      	ldr	r3, [pc, #772]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2203      	movs	r2, #3
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b10      	cmp	r3, #16
 8001948:	d102      	bne.n	8001950 <HAL_RCC_OscConfig+0x40>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d002      	beq.n	8001956 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b08      	cmp	r3, #8
 8001954:	d10b      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	4bba      	ldr	r3, [pc, #744]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	029b      	lsls	r3, r3, #10
 800195e:	4013      	ands	r3, r2
 8001960:	d062      	beq.n	8001a28 <HAL_RCC_OscConfig+0x118>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d15e      	bne.n	8001a28 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e32a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	429a      	cmp	r2, r3
 8001978:	d107      	bne.n	800198a <HAL_RCC_OscConfig+0x7a>
 800197a:	4bb1      	ldr	r3, [pc, #708]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4bb0      	ldr	r3, [pc, #704]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e020      	b.n	80019cc <HAL_RCC_OscConfig+0xbc>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	23a0      	movs	r3, #160	; 0xa0
 8001990:	02db      	lsls	r3, r3, #11
 8001992:	429a      	cmp	r2, r3
 8001994:	d10e      	bne.n	80019b4 <HAL_RCC_OscConfig+0xa4>
 8001996:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4ba9      	ldr	r3, [pc, #676]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	02c9      	lsls	r1, r1, #11
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4ba6      	ldr	r3, [pc, #664]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4ba5      	ldr	r3, [pc, #660]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0249      	lsls	r1, r1, #9
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0xbc>
 80019b4:	4ba2      	ldr	r3, [pc, #648]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4ba1      	ldr	r3, [pc, #644]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019ba:	49a2      	ldr	r1, [pc, #648]	; (8001c44 <HAL_RCC_OscConfig+0x334>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4b9f      	ldr	r3, [pc, #636]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019c6:	49a0      	ldr	r1, [pc, #640]	; (8001c48 <HAL_RCC_OscConfig+0x338>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fcba 	bl	800134c <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019de:	f7ff fcb5 	bl	800134c <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e2e9      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0xce>
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fca5 	bl	800134c <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fca0 	bl	800134c <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e2d4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0xf8>
 8001a26:	e000      	b.n	8001a2a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x126>
 8001a34:	e099      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2238      	movs	r2, #56	; 0x38
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2203      	movs	r2, #3
 8001a46:	4013      	ands	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0x146>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d135      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4013      	ands	r3, r2
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_OscConfig+0x164>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e2a7      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	0019      	movs	r1, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	021a      	lsls	r2, r3, #8
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a90:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x340>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0adb      	lsrs	r3, r3, #11
 8001aaa:	2207      	movs	r2, #7
 8001aac:	4013      	ands	r3, r2
 8001aae:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <HAL_RCC_OscConfig+0x344>)
 8001ab0:	40da      	lsrs	r2, r3
 8001ab2:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x348>)
 8001ab4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x34c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7ff fbea 	bl	8001294 <HAL_InitTick>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d051      	beq.n	8001b68 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e27d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d030      	beq.n	8001b32 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x340>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fc2b 	bl	800134c <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc26 	bl	800134c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e25a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a4b      	ldr	r2, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x33c>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	e01b      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b38:	4949      	ldr	r1, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x350>)
 8001b3a:	400a      	ands	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc05 	bl	800134c <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc00 	bl	800134c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e234      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4013      	ands	r3, r2
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x238>
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b68:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4013      	ands	r3, r2
 8001b72:	d047      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2238      	movs	r2, #56	; 0x38
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b18      	cmp	r3, #24
 8001b7e:	d10a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b80:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d03c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d138      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e216      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fbcf 	bl	800134c <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fbca 	bl	800134c <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1fe      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f1      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2a4>
 8001bd0:	e018      	b.n	8001c04 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	438a      	bics	r2, r1
 8001bdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff fbb5 	bl	800134c <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fbb0 	bl	800134c <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1e4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	2202      	movs	r2, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1f1      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d100      	bne.n	8001c10 <HAL_RCC_OscConfig+0x300>
 8001c0e:	e0c7      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c10:	231f      	movs	r3, #31
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2238      	movs	r2, #56	; 0x38
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d11f      	bne.n	8001c64 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_RCC_OscConfig+0x330>)
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x320>
 8001c2e:	e0b7      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d000      	beq.n	8001c3a <HAL_RCC_OscConfig+0x32a>
 8001c38:	e0b2      	b.n	8001da0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c2      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	40021000 	.word	0x40021000
 8001c44:	fffeffff 	.word	0xfffeffff
 8001c48:	fffbffff 	.word	0xfffbffff
 8001c4c:	ffff80ff 	.word	0xffff80ff
 8001c50:	ffffc7ff 	.word	0xffffc7ff
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c64:	4bb5      	ldr	r3, [pc, #724]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	055b      	lsls	r3, r3, #21
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x364>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x366>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d011      	beq.n	8001c9e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4bb0      	ldr	r3, [pc, #704]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7e:	4baf      	ldr	r3, [pc, #700]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c80:	2180      	movs	r1, #128	; 0x80
 8001c82:	0549      	lsls	r1, r1, #21
 8001c84:	430a      	orrs	r2, r1
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c88:	4bac      	ldr	r3, [pc, #688]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001c8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	055b      	lsls	r3, r3, #21
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c96:	231f      	movs	r3, #31
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	4ba8      	ldr	r3, [pc, #672]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001caa:	4ba5      	ldr	r3, [pc, #660]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4ba4      	ldr	r3, [pc, #656]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0049      	lsls	r1, r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fb48 	bl	800134c <HAL_GetTick>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff fb43 	bl	800134c <HAL_GetTick>
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e177      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd4:	4b9a      	ldr	r3, [pc, #616]	; (8001f40 <HAL_RCC_OscConfig+0x630>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x3e6>
 8001ce8:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cec:	4b93      	ldr	r3, [pc, #588]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x420>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x408>
 8001cfe:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d16:	e00b      	b.n	8001d30 <HAL_RCC_OscConfig+0x420>
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1c:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d24:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d014      	beq.n	8001d62 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb08 	bl	800134c <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fb03 	bl	800134c <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a7d      	ldr	r2, [pc, #500]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e136      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x432>
 8001d60:	e013      	b.n	8001d8a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff faf3 	bl	800134c <HAL_GetTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d6a:	e009      	b.n	8001d80 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6c:	f7ff faee 	bl	800134c <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a73      	ldr	r2, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x634>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e121      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001d9a:	496b      	ldr	r1, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x638>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	4013      	ands	r3, r2
 8001da8:	d039      	beq.n	8001e1e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01b      	beq.n	8001dea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	03c9      	lsls	r1, r1, #15
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fac4 	bl	800134c <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dca:	f7ff fabf 	bl	800134c <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0f3      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	4013      	ands	r3, r2
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x4ba>
 8001de8:	e019      	b.n	8001e1e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dea:	4b54      	ldr	r3, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001df0:	4956      	ldr	r1, [pc, #344]	; (8001f4c <HAL_RCC_OscConfig+0x63c>)
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff faa9 	bl	800134c <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e00:	f7ff faa4 	bl	800134c <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0d8      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x518>
 8001e26:	e0cc      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2238      	movs	r2, #56	; 0x38
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x526>
 8001e34:	e07b      	b.n	8001f2e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d156      	bne.n	8001eec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e44:	4942      	ldr	r1, [pc, #264]	; (8001f50 <HAL_RCC_OscConfig+0x640>)
 8001e46:	400a      	ands	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa7f 	bl	800134c <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff fa7a 	bl	800134c <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0ae      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x644>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0449      	lsls	r1, r1, #17
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	0549      	lsls	r1, r1, #21
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fa43 	bl	800134c <HAL_GetTick>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fa3e 	bl	800134c <HAL_GetTick>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e072      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	049b      	lsls	r3, r3, #18
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x5bc>
 8001eea:	e06a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001ef2:	4917      	ldr	r1, [pc, #92]	; (8001f50 <HAL_RCC_OscConfig+0x640>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa28 	bl	800134c <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fa23 	bl	800134c <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e057      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	049b      	lsls	r3, r3, #18
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_OscConfig+0x62c>)
 8001f26:	490c      	ldr	r1, [pc, #48]	; (8001f58 <HAL_RCC_OscConfig+0x648>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	e049      	b.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e044      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	00001388 	.word	0x00001388
 8001f48:	efffffff 	.word	0xefffffff
 8001f4c:	ffbfffff 	.word	0xffbfffff
 8001f50:	feffffff 	.word	0xfeffffff
 8001f54:	11c1808c 	.word	0x11c1808c
 8001f58:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x6bc>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2203      	movs	r2, #3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d126      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2270      	movs	r2, #112	; 0x70
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11f      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	23fe      	movs	r3, #254	; 0xfe
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d116      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	23f8      	movs	r3, #248	; 0xf8
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d10e      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	23e0      	movs	r3, #224	; 0xe0
 8001fa4:	051b      	lsls	r3, r3, #20
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	0f5b      	lsrs	r3, r3, #29
 8001fb4:	075a      	lsls	r2, r3, #29
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b008      	add	sp, #32
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0e9      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2207      	movs	r2, #7
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d91e      	bls.n	8002030 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002004:	f7ff f9a2 	bl	800134c <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800200c:	e009      	b.n	8002022 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7ff f99d 	bl	800134c <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0ca      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2207      	movs	r2, #7
 8002028:	4013      	ands	r3, r2
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d015      	beq.n	8002066 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2204      	movs	r2, #4
 8002040:	4013      	ands	r3, r2
 8002042:	d006      	beq.n	8002052 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002044:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	21e0      	movs	r1, #224	; 0xe0
 800204c:	01c9      	lsls	r1, r1, #7
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a5d      	ldr	r2, [pc, #372]	; (80021cc <HAL_RCC_ClockConfig+0x1fc>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002062:	430a      	orrs	r2, r1
 8002064:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d057      	beq.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	029b      	lsls	r3, r3, #10
 8002080:	4013      	ands	r3, r2
 8002082:	d12b      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e097      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	049b      	lsls	r3, r3, #18
 8002098:	4013      	ands	r3, r2
 800209a:	d11f      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e08b      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4013      	ands	r3, r2
 80020b2:	d113      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e07f      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d106      	bne.n	80020ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e074      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e06d      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2207      	movs	r2, #7
 80020e2:	4393      	bics	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f0:	f7ff f92c 	bl	800134c <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f8:	e009      	b.n	800210e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7ff f927 	bl	800134c <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e054      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2238      	movs	r2, #56	; 0x38
 8002114:	401a      	ands	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	429a      	cmp	r2, r3
 800211e:	d1ec      	bne.n	80020fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2207      	movs	r2, #7
 8002126:	4013      	ands	r3, r2
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d21e      	bcs.n	800216c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2207      	movs	r2, #7
 8002134:	4393      	bics	r3, r2
 8002136:	0019      	movs	r1, r3
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002140:	f7ff f904 	bl	800134c <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7ff f8ff 	bl	800134c <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e02c      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2207      	movs	r2, #7
 8002164:	4013      	ands	r3, r2
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d1ee      	bne.n	800214a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002176:	4b14      	ldr	r3, [pc, #80]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_RCC_ClockConfig+0x200>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800218a:	f000 f829 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800218e:	0001      	movs	r1, r0
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_ClockConfig+0x1f8>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	220f      	movs	r2, #15
 8002198:	401a      	ands	r2, r3
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_RCC_ClockConfig+0x204>)
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	58d3      	ldr	r3, [r2, r3]
 80021a0:	221f      	movs	r2, #31
 80021a2:	4013      	ands	r3, r2
 80021a4:	000a      	movs	r2, r1
 80021a6:	40da      	lsrs	r2, r3
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x208>)
 80021aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_ClockConfig+0x20c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7ff f86f 	bl	8001294 <HAL_InitTick>
 80021b6:	0003      	movs	r3, r0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	00001388 	.word	0x00001388
 80021c8:	40021000 	.word	0x40021000
 80021cc:	fffff0ff 	.word	0xfffff0ff
 80021d0:	ffff8fff 	.word	0xffff8fff
 80021d4:	0800478c 	.word	0x0800478c
 80021d8:	20000004 	.word	0x20000004
 80021dc:	20000008 	.word	0x20000008

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	4013      	ands	r3, r2
 80021ee:	d10f      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0adb      	lsrs	r3, r3, #11
 80021f6:	2207      	movs	r2, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	0013      	movs	r3, r2
 8002200:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	4835      	ldr	r0, [pc, #212]	; (80022dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002206:	f7fd ff85 	bl	8000114 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e05d      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	; 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b08      	cmp	r3, #8
 800221a:	d102      	bne.n	8002222 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e054      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2238      	movs	r2, #56	; 0x38
 8002228:	4013      	ands	r3, r2
 800222a:	2b10      	cmp	r3, #16
 800222c:	d138      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	2207      	movs	r2, #7
 8002240:	4013      	ands	r3, r2
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	4824      	ldr	r0, [pc, #144]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002250:	f7fd ff60 	bl	8000114 <__udivsi3>
 8002254:	0003      	movs	r3, r0
 8002256:	0019      	movs	r1, r3
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	227f      	movs	r2, #127	; 0x7f
 8002260:	4013      	ands	r3, r2
 8002262:	434b      	muls	r3, r1
 8002264:	617b      	str	r3, [r7, #20]
        break;
 8002266:	e00d      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	481c      	ldr	r0, [pc, #112]	; (80022dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800226c:	f7fd ff52 	bl	8000114 <__udivsi3>
 8002270:	0003      	movs	r3, r0
 8002272:	0019      	movs	r1, r3
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	227f      	movs	r2, #127	; 0x7f
 800227c:	4013      	ands	r3, r2
 800227e:	434b      	muls	r3, r1
 8002280:	617b      	str	r3, [r7, #20]
        break;
 8002282:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0f5b      	lsrs	r3, r3, #29
 800228a:	2207      	movs	r2, #7
 800228c:	4013      	ands	r3, r2
 800228e:	3301      	adds	r3, #1
 8002290:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	6978      	ldr	r0, [r7, #20]
 8002296:	f7fd ff3d 	bl	8000114 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e015      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2238      	movs	r2, #56	; 0x38
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d103      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2238      	movs	r2, #56	; 0x38
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b18      	cmp	r3, #24
 80022be:	d103      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022c0:	23fa      	movs	r3, #250	; 0xfa
 80022c2:	01db      	lsls	r3, r3, #7
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e001      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022cc:	693b      	ldr	r3, [r7, #16]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	007a1200 	.word	0x007a1200

080022e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000004 	.word	0x20000004

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b5b0      	push	{r4, r5, r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	0004      	movs	r4, r0
 8002302:	f7ff faf9 	bl	80018f8 <LL_RCC_GetAPB1Prescaler>
 8002306:	0003      	movs	r3, r0
 8002308:	0b1a      	lsrs	r2, r3, #12
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	58d3      	ldr	r3, [r2, r3]
 8002310:	221f      	movs	r2, #31
 8002312:	4013      	ands	r3, r2
 8002314:	40dc      	lsrs	r4, r3
 8002316:	0023      	movs	r3, r4
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	080047cc 	.word	0x080047cc

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800232c:	2313      	movs	r3, #19
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002334:	2312      	movs	r3, #18
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	029b      	lsls	r3, r3, #10
 8002344:	4013      	ands	r3, r2
 8002346:	d100      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002348:	e0ad      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2011      	movs	r0, #17
 800234c:	183b      	adds	r3, r7, r0
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	055b      	lsls	r3, r3, #21
 800235a:	4013      	ands	r3, r2
 800235c:	d110      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	0549      	lsls	r1, r1, #21
 8002368:	430a      	orrs	r2, r1
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800236e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4013      	ands	r3, r2
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	183b      	adds	r3, r7, r0
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	0049      	lsls	r1, r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800238e:	f7fe ffdd 	bl	800134c <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002396:	e00b      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe ffd8 	bl	800134c <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d904      	bls.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023a6:	2313      	movs	r3, #19
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2203      	movs	r2, #3
 80023ac:	701a      	strb	r2, [r3, #0]
        break;
 80023ae:	e005      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d0ed      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80023bc:	2313      	movs	r3, #19
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15e      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023ca:	23c0      	movs	r3, #192	; 0xc0
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d014      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e2:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0249      	lsls	r1, r1, #9
 80023f6:	430a      	orrs	r2, r1
 80023f8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002400:	491e      	ldr	r1, [pc, #120]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002402:	400a      	ands	r2, r1
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002406:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d016      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe ff9a 	bl	800134c <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241c:	e00c      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe ff95 	bl	800134c <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d904      	bls.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800242e:	2313      	movs	r3, #19
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	2203      	movs	r2, #3
 8002434:	701a      	strb	r2, [r3, #0]
            break;
 8002436:	e004      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d0ed      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002442:	2313      	movs	r3, #19
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800245c:	430a      	orrs	r2, r1
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002460:	e016      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002462:	2312      	movs	r3, #18
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2213      	movs	r2, #19
 8002468:	18ba      	adds	r2, r7, r2
 800246a:	7812      	ldrb	r2, [r2, #0]
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e00f      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
 8002478:	fffffcff 	.word	0xfffffcff
 800247c:	fffeffff 	.word	0xfffeffff
 8002480:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	2312      	movs	r3, #18
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2213      	movs	r2, #19
 800248a:	18ba      	adds	r2, r7, r2
 800248c:	7812      	ldrb	r2, [r2, #0]
 800248e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002490:	2311      	movs	r3, #17
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4bb6      	ldr	r3, [pc, #728]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800249c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800249e:	4bb5      	ldr	r3, [pc, #724]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024a0:	49b5      	ldr	r1, [pc, #724]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2201      	movs	r2, #1
 80024ac:	4013      	ands	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	4bb0      	ldr	r3, [pc, #704]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b4:	2203      	movs	r2, #3
 80024b6:	4393      	bics	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4bad      	ldr	r3, [pc, #692]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2202      	movs	r2, #2
 80024ca:	4013      	ands	r3, r2
 80024cc:	d009      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ce:	4ba9      	ldr	r3, [pc, #676]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	220c      	movs	r2, #12
 80024d4:	4393      	bics	r3, r2
 80024d6:	0019      	movs	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4ba5      	ldr	r3, [pc, #660]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ec:	4ba1      	ldr	r3, [pc, #644]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	2230      	movs	r2, #48	; 0x30
 80024f2:	4393      	bics	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250a:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	4a9b      	ldr	r2, [pc, #620]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4b96      	ldr	r3, [pc, #600]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800251a:	430a      	orrs	r2, r1
 800251c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	015b      	lsls	r3, r3, #5
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800252a:	4b92      	ldr	r3, [pc, #584]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	4b8e      	ldr	r3, [pc, #568]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800253a:	430a      	orrs	r2, r1
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4013      	ands	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254a:	4b8a      	ldr	r3, [pc, #552]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	4a8d      	ldr	r2, [pc, #564]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002558:	4b86      	ldr	r3, [pc, #536]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800255a:	430a      	orrs	r2, r1
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4013      	ands	r3, r2
 8002568:	d009      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800256a:	4b82      	ldr	r3, [pc, #520]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	4a86      	ldr	r2, [pc, #536]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800257a:	430a      	orrs	r2, r1
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	4013      	ands	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	4a7f      	ldr	r2, [pc, #508]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	4b77      	ldr	r3, [pc, #476]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002598:	430a      	orrs	r2, r1
 800259a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2240      	movs	r2, #64	; 0x40
 80025a2:	4013      	ands	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a6:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	4a79      	ldr	r2, [pc, #484]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	0019      	movs	r1, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b6:	430a      	orrs	r2, r1
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4013      	ands	r3, r2
 80025c4:	d015      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c6:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	0899      	lsrs	r1, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d4:	430a      	orrs	r2, r1
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	05db      	lsls	r3, r3, #23
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025e4:	4b63      	ldr	r3, [pc, #396]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025ea:	2180      	movs	r1, #128	; 0x80
 80025ec:	0249      	lsls	r1, r1, #9
 80025ee:	430a      	orrs	r2, r1
 80025f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	031b      	lsls	r3, r3, #12
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	4393      	bics	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	039b      	lsls	r3, r3, #14
 800261a:	4013      	ands	r3, r2
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800261e:	4b55      	ldr	r3, [pc, #340]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	4a5c      	ldr	r2, [pc, #368]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800262c:	4b51      	ldr	r3, [pc, #324]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800262e:	430a      	orrs	r2, r1
 8002630:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	03db      	lsls	r3, r3, #15
 800263a:	429a      	cmp	r2, r3
 800263c:	d106      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800263e:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	0449      	lsls	r1, r1, #17
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	03db      	lsls	r3, r3, #15
 8002654:	4013      	ands	r3, r2
 8002656:	d016      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	4a4e      	ldr	r2, [pc, #312]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002668:	430a      	orrs	r2, r1
 800266a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	045b      	lsls	r3, r3, #17
 8002674:	429a      	cmp	r2, r3
 8002676:	d106      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002678:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0449      	lsls	r1, r1, #17
 8002682:	430a      	orrs	r2, r1
 8002684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4013      	ands	r3, r2
 8002690:	d014      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	2203      	movs	r2, #3
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	4b34      	ldr	r3, [pc, #208]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	0249      	lsls	r1, r1, #9
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	4013      	ands	r3, r2
 80026c6:	d014      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	220c      	movs	r2, #12
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	4b27      	ldr	r3, [pc, #156]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	0249      	lsls	r1, r1, #9
 80026ee:	430a      	orrs	r2, r1
 80026f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	045b      	lsls	r3, r3, #17
 80026fa:	4013      	ands	r3, r2
 80026fc:	d016      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026fe:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002704:	4013      	ands	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270e:	430a      	orrs	r2, r1
 8002710:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	019b      	lsls	r3, r3, #6
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0449      	lsls	r1, r1, #17
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	049b      	lsls	r3, r3, #18
 8002734:	4013      	ands	r3, r2
 8002736:	d016      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800273e:	4013      	ands	r3, r2
 8002740:	0019      	movs	r1, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002748:	430a      	orrs	r2, r1
 800274a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0449      	lsls	r1, r1, #17
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002766:	2312      	movs	r3, #18
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	781b      	ldrb	r3, [r3, #0]
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b006      	add	sp, #24
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	efffffff 	.word	0xefffffff
 800277c:	fffff3ff 	.word	0xfffff3ff
 8002780:	fffffcff 	.word	0xfffffcff
 8002784:	fff3ffff 	.word	0xfff3ffff
 8002788:	ffcfffff 	.word	0xffcfffff
 800278c:	ffffcfff 	.word	0xffffcfff
 8002790:	ffff3fff 	.word	0xffff3fff
 8002794:	ffbfffff 	.word	0xffbfffff
 8002798:	feffffff 	.word	0xfeffffff

0800279c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d100      	bne.n	80027b4 <HAL_RTC_Init+0x18>
 80027b2:	e08c      	b.n	80028ce <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2229      	movs	r2, #41	; 0x29
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2228      	movs	r2, #40	; 0x28
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2288      	movs	r2, #136	; 0x88
 80027cc:	0212      	lsls	r2, r2, #8
 80027ce:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fe fafc 	bl	8000dd0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2229      	movs	r2, #41	; 0x29
 80027dc:	2102      	movs	r1, #2
 80027de:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2210      	movs	r2, #16
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d062      	beq.n	80028b4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	22ca      	movs	r2, #202	; 0xca
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2253      	movs	r2, #83	; 0x53
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80027fe:	250f      	movs	r5, #15
 8002800:	197c      	adds	r4, r7, r5
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fb51 	bl	8002eac <RTC_EnterInitMode>
 800280a:	0003      	movs	r3, r0
 800280c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800280e:	0028      	movs	r0, r5
 8002810:	183b      	adds	r3, r7, r0
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d12c      	bne.n	8002872 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	492e      	ldr	r1, [pc, #184]	; (80028dc <HAL_RTC_Init+0x140>)
 8002824:	400a      	ands	r2, r1
 8002826:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6912      	ldr	r2, [r2, #16]
 800284e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	041a      	lsls	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002864:	183c      	adds	r4, r7, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fb61 	bl	8002f30 <RTC_ExitInitMode>
 800286e:	0003      	movs	r3, r0
 8002870:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002872:	230f      	movs	r3, #15
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d116      	bne.n	80028aa <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	00d2      	lsls	r2, r2, #3
 8002888:	08d2      	lsrs	r2, r2, #3
 800288a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6999      	ldr	r1, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
 80028b2:	e003      	b.n	80028bc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80028b4:	230f      	movs	r3, #15
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80028bc:	230f      	movs	r3, #15
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2229      	movs	r2, #41	; 0x29
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80028ce:	230f      	movs	r3, #15
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	781b      	ldrb	r3, [r3, #0]
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b004      	add	sp, #16
 80028da:	bdb0      	pop	{r4, r5, r7, pc}
 80028dc:	fb8fffbf 	.word	0xfb8fffbf

080028e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028e0:	b5b0      	push	{r4, r5, r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2228      	movs	r2, #40	; 0x28
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_RTC_SetTime+0x1a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e092      	b.n	8002a20 <HAL_RTC_SetTime+0x140>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2228      	movs	r2, #40	; 0x28
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2229      	movs	r2, #41	; 0x29
 8002906:	2102      	movs	r1, #2
 8002908:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	22ca      	movs	r2, #202	; 0xca
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2253      	movs	r2, #83	; 0x53
 8002918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800291a:	2513      	movs	r5, #19
 800291c:	197c      	adds	r4, r7, r5
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 fac3 	bl	8002eac <RTC_EnterInitMode>
 8002926:	0003      	movs	r3, r0
 8002928:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800292a:	197b      	adds	r3, r7, r5
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d162      	bne.n	80029f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d125      	bne.n	8002984 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	4013      	ands	r3, r2
 8002942:	d102      	bne.n	800294a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 fb32 	bl	8002fb8 <RTC_ByteToBcd2>
 8002954:	0003      	movs	r3, r0
 8002956:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fb2b 	bl	8002fb8 <RTC_ByteToBcd2>
 8002962:	0003      	movs	r3, r0
 8002964:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002966:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	789b      	ldrb	r3, [r3, #2]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fb23 	bl	8002fb8 <RTC_ByteToBcd2>
 8002972:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002974:	0022      	movs	r2, r4
 8002976:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	78db      	ldrb	r3, [r3, #3]
 800297c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e017      	b.n	80029b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	4013      	ands	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80029a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	78db      	ldrb	r3, [r3, #3]
 80029ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	491b      	ldr	r1, [pc, #108]	; (8002a28 <HAL_RTC_SetTime+0x148>)
 80029bc:	400a      	ands	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4918      	ldr	r1, [pc, #96]	; (8002a2c <HAL_RTC_SetTime+0x14c>)
 80029cc:	400a      	ands	r2, r1
 80029ce:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6999      	ldr	r1, [r3, #24]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029e8:	2313      	movs	r3, #19
 80029ea:	18fc      	adds	r4, r7, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 fa9e 	bl	8002f30 <RTC_ExitInitMode>
 80029f4:	0003      	movs	r3, r0
 80029f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	22ff      	movs	r2, #255	; 0xff
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002a00:	2313      	movs	r3, #19
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2229      	movs	r2, #41	; 0x29
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2228      	movs	r2, #40	; 0x28
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

  return status;
 8002a1a:	2313      	movs	r3, #19
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bdb0      	pop	{r4, r5, r7, pc}
 8002a28:	007f7f7f 	.word	0x007f7f7f
 8002a2c:	fffbffff 	.word	0xfffbffff

08002a30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2228      	movs	r2, #40	; 0x28
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_RTC_SetDate+0x1a>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e07e      	b.n	8002b48 <HAL_RTC_SetDate+0x118>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2228      	movs	r2, #40	; 0x28
 8002a4e:	2101      	movs	r1, #1
 8002a50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2229      	movs	r2, #41	; 0x29
 8002a56:	2102      	movs	r1, #2
 8002a58:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10e      	bne.n	8002a7e <HAL_RTC_SetDate+0x4e>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	785b      	ldrb	r3, [r3, #1]
 8002a64:	001a      	movs	r2, r3
 8002a66:	2310      	movs	r3, #16
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d008      	beq.n	8002a7e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	785b      	ldrb	r3, [r3, #1]
 8002a70:	2210      	movs	r2, #16
 8002a72:	4393      	bics	r3, r2
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	330a      	adds	r3, #10
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11c      	bne.n	8002abe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	78db      	ldrb	r3, [r3, #3]
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f000 fa95 	bl	8002fb8 <RTC_ByteToBcd2>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 fa8e 	bl	8002fb8 <RTC_ByteToBcd2>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002aa0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	789b      	ldrb	r3, [r3, #2]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fa86 	bl	8002fb8 <RTC_ByteToBcd2>
 8002aac:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002aae:	0022      	movs	r2, r4
 8002ab0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e00e      	b.n	8002adc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002aca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ad0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	22ca      	movs	r2, #202	; 0xca
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2253      	movs	r2, #83	; 0x53
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002aec:	2513      	movs	r5, #19
 8002aee:	197c      	adds	r4, r7, r5
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f9da 	bl	8002eac <RTC_EnterInitMode>
 8002af8:	0003      	movs	r3, r0
 8002afa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002afc:	0028      	movs	r0, r5
 8002afe:	183b      	adds	r3, r7, r0
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4910      	ldr	r1, [pc, #64]	; (8002b50 <HAL_RTC_SetDate+0x120>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b12:	183c      	adds	r4, r7, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 fa0a 	bl	8002f30 <RTC_ExitInitMode>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	22ff      	movs	r2, #255	; 0xff
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b28:	2313      	movs	r3, #19
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2229      	movs	r2, #41	; 0x29
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2228      	movs	r2, #40	; 0x28
 8002b3e:	2100      	movs	r1, #0
 8002b40:	5499      	strb	r1, [r3, r2]

  return status;
 8002b42:	2313      	movs	r3, #19
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	00ffff3f 	.word	0x00ffff3f

08002b54 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2228      	movs	r2, #40	; 0x28
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_RTC_SetAlarm_IT+0x1a>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e127      	b.n	8002dbe <HAL_RTC_SetAlarm_IT+0x26a>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2228      	movs	r2, #40	; 0x28
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2229      	movs	r2, #41	; 0x29
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d136      	bne.n	8002bf2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 fa0c 	bl	8002fb8 <RTC_ByteToBcd2>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 fa05 	bl	8002fb8 <RTC_ByteToBcd2>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002bb2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	789b      	ldrb	r3, [r3, #2]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f9fd 	bl	8002fb8 <RTC_ByteToBcd2>
 8002bbe:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	78db      	ldrb	r3, [r3, #3]
 8002bc8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	5c9b      	ldrb	r3, [r3, r2]
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f000 f9ef 	bl	8002fb8 <RTC_ByteToBcd2>
 8002bda:	0003      	movs	r3, r0
 8002bdc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002bde:	0022      	movs	r2, r4
 8002be0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002be6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e022      	b.n	8002c38 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d102      	bne.n	8002c04 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c10:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	78db      	ldrb	r3, [r3, #3]
 8002c1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002c1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2120      	movs	r1, #32
 8002c24:	5c5b      	ldrb	r3, [r3, r1]
 8002c26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002c28:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002c2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	22ca      	movs	r2, #202	; 0xca
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2253      	movs	r2, #83	; 0x53
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d14c      	bne.n	8002cfa <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4957      	ldr	r1, [pc, #348]	; (8002dc8 <HAL_RTC_SetAlarm_IT+0x274>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002c80:	f7fe fb64 	bl	800134c <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c88:	e016      	b.n	8002cb8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c8a:	f7fe fb5f 	bl	800134c <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	23fa      	movs	r3, #250	; 0xfa
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d90d      	bls.n	8002cb8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2229      	movs	r2, #41	; 0x29
 8002ca8:	2103      	movs	r1, #3
 8002caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2228      	movs	r2, #40	; 0x28
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e082      	b.n	8002dbe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d0e2      	beq.n	8002c8a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	0049      	lsls	r1, r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0149      	lsls	r1, r1, #5
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
 8002cf8:	e04b      	b.n	8002d92 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4931      	ldr	r1, [pc, #196]	; (8002dcc <HAL_RTC_SetAlarm_IT+0x278>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2102      	movs	r1, #2
 8002d16:	430a      	orrs	r2, r1
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8002d1a:	f7fe fb17 	bl	800134c <HAL_GetTick>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d22:	e016      	b.n	8002d52 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d24:	f7fe fb12 	bl	800134c <HAL_GetTick>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	23fa      	movs	r3, #250	; 0xfa
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d90d      	bls.n	8002d52 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	22ff      	movs	r2, #255	; 0xff
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2229      	movs	r2, #41	; 0x29
 8002d42:	2103      	movs	r1, #3
 8002d44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2228      	movs	r2, #40	; 0x28
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e035      	b.n	8002dbe <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d0e2      	beq.n	8002d24 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	0089      	lsls	r1, r1, #2
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	0189      	lsls	r1, r1, #6
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	58d3      	ldr	r3, [r2, r3]
 8002d98:	490d      	ldr	r1, [pc, #52]	; (8002dd0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8002d9a:	2280      	movs	r2, #128	; 0x80
 8002d9c:	0312      	lsls	r2, r2, #12
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2229      	movs	r2, #41	; 0x29
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2228      	movs	r2, #40	; 0x28
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b009      	add	sp, #36	; 0x24
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	fffffeff 	.word	0xfffffeff
 8002dcc:	fffffdff 	.word	0xfffffdff
 8002dd0:	40021800 	.word	0x40021800

08002dd4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	015b      	lsls	r3, r3, #5
 8002de6:	4013      	ands	r3, r2
 8002de8:	d011      	beq.n	8002e0e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	430a      	orrs	r2, r1
 8002e04:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f821 	bl	8002e50 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	019b      	lsls	r3, r3, #6
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d011      	beq.n	8002e40 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2102      	movs	r1, #2
 8002e34:	430a      	orrs	r2, r1
 8002e36:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f8e4 	bl	8003008 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2229      	movs	r2, #41	; 0x29
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_RTC_WaitForSynchro+0x48>)
 8002e6e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002e70:	f7fe fa6c 	bl	800134c <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e78:	e00a      	b.n	8002e90 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e7a:	f7fe fa67 	bl	800134c <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad2      	subs	r2, r2, r3
 8002e84:	23fa      	movs	r3, #250	; 0xfa
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d901      	bls.n	8002e90 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e006      	b.n	8002e9e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	0001005f 	.word	0x0001005f

08002eac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002eb4:	230f      	movs	r3, #15
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2240      	movs	r2, #64	; 0x40
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d12c      	bne.n	8002f22 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002ed8:	f7fe fa38 	bl	800134c <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ee0:	e014      	b.n	8002f0c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002ee2:	f7fe fa33 	bl	800134c <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad2      	subs	r2, r2, r3
 8002eec:	200f      	movs	r0, #15
 8002eee:	183b      	adds	r3, r7, r0
 8002ef0:	1839      	adds	r1, r7, r0
 8002ef2:	7809      	ldrb	r1, [r1, #0]
 8002ef4:	7019      	strb	r1, [r3, #0]
 8002ef6:	23fa      	movs	r3, #250	; 0xfa
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d906      	bls.n	8002f0c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	2203      	movs	r2, #3
 8002f02:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2229      	movs	r2, #41	; 0x29
 8002f08:	2103      	movs	r1, #3
 8002f0a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2240      	movs	r2, #64	; 0x40
 8002f14:	4013      	ands	r3, r2
 8002f16:	d104      	bne.n	8002f22 <RTC_EnterInitMode+0x76>
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d1df      	bne.n	8002ee2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	240f      	movs	r4, #15
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	438a      	bics	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2220      	movs	r2, #32
 8002f52:	4013      	ands	r3, r2
 8002f54:	d10d      	bne.n	8002f72 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ff81 	bl	8002e60 <HAL_RTC_WaitForSynchro>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d021      	beq.n	8002fa6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2229      	movs	r2, #41	; 0x29
 8002f66:	2103      	movs	r1, #3
 8002f68:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f6a:	193b      	adds	r3, r7, r4
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e019      	b.n	8002fa6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f78:	2120      	movs	r1, #32
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ff6d 	bl	8002e60 <HAL_RTC_WaitForSynchro>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d007      	beq.n	8002f9a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2229      	movs	r2, #41	; 0x29
 8002f8e:	2103      	movs	r1, #3
 8002f90:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002f92:	230f      	movs	r3, #15
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <RTC_ExitInitMode+0x84>)
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b005      	add	sp, #20
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	40002800 	.word	0x40002800

08002fb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002fc8:	230b      	movs	r3, #11
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	1dfa      	adds	r2, r7, #7
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002fd2:	e008      	b.n	8002fe6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002fda:	220b      	movs	r2, #11
 8002fdc:	18bb      	adds	r3, r7, r2
 8002fde:	18ba      	adds	r2, r7, r2
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	3a0a      	subs	r2, #10
 8002fe4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002fe6:	210b      	movs	r1, #11
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b09      	cmp	r3, #9
 8002fee:	d8f1      	bhi.n	8002fd4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	b2db      	uxtb	r3, r3
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b004      	add	sp, #16
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0a8      	b.n	800317c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	2382      	movs	r3, #130	; 0x82
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	429a      	cmp	r2, r3
 800303c:	d009      	beq.n	8003052 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
 8003044:	e005      	b.n	8003052 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	225d      	movs	r2, #93	; 0x5d
 800305c:	5c9b      	ldrb	r3, [r3, r2]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	225c      	movs	r2, #92	; 0x5c
 8003068:	2100      	movs	r1, #0
 800306a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0018      	movs	r0, r3
 8003070:	f7fd fef4 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	225d      	movs	r2, #93	; 0x5d
 8003078:	2102      	movs	r1, #2
 800307a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	438a      	bics	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	23e0      	movs	r3, #224	; 0xe0
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	429a      	cmp	r2, r3
 8003096:	d902      	bls.n	800309e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e002      	b.n	80030a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	015b      	lsls	r3, r3, #5
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	23f0      	movs	r3, #240	; 0xf0
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d008      	beq.n	80030c2 <HAL_SPI_Init+0xaa>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	23e0      	movs	r3, #224	; 0xe0
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d002      	beq.n	80030c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	2382      	movs	r3, #130	; 0x82
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	401a      	ands	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6899      	ldr	r1, [r3, #8]
 80030d0:	2384      	movs	r3, #132	; 0x84
 80030d2:	021b      	lsls	r3, r3, #8
 80030d4:	400b      	ands	r3, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2102      	movs	r1, #2
 80030de:	400b      	ands	r3, r1
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2101      	movs	r1, #1
 80030e8:	400b      	ands	r3, r1
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6999      	ldr	r1, [r3, #24]
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	400b      	ands	r3, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2138      	movs	r1, #56	; 0x38
 80030fe:	400b      	ands	r3, r1
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	400b      	ands	r3, r1
 800310a:	431a      	orrs	r2, r3
 800310c:	0011      	movs	r1, r2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	019b      	lsls	r3, r3, #6
 8003116:	401a      	ands	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	2204      	movs	r2, #4
 8003128:	401a      	ands	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2110      	movs	r1, #16
 8003130:	400b      	ands	r3, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	2108      	movs	r1, #8
 800313a:	400b      	ands	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	23f0      	movs	r3, #240	; 0xf0
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	400b      	ands	r3, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	0011      	movs	r1, r2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69da      	ldr	r2, [r3, #28]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4907      	ldr	r1, [pc, #28]	; (8003184 <HAL_SPI_Init+0x16c>)
 8003168:	400a      	ands	r2, r1
 800316a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	225d      	movs	r2, #93	; 0x5d
 8003176:	2101      	movs	r1, #1
 8003178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b004      	add	sp, #16
 8003182:	bd80      	pop	{r7, pc}
 8003184:	fffff7ff 	.word	0xfffff7ff

08003188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04a      	b.n	8003230 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	223d      	movs	r2, #61	; 0x3d
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	223c      	movs	r2, #60	; 0x3c
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fd fe9d 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	223d      	movs	r2, #61	; 0x3d
 80031ba:	2102      	movs	r1, #2
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	0019      	movs	r1, r3
 80031c8:	0010      	movs	r0, r2
 80031ca:	f000 f965 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2248      	movs	r2, #72	; 0x48
 80031d2:	2101      	movs	r1, #1
 80031d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	223e      	movs	r2, #62	; 0x3e
 80031da:	2101      	movs	r1, #1
 80031dc:	5499      	strb	r1, [r3, r2]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	2101      	movs	r1, #1
 80031e4:	5499      	strb	r1, [r3, r2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	2101      	movs	r1, #1
 80031ec:	5499      	strb	r1, [r3, r2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2241      	movs	r2, #65	; 0x41
 80031f2:	2101      	movs	r1, #1
 80031f4:	5499      	strb	r1, [r3, r2]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2242      	movs	r2, #66	; 0x42
 80031fa:	2101      	movs	r1, #1
 80031fc:	5499      	strb	r1, [r3, r2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2243      	movs	r2, #67	; 0x43
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2244      	movs	r2, #68	; 0x44
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2245      	movs	r2, #69	; 0x45
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2246      	movs	r2, #70	; 0x46
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2247      	movs	r2, #71	; 0x47
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	223d      	movs	r2, #61	; 0x3d
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d021      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d01d      	beq.n	800329c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2203      	movs	r2, #3
 8003266:	4252      	negs	r2, r2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2203      	movs	r2, #3
 8003278:	4013      	ands	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f000 f8f2 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 8003284:	e007      	b.n	8003296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 f8e5 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 f8f1 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2204      	movs	r2, #4
 80032a0:	4013      	ands	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2204      	movs	r2, #4
 80032a8:	4013      	ands	r3, r2
 80032aa:	d01e      	beq.n	80032ea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2205      	movs	r2, #5
 80032b2:	4252      	negs	r2, r2
 80032b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d004      	beq.n	80032d4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f8cb 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 80032d2:	e007      	b.n	80032e4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 f8be 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 f8ca 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4013      	ands	r3, r2
 80032f0:	d021      	beq.n	8003336 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2208      	movs	r2, #8
 80032f6:	4013      	ands	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2209      	movs	r2, #9
 8003300:	4252      	negs	r2, r2
 8003302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2204      	movs	r2, #4
 8003308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	2203      	movs	r2, #3
 8003312:	4013      	ands	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f8a5 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 800331e:	e007      	b.n	8003330 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0018      	movs	r0, r3
 8003324:	f000 f898 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f8a4 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2210      	movs	r2, #16
 800333a:	4013      	ands	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2210      	movs	r2, #16
 8003342:	4013      	ands	r3, r2
 8003344:	d01e      	beq.n	8003384 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2211      	movs	r2, #17
 800334c:	4252      	negs	r2, r2
 800334e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2208      	movs	r2, #8
 8003354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	23c0      	movs	r3, #192	; 0xc0
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f87e 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 800336c:	e007      	b.n	800337e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0018      	movs	r0, r3
 8003372:	f000 f871 	bl	8003458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f87d 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2201      	movs	r2, #1
 8003388:	4013      	ands	r3, r2
 800338a:	d00c      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	d008      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2202      	movs	r2, #2
 800339a:	4252      	negs	r2, r2
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f000 f851 	bl	8003448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	4013      	ands	r3, r2
 80033ac:	d104      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	019b      	lsls	r3, r3, #6
 80033b4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033b6:	d00b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	4013      	ands	r3, r2
 80033be:	d007      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_TIM_IRQHandler+0x208>)
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f97a 	bl	80036c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	4013      	ands	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_TIM_IRQHandler+0x20c>)
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 f971 	bl	80036d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	4013      	ands	r3, r2
 80033f8:	d00c      	beq.n	8003414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	4013      	ands	r3, r2
 8003400:	d008      	beq.n	8003414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2241      	movs	r2, #65	; 0x41
 8003408:	4252      	negs	r2, r2
 800340a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f83a 	bl	8003488 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2220      	movs	r2, #32
 8003418:	4013      	ands	r3, r2
 800341a:	d00c      	beq.n	8003436 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	4013      	ands	r3, r2
 8003422:	d008      	beq.n	8003436 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2221      	movs	r2, #33	; 0x21
 800342a:	4252      	negs	r2, r2
 800342c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f93f 	bl	80036b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	ffffdf7f 	.word	0xffffdf7f
 8003444:	fffffeff 	.word	0xfffffeff

08003448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b002      	add	sp, #8
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <TIM_Base_SetConfig+0x110>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00c      	beq.n	80034ca <TIM_Base_SetConfig+0x32>
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	05db      	lsls	r3, r3, #23
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0x32>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <TIM_Base_SetConfig+0x114>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0x32>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <TIM_Base_SetConfig+0x118>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2270      	movs	r2, #112	; 0x70
 80034ce:	4393      	bics	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <TIM_Base_SetConfig+0x110>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d01c      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	05db      	lsls	r3, r3, #23
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d017      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <TIM_Base_SetConfig+0x114>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2d      	ldr	r2, [pc, #180]	; (80035b0 <TIM_Base_SetConfig+0x118>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00f      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <TIM_Base_SetConfig+0x11c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <TIM_Base_SetConfig+0x120>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <TIM_Base_SetConfig+0x124>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0x86>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a29      	ldr	r2, [pc, #164]	; (80035c0 <TIM_Base_SetConfig+0x128>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a28      	ldr	r2, [pc, #160]	; (80035c4 <TIM_Base_SetConfig+0x12c>)
 8003522:	4013      	ands	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	4393      	bics	r3, r2
 8003536:	001a      	movs	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <TIM_Base_SetConfig+0x110>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_Base_SetConfig+0xde>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <TIM_Base_SetConfig+0x120>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_Base_SetConfig+0xde>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <TIM_Base_SetConfig+0x124>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_Base_SetConfig+0xde>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <TIM_Base_SetConfig+0x128>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d103      	bne.n	800357e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	2b01      	cmp	r3, #1
 800358e:	d106      	bne.n	800359e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2201      	movs	r2, #1
 8003596:	4393      	bics	r3, r2
 8003598:	001a      	movs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	611a      	str	r2, [r3, #16]
  }
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b004      	add	sp, #16
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40002000 	.word	0x40002000
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800
 80035c4:	fffffcff 	.word	0xfffffcff

080035c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	223c      	movs	r2, #60	; 0x3c
 80035d6:	5c9b      	ldrb	r3, [r3, r2]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035dc:	2302      	movs	r3, #2
 80035de:	e05a      	b.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	223c      	movs	r2, #60	; 0x3c
 80035e4:	2101      	movs	r1, #1
 80035e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	223d      	movs	r2, #61	; 0x3d
 80035ec:	2102      	movs	r1, #2
 80035ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a25      	ldr	r2, [pc, #148]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800360e:	4013      	ands	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2270      	movs	r2, #112	; 0x70
 8003620:	4393      	bics	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d014      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	429a      	cmp	r2, r3
 800364a:	d00e      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10c      	bne.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	4393      	bics	r3, r2
 8003670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	223d      	movs	r2, #61	; 0x3d
 8003688:	2101      	movs	r1, #1
 800368a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	223c      	movs	r2, #60	; 0x3c
 8003690:	2100      	movs	r1, #0
 8003692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	0018      	movs	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	40012c00 	.word	0x40012c00
 80036a4:	ff0fffff 	.word	0xff0fffff
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40014000 	.word	0x40014000

080036b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e046      	b.n	8003784 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2288      	movs	r2, #136	; 0x88
 80036fa:	589b      	ldr	r3, [r3, r2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2284      	movs	r2, #132	; 0x84
 8003704:	2100      	movs	r1, #0
 8003706:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f7fd fc16 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2288      	movs	r2, #136	; 0x88
 8003714:	2124      	movs	r1, #36	; 0x24
 8003716:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	438a      	bics	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0018      	movs	r0, r3
 8003734:	f000 fc26 	bl	8003f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f8cc 	bl	80038d8 <UART_SetConfig>
 8003740:	0003      	movs	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e01c      	b.n	8003784 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	490d      	ldr	r1, [pc, #52]	; (800378c <HAL_UART_Init+0xa8>)
 8003756:	400a      	ands	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	212a      	movs	r1, #42	; 0x2a
 8003766:	438a      	bics	r2, r1
 8003768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f000 fcb5 	bl	80040ec <UART_CheckIdleState>
 8003782:	0003      	movs	r3, r0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}
 800378c:	ffffb7ff 	.word	0xffffb7ff

08003790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2288      	movs	r2, #136	; 0x88
 80037a4:	589b      	ldr	r3, [r3, r2]
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d000      	beq.n	80037ac <HAL_UART_Transmit+0x1c>
 80037aa:	e090      	b.n	80038ce <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_UART_Transmit+0x2a>
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e088      	b.n	80038d0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	015b      	lsls	r3, r3, #5
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d109      	bne.n	80037de <HAL_UART_Transmit+0x4e>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	d001      	beq.n	80037de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e078      	b.n	80038d0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2290      	movs	r2, #144	; 0x90
 80037e2:	2100      	movs	r1, #0
 80037e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2288      	movs	r2, #136	; 0x88
 80037ea:	2121      	movs	r1, #33	; 0x21
 80037ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ee:	f7fd fdad 	bl	800134c <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1dba      	adds	r2, r7, #6
 80037fa:	2154      	movs	r1, #84	; 0x54
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1dba      	adds	r2, r7, #6
 8003804:	2156      	movs	r1, #86	; 0x56
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	429a      	cmp	r2, r3
 8003814:	d108      	bne.n	8003828 <HAL_UART_Transmit+0x98>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003830:	e030      	b.n	8003894 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	0013      	movs	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	f000 fcfe 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d005      	beq.n	8003854 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2288      	movs	r2, #136	; 0x88
 800384c:	2120      	movs	r1, #32
 800384e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e03d      	b.n	80038d0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	05d2      	lsls	r2, r2, #23
 8003866:	0dd2      	lsrs	r2, r2, #23
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	3302      	adds	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e007      	b.n	8003882 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2256      	movs	r2, #86	; 0x56
 8003886:	5a9b      	ldrh	r3, [r3, r2]
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b299      	uxth	r1, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2256      	movs	r2, #86	; 0x56
 8003892:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2256      	movs	r2, #86	; 0x56
 8003898:	5a9b      	ldrh	r3, [r3, r2]
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1c8      	bne.n	8003832 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	0013      	movs	r3, r2
 80038aa:	2200      	movs	r2, #0
 80038ac:	2140      	movs	r1, #64	; 0x40
 80038ae:	f000 fcc7 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2288      	movs	r2, #136	; 0x88
 80038ba:	2120      	movs	r1, #32
 80038bc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e006      	b.n	80038d0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2288      	movs	r2, #136	; 0x88
 80038c6:	2120      	movs	r1, #32
 80038c8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b008      	add	sp, #32
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b090      	sub	sp, #64	; 0x40
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e0:	231a      	movs	r3, #26
 80038e2:	2220      	movs	r2, #32
 80038e4:	189b      	adds	r3, r3, r2
 80038e6:	19db      	adds	r3, r3, r7
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4313      	orrs	r3, r2
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4ac1      	ldr	r2, [pc, #772]	; (8003c10 <UART_SetConfig+0x338>)
 800390c:	4013      	ands	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	430b      	orrs	r3, r1
 8003918:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4abc      	ldr	r2, [pc, #752]	; (8003c14 <UART_SetConfig+0x33c>)
 8003922:	4013      	ands	r3, r2
 8003924:	0018      	movs	r0, r3
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	0003      	movs	r3, r0
 8003930:	430b      	orrs	r3, r1
 8003932:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4ab6      	ldr	r2, [pc, #728]	; (8003c18 <UART_SetConfig+0x340>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d009      	beq.n	8003958 <UART_SetConfig+0x80>
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4ab4      	ldr	r2, [pc, #720]	; (8003c1c <UART_SetConfig+0x344>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d004      	beq.n	8003958 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003954:	4313      	orrs	r3, r2
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4ab0      	ldr	r2, [pc, #704]	; (8003c20 <UART_SetConfig+0x348>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396a:	430b      	orrs	r3, r1
 800396c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	220f      	movs	r2, #15
 8003976:	4393      	bics	r3, r2
 8003978:	0018      	movs	r0, r3
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	0003      	movs	r3, r0
 8003984:	430b      	orrs	r3, r1
 8003986:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4aa5      	ldr	r2, [pc, #660]	; (8003c24 <UART_SetConfig+0x34c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d131      	bne.n	80039f6 <UART_SetConfig+0x11e>
 8003992:	4ba5      	ldr	r3, [pc, #660]	; (8003c28 <UART_SetConfig+0x350>)
 8003994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003996:	2203      	movs	r2, #3
 8003998:	4013      	ands	r3, r2
 800399a:	2b03      	cmp	r3, #3
 800399c:	d01d      	beq.n	80039da <UART_SetConfig+0x102>
 800399e:	d823      	bhi.n	80039e8 <UART_SetConfig+0x110>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d00c      	beq.n	80039be <UART_SetConfig+0xe6>
 80039a4:	d820      	bhi.n	80039e8 <UART_SetConfig+0x110>
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <UART_SetConfig+0xd8>
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d00e      	beq.n	80039cc <UART_SetConfig+0xf4>
 80039ae:	e01b      	b.n	80039e8 <UART_SetConfig+0x110>
 80039b0:	231b      	movs	r3, #27
 80039b2:	2220      	movs	r2, #32
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e154      	b.n	8003c68 <UART_SetConfig+0x390>
 80039be:	231b      	movs	r3, #27
 80039c0:	2220      	movs	r2, #32
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e14d      	b.n	8003c68 <UART_SetConfig+0x390>
 80039cc:	231b      	movs	r3, #27
 80039ce:	2220      	movs	r2, #32
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	2204      	movs	r2, #4
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e146      	b.n	8003c68 <UART_SetConfig+0x390>
 80039da:	231b      	movs	r3, #27
 80039dc:	2220      	movs	r2, #32
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	19db      	adds	r3, r3, r7
 80039e2:	2208      	movs	r2, #8
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e13f      	b.n	8003c68 <UART_SetConfig+0x390>
 80039e8:	231b      	movs	r3, #27
 80039ea:	2220      	movs	r2, #32
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	19db      	adds	r3, r3, r7
 80039f0:	2210      	movs	r2, #16
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e138      	b.n	8003c68 <UART_SetConfig+0x390>
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a8c      	ldr	r2, [pc, #560]	; (8003c2c <UART_SetConfig+0x354>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d131      	bne.n	8003a64 <UART_SetConfig+0x18c>
 8003a00:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <UART_SetConfig+0x350>)
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	220c      	movs	r2, #12
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d01d      	beq.n	8003a48 <UART_SetConfig+0x170>
 8003a0c:	d823      	bhi.n	8003a56 <UART_SetConfig+0x17e>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d00c      	beq.n	8003a2c <UART_SetConfig+0x154>
 8003a12:	d820      	bhi.n	8003a56 <UART_SetConfig+0x17e>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <UART_SetConfig+0x146>
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d00e      	beq.n	8003a3a <UART_SetConfig+0x162>
 8003a1c:	e01b      	b.n	8003a56 <UART_SetConfig+0x17e>
 8003a1e:	231b      	movs	r3, #27
 8003a20:	2220      	movs	r2, #32
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	19db      	adds	r3, r3, r7
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e11d      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a2c:	231b      	movs	r3, #27
 8003a2e:	2220      	movs	r2, #32
 8003a30:	189b      	adds	r3, r3, r2
 8003a32:	19db      	adds	r3, r3, r7
 8003a34:	2202      	movs	r2, #2
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e116      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a3a:	231b      	movs	r3, #27
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	189b      	adds	r3, r3, r2
 8003a40:	19db      	adds	r3, r3, r7
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e10f      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a48:	231b      	movs	r3, #27
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	19db      	adds	r3, r3, r7
 8003a50:	2208      	movs	r2, #8
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e108      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a56:	231b      	movs	r3, #27
 8003a58:	2220      	movs	r2, #32
 8003a5a:	189b      	adds	r3, r3, r2
 8003a5c:	19db      	adds	r3, r3, r7
 8003a5e:	2210      	movs	r2, #16
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e101      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a71      	ldr	r2, [pc, #452]	; (8003c30 <UART_SetConfig+0x358>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d131      	bne.n	8003ad2 <UART_SetConfig+0x1fa>
 8003a6e:	4b6e      	ldr	r3, [pc, #440]	; (8003c28 <UART_SetConfig+0x350>)
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	2230      	movs	r2, #48	; 0x30
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b30      	cmp	r3, #48	; 0x30
 8003a78:	d01d      	beq.n	8003ab6 <UART_SetConfig+0x1de>
 8003a7a:	d823      	bhi.n	8003ac4 <UART_SetConfig+0x1ec>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d00c      	beq.n	8003a9a <UART_SetConfig+0x1c2>
 8003a80:	d820      	bhi.n	8003ac4 <UART_SetConfig+0x1ec>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <UART_SetConfig+0x1b4>
 8003a86:	2b10      	cmp	r3, #16
 8003a88:	d00e      	beq.n	8003aa8 <UART_SetConfig+0x1d0>
 8003a8a:	e01b      	b.n	8003ac4 <UART_SetConfig+0x1ec>
 8003a8c:	231b      	movs	r3, #27
 8003a8e:	2220      	movs	r2, #32
 8003a90:	189b      	adds	r3, r3, r2
 8003a92:	19db      	adds	r3, r3, r7
 8003a94:	2200      	movs	r2, #0
 8003a96:	701a      	strb	r2, [r3, #0]
 8003a98:	e0e6      	b.n	8003c68 <UART_SetConfig+0x390>
 8003a9a:	231b      	movs	r3, #27
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	19db      	adds	r3, r3, r7
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e0df      	b.n	8003c68 <UART_SetConfig+0x390>
 8003aa8:	231b      	movs	r3, #27
 8003aaa:	2220      	movs	r2, #32
 8003aac:	189b      	adds	r3, r3, r2
 8003aae:	19db      	adds	r3, r3, r7
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e0d8      	b.n	8003c68 <UART_SetConfig+0x390>
 8003ab6:	231b      	movs	r3, #27
 8003ab8:	2220      	movs	r2, #32
 8003aba:	189b      	adds	r3, r3, r2
 8003abc:	19db      	adds	r3, r3, r7
 8003abe:	2208      	movs	r2, #8
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e0d1      	b.n	8003c68 <UART_SetConfig+0x390>
 8003ac4:	231b      	movs	r3, #27
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	189b      	adds	r3, r3, r2
 8003aca:	19db      	adds	r3, r3, r7
 8003acc:	2210      	movs	r2, #16
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e0ca      	b.n	8003c68 <UART_SetConfig+0x390>
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a57      	ldr	r2, [pc, #348]	; (8003c34 <UART_SetConfig+0x35c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d106      	bne.n	8003aea <UART_SetConfig+0x212>
 8003adc:	231b      	movs	r3, #27
 8003ade:	2220      	movs	r2, #32
 8003ae0:	189b      	adds	r3, r3, r2
 8003ae2:	19db      	adds	r3, r3, r7
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
 8003ae8:	e0be      	b.n	8003c68 <UART_SetConfig+0x390>
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a52      	ldr	r2, [pc, #328]	; (8003c38 <UART_SetConfig+0x360>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d106      	bne.n	8003b02 <UART_SetConfig+0x22a>
 8003af4:	231b      	movs	r3, #27
 8003af6:	2220      	movs	r2, #32
 8003af8:	189b      	adds	r3, r3, r2
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e0b2      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a4d      	ldr	r2, [pc, #308]	; (8003c3c <UART_SetConfig+0x364>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d106      	bne.n	8003b1a <UART_SetConfig+0x242>
 8003b0c:	231b      	movs	r3, #27
 8003b0e:	2220      	movs	r2, #32
 8003b10:	189b      	adds	r3, r3, r2
 8003b12:	19db      	adds	r3, r3, r7
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e0a6      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3e      	ldr	r2, [pc, #248]	; (8003c18 <UART_SetConfig+0x340>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d13e      	bne.n	8003ba2 <UART_SetConfig+0x2ca>
 8003b24:	4b40      	ldr	r3, [pc, #256]	; (8003c28 <UART_SetConfig+0x350>)
 8003b26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b28:	23c0      	movs	r3, #192	; 0xc0
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	22c0      	movs	r2, #192	; 0xc0
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d027      	beq.n	8003b86 <UART_SetConfig+0x2ae>
 8003b36:	22c0      	movs	r2, #192	; 0xc0
 8003b38:	0112      	lsls	r2, r2, #4
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d82a      	bhi.n	8003b94 <UART_SetConfig+0x2bc>
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d011      	beq.n	8003b6a <UART_SetConfig+0x292>
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	0112      	lsls	r2, r2, #4
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d822      	bhi.n	8003b94 <UART_SetConfig+0x2bc>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <UART_SetConfig+0x284>
 8003b52:	2280      	movs	r2, #128	; 0x80
 8003b54:	00d2      	lsls	r2, r2, #3
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <UART_SetConfig+0x2a0>
 8003b5a:	e01b      	b.n	8003b94 <UART_SetConfig+0x2bc>
 8003b5c:	231b      	movs	r3, #27
 8003b5e:	2220      	movs	r2, #32
 8003b60:	189b      	adds	r3, r3, r2
 8003b62:	19db      	adds	r3, r3, r7
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e07e      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b6a:	231b      	movs	r3, #27
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	2202      	movs	r2, #2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e077      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b78:	231b      	movs	r3, #27
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	2204      	movs	r2, #4
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e070      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b86:	231b      	movs	r3, #27
 8003b88:	2220      	movs	r2, #32
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	2208      	movs	r2, #8
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e069      	b.n	8003c68 <UART_SetConfig+0x390>
 8003b94:	231b      	movs	r3, #27
 8003b96:	2220      	movs	r2, #32
 8003b98:	189b      	adds	r3, r3, r2
 8003b9a:	19db      	adds	r3, r3, r7
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e062      	b.n	8003c68 <UART_SetConfig+0x390>
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <UART_SetConfig+0x344>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d157      	bne.n	8003c5c <UART_SetConfig+0x384>
 8003bac:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <UART_SetConfig+0x350>)
 8003bae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb0:	23c0      	movs	r3, #192	; 0xc0
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	22c0      	movs	r2, #192	; 0xc0
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <UART_SetConfig+0x368>
 8003bbe:	22c0      	movs	r2, #192	; 0xc0
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d843      	bhi.n	8003c4e <UART_SetConfig+0x376>
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d011      	beq.n	8003bf2 <UART_SetConfig+0x31a>
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d83b      	bhi.n	8003c4e <UART_SetConfig+0x376>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x30c>
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	0052      	lsls	r2, r2, #1
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <UART_SetConfig+0x328>
 8003be2:	e034      	b.n	8003c4e <UART_SetConfig+0x376>
 8003be4:	231b      	movs	r3, #27
 8003be6:	2220      	movs	r2, #32
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	19db      	adds	r3, r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
 8003bf0:	e03a      	b.n	8003c68 <UART_SetConfig+0x390>
 8003bf2:	231b      	movs	r3, #27
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	189b      	adds	r3, r3, r2
 8003bf8:	19db      	adds	r3, r3, r7
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e033      	b.n	8003c68 <UART_SetConfig+0x390>
 8003c00:	231b      	movs	r3, #27
 8003c02:	2220      	movs	r2, #32
 8003c04:	189b      	adds	r3, r3, r2
 8003c06:	19db      	adds	r3, r3, r7
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e02c      	b.n	8003c68 <UART_SetConfig+0x390>
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	cfff69f3 	.word	0xcfff69f3
 8003c14:	ffffcfff 	.word	0xffffcfff
 8003c18:	40008000 	.word	0x40008000
 8003c1c:	40008400 	.word	0x40008400
 8003c20:	11fff4ff 	.word	0x11fff4ff
 8003c24:	40013800 	.word	0x40013800
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40004800 	.word	0x40004800
 8003c34:	40004c00 	.word	0x40004c00
 8003c38:	40005000 	.word	0x40005000
 8003c3c:	40013c00 	.word	0x40013c00
 8003c40:	231b      	movs	r3, #27
 8003c42:	2220      	movs	r2, #32
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	2208      	movs	r2, #8
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	e00c      	b.n	8003c68 <UART_SetConfig+0x390>
 8003c4e:	231b      	movs	r3, #27
 8003c50:	2220      	movs	r2, #32
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	19db      	adds	r3, r3, r7
 8003c56:	2210      	movs	r2, #16
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e005      	b.n	8003c68 <UART_SetConfig+0x390>
 8003c5c:	231b      	movs	r3, #27
 8003c5e:	2220      	movs	r2, #32
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	2210      	movs	r2, #16
 8003c66:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4ac1      	ldr	r2, [pc, #772]	; (8003f74 <UART_SetConfig+0x69c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d005      	beq.n	8003c7e <UART_SetConfig+0x3a6>
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4ac0      	ldr	r2, [pc, #768]	; (8003f78 <UART_SetConfig+0x6a0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d000      	beq.n	8003c7e <UART_SetConfig+0x3a6>
 8003c7c:	e093      	b.n	8003da6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c7e:	231b      	movs	r3, #27
 8003c80:	2220      	movs	r2, #32
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	19db      	adds	r3, r3, r7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d015      	beq.n	8003cb8 <UART_SetConfig+0x3e0>
 8003c8c:	dc18      	bgt.n	8003cc0 <UART_SetConfig+0x3e8>
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d00d      	beq.n	8003cae <UART_SetConfig+0x3d6>
 8003c92:	dc15      	bgt.n	8003cc0 <UART_SetConfig+0x3e8>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <UART_SetConfig+0x3c6>
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d005      	beq.n	8003ca8 <UART_SetConfig+0x3d0>
 8003c9c:	e010      	b.n	8003cc0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7fe fb2b 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ca6:	e014      	b.n	8003cd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4bb4      	ldr	r3, [pc, #720]	; (8003f7c <UART_SetConfig+0x6a4>)
 8003caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cac:	e011      	b.n	8003cd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7fe fa97 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cb6:	e00c      	b.n	8003cd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb8:	2380      	movs	r3, #128	; 0x80
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003cbe:	e008      	b.n	8003cd2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003cc4:	231a      	movs	r3, #26
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	189b      	adds	r3, r3, r2
 8003cca:	19db      	adds	r3, r3, r7
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
        break;
 8003cd0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d100      	bne.n	8003cda <UART_SetConfig+0x402>
 8003cd8:	e135      	b.n	8003f46 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cde:	4ba8      	ldr	r3, [pc, #672]	; (8003f80 <UART_SetConfig+0x6a8>)
 8003ce0:	0052      	lsls	r2, r2, #1
 8003ce2:	5ad3      	ldrh	r3, [r2, r3]
 8003ce4:	0019      	movs	r1, r3
 8003ce6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ce8:	f7fc fa14 	bl	8000114 <__udivsi3>
 8003cec:	0003      	movs	r3, r0
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d305      	bcc.n	8003d0c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d906      	bls.n	8003d1a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003d0c:	231a      	movs	r3, #26
 8003d0e:	2220      	movs	r2, #32
 8003d10:	189b      	adds	r3, r3, r2
 8003d12:	19db      	adds	r3, r3, r7
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
 8003d18:	e044      	b.n	8003da4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	4b96      	ldr	r3, [pc, #600]	; (8003f80 <UART_SetConfig+0x6a8>)
 8003d28:	0052      	lsls	r2, r2, #1
 8003d2a:	5ad3      	ldrh	r3, [r2, r3]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	69b8      	ldr	r0, [r7, #24]
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	f7fc fb61 	bl	8000400 <__aeabi_uldivmod>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	000b      	movs	r3, r1
 8003d42:	0e11      	lsrs	r1, r2, #24
 8003d44:	021d      	lsls	r5, r3, #8
 8003d46:	430d      	orrs	r5, r1
 8003d48:	0214      	lsls	r4, r2, #8
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	1900      	adds	r0, r0, r4
 8003d5c:	4169      	adcs	r1, r5
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	2300      	movs	r3, #0
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f7fc fb48 	bl	8000400 <__aeabi_uldivmod>
 8003d70:	0002      	movs	r2, r0
 8003d72:	000b      	movs	r3, r1
 8003d74:	0013      	movs	r3, r2
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	23c0      	movs	r3, #192	; 0xc0
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d309      	bcc.n	8003d96 <UART_SetConfig+0x4be>
 8003d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	035b      	lsls	r3, r3, #13
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d204      	bcs.n	8003d96 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	e006      	b.n	8003da4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003d96:	231a      	movs	r3, #26
 8003d98:	2220      	movs	r2, #32
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	19db      	adds	r3, r3, r7
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003da2:	e0d0      	b.n	8003f46 <UART_SetConfig+0x66e>
 8003da4:	e0cf      	b.n	8003f46 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d000      	beq.n	8003db4 <UART_SetConfig+0x4dc>
 8003db2:	e070      	b.n	8003e96 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003db4:	231b      	movs	r3, #27
 8003db6:	2220      	movs	r2, #32
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d015      	beq.n	8003dee <UART_SetConfig+0x516>
 8003dc2:	dc18      	bgt.n	8003df6 <UART_SetConfig+0x51e>
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d00d      	beq.n	8003de4 <UART_SetConfig+0x50c>
 8003dc8:	dc15      	bgt.n	8003df6 <UART_SetConfig+0x51e>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <UART_SetConfig+0x4fc>
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d005      	beq.n	8003dde <UART_SetConfig+0x506>
 8003dd2:	e010      	b.n	8003df6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7fe fa90 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ddc:	e014      	b.n	8003e08 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dde:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <UART_SetConfig+0x6a4>)
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003de2:	e011      	b.n	8003e08 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de4:	f7fe f9fc 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003de8:	0003      	movs	r3, r0
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dec:	e00c      	b.n	8003e08 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003df4:	e008      	b.n	8003e08 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003dfa:	231a      	movs	r3, #26
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	19db      	adds	r3, r3, r7
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
        break;
 8003e06:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <UART_SetConfig+0x538>
 8003e0e:	e09a      	b.n	8003f46 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <UART_SetConfig+0x6a8>)
 8003e16:	0052      	lsls	r2, r2, #1
 8003e18:	5ad3      	ldrh	r3, [r2, r3]
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e1e:	f7fc f979 	bl	8000114 <__udivsi3>
 8003e22:	0003      	movs	r3, r0
 8003e24:	005a      	lsls	r2, r3, #1
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	18d2      	adds	r2, r2, r3
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0019      	movs	r1, r3
 8003e34:	0010      	movs	r0, r2
 8003e36:	f7fc f96d 	bl	8000114 <__udivsi3>
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d921      	bls.n	8003e88 <UART_SetConfig+0x5b0>
 8003e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	025b      	lsls	r3, r3, #9
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d21c      	bcs.n	8003e88 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	200e      	movs	r0, #14
 8003e54:	2420      	movs	r4, #32
 8003e56:	1903      	adds	r3, r0, r4
 8003e58:	19db      	adds	r3, r3, r7
 8003e5a:	210f      	movs	r1, #15
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2207      	movs	r2, #7
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b299      	uxth	r1, r3
 8003e6c:	1903      	adds	r3, r0, r4
 8003e6e:	19db      	adds	r3, r3, r7
 8003e70:	1902      	adds	r2, r0, r4
 8003e72:	19d2      	adds	r2, r2, r7
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	1902      	adds	r2, r0, r4
 8003e80:	19d2      	adds	r2, r2, r7
 8003e82:	8812      	ldrh	r2, [r2, #0]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e05e      	b.n	8003f46 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	231a      	movs	r3, #26
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e057      	b.n	8003f46 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e96:	231b      	movs	r3, #27
 8003e98:	2220      	movs	r2, #32
 8003e9a:	189b      	adds	r3, r3, r2
 8003e9c:	19db      	adds	r3, r3, r7
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d015      	beq.n	8003ed0 <UART_SetConfig+0x5f8>
 8003ea4:	dc18      	bgt.n	8003ed8 <UART_SetConfig+0x600>
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d00d      	beq.n	8003ec6 <UART_SetConfig+0x5ee>
 8003eaa:	dc15      	bgt.n	8003ed8 <UART_SetConfig+0x600>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <UART_SetConfig+0x5de>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d005      	beq.n	8003ec0 <UART_SetConfig+0x5e8>
 8003eb4:	e010      	b.n	8003ed8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb6:	f7fe fa1f 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ebe:	e014      	b.n	8003eea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <UART_SetConfig+0x6a4>)
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ec4:	e011      	b.n	8003eea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe f98b 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ece:	e00c      	b.n	8003eea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ed6:	e008      	b.n	8003eea <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003edc:	231a      	movs	r3, #26
 8003ede:	2220      	movs	r2, #32
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
        break;
 8003ee8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02a      	beq.n	8003f46 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <UART_SetConfig+0x6a8>)
 8003ef6:	0052      	lsls	r2, r2, #1
 8003ef8:	5ad3      	ldrh	r3, [r2, r3]
 8003efa:	0019      	movs	r1, r3
 8003efc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003efe:	f7fc f909 	bl	8000114 <__udivsi3>
 8003f02:	0003      	movs	r3, r0
 8003f04:	001a      	movs	r2, r3
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	18d2      	adds	r2, r2, r3
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0019      	movs	r1, r3
 8003f14:	0010      	movs	r0, r2
 8003f16:	f7fc f8fd 	bl	8000114 <__udivsi3>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	d90a      	bls.n	8003f3a <UART_SetConfig+0x662>
 8003f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	025b      	lsls	r3, r3, #9
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d205      	bcs.n	8003f3a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003f3a:	231a      	movs	r3, #26
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	189b      	adds	r3, r3, r2
 8003f40:	19db      	adds	r3, r3, r7
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	226a      	movs	r2, #106	; 0x6a
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	2268      	movs	r2, #104	; 0x68
 8003f52:	2101      	movs	r1, #1
 8003f54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	2200      	movs	r2, #0
 8003f5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2200      	movs	r2, #0
 8003f60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003f62:	231a      	movs	r3, #26
 8003f64:	2220      	movs	r2, #32
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	19db      	adds	r3, r3, r7
 8003f6a:	781b      	ldrb	r3, [r3, #0]
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b010      	add	sp, #64	; 0x40
 8003f72:	bdb0      	pop	{r4, r5, r7, pc}
 8003f74:	40008000 	.word	0x40008000
 8003f78:	40008400 	.word	0x40008400
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	080047ec 	.word	0x080047ec

08003f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	2208      	movs	r2, #8
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00b      	beq.n	8003fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <UART_AdvFeatureConfig+0x144>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	0019      	movs	r1, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4a43      	ldr	r2, [pc, #268]	; (80040cc <UART_AdvFeatureConfig+0x148>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	; (80040d0 <UART_AdvFeatureConfig+0x14c>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <UART_AdvFeatureConfig+0x150>)
 8004004:	4013      	ands	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	2210      	movs	r2, #16
 800401a:	4013      	ands	r3, r2
 800401c:	d00b      	beq.n	8004036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <UART_AdvFeatureConfig+0x154>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	2220      	movs	r2, #32
 800403c:	4013      	ands	r3, r2
 800403e:	d00b      	beq.n	8004058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a25      	ldr	r2, [pc, #148]	; (80040dc <UART_AdvFeatureConfig+0x158>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	2240      	movs	r2, #64	; 0x40
 800405e:	4013      	ands	r3, r2
 8004060:	d01d      	beq.n	800409e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <UART_AdvFeatureConfig+0x15c>)
 800406a:	4013      	ands	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	035b      	lsls	r3, r3, #13
 8004082:	429a      	cmp	r2, r3
 8004084:	d10b      	bne.n	800409e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <UART_AdvFeatureConfig+0x160>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	4013      	ands	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <UART_AdvFeatureConfig+0x164>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	ffff7fff 	.word	0xffff7fff
 80040cc:	fffdffff 	.word	0xfffdffff
 80040d0:	fffeffff 	.word	0xfffeffff
 80040d4:	fffbffff 	.word	0xfffbffff
 80040d8:	ffffefff 	.word	0xffffefff
 80040dc:	ffffdfff 	.word	0xffffdfff
 80040e0:	ffefffff 	.word	0xffefffff
 80040e4:	ff9fffff 	.word	0xff9fffff
 80040e8:	fff7ffff 	.word	0xfff7ffff

080040ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b092      	sub	sp, #72	; 0x48
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2290      	movs	r2, #144	; 0x90
 80040f8:	2100      	movs	r1, #0
 80040fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040fc:	f7fd f926 	bl	800134c <HAL_GetTick>
 8004100:	0003      	movs	r3, r0
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	4013      	ands	r3, r2
 800410e:	2b08      	cmp	r3, #8
 8004110:	d12d      	bne.n	800416e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	2280      	movs	r2, #128	; 0x80
 8004116:	0391      	lsls	r1, r2, #14
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4a47      	ldr	r2, [pc, #284]	; (8004238 <UART_CheckIdleState+0x14c>)
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	f000 f88e 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d022      	beq.n	800416e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
 8004132:	2301      	movs	r3, #1
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	f383 8810 	msr	PRIMASK, r3
}
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	438a      	bics	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2288      	movs	r2, #136	; 0x88
 800415e:	2120      	movs	r1, #32
 8004160:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e060      	b.n	8004230 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2204      	movs	r2, #4
 8004176:	4013      	ands	r3, r2
 8004178:	2b04      	cmp	r3, #4
 800417a:	d146      	bne.n	800420a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	03d1      	lsls	r1, r2, #15
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4a2c      	ldr	r2, [pc, #176]	; (8004238 <UART_CheckIdleState+0x14c>)
 8004186:	9200      	str	r2, [sp, #0]
 8004188:	2200      	movs	r2, #0
 800418a:	f000 f859 	bl	8004240 <UART_WaitOnFlagUntilTimeout>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d03b      	beq.n	800420a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	60fb      	str	r3, [r7, #12]
  return(result);
 8004198:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419a:	637b      	str	r3, [r7, #52]	; 0x34
 800419c:	2301      	movs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4922      	ldr	r1, [pc, #136]	; (800423c <UART_CheckIdleState+0x150>)
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	2301      	movs	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2101      	movs	r1, #1
 80041e6:	438a      	bics	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	228c      	movs	r2, #140	; 0x8c
 80041fa:	2120      	movs	r1, #32
 80041fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2284      	movs	r2, #132	; 0x84
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e012      	b.n	8004230 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2288      	movs	r2, #136	; 0x88
 800420e:	2120      	movs	r1, #32
 8004210:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	228c      	movs	r2, #140	; 0x8c
 8004216:	2120      	movs	r1, #32
 8004218:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2284      	movs	r2, #132	; 0x84
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b010      	add	sp, #64	; 0x40
 8004236:	bd80      	pop	{r7, pc}
 8004238:	01ffffff 	.word	0x01ffffff
 800423c:	fffffedf 	.word	0xfffffedf

08004240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004250:	e051      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3301      	adds	r3, #1
 8004256:	d04e      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fd f878 	bl	800134c <HAL_GetTick>
 800425c:	0002      	movs	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e051      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	4013      	ands	r3, r2
 800427c:	d03b      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b80      	cmp	r3, #128	; 0x80
 8004282:	d038      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d035      	beq.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	2208      	movs	r2, #8
 8004292:	4013      	ands	r3, r2
 8004294:	2b08      	cmp	r3, #8
 8004296:	d111      	bne.n	80042bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2208      	movs	r2, #8
 800429e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f83c 	bl	8004320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2290      	movs	r2, #144	; 0x90
 80042ac:	2108      	movs	r1, #8
 80042ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2284      	movs	r2, #132	; 0x84
 80042b4:	2100      	movs	r1, #0
 80042b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e02c      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	401a      	ands	r2, r3
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d112      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0018      	movs	r0, r3
 80042de:	f000 f81f 	bl	8004320 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2290      	movs	r2, #144	; 0x90
 80042e6:	2120      	movs	r1, #32
 80042e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2284      	movs	r2, #132	; 0x84
 80042ee:	2100      	movs	r1, #0
 80042f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	425a      	negs	r2, r3
 8004306:	4153      	adcs	r3, r2
 8004308:	b2db      	uxtb	r3, r3
 800430a:	001a      	movs	r2, r3
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d09e      	beq.n	8004252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b004      	add	sp, #16
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08e      	sub	sp, #56	; 0x38
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004328:	f3ef 8310 	mrs	r3, PRIMASK
 800432c:	617b      	str	r3, [r7, #20]
  return(result);
 800432e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
 8004332:	2301      	movs	r3, #1
 8004334:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4926      	ldr	r1, [pc, #152]	; (80043e4 <UART_EndRxTransfer+0xc4>)
 800434a:	400a      	ands	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435a:	f3ef 8310 	mrs	r3, PRIMASK
 800435e:	623b      	str	r3, [r7, #32]
  return(result);
 8004360:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
 8004364:	2301      	movs	r3, #1
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f383 8810 	msr	PRIMASK, r3
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	491b      	ldr	r1, [pc, #108]	; (80043e8 <UART_EndRxTransfer+0xc8>)
 800437c:	400a      	ands	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	f383 8810 	msr	PRIMASK, r3
}
 800438a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d118      	bne.n	80043c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004394:	f3ef 8310 	mrs	r3, PRIMASK
 8004398:	60bb      	str	r3, [r7, #8]
  return(result);
 800439a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439e:	2301      	movs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2110      	movs	r1, #16
 80043b6:	438a      	bics	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f383 8810 	msr	PRIMASK, r3
}
 80043c4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	228c      	movs	r2, #140	; 0x8c
 80043ca:	2120      	movs	r1, #32
 80043cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	46bd      	mov	sp, r7
 80043de:	b00e      	add	sp, #56	; 0x38
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	fffffedf 	.word	0xfffffedf
 80043e8:	effffffe 	.word	0xeffffffe

080043ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2284      	movs	r2, #132	; 0x84
 80043f8:	5c9b      	ldrb	r3, [r3, r2]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_UARTEx_DisableFifoMode+0x16>
 80043fe:	2302      	movs	r3, #2
 8004400:	e027      	b.n	8004452 <HAL_UARTEx_DisableFifoMode+0x66>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2284      	movs	r2, #132	; 0x84
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2288      	movs	r2, #136	; 0x88
 800440e:	2124      	movs	r1, #36	; 0x24
 8004410:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2101      	movs	r1, #1
 8004426:	438a      	bics	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a0b      	ldr	r2, [pc, #44]	; (800445c <HAL_UARTEx_DisableFifoMode+0x70>)
 800442e:	4013      	ands	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2288      	movs	r2, #136	; 0x88
 8004444:	2120      	movs	r1, #32
 8004446:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2284      	movs	r2, #132	; 0x84
 800444c:	2100      	movs	r1, #0
 800444e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	dfffffff 	.word	0xdfffffff

08004460 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2284      	movs	r2, #132	; 0x84
 800446e:	5c9b      	ldrb	r3, [r3, r2]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e02e      	b.n	80044d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	; 0x84
 800447c:	2101      	movs	r1, #1
 800447e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2288      	movs	r2, #136	; 0x88
 8004484:	2124      	movs	r1, #36	; 0x24
 8004486:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	438a      	bics	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	08d9      	lsrs	r1, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f854 	bl	8004564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2288      	movs	r2, #136	; 0x88
 80044c8:	2120      	movs	r1, #32
 80044ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2284      	movs	r2, #132	; 0x84
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b004      	add	sp, #16
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2284      	movs	r2, #132	; 0x84
 80044ee:	5c9b      	ldrb	r3, [r3, r2]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e02f      	b.n	8004558 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2284      	movs	r2, #132	; 0x84
 80044fc:	2101      	movs	r1, #1
 80044fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2288      	movs	r2, #136	; 0x88
 8004504:	2124      	movs	r1, #36	; 0x24
 8004506:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	438a      	bics	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004528:	4013      	ands	r3, r2
 800452a:	0019      	movs	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f813 	bl	8004564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2288      	movs	r2, #136	; 0x88
 800454a:	2120      	movs	r1, #32
 800454c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2284      	movs	r2, #132	; 0x84
 8004552:	2100      	movs	r1, #0
 8004554:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}
 8004560:	f1ffffff 	.word	0xf1ffffff

08004564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	226a      	movs	r2, #106	; 0x6a
 8004578:	2101      	movs	r1, #1
 800457a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2268      	movs	r2, #104	; 0x68
 8004580:	2101      	movs	r1, #1
 8004582:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004584:	e043      	b.n	800460e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004586:	260f      	movs	r6, #15
 8004588:	19bb      	adds	r3, r7, r6
 800458a:	2208      	movs	r2, #8
 800458c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800458e:	200e      	movs	r0, #14
 8004590:	183b      	adds	r3, r7, r0
 8004592:	2208      	movs	r2, #8
 8004594:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	0e5b      	lsrs	r3, r3, #25
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	240d      	movs	r4, #13
 80045a2:	193b      	adds	r3, r7, r4
 80045a4:	2107      	movs	r1, #7
 80045a6:	400a      	ands	r2, r1
 80045a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	0f5b      	lsrs	r3, r3, #29
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	250c      	movs	r5, #12
 80045b6:	197b      	adds	r3, r7, r5
 80045b8:	2107      	movs	r1, #7
 80045ba:	400a      	ands	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	197a      	adds	r2, r7, r5
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	4914      	ldr	r1, [pc, #80]	; (8004618 <UARTEx_SetNbDataToProcess+0xb4>)
 80045c8:	5c8a      	ldrb	r2, [r1, r2]
 80045ca:	435a      	muls	r2, r3
 80045cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80045ce:	197b      	adds	r3, r7, r5
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <UARTEx_SetNbDataToProcess+0xb8>)
 80045d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d6:	0019      	movs	r1, r3
 80045d8:	f7fb fe26 	bl	8000228 <__divsi3>
 80045dc:	0003      	movs	r3, r0
 80045de:	b299      	uxth	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	226a      	movs	r2, #106	; 0x6a
 80045e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e6:	19bb      	adds	r3, r7, r6
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	193a      	adds	r2, r7, r4
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <UARTEx_SetNbDataToProcess+0xb4>)
 80045f0:	5c8a      	ldrb	r2, [r1, r2]
 80045f2:	435a      	muls	r2, r3
 80045f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80045f6:	193b      	adds	r3, r7, r4
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <UARTEx_SetNbDataToProcess+0xb8>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045fe:	0019      	movs	r1, r3
 8004600:	f7fb fe12 	bl	8000228 <__divsi3>
 8004604:	0003      	movs	r3, r0
 8004606:	b299      	uxth	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2268      	movs	r2, #104	; 0x68
 800460c:	5299      	strh	r1, [r3, r2]
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b005      	add	sp, #20
 8004614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	08004804 	.word	0x08004804
 800461c:	0800480c 	.word	0x0800480c

08004620 <memset>:
 8004620:	0003      	movs	r3, r0
 8004622:	1882      	adds	r2, r0, r2
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	7019      	strb	r1, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	2600      	movs	r6, #0
 8004634:	4c0c      	ldr	r4, [pc, #48]	; (8004668 <__libc_init_array+0x38>)
 8004636:	4d0d      	ldr	r5, [pc, #52]	; (800466c <__libc_init_array+0x3c>)
 8004638:	1b64      	subs	r4, r4, r5
 800463a:	10a4      	asrs	r4, r4, #2
 800463c:	42a6      	cmp	r6, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	2600      	movs	r6, #0
 8004642:	f000 f883 	bl	800474c <_init>
 8004646:	4c0a      	ldr	r4, [pc, #40]	; (8004670 <__libc_init_array+0x40>)
 8004648:	4d0a      	ldr	r5, [pc, #40]	; (8004674 <__libc_init_array+0x44>)
 800464a:	1b64      	subs	r4, r4, r5
 800464c:	10a4      	asrs	r4, r4, #2
 800464e:	42a6      	cmp	r6, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	00b3      	lsls	r3, r6, #2
 8004656:	58eb      	ldr	r3, [r5, r3]
 8004658:	4798      	blx	r3
 800465a:	3601      	adds	r6, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	00b3      	lsls	r3, r6, #2
 8004660:	58eb      	ldr	r3, [r5, r3]
 8004662:	4798      	blx	r3
 8004664:	3601      	adds	r6, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	0800481c 	.word	0x0800481c
 800466c:	0800481c 	.word	0x0800481c
 8004670:	08004824 	.word	0x08004824
 8004674:	0800481c 	.word	0x0800481c

08004678 <__retarget_lock_acquire_recursive>:
 8004678:	4770      	bx	lr

0800467a <__retarget_lock_release_recursive>:
 800467a:	4770      	bx	lr

0800467c <register_fini>:
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <register_fini+0x10>)
 800467e:	b510      	push	{r4, lr}
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <register_fini+0xe>
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <register_fini+0x14>)
 8004686:	f000 f805 	bl	8004694 <atexit>
 800468a:	bd10      	pop	{r4, pc}
 800468c:	00000000 	.word	0x00000000
 8004690:	080046a5 	.word	0x080046a5

08004694 <atexit>:
 8004694:	2300      	movs	r3, #0
 8004696:	b510      	push	{r4, lr}
 8004698:	0001      	movs	r1, r0
 800469a:	001a      	movs	r2, r3
 800469c:	0018      	movs	r0, r3
 800469e:	f000 f815 	bl	80046cc <__register_exitproc>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <__libc_fini_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4c07      	ldr	r4, [pc, #28]	; (80046c4 <__libc_fini_array+0x20>)
 80046a8:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <__libc_fini_array+0x24>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d102      	bne.n	80046b8 <__libc_fini_array+0x14>
 80046b2:	f000 f851 	bl	8004758 <_fini>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	3c01      	subs	r4, #1
 80046ba:	00a3      	lsls	r3, r4, #2
 80046bc:	58eb      	ldr	r3, [r5, r3]
 80046be:	4798      	blx	r3
 80046c0:	e7f5      	b.n	80046ae <__libc_fini_array+0xa>
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	08004828 	.word	0x08004828
 80046c8:	08004824 	.word	0x08004824

080046cc <__register_exitproc>:
 80046cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ce:	4f1c      	ldr	r7, [pc, #112]	; (8004740 <__register_exitproc+0x74>)
 80046d0:	0004      	movs	r4, r0
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	0016      	movs	r6, r2
 80046d6:	9301      	str	r3, [sp, #4]
 80046d8:	9100      	str	r1, [sp, #0]
 80046da:	f7ff ffcd 	bl	8004678 <__retarget_lock_acquire_recursive>
 80046de:	4a19      	ldr	r2, [pc, #100]	; (8004744 <__register_exitproc+0x78>)
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <__register_exitproc+0x1e>
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <__register_exitproc+0x7c>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	2a1f      	cmp	r2, #31
 80046f0:	dd04      	ble.n	80046fc <__register_exitproc+0x30>
 80046f2:	f7ff ffc2 	bl	800467a <__retarget_lock_release_recursive>
 80046f6:	2001      	movs	r0, #1
 80046f8:	4240      	negs	r0, r0
 80046fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046fc:	2c00      	cmp	r4, #0
 80046fe:	d014      	beq.n	800472a <__register_exitproc+0x5e>
 8004700:	0091      	lsls	r1, r2, #2
 8004702:	1859      	adds	r1, r3, r1
 8004704:	000f      	movs	r7, r1
 8004706:	3788      	adds	r7, #136	; 0x88
 8004708:	603e      	str	r6, [r7, #0]
 800470a:	2701      	movs	r7, #1
 800470c:	001e      	movs	r6, r3
 800470e:	4097      	lsls	r7, r2
 8004710:	3685      	adds	r6, #133	; 0x85
 8004712:	36ff      	adds	r6, #255	; 0xff
 8004714:	6875      	ldr	r5, [r6, #4]
 8004716:	31fc      	adds	r1, #252	; 0xfc
 8004718:	433d      	orrs	r5, r7
 800471a:	6075      	str	r5, [r6, #4]
 800471c:	9d01      	ldr	r5, [sp, #4]
 800471e:	60cd      	str	r5, [r1, #12]
 8004720:	2c02      	cmp	r4, #2
 8004722:	d102      	bne.n	800472a <__register_exitproc+0x5e>
 8004724:	68b1      	ldr	r1, [r6, #8]
 8004726:	4339      	orrs	r1, r7
 8004728:	60b1      	str	r1, [r6, #8]
 800472a:	1c51      	adds	r1, r2, #1
 800472c:	6059      	str	r1, [r3, #4]
 800472e:	3202      	adds	r2, #2
 8004730:	9900      	ldr	r1, [sp, #0]
 8004732:	0092      	lsls	r2, r2, #2
 8004734:	50d1      	str	r1, [r2, r3]
 8004736:	f7ff ffa0 	bl	800467a <__retarget_lock_release_recursive>
 800473a:	2000      	movs	r0, #0
 800473c:	e7dd      	b.n	80046fa <__register_exitproc+0x2e>
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	20000010 	.word	0x20000010
 8004744:	20000364 	.word	0x20000364
 8004748:	20000368 	.word	0x20000368

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
