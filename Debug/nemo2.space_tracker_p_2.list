
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fdc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  08014098  08014098  00024098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016184  08016184  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08016184  08016184  00026184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801618c  0801618c  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801618c  0801618c  0002618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016194  08016194  00026194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08016198  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  200006d8  08016870  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  08016870  00030f60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d46e  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d06  00000000  00000000  0004dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  000518b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001622  00000000  00000000  00053530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221b5  00000000  00000000  00054b52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020c21  00000000  00000000  00076d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cca39  00000000  00000000  00097928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008388  00000000  00000000  00164364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08014080 	.word	0x08014080

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08014080 	.word	0x08014080

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08015bf8 	.word	0x08015bf8
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 ff78 	bl	80044a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f9de 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc70 	bl	8002ea0 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa30 	bl	8002a24 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb10 	bl	8002be8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fad0 	bl	8002b6c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb4a 	bl	8002c64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fb96 	bl	8002d00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fbe2 	bl	8002d9c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc2e 	bl	8002e38 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4bce      	ldr	r3, [pc, #824]	; (8002918 <main+0x370>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd69 	bl	80030b8 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fd97 	bl	8003118 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025ea:	4bcc      	ldr	r3, [pc, #816]	; (800291c <main+0x374>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	49cb      	ldr	r1, [pc, #812]	; (8002920 <main+0x378>)
 80025f2:	4bcc      	ldr	r3, [pc, #816]	; (8002924 <main+0x37c>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f00a ff69 	bl	800d4cc <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4bca      	ldr	r3, [pc, #808]	; (8002924 <main+0x37c>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fd5b 	bl	80030b8 <send_debug_logs>

  my_tim_init () ;
 8002602:	f001 fb53 	bl	8003cac <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f001 f92a 	bl	8003860 <my_ant_sw_pos>
  if ( !my_acc_init () )
 800260c:	f001 f9bc 	bl	8003988 <my_acc_init>
 8002610:	0003      	movs	r3, r0
 8002612:	001a      	movs	r2, r3
 8002614:	2301      	movs	r3, #1
 8002616:	4053      	eors	r3, r2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <main+0x84>
  {
	  my_acc_problem_flag = true ;
 800261e:	4bc2      	ldr	r3, [pc, #776]	; (8002928 <main+0x380>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
	  send_debug_logs ( "ACC init problem" ) ;
 8002624:	4bc1      	ldr	r3, [pc, #772]	; (800292c <main+0x384>)
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fd46 	bl	80030b8 <send_debug_logs>
  }
  if ( !my_acc_start () )
 800262c:	f001 f9d4 	bl	80039d8 <my_acc_start>
 8002630:	0003      	movs	r3, r0
 8002632:	001a      	movs	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	4053      	eors	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <main+0xa4>
  {
	  my_acc_problem_flag = true ;
 800263e:	4bba      	ldr	r3, [pc, #744]	; (8002928 <main+0x380>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
	  send_debug_logs ( "ACC start problem" ) ;
 8002644:	4bba      	ldr	r3, [pc, #744]	; (8002930 <main+0x388>)
 8002646:	0018      	movs	r0, r3
 8002648:	f000 fd36 	bl	80030b8 <send_debug_logs>
  }
  //my_acc_stop () ;

  if ( !my_astro_init () )
 800264c:	f008 faa2 	bl	800ab94 <my_astro_init>
 8002650:	0003      	movs	r3, r0
 8002652:	001a      	movs	r2, r3
 8002654:	2301      	movs	r3, #1
 8002656:	4053      	eors	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <main+0xd4>
	  my_sys_restart () ;
 800265e:	f000 fdf9 	bl	8003254 <my_sys_restart>
 8002662:	e00f      	b.n	8002684 <main+0xdc>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 8002664:	4ab3      	ldr	r2, [pc, #716]	; (8002934 <main+0x38c>)
 8002666:	49b4      	ldr	r1, [pc, #720]	; (8002938 <main+0x390>)
 8002668:	48ae      	ldr	r0, [pc, #696]	; (8002924 <main+0x37c>)
 800266a:	23d7      	movs	r3, #215	; 0xd7
 800266c:	f00a ff2e 	bl	800d4cc <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002670:	4bac      	ldr	r3, [pc, #688]	; (8002924 <main+0x37c>)
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fd20 	bl	80030b8 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002678:	f008 faec 	bl	800ac54 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800267c:	f001 fa4e 	bl	8003b1c <my_astro_evt_pin>
 8002680:	1e03      	subs	r3, r0, #0
 8002682:	d1ef      	bne.n	8002664 <main+0xbc>
	  }
  }

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 8002684:	f001 f91e 	bl	80038c4 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002688:	4bac      	ldr	r3, [pc, #688]	; (800293c <main+0x394>)
 800268a:	0018      	movs	r0, r3
 800268c:	f008 fb34 	bl	800acf8 <my_gnss_acq_coordinates>
 8002690:	0003      	movs	r3, r0
 8002692:	001a      	movs	r2, r3
 8002694:	4baa      	ldr	r3, [pc, #680]	; (8002940 <main+0x398>)
 8002696:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002698:	f001 f92e 	bl	80038f8 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800269c:	4ba9      	ldr	r3, [pc, #676]	; (8002944 <main+0x39c>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f008 fcb0 	bl	800b004 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 80026a4:	4ba5      	ldr	r3, [pc, #660]	; (800293c <main+0x394>)
 80026a6:	7c1b      	ldrb	r3, [r3, #16]
 80026a8:	001e      	movs	r6, r3
 80026aa:	4ba4      	ldr	r3, [pc, #656]	; (800293c <main+0x394>)
 80026ac:	689c      	ldr	r4, [r3, #8]
 80026ae:	68dd      	ldr	r5, [r3, #12]
 80026b0:	4ba2      	ldr	r3, [pc, #648]	; (800293c <main+0x394>)
 80026b2:	8a5b      	ldrh	r3, [r3, #18]
 80026b4:	4698      	mov	r8, r3
 80026b6:	4ba1      	ldr	r3, [pc, #644]	; (800293c <main+0x394>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	213c      	movs	r1, #60	; 0x3c
 80026bc:	0018      	movs	r0, r3
 80026be:	f7fd fd3d 	bl	800013c <__udivsi3>
 80026c2:	0003      	movs	r3, r0
 80026c4:	4a9b      	ldr	r2, [pc, #620]	; (8002934 <main+0x38c>)
 80026c6:	49a0      	ldr	r1, [pc, #640]	; (8002948 <main+0x3a0>)
 80026c8:	4896      	ldr	r0, [pc, #600]	; (8002924 <main+0x37c>)
 80026ca:	9305      	str	r3, [sp, #20]
 80026cc:	4643      	mov	r3, r8
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	9402      	str	r4, [sp, #8]
 80026d2:	9503      	str	r5, [sp, #12]
 80026d4:	9601      	str	r6, [sp, #4]
 80026d6:	4b9b      	ldr	r3, [pc, #620]	; (8002944 <main+0x39c>)
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	23e3      	movs	r3, #227	; 0xe3
 80026dc:	f00a fef6 	bl	800d4cc <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80026e0:	4b90      	ldr	r3, [pc, #576]	; (8002924 <main+0x37c>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fce8 	bl	80030b8 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 80026e8:	4b95      	ldr	r3, [pc, #596]	; (8002940 <main+0x398>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4053      	eors	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d014      	beq.n	8002720 <main+0x178>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80026f6:	4b95      	ldr	r3, [pc, #596]	; (800294c <main+0x3a4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f008 fcda 	bl	800b0b4 <my_rtc_set_alarm>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d05a      	beq.n	80027ba <main+0x212>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 8002704:	4b91      	ldr	r3, [pc, #580]	; (800294c <main+0x3a4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a8a      	ldr	r2, [pc, #552]	; (8002934 <main+0x38c>)
 800270a:	4991      	ldr	r1, [pc, #580]	; (8002950 <main+0x3a8>)
 800270c:	4885      	ldr	r0, [pc, #532]	; (8002924 <main+0x37c>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	23e9      	movs	r3, #233	; 0xe9
 8002712:	f00a fedb 	bl	800d4cc <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 8002716:	4b83      	ldr	r3, [pc, #524]	; (8002924 <main+0x37c>)
 8002718:	0018      	movs	r0, r3
 800271a:	f000 fdbf 	bl	800329c <my_sys_sleep>
 800271e:	e04c      	b.n	80027ba <main+0x212>
	  }
  }
  else
  {
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 8002720:	4b8c      	ldr	r3, [pc, #560]	; (8002954 <main+0x3ac>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	4698      	mov	r8, r3
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <main+0x394>)
 8002728:	689c      	ldr	r4, [r3, #8]
 800272a:	68dd      	ldr	r5, [r3, #12]
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <main+0x394>)
 800272e:	8a5b      	ldrh	r3, [r3, #18]
 8002730:	001e      	movs	r6, r3
 8002732:	4b82      	ldr	r3, [pc, #520]	; (800293c <main+0x394>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	213c      	movs	r1, #60	; 0x3c
 8002738:	0018      	movs	r0, r3
 800273a:	f7fd fcff 	bl	800013c <__udivsi3>
 800273e:	0003      	movs	r3, r0
 8002740:	001a      	movs	r2, r3
 8002742:	4b85      	ldr	r3, [pc, #532]	; (8002958 <main+0x3b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4985      	ldr	r1, [pc, #532]	; (800295c <main+0x3b4>)
 8002748:	4885      	ldr	r0, [pc, #532]	; (8002960 <main+0x3b8>)
 800274a:	9304      	str	r3, [sp, #16]
 800274c:	9203      	str	r2, [sp, #12]
 800274e:	9602      	str	r6, [sp, #8]
 8002750:	9400      	str	r4, [sp, #0]
 8002752:	9501      	str	r5, [sp, #4]
 8002754:	4642      	mov	r2, r8
 8002756:	f00a feb9 	bl	800d4cc <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800275a:	4a76      	ldr	r2, [pc, #472]	; (8002934 <main+0x38c>)
 800275c:	4981      	ldr	r1, [pc, #516]	; (8002964 <main+0x3bc>)
 800275e:	4871      	ldr	r0, [pc, #452]	; (8002924 <main+0x37c>)
 8002760:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <main+0x3b8>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	23f0      	movs	r3, #240	; 0xf0
 8002766:	f00a feb1 	bl	800d4cc <sprintf>
	  my_astro_send_uplink ( my_astro_payload , dbg_payload ) ;
 800276a:	4a6e      	ldr	r2, [pc, #440]	; (8002924 <main+0x37c>)
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <main+0x3b8>)
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f001 f9f3 	bl	8003b5c <my_astro_send_uplink>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002776:	4b75      	ldr	r3, [pc, #468]	; (800294c <main+0x3a4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0018      	movs	r0, r3
 800277c:	f008 fc9a 	bl	800b0b4 <my_rtc_set_alarm>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d01a      	beq.n	80027ba <main+0x212>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 8002784:	4b71      	ldr	r3, [pc, #452]	; (800294c <main+0x3a4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6a      	ldr	r2, [pc, #424]	; (8002934 <main+0x38c>)
 800278a:	4971      	ldr	r1, [pc, #452]	; (8002950 <main+0x3a8>)
 800278c:	4865      	ldr	r0, [pc, #404]	; (8002924 <main+0x37c>)
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	23f4      	movs	r3, #244	; 0xf4
 8002792:	f00a fe9b 	bl	800d4cc <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <main+0x37c>)
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fd7f 	bl	800329c <my_sys_sleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 800279e:	e00c      	b.n	80027ba <main+0x212>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027a0:	2304      	movs	r3, #4
 80027a2:	33ff      	adds	r3, #255	; 0xff
 80027a4:	4a63      	ldr	r2, [pc, #396]	; (8002934 <main+0x38c>)
 80027a6:	4964      	ldr	r1, [pc, #400]	; (8002938 <main+0x390>)
 80027a8:	485e      	ldr	r0, [pc, #376]	; (8002924 <main+0x37c>)
 80027aa:	f00a fe8f 	bl	800d4cc <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <main+0x37c>)
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fc81 	bl	80030b8 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027b6:	f008 fa4d 	bl	800ac54 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027ba:	f001 f9af 	bl	8003b1c <my_astro_evt_pin>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d1ee      	bne.n	80027a0 <main+0x1f8>
	  }
	  if ( astro_rcv_cmd_flag )
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <main+0x3c0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <main+0x232>
	  {
		  astro_rcv_cmd_flag = false ;
 80027ca:	4b67      	ldr	r3, [pc, #412]	; (8002968 <main+0x3c0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 80027d0:	f000 fe2c 	bl	800342c <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 80027d4:	4b65      	ldr	r3, [pc, #404]	; (800296c <main+0x3c4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <main+0x3c8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d100      	bne.n	80027e4 <main+0x23c>
 80027e2:	e081      	b.n	80028e8 <main+0x340>
	  {
		  my_rtc_alarm_flag = false ;
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <main+0x3c8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 80027ea:	f001 f86b 	bl	80038c4 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 80027ee:	4b53      	ldr	r3, [pc, #332]	; (800293c <main+0x394>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f008 fa81 	bl	800acf8 <my_gnss_acq_coordinates>
 80027f6:	0003      	movs	r3, r0
 80027f8:	001a      	movs	r2, r3
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <main+0x398>)
 80027fc:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 80027fe:	f001 f87b 	bl	80038f8 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002802:	4b50      	ldr	r3, [pc, #320]	; (8002944 <main+0x39c>)
 8002804:	0018      	movs	r0, r3
 8002806:	f008 fbfd 	bl	800b004 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <main+0x394>)
 800280c:	7c1b      	ldrb	r3, [r3, #16]
 800280e:	4698      	mov	r8, r3
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <main+0x394>)
 8002812:	689c      	ldr	r4, [r3, #8]
 8002814:	68dd      	ldr	r5, [r3, #12]
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <main+0x394>)
 8002818:	8a5b      	ldrh	r3, [r3, #18]
 800281a:	4699      	mov	r9, r3
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <main+0x394>)
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	213c      	movs	r1, #60	; 0x3c
 8002822:	0018      	movs	r0, r3
 8002824:	f7fd fc8a 	bl	800013c <__udivsi3>
 8002828:	0003      	movs	r3, r0
 800282a:	469c      	mov	ip, r3
 800282c:	238a      	movs	r3, #138	; 0x8a
 800282e:	005e      	lsls	r6, r3, #1
 8002830:	4a40      	ldr	r2, [pc, #256]	; (8002934 <main+0x38c>)
 8002832:	4945      	ldr	r1, [pc, #276]	; (8002948 <main+0x3a0>)
 8002834:	483b      	ldr	r0, [pc, #236]	; (8002924 <main+0x37c>)
 8002836:	4663      	mov	r3, ip
 8002838:	9305      	str	r3, [sp, #20]
 800283a:	464b      	mov	r3, r9
 800283c:	9304      	str	r3, [sp, #16]
 800283e:	9402      	str	r4, [sp, #8]
 8002840:	9503      	str	r5, [sp, #12]
 8002842:	4643      	mov	r3, r8
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <main+0x39c>)
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	0033      	movs	r3, r6
 800284c:	f00a fe3e 	bl	800d4cc <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <main+0x37c>)
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fc30 	bl	80030b8 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <main+0x398>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <main+0x340>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <main+0x394>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b35      	ldr	r3, [pc, #212]	; (800293c <main+0x394>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	f008 fa34 	bl	800acd8 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002870:	4b38      	ldr	r3, [pc, #224]	; (8002954 <main+0x3ac>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	4698      	mov	r8, r3
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <main+0x394>)
 8002878:	689c      	ldr	r4, [r3, #8]
 800287a:	68dd      	ldr	r5, [r3, #12]
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <main+0x394>)
 800287e:	8a5b      	ldrh	r3, [r3, #18]
 8002880:	001e      	movs	r6, r3
 8002882:	4b2e      	ldr	r3, [pc, #184]	; (800293c <main+0x394>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	213c      	movs	r1, #60	; 0x3c
 8002888:	0018      	movs	r0, r3
 800288a:	f7fd fc57 	bl	800013c <__udivsi3>
 800288e:	0003      	movs	r3, r0
 8002890:	469c      	mov	ip, r3
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <main+0x394>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <main+0x394>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4936      	ldr	r1, [pc, #216]	; (8002974 <main+0x3cc>)
 800289c:	4830      	ldr	r0, [pc, #192]	; (8002960 <main+0x3b8>)
 800289e:	9305      	str	r3, [sp, #20]
 80028a0:	9204      	str	r2, [sp, #16]
 80028a2:	4663      	mov	r3, ip
 80028a4:	9303      	str	r3, [sp, #12]
 80028a6:	9602      	str	r6, [sp, #8]
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	9501      	str	r5, [sp, #4]
 80028ac:	4642      	mov	r2, r8
 80028ae:	f00a fe0d 	bl	800d4cc <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <main+0x3ac>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	b291      	uxth	r1, r2
 80028ba:	4a26      	ldr	r2, [pc, #152]	; (8002954 <main+0x3ac>)
 80028bc:	8011      	strh	r1, [r2, #0]
 80028be:	4a28      	ldr	r2, [pc, #160]	; (8002960 <main+0x3b8>)
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f008 f99e 	bl	800ac04 <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 80028c8:	f001 f93a 	bl	8003b40 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 80028cc:	238e      	movs	r3, #142	; 0x8e
 80028ce:	005c      	lsls	r4, r3, #1
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <main+0x38c>)
 80028d2:	4924      	ldr	r1, [pc, #144]	; (8002964 <main+0x3bc>)
 80028d4:	4813      	ldr	r0, [pc, #76]	; (8002924 <main+0x37c>)
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <main+0x3b8>)
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	0023      	movs	r3, r4
 80028dc:	f00a fdf6 	bl	800d4cc <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <main+0x37c>)
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 fbe8 	bl	80030b8 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <main+0x3a4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f008 fbe1 	bl	800b0b4 <my_rtc_set_alarm>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d100      	bne.n	80028f8 <main+0x350>
 80028f6:	e760      	b.n	80027ba <main+0x212>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_sys_sleep (), my_rtc_alarmA [s] = %lu" , __FILE__ , __LINE__ , my_rtc_alarmA_time ) ;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <main+0x3a4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2291      	movs	r2, #145	; 0x91
 80028fe:	0054      	lsls	r4, r2, #1
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <main+0x38c>)
 8002902:	4913      	ldr	r1, [pc, #76]	; (8002950 <main+0x3a8>)
 8002904:	4807      	ldr	r0, [pc, #28]	; (8002924 <main+0x37c>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	0023      	movs	r3, r4
 800290a:	f00a fddf 	bl	800d4cc <sprintf>
		  my_sys_sleep ( dbg_payload ) ;
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <main+0x37c>)
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fcc3 	bl	800329c <my_sys_sleep>
	  while ( my_astro_evt_pin () )
 8002916:	e750      	b.n	80027ba <main+0x212>
 8002918:	20000000 	.word	0x20000000
 800291c:	20000a22 	.word	0x20000a22
 8002920:	080140c8 	.word	0x080140c8
 8002924:	20000b2c 	.word	0x20000b2c
 8002928:	20000b1c 	.word	0x20000b1c
 800292c:	080140d8 	.word	0x080140d8
 8002930:	080140ec 	.word	0x080140ec
 8002934:	08014100 	.word	0x08014100
 8002938:	08014114 	.word	0x08014114
 800293c:	20000af0 	.word	0x20000af0
 8002940:	20000b1b 	.word	0x20000b1b
 8002944:	20000a24 	.word	0x20000a24
 8002948:	0801412c 	.word	0x0801412c
 800294c:	2000000c 	.word	0x2000000c
 8002950:	0801416c 	.word	0x0801416c
 8002954:	20000ae4 	.word	0x20000ae4
 8002958:	20000004 	.word	0x20000004
 800295c:	0801419c 	.word	0x0801419c
 8002960:	20000a38 	.word	0x20000a38
 8002964:	080141b0 	.word	0x080141b0
 8002968:	20000c26 	.word	0x20000c26
 800296c:	20000c28 	.word	0x20000c28
 8002970:	20000b1a 	.word	0x20000b1a
 8002974:	080141c4 	.word	0x080141c4

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b095      	sub	sp, #84	; 0x54
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	2414      	movs	r4, #20
 8002980:	193b      	adds	r3, r7, r4
 8002982:	0018      	movs	r0, r3
 8002984:	233c      	movs	r3, #60	; 0x3c
 8002986:	001a      	movs	r2, r3
 8002988:	2100      	movs	r1, #0
 800298a:	f00a fe35 	bl	800d5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	0018      	movs	r0, r3
 8002992:	2310      	movs	r3, #16
 8002994:	001a      	movs	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f00a fe2e 	bl	800d5f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	0018      	movs	r0, r3
 80029a2:	f002 fa49 	bl	8004e38 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029a6:	f002 fa01 	bl	8004dac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <SystemClock_Config+0xa8>)
 80029ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <SystemClock_Config+0xa8>)
 80029b0:	2118      	movs	r1, #24
 80029b2:	438a      	bics	r2, r1
 80029b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2206      	movs	r2, #6
 80029ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	2201      	movs	r2, #1
 80029c0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	0052      	lsls	r2, r2, #1
 80029c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2240      	movs	r2, #64	; 0x40
 80029d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	0018      	movs	r0, r3
 80029e0:	f002 fa76 	bl	8004ed0 <HAL_RCC_OscConfig>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80029e8:	f001 f9c2 	bl	8003d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2207      	movs	r2, #7
 80029f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	2200      	movs	r2, #0
 80029f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f002 fdc1 	bl	8005590 <HAL_RCC_ClockConfig>
 8002a0e:	1e03      	subs	r3, r0, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a12:	f001 f9ad 	bl	8003d70 <Error_Handler>
  }
}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b015      	add	sp, #84	; 0x54
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	40021000 	.word	0x40021000

08002a24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b090      	sub	sp, #64	; 0x40
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a2a:	232c      	movs	r3, #44	; 0x2c
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	2314      	movs	r3, #20
 8002a32:	001a      	movs	r2, r3
 8002a34:	2100      	movs	r1, #0
 8002a36:	f00a fddf 	bl	800d5f8 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a3a:	2328      	movs	r3, #40	; 0x28
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a42:	003b      	movs	r3, r7
 8002a44:	0018      	movs	r0, r3
 8002a46:	2328      	movs	r3, #40	; 0x28
 8002a48:	001a      	movs	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f00a fdd4 	bl	800d5f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a52:	4a45      	ldr	r2, [pc, #276]	; (8002b68 <MX_RTC_Init+0x144>)
 8002a54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a5e:	227f      	movs	r2, #127	; 0x7f
 8002a60:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a64:	22ff      	movs	r2, #255	; 0xff
 8002a66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a68:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a74:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a7a:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	05d2      	lsls	r2, r2, #23
 8002a80:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a88:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <MX_RTC_Init+0x140>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f003 f966 	bl	8005d5c <HAL_RTC_Init>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	d001      	beq.n	8002a98 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002a94:	f001 f96c 	bl	8003d70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002abe:	1879      	adds	r1, r7, r1
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <MX_RTC_Init+0x140>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f003 f9eb 	bl	8005ea0 <HAL_RTC_SetTime>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002ace:	f001 f94f 	bl	8003d70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002ad2:	2128      	movs	r1, #40	; 0x28
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2206      	movs	r2, #6
 8002ad8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2201      	movs	r2, #1
 8002ade:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2200      	movs	r2, #0
 8002aea:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002aec:	1879      	adds	r1, r7, r1
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MX_RTC_Init+0x140>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	0018      	movs	r0, r3
 8002af4:	f003 fad8 	bl	80060a8 <HAL_RTC_SetDate>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002afc:	f001 f938 	bl	8003d70 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b00:	003b      	movs	r3, r7
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b06:	003b      	movs	r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b0c:	003b      	movs	r3, r7
 8002b0e:	2200      	movs	r2, #0
 8002b10:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b12:	003b      	movs	r3, r7
 8002b14:	2200      	movs	r2, #0
 8002b16:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b18:	003b      	movs	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b1e:	003b      	movs	r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b24:	003b      	movs	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2220      	movs	r2, #32
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b3e:	003b      	movs	r3, r7
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	0052      	lsls	r2, r2, #1
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b46:	0039      	movs	r1, r7
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_RTC_Init+0x140>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f003 fb8b 	bl	8006268 <HAL_RTC_SetAlarm_IT>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b56:	f001 f90b 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b010      	add	sp, #64	; 0x40
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	200006f4 	.word	0x200006f4
 8002b68:	40002800 	.word	0x40002800

08002b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <MX_SPI1_Init+0x78>)
 8002b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b78:	2282      	movs	r2, #130	; 0x82
 8002b7a:	0052      	lsls	r2, r2, #1
 8002b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b86:	22e0      	movs	r2, #224	; 0xe0
 8002b88:	00d2      	lsls	r2, r2, #3
 8002b8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bba:	2207      	movs	r2, #7
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <MX_SPI1_Init+0x74>)
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f003 fe2b 	bl	8006828 <HAL_SPI_Init>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d001      	beq.n	8002bda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bd6:	f001 f8cb 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000720 	.word	0x20000720
 8002be4:	40013000 	.word	0x40013000

08002be8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	001a      	movs	r2, r3
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f00a fcfe 	bl	800d5f8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <MX_TIM6_Init+0x70>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <MX_TIM6_Init+0x74>)
 8002c06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <MX_TIM6_Init+0x78>)
 8002c12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f004 fd23 	bl	8007668 <HAL_TIM_Base_Init>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c26:	f001 f8a3 	bl	8003d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c36:	1d3a      	adds	r2, r7, #4
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <MX_TIM6_Init+0x6c>)
 8002c3a:	0011      	movs	r1, r2
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f004 ffbb 	bl	8007bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c46:	f001 f893 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000784 	.word	0x20000784
 8002c58:	40001000 	.word	0x40001000
 8002c5c:	00003e7f 	.word	0x00003e7f
 8002c60:	000003e7 	.word	0x000003e7

08002c64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <MX_USART1_UART_Init+0x98>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c70:	22e1      	movs	r2, #225	; 0xe1
 8002c72:	0252      	lsls	r2, r2, #9
 8002c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f005 f810 	bl	8007cd4 <HAL_UART_Init>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002cb8:	f001 f85a 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f005 ffeb 	bl	8008c9c <HAL_UARTEx_SetTxFifoThreshold>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d001      	beq.n	8002cce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cca:	f001 f851 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f006 f822 	bl	8008d1c <HAL_UARTEx_SetRxFifoThreshold>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002cdc:	f001 f848 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <MX_USART1_UART_Init+0x94>)
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f005 ffa0 	bl	8008c28 <HAL_UARTEx_DisableFifoMode>
 8002ce8:	1e03      	subs	r3, r0, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002cec:	f001 f840 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	200007d0 	.word	0x200007d0
 8002cfc:	40013800 	.word	0x40013800

08002d00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d06:	4a24      	ldr	r2, [pc, #144]	; (8002d98 <MX_USART2_UART_Init+0x98>)
 8002d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d0c:	22e1      	movs	r2, #225	; 0xe1
 8002d0e:	0252      	lsls	r2, r2, #9
 8002d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d26:	220c      	movs	r2, #12
 8002d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f004 ffc2 	bl	8007cd4 <HAL_UART_Init>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d001      	beq.n	8002d58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d54:	f001 f80c 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f005 ff9d 	bl	8008c9c <HAL_UARTEx_SetTxFifoThreshold>
 8002d62:	1e03      	subs	r3, r0, #0
 8002d64:	d001      	beq.n	8002d6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d66:	f001 f803 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f005 ffd4 	bl	8008d1c <HAL_UARTEx_SetRxFifoThreshold>
 8002d74:	1e03      	subs	r3, r0, #0
 8002d76:	d001      	beq.n	8002d7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d78:	f000 fffa 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <MX_USART2_UART_Init+0x94>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f005 ff52 	bl	8008c28 <HAL_UARTEx_DisableFifoMode>
 8002d84:	1e03      	subs	r3, r0, #0
 8002d86:	d001      	beq.n	8002d8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d88:	f000 fff2 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000864 	.word	0x20000864
 8002d98:	40004400 	.word	0x40004400

08002d9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <MX_USART3_UART_Init+0x98>)
 8002da4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002da8:	2296      	movs	r2, #150	; 0x96
 8002daa:	0192      	lsls	r2, r2, #6
 8002dac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dba:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002de6:	0018      	movs	r0, r3
 8002de8:	f004 ff74 	bl	8007cd4 <HAL_UART_Init>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d001      	beq.n	8002df4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002df0:	f000 ffbe 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f005 ff4f 	bl	8008c9c <HAL_UARTEx_SetTxFifoThreshold>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d001      	beq.n	8002e06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e02:	f000 ffb5 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002e08:	2100      	movs	r1, #0
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f005 ff86 	bl	8008d1c <HAL_UARTEx_SetRxFifoThreshold>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e14:	f000 ffac 	bl	8003d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <MX_USART3_UART_Init+0x94>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f005 ff04 	bl	8008c28 <HAL_UARTEx_DisableFifoMode>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d001      	beq.n	8002e28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e24:	f000 ffa4 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	200008f8 	.word	0x200008f8
 8002e34:	40004800 	.word	0x40004800

08002e38 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e3e:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <MX_USART5_UART_Init+0x64>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e44:	2296      	movs	r2, #150	; 0x96
 8002e46:	0192      	lsls	r2, r2, #6
 8002e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6e:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <MX_USART5_UART_Init+0x60>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f004 ff26 	bl	8007cd4 <HAL_UART_Init>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002e8c:	f000 ff70 	bl	8003d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	2000098c 	.word	0x2000098c
 8002e9c:	40005000 	.word	0x40005000

08002ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b08b      	sub	sp, #44	; 0x2c
 8002ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea6:	2414      	movs	r4, #20
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2314      	movs	r3, #20
 8002eae:	001a      	movs	r2, r3
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f00a fba1 	bl	800d5f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb6:	4b7a      	ldr	r3, [pc, #488]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eba:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec2:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eda:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	4b6e      	ldr	r3, [pc, #440]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eea:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002eec:	2102      	movs	r1, #2
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef2:	4b6b      	ldr	r3, [pc, #428]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efe:	4b68      	ldr	r3, [pc, #416]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002f04:	2108      	movs	r1, #8
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	4b65      	ldr	r3, [pc, #404]	; (80030a0 <MX_GPIO_Init+0x200>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4013      	ands	r3, r2
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f16:	23a0      	movs	r3, #160	; 0xa0
 8002f18:	05db      	lsls	r3, r3, #23
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2110      	movs	r1, #16
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f001 fef3 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f24:	495f      	ldr	r1, [pc, #380]	; (80030a4 <MX_GPIO_Init+0x204>)
 8002f26:	4b60      	ldr	r3, [pc, #384]	; (80030a8 <MX_GPIO_Init+0x208>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f001 feed 	bl	8004d0a <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	485c      	ldr	r0, [pc, #368]	; (80030a8 <MX_GPIO_Init+0x208>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	0019      	movs	r1, r3
 8002f3a:	f001 fee6 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <MX_GPIO_Init+0x20c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	2103      	movs	r1, #3
 8002f44:	0018      	movs	r0, r3
 8002f46:	f001 fee0 	bl	8004d0a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2288      	movs	r2, #136	; 0x88
 8002f54:	0352      	lsls	r2, r2, #13
 8002f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	193a      	adds	r2, r7, r4
 8002f60:	23a0      	movs	r3, #160	; 0xa0
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f001 fc6e 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	2202      	movs	r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002f7e:	193a      	adds	r2, r7, r4
 8002f80:	23a0      	movs	r3, #160	; 0xa0
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f001 fc5e 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2210      	movs	r2, #16
 8002f90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f92:	193b      	adds	r3, r7, r4
 8002f94:	2201      	movs	r2, #1
 8002f96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	193b      	adds	r3, r7, r4
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	193a      	adds	r2, r7, r4
 8002fa6:	23a0      	movs	r3, #160	; 0xa0
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f001 fc4b 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <MX_GPIO_Init+0x210>)
 8002fb6:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	2201      	movs	r2, #1
 8002fbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <MX_GPIO_Init+0x208>)
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f001 fc39 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002fd6:	0021      	movs	r1, r4
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	2288      	movs	r2, #136	; 0x88
 8002fe2:	0352      	lsls	r2, r2, #13
 8002fe4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	000c      	movs	r4, r1
 8002fee:	187b      	adds	r3, r7, r1
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <MX_GPIO_Init+0x208>)
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f001 fc27 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8002ffa:	0021      	movs	r1, r4
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0192      	lsls	r2, r2, #6
 8003002:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003004:	000c      	movs	r4, r1
 8003006:	193b      	adds	r3, r7, r4
 8003008:	2211      	movs	r2, #17
 800300a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003018:	193b      	adds	r3, r7, r4
 800301a:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <MX_GPIO_Init+0x208>)
 800301c:	0019      	movs	r1, r3
 800301e:	0010      	movs	r0, r2
 8003020:	f001 fc12 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003024:	193b      	adds	r3, r7, r4
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <MX_GPIO_Init+0x214>)
 8003028:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302a:	193b      	adds	r3, r7, r4
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	193b      	adds	r3, r7, r4
 8003038:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <MX_GPIO_Init+0x208>)
 800303a:	0019      	movs	r1, r3
 800303c:	0010      	movs	r0, r2
 800303e:	f001 fc03 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2203      	movs	r2, #3
 8003046:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2201      	movs	r2, #1
 800304c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	193b      	adds	r3, r7, r4
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	193b      	adds	r3, r7, r4
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305a:	193b      	adds	r3, r7, r4
 800305c:	4a13      	ldr	r2, [pc, #76]	; (80030ac <MX_GPIO_Init+0x20c>)
 800305e:	0019      	movs	r1, r3
 8003060:	0010      	movs	r0, r2
 8003062:	f001 fbf1 	bl	8004848 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003066:	0021      	movs	r1, r4
 8003068:	187b      	adds	r3, r7, r1
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306e:	187b      	adds	r3, r7, r1
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2201      	movs	r2, #1
 8003078:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800307a:	187b      	adds	r3, r7, r1
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <MX_GPIO_Init+0x20c>)
 800307e:	0019      	movs	r1, r3
 8003080:	0010      	movs	r0, r2
 8003082:	f001 fbe1 	bl	8004848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2006      	movs	r0, #6
 800308c:	f001 fba6 	bl	80047dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003090:	2006      	movs	r0, #6
 8003092:	f001 fbb8 	bl	8004806 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b00b      	add	sp, #44	; 0x2c
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	40021000 	.word	0x40021000
 80030a4:	0000a403 	.word	0x0000a403
 80030a8:	50000400 	.word	0x50000400
 80030ac:	50000c00 	.word	0x50000c00
 80030b0:	00008c03 	.word	0x00008c03
 80030b4:	00004040 	.word	0x00004040

080030b8 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( const char* p_tx_buffer )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7fd f81e 	bl	8000104 <strlen>
 80030c8:	0003      	movs	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2bfa      	cmp	r3, #250	; 0xfa
 80030d0:	d908      	bls.n	80030e4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80030d2:	23fa      	movs	r3, #250	; 0xfa
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	490d      	ldr	r1, [pc, #52]	; (800310c <send_debug_logs+0x54>)
 80030d8:	480d      	ldr	r0, [pc, #52]	; (8003110 <send_debug_logs+0x58>)
 80030da:	222a      	movs	r2, #42	; 0x2a
 80030dc:	f004 fe90 	bl	8007e00 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030e0:	23fa      	movs	r3, #250	; 0xfa
 80030e2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	23fa      	movs	r3, #250	; 0xfa
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4808      	ldr	r0, [pc, #32]	; (8003110 <send_debug_logs+0x58>)
 80030f0:	f004 fe86 	bl	8007e00 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 80030f4:	23fa      	movs	r3, #250	; 0xfa
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4906      	ldr	r1, [pc, #24]	; (8003114 <send_debug_logs+0x5c>)
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <send_debug_logs+0x58>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	f004 fe7f 	bl	8007e00 <HAL_UART_Transmit>
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	080141dc 	.word	0x080141dc
 8003110:	20000864 	.word	0x20000864
 8003114:	08014208 	.word	0x08014208

08003118 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 800311c:	4b43      	ldr	r3, [pc, #268]	; (800322c <my_sys_init+0x114>)
 800311e:	2200      	movs	r2, #0
 8003120:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <my_sys_init+0x114>)
 8003124:	2200      	movs	r2, #0
 8003126:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003128:	4b41      	ldr	r3, [pc, #260]	; (8003230 <my_sys_init+0x118>)
 800312a:	2104      	movs	r1, #4
 800312c:	0018      	movs	r0, r3
 800312e:	f001 fdcf 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8003132:	0003      	movs	r3, r0
 8003134:	1e5a      	subs	r2, r3, #1
 8003136:	4193      	sbcs	r3, r2
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <my_sys_init+0x11c>)
 800313c:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800313e:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <my_sys_init+0x118>)
 8003140:	2108      	movs	r1, #8
 8003142:	0018      	movs	r0, r3
 8003144:	f001 fdc4 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8003148:	0003      	movs	r3, r0
 800314a:	1e5a      	subs	r2, r3, #1
 800314c:	4193      	sbcs	r3, r2
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b39      	ldr	r3, [pc, #228]	; (8003238 <my_sys_init+0x120>)
 8003152:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003154:	4b37      	ldr	r3, [pc, #220]	; (8003234 <my_sys_init+0x11c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	4053      	eors	r3, r2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <my_sys_init+0x7e>
 8003162:	4b35      	ldr	r3, [pc, #212]	; (8003238 <my_sys_init+0x120>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	4053      	eors	r3, r2
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 8003170:	4b32      	ldr	r3, [pc, #200]	; (800323c <my_sys_init+0x124>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003176:	4b32      	ldr	r3, [pc, #200]	; (8003240 <my_sys_init+0x128>)
 8003178:	22e1      	movs	r2, #225	; 0xe1
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <my_sys_init+0x12c>)
 8003180:	2278      	movs	r2, #120	; 0x78
 8003182:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <my_sys_init+0x130>)
 8003186:	221e      	movs	r2, #30
 8003188:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 800318a:	4930      	ldr	r1, [pc, #192]	; (800324c <my_sys_init+0x134>)
 800318c:	2200      	movs	r2, #0
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	05db      	lsls	r3, r3, #23
 8003192:	600a      	str	r2, [r1, #0]
 8003194:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <my_sys_init+0x11c>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d019      	beq.n	80031d2 <my_sys_init+0xba>
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <my_sys_init+0x120>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	4053      	eors	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <my_sys_init+0x124>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <my_sys_init+0x128>)
 80031b4:	22e1      	movs	r2, #225	; 0xe1
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <my_sys_init+0x12c>)
 80031bc:	2278      	movs	r2, #120	; 0x78
 80031be:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <my_sys_init+0x130>)
 80031c2:	221e      	movs	r2, #30
 80031c4:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031c6:	4921      	ldr	r1, [pc, #132]	; (800324c <my_sys_init+0x134>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	600a      	str	r2, [r1, #0]
 80031d0:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <my_sys_init+0x11c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4053      	eors	r3, r2
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <my_sys_init+0xf6>
 80031e0:	4b15      	ldr	r3, [pc, #84]	; (8003238 <my_sys_init+0x120>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <my_sys_init+0x124>)
 80031ea:	2202      	movs	r2, #2
 80031ec:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <my_sys_init+0x128>)
 80031f0:	2296      	movs	r2, #150	; 0x96
 80031f2:	0052      	lsls	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <my_sys_init+0x12c>)
 80031f8:	2296      	movs	r2, #150	; 0x96
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <my_sys_init+0x130>)
 8003200:	223c      	movs	r2, #60	; 0x3c
 8003202:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003204:	4911      	ldr	r1, [pc, #68]	; (800324c <my_sys_init+0x134>)
 8003206:	2200      	movs	r2, #0
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <my_sys_init+0x138>)
 800320a:	600a      	str	r2, [r1, #0]
 800320c:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <my_sys_init+0x11c>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <my_sys_init+0x10c>
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <my_sys_init+0x120>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <my_sys_init+0x124>)
 8003220:	2203      	movs	r2, #3
 8003222:	701a      	strb	r2, [r3, #0]
	}
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	20000af0 	.word	0x20000af0
 8003230:	50000c00 	.word	0x50000c00
 8003234:	20000a20 	.word	0x20000a20
 8003238:	20000a21 	.word	0x20000a21
 800323c:	20000a22 	.word	0x20000a22
 8003240:	2000000c 	.word	0x2000000c
 8003244:	2000001a 	.word	0x2000001a
 8003248:	2000001c 	.word	0x2000001c
 800324c:	20000020 	.word	0x20000020
 8003250:	40240000 	.word	0x40240000

08003254 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b083      	sub	sp, #12
 8003258:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <my_sys_restart+0x34>)
 800325c:	0018      	movs	r0, r3
 800325e:	f007 fed1 	bl	800b004 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003262:	4c0a      	ldr	r4, [pc, #40]	; (800328c <my_sys_restart+0x38>)
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <my_sys_restart+0x3c>)
 8003266:	490b      	ldr	r1, [pc, #44]	; (8003294 <my_sys_restart+0x40>)
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <my_sys_restart+0x44>)
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <my_sys_restart+0x34>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	0023      	movs	r3, r4
 8003270:	f00a f92c 	bl	800d4cc <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <my_sys_restart+0x44>)
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff ff1e 	bl	80030b8 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 800327c:	f001 fad3 	bl	8004826 <HAL_NVIC_SystemReset>
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b001      	add	sp, #4
 8003286:	bd90      	pop	{r4, r7, pc}
 8003288:	20000a24 	.word	0x20000a24
 800328c:	00000355 	.word	0x00000355
 8003290:	08014100 	.word	0x08014100
 8003294:	0801420c 	.word	0x0801420c
 8003298:	20000b2c 	.word	0x20000b2c

0800329c <my_sys_sleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_sleep ( char* m )
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b085      	sub	sp, #20
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	6078      	str	r0, [r7, #4]
	send_debug_logs ( m ) ;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff ff06 	bl	80030b8 <send_debug_logs>
	my_tim_stop () ;
 80032ac:	f000 fd1a 	bl	8003ce4 <my_tim_stop>
	HAL_SuspendTick () ;
 80032b0:	f001 f9a4 	bl	80045fc <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <my_sys_sleep+0x58>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	01db      	lsls	r3, r3, #7
 80032be:	2102      	movs	r1, #2
 80032c0:	0018      	movs	r0, r3
 80032c2:	f001 fd81 	bl	8004dc8 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 80032c6:	f001 f9a7 	bl	8004618 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80032ca:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <my_sys_sleep+0x5c>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f007 fe99 	bl	800b004 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s,Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80032d2:	4c0a      	ldr	r4, [pc, #40]	; (80032fc <my_sys_sleep+0x60>)
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <my_sys_sleep+0x64>)
 80032d6:	490b      	ldr	r1, [pc, #44]	; (8003304 <my_sys_sleep+0x68>)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <my_sys_sleep+0x5c>)
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	0023      	movs	r3, r4
 80032e0:	f00a f8f4 	bl	800d4cc <sprintf>
	send_debug_logs ( m ) ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff fee6 	bl	80030b8 <send_debug_logs>
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b003      	add	sp, #12
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	20000b1a 	.word	0x20000b1a
 80032f8:	20000a24 	.word	0x20000a24
 80032fc:	0000036f 	.word	0x0000036f
 8003300:	08014100 	.word	0x08014100
 8003304:	0801426c 	.word	0x0801426c

08003308 <my_sys_change_watchdog_time_ths>:
	sprintf ( m , "%s,%d,%s,Wake-up" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( m ) ;
}

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	2396      	movs	r3, #150	; 0x96
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	429a      	cmp	r2, r3
 8003318:	d30b      	bcc.n	8003332 <my_sys_change_watchdog_time_ths+0x2a>
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	23e1      	movs	r3, #225	; 0xe1
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	429a      	cmp	r2, r3
 8003322:	d806      	bhi.n	8003332 <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <my_sys_change_watchdog_time_ths+0x34>)
 800332a:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <my_sys_change_watchdog_time_ths+0x38>)
 800332e:	2201      	movs	r2, #1
 8003330:	721a      	strb	r2, [r3, #8]
	}
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	20000008 	.word	0x20000008
 8003340:	20000ad8 	.word	0x20000ad8

08003344 <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	2396      	movs	r3, #150	; 0x96
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	429a      	cmp	r2, r3
 8003354:	d309      	bcc.n	800336a <my_sys_change_AlarmA_time+0x26>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a06      	ldr	r2, [pc, #24]	; (8003374 <my_sys_change_AlarmA_time+0x30>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d805      	bhi.n	800336a <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <my_sys_change_AlarmA_time+0x34>)
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <my_sys_change_AlarmA_time+0x38>)
 8003366:	2201      	movs	r2, #1
 8003368:	721a      	strb	r2, [r3, #8]
	}
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	0083d600 	.word	0x0083d600
 8003378:	2000000c 	.word	0x2000000c
 800337c:	20000ad8 	.word	0x20000ad8

08003380 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b2c      	cmp	r3, #44	; 0x2c
 800338c:	d90b      	bls.n	80033a6 <my_sys_change_fix_acq_ths+0x26>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	2396      	movs	r3, #150	; 0x96
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d806      	bhi.n	80033a6 <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	b29a      	uxth	r2, r3
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <my_sys_change_fix_acq_ths+0x30>)
 800339e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <my_sys_change_fix_acq_ths+0x34>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	721a      	strb	r2, [r3, #8]
	}
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	2000001a 	.word	0x2000001a
 80033b4:	20000ad8 	.word	0x20000ad8

080033b8 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b0e      	cmp	r3, #14
 80033c4:	d90b      	bls.n	80033de <my_sys_change_min_tns_time_ths+0x26>
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	2396      	movs	r3, #150	; 0x96
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d806      	bhi.n	80033de <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <my_sys_change_min_tns_time_ths+0x30>)
 80033d6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <my_sys_change_min_tns_time_ths+0x34>)
 80033da:	2201      	movs	r2, #1
 80033dc:	721a      	strb	r2, [r3, #8]
	}
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000001c 	.word	0x2000001c
 80033ec:	20000ad8 	.word	0x20000ad8

080033f0 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <my_sys_change_pdop_ths+0x2a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d80a      	bhi.n	800341a <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe fff9 	bl	80023fc <__aeabi_ui2d>
 800340a:	0002      	movs	r2, r0
 800340c:	000b      	movs	r3, r1
 800340e:	4905      	ldr	r1, [pc, #20]	; (8003424 <my_sys_change_pdop_ths+0x34>)
 8003410:	600a      	str	r2, [r1, #0]
 8003412:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 8003414:	4b04      	ldr	r3, [pc, #16]	; (8003428 <my_sys_change_pdop_ths+0x38>)
 8003416:	2201      	movs	r2, #1
 8003418:	721a      	strb	r2, [r3, #8]
	}
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000020 	.word	0x20000020
 8003428:	20000ad8 	.word	0x20000ad8

0800342c <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 800342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342e:	46d6      	mov	lr, sl
 8003430:	464f      	mov	r7, r9
 8003432:	4646      	mov	r6, r8
 8003434:	b5c0      	push	{r6, r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 800343a:	4be8      	ldr	r3, [pc, #928]	; (80037dc <my_tracker_handle_cmd+0x3b0>)
 800343c:	0018      	movs	r0, r3
 800343e:	f008 fd07 	bl	800be50 <my_tracker_api_is_cmd>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d100      	bne.n	8003448 <my_tracker_handle_cmd+0x1c>
 8003446:	e202      	b.n	800384e <my_tracker_handle_cmd+0x422>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003448:	4ae4      	ldr	r2, [pc, #912]	; (80037dc <my_tracker_handle_cmd+0x3b0>)
 800344a:	4be5      	ldr	r3, [pc, #916]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800344c:	0011      	movs	r1, r2
 800344e:	0018      	movs	r0, r3
 8003450:	f008 fd68 	bl	800bf24 <my_tracker_api_parse_cmd>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d100      	bne.n	800345a <my_tracker_handle_cmd+0x2e>
 8003458:	e1f9      	b.n	800384e <my_tracker_handle_cmd+0x422>
		{
			switch ( my_astro_cmd.code )
 800345a:	4be1      	ldr	r3, [pc, #900]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b09      	cmp	r3, #9
 8003460:	d900      	bls.n	8003464 <my_tracker_handle_cmd+0x38>
 8003462:	e189      	b.n	8003778 <my_tracker_handle_cmd+0x34c>
 8003464:	009a      	lsls	r2, r3, #2
 8003466:	4bdf      	ldr	r3, [pc, #892]	; (80037e4 <my_tracker_handle_cmd+0x3b8>)
 8003468:	18d3      	adds	r3, r2, r3
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 800346e:	4bdc      	ldr	r3, [pc, #880]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff ff48 	bl	8003308 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003478:	4bdb      	ldr	r3, [pc, #876]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	001c      	movs	r4, r3
 800347e:	4bd8      	ldr	r3, [pc, #864]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003480:	7a1b      	ldrb	r3, [r3, #8]
 8003482:	001d      	movs	r5, r3
 8003484:	4bd6      	ldr	r3, [pc, #856]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	001a      	movs	r2, r3
 800348a:	4bd5      	ldr	r3, [pc, #852]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	49d7      	ldr	r1, [pc, #860]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 8003490:	48d7      	ldr	r0, [pc, #860]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	9200      	str	r2, [sp, #0]
 8003496:	002b      	movs	r3, r5
 8003498:	0022      	movs	r2, r4
 800349a:	f00a f817 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800349e:	4cd5      	ldr	r4, [pc, #852]	; (80037f4 <my_tracker_handle_cmd+0x3c8>)
 80034a0:	4ad5      	ldr	r2, [pc, #852]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 80034a2:	49d6      	ldr	r1, [pc, #856]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 80034a4:	48d6      	ldr	r0, [pc, #856]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80034a6:	4bd2      	ldr	r3, [pc, #840]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	0023      	movs	r3, r4
 80034ac:	f00a f80e 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034b0:	4bd3      	ldr	r3, [pc, #844]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fe00 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80034b8:	4bcb      	ldr	r3, [pc, #812]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	b291      	uxth	r1, r2
 80034c0:	4ac9      	ldr	r2, [pc, #804]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80034c2:	8011      	strh	r1, [r2, #0]
 80034c4:	4aca      	ldr	r2, [pc, #808]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f007 fb9b 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80034ce:	f000 fb37 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  break ;
 80034d2:	e1bc      	b.n	800384e <my_tracker_handle_cmd+0x422>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 80034d4:	4bc2      	ldr	r3, [pc, #776]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff ff33 	bl	8003344 <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034de:	4bc2      	ldr	r3, [pc, #776]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	001c      	movs	r4, r3
 80034e4:	4bbe      	ldr	r3, [pc, #760]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80034e6:	7a1b      	ldrb	r3, [r3, #8]
 80034e8:	001d      	movs	r5, r3
 80034ea:	4bbd      	ldr	r3, [pc, #756]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	001a      	movs	r2, r3
 80034f0:	4bbb      	ldr	r3, [pc, #748]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	49bd      	ldr	r1, [pc, #756]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 80034f6:	48be      	ldr	r0, [pc, #760]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	9200      	str	r2, [sp, #0]
 80034fc:	002b      	movs	r3, r5
 80034fe:	0022      	movs	r2, r4
 8003500:	f009 ffe4 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003504:	4cbf      	ldr	r4, [pc, #764]	; (8003804 <my_tracker_handle_cmd+0x3d8>)
 8003506:	4abc      	ldr	r2, [pc, #752]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 8003508:	49bc      	ldr	r1, [pc, #752]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 800350a:	48bd      	ldr	r0, [pc, #756]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 800350c:	4bb8      	ldr	r3, [pc, #736]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	0023      	movs	r3, r4
 8003512:	f009 ffdb 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003516:	4bba      	ldr	r3, [pc, #744]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff fdcd 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800351e:	4bb2      	ldr	r3, [pc, #712]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	b291      	uxth	r1, r2
 8003526:	4ab0      	ldr	r2, [pc, #704]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003528:	8011      	strh	r1, [r2, #0]
 800352a:	4ab1      	ldr	r2, [pc, #708]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f007 fb68 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003534:	f000 fb04 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  break ;
 8003538:	e189      	b.n	800384e <my_tracker_handle_cmd+0x422>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 800353a:	4ba9      	ldr	r3, [pc, #676]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff ff1e 	bl	8003380 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003544:	4ba8      	ldr	r3, [pc, #672]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	001c      	movs	r4, r3
 800354a:	4ba5      	ldr	r3, [pc, #660]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800354c:	7a1b      	ldrb	r3, [r3, #8]
 800354e:	001d      	movs	r5, r3
 8003550:	4ba3      	ldr	r3, [pc, #652]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	001a      	movs	r2, r3
 8003556:	4ba2      	ldr	r3, [pc, #648]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	49a4      	ldr	r1, [pc, #656]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 800355c:	48a4      	ldr	r0, [pc, #656]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	9200      	str	r2, [sp, #0]
 8003562:	002b      	movs	r3, r5
 8003564:	0022      	movs	r2, r4
 8003566:	f009 ffb1 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800356a:	4ca7      	ldr	r4, [pc, #668]	; (8003808 <my_tracker_handle_cmd+0x3dc>)
 800356c:	4aa2      	ldr	r2, [pc, #648]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 800356e:	49a3      	ldr	r1, [pc, #652]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 8003570:	48a3      	ldr	r0, [pc, #652]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 8003572:	4b9f      	ldr	r3, [pc, #636]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	0023      	movs	r3, r4
 8003578:	f009 ffa8 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800357c:	4ba0      	ldr	r3, [pc, #640]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 800357e:	0018      	movs	r0, r3
 8003580:	f7ff fd9a 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003584:	4b98      	ldr	r3, [pc, #608]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	b291      	uxth	r1, r2
 800358c:	4a96      	ldr	r2, [pc, #600]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 800358e:	8011      	strh	r1, [r2, #0]
 8003590:	4a97      	ldr	r2, [pc, #604]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f007 fb35 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800359a:	f000 fad1 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  break ;
 800359e:	e156      	b.n	800384e <my_tracker_handle_cmd+0x422>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 80035a0:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff ff07 	bl	80033b8 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035aa:	4b8f      	ldr	r3, [pc, #572]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	001c      	movs	r4, r3
 80035b0:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80035b2:	7a1b      	ldrb	r3, [r3, #8]
 80035b4:	001d      	movs	r5, r3
 80035b6:	4b8a      	ldr	r3, [pc, #552]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	001a      	movs	r2, r3
 80035bc:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	498a      	ldr	r1, [pc, #552]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 80035c2:	488b      	ldr	r0, [pc, #556]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	9200      	str	r2, [sp, #0]
 80035c8:	002b      	movs	r3, r5
 80035ca:	0022      	movs	r2, r4
 80035cc:	f009 ff7e 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035d0:	4c8e      	ldr	r4, [pc, #568]	; (800380c <my_tracker_handle_cmd+0x3e0>)
 80035d2:	4a89      	ldr	r2, [pc, #548]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 80035d4:	4989      	ldr	r1, [pc, #548]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 80035d6:	488a      	ldr	r0, [pc, #552]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80035d8:	4b85      	ldr	r3, [pc, #532]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	0023      	movs	r3, r4
 80035de:	f009 ff75 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035e2:	4b87      	ldr	r3, [pc, #540]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7ff fd67 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	b291      	uxth	r1, r2
 80035f2:	4a7d      	ldr	r2, [pc, #500]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80035f4:	8011      	strh	r1, [r2, #0]
 80035f6:	4a7e      	ldr	r2, [pc, #504]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f007 fb02 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003600:	f000 fa9e 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  break ;
 8003604:	e123      	b.n	800384e <my_tracker_handle_cmd+0x422>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 8003606:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff fef0 	bl	80033f0 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003610:	4b75      	ldr	r3, [pc, #468]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	001c      	movs	r4, r3
 8003616:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003618:	7a1b      	ldrb	r3, [r3, #8]
 800361a:	001d      	movs	r5, r3
 800361c:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4971      	ldr	r1, [pc, #452]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 8003628:	4871      	ldr	r0, [pc, #452]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	9200      	str	r2, [sp, #0]
 800362e:	002b      	movs	r3, r5
 8003630:	0022      	movs	r2, r4
 8003632:	f009 ff4b 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003636:	4c76      	ldr	r4, [pc, #472]	; (8003810 <my_tracker_handle_cmd+0x3e4>)
 8003638:	4a6f      	ldr	r2, [pc, #444]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 800363a:	4970      	ldr	r1, [pc, #448]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 800363c:	4870      	ldr	r0, [pc, #448]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 800363e:	4b6c      	ldr	r3, [pc, #432]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0023      	movs	r3, r4
 8003644:	f009 ff42 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003648:	4b6d      	ldr	r3, [pc, #436]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fd34 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003650:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	b291      	uxth	r1, r2
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 800365a:	8011      	strh	r1, [r2, #0]
 800365c:	4a64      	ldr	r2, [pc, #400]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f007 facf 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003666:	f000 fa6b 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  break ;
 800366a:	e0f0      	b.n	800384e <my_tracker_handle_cmd+0x422>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 800366c:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d140      	bne.n	80036f6 <my_tracker_handle_cmd+0x2ca>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 8003674:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	469a      	mov	sl, r3
 800367a:	4b66      	ldr	r3, [pc, #408]	; (8003814 <my_tracker_handle_cmd+0x3e8>)
 800367c:	681d      	ldr	r5, [r3, #0]
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <my_tracker_handle_cmd+0x3ec>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001e      	movs	r6, r3
 8003684:	4b65      	ldr	r3, [pc, #404]	; (800381c <my_tracker_handle_cmd+0x3f0>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	469c      	mov	ip, r3
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <my_tracker_handle_cmd+0x3f4>)
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	4b65      	ldr	r3, [pc, #404]	; (8003824 <my_tracker_handle_cmd+0x3f8>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	4698      	mov	r8, r3
 8003694:	4b64      	ldr	r3, [pc, #400]	; (8003828 <my_tracker_handle_cmd+0x3fc>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	4699      	mov	r9, r3
 800369a:	4b64      	ldr	r3, [pc, #400]	; (800382c <my_tracker_handle_cmd+0x400>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4c63      	ldr	r4, [pc, #396]	; (8003830 <my_tracker_handle_cmd+0x404>)
 80036a2:	4853      	ldr	r0, [pc, #332]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80036a4:	9206      	str	r2, [sp, #24]
 80036a6:	9307      	str	r3, [sp, #28]
 80036a8:	464b      	mov	r3, r9
 80036aa:	9304      	str	r3, [sp, #16]
 80036ac:	4643      	mov	r3, r8
 80036ae:	9303      	str	r3, [sp, #12]
 80036b0:	9102      	str	r1, [sp, #8]
 80036b2:	4663      	mov	r3, ip
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	9600      	str	r6, [sp, #0]
 80036b8:	002b      	movs	r3, r5
 80036ba:	4652      	mov	r2, sl
 80036bc:	0021      	movs	r1, r4
 80036be:	f009 ff05 	bl	800d4cc <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80036c2:	4c5c      	ldr	r4, [pc, #368]	; (8003834 <my_tracker_handle_cmd+0x408>)
 80036c4:	4a4c      	ldr	r2, [pc, #304]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 80036c6:	494d      	ldr	r1, [pc, #308]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 80036c8:	484d      	ldr	r0, [pc, #308]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80036ca:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	0023      	movs	r3, r4
 80036d0:	f009 fefc 	bl	800d4cc <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff fcee 	bl	80030b8 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80036dc:	4b42      	ldr	r3, [pc, #264]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	b291      	uxth	r1, r2
 80036e4:	4a40      	ldr	r2, [pc, #256]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80036e6:	8011      	strh	r1, [r2, #0]
 80036e8:	4a41      	ldr	r2, [pc, #260]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80036ea:	0011      	movs	r1, r2
 80036ec:	0018      	movs	r0, r3
 80036ee:	f007 fa89 	bl	800ac04 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 80036f2:	f000 fa25 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  }
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_COURSE )
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d16c      	bne.n	80037d8 <my_tracker_handle_cmd+0x3ac>
				  {
					  iis2dh_temperature_raw_get ( &my_acc_ctx , &my_acc_temp ) ;
 80036fe:	4a4e      	ldr	r2, [pc, #312]	; (8003838 <my_tracker_handle_cmd+0x40c>)
 8003700:	4b4e      	ldr	r3, [pc, #312]	; (800383c <my_tracker_handle_cmd+0x410>)
 8003702:	0011      	movs	r1, r2
 8003704:	0018      	movs	r0, r3
 8003706:	f007 f8b7 	bl	800a878 <iis2dh_temperature_raw_get>
					  sprintf ( my_astro_payload , "%u,%lu,%d" , uplink_id , (uint32_t) ( fix3d.acq_total_time / 60 ) , my_acc_temp ) ;
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	001c      	movs	r4, r3
 8003710:	4b4b      	ldr	r3, [pc, #300]	; (8003840 <my_tracker_handle_cmd+0x414>)
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	213c      	movs	r1, #60	; 0x3c
 8003716:	0018      	movs	r0, r3
 8003718:	f7fc fd10 	bl	800013c <__udivsi3>
 800371c:	0003      	movs	r3, r0
 800371e:	001a      	movs	r2, r3
 8003720:	4b45      	ldr	r3, [pc, #276]	; (8003838 <my_tracker_handle_cmd+0x40c>)
 8003722:	2100      	movs	r1, #0
 8003724:	5e5b      	ldrsh	r3, [r3, r1]
 8003726:	4947      	ldr	r1, [pc, #284]	; (8003844 <my_tracker_handle_cmd+0x418>)
 8003728:	4831      	ldr	r0, [pc, #196]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0013      	movs	r3, r2
 800372e:	0022      	movs	r2, r4
 8003730:	f009 fecc 	bl	800d4cc <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003734:	4c44      	ldr	r4, [pc, #272]	; (8003848 <my_tracker_handle_cmd+0x41c>)
 8003736:	4a30      	ldr	r2, [pc, #192]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 8003738:	4930      	ldr	r1, [pc, #192]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 800373a:	4831      	ldr	r0, [pc, #196]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	0023      	movs	r3, r4
 8003742:	f009 fec3 	bl	800d4cc <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff fcb5 	bl	80030b8 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	b291      	uxth	r1, r2
 8003756:	4a24      	ldr	r2, [pc, #144]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 8003758:	8011      	strh	r1, [r2, #0]
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f007 fa50 	bl	800ac04 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 8003764:	f000 f9ec 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 8003768:	e036      	b.n	80037d8 <my_tracker_handle_cmd+0x3ac>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d16c      	bne.n	800384c <my_tracker_handle_cmd+0x420>
					  my_sys_restart () ;
 8003772:	f7ff fd6f 	bl	8003254 <my_sys_restart>
				  break ;
 8003776:	e069      	b.n	800384c <my_tracker_handle_cmd+0x420>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	001c      	movs	r4, r3
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003780:	7a1b      	ldrb	r3, [r3, #8]
 8003782:	001d      	movs	r5, r3
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	001a      	movs	r2, r3
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <my_tracker_handle_cmd+0x3b4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4917      	ldr	r1, [pc, #92]	; (80037ec <my_tracker_handle_cmd+0x3c0>)
 8003790:	4817      	ldr	r0, [pc, #92]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	9200      	str	r2, [sp, #0]
 8003796:	002b      	movs	r3, r5
 8003798:	0022      	movs	r2, r4
 800379a:	f009 fe97 	bl	800d4cc <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800379e:	23fd      	movs	r3, #253	; 0xfd
 80037a0:	009c      	lsls	r4, r3, #2
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <my_tracker_handle_cmd+0x3cc>)
 80037a4:	4915      	ldr	r1, [pc, #84]	; (80037fc <my_tracker_handle_cmd+0x3d0>)
 80037a6:	4816      	ldr	r0, [pc, #88]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	0023      	movs	r3, r4
 80037ae:	f009 fe8d 	bl	800d4cc <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <my_tracker_handle_cmd+0x3d4>)
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7ff fc7f 	bl	80030b8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	b291      	uxth	r1, r2
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <my_tracker_handle_cmd+0x3bc>)
 80037c4:	8011      	strh	r1, [r2, #0]
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <my_tracker_handle_cmd+0x3c4>)
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f007 fa1a 	bl	800ac04 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80037d0:	f000 f9b6 	bl	8003b40 <my_astro_turn_payload_id_counter>
				  return false ;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e03b      	b.n	8003850 <my_tracker_handle_cmd+0x424>
				  break ;
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	e038      	b.n	800384e <my_tracker_handle_cmd+0x422>
 80037dc:	20000c28 	.word	0x20000c28
 80037e0:	20000ad8 	.word	0x20000ad8
 80037e4:	08015c38 	.word	0x08015c38
 80037e8:	20000ae4 	.word	0x20000ae4
 80037ec:	08014280 	.word	0x08014280
 80037f0:	20000a38 	.word	0x20000a38
 80037f4:	000003b5 	.word	0x000003b5
 80037f8:	08014100 	.word	0x08014100
 80037fc:	080141b0 	.word	0x080141b0
 8003800:	20000b2c 	.word	0x20000b2c
 8003804:	000003bd 	.word	0x000003bd
 8003808:	000003c5 	.word	0x000003c5
 800380c:	000003cd 	.word	0x000003cd
 8003810:	000003d5 	.word	0x000003d5
 8003814:	20000004 	.word	0x20000004
 8003818:	20000a22 	.word	0x20000a22
 800381c:	20000008 	.word	0x20000008
 8003820:	2000000c 	.word	0x2000000c
 8003824:	2000001a 	.word	0x2000001a
 8003828:	2000001c 	.word	0x2000001c
 800382c:	20000020 	.word	0x20000020
 8003830:	08014290 	.word	0x08014290
 8003834:	000003de 	.word	0x000003de
 8003838:	20000b18 	.word	0x20000b18
 800383c:	20000b08 	.word	0x20000b08
 8003840:	20000af0 	.word	0x20000af0
 8003844:	080142ac 	.word	0x080142ac
 8003848:	000003e7 	.word	0x000003e7
				  break ;
 800384c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 800384e:	2301      	movs	r3, #1
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	bce0      	pop	{r5, r6, r7}
 8003856:	46ba      	mov	sl, r7
 8003858:	46b1      	mov	r9, r6
 800385a:	46a8      	mov	r8, r5
 800385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)

08003860 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 800386c:	1dfb      	adds	r3, r7, #7
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10e      	bne.n	8003892 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4811      	ldr	r0, [pc, #68]	; (80038c0 <my_ant_sw_pos+0x60>)
 800387a:	2200      	movs	r2, #0
 800387c:	0019      	movs	r1, r3
 800387e:	f001 fa44 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	480e      	ldr	r0, [pc, #56]	; (80038c0 <my_ant_sw_pos+0x60>)
 8003888:	2201      	movs	r2, #1
 800388a:	0019      	movs	r1, r3
 800388c:	f001 fa3d 	bl	8004d0a <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003890:	e011      	b.n	80038b6 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d10d      	bne.n	80038b6 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	4808      	ldr	r0, [pc, #32]	; (80038c0 <my_ant_sw_pos+0x60>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	0019      	movs	r1, r3
 80038a4:	f001 fa31 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4804      	ldr	r0, [pc, #16]	; (80038c0 <my_ant_sw_pos+0x60>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	0019      	movs	r1, r3
 80038b2:	f001 fa2a 	bl	8004d0a <HAL_GPIO_WritePin>
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	50000400 	.word	0x50000400

080038c4 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 80038c8:	2001      	movs	r0, #1
 80038ca:	f7ff ffc9 	bl	8003860 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	4808      	ldr	r0, [pc, #32]	; (80038f4 <my_gnss_sw_on+0x30>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	0019      	movs	r1, r3
 80038d8:	f001 fa17 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	4804      	ldr	r0, [pc, #16]	; (80038f4 <my_gnss_sw_on+0x30>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	0019      	movs	r1, r3
 80038e6:	f001 fa10 	bl	8004d0a <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80038ea:	f7ff faa5 	bl	8002e38 <MX_USART5_UART_Init>
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	50000400 	.word	0x50000400

080038f8 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80038fc:	2002      	movs	r0, #2
 80038fe:	f7ff ffaf 	bl	8003860 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <my_gnss_sw_off+0x3c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d811      	bhi.n	800392e <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	480a      	ldr	r0, [pc, #40]	; (8003938 <my_gnss_sw_off+0x40>)
 8003910:	2200      	movs	r2, #0
 8003912:	0019      	movs	r1, r3
 8003914:	f001 f9f9 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	019b      	lsls	r3, r3, #6
 800391c:	4806      	ldr	r0, [pc, #24]	; (8003938 <my_gnss_sw_off+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	0019      	movs	r1, r3
 8003922:	f001 f9f2 	bl	8004d0a <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <my_gnss_sw_off+0x44>)
 8003928:	0018      	movs	r0, r3
 800392a:	f004 fa29 	bl	8007d80 <HAL_UART_DeInit>
	}
}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000a22 	.word	0x20000a22
 8003938:	50000400 	.word	0x50000400
 800393c:	2000098c 	.word	0x2000098c

08003940 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	000a      	movs	r2, r1
 800394a:	1cfb      	adds	r3, r7, #3
 800394c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 800394e:	23fa      	movs	r3, #250	; 0xfa
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4809      	ldr	r0, [pc, #36]	; (800397c <my_gnss_receive_byte+0x3c>)
 8003956:	2201      	movs	r2, #1
 8003958:	f004 faf6 	bl	8007f48 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <my_gnss_receive_byte+0x40>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003964:	23fa      	movs	r3, #250	; 0xfa
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <my_gnss_receive_byte+0x44>)
 800396c:	2201      	movs	r2, #1
 800396e:	f004 fa47 	bl	8007e00 <HAL_UART_Transmit>
}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	2000098c 	.word	0x2000098c
 8003980:	20000a22 	.word	0x20000a22
 8003984:	20000864 	.word	0x20000864

08003988 <my_acc_init>:
	  my_gnss_sw_off () ;
}

// ACC
bool my_acc_init ( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <my_acc_init+0x40>)
 8003996:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <my_acc_init+0x44>)
 8003998:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <my_acc_init+0x40>)
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <my_acc_init+0x48>)
 800399e:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <my_acc_init+0x40>)
 80039a2:	4a0c      	ldr	r2, [pc, #48]	; (80039d4 <my_acc_init+0x4c>)
 80039a4:	60da      	str	r2, [r3, #12]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 80039a6:	1dfa      	adds	r2, r7, #7
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <my_acc_init+0x40>)
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f007 f851 	bl	800aa54 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b33      	cmp	r3, #51	; 0x33
 80039b8:	d001      	beq.n	80039be <my_acc_init+0x36>
		return false ;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <my_acc_init+0x38>

	return true ;
 80039be:	2301      	movs	r3, #1
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000b08 	.word	0x20000b08
 80039cc:	08003bc9 	.word	0x08003bc9
 80039d0:	08003c33 	.word	0x08003c33
 80039d4:	20000720 	.word	0x20000720

080039d8 <my_acc_start>:

bool my_acc_start ( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 80039e4:	1dfa      	adds	r2, r7, #7
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <my_acc_start+0x6c>)
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f007 f832 	bl	800aa54 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b33      	cmp	r3, #51	; 0x33
 80039f6:	d001      	beq.n	80039fc <my_acc_start+0x24>
		return false ;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e01e      	b.n	8003a3a <my_acc_start+0x62>

	//  Configuration: 2g, LP and 25Hz gives 4 uA of ACC power consumption
	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ; // FS bits [ 2 g - 16 g ]
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <my_acc_start+0x6c>)
 80039fe:	2100      	movs	r1, #0
 8003a00:	0018      	movs	r0, r3
 8003a02:	f006 fff7 	bl	800a9f4 <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ; // [ High Resolution , Normal Mode , Low Power]
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <my_acc_start+0x6c>)
 8003a08:	2102      	movs	r1, #2
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f006 ff5b 	bl	800a8c6 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ; // Below 25Hz it will be hard to calculate free-fall
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <my_acc_start+0x6c>)
 8003a12:	2102      	movs	r1, #2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f006 ffbf 	bl	800a998 <iis2dh_data_rate_set>
	iis2dh_fifo_mode_set ( &my_acc_ctx , IIS2DH_FIFO_MODE ) ; // FIFO mode allows consistent power saving for the system, since the host processor does not need to	continuously poll data from the sensor, but it can wake up only when needed and burst the significant data out from the FIFO.
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <my_acc_start+0x6c>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f007 f88a 	bl	800ab38 <iis2dh_fifo_mode_set>
	// iis2dh_temperature_meas_set( &my_acc_ctx , IIS2DH_TEMP_ENABLE ) ;
	// To retrieve the temperature sensor data the BDU bit in CTRL_REG4 (23h) must be set to 1.
	// iis2dh_block_data_update_set ( &my_acc_ctx , PROPERTY_ENABLE ) ;

	// Interrupt request on INT1_SRC (31h) and INT2_SRC (35h) latched. Register cleared by reading INTx_SRC itself.
	iis2dh_int1_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <my_acc_start+0x6c>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f007 f855 	bl	800aad8 <iis2dh_int1_pin_notification_mode_set>
	iis2dh_int2_pin_notification_mode_set ( &my_acc_ctx , IIS2DH_INT2_LATCHED ) ;
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <my_acc_start+0x6c>)
 8003a30:	2101      	movs	r1, #1
 8003a32:	0018      	movs	r0, r3
 8003a34:	f007 f820 	bl	800aa78 <iis2dh_int2_pin_notification_mode_set>

	// The IIS2DH may also be configured to generate an inertial wake-up and free-fall interrupt signal according to a programmed acceleration event along the enabled axes. Both free-fall and wake-up can be available simultaneously on two different pins.


	return true ;
 8003a38:	2301      	movs	r3, #1
}
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	20000b08 	.word	0x20000b08

08003a48 <my_astronode_reset>:
}

/* ************************************* */
// ASTRO Operations
void my_astronode_reset ( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <my_astronode_reset+0x30>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2102      	movs	r1, #2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f001 f959 	bl	8004d0a <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f000 fdab 	bl	80045b4 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <my_astronode_reset+0x30>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	2102      	movs	r1, #2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f001 f950 	bl	8004d0a <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003a6a:	20fa      	movs	r0, #250	; 0xfa
 8003a6c:	f000 fda2 	bl	80045b4 <HAL_Delay>
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	50000400 	.word	0x50000400

08003a7c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <send_astronode_request+0x34>)
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff fb15 	bl	80030b8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f7ff fb11 	bl	80030b8 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	23fa      	movs	r3, #250	; 0xfa
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <send_astronode_request+0x38>)
 8003aa2:	f004 f9ad 	bl	8007e00 <HAL_UART_Transmit>
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b002      	add	sp, #8
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	080142c0 	.word	0x080142c0
 8003ab4:	200008f8 	.word	0x200008f8

08003ab8 <get_systick>:
uint32_t get_systick ( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003abc:	f000 fd70 	bl	80045a0 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003ad6:	f7ff ffef 	bl	8003ab8 <get_systick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	1cba      	adds	r2, r7, #2
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	419b      	sbcs	r3, r3
 8003ae8:	425b      	negs	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4806      	ldr	r0, [pc, #24]	; (8003b18 <is_astronode_character_received+0x24>)
 8003b00:	2364      	movs	r3, #100	; 0x64
 8003b02:	2201      	movs	r2, #1
 8003b04:	f004 fa20 	bl	8007f48 <HAL_UART_Receive>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	425a      	negs	r2, r3
 8003b0c:	4153      	adcs	r3, r2
 8003b0e:	b2db      	uxtb	r3, r3
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	200008f8 	.word	0x200008f8

08003b1c <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <my_astro_evt_pin+0x20>)
 8003b22:	2104      	movs	r1, #4
 8003b24:	0018      	movs	r0, r3
 8003b26:	f001 f8d3 	bl	8004cd0 <HAL_GPIO_ReadPin>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	425a      	negs	r2, r3
 8003b30:	4153      	adcs	r3, r2
 8003b32:	b2db      	uxtb	r3, r3
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	50000400 	.word	0x50000400

08003b40 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <my_astro_turn_payload_id_counter+0x18>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b63      	cmp	r3, #99	; 0x63
 8003b4a:	d902      	bls.n	8003b52 <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <my_astro_turn_payload_id_counter+0x18>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	801a      	strh	r2, [r3, #0]
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000ae4 	.word	0x20000ae4

08003b5c <my_astro_send_uplink>:
void my_astro_send_uplink ( char* p , char* m )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
	if ( uplink_id == 0 && sys_mode != 0 ) // Present sys_mode in welcome uplink message if mode is other than production
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <my_astro_send_uplink+0x5c>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <my_astro_send_uplink+0x28>
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <my_astro_send_uplink+0x60>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <my_astro_send_uplink+0x28>
		sprintf ( p , "%s,%u" , p , (uint16_t) sys_mode ) ;
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <my_astro_send_uplink+0x60>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4910      	ldr	r1, [pc, #64]	; (8003bc0 <my_astro_send_uplink+0x64>)
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f009 fca4 	bl	800d4cc <sprintf>
	my_astro_add_payload_2_queue ( uplink_id++ , p ) ;
 8003b84:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <my_astro_send_uplink+0x5c>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	b291      	uxth	r1, r2
 8003b8c:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <my_astro_send_uplink+0x5c>)
 8003b8e:	8011      	strh	r1, [r2, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	0011      	movs	r1, r2
 8003b94:	0018      	movs	r0, r3
 8003b96:	f007 f835 	bl	800ac04 <my_astro_add_payload_2_queue>
	my_astro_turn_payload_id_counter () ;
 8003b9a:	f7ff ffd1 	bl	8003b40 <my_astro_turn_payload_id_counter>
	last_uplink_send_ts = my_rtc_get_ts () ;
 8003b9e:	f007 fa73 	bl	800b088 <my_rtc_get_ts>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <my_astro_send_uplink+0x68>)
 8003ba6:	601a      	str	r2, [r3, #0]
	send_debug_logs ( m ) ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff fa84 	bl	80030b8 <send_debug_logs>
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000ae4 	.word	0x20000ae4
 8003bbc:	20000a22 	.word	0x20000a22
 8003bc0:	080142e4 	.word	0x080142e4
 8003bc4:	20000ae8 	.word	0x20000ae8

08003bc8 <my_st_acc_platform_write>:

/* ************************************* */
// ACC LL Function

int32_t my_st_acc_platform_write ( void* handle , uint8_t reg , const uint8_t* bufp , uint16_t len )
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	0008      	movs	r0, r1
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	240b      	movs	r4, #11
 8003bd8:	193b      	adds	r3, r7, r4
 8003bda:	1c02      	adds	r2, r0, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	2508      	movs	r5, #8
 8003be0:	197b      	adds	r3, r7, r5
 8003be2:	1c0a      	adds	r2, r1, #0
 8003be4:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003be6:	23a0      	movs	r3, #160	; 0xa0
 8003be8:	05db      	lsls	r3, r3, #23
 8003bea:	2200      	movs	r2, #0
 8003bec:	2110      	movs	r1, #16
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f001 f88b 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003bf4:	2014      	movs	r0, #20
 8003bf6:	f000 fcdd 	bl	80045b4 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003bfa:	23fa      	movs	r3, #250	; 0xfa
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	1939      	adds	r1, r7, r4
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f002 fec8 	bl	8006998 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003c08:	23fa      	movs	r3, #250	; 0xfa
 8003c0a:	009c      	lsls	r4, r3, #2
 8003c0c:	197b      	adds	r3, r7, r5
 8003c0e:	881a      	ldrh	r2, [r3, #0]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	0023      	movs	r3, r4
 8003c16:	f002 febf 	bl	8006998 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003c1a:	23a0      	movs	r3, #160	; 0xa0
 8003c1c:	05db      	lsls	r3, r3, #23
 8003c1e:	2201      	movs	r2, #1
 8003c20:	2110      	movs	r1, #16
 8003c22:	0018      	movs	r0, r3
 8003c24:	f001 f871 	bl	8004d0a <HAL_GPIO_WritePin>

	return 0 ;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bdb0      	pop	{r4, r5, r7, pc}

08003c32 <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void* handle , uint8_t reg , uint8_t* bufp , uint16_t len )
{
 8003c32:	b5b0      	push	{r4, r5, r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	0008      	movs	r0, r1
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	0019      	movs	r1, r3
 8003c40:	240b      	movs	r4, #11
 8003c42:	193b      	adds	r3, r7, r4
 8003c44:	1c02      	adds	r2, r0, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	2508      	movs	r5, #8
 8003c4a:	197b      	adds	r3, r7, r5
 8003c4c:	1c0a      	adds	r2, r1, #0
 8003c4e:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003c50:	193b      	adds	r3, r7, r4
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2280      	movs	r2, #128	; 0x80
 8003c56:	4252      	negs	r2, r2
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003c60:	23a0      	movs	r3, #160	; 0xa0
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	2200      	movs	r2, #0
 8003c66:	2110      	movs	r1, #16
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f001 f84e 	bl	8004d0a <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003c6e:	2014      	movs	r0, #20
 8003c70:	f000 fca0 	bl	80045b4 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003c74:	23fa      	movs	r3, #250	; 0xfa
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	1939      	adds	r1, r7, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f002 fe8b 	bl	8006998 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003c82:	23fa      	movs	r3, #250	; 0xfa
 8003c84:	009c      	lsls	r4, r3, #2
 8003c86:	197b      	adds	r3, r7, r5
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	0023      	movs	r3, r4
 8003c90:	f002 ffe2 	bl	8006c58 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003c94:	23a0      	movs	r3, #160	; 0xa0
 8003c96:	05db      	lsls	r3, r3, #23
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f001 f834 	bl	8004d0a <HAL_GPIO_WritePin>

	return 0 ;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b004      	add	sp, #16
 8003caa:	bdb0      	pop	{r4, r5, r7, pc}

08003cac <my_tim_init>:

/* ************************************* */
// TIM operations
void my_tim_init ()
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <my_tim_init+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4252      	negs	r2, r2
 8003cb8:	611a      	str	r2, [r3, #16]
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000784 	.word	0x20000784

08003cc4 <my_tim_start>:

void my_tim_start ()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <my_tim_start+0x18>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <my_tim_start+0x1c>)
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f003 fd21 	bl	8007718 <HAL_TIM_Base_Start_IT>
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000c50 	.word	0x20000c50
 8003ce0:	20000784 	.word	0x20000784

08003ce4 <my_tim_stop>:

void my_tim_stop ()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <my_tim_stop+0x14>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f003 fd76 	bl	80077dc <HAL_TIM_Base_Stop_IT>
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	20000784 	.word	0x20000784

08003cfc <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10d      	bne.n	8003d2a <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d18:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d901      	bls.n	8003d2a <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003d26:	f7ff fa95 	bl	8003254 <my_sys_restart>
	}
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b002      	add	sp, #8
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	40001000 	.word	0x40001000
 8003d38:	20000c50 	.word	0x20000c50
 8003d3c:	20000008 	.word	0x20000008

08003d40 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	20000b1a 	.word	0x20000b1a

08003d5c <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	0002      	movs	r2, r0
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	801a      	strh	r2, [r3, #0]

}
 8003d68:	46c0      	nop			; (mov r8, r8)
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b002      	add	sp, #8
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d74:	b672      	cpsid	i
}
 8003d76:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <Error_Handler+0x8>
	...

08003d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d88:	2101      	movs	r1, #1
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003da0:	2180      	movs	r1, #128	; 0x80
 8003da2:	0549      	lsls	r1, r1, #21
 8003da4:	430a      	orrs	r2, r1
 8003da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_MspInit+0x4c>)
 8003daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	055b      	lsls	r3, r3, #21
 8003db0:	4013      	ands	r3, r2
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fc3a 	bl	8004634 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b097      	sub	sp, #92	; 0x5c
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dd4:	240c      	movs	r4, #12
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	0018      	movs	r0, r3
 8003dda:	234c      	movs	r3, #76	; 0x4c
 8003ddc:	001a      	movs	r2, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f009 fc0a 	bl	800d5f8 <memset>
  if(hrtc->Instance==RTC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_RTC_MspInit+0x84>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d12c      	bne.n	8003e48 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	2280      	movs	r2, #128	; 0x80
 8003df2:	0292      	lsls	r2, r2, #10
 8003df4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	0052      	lsls	r2, r2, #1
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	0018      	movs	r0, r3
 8003e02:	f001 fd6f 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8003e06:	1e03      	subs	r3, r0, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003e0a:	f7ff ffb1 	bl	8003d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RTC_MspInit+0x88>)
 8003e10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_RTC_MspInit+0x88>)
 8003e14:	2180      	movs	r1, #128	; 0x80
 8003e16:	0209      	lsls	r1, r1, #8
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <HAL_RTC_MspInit+0x88>)
 8003e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_RTC_MspInit+0x88>)
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	00c9      	lsls	r1, r1, #3
 8003e26:	430a      	orrs	r2, r1
 8003e28:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_RTC_MspInit+0x88>)
 8003e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4013      	ands	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	2002      	movs	r0, #2
 8003e3e:	f000 fccd 	bl	80047dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003e42:	2002      	movs	r0, #2
 8003e44:	f000 fcdf 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b017      	add	sp, #92	; 0x5c
 8003e4e:	bd90      	pop	{r4, r7, pc}
 8003e50:	40002800 	.word	0x40002800
 8003e54:	40021000 	.word	0x40021000

08003e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b08b      	sub	sp, #44	; 0x2c
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	2414      	movs	r4, #20
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	0018      	movs	r0, r3
 8003e66:	2314      	movs	r3, #20
 8003e68:	001a      	movs	r2, r3
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f009 fbc4 	bl	800d5f8 <memset>
  if(hspi->Instance==SPI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_SPI_MspInit+0x8c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d130      	bne.n	8003edc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	0149      	lsls	r1, r1, #5
 8003e84:	430a      	orrs	r2, r1
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e8c:	2380      	movs	r3, #128	; 0x80
 8003e8e:	015b      	lsls	r3, r3, #5
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e96:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_SPI_MspInit+0x90>)
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003eae:	0021      	movs	r1, r4
 8003eb0:	187b      	adds	r3, r7, r1
 8003eb2:	22e0      	movs	r2, #224	; 0xe0
 8003eb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	2202      	movs	r2, #2
 8003eba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2200      	movs	r2, #0
 8003ecc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ece:	187a      	adds	r2, r7, r1
 8003ed0:	23a0      	movs	r3, #160	; 0xa0
 8003ed2:	05db      	lsls	r3, r3, #23
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fcb6 	bl	8004848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b00b      	add	sp, #44	; 0x2c
 8003ee2:	bd90      	pop	{r4, r7, pc}
 8003ee4:	40013000 	.word	0x40013000
 8003ee8:	40021000 	.word	0x40021000

08003eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_TIM_Base_MspInit+0x44>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d113      	bne.n	8003f26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_TIM_Base_MspInit+0x48>)
 8003f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_TIM_Base_MspInit+0x48>)
 8003f04:	2110      	movs	r1, #16
 8003f06:	430a      	orrs	r2, r1
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_TIM_Base_MspInit+0x48>)
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	2210      	movs	r2, #16
 8003f10:	4013      	ands	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2102      	movs	r1, #2
 8003f1a:	2011      	movs	r0, #17
 8003f1c:	f000 fc5e 	bl	80047dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003f20:	2011      	movs	r0, #17
 8003f22:	f000 fc70 	bl	8004806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	40001000 	.word	0x40001000
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b0a3      	sub	sp, #140	; 0x8c
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	2374      	movs	r3, #116	; 0x74
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	0018      	movs	r0, r3
 8003f46:	2314      	movs	r3, #20
 8003f48:	001a      	movs	r2, r3
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f009 fb54 	bl	800d5f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f50:	2428      	movs	r4, #40	; 0x28
 8003f52:	193b      	adds	r3, r7, r4
 8003f54:	0018      	movs	r0, r3
 8003f56:	234c      	movs	r3, #76	; 0x4c
 8003f58:	001a      	movs	r2, r3
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	f009 fb4c 	bl	800d5f8 <memset>
  if(huart->Instance==USART1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a84      	ldr	r2, [pc, #528]	; (8004178 <HAL_UART_MspInit+0x240>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d140      	bne.n	8003fec <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f6a:	193b      	adds	r3, r7, r4
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003f70:	193b      	adds	r3, r7, r4
 8003f72:	2200      	movs	r2, #0
 8003f74:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f001 fcb3 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8003f7e:	1e03      	subs	r3, r0, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f82:	f7ff fef5 	bl	8003d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f86:	4b7d      	ldr	r3, [pc, #500]	; (800417c <HAL_UART_MspInit+0x244>)
 8003f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f8a:	4b7c      	ldr	r3, [pc, #496]	; (800417c <HAL_UART_MspInit+0x244>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	01c9      	lsls	r1, r1, #7
 8003f90:	430a      	orrs	r2, r1
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
 8003f94:	4b79      	ldr	r3, [pc, #484]	; (800417c <HAL_UART_MspInit+0x244>)
 8003f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	01db      	lsls	r3, r3, #7
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa2:	4b76      	ldr	r3, [pc, #472]	; (800417c <HAL_UART_MspInit+0x244>)
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_UART_MspInit+0x244>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	430a      	orrs	r2, r1
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34
 8003fae:	4b73      	ldr	r3, [pc, #460]	; (800417c <HAL_UART_MspInit+0x244>)
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	623b      	str	r3, [r7, #32]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003fba:	2174      	movs	r1, #116	; 0x74
 8003fbc:	187b      	adds	r3, r7, r1
 8003fbe:	22c0      	movs	r2, #192	; 0xc0
 8003fc0:	00d2      	lsls	r2, r2, #3
 8003fc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	2201      	movs	r2, #1
 8003fda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fdc:	187a      	adds	r2, r7, r1
 8003fde:	23a0      	movs	r3, #160	; 0xa0
 8003fe0:	05db      	lsls	r3, r3, #23
 8003fe2:	0011      	movs	r1, r2
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 fc2f 	bl	8004848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003fea:	e0c0      	b.n	800416e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a63      	ldr	r2, [pc, #396]	; (8004180 <HAL_UART_MspInit+0x248>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d140      	bne.n	8004078 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ff6:	2128      	movs	r1, #40	; 0x28
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004004:	187b      	adds	r3, r7, r1
 8004006:	0018      	movs	r0, r3
 8004008:	f001 fc6c 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8004010:	f7ff feae 	bl	8003d70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_UART_MspInit+0x244>)
 8004016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004018:	4b58      	ldr	r3, [pc, #352]	; (800417c <HAL_UART_MspInit+0x244>)
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	0289      	lsls	r1, r1, #10
 800401e:	430a      	orrs	r2, r1
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c
 8004022:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_UART_MspInit+0x244>)
 8004024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	4013      	ands	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004030:	4b52      	ldr	r3, [pc, #328]	; (800417c <HAL_UART_MspInit+0x244>)
 8004032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <HAL_UART_MspInit+0x244>)
 8004036:	2101      	movs	r1, #1
 8004038:	430a      	orrs	r2, r1
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <HAL_UART_MspInit+0x244>)
 800403e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004040:	2201      	movs	r2, #1
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8004048:	2174      	movs	r1, #116	; 0x74
 800404a:	187b      	adds	r3, r7, r1
 800404c:	220c      	movs	r2, #12
 800404e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	187b      	adds	r3, r7, r1
 8004052:	2202      	movs	r2, #2
 8004054:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	2200      	movs	r2, #0
 800405a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	187b      	adds	r3, r7, r1
 800405e:	2200      	movs	r2, #0
 8004060:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004062:	187b      	adds	r3, r7, r1
 8004064:	2201      	movs	r2, #1
 8004066:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	187a      	adds	r2, r7, r1
 800406a:	23a0      	movs	r3, #160	; 0xa0
 800406c:	05db      	lsls	r3, r3, #23
 800406e:	0011      	movs	r1, r2
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fbe9 	bl	8004848 <HAL_GPIO_Init>
}
 8004076:	e07a      	b.n	800416e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a41      	ldr	r2, [pc, #260]	; (8004184 <HAL_UART_MspInit+0x24c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d140      	bne.n	8004104 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004082:	2128      	movs	r1, #40	; 0x28
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2204      	movs	r2, #4
 8004088:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2200      	movs	r2, #0
 800408e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004090:	187b      	adds	r3, r7, r1
 8004092:	0018      	movs	r0, r3
 8004094:	f001 fc26 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <HAL_UART_MspInit+0x168>
      Error_Handler();
 800409c:	f7ff fe68 	bl	8003d70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_UART_MspInit+0x244>)
 80040a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a4:	4b35      	ldr	r3, [pc, #212]	; (800417c <HAL_UART_MspInit+0x244>)
 80040a6:	2180      	movs	r1, #128	; 0x80
 80040a8:	02c9      	lsls	r1, r1, #11
 80040aa:	430a      	orrs	r2, r1
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_UART_MspInit+0x244>)
 80040b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	02db      	lsls	r3, r3, #11
 80040b6:	4013      	ands	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040bc:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_UART_MspInit+0x244>)
 80040be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c0:	4b2e      	ldr	r3, [pc, #184]	; (800417c <HAL_UART_MspInit+0x244>)
 80040c2:	2102      	movs	r1, #2
 80040c4:	430a      	orrs	r2, r1
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_UART_MspInit+0x244>)
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 80040d4:	2174      	movs	r1, #116	; 0x74
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	22c0      	movs	r2, #192	; 0xc0
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2202      	movs	r2, #2
 80040e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	2200      	movs	r2, #0
 80040ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2204      	movs	r2, #4
 80040f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	4a23      	ldr	r2, [pc, #140]	; (8004188 <HAL_UART_MspInit+0x250>)
 80040fa:	0019      	movs	r1, r3
 80040fc:	0010      	movs	r0, r2
 80040fe:	f000 fba3 	bl	8004848 <HAL_GPIO_Init>
}
 8004102:	e034      	b.n	800416e <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a20      	ldr	r2, [pc, #128]	; (800418c <HAL_UART_MspInit+0x254>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d12f      	bne.n	800416e <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_UART_MspInit+0x244>)
 8004110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_UART_MspInit+0x244>)
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0049      	lsls	r1, r1, #1
 8004118:	430a      	orrs	r2, r1
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_UART_MspInit+0x244>)
 800411e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004120:	2380      	movs	r3, #128	; 0x80
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412a:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_UART_MspInit+0x244>)
 800412c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_UART_MspInit+0x244>)
 8004130:	2102      	movs	r1, #2
 8004132:	430a      	orrs	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_UART_MspInit+0x244>)
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8004142:	2174      	movs	r1, #116	; 0x74
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2218      	movs	r2, #24
 8004148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414a:	187b      	adds	r3, r7, r1
 800414c:	2202      	movs	r2, #2
 800414e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004150:	187b      	adds	r3, r7, r1
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004156:	187b      	adds	r3, r7, r1
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800415c:	187b      	adds	r3, r7, r1
 800415e:	2203      	movs	r2, #3
 8004160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004162:	187b      	adds	r3, r7, r1
 8004164:	4a08      	ldr	r2, [pc, #32]	; (8004188 <HAL_UART_MspInit+0x250>)
 8004166:	0019      	movs	r1, r3
 8004168:	0010      	movs	r0, r2
 800416a:	f000 fb6d 	bl	8004848 <HAL_GPIO_Init>
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b023      	add	sp, #140	; 0x8c
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	40013800 	.word	0x40013800
 800417c:	40021000 	.word	0x40021000
 8004180:	40004400 	.word	0x40004400
 8004184:	40004800 	.word	0x40004800
 8004188:	50000400 	.word	0x50000400
 800418c:	40005000 	.word	0x40005000

08004190 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a25      	ldr	r2, [pc, #148]	; (8004234 <HAL_UART_MspDeInit+0xa4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10e      	bne.n	80041c0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041a8:	4924      	ldr	r1, [pc, #144]	; (800423c <HAL_UART_MspDeInit+0xac>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80041ae:	23c0      	movs	r3, #192	; 0xc0
 80041b0:	00da      	lsls	r2, r3, #3
 80041b2:	23a0      	movs	r3, #160	; 0xa0
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 fcb1 	bl	8004b20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80041be:	e034      	b.n	800422a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <HAL_UART_MspDeInit+0xb0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041d0:	491c      	ldr	r1, [pc, #112]	; (8004244 <HAL_UART_MspDeInit+0xb4>)
 80041d2:	400a      	ands	r2, r1
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 80041d6:	23a0      	movs	r3, #160	; 0xa0
 80041d8:	05db      	lsls	r3, r3, #23
 80041da:	210c      	movs	r1, #12
 80041dc:	0018      	movs	r0, r3
 80041de:	f000 fc9f 	bl	8004b20 <HAL_GPIO_DeInit>
}
 80041e2:	e022      	b.n	800422a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_UART_MspDeInit+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 80041f4:	4915      	ldr	r1, [pc, #84]	; (800424c <HAL_UART_MspDeInit+0xbc>)
 80041f6:	400a      	ands	r2, r1
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 80041fa:	23c0      	movs	r3, #192	; 0xc0
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_UART_MspDeInit+0xc0>)
 8004200:	0019      	movs	r1, r3
 8004202:	0010      	movs	r0, r2
 8004204:	f000 fc8c 	bl	8004b20 <HAL_GPIO_DeInit>
}
 8004208:	e00f      	b.n	800422a <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a11      	ldr	r2, [pc, #68]	; (8004254 <HAL_UART_MspDeInit+0xc4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10a      	bne.n	800422a <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 8004216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_UART_MspDeInit+0xa8>)
 800421a:	490f      	ldr	r1, [pc, #60]	; (8004258 <HAL_UART_MspDeInit+0xc8>)
 800421c:	400a      	ands	r2, r1
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_UART_MspDeInit+0xc0>)
 8004222:	2118      	movs	r1, #24
 8004224:	0018      	movs	r0, r3
 8004226:	f000 fc7b 	bl	8004b20 <HAL_GPIO_DeInit>
}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40013800 	.word	0x40013800
 8004238:	40021000 	.word	0x40021000
 800423c:	ffffbfff 	.word	0xffffbfff
 8004240:	40004400 	.word	0x40004400
 8004244:	fffdffff 	.word	0xfffdffff
 8004248:	40004800 	.word	0x40004800
 800424c:	fffbffff 	.word	0xfffbffff
 8004250:	50000400 	.word	0x50000400
 8004254:	40005000 	.word	0x40005000
 8004258:	fffffeff 	.word	0xfffffeff

0800425c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004260:	e7fe      	b.n	8004260 <NMI_Handler+0x4>

08004262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004266:	e7fe      	b.n	8004266 <HardFault_Handler+0x4>

08004268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004280:	f000 f97c 	bl	800457c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <RTC_TAMP_IRQHandler+0x14>)
 8004292:	0018      	movs	r0, r3
 8004294:	f002 f928 	bl	80064e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	200006f4 	.word	0x200006f4

080042a4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80042a8:	2004      	movs	r0, #4
 80042aa:	f000 fd4b 	bl	8004d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80042ba:	0018      	movs	r0, r3
 80042bc:	f003 fabc 	bl	8007838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	20000784 	.word	0x20000784

080042cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  return 1;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_kill>:

int _kill(int pid, int sig)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042e2:	f009 fa7d 	bl	800d7e0 <__errno>
 80042e6:	0003      	movs	r3, r0
 80042e8:	2216      	movs	r2, #22
 80042ea:	601a      	str	r2, [r3, #0]
  return -1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	425b      	negs	r3, r3
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_exit>:

void _exit (int status)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004300:	2301      	movs	r3, #1
 8004302:	425a      	negs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	0011      	movs	r1, r2
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff ffe5 	bl	80042d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800430e:	e7fe      	b.n	800430e <_exit+0x16>

08004310 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e00a      	b.n	8004338 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004322:	e000      	b.n	8004326 <_read+0x16>
 8004324:	bf00      	nop
 8004326:	0001      	movs	r1, r0
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	60ba      	str	r2, [r7, #8]
 800432e:	b2ca      	uxtb	r2, r1
 8004330:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3301      	adds	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	dbf0      	blt.n	8004322 <_read+0x12>
  }

  return len;
 8004340:	687b      	ldr	r3, [r7, #4]
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b006      	add	sp, #24
 8004348:	bd80      	pop	{r7, pc}

0800434a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e009      	b.n	8004370 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	0018      	movs	r0, r3
 8004366:	e000      	b.n	800436a <_write+0x20>
 8004368:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3301      	adds	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	dbf1      	blt.n	800435c <_write+0x12>
  }
  return len;
 8004378:	687b      	ldr	r3, [r7, #4]
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b006      	add	sp, #24
 8004380:	bd80      	pop	{r7, pc}

08004382 <_close>:

int _close(int file)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800438a:	2301      	movs	r3, #1
 800438c:	425b      	negs	r3, r3
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}

08004396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2280      	movs	r2, #128	; 0x80
 80043a4:	0192      	lsls	r2, r2, #6
 80043a6:	605a      	str	r2, [r3, #4]
  return 0;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b002      	add	sp, #8
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <_isatty>:

int _isatty(int file)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b002      	add	sp, #8
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b004      	add	sp, #16
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <_sbrk+0x5c>)
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <_sbrk+0x60>)
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <_sbrk+0x64>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <_sbrk+0x64>)
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <_sbrk+0x68>)
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043fe:	4b10      	ldr	r3, [pc, #64]	; (8004440 <_sbrk+0x64>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	18d3      	adds	r3, r2, r3
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d207      	bcs.n	800441c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800440c:	f009 f9e8 	bl	800d7e0 <__errno>
 8004410:	0003      	movs	r3, r0
 8004412:	220c      	movs	r2, #12
 8004414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004416:	2301      	movs	r3, #1
 8004418:	425b      	negs	r3, r3
 800441a:	e009      	b.n	8004430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	18d2      	adds	r2, r2, r3
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_sbrk+0x64>)
 800442c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b006      	add	sp, #24
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20024000 	.word	0x20024000
 800443c:	00000400 	.word	0x00000400
 8004440:	20000b20 	.word	0x20000b20
 8004444:	20000f60 	.word	0x20000f60

08004448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004454:	480d      	ldr	r0, [pc, #52]	; (800448c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004456:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004458:	f7ff fff6 	bl	8004448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <LoopForever+0x6>)
  ldr r1, =_edata
 800445e:	490d      	ldr	r1, [pc, #52]	; (8004494 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <LoopForever+0xe>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004474:	4c0a      	ldr	r4, [pc, #40]	; (80044a0 <LoopForever+0x16>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004482:	f009 f9b3 	bl	800d7ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004486:	f7fe f88f 	bl	80025a8 <main>

0800448a <LoopForever>:

LoopForever:
  b LoopForever
 800448a:	e7fe      	b.n	800448a <LoopForever>
  ldr   r0, =_estack
 800448c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004494:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8004498:	08016198 	.word	0x08016198
  ldr r2, =_sbss
 800449c:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80044a0:	20000f60 	.word	0x20000f60

080044a4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044a4:	e7fe      	b.n	80044a4 <ADC1_COMP_IRQHandler>
	...

080044a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044ae:	1dfb      	adds	r3, r7, #7
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_Init+0x3c>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_Init+0x3c>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0049      	lsls	r1, r1, #1
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044c2:	2003      	movs	r0, #3
 80044c4:	f000 f810 	bl	80044e8 <HAL_InitTick>
 80044c8:	1e03      	subs	r3, r0, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e001      	b.n	80044d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80044d4:	f7ff fc52 	bl	8003d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
}
 80044dc:	0018      	movs	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40022000 	.word	0x40022000

080044e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044f0:	230f      	movs	r3, #15
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_InitTick+0x88>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02b      	beq.n	8004558 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004500:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <HAL_InitTick+0x8c>)
 8004502:	681c      	ldr	r4, [r3, #0]
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_InitTick+0x88>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	0019      	movs	r1, r3
 800450a:	23fa      	movs	r3, #250	; 0xfa
 800450c:	0098      	lsls	r0, r3, #2
 800450e:	f7fb fe15 	bl	800013c <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	0019      	movs	r1, r3
 8004516:	0020      	movs	r0, r4
 8004518:	f7fb fe10 	bl	800013c <__udivsi3>
 800451c:	0003      	movs	r3, r0
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f985 	bl	800482e <HAL_SYSTICK_Config>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d112      	bne.n	800454e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d80a      	bhi.n	8004544 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	2301      	movs	r3, #1
 8004532:	425b      	negs	r3, r3
 8004534:	2200      	movs	r2, #0
 8004536:	0018      	movs	r0, r3
 8004538:	f000 f950 	bl	80047dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_InitTick+0x90>)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e00d      	b.n	8004560 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004544:	230f      	movs	r3, #15
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e008      	b.n	8004560 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800454e:	230f      	movs	r3, #15
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e003      	b.n	8004560 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004558:	230f      	movs	r3, #15
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2201      	movs	r2, #1
 800455e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004560:	230f      	movs	r3, #15
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b005      	add	sp, #20
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	20000018 	.word	0x20000018
 8004574:	20000010 	.word	0x20000010
 8004578:	20000014 	.word	0x20000014

0800457c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_IncTick+0x1c>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	001a      	movs	r2, r3
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_IncTick+0x20>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	18d2      	adds	r2, r2, r3
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_IncTick+0x20>)
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	20000018 	.word	0x20000018
 800459c:	20000b24 	.word	0x20000b24

080045a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  return uwTick;
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <HAL_GetTick+0x10>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	20000b24 	.word	0x20000b24

080045b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7ff fff0 	bl	80045a0 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3301      	adds	r3, #1
 80045cc:	d005      	beq.n	80045da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_Delay+0x44>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	001a      	movs	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	189b      	adds	r3, r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	f7ff ffe0 	bl	80045a0 <HAL_GetTick>
 80045e0:	0002      	movs	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d8f7      	bhi.n	80045dc <HAL_Delay+0x28>
  {
  }
}
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	20000018 	.word	0x20000018

080045fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_SuspendTick+0x18>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_SuspendTick+0x18>)
 8004606:	2102      	movs	r1, #2
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	e000e010 	.word	0xe000e010

08004618 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <HAL_ResumeTick+0x18>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_ResumeTick+0x18>)
 8004622:	2102      	movs	r1, #2
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	46c0      	nop			; (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	e000e010 	.word	0xe000e010

08004634 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a06      	ldr	r2, [pc, #24]	; (800465c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004642:	4013      	ands	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	430a      	orrs	r2, r1
 800464c:	601a      	str	r2, [r3, #0]
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	40010000 	.word	0x40010000
 800465c:	fffff9ff 	.word	0xfffff9ff

08004660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	0002      	movs	r2, r0
 8004668:	1dfb      	adds	r3, r7, #7
 800466a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b7f      	cmp	r3, #127	; 0x7f
 8004672:	d809      	bhi.n	8004688 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004674:	1dfb      	adds	r3, r7, #7
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	001a      	movs	r2, r3
 800467a:	231f      	movs	r3, #31
 800467c:	401a      	ands	r2, r3
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <__NVIC_EnableIRQ+0x30>)
 8004680:	2101      	movs	r1, #1
 8004682:	4091      	lsls	r1, r2
 8004684:	000a      	movs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}
 8004690:	e000e100 	.word	0xe000e100

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	0002      	movs	r2, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	1dfb      	adds	r3, r7, #7
 80046a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b7f      	cmp	r3, #127	; 0x7f
 80046a8:	d828      	bhi.n	80046fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <__NVIC_SetPriority+0xd4>)
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	33c0      	adds	r3, #192	; 0xc0
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	589b      	ldr	r3, [r3, r2]
 80046ba:	1dfa      	adds	r2, r7, #7
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	0011      	movs	r1, r2
 80046c0:	2203      	movs	r2, #3
 80046c2:	400a      	ands	r2, r1
 80046c4:	00d2      	lsls	r2, r2, #3
 80046c6:	21ff      	movs	r1, #255	; 0xff
 80046c8:	4091      	lsls	r1, r2
 80046ca:	000a      	movs	r2, r1
 80046cc:	43d2      	mvns	r2, r2
 80046ce:	401a      	ands	r2, r3
 80046d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	22ff      	movs	r2, #255	; 0xff
 80046d8:	401a      	ands	r2, r3
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	0018      	movs	r0, r3
 80046e0:	2303      	movs	r3, #3
 80046e2:	4003      	ands	r3, r0
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046e8:	481f      	ldr	r0, [pc, #124]	; (8004768 <__NVIC_SetPriority+0xd4>)
 80046ea:	1dfb      	adds	r3, r7, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	430a      	orrs	r2, r1
 80046f4:	33c0      	adds	r3, #192	; 0xc0
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046fa:	e031      	b.n	8004760 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <__NVIC_SetPriority+0xd8>)
 80046fe:	1dfb      	adds	r3, r7, #7
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	0019      	movs	r1, r3
 8004704:	230f      	movs	r3, #15
 8004706:	400b      	ands	r3, r1
 8004708:	3b08      	subs	r3, #8
 800470a:	089b      	lsrs	r3, r3, #2
 800470c:	3306      	adds	r3, #6
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	18d3      	adds	r3, r2, r3
 8004712:	3304      	adds	r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1dfa      	adds	r2, r7, #7
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	0011      	movs	r1, r2
 800471c:	2203      	movs	r2, #3
 800471e:	400a      	ands	r2, r1
 8004720:	00d2      	lsls	r2, r2, #3
 8004722:	21ff      	movs	r1, #255	; 0xff
 8004724:	4091      	lsls	r1, r2
 8004726:	000a      	movs	r2, r1
 8004728:	43d2      	mvns	r2, r2
 800472a:	401a      	ands	r2, r3
 800472c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	22ff      	movs	r2, #255	; 0xff
 8004734:	401a      	ands	r2, r3
 8004736:	1dfb      	adds	r3, r7, #7
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	0018      	movs	r0, r3
 800473c:	2303      	movs	r3, #3
 800473e:	4003      	ands	r3, r0
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004744:	4809      	ldr	r0, [pc, #36]	; (800476c <__NVIC_SetPriority+0xd8>)
 8004746:	1dfb      	adds	r3, r7, #7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	001c      	movs	r4, r3
 800474c:	230f      	movs	r3, #15
 800474e:	4023      	ands	r3, r4
 8004750:	3b08      	subs	r3, #8
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	430a      	orrs	r2, r1
 8004756:	3306      	adds	r3, #6
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	18c3      	adds	r3, r0, r3
 800475c:	3304      	adds	r3, #4
 800475e:	601a      	str	r2, [r3, #0]
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b003      	add	sp, #12
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	e000e100 	.word	0xe000e100
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004774:	f3bf 8f4f 	dsb	sy
}
 8004778:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800477a:	4b04      	ldr	r3, [pc, #16]	; (800478c <__NVIC_SystemReset+0x1c>)
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <__NVIC_SystemReset+0x20>)
 800477e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004780:	f3bf 8f4f 	dsb	sy
}
 8004784:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	e7fd      	b.n	8004786 <__NVIC_SystemReset+0x16>
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	05fa0004 	.word	0x05fa0004

08004794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	045b      	lsls	r3, r3, #17
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d301      	bcc.n	80047ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047a8:	2301      	movs	r3, #1
 80047aa:	e010      	b.n	80047ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ac:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <SysTick_Config+0x44>)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	3a01      	subs	r2, #1
 80047b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047b4:	2301      	movs	r3, #1
 80047b6:	425b      	negs	r3, r3
 80047b8:	2103      	movs	r1, #3
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff ff6a 	bl	8004694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <SysTick_Config+0x44>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <SysTick_Config+0x44>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	e000e010 	.word	0xe000e010

080047dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	607a      	str	r2, [r7, #4]
 80047e6:	210f      	movs	r1, #15
 80047e8:	187b      	adds	r3, r7, r1
 80047ea:	1c02      	adds	r2, r0, #0
 80047ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b25b      	sxtb	r3, r3
 80047f6:	0011      	movs	r1, r2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff ff4b 	bl	8004694 <__NVIC_SetPriority>
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	0002      	movs	r2, r0
 800480e:	1dfb      	adds	r3, r7, #7
 8004810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004812:	1dfb      	adds	r3, r7, #7
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	b25b      	sxtb	r3, r3
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff ff21 	bl	8004660 <__NVIC_EnableIRQ>
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800482a:	f7ff ffa1 	bl	8004770 <__NVIC_SystemReset>

0800482e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff ffab 	bl	8004794 <SysTick_Config>
 800483e:	0003      	movs	r3, r0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004856:	e14d      	b.n	8004af4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2101      	movs	r1, #1
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4091      	lsls	r1, r2
 8004862:	000a      	movs	r2, r1
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d100      	bne.n	8004870 <HAL_GPIO_Init+0x28>
 800486e:	e13e      	b.n	8004aee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2203      	movs	r2, #3
 8004876:	4013      	ands	r3, r2
 8004878:	2b01      	cmp	r3, #1
 800487a:	d005      	beq.n	8004888 <HAL_GPIO_Init+0x40>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2203      	movs	r2, #3
 8004882:	4013      	ands	r3, r2
 8004884:	2b02      	cmp	r3, #2
 8004886:	d130      	bne.n	80048ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	409a      	lsls	r2, r3
 8004896:	0013      	movs	r3, r2
 8004898:	43da      	mvns	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	0013      	movs	r3, r2
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048be:	2201      	movs	r2, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	43da      	mvns	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	2201      	movs	r2, #1
 80048d6:	401a      	ands	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	409a      	lsls	r2, r3
 80048dc:	0013      	movs	r3, r2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d017      	beq.n	8004926 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2203      	movs	r2, #3
 8004902:	409a      	lsls	r2, r3
 8004904:	0013      	movs	r3, r2
 8004906:	43da      	mvns	r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	0013      	movs	r3, r2
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2203      	movs	r2, #3
 800492c:	4013      	ands	r3, r2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d123      	bne.n	800497a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	08da      	lsrs	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	3208      	adds	r2, #8
 800493a:	0092      	lsls	r2, r2, #2
 800493c:	58d3      	ldr	r3, [r2, r3]
 800493e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2207      	movs	r2, #7
 8004944:	4013      	ands	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	220f      	movs	r2, #15
 800494a:	409a      	lsls	r2, r3
 800494c:	0013      	movs	r3, r2
 800494e:	43da      	mvns	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2107      	movs	r1, #7
 800495e:	400b      	ands	r3, r1
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	409a      	lsls	r2, r3
 8004964:	0013      	movs	r3, r2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	08da      	lsrs	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3208      	adds	r2, #8
 8004974:	0092      	lsls	r2, r2, #2
 8004976:	6939      	ldr	r1, [r7, #16]
 8004978:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	2203      	movs	r2, #3
 8004986:	409a      	lsls	r2, r3
 8004988:	0013      	movs	r3, r2
 800498a:	43da      	mvns	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2203      	movs	r2, #3
 8004998:	401a      	ands	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	409a      	lsls	r2, r3
 80049a0:	0013      	movs	r3, r2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	23c0      	movs	r3, #192	; 0xc0
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	4013      	ands	r3, r2
 80049b8:	d100      	bne.n	80049bc <HAL_GPIO_Init+0x174>
 80049ba:	e098      	b.n	8004aee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80049bc:	4a53      	ldr	r2, [pc, #332]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	089b      	lsrs	r3, r3, #2
 80049c2:	3318      	adds	r3, #24
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	589b      	ldr	r3, [r3, r2]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2203      	movs	r2, #3
 80049ce:	4013      	ands	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	220f      	movs	r2, #15
 80049d4:	409a      	lsls	r2, r3
 80049d6:	0013      	movs	r3, r2
 80049d8:	43da      	mvns	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	23a0      	movs	r3, #160	; 0xa0
 80049e4:	05db      	lsls	r3, r3, #23
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d019      	beq.n	8004a1e <HAL_GPIO_Init+0x1d6>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a48      	ldr	r2, [pc, #288]	; (8004b10 <HAL_GPIO_Init+0x2c8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_GPIO_Init+0x1d2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a47      	ldr	r2, [pc, #284]	; (8004b14 <HAL_GPIO_Init+0x2cc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00d      	beq.n	8004a16 <HAL_GPIO_Init+0x1ce>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a46      	ldr	r2, [pc, #280]	; (8004b18 <HAL_GPIO_Init+0x2d0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <HAL_GPIO_Init+0x1ca>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a45      	ldr	r2, [pc, #276]	; (8004b1c <HAL_GPIO_Init+0x2d4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d101      	bne.n	8004a0e <HAL_GPIO_Init+0x1c6>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e008      	b.n	8004a20 <HAL_GPIO_Init+0x1d8>
 8004a0e:	2305      	movs	r3, #5
 8004a10:	e006      	b.n	8004a20 <HAL_GPIO_Init+0x1d8>
 8004a12:	2303      	movs	r3, #3
 8004a14:	e004      	b.n	8004a20 <HAL_GPIO_Init+0x1d8>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e002      	b.n	8004a20 <HAL_GPIO_Init+0x1d8>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <HAL_GPIO_Init+0x1d8>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	2103      	movs	r1, #3
 8004a24:	400a      	ands	r2, r1
 8004a26:	00d2      	lsls	r2, r2, #3
 8004a28:	4093      	lsls	r3, r2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004a30:	4936      	ldr	r1, [pc, #216]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	089b      	lsrs	r3, r3, #2
 8004a36:	3318      	adds	r3, #24
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a3e:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43da      	mvns	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	035b      	lsls	r3, r3, #13
 8004a56:	4013      	ands	r3, r2
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	039b      	lsls	r3, r3, #14
 8004a80:	4013      	ands	r3, r2
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004a94:	2384      	movs	r3, #132	; 0x84
 8004a96:	58d3      	ldr	r3, [r2, r3]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	029b      	lsls	r3, r3, #10
 8004aac:	4013      	ands	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ab8:	4914      	ldr	r1, [pc, #80]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004aba:	2284      	movs	r2, #132	; 0x84
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004ac0:	4a12      	ldr	r2, [pc, #72]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	58d3      	ldr	r3, [r2, r3]
 8004ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43da      	mvns	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	4013      	ands	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ae6:	4909      	ldr	r1, [pc, #36]	; (8004b0c <HAL_GPIO_Init+0x2c4>)
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3301      	adds	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	40da      	lsrs	r2, r3
 8004afc:	1e13      	subs	r3, r2, #0
 8004afe:	d000      	beq.n	8004b02 <HAL_GPIO_Init+0x2ba>
 8004b00:	e6aa      	b.n	8004858 <HAL_GPIO_Init+0x10>
  }
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021800 	.word	0x40021800
 8004b10:	50000400 	.word	0x50000400
 8004b14:	50000800 	.word	0x50000800
 8004b18:	50000c00 	.word	0x50000c00
 8004b1c:	50001000 	.word	0x50001000

08004b20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004b2e:	e0ba      	b.n	8004ca6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004b30:	2201      	movs	r2, #1
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	409a      	lsls	r2, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d100      	bne.n	8004b44 <HAL_GPIO_DeInit+0x24>
 8004b42:	e0ad      	b.n	8004ca0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004b44:	4a5d      	ldr	r2, [pc, #372]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	589b      	ldr	r3, [r3, r2]
 8004b50:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2203      	movs	r2, #3
 8004b56:	4013      	ands	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	220f      	movs	r2, #15
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4013      	ands	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	23a0      	movs	r3, #160	; 0xa0
 8004b68:	05db      	lsls	r3, r3, #23
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d019      	beq.n	8004ba2 <HAL_GPIO_DeInit+0x82>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a53      	ldr	r2, [pc, #332]	; (8004cc0 <HAL_GPIO_DeInit+0x1a0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_GPIO_DeInit+0x7e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a52      	ldr	r2, [pc, #328]	; (8004cc4 <HAL_GPIO_DeInit+0x1a4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d00d      	beq.n	8004b9a <HAL_GPIO_DeInit+0x7a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a51      	ldr	r2, [pc, #324]	; (8004cc8 <HAL_GPIO_DeInit+0x1a8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_GPIO_DeInit+0x76>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a50      	ldr	r2, [pc, #320]	; (8004ccc <HAL_GPIO_DeInit+0x1ac>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d101      	bne.n	8004b92 <HAL_GPIO_DeInit+0x72>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	e008      	b.n	8004ba4 <HAL_GPIO_DeInit+0x84>
 8004b92:	2305      	movs	r3, #5
 8004b94:	e006      	b.n	8004ba4 <HAL_GPIO_DeInit+0x84>
 8004b96:	2303      	movs	r3, #3
 8004b98:	e004      	b.n	8004ba4 <HAL_GPIO_DeInit+0x84>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e002      	b.n	8004ba4 <HAL_GPIO_DeInit+0x84>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <HAL_GPIO_DeInit+0x84>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	2103      	movs	r1, #3
 8004ba8:	400a      	ands	r2, r1
 8004baa:	00d2      	lsls	r2, r2, #3
 8004bac:	4093      	lsls	r3, r2
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d136      	bne.n	8004c22 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004bb4:	4a41      	ldr	r2, [pc, #260]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	58d3      	ldr	r3, [r2, r3]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	43d2      	mvns	r2, r2
 8004bbe:	493f      	ldr	r1, [pc, #252]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004bc6:	4a3d      	ldr	r2, [pc, #244]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bc8:	2384      	movs	r3, #132	; 0x84
 8004bca:	58d3      	ldr	r3, [r2, r3]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	43d2      	mvns	r2, r2
 8004bd0:	493a      	ldr	r1, [pc, #232]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2284      	movs	r2, #132	; 0x84
 8004bd6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004bd8:	4b38      	ldr	r3, [pc, #224]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004be2:	400a      	ands	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004be6:	4b35      	ldr	r3, [pc, #212]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43d9      	mvns	r1, r3
 8004bee:	4b33      	ldr	r3, [pc, #204]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004bf0:	400a      	ands	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	220f      	movs	r2, #15
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	0013      	movs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004c04:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	589a      	ldr	r2, [r3, r2]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	4829      	ldr	r0, [pc, #164]	; (8004cbc <HAL_GPIO_DeInit+0x19c>)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	089b      	lsrs	r3, r3, #2
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	4099      	lsls	r1, r3
 8004c2e:	000b      	movs	r3, r1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	08da      	lsrs	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3208      	adds	r2, #8
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	58d3      	ldr	r3, [r2, r3]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	2107      	movs	r1, #7
 8004c46:	400a      	ands	r2, r1
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	210f      	movs	r1, #15
 8004c4c:	4091      	lsls	r1, r2
 8004c4e:	000a      	movs	r2, r1
 8004c50:	43d1      	mvns	r1, r2
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	08d2      	lsrs	r2, r2, #3
 8004c56:	4019      	ands	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3208      	adds	r2, #8
 8004c5c:	0092      	lsls	r2, r2, #2
 8004c5e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	0052      	lsls	r2, r2, #1
 8004c68:	2103      	movs	r1, #3
 8004c6a:	4091      	lsls	r1, r2
 8004c6c:	000a      	movs	r2, r1
 8004c6e:	43d2      	mvns	r2, r2
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	4091      	lsls	r1, r2
 8004c80:	000a      	movs	r2, r1
 8004c82:	43d2      	mvns	r2, r2
 8004c84:	401a      	ands	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	0052      	lsls	r2, r2, #1
 8004c92:	2103      	movs	r1, #3
 8004c94:	4091      	lsls	r1, r2
 8004c96:	000a      	movs	r2, r1
 8004c98:	43d2      	mvns	r2, r2
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	40da      	lsrs	r2, r3
 8004cac:	1e13      	subs	r3, r2, #0
 8004cae:	d000      	beq.n	8004cb2 <HAL_GPIO_DeInit+0x192>
 8004cb0:	e73e      	b.n	8004b30 <HAL_GPIO_DeInit+0x10>
  }
}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	46c0      	nop			; (mov r8, r8)
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021800 	.word	0x40021800
 8004cc0:	50000400 	.word	0x50000400
 8004cc4:	50000800 	.word	0x50000800
 8004cc8:	50000c00 	.word	0x50000c00
 8004ccc:	50001000 	.word	0x50001000

08004cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	000a      	movs	r2, r1
 8004cda:	1cbb      	adds	r3, r7, #2
 8004cdc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	1cba      	adds	r2, r7, #2
 8004ce4:	8812      	ldrh	r2, [r2, #0]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004cea:	230f      	movs	r3, #15
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	e003      	b.n	8004cfc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004cfc:	230f      	movs	r3, #15
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	781b      	ldrb	r3, [r3, #0]
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b082      	sub	sp, #8
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	0008      	movs	r0, r1
 8004d14:	0011      	movs	r1, r2
 8004d16:	1cbb      	adds	r3, r7, #2
 8004d18:	1c02      	adds	r2, r0, #0
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	1c7b      	adds	r3, r7, #1
 8004d1e:	1c0a      	adds	r2, r1, #0
 8004d20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d22:	1c7b      	adds	r3, r7, #1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d004      	beq.n	8004d34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d2a:	1cbb      	adds	r3, r7, #2
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d32:	e003      	b.n	8004d3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d34:	1cbb      	adds	r3, r7, #2
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b002      	add	sp, #8
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	1dbb      	adds	r3, r7, #6
 8004d4e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	1dba      	adds	r2, r7, #6
 8004d56:	8812      	ldrh	r2, [r2, #0]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d008      	beq.n	8004d6e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d5e:	1dba      	adds	r2, r7, #6
 8004d60:	8812      	ldrh	r2, [r2, #0]
 8004d62:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7fe fff7 	bl	8003d5c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	1dba      	adds	r2, r7, #6
 8004d74:	8812      	ldrh	r2, [r2, #0]
 8004d76:	4013      	ands	r3, r2
 8004d78:	d008      	beq.n	8004d8c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004d7c:	1dba      	adds	r2, r7, #6
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004d82:	1dbb      	adds	r3, r7, #6
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	0018      	movs	r0, r3
 8004d88:	f000 f806 	bl	8004d98 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021800 	.word	0x40021800

08004d98 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	0002      	movs	r2, r0
 8004da0:	1dbb      	adds	r3, r7, #6
 8004da2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b002      	add	sp, #8
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	0049      	lsls	r1, r1, #1
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40007000 	.word	0x40007000

08004dc8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	000a      	movs	r2, r1
 8004dd2:	1cfb      	adds	r3, r7, #3
 8004dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d009      	beq.n	8004df0 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_PWR_EnterSTOPMode+0x68>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2207      	movs	r2, #7
 8004de2:	4393      	bics	r3, r2
 8004de4:	001a      	movs	r2, r3
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <HAL_PWR_EnterSTOPMode+0x68>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e005      	b.n	8004dfc <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <HAL_PWR_EnterSTOPMode+0x68>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <HAL_PWR_EnterSTOPMode+0x68>)
 8004df6:	2107      	movs	r1, #7
 8004df8:	438a      	bics	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004e02:	2104      	movs	r1, #4
 8004e04:	430a      	orrs	r2, r1
 8004e06:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004e08:	1cfb      	adds	r3, r7, #3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e10:	bf30      	wfi
 8004e12:	e002      	b.n	8004e1a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e14:	bf40      	sev
    __WFE();
 8004e16:	bf20      	wfe
    __WFE();
 8004e18:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004e20:	2104      	movs	r1, #4
 8004e22:	438a      	bics	r2, r1
 8004e24:	611a      	str	r2, [r3, #16]
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b002      	add	sp, #8
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	40007000 	.word	0x40007000
 8004e34:	e000ed00 	.word	0xe000ed00

08004e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	0019      	movs	r1, r3
 8004e4a:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d11f      	bne.n	8004e9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	0013      	movs	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	189b      	adds	r3, r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4912      	ldr	r1, [pc, #72]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f7fb f966 	bl	800013c <__udivsi3>
 8004e70:	0003      	movs	r3, r0
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e76:	e008      	b.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e001      	b.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e009      	b.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	401a      	ands	r2, r3
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d0ed      	beq.n	8004e78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b004      	add	sp, #16
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	40007000 	.word	0x40007000
 8004eac:	fffff9ff 	.word	0xfffff9ff
 8004eb0:	20000010 	.word	0x20000010
 8004eb4:	000f4240 	.word	0x000f4240

08004eb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	23e0      	movs	r3, #224	; 0xe0
 8004ec2:	01db      	lsls	r3, r3, #7
 8004ec4:	4013      	ands	r3, r2
}
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f000 fb50 	bl	8005584 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	4013      	ands	r3, r2
 8004eec:	d100      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x20>
 8004eee:	e07c      	b.n	8004fea <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef0:	4bc3      	ldr	r3, [pc, #780]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2238      	movs	r2, #56	; 0x38
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004efa:	4bc1      	ldr	r3, [pc, #772]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4013      	ands	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d102      	bne.n	8004f10 <HAL_RCC_OscConfig+0x40>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d002      	beq.n	8004f16 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d10b      	bne.n	8004f2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f16:	4bba      	ldr	r3, [pc, #744]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d062      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x118>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d15e      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e32a      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_OscConfig+0x7a>
 8004f3a:	4bb1      	ldr	r3, [pc, #708]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4bb0      	ldr	r3, [pc, #704]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	0249      	lsls	r1, r1, #9
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e020      	b.n	8004f8c <HAL_RCC_OscConfig+0xbc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	23a0      	movs	r3, #160	; 0xa0
 8004f50:	02db      	lsls	r3, r3, #11
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d10e      	bne.n	8004f74 <HAL_RCC_OscConfig+0xa4>
 8004f56:	4baa      	ldr	r3, [pc, #680]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	4ba9      	ldr	r3, [pc, #676]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	02c9      	lsls	r1, r1, #11
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	4ba6      	ldr	r3, [pc, #664]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4ba5      	ldr	r3, [pc, #660]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	0249      	lsls	r1, r1, #9
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e00b      	b.n	8004f8c <HAL_RCC_OscConfig+0xbc>
 8004f74:	4ba2      	ldr	r3, [pc, #648]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4ba1      	ldr	r3, [pc, #644]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f7a:	49a2      	ldr	r1, [pc, #648]	; (8005204 <HAL_RCC_OscConfig+0x334>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4b9e      	ldr	r3, [pc, #632]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f86:	49a0      	ldr	r1, [pc, #640]	; (8005208 <HAL_RCC_OscConfig+0x338>)
 8004f88:	400a      	ands	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d014      	beq.n	8004fbe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7ff fb04 	bl	80045a0 <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9e:	f7ff faff 	bl	80045a0 <HAL_GetTick>
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b64      	cmp	r3, #100	; 0x64
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e2e9      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb0:	4b93      	ldr	r3, [pc, #588]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	029b      	lsls	r3, r3, #10
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0xce>
 8004fbc:	e015      	b.n	8004fea <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7ff faef 	bl	80045a0 <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7ff faea 	bl	80045a0 <HAL_GetTick>
 8004fcc:	0002      	movs	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e2d4      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fda:	4b89      	ldr	r3, [pc, #548]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	029b      	lsls	r3, r3, #10
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0xf8>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x126>
 8004ff4:	e099      	b.n	800512a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2238      	movs	r2, #56	; 0x38
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005000:	4b7f      	ldr	r3, [pc, #508]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2203      	movs	r2, #3
 8005006:	4013      	ands	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b10      	cmp	r3, #16
 800500e:	d102      	bne.n	8005016 <HAL_RCC_OscConfig+0x146>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d002      	beq.n	800501c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d135      	bne.n	8005088 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501c:	4b78      	ldr	r3, [pc, #480]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4013      	ands	r3, r2
 8005026:	d005      	beq.n	8005034 <HAL_RCC_OscConfig+0x164>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e2a7      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005034:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4a74      	ldr	r2, [pc, #464]	; (800520c <HAL_RCC_OscConfig+0x33c>)
 800503a:	4013      	ands	r3, r2
 800503c:	0019      	movs	r1, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	021a      	lsls	r2, r3, #8
 8005044:	4b6e      	ldr	r3, [pc, #440]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d112      	bne.n	8005076 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005050:	4b6b      	ldr	r3, [pc, #428]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_RCC_OscConfig+0x340>)
 8005056:	4013      	ands	r3, r2
 8005058:	0019      	movs	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	4b68      	ldr	r3, [pc, #416]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	0adb      	lsrs	r3, r3, #11
 800506a:	2207      	movs	r2, #7
 800506c:	4013      	ands	r3, r2
 800506e:	4a69      	ldr	r2, [pc, #420]	; (8005214 <HAL_RCC_OscConfig+0x344>)
 8005070:	40da      	lsrs	r2, r3
 8005072:	4b69      	ldr	r3, [pc, #420]	; (8005218 <HAL_RCC_OscConfig+0x348>)
 8005074:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005076:	4b69      	ldr	r3, [pc, #420]	; (800521c <HAL_RCC_OscConfig+0x34c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0018      	movs	r0, r3
 800507c:	f7ff fa34 	bl	80044e8 <HAL_InitTick>
 8005080:	1e03      	subs	r3, r0, #0
 8005082:	d051      	beq.n	8005128 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e27d      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d030      	beq.n	80050f2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005090:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5e      	ldr	r2, [pc, #376]	; (8005210 <HAL_RCC_OscConfig+0x340>)
 8005096:	4013      	ands	r3, r2
 8005098:	0019      	movs	r1, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	4b58      	ldr	r3, [pc, #352]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b56      	ldr	r3, [pc, #344]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b55      	ldr	r3, [pc, #340]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	0049      	lsls	r1, r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7ff fa75 	bl	80045a0 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050bc:	f7ff fa70 	bl	80045a0 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e25a      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	00db      	lsls	r3, r3, #3
 80050d6:	4013      	ands	r3, r2
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050da:	4b49      	ldr	r3, [pc, #292]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4a4b      	ldr	r2, [pc, #300]	; (800520c <HAL_RCC_OscConfig+0x33c>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	0019      	movs	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	021a      	lsls	r2, r3, #8
 80050ea:	4b45      	ldr	r3, [pc, #276]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	e01b      	b.n	800512a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b42      	ldr	r3, [pc, #264]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80050f8:	4949      	ldr	r1, [pc, #292]	; (8005220 <HAL_RCC_OscConfig+0x350>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7ff fa4f 	bl	80045a0 <HAL_GetTick>
 8005102:	0003      	movs	r3, r0
 8005104:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005108:	f7ff fa4a 	bl	80045a0 <HAL_GetTick>
 800510c:	0002      	movs	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e234      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511a:	4b39      	ldr	r3, [pc, #228]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2380      	movs	r3, #128	; 0x80
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4013      	ands	r3, r2
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x238>
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005128:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2208      	movs	r2, #8
 8005130:	4013      	ands	r3, r2
 8005132:	d047      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005134:	4b32      	ldr	r3, [pc, #200]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2238      	movs	r2, #56	; 0x38
 800513a:	4013      	ands	r3, r2
 800513c:	2b18      	cmp	r3, #24
 800513e:	d10a      	bne.n	8005156 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005144:	2202      	movs	r2, #2
 8005146:	4013      	ands	r3, r2
 8005148:	d03c      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2f4>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d138      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e216      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d019      	beq.n	8005192 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800515e:	4b28      	ldr	r3, [pc, #160]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005164:	2101      	movs	r1, #1
 8005166:	430a      	orrs	r2, r1
 8005168:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516a:	f7ff fa19 	bl	80045a0 <HAL_GetTick>
 800516e:	0003      	movs	r3, r0
 8005170:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005174:	f7ff fa14 	bl	80045a0 <HAL_GetTick>
 8005178:	0002      	movs	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e1fe      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518a:	2202      	movs	r2, #2
 800518c:	4013      	ands	r3, r2
 800518e:	d0f1      	beq.n	8005174 <HAL_RCC_OscConfig+0x2a4>
 8005190:	e018      	b.n	80051c4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005196:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8005198:	2101      	movs	r1, #1
 800519a:	438a      	bics	r2, r1
 800519c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519e:	f7ff f9ff 	bl	80045a0 <HAL_GetTick>
 80051a2:	0003      	movs	r3, r0
 80051a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a8:	f7ff f9fa 	bl	80045a0 <HAL_GetTick>
 80051ac:	0002      	movs	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e1e4      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ba:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80051bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051be:	2202      	movs	r2, #2
 80051c0:	4013      	ands	r3, r2
 80051c2:	d1f1      	bne.n	80051a8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2204      	movs	r2, #4
 80051ca:	4013      	ands	r3, r2
 80051cc:	d100      	bne.n	80051d0 <HAL_RCC_OscConfig+0x300>
 80051ce:	e0c7      	b.n	8005360 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	231f      	movs	r3, #31
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051d8:	4b09      	ldr	r3, [pc, #36]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2238      	movs	r2, #56	; 0x38
 80051de:	4013      	ands	r3, r2
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d11f      	bne.n	8005224 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	2202      	movs	r2, #2
 80051ea:	4013      	ands	r3, r2
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x320>
 80051ee:	e0b7      	b.n	8005360 <HAL_RCC_OscConfig+0x490>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d000      	beq.n	80051fa <HAL_RCC_OscConfig+0x32a>
 80051f8:	e0b2      	b.n	8005360 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e1c2      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	40021000 	.word	0x40021000
 8005204:	fffeffff 	.word	0xfffeffff
 8005208:	fffbffff 	.word	0xfffbffff
 800520c:	ffff80ff 	.word	0xffff80ff
 8005210:	ffffc7ff 	.word	0xffffc7ff
 8005214:	00f42400 	.word	0x00f42400
 8005218:	20000010 	.word	0x20000010
 800521c:	20000014 	.word	0x20000014
 8005220:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005224:	4bb5      	ldr	r3, [pc, #724]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	055b      	lsls	r3, r3, #21
 800522c:	4013      	ands	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_RCC_OscConfig+0x364>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x366>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800523a:	4bb0      	ldr	r3, [pc, #704]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800523c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523e:	4baf      	ldr	r3, [pc, #700]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	0549      	lsls	r1, r1, #21
 8005244:	430a      	orrs	r2, r1
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
 8005248:	4bac      	ldr	r3, [pc, #688]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800524a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	055b      	lsls	r3, r3, #21
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005256:	231f      	movs	r3, #31
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525e:	4ba8      	ldr	r3, [pc, #672]	; (8005500 <HAL_RCC_OscConfig+0x630>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	4013      	ands	r3, r2
 8005268:	d11a      	bne.n	80052a0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526a:	4ba5      	ldr	r3, [pc, #660]	; (8005500 <HAL_RCC_OscConfig+0x630>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4ba4      	ldr	r3, [pc, #656]	; (8005500 <HAL_RCC_OscConfig+0x630>)
 8005270:	2180      	movs	r1, #128	; 0x80
 8005272:	0049      	lsls	r1, r1, #1
 8005274:	430a      	orrs	r2, r1
 8005276:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005278:	f7ff f992 	bl	80045a0 <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005282:	f7ff f98d 	bl	80045a0 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e177      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005294:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <HAL_RCC_OscConfig+0x630>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3e6>
 80052a8:	4b94      	ldr	r3, [pc, #592]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ac:	4b93      	ldr	r3, [pc, #588]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052ae:	2101      	movs	r1, #1
 80052b0:	430a      	orrs	r2, r1
 80052b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80052b4:	e01c      	b.n	80052f0 <HAL_RCC_OscConfig+0x420>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b05      	cmp	r3, #5
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCC_OscConfig+0x408>
 80052be:	4b8f      	ldr	r3, [pc, #572]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052c2:	4b8e      	ldr	r3, [pc, #568]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052c4:	2104      	movs	r1, #4
 80052c6:	430a      	orrs	r2, r1
 80052c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ca:	4b8c      	ldr	r3, [pc, #560]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ce:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052d0:	2101      	movs	r1, #1
 80052d2:	430a      	orrs	r2, r1
 80052d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052d6:	e00b      	b.n	80052f0 <HAL_RCC_OscConfig+0x420>
 80052d8:	4b88      	ldr	r3, [pc, #544]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052dc:	4b87      	ldr	r3, [pc, #540]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052de:	2101      	movs	r1, #1
 80052e0:	438a      	bics	r2, r1
 80052e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e4:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e8:	4b84      	ldr	r3, [pc, #528]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80052ea:	2104      	movs	r1, #4
 80052ec:	438a      	bics	r2, r1
 80052ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d014      	beq.n	8005322 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7ff f952 	bl	80045a0 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	e009      	b.n	8005316 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7ff f94d 	bl	80045a0 <HAL_GetTick>
 8005306:	0002      	movs	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <HAL_RCC_OscConfig+0x634>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e136      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	4b79      	ldr	r3, [pc, #484]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	2202      	movs	r2, #2
 800531c:	4013      	ands	r3, r2
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x432>
 8005320:	e013      	b.n	800534a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7ff f93d 	bl	80045a0 <HAL_GetTick>
 8005326:	0003      	movs	r3, r0
 8005328:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800532a:	e009      	b.n	8005340 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532c:	f7ff f938 	bl	80045a0 <HAL_GetTick>
 8005330:	0002      	movs	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	4a73      	ldr	r2, [pc, #460]	; (8005504 <HAL_RCC_OscConfig+0x634>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e121      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005340:	4b6e      	ldr	r3, [pc, #440]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	2202      	movs	r2, #2
 8005346:	4013      	ands	r3, r2
 8005348:	d1f0      	bne.n	800532c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800534a:	231f      	movs	r3, #31
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b69      	ldr	r3, [pc, #420]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005358:	4b68      	ldr	r3, [pc, #416]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800535a:	496b      	ldr	r1, [pc, #428]	; (8005508 <HAL_RCC_OscConfig+0x638>)
 800535c:	400a      	ands	r2, r1
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2220      	movs	r2, #32
 8005366:	4013      	ands	r3, r2
 8005368:	d039      	beq.n	80053de <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01b      	beq.n	80053aa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005372:	4b62      	ldr	r3, [pc, #392]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4b61      	ldr	r3, [pc, #388]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	03c9      	lsls	r1, r1, #15
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005380:	f7ff f90e 	bl	80045a0 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538a:	f7ff f909 	bl	80045a0 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0f3      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800539c:	4b57      	ldr	r3, [pc, #348]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	4013      	ands	r3, r2
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x4ba>
 80053a8:	e019      	b.n	80053de <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053aa:	4b54      	ldr	r3, [pc, #336]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b53      	ldr	r3, [pc, #332]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80053b0:	4956      	ldr	r1, [pc, #344]	; (800550c <HAL_RCC_OscConfig+0x63c>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b6:	f7ff f8f3 	bl	80045a0 <HAL_GetTick>
 80053ba:	0003      	movs	r3, r0
 80053bc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c0:	f7ff f8ee 	bl	80045a0 <HAL_GetTick>
 80053c4:	0002      	movs	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0d8      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80053d2:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	4013      	ands	r3, r2
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d100      	bne.n	80053e8 <HAL_RCC_OscConfig+0x518>
 80053e6:	e0cc      	b.n	8005582 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053e8:	4b44      	ldr	r3, [pc, #272]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2238      	movs	r2, #56	; 0x38
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d100      	bne.n	80053f6 <HAL_RCC_OscConfig+0x526>
 80053f4:	e07b      	b.n	80054ee <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d156      	bne.n	80054ac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b3e      	ldr	r3, [pc, #248]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005404:	4942      	ldr	r1, [pc, #264]	; (8005510 <HAL_RCC_OscConfig+0x640>)
 8005406:	400a      	ands	r2, r1
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7ff f8c9 	bl	80045a0 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7ff f8c4 	bl	80045a0 <HAL_GetTick>
 8005418:	0002      	movs	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0ae      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005426:	4b35      	ldr	r3, [pc, #212]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	2380      	movs	r3, #128	; 0x80
 800542c:	049b      	lsls	r3, r3, #18
 800542e:	4013      	ands	r3, r2
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005432:	4b32      	ldr	r3, [pc, #200]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	4a37      	ldr	r2, [pc, #220]	; (8005514 <HAL_RCC_OscConfig+0x644>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	431a      	orrs	r2, r3
 8005460:	4b26      	ldr	r3, [pc, #152]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005462:	430a      	orrs	r2, r1
 8005464:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005466:	4b25      	ldr	r3, [pc, #148]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	0449      	lsls	r1, r1, #17
 8005470:	430a      	orrs	r2, r1
 8005472:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005474:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	4b20      	ldr	r3, [pc, #128]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	0549      	lsls	r1, r1, #21
 800547e:	430a      	orrs	r2, r1
 8005480:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7ff f88d 	bl	80045a0 <HAL_GetTick>
 8005486:	0003      	movs	r3, r0
 8005488:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548c:	f7ff f888 	bl	80045a0 <HAL_GetTick>
 8005490:	0002      	movs	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e072      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	2380      	movs	r3, #128	; 0x80
 80054a4:	049b      	lsls	r3, r3, #18
 80054a6:	4013      	ands	r3, r2
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0x5bc>
 80054aa:	e06a      	b.n	8005582 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ac:	4b13      	ldr	r3, [pc, #76]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054b2:	4917      	ldr	r1, [pc, #92]	; (8005510 <HAL_RCC_OscConfig+0x640>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7ff f872 	bl	80045a0 <HAL_GetTick>
 80054bc:	0003      	movs	r3, r0
 80054be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c2:	f7ff f86d 	bl	80045a0 <HAL_GetTick>
 80054c6:	0002      	movs	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e057      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	049b      	lsls	r3, r3, #18
 80054dc:	4013      	ands	r3, r2
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_OscConfig+0x62c>)
 80054e6:	490c      	ldr	r1, [pc, #48]	; (8005518 <HAL_RCC_OscConfig+0x648>)
 80054e8:	400a      	ands	r2, r1
 80054ea:	60da      	str	r2, [r3, #12]
 80054ec:	e049      	b.n	8005582 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d112      	bne.n	800551c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e044      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
 80054fa:	46c0      	nop			; (mov r8, r8)
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	00001388 	.word	0x00001388
 8005508:	efffffff 	.word	0xefffffff
 800550c:	ffbfffff 	.word	0xffbfffff
 8005510:	feffffff 	.word	0xfeffffff
 8005514:	11c1808c 	.word	0x11c1808c
 8005518:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <HAL_RCC_OscConfig+0x6bc>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2203      	movs	r2, #3
 8005526:	401a      	ands	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	429a      	cmp	r2, r3
 800552e:	d126      	bne.n	800557e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2270      	movs	r2, #112	; 0x70
 8005534:	401a      	ands	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d11f      	bne.n	800557e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	23fe      	movs	r3, #254	; 0xfe
 8005542:	01db      	lsls	r3, r3, #7
 8005544:	401a      	ands	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800554c:	429a      	cmp	r2, r3
 800554e:	d116      	bne.n	800557e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	23f8      	movs	r3, #248	; 0xf8
 8005554:	039b      	lsls	r3, r3, #14
 8005556:	401a      	ands	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800555c:	429a      	cmp	r2, r3
 800555e:	d10e      	bne.n	800557e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	23e0      	movs	r3, #224	; 0xe0
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	401a      	ands	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800556c:	429a      	cmp	r2, r3
 800556e:	d106      	bne.n	800557e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	0f5b      	lsrs	r3, r3, #29
 8005574:	075a      	lsls	r2, r3, #29
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d001      	beq.n	8005582 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b008      	add	sp, #32
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000

08005590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0e9      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4b76      	ldr	r3, [pc, #472]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2207      	movs	r2, #7
 80055aa:	4013      	ands	r3, r2
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d91e      	bls.n	80055f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b73      	ldr	r3, [pc, #460]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2207      	movs	r2, #7
 80055b8:	4393      	bics	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	4b70      	ldr	r3, [pc, #448]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055c4:	f7fe ffec 	bl	80045a0 <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055cc:	e009      	b.n	80055e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ce:	f7fe ffe7 	bl	80045a0 <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	4a6a      	ldr	r2, [pc, #424]	; (8005784 <HAL_RCC_ClockConfig+0x1f4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0ca      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055e2:	4b67      	ldr	r3, [pc, #412]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2207      	movs	r2, #7
 80055e8:	4013      	ands	r3, r2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1ee      	bne.n	80055ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d015      	beq.n	8005626 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d006      	beq.n	8005612 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005604:	4b60      	ldr	r3, [pc, #384]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	4b5f      	ldr	r3, [pc, #380]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 800560a:	21e0      	movs	r1, #224	; 0xe0
 800560c:	01c9      	lsls	r1, r1, #7
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a5d      	ldr	r2, [pc, #372]	; (800578c <HAL_RCC_ClockConfig+0x1fc>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	4b59      	ldr	r3, [pc, #356]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2201      	movs	r2, #1
 800562c:	4013      	ands	r3, r2
 800562e:	d057      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d107      	bne.n	8005648 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005638:	4b53      	ldr	r3, [pc, #332]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	4013      	ands	r3, r2
 8005642:	d12b      	bne.n	800569c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e097      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d107      	bne.n	8005660 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005650:	4b4d      	ldr	r3, [pc, #308]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	049b      	lsls	r3, r3, #18
 8005658:	4013      	ands	r3, r2
 800565a:	d11f      	bne.n	800569c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e08b      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005668:	4b47      	ldr	r3, [pc, #284]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4013      	ands	r3, r2
 8005672:	d113      	bne.n	800569c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e07f      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d106      	bne.n	800568e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005680:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005684:	2202      	movs	r2, #2
 8005686:	4013      	ands	r3, r2
 8005688:	d108      	bne.n	800569c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e074      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568e:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	2202      	movs	r2, #2
 8005694:	4013      	ands	r3, r2
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e06d      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800569c:	4b3a      	ldr	r3, [pc, #232]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	2207      	movs	r2, #7
 80056a2:	4393      	bics	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	4b37      	ldr	r3, [pc, #220]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 80056ac:	430a      	orrs	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b0:	f7fe ff76 	bl	80045a0 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b8:	e009      	b.n	80056ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ba:	f7fe ff71 	bl	80045a0 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <HAL_RCC_ClockConfig+0x1f4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e054      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2238      	movs	r2, #56	; 0x38
 80056d4:	401a      	ands	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1ec      	bne.n	80056ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2207      	movs	r2, #7
 80056e6:	4013      	ands	r3, r2
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d21e      	bcs.n	800572c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2207      	movs	r2, #7
 80056f4:	4393      	bics	r3, r2
 80056f6:	0019      	movs	r1, r3
 80056f8:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005700:	f7fe ff4e 	bl	80045a0 <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005708:	e009      	b.n	800571e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800570a:	f7fe ff49 	bl	80045a0 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_RCC_ClockConfig+0x1f4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e02c      	b.n	8005778 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <HAL_RCC_ClockConfig+0x1f0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2207      	movs	r2, #7
 8005724:	4013      	ands	r3, r2
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d1ee      	bne.n	800570a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2204      	movs	r2, #4
 8005732:	4013      	ands	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_RCC_ClockConfig+0x200>)
 800573c:	4013      	ands	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	4b10      	ldr	r3, [pc, #64]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800574a:	f000 f829 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 800574e:	0001      	movs	r1, r0
 8005750:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <HAL_RCC_ClockConfig+0x1f8>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	220f      	movs	r2, #15
 8005758:	401a      	ands	r2, r3
 800575a:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x204>)
 800575c:	0092      	lsls	r2, r2, #2
 800575e:	58d3      	ldr	r3, [r2, r3]
 8005760:	221f      	movs	r2, #31
 8005762:	4013      	ands	r3, r2
 8005764:	000a      	movs	r2, r1
 8005766:	40da      	lsrs	r2, r3
 8005768:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <HAL_RCC_ClockConfig+0x208>)
 800576a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_RCC_ClockConfig+0x20c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0018      	movs	r0, r3
 8005772:	f7fe feb9 	bl	80044e8 <HAL_InitTick>
 8005776:	0003      	movs	r3, r0
}
 8005778:	0018      	movs	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40022000 	.word	0x40022000
 8005784:	00001388 	.word	0x00001388
 8005788:	40021000 	.word	0x40021000
 800578c:	fffff0ff 	.word	0xfffff0ff
 8005790:	ffff8fff 	.word	0xffff8fff
 8005794:	08015c60 	.word	0x08015c60
 8005798:	20000010 	.word	0x20000010
 800579c:	20000014 	.word	0x20000014

080057a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a6:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2238      	movs	r2, #56	; 0x38
 80057ac:	4013      	ands	r3, r2
 80057ae:	d10f      	bne.n	80057d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80057b0:	4b39      	ldr	r3, [pc, #228]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	0adb      	lsrs	r3, r3, #11
 80057b6:	2207      	movs	r2, #7
 80057b8:	4013      	ands	r3, r2
 80057ba:	2201      	movs	r2, #1
 80057bc:	409a      	lsls	r2, r3
 80057be:	0013      	movs	r3, r2
 80057c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	4835      	ldr	r0, [pc, #212]	; (800589c <HAL_RCC_GetSysClockFreq+0xfc>)
 80057c6:	f7fa fcb9 	bl	800013c <__udivsi3>
 80057ca:	0003      	movs	r3, r0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e05d      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2238      	movs	r2, #56	; 0x38
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d102      	bne.n	80057e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e054      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057e2:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2238      	movs	r2, #56	; 0x38
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d138      	bne.n	8005860 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057ee:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2203      	movs	r2, #3
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057f8:	4b27      	ldr	r3, [pc, #156]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	2207      	movs	r2, #7
 8005800:	4013      	ands	r3, r2
 8005802:	3301      	adds	r3, #1
 8005804:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d10d      	bne.n	8005828 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4824      	ldr	r0, [pc, #144]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005810:	f7fa fc94 	bl	800013c <__udivsi3>
 8005814:	0003      	movs	r3, r0
 8005816:	0019      	movs	r1, r3
 8005818:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	0a1b      	lsrs	r3, r3, #8
 800581e:	227f      	movs	r2, #127	; 0x7f
 8005820:	4013      	ands	r3, r2
 8005822:	434b      	muls	r3, r1
 8005824:	617b      	str	r3, [r7, #20]
        break;
 8005826:	e00d      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	481c      	ldr	r0, [pc, #112]	; (800589c <HAL_RCC_GetSysClockFreq+0xfc>)
 800582c:	f7fa fc86 	bl	800013c <__udivsi3>
 8005830:	0003      	movs	r3, r0
 8005832:	0019      	movs	r1, r3
 8005834:	4b18      	ldr	r3, [pc, #96]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	0a1b      	lsrs	r3, r3, #8
 800583a:	227f      	movs	r2, #127	; 0x7f
 800583c:	4013      	ands	r3, r2
 800583e:	434b      	muls	r3, r1
 8005840:	617b      	str	r3, [r7, #20]
        break;
 8005842:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	0f5b      	lsrs	r3, r3, #29
 800584a:	2207      	movs	r2, #7
 800584c:	4013      	ands	r3, r2
 800584e:	3301      	adds	r3, #1
 8005850:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	6978      	ldr	r0, [r7, #20]
 8005856:	f7fa fc71 	bl	800013c <__udivsi3>
 800585a:	0003      	movs	r3, r0
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	e015      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2238      	movs	r2, #56	; 0x38
 8005866:	4013      	ands	r3, r2
 8005868:	2b20      	cmp	r3, #32
 800586a:	d103      	bne.n	8005874 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e00b      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2238      	movs	r2, #56	; 0x38
 800587a:	4013      	ands	r3, r2
 800587c:	2b18      	cmp	r3, #24
 800587e:	d103      	bne.n	8005888 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005880:	23fa      	movs	r3, #250	; 0xfa
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e001      	b.n	800588c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800588c:	693b      	ldr	r3, [r7, #16]
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b006      	add	sp, #24
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	40021000 	.word	0x40021000
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	007a1200 	.word	0x007a1200

080058a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a8:	4b02      	ldr	r3, [pc, #8]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000010 	.word	0x20000010

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b5b0      	push	{r4, r5, r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80058bc:	f7ff fff2 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058c0:	0004      	movs	r4, r0
 80058c2:	f7ff faf9 	bl	8004eb8 <LL_RCC_GetAPB1Prescaler>
 80058c6:	0003      	movs	r3, r0
 80058c8:	0b1a      	lsrs	r2, r3, #12
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	58d3      	ldr	r3, [r2, r3]
 80058d0:	221f      	movs	r2, #31
 80058d2:	4013      	ands	r3, r2
 80058d4:	40dc      	lsrs	r4, r3
 80058d6:	0023      	movs	r3, r4
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	bdb0      	pop	{r4, r5, r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	08015ca0 	.word	0x08015ca0

080058e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80058ec:	2313      	movs	r3, #19
 80058ee:	18fb      	adds	r3, r7, r3
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f4:	2312      	movs	r3, #18
 80058f6:	18fb      	adds	r3, r7, r3
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	4013      	ands	r3, r2
 8005906:	d100      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005908:	e0ad      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590a:	2011      	movs	r0, #17
 800590c:	183b      	adds	r3, r7, r0
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005912:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	055b      	lsls	r3, r3, #21
 800591a:	4013      	ands	r3, r2
 800591c:	d110      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	4b44      	ldr	r3, [pc, #272]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005922:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	0549      	lsls	r1, r1, #21
 8005928:	430a      	orrs	r2, r1
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
 800592c:	4b40      	ldr	r3, [pc, #256]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800592e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	055b      	lsls	r3, r3, #21
 8005934:	4013      	ands	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800593a:	183b      	adds	r3, r7, r0
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005940:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	0049      	lsls	r1, r1, #1
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800594e:	f7fe fe27 	bl	80045a0 <HAL_GetTick>
 8005952:	0003      	movs	r3, r0
 8005954:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005956:	e00b      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fe fe22 	bl	80045a0 <HAL_GetTick>
 800595c:	0002      	movs	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d904      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005966:	2313      	movs	r3, #19
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	2203      	movs	r2, #3
 800596c:	701a      	strb	r2, [r3, #0]
        break;
 800596e:	e005      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005970:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	4013      	ands	r3, r2
 800597a:	d0ed      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800597c:	2313      	movs	r3, #19
 800597e:	18fb      	adds	r3, r7, r3
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d15e      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005986:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800598a:	23c0      	movs	r3, #192	; 0xc0
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4013      	ands	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d014      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059a2:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a6:	4a24      	ldr	r2, [pc, #144]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059b0:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	0249      	lsls	r1, r1, #9
 80059b6:	430a      	orrs	r2, r1
 80059b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059c0:	491e      	ldr	r1, [pc, #120]	; (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80059c2:	400a      	ands	r2, r1
 80059c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059c6:	4b1a      	ldr	r3, [pc, #104]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2201      	movs	r2, #1
 80059d0:	4013      	ands	r3, r2
 80059d2:	d016      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fe fde4 	bl	80045a0 <HAL_GetTick>
 80059d8:	0003      	movs	r3, r0
 80059da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059dc:	e00c      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fe fddf 	bl	80045a0 <HAL_GetTick>
 80059e2:	0002      	movs	r2, r0
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d904      	bls.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80059ee:	2313      	movs	r3, #19
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2203      	movs	r2, #3
 80059f4:	701a      	strb	r2, [r3, #0]
            break;
 80059f6:	e004      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d0ed      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005a02:	2313      	movs	r3, #19
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a0c:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a10:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1a:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a20:	e016      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a22:	2312      	movs	r3, #18
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	2213      	movs	r2, #19
 8005a28:	18ba      	adds	r2, r7, r2
 8005a2a:	7812      	ldrb	r2, [r2, #0]
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e00f      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a30:	40021000 	.word	0x40021000
 8005a34:	40007000 	.word	0x40007000
 8005a38:	fffffcff 	.word	0xfffffcff
 8005a3c:	fffeffff 	.word	0xfffeffff
 8005a40:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a44:	2312      	movs	r3, #18
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	2213      	movs	r2, #19
 8005a4a:	18ba      	adds	r2, r7, r2
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a50:	2311      	movs	r3, #17
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d105      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5a:	4bb6      	ldr	r3, [pc, #728]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a5e:	4bb5      	ldr	r3, [pc, #724]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a60:	49b5      	ldr	r1, [pc, #724]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005a62:	400a      	ands	r2, r1
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a70:	4bb0      	ldr	r3, [pc, #704]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	2203      	movs	r2, #3
 8005a76:	4393      	bics	r3, r2
 8005a78:	0019      	movs	r1, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4bad      	ldr	r3, [pc, #692]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8e:	4ba9      	ldr	r3, [pc, #676]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	220c      	movs	r2, #12
 8005a94:	4393      	bics	r3, r2
 8005a96:	0019      	movs	r1, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	4ba5      	ldr	r3, [pc, #660]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d009      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aac:	4ba1      	ldr	r3, [pc, #644]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab0:	2230      	movs	r2, #48	; 0x30
 8005ab2:	4393      	bics	r3, r2
 8005ab4:	0019      	movs	r1, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	4b9e      	ldr	r3, [pc, #632]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005abc:	430a      	orrs	r2, r1
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aca:	4b9a      	ldr	r3, [pc, #616]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	4a9b      	ldr	r2, [pc, #620]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	0019      	movs	r1, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	4b96      	ldr	r3, [pc, #600]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ada:	430a      	orrs	r2, r1
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	015b      	lsls	r3, r3, #5
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005aea:	4b92      	ldr	r3, [pc, #584]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aee:	4a94      	ldr	r2, [pc, #592]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	0019      	movs	r1, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	4b8e      	ldr	r3, [pc, #568]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005afa:	430a      	orrs	r2, r1
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	2380      	movs	r3, #128	; 0x80
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4013      	ands	r3, r2
 8005b08:	d009      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b0a:	4b8a      	ldr	r3, [pc, #552]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	4a8d      	ldr	r2, [pc, #564]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	0019      	movs	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b18:	4b86      	ldr	r3, [pc, #536]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4013      	ands	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b2a:	4b82      	ldr	r3, [pc, #520]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	4a86      	ldr	r2, [pc, #536]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b7e      	ldr	r3, [pc, #504]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2220      	movs	r2, #32
 8005b44:	4013      	ands	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b48:	4b7a      	ldr	r3, [pc, #488]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	4a7f      	ldr	r2, [pc, #508]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	0019      	movs	r1, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	4b77      	ldr	r3, [pc, #476]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	4013      	ands	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b66:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	4a79      	ldr	r2, [pc, #484]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	0019      	movs	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	4b6f      	ldr	r3, [pc, #444]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b76:	430a      	orrs	r2, r1
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	01db      	lsls	r3, r3, #7
 8005b82:	4013      	ands	r3, r2
 8005b84:	d015      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b86:	4b6b      	ldr	r3, [pc, #428]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	0899      	lsrs	r1, r3, #2
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b92:	4b68      	ldr	r3, [pc, #416]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b94:	430a      	orrs	r2, r1
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	05db      	lsls	r3, r3, #23
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d106      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ba4:	4b63      	ldr	r3, [pc, #396]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	0249      	lsls	r1, r1, #9
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	031b      	lsls	r3, r3, #12
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bbe:	4b5d      	ldr	r3, [pc, #372]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	2240      	movs	r2, #64	; 0x40
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bcc:	4b59      	ldr	r3, [pc, #356]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	2380      	movs	r3, #128	; 0x80
 8005bd8:	039b      	lsls	r3, r3, #14
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d016      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bde:	4b55      	ldr	r3, [pc, #340]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	4a5c      	ldr	r2, [pc, #368]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bec:	4b51      	ldr	r3, [pc, #324]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	03db      	lsls	r3, r3, #15
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005bfe:	4b4d      	ldr	r3, [pc, #308]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	0449      	lsls	r1, r1, #17
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	03db      	lsls	r3, r3, #15
 8005c14:	4013      	ands	r3, r2
 8005c16:	d016      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c18:	4b46      	ldr	r3, [pc, #280]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	4a4e      	ldr	r2, [pc, #312]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c26:	4b43      	ldr	r3, [pc, #268]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	045b      	lsls	r3, r3, #17
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d106      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c38:	4b3e      	ldr	r3, [pc, #248]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c3e:	2180      	movs	r1, #128	; 0x80
 8005c40:	0449      	lsls	r1, r1, #17
 8005c42:	430a      	orrs	r2, r1
 8005c44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d014      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c52:	4b38      	ldr	r3, [pc, #224]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c56:	2203      	movs	r2, #3
 8005c58:	4393      	bics	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1a      	ldr	r2, [r3, #32]
 8005c60:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c62:	430a      	orrs	r2, r1
 8005c64:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	4b30      	ldr	r3, [pc, #192]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	0249      	lsls	r1, r1, #9
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	019b      	lsls	r3, r3, #6
 8005c84:	4013      	ands	r3, r2
 8005c86:	d014      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	220c      	movs	r2, #12
 8005c8e:	4393      	bics	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c96:	4b27      	ldr	r3, [pc, #156]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ca4:	4b23      	ldr	r3, [pc, #140]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005caa:	2180      	movs	r1, #128	; 0x80
 8005cac:	0249      	lsls	r1, r1, #9
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	045b      	lsls	r3, r3, #17
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d016      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ccc:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d106      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005cde:	4b15      	ldr	r3, [pc, #84]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	0449      	lsls	r1, r1, #17
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	049b      	lsls	r3, r3, #18
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	d016      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfc:	4a10      	ldr	r2, [pc, #64]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	0019      	movs	r1, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d10:	2380      	movs	r3, #128	; 0x80
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d106      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d18:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	0449      	lsls	r1, r1, #17
 8005d22:	430a      	orrs	r2, r1
 8005d24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005d26:	2312      	movs	r3, #18
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b006      	add	sp, #24
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	efffffff 	.word	0xefffffff
 8005d3c:	fffff3ff 	.word	0xfffff3ff
 8005d40:	fffffcff 	.word	0xfffffcff
 8005d44:	fff3ffff 	.word	0xfff3ffff
 8005d48:	ffcfffff 	.word	0xffcfffff
 8005d4c:	ffffcfff 	.word	0xffffcfff
 8005d50:	ffff3fff 	.word	0xffff3fff
 8005d54:	ffbfffff 	.word	0xffbfffff
 8005d58:	feffffff 	.word	0xfeffffff

08005d5c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d5c:	b5b0      	push	{r4, r5, r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d64:	230f      	movs	r3, #15
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	2201      	movs	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d100      	bne.n	8005d74 <HAL_RTC_Init+0x18>
 8005d72:	e08c      	b.n	8005e8e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2229      	movs	r2, #41	; 0x29
 8005d78:	5c9b      	ldrb	r3, [r3, r2]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2228      	movs	r2, #40	; 0x28
 8005d84:	2100      	movs	r1, #0
 8005d86:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2288      	movs	r2, #136	; 0x88
 8005d8c:	0212      	lsls	r2, r2, #8
 8005d8e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7fe f81a 	bl	8003dcc <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2229      	movs	r2, #41	; 0x29
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2210      	movs	r2, #16
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d062      	beq.n	8005e74 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	22ca      	movs	r2, #202	; 0xca
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2253      	movs	r2, #83	; 0x53
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005dbe:	250f      	movs	r5, #15
 8005dc0:	197c      	adds	r4, r7, r5
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f000 fbf3 	bl	80065b0 <RTC_EnterInitMode>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005dce:	0028      	movs	r0, r5
 8005dd0:	183b      	adds	r3, r7, r0
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d12c      	bne.n	8005e32 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	492e      	ldr	r1, [pc, #184]	; (8005e9c <HAL_RTC_Init+0x140>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6999      	ldr	r1, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6912      	ldr	r2, [r2, #16]
 8005e0e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6919      	ldr	r1, [r3, #16]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	041a      	lsls	r2, r3, #16
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005e24:	183c      	adds	r4, r7, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 fc03 	bl	8006634 <RTC_ExitInitMode>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005e32:	230f      	movs	r3, #15
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	00d2      	lsls	r2, r2, #3
 8005e48:	08d2      	lsrs	r2, r2, #3
 8005e4a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6999      	ldr	r1, [r3, #24]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
 8005e72:	e003      	b.n	8005e7c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005e74:	230f      	movs	r3, #15
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2229      	movs	r2, #41	; 0x29
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005e8e:	230f      	movs	r3, #15
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	781b      	ldrb	r3, [r3, #0]
}
 8005e94:	0018      	movs	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	b004      	add	sp, #16
 8005e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9c:	fb8fffbf 	.word	0xfb8fffbf

08005ea0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ea0:	b5b0      	push	{r4, r5, r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2228      	movs	r2, #40	; 0x28
 8005eb0:	5c9b      	ldrb	r3, [r3, r2]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_RTC_SetTime+0x1a>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e092      	b.n	8005fe0 <HAL_RTC_SetTime+0x140>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2228      	movs	r2, #40	; 0x28
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2229      	movs	r2, #41	; 0x29
 8005ec6:	2102      	movs	r1, #2
 8005ec8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ca      	movs	r2, #202	; 0xca
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2253      	movs	r2, #83	; 0x53
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005eda:	2513      	movs	r5, #19
 8005edc:	197c      	adds	r4, r7, r5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f000 fb65 	bl	80065b0 <RTC_EnterInitMode>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005eea:	197b      	adds	r3, r7, r5
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d162      	bne.n	8005fb8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d125      	bne.n	8005f44 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	4013      	ands	r3, r2
 8005f02:	d102      	bne.n	8005f0a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f000 fbd4 	bl	80066bc <RTC_ByteToBcd2>
 8005f14:	0003      	movs	r3, r0
 8005f16:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f000 fbcd 	bl	80066bc <RTC_ByteToBcd2>
 8005f22:	0003      	movs	r3, r0
 8005f24:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f26:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	789b      	ldrb	r3, [r3, #2]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fbc5 	bl	80066bc <RTC_ByteToBcd2>
 8005f32:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f34:	0022      	movs	r2, r4
 8005f36:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	78db      	ldrb	r3, [r3, #3]
 8005f3c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e017      	b.n	8005f74 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	2240      	movs	r2, #64	; 0x40
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d102      	bne.n	8005f56 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005f68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	78db      	ldrb	r3, [r3, #3]
 8005f6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	491b      	ldr	r1, [pc, #108]	; (8005fe8 <HAL_RTC_SetTime+0x148>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4918      	ldr	r1, [pc, #96]	; (8005fec <HAL_RTC_SetTime+0x14c>)
 8005f8c:	400a      	ands	r2, r1
 8005f8e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005fa8:	2313      	movs	r3, #19
 8005faa:	18fc      	adds	r4, r7, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f000 fb40 	bl	8006634 <RTC_ExitInitMode>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	22ff      	movs	r2, #255	; 0xff
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005fc0:	2313      	movs	r3, #19
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2229      	movs	r2, #41	; 0x29
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2228      	movs	r2, #40	; 0x28
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]

  return status;
 8005fda:	2313      	movs	r3, #19
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	781b      	ldrb	r3, [r3, #0]
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b006      	add	sp, #24
 8005fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fe8:	007f7f7f 	.word	0x007f7f7f
 8005fec:	fffbffff 	.word	0xfffbffff

08005ff0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	045b      	lsls	r3, r3, #17
 800600e:	0c5a      	lsrs	r2, r3, #17
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_RTC_GetTime+0xb4>)
 800601c:	4013      	ands	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	0c1b      	lsrs	r3, r3, #16
 8006024:	b2db      	uxtb	r3, r3
 8006026:	223f      	movs	r2, #63	; 0x3f
 8006028:	4013      	ands	r3, r2
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	b2db      	uxtb	r3, r3
 8006036:	227f      	movs	r2, #127	; 0x7f
 8006038:	4013      	ands	r3, r2
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	227f      	movs	r2, #127	; 0x7f
 8006046:	4013      	ands	r3, r2
 8006048:	b2da      	uxtb	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	0d9b      	lsrs	r3, r3, #22
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2201      	movs	r2, #1
 8006056:	4013      	ands	r3, r2
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11a      	bne.n	800609a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fb4f 	bl	800670c <RTC_Bcd2ToByte>
 800606e:	0003      	movs	r3, r0
 8006070:	001a      	movs	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	0018      	movs	r0, r3
 800607c:	f000 fb46 	bl	800670c <RTC_Bcd2ToByte>
 8006080:	0003      	movs	r3, r0
 8006082:	001a      	movs	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	789b      	ldrb	r3, [r3, #2]
 800608c:	0018      	movs	r0, r3
 800608e:	f000 fb3d 	bl	800670c <RTC_Bcd2ToByte>
 8006092:	0003      	movs	r3, r0
 8006094:	001a      	movs	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	0018      	movs	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	b006      	add	sp, #24
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	007f7f7f 	.word	0x007f7f7f

080060a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2228      	movs	r2, #40	; 0x28
 80060b8:	5c9b      	ldrb	r3, [r3, r2]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_RTC_SetDate+0x1a>
 80060be:	2302      	movs	r3, #2
 80060c0:	e07e      	b.n	80061c0 <HAL_RTC_SetDate+0x118>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2228      	movs	r2, #40	; 0x28
 80060c6:	2101      	movs	r1, #1
 80060c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2229      	movs	r2, #41	; 0x29
 80060ce:	2102      	movs	r1, #2
 80060d0:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10e      	bne.n	80060f6 <HAL_RTC_SetDate+0x4e>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	001a      	movs	r2, r3
 80060de:	2310      	movs	r3, #16
 80060e0:	4013      	ands	r3, r2
 80060e2:	d008      	beq.n	80060f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2210      	movs	r2, #16
 80060ea:	4393      	bics	r3, r2
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	330a      	adds	r3, #10
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d11c      	bne.n	8006136 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	0018      	movs	r0, r3
 8006102:	f000 fadb 	bl	80066bc <RTC_ByteToBcd2>
 8006106:	0003      	movs	r3, r0
 8006108:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	0018      	movs	r0, r3
 8006110:	f000 fad4 	bl	80066bc <RTC_ByteToBcd2>
 8006114:	0003      	movs	r3, r0
 8006116:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006118:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	789b      	ldrb	r3, [r3, #2]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 facc 	bl	80066bc <RTC_ByteToBcd2>
 8006124:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006126:	0022      	movs	r2, r4
 8006128:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e00e      	b.n	8006154 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	78db      	ldrb	r3, [r3, #3]
 800613a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006142:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006148:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ca      	movs	r2, #202	; 0xca
 800615a:	625a      	str	r2, [r3, #36]	; 0x24
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2253      	movs	r2, #83	; 0x53
 8006162:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006164:	2513      	movs	r5, #19
 8006166:	197c      	adds	r4, r7, r5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fa20 	bl	80065b0 <RTC_EnterInitMode>
 8006170:	0003      	movs	r3, r0
 8006172:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006174:	0028      	movs	r0, r5
 8006176:	183b      	adds	r3, r7, r0
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10c      	bne.n	8006198 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4910      	ldr	r1, [pc, #64]	; (80061c8 <HAL_RTC_SetDate+0x120>)
 8006186:	400a      	ands	r2, r1
 8006188:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800618a:	183c      	adds	r4, r7, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0018      	movs	r0, r3
 8006190:	f000 fa50 	bl	8006634 <RTC_ExitInitMode>
 8006194:	0003      	movs	r3, r0
 8006196:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80061a0:	2313      	movs	r3, #19
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2229      	movs	r2, #41	; 0x29
 80061ae:	2101      	movs	r1, #1
 80061b0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2228      	movs	r2, #40	; 0x28
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

  return status;
 80061ba:	2313      	movs	r3, #19
 80061bc:	18fb      	adds	r3, r7, r3
 80061be:	781b      	ldrb	r3, [r3, #0]
}
 80061c0:	0018      	movs	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b006      	add	sp, #24
 80061c6:	bdb0      	pop	{r4, r5, r7, pc}
 80061c8:	00ffff3f 	.word	0x00ffff3f

080061cc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_RTC_GetDate+0x98>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	0c1b      	lsrs	r3, r3, #16
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	221f      	movs	r2, #31
 80061f6:	4013      	ands	r3, r2
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	223f      	movs	r2, #63	; 0x3f
 8006204:	4013      	ands	r3, r2
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	0b5b      	lsrs	r3, r3, #13
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2207      	movs	r2, #7
 8006214:	4013      	ands	r3, r2
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d11a      	bne.n	8006258 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	0018      	movs	r0, r3
 8006228:	f000 fa70 	bl	800670c <RTC_Bcd2ToByte>
 800622c:	0003      	movs	r3, r0
 800622e:	001a      	movs	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	0018      	movs	r0, r3
 800623a:	f000 fa67 	bl	800670c <RTC_Bcd2ToByte>
 800623e:	0003      	movs	r3, r0
 8006240:	001a      	movs	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	789b      	ldrb	r3, [r3, #2]
 800624a:	0018      	movs	r0, r3
 800624c:	f000 fa5e 	bl	800670c <RTC_Bcd2ToByte>
 8006250:	0003      	movs	r3, r0
 8006252:	001a      	movs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b006      	add	sp, #24
 8006260:	bd80      	pop	{r7, pc}
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	00ffff3f 	.word	0x00ffff3f

08006268 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b089      	sub	sp, #36	; 0x24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2228      	movs	r2, #40	; 0x28
 8006278:	5c9b      	ldrb	r3, [r3, r2]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d101      	bne.n	8006282 <HAL_RTC_SetAlarm_IT+0x1a>
 800627e:	2302      	movs	r3, #2
 8006280:	e127      	b.n	80064d2 <HAL_RTC_SetAlarm_IT+0x26a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2228      	movs	r2, #40	; 0x28
 8006286:	2101      	movs	r1, #1
 8006288:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2229      	movs	r2, #41	; 0x29
 800628e:	2102      	movs	r1, #2
 8006290:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d136      	bne.n	8006306 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2240      	movs	r2, #64	; 0x40
 80062a0:	4013      	ands	r3, r2
 80062a2:	d102      	bne.n	80062aa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2200      	movs	r2, #0
 80062a8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fa04 	bl	80066bc <RTC_ByteToBcd2>
 80062b4:	0003      	movs	r3, r0
 80062b6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	0018      	movs	r0, r3
 80062be:	f000 f9fd 	bl	80066bc <RTC_ByteToBcd2>
 80062c2:	0003      	movs	r3, r0
 80062c4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062c6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	789b      	ldrb	r3, [r3, #2]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 f9f5 	bl	80066bc <RTC_ByteToBcd2>
 80062d2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062d4:	0022      	movs	r2, r4
 80062d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	78db      	ldrb	r3, [r3, #3]
 80062dc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062de:	431a      	orrs	r2, r3
 80062e0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2220      	movs	r2, #32
 80062e6:	5c9b      	ldrb	r3, [r3, r2]
 80062e8:	0018      	movs	r0, r3
 80062ea:	f000 f9e7 	bl	80066bc <RTC_ByteToBcd2>
 80062ee:	0003      	movs	r3, r0
 80062f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062f2:	0022      	movs	r2, r4
 80062f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006300:	4313      	orrs	r3, r2
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	e022      	b.n	800634c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2240      	movs	r2, #64	; 0x40
 800630e:	4013      	ands	r3, r2
 8006310:	d102      	bne.n	8006318 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006324:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800632a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	78db      	ldrb	r3, [r3, #3]
 8006330:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006332:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2120      	movs	r1, #32
 8006338:	5c5b      	ldrb	r3, [r3, r1]
 800633a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800633c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006342:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006348:	4313      	orrs	r3, r2
 800634a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	22ca      	movs	r2, #202	; 0xca
 800635e:	625a      	str	r2, [r3, #36]	; 0x24
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2253      	movs	r2, #83	; 0x53
 8006366:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800636c:	2380      	movs	r3, #128	; 0x80
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	429a      	cmp	r2, r3
 8006372:	d14c      	bne.n	800640e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4957      	ldr	r1, [pc, #348]	; (80064dc <HAL_RTC_SetAlarm_IT+0x274>)
 8006380:	400a      	ands	r2, r1
 8006382:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2101      	movs	r1, #1
 8006390:	430a      	orrs	r2, r1
 8006392:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006394:	f7fe f904 	bl	80045a0 <HAL_GetTick>
 8006398:	0003      	movs	r3, r0
 800639a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800639c:	e016      	b.n	80063cc <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800639e:	f7fe f8ff 	bl	80045a0 <HAL_GetTick>
 80063a2:	0002      	movs	r2, r0
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad2      	subs	r2, r2, r3
 80063a8:	23fa      	movs	r3, #250	; 0xfa
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d90d      	bls.n	80063cc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	22ff      	movs	r2, #255	; 0xff
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2229      	movs	r2, #41	; 0x29
 80063bc:	2103      	movs	r1, #3
 80063be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2228      	movs	r2, #40	; 0x28
 80063c4:	2100      	movs	r1, #0
 80063c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e082      	b.n	80064d2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2201      	movs	r2, #1
 80063d4:	4013      	ands	r3, r2
 80063d6:	d0e2      	beq.n	800639e <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699a      	ldr	r2, [r3, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	0049      	lsls	r1, r1, #1
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	0149      	lsls	r1, r1, #5
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]
 800640c:	e04b      	b.n	80064a6 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4931      	ldr	r1, [pc, #196]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x278>)
 800641a:	400a      	ands	r2, r1
 800641c:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2102      	movs	r1, #2
 800642a:	430a      	orrs	r2, r1
 800642c:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800642e:	f7fe f8b7 	bl	80045a0 <HAL_GetTick>
 8006432:	0003      	movs	r3, r0
 8006434:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006436:	e016      	b.n	8006466 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006438:	f7fe f8b2 	bl	80045a0 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	23fa      	movs	r3, #250	; 0xfa
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	429a      	cmp	r2, r3
 8006448:	d90d      	bls.n	8006466 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	22ff      	movs	r2, #255	; 0xff
 8006450:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2229      	movs	r2, #41	; 0x29
 8006456:	2103      	movs	r1, #3
 8006458:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2228      	movs	r2, #40	; 0x28
 800645e:	2100      	movs	r1, #0
 8006460:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e035      	b.n	80064d2 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2202      	movs	r2, #2
 800646e:	4013      	ands	r3, r2
 8006470:	d0e2      	beq.n	8006438 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	699a      	ldr	r2, [r3, #24]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	0089      	lsls	r1, r1, #2
 8006490:	430a      	orrs	r2, r1
 8006492:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	0189      	lsls	r1, r1, #6
 80064a2:	430a      	orrs	r2, r1
 80064a4:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064a6:	4a0f      	ldr	r2, [pc, #60]	; (80064e4 <HAL_RTC_SetAlarm_IT+0x27c>)
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	58d3      	ldr	r3, [r2, r3]
 80064ac:	490d      	ldr	r1, [pc, #52]	; (80064e4 <HAL_RTC_SetAlarm_IT+0x27c>)
 80064ae:	2280      	movs	r2, #128	; 0x80
 80064b0:	0312      	lsls	r2, r2, #12
 80064b2:	4313      	orrs	r3, r2
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2229      	movs	r2, #41	; 0x29
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2228      	movs	r2, #40	; 0x28
 80064cc:	2100      	movs	r1, #0
 80064ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b009      	add	sp, #36	; 0x24
 80064d8:	bd90      	pop	{r4, r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	fffffeff 	.word	0xfffffeff
 80064e0:	fffffdff 	.word	0xfffffdff
 80064e4:	40021800 	.word	0x40021800

080064e8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699a      	ldr	r2, [r3, #24]
 80064f6:	2380      	movs	r3, #128	; 0x80
 80064f8:	015b      	lsls	r3, r3, #5
 80064fa:	4013      	ands	r3, r2
 80064fc:	d011      	beq.n	8006522 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006504:	2201      	movs	r2, #1
 8006506:	4013      	ands	r3, r2
 8006508:	d00b      	beq.n	8006522 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2101      	movs	r1, #1
 8006516:	430a      	orrs	r2, r1
 8006518:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0018      	movs	r0, r3
 800651e:	f7fd fc0f 	bl	8003d40 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699a      	ldr	r2, [r3, #24]
 8006528:	2380      	movs	r3, #128	; 0x80
 800652a:	019b      	lsls	r3, r3, #6
 800652c:	4013      	ands	r3, r2
 800652e:	d011      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006536:	2202      	movs	r2, #2
 8006538:	4013      	ands	r3, r2
 800653a:	d00b      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2102      	movs	r1, #2
 8006548:	430a      	orrs	r2, r1
 800654a:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	0018      	movs	r0, r3
 8006550:	f000 f961 	bl	8006816 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2229      	movs	r2, #41	; 0x29
 8006558:	2101      	movs	r1, #1
 800655a:	5499      	strb	r1, [r3, r2]
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <HAL_RTC_WaitForSynchro+0x48>)
 8006572:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006574:	f7fe f814 	bl	80045a0 <HAL_GetTick>
 8006578:	0003      	movs	r3, r0
 800657a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800657c:	e00a      	b.n	8006594 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800657e:	f7fe f80f 	bl	80045a0 <HAL_GetTick>
 8006582:	0002      	movs	r2, r0
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	23fa      	movs	r3, #250	; 0xfa
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	429a      	cmp	r2, r3
 800658e:	d901      	bls.n	8006594 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e006      	b.n	80065a2 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	4013      	ands	r3, r2
 800659e:	d0ee      	beq.n	800657e <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	0001005f 	.word	0x0001005f

080065b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80065b8:	230f      	movs	r3, #15
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2240      	movs	r2, #64	; 0x40
 80065c8:	4013      	ands	r3, r2
 80065ca:	d12c      	bne.n	8006626 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	430a      	orrs	r2, r1
 80065da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065dc:	f7fd ffe0 	bl	80045a0 <HAL_GetTick>
 80065e0:	0003      	movs	r3, r0
 80065e2:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065e4:	e014      	b.n	8006610 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80065e6:	f7fd ffdb 	bl	80045a0 <HAL_GetTick>
 80065ea:	0002      	movs	r2, r0
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	200f      	movs	r0, #15
 80065f2:	183b      	adds	r3, r7, r0
 80065f4:	1839      	adds	r1, r7, r0
 80065f6:	7809      	ldrb	r1, [r1, #0]
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	23fa      	movs	r3, #250	; 0xfa
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	429a      	cmp	r2, r3
 8006600:	d906      	bls.n	8006610 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8006602:	183b      	adds	r3, r7, r0
 8006604:	2203      	movs	r2, #3
 8006606:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2229      	movs	r2, #41	; 0x29
 800660c:	2103      	movs	r1, #3
 800660e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	4013      	ands	r3, r2
 800661a:	d104      	bne.n	8006626 <RTC_EnterInitMode+0x76>
 800661c:	230f      	movs	r3, #15
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d1df      	bne.n	80065e6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006626:	230f      	movs	r3, #15
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
}
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	b004      	add	sp, #16
 8006632:	bd80      	pop	{r7, pc}

08006634 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800663c:	240f      	movs	r4, #15
 800663e:	193b      	adds	r3, r7, r4
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006644:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <RTC_ExitInitMode+0x84>)
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <RTC_ExitInitMode+0x84>)
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	438a      	bics	r2, r1
 800664e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006650:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <RTC_ExitInitMode+0x84>)
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2220      	movs	r2, #32
 8006656:	4013      	ands	r3, r2
 8006658:	d10d      	bne.n	8006676 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f7ff ff81 	bl	8006564 <HAL_RTC_WaitForSynchro>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d021      	beq.n	80066aa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2229      	movs	r2, #41	; 0x29
 800666a:	2103      	movs	r1, #3
 800666c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800666e:	193b      	adds	r3, r7, r4
 8006670:	2203      	movs	r2, #3
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	e019      	b.n	80066aa <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <RTC_ExitInitMode+0x84>)
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <RTC_ExitInitMode+0x84>)
 800667c:	2120      	movs	r1, #32
 800667e:	438a      	bics	r2, r1
 8006680:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff ff6d 	bl	8006564 <HAL_RTC_WaitForSynchro>
 800668a:	1e03      	subs	r3, r0, #0
 800668c:	d007      	beq.n	800669e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2229      	movs	r2, #41	; 0x29
 8006692:	2103      	movs	r1, #3
 8006694:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006696:	230f      	movs	r3, #15
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	2203      	movs	r2, #3
 800669c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <RTC_ExitInitMode+0x84>)
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <RTC_ExitInitMode+0x84>)
 80066a4:	2120      	movs	r1, #32
 80066a6:	430a      	orrs	r2, r1
 80066a8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80066aa:	230f      	movs	r3, #15
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	781b      	ldrb	r3, [r3, #0]
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b005      	add	sp, #20
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	40002800 	.word	0x40002800

080066bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	0002      	movs	r2, r0
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80066cc:	230b      	movs	r3, #11
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	1dfa      	adds	r2, r7, #7
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80066d6:	e008      	b.n	80066ea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80066de:	220b      	movs	r2, #11
 80066e0:	18bb      	adds	r3, r7, r2
 80066e2:	18ba      	adds	r2, r7, r2
 80066e4:	7812      	ldrb	r2, [r2, #0]
 80066e6:	3a0a      	subs	r2, #10
 80066e8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80066ea:	210b      	movs	r1, #11
 80066ec:	187b      	adds	r3, r7, r1
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b09      	cmp	r3, #9
 80066f2:	d8f1      	bhi.n	80066d8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4313      	orrs	r3, r2
 8006702:	b2db      	uxtb	r3, r3
}
 8006704:	0018      	movs	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	b004      	add	sp, #16
 800670a:	bd80      	pop	{r7, pc}

0800670c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	0002      	movs	r2, r0
 8006714:	1dfb      	adds	r3, r7, #7
 8006716:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006718:	1dfb      	adds	r3, r7, #7
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	b2db      	uxtb	r3, r3
 8006720:	001a      	movs	r2, r3
 8006722:	0013      	movs	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	189b      	adds	r3, r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	1dfb      	adds	r3, r7, #7
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	210f      	movs	r1, #15
 8006736:	400b      	ands	r3, r1
 8006738:	b2db      	uxtb	r3, r3
 800673a:	18d3      	adds	r3, r2, r3
 800673c:	b2db      	uxtb	r3, r3
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b004      	add	sp, #16
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2228      	movs	r2, #40	; 0x28
 8006752:	5c9b      	ldrb	r3, [r3, r2]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_RTCEx_EnableBypassShadow+0x16>
 8006758:	2302      	movs	r3, #2
 800675a:	e024      	b.n	80067a6 <HAL_RTCEx_EnableBypassShadow+0x60>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2228      	movs	r2, #40	; 0x28
 8006760:	2101      	movs	r1, #1
 8006762:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2229      	movs	r2, #41	; 0x29
 8006768:	2102      	movs	r1, #2
 800676a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	22ca      	movs	r2, #202	; 0xca
 8006772:	625a      	str	r2, [r3, #36]	; 0x24
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2253      	movs	r2, #83	; 0x53
 800677a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2120      	movs	r1, #32
 8006788:	430a      	orrs	r2, r1
 800678a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2229      	movs	r2, #41	; 0x29
 8006798:	2101      	movs	r1, #1
 800679a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2228      	movs	r2, #40	; 0x28
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2228      	movs	r2, #40	; 0x28
 80067ba:	5c9b      	ldrb	r3, [r3, r2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_RTCEx_DisableBypassShadow+0x16>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e024      	b.n	800680e <HAL_RTCEx_DisableBypassShadow+0x60>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2228      	movs	r2, #40	; 0x28
 80067c8:	2101      	movs	r1, #1
 80067ca:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2229      	movs	r2, #41	; 0x29
 80067d0:	2102      	movs	r1, #2
 80067d2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	22ca      	movs	r2, #202	; 0xca
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2253      	movs	r2, #83	; 0x53
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	21df      	movs	r1, #223	; 0xdf
 80067f0:	400a      	ands	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	22ff      	movs	r2, #255	; 0xff
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2229      	movs	r2, #41	; 0x29
 8006800:	2101      	movs	r1, #1
 8006802:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2228      	movs	r2, #40	; 0x28
 8006808:	2100      	movs	r1, #0
 800680a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b002      	add	sp, #8
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b002      	add	sp, #8
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0a8      	b.n	800698c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d109      	bne.n	8006856 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	2382      	movs	r3, #130	; 0x82
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	429a      	cmp	r2, r3
 800684c:	d009      	beq.n	8006862 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e005      	b.n	8006862 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	225d      	movs	r2, #93	; 0x5d
 800686c:	5c9b      	ldrb	r3, [r3, r2]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d107      	bne.n	8006884 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	225c      	movs	r2, #92	; 0x5c
 8006878:	2100      	movs	r1, #0
 800687a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0018      	movs	r0, r3
 8006880:	f7fd faea 	bl	8003e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	225d      	movs	r2, #93	; 0x5d
 8006888:	2102      	movs	r1, #2
 800688a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2140      	movs	r1, #64	; 0x40
 8006898:	438a      	bics	r2, r1
 800689a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	23e0      	movs	r3, #224	; 0xe0
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d902      	bls.n	80068ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	e002      	b.n	80068b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068ae:	2380      	movs	r3, #128	; 0x80
 80068b0:	015b      	lsls	r3, r3, #5
 80068b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	23f0      	movs	r3, #240	; 0xf0
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	429a      	cmp	r2, r3
 80068be:	d008      	beq.n	80068d2 <HAL_SPI_Init+0xaa>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	23e0      	movs	r3, #224	; 0xe0
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	2382      	movs	r3, #130	; 0x82
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	401a      	ands	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6899      	ldr	r1, [r3, #8]
 80068e0:	2384      	movs	r3, #132	; 0x84
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	400b      	ands	r3, r1
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2102      	movs	r1, #2
 80068ee:	400b      	ands	r3, r1
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2101      	movs	r1, #1
 80068f8:	400b      	ands	r3, r1
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6999      	ldr	r1, [r3, #24]
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	400b      	ands	r3, r1
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	2138      	movs	r1, #56	; 0x38
 800690e:	400b      	ands	r3, r1
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	2180      	movs	r1, #128	; 0x80
 8006918:	400b      	ands	r3, r1
 800691a:	431a      	orrs	r2, r3
 800691c:	0011      	movs	r1, r2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	019b      	lsls	r3, r3, #6
 8006926:	401a      	ands	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	0c1b      	lsrs	r3, r3, #16
 8006936:	2204      	movs	r2, #4
 8006938:	401a      	ands	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2110      	movs	r1, #16
 8006940:	400b      	ands	r3, r1
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006948:	2108      	movs	r1, #8
 800694a:	400b      	ands	r3, r1
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68d9      	ldr	r1, [r3, #12]
 8006952:	23f0      	movs	r3, #240	; 0xf0
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	400b      	ands	r3, r1
 8006958:	431a      	orrs	r2, r3
 800695a:	0011      	movs	r1, r2
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	2380      	movs	r3, #128	; 0x80
 8006960:	015b      	lsls	r3, r3, #5
 8006962:	401a      	ands	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4907      	ldr	r1, [pc, #28]	; (8006994 <HAL_SPI_Init+0x16c>)
 8006978:	400a      	ands	r2, r1
 800697a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	225d      	movs	r2, #93	; 0x5d
 8006986:	2101      	movs	r1, #1
 8006988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	0018      	movs	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bd80      	pop	{r7, pc}
 8006994:	fffff7ff 	.word	0xfffff7ff

08006998 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	1dbb      	adds	r3, r7, #6
 80069a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a8:	231f      	movs	r3, #31
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	225c      	movs	r2, #92	; 0x5c
 80069b4:	5c9b      	ldrb	r3, [r3, r2]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_SPI_Transmit+0x26>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e147      	b.n	8006c4e <HAL_SPI_Transmit+0x2b6>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	225c      	movs	r2, #92	; 0x5c
 80069c2:	2101      	movs	r1, #1
 80069c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c6:	f7fd fdeb 	bl	80045a0 <HAL_GetTick>
 80069ca:	0003      	movs	r3, r0
 80069cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069ce:	2316      	movs	r3, #22
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	1dba      	adds	r2, r7, #6
 80069d4:	8812      	ldrh	r2, [r2, #0]
 80069d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	225d      	movs	r2, #93	; 0x5d
 80069dc:	5c9b      	ldrb	r3, [r3, r2]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d004      	beq.n	80069ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80069e4:	231f      	movs	r3, #31
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	2202      	movs	r2, #2
 80069ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80069ec:	e128      	b.n	8006c40 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <HAL_SPI_Transmit+0x64>
 80069f4:	1dbb      	adds	r3, r7, #6
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80069fc:	231f      	movs	r3, #31
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a04:	e11c      	b.n	8006c40 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	225d      	movs	r2, #93	; 0x5d
 8006a0a:	2103      	movs	r1, #3
 8006a0c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1dba      	adds	r2, r7, #6
 8006a1e:	8812      	ldrh	r2, [r2, #0]
 8006a20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1dba      	adds	r2, r7, #6
 8006a26:	8812      	ldrh	r2, [r2, #0]
 8006a28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2244      	movs	r2, #68	; 0x44
 8006a34:	2100      	movs	r1, #0
 8006a36:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2246      	movs	r2, #70	; 0x46
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	2380      	movs	r3, #128	; 0x80
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d110      	bne.n	8006a7a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2140      	movs	r1, #64	; 0x40
 8006a64:	438a      	bics	r2, r1
 8006a66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	01c9      	lsls	r1, r1, #7
 8006a76:	430a      	orrs	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	4013      	ands	r3, r2
 8006a84:	2b40      	cmp	r3, #64	; 0x40
 8006a86:	d007      	beq.n	8006a98 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2140      	movs	r1, #64	; 0x40
 8006a94:	430a      	orrs	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	23e0      	movs	r3, #224	; 0xe0
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d952      	bls.n	8006b4a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d004      	beq.n	8006ab6 <HAL_SPI_Transmit+0x11e>
 8006aac:	2316      	movs	r3, #22
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d143      	bne.n	8006b3e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	1c9a      	adds	r2, r3, #2
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ada:	e030      	b.n	8006b3e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d112      	bne.n	8006b10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b0e:	e016      	b.n	8006b3e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b10:	f7fd fd46 	bl	80045a0 <HAL_GetTick>
 8006b14:	0002      	movs	r2, r0
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d802      	bhi.n	8006b26 <HAL_SPI_Transmit+0x18e>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	d102      	bne.n	8006b2c <HAL_SPI_Transmit+0x194>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d108      	bne.n	8006b3e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006b2c:	231f      	movs	r3, #31
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2203      	movs	r2, #3
 8006b32:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	225d      	movs	r2, #93	; 0x5d
 8006b38:	2101      	movs	r1, #1
 8006b3a:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b3c:	e080      	b.n	8006c40 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1c9      	bne.n	8006adc <HAL_SPI_Transmit+0x144>
 8006b48:	e053      	b.n	8006bf2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <HAL_SPI_Transmit+0x1c4>
 8006b52:	2316      	movs	r3, #22
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d145      	bne.n	8006be8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	7812      	ldrb	r2, [r2, #0]
 8006b68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006b82:	e031      	b.n	8006be8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d113      	bne.n	8006bba <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	7812      	ldrb	r2, [r2, #0]
 8006b9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bb8:	e016      	b.n	8006be8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bba:	f7fd fcf1 	bl	80045a0 <HAL_GetTick>
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d802      	bhi.n	8006bd0 <HAL_SPI_Transmit+0x238>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	d102      	bne.n	8006bd6 <HAL_SPI_Transmit+0x23e>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006bd6:	231f      	movs	r3, #31
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	2203      	movs	r2, #3
 8006bdc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	225d      	movs	r2, #93	; 0x5d
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
          goto error;
 8006be6:	e02b      	b.n	8006c40 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1c8      	bne.n	8006b84 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 fcef 	bl	80075dc <SPI_EndRxTxTransaction>
 8006bfe:	1e03      	subs	r3, r0, #0
 8006c00:	d002      	beq.n	8006c08 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d004      	beq.n	8006c38 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006c2e:	231f      	movs	r3, #31
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e003      	b.n	8006c40 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	225d      	movs	r2, #93	; 0x5d
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	225c      	movs	r2, #92	; 0x5c
 8006c44:	2100      	movs	r1, #0
 8006c46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c48:	231f      	movs	r3, #31
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	781b      	ldrb	r3, [r3, #0]
}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b008      	add	sp, #32
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b089      	sub	sp, #36	; 0x24
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	1dbb      	adds	r3, r7, #6
 8006c66:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c68:	2117      	movs	r1, #23
 8006c6a:	187b      	adds	r3, r7, r1
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	225d      	movs	r2, #93	; 0x5d
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006c7c:	187b      	adds	r3, r7, r1
 8006c7e:	2202      	movs	r2, #2
 8006c80:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c82:	e12b      	b.n	8006edc <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	2382      	movs	r3, #130	; 0x82
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d113      	bne.n	8006cb8 <HAL_SPI_Receive+0x60>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10f      	bne.n	8006cb8 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	225d      	movs	r2, #93	; 0x5d
 8006c9c:	2104      	movs	r1, #4
 8006c9e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	881c      	ldrh	r4, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	0023      	movs	r3, r4
 8006cb0:	f000 f924 	bl	8006efc <HAL_SPI_TransmitReceive>
 8006cb4:	0003      	movs	r3, r0
 8006cb6:	e118      	b.n	8006eea <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	225c      	movs	r2, #92	; 0x5c
 8006cbc:	5c9b      	ldrb	r3, [r3, r2]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_SPI_Receive+0x6e>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e111      	b.n	8006eea <HAL_SPI_Receive+0x292>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	225c      	movs	r2, #92	; 0x5c
 8006cca:	2101      	movs	r1, #1
 8006ccc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cce:	f7fd fc67 	bl	80045a0 <HAL_GetTick>
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_SPI_Receive+0x8c>
 8006cdc:	1dbb      	adds	r3, r7, #6
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006ce4:	2317      	movs	r3, #23
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	2201      	movs	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
    goto error;
 8006cec:	e0f6      	b.n	8006edc <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	225d      	movs	r2, #93	; 0x5d
 8006cf2:	2104      	movs	r1, #4
 8006cf4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1dba      	adds	r2, r7, #6
 8006d06:	2144      	movs	r1, #68	; 0x44
 8006d08:	8812      	ldrh	r2, [r2, #0]
 8006d0a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	1dba      	adds	r2, r7, #6
 8006d10:	2146      	movs	r1, #70	; 0x46
 8006d12:	8812      	ldrh	r2, [r2, #0]
 8006d14:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	23e0      	movs	r3, #224	; 0xe0
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	496a      	ldr	r1, [pc, #424]	; (8006ef4 <HAL_SPI_Receive+0x29c>)
 8006d4c:	400a      	ands	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
 8006d50:	e008      	b.n	8006d64 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2180      	movs	r1, #128	; 0x80
 8006d5e:	0149      	lsls	r1, r1, #5
 8006d60:	430a      	orrs	r2, r1
 8006d62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10f      	bne.n	8006d90 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2140      	movs	r1, #64	; 0x40
 8006d7c:	438a      	bics	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	495b      	ldr	r1, [pc, #364]	; (8006ef8 <HAL_SPI_Receive+0x2a0>)
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2240      	movs	r2, #64	; 0x40
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d007      	beq.n	8006dae <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2140      	movs	r1, #64	; 0x40
 8006daa:	430a      	orrs	r2, r1
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	23e0      	movs	r3, #224	; 0xe0
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d900      	bls.n	8006dbc <HAL_SPI_Receive+0x164>
 8006dba:	e071      	b.n	8006ea0 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dbc:	e035      	b.n	8006e2a <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d117      	bne.n	8006dfc <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2246      	movs	r2, #70	; 0x46
 8006dec:	5a9b      	ldrh	r3, [r3, r2]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b299      	uxth	r1, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2246      	movs	r2, #70	; 0x46
 8006df8:	5299      	strh	r1, [r3, r2]
 8006dfa:	e016      	b.n	8006e2a <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dfc:	f7fd fbd0 	bl	80045a0 <HAL_GetTick>
 8006e00:	0002      	movs	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d802      	bhi.n	8006e12 <HAL_SPI_Receive+0x1ba>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	d102      	bne.n	8006e18 <HAL_SPI_Receive+0x1c0>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d108      	bne.n	8006e2a <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006e18:	2317      	movs	r3, #23
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	2203      	movs	r2, #3
 8006e1e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	225d      	movs	r2, #93	; 0x5d
 8006e24:	2101      	movs	r1, #1
 8006e26:	5499      	strb	r1, [r3, r2]
          goto error;
 8006e28:	e058      	b.n	8006edc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2246      	movs	r2, #70	; 0x46
 8006e2e:	5a9b      	ldrh	r3, [r3, r2]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1c3      	bne.n	8006dbe <HAL_SPI_Receive+0x166>
 8006e36:	e039      	b.n	8006eac <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d115      	bne.n	8006e72 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	b292      	uxth	r2, r2
 8006e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	1c9a      	adds	r2, r3, #2
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2246      	movs	r2, #70	; 0x46
 8006e62:	5a9b      	ldrh	r3, [r3, r2]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b299      	uxth	r1, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2246      	movs	r2, #70	; 0x46
 8006e6e:	5299      	strh	r1, [r3, r2]
 8006e70:	e016      	b.n	8006ea0 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e72:	f7fd fb95 	bl	80045a0 <HAL_GetTick>
 8006e76:	0002      	movs	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d802      	bhi.n	8006e88 <HAL_SPI_Receive+0x230>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3301      	adds	r3, #1
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_Receive+0x236>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006e8e:	2317      	movs	r3, #23
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	2203      	movs	r2, #3
 8006e94:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	225d      	movs	r2, #93	; 0x5d
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	5499      	strb	r1, [r3, r2]
          goto error;
 8006e9e:	e01d      	b.n	8006edc <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2246      	movs	r2, #70	; 0x46
 8006ea4:	5a9b      	ldrh	r3, [r3, r2]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1c5      	bne.n	8006e38 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 fb34 	bl	8007520 <SPI_EndRxTransaction>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8006eca:	2317      	movs	r3, #23
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2201      	movs	r2, #1
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e003      	b.n	8006edc <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	225d      	movs	r2, #93	; 0x5d
 8006ed8:	2101      	movs	r1, #1
 8006eda:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	225c      	movs	r2, #92	; 0x5c
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006ee4:	2317      	movs	r3, #23
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	781b      	ldrb	r3, [r3, #0]
}
 8006eea:	0018      	movs	r0, r3
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b007      	add	sp, #28
 8006ef0:	bd90      	pop	{r4, r7, pc}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	ffffefff 	.word	0xffffefff
 8006ef8:	ffffbfff 	.word	0xffffbfff

08006efc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	001a      	movs	r2, r3
 8006f0a:	1cbb      	adds	r3, r7, #2
 8006f0c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f12:	2323      	movs	r3, #35	; 0x23
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	225c      	movs	r2, #92	; 0x5c
 8006f1e:	5c9b      	ldrb	r3, [r3, r2]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x2c>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e1c4      	b.n	80072b2 <HAL_SPI_TransmitReceive+0x3b6>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	225c      	movs	r2, #92	; 0x5c
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f30:	f7fd fb36 	bl	80045a0 <HAL_GetTick>
 8006f34:	0003      	movs	r3, r0
 8006f36:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f38:	201b      	movs	r0, #27
 8006f3a:	183b      	adds	r3, r7, r0
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	215d      	movs	r1, #93	; 0x5d
 8006f40:	5c52      	ldrb	r2, [r2, r1]
 8006f42:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f4a:	2312      	movs	r3, #18
 8006f4c:	18fb      	adds	r3, r7, r3
 8006f4e:	1cba      	adds	r2, r7, #2
 8006f50:	8812      	ldrh	r2, [r2, #0]
 8006f52:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f54:	183b      	adds	r3, r7, r0
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d011      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0x84>
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	2382      	movs	r3, #130	; 0x82
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d107      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d103      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x7a>
 8006f6e:	183b      	adds	r3, r7, r0
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d004      	beq.n	8006f80 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006f76:	2323      	movs	r3, #35	; 0x23
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f7e:	e191      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d006      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x98>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x98>
 8006f8c:	1cbb      	adds	r3, r7, #2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d104      	bne.n	8006f9e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006f94:	2323      	movs	r3, #35	; 0x23
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f9c:	e182      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	225d      	movs	r2, #93	; 0x5d
 8006fa2:	5c9b      	ldrb	r3, [r3, r2]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d003      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	225d      	movs	r2, #93	; 0x5d
 8006fae:	2105      	movs	r1, #5
 8006fb0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1cba      	adds	r2, r7, #2
 8006fc2:	2146      	movs	r1, #70	; 0x46
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	1cba      	adds	r2, r7, #2
 8006fcc:	2144      	movs	r1, #68	; 0x44
 8006fce:	8812      	ldrh	r2, [r2, #0]
 8006fd0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	1cba      	adds	r2, r7, #2
 8006fdc:	8812      	ldrh	r2, [r2, #0]
 8006fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	1cba      	adds	r2, r7, #2
 8006fe4:	8812      	ldrh	r2, [r2, #0]
 8006fe6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	23e0      	movs	r3, #224	; 0xe0
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d908      	bls.n	8007012 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	49ac      	ldr	r1, [pc, #688]	; (80072bc <HAL_SPI_TransmitReceive+0x3c0>)
 800700c:	400a      	ands	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	e008      	b.n	8007024 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2180      	movs	r1, #128	; 0x80
 800701e:	0149      	lsls	r1, r1, #5
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	4013      	ands	r3, r2
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d007      	beq.n	8007042 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2140      	movs	r1, #64	; 0x40
 800703e:	430a      	orrs	r2, r1
 8007040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	23e0      	movs	r3, #224	; 0xe0
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	429a      	cmp	r2, r3
 800704c:	d800      	bhi.n	8007050 <HAL_SPI_TransmitReceive+0x154>
 800704e:	e083      	b.n	8007158 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x168>
 8007058:	2312      	movs	r3, #18
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d000      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x168>
 8007062:	e06d      	b.n	8007140 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	881a      	ldrh	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	1c9a      	adds	r2, r3, #2
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007088:	e05a      	b.n	8007140 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2202      	movs	r2, #2
 8007092:	4013      	ands	r3, r2
 8007094:	2b02      	cmp	r3, #2
 8007096:	d11b      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x1d4>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <HAL_SPI_TransmitReceive+0x1d4>
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d113      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	1c9a      	adds	r2, r3, #2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2201      	movs	r2, #1
 80070d8:	4013      	ands	r3, r2
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d11c      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x21c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2246      	movs	r2, #70	; 0x46
 80070e2:	5a9b      	ldrh	r3, [r3, r2]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	b292      	uxth	r2, r2
 80070f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2246      	movs	r2, #70	; 0x46
 8007106:	5a9b      	ldrh	r3, [r3, r2]
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b299      	uxth	r1, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2246      	movs	r2, #70	; 0x46
 8007112:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007114:	2301      	movs	r3, #1
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007118:	f7fd fa42 	bl	80045a0 <HAL_GetTick>
 800711c:	0002      	movs	r2, r0
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007124:	429a      	cmp	r2, r3
 8007126:	d80b      	bhi.n	8007140 <HAL_SPI_TransmitReceive+0x244>
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	3301      	adds	r3, #1
 800712c:	d008      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800712e:	2323      	movs	r3, #35	; 0x23
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	2203      	movs	r2, #3
 8007134:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	225d      	movs	r2, #93	; 0x5d
 800713a:	2101      	movs	r1, #1
 800713c:	5499      	strb	r1, [r3, r2]
        goto error;
 800713e:	e0b1      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d19f      	bne.n	800708a <HAL_SPI_TransmitReceive+0x18e>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2246      	movs	r2, #70	; 0x46
 800714e:	5a9b      	ldrh	r3, [r3, r2]
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d199      	bne.n	800708a <HAL_SPI_TransmitReceive+0x18e>
 8007156:	e089      	b.n	800726c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <HAL_SPI_TransmitReceive+0x270>
 8007160:	2312      	movs	r3, #18
 8007162:	18fb      	adds	r3, r7, r3
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d000      	beq.n	800716c <HAL_SPI_TransmitReceive+0x270>
 800716a:	e074      	b.n	8007256 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007192:	e060      	b.n	8007256 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2202      	movs	r2, #2
 800719c:	4013      	ands	r3, r2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d11c      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x2e0>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d017      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x2e0>
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d114      	bne.n	80071dc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2201      	movs	r2, #1
 80071e4:	4013      	ands	r3, r2
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11e      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x32c>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2246      	movs	r2, #70	; 0x46
 80071ee:	5a9b      	ldrh	r3, [r3, r2]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d018      	beq.n	8007228 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	330c      	adds	r3, #12
 80071fc:	001a      	movs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2246      	movs	r2, #70	; 0x46
 8007216:	5a9b      	ldrh	r3, [r3, r2]
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b299      	uxth	r1, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2246      	movs	r2, #70	; 0x46
 8007222:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007228:	f7fd f9ba 	bl	80045a0 <HAL_GetTick>
 800722c:	0002      	movs	r2, r0
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007234:	429a      	cmp	r2, r3
 8007236:	d802      	bhi.n	800723e <HAL_SPI_TransmitReceive+0x342>
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	3301      	adds	r3, #1
 800723c:	d102      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x348>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	2b00      	cmp	r3, #0
 8007242:	d108      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007244:	2323      	movs	r3, #35	; 0x23
 8007246:	18fb      	adds	r3, r7, r3
 8007248:	2203      	movs	r2, #3
 800724a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	225d      	movs	r2, #93	; 0x5d
 8007250:	2101      	movs	r1, #1
 8007252:	5499      	strb	r1, [r3, r2]
        goto error;
 8007254:	e026      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d199      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x298>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2246      	movs	r2, #70	; 0x46
 8007264:	5a9b      	ldrh	r3, [r3, r2]
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d193      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	0018      	movs	r0, r3
 8007274:	f000 f9b2 	bl	80075dc <SPI_EndRxTxTransaction>
 8007278:	1e03      	subs	r3, r0, #0
 800727a:	d006      	beq.n	800728a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800727c:	2323      	movs	r3, #35	; 0x23
 800727e:	18fb      	adds	r3, r7, r3
 8007280:	2201      	movs	r2, #1
 8007282:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007292:	2323      	movs	r3, #35	; 0x23
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e003      	b.n	80072a4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	225d      	movs	r2, #93	; 0x5d
 80072a0:	2101      	movs	r1, #1
 80072a2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	225c      	movs	r2, #92	; 0x5c
 80072a8:	2100      	movs	r1, #0
 80072aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80072ac:	2323      	movs	r3, #35	; 0x23
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	781b      	ldrb	r3, [r3, #0]
}
 80072b2:	0018      	movs	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b00a      	add	sp, #40	; 0x28
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	ffffefff 	.word	0xffffefff

080072c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	603b      	str	r3, [r7, #0]
 80072cc:	1dfb      	adds	r3, r7, #7
 80072ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072d0:	f7fd f966 	bl	80045a0 <HAL_GetTick>
 80072d4:	0002      	movs	r2, r0
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072e0:	f7fd f95e 	bl	80045a0 <HAL_GetTick>
 80072e4:	0003      	movs	r3, r0
 80072e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072e8:	4b3a      	ldr	r3, [pc, #232]	; (80073d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	015b      	lsls	r3, r3, #5
 80072ee:	0d1b      	lsrs	r3, r3, #20
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	4353      	muls	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072f6:	e058      	b.n	80073aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	d055      	beq.n	80073aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072fe:	f7fd f94f 	bl	80045a0 <HAL_GetTick>
 8007302:	0002      	movs	r2, r0
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	429a      	cmp	r2, r3
 800730c:	d902      	bls.n	8007314 <SPI_WaitFlagStateUntilTimeout+0x54>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d142      	bne.n	800739a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	21e0      	movs	r1, #224	; 0xe0
 8007320:	438a      	bics	r2, r1
 8007322:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	2382      	movs	r3, #130	; 0x82
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	429a      	cmp	r2, r3
 800732e:	d113      	bne.n	8007358 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	429a      	cmp	r2, r3
 800733a:	d005      	beq.n	8007348 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	429a      	cmp	r2, r3
 8007346:	d107      	bne.n	8007358 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2140      	movs	r1, #64	; 0x40
 8007354:	438a      	bics	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800735c:	2380      	movs	r3, #128	; 0x80
 800735e:	019b      	lsls	r3, r3, #6
 8007360:	429a      	cmp	r2, r3
 8007362:	d110      	bne.n	8007386 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	491a      	ldr	r1, [pc, #104]	; (80073d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007370:	400a      	ands	r2, r1
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	0189      	lsls	r1, r1, #6
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	225d      	movs	r2, #93	; 0x5d
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	225c      	movs	r2, #92	; 0x5c
 8007392:	2100      	movs	r1, #0
 8007394:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e017      	b.n	80073ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	4013      	ands	r3, r2
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	425a      	negs	r2, r3
 80073ba:	4153      	adcs	r3, r2
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	001a      	movs	r2, r3
 80073c0:	1dfb      	adds	r3, r7, #7
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d197      	bne.n	80072f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	0018      	movs	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b008      	add	sp, #32
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	46c0      	nop			; (mov r8, r8)
 80073d4:	20000010 	.word	0x20000010
 80073d8:	ffffdfff 	.word	0xffffdfff

080073dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	; 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80073ea:	2317      	movs	r3, #23
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80073f2:	f7fd f8d5 	bl	80045a0 <HAL_GetTick>
 80073f6:	0002      	movs	r2, r0
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	18d3      	adds	r3, r2, r3
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007402:	f7fd f8cd 	bl	80045a0 <HAL_GetTick>
 8007406:	0003      	movs	r3, r0
 8007408:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007412:	4b41      	ldr	r3, [pc, #260]	; (8007518 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	0013      	movs	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	189b      	adds	r3, r3, r2
 800741c:	00da      	lsls	r2, r3, #3
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007424:	4353      	muls	r3, r2
 8007426:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007428:	e068      	b.n	80074fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	23c0      	movs	r3, #192	; 0xc0
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	429a      	cmp	r2, r3
 8007432:	d10a      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d107      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	2117      	movs	r1, #23
 8007442:	187b      	adds	r3, r7, r1
 8007444:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007446:	187b      	adds	r3, r7, r1
 8007448:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	3301      	adds	r3, #1
 800744e:	d055      	beq.n	80074fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007450:	f7fd f8a6 	bl	80045a0 <HAL_GetTick>
 8007454:	0002      	movs	r2, r0
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745c:	429a      	cmp	r2, r3
 800745e:	d902      	bls.n	8007466 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2b00      	cmp	r3, #0
 8007464:	d142      	bne.n	80074ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	21e0      	movs	r1, #224	; 0xe0
 8007472:	438a      	bics	r2, r1
 8007474:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	2382      	movs	r3, #130	; 0x82
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	429a      	cmp	r2, r3
 8007480:	d113      	bne.n	80074aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	429a      	cmp	r2, r3
 800748c:	d005      	beq.n	800749a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	2380      	movs	r3, #128	; 0x80
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	429a      	cmp	r2, r3
 8007498:	d107      	bne.n	80074aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	438a      	bics	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	019b      	lsls	r3, r3, #6
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d110      	bne.n	80074d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4916      	ldr	r1, [pc, #88]	; (800751c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80074c2:	400a      	ands	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	0189      	lsls	r1, r1, #6
 80074d4:	430a      	orrs	r2, r1
 80074d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	225d      	movs	r2, #93	; 0x5d
 80074dc:	2101      	movs	r1, #1
 80074de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	225c      	movs	r2, #92	; 0x5c
 80074e4:	2100      	movs	r1, #0
 80074e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e010      	b.n	800750e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	4013      	ands	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	429a      	cmp	r2, r3
 800750a:	d18e      	bne.n	800742a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	0018      	movs	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	b00a      	add	sp, #40	; 0x28
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	20000010 	.word	0x20000010
 800751c:	ffffdfff 	.word	0xffffdfff

08007520 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	2382      	movs	r3, #130	; 0x82
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	429a      	cmp	r2, r3
 8007536:	d113      	bne.n	8007560 <SPI_EndRxTransaction+0x40>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	2380      	movs	r3, #128	; 0x80
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	429a      	cmp	r2, r3
 8007542:	d005      	beq.n	8007550 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	2380      	movs	r3, #128	; 0x80
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	429a      	cmp	r2, r3
 800754e:	d107      	bne.n	8007560 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2140      	movs	r1, #64	; 0x40
 800755c:	438a      	bics	r2, r1
 800755e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	0013      	movs	r3, r2
 800756a:	2200      	movs	r2, #0
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	f7ff fea7 	bl	80072c0 <SPI_WaitFlagStateUntilTimeout>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d007      	beq.n	8007586 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757a:	2220      	movs	r2, #32
 800757c:	431a      	orrs	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e026      	b.n	80075d4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	2382      	movs	r3, #130	; 0x82
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	429a      	cmp	r2, r3
 8007590:	d11f      	bne.n	80075d2 <SPI_EndRxTransaction+0xb2>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	021b      	lsls	r3, r3, #8
 800759a:	429a      	cmp	r2, r3
 800759c:	d005      	beq.n	80075aa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d113      	bne.n	80075d2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	23c0      	movs	r3, #192	; 0xc0
 80075ae:	00d9      	lsls	r1, r3, #3
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	0013      	movs	r3, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7ff ff0f 	bl	80073dc <SPI_WaitFifoStateUntilTimeout>
 80075be:	1e03      	subs	r3, r0, #0
 80075c0:	d007      	beq.n	80075d2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c6:	2220      	movs	r2, #32
 80075c8:	431a      	orrs	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e000      	b.n	80075d4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	0018      	movs	r0, r3
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b004      	add	sp, #16
 80075da:	bd80      	pop	{r7, pc}

080075dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	23c0      	movs	r3, #192	; 0xc0
 80075ec:	0159      	lsls	r1, r3, #5
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	0013      	movs	r3, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	f7ff fef0 	bl	80073dc <SPI_WaitFifoStateUntilTimeout>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d007      	beq.n	8007610 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007604:	2220      	movs	r2, #32
 8007606:	431a      	orrs	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e027      	b.n	8007660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	0013      	movs	r3, r2
 800761a:	2200      	movs	r2, #0
 800761c:	2180      	movs	r1, #128	; 0x80
 800761e:	f7ff fe4f 	bl	80072c0 <SPI_WaitFlagStateUntilTimeout>
 8007622:	1e03      	subs	r3, r0, #0
 8007624:	d007      	beq.n	8007636 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762a:	2220      	movs	r2, #32
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e014      	b.n	8007660 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	23c0      	movs	r3, #192	; 0xc0
 800763a:	00d9      	lsls	r1, r3, #3
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	0013      	movs	r3, r2
 8007644:	2200      	movs	r2, #0
 8007646:	f7ff fec9 	bl	80073dc <SPI_WaitFifoStateUntilTimeout>
 800764a:	1e03      	subs	r3, r0, #0
 800764c:	d007      	beq.n	800765e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007652:	2220      	movs	r2, #32
 8007654:	431a      	orrs	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e000      	b.n	8007660 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	0018      	movs	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	b004      	add	sp, #16
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e04a      	b.n	8007710 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	223d      	movs	r2, #61	; 0x3d
 800767e:	5c9b      	ldrb	r3, [r3, r2]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d107      	bne.n	8007696 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	223c      	movs	r2, #60	; 0x3c
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	0018      	movs	r0, r3
 8007692:	f7fc fc2b 	bl	8003eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	223d      	movs	r2, #61	; 0x3d
 800769a:	2102      	movs	r1, #2
 800769c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3304      	adds	r3, #4
 80076a6:	0019      	movs	r1, r3
 80076a8:	0010      	movs	r0, r2
 80076aa:	f000 f9ed 	bl	8007a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2248      	movs	r2, #72	; 0x48
 80076b2:	2101      	movs	r1, #1
 80076b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	223e      	movs	r2, #62	; 0x3e
 80076ba:	2101      	movs	r1, #1
 80076bc:	5499      	strb	r1, [r3, r2]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	223f      	movs	r2, #63	; 0x3f
 80076c2:	2101      	movs	r1, #1
 80076c4:	5499      	strb	r1, [r3, r2]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	2101      	movs	r1, #1
 80076cc:	5499      	strb	r1, [r3, r2]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2241      	movs	r2, #65	; 0x41
 80076d2:	2101      	movs	r1, #1
 80076d4:	5499      	strb	r1, [r3, r2]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2242      	movs	r2, #66	; 0x42
 80076da:	2101      	movs	r1, #1
 80076dc:	5499      	strb	r1, [r3, r2]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2243      	movs	r2, #67	; 0x43
 80076e2:	2101      	movs	r1, #1
 80076e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2244      	movs	r2, #68	; 0x44
 80076ea:	2101      	movs	r1, #1
 80076ec:	5499      	strb	r1, [r3, r2]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2245      	movs	r2, #69	; 0x45
 80076f2:	2101      	movs	r1, #1
 80076f4:	5499      	strb	r1, [r3, r2]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2246      	movs	r2, #70	; 0x46
 80076fa:	2101      	movs	r1, #1
 80076fc:	5499      	strb	r1, [r3, r2]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2247      	movs	r2, #71	; 0x47
 8007702:	2101      	movs	r1, #1
 8007704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	223d      	movs	r2, #61	; 0x3d
 800770a:	2101      	movs	r1, #1
 800770c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b002      	add	sp, #8
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	223d      	movs	r2, #61	; 0x3d
 8007724:	5c9b      	ldrb	r3, [r3, r2]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d001      	beq.n	8007730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e047      	b.n	80077c0 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	223d      	movs	r2, #61	; 0x3d
 8007734:	2102      	movs	r1, #2
 8007736:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2101      	movs	r1, #1
 8007744:	430a      	orrs	r2, r1
 8007746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d014      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x64>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	2380      	movs	r3, #128	; 0x80
 8007758:	05db      	lsls	r3, r3, #23
 800775a:	429a      	cmp	r2, r3
 800775c:	d00e      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x64>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a1a      	ldr	r2, [pc, #104]	; (80077cc <HAL_TIM_Base_Start_IT+0xb4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d009      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x64>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d004      	beq.n	800777c <HAL_TIM_Base_Start_IT+0x64>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a17      	ldr	r2, [pc, #92]	; (80077d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d116      	bne.n	80077aa <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b06      	cmp	r3, #6
 800778c:	d016      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0xa4>
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	025b      	lsls	r3, r3, #9
 8007794:	429a      	cmp	r2, r3
 8007796:	d011      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2101      	movs	r1, #1
 80077a4:	430a      	orrs	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	e008      	b.n	80077bc <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	430a      	orrs	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	e000      	b.n	80077be <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077bc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	0018      	movs	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	b004      	add	sp, #16
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40014000 	.word	0x40014000
 80077d8:	00010007 	.word	0x00010007

080077dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2101      	movs	r1, #1
 80077f0:	438a      	bics	r2, r1
 80077f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <HAL_TIM_Base_Stop_IT+0x54>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	d10d      	bne.n	800781c <HAL_TIM_Base_Stop_IT+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	4a0b      	ldr	r2, [pc, #44]	; (8007834 <HAL_TIM_Base_Stop_IT+0x58>)
 8007808:	4013      	ands	r3, r2
 800780a:	d107      	bne.n	800781c <HAL_TIM_Base_Stop_IT+0x40>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2101      	movs	r1, #1
 8007818:	438a      	bics	r2, r1
 800781a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	223d      	movs	r2, #61	; 0x3d
 8007820:	2101      	movs	r1, #1
 8007822:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	0018      	movs	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	b002      	add	sp, #8
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	00001111 	.word	0x00001111
 8007834:	00000444 	.word	0x00000444

08007838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2202      	movs	r2, #2
 8007854:	4013      	ands	r3, r2
 8007856:	d021      	beq.n	800789c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2202      	movs	r2, #2
 800785c:	4013      	ands	r3, r2
 800785e:	d01d      	beq.n	800789c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2203      	movs	r2, #3
 8007866:	4252      	negs	r2, r2
 8007868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2203      	movs	r2, #3
 8007878:	4013      	ands	r3, r2
 800787a:	d004      	beq.n	8007886 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	0018      	movs	r0, r3
 8007880:	f000 f8ea 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 8007884:	e007      	b.n	8007896 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	0018      	movs	r0, r3
 800788a:	f000 f8dd 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	0018      	movs	r0, r3
 8007892:	f000 f8e9 	bl	8007a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2204      	movs	r2, #4
 80078a0:	4013      	ands	r3, r2
 80078a2:	d022      	beq.n	80078ea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2204      	movs	r2, #4
 80078a8:	4013      	ands	r3, r2
 80078aa:	d01e      	beq.n	80078ea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2205      	movs	r2, #5
 80078b2:	4252      	negs	r2, r2
 80078b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2202      	movs	r2, #2
 80078ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	23c0      	movs	r3, #192	; 0xc0
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4013      	ands	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	0018      	movs	r0, r3
 80078ce:	f000 f8c3 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 80078d2:	e007      	b.n	80078e4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 f8b6 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	0018      	movs	r0, r3
 80078e0:	f000 f8c2 	bl	8007a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2208      	movs	r2, #8
 80078ee:	4013      	ands	r3, r2
 80078f0:	d021      	beq.n	8007936 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2208      	movs	r2, #8
 80078f6:	4013      	ands	r3, r2
 80078f8:	d01d      	beq.n	8007936 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2209      	movs	r2, #9
 8007900:	4252      	negs	r2, r2
 8007902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2204      	movs	r2, #4
 8007908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	2203      	movs	r2, #3
 8007912:	4013      	ands	r3, r2
 8007914:	d004      	beq.n	8007920 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f000 f89d 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 800791e:	e007      	b.n	8007930 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	0018      	movs	r0, r3
 8007924:	f000 f890 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	0018      	movs	r0, r3
 800792c:	f000 f89c 	bl	8007a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2210      	movs	r2, #16
 800793a:	4013      	ands	r3, r2
 800793c:	d022      	beq.n	8007984 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2210      	movs	r2, #16
 8007942:	4013      	ands	r3, r2
 8007944:	d01e      	beq.n	8007984 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2211      	movs	r2, #17
 800794c:	4252      	negs	r2, r2
 800794e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2208      	movs	r2, #8
 8007954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	23c0      	movs	r3, #192	; 0xc0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4013      	ands	r3, r2
 8007962:	d004      	beq.n	800796e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	0018      	movs	r0, r3
 8007968:	f000 f876 	bl	8007a58 <HAL_TIM_IC_CaptureCallback>
 800796c:	e007      	b.n	800797e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	0018      	movs	r0, r3
 8007972:	f000 f869 	bl	8007a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	0018      	movs	r0, r3
 800797a:	f000 f875 	bl	8007a68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2201      	movs	r2, #1
 8007988:	4013      	ands	r3, r2
 800798a:	d00c      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	4013      	ands	r3, r2
 8007992:	d008      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2202      	movs	r2, #2
 800799a:	4252      	negs	r2, r2
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7fc f9ab 	bl	8003cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2280      	movs	r2, #128	; 0x80
 80079aa:	4013      	ands	r3, r2
 80079ac:	d104      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	2380      	movs	r3, #128	; 0x80
 80079b2:	019b      	lsls	r3, r3, #6
 80079b4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079b6:	d00b      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2280      	movs	r2, #128	; 0x80
 80079bc:	4013      	ands	r3, r2
 80079be:	d007      	beq.n	80079d0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1e      	ldr	r2, [pc, #120]	; (8007a40 <HAL_TIM_IRQHandler+0x208>)
 80079c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 f972 	bl	8007cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	4013      	ands	r3, r2
 80079d8:	d00b      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2280      	movs	r2, #128	; 0x80
 80079de:	4013      	ands	r3, r2
 80079e0:	d007      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <HAL_TIM_IRQHandler+0x20c>)
 80079e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f000 f969 	bl	8007cc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2240      	movs	r2, #64	; 0x40
 80079f6:	4013      	ands	r3, r2
 80079f8:	d00c      	beq.n	8007a14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2240      	movs	r2, #64	; 0x40
 80079fe:	4013      	ands	r3, r2
 8007a00:	d008      	beq.n	8007a14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2241      	movs	r2, #65	; 0x41
 8007a08:	4252      	negs	r2, r2
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f000 f832 	bl	8007a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2220      	movs	r2, #32
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d00c      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	4013      	ands	r3, r2
 8007a22:	d008      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2221      	movs	r2, #33	; 0x21
 8007a2a:	4252      	negs	r2, r2
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f000 f937 	bl	8007ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	b004      	add	sp, #16
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	ffffdf7f 	.word	0xffffdf7f
 8007a44:	fffffeff 	.word	0xfffffeff

08007a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a50:	46c0      	nop			; (mov r8, r8)
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b002      	add	sp, #8
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a60:	46c0      	nop			; (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a80:	46c0      	nop			; (mov r8, r8)
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b002      	add	sp, #8
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a3f      	ldr	r2, [pc, #252]	; (8007b98 <TIM_Base_SetConfig+0x110>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00c      	beq.n	8007aba <TIM_Base_SetConfig+0x32>
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	2380      	movs	r3, #128	; 0x80
 8007aa4:	05db      	lsls	r3, r3, #23
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d007      	beq.n	8007aba <TIM_Base_SetConfig+0x32>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_Base_SetConfig+0x32>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a3a      	ldr	r2, [pc, #232]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d108      	bne.n	8007acc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2270      	movs	r2, #112	; 0x70
 8007abe:	4393      	bics	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a32      	ldr	r2, [pc, #200]	; (8007b98 <TIM_Base_SetConfig+0x110>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d01c      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	2380      	movs	r3, #128	; 0x80
 8007ad8:	05db      	lsls	r3, r3, #23
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d017      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	; (8007b9c <TIM_Base_SetConfig+0x114>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <TIM_Base_SetConfig+0x118>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00f      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a2c      	ldr	r2, [pc, #176]	; (8007ba4 <TIM_Base_SetConfig+0x11c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00b      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a2b      	ldr	r2, [pc, #172]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d007      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2a      	ldr	r2, [pc, #168]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d003      	beq.n	8007b0e <TIM_Base_SetConfig+0x86>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a29      	ldr	r2, [pc, #164]	; (8007bb0 <TIM_Base_SetConfig+0x128>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d108      	bne.n	8007b20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <TIM_Base_SetConfig+0x12c>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2280      	movs	r2, #128	; 0x80
 8007b24:	4393      	bics	r3, r2
 8007b26:	001a      	movs	r2, r3
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <TIM_Base_SetConfig+0x110>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00b      	beq.n	8007b66 <TIM_Base_SetConfig+0xde>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <TIM_Base_SetConfig+0x120>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d007      	beq.n	8007b66 <TIM_Base_SetConfig+0xde>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a14      	ldr	r2, [pc, #80]	; (8007bac <TIM_Base_SetConfig+0x124>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d003      	beq.n	8007b66 <TIM_Base_SetConfig+0xde>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a13      	ldr	r2, [pc, #76]	; (8007bb0 <TIM_Base_SetConfig+0x128>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d103      	bne.n	8007b6e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d106      	bne.n	8007b8e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2201      	movs	r2, #1
 8007b86:	4393      	bics	r3, r2
 8007b88:	001a      	movs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	611a      	str	r2, [r3, #16]
  }
}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	46bd      	mov	sp, r7
 8007b92:	b004      	add	sp, #16
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	40012c00 	.word	0x40012c00
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40002000 	.word	0x40002000
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	fffffcff 	.word	0xfffffcff

08007bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	223c      	movs	r2, #60	; 0x3c
 8007bc6:	5c9b      	ldrb	r3, [r3, r2]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e05a      	b.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	223c      	movs	r2, #60	; 0x3c
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	223d      	movs	r2, #61	; 0x3d
 8007bdc:	2102      	movs	r1, #2
 8007bde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a26      	ldr	r2, [pc, #152]	; (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d108      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a25      	ldr	r2, [pc, #148]	; (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2270      	movs	r2, #112	; 0x70
 8007c10:	4393      	bics	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a19      	ldr	r2, [pc, #100]	; (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d014      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	2380      	movs	r3, #128	; 0x80
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d00e      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d004      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d10c      	bne.n	8007c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	4393      	bics	r3, r2
 8007c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	223d      	movs	r2, #61	; 0x3d
 8007c78:	2101      	movs	r1, #1
 8007c7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	223c      	movs	r2, #60	; 0x3c
 8007c80:	2100      	movs	r1, #0
 8007c82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	0018      	movs	r0, r3
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	b004      	add	sp, #16
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	ff0fffff 	.word	0xff0fffff
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40014000 	.word	0x40014000

08007ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cac:	46c0      	nop			; (mov r8, r8)
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b002      	add	sp, #8
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b002      	add	sp, #8
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ccc:	46c0      	nop			; (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e046      	b.n	8007d74 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2288      	movs	r2, #136	; 0x88
 8007cea:	589b      	ldr	r3, [r3, r2]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d107      	bne.n	8007d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2284      	movs	r2, #132	; 0x84
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f7fc f91c 	bl	8003f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2288      	movs	r2, #136	; 0x88
 8007d04:	2124      	movs	r1, #36	; 0x24
 8007d06:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2101      	movs	r1, #1
 8007d14:	438a      	bics	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	0018      	movs	r0, r3
 8007d24:	f000 fd4c 	bl	80087c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 f9f2 	bl	8008114 <UART_SetConfig>
 8007d30:	0003      	movs	r3, r0
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e01c      	b.n	8007d74 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	490d      	ldr	r1, [pc, #52]	; (8007d7c <HAL_UART_Init+0xa8>)
 8007d46:	400a      	ands	r2, r1
 8007d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	212a      	movs	r1, #42	; 0x2a
 8007d56:	438a      	bics	r2, r1
 8007d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2101      	movs	r1, #1
 8007d66:	430a      	orrs	r2, r1
 8007d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	f000 fddb 	bl	8008928 <UART_CheckIdleState>
 8007d72:	0003      	movs	r3, r0
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b002      	add	sp, #8
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	ffffb7ff 	.word	0xffffb7ff

08007d80 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e032      	b.n	8007df8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2288      	movs	r2, #136	; 0x88
 8007d96:	2124      	movs	r1, #36	; 0x24
 8007d98:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2101      	movs	r1, #1
 8007da6:	438a      	bics	r2, r1
 8007da8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2200      	movs	r2, #0
 8007db8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7fc f9e3 	bl	8004190 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2290      	movs	r2, #144	; 0x90
 8007dce:	2100      	movs	r1, #0
 8007dd0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2288      	movs	r2, #136	; 0x88
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	228c      	movs	r2, #140	; 0x8c
 8007dde:	2100      	movs	r1, #0
 8007de0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2284      	movs	r2, #132	; 0x84
 8007df2:	2100      	movs	r1, #0
 8007df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	; 0x28
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2288      	movs	r2, #136	; 0x88
 8007e14:	589b      	ldr	r3, [r3, r2]
 8007e16:	2b20      	cmp	r3, #32
 8007e18:	d000      	beq.n	8007e1c <HAL_UART_Transmit+0x1c>
 8007e1a:	e090      	b.n	8007f3e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_Transmit+0x2a>
 8007e22:	1dbb      	adds	r3, r7, #6
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e088      	b.n	8007f40 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	2380      	movs	r3, #128	; 0x80
 8007e34:	015b      	lsls	r3, r3, #5
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d109      	bne.n	8007e4e <HAL_UART_Transmit+0x4e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2201      	movs	r2, #1
 8007e46:	4013      	ands	r3, r2
 8007e48:	d001      	beq.n	8007e4e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e078      	b.n	8007f40 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2290      	movs	r2, #144	; 0x90
 8007e52:	2100      	movs	r1, #0
 8007e54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2288      	movs	r2, #136	; 0x88
 8007e5a:	2121      	movs	r1, #33	; 0x21
 8007e5c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e5e:	f7fc fb9f 	bl	80045a0 <HAL_GetTick>
 8007e62:	0003      	movs	r3, r0
 8007e64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	1dba      	adds	r2, r7, #6
 8007e6a:	2154      	movs	r1, #84	; 0x54
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1dba      	adds	r2, r7, #6
 8007e74:	2156      	movs	r1, #86	; 0x56
 8007e76:	8812      	ldrh	r2, [r2, #0]
 8007e78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	015b      	lsls	r3, r3, #5
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d108      	bne.n	8007e98 <HAL_UART_Transmit+0x98>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e003      	b.n	8007ea0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ea0:	e030      	b.n	8007f04 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	0013      	movs	r3, r2
 8007eac:	2200      	movs	r2, #0
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	f000 fde4 	bl	8008a7c <UART_WaitOnFlagUntilTimeout>
 8007eb4:	1e03      	subs	r3, r0, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2288      	movs	r2, #136	; 0x88
 8007ebc:	2120      	movs	r1, #32
 8007ebe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e03d      	b.n	8007f40 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	001a      	movs	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	05d2      	lsls	r2, r2, #23
 8007ed6:	0dd2      	lsrs	r2, r2, #23
 8007ed8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	3302      	adds	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
 8007ee0:	e007      	b.n	8007ef2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	781a      	ldrb	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2256      	movs	r2, #86	; 0x56
 8007ef6:	5a9b      	ldrh	r3, [r3, r2]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b299      	uxth	r1, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2256      	movs	r2, #86	; 0x56
 8007f02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2256      	movs	r2, #86	; 0x56
 8007f08:	5a9b      	ldrh	r3, [r3, r2]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1c8      	bne.n	8007ea2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	0013      	movs	r3, r2
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2140      	movs	r1, #64	; 0x40
 8007f1e:	f000 fdad 	bl	8008a7c <UART_WaitOnFlagUntilTimeout>
 8007f22:	1e03      	subs	r3, r0, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2288      	movs	r2, #136	; 0x88
 8007f2a:	2120      	movs	r1, #32
 8007f2c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e006      	b.n	8007f40 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2288      	movs	r2, #136	; 0x88
 8007f36:	2120      	movs	r1, #32
 8007f38:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007f3e:	2302      	movs	r3, #2
  }
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b008      	add	sp, #32
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af02      	add	r7, sp, #8
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	1dbb      	adds	r3, r7, #6
 8007f56:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	228c      	movs	r2, #140	; 0x8c
 8007f5c:	589b      	ldr	r3, [r3, r2]
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d000      	beq.n	8007f64 <HAL_UART_Receive+0x1c>
 8007f62:	e0d0      	b.n	8008106 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_UART_Receive+0x2a>
 8007f6a:	1dbb      	adds	r3, r7, #6
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0c8      	b.n	8008108 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	2380      	movs	r3, #128	; 0x80
 8007f7c:	015b      	lsls	r3, r3, #5
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d109      	bne.n	8007f96 <HAL_UART_Receive+0x4e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d105      	bne.n	8007f96 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4013      	ands	r3, r2
 8007f90:	d001      	beq.n	8007f96 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e0b8      	b.n	8008108 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2290      	movs	r2, #144	; 0x90
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	228c      	movs	r2, #140	; 0x8c
 8007fa2:	2122      	movs	r1, #34	; 0x22
 8007fa4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fac:	f7fc faf8 	bl	80045a0 <HAL_GetTick>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	1dba      	adds	r2, r7, #6
 8007fb8:	215c      	movs	r1, #92	; 0x5c
 8007fba:	8812      	ldrh	r2, [r2, #0]
 8007fbc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	1dba      	adds	r2, r7, #6
 8007fc2:	215e      	movs	r1, #94	; 0x5e
 8007fc4:	8812      	ldrh	r2, [r2, #0]
 8007fc6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	015b      	lsls	r3, r3, #5
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_UART_Receive+0xa8>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_UART_Receive+0x9e>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2260      	movs	r2, #96	; 0x60
 8007fe0:	494b      	ldr	r1, [pc, #300]	; (8008110 <HAL_UART_Receive+0x1c8>)
 8007fe2:	5299      	strh	r1, [r3, r2]
 8007fe4:	e02e      	b.n	8008044 <HAL_UART_Receive+0xfc>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2260      	movs	r2, #96	; 0x60
 8007fea:	21ff      	movs	r1, #255	; 0xff
 8007fec:	5299      	strh	r1, [r3, r2]
 8007fee:	e029      	b.n	8008044 <HAL_UART_Receive+0xfc>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10d      	bne.n	8008014 <HAL_UART_Receive+0xcc>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <HAL_UART_Receive+0xc2>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2260      	movs	r2, #96	; 0x60
 8008004:	21ff      	movs	r1, #255	; 0xff
 8008006:	5299      	strh	r1, [r3, r2]
 8008008:	e01c      	b.n	8008044 <HAL_UART_Receive+0xfc>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2260      	movs	r2, #96	; 0x60
 800800e:	217f      	movs	r1, #127	; 0x7f
 8008010:	5299      	strh	r1, [r3, r2]
 8008012:	e017      	b.n	8008044 <HAL_UART_Receive+0xfc>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	2380      	movs	r3, #128	; 0x80
 800801a:	055b      	lsls	r3, r3, #21
 800801c:	429a      	cmp	r2, r3
 800801e:	d10d      	bne.n	800803c <HAL_UART_Receive+0xf4>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <HAL_UART_Receive+0xea>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2260      	movs	r2, #96	; 0x60
 800802c:	217f      	movs	r1, #127	; 0x7f
 800802e:	5299      	strh	r1, [r3, r2]
 8008030:	e008      	b.n	8008044 <HAL_UART_Receive+0xfc>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2260      	movs	r2, #96	; 0x60
 8008036:	213f      	movs	r1, #63	; 0x3f
 8008038:	5299      	strh	r1, [r3, r2]
 800803a:	e003      	b.n	8008044 <HAL_UART_Receive+0xfc>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2260      	movs	r2, #96	; 0x60
 8008040:	2100      	movs	r1, #0
 8008042:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8008044:	2312      	movs	r3, #18
 8008046:	18fb      	adds	r3, r7, r3
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	2160      	movs	r1, #96	; 0x60
 800804c:	5a52      	ldrh	r2, [r2, r1]
 800804e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	2380      	movs	r3, #128	; 0x80
 8008056:	015b      	lsls	r3, r3, #5
 8008058:	429a      	cmp	r2, r3
 800805a:	d108      	bne.n	800806e <HAL_UART_Receive+0x126>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	e003      	b.n	8008076 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008076:	e03a      	b.n	80080ee <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	0013      	movs	r3, r2
 8008082:	2200      	movs	r2, #0
 8008084:	2120      	movs	r1, #32
 8008086:	f000 fcf9 	bl	8008a7c <UART_WaitOnFlagUntilTimeout>
 800808a:	1e03      	subs	r3, r0, #0
 800808c:	d005      	beq.n	800809a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	228c      	movs	r2, #140	; 0x8c
 8008092:	2120      	movs	r1, #32
 8008094:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e036      	b.n	8008108 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10e      	bne.n	80080be <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2212      	movs	r2, #18
 80080aa:	18ba      	adds	r2, r7, r2
 80080ac:	8812      	ldrh	r2, [r2, #0]
 80080ae:	4013      	ands	r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	3302      	adds	r3, #2
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	e00e      	b.n	80080dc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2212      	movs	r2, #18
 80080c8:	18ba      	adds	r2, r7, r2
 80080ca:	8812      	ldrh	r2, [r2, #0]
 80080cc:	b2d2      	uxtb	r2, r2
 80080ce:	4013      	ands	r3, r2
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3301      	adds	r3, #1
 80080da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	225e      	movs	r2, #94	; 0x5e
 80080e0:	5a9b      	ldrh	r3, [r3, r2]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b299      	uxth	r1, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	225e      	movs	r2, #94	; 0x5e
 80080ec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	225e      	movs	r2, #94	; 0x5e
 80080f2:	5a9b      	ldrh	r3, [r3, r2]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1be      	bne.n	8008078 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	228c      	movs	r2, #140	; 0x8c
 80080fe:	2120      	movs	r1, #32
 8008100:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	0018      	movs	r0, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	b008      	add	sp, #32
 800810e:	bd80      	pop	{r7, pc}
 8008110:	000001ff 	.word	0x000001ff

08008114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008114:	b5b0      	push	{r4, r5, r7, lr}
 8008116:	b090      	sub	sp, #64	; 0x40
 8008118:	af00      	add	r7, sp, #0
 800811a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800811c:	231a      	movs	r3, #26
 800811e:	2220      	movs	r2, #32
 8008120:	189b      	adds	r3, r3, r2
 8008122:	19db      	adds	r3, r3, r7
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	431a      	orrs	r2, r3
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	431a      	orrs	r2, r3
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	4313      	orrs	r3, r2
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4ac1      	ldr	r2, [pc, #772]	; (800844c <UART_SetConfig+0x338>)
 8008148:	4013      	ands	r3, r2
 800814a:	0019      	movs	r1, r3
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008152:	430b      	orrs	r3, r1
 8008154:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4abc      	ldr	r2, [pc, #752]	; (8008450 <UART_SetConfig+0x33c>)
 800815e:	4013      	ands	r3, r2
 8008160:	0018      	movs	r0, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	68d9      	ldr	r1, [r3, #12]
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	0003      	movs	r3, r0
 800816c:	430b      	orrs	r3, r1
 800816e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4ab6      	ldr	r2, [pc, #728]	; (8008454 <UART_SetConfig+0x340>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <UART_SetConfig+0x80>
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4ab4      	ldr	r2, [pc, #720]	; (8008458 <UART_SetConfig+0x344>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008190:	4313      	orrs	r3, r2
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	4ab0      	ldr	r2, [pc, #704]	; (800845c <UART_SetConfig+0x348>)
 800819c:	4013      	ands	r3, r2
 800819e:	0019      	movs	r1, r3
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	220f      	movs	r2, #15
 80081b2:	4393      	bics	r3, r2
 80081b4:	0018      	movs	r0, r3
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	0003      	movs	r3, r0
 80081c0:	430b      	orrs	r3, r1
 80081c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4aa5      	ldr	r2, [pc, #660]	; (8008460 <UART_SetConfig+0x34c>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d131      	bne.n	8008232 <UART_SetConfig+0x11e>
 80081ce:	4ba5      	ldr	r3, [pc, #660]	; (8008464 <UART_SetConfig+0x350>)
 80081d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d2:	2203      	movs	r2, #3
 80081d4:	4013      	ands	r3, r2
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d01d      	beq.n	8008216 <UART_SetConfig+0x102>
 80081da:	d823      	bhi.n	8008224 <UART_SetConfig+0x110>
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d00c      	beq.n	80081fa <UART_SetConfig+0xe6>
 80081e0:	d820      	bhi.n	8008224 <UART_SetConfig+0x110>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <UART_SetConfig+0xd8>
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d00e      	beq.n	8008208 <UART_SetConfig+0xf4>
 80081ea:	e01b      	b.n	8008224 <UART_SetConfig+0x110>
 80081ec:	231b      	movs	r3, #27
 80081ee:	2220      	movs	r2, #32
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	19db      	adds	r3, r3, r7
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e154      	b.n	80084a4 <UART_SetConfig+0x390>
 80081fa:	231b      	movs	r3, #27
 80081fc:	2220      	movs	r2, #32
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	19db      	adds	r3, r3, r7
 8008202:	2202      	movs	r2, #2
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e14d      	b.n	80084a4 <UART_SetConfig+0x390>
 8008208:	231b      	movs	r3, #27
 800820a:	2220      	movs	r2, #32
 800820c:	189b      	adds	r3, r3, r2
 800820e:	19db      	adds	r3, r3, r7
 8008210:	2204      	movs	r2, #4
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	e146      	b.n	80084a4 <UART_SetConfig+0x390>
 8008216:	231b      	movs	r3, #27
 8008218:	2220      	movs	r2, #32
 800821a:	189b      	adds	r3, r3, r2
 800821c:	19db      	adds	r3, r3, r7
 800821e:	2208      	movs	r2, #8
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e13f      	b.n	80084a4 <UART_SetConfig+0x390>
 8008224:	231b      	movs	r3, #27
 8008226:	2220      	movs	r2, #32
 8008228:	189b      	adds	r3, r3, r2
 800822a:	19db      	adds	r3, r3, r7
 800822c:	2210      	movs	r2, #16
 800822e:	701a      	strb	r2, [r3, #0]
 8008230:	e138      	b.n	80084a4 <UART_SetConfig+0x390>
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a8c      	ldr	r2, [pc, #560]	; (8008468 <UART_SetConfig+0x354>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d131      	bne.n	80082a0 <UART_SetConfig+0x18c>
 800823c:	4b89      	ldr	r3, [pc, #548]	; (8008464 <UART_SetConfig+0x350>)
 800823e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008240:	220c      	movs	r2, #12
 8008242:	4013      	ands	r3, r2
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d01d      	beq.n	8008284 <UART_SetConfig+0x170>
 8008248:	d823      	bhi.n	8008292 <UART_SetConfig+0x17e>
 800824a:	2b08      	cmp	r3, #8
 800824c:	d00c      	beq.n	8008268 <UART_SetConfig+0x154>
 800824e:	d820      	bhi.n	8008292 <UART_SetConfig+0x17e>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <UART_SetConfig+0x146>
 8008254:	2b04      	cmp	r3, #4
 8008256:	d00e      	beq.n	8008276 <UART_SetConfig+0x162>
 8008258:	e01b      	b.n	8008292 <UART_SetConfig+0x17e>
 800825a:	231b      	movs	r3, #27
 800825c:	2220      	movs	r2, #32
 800825e:	189b      	adds	r3, r3, r2
 8008260:	19db      	adds	r3, r3, r7
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	e11d      	b.n	80084a4 <UART_SetConfig+0x390>
 8008268:	231b      	movs	r3, #27
 800826a:	2220      	movs	r2, #32
 800826c:	189b      	adds	r3, r3, r2
 800826e:	19db      	adds	r3, r3, r7
 8008270:	2202      	movs	r2, #2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e116      	b.n	80084a4 <UART_SetConfig+0x390>
 8008276:	231b      	movs	r3, #27
 8008278:	2220      	movs	r2, #32
 800827a:	189b      	adds	r3, r3, r2
 800827c:	19db      	adds	r3, r3, r7
 800827e:	2204      	movs	r2, #4
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e10f      	b.n	80084a4 <UART_SetConfig+0x390>
 8008284:	231b      	movs	r3, #27
 8008286:	2220      	movs	r2, #32
 8008288:	189b      	adds	r3, r3, r2
 800828a:	19db      	adds	r3, r3, r7
 800828c:	2208      	movs	r2, #8
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e108      	b.n	80084a4 <UART_SetConfig+0x390>
 8008292:	231b      	movs	r3, #27
 8008294:	2220      	movs	r2, #32
 8008296:	189b      	adds	r3, r3, r2
 8008298:	19db      	adds	r3, r3, r7
 800829a:	2210      	movs	r2, #16
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e101      	b.n	80084a4 <UART_SetConfig+0x390>
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a71      	ldr	r2, [pc, #452]	; (800846c <UART_SetConfig+0x358>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d131      	bne.n	800830e <UART_SetConfig+0x1fa>
 80082aa:	4b6e      	ldr	r3, [pc, #440]	; (8008464 <UART_SetConfig+0x350>)
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	2230      	movs	r2, #48	; 0x30
 80082b0:	4013      	ands	r3, r2
 80082b2:	2b30      	cmp	r3, #48	; 0x30
 80082b4:	d01d      	beq.n	80082f2 <UART_SetConfig+0x1de>
 80082b6:	d823      	bhi.n	8008300 <UART_SetConfig+0x1ec>
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d00c      	beq.n	80082d6 <UART_SetConfig+0x1c2>
 80082bc:	d820      	bhi.n	8008300 <UART_SetConfig+0x1ec>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <UART_SetConfig+0x1b4>
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d00e      	beq.n	80082e4 <UART_SetConfig+0x1d0>
 80082c6:	e01b      	b.n	8008300 <UART_SetConfig+0x1ec>
 80082c8:	231b      	movs	r3, #27
 80082ca:	2220      	movs	r2, #32
 80082cc:	189b      	adds	r3, r3, r2
 80082ce:	19db      	adds	r3, r3, r7
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
 80082d4:	e0e6      	b.n	80084a4 <UART_SetConfig+0x390>
 80082d6:	231b      	movs	r3, #27
 80082d8:	2220      	movs	r2, #32
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	19db      	adds	r3, r3, r7
 80082de:	2202      	movs	r2, #2
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e0df      	b.n	80084a4 <UART_SetConfig+0x390>
 80082e4:	231b      	movs	r3, #27
 80082e6:	2220      	movs	r2, #32
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	19db      	adds	r3, r3, r7
 80082ec:	2204      	movs	r2, #4
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e0d8      	b.n	80084a4 <UART_SetConfig+0x390>
 80082f2:	231b      	movs	r3, #27
 80082f4:	2220      	movs	r2, #32
 80082f6:	189b      	adds	r3, r3, r2
 80082f8:	19db      	adds	r3, r3, r7
 80082fa:	2208      	movs	r2, #8
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e0d1      	b.n	80084a4 <UART_SetConfig+0x390>
 8008300:	231b      	movs	r3, #27
 8008302:	2220      	movs	r2, #32
 8008304:	189b      	adds	r3, r3, r2
 8008306:	19db      	adds	r3, r3, r7
 8008308:	2210      	movs	r2, #16
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	e0ca      	b.n	80084a4 <UART_SetConfig+0x390>
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a57      	ldr	r2, [pc, #348]	; (8008470 <UART_SetConfig+0x35c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d106      	bne.n	8008326 <UART_SetConfig+0x212>
 8008318:	231b      	movs	r3, #27
 800831a:	2220      	movs	r2, #32
 800831c:	189b      	adds	r3, r3, r2
 800831e:	19db      	adds	r3, r3, r7
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e0be      	b.n	80084a4 <UART_SetConfig+0x390>
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a52      	ldr	r2, [pc, #328]	; (8008474 <UART_SetConfig+0x360>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d106      	bne.n	800833e <UART_SetConfig+0x22a>
 8008330:	231b      	movs	r3, #27
 8008332:	2220      	movs	r2, #32
 8008334:	189b      	adds	r3, r3, r2
 8008336:	19db      	adds	r3, r3, r7
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e0b2      	b.n	80084a4 <UART_SetConfig+0x390>
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a4d      	ldr	r2, [pc, #308]	; (8008478 <UART_SetConfig+0x364>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d106      	bne.n	8008356 <UART_SetConfig+0x242>
 8008348:	231b      	movs	r3, #27
 800834a:	2220      	movs	r2, #32
 800834c:	189b      	adds	r3, r3, r2
 800834e:	19db      	adds	r3, r3, r7
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	e0a6      	b.n	80084a4 <UART_SetConfig+0x390>
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a3e      	ldr	r2, [pc, #248]	; (8008454 <UART_SetConfig+0x340>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d13e      	bne.n	80083de <UART_SetConfig+0x2ca>
 8008360:	4b40      	ldr	r3, [pc, #256]	; (8008464 <UART_SetConfig+0x350>)
 8008362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008364:	23c0      	movs	r3, #192	; 0xc0
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	4013      	ands	r3, r2
 800836a:	22c0      	movs	r2, #192	; 0xc0
 800836c:	0112      	lsls	r2, r2, #4
 800836e:	4293      	cmp	r3, r2
 8008370:	d027      	beq.n	80083c2 <UART_SetConfig+0x2ae>
 8008372:	22c0      	movs	r2, #192	; 0xc0
 8008374:	0112      	lsls	r2, r2, #4
 8008376:	4293      	cmp	r3, r2
 8008378:	d82a      	bhi.n	80083d0 <UART_SetConfig+0x2bc>
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	0112      	lsls	r2, r2, #4
 800837e:	4293      	cmp	r3, r2
 8008380:	d011      	beq.n	80083a6 <UART_SetConfig+0x292>
 8008382:	2280      	movs	r2, #128	; 0x80
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	4293      	cmp	r3, r2
 8008388:	d822      	bhi.n	80083d0 <UART_SetConfig+0x2bc>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <UART_SetConfig+0x284>
 800838e:	2280      	movs	r2, #128	; 0x80
 8008390:	00d2      	lsls	r2, r2, #3
 8008392:	4293      	cmp	r3, r2
 8008394:	d00e      	beq.n	80083b4 <UART_SetConfig+0x2a0>
 8008396:	e01b      	b.n	80083d0 <UART_SetConfig+0x2bc>
 8008398:	231b      	movs	r3, #27
 800839a:	2220      	movs	r2, #32
 800839c:	189b      	adds	r3, r3, r2
 800839e:	19db      	adds	r3, r3, r7
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
 80083a4:	e07e      	b.n	80084a4 <UART_SetConfig+0x390>
 80083a6:	231b      	movs	r3, #27
 80083a8:	2220      	movs	r2, #32
 80083aa:	189b      	adds	r3, r3, r2
 80083ac:	19db      	adds	r3, r3, r7
 80083ae:	2202      	movs	r2, #2
 80083b0:	701a      	strb	r2, [r3, #0]
 80083b2:	e077      	b.n	80084a4 <UART_SetConfig+0x390>
 80083b4:	231b      	movs	r3, #27
 80083b6:	2220      	movs	r2, #32
 80083b8:	189b      	adds	r3, r3, r2
 80083ba:	19db      	adds	r3, r3, r7
 80083bc:	2204      	movs	r2, #4
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	e070      	b.n	80084a4 <UART_SetConfig+0x390>
 80083c2:	231b      	movs	r3, #27
 80083c4:	2220      	movs	r2, #32
 80083c6:	189b      	adds	r3, r3, r2
 80083c8:	19db      	adds	r3, r3, r7
 80083ca:	2208      	movs	r2, #8
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e069      	b.n	80084a4 <UART_SetConfig+0x390>
 80083d0:	231b      	movs	r3, #27
 80083d2:	2220      	movs	r2, #32
 80083d4:	189b      	adds	r3, r3, r2
 80083d6:	19db      	adds	r3, r3, r7
 80083d8:	2210      	movs	r2, #16
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e062      	b.n	80084a4 <UART_SetConfig+0x390>
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <UART_SetConfig+0x344>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d157      	bne.n	8008498 <UART_SetConfig+0x384>
 80083e8:	4b1e      	ldr	r3, [pc, #120]	; (8008464 <UART_SetConfig+0x350>)
 80083ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ec:	23c0      	movs	r3, #192	; 0xc0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4013      	ands	r3, r2
 80083f2:	22c0      	movs	r2, #192	; 0xc0
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d040      	beq.n	800847c <UART_SetConfig+0x368>
 80083fa:	22c0      	movs	r2, #192	; 0xc0
 80083fc:	0092      	lsls	r2, r2, #2
 80083fe:	4293      	cmp	r3, r2
 8008400:	d843      	bhi.n	800848a <UART_SetConfig+0x376>
 8008402:	2280      	movs	r2, #128	; 0x80
 8008404:	0092      	lsls	r2, r2, #2
 8008406:	4293      	cmp	r3, r2
 8008408:	d011      	beq.n	800842e <UART_SetConfig+0x31a>
 800840a:	2280      	movs	r2, #128	; 0x80
 800840c:	0092      	lsls	r2, r2, #2
 800840e:	4293      	cmp	r3, r2
 8008410:	d83b      	bhi.n	800848a <UART_SetConfig+0x376>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <UART_SetConfig+0x30c>
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	0052      	lsls	r2, r2, #1
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <UART_SetConfig+0x328>
 800841e:	e034      	b.n	800848a <UART_SetConfig+0x376>
 8008420:	231b      	movs	r3, #27
 8008422:	2220      	movs	r2, #32
 8008424:	189b      	adds	r3, r3, r2
 8008426:	19db      	adds	r3, r3, r7
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e03a      	b.n	80084a4 <UART_SetConfig+0x390>
 800842e:	231b      	movs	r3, #27
 8008430:	2220      	movs	r2, #32
 8008432:	189b      	adds	r3, r3, r2
 8008434:	19db      	adds	r3, r3, r7
 8008436:	2202      	movs	r2, #2
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e033      	b.n	80084a4 <UART_SetConfig+0x390>
 800843c:	231b      	movs	r3, #27
 800843e:	2220      	movs	r2, #32
 8008440:	189b      	adds	r3, r3, r2
 8008442:	19db      	adds	r3, r3, r7
 8008444:	2204      	movs	r2, #4
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e02c      	b.n	80084a4 <UART_SetConfig+0x390>
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	cfff69f3 	.word	0xcfff69f3
 8008450:	ffffcfff 	.word	0xffffcfff
 8008454:	40008000 	.word	0x40008000
 8008458:	40008400 	.word	0x40008400
 800845c:	11fff4ff 	.word	0x11fff4ff
 8008460:	40013800 	.word	0x40013800
 8008464:	40021000 	.word	0x40021000
 8008468:	40004400 	.word	0x40004400
 800846c:	40004800 	.word	0x40004800
 8008470:	40004c00 	.word	0x40004c00
 8008474:	40005000 	.word	0x40005000
 8008478:	40013c00 	.word	0x40013c00
 800847c:	231b      	movs	r3, #27
 800847e:	2220      	movs	r2, #32
 8008480:	189b      	adds	r3, r3, r2
 8008482:	19db      	adds	r3, r3, r7
 8008484:	2208      	movs	r2, #8
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	e00c      	b.n	80084a4 <UART_SetConfig+0x390>
 800848a:	231b      	movs	r3, #27
 800848c:	2220      	movs	r2, #32
 800848e:	189b      	adds	r3, r3, r2
 8008490:	19db      	adds	r3, r3, r7
 8008492:	2210      	movs	r2, #16
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	e005      	b.n	80084a4 <UART_SetConfig+0x390>
 8008498:	231b      	movs	r3, #27
 800849a:	2220      	movs	r2, #32
 800849c:	189b      	adds	r3, r3, r2
 800849e:	19db      	adds	r3, r3, r7
 80084a0:	2210      	movs	r2, #16
 80084a2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4ac1      	ldr	r2, [pc, #772]	; (80087b0 <UART_SetConfig+0x69c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d005      	beq.n	80084ba <UART_SetConfig+0x3a6>
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4ac0      	ldr	r2, [pc, #768]	; (80087b4 <UART_SetConfig+0x6a0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d000      	beq.n	80084ba <UART_SetConfig+0x3a6>
 80084b8:	e093      	b.n	80085e2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084ba:	231b      	movs	r3, #27
 80084bc:	2220      	movs	r2, #32
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	19db      	adds	r3, r3, r7
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d015      	beq.n	80084f4 <UART_SetConfig+0x3e0>
 80084c8:	dc18      	bgt.n	80084fc <UART_SetConfig+0x3e8>
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d00d      	beq.n	80084ea <UART_SetConfig+0x3d6>
 80084ce:	dc15      	bgt.n	80084fc <UART_SetConfig+0x3e8>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <UART_SetConfig+0x3c6>
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d005      	beq.n	80084e4 <UART_SetConfig+0x3d0>
 80084d8:	e010      	b.n	80084fc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084da:	f7fd f9ed 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80084de:	0003      	movs	r3, r0
 80084e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e2:	e014      	b.n	800850e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e4:	4bb4      	ldr	r3, [pc, #720]	; (80087b8 <UART_SetConfig+0x6a4>)
 80084e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e8:	e011      	b.n	800850e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ea:	f7fd f959 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 80084ee:	0003      	movs	r3, r0
 80084f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084f2:	e00c      	b.n	800850e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	021b      	lsls	r3, r3, #8
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084fa:	e008      	b.n	800850e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008500:	231a      	movs	r3, #26
 8008502:	2220      	movs	r2, #32
 8008504:	189b      	adds	r3, r3, r2
 8008506:	19db      	adds	r3, r3, r7
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
        break;
 800850c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	2b00      	cmp	r3, #0
 8008512:	d100      	bne.n	8008516 <UART_SetConfig+0x402>
 8008514:	e135      	b.n	8008782 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800851a:	4ba8      	ldr	r3, [pc, #672]	; (80087bc <UART_SetConfig+0x6a8>)
 800851c:	0052      	lsls	r2, r2, #1
 800851e:	5ad3      	ldrh	r3, [r2, r3]
 8008520:	0019      	movs	r1, r3
 8008522:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008524:	f7f7 fe0a 	bl	800013c <__udivsi3>
 8008528:	0003      	movs	r3, r0
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	0013      	movs	r3, r2
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	189b      	adds	r3, r3, r2
 8008536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008538:	429a      	cmp	r2, r3
 800853a:	d305      	bcc.n	8008548 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008544:	429a      	cmp	r2, r3
 8008546:	d906      	bls.n	8008556 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008548:	231a      	movs	r3, #26
 800854a:	2220      	movs	r2, #32
 800854c:	189b      	adds	r3, r3, r2
 800854e:	19db      	adds	r3, r3, r7
 8008550:	2201      	movs	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
 8008554:	e044      	b.n	80085e0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008562:	4b96      	ldr	r3, [pc, #600]	; (80087bc <UART_SetConfig+0x6a8>)
 8008564:	0052      	lsls	r2, r2, #1
 8008566:	5ad3      	ldrh	r3, [r2, r3]
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	69b8      	ldr	r0, [r7, #24]
 8008574:	69f9      	ldr	r1, [r7, #28]
 8008576:	f7f7 ff95 	bl	80004a4 <__aeabi_uldivmod>
 800857a:	0002      	movs	r2, r0
 800857c:	000b      	movs	r3, r1
 800857e:	0e11      	lsrs	r1, r2, #24
 8008580:	021d      	lsls	r5, r3, #8
 8008582:	430d      	orrs	r5, r1
 8008584:	0214      	lsls	r4, r2, #8
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	085b      	lsrs	r3, r3, #1
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	68b8      	ldr	r0, [r7, #8]
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	1900      	adds	r0, r0, r4
 8008598:	4169      	adcs	r1, r5
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	2300      	movs	r3, #0
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f7f7 ff7c 	bl	80004a4 <__aeabi_uldivmod>
 80085ac:	0002      	movs	r2, r0
 80085ae:	000b      	movs	r3, r1
 80085b0:	0013      	movs	r3, r2
 80085b2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b6:	23c0      	movs	r3, #192	; 0xc0
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d309      	bcc.n	80085d2 <UART_SetConfig+0x4be>
 80085be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c0:	2380      	movs	r3, #128	; 0x80
 80085c2:	035b      	lsls	r3, r3, #13
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d204      	bcs.n	80085d2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ce:	60da      	str	r2, [r3, #12]
 80085d0:	e006      	b.n	80085e0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80085d2:	231a      	movs	r3, #26
 80085d4:	2220      	movs	r2, #32
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	19db      	adds	r3, r3, r7
 80085da:	2201      	movs	r2, #1
 80085dc:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80085de:	e0d0      	b.n	8008782 <UART_SetConfig+0x66e>
 80085e0:	e0cf      	b.n	8008782 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	69da      	ldr	r2, [r3, #28]
 80085e6:	2380      	movs	r3, #128	; 0x80
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d000      	beq.n	80085f0 <UART_SetConfig+0x4dc>
 80085ee:	e070      	b.n	80086d2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80085f0:	231b      	movs	r3, #27
 80085f2:	2220      	movs	r2, #32
 80085f4:	189b      	adds	r3, r3, r2
 80085f6:	19db      	adds	r3, r3, r7
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d015      	beq.n	800862a <UART_SetConfig+0x516>
 80085fe:	dc18      	bgt.n	8008632 <UART_SetConfig+0x51e>
 8008600:	2b04      	cmp	r3, #4
 8008602:	d00d      	beq.n	8008620 <UART_SetConfig+0x50c>
 8008604:	dc15      	bgt.n	8008632 <UART_SetConfig+0x51e>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <UART_SetConfig+0x4fc>
 800860a:	2b02      	cmp	r3, #2
 800860c:	d005      	beq.n	800861a <UART_SetConfig+0x506>
 800860e:	e010      	b.n	8008632 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008610:	f7fd f952 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8008614:	0003      	movs	r3, r0
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008618:	e014      	b.n	8008644 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800861a:	4b67      	ldr	r3, [pc, #412]	; (80087b8 <UART_SetConfig+0x6a4>)
 800861c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800861e:	e011      	b.n	8008644 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008620:	f7fd f8be 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 8008624:	0003      	movs	r3, r0
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008628:	e00c      	b.n	8008644 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800862a:	2380      	movs	r3, #128	; 0x80
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008630:	e008      	b.n	8008644 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008636:	231a      	movs	r3, #26
 8008638:	2220      	movs	r2, #32
 800863a:	189b      	adds	r3, r3, r2
 800863c:	19db      	adds	r3, r3, r7
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
        break;
 8008642:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	2b00      	cmp	r3, #0
 8008648:	d100      	bne.n	800864c <UART_SetConfig+0x538>
 800864a:	e09a      	b.n	8008782 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008650:	4b5a      	ldr	r3, [pc, #360]	; (80087bc <UART_SetConfig+0x6a8>)
 8008652:	0052      	lsls	r2, r2, #1
 8008654:	5ad3      	ldrh	r3, [r2, r3]
 8008656:	0019      	movs	r1, r3
 8008658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800865a:	f7f7 fd6f 	bl	800013c <__udivsi3>
 800865e:	0003      	movs	r3, r0
 8008660:	005a      	lsls	r2, r3, #1
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	18d2      	adds	r2, r2, r3
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	0019      	movs	r1, r3
 8008670:	0010      	movs	r0, r2
 8008672:	f7f7 fd63 	bl	800013c <__udivsi3>
 8008676:	0003      	movs	r3, r0
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	2b0f      	cmp	r3, #15
 800867e:	d921      	bls.n	80086c4 <UART_SetConfig+0x5b0>
 8008680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008682:	2380      	movs	r3, #128	; 0x80
 8008684:	025b      	lsls	r3, r3, #9
 8008686:	429a      	cmp	r2, r3
 8008688:	d21c      	bcs.n	80086c4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	b29a      	uxth	r2, r3
 800868e:	200e      	movs	r0, #14
 8008690:	2420      	movs	r4, #32
 8008692:	1903      	adds	r3, r0, r4
 8008694:	19db      	adds	r3, r3, r7
 8008696:	210f      	movs	r1, #15
 8008698:	438a      	bics	r2, r1
 800869a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2207      	movs	r2, #7
 80086a4:	4013      	ands	r3, r2
 80086a6:	b299      	uxth	r1, r3
 80086a8:	1903      	adds	r3, r0, r4
 80086aa:	19db      	adds	r3, r3, r7
 80086ac:	1902      	adds	r2, r0, r4
 80086ae:	19d2      	adds	r2, r2, r7
 80086b0:	8812      	ldrh	r2, [r2, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	1902      	adds	r2, r0, r4
 80086bc:	19d2      	adds	r2, r2, r7
 80086be:	8812      	ldrh	r2, [r2, #0]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	e05e      	b.n	8008782 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80086c4:	231a      	movs	r3, #26
 80086c6:	2220      	movs	r2, #32
 80086c8:	189b      	adds	r3, r3, r2
 80086ca:	19db      	adds	r3, r3, r7
 80086cc:	2201      	movs	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
 80086d0:	e057      	b.n	8008782 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086d2:	231b      	movs	r3, #27
 80086d4:	2220      	movs	r2, #32
 80086d6:	189b      	adds	r3, r3, r2
 80086d8:	19db      	adds	r3, r3, r7
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d015      	beq.n	800870c <UART_SetConfig+0x5f8>
 80086e0:	dc18      	bgt.n	8008714 <UART_SetConfig+0x600>
 80086e2:	2b04      	cmp	r3, #4
 80086e4:	d00d      	beq.n	8008702 <UART_SetConfig+0x5ee>
 80086e6:	dc15      	bgt.n	8008714 <UART_SetConfig+0x600>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <UART_SetConfig+0x5de>
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d005      	beq.n	80086fc <UART_SetConfig+0x5e8>
 80086f0:	e010      	b.n	8008714 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f2:	f7fd f8e1 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80086f6:	0003      	movs	r3, r0
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086fa:	e014      	b.n	8008726 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086fc:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <UART_SetConfig+0x6a4>)
 80086fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008700:	e011      	b.n	8008726 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008702:	f7fd f84d 	bl	80057a0 <HAL_RCC_GetSysClockFreq>
 8008706:	0003      	movs	r3, r0
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800870a:	e00c      	b.n	8008726 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008712:	e008      	b.n	8008726 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008718:	231a      	movs	r3, #26
 800871a:	2220      	movs	r2, #32
 800871c:	189b      	adds	r3, r3, r2
 800871e:	19db      	adds	r3, r3, r7
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
        break;
 8008724:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	2b00      	cmp	r3, #0
 800872a:	d02a      	beq.n	8008782 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008730:	4b22      	ldr	r3, [pc, #136]	; (80087bc <UART_SetConfig+0x6a8>)
 8008732:	0052      	lsls	r2, r2, #1
 8008734:	5ad3      	ldrh	r3, [r2, r3]
 8008736:	0019      	movs	r1, r3
 8008738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800873a:	f7f7 fcff 	bl	800013c <__udivsi3>
 800873e:	0003      	movs	r3, r0
 8008740:	001a      	movs	r2, r3
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	18d2      	adds	r2, r2, r3
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	0019      	movs	r1, r3
 8008750:	0010      	movs	r0, r2
 8008752:	f7f7 fcf3 	bl	800013c <__udivsi3>
 8008756:	0003      	movs	r3, r0
 8008758:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	2b0f      	cmp	r3, #15
 800875e:	d90a      	bls.n	8008776 <UART_SetConfig+0x662>
 8008760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008762:	2380      	movs	r3, #128	; 0x80
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	429a      	cmp	r2, r3
 8008768:	d205      	bcs.n	8008776 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	b29a      	uxth	r2, r3
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60da      	str	r2, [r3, #12]
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008776:	231a      	movs	r3, #26
 8008778:	2220      	movs	r2, #32
 800877a:	189b      	adds	r3, r3, r2
 800877c:	19db      	adds	r3, r3, r7
 800877e:	2201      	movs	r2, #1
 8008780:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	226a      	movs	r2, #106	; 0x6a
 8008786:	2101      	movs	r1, #1
 8008788:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	2268      	movs	r2, #104	; 0x68
 800878e:	2101      	movs	r1, #1
 8008790:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	2200      	movs	r2, #0
 8008796:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	2200      	movs	r2, #0
 800879c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800879e:	231a      	movs	r3, #26
 80087a0:	2220      	movs	r2, #32
 80087a2:	189b      	adds	r3, r3, r2
 80087a4:	19db      	adds	r3, r3, r7
 80087a6:	781b      	ldrb	r3, [r3, #0]
}
 80087a8:	0018      	movs	r0, r3
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b010      	add	sp, #64	; 0x40
 80087ae:	bdb0      	pop	{r4, r5, r7, pc}
 80087b0:	40008000 	.word	0x40008000
 80087b4:	40008400 	.word	0x40008400
 80087b8:	00f42400 	.word	0x00f42400
 80087bc:	08015cc0 	.word	0x08015cc0

080087c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	2208      	movs	r2, #8
 80087ce:	4013      	ands	r3, r2
 80087d0:	d00b      	beq.n	80087ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a4a      	ldr	r2, [pc, #296]	; (8008904 <UART_AdvFeatureConfig+0x144>)
 80087da:	4013      	ands	r3, r2
 80087dc:	0019      	movs	r1, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	2201      	movs	r2, #1
 80087f0:	4013      	ands	r3, r2
 80087f2:	d00b      	beq.n	800880c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4a43      	ldr	r2, [pc, #268]	; (8008908 <UART_AdvFeatureConfig+0x148>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	0019      	movs	r1, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	2202      	movs	r2, #2
 8008812:	4013      	ands	r3, r2
 8008814:	d00b      	beq.n	800882e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	4a3b      	ldr	r2, [pc, #236]	; (800890c <UART_AdvFeatureConfig+0x14c>)
 800881e:	4013      	ands	r3, r2
 8008820:	0019      	movs	r1, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	2204      	movs	r2, #4
 8008834:	4013      	ands	r3, r2
 8008836:	d00b      	beq.n	8008850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	4a34      	ldr	r2, [pc, #208]	; (8008910 <UART_AdvFeatureConfig+0x150>)
 8008840:	4013      	ands	r3, r2
 8008842:	0019      	movs	r1, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	2210      	movs	r2, #16
 8008856:	4013      	ands	r3, r2
 8008858:	d00b      	beq.n	8008872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	4a2c      	ldr	r2, [pc, #176]	; (8008914 <UART_AdvFeatureConfig+0x154>)
 8008862:	4013      	ands	r3, r2
 8008864:	0019      	movs	r1, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	2220      	movs	r2, #32
 8008878:	4013      	ands	r3, r2
 800887a:	d00b      	beq.n	8008894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	4a25      	ldr	r2, [pc, #148]	; (8008918 <UART_AdvFeatureConfig+0x158>)
 8008884:	4013      	ands	r3, r2
 8008886:	0019      	movs	r1, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	2240      	movs	r2, #64	; 0x40
 800889a:	4013      	ands	r3, r2
 800889c:	d01d      	beq.n	80088da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4a1d      	ldr	r2, [pc, #116]	; (800891c <UART_AdvFeatureConfig+0x15c>)
 80088a6:	4013      	ands	r3, r2
 80088a8:	0019      	movs	r1, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ba:	2380      	movs	r3, #128	; 0x80
 80088bc:	035b      	lsls	r3, r3, #13
 80088be:	429a      	cmp	r2, r3
 80088c0:	d10b      	bne.n	80088da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	4a15      	ldr	r2, [pc, #84]	; (8008920 <UART_AdvFeatureConfig+0x160>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	0019      	movs	r1, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	2280      	movs	r2, #128	; 0x80
 80088e0:	4013      	ands	r3, r2
 80088e2:	d00b      	beq.n	80088fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <UART_AdvFeatureConfig+0x164>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	0019      	movs	r1, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	605a      	str	r2, [r3, #4]
  }
}
 80088fc:	46c0      	nop			; (mov r8, r8)
 80088fe:	46bd      	mov	sp, r7
 8008900:	b002      	add	sp, #8
 8008902:	bd80      	pop	{r7, pc}
 8008904:	ffff7fff 	.word	0xffff7fff
 8008908:	fffdffff 	.word	0xfffdffff
 800890c:	fffeffff 	.word	0xfffeffff
 8008910:	fffbffff 	.word	0xfffbffff
 8008914:	ffffefff 	.word	0xffffefff
 8008918:	ffffdfff 	.word	0xffffdfff
 800891c:	ffefffff 	.word	0xffefffff
 8008920:	ff9fffff 	.word	0xff9fffff
 8008924:	fff7ffff 	.word	0xfff7ffff

08008928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b092      	sub	sp, #72	; 0x48
 800892c:	af02      	add	r7, sp, #8
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2290      	movs	r2, #144	; 0x90
 8008934:	2100      	movs	r1, #0
 8008936:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008938:	f7fb fe32 	bl	80045a0 <HAL_GetTick>
 800893c:	0003      	movs	r3, r0
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2208      	movs	r2, #8
 8008948:	4013      	ands	r3, r2
 800894a:	2b08      	cmp	r3, #8
 800894c:	d12d      	bne.n	80089aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008950:	2280      	movs	r2, #128	; 0x80
 8008952:	0391      	lsls	r1, r2, #14
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4a47      	ldr	r2, [pc, #284]	; (8008a74 <UART_CheckIdleState+0x14c>)
 8008958:	9200      	str	r2, [sp, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	f000 f88e 	bl	8008a7c <UART_WaitOnFlagUntilTimeout>
 8008960:	1e03      	subs	r3, r0, #0
 8008962:	d022      	beq.n	80089aa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008964:	f3ef 8310 	mrs	r3, PRIMASK
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800896c:	63bb      	str	r3, [r7, #56]	; 0x38
 800896e:	2301      	movs	r3, #1
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	46c0      	nop			; (mov r8, r8)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2180      	movs	r1, #128	; 0x80
 8008986:	438a      	bics	r2, r1
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008990:	f383 8810 	msr	PRIMASK, r3
}
 8008994:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2288      	movs	r2, #136	; 0x88
 800899a:	2120      	movs	r1, #32
 800899c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2284      	movs	r2, #132	; 0x84
 80089a2:	2100      	movs	r1, #0
 80089a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e060      	b.n	8008a6c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2204      	movs	r2, #4
 80089b2:	4013      	ands	r3, r2
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d146      	bne.n	8008a46 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	2280      	movs	r2, #128	; 0x80
 80089bc:	03d1      	lsls	r1, r2, #15
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <UART_CheckIdleState+0x14c>)
 80089c2:	9200      	str	r2, [sp, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f000 f859 	bl	8008a7c <UART_WaitOnFlagUntilTimeout>
 80089ca:	1e03      	subs	r3, r0, #0
 80089cc:	d03b      	beq.n	8008a46 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ce:	f3ef 8310 	mrs	r3, PRIMASK
 80089d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80089d4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089d6:	637b      	str	r3, [r7, #52]	; 0x34
 80089d8:	2301      	movs	r3, #1
 80089da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4922      	ldr	r1, [pc, #136]	; (8008a78 <UART_CheckIdleState+0x150>)
 80089f0:	400a      	ands	r2, r1
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f383 8810 	msr	PRIMASK, r3
}
 80089fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a00:	f3ef 8310 	mrs	r3, PRIMASK
 8008a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a06:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a08:	633b      	str	r3, [r7, #48]	; 0x30
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f383 8810 	msr	PRIMASK, r3
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2101      	movs	r1, #1
 8008a22:	438a      	bics	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	f383 8810 	msr	PRIMASK, r3
}
 8008a30:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	228c      	movs	r2, #140	; 0x8c
 8008a36:	2120      	movs	r1, #32
 8008a38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2284      	movs	r2, #132	; 0x84
 8008a3e:	2100      	movs	r1, #0
 8008a40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e012      	b.n	8008a6c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2288      	movs	r2, #136	; 0x88
 8008a4a:	2120      	movs	r1, #32
 8008a4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	228c      	movs	r2, #140	; 0x8c
 8008a52:	2120      	movs	r1, #32
 8008a54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2284      	movs	r2, #132	; 0x84
 8008a66:	2100      	movs	r1, #0
 8008a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b010      	add	sp, #64	; 0x40
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	01ffffff 	.word	0x01ffffff
 8008a78:	fffffedf 	.word	0xfffffedf

08008a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	1dfb      	adds	r3, r7, #7
 8008a8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a8c:	e051      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	3301      	adds	r3, #1
 8008a92:	d04e      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a94:	f7fb fd84 	bl	80045a0 <HAL_GetTick>
 8008a98:	0002      	movs	r2, r0
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d302      	bcc.n	8008aaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e051      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	d03b      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d038      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b40      	cmp	r3, #64	; 0x40
 8008ac4:	d035      	beq.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	2208      	movs	r2, #8
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d111      	bne.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2208      	movs	r2, #8
 8008ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f000 f83c 	bl	8008b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2290      	movs	r2, #144	; 0x90
 8008ae8:	2108      	movs	r1, #8
 8008aea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2284      	movs	r2, #132	; 0x84
 8008af0:	2100      	movs	r1, #0
 8008af2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e02c      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	2380      	movs	r3, #128	; 0x80
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	401a      	ands	r2, r3
 8008b04:	2380      	movs	r3, #128	; 0x80
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d112      	bne.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2280      	movs	r2, #128	; 0x80
 8008b12:	0112      	lsls	r2, r2, #4
 8008b14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f000 f81f 	bl	8008b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2290      	movs	r2, #144	; 0x90
 8008b22:	2120      	movs	r1, #32
 8008b24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2284      	movs	r2, #132	; 0x84
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e00f      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	425a      	negs	r2, r3
 8008b42:	4153      	adcs	r3, r2
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	001a      	movs	r2, r3
 8008b48:	1dfb      	adds	r3, r7, #7
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d09e      	beq.n	8008a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	0018      	movs	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b004      	add	sp, #16
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08e      	sub	sp, #56	; 0x38
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b64:	f3ef 8310 	mrs	r3, PRIMASK
 8008b68:	617b      	str	r3, [r7, #20]
  return(result);
 8008b6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	f383 8810 	msr	PRIMASK, r3
}
 8008b78:	46c0      	nop			; (mov r8, r8)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4926      	ldr	r1, [pc, #152]	; (8008c20 <UART_EndRxTransfer+0xc4>)
 8008b86:	400a      	ands	r2, r1
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f383 8810 	msr	PRIMASK, r3
}
 8008b94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b96:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9a:	623b      	str	r3, [r7, #32]
  return(result);
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	f383 8810 	msr	PRIMASK, r3
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	491b      	ldr	r1, [pc, #108]	; (8008c24 <UART_EndRxTransfer+0xc8>)
 8008bb8:	400a      	ands	r2, r1
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	f383 8810 	msr	PRIMASK, r3
}
 8008bc6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d118      	bne.n	8008c02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bda:	2301      	movs	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f383 8810 	msr	PRIMASK, r3
}
 8008be4:	46c0      	nop			; (mov r8, r8)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2110      	movs	r1, #16
 8008bf2:	438a      	bics	r2, r1
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f383 8810 	msr	PRIMASK, r3
}
 8008c00:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	228c      	movs	r2, #140	; 0x8c
 8008c06:	2120      	movs	r1, #32
 8008c08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	b00e      	add	sp, #56	; 0x38
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	fffffedf 	.word	0xfffffedf
 8008c24:	effffffe 	.word	0xeffffffe

08008c28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2284      	movs	r2, #132	; 0x84
 8008c34:	5c9b      	ldrb	r3, [r3, r2]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_UARTEx_DisableFifoMode+0x16>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e027      	b.n	8008c8e <HAL_UARTEx_DisableFifoMode+0x66>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2284      	movs	r2, #132	; 0x84
 8008c42:	2101      	movs	r1, #1
 8008c44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2288      	movs	r2, #136	; 0x88
 8008c4a:	2124      	movs	r1, #36	; 0x24
 8008c4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2101      	movs	r1, #1
 8008c62:	438a      	bics	r2, r1
 8008c64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4a0b      	ldr	r2, [pc, #44]	; (8008c98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2288      	movs	r2, #136	; 0x88
 8008c80:	2120      	movs	r1, #32
 8008c82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2284      	movs	r2, #132	; 0x84
 8008c88:	2100      	movs	r1, #0
 8008c8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	0018      	movs	r0, r3
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b004      	add	sp, #16
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	46c0      	nop			; (mov r8, r8)
 8008c98:	dfffffff 	.word	0xdfffffff

08008c9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2284      	movs	r2, #132	; 0x84
 8008caa:	5c9b      	ldrb	r3, [r3, r2]
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e02e      	b.n	8008d12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2284      	movs	r2, #132	; 0x84
 8008cb8:	2101      	movs	r1, #1
 8008cba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2288      	movs	r2, #136	; 0x88
 8008cc0:	2124      	movs	r1, #36	; 0x24
 8008cc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	438a      	bics	r2, r1
 8008cda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	08d9      	lsrs	r1, r3, #3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	430a      	orrs	r2, r1
 8008cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 f854 	bl	8008da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2288      	movs	r2, #136	; 0x88
 8008d04:	2120      	movs	r1, #32
 8008d06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2284      	movs	r2, #132	; 0x84
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	0018      	movs	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b004      	add	sp, #16
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2284      	movs	r2, #132	; 0x84
 8008d2a:	5c9b      	ldrb	r3, [r3, r2]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d101      	bne.n	8008d34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e02f      	b.n	8008d94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2284      	movs	r2, #132	; 0x84
 8008d38:	2101      	movs	r1, #1
 8008d3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2288      	movs	r2, #136	; 0x88
 8008d40:	2124      	movs	r1, #36	; 0x24
 8008d42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2101      	movs	r1, #1
 8008d58:	438a      	bics	r2, r1
 8008d5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	4a0e      	ldr	r2, [pc, #56]	; (8008d9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	0019      	movs	r1, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 f813 	bl	8008da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2288      	movs	r2, #136	; 0x88
 8008d86:	2120      	movs	r1, #32
 8008d88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2284      	movs	r2, #132	; 0x84
 8008d8e:	2100      	movs	r1, #0
 8008d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b004      	add	sp, #16
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	f1ffffff 	.word	0xf1ffffff

08008da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d108      	bne.n	8008dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	226a      	movs	r2, #106	; 0x6a
 8008db4:	2101      	movs	r1, #1
 8008db6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2268      	movs	r2, #104	; 0x68
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dc0:	e043      	b.n	8008e4a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dc2:	260f      	movs	r6, #15
 8008dc4:	19bb      	adds	r3, r7, r6
 8008dc6:	2208      	movs	r2, #8
 8008dc8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dca:	200e      	movs	r0, #14
 8008dcc:	183b      	adds	r3, r7, r0
 8008dce:	2208      	movs	r2, #8
 8008dd0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	0e5b      	lsrs	r3, r3, #25
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	240d      	movs	r4, #13
 8008dde:	193b      	adds	r3, r7, r4
 8008de0:	2107      	movs	r1, #7
 8008de2:	400a      	ands	r2, r1
 8008de4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	0f5b      	lsrs	r3, r3, #29
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	250c      	movs	r5, #12
 8008df2:	197b      	adds	r3, r7, r5
 8008df4:	2107      	movs	r1, #7
 8008df6:	400a      	ands	r2, r1
 8008df8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dfa:	183b      	adds	r3, r7, r0
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	197a      	adds	r2, r7, r5
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	4914      	ldr	r1, [pc, #80]	; (8008e54 <UARTEx_SetNbDataToProcess+0xb4>)
 8008e04:	5c8a      	ldrb	r2, [r1, r2]
 8008e06:	435a      	muls	r2, r3
 8008e08:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e0a:	197b      	adds	r3, r7, r5
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	4a12      	ldr	r2, [pc, #72]	; (8008e58 <UARTEx_SetNbDataToProcess+0xb8>)
 8008e10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e12:	0019      	movs	r1, r3
 8008e14:	f7f7 fa1c 	bl	8000250 <__divsi3>
 8008e18:	0003      	movs	r3, r0
 8008e1a:	b299      	uxth	r1, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	226a      	movs	r2, #106	; 0x6a
 8008e20:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e22:	19bb      	adds	r3, r7, r6
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	193a      	adds	r2, r7, r4
 8008e28:	7812      	ldrb	r2, [r2, #0]
 8008e2a:	490a      	ldr	r1, [pc, #40]	; (8008e54 <UARTEx_SetNbDataToProcess+0xb4>)
 8008e2c:	5c8a      	ldrb	r2, [r1, r2]
 8008e2e:	435a      	muls	r2, r3
 8008e30:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e32:	193b      	adds	r3, r7, r4
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	4a08      	ldr	r2, [pc, #32]	; (8008e58 <UARTEx_SetNbDataToProcess+0xb8>)
 8008e38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	f7f7 fa08 	bl	8000250 <__divsi3>
 8008e40:	0003      	movs	r3, r0
 8008e42:	b299      	uxth	r1, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2268      	movs	r2, #104	; 0x68
 8008e48:	5299      	strh	r1, [r3, r2]
}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b005      	add	sp, #20
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	08015cd8 	.word	0x08015cd8
 8008e58:	08015ce0 	.word	0x08015ce0

08008e5c <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8008e5c:	b5b0      	push	{r4, r5, r7, lr}
 8008e5e:	b0e4      	sub	sp, #400	; 0x190
 8008e60:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008e62:	24c8      	movs	r4, #200	; 0xc8
 8008e64:	193b      	adds	r3, r7, r4
 8008e66:	0018      	movs	r0, r3
 8008e68:	23c6      	movs	r3, #198	; 0xc6
 8008e6a:	001a      	movs	r2, r3
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	f004 fbc3 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8008e72:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <astronode_send_cfg_sr+0x64>)
 8008e74:	25c8      	movs	r5, #200	; 0xc8
 8008e76:	006d      	lsls	r5, r5, #1
 8008e78:	195b      	adds	r3, r3, r5
 8008e7a:	19db      	adds	r3, r3, r7
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	23c6      	movs	r3, #198	; 0xc6
 8008e80:	001a      	movs	r2, r3
 8008e82:	2100      	movs	r1, #0
 8008e84:	f004 fbb8 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008e88:	193b      	adds	r3, r7, r4
 8008e8a:	2210      	movs	r2, #16
 8008e8c:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008e8e:	003a      	movs	r2, r7
 8008e90:	193b      	adds	r3, r7, r4
 8008e92:	0011      	movs	r1, r2
 8008e94:	0018      	movs	r0, r3
 8008e96:	f001 fa87 	bl	800a3a8 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008e9a:	4b09      	ldr	r3, [pc, #36]	; (8008ec0 <astronode_send_cfg_sr+0x64>)
 8008e9c:	195b      	adds	r3, r3, r5
 8008e9e:	19db      	adds	r3, r3, r7
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b90      	cmp	r3, #144	; 0x90
 8008ea4:	d104      	bne.n	8008eb0 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <astronode_send_cfg_sr+0x68>)
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f7fa f905 	bl	80030b8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008eae:	e003      	b.n	8008eb8 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <astronode_send_cfg_sr+0x6c>)
 8008eb2:	0018      	movs	r0, r3
 8008eb4:	f7fa f900 	bl	80030b8 <send_debug_logs>
}
 8008eb8:	46c0      	nop			; (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b064      	add	sp, #400	; 0x190
 8008ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8008ec0:	fffffe70 	.word	0xfffffe70
 8008ec4:	080146fc 	.word	0x080146fc
 8008ec8:	08014730 	.word	0x08014730

08008ecc <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ece:	b0e7      	sub	sp, #412	; 0x19c
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	0005      	movs	r5, r0
 8008ed4:	000c      	movs	r4, r1
 8008ed6:	0010      	movs	r0, r2
 8008ed8:	0019      	movs	r1, r3
 8008eda:	4b4b      	ldr	r3, [pc, #300]	; (8009008 <astronode_send_cfg_wr+0x13c>)
 8008edc:	26cc      	movs	r6, #204	; 0xcc
 8008ede:	0076      	lsls	r6, r6, #1
 8008ee0:	199b      	adds	r3, r3, r6
 8008ee2:	19db      	adds	r3, r3, r7
 8008ee4:	1c2a      	adds	r2, r5, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	4b48      	ldr	r3, [pc, #288]	; (800900c <astronode_send_cfg_wr+0x140>)
 8008eea:	0035      	movs	r5, r6
 8008eec:	195b      	adds	r3, r3, r5
 8008eee:	19db      	adds	r3, r3, r7
 8008ef0:	1c22      	adds	r2, r4, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	4b46      	ldr	r3, [pc, #280]	; (8009010 <astronode_send_cfg_wr+0x144>)
 8008ef6:	002c      	movs	r4, r5
 8008ef8:	191b      	adds	r3, r3, r4
 8008efa:	19db      	adds	r3, r3, r7
 8008efc:	1c02      	adds	r2, r0, #0
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	4b44      	ldr	r3, [pc, #272]	; (8009014 <astronode_send_cfg_wr+0x148>)
 8008f02:	191b      	adds	r3, r3, r4
 8008f04:	19db      	adds	r3, r3, r7
 8008f06:	1c0a      	adds	r2, r1, #0
 8008f08:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008f0a:	25d0      	movs	r5, #208	; 0xd0
 8008f0c:	197b      	adds	r3, r7, r5
 8008f0e:	0018      	movs	r0, r3
 8008f10:	23c6      	movs	r3, #198	; 0xc6
 8008f12:	001a      	movs	r2, r3
 8008f14:	2100      	movs	r1, #0
 8008f16:	f004 fb6f 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <astronode_send_cfg_wr+0x14c>)
 8008f1c:	191b      	adds	r3, r3, r4
 8008f1e:	19db      	adds	r3, r3, r7
 8008f20:	0018      	movs	r0, r3
 8008f22:	23c6      	movs	r3, #198	; 0xc6
 8008f24:	001a      	movs	r2, r3
 8008f26:	2100      	movs	r1, #0
 8008f28:	f004 fb66 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008f2c:	0029      	movs	r1, r5
 8008f2e:	187b      	adds	r3, r7, r1
 8008f30:	2205      	movs	r2, #5
 8008f32:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008f34:	4b34      	ldr	r3, [pc, #208]	; (8009008 <astronode_send_cfg_wr+0x13c>)
 8008f36:	191b      	adds	r3, r3, r4
 8008f38:	19db      	adds	r3, r3, r7
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	569a      	ldrsb	r2, [r3, r2]
 8008f3e:	4b33      	ldr	r3, [pc, #204]	; (800900c <astronode_send_cfg_wr+0x140>)
 8008f40:	191b      	adds	r3, r3, r4
 8008f42:	19db      	adds	r3, r3, r7
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	b25b      	sxtb	r3, r3
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008f4e:	4b30      	ldr	r3, [pc, #192]	; (8009010 <astronode_send_cfg_wr+0x144>)
 8008f50:	191b      	adds	r3, r3, r4
 8008f52:	19db      	adds	r3, r3, r7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	b25b      	sxtb	r3, r3
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008f5e:	4b2d      	ldr	r3, [pc, #180]	; (8009014 <astronode_send_cfg_wr+0x148>)
 8008f60:	191b      	adds	r3, r3, r4
 8008f62:	19db      	adds	r3, r3, r7
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	b25b      	sxtb	r3, r3
 8008f6e:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008f70:	187b      	adds	r3, r7, r1
 8008f72:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008f74:	23d4      	movs	r3, #212	; 0xd4
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	2508      	movs	r5, #8
 8008f7a:	195b      	adds	r3, r3, r5
 8008f7c:	19db      	adds	r3, r3, r7
 8008f7e:	2200      	movs	r2, #0
 8008f80:	569a      	ldrsb	r2, [r3, r2]
 8008f82:	23d6      	movs	r3, #214	; 0xd6
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	195b      	adds	r3, r3, r5
 8008f88:	19db      	adds	r3, r3, r7
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	b25b      	sxtb	r3, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008f94:	23d8      	movs	r3, #216	; 0xd8
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	195b      	adds	r3, r3, r5
 8008f9a:	19db      	adds	r3, r3, r7
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	b25b      	sxtb	r3, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008fa6:	23da      	movs	r3, #218	; 0xda
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	195b      	adds	r3, r3, r5
 8008fac:	19db      	adds	r3, r3, r7
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	b25b      	sxtb	r3, r3
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	b25b      	sxtb	r3, r3
 8008fb8:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008fba:	187b      	adds	r3, r7, r1
 8008fbc:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008fbe:	0008      	movs	r0, r1
 8008fc0:	187b      	adds	r3, r7, r1
 8008fc2:	22c4      	movs	r2, #196	; 0xc4
 8008fc4:	2103      	movs	r1, #3
 8008fc6:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008fc8:	002b      	movs	r3, r5
 8008fca:	18fa      	adds	r2, r7, r3
 8008fcc:	183b      	adds	r3, r7, r0
 8008fce:	0011      	movs	r1, r2
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f001 f9e9 	bl	800a3a8 <astronode_transport_send_receive>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d10f      	bne.n	8008ffc <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <astronode_send_cfg_wr+0x14c>)
 8008fde:	191b      	adds	r3, r3, r4
 8008fe0:	19db      	adds	r3, r3, r7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b85      	cmp	r3, #133	; 0x85
 8008fe6:	d105      	bne.n	8008ff4 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <astronode_send_cfg_wr+0x150>)
 8008fea:	0018      	movs	r0, r3
 8008fec:	f7fa f864 	bl	80030b8 <send_debug_logs>
            return true ;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e004      	b.n	8008ffe <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <astronode_send_cfg_wr+0x154>)
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7fa f85e 	bl	80030b8 <send_debug_logs>
        }
    }
    return false ;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	0018      	movs	r0, r3
 8009000:	46bd      	mov	sp, r7
 8009002:	b067      	add	sp, #412	; 0x19c
 8009004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	fffffe6f 	.word	0xfffffe6f
 800900c:	fffffe6e 	.word	0xfffffe6e
 8009010:	fffffe6d 	.word	0xfffffe6d
 8009014:	fffffe6c 	.word	0xfffffe6c
 8009018:	fffffe70 	.word	0xfffffe70
 800901c:	08014764 	.word	0x08014764
 8009020:	08014790 	.word	0x08014790

08009024 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8009024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009026:	b0ed      	sub	sp, #436	; 0x1b4
 8009028:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800902a:	21c8      	movs	r1, #200	; 0xc8
 800902c:	2318      	movs	r3, #24
 800902e:	18cb      	adds	r3, r1, r3
 8009030:	19db      	adds	r3, r3, r7
 8009032:	0018      	movs	r0, r3
 8009034:	23c6      	movs	r3, #198	; 0xc6
 8009036:	001a      	movs	r2, r3
 8009038:	2100      	movs	r1, #0
 800903a:	f004 fadd 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 800903e:	4b4a      	ldr	r3, [pc, #296]	; (8009168 <astronode_send_mgi_rr+0x144>)
 8009040:	26cc      	movs	r6, #204	; 0xcc
 8009042:	0076      	lsls	r6, r6, #1
 8009044:	199b      	adds	r3, r3, r6
 8009046:	2218      	movs	r2, #24
 8009048:	4694      	mov	ip, r2
 800904a:	44bc      	add	ip, r7
 800904c:	4463      	add	r3, ip
 800904e:	0018      	movs	r0, r3
 8009050:	23c6      	movs	r3, #198	; 0xc6
 8009052:	001a      	movs	r2, r3
 8009054:	2100      	movs	r1, #0
 8009056:	f004 facf 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 800905a:	21c8      	movs	r1, #200	; 0xc8
 800905c:	2318      	movs	r3, #24
 800905e:	18cb      	adds	r3, r1, r3
 8009060:	19db      	adds	r3, r3, r7
 8009062:	2219      	movs	r2, #25
 8009064:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009066:	2318      	movs	r3, #24
 8009068:	18fa      	adds	r2, r7, r3
 800906a:	2318      	movs	r3, #24
 800906c:	18cb      	adds	r3, r1, r3
 800906e:	19db      	adds	r3, r3, r7
 8009070:	0011      	movs	r1, r2
 8009072:	0018      	movs	r0, r3
 8009074:	f001 f998 	bl	800a3a8 <astronode_transport_send_receive>
 8009078:	0003      	movs	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d16f      	bne.n	800915e <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 800907e:	4b3a      	ldr	r3, [pc, #232]	; (8009168 <astronode_send_mgi_rr+0x144>)
 8009080:	0032      	movs	r2, r6
 8009082:	189b      	adds	r3, r3, r2
 8009084:	2118      	movs	r1, #24
 8009086:	468c      	mov	ip, r1
 8009088:	44bc      	add	ip, r7
 800908a:	4463      	add	r3, ip
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b99      	cmp	r3, #153	; 0x99
 8009090:	d161      	bne.n	8009156 <astronode_send_mgi_rr+0x132>
        {
 8009092:	466b      	mov	r3, sp
 8009094:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8009096:	4b34      	ldr	r3, [pc, #208]	; (8009168 <astronode_send_mgi_rr+0x144>)
 8009098:	189b      	adds	r3, r3, r2
 800909a:	2218      	movs	r2, #24
 800909c:	4694      	mov	ip, r2
 800909e:	44bc      	add	ip, r7
 80090a0:	4463      	add	r3, ip
 80090a2:	22c4      	movs	r2, #196	; 0xc4
 80090a4:	5a9b      	ldrh	r3, [r3, r2]
 80090a6:	001a      	movs	r2, r3
 80090a8:	3a01      	subs	r2, #1
 80090aa:	21ca      	movs	r1, #202	; 0xca
 80090ac:	0049      	lsls	r1, r1, #1
 80090ae:	2018      	movs	r0, #24
 80090b0:	1809      	adds	r1, r1, r0
 80090b2:	19c9      	adds	r1, r1, r7
 80090b4:	600a      	str	r2, [r1, #0]
 80090b6:	001c      	movs	r4, r3
 80090b8:	2200      	movs	r2, #0
 80090ba:	0015      	movs	r5, r2
 80090bc:	0020      	movs	r0, r4
 80090be:	0029      	movs	r1, r5
 80090c0:	0004      	movs	r4, r0
 80090c2:	0f62      	lsrs	r2, r4, #29
 80090c4:	000c      	movs	r4, r1
 80090c6:	00e4      	lsls	r4, r4, #3
 80090c8:	617c      	str	r4, [r7, #20]
 80090ca:	697c      	ldr	r4, [r7, #20]
 80090cc:	4314      	orrs	r4, r2
 80090ce:	617c      	str	r4, [r7, #20]
 80090d0:	0001      	movs	r1, r0
 80090d2:	00c9      	lsls	r1, r1, #3
 80090d4:	6139      	str	r1, [r7, #16]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	2200      	movs	r2, #0
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	6838      	ldr	r0, [r7, #0]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	0004      	movs	r4, r0
 80090e2:	0f62      	lsrs	r2, r4, #29
 80090e4:	000c      	movs	r4, r1
 80090e6:	00e4      	lsls	r4, r4, #3
 80090e8:	60fc      	str	r4, [r7, #12]
 80090ea:	68fc      	ldr	r4, [r7, #12]
 80090ec:	4314      	orrs	r4, r2
 80090ee:	60fc      	str	r4, [r7, #12]
 80090f0:	0001      	movs	r1, r0
 80090f2:	00ca      	lsls	r2, r1, #3
 80090f4:	60ba      	str	r2, [r7, #8]
 80090f6:	3307      	adds	r3, #7
 80090f8:	08db      	lsrs	r3, r3, #3
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4669      	mov	r1, sp
 80090fe:	1acb      	subs	r3, r1, r3
 8009100:	469d      	mov	sp, r3
 8009102:	466b      	mov	r3, sp
 8009104:	3300      	adds	r3, #0
 8009106:	24c8      	movs	r4, #200	; 0xc8
 8009108:	0064      	lsls	r4, r4, #1
 800910a:	2218      	movs	r2, #24
 800910c:	18a2      	adds	r2, r4, r2
 800910e:	19d1      	adds	r1, r2, r7
 8009110:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <astronode_send_mgi_rr+0x148>)
 8009114:	0018      	movs	r0, r3
 8009116:	f7f9 ffcf 	bl	80030b8 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 800911a:	4b13      	ldr	r3, [pc, #76]	; (8009168 <astronode_send_mgi_rr+0x144>)
 800911c:	22cc      	movs	r2, #204	; 0xcc
 800911e:	0052      	lsls	r2, r2, #1
 8009120:	189b      	adds	r3, r3, r2
 8009122:	2218      	movs	r2, #24
 8009124:	4694      	mov	ip, r2
 8009126:	44bc      	add	ip, r7
 8009128:	4463      	add	r3, ip
 800912a:	22c4      	movs	r2, #196	; 0xc4
 800912c:	5a9b      	ldrh	r3, [r3, r2]
 800912e:	0019      	movs	r1, r3
 8009130:	2318      	movs	r3, #24
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	3301      	adds	r3, #1
 8009136:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <astronode_send_mgi_rr+0x14c>)
 8009138:	2018      	movs	r0, #24
 800913a:	1820      	adds	r0, r4, r0
 800913c:	19c0      	adds	r0, r0, r7
 800913e:	6800      	ldr	r0, [r0, #0]
 8009140:	f004 f990 	bl	800d464 <snprintf>
            send_debug_logs(guid);
 8009144:	2318      	movs	r3, #24
 8009146:	18e3      	adds	r3, r4, r3
 8009148:	19db      	adds	r3, r3, r7
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	0018      	movs	r0, r3
 800914e:	f7f9 ffb3 	bl	80030b8 <send_debug_logs>
 8009152:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8009154:	e003      	b.n	800915e <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <astronode_send_mgi_rr+0x150>)
 8009158:	0018      	movs	r0, r3
 800915a:	f7f9 ffad 	bl	80030b8 <send_debug_logs>
}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	46bd      	mov	sp, r7
 8009162:	b06d      	add	sp, #436	; 0x1b4
 8009164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	fffffe68 	.word	0xfffffe68
 800916c:	0801481c 	.word	0x0801481c
 8009170:	0801482c 	.word	0x0801482c
 8009174:	08014830 	.word	0x08014830

08009178 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8009178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917a:	b0ed      	sub	sp, #436	; 0x1b4
 800917c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800917e:	21c8      	movs	r1, #200	; 0xc8
 8009180:	2318      	movs	r3, #24
 8009182:	18cb      	adds	r3, r1, r3
 8009184:	19db      	adds	r3, r3, r7
 8009186:	0018      	movs	r0, r3
 8009188:	23c6      	movs	r3, #198	; 0xc6
 800918a:	001a      	movs	r2, r3
 800918c:	2100      	movs	r1, #0
 800918e:	f004 fa33 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009192:	4b4a      	ldr	r3, [pc, #296]	; (80092bc <astronode_send_msn_rr+0x144>)
 8009194:	26cc      	movs	r6, #204	; 0xcc
 8009196:	0076      	lsls	r6, r6, #1
 8009198:	199b      	adds	r3, r3, r6
 800919a:	2218      	movs	r2, #24
 800919c:	4694      	mov	ip, r2
 800919e:	44bc      	add	ip, r7
 80091a0:	4463      	add	r3, ip
 80091a2:	0018      	movs	r0, r3
 80091a4:	23c6      	movs	r3, #198	; 0xc6
 80091a6:	001a      	movs	r2, r3
 80091a8:	2100      	movs	r1, #0
 80091aa:	f004 fa25 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80091ae:	21c8      	movs	r1, #200	; 0xc8
 80091b0:	2318      	movs	r3, #24
 80091b2:	18cb      	adds	r3, r1, r3
 80091b4:	19db      	adds	r3, r3, r7
 80091b6:	221a      	movs	r2, #26
 80091b8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80091ba:	2318      	movs	r3, #24
 80091bc:	18fa      	adds	r2, r7, r3
 80091be:	2318      	movs	r3, #24
 80091c0:	18cb      	adds	r3, r1, r3
 80091c2:	19db      	adds	r3, r3, r7
 80091c4:	0011      	movs	r1, r2
 80091c6:	0018      	movs	r0, r3
 80091c8:	f001 f8ee 	bl	800a3a8 <astronode_transport_send_receive>
 80091cc:	0003      	movs	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d16f      	bne.n	80092b2 <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80091d2:	4b3a      	ldr	r3, [pc, #232]	; (80092bc <astronode_send_msn_rr+0x144>)
 80091d4:	0032      	movs	r2, r6
 80091d6:	189b      	adds	r3, r3, r2
 80091d8:	2118      	movs	r1, #24
 80091da:	468c      	mov	ip, r1
 80091dc:	44bc      	add	ip, r7
 80091de:	4463      	add	r3, ip
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b9a      	cmp	r3, #154	; 0x9a
 80091e4:	d161      	bne.n	80092aa <astronode_send_msn_rr+0x132>
        {
 80091e6:	466b      	mov	r3, sp
 80091e8:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80091ea:	4b34      	ldr	r3, [pc, #208]	; (80092bc <astronode_send_msn_rr+0x144>)
 80091ec:	189b      	adds	r3, r3, r2
 80091ee:	2218      	movs	r2, #24
 80091f0:	4694      	mov	ip, r2
 80091f2:	44bc      	add	ip, r7
 80091f4:	4463      	add	r3, ip
 80091f6:	22c4      	movs	r2, #196	; 0xc4
 80091f8:	5a9b      	ldrh	r3, [r3, r2]
 80091fa:	001a      	movs	r2, r3
 80091fc:	3a01      	subs	r2, #1
 80091fe:	21ca      	movs	r1, #202	; 0xca
 8009200:	0049      	lsls	r1, r1, #1
 8009202:	2018      	movs	r0, #24
 8009204:	1809      	adds	r1, r1, r0
 8009206:	19c9      	adds	r1, r1, r7
 8009208:	600a      	str	r2, [r1, #0]
 800920a:	001c      	movs	r4, r3
 800920c:	2200      	movs	r2, #0
 800920e:	0015      	movs	r5, r2
 8009210:	0020      	movs	r0, r4
 8009212:	0029      	movs	r1, r5
 8009214:	0004      	movs	r4, r0
 8009216:	0f62      	lsrs	r2, r4, #29
 8009218:	000c      	movs	r4, r1
 800921a:	00e4      	lsls	r4, r4, #3
 800921c:	617c      	str	r4, [r7, #20]
 800921e:	697c      	ldr	r4, [r7, #20]
 8009220:	4314      	orrs	r4, r2
 8009222:	617c      	str	r4, [r7, #20]
 8009224:	0001      	movs	r1, r0
 8009226:	00c9      	lsls	r1, r1, #3
 8009228:	6139      	str	r1, [r7, #16]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	6838      	ldr	r0, [r7, #0]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	0004      	movs	r4, r0
 8009236:	0f62      	lsrs	r2, r4, #29
 8009238:	000c      	movs	r4, r1
 800923a:	00e4      	lsls	r4, r4, #3
 800923c:	60fc      	str	r4, [r7, #12]
 800923e:	68fc      	ldr	r4, [r7, #12]
 8009240:	4314      	orrs	r4, r2
 8009242:	60fc      	str	r4, [r7, #12]
 8009244:	0001      	movs	r1, r0
 8009246:	00ca      	lsls	r2, r1, #3
 8009248:	60ba      	str	r2, [r7, #8]
 800924a:	3307      	adds	r3, #7
 800924c:	08db      	lsrs	r3, r3, #3
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4669      	mov	r1, sp
 8009252:	1acb      	subs	r3, r1, r3
 8009254:	469d      	mov	sp, r3
 8009256:	466b      	mov	r3, sp
 8009258:	3300      	adds	r3, #0
 800925a:	24c8      	movs	r4, #200	; 0xc8
 800925c:	0064      	lsls	r4, r4, #1
 800925e:	2218      	movs	r2, #24
 8009260:	18a2      	adds	r2, r4, r2
 8009262:	19d1      	adds	r1, r2, r7
 8009264:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8009266:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <astronode_send_msn_rr+0x148>)
 8009268:	0018      	movs	r0, r3
 800926a:	f7f9 ff25 	bl	80030b8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 800926e:	4b13      	ldr	r3, [pc, #76]	; (80092bc <astronode_send_msn_rr+0x144>)
 8009270:	22cc      	movs	r2, #204	; 0xcc
 8009272:	0052      	lsls	r2, r2, #1
 8009274:	189b      	adds	r3, r3, r2
 8009276:	2218      	movs	r2, #24
 8009278:	4694      	mov	ip, r2
 800927a:	44bc      	add	ip, r7
 800927c:	4463      	add	r3, ip
 800927e:	22c4      	movs	r2, #196	; 0xc4
 8009280:	5a9b      	ldrh	r3, [r3, r2]
 8009282:	0019      	movs	r1, r3
 8009284:	2318      	movs	r3, #24
 8009286:	18fb      	adds	r3, r7, r3
 8009288:	3301      	adds	r3, #1
 800928a:	4a0e      	ldr	r2, [pc, #56]	; (80092c4 <astronode_send_msn_rr+0x14c>)
 800928c:	2018      	movs	r0, #24
 800928e:	1820      	adds	r0, r4, r0
 8009290:	19c0      	adds	r0, r0, r7
 8009292:	6800      	ldr	r0, [r0, #0]
 8009294:	f004 f8e6 	bl	800d464 <snprintf>
            send_debug_logs(serial_number);
 8009298:	2318      	movs	r3, #24
 800929a:	18e3      	adds	r3, r4, r3
 800929c:	19db      	adds	r3, r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	0018      	movs	r0, r3
 80092a2:	f7f9 ff09 	bl	80030b8 <send_debug_logs>
 80092a6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80092a8:	e003      	b.n	80092b2 <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <astronode_send_msn_rr+0x150>)
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7f9 ff03 	bl	80030b8 <send_debug_logs>
}
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b06d      	add	sp, #436	; 0x1b4
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ba:	46c0      	nop			; (mov r8, r8)
 80092bc:	fffffe68 	.word	0xfffffe68
 80092c0:	0801484c 	.word	0x0801484c
 80092c4:	0801482c 	.word	0x0801482c
 80092c8:	08014868 	.word	0x08014868

080092cc <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80092cc:	b5b0      	push	{r4, r5, r7, lr}
 80092ce:	b0e4      	sub	sp, #400	; 0x190
 80092d0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80092d2:	24c8      	movs	r4, #200	; 0xc8
 80092d4:	193b      	adds	r3, r7, r4
 80092d6:	0018      	movs	r0, r3
 80092d8:	23c6      	movs	r3, #198	; 0xc6
 80092da:	001a      	movs	r2, r3
 80092dc:	2100      	movs	r1, #0
 80092de:	f004 f98b 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 80092e2:	4b31      	ldr	r3, [pc, #196]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 80092e4:	25c8      	movs	r5, #200	; 0xc8
 80092e6:	006d      	lsls	r5, r5, #1
 80092e8:	195b      	adds	r3, r3, r5
 80092ea:	19db      	adds	r3, r3, r7
 80092ec:	0018      	movs	r0, r3
 80092ee:	23c6      	movs	r3, #198	; 0xc6
 80092f0:	001a      	movs	r2, r3
 80092f2:	2100      	movs	r1, #0
 80092f4:	f004 f980 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80092f8:	193b      	adds	r3, r7, r4
 80092fa:	2265      	movs	r2, #101	; 0x65
 80092fc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80092fe:	003a      	movs	r2, r7
 8009300:	193b      	adds	r3, r7, r4
 8009302:	0011      	movs	r1, r2
 8009304:	0018      	movs	r0, r3
 8009306:	f001 f84f 	bl	800a3a8 <astronode_transport_send_receive>
 800930a:	0003      	movs	r3, r0
 800930c:	2b01      	cmp	r3, #1
 800930e:	d147      	bne.n	80093a0 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8009310:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 8009312:	195b      	adds	r3, r3, r5
 8009314:	19db      	adds	r3, r3, r7
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2be5      	cmp	r3, #229	; 0xe5
 800931a:	d141      	bne.n	80093a0 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 800931c:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 800931e:	195b      	adds	r3, r3, r5
 8009320:	19db      	adds	r3, r3, r7
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	001a      	movs	r2, r3
 8009326:	2301      	movs	r3, #1
 8009328:	4013      	ands	r3, r2
 800932a:	d006      	beq.n	800933a <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 800932c:	4b1f      	ldr	r3, [pc, #124]	; (80093ac <astronode_send_evt_rr+0xe0>)
 800932e:	2201      	movs	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8009332:	4b1f      	ldr	r3, [pc, #124]	; (80093b0 <astronode_send_evt_rr+0xe4>)
 8009334:	0018      	movs	r0, r3
 8009336:	f7f9 febf 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 800933c:	22c8      	movs	r2, #200	; 0xc8
 800933e:	0052      	lsls	r2, r2, #1
 8009340:	189b      	adds	r3, r3, r2
 8009342:	19db      	adds	r3, r3, r7
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	001a      	movs	r2, r3
 8009348:	2302      	movs	r3, #2
 800934a:	4013      	ands	r3, r2
 800934c:	d006      	beq.n	800935c <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800934e:	4b19      	ldr	r3, [pc, #100]	; (80093b4 <astronode_send_evt_rr+0xe8>)
 8009350:	2201      	movs	r2, #1
 8009352:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8009354:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <astronode_send_evt_rr+0xec>)
 8009356:	0018      	movs	r0, r3
 8009358:	f7f9 feae 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 800935c:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 800935e:	22c8      	movs	r2, #200	; 0xc8
 8009360:	0052      	lsls	r2, r2, #1
 8009362:	189b      	adds	r3, r3, r2
 8009364:	19db      	adds	r3, r3, r7
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	001a      	movs	r2, r3
 800936a:	2304      	movs	r3, #4
 800936c:	4013      	ands	r3, r2
 800936e:	d006      	beq.n	800937e <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8009370:	4b12      	ldr	r3, [pc, #72]	; (80093bc <astronode_send_evt_rr+0xf0>)
 8009372:	2201      	movs	r2, #1
 8009374:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8009376:	4b12      	ldr	r3, [pc, #72]	; (80093c0 <astronode_send_evt_rr+0xf4>)
 8009378:	0018      	movs	r0, r3
 800937a:	f7f9 fe9d 	bl	80030b8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800937e:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <astronode_send_evt_rr+0xdc>)
 8009380:	22c8      	movs	r2, #200	; 0xc8
 8009382:	0052      	lsls	r2, r2, #1
 8009384:	189b      	adds	r3, r3, r2
 8009386:	19db      	adds	r3, r3, r7
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	001a      	movs	r2, r3
 800938c:	2308      	movs	r3, #8
 800938e:	4013      	ands	r3, r2
 8009390:	d006      	beq.n	80093a0 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <astronode_send_evt_rr+0xf8>)
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <astronode_send_evt_rr+0xfc>)
 800939a:	0018      	movs	r0, r3
 800939c:	f7f9 fe8c 	bl	80030b8 <send_debug_logs>
            }

        }
    }
}
 80093a0:	46c0      	nop			; (mov r8, r8)
 80093a2:	46bd      	mov	sp, r7
 80093a4:	b064      	add	sp, #400	; 0x190
 80093a6:	bdb0      	pop	{r4, r5, r7, pc}
 80093a8:	fffffe70 	.word	0xfffffe70
 80093ac:	20000b28 	.word	0x20000b28
 80093b0:	08014910 	.word	0x08014910
 80093b4:	20000b29 	.word	0x20000b29
 80093b8:	08014934 	.word	0x08014934
 80093bc:	20000b2a 	.word	0x20000b2a
 80093c0:	0801494c 	.word	0x0801494c
 80093c4:	20000b2b 	.word	0x20000b2b
 80093c8:	08014960 	.word	0x08014960

080093cc <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	b0e7      	sub	sp, #412	; 0x19c
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80093d6:	24d0      	movs	r4, #208	; 0xd0
 80093d8:	193b      	adds	r3, r7, r4
 80093da:	0018      	movs	r0, r3
 80093dc:	23c6      	movs	r3, #198	; 0xc6
 80093de:	001a      	movs	r2, r3
 80093e0:	2100      	movs	r1, #0
 80093e2:	f004 f909 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 80093e6:	4b56      	ldr	r3, [pc, #344]	; (8009540 <astronode_send_geo_wr+0x174>)
 80093e8:	26cc      	movs	r6, #204	; 0xcc
 80093ea:	0076      	lsls	r6, r6, #1
 80093ec:	199b      	adds	r3, r3, r6
 80093ee:	19db      	adds	r3, r3, r7
 80093f0:	0018      	movs	r0, r3
 80093f2:	23c6      	movs	r3, #198	; 0xc6
 80093f4:	001a      	movs	r2, r3
 80093f6:	2100      	movs	r1, #0
 80093f8:	f004 f8fe 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80093fc:	193b      	adds	r3, r7, r4
 80093fe:	2235      	movs	r2, #53	; 0x35
 8009400:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 8009402:	193b      	adds	r3, r7, r4
 8009404:	22c4      	movs	r2, #196	; 0xc4
 8009406:	5a9b      	ldrh	r3, [r3, r2]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	b290      	uxth	r0, r2
 800940c:	193a      	adds	r2, r7, r4
 800940e:	21c4      	movs	r1, #196	; 0xc4
 8009410:	5250      	strh	r0, [r2, r1]
 8009412:	0019      	movs	r1, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	b2da      	uxtb	r2, r3
 8009418:	193b      	adds	r3, r7, r4
 800941a:	185b      	adds	r3, r3, r1
 800941c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	1218      	asrs	r0, r3, #8
 8009422:	0025      	movs	r5, r4
 8009424:	197b      	adds	r3, r7, r5
 8009426:	22c4      	movs	r2, #196	; 0xc4
 8009428:	5a9b      	ldrh	r3, [r3, r2]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	b294      	uxth	r4, r2
 800942e:	197a      	adds	r2, r7, r5
 8009430:	21c4      	movs	r1, #196	; 0xc4
 8009432:	5254      	strh	r4, [r2, r1]
 8009434:	0019      	movs	r1, r3
 8009436:	b2c2      	uxtb	r2, r0
 8009438:	002c      	movs	r4, r5
 800943a:	193b      	adds	r3, r7, r4
 800943c:	185b      	adds	r3, r3, r1
 800943e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	1418      	asrs	r0, r3, #16
 8009444:	0025      	movs	r5, r4
 8009446:	197b      	adds	r3, r7, r5
 8009448:	22c4      	movs	r2, #196	; 0xc4
 800944a:	5a9b      	ldrh	r3, [r3, r2]
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	b294      	uxth	r4, r2
 8009450:	197a      	adds	r2, r7, r5
 8009452:	21c4      	movs	r1, #196	; 0xc4
 8009454:	5254      	strh	r4, [r2, r1]
 8009456:	0019      	movs	r1, r3
 8009458:	b2c2      	uxtb	r2, r0
 800945a:	002c      	movs	r4, r5
 800945c:	193b      	adds	r3, r7, r4
 800945e:	185b      	adds	r3, r3, r1
 8009460:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	1618      	asrs	r0, r3, #24
 8009466:	0025      	movs	r5, r4
 8009468:	197b      	adds	r3, r7, r5
 800946a:	22c4      	movs	r2, #196	; 0xc4
 800946c:	5a9b      	ldrh	r3, [r3, r2]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	b294      	uxth	r4, r2
 8009472:	197a      	adds	r2, r7, r5
 8009474:	21c4      	movs	r1, #196	; 0xc4
 8009476:	5254      	strh	r4, [r2, r1]
 8009478:	0019      	movs	r1, r3
 800947a:	b2c2      	uxtb	r2, r0
 800947c:	002c      	movs	r4, r5
 800947e:	193b      	adds	r3, r7, r4
 8009480:	185b      	adds	r3, r3, r1
 8009482:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8009484:	193b      	adds	r3, r7, r4
 8009486:	22c4      	movs	r2, #196	; 0xc4
 8009488:	5a9b      	ldrh	r3, [r3, r2]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	b290      	uxth	r0, r2
 800948e:	193a      	adds	r2, r7, r4
 8009490:	21c4      	movs	r1, #196	; 0xc4
 8009492:	5250      	strh	r0, [r2, r1]
 8009494:	0019      	movs	r1, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	b2da      	uxtb	r2, r3
 800949a:	193b      	adds	r3, r7, r4
 800949c:	185b      	adds	r3, r3, r1
 800949e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	1218      	asrs	r0, r3, #8
 80094a4:	0025      	movs	r5, r4
 80094a6:	197b      	adds	r3, r7, r5
 80094a8:	22c4      	movs	r2, #196	; 0xc4
 80094aa:	5a9b      	ldrh	r3, [r3, r2]
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	b294      	uxth	r4, r2
 80094b0:	197a      	adds	r2, r7, r5
 80094b2:	21c4      	movs	r1, #196	; 0xc4
 80094b4:	5254      	strh	r4, [r2, r1]
 80094b6:	0019      	movs	r1, r3
 80094b8:	b2c2      	uxtb	r2, r0
 80094ba:	002c      	movs	r4, r5
 80094bc:	193b      	adds	r3, r7, r4
 80094be:	185b      	adds	r3, r3, r1
 80094c0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	1418      	asrs	r0, r3, #16
 80094c6:	0025      	movs	r5, r4
 80094c8:	197b      	adds	r3, r7, r5
 80094ca:	22c4      	movs	r2, #196	; 0xc4
 80094cc:	5a9b      	ldrh	r3, [r3, r2]
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	b294      	uxth	r4, r2
 80094d2:	197a      	adds	r2, r7, r5
 80094d4:	21c4      	movs	r1, #196	; 0xc4
 80094d6:	5254      	strh	r4, [r2, r1]
 80094d8:	0019      	movs	r1, r3
 80094da:	b2c2      	uxtb	r2, r0
 80094dc:	002c      	movs	r4, r5
 80094de:	193b      	adds	r3, r7, r4
 80094e0:	185b      	adds	r3, r3, r1
 80094e2:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	1618      	asrs	r0, r3, #24
 80094e8:	0025      	movs	r5, r4
 80094ea:	197b      	adds	r3, r7, r5
 80094ec:	22c4      	movs	r2, #196	; 0xc4
 80094ee:	5a9b      	ldrh	r3, [r3, r2]
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	b294      	uxth	r4, r2
 80094f4:	197a      	adds	r2, r7, r5
 80094f6:	21c4      	movs	r1, #196	; 0xc4
 80094f8:	5254      	strh	r4, [r2, r1]
 80094fa:	0019      	movs	r1, r3
 80094fc:	b2c2      	uxtb	r2, r0
 80094fe:	0028      	movs	r0, r5
 8009500:	183b      	adds	r3, r7, r0
 8009502:	185b      	adds	r3, r3, r1
 8009504:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009506:	2308      	movs	r3, #8
 8009508:	18fa      	adds	r2, r7, r3
 800950a:	183b      	adds	r3, r7, r0
 800950c:	0011      	movs	r1, r2
 800950e:	0018      	movs	r0, r3
 8009510:	f000 ff4a 	bl	800a3a8 <astronode_transport_send_receive>
 8009514:	0003      	movs	r3, r0
 8009516:	2b01      	cmp	r3, #1
 8009518:	d10e      	bne.n	8009538 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <astronode_send_geo_wr+0x174>)
 800951c:	199b      	adds	r3, r3, r6
 800951e:	19db      	adds	r3, r3, r7
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	2bb5      	cmp	r3, #181	; 0xb5
 8009524:	d104      	bne.n	8009530 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8009526:	4b07      	ldr	r3, [pc, #28]	; (8009544 <astronode_send_geo_wr+0x178>)
 8009528:	0018      	movs	r0, r3
 800952a:	f7f9 fdc5 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800952e:	e003      	b.n	8009538 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <astronode_send_geo_wr+0x17c>)
 8009532:	0018      	movs	r0, r3
 8009534:	f7f9 fdc0 	bl	80030b8 <send_debug_logs>
}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	46bd      	mov	sp, r7
 800953c:	b067      	add	sp, #412	; 0x19c
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009540:	fffffe70 	.word	0xfffffe70
 8009544:	08014974 	.word	0x08014974
 8009548:	080149a0 	.word	0x080149a0

0800954c <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , const char *p_payload , uint16_t payload_length )
{
 800954c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800954e:	b0fd      	sub	sp, #500	; 0x1f4
 8009550:	af02      	add	r7, sp, #8
 8009552:	6039      	str	r1, [r7, #0]
 8009554:	0011      	movs	r1, r2
 8009556:	4b4c      	ldr	r3, [pc, #304]	; (8009688 <astronode_send_pld_er+0x13c>)
 8009558:	26f4      	movs	r6, #244	; 0xf4
 800955a:	0076      	lsls	r6, r6, #1
 800955c:	199b      	adds	r3, r3, r6
 800955e:	19db      	adds	r3, r3, r7
 8009560:	1c02      	adds	r2, r0, #0
 8009562:	801a      	strh	r2, [r3, #0]
 8009564:	4b49      	ldr	r3, [pc, #292]	; (800968c <astronode_send_pld_er+0x140>)
 8009566:	199b      	adds	r3, r3, r6
 8009568:	19db      	adds	r3, r3, r7
 800956a:	1c0a      	adds	r2, r1, #0
 800956c:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800956e:	2490      	movs	r4, #144	; 0x90
 8009570:	0064      	lsls	r4, r4, #1
 8009572:	193b      	adds	r3, r7, r4
 8009574:	0018      	movs	r0, r3
 8009576:	23c6      	movs	r3, #198	; 0xc6
 8009578:	001a      	movs	r2, r3
 800957a:	2100      	movs	r1, #0
 800957c:	f004 f83c 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009580:	4b43      	ldr	r3, [pc, #268]	; (8009690 <astronode_send_pld_er+0x144>)
 8009582:	199b      	adds	r3, r3, r6
 8009584:	19db      	adds	r3, r3, r7
 8009586:	0018      	movs	r0, r3
 8009588:	23c6      	movs	r3, #198	; 0xc6
 800958a:	001a      	movs	r2, r3
 800958c:	2100      	movs	r1, #0
 800958e:	f004 f833 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 8009592:	193b      	adds	r3, r7, r4
 8009594:	2225      	movs	r2, #37	; 0x25
 8009596:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8009598:	193b      	adds	r3, r7, r4
 800959a:	22c4      	movs	r2, #196	; 0xc4
 800959c:	5a9b      	ldrh	r3, [r3, r2]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	b290      	uxth	r0, r2
 80095a2:	193a      	adds	r2, r7, r4
 80095a4:	21c4      	movs	r1, #196	; 0xc4
 80095a6:	5250      	strh	r0, [r2, r1]
 80095a8:	0019      	movs	r1, r3
 80095aa:	4b37      	ldr	r3, [pc, #220]	; (8009688 <astronode_send_pld_er+0x13c>)
 80095ac:	199b      	adds	r3, r3, r6
 80095ae:	19db      	adds	r3, r3, r7
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	193b      	adds	r3, r7, r4
 80095b6:	185b      	adds	r3, r3, r1
 80095b8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80095ba:	4b33      	ldr	r3, [pc, #204]	; (8009688 <astronode_send_pld_er+0x13c>)
 80095bc:	199b      	adds	r3, r3, r6
 80095be:	19db      	adds	r3, r3, r7
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	0a1b      	lsrs	r3, r3, #8
 80095c4:	b298      	uxth	r0, r3
 80095c6:	0025      	movs	r5, r4
 80095c8:	197b      	adds	r3, r7, r5
 80095ca:	22c4      	movs	r2, #196	; 0xc4
 80095cc:	5a9b      	ldrh	r3, [r3, r2]
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	b294      	uxth	r4, r2
 80095d2:	197a      	adds	r2, r7, r5
 80095d4:	21c4      	movs	r1, #196	; 0xc4
 80095d6:	5254      	strh	r4, [r2, r1]
 80095d8:	0019      	movs	r1, r3
 80095da:	b2c2      	uxtb	r2, r0
 80095dc:	002c      	movs	r4, r5
 80095de:	193b      	adds	r3, r7, r4
 80095e0:	185b      	adds	r3, r3, r1
 80095e2:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80095e4:	193b      	adds	r3, r7, r4
 80095e6:	22c4      	movs	r2, #196	; 0xc4
 80095e8:	5a9b      	ldrh	r3, [r3, r2]
 80095ea:	001a      	movs	r2, r3
 80095ec:	193b      	adds	r3, r7, r4
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	1c58      	adds	r0, r3, #1
 80095f2:	4b26      	ldr	r3, [pc, #152]	; (800968c <astronode_send_pld_er+0x140>)
 80095f4:	199b      	adds	r3, r3, r6
 80095f6:	19db      	adds	r3, r3, r7
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	0019      	movs	r1, r3
 80095fe:	f004 f928 	bl	800d852 <memcpy>
    request.payload_len = 2 + payload_length;
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <astronode_send_pld_er+0x140>)
 8009604:	199b      	adds	r3, r3, r6
 8009606:	19db      	adds	r3, r3, r7
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	3302      	adds	r3, #2
 800960c:	b299      	uxth	r1, r3
 800960e:	193b      	adds	r3, r7, r4
 8009610:	22c4      	movs	r2, #196	; 0xc4
 8009612:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8009614:	2358      	movs	r3, #88	; 0x58
 8009616:	18fa      	adds	r2, r7, r3
 8009618:	193b      	adds	r3, r7, r4
 800961a:	0011      	movs	r1, r2
 800961c:	0018      	movs	r0, r3
 800961e:	f000 fec3 	bl	800a3a8 <astronode_transport_send_receive>
 8009622:	0003      	movs	r3, r0
 8009624:	2b01      	cmp	r3, #1
 8009626:	d12a      	bne.n	800967e <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8009628:	4b19      	ldr	r3, [pc, #100]	; (8009690 <astronode_send_pld_er+0x144>)
 800962a:	199b      	adds	r3, r3, r6
 800962c:	19db      	adds	r3, r3, r7
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2ba5      	cmp	r3, #165	; 0xa5
 8009632:	d114      	bne.n	800965e <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8009634:	4b14      	ldr	r3, [pc, #80]	; (8009688 <astronode_send_pld_er+0x13c>)
 8009636:	199b      	adds	r3, r3, r6
 8009638:	19db      	adds	r3, r3, r7
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	22ea      	movs	r2, #234	; 0xea
 800963e:	32ff      	adds	r2, #255	; 0xff
 8009640:	0014      	movs	r4, r2
 8009642:	4a14      	ldr	r2, [pc, #80]	; (8009694 <astronode_send_pld_er+0x148>)
 8009644:	4914      	ldr	r1, [pc, #80]	; (8009698 <astronode_send_pld_er+0x14c>)
 8009646:	2508      	movs	r5, #8
 8009648:	1978      	adds	r0, r7, r5
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	0023      	movs	r3, r4
 800964e:	f003 ff3d 	bl	800d4cc <sprintf>
            send_debug_logs ( s ) ;
 8009652:	197b      	adds	r3, r7, r5
 8009654:	0018      	movs	r0, r3
 8009656:	f7f9 fd2f 	bl	80030b8 <send_debug_logs>
            return true ;
 800965a:	2301      	movs	r3, #1
 800965c:	e010      	b.n	8009680 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800965e:	4b0a      	ldr	r3, [pc, #40]	; (8009688 <astronode_send_pld_er+0x13c>)
 8009660:	22f4      	movs	r2, #244	; 0xf4
 8009662:	0052      	lsls	r2, r2, #1
 8009664:	189b      	adds	r3, r3, r2
 8009666:	19db      	adds	r3, r3, r7
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	490c      	ldr	r1, [pc, #48]	; (800969c <astronode_send_pld_er+0x150>)
 800966c:	2408      	movs	r4, #8
 800966e:	193b      	adds	r3, r7, r4
 8009670:	0018      	movs	r0, r3
 8009672:	f003 ff2b 	bl	800d4cc <sprintf>
            send_debug_logs ( s ) ;
 8009676:	193b      	adds	r3, r7, r4
 8009678:	0018      	movs	r0, r3
 800967a:	f7f9 fd1d 	bl	80030b8 <send_debug_logs>
        }
    }
    return false ;
 800967e:	2300      	movs	r3, #0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b07b      	add	sp, #492	; 0x1ec
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009688:	fffffe1e 	.word	0xfffffe1e
 800968c:	fffffe1c 	.word	0xfffffe1c
 8009690:	fffffe70 	.word	0xfffffe70
 8009694:	08014a18 	.word	0x08014a18
 8009698:	08014a44 	.word	0x08014a44
 800969c:	08014a60 	.word	0x08014a60

080096a0 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80096a0:	b5b0      	push	{r4, r5, r7, lr}
 80096a2:	b0e4      	sub	sp, #400	; 0x190
 80096a4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80096a6:	24c8      	movs	r4, #200	; 0xc8
 80096a8:	193b      	adds	r3, r7, r4
 80096aa:	0018      	movs	r0, r3
 80096ac:	23c6      	movs	r3, #198	; 0xc6
 80096ae:	001a      	movs	r2, r3
 80096b0:	2100      	movs	r1, #0
 80096b2:	f003 ffa1 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 80096b6:	4b15      	ldr	r3, [pc, #84]	; (800970c <astronode_send_pld_fr+0x6c>)
 80096b8:	25c8      	movs	r5, #200	; 0xc8
 80096ba:	006d      	lsls	r5, r5, #1
 80096bc:	195b      	adds	r3, r3, r5
 80096be:	19db      	adds	r3, r3, r7
 80096c0:	0018      	movs	r0, r3
 80096c2:	23c6      	movs	r3, #198	; 0xc6
 80096c4:	001a      	movs	r2, r3
 80096c6:	2100      	movs	r1, #0
 80096c8:	f003 ff96 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80096cc:	193b      	adds	r3, r7, r4
 80096ce:	2227      	movs	r2, #39	; 0x27
 80096d0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80096d2:	003a      	movs	r2, r7
 80096d4:	193b      	adds	r3, r7, r4
 80096d6:	0011      	movs	r1, r2
 80096d8:	0018      	movs	r0, r3
 80096da:	f000 fe65 	bl	800a3a8 <astronode_transport_send_receive>
 80096de:	0003      	movs	r3, r0
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d10e      	bne.n	8009702 <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <astronode_send_pld_fr+0x6c>)
 80096e6:	195b      	adds	r3, r3, r5
 80096e8:	19db      	adds	r3, r3, r7
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2ba7      	cmp	r3, #167	; 0xa7
 80096ee:	d104      	bne.n	80096fa <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <astronode_send_pld_fr+0x70>)
 80096f2:	0018      	movs	r0, r3
 80096f4:	f7f9 fce0 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80096f8:	e003      	b.n	8009702 <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <astronode_send_pld_fr+0x74>)
 80096fc:	0018      	movs	r0, r3
 80096fe:	f7f9 fcdb 	bl	80030b8 <send_debug_logs>
}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	46bd      	mov	sp, r7
 8009706:	b064      	add	sp, #400	; 0x190
 8009708:	bdb0      	pop	{r4, r5, r7, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	fffffe70 	.word	0xfffffe70
 8009710:	08014a90 	.word	0x08014a90
 8009714:	08014ac8 	.word	0x08014ac8

08009718 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8009718:	b5b0      	push	{r4, r5, r7, lr}
 800971a:	b0e4      	sub	sp, #400	; 0x190
 800971c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800971e:	24c8      	movs	r4, #200	; 0xc8
 8009720:	193b      	adds	r3, r7, r4
 8009722:	0018      	movs	r0, r3
 8009724:	23c6      	movs	r3, #198	; 0xc6
 8009726:	001a      	movs	r2, r3
 8009728:	2100      	movs	r1, #0
 800972a:	f003 ff65 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 800972e:	4b16      	ldr	r3, [pc, #88]	; (8009788 <astronode_send_res_cr+0x70>)
 8009730:	25c8      	movs	r5, #200	; 0xc8
 8009732:	006d      	lsls	r5, r5, #1
 8009734:	195b      	adds	r3, r3, r5
 8009736:	19db      	adds	r3, r3, r7
 8009738:	0018      	movs	r0, r3
 800973a:	23c6      	movs	r3, #198	; 0xc6
 800973c:	001a      	movs	r2, r3
 800973e:	2100      	movs	r1, #0
 8009740:	f003 ff5a 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8009744:	193b      	adds	r3, r7, r4
 8009746:	2255      	movs	r2, #85	; 0x55
 8009748:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800974a:	003a      	movs	r2, r7
 800974c:	193b      	adds	r3, r7, r4
 800974e:	0011      	movs	r1, r2
 8009750:	0018      	movs	r0, r3
 8009752:	f000 fe29 	bl	800a3a8 <astronode_transport_send_receive>
 8009756:	0003      	movs	r3, r0
 8009758:	2b01      	cmp	r3, #1
 800975a:	d111      	bne.n	8009780 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <astronode_send_res_cr+0x70>)
 800975e:	195b      	adds	r3, r3, r5
 8009760:	19db      	adds	r3, r3, r7
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2bd5      	cmp	r3, #213	; 0xd5
 8009766:	d107      	bne.n	8009778 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <astronode_send_res_cr+0x74>)
 800976a:	2200      	movs	r2, #0
 800976c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800976e:	4b08      	ldr	r3, [pc, #32]	; (8009790 <astronode_send_res_cr+0x78>)
 8009770:	0018      	movs	r0, r3
 8009772:	f7f9 fca1 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8009776:	e003      	b.n	8009780 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <astronode_send_res_cr+0x7c>)
 800977a:	0018      	movs	r0, r3
 800977c:	f7f9 fc9c 	bl	80030b8 <send_debug_logs>
}
 8009780:	46c0      	nop			; (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	b064      	add	sp, #400	; 0x190
 8009786:	bdb0      	pop	{r4, r5, r7, pc}
 8009788:	fffffe70 	.word	0xfffffe70
 800978c:	20000b29 	.word	0x20000b29
 8009790:	08014b04 	.word	0x08014b04
 8009794:	08014b38 	.word	0x08014b38

08009798 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8009798:	b5b0      	push	{r4, r5, r7, lr}
 800979a:	b0fa      	sub	sp, #488	; 0x1e8
 800979c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800979e:	258e      	movs	r5, #142	; 0x8e
 80097a0:	006d      	lsls	r5, r5, #1
 80097a2:	197b      	adds	r3, r7, r5
 80097a4:	0018      	movs	r0, r3
 80097a6:	23c6      	movs	r3, #198	; 0xc6
 80097a8:	001a      	movs	r2, r3
 80097aa:	2100      	movs	r1, #0
 80097ac:	f003 ff24 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0} ;
 80097b0:	4b28      	ldr	r3, [pc, #160]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 80097b2:	24f4      	movs	r4, #244	; 0xf4
 80097b4:	0064      	lsls	r4, r4, #1
 80097b6:	191b      	adds	r3, r3, r4
 80097b8:	19db      	adds	r3, r3, r7
 80097ba:	0018      	movs	r0, r3
 80097bc:	23c6      	movs	r3, #198	; 0xc6
 80097be:	001a      	movs	r2, r3
 80097c0:	2100      	movs	r1, #0
 80097c2:	f003 ff19 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80097c6:	197b      	adds	r3, r7, r5
 80097c8:	2217      	movs	r2, #23
 80097ca:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80097cc:	2354      	movs	r3, #84	; 0x54
 80097ce:	18fa      	adds	r2, r7, r3
 80097d0:	197b      	adds	r3, r7, r5
 80097d2:	0011      	movs	r1, r2
 80097d4:	0018      	movs	r0, r3
 80097d6:	f000 fde7 	bl	800a3a8 <astronode_transport_send_receive>
 80097da:	0003      	movs	r3, r0
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d133      	bne.n	8009848 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80097e0:	4b1c      	ldr	r3, [pc, #112]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 80097e2:	0021      	movs	r1, r4
 80097e4:	185b      	adds	r3, r3, r1
 80097e6:	19db      	adds	r3, r3, r7
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b97      	cmp	r3, #151	; 0x97
 80097ec:	d128      	bne.n	8009840 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80097ee:	4b19      	ldr	r3, [pc, #100]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 80097f0:	185b      	adds	r3, r3, r1
 80097f2:	19db      	adds	r3, r3, r7
 80097f4:	785b      	ldrb	r3, [r3, #1]
 80097f6:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80097f8:	4b16      	ldr	r3, [pc, #88]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 80097fa:	185b      	adds	r3, r3, r1
 80097fc:	19db      	adds	r3, r3, r7
 80097fe:	789b      	ldrb	r3, [r3, #2]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8009804:	4b13      	ldr	r3, [pc, #76]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 8009806:	185b      	adds	r3, r3, r1
 8009808:	19db      	adds	r3, r3, r7
 800980a:	78db      	ldrb	r3, [r3, #3]
 800980c:	041b      	lsls	r3, r3, #16
 800980e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8009810:	4b10      	ldr	r3, [pc, #64]	; (8009854 <astronode_send_rtc_rr+0xbc>)
 8009812:	185b      	adds	r3, r3, r1
 8009814:	19db      	adds	r3, r3, r7
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	061b      	lsls	r3, r3, #24
 800981a:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 800981c:	24f2      	movs	r4, #242	; 0xf2
 800981e:	0064      	lsls	r4, r4, #1
 8009820:	193a      	adds	r2, r7, r4
 8009822:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8009824:	193b      	adds	r3, r7, r4
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	490b      	ldr	r1, [pc, #44]	; (8009858 <astronode_send_rtc_rr+0xc0>)
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	0018      	movs	r0, r3
 800982e:	f003 fe4d 	bl	800d4cc <sprintf>
            send_debug_logs ( str ) ;
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	0018      	movs	r0, r3
 8009836:	f7f9 fc3f 	bl	80030b8 <send_debug_logs>
            return rtc_time ;
 800983a:	193b      	adds	r3, r7, r4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	e004      	b.n	800984a <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <astronode_send_rtc_rr+0xc4>)
 8009842:	0018      	movs	r0, r3
 8009844:	f7f9 fc38 	bl	80030b8 <send_debug_logs>
        }
    }
    return 0 ;
 8009848:	2300      	movs	r3, #0
}
 800984a:	0018      	movs	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	b07a      	add	sp, #488	; 0x1e8
 8009850:	bdb0      	pop	{r4, r5, r7, pc}
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	fffffe6c 	.word	0xfffffe6c
 8009858:	08014b64 	.word	0x08014b64
 800985c:	08014ba4 	.word	0x08014ba4

08009860 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8009860:	b5b0      	push	{r4, r5, r7, lr}
 8009862:	b0f8      	sub	sp, #480	; 0x1e0
 8009864:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009866:	258c      	movs	r5, #140	; 0x8c
 8009868:	006d      	lsls	r5, r5, #1
 800986a:	197b      	adds	r3, r7, r5
 800986c:	0018      	movs	r0, r3
 800986e:	23c6      	movs	r3, #198	; 0xc6
 8009870:	001a      	movs	r2, r3
 8009872:	2100      	movs	r1, #0
 8009874:	f003 fec0 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009878:	4b21      	ldr	r3, [pc, #132]	; (8009900 <astronode_send_sak_rr+0xa0>)
 800987a:	24f0      	movs	r4, #240	; 0xf0
 800987c:	0064      	lsls	r4, r4, #1
 800987e:	191b      	adds	r3, r3, r4
 8009880:	19db      	adds	r3, r3, r7
 8009882:	0018      	movs	r0, r3
 8009884:	23c6      	movs	r3, #198	; 0xc6
 8009886:	001a      	movs	r2, r3
 8009888:	2100      	movs	r1, #0
 800988a:	f003 feb5 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800988e:	197b      	adds	r3, r7, r5
 8009890:	2245      	movs	r2, #69	; 0x45
 8009892:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009894:	2350      	movs	r3, #80	; 0x50
 8009896:	18fa      	adds	r2, r7, r3
 8009898:	197b      	adds	r3, r7, r5
 800989a:	0011      	movs	r1, r2
 800989c:	0018      	movs	r0, r3
 800989e:	f000 fd83 	bl	800a3a8 <astronode_transport_send_receive>
 80098a2:	0003      	movs	r3, r0
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d126      	bne.n	80098f6 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80098a8:	4b15      	ldr	r3, [pc, #84]	; (8009900 <astronode_send_sak_rr+0xa0>)
 80098aa:	191b      	adds	r3, r3, r4
 80098ac:	19db      	adds	r3, r3, r7
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2bc5      	cmp	r3, #197	; 0xc5
 80098b2:	d11c      	bne.n	80098ee <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80098b4:	4b12      	ldr	r3, [pc, #72]	; (8009900 <astronode_send_sak_rr+0xa0>)
 80098b6:	191b      	adds	r3, r3, r4
 80098b8:	19db      	adds	r3, r3, r7
 80098ba:	785b      	ldrb	r3, [r3, #1]
 80098bc:	b299      	uxth	r1, r3
 80098be:	4b10      	ldr	r3, [pc, #64]	; (8009900 <astronode_send_sak_rr+0xa0>)
 80098c0:	191b      	adds	r3, r3, r4
 80098c2:	19db      	adds	r3, r3, r7
 80098c4:	789b      	ldrb	r3, [r3, #2]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	021b      	lsls	r3, r3, #8
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	20ef      	movs	r0, #239	; 0xef
 80098ce:	0040      	lsls	r0, r0, #1
 80098d0:	183b      	adds	r3, r7, r0
 80098d2:	188a      	adds	r2, r1, r2
 80098d4:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80098d6:	183b      	adds	r3, r7, r0
 80098d8:	881a      	ldrh	r2, [r3, #0]
 80098da:	490a      	ldr	r1, [pc, #40]	; (8009904 <astronode_send_sak_rr+0xa4>)
 80098dc:	003b      	movs	r3, r7
 80098de:	0018      	movs	r0, r3
 80098e0:	f003 fdf4 	bl	800d4cc <sprintf>
            send_debug_logs(str);
 80098e4:	003b      	movs	r3, r7
 80098e6:	0018      	movs	r0, r3
 80098e8:	f7f9 fbe6 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80098ec:	e003      	b.n	80098f6 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80098ee:	4b06      	ldr	r3, [pc, #24]	; (8009908 <astronode_send_sak_rr+0xa8>)
 80098f0:	0018      	movs	r0, r3
 80098f2:	f7f9 fbe1 	bl	80030b8 <send_debug_logs>
}
 80098f6:	46c0      	nop			; (mov r8, r8)
 80098f8:	46bd      	mov	sp, r7
 80098fa:	b078      	add	sp, #480	; 0x1e0
 80098fc:	bdb0      	pop	{r4, r5, r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	fffffe70 	.word	0xfffffe70
 8009904:	08014bc0 	.word	0x08014bc0
 8009908:	08014bec 	.word	0x08014bec

0800990c <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 800990c:	b5b0      	push	{r4, r5, r7, lr}
 800990e:	b0e4      	sub	sp, #400	; 0x190
 8009910:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009912:	24c8      	movs	r4, #200	; 0xc8
 8009914:	193b      	adds	r3, r7, r4
 8009916:	0018      	movs	r0, r3
 8009918:	23c6      	movs	r3, #198	; 0xc6
 800991a:	001a      	movs	r2, r3
 800991c:	2100      	movs	r1, #0
 800991e:	f003 fe6b 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009922:	4b16      	ldr	r3, [pc, #88]	; (800997c <astronode_send_sak_cr+0x70>)
 8009924:	25c8      	movs	r5, #200	; 0xc8
 8009926:	006d      	lsls	r5, r5, #1
 8009928:	195b      	adds	r3, r3, r5
 800992a:	19db      	adds	r3, r3, r7
 800992c:	0018      	movs	r0, r3
 800992e:	23c6      	movs	r3, #198	; 0xc6
 8009930:	001a      	movs	r2, r3
 8009932:	2100      	movs	r1, #0
 8009934:	f003 fe60 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8009938:	193b      	adds	r3, r7, r4
 800993a:	2246      	movs	r2, #70	; 0x46
 800993c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800993e:	003a      	movs	r2, r7
 8009940:	193b      	adds	r3, r7, r4
 8009942:	0011      	movs	r1, r2
 8009944:	0018      	movs	r0, r3
 8009946:	f000 fd2f 	bl	800a3a8 <astronode_transport_send_receive>
 800994a:	0003      	movs	r3, r0
 800994c:	2b01      	cmp	r3, #1
 800994e:	d111      	bne.n	8009974 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8009950:	4b0a      	ldr	r3, [pc, #40]	; (800997c <astronode_send_sak_cr+0x70>)
 8009952:	195b      	adds	r3, r3, r5
 8009954:	19db      	adds	r3, r3, r7
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2bc6      	cmp	r3, #198	; 0xc6
 800995a:	d107      	bne.n	800996c <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 800995c:	4b08      	ldr	r3, [pc, #32]	; (8009980 <astronode_send_sak_cr+0x74>)
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8009962:	4b08      	ldr	r3, [pc, #32]	; (8009984 <astronode_send_sak_cr+0x78>)
 8009964:	0018      	movs	r0, r3
 8009966:	f7f9 fba7 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 800996a:	e003      	b.n	8009974 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <astronode_send_sak_cr+0x7c>)
 800996e:	0018      	movs	r0, r3
 8009970:	f7f9 fba2 	bl	80030b8 <send_debug_logs>
}
 8009974:	46c0      	nop			; (mov r8, r8)
 8009976:	46bd      	mov	sp, r7
 8009978:	b064      	add	sp, #400	; 0x190
 800997a:	bdb0      	pop	{r4, r5, r7, pc}
 800997c:	fffffe70 	.word	0xfffffe70
 8009980:	20000b28 	.word	0x20000b28
 8009984:	08014c20 	.word	0x08014c20
 8009988:	08014c48 	.word	0x08014c48

0800998c <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 800998c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998e:	b0ed      	sub	sp, #436	; 0x1b4
 8009990:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009992:	21c8      	movs	r1, #200	; 0xc8
 8009994:	2318      	movs	r3, #24
 8009996:	18cb      	adds	r3, r1, r3
 8009998:	19db      	adds	r3, r3, r7
 800999a:	0018      	movs	r0, r3
 800999c:	23c6      	movs	r3, #198	; 0xc6
 800999e:	001a      	movs	r2, r3
 80099a0:	2100      	movs	r1, #0
 80099a2:	f003 fe29 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 80099a6:	4b4a      	ldr	r3, [pc, #296]	; (8009ad0 <astronode_send_mpn_rr+0x144>)
 80099a8:	26cc      	movs	r6, #204	; 0xcc
 80099aa:	0076      	lsls	r6, r6, #1
 80099ac:	199b      	adds	r3, r3, r6
 80099ae:	2218      	movs	r2, #24
 80099b0:	4694      	mov	ip, r2
 80099b2:	44bc      	add	ip, r7
 80099b4:	4463      	add	r3, ip
 80099b6:	0018      	movs	r0, r3
 80099b8:	23c6      	movs	r3, #198	; 0xc6
 80099ba:	001a      	movs	r2, r3
 80099bc:	2100      	movs	r1, #0
 80099be:	f003 fe1b 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80099c2:	21c8      	movs	r1, #200	; 0xc8
 80099c4:	2318      	movs	r3, #24
 80099c6:	18cb      	adds	r3, r1, r3
 80099c8:	19db      	adds	r3, r3, r7
 80099ca:	221b      	movs	r2, #27
 80099cc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80099ce:	2318      	movs	r3, #24
 80099d0:	18fa      	adds	r2, r7, r3
 80099d2:	2318      	movs	r3, #24
 80099d4:	18cb      	adds	r3, r1, r3
 80099d6:	19db      	adds	r3, r3, r7
 80099d8:	0011      	movs	r1, r2
 80099da:	0018      	movs	r0, r3
 80099dc:	f000 fce4 	bl	800a3a8 <astronode_transport_send_receive>
 80099e0:	0003      	movs	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d16f      	bne.n	8009ac6 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80099e6:	4b3a      	ldr	r3, [pc, #232]	; (8009ad0 <astronode_send_mpn_rr+0x144>)
 80099e8:	0032      	movs	r2, r6
 80099ea:	189b      	adds	r3, r3, r2
 80099ec:	2118      	movs	r1, #24
 80099ee:	468c      	mov	ip, r1
 80099f0:	44bc      	add	ip, r7
 80099f2:	4463      	add	r3, ip
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b9b      	cmp	r3, #155	; 0x9b
 80099f8:	d161      	bne.n	8009abe <astronode_send_mpn_rr+0x132>
        {
 80099fa:	466b      	mov	r3, sp
 80099fc:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 80099fe:	4b34      	ldr	r3, [pc, #208]	; (8009ad0 <astronode_send_mpn_rr+0x144>)
 8009a00:	189b      	adds	r3, r3, r2
 8009a02:	2218      	movs	r2, #24
 8009a04:	4694      	mov	ip, r2
 8009a06:	44bc      	add	ip, r7
 8009a08:	4463      	add	r3, ip
 8009a0a:	22c4      	movs	r2, #196	; 0xc4
 8009a0c:	5a9b      	ldrh	r3, [r3, r2]
 8009a0e:	001a      	movs	r2, r3
 8009a10:	3a01      	subs	r2, #1
 8009a12:	21ca      	movs	r1, #202	; 0xca
 8009a14:	0049      	lsls	r1, r1, #1
 8009a16:	2018      	movs	r0, #24
 8009a18:	1809      	adds	r1, r1, r0
 8009a1a:	19c9      	adds	r1, r1, r7
 8009a1c:	600a      	str	r2, [r1, #0]
 8009a1e:	001c      	movs	r4, r3
 8009a20:	2200      	movs	r2, #0
 8009a22:	0015      	movs	r5, r2
 8009a24:	0020      	movs	r0, r4
 8009a26:	0029      	movs	r1, r5
 8009a28:	0004      	movs	r4, r0
 8009a2a:	0f62      	lsrs	r2, r4, #29
 8009a2c:	000c      	movs	r4, r1
 8009a2e:	00e4      	lsls	r4, r4, #3
 8009a30:	617c      	str	r4, [r7, #20]
 8009a32:	697c      	ldr	r4, [r7, #20]
 8009a34:	4314      	orrs	r4, r2
 8009a36:	617c      	str	r4, [r7, #20]
 8009a38:	0001      	movs	r1, r0
 8009a3a:	00c9      	lsls	r1, r1, #3
 8009a3c:	6139      	str	r1, [r7, #16]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	2200      	movs	r2, #0
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	6838      	ldr	r0, [r7, #0]
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	0004      	movs	r4, r0
 8009a4a:	0f62      	lsrs	r2, r4, #29
 8009a4c:	000c      	movs	r4, r1
 8009a4e:	00e4      	lsls	r4, r4, #3
 8009a50:	60fc      	str	r4, [r7, #12]
 8009a52:	68fc      	ldr	r4, [r7, #12]
 8009a54:	4314      	orrs	r4, r2
 8009a56:	60fc      	str	r4, [r7, #12]
 8009a58:	0001      	movs	r1, r0
 8009a5a:	00ca      	lsls	r2, r1, #3
 8009a5c:	60ba      	str	r2, [r7, #8]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	08db      	lsrs	r3, r3, #3
 8009a62:	00db      	lsls	r3, r3, #3
 8009a64:	4669      	mov	r1, sp
 8009a66:	1acb      	subs	r3, r1, r3
 8009a68:	469d      	mov	sp, r3
 8009a6a:	466b      	mov	r3, sp
 8009a6c:	3300      	adds	r3, #0
 8009a6e:	24c8      	movs	r4, #200	; 0xc8
 8009a70:	0064      	lsls	r4, r4, #1
 8009a72:	2218      	movs	r2, #24
 8009a74:	18a2      	adds	r2, r4, r2
 8009a76:	19d1      	adds	r1, r2, r7
 8009a78:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8009a7a:	4b16      	ldr	r3, [pc, #88]	; (8009ad4 <astronode_send_mpn_rr+0x148>)
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f7f9 fb1b 	bl	80030b8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <astronode_send_mpn_rr+0x144>)
 8009a84:	22cc      	movs	r2, #204	; 0xcc
 8009a86:	0052      	lsls	r2, r2, #1
 8009a88:	189b      	adds	r3, r3, r2
 8009a8a:	2218      	movs	r2, #24
 8009a8c:	4694      	mov	ip, r2
 8009a8e:	44bc      	add	ip, r7
 8009a90:	4463      	add	r3, ip
 8009a92:	22c4      	movs	r2, #196	; 0xc4
 8009a94:	5a9b      	ldrh	r3, [r3, r2]
 8009a96:	0019      	movs	r1, r3
 8009a98:	2318      	movs	r3, #24
 8009a9a:	18fb      	adds	r3, r7, r3
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	4a0e      	ldr	r2, [pc, #56]	; (8009ad8 <astronode_send_mpn_rr+0x14c>)
 8009aa0:	2018      	movs	r0, #24
 8009aa2:	1820      	adds	r0, r4, r0
 8009aa4:	19c0      	adds	r0, r0, r7
 8009aa6:	6800      	ldr	r0, [r0, #0]
 8009aa8:	f003 fcdc 	bl	800d464 <snprintf>
            send_debug_logs(product_number);
 8009aac:	2318      	movs	r3, #24
 8009aae:	18e3      	adds	r3, r4, r3
 8009ab0:	19db      	adds	r3, r3, r7
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7f9 faff 	bl	80030b8 <send_debug_logs>
 8009aba:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8009abc:	e003      	b.n	8009ac6 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8009abe:	4b07      	ldr	r3, [pc, #28]	; (8009adc <astronode_send_mpn_rr+0x150>)
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7f9 faf9 	bl	80030b8 <send_debug_logs>
}
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b06d      	add	sp, #436	; 0x1b4
 8009acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	fffffe68 	.word	0xfffffe68
 8009ad4:	08014d10 	.word	0x08014d10
 8009ad8:	0801482c 	.word	0x0801482c
 8009adc:	08014868 	.word	0x08014868

08009ae0 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8009ae0:	b5b0      	push	{r4, r5, r7, lr}
 8009ae2:	b0e4      	sub	sp, #400	; 0x190
 8009ae4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009ae6:	24c8      	movs	r4, #200	; 0xc8
 8009ae8:	193b      	adds	r3, r7, r4
 8009aea:	0018      	movs	r0, r3
 8009aec:	23c6      	movs	r3, #198	; 0xc6
 8009aee:	001a      	movs	r2, r3
 8009af0:	2100      	movs	r1, #0
 8009af2:	f003 fd81 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009af6:	4b16      	ldr	r3, [pc, #88]	; (8009b50 <astronode_send_cmd_cr+0x70>)
 8009af8:	25c8      	movs	r5, #200	; 0xc8
 8009afa:	006d      	lsls	r5, r5, #1
 8009afc:	195b      	adds	r3, r3, r5
 8009afe:	19db      	adds	r3, r3, r7
 8009b00:	0018      	movs	r0, r3
 8009b02:	23c6      	movs	r3, #198	; 0xc6
 8009b04:	001a      	movs	r2, r3
 8009b06:	2100      	movs	r1, #0
 8009b08:	f003 fd76 	bl	800d5f8 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8009b0c:	193b      	adds	r3, r7, r4
 8009b0e:	2248      	movs	r2, #72	; 0x48
 8009b10:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009b12:	003a      	movs	r2, r7
 8009b14:	193b      	adds	r3, r7, r4
 8009b16:	0011      	movs	r1, r2
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f000 fc45 	bl	800a3a8 <astronode_transport_send_receive>
 8009b1e:	0003      	movs	r3, r0
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d111      	bne.n	8009b48 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8009b24:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <astronode_send_cmd_cr+0x70>)
 8009b26:	195b      	adds	r3, r3, r5
 8009b28:	19db      	adds	r3, r3, r7
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2bc8      	cmp	r3, #200	; 0xc8
 8009b2e:	d107      	bne.n	8009b40 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <astronode_send_cmd_cr+0x74>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <astronode_send_cmd_cr+0x78>)
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7f9 fabd 	bl	80030b8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8009b3e:	e003      	b.n	8009b48 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8009b40:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <astronode_send_cmd_cr+0x7c>)
 8009b42:	0018      	movs	r0, r3
 8009b44:	f7f9 fab8 	bl	80030b8 <send_debug_logs>
}
 8009b48:	46c0      	nop			; (mov r8, r8)
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	b064      	add	sp, #400	; 0x190
 8009b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8009b50:	fffffe70 	.word	0xfffffe70
 8009b54:	20000b2a 	.word	0x20000b2a
 8009b58:	08015160 	.word	0x08015160
 8009b5c:	08015184 	.word	0x08015184

08009b60 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	4cc6      	ldr	r4, [pc, #792]	; (8009e7c <astronode_send_cmd_rr+0x31c>)
 8009b64:	44a5      	add	sp, r4
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8009b6a:	2190      	movs	r1, #144	; 0x90
 8009b6c:	0049      	lsls	r1, r1, #1
 8009b6e:	2318      	movs	r3, #24
 8009b70:	18cb      	adds	r3, r1, r3
 8009b72:	19db      	adds	r3, r3, r7
 8009b74:	0018      	movs	r0, r3
 8009b76:	23c6      	movs	r3, #198	; 0xc6
 8009b78:	001a      	movs	r2, r3
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	f003 fd3c 	bl	800d5f8 <memset>
    astronode_app_msg_t answer = {0};
 8009b80:	4bbf      	ldr	r3, [pc, #764]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009b82:	26fc      	movs	r6, #252	; 0xfc
 8009b84:	0076      	lsls	r6, r6, #1
 8009b86:	199b      	adds	r3, r3, r6
 8009b88:	2218      	movs	r2, #24
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	44bc      	add	ip, r7
 8009b8e:	4463      	add	r3, ip
 8009b90:	0018      	movs	r0, r3
 8009b92:	23c6      	movs	r3, #198	; 0xc6
 8009b94:	001a      	movs	r2, r3
 8009b96:	2100      	movs	r1, #0
 8009b98:	f003 fd2e 	bl	800d5f8 <memset>
    bool result = false ;
 8009b9c:	23f8      	movs	r3, #248	; 0xf8
 8009b9e:	33ff      	adds	r3, #255	; 0xff
 8009ba0:	2218      	movs	r2, #24
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	19db      	adds	r3, r3, r7
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8009baa:	2190      	movs	r1, #144	; 0x90
 8009bac:	0049      	lsls	r1, r1, #1
 8009bae:	2318      	movs	r3, #24
 8009bb0:	18cb      	adds	r3, r1, r3
 8009bb2:	19db      	adds	r3, r3, r7
 8009bb4:	2247      	movs	r2, #71	; 0x47
 8009bb6:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009bb8:	2258      	movs	r2, #88	; 0x58
 8009bba:	2318      	movs	r3, #24
 8009bbc:	18d3      	adds	r3, r2, r3
 8009bbe:	19da      	adds	r2, r3, r7
 8009bc0:	2318      	movs	r3, #24
 8009bc2:	18cb      	adds	r3, r1, r3
 8009bc4:	19db      	adds	r3, r3, r7
 8009bc6:	0011      	movs	r1, r2
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f000 fbed 	bl	800a3a8 <astronode_transport_send_receive>
 8009bce:	0003      	movs	r3, r0
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d000      	beq.n	8009bd6 <astronode_send_cmd_rr+0x76>
 8009bd4:	e146      	b.n	8009e64 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8009bd6:	4baa      	ldr	r3, [pc, #680]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009bd8:	199a      	adds	r2, r3, r6
 8009bda:	2318      	movs	r3, #24
 8009bdc:	18fb      	adds	r3, r7, r3
 8009bde:	18d3      	adds	r3, r2, r3
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2bc7      	cmp	r3, #199	; 0xc7
 8009be4:	d000      	beq.n	8009be8 <astronode_send_cmd_rr+0x88>
 8009be6:	e139      	b.n	8009e5c <astronode_send_cmd_rr+0x2fc>
        {
 8009be8:	466b      	mov	r3, sp
 8009bea:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8009bec:	4ba5      	ldr	r3, [pc, #660]	; (8009e84 <astronode_send_cmd_rr+0x324>)
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f7f9 fa62 	bl	80030b8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8009bf4:	4ba2      	ldr	r3, [pc, #648]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009bf6:	21fc      	movs	r1, #252	; 0xfc
 8009bf8:	0049      	lsls	r1, r1, #1
 8009bfa:	185a      	adds	r2, r3, r1
 8009bfc:	2318      	movs	r3, #24
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	18d3      	adds	r3, r2, r3
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8009c06:	4b9e      	ldr	r3, [pc, #632]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009c08:	1858      	adds	r0, r3, r1
 8009c0a:	2318      	movs	r3, #24
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	18c3      	adds	r3, r0, r3
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8009c16:	4b9a      	ldr	r3, [pc, #616]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009c18:	1858      	adds	r0, r3, r1
 8009c1a:	2318      	movs	r3, #24
 8009c1c:	18fb      	adds	r3, r7, r3
 8009c1e:	18c3      	adds	r3, r0, r3
 8009c20:	78db      	ldrb	r3, [r3, #3]
 8009c22:	041b      	lsls	r3, r3, #16
 8009c24:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8009c26:	4b96      	ldr	r3, [pc, #600]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009c28:	1858      	adds	r0, r3, r1
 8009c2a:	2318      	movs	r3, #24
 8009c2c:	18fb      	adds	r3, r7, r3
 8009c2e:	18c3      	adds	r3, r0, r3
 8009c30:	791b      	ldrb	r3, [r3, #4]
 8009c32:	061b      	lsls	r3, r3, #24
 8009c34:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009c36:	22f8      	movs	r2, #248	; 0xf8
 8009c38:	0052      	lsls	r2, r2, #1
 8009c3a:	2118      	movs	r1, #24
 8009c3c:	1851      	adds	r1, r2, r1
 8009c3e:	19c8      	adds	r0, r1, r7
 8009c40:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8009c42:	2318      	movs	r3, #24
 8009c44:	18d3      	adds	r3, r2, r3
 8009c46:	19da      	adds	r2, r3, r7
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	498f      	ldr	r1, [pc, #572]	; (8009e88 <astronode_send_cmd_rr+0x328>)
 8009c4c:	2008      	movs	r0, #8
 8009c4e:	2318      	movs	r3, #24
 8009c50:	18c3      	adds	r3, r0, r3
 8009c52:	19db      	adds	r3, r3, r7
 8009c54:	0018      	movs	r0, r3
 8009c56:	f003 fc39 	bl	800d4cc <sprintf>
            send_debug_logs(str);
 8009c5a:	2008      	movs	r0, #8
 8009c5c:	2318      	movs	r3, #24
 8009c5e:	18c3      	adds	r3, r0, r3
 8009c60:	19db      	adds	r3, r3, r7
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7f9 fa28 	bl	80030b8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8009c68:	4b85      	ldr	r3, [pc, #532]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009c6a:	21fc      	movs	r1, #252	; 0xfc
 8009c6c:	0049      	lsls	r1, r1, #1
 8009c6e:	185a      	adds	r2, r3, r1
 8009c70:	2318      	movs	r3, #24
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	18d3      	adds	r3, r2, r3
 8009c76:	22c4      	movs	r2, #196	; 0xc4
 8009c78:	5a9b      	ldrh	r3, [r3, r2]
 8009c7a:	2b2c      	cmp	r3, #44	; 0x2c
 8009c7c:	d013      	beq.n	8009ca6 <astronode_send_cmd_rr+0x146>
 8009c7e:	4b80      	ldr	r3, [pc, #512]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009c80:	185a      	adds	r2, r3, r1
 8009c82:	2318      	movs	r3, #24
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	18d3      	adds	r3, r2, r3
 8009c88:	22c4      	movs	r2, #196	; 0xc4
 8009c8a:	5a9b      	ldrh	r3, [r3, r2]
 8009c8c:	2b0c      	cmp	r3, #12
 8009c8e:	d00a      	beq.n	8009ca6 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8009c90:	4b7e      	ldr	r3, [pc, #504]	; (8009e8c <astronode_send_cmd_rr+0x32c>)
 8009c92:	0018      	movs	r0, r3
 8009c94:	f7f9 fa10 	bl	80030b8 <send_debug_logs>
                return result ;
 8009c98:	23f8      	movs	r3, #248	; 0xf8
 8009c9a:	33ff      	adds	r3, #255	; 0xff
 8009c9c:	2218      	movs	r2, #24
 8009c9e:	189b      	adds	r3, r3, r2
 8009ca0:	19db      	adds	r3, r3, r7
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	e0d8      	b.n	8009e58 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8009ca6:	4b76      	ldr	r3, [pc, #472]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009ca8:	22fc      	movs	r2, #252	; 0xfc
 8009caa:	0052      	lsls	r2, r2, #1
 8009cac:	189b      	adds	r3, r3, r2
 8009cae:	2218      	movs	r2, #24
 8009cb0:	4694      	mov	ip, r2
 8009cb2:	44bc      	add	ip, r7
 8009cb4:	4463      	add	r3, ip
 8009cb6:	22c4      	movs	r2, #196	; 0xc4
 8009cb8:	5a9b      	ldrh	r3, [r3, r2]
 8009cba:	001a      	movs	r2, r3
 8009cbc:	3a01      	subs	r2, #1
 8009cbe:	21f6      	movs	r1, #246	; 0xf6
 8009cc0:	0049      	lsls	r1, r1, #1
 8009cc2:	2018      	movs	r0, #24
 8009cc4:	1809      	adds	r1, r1, r0
 8009cc6:	19c9      	adds	r1, r1, r7
 8009cc8:	600a      	str	r2, [r1, #0]
 8009cca:	001c      	movs	r4, r3
 8009ccc:	2200      	movs	r2, #0
 8009cce:	0015      	movs	r5, r2
 8009cd0:	0020      	movs	r0, r4
 8009cd2:	0029      	movs	r1, r5
 8009cd4:	0004      	movs	r4, r0
 8009cd6:	0f62      	lsrs	r2, r4, #29
 8009cd8:	000c      	movs	r4, r1
 8009cda:	00e4      	lsls	r4, r4, #3
 8009cdc:	617c      	str	r4, [r7, #20]
 8009cde:	697c      	ldr	r4, [r7, #20]
 8009ce0:	4314      	orrs	r4, r2
 8009ce2:	617c      	str	r4, [r7, #20]
 8009ce4:	0001      	movs	r1, r0
 8009ce6:	00c9      	lsls	r1, r1, #3
 8009ce8:	6139      	str	r1, [r7, #16]
 8009cea:	603b      	str	r3, [r7, #0]
 8009cec:	2200      	movs	r2, #0
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	6838      	ldr	r0, [r7, #0]
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	0004      	movs	r4, r0
 8009cf6:	0f62      	lsrs	r2, r4, #29
 8009cf8:	000c      	movs	r4, r1
 8009cfa:	00e4      	lsls	r4, r4, #3
 8009cfc:	60fc      	str	r4, [r7, #12]
 8009cfe:	68fc      	ldr	r4, [r7, #12]
 8009d00:	4314      	orrs	r4, r2
 8009d02:	60fc      	str	r4, [r7, #12]
 8009d04:	0001      	movs	r1, r0
 8009d06:	00ca      	lsls	r2, r1, #3
 8009d08:	60ba      	str	r2, [r7, #8]
 8009d0a:	3307      	adds	r3, #7
 8009d0c:	08db      	lsrs	r3, r3, #3
 8009d0e:	00db      	lsls	r3, r3, #3
 8009d10:	4669      	mov	r1, sp
 8009d12:	1acb      	subs	r3, r1, r3
 8009d14:	469d      	mov	sp, r3
 8009d16:	466b      	mov	r3, sp
 8009d18:	3300      	adds	r3, #0
 8009d1a:	20f4      	movs	r0, #244	; 0xf4
 8009d1c:	0040      	lsls	r0, r0, #1
 8009d1e:	2218      	movs	r2, #24
 8009d20:	1882      	adds	r2, r0, r2
 8009d22:	19d1      	adds	r1, r2, r7
 8009d24:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8009d26:	4b56      	ldr	r3, [pc, #344]	; (8009e80 <astronode_send_cmd_rr+0x320>)
 8009d28:	22fc      	movs	r2, #252	; 0xfc
 8009d2a:	0052      	lsls	r2, r2, #1
 8009d2c:	189b      	adds	r3, r3, r2
 8009d2e:	2218      	movs	r2, #24
 8009d30:	4694      	mov	ip, r2
 8009d32:	44bc      	add	ip, r7
 8009d34:	4463      	add	r3, ip
 8009d36:	22c4      	movs	r2, #196	; 0xc4
 8009d38:	5a9b      	ldrh	r3, [r3, r2]
 8009d3a:	3b03      	subs	r3, #3
 8009d3c:	0019      	movs	r1, r3
 8009d3e:	2358      	movs	r3, #88	; 0x58
 8009d40:	2218      	movs	r2, #24
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	19db      	adds	r3, r3, r7
 8009d46:	3305      	adds	r3, #5
 8009d48:	4a51      	ldr	r2, [pc, #324]	; (8009e90 <astronode_send_cmd_rr+0x330>)
 8009d4a:	2418      	movs	r4, #24
 8009d4c:	1900      	adds	r0, r0, r4
 8009d4e:	19c0      	adds	r0, r0, r7
 8009d50:	6800      	ldr	r0, [r0, #0]
 8009d52:	f003 fb87 	bl	800d464 <snprintf>
 8009d56:	0002      	movs	r2, r0
 8009d58:	23f3      	movs	r3, #243	; 0xf3
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	2118      	movs	r1, #24
 8009d5e:	185b      	adds	r3, r3, r1
 8009d60:	19db      	adds	r3, r3, r7
 8009d62:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009d64:	23fb      	movs	r3, #251	; 0xfb
 8009d66:	005b      	lsls	r3, r3, #1
 8009d68:	2218      	movs	r2, #24
 8009d6a:	189b      	adds	r3, r3, r2
 8009d6c:	19db      	adds	r3, r3, r7
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e037      	b.n	8009de4 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8009d74:	23fb      	movs	r3, #251	; 0xfb
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	2218      	movs	r2, #24
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	19db      	adds	r3, r3, r7
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	22f4      	movs	r2, #244	; 0xf4
 8009d82:	0052      	lsls	r2, r2, #1
 8009d84:	2118      	movs	r1, #24
 8009d86:	1852      	adds	r2, r2, r1
 8009d88:	19d2      	adds	r2, r2, r7
 8009d8a:	6812      	ldr	r2, [r2, #0]
 8009d8c:	5cd3      	ldrb	r3, [r2, r3]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	4b40      	ldr	r3, [pc, #256]	; (8009e94 <astronode_send_cmd_rr+0x334>)
 8009d92:	18d3      	adds	r3, r2, r3
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	001a      	movs	r2, r3
 8009d98:	2397      	movs	r3, #151	; 0x97
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	d105      	bne.n	8009daa <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8009d9e:	4b3e      	ldr	r3, [pc, #248]	; (8009e98 <astronode_send_cmd_rr+0x338>)
 8009da0:	0018      	movs	r0, r3
 8009da2:	f7f9 f989 	bl	80030b8 <send_debug_logs>
                    return false;
 8009da6:	2300      	movs	r3, #0
 8009da8:	e056      	b.n	8009e58 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8009daa:	20fb      	movs	r0, #251	; 0xfb
 8009dac:	0040      	lsls	r0, r0, #1
 8009dae:	2318      	movs	r3, #24
 8009db0:	18c3      	adds	r3, r0, r3
 8009db2:	19db      	adds	r3, r3, r7
 8009db4:	781a      	ldrb	r2, [r3, #0]
 8009db6:	2318      	movs	r3, #24
 8009db8:	18c3      	adds	r3, r0, r3
 8009dba:	19db      	adds	r3, r3, r7
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	69f9      	ldr	r1, [r7, #28]
 8009dc0:	18cb      	adds	r3, r1, r3
 8009dc2:	21f4      	movs	r1, #244	; 0xf4
 8009dc4:	0049      	lsls	r1, r1, #1
 8009dc6:	2418      	movs	r4, #24
 8009dc8:	1909      	adds	r1, r1, r4
 8009dca:	19c9      	adds	r1, r1, r7
 8009dcc:	6809      	ldr	r1, [r1, #0]
 8009dce:	5c8a      	ldrb	r2, [r1, r2]
 8009dd0:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009dd2:	2318      	movs	r3, #24
 8009dd4:	18c3      	adds	r3, r0, r3
 8009dd6:	19db      	adds	r3, r3, r7
 8009dd8:	781a      	ldrb	r2, [r3, #0]
 8009dda:	2318      	movs	r3, #24
 8009ddc:	18c3      	adds	r3, r0, r3
 8009dde:	19db      	adds	r3, r3, r7
 8009de0:	3201      	adds	r2, #1
 8009de2:	701a      	strb	r2, [r3, #0]
 8009de4:	23fb      	movs	r3, #251	; 0xfb
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	2218      	movs	r2, #24
 8009dea:	189b      	adds	r3, r3, r2
 8009dec:	19db      	adds	r3, r3, r7
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	21f3      	movs	r1, #243	; 0xf3
 8009df4:	0049      	lsls	r1, r1, #1
 8009df6:	2218      	movs	r2, #24
 8009df8:	188a      	adds	r2, r1, r2
 8009dfa:	19d2      	adds	r2, r2, r7
 8009dfc:	8812      	ldrh	r2, [r2, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d8b8      	bhi.n	8009d74 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8009e02:	23f8      	movs	r3, #248	; 0xf8
 8009e04:	33ff      	adds	r3, #255	; 0xff
 8009e06:	2218      	movs	r2, #24
 8009e08:	189b      	adds	r3, r3, r2
 8009e0a:	19db      	adds	r3, r3, r7
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8009e10:	2318      	movs	r3, #24
 8009e12:	18cb      	adds	r3, r1, r3
 8009e14:	19db      	adds	r3, r3, r7
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	69fa      	ldr	r2, [r7, #28]
 8009e1a:	18d3      	adds	r3, r2, r3
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8009e20:	4b1e      	ldr	r3, [pc, #120]	; (8009e9c <astronode_send_cmd_rr+0x33c>)
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7f9 f948 	bl	80030b8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8009e28:	2358      	movs	r3, #88	; 0x58
 8009e2a:	2218      	movs	r2, #24
 8009e2c:	189b      	adds	r3, r3, r2
 8009e2e:	19db      	adds	r3, r3, r7
 8009e30:	1d5a      	adds	r2, r3, #5
 8009e32:	491b      	ldr	r1, [pc, #108]	; (8009ea0 <astronode_send_cmd_rr+0x340>)
 8009e34:	24f4      	movs	r4, #244	; 0xf4
 8009e36:	0064      	lsls	r4, r4, #1
 8009e38:	2318      	movs	r3, #24
 8009e3a:	18e3      	adds	r3, r4, r3
 8009e3c:	19db      	adds	r3, r3, r7
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	0018      	movs	r0, r3
 8009e42:	f003 fb43 	bl	800d4cc <sprintf>
            send_debug_logs(command_content);
 8009e46:	2318      	movs	r3, #24
 8009e48:	18e3      	adds	r3, r4, r3
 8009e4a:	19db      	adds	r3, r3, r7
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f7f9 f932 	bl	80030b8 <send_debug_logs>
 8009e54:	46b5      	mov	sp, r6
 8009e56:	e005      	b.n	8009e64 <astronode_send_cmd_rr+0x304>
                return result ;
 8009e58:	46b5      	mov	sp, r6
 8009e5a:	e009      	b.n	8009e70 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8009e5c:	4b11      	ldr	r3, [pc, #68]	; (8009ea4 <astronode_send_cmd_rr+0x344>)
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f7f9 f92a 	bl	80030b8 <send_debug_logs>
        }
    }
    return result ;
 8009e64:	23f8      	movs	r3, #248	; 0xf8
 8009e66:	33ff      	adds	r3, #255	; 0xff
 8009e68:	2218      	movs	r2, #24
 8009e6a:	189b      	adds	r3, r3, r2
 8009e6c:	19db      	adds	r3, r3, r7
 8009e6e:	781b      	ldrb	r3, [r3, #0]
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	2385      	movs	r3, #133	; 0x85
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	449d      	add	sp, r3
 8009e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e7c:	fffffdec 	.word	0xfffffdec
 8009e80:	fffffe60 	.word	0xfffffe60
 8009e84:	0801519c 	.word	0x0801519c
 8009e88:	080151b8 	.word	0x080151b8
 8009e8c:	08015208 	.word	0x08015208
 8009e90:	0801482c 	.word	0x0801482c
 8009e94:	08015d70 	.word	0x08015d70
 8009e98:	0801521c 	.word	0x0801521c
 8009e9c:	08015248 	.word	0x08015248
 8009ea0:	08015260 	.word	0x08015260
 8009ea4:	08015264 	.word	0x08015264

08009ea8 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <is_sak_available+0x10>)
 8009eae:	781b      	ldrb	r3, [r3, #0]
}
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	46c0      	nop			; (mov r8, r8)
 8009eb8:	20000b28 	.word	0x20000b28

08009ebc <is_astronode_reset>:

bool is_astronode_reset()
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009ec0:	4b02      	ldr	r3, [pc, #8]	; (8009ecc <is_astronode_reset+0x10>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
}
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	20000b29 	.word	0x20000b29

08009ed0 <is_command_available>:

bool is_command_available()
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009ed4:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <is_command_available+0x10>)
 8009ed6:	781b      	ldrb	r3, [r3, #0]
}
 8009ed8:	0018      	movs	r0, r3
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	46c0      	nop			; (mov r8, r8)
 8009ee0:	20000b2a 	.word	0x20000b2a

08009ee4 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	0002      	movs	r2, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	1dfb      	adds	r3, r7, #7
 8009ef0:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009ef2:	1dfb      	adds	r3, r7, #7
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	2b2f      	cmp	r3, #47	; 0x2f
 8009ef8:	d90b      	bls.n	8009f12 <ascii_to_value+0x2e>
 8009efa:	1dfb      	adds	r3, r7, #7
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	2b39      	cmp	r3, #57	; 0x39
 8009f00:	d807      	bhi.n	8009f12 <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009f02:	1dfb      	adds	r3, r7, #7
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	3b30      	subs	r3, #48	; 0x30
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	701a      	strb	r2, [r3, #0]
        return true;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e010      	b.n	8009f34 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009f12:	1dfb      	adds	r3, r7, #7
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b40      	cmp	r3, #64	; 0x40
 8009f18:	d90b      	bls.n	8009f32 <ascii_to_value+0x4e>
 8009f1a:	1dfb      	adds	r3, r7, #7
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b46      	cmp	r3, #70	; 0x46
 8009f20:	d807      	bhi.n	8009f32 <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009f22:	1dfb      	adds	r3, r7, #7
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	3b37      	subs	r3, #55	; 0x37
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	701a      	strb	r2, [r3, #0]
        return true;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009f32:	2300      	movs	r3, #0
    }
}
 8009f34:	0018      	movs	r0, r3
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b002      	add	sp, #8
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009f46:	250e      	movs	r5, #14
 8009f48:	197b      	adds	r3, r7, r5
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009f4e:	197b      	adds	r3, r7, r5
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	197a      	adds	r2, r7, r5
 8009f54:	1c59      	adds	r1, r3, #1
 8009f56:	8011      	strh	r1, [r2, #0]
 8009f58:	001a      	movs	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	189b      	adds	r3, r3, r2
 8009f5e:	2202      	movs	r2, #2
 8009f60:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	260a      	movs	r6, #10
 8009f66:	19bc      	adds	r4, r7, r6
 8009f68:	4a44      	ldr	r2, [pc, #272]	; (800a07c <astronode_create_request_transport+0x140>)
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f000 fa7d 	bl	800a46c <calculate_crc>
 8009f72:	0003      	movs	r3, r0
 8009f74:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	1c58      	adds	r0, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	22c4      	movs	r2, #196	; 0xc4
 8009f7e:	5a99      	ldrh	r1, [r3, r2]
 8009f80:	19bc      	adds	r4, r7, r6
 8009f82:	19bb      	adds	r3, r7, r6
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	001a      	movs	r2, r3
 8009f88:	f000 fa70 	bl	800a46c <calculate_crc>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009f90:	19bb      	adds	r3, r7, r6
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	b21a      	sxth	r2, r3
 8009f98:	0031      	movs	r1, r6
 8009f9a:	19bb      	adds	r3, r7, r6
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	0a1b      	lsrs	r3, r3, #8
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	b21b      	sxth	r3, r3
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	b21a      	sxth	r2, r3
 8009fa8:	187b      	adds	r3, r7, r1
 8009faa:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	7818      	ldrb	r0, [r3, #0]
 8009fb0:	197b      	adds	r3, r7, r5
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	18d3      	adds	r3, r2, r3
 8009fb8:	0019      	movs	r1, r3
 8009fba:	f000 fbeb 	bl	800a794 <uint8_to_ascii_buffer>
    index += 2;
 8009fbe:	197b      	adds	r3, r7, r5
 8009fc0:	197a      	adds	r2, r7, r5
 8009fc2:	8812      	ldrh	r2, [r2, #0]
 8009fc4:	3202      	adds	r2, #2
 8009fc6:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009fc8:	230c      	movs	r3, #12
 8009fca:	18fb      	adds	r3, r7, r3
 8009fcc:	2200      	movs	r2, #0
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	e017      	b.n	800a002 <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009fd2:	240c      	movs	r4, #12
 8009fd4:	193b      	adds	r3, r7, r4
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	18d3      	adds	r3, r2, r3
 8009fdc:	7858      	ldrb	r0, [r3, #1]
 8009fde:	250e      	movs	r5, #14
 8009fe0:	197b      	adds	r3, r7, r5
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	18d3      	adds	r3, r2, r3
 8009fe8:	0019      	movs	r1, r3
 8009fea:	f000 fbd3 	bl	800a794 <uint8_to_ascii_buffer>
        index += 2;
 8009fee:	197b      	adds	r3, r7, r5
 8009ff0:	197a      	adds	r2, r7, r5
 8009ff2:	8812      	ldrh	r2, [r2, #0]
 8009ff4:	3202      	adds	r2, #2
 8009ff6:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009ff8:	193b      	adds	r3, r7, r4
 8009ffa:	881a      	ldrh	r2, [r3, #0]
 8009ffc:	193b      	adds	r3, r7, r4
 8009ffe:	3201      	adds	r2, #1
 800a000:	801a      	strh	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	22c4      	movs	r2, #196	; 0xc4
 800a006:	5a9b      	ldrh	r3, [r3, r2]
 800a008:	220c      	movs	r2, #12
 800a00a:	18ba      	adds	r2, r7, r2
 800a00c:	8812      	ldrh	r2, [r2, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d3df      	bcc.n	8009fd2 <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 800a012:	250a      	movs	r5, #10
 800a014:	197b      	adds	r3, r7, r5
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	0a1b      	lsrs	r3, r3, #8
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	b2d8      	uxtb	r0, r3
 800a01e:	240e      	movs	r4, #14
 800a020:	193b      	adds	r3, r7, r4
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	18d3      	adds	r3, r2, r3
 800a028:	0019      	movs	r1, r3
 800a02a:	f000 fbb3 	bl	800a794 <uint8_to_ascii_buffer>
    index += 2;
 800a02e:	0021      	movs	r1, r4
 800a030:	187b      	adds	r3, r7, r1
 800a032:	187a      	adds	r2, r7, r1
 800a034:	8812      	ldrh	r2, [r2, #0]
 800a036:	3202      	adds	r2, #2
 800a038:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 800a03a:	197b      	adds	r3, r7, r5
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	b2d8      	uxtb	r0, r3
 800a040:	000c      	movs	r4, r1
 800a042:	187b      	adds	r3, r7, r1
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	18d3      	adds	r3, r2, r3
 800a04a:	0019      	movs	r1, r3
 800a04c:	f000 fba2 	bl	800a794 <uint8_to_ascii_buffer>
    index += 2;
 800a050:	0020      	movs	r0, r4
 800a052:	183b      	adds	r3, r7, r0
 800a054:	183a      	adds	r2, r7, r0
 800a056:	8812      	ldrh	r2, [r2, #0]
 800a058:	3202      	adds	r2, #2
 800a05a:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 800a05c:	183b      	adds	r3, r7, r0
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	183a      	adds	r2, r7, r0
 800a062:	1c59      	adds	r1, r3, #1
 800a064:	8011      	strh	r1, [r2, #0]
 800a066:	001a      	movs	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	189b      	adds	r3, r3, r2
 800a06c:	2203      	movs	r2, #3
 800a06e:	701a      	strb	r2, [r3, #0]

    return index;
 800a070:	183b      	adds	r3, r7, r0
 800a072:	881b      	ldrh	r3, [r3, #0]
}
 800a074:	0018      	movs	r0, r3
 800a076:	46bd      	mov	sp, r7
 800a078:	b005      	add	sp, #20
 800a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07c:	0000ffff 	.word	0x0000ffff

0800a080 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 800a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a082:	b089      	sub	sp, #36	; 0x24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	230a      	movs	r3, #10
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	1c0a      	adds	r2, r1, #0
 800a090:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d005      	beq.n	800a0a6 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 800a09a:	4bbd      	ldr	r3, [pc, #756]	; (800a390 <astronode_decode_answer_transport+0x310>)
 800a09c:	0018      	movs	r0, r3
 800a09e:	f7f9 f80b 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e170      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800a0a6:	210a      	movs	r1, #10
 800a0a8:	187b      	adds	r3, r7, r1
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d103      	bne.n	800a0be <astronode_decode_answer_transport+0x3e>
 800a0b6:	187b      	adds	r3, r7, r1
 800a0b8:	881b      	ldrh	r3, [r3, #0]
 800a0ba:	2b07      	cmp	r3, #7
 800a0bc:	d805      	bhi.n	800a0ca <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800a0be:	4bb5      	ldr	r3, [pc, #724]	; (800a394 <astronode_decode_answer_transport+0x314>)
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f8 fff9 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e15e      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800a0ca:	230a      	movs	r3, #10
 800a0cc:	18fb      	adds	r3, r7, r3
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	3b08      	subs	r3, #8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da00      	bge.n	800a0d8 <astronode_decode_answer_transport+0x58>
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	105b      	asrs	r3, r3, #1
 800a0da:	b299      	uxth	r1, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	22c4      	movs	r2, #196	; 0xc4
 800a0e0:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800a0e2:	230a      	movs	r3, #10
 800a0e4:	18fb      	adds	r3, r7, r3
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	18d3      	adds	r3, r2, r3
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d005      	beq.n	800a100 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800a0f4:	4ba8      	ldr	r3, [pc, #672]	; (800a398 <astronode_decode_answer_transport+0x318>)
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7f8 ffde 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	e143      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800a100:	2117      	movs	r1, #23
 800a102:	187b      	adds	r3, r7, r1
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800a108:	2416      	movs	r4, #22
 800a10a:	193b      	adds	r3, r7, r4
 800a10c:	2200      	movs	r2, #0
 800a10e:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3301      	adds	r3, #1
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	187a      	adds	r2, r7, r1
 800a118:	0011      	movs	r1, r2
 800a11a:	0018      	movs	r0, r3
 800a11c:	f7ff fee2 	bl	8009ee4 <ascii_to_value>
 800a120:	0003      	movs	r3, r0
 800a122:	001a      	movs	r2, r3
 800a124:	2301      	movs	r3, #1
 800a126:	4053      	eors	r3, r2
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10e      	bne.n	800a14c <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3302      	adds	r3, #2
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	193a      	adds	r2, r7, r4
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff fed3 	bl	8009ee4 <ascii_to_value>
 800a13e:	0003      	movs	r3, r0
 800a140:	001a      	movs	r2, r3
 800a142:	2301      	movs	r3, #1
 800a144:	4053      	eors	r3, r2
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d005      	beq.n	800a158 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a14c:	4b93      	ldr	r3, [pc, #588]	; (800a39c <astronode_decode_answer_transport+0x31c>)
 800a14e:	0018      	movs	r0, r3
 800a150:	f7f8 ffb2 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a154:	2300      	movs	r3, #0
 800a156:	e117      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800a158:	2317      	movs	r3, #23
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	b2da      	uxtb	r2, r3
 800a162:	2316      	movs	r3, #22
 800a164:	18fb      	adds	r3, r7, r3
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	18d3      	adds	r3, r2, r3
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a170:	231e      	movs	r3, #30
 800a172:	18fb      	adds	r3, r7, r3
 800a174:	2203      	movs	r2, #3
 800a176:	801a      	strh	r2, [r3, #0]
 800a178:	231c      	movs	r3, #28
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	2200      	movs	r2, #0
 800a17e:	801a      	strh	r2, [r3, #0]
 800a180:	e045      	b.n	800a20e <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800a182:	241e      	movs	r4, #30
 800a184:	193b      	adds	r3, r7, r4
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2217      	movs	r2, #23
 800a190:	18ba      	adds	r2, r7, r2
 800a192:	0011      	movs	r1, r2
 800a194:	0018      	movs	r0, r3
 800a196:	f7ff fea5 	bl	8009ee4 <ascii_to_value>
 800a19a:	0003      	movs	r3, r0
 800a19c:	001a      	movs	r2, r3
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4053      	eors	r3, r2
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d112      	bne.n	800a1ce <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800a1a8:	193b      	adds	r3, r7, r4
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	18d3      	adds	r3, r2, r3
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	2216      	movs	r2, #22
 800a1b6:	18ba      	adds	r2, r7, r2
 800a1b8:	0011      	movs	r1, r2
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7ff fe92 	bl	8009ee4 <ascii_to_value>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	001a      	movs	r2, r3
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4053      	eors	r3, r2
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d005      	beq.n	800a1da <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a1ce:	4b73      	ldr	r3, [pc, #460]	; (800a39c <astronode_decode_answer_transport+0x31c>)
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	f7f8 ff71 	bl	80030b8 <send_debug_logs>
            return RS_FAILURE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e0d6      	b.n	800a388 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800a1da:	2317      	movs	r3, #23
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	b2d9      	uxtb	r1, r3
 800a1e4:	2316      	movs	r3, #22
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	781a      	ldrb	r2, [r3, #0]
 800a1ea:	201c      	movs	r0, #28
 800a1ec:	183b      	adds	r3, r7, r0
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	1838      	adds	r0, r7, r0
 800a1f2:	1c5c      	adds	r4, r3, #1
 800a1f4:	8004      	strh	r4, [r0, #0]
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	188b      	adds	r3, r1, r2
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	181b      	adds	r3, r3, r0
 800a200:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a202:	221e      	movs	r2, #30
 800a204:	18bb      	adds	r3, r7, r2
 800a206:	18ba      	adds	r2, r7, r2
 800a208:	8812      	ldrh	r2, [r2, #0]
 800a20a:	3202      	adds	r2, #2
 800a20c:	801a      	strh	r2, [r3, #0]
 800a20e:	231e      	movs	r3, #30
 800a210:	18fb      	adds	r3, r7, r3
 800a212:	881a      	ldrh	r2, [r3, #0]
 800a214:	260a      	movs	r6, #10
 800a216:	19bb      	adds	r3, r7, r6
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	3b05      	subs	r3, #5
 800a21c:	429a      	cmp	r2, r3
 800a21e:	dbb0      	blt.n	800a182 <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	251a      	movs	r5, #26
 800a224:	197c      	adds	r4, r7, r5
 800a226:	4a5e      	ldr	r2, [pc, #376]	; (800a3a0 <astronode_decode_answer_transport+0x320>)
 800a228:	2101      	movs	r1, #1
 800a22a:	0018      	movs	r0, r3
 800a22c:	f000 f91e 	bl	800a46c <calculate_crc>
 800a230:	0003      	movs	r3, r0
 800a232:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	1c58      	adds	r0, r3, #1
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	22c4      	movs	r2, #196	; 0xc4
 800a23c:	5a99      	ldrh	r1, [r3, r2]
 800a23e:	197c      	adds	r4, r7, r5
 800a240:	197b      	adds	r3, r7, r5
 800a242:	881b      	ldrh	r3, [r3, #0]
 800a244:	001a      	movs	r2, r3
 800a246:	f000 f911 	bl	800a46c <calculate_crc>
 800a24a:	0003      	movs	r3, r0
 800a24c:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800a24e:	197b      	adds	r3, r7, r5
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	021b      	lsls	r3, r3, #8
 800a254:	b21a      	sxth	r2, r3
 800a256:	0029      	movs	r1, r5
 800a258:	197b      	adds	r3, r7, r5
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	0a1b      	lsrs	r3, r3, #8
 800a25e:	b29b      	uxth	r3, r3
 800a260:	b21b      	sxth	r3, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	b21a      	sxth	r2, r3
 800a266:	187b      	adds	r3, r7, r1
 800a268:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800a26a:	19bb      	adds	r3, r7, r6
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	3b05      	subs	r3, #5
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	18d3      	adds	r3, r2, r3
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	2217      	movs	r2, #23
 800a278:	18ba      	adds	r2, r7, r2
 800a27a:	0011      	movs	r1, r2
 800a27c:	0018      	movs	r0, r3
 800a27e:	f7ff fe31 	bl	8009ee4 <ascii_to_value>
 800a282:	0003      	movs	r3, r0
 800a284:	001a      	movs	r2, r3
 800a286:	2301      	movs	r3, #1
 800a288:	4053      	eors	r3, r2
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d112      	bne.n	800a2b6 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800a290:	19bb      	adds	r3, r7, r6
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	3b04      	subs	r3, #4
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	18d3      	adds	r3, r2, r3
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2216      	movs	r2, #22
 800a29e:	18ba      	adds	r2, r7, r2
 800a2a0:	0011      	movs	r1, r2
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f7ff fe1e 	bl	8009ee4 <ascii_to_value>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	001a      	movs	r2, r3
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	4053      	eors	r3, r2
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a2b6:	4b39      	ldr	r3, [pc, #228]	; (800a39c <astronode_decode_answer_transport+0x31c>)
 800a2b8:	0018      	movs	r0, r3
 800a2ba:	f7f8 fefd 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e062      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800a2c2:	2017      	movs	r0, #23
 800a2c4:	183b      	adds	r3, r7, r0
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	031b      	lsls	r3, r3, #12
 800a2cc:	b299      	uxth	r1, r3
 800a2ce:	2416      	movs	r4, #22
 800a2d0:	193b      	adds	r3, r7, r4
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	2318      	movs	r3, #24
 800a2dc:	18fb      	adds	r3, r7, r3
 800a2de:	188a      	adds	r2, r1, r2
 800a2e0:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800a2e2:	250a      	movs	r5, #10
 800a2e4:	197b      	adds	r3, r7, r5
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	3b03      	subs	r3, #3
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	18d3      	adds	r3, r2, r3
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	183a      	adds	r2, r7, r0
 800a2f2:	0011      	movs	r1, r2
 800a2f4:	0018      	movs	r0, r3
 800a2f6:	f7ff fdf5 	bl	8009ee4 <ascii_to_value>
 800a2fa:	0003      	movs	r3, r0
 800a2fc:	001a      	movs	r2, r3
 800a2fe:	2301      	movs	r3, #1
 800a300:	4053      	eors	r3, r2
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d111      	bne.n	800a32c <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800a308:	197b      	adds	r3, r7, r5
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	3b02      	subs	r3, #2
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	18d3      	adds	r3, r2, r3
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	193a      	adds	r2, r7, r4
 800a316:	0011      	movs	r1, r2
 800a318:	0018      	movs	r0, r3
 800a31a:	f7ff fde3 	bl	8009ee4 <ascii_to_value>
 800a31e:	0003      	movs	r3, r0
 800a320:	001a      	movs	r2, r3
 800a322:	2301      	movs	r3, #1
 800a324:	4053      	eors	r3, r2
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <astronode_decode_answer_transport+0x31c>)
 800a32e:	0018      	movs	r0, r3
 800a330:	f7f8 fec2 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a334:	2300      	movs	r3, #0
 800a336:	e027      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800a338:	2317      	movs	r3, #23
 800a33a:	18fb      	adds	r3, r7, r3
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	b29a      	uxth	r2, r3
 800a344:	2316      	movs	r3, #22
 800a346:	18fb      	adds	r3, r7, r3
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	18d3      	adds	r3, r2, r3
 800a34e:	b299      	uxth	r1, r3
 800a350:	2018      	movs	r0, #24
 800a352:	183b      	adds	r3, r7, r0
 800a354:	183a      	adds	r2, r7, r0
 800a356:	8812      	ldrh	r2, [r2, #0]
 800a358:	188a      	adds	r2, r1, r2
 800a35a:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800a35c:	183a      	adds	r2, r7, r0
 800a35e:	231a      	movs	r3, #26
 800a360:	18fb      	adds	r3, r7, r3
 800a362:	8812      	ldrh	r2, [r2, #0]
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d005      	beq.n	800a376 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800a36a:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <astronode_decode_answer_transport+0x324>)
 800a36c:	0018      	movs	r0, r3
 800a36e:	f7f8 fea3 	bl	80030b8 <send_debug_logs>
        return RS_FAILURE;
 800a372:	2300      	movs	r3, #0
 800a374:	e008      	b.n	800a388 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2bff      	cmp	r3, #255	; 0xff
 800a37c:	d103      	bne.n	800a386 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	0018      	movs	r0, r3
 800a382:	f000 f8c3 	bl	800a50c <check_for_error>
    }

    return RS_SUCCESS;
 800a386:	2301      	movs	r3, #1
}
 800a388:	0018      	movs	r0, r3
 800a38a:	46bd      	mov	sp, r7
 800a38c:	b009      	add	sp, #36	; 0x24
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a390:	080152f4 	.word	0x080152f4
 800a394:	08015344 	.word	0x08015344
 800a398:	08015394 	.word	0x08015394
 800a39c:	080153e4 	.word	0x080153e4
 800a3a0:	0000ffff 	.word	0x0000ffff
 800a3a4:	08015430 	.word	0x08015430

0800a3a8 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3aa:	4c2b      	ldr	r4, [pc, #172]	; (800a458 <astronode_transport_send_receive+0xb0>)
 800a3ac:	44a5      	add	sp, r4
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a3b4:	4b29      	ldr	r3, [pc, #164]	; (800a45c <astronode_transport_send_receive+0xb4>)
 800a3b6:	25ca      	movs	r5, #202	; 0xca
 800a3b8:	00ad      	lsls	r5, r5, #2
 800a3ba:	195b      	adds	r3, r3, r5
 800a3bc:	19db      	adds	r3, r3, r7
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	22c4      	movs	r2, #196	; 0xc4
 800a3c6:	0052      	lsls	r2, r2, #1
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f003 f914 	bl	800d5f8 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a3d0:	4b23      	ldr	r3, [pc, #140]	; (800a460 <astronode_transport_send_receive+0xb8>)
 800a3d2:	195b      	adds	r3, r3, r5
 800a3d4:	19db      	adds	r3, r3, r7
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	22c4      	movs	r2, #196	; 0xc4
 800a3de:	0052      	lsls	r2, r2, #1
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f003 f908 	bl	800d5f8 <memset>
    uint16_t answer_length =  0;
 800a3e8:	4b1e      	ldr	r3, [pc, #120]	; (800a464 <astronode_transport_send_receive+0xbc>)
 800a3ea:	195b      	adds	r3, r3, r5
 800a3ec:	19db      	adds	r3, r3, r7
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800a3f2:	4e1d      	ldr	r6, [pc, #116]	; (800a468 <astronode_transport_send_receive+0xc0>)
 800a3f4:	19bc      	adds	r4, r7, r6
 800a3f6:	23cc      	movs	r3, #204	; 0xcc
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	18fa      	adds	r2, r7, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	0011      	movs	r1, r2
 800a400:	0018      	movs	r0, r3
 800a402:	f7ff fd9b 	bl	8009f3c <astronode_create_request_transport>
 800a406:	0003      	movs	r3, r0
 800a408:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800a40a:	19bb      	adds	r3, r7, r6
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	23cc      	movs	r3, #204	; 0xcc
 800a410:	005b      	lsls	r3, r3, #1
 800a412:	18fb      	adds	r3, r7, r3
 800a414:	0011      	movs	r1, r2
 800a416:	0018      	movs	r0, r3
 800a418:	f7f9 fb30 	bl	8003a7c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800a41c:	230a      	movs	r3, #10
 800a41e:	18fa      	adds	r2, r7, r3
 800a420:	240c      	movs	r4, #12
 800a422:	193b      	adds	r3, r7, r4
 800a424:	0011      	movs	r1, r2
 800a426:	0018      	movs	r0, r3
 800a428:	f000 f92c 	bl	800a684 <receive_astronode_answer>
 800a42c:	0003      	movs	r3, r0
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d10a      	bne.n	800a448 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800a432:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <astronode_transport_send_receive+0xbc>)
 800a434:	195b      	adds	r3, r3, r5
 800a436:	19db      	adds	r3, r3, r7
 800a438:	8819      	ldrh	r1, [r3, #0]
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	193b      	adds	r3, r7, r4
 800a43e:	0018      	movs	r0, r3
 800a440:	f7ff fe1e 	bl	800a080 <astronode_decode_answer_transport>
 800a444:	0003      	movs	r3, r0
 800a446:	e000      	b.n	800a44a <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800a448:	2300      	movs	r3, #0
    }
}
 800a44a:	0018      	movs	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	23cb      	movs	r3, #203	; 0xcb
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	449d      	add	sp, r3
 800a454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	fffffcd4 	.word	0xfffffcd4
 800a45c:	fffffe70 	.word	0xfffffe70
 800a460:	fffffce4 	.word	0xfffffce4
 800a464:	fffffce2 	.word	0xfffffce2
 800a468:	00000326 	.word	0x00000326

0800a46c <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	0008      	movs	r0, r1
 800a476:	0011      	movs	r1, r2
 800a478:	1cbb      	adds	r3, r7, #2
 800a47a:	1c02      	adds	r2, r0, #0
 800a47c:	801a      	strh	r2, [r3, #0]
 800a47e:	003b      	movs	r3, r7
 800a480:	1c0a      	adds	r2, r1, #0
 800a482:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800a484:	230e      	movs	r3, #14
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	003a      	movs	r2, r7
 800a48a:	8812      	ldrh	r2, [r2, #0]
 800a48c:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800a48e:	e02e      	b.n	800a4ee <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800a490:	240e      	movs	r4, #14
 800a492:	193b      	adds	r3, r7, r4
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	b299      	uxth	r1, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	200c      	movs	r0, #12
 800a4a6:	183b      	adds	r3, r7, r0
 800a4a8:	404a      	eors	r2, r1
 800a4aa:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800a4ac:	183b      	adds	r3, r7, r0
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	091b      	lsrs	r3, r3, #4
 800a4b2:	b299      	uxth	r1, r3
 800a4b4:	183b      	adds	r3, r7, r0
 800a4b6:	183a      	adds	r2, r7, r0
 800a4b8:	8812      	ldrh	r2, [r2, #0]
 800a4ba:	404a      	eors	r2, r1
 800a4bc:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800a4be:	0021      	movs	r1, r4
 800a4c0:	187b      	adds	r3, r7, r1
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	183b      	adds	r3, r7, r0
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	031b      	lsls	r3, r3, #12
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	4053      	eors	r3, r2
 800a4d2:	b21a      	sxth	r2, r3
 800a4d4:	183b      	adds	r3, r7, r0
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	015b      	lsls	r3, r3, #5
 800a4da:	b21b      	sxth	r3, r3
 800a4dc:	4053      	eors	r3, r2
 800a4de:	b21a      	sxth	r2, r3
 800a4e0:	183b      	adds	r3, r7, r0
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	5e1b      	ldrsh	r3, [r3, r0]
 800a4e6:	4053      	eors	r3, r2
 800a4e8:	b21a      	sxth	r2, r3
 800a4ea:	187b      	adds	r3, r7, r1
 800a4ec:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800a4ee:	1cbb      	adds	r3, r7, #2
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	1cba      	adds	r2, r7, #2
 800a4f4:	1e59      	subs	r1, r3, #1
 800a4f6:	8011      	strh	r1, [r2, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1c9      	bne.n	800a490 <calculate_crc+0x24>
    }
    return crc;
 800a4fc:	230e      	movs	r3, #14
 800a4fe:	18fb      	adds	r3, r7, r3
 800a500:	881b      	ldrh	r3, [r3, #0]
}
 800a502:	0018      	movs	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	b005      	add	sp, #20
 800a508:	bd90      	pop	{r4, r7, pc}
	...

0800a50c <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	785b      	ldrb	r3, [r3, #1]
 800a518:	b299      	uxth	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	b29b      	uxth	r3, r3
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	b29a      	uxth	r2, r3
 800a524:	200e      	movs	r0, #14
 800a526:	183b      	adds	r3, r7, r0
 800a528:	188a      	adds	r2, r1, r2
 800a52a:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800a52c:	183b      	adds	r3, r7, r0
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	4a40      	ldr	r2, [pc, #256]	; (800a634 <check_for_error+0x128>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d100      	bne.n	800a538 <check_for_error+0x2c>
 800a536:	e06f      	b.n	800a618 <check_for_error+0x10c>
 800a538:	4a3e      	ldr	r2, [pc, #248]	; (800a634 <check_for_error+0x128>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	dd00      	ble.n	800a540 <check_for_error+0x34>
 800a53e:	e070      	b.n	800a622 <check_for_error+0x116>
 800a540:	4a3d      	ldr	r2, [pc, #244]	; (800a638 <check_for_error+0x12c>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d100      	bne.n	800a548 <check_for_error+0x3c>
 800a546:	e062      	b.n	800a60e <check_for_error+0x102>
 800a548:	4a3b      	ldr	r2, [pc, #236]	; (800a638 <check_for_error+0x12c>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	dd00      	ble.n	800a550 <check_for_error+0x44>
 800a54e:	e068      	b.n	800a622 <check_for_error+0x116>
 800a550:	4a3a      	ldr	r2, [pc, #232]	; (800a63c <check_for_error+0x130>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d056      	beq.n	800a604 <check_for_error+0xf8>
 800a556:	4a39      	ldr	r2, [pc, #228]	; (800a63c <check_for_error+0x130>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	dd00      	ble.n	800a55e <check_for_error+0x52>
 800a55c:	e061      	b.n	800a622 <check_for_error+0x116>
 800a55e:	4a38      	ldr	r2, [pc, #224]	; (800a640 <check_for_error+0x134>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d04a      	beq.n	800a5fa <check_for_error+0xee>
 800a564:	4a36      	ldr	r2, [pc, #216]	; (800a640 <check_for_error+0x134>)
 800a566:	4293      	cmp	r3, r2
 800a568:	dc5b      	bgt.n	800a622 <check_for_error+0x116>
 800a56a:	4a36      	ldr	r2, [pc, #216]	; (800a644 <check_for_error+0x138>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d03f      	beq.n	800a5f0 <check_for_error+0xe4>
 800a570:	4a34      	ldr	r2, [pc, #208]	; (800a644 <check_for_error+0x138>)
 800a572:	4293      	cmp	r3, r2
 800a574:	dc55      	bgt.n	800a622 <check_for_error+0x116>
 800a576:	4a34      	ldr	r2, [pc, #208]	; (800a648 <check_for_error+0x13c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d034      	beq.n	800a5e6 <check_for_error+0xda>
 800a57c:	4a32      	ldr	r2, [pc, #200]	; (800a648 <check_for_error+0x13c>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	dc4f      	bgt.n	800a622 <check_for_error+0x116>
 800a582:	4a32      	ldr	r2, [pc, #200]	; (800a64c <check_for_error+0x140>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d029      	beq.n	800a5dc <check_for_error+0xd0>
 800a588:	4a30      	ldr	r2, [pc, #192]	; (800a64c <check_for_error+0x140>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	dc49      	bgt.n	800a622 <check_for_error+0x116>
 800a58e:	4a30      	ldr	r2, [pc, #192]	; (800a650 <check_for_error+0x144>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d01e      	beq.n	800a5d2 <check_for_error+0xc6>
 800a594:	4a2e      	ldr	r2, [pc, #184]	; (800a650 <check_for_error+0x144>)
 800a596:	4293      	cmp	r3, r2
 800a598:	dc43      	bgt.n	800a622 <check_for_error+0x116>
 800a59a:	2222      	movs	r2, #34	; 0x22
 800a59c:	32ff      	adds	r2, #255	; 0xff
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d012      	beq.n	800a5c8 <check_for_error+0xbc>
 800a5a2:	2291      	movs	r2, #145	; 0x91
 800a5a4:	0052      	lsls	r2, r2, #1
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	da3b      	bge.n	800a622 <check_for_error+0x116>
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d002      	beq.n	800a5b4 <check_for_error+0xa8>
 800a5ae:	2b11      	cmp	r3, #17
 800a5b0:	d005      	beq.n	800a5be <check_for_error+0xb2>
 800a5b2:	e036      	b.n	800a622 <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800a5b4:	4b27      	ldr	r3, [pc, #156]	; (800a654 <check_for_error+0x148>)
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f7f8 fd7e 	bl	80030b8 <send_debug_logs>
            break;
 800a5bc:	e036      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800a5be:	4b26      	ldr	r3, [pc, #152]	; (800a658 <check_for_error+0x14c>)
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f7f8 fd79 	bl	80030b8 <send_debug_logs>
            break;
 800a5c6:	e031      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800a5c8:	4b24      	ldr	r3, [pc, #144]	; (800a65c <check_for_error+0x150>)
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	f7f8 fd74 	bl	80030b8 <send_debug_logs>
            break;
 800a5d0:	e02c      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800a5d2:	4b23      	ldr	r3, [pc, #140]	; (800a660 <check_for_error+0x154>)
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f7f8 fd6f 	bl	80030b8 <send_debug_logs>
            break;
 800a5da:	e027      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800a5dc:	4b21      	ldr	r3, [pc, #132]	; (800a664 <check_for_error+0x158>)
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f7f8 fd6a 	bl	80030b8 <send_debug_logs>
            break;
 800a5e4:	e022      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800a5e6:	4b20      	ldr	r3, [pc, #128]	; (800a668 <check_for_error+0x15c>)
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f7f8 fd65 	bl	80030b8 <send_debug_logs>
            break;
 800a5ee:	e01d      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800a5f0:	4b1e      	ldr	r3, [pc, #120]	; (800a66c <check_for_error+0x160>)
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7f8 fd60 	bl	80030b8 <send_debug_logs>
            break;
 800a5f8:	e018      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800a5fa:	4b1d      	ldr	r3, [pc, #116]	; (800a670 <check_for_error+0x164>)
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f7f8 fd5b 	bl	80030b8 <send_debug_logs>
            break;
 800a602:	e013      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800a604:	4b1b      	ldr	r3, [pc, #108]	; (800a674 <check_for_error+0x168>)
 800a606:	0018      	movs	r0, r3
 800a608:	f7f8 fd56 	bl	80030b8 <send_debug_logs>
            break;
 800a60c:	e00e      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800a60e:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <check_for_error+0x16c>)
 800a610:	0018      	movs	r0, r3
 800a612:	f7f8 fd51 	bl	80030b8 <send_debug_logs>
            break;
 800a616:	e009      	b.n	800a62c <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800a618:	4b18      	ldr	r3, [pc, #96]	; (800a67c <check_for_error+0x170>)
 800a61a:	0018      	movs	r0, r3
 800a61c:	f7f8 fd4c 	bl	80030b8 <send_debug_logs>
            break;
 800a620:	e004      	b.n	800a62c <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800a622:	4b17      	ldr	r3, [pc, #92]	; (800a680 <check_for_error+0x174>)
 800a624:	0018      	movs	r0, r3
 800a626:	f7f8 fd47 	bl	80030b8 <send_debug_logs>
            break;
 800a62a:	46c0      	nop			; (mov r8, r8)
    }
}
 800a62c:	46c0      	nop			; (mov r8, r8)
 800a62e:	46bd      	mov	sp, r7
 800a630:	b004      	add	sp, #16
 800a632:	bd80      	pop	{r7, pc}
 800a634:	00004601 	.word	0x00004601
 800a638:	00004501 	.word	0x00004501
 800a63c:	00003501 	.word	0x00003501
 800a640:	00002601 	.word	0x00002601
 800a644:	00002511 	.word	0x00002511
 800a648:	00002501 	.word	0x00002501
 800a64c:	00000611 	.word	0x00000611
 800a650:	00000601 	.word	0x00000601
 800a654:	08015474 	.word	0x08015474
 800a658:	080154c0 	.word	0x080154c0
 800a65c:	08015524 	.word	0x08015524
 800a660:	0801555c 	.word	0x0801555c
 800a664:	08015600 	.word	0x08015600
 800a668:	08015668 	.word	0x08015668
 800a66c:	080156c8 	.word	0x080156c8
 800a670:	08015754 	.word	0x08015754
 800a674:	080157b4 	.word	0x080157b4
 800a678:	08015860 	.word	0x08015860
 800a67c:	080158ac 	.word	0x080158ac
 800a680:	080158f4 	.word	0x080158f4

0800a684 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800a684:	b5b0      	push	{r4, r5, r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800a68e:	230f      	movs	r3, #15
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800a696:	2316      	movs	r3, #22
 800a698:	18fb      	adds	r3, r7, r3
 800a69a:	2200      	movs	r2, #0
 800a69c:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800a69e:	f7f9 fa0b 	bl	8003ab8 <get_systick>
 800a6a2:	0003      	movs	r3, r0
 800a6a4:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800a6a6:	2315      	movs	r3, #21
 800a6a8:	18fb      	adds	r3, r7, r3
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800a6ae:	e054      	b.n	800a75a <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800a6b0:	4a34      	ldr	r2, [pc, #208]	; (800a784 <receive_astronode_answer+0x100>)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	0011      	movs	r1, r2
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	f7f9 fa06 	bl	8003ac8 <is_systick_timeout_over>
 800a6bc:	1e03      	subs	r3, r0, #0
 800a6be:	d005      	beq.n	800a6cc <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800a6c0:	4b31      	ldr	r3, [pc, #196]	; (800a788 <receive_astronode_answer+0x104>)
 800a6c2:	0018      	movs	r0, r3
 800a6c4:	f7f8 fcf8 	bl	80030b8 <send_debug_logs>
            return RS_FAILURE;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e057      	b.n	800a77c <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800a6cc:	250f      	movs	r5, #15
 800a6ce:	197b      	adds	r3, r7, r5
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f7f9 fa0f 	bl	8003af4 <is_astronode_character_received>
 800a6d6:	0003      	movs	r3, r0
 800a6d8:	0019      	movs	r1, r3
 800a6da:	2016      	movs	r0, #22
 800a6dc:	183b      	adds	r3, r7, r0
 800a6de:	183a      	adds	r2, r7, r0
 800a6e0:	8812      	ldrh	r2, [r2, #0]
 800a6e2:	801a      	strh	r2, [r3, #0]
 800a6e4:	2415      	movs	r4, #21
 800a6e6:	193b      	adds	r3, r7, r4
 800a6e8:	193a      	adds	r2, r7, r4
 800a6ea:	7812      	ldrb	r2, [r2, #0]
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	d033      	beq.n	800a75a <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800a6f2:	197b      	adds	r3, r7, r5
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d105      	bne.n	800a706 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800a6fa:	193b      	adds	r3, r7, r4
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	701a      	strb	r2, [r3, #0]
                length = 0;
 800a700:	183b      	adds	r3, r7, r0
 800a702:	2200      	movs	r2, #0
 800a704:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800a706:	2116      	movs	r1, #22
 800a708:	187b      	adds	r3, r7, r1
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	220f      	movs	r2, #15
 800a712:	18ba      	adds	r2, r7, r2
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	701a      	strb	r2, [r3, #0]
            length++;
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	881a      	ldrh	r2, [r3, #0]
 800a71c:	187b      	adds	r3, r7, r1
 800a71e:	3201      	adds	r2, #1
 800a720:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800a722:	187b      	adds	r3, r7, r1
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	2bb2      	cmp	r3, #178	; 0xb2
 800a728:	d905      	bls.n	800a736 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800a72a:	4b18      	ldr	r3, [pc, #96]	; (800a78c <receive_astronode_answer+0x108>)
 800a72c:	0018      	movs	r0, r3
 800a72e:	f7f8 fcc3 	bl	80030b8 <send_debug_logs>
                return RS_FAILURE;
 800a732:	2300      	movs	r3, #0
 800a734:	e022      	b.n	800a77c <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800a736:	230f      	movs	r3, #15
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d10c      	bne.n	800a75a <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800a740:	2216      	movs	r2, #22
 800a742:	18bb      	adds	r3, r7, r2
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d907      	bls.n	800a75a <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	18ba      	adds	r2, r7, r2
 800a74e:	8812      	ldrh	r2, [r2, #0]
 800a750:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800a752:	2315      	movs	r3, #21
 800a754:	18fb      	adds	r3, r7, r3
 800a756:	2201      	movs	r2, #1
 800a758:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800a75a:	2315      	movs	r3, #21
 800a75c:	18fb      	adds	r3, r7, r3
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	2201      	movs	r2, #1
 800a762:	4053      	eors	r3, r2
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1a2      	bne.n	800a6b0 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <receive_astronode_answer+0x10c>)
 800a76c:	0018      	movs	r0, r3
 800a76e:	f7f8 fca3 	bl	80030b8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0018      	movs	r0, r3
 800a776:	f7f8 fc9f 	bl	80030b8 <send_debug_logs>

    return RS_SUCCESS;
 800a77a:	2301      	movs	r3, #1
}
 800a77c:	0018      	movs	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	b006      	add	sp, #24
 800a782:	bdb0      	pop	{r4, r5, r7, pc}
 800a784:	000005dc 	.word	0x000005dc
 800a788:	08015918 	.word	0x08015918
 800a78c:	0801593c 	.word	0x0801593c
 800a790:	08015988 	.word	0x08015988

0800a794 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	0002      	movs	r2, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	1dfb      	adds	r3, r7, #7
 800a7a0:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800a7a2:	1dfb      	adds	r3, r7, #7
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	091b      	lsrs	r3, r3, #4
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	001a      	movs	r2, r3
 800a7ac:	4b08      	ldr	r3, [pc, #32]	; (800a7d0 <uint8_to_ascii_buffer+0x3c>)
 800a7ae:	5c9a      	ldrb	r2, [r3, r2]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800a7b4:	1dfb      	adds	r3, r7, #7
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	220f      	movs	r2, #15
 800a7ba:	401a      	ands	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	4903      	ldr	r1, [pc, #12]	; (800a7d0 <uint8_to_ascii_buffer+0x3c>)
 800a7c2:	5c8a      	ldrb	r2, [r1, r2]
 800a7c4:	701a      	strb	r2, [r3, #0]
}
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	b002      	add	sp, #8
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	46c0      	nop			; (mov r8, r8)
 800a7d0:	08015ce8 	.word	0x08015ce8

0800a7d4 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800a7d4:	b5b0      	push	{r4, r5, r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	0008      	movs	r0, r1
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	0019      	movs	r1, r3
 800a7e2:	230b      	movs	r3, #11
 800a7e4:	18fb      	adds	r3, r7, r3
 800a7e6:	1c02      	adds	r2, r0, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	18fb      	adds	r3, r7, r3
 800a7ee:	1c0a      	adds	r2, r1, #0
 800a7f0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <iis2dh_read_reg+0x2a>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	425b      	negs	r3, r3
 800a7fc:	e00f      	b.n	800a81e <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	685c      	ldr	r4, [r3, #4]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68d8      	ldr	r0, [r3, #12]
 800a806:	2308      	movs	r3, #8
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	881d      	ldrh	r5, [r3, #0]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	230b      	movs	r3, #11
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	7819      	ldrb	r1, [r3, #0]
 800a814:	002b      	movs	r3, r5
 800a816:	47a0      	blx	r4
 800a818:	0003      	movs	r3, r0
 800a81a:	617b      	str	r3, [r7, #20]

  return ret;
 800a81c:	697b      	ldr	r3, [r7, #20]
}
 800a81e:	0018      	movs	r0, r3
 800a820:	46bd      	mov	sp, r7
 800a822:	b006      	add	sp, #24
 800a824:	bdb0      	pop	{r4, r5, r7, pc}

0800a826 <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a826:	b5b0      	push	{r4, r5, r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	0008      	movs	r0, r1
 800a830:	607a      	str	r2, [r7, #4]
 800a832:	0019      	movs	r1, r3
 800a834:	230b      	movs	r3, #11
 800a836:	18fb      	adds	r3, r7, r3
 800a838:	1c02      	adds	r2, r0, #0
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	2308      	movs	r3, #8
 800a83e:	18fb      	adds	r3, r7, r3
 800a840:	1c0a      	adds	r2, r1, #0
 800a842:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <iis2dh_write_reg+0x2a>
 800a84a:	2301      	movs	r3, #1
 800a84c:	425b      	negs	r3, r3
 800a84e:	e00f      	b.n	800a870 <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681c      	ldr	r4, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68d8      	ldr	r0, [r3, #12]
 800a858:	2308      	movs	r3, #8
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	881d      	ldrh	r5, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	230b      	movs	r3, #11
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	7819      	ldrb	r1, [r3, #0]
 800a866:	002b      	movs	r3, r5
 800a868:	47a0      	blx	r4
 800a86a:	0003      	movs	r3, r0
 800a86c:	617b      	str	r3, [r7, #20]

  return ret;
 800a86e:	697b      	ldr	r3, [r7, #20]
}
 800a870:	0018      	movs	r0, r3
 800a872:	46bd      	mov	sp, r7
 800a874:	b006      	add	sp, #24
 800a876:	bdb0      	pop	{r4, r5, r7, pc}

0800a878 <iis2dh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800a878:	b590      	push	{r4, r7, lr}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_OUT_TEMP_L, buff, 2);
 800a882:	2408      	movs	r4, #8
 800a884:	193a      	adds	r2, r7, r4
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	2302      	movs	r3, #2
 800a88a:	210c      	movs	r1, #12
 800a88c:	f7ff ffa2 	bl	800a7d4 <iis2dh_read_reg>
 800a890:	0003      	movs	r3, r0
 800a892:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 800a894:	0021      	movs	r1, r4
 800a896:	187b      	adds	r3, r7, r1
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	b21a      	sxth	r2, r3
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	18d3      	adds	r3, r2, r3
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	b21a      	sxth	r2, r3
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	801a      	strh	r2, [r3, #0]

  return ret;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
}
 800a8be:	0018      	movs	r0, r3
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	b005      	add	sp, #20
 800a8c4:	bd90      	pop	{r4, r7, pc}

0800a8c6 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b086      	sub	sp, #24
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	000a      	movs	r2, r1
 800a8d0:	1cfb      	adds	r3, r7, #3
 800a8d2:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a8d4:	2310      	movs	r3, #16
 800a8d6:	18fa      	adds	r2, r7, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	2301      	movs	r3, #1
 800a8dc:	2120      	movs	r1, #32
 800a8de:	f7ff ff79 	bl	800a7d4 <iis2dh_read_reg>
 800a8e2:	0003      	movs	r3, r0
 800a8e4:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d108      	bne.n	800a8fe <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a8ec:	230c      	movs	r3, #12
 800a8ee:	18fa      	adds	r2, r7, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	2123      	movs	r1, #35	; 0x23
 800a8f6:	f7ff ff6d 	bl	800a7d4 <iis2dh_read_reg>
 800a8fa:	0003      	movs	r3, r0
 800a8fc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d138      	bne.n	800a976 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 800a904:	1cfb      	adds	r3, r7, #3
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10b      	bne.n	800a924 <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 800a90c:	2310      	movs	r3, #16
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	781a      	ldrb	r2, [r3, #0]
 800a912:	2108      	movs	r1, #8
 800a914:	438a      	bics	r2, r1
 800a916:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 800a918:	230c      	movs	r3, #12
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	781a      	ldrb	r2, [r3, #0]
 800a91e:	2108      	movs	r1, #8
 800a920:	430a      	orrs	r2, r1
 800a922:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 800a924:	1cfb      	adds	r3, r7, #3
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d10b      	bne.n	800a944 <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 800a92c:	2310      	movs	r3, #16
 800a92e:	18fb      	adds	r3, r7, r3
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	2108      	movs	r1, #8
 800a934:	438a      	bics	r2, r1
 800a936:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a938:	230c      	movs	r3, #12
 800a93a:	18fb      	adds	r3, r7, r3
 800a93c:	781a      	ldrb	r2, [r3, #0]
 800a93e:	2108      	movs	r1, #8
 800a940:	438a      	bics	r2, r1
 800a942:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 800a944:	1cfb      	adds	r3, r7, #3
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d10b      	bne.n	800a964 <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 800a94c:	2310      	movs	r3, #16
 800a94e:	18fb      	adds	r3, r7, r3
 800a950:	781a      	ldrb	r2, [r3, #0]
 800a952:	2108      	movs	r1, #8
 800a954:	430a      	orrs	r2, r1
 800a956:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a958:	230c      	movs	r3, #12
 800a95a:	18fb      	adds	r3, r7, r3
 800a95c:	781a      	ldrb	r2, [r3, #0]
 800a95e:	2108      	movs	r1, #8
 800a960:	438a      	bics	r2, r1
 800a962:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a964:	2310      	movs	r3, #16
 800a966:	18fa      	adds	r2, r7, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	2301      	movs	r3, #1
 800a96c:	2120      	movs	r1, #32
 800a96e:	f7ff ff5a 	bl	800a826 <iis2dh_write_reg>
 800a972:	0003      	movs	r3, r0
 800a974:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d108      	bne.n	800a98e <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a97c:	230c      	movs	r3, #12
 800a97e:	18fa      	adds	r2, r7, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	2301      	movs	r3, #1
 800a984:	2123      	movs	r1, #35	; 0x23
 800a986:	f7ff ff4e 	bl	800a826 <iis2dh_write_reg>
 800a98a:	0003      	movs	r3, r0
 800a98c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a98e:	697b      	ldr	r3, [r7, #20]
}
 800a990:	0018      	movs	r0, r3
 800a992:	46bd      	mov	sp, r7
 800a994:	b006      	add	sp, #24
 800a996:	bd80      	pop	{r7, pc}

0800a998 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	000a      	movs	r2, r1
 800a9a2:	1cfb      	adds	r3, r7, #3
 800a9a4:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a9a6:	2408      	movs	r4, #8
 800a9a8:	193a      	adds	r2, r7, r4
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	2120      	movs	r1, #32
 800a9b0:	f7ff ff10 	bl	800a7d4 <iis2dh_read_reg>
 800a9b4:	0003      	movs	r3, r0
 800a9b6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d115      	bne.n	800a9ea <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800a9be:	1cfb      	adds	r3, r7, #3
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	220f      	movs	r2, #15
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	193b      	adds	r3, r7, r4
 800a9ca:	0110      	lsls	r0, r2, #4
 800a9cc:	781a      	ldrb	r2, [r3, #0]
 800a9ce:	210f      	movs	r1, #15
 800a9d0:	400a      	ands	r2, r1
 800a9d2:	1c11      	adds	r1, r2, #0
 800a9d4:	1c02      	adds	r2, r0, #0
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a9da:	193a      	adds	r2, r7, r4
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	2301      	movs	r3, #1
 800a9e0:	2120      	movs	r1, #32
 800a9e2:	f7ff ff20 	bl	800a826 <iis2dh_write_reg>
 800a9e6:	0003      	movs	r3, r0
 800a9e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	0018      	movs	r0, r3
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	b005      	add	sp, #20
 800a9f2:	bd90      	pop	{r4, r7, pc}

0800a9f4 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 800a9f4:	b590      	push	{r4, r7, lr}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	000a      	movs	r2, r1
 800a9fe:	1cfb      	adds	r3, r7, #3
 800aa00:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800aa02:	2408      	movs	r4, #8
 800aa04:	193a      	adds	r2, r7, r4
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	2301      	movs	r3, #1
 800aa0a:	2123      	movs	r1, #35	; 0x23
 800aa0c:	f7ff fee2 	bl	800a7d4 <iis2dh_read_reg>
 800aa10:	0003      	movs	r3, r0
 800aa12:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d117      	bne.n	800aa4a <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800aa1a:	1cfb      	adds	r3, r7, #3
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	2203      	movs	r2, #3
 800aa20:	4013      	ands	r3, r2
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	193b      	adds	r3, r7, r4
 800aa26:	2103      	movs	r1, #3
 800aa28:	400a      	ands	r2, r1
 800aa2a:	0110      	lsls	r0, r2, #4
 800aa2c:	781a      	ldrb	r2, [r3, #0]
 800aa2e:	2130      	movs	r1, #48	; 0x30
 800aa30:	438a      	bics	r2, r1
 800aa32:	1c11      	adds	r1, r2, #0
 800aa34:	1c02      	adds	r2, r0, #0
 800aa36:	430a      	orrs	r2, r1
 800aa38:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800aa3a:	193a      	adds	r2, r7, r4
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	2301      	movs	r3, #1
 800aa40:	2123      	movs	r1, #35	; 0x23
 800aa42:	f7ff fef0 	bl	800a826 <iis2dh_write_reg>
 800aa46:	0003      	movs	r3, r0
 800aa48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
}
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	b005      	add	sp, #20
 800aa52:	bd90      	pop	{r4, r7, pc}

0800aa54 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	2301      	movs	r3, #1
 800aa64:	210f      	movs	r1, #15
 800aa66:	f7ff feb5 	bl	800a7d4 <iis2dh_read_reg>
 800aa6a:	0003      	movs	r3, r0
 800aa6c:	60fb      	str	r3, [r7, #12]

  return ret;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
}
 800aa70:	0018      	movs	r0, r3
 800aa72:	46bd      	mov	sp, r7
 800aa74:	b004      	add	sp, #16
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <iis2dh_int2_pin_notification_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_int2_pin_notification_mode_set(const stmdev_ctx_t *ctx,
                                              iis2dh_lir_int2_t val)
{
 800aa78:	b590      	push	{r4, r7, lr}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	000a      	movs	r2, r1
 800aa82:	1cfb      	adds	r3, r7, #3
 800aa84:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800aa86:	2408      	movs	r4, #8
 800aa88:	193a      	adds	r2, r7, r4
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	2124      	movs	r1, #36	; 0x24
 800aa90:	f7ff fea0 	bl	800a7d4 <iis2dh_read_reg>
 800aa94:	0003      	movs	r3, r0
 800aa96:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d117      	bne.n	800aace <iis2dh_int2_pin_notification_mode_set+0x56>
  {
    ctrl_reg5.lir_int2 = (uint8_t)val;
 800aa9e:	1cfb      	adds	r3, r7, #3
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	193b      	adds	r3, r7, r4
 800aaaa:	2101      	movs	r1, #1
 800aaac:	400a      	ands	r2, r1
 800aaae:	1890      	adds	r0, r2, r2
 800aab0:	781a      	ldrb	r2, [r3, #0]
 800aab2:	2102      	movs	r1, #2
 800aab4:	438a      	bics	r2, r1
 800aab6:	1c11      	adds	r1, r2, #0
 800aab8:	1c02      	adds	r2, r0, #0
 800aaba:	430a      	orrs	r2, r1
 800aabc:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800aabe:	193a      	adds	r2, r7, r4
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	2301      	movs	r3, #1
 800aac4:	2124      	movs	r1, #36	; 0x24
 800aac6:	f7ff feae 	bl	800a826 <iis2dh_write_reg>
 800aaca:	0003      	movs	r3, r0
 800aacc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aace:	68fb      	ldr	r3, [r7, #12]
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b005      	add	sp, #20
 800aad6:	bd90      	pop	{r4, r7, pc}

0800aad8 <iis2dh_int1_pin_notification_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_int1_pin_notification_mode_set(const stmdev_ctx_t *ctx,
                                              iis2dh_lir_int1_t val)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	000a      	movs	r2, r1
 800aae2:	1cfb      	adds	r3, r7, #3
 800aae4:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800aae6:	2408      	movs	r4, #8
 800aae8:	193a      	adds	r2, r7, r4
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	2301      	movs	r3, #1
 800aaee:	2124      	movs	r1, #36	; 0x24
 800aaf0:	f7ff fe70 	bl	800a7d4 <iis2dh_read_reg>
 800aaf4:	0003      	movs	r3, r0
 800aaf6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d117      	bne.n	800ab2e <iis2dh_int1_pin_notification_mode_set+0x56>
  {
    ctrl_reg5.lir_int1 = (uint8_t)val;
 800aafe:	1cfb      	adds	r3, r7, #3
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2201      	movs	r2, #1
 800ab04:	4013      	ands	r3, r2
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	193b      	adds	r3, r7, r4
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	400a      	ands	r2, r1
 800ab0e:	00d0      	lsls	r0, r2, #3
 800ab10:	781a      	ldrb	r2, [r3, #0]
 800ab12:	2108      	movs	r1, #8
 800ab14:	438a      	bics	r2, r1
 800ab16:	1c11      	adds	r1, r2, #0
 800ab18:	1c02      	adds	r2, r0, #0
 800ab1a:	430a      	orrs	r2, r1
 800ab1c:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 800ab1e:	193a      	adds	r2, r7, r4
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	2301      	movs	r3, #1
 800ab24:	2124      	movs	r1, #36	; 0x24
 800ab26:	f7ff fe7e 	bl	800a826 <iis2dh_write_reg>
 800ab2a:	0003      	movs	r3, r0
 800ab2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	0018      	movs	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b005      	add	sp, #20
 800ab36:	bd90      	pop	{r4, r7, pc}

0800ab38 <iis2dh_fifo_mode_set>:
  * @param  val      change the values of fm in reg FIFO_CTRL_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_fifo_mode_set(const stmdev_ctx_t *ctx, iis2dh_fm_t val)
{
 800ab38:	b590      	push	{r4, r7, lr}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	000a      	movs	r2, r1
 800ab42:	1cfb      	adds	r3, r7, #3
 800ab44:	701a      	strb	r2, [r3, #0]
  iis2dh_fifo_ctrl_reg_t fifo_ctrl_reg;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_FIFO_CTRL_REG,
 800ab46:	2408      	movs	r4, #8
 800ab48:	193a      	adds	r2, r7, r4
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	212e      	movs	r1, #46	; 0x2e
 800ab50:	f7ff fe40 	bl	800a7d4 <iis2dh_read_reg>
 800ab54:	0003      	movs	r3, r0
 800ab56:	60fb      	str	r3, [r7, #12]
                        (uint8_t *)&fifo_ctrl_reg, 1);

  if (ret == 0)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d115      	bne.n	800ab8a <iis2dh_fifo_mode_set+0x52>
  {
    fifo_ctrl_reg.fm = (uint8_t)val;
 800ab5e:	1cfb      	adds	r3, r7, #3
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	2203      	movs	r2, #3
 800ab64:	4013      	ands	r3, r2
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	193b      	adds	r3, r7, r4
 800ab6a:	0190      	lsls	r0, r2, #6
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	213f      	movs	r1, #63	; 0x3f
 800ab70:	400a      	ands	r2, r1
 800ab72:	1c11      	adds	r1, r2, #0
 800ab74:	1c02      	adds	r2, r0, #0
 800ab76:	430a      	orrs	r2, r1
 800ab78:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_FIFO_CTRL_REG,
 800ab7a:	193a      	adds	r2, r7, r4
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	2301      	movs	r3, #1
 800ab80:	212e      	movs	r1, #46	; 0x2e
 800ab82:	f7ff fe50 	bl	800a826 <iis2dh_write_reg>
 800ab86:	0003      	movs	r3, r0
 800ab88:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg, 1);
  }

  return ret;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
}
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	b005      	add	sp, #20
 800ab92:	bd90      	pop	{r4, r7, pc}

0800ab94 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800ab94:	b590      	push	{r4, r7, lr}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800ab9a:	1dfb      	adds	r3, r7, #7
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800aba0:	e012      	b.n	800abc8 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800aba2:	f7f8 ff51 	bl	8003a48 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800aba6:	1dfc      	adds	r4, r7, #7
 800aba8:	2300      	movs	r3, #0
 800abaa:	9303      	str	r3, [sp, #12]
 800abac:	2301      	movs	r3, #1
 800abae:	9302      	str	r3, [sp, #8]
 800abb0:	2301      	movs	r3, #1
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	2301      	movs	r3, #1
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	2300      	movs	r3, #0
 800abba:	2201      	movs	r2, #1
 800abbc:	2101      	movs	r1, #1
 800abbe:	2001      	movs	r0, #1
 800abc0:	f7fe f984 	bl	8008ecc <astronode_send_cfg_wr>
 800abc4:	0003      	movs	r3, r0
 800abc6:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 800abc8:	1dfb      	adds	r3, r7, #7
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2201      	movs	r2, #1
 800abce:	4053      	eors	r3, r2
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d1e5      	bne.n	800aba2 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800abd6:	1dfb      	adds	r3, r7, #7
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00d      	beq.n	800abfa <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800abde:	f7fe fddb 	bl	8009798 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800abe2:	f7fe f93b 	bl	8008e5c <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800abe6:	f7fe fed1 	bl	800998c <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800abea:	f7fe fac5 	bl	8009178 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800abee:	f7fe fa19 	bl	8009024 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800abf2:	f7fe fd55 	bl	80096a0 <astronode_send_pld_fr>
		return true ;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e000      	b.n	800abfc <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800abfa:	2300      	movs	r3, #0
	}
}
 800abfc:	0018      	movs	r0, r3
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b003      	add	sp, #12
 800ac02:	bd90      	pop	{r4, r7, pc}

0800ac04 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , const char* payload )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	1dbb      	adds	r3, r7, #6
 800ac10:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	0018      	movs	r0, r3
 800ac16:	f7f5 fa75 	bl	8000104 <strlen>
 800ac1a:	0003      	movs	r3, r0
 800ac1c:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2ba0      	cmp	r3, #160	; 0xa0
 800ac22:	d80b      	bhi.n	800ac3c <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	1dbb      	adds	r3, r7, #6
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f7fe fc8c 	bl	800954c <astronode_send_pld_er>
 800ac34:	1e03      	subs	r3, r0, #0
 800ac36:	d005      	beq.n	800ac44 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	e004      	b.n	800ac46 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <my_astro_add_payload_2_queue+0x4c>)
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f7f8 fa3a 	bl	80030b8 <send_debug_logs>
	}
	return false ;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	0018      	movs	r0, r3
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b004      	add	sp, #16
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	080159b4 	.word	0x080159b4

0800ac54 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800ac58:	4b19      	ldr	r3, [pc, #100]	; (800acc0 <my_astro_handle_evt+0x6c>)
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f7f8 fa2c 	bl	80030b8 <send_debug_logs>
	astronode_send_evt_rr () ;
 800ac60:	f7fe fb34 	bl	80092cc <astronode_send_evt_rr>
	if (is_sak_available () )
 800ac64:	f7ff f920 	bl	8009ea8 <is_sak_available>
 800ac68:	1e03      	subs	r3, r0, #0
 800ac6a:	d007      	beq.n	800ac7c <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800ac6c:	f7fe fdf8 	bl	8009860 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800ac70:	f7fe fe4c 	bl	800990c <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <my_astro_handle_evt+0x70>)
 800ac76:	0018      	movs	r0, r3
 800ac78:	f7f8 fa1e 	bl	80030b8 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800ac7c:	f7ff f91e 	bl	8009ebc <is_astronode_reset>
 800ac80:	1e03      	subs	r3, r0, #0
 800ac82:	d005      	beq.n	800ac90 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800ac84:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <my_astro_handle_evt+0x74>)
 800ac86:	0018      	movs	r0, r3
 800ac88:	f7f8 fa16 	bl	80030b8 <send_debug_logs>
	  astronode_send_res_cr () ;
 800ac8c:	f7fe fd44 	bl	8009718 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800ac90:	f7ff f91e 	bl	8009ed0 <is_command_available>
 800ac94:	1e03      	subs	r3, r0, #0
 800ac96:	d00e      	beq.n	800acb6 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <my_astro_handle_evt+0x78>)
 800ac9a:	0018      	movs	r0, r3
 800ac9c:	f7f8 fa0c 	bl	80030b8 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800aca0:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <my_astro_handle_evt+0x7c>)
 800aca2:	0018      	movs	r0, r3
 800aca4:	f7fe ff5c 	bl	8009b60 <astronode_send_cmd_rr>
 800aca8:	1e03      	subs	r3, r0, #0
 800acaa:	d002      	beq.n	800acb2 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800acac:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <my_astro_handle_evt+0x80>)
 800acae:	2201      	movs	r2, #1
 800acb0:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800acb2:	f7fe ff15 	bl	8009ae0 <astronode_send_cmd_cr>
	}
	return true ;
 800acb6:	2301      	movs	r3, #1
}
 800acb8:	0018      	movs	r0, r3
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	46c0      	nop			; (mov r8, r8)
 800acc0:	08015a1c 	.word	0x08015a1c
 800acc4:	08015a50 	.word	0x08015a50
 800acc8:	08015a94 	.word	0x08015a94
 800accc:	08015ad0 	.word	0x08015ad0
 800acd0:	20000c28 	.word	0x20000c28
 800acd4:	20000c26 	.word	0x20000c26

0800acd8 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	0011      	movs	r1, r2
 800ace8:	0018      	movs	r0, r3
 800acea:	f7fe fb6f 	bl	80093cc <astronode_send_geo_wr>
}
 800acee:	46c0      	nop			; (mov r8, r8)
 800acf0:	46bd      	mov	sp, r7
 800acf2:	b002      	add	sp, #8
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	4ca5      	ldr	r4, [pc, #660]	; (800af90 <my_gnss_acq_coordinates+0x298>)
 800acfc:	44a5      	add	sp, r4
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800ad02:	4ba4      	ldr	r3, [pc, #656]	; (800af94 <my_gnss_acq_coordinates+0x29c>)
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800ad0a:	4ba3      	ldr	r3, [pc, #652]	; (800af98 <my_gnss_acq_coordinates+0x2a0>)
 800ad0c:	18fb      	adds	r3, r7, r3
 800ad0e:	2200      	movs	r2, #0
 800ad10:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800ad12:	4ba2      	ldr	r3, [pc, #648]	; (800af9c <my_gnss_acq_coordinates+0x2a4>)
 800ad14:	18fb      	adds	r3, r7, r3
 800ad16:	2200      	movs	r2, #0
 800ad18:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800ad1a:	4ba1      	ldr	r3, [pc, #644]	; (800afa0 <my_gnss_acq_coordinates+0x2a8>)
 800ad1c:	18fb      	adds	r3, r7, r3
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800ad22:	4ba0      	ldr	r3, [pc, #640]	; (800afa4 <my_gnss_acq_coordinates+0x2ac>)
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800ad2a:	4b9f      	ldr	r3, [pc, #636]	; (800afa8 <my_gnss_acq_coordinates+0x2b0>)
 800ad2c:	2486      	movs	r4, #134	; 0x86
 800ad2e:	00a4      	lsls	r4, r4, #2
 800ad30:	191b      	adds	r3, r3, r4
 800ad32:	19db      	adds	r3, r3, r7
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	3304      	adds	r3, #4
 800ad3a:	22f6      	movs	r2, #246	; 0xf6
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f002 fc5a 	bl	800d5f8 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800ad44:	4b99      	ldr	r3, [pc, #612]	; (800afac <my_gnss_acq_coordinates+0x2b4>)
 800ad46:	191b      	adds	r3, r3, r4
 800ad48:	19db      	adds	r3, r3, r7
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	22f6      	movs	r2, #246	; 0xf6
 800ad52:	2100      	movs	r1, #0
 800ad54:	0018      	movs	r0, r3
 800ad56:	f002 fc4f 	bl	800d5f8 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800ad5a:	4b95      	ldr	r3, [pc, #596]	; (800afb0 <my_gnss_acq_coordinates+0x2b8>)
 800ad5c:	2284      	movs	r2, #132	; 0x84
 800ad5e:	0092      	lsls	r2, r2, #2
 800ad60:	18ba      	adds	r2, r7, r2
 800ad62:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800ad64:	4b93      	ldr	r3, [pc, #588]	; (800afb4 <my_gnss_acq_coordinates+0x2bc>)
 800ad66:	2283      	movs	r2, #131	; 0x83
 800ad68:	0092      	lsls	r2, r2, #2
 800ad6a:	18ba      	adds	r2, r7, r2
 800ad6c:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800ad6e:	4b92      	ldr	r3, [pc, #584]	; (800afb8 <my_gnss_acq_coordinates+0x2c0>)
 800ad70:	2282      	movs	r2, #130	; 0x82
 800ad72:	0092      	lsls	r2, r2, #2
 800ad74:	18ba      	adds	r2, r7, r2
 800ad76:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800ad78:	4b90      	ldr	r3, [pc, #576]	; (800afbc <my_gnss_acq_coordinates+0x2c4>)
 800ad7a:	2281      	movs	r2, #129	; 0x81
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	18ba      	adds	r2, r7, r2
 800ad80:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2230      	movs	r2, #48	; 0x30
 800ad86:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	4b8c      	ldr	r3, [pc, #560]	; (800afc0 <my_gnss_acq_coordinates+0x2c8>)
 800ad8e:	608a      	str	r2, [r1, #8]
 800ad90:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800ad92:	f7f8 ff97 	bl	8003cc4 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800ad96:	e0c4      	b.n	800af22 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 800ad98:	4c80      	ldr	r4, [pc, #512]	; (800af9c <my_gnss_acq_coordinates+0x2a4>)
 800ad9a:	193b      	adds	r3, r7, r4
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	0018      	movs	r0, r3
 800ada0:	f7f8 fdce 	bl	8003940 <my_gnss_receive_byte>
		if ( rx_byte )
 800ada4:	0020      	movs	r0, r4
 800ada6:	183b      	adds	r3, r7, r0
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	4c7b      	ldr	r4, [pc, #492]	; (800af98 <my_gnss_acq_coordinates+0x2a0>)
 800adac:	193a      	adds	r2, r7, r4
 800adae:	1939      	adds	r1, r7, r4
 800adb0:	7809      	ldrb	r1, [r1, #0]
 800adb2:	7011      	strb	r1, [r2, #0]
 800adb4:	4d7b      	ldr	r5, [pc, #492]	; (800afa4 <my_gnss_acq_coordinates+0x2ac>)
 800adb6:	197a      	adds	r2, r7, r5
 800adb8:	1979      	adds	r1, r7, r5
 800adba:	7809      	ldrb	r1, [r1, #0]
 800adbc:	7011      	strb	r1, [r2, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d100      	bne.n	800adc4 <my_gnss_acq_coordinates+0xcc>
 800adc2:	e0ae      	b.n	800af22 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800adc4:	4b76      	ldr	r3, [pc, #472]	; (800afa0 <my_gnss_acq_coordinates+0x2a8>)
 800adc6:	18fa      	adds	r2, r7, r3
 800adc8:	2684      	movs	r6, #132	; 0x84
 800adca:	0076      	lsls	r6, r6, #1
 800adcc:	19b9      	adds	r1, r7, r6
 800adce:	183b      	adds	r3, r7, r0
 800add0:	0018      	movs	r0, r3
 800add2:	f000 fc0f 	bl	800b5f4 <my_nmea_message>
 800add6:	0001      	movs	r1, r0
 800add8:	193b      	adds	r3, r7, r4
 800adda:	193a      	adds	r2, r7, r4
 800addc:	7812      	ldrb	r2, [r2, #0]
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	197b      	adds	r3, r7, r5
 800ade2:	197a      	adds	r2, r7, r5
 800ade4:	7812      	ldrb	r2, [r2, #0]
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	2902      	cmp	r1, #2
 800adea:	d000      	beq.n	800adee <my_gnss_acq_coordinates+0xf6>
 800adec:	e099      	b.n	800af22 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800adee:	19bb      	adds	r3, r7, r6
 800adf0:	0018      	movs	r0, r3
 800adf2:	f000 fcbf 	bl	800b774 <is_my_nmea_checksum_ok>
 800adf6:	0003      	movs	r3, r0
 800adf8:	0019      	movs	r1, r3
 800adfa:	193b      	adds	r3, r7, r4
 800adfc:	193a      	adds	r2, r7, r4
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	197b      	adds	r3, r7, r5
 800ae04:	197a      	adds	r2, r7, r5
 800ae06:	7812      	ldrb	r2, [r2, #0]
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	2900      	cmp	r1, #0
 800ae0c:	d100      	bne.n	800ae10 <my_gnss_acq_coordinates+0x118>
 800ae0e:	e088      	b.n	800af22 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800ae10:	193b      	adds	r3, r7, r4
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2201      	movs	r2, #1
 800ae16:	4053      	eors	r3, r2
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d015      	beq.n	800ae4a <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7c1b      	ldrb	r3, [r3, #16]
 800ae22:	2b33      	cmp	r3, #51	; 0x33
 800ae24:	d111      	bne.n	800ae4a <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800ae26:	2383      	movs	r3, #131	; 0x83
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	18fb      	adds	r3, r7, r3
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	19bb      	adds	r3, r7, r6
 800ae30:	0011      	movs	r1, r2
 800ae32:	0018      	movs	r0, r3
 800ae34:	f002 fc55 	bl	800d6e2 <strstr>
 800ae38:	1e03      	subs	r3, r0, #0
 800ae3a:	d006      	beq.n	800ae4a <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800ae3c:	19bb      	adds	r3, r7, r6
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 f9bc 	bl	800b1bc <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800ae44:	193b      	adds	r3, r7, r4
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800ae4a:	2384      	movs	r3, #132	; 0x84
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	2484      	movs	r4, #132	; 0x84
 800ae54:	0064      	lsls	r4, r4, #1
 800ae56:	193b      	adds	r3, r7, r4
 800ae58:	0011      	movs	r1, r2
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f002 fc41 	bl	800d6e2 <strstr>
 800ae60:	1e03      	subs	r3, r0, #0
 800ae62:	d012      	beq.n	800ae8a <my_gnss_acq_coordinates+0x192>
 800ae64:	4d4f      	ldr	r5, [pc, #316]	; (800afa4 <my_gnss_acq_coordinates+0x2ac>)
 800ae66:	197b      	adds	r3, r7, r5
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d80d      	bhi.n	800ae8a <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800ae6e:	4b55      	ldr	r3, [pc, #340]	; (800afc4 <my_gnss_acq_coordinates+0x2cc>)
 800ae70:	881a      	ldrh	r2, [r3, #0]
 800ae72:	4b55      	ldr	r3, [pc, #340]	; (800afc8 <my_gnss_acq_coordinates+0x2d0>)
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d85b      	bhi.n	800af32 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800ae7a:	193b      	adds	r3, r7, r4
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f000 fe1f 	bl	800bac0 <my_nmea_get_gsv_tns>
 800ae82:	0003      	movs	r3, r0
 800ae84:	001a      	movs	r2, r3
 800ae86:	197b      	adds	r3, r7, r5
 800ae88:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800ae8a:	2382      	movs	r3, #130	; 0x82
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	2484      	movs	r4, #132	; 0x84
 800ae94:	0064      	lsls	r4, r4, #1
 800ae96:	193b      	adds	r3, r7, r4
 800ae98:	0011      	movs	r1, r2
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f002 fc21 	bl	800d6e2 <strstr>
 800aea0:	1e03      	subs	r3, r0, #0
 800aea2:	d010      	beq.n	800aec6 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800aea4:	193b      	adds	r3, r7, r4
 800aea6:	0018      	movs	r0, r3
 800aea8:	f000 fc10 	bl	800b6cc <get_my_nmea_gngsa_fixed_mode_s>
 800aeac:	0003      	movs	r3, r0
 800aeae:	001a      	movs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800aeb4:	193b      	adds	r3, r7, r4
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f000 fc13 	bl	800b6e2 <get_my_nmea_gngsa_pdop_d>
 800aebc:	0002      	movs	r2, r0
 800aebe:	000b      	movs	r3, r1
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	608a      	str	r2, [r1, #8]
 800aec4:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 800aec6:	2381      	movs	r3, #129	; 0x81
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	18fb      	adds	r3, r7, r3
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	2384      	movs	r3, #132	; 0x84
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	18fb      	adds	r3, r7, r3
 800aed4:	0011      	movs	r1, r2
 800aed6:	0018      	movs	r0, r3
 800aed8:	f002 fc03 	bl	800d6e2 <strstr>
 800aedc:	1e03      	subs	r3, r0, #0
 800aede:	d020      	beq.n	800af22 <my_gnss_acq_coordinates+0x22a>
 800aee0:	4b2d      	ldr	r3, [pc, #180]	; (800af98 <my_gnss_acq_coordinates+0x2a0>)
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d01b      	beq.n	800af22 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7c1b      	ldrb	r3, [r3, #16]
 800aeee:	2b33      	cmp	r3, #51	; 0x33
 800aef0:	d121      	bne.n	800af36 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800aef2:	4b2e      	ldr	r3, [pc, #184]	; (800afac <my_gnss_acq_coordinates+0x2b4>)
 800aef4:	2186      	movs	r1, #134	; 0x86
 800aef6:	0089      	lsls	r1, r1, #2
 800aef8:	185b      	adds	r3, r3, r1
 800aefa:	19da      	adds	r2, r3, r7
 800aefc:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <my_gnss_acq_coordinates+0x2b0>)
 800aefe:	185b      	adds	r3, r3, r1
 800af00:	19db      	adds	r3, r3, r7
 800af02:	0010      	movs	r0, r2
 800af04:	0019      	movs	r1, r3
 800af06:	23fa      	movs	r3, #250	; 0xfa
 800af08:	001a      	movs	r2, r3
 800af0a:	f002 fca2 	bl	800d852 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6898      	ldr	r0, [r3, #8]
 800af12:	68d9      	ldr	r1, [r3, #12]
 800af14:	4b2d      	ldr	r3, [pc, #180]	; (800afcc <my_gnss_acq_coordinates+0x2d4>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f7f5 faa5 	bl	8000468 <__aeabi_dcmple>
 800af1e:	1e03      	subs	r3, r0, #0
 800af20:	d10b      	bne.n	800af3a <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800af22:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <my_gnss_acq_coordinates+0x2cc>)
 800af24:	881a      	ldrh	r2, [r3, #0]
 800af26:	4b2a      	ldr	r3, [pc, #168]	; (800afd0 <my_gnss_acq_coordinates+0x2d8>)
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d200      	bcs.n	800af30 <my_gnss_acq_coordinates+0x238>
 800af2e:	e733      	b.n	800ad98 <my_gnss_acq_coordinates+0xa0>
 800af30:	e004      	b.n	800af3c <my_gnss_acq_coordinates+0x244>
							break ;
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	e002      	b.n	800af3c <my_gnss_acq_coordinates+0x244>
							break ;
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	e000      	b.n	800af3c <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800af3a:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800af3c:	f7f8 fed2 	bl	8003ce4 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800af40:	4b1a      	ldr	r3, [pc, #104]	; (800afac <my_gnss_acq_coordinates+0x2b4>)
 800af42:	2286      	movs	r2, #134	; 0x86
 800af44:	0092      	lsls	r2, r2, #2
 800af46:	189b      	adds	r3, r3, r2
 800af48:	19db      	adds	r3, r3, r7
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00a      	beq.n	800af66 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	230c      	movs	r3, #12
 800af54:	18fb      	adds	r3, r7, r3
 800af56:	0011      	movs	r1, r2
 800af58:	0018      	movs	r0, r3
 800af5a:	f000 fcc7 	bl	800b8ec <my_nmea_get_gngll_coordinates>
		r = true ;
 800af5e:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <my_gnss_acq_coordinates+0x29c>)
 800af60:	18fb      	adds	r3, r7, r3
 800af62:	2201      	movs	r2, #1
 800af64:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 800af66:	4b17      	ldr	r3, [pc, #92]	; (800afc4 <my_gnss_acq_coordinates+0x2cc>)
 800af68:	881a      	ldrh	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	4a14      	ldr	r2, [pc, #80]	; (800afc4 <my_gnss_acq_coordinates+0x2cc>)
 800af74:	8812      	ldrh	r2, [r2, #0]
 800af76:	189a      	adds	r2, r3, r2
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	615a      	str	r2, [r3, #20]
	return r ;
 800af7c:	4b05      	ldr	r3, [pc, #20]	; (800af94 <my_gnss_acq_coordinates+0x29c>)
 800af7e:	18fb      	adds	r3, r7, r3
 800af80:	781b      	ldrb	r3, [r3, #0]
}
 800af82:	0018      	movs	r0, r3
 800af84:	46bd      	mov	sp, r7
 800af86:	2387      	movs	r3, #135	; 0x87
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	449d      	add	sp, r3
 800af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	fffffde4 	.word	0xfffffde4
 800af94:	00000217 	.word	0x00000217
 800af98:	00000216 	.word	0x00000216
 800af9c:	00000203 	.word	0x00000203
 800afa0:	00000202 	.word	0x00000202
 800afa4:	00000215 	.word	0x00000215
 800afa8:	fffffef0 	.word	0xfffffef0
 800afac:	fffffdf4 	.word	0xfffffdf4
 800afb0:	08015b10 	.word	0x08015b10
 800afb4:	08015b18 	.word	0x08015b18
 800afb8:	08015b20 	.word	0x08015b20
 800afbc:	08015b28 	.word	0x08015b28
 800afc0:	408f4000 	.word	0x408f4000
 800afc4:	20000c50 	.word	0x20000c50
 800afc8:	2000001c 	.word	0x2000001c
 800afcc:	20000020 	.word	0x20000020
 800afd0:	2000001a 	.word	0x2000001a

0800afd4 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	4b07      	ldr	r3, [pc, #28]	; (800b000 <my_rtc_get_dt+0x2c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	0018      	movs	r0, r3
 800afe6:	f7fb f8f1 	bl	80061cc <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	4b04      	ldr	r3, [pc, #16]	; (800b000 <my_rtc_get_dt+0x2c>)
 800afee:	2200      	movs	r2, #0
 800aff0:	0018      	movs	r0, r3
 800aff2:	f7fa fffd 	bl	8005ff0 <HAL_RTC_GetTime>
}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	46bd      	mov	sp, r7
 800affa:	b002      	add	sp, #8
 800affc:	bd80      	pop	{r7, pc}
 800affe:	46c0      	nop			; (mov r8, r8)
 800b000:	200006f4 	.word	0x200006f4

0800b004 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800b004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b006:	b08d      	sub	sp, #52	; 0x34
 800b008:	af04      	add	r7, sp, #16
 800b00a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800b00c:	2508      	movs	r5, #8
 800b00e:	1979      	adds	r1, r7, r5
 800b010:	4b1b      	ldr	r3, [pc, #108]	; (800b080 <my_rtc_get_dt_s+0x7c>)
 800b012:	2200      	movs	r2, #0
 800b014:	0018      	movs	r0, r3
 800b016:	f7fa ffeb 	bl	8005ff0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800b01a:	241c      	movs	r4, #28
 800b01c:	1939      	adds	r1, r7, r4
 800b01e:	4b18      	ldr	r3, [pc, #96]	; (800b080 <my_rtc_get_dt_s+0x7c>)
 800b020:	2200      	movs	r2, #0
 800b022:	0018      	movs	r0, r3
 800b024:	f7fb f8d2 	bl	80061cc <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800b028:	0021      	movs	r1, r4
 800b02a:	187b      	adds	r3, r7, r1
 800b02c:	78db      	ldrb	r3, [r3, #3]
 800b02e:	22fa      	movs	r2, #250	; 0xfa
 800b030:	00d2      	lsls	r2, r2, #3
 800b032:	189a      	adds	r2, r3, r2
 800b034:	187b      	adds	r3, r7, r1
 800b036:	785b      	ldrb	r3, [r3, #1]
 800b038:	469c      	mov	ip, r3
 800b03a:	187b      	adds	r3, r7, r1
 800b03c:	789b      	ldrb	r3, [r3, #2]
 800b03e:	001c      	movs	r4, r3
 800b040:	0028      	movs	r0, r5
 800b042:	183b      	adds	r3, r7, r0
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	001d      	movs	r5, r3
 800b048:	183b      	adds	r3, r7, r0
 800b04a:	785b      	ldrb	r3, [r3, #1]
 800b04c:	001e      	movs	r6, r3
 800b04e:	183b      	adds	r3, r7, r0
 800b050:	789b      	ldrb	r3, [r3, #2]
 800b052:	490c      	ldr	r1, [pc, #48]	; (800b084 <my_rtc_get_dt_s+0x80>)
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	9303      	str	r3, [sp, #12]
 800b058:	9602      	str	r6, [sp, #8]
 800b05a:	9501      	str	r5, [sp, #4]
 800b05c:	9400      	str	r4, [sp, #0]
 800b05e:	4663      	mov	r3, ip
 800b060:	f002 fa34 	bl	800d4cc <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800b064:	211c      	movs	r1, #28
 800b066:	187b      	adds	r3, r7, r1
 800b068:	78db      	ldrb	r3, [r3, #3]
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	22fa      	movs	r2, #250	; 0xfa
 800b06e:	00d2      	lsls	r2, r2, #3
 800b070:	4694      	mov	ip, r2
 800b072:	4463      	add	r3, ip
 800b074:	b29b      	uxth	r3, r3
}
 800b076:	0018      	movs	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	b009      	add	sp, #36	; 0x24
 800b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	200006f4 	.word	0x200006f4
 800b084:	08015b78 	.word	0x08015b78

0800b088 <my_rtc_get_ts>:
uint32_t my_rtc_get_ts ( void )
{
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
	RTC_DateTypeDef d ;
	RTC_TimeTypeDef t ;

	my_rtc_get_dt ( &d , &t ) ;
 800b08e:	003a      	movs	r2, r7
 800b090:	2414      	movs	r4, #20
 800b092:	193b      	adds	r3, r7, r4
 800b094:	0011      	movs	r1, r2
 800b096:	0018      	movs	r0, r3
 800b098:	f7ff ff9c 	bl	800afd4 <my_rtc_get_dt>
	return my_conv_rtc2timestamp ( &d , &t ) ;
 800b09c:	003a      	movs	r2, r7
 800b09e:	193b      	adds	r3, r7, r4
 800b0a0:	0011      	movs	r1, r2
 800b0a2:	0018      	movs	r0, r3
 800b0a4:	f000 f938 	bl	800b318 <my_conv_rtc2timestamp>
 800b0a8:	0003      	movs	r3, r0
}
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	b007      	add	sp, #28
 800b0b0:	bd90      	pop	{r4, r7, pc}
	...

0800b0b4 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b0a9      	sub	sp, #164	; 0xa4
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800b0bc:	2434      	movs	r4, #52	; 0x34
 800b0be:	193a      	adds	r2, r7, r4
 800b0c0:	2548      	movs	r5, #72	; 0x48
 800b0c2:	197b      	adds	r3, r7, r5
 800b0c4:	0011      	movs	r1, r2
 800b0c6:	0018      	movs	r0, r3
 800b0c8:	f7ff ff84 	bl	800afd4 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800b0cc:	2680      	movs	r6, #128	; 0x80
 800b0ce:	19bb      	adds	r3, r7, r6
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	f7ff ff97 	bl	800b004 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800b0d6:	4a36      	ldr	r2, [pc, #216]	; (800b1b0 <my_rtc_set_alarm+0xfc>)
 800b0d8:	4936      	ldr	r1, [pc, #216]	; (800b1b4 <my_rtc_set_alarm+0x100>)
 800b0da:	234c      	movs	r3, #76	; 0x4c
 800b0dc:	18f8      	adds	r0, r7, r3
 800b0de:	19bb      	adds	r3, r7, r6
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	2335      	movs	r3, #53	; 0x35
 800b0e4:	f002 f9f2 	bl	800d4cc <sprintf>
	send_debug_logs ( m ) ;
 800b0e8:	234c      	movs	r3, #76	; 0x4c
 800b0ea:	18fb      	adds	r3, r7, r3
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	f7f7 ffe3 	bl	80030b8 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800b0f2:	193a      	adds	r2, r7, r4
 800b0f4:	197b      	adds	r3, r7, r5
 800b0f6:	0011      	movs	r1, r2
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f000 f90d 	bl	800b318 <my_conv_rtc2timestamp>
 800b0fe:	0002      	movs	r2, r0
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	189b      	adds	r3, r3, r2
 800b104:	2094      	movs	r0, #148	; 0x94
 800b106:	183a      	adds	r2, r7, r0
 800b108:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800b10a:	193a      	adds	r2, r7, r4
 800b10c:	1979      	adds	r1, r7, r5
 800b10e:	1838      	adds	r0, r7, r0
 800b110:	6803      	ldr	r3, [r0, #0]
 800b112:	0018      	movs	r0, r3
 800b114:	f000 f974 	bl	800b400 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800b118:	193b      	adds	r3, r7, r4
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	210c      	movs	r1, #12
 800b11e:	187b      	adds	r3, r7, r1
 800b120:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800b122:	193b      	adds	r3, r7, r4
 800b124:	785a      	ldrb	r2, [r3, #1]
 800b126:	187b      	adds	r3, r7, r1
 800b128:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800b12a:	193b      	adds	r3, r7, r4
 800b12c:	789a      	ldrb	r2, [r3, #2]
 800b12e:	187b      	adds	r3, r7, r1
 800b130:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800b132:	0008      	movs	r0, r1
 800b134:	183b      	adds	r3, r7, r0
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800b13a:	183b      	adds	r3, r7, r0
 800b13c:	2200      	movs	r2, #0
 800b13e:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800b140:	183b      	adds	r3, r7, r0
 800b142:	2200      	movs	r2, #0
 800b144:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800b146:	183b      	adds	r3, r7, r0
 800b148:	2200      	movs	r2, #0
 800b14a:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800b14c:	183b      	adds	r3, r7, r0
 800b14e:	2200      	movs	r2, #0
 800b150:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800b152:	183b      	adds	r3, r7, r0
 800b154:	2200      	movs	r2, #0
 800b156:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800b158:	197b      	adds	r3, r7, r5
 800b15a:	7899      	ldrb	r1, [r3, #2]
 800b15c:	183b      	adds	r3, r7, r0
 800b15e:	2220      	movs	r2, #32
 800b160:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800b162:	183b      	adds	r3, r7, r0
 800b164:	2280      	movs	r2, #128	; 0x80
 800b166:	0052      	lsls	r2, r2, #1
 800b168:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800b16a:	1839      	adds	r1, r7, r0
 800b16c:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <my_rtc_set_alarm+0x104>)
 800b16e:	2200      	movs	r2, #0
 800b170:	0018      	movs	r0, r3
 800b172:	f7fb f879 	bl	8006268 <HAL_RTC_SetAlarm_IT>
 800b176:	1e03      	subs	r3, r0, #0
 800b178:	d114      	bne.n	800b1a4 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800b17a:	19ba      	adds	r2, r7, r6
 800b17c:	1939      	adds	r1, r7, r4
 800b17e:	197b      	adds	r3, r7, r5
 800b180:	0018      	movs	r0, r3
 800b182:	f000 f9ff 	bl	800b584 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800b186:	4a0a      	ldr	r2, [pc, #40]	; (800b1b0 <my_rtc_set_alarm+0xfc>)
 800b188:	490a      	ldr	r1, [pc, #40]	; (800b1b4 <my_rtc_set_alarm+0x100>)
 800b18a:	244c      	movs	r4, #76	; 0x4c
 800b18c:	1938      	adds	r0, r7, r4
 800b18e:	19bb      	adds	r3, r7, r6
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	2349      	movs	r3, #73	; 0x49
 800b194:	f002 f99a 	bl	800d4cc <sprintf>
		send_debug_logs ( m ) ;
 800b198:	193b      	adds	r3, r7, r4
 800b19a:	0018      	movs	r0, r3
 800b19c:	f7f7 ff8c 	bl	80030b8 <send_debug_logs>
		return true ;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	b027      	add	sp, #156	; 0x9c
 800b1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1ae:	46c0      	nop			; (mov r8, r8)
 800b1b0:	08015b98 	.word	0x08015b98
 800b1b4:	08015bb4 	.word	0x08015bb4
 800b1b8:	200006f4 	.word	0x200006f4

0800b1bc <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800b1bc:	b5b0      	push	{r4, r5, r7, lr}
 800b1be:	b088      	sub	sp, #32
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800b1c4:	2508      	movs	r5, #8
 800b1c6:	197b      	adds	r3, r7, r5
 800b1c8:	1cda      	adds	r2, r3, #3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0011      	movs	r1, r2
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f000 fcae 	bl	800bb30 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800b1d4:	197b      	adds	r3, r7, r5
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	0011      	movs	r1, r2
 800b1dc:	0018      	movs	r0, r3
 800b1de:	f000 fce1 	bl	800bba4 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800b1e2:	197b      	adds	r3, r7, r5
 800b1e4:	1c9a      	adds	r2, r3, #2
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f000 fd14 	bl	800bc18 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800b1f0:	240c      	movs	r4, #12
 800b1f2:	193a      	adds	r2, r7, r4
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	0011      	movs	r1, r2
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	f000 fd47 	bl	800bc8c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800b1fe:	193b      	adds	r3, r7, r4
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	0011      	movs	r1, r2
 800b206:	0018      	movs	r0, r3
 800b208:	f000 fd7a 	bl	800bd00 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800b20c:	193b      	adds	r3, r7, r4
 800b20e:	1c9a      	adds	r2, r3, #2
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	0011      	movs	r1, r2
 800b214:	0018      	movs	r0, r3
 800b216:	f000 fdad 	bl	800bd74 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800b21a:	193b      	adds	r3, r7, r4
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	0011      	movs	r1, r2
 800b222:	0018      	movs	r0, r3
 800b224:	f000 fde0 	bl	800bde8 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b228:	193b      	adds	r3, r7, r4
 800b22a:	2200      	movs	r2, #0
 800b22c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b22e:	193b      	adds	r3, r7, r4
 800b230:	2200      	movs	r2, #0
 800b232:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800b234:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b236:	0018      	movs	r0, r3
 800b238:	f7fb fa85 	bl	8006746 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800b23c:	1939      	adds	r1, r7, r4
 800b23e:	4b09      	ldr	r3, [pc, #36]	; (800b264 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b240:	2200      	movs	r2, #0
 800b242:	0018      	movs	r0, r3
 800b244:	f7fa fe2c 	bl	8005ea0 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800b248:	1979      	adds	r1, r7, r5
 800b24a:	4b06      	ldr	r3, [pc, #24]	; (800b264 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	0018      	movs	r0, r3
 800b250:	f7fa ff2a 	bl	80060a8 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800b254:	4b03      	ldr	r3, [pc, #12]	; (800b264 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800b256:	0018      	movs	r0, r3
 800b258:	f7fb faa9 	bl	80067ae <HAL_RTCEx_DisableBypassShadow>
}
 800b25c:	46c0      	nop			; (mov r8, r8)
 800b25e:	46bd      	mov	sp, r7
 800b260:	b008      	add	sp, #32
 800b262:	bdb0      	pop	{r4, r5, r7, pc}
 800b264:	200006f4 	.word	0x200006f4

0800b268 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2100      	movs	r1, #0
 800b274:	0018      	movs	r0, r3
 800b276:	f001 fefb 	bl	800d070 <strtod>
 800b27a:	0002      	movs	r2, r0
 800b27c:	000b      	movs	r3, r1
 800b27e:	60ba      	str	r2, [r7, #8]
 800b280:	60fb      	str	r3, [r7, #12]
    return d ;
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	68fb      	ldr	r3, [r7, #12]
}
 800b286:	0010      	movs	r0, r2
 800b288:	0019      	movs	r1, r3
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b004      	add	sp, #16
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	0008      	movs	r0, r1
 800b29a:	0011      	movs	r1, r2
 800b29c:	1cfb      	adds	r3, r7, #3
 800b29e:	1c02      	adds	r2, r0, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
 800b2a2:	1cbb      	adds	r3, r7, #2
 800b2a4:	1c0a      	adds	r2, r1, #0
 800b2a6:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800b2a8:	230f      	movs	r3, #15
 800b2aa:	18fb      	adds	r3, r7, r3
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800b2b0:	230e      	movs	r3, #14
 800b2b2:	18fb      	adds	r3, r7, r3
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800b2b8:	e01c      	b.n	800b2f4 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800b2ba:	230f      	movs	r3, #15
 800b2bc:	18fb      	adds	r3, r7, r3
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	18d3      	adds	r3, r2, r3
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	1cfa      	adds	r2, r7, #3
 800b2c8:	7812      	ldrb	r2, [r2, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d105      	bne.n	800b2da <my_find_char_position+0x4a>
			p++ ;
 800b2ce:	210e      	movs	r1, #14
 800b2d0:	187b      	adds	r3, r7, r1
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	187b      	adds	r3, r7, r1
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800b2da:	230e      	movs	r3, #14
 800b2dc:	18fa      	adds	r2, r7, r3
 800b2de:	1cbb      	adds	r3, r7, #2
 800b2e0:	7812      	ldrb	r2, [r2, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d00e      	beq.n	800b306 <my_find_char_position+0x76>
			break ;
		i++ ;
 800b2e8:	210f      	movs	r1, #15
 800b2ea:	187b      	adds	r3, r7, r1
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800b2f4:	230f      	movs	r3, #15
 800b2f6:	18fb      	adds	r3, r7, r3
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	18d3      	adds	r3, r2, r3
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1da      	bne.n	800b2ba <my_find_char_position+0x2a>
 800b304:	e000      	b.n	800b308 <my_find_char_position+0x78>
			break ;
 800b306:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800b308:	230f      	movs	r3, #15
 800b30a:	18fb      	adds	r3, r7, r3
 800b30c:	781b      	ldrb	r3, [r3, #0]
}
 800b30e:	0018      	movs	r0, r3
 800b310:	46bd      	mov	sp, r7
 800b312:	b004      	add	sp, #16
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	78db      	ldrb	r3, [r3, #3]
 800b326:	22fa      	movs	r2, #250	; 0xfa
 800b328:	00d2      	lsls	r2, r2, #3
 800b32a:	4694      	mov	ip, r2
 800b32c:	4463      	add	r3, ip
 800b32e:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	0013      	movs	r3, r2
 800b334:	00db      	lsls	r3, r3, #3
 800b336:	189b      	adds	r3, r3, r2
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	189b      	adds	r3, r3, r2
 800b33c:	009a      	lsls	r2, r3, #2
 800b33e:	189a      	adds	r2, r3, r2
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	492c      	ldr	r1, [pc, #176]	; (800b3f4 <my_conv_rtc2timestamp+0xdc>)
 800b344:	468c      	mov	ip, r1
 800b346:	4463      	add	r3, ip
 800b348:	089b      	lsrs	r3, r3, #2
 800b34a:	18d3      	adds	r3, r2, r3
 800b34c:	4a2a      	ldr	r2, [pc, #168]	; (800b3f8 <my_conv_rtc2timestamp+0xe0>)
 800b34e:	4694      	mov	ip, r2
 800b350:	4463      	add	r3, ip
 800b352:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b354:	2300      	movs	r3, #0
 800b356:	613b      	str	r3, [r7, #16]
 800b358:	e00a      	b.n	800b370 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800b35a:	4a28      	ldr	r2, [pc, #160]	; (800b3fc <my_conv_rtc2timestamp+0xe4>)
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	18d3      	adds	r3, r2, r3
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	001a      	movs	r2, r3
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	189b      	adds	r3, r3, r2
 800b368:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3301      	adds	r3, #1
 800b36e:	613b      	str	r3, [r7, #16]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	785b      	ldrb	r3, [r3, #1]
 800b374:	3b01      	subs	r3, #1
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	429a      	cmp	r2, r3
 800b37a:	dbee      	blt.n	800b35a <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d908      	bls.n	800b396 <my_conv_rtc2timestamp+0x7e>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	0018      	movs	r0, r3
 800b388:	f000 f8de 	bl	800b548 <my_conv_is_leap_year>
 800b38c:	1e03      	subs	r3, r0, #0
 800b38e:	d002      	beq.n	800b396 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	3301      	adds	r3, #1
 800b394:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	789b      	ldrb	r3, [r3, #2]
 800b39a:	001a      	movs	r2, r3
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	18d3      	adds	r3, r2, r3
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	0013      	movs	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	189b      	adds	r3, r3, r2
 800b3ac:	011a      	lsls	r2, r3, #4
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	0113      	lsls	r3, r2, #4
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	01db      	lsls	r3, r3, #7
 800b3b6:	0019      	movs	r1, r3
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	001a      	movs	r2, r3
 800b3be:	0013      	movs	r3, r2
 800b3c0:	011b      	lsls	r3, r3, #4
 800b3c2:	1a9b      	subs	r3, r3, r2
 800b3c4:	011a      	lsls	r2, r3, #4
 800b3c6:	1ad2      	subs	r2, r2, r3
 800b3c8:	0113      	lsls	r3, r2, #4
 800b3ca:	001a      	movs	r2, r3
 800b3cc:	0013      	movs	r3, r2
 800b3ce:	18ca      	adds	r2, r1, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	785b      	ldrb	r3, [r3, #1]
 800b3d4:	0019      	movs	r1, r3
 800b3d6:	000b      	movs	r3, r1
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	1a5b      	subs	r3, r3, r1
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	18d3      	adds	r3, r2, r3
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	7892      	ldrb	r2, [r2, #2]
 800b3e4:	189b      	adds	r3, r3, r2
 800b3e6:	60bb      	str	r3, [r7, #8]

    return ts ;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
}
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	b006      	add	sp, #24
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	fffff84f 	.word	0xfffff84f
 800b3f8:	fff50736 	.word	0xfff50736
 800b3fc:	08015cf8 	.word	0x08015cf8

0800b400 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b08b      	sub	sp, #44	; 0x2c
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	213c      	movs	r1, #60	; 0x3c
 800b410:	0018      	movs	r0, r3
 800b412:	f7f4 ff19 	bl	8000248 <__aeabi_uidivmod>
 800b416:	000b      	movs	r3, r1
 800b418:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	213c      	movs	r1, #60	; 0x3c
 800b41e:	0018      	movs	r0, r3
 800b420:	f7f4 fe8c 	bl	800013c <__udivsi3>
 800b424:	0003      	movs	r3, r0
 800b426:	213c      	movs	r1, #60	; 0x3c
 800b428:	0018      	movs	r0, r3
 800b42a:	f7f4 ff0d 	bl	8000248 <__aeabi_uidivmod>
 800b42e:	000b      	movs	r3, r1
 800b430:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	22e1      	movs	r2, #225	; 0xe1
 800b436:	0111      	lsls	r1, r2, #4
 800b438:	0018      	movs	r0, r3
 800b43a:	f7f4 fe7f 	bl	800013c <__udivsi3>
 800b43e:	0003      	movs	r3, r0
 800b440:	2118      	movs	r1, #24
 800b442:	0018      	movs	r0, r3
 800b444:	f7f4 ff00 	bl	8000248 <__aeabi_uidivmod>
 800b448:	000b      	movs	r3, r1
 800b44a:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	493b      	ldr	r1, [pc, #236]	; (800b53c <my_conv_timestamp2rtc+0x13c>)
 800b450:	0018      	movs	r0, r3
 800b452:	f7f4 fe73 	bl	800013c <__udivsi3>
 800b456:	0003      	movs	r3, r0
 800b458:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800b45a:	4b39      	ldr	r3, [pc, #228]	; (800b540 <my_conv_timestamp2rtc+0x140>)
 800b45c:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b45e:	e00d      	b.n	800b47c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	0018      	movs	r0, r3
 800b464:	f000 f870 	bl	800b548 <my_conv_is_leap_year>
 800b468:	0003      	movs	r3, r0
 800b46a:	336e      	adds	r3, #110	; 0x6e
 800b46c:	33ff      	adds	r3, #255	; 0xff
 800b46e:	001a      	movs	r2, r3
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	1a9b      	subs	r3, r3, r2
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	3301      	adds	r3, #1
 800b47a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	0018      	movs	r0, r3
 800b480:	f000 f862 	bl	800b548 <my_conv_is_leap_year>
 800b484:	0003      	movs	r3, r0
 800b486:	336e      	adds	r3, #110	; 0x6e
 800b488:	33ff      	adds	r3, #255	; 0xff
 800b48a:	001a      	movs	r2, r3
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	4293      	cmp	r3, r2
 800b490:	d2e6      	bcs.n	800b460 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800b492:	2300      	movs	r3, #0
 800b494:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b496:	e018      	b.n	800b4ca <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800b498:	4b2a      	ldr	r3, [pc, #168]	; (800b544 <my_conv_timestamp2rtc+0x144>)
 800b49a:	69fa      	ldr	r2, [r7, #28]
 800b49c:	0052      	lsls	r2, r2, #1
 800b49e:	5ad3      	ldrh	r3, [r2, r3]
 800b4a0:	001c      	movs	r4, r3
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d107      	bne.n	800b4b8 <my_conv_timestamp2rtc+0xb8>
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f000 f84c 	bl	800b548 <my_conv_is_leap_year>
 800b4b0:	1e03      	subs	r3, r0, #0
 800b4b2:	d001      	beq.n	800b4b8 <my_conv_timestamp2rtc+0xb8>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e000      	b.n	800b4ba <my_conv_timestamp2rtc+0xba>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	191b      	adds	r3, r3, r4
 800b4bc:	001a      	movs	r2, r3
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	1a9b      	subs	r3, r3, r2
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b4ca:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <my_conv_timestamp2rtc+0x144>)
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	0052      	lsls	r2, r2, #1
 800b4d0:	5ad3      	ldrh	r3, [r2, r3]
 800b4d2:	001c      	movs	r4, r3
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d107      	bne.n	800b4ea <my_conv_timestamp2rtc+0xea>
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	0018      	movs	r0, r3
 800b4de:	f000 f833 	bl	800b548 <my_conv_is_leap_year>
 800b4e2:	1e03      	subs	r3, r0, #0
 800b4e4:	d001      	beq.n	800b4ea <my_conv_timestamp2rtc+0xea>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <my_conv_timestamp2rtc+0xec>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	191b      	adds	r3, r3, r4
 800b4ee:	001a      	movs	r2, r3
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d2d0      	bcs.n	800b498 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	3330      	adds	r3, #48	; 0x30
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	3301      	adds	r3, #1
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	b2db      	uxtb	r3, r3
 800b512:	3301      	adds	r3, #1
 800b514:	b2da      	uxtb	r2, r3
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	b2da      	uxtb	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	709a      	strb	r2, [r3, #2]
}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	46bd      	mov	sp, r7
 800b536:	b00b      	add	sp, #44	; 0x2c
 800b538:	bd90      	pop	{r4, r7, pc}
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	00015180 	.word	0x00015180
 800b540:	000007b2 	.word	0x000007b2
 800b544:	08015d04 	.word	0x08015d04

0800b548 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2203      	movs	r2, #3
 800b554:	4013      	ands	r3, r2
 800b556:	d106      	bne.n	800b566 <my_conv_is_leap_year+0x1e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2164      	movs	r1, #100	; 0x64
 800b55c:	0018      	movs	r0, r3
 800b55e:	f7f4 ff5d 	bl	800041c <__aeabi_idivmod>
 800b562:	1e0b      	subs	r3, r1, #0
 800b564:	d107      	bne.n	800b576 <my_conv_is_leap_year+0x2e>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	22c8      	movs	r2, #200	; 0xc8
 800b56a:	0051      	lsls	r1, r2, #1
 800b56c:	0018      	movs	r0, r3
 800b56e:	f7f4 ff55 	bl	800041c <__aeabi_idivmod>
 800b572:	1e0b      	subs	r3, r1, #0
 800b574:	d101      	bne.n	800b57a <my_conv_is_leap_year+0x32>
 800b576:	2301      	movs	r3, #1
 800b578:	e000      	b.n	800b57c <my_conv_is_leap_year+0x34>
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	0018      	movs	r0, r3
 800b57e:	46bd      	mov	sp, r7
 800b580:	b002      	add	sp, #8
 800b582:	bd80      	pop	{r7, pc}

0800b584 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800b584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b586:	b089      	sub	sp, #36	; 0x24
 800b588:	af04      	add	r7, sp, #16
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	78db      	ldrb	r3, [r3, #3]
 800b594:	22fa      	movs	r2, #250	; 0xfa
 800b596:	00d2      	lsls	r2, r2, #3
 800b598:	189a      	adds	r2, r3, r2
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	469c      	mov	ip, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	789b      	ldrb	r3, [r3, #2]
 800b5a4:	001c      	movs	r4, r3
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	001d      	movs	r5, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	001e      	movs	r6, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	789b      	ldrb	r3, [r3, #2]
 800b5b6:	4906      	ldr	r1, [pc, #24]	; (800b5d0 <my_conv_dt_2_dts+0x4c>)
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	9602      	str	r6, [sp, #8]
 800b5be:	9501      	str	r5, [sp, #4]
 800b5c0:	9400      	str	r4, [sp, #0]
 800b5c2:	4663      	mov	r3, ip
 800b5c4:	f001 ff82 	bl	800d4cc <sprintf>
}
 800b5c8:	46c0      	nop			; (mov r8, r8)
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b005      	add	sp, #20
 800b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5d0:	08015bc0 	.word	0x08015bc0

0800b5d4 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800b5dc:	230c      	movs	r3, #12
 800b5de:	18f9      	adds	r1, r7, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220a      	movs	r2, #10
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	f001 fe6d 	bl	800d2c4 <strtoul>
 800b5ea:	0003      	movs	r3, r0
}
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	b004      	add	sp, #16
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	2b24      	cmp	r3, #36	; 0x24
 800b606:	d117      	bne.n	800b638 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	b2d1      	uxtb	r1, r2
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	7011      	strb	r1, [r2, #0]
 800b61a:	001a      	movs	r2, r3
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	189b      	adds	r3, r3, r2
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	001a      	movs	r2, r3
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	189b      	adds	r3, r3, r2
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800b634:	2300      	movs	r3, #0
 800b636:	e045      	b.n	800b6c4 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b1f      	cmp	r3, #31
 800b63e:	d907      	bls.n	800b650 <my_nmea_message+0x5c>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	2b7e      	cmp	r3, #126	; 0x7e
 800b646:	d803      	bhi.n	800b650 <my_nmea_message+0x5c>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d103      	bne.n	800b658 <my_nmea_message+0x64>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b0d      	cmp	r3, #13
 800b656:	d114      	bne.n	800b682 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	b2d1      	uxtb	r1, r2
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	7011      	strb	r1, [r2, #0]
 800b664:	001a      	movs	r2, r3
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	189b      	adds	r3, r3, r2
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	7812      	ldrb	r2, [r2, #0]
 800b66e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	001a      	movs	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	189b      	adds	r3, r3, r2
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800b67e:	2301      	movs	r3, #1
 800b680:	e020      	b.n	800b6c4 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b0a      	cmp	r3, #10
 800b688:	d11a      	bne.n	800b6c0 <my_nmea_message+0xcc>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d916      	bls.n	800b6c0 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	3b01      	subs	r3, #1
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	001a      	movs	r2, r3
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	189b      	adds	r3, r3, r2
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b0d      	cmp	r3, #13
 800b6ac:	d108      	bne.n	800b6c0 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	001a      	movs	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	189b      	adds	r3, r3, r2
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800b6bc:	2302      	movs	r3, #2
 800b6be:	e001      	b.n	800b6c4 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	425b      	negs	r3, r3
}
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b004      	add	sp, #16
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3309      	adds	r3, #9
 800b6d8:	781b      	ldrb	r3, [r3, #0]
}
 800b6da:	0018      	movs	r0, r3
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	b002      	add	sp, #8
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800b6e2:	b5b0      	push	{r4, r5, r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	220f      	movs	r2, #15
 800b6ee:	212c      	movs	r1, #44	; 0x2c
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f7ff fdcd 	bl	800b290 <my_find_char_position>
 800b6f6:	0003      	movs	r3, r0
 800b6f8:	001a      	movs	r2, r3
 800b6fa:	2517      	movs	r5, #23
 800b6fc:	197b      	adds	r3, r7, r5
 800b6fe:	3201      	adds	r2, #1
 800b700:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2210      	movs	r2, #16
 800b706:	212c      	movs	r1, #44	; 0x2c
 800b708:	0018      	movs	r0, r3
 800b70a:	f7ff fdc1 	bl	800b290 <my_find_char_position>
 800b70e:	0003      	movs	r3, r0
 800b710:	0019      	movs	r1, r3
 800b712:	2416      	movs	r4, #22
 800b714:	193b      	adds	r3, r7, r4
 800b716:	197a      	adds	r2, r7, r5
 800b718:	7812      	ldrb	r2, [r2, #0]
 800b71a:	1a8a      	subs	r2, r1, r2
 800b71c:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800b71e:	193b      	adds	r3, r7, r4
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	3301      	adds	r3, #1
 800b724:	0018      	movs	r0, r3
 800b726:	f000 fc41 	bl	800bfac <malloc>
 800b72a:	0003      	movs	r3, r0
 800b72c:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800b72e:	197b      	adds	r3, r7, r5
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	18d1      	adds	r1, r2, r3
 800b736:	193b      	adds	r3, r7, r4
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	0018      	movs	r0, r3
 800b73e:	f001 ff82 	bl	800d646 <strncpy>
	pdop_s[pdop_length] = '\0';
 800b742:	193b      	adds	r3, r7, r4
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	18d3      	adds	r3, r2, r3
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	0018      	movs	r0, r3
 800b752:	f7ff fd89 	bl	800b268 <my_string2double_conv>
 800b756:	0002      	movs	r2, r0
 800b758:	000b      	movs	r3, r1
 800b75a:	60ba      	str	r2, [r7, #8]
 800b75c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	0018      	movs	r0, r3
 800b762:	f000 fc2d 	bl	800bfc0 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	68fb      	ldr	r3, [r7, #12]
}
 800b76a:	0010      	movs	r0, r2
 800b76c:	0019      	movs	r1, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	b006      	add	sp, #24
 800b772:	bdb0      	pop	{r4, r5, r7, pc}

0800b774 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800b77c:	230f      	movs	r3, #15
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	2200      	movs	r2, #0
 800b782:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800b784:	230e      	movs	r3, #14
 800b786:	18fb      	adds	r3, r7, r3
 800b788:	2201      	movs	r2, #1
 800b78a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b78c:	e00f      	b.n	800b7ae <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800b78e:	220e      	movs	r2, #14
 800b790:	18bb      	adds	r3, r7, r2
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	18ba      	adds	r2, r7, r2
 800b796:	1c59      	adds	r1, r3, #1
 800b798:	7011      	strb	r1, [r2, #0]
 800b79a:	001a      	movs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	189b      	adds	r3, r3, r2
 800b7a0:	7819      	ldrb	r1, [r3, #0]
 800b7a2:	220f      	movs	r2, #15
 800b7a4:	18bb      	adds	r3, r7, r2
 800b7a6:	18ba      	adds	r2, r7, r2
 800b7a8:	7812      	ldrb	r2, [r2, #0]
 800b7aa:	404a      	eors	r2, r1
 800b7ac:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b7ae:	210e      	movs	r1, #14
 800b7b0:	187b      	adds	r3, r7, r1
 800b7b2:	781b      	ldrb	r3, [r3, #0]
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	18d3      	adds	r3, r2, r3
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b7bc:	d00a      	beq.n	800b7d4 <is_my_nmea_checksum_ok+0x60>
 800b7be:	187b      	adds	r3, r7, r1
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	18d3      	adds	r3, r2, r3
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <is_my_nmea_checksum_ok+0x60>
 800b7cc:	187b      	adds	r3, r7, r1
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1dc      	bne.n	800b78e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800b7d4:	230f      	movs	r3, #15
 800b7d6:	18fb      	adds	r3, r7, r3
 800b7d8:	781c      	ldrb	r4, [r3, #0]
 800b7da:	210e      	movs	r1, #14
 800b7dc:	187b      	adds	r3, r7, r1
 800b7de:	187a      	adds	r2, r7, r1
 800b7e0:	7812      	ldrb	r2, [r2, #0]
 800b7e2:	3201      	adds	r2, #1
 800b7e4:	701a      	strb	r2, [r3, #0]
 800b7e6:	187b      	adds	r3, r7, r1
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	18d3      	adds	r3, r2, r3
 800b7ee:	2210      	movs	r2, #16
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	0018      	movs	r0, r3
 800b7f4:	f001 fcd4 	bl	800d1a0 <strtol>
 800b7f8:	0003      	movs	r3, r0
 800b7fa:	1ae3      	subs	r3, r4, r3
 800b7fc:	425a      	negs	r2, r3
 800b7fe:	4153      	adcs	r3, r2
 800b800:	b2db      	uxtb	r3, r3
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b005      	add	sp, #20
 800b808:	bd90      	pop	{r4, r7, pc}
	...

0800b80c <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800b80c:	b5b0      	push	{r4, r5, r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	000a      	movs	r2, r1
 800b816:	1cfb      	adds	r3, r7, #3
 800b818:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800b81a:	2308      	movs	r3, #8
 800b81c:	18fa      	adds	r2, r7, r3
 800b81e:	492f      	ldr	r1, [pc, #188]	; (800b8dc <nmea2decimal+0xd0>)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	0018      	movs	r0, r3
 800b824:	f001 fe72 	bl	800d50c <sscanf>
    min = deg / 100 ;
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	68f9      	ldr	r1, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <nmea2decimal+0xd4>)
 800b830:	f7f5 fb22 	bl	8000e78 <__aeabi_ddiv>
 800b834:	0002      	movs	r2, r0
 800b836:	000b      	movs	r3, r1
 800b838:	613a      	str	r2, [r7, #16]
 800b83a:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800b83c:	6938      	ldr	r0, [r7, #16]
 800b83e:	6979      	ldr	r1, [r7, #20]
 800b840:	f7f6 fd76 	bl	8002330 <__aeabi_d2iz>
 800b844:	0003      	movs	r3, r0
 800b846:	0018      	movs	r0, r3
 800b848:	f7f6 fda8 	bl	800239c <__aeabi_i2d>
 800b84c:	0002      	movs	r2, r0
 800b84e:	000b      	movs	r3, r1
 800b850:	60ba      	str	r2, [r7, #8]
 800b852:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6938      	ldr	r0, [r7, #16]
 800b85a:	6979      	ldr	r1, [r7, #20]
 800b85c:	f7f6 f9c8 	bl	8001bf0 <__aeabi_dsub>
 800b860:	0002      	movs	r2, r0
 800b862:	000b      	movs	r3, r1
 800b864:	0010      	movs	r0, r2
 800b866:	0019      	movs	r1, r3
 800b868:	2200      	movs	r2, #0
 800b86a:	4b1e      	ldr	r3, [pc, #120]	; (800b8e4 <nmea2decimal+0xd8>)
 800b86c:	f7f5 fefe 	bl	800166c <__aeabi_dmul>
 800b870:	0002      	movs	r2, r0
 800b872:	000b      	movs	r3, r1
 800b874:	613a      	str	r2, [r7, #16]
 800b876:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800b878:	2200      	movs	r2, #0
 800b87a:	4b1b      	ldr	r3, [pc, #108]	; (800b8e8 <nmea2decimal+0xdc>)
 800b87c:	6938      	ldr	r0, [r7, #16]
 800b87e:	6979      	ldr	r1, [r7, #20]
 800b880:	f7f5 fafa 	bl	8000e78 <__aeabi_ddiv>
 800b884:	0002      	movs	r2, r0
 800b886:	000b      	movs	r3, r1
 800b888:	613a      	str	r2, [r7, #16]
 800b88a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800b88c:	1cfb      	adds	r3, r7, #3
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b53      	cmp	r3, #83	; 0x53
 800b892:	d003      	beq.n	800b89c <nmea2decimal+0x90>
 800b894:	1cfb      	adds	r3, r7, #3
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	2b57      	cmp	r3, #87	; 0x57
 800b89a:	d10e      	bne.n	800b8ba <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800b89c:	68b8      	ldr	r0, [r7, #8]
 800b89e:	68f9      	ldr	r1, [r7, #12]
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f7f4 ff88 	bl	80007b8 <__aeabi_dadd>
 800b8a8:	0002      	movs	r2, r0
 800b8aa:	000b      	movs	r3, r1
 800b8ac:	0011      	movs	r1, r2
 800b8ae:	000c      	movs	r4, r1
 800b8b0:	2180      	movs	r1, #128	; 0x80
 800b8b2:	0609      	lsls	r1, r1, #24
 800b8b4:	4059      	eors	r1, r3
 800b8b6:	000d      	movs	r5, r1
 800b8b8:	e009      	b.n	800b8ce <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	693a      	ldr	r2, [r7, #16]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f7f4 ff79 	bl	80007b8 <__aeabi_dadd>
 800b8c6:	0002      	movs	r2, r0
 800b8c8:	000b      	movs	r3, r1
 800b8ca:	0014      	movs	r4, r2
 800b8cc:	001d      	movs	r5, r3
}
 800b8ce:	0022      	movs	r2, r4
 800b8d0:	002b      	movs	r3, r5
 800b8d2:	0010      	movs	r0, r2
 800b8d4:	0019      	movs	r1, r3
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	b006      	add	sp, #24
 800b8da:	bdb0      	pop	{r4, r5, r7, pc}
 800b8dc:	08015be0 	.word	0x08015be0
 800b8e0:	40590000 	.word	0x40590000
 800b8e4:	40240000 	.word	0x40240000
 800b8e8:	40180000 	.word	0x40180000

0800b8ec <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ee:	b08d      	sub	sp, #52	; 0x34
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	212c      	movs	r1, #44	; 0x2c
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7ff fcc7 	bl	800b290 <my_find_char_position>
 800b902:	0003      	movs	r3, r0
 800b904:	001a      	movs	r2, r3
 800b906:	252f      	movs	r5, #47	; 0x2f
 800b908:	197b      	adds	r3, r7, r5
 800b90a:	3201      	adds	r2, #1
 800b90c:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2202      	movs	r2, #2
 800b912:	212c      	movs	r1, #44	; 0x2c
 800b914:	0018      	movs	r0, r3
 800b916:	f7ff fcbb 	bl	800b290 <my_find_char_position>
 800b91a:	0003      	movs	r3, r0
 800b91c:	0019      	movs	r1, r3
 800b91e:	242e      	movs	r4, #46	; 0x2e
 800b920:	193b      	adds	r3, r7, r4
 800b922:	197a      	adds	r2, r7, r5
 800b924:	7812      	ldrb	r2, [r2, #0]
 800b926:	1a8a      	subs	r2, r1, r2
 800b928:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b92a:	193b      	adds	r3, r7, r4
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	0018      	movs	r0, r3
 800b932:	f000 fb3b 	bl	800bfac <malloc>
 800b936:	0003      	movs	r3, r0
 800b938:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b93a:	197b      	adds	r3, r7, r5
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	18d1      	adds	r1, r2, r3
 800b942:	193b      	adds	r3, r7, r4
 800b944:	781a      	ldrb	r2, [r3, #0]
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	0018      	movs	r0, r3
 800b94a:	f001 fe7c 	bl	800d646 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800b94e:	193b      	adds	r3, r7, r4
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b954:	18d3      	adds	r3, r2, r3
 800b956:	2200      	movs	r2, #0
 800b958:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b95a:	197b      	adds	r3, r7, r5
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	193b      	adds	r3, r7, r4
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	18d3      	adds	r3, r2, r3
 800b964:	3301      	adds	r3, #1
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	18d2      	adds	r2, r2, r3
 800b96a:	2627      	movs	r6, #39	; 0x27
 800b96c:	19bb      	adds	r3, r7, r6
 800b96e:	7812      	ldrb	r2, [r2, #0]
 800b970:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800b972:	19bb      	adds	r3, r7, r6
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	0011      	movs	r1, r2
 800b97a:	0018      	movs	r0, r3
 800b97c:	f7ff ff46 	bl	800b80c <nmea2decimal>
 800b980:	0002      	movs	r2, r0
 800b982:	000b      	movs	r3, r1
 800b984:	61ba      	str	r2, [r7, #24]
 800b986:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	0018      	movs	r0, r3
 800b98c:	f000 fb18 	bl	800bfc0 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800b990:	2200      	movs	r2, #0
 800b992:	4b49      	ldr	r3, [pc, #292]	; (800bab8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b994:	69b8      	ldr	r0, [r7, #24]
 800b996:	69f9      	ldr	r1, [r7, #28]
 800b998:	f7f5 fe68 	bl	800166c <__aeabi_dmul>
 800b99c:	0002      	movs	r2, r0
 800b99e:	000b      	movs	r3, r1
 800b9a0:	0010      	movs	r0, r2
 800b9a2:	0019      	movs	r1, r3
 800b9a4:	f008 fb20 	bl	8013fe8 <round>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4b43      	ldr	r3, [pc, #268]	; (800bab8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b9ac:	f7f5 fa64 	bl	8000e78 <__aeabi_ddiv>
 800b9b0:	0002      	movs	r2, r0
 800b9b2:	000b      	movs	r3, r1
 800b9b4:	61ba      	str	r2, [r7, #24]
 800b9b6:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4b40      	ldr	r3, [pc, #256]	; (800babc <my_nmea_get_gngll_coordinates+0x1d0>)
 800b9bc:	69b8      	ldr	r0, [r7, #24]
 800b9be:	69f9      	ldr	r1, [r7, #28]
 800b9c0:	f7f5 fe54 	bl	800166c <__aeabi_dmul>
 800b9c4:	0002      	movs	r2, r0
 800b9c6:	000b      	movs	r3, r1
 800b9c8:	0010      	movs	r0, r2
 800b9ca:	0019      	movs	r1, r3
 800b9cc:	f7f6 fcb0 	bl	8002330 <__aeabi_d2iz>
 800b9d0:	0002      	movs	r2, r0
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2203      	movs	r2, #3
 800b9da:	212c      	movs	r1, #44	; 0x2c
 800b9dc:	0018      	movs	r0, r3
 800b9de:	f7ff fc57 	bl	800b290 <my_find_char_position>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	001a      	movs	r2, r3
 800b9e6:	197b      	adds	r3, r7, r5
 800b9e8:	3201      	adds	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2204      	movs	r2, #4
 800b9f0:	212c      	movs	r1, #44	; 0x2c
 800b9f2:	0018      	movs	r0, r3
 800b9f4:	f7ff fc4c 	bl	800b290 <my_find_char_position>
 800b9f8:	0003      	movs	r3, r0
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	193b      	adds	r3, r7, r4
 800b9fe:	197a      	adds	r2, r7, r5
 800ba00:	7812      	ldrb	r2, [r2, #0]
 800ba02:	1a8a      	subs	r2, r1, r2
 800ba04:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800ba06:	193b      	adds	r3, r7, r4
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f000 facd 	bl	800bfac <malloc>
 800ba12:	0003      	movs	r3, r0
 800ba14:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800ba16:	197b      	adds	r3, r7, r5
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	18d1      	adds	r1, r2, r3
 800ba1e:	193b      	adds	r3, r7, r4
 800ba20:	781a      	ldrb	r2, [r3, #0]
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	0018      	movs	r0, r3
 800ba26:	f001 fe0e 	bl	800d646 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800ba2a:	193b      	adds	r3, r7, r4
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	18d3      	adds	r3, r2, r3
 800ba32:	2200      	movs	r2, #0
 800ba34:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800ba36:	197b      	adds	r3, r7, r5
 800ba38:	781a      	ldrb	r2, [r3, #0]
 800ba3a:	193b      	adds	r3, r7, r4
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	18d3      	adds	r3, r2, r3
 800ba40:	3301      	adds	r3, #1
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	18d2      	adds	r2, r2, r3
 800ba46:	19bb      	adds	r3, r7, r6
 800ba48:	7812      	ldrb	r2, [r2, #0]
 800ba4a:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800ba4c:	19bb      	adds	r3, r7, r6
 800ba4e:	781a      	ldrb	r2, [r3, #0]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	0011      	movs	r1, r2
 800ba54:	0018      	movs	r0, r3
 800ba56:	f7ff fed9 	bl	800b80c <nmea2decimal>
 800ba5a:	0002      	movs	r2, r0
 800ba5c:	000b      	movs	r3, r1
 800ba5e:	60ba      	str	r2, [r7, #8]
 800ba60:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	0018      	movs	r0, r3
 800ba66:	f000 faab 	bl	800bfc0 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4b12      	ldr	r3, [pc, #72]	; (800bab8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800ba6e:	68b8      	ldr	r0, [r7, #8]
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	f7f5 fdfb 	bl	800166c <__aeabi_dmul>
 800ba76:	0002      	movs	r2, r0
 800ba78:	000b      	movs	r3, r1
 800ba7a:	0010      	movs	r0, r2
 800ba7c:	0019      	movs	r1, r3
 800ba7e:	f008 fab3 	bl	8013fe8 <round>
 800ba82:	2200      	movs	r2, #0
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <my_nmea_get_gngll_coordinates+0x1cc>)
 800ba86:	f7f5 f9f7 	bl	8000e78 <__aeabi_ddiv>
 800ba8a:	0002      	movs	r2, r0
 800ba8c:	000b      	movs	r3, r1
 800ba8e:	60ba      	str	r2, [r7, #8]
 800ba90:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800ba92:	2200      	movs	r2, #0
 800ba94:	4b09      	ldr	r3, [pc, #36]	; (800babc <my_nmea_get_gngll_coordinates+0x1d0>)
 800ba96:	68b8      	ldr	r0, [r7, #8]
 800ba98:	68f9      	ldr	r1, [r7, #12]
 800ba9a:	f7f5 fde7 	bl	800166c <__aeabi_dmul>
 800ba9e:	0002      	movs	r2, r0
 800baa0:	000b      	movs	r3, r1
 800baa2:	0010      	movs	r0, r2
 800baa4:	0019      	movs	r1, r3
 800baa6:	f7f6 fc43 	bl	8002330 <__aeabi_d2iz>
 800baaa:	0002      	movs	r2, r0
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	605a      	str	r2, [r3, #4]
}
 800bab0:	46c0      	nop			; (mov r8, r8)
 800bab2:	46bd      	mov	sp, r7
 800bab4:	b00d      	add	sp, #52	; 0x34
 800bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bab8:	412e8480 	.word	0x412e8480
 800babc:	416312d0 	.word	0x416312d0

0800bac0 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800bac0:	b5b0      	push	{r4, r5, r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800bac8:	240e      	movs	r4, #14
 800baca:	193b      	adds	r3, r7, r4
 800bacc:	2200      	movs	r2, #0
 800bace:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2203      	movs	r2, #3
 800bad4:	212c      	movs	r1, #44	; 0x2c
 800bad6:	0018      	movs	r0, r3
 800bad8:	f7ff fbda 	bl	800b290 <my_find_char_position>
 800badc:	0003      	movs	r3, r0
 800bade:	001a      	movs	r2, r3
 800bae0:	2517      	movs	r5, #23
 800bae2:	197b      	adds	r3, r7, r5
 800bae4:	3201      	adds	r2, #1
 800bae6:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bae8:	2003      	movs	r0, #3
 800baea:	f000 fa5f 	bl	800bfac <malloc>
 800baee:	0003      	movs	r3, r0
 800baf0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800baf2:	197b      	adds	r3, r7, r5
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	18d1      	adds	r1, r2, r3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2202      	movs	r2, #2
 800bafe:	0018      	movs	r0, r3
 800bb00:	f001 fda1 	bl	800d646 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	3302      	adds	r3, #2
 800bb08:	2200      	movs	r2, #0
 800bb0a:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800bb0c:	193a      	adds	r2, r7, r4
 800bb0e:	4907      	ldr	r1, [pc, #28]	; (800bb2c <my_nmea_get_gsv_tns+0x6c>)
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	0018      	movs	r0, r3
 800bb14:	f001 fcfa 	bl	800d50c <sscanf>
	free ( s ) ;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	0018      	movs	r0, r3
 800bb1c:	f000 fa50 	bl	800bfc0 <free>
	return tns ;
 800bb20:	193b      	adds	r3, r7, r4
 800bb22:	881b      	ldrh	r3, [r3, #0]
}
 800bb24:	0018      	movs	r0, r3
 800bb26:	46bd      	mov	sp, r7
 800bb28:	b006      	add	sp, #24
 800bb2a:	bdb0      	pop	{r4, r5, r7, pc}
 800bb2c:	08015bec 	.word	0x08015bec

0800bb30 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2209      	movs	r2, #9
 800bb3e:	212c      	movs	r1, #44	; 0x2c
 800bb40:	0018      	movs	r0, r3
 800bb42:	f7ff fba5 	bl	800b290 <my_find_char_position>
 800bb46:	0003      	movs	r3, r0
 800bb48:	001a      	movs	r2, r3
 800bb4a:	2417      	movs	r4, #23
 800bb4c:	193b      	adds	r3, r7, r4
 800bb4e:	3205      	adds	r2, #5
 800bb50:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bb52:	2003      	movs	r0, #3
 800bb54:	f000 fa2a 	bl	800bfac <malloc>
 800bb58:	0003      	movs	r3, r0
 800bb5a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bb5c:	193b      	adds	r3, r7, r4
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	18d1      	adds	r1, r2, r3
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2202      	movs	r2, #2
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f001 fd6c 	bl	800d646 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	3302      	adds	r3, #2
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bb76:	240e      	movs	r4, #14
 800bb78:	193a      	adds	r2, r7, r4
 800bb7a:	4909      	ldr	r1, [pc, #36]	; (800bba0 <my_nmea_get_rmc_date_yy+0x70>)
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f001 fcc4 	bl	800d50c <sscanf>
	free ( s ) ;
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	0018      	movs	r0, r3
 800bb88:	f000 fa1a 	bl	800bfc0 <free>
	*yy = (uint8_t) temp ;
 800bb8c:	193b      	adds	r3, r7, r4
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	701a      	strb	r2, [r3, #0]

}
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	b007      	add	sp, #28
 800bb9c:	bd90      	pop	{r4, r7, pc}
 800bb9e:	46c0      	nop			; (mov r8, r8)
 800bba0:	08015bec 	.word	0x08015bec

0800bba4 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2209      	movs	r2, #9
 800bbb2:	212c      	movs	r1, #44	; 0x2c
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7ff fb6b 	bl	800b290 <my_find_char_position>
 800bbba:	0003      	movs	r3, r0
 800bbbc:	001a      	movs	r2, r3
 800bbbe:	2417      	movs	r4, #23
 800bbc0:	193b      	adds	r3, r7, r4
 800bbc2:	3203      	adds	r2, #3
 800bbc4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bbc6:	2003      	movs	r0, #3
 800bbc8:	f000 f9f0 	bl	800bfac <malloc>
 800bbcc:	0003      	movs	r3, r0
 800bbce:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bbd0:	193b      	adds	r3, r7, r4
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	18d1      	adds	r1, r2, r3
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f001 fd32 	bl	800d646 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	3302      	adds	r3, #2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bbea:	240e      	movs	r4, #14
 800bbec:	193a      	adds	r2, r7, r4
 800bbee:	4909      	ldr	r1, [pc, #36]	; (800bc14 <my_nmea_get_rmc_date_mm+0x70>)
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f001 fc8a 	bl	800d50c <sscanf>
	free ( s ) ;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f000 f9e0 	bl	800bfc0 <free>
	*mm = (uint8_t) temp ;
 800bc00:	193b      	adds	r3, r7, r4
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	701a      	strb	r2, [r3, #0]

}
 800bc0a:	46c0      	nop			; (mov r8, r8)
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	b007      	add	sp, #28
 800bc10:	bd90      	pop	{r4, r7, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	08015bec 	.word	0x08015bec

0800bc18 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2209      	movs	r2, #9
 800bc26:	212c      	movs	r1, #44	; 0x2c
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f7ff fb31 	bl	800b290 <my_find_char_position>
 800bc2e:	0003      	movs	r3, r0
 800bc30:	001a      	movs	r2, r3
 800bc32:	2417      	movs	r4, #23
 800bc34:	193b      	adds	r3, r7, r4
 800bc36:	3201      	adds	r2, #1
 800bc38:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bc3a:	2003      	movs	r0, #3
 800bc3c:	f000 f9b6 	bl	800bfac <malloc>
 800bc40:	0003      	movs	r3, r0
 800bc42:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bc44:	193b      	adds	r3, r7, r4
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	18d1      	adds	r1, r2, r3
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	0018      	movs	r0, r3
 800bc52:	f001 fcf8 	bl	800d646 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3302      	adds	r3, #2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bc5e:	240e      	movs	r4, #14
 800bc60:	193a      	adds	r2, r7, r4
 800bc62:	4909      	ldr	r1, [pc, #36]	; (800bc88 <my_nmea_get_rmc_date_dd+0x70>)
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	0018      	movs	r0, r3
 800bc68:	f001 fc50 	bl	800d50c <sscanf>
	free ( s ) ;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f000 f9a6 	bl	800bfc0 <free>
	*dd = (uint8_t) temp ;
 800bc74:	193b      	adds	r3, r7, r4
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	701a      	strb	r2, [r3, #0]

}
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	46bd      	mov	sp, r7
 800bc82:	b007      	add	sp, #28
 800bc84:	bd90      	pop	{r4, r7, pc}
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	08015bec 	.word	0x08015bec

0800bc8c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800bc8c:	b590      	push	{r4, r7, lr}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	212c      	movs	r1, #44	; 0x2c
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	f7ff faf7 	bl	800b290 <my_find_char_position>
 800bca2:	0003      	movs	r3, r0
 800bca4:	001a      	movs	r2, r3
 800bca6:	2417      	movs	r4, #23
 800bca8:	193b      	adds	r3, r7, r4
 800bcaa:	3201      	adds	r2, #1
 800bcac:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bcae:	2003      	movs	r0, #3
 800bcb0:	f000 f97c 	bl	800bfac <malloc>
 800bcb4:	0003      	movs	r3, r0
 800bcb6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bcb8:	193b      	adds	r3, r7, r4
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	18d1      	adds	r1, r2, r3
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	f001 fcbe 	bl	800d646 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3302      	adds	r3, #2
 800bcce:	2200      	movs	r2, #0
 800bcd0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bcd2:	240e      	movs	r4, #14
 800bcd4:	193a      	adds	r2, r7, r4
 800bcd6:	4909      	ldr	r1, [pc, #36]	; (800bcfc <my_nmea_get_rmc_utc_hh+0x70>)
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	0018      	movs	r0, r3
 800bcdc:	f001 fc16 	bl	800d50c <sscanf>
	free ( s ) ;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	0018      	movs	r0, r3
 800bce4:	f000 f96c 	bl	800bfc0 <free>
	*hh = (uint8_t) temp ;
 800bce8:	193b      	adds	r3, r7, r4
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	701a      	strb	r2, [r3, #0]

}
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	b007      	add	sp, #28
 800bcf8:	bd90      	pop	{r4, r7, pc}
 800bcfa:	46c0      	nop			; (mov r8, r8)
 800bcfc:	08015bec 	.word	0x08015bec

0800bd00 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	212c      	movs	r1, #44	; 0x2c
 800bd10:	0018      	movs	r0, r3
 800bd12:	f7ff fabd 	bl	800b290 <my_find_char_position>
 800bd16:	0003      	movs	r3, r0
 800bd18:	001a      	movs	r2, r3
 800bd1a:	2417      	movs	r4, #23
 800bd1c:	193b      	adds	r3, r7, r4
 800bd1e:	3203      	adds	r2, #3
 800bd20:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bd22:	2003      	movs	r0, #3
 800bd24:	f000 f942 	bl	800bfac <malloc>
 800bd28:	0003      	movs	r3, r0
 800bd2a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bd2c:	193b      	adds	r3, r7, r4
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	18d1      	adds	r1, r2, r3
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2202      	movs	r2, #2
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f001 fc84 	bl	800d646 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	3302      	adds	r3, #2
 800bd42:	2200      	movs	r2, #0
 800bd44:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bd46:	240e      	movs	r4, #14
 800bd48:	193a      	adds	r2, r7, r4
 800bd4a:	4909      	ldr	r1, [pc, #36]	; (800bd70 <my_nmea_get_rmc_utc_mm+0x70>)
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f001 fbdc 	bl	800d50c <sscanf>
	free ( s ) ;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	0018      	movs	r0, r3
 800bd58:	f000 f932 	bl	800bfc0 <free>
	*mm = (uint8_t) temp ;
 800bd5c:	193b      	adds	r3, r7, r4
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	701a      	strb	r2, [r3, #0]

}
 800bd66:	46c0      	nop			; (mov r8, r8)
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	b007      	add	sp, #28
 800bd6c:	bd90      	pop	{r4, r7, pc}
 800bd6e:	46c0      	nop			; (mov r8, r8)
 800bd70:	08015bec 	.word	0x08015bec

0800bd74 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800bd74:	b590      	push	{r4, r7, lr}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2201      	movs	r2, #1
 800bd82:	212c      	movs	r1, #44	; 0x2c
 800bd84:	0018      	movs	r0, r3
 800bd86:	f7ff fa83 	bl	800b290 <my_find_char_position>
 800bd8a:	0003      	movs	r3, r0
 800bd8c:	001a      	movs	r2, r3
 800bd8e:	2417      	movs	r4, #23
 800bd90:	193b      	adds	r3, r7, r4
 800bd92:	3205      	adds	r2, #5
 800bd94:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bd96:	2003      	movs	r0, #3
 800bd98:	f000 f908 	bl	800bfac <malloc>
 800bd9c:	0003      	movs	r3, r0
 800bd9e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bda0:	193b      	adds	r3, r7, r4
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2202      	movs	r2, #2
 800bdac:	0018      	movs	r0, r3
 800bdae:	f001 fc4a 	bl	800d646 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	3302      	adds	r3, #2
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bdba:	240e      	movs	r4, #14
 800bdbc:	193a      	adds	r2, r7, r4
 800bdbe:	4909      	ldr	r1, [pc, #36]	; (800bde4 <my_nmea_get_rmc_utc_ss+0x70>)
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	0018      	movs	r0, r3
 800bdc4:	f001 fba2 	bl	800d50c <sscanf>
	free ( s ) ;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	0018      	movs	r0, r3
 800bdcc:	f000 f8f8 	bl	800bfc0 <free>
	*ss = (uint8_t) temp ;
 800bdd0:	193b      	adds	r3, r7, r4
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	701a      	strb	r2, [r3, #0]

}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	46bd      	mov	sp, r7
 800bdde:	b007      	add	sp, #28
 800bde0:	bd90      	pop	{r4, r7, pc}
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	08015bec 	.word	0x08015bec

0800bde8 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800bde8:	b590      	push	{r4, r7, lr}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	212c      	movs	r1, #44	; 0x2c
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	f7ff fa49 	bl	800b290 <my_find_char_position>
 800bdfe:	0003      	movs	r3, r0
 800be00:	001a      	movs	r2, r3
 800be02:	240f      	movs	r4, #15
 800be04:	193b      	adds	r3, r7, r4
 800be06:	3208      	adds	r2, #8
 800be08:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800be0a:	2004      	movs	r0, #4
 800be0c:	f000 f8ce 	bl	800bfac <malloc>
 800be10:	0003      	movs	r3, r0
 800be12:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800be14:	193b      	adds	r3, r7, r4
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	18d1      	adds	r1, r2, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2203      	movs	r2, #3
 800be20:	0018      	movs	r0, r3
 800be22:	f001 fc10 	bl	800d646 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	3303      	adds	r3, #3
 800be2a:	2200      	movs	r2, #0
 800be2c:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	4906      	ldr	r1, [pc, #24]	; (800be4c <my_nmea_get_rmc_utc_sss+0x64>)
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	0018      	movs	r0, r3
 800be36:	f001 fb69 	bl	800d50c <sscanf>
	free ( s ) ;
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	0018      	movs	r0, r3
 800be3e:	f000 f8bf 	bl	800bfc0 <free>
}
 800be42:	46c0      	nop			; (mov r8, r8)
 800be44:	46bd      	mov	sp, r7
 800be46:	b005      	add	sp, #20
 800be48:	bd90      	pop	{r4, r7, pc}
 800be4a:	46c0      	nop			; (mov r8, r8)
 800be4c:	08015bf0 	.word	0x08015bf0

0800be50 <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	0018      	movs	r0, r3
 800be5c:	f7f4 f952 	bl	8000104 <strlen>
 800be60:	0003      	movs	r3, r0
 800be62:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800be64:	2317      	movs	r3, #23
 800be66:	18fb      	adds	r3, r7, r3
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800be6c:	2316      	movs	r3, #22
 800be6e:	18fb      	adds	r3, r7, r3
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	2b02      	cmp	r3, #2
 800be78:	d902      	bls.n	800be80 <my_tracker_api_is_cmd+0x30>
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d901      	bls.n	800be84 <my_tracker_api_is_cmd+0x34>
		return false ;
 800be80:	2300      	movs	r3, #0
 800be82:	e04b      	b.n	800bf1c <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800be84:	2317      	movs	r3, #23
 800be86:	18fb      	adds	r3, r7, r3
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	e025      	b.n	800beda <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800be8e:	2317      	movs	r3, #23
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	18d3      	adds	r3, r2, r3
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	2b2c      	cmp	r3, #44	; 0x2c
 800be9c:	d106      	bne.n	800beac <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800be9e:	2116      	movs	r1, #22
 800bea0:	187b      	adds	r3, r7, r1
 800bea2:	781a      	ldrb	r2, [r3, #0]
 800bea4:	187b      	adds	r3, r7, r1
 800bea6:	3201      	adds	r2, #1
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e010      	b.n	800bece <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800beac:	2117      	movs	r1, #23
 800beae:	187b      	adds	r3, r7, r1
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	18d3      	adds	r3, r2, r3
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b2f      	cmp	r3, #47	; 0x2f
 800beba:	d906      	bls.n	800beca <my_tracker_api_is_cmd+0x7a>
 800bebc:	187b      	adds	r3, r7, r1
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	18d3      	adds	r3, r2, r3
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b39      	cmp	r3, #57	; 0x39
 800bec8:	d901      	bls.n	800bece <my_tracker_api_is_cmd+0x7e>
			return false;
 800beca:	2300      	movs	r3, #0
 800becc:	e026      	b.n	800bf1c <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800bece:	2117      	movs	r1, #23
 800bed0:	187b      	adds	r3, r7, r1
 800bed2:	781a      	ldrb	r2, [r3, #0]
 800bed4:	187b      	adds	r3, r7, r1
 800bed6:	3201      	adds	r2, #1
 800bed8:	701a      	strb	r2, [r3, #0]
 800beda:	2317      	movs	r3, #23
 800bedc:	18fb      	adds	r3, r7, r3
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d8d3      	bhi.n	800be8e <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800bee6:	2316      	movs	r3, #22
 800bee8:	18fb      	adds	r3, r7, r3
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d901      	bls.n	800bef4 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800bef0:	2300      	movs	r3, #0
 800bef2:	e013      	b.n	800bf1c <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	212c      	movs	r1, #44	; 0x2c
 800bef8:	0018      	movs	r0, r3
 800befa:	f001 fb85 	bl	800d608 <strchr>
 800befe:	0003      	movs	r3, r0
 800bf00:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d802      	bhi.n	800bf16 <my_tracker_api_is_cmd+0xc6>
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d101      	bne.n	800bf1a <my_tracker_api_is_cmd+0xca>
		return false ;
 800bf16:	2300      	movs	r3, #0
 800bf18:	e000      	b.n	800bf1c <my_tracker_api_is_cmd+0xcc>

	return true ;
 800bf1a:	2301      	movs	r3, #1
}
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	b006      	add	sp, #24
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800bf40:	4a19      	ldr	r2, [pc, #100]	; (800bfa8 <my_tracker_api_parse_cmd+0x84>)
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	0011      	movs	r1, r2
 800bf46:	0018      	movs	r0, r3
 800bf48:	f001 fb92 	bl	800d670 <strtok>
 800bf4c:	0003      	movs	r3, r0
 800bf4e:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	0018      	movs	r0, r3
 800bf54:	f7ff fb3e 	bl	800b5d4 <my_conv_string_2_uint32_t>
 800bf58:	0003      	movs	r3, r0
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800bf60:	4b11      	ldr	r3, [pc, #68]	; (800bfa8 <my_tracker_api_parse_cmd+0x84>)
 800bf62:	0019      	movs	r1, r3
 800bf64:	2000      	movs	r0, #0
 800bf66:	f001 fb83 	bl	800d670 <strtok>
 800bf6a:	0003      	movs	r3, r0
 800bf6c:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	0018      	movs	r0, r3
 800bf72:	f7ff fb2f 	bl	800b5d4 <my_conv_string_2_uint32_t>
 800bf76:	0002      	movs	r2, r0
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <my_tracker_api_parse_cmd+0x84>)
 800bf7e:	0019      	movs	r1, r3
 800bf80:	2000      	movs	r0, #0
 800bf82:	f001 fb75 	bl	800d670 <strtok>
 800bf86:	0003      	movs	r3, r0
 800bf88:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <my_tracker_api_parse_cmd+0x74>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <my_tracker_api_parse_cmd+0x78>
		return false ;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e000      	b.n	800bf9e <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800bf9c:	2301      	movs	r3, #1
}
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b004      	add	sp, #16
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	08015bf4 	.word	0x08015bf4

0800bfac <malloc>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	4b03      	ldr	r3, [pc, #12]	; (800bfbc <malloc+0x10>)
 800bfb0:	0001      	movs	r1, r0
 800bfb2:	6818      	ldr	r0, [r3, #0]
 800bfb4:	f000 f80e 	bl	800bfd4 <_malloc_r>
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	200006d0 	.word	0x200006d0

0800bfc0 <free>:
 800bfc0:	b510      	push	{r4, lr}
 800bfc2:	4b03      	ldr	r3, [pc, #12]	; (800bfd0 <free+0x10>)
 800bfc4:	0001      	movs	r1, r0
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	f001 fcbe 	bl	800d948 <_free_r>
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	46c0      	nop			; (mov r8, r8)
 800bfd0:	200006d0 	.word	0x200006d0

0800bfd4 <_malloc_r>:
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	000d      	movs	r5, r1
 800bfd8:	b087      	sub	sp, #28
 800bfda:	350b      	adds	r5, #11
 800bfdc:	9001      	str	r0, [sp, #4]
 800bfde:	2d16      	cmp	r5, #22
 800bfe0:	d908      	bls.n	800bff4 <_malloc_r+0x20>
 800bfe2:	2207      	movs	r2, #7
 800bfe4:	4395      	bics	r5, r2
 800bfe6:	d506      	bpl.n	800bff6 <_malloc_r+0x22>
 800bfe8:	230c      	movs	r3, #12
 800bfea:	9a01      	ldr	r2, [sp, #4]
 800bfec:	6013      	str	r3, [r2, #0]
 800bfee:	2000      	movs	r0, #0
 800bff0:	b007      	add	sp, #28
 800bff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bff4:	2510      	movs	r5, #16
 800bff6:	42a9      	cmp	r1, r5
 800bff8:	d8f6      	bhi.n	800bfe8 <_malloc_r+0x14>
 800bffa:	9801      	ldr	r0, [sp, #4]
 800bffc:	f000 f9fe 	bl	800c3fc <__malloc_lock>
 800c000:	23fc      	movs	r3, #252	; 0xfc
 800c002:	4ebe      	ldr	r6, [pc, #760]	; (800c2fc <_malloc_r+0x328>)
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	429d      	cmp	r5, r3
 800c008:	d219      	bcs.n	800c03e <_malloc_r+0x6a>
 800c00a:	002a      	movs	r2, r5
 800c00c:	3208      	adds	r2, #8
 800c00e:	18b2      	adds	r2, r6, r2
 800c010:	0011      	movs	r1, r2
 800c012:	6854      	ldr	r4, [r2, #4]
 800c014:	3908      	subs	r1, #8
 800c016:	08eb      	lsrs	r3, r5, #3
 800c018:	428c      	cmp	r4, r1
 800c01a:	d103      	bne.n	800c024 <_malloc_r+0x50>
 800c01c:	68d4      	ldr	r4, [r2, #12]
 800c01e:	3302      	adds	r3, #2
 800c020:	42a2      	cmp	r2, r4
 800c022:	d022      	beq.n	800c06a <_malloc_r+0x96>
 800c024:	2203      	movs	r2, #3
 800c026:	6863      	ldr	r3, [r4, #4]
 800c028:	68a1      	ldr	r1, [r4, #8]
 800c02a:	4393      	bics	r3, r2
 800c02c:	68e2      	ldr	r2, [r4, #12]
 800c02e:	18e3      	adds	r3, r4, r3
 800c030:	60ca      	str	r2, [r1, #12]
 800c032:	6091      	str	r1, [r2, #8]
 800c034:	2201      	movs	r2, #1
 800c036:	6859      	ldr	r1, [r3, #4]
 800c038:	430a      	orrs	r2, r1
 800c03a:	605a      	str	r2, [r3, #4]
 800c03c:	e02a      	b.n	800c094 <_malloc_r+0xc0>
 800c03e:	233f      	movs	r3, #63	; 0x3f
 800c040:	0a6a      	lsrs	r2, r5, #9
 800c042:	d003      	beq.n	800c04c <_malloc_r+0x78>
 800c044:	2a04      	cmp	r2, #4
 800c046:	d82b      	bhi.n	800c0a0 <_malloc_r+0xcc>
 800c048:	09ab      	lsrs	r3, r5, #6
 800c04a:	3338      	adds	r3, #56	; 0x38
 800c04c:	2203      	movs	r2, #3
 800c04e:	4694      	mov	ip, r2
 800c050:	00d9      	lsls	r1, r3, #3
 800c052:	1989      	adds	r1, r1, r6
 800c054:	68cc      	ldr	r4, [r1, #12]
 800c056:	428c      	cmp	r4, r1
 800c058:	d006      	beq.n	800c068 <_malloc_r+0x94>
 800c05a:	4660      	mov	r0, ip
 800c05c:	6862      	ldr	r2, [r4, #4]
 800c05e:	4382      	bics	r2, r0
 800c060:	1b57      	subs	r7, r2, r5
 800c062:	2f0f      	cmp	r7, #15
 800c064:	dd34      	ble.n	800c0d0 <_malloc_r+0xfc>
 800c066:	3b01      	subs	r3, #1
 800c068:	3301      	adds	r3, #1
 800c06a:	6934      	ldr	r4, [r6, #16]
 800c06c:	49a4      	ldr	r1, [pc, #656]	; (800c300 <_malloc_r+0x32c>)
 800c06e:	428c      	cmp	r4, r1
 800c070:	d055      	beq.n	800c11e <_malloc_r+0x14a>
 800c072:	2003      	movs	r0, #3
 800c074:	6862      	ldr	r2, [r4, #4]
 800c076:	4382      	bics	r2, r0
 800c078:	1b50      	subs	r0, r2, r5
 800c07a:	280f      	cmp	r0, #15
 800c07c:	dd36      	ble.n	800c0ec <_malloc_r+0x118>
 800c07e:	2301      	movs	r3, #1
 800c080:	1967      	adds	r7, r4, r5
 800c082:	431d      	orrs	r5, r3
 800c084:	4303      	orrs	r3, r0
 800c086:	6065      	str	r5, [r4, #4]
 800c088:	6177      	str	r7, [r6, #20]
 800c08a:	6137      	str	r7, [r6, #16]
 800c08c:	60f9      	str	r1, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607b      	str	r3, [r7, #4]
 800c092:	50a0      	str	r0, [r4, r2]
 800c094:	9801      	ldr	r0, [sp, #4]
 800c096:	f000 f9b9 	bl	800c40c <__malloc_unlock>
 800c09a:	0020      	movs	r0, r4
 800c09c:	3008      	adds	r0, #8
 800c09e:	e7a7      	b.n	800bff0 <_malloc_r+0x1c>
 800c0a0:	2a14      	cmp	r2, #20
 800c0a2:	d802      	bhi.n	800c0aa <_malloc_r+0xd6>
 800c0a4:	0013      	movs	r3, r2
 800c0a6:	335b      	adds	r3, #91	; 0x5b
 800c0a8:	e7d0      	b.n	800c04c <_malloc_r+0x78>
 800c0aa:	2a54      	cmp	r2, #84	; 0x54
 800c0ac:	d802      	bhi.n	800c0b4 <_malloc_r+0xe0>
 800c0ae:	0b2b      	lsrs	r3, r5, #12
 800c0b0:	336e      	adds	r3, #110	; 0x6e
 800c0b2:	e7cb      	b.n	800c04c <_malloc_r+0x78>
 800c0b4:	23aa      	movs	r3, #170	; 0xaa
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d802      	bhi.n	800c0c2 <_malloc_r+0xee>
 800c0bc:	0beb      	lsrs	r3, r5, #15
 800c0be:	3377      	adds	r3, #119	; 0x77
 800c0c0:	e7c4      	b.n	800c04c <_malloc_r+0x78>
 800c0c2:	4990      	ldr	r1, [pc, #576]	; (800c304 <_malloc_r+0x330>)
 800c0c4:	237e      	movs	r3, #126	; 0x7e
 800c0c6:	428a      	cmp	r2, r1
 800c0c8:	d8c0      	bhi.n	800c04c <_malloc_r+0x78>
 800c0ca:	0cab      	lsrs	r3, r5, #18
 800c0cc:	337c      	adds	r3, #124	; 0x7c
 800c0ce:	e7bd      	b.n	800c04c <_malloc_r+0x78>
 800c0d0:	68e0      	ldr	r0, [r4, #12]
 800c0d2:	2f00      	cmp	r7, #0
 800c0d4:	db08      	blt.n	800c0e8 <_malloc_r+0x114>
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	60d8      	str	r0, [r3, #12]
 800c0da:	6083      	str	r3, [r0, #8]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	18a2      	adds	r2, r4, r2
 800c0e0:	6851      	ldr	r1, [r2, #4]
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	6053      	str	r3, [r2, #4]
 800c0e6:	e7d5      	b.n	800c094 <_malloc_r+0xc0>
 800c0e8:	0004      	movs	r4, r0
 800c0ea:	e7b4      	b.n	800c056 <_malloc_r+0x82>
 800c0ec:	6171      	str	r1, [r6, #20]
 800c0ee:	6131      	str	r1, [r6, #16]
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	daf3      	bge.n	800c0dc <_malloc_r+0x108>
 800c0f4:	6871      	ldr	r1, [r6, #4]
 800c0f6:	468c      	mov	ip, r1
 800c0f8:	2180      	movs	r1, #128	; 0x80
 800c0fa:	0089      	lsls	r1, r1, #2
 800c0fc:	428a      	cmp	r2, r1
 800c0fe:	d300      	bcc.n	800c102 <_malloc_r+0x12e>
 800c100:	e08c      	b.n	800c21c <_malloc_r+0x248>
 800c102:	08d1      	lsrs	r1, r2, #3
 800c104:	0950      	lsrs	r0, r2, #5
 800c106:	2201      	movs	r2, #1
 800c108:	4082      	lsls	r2, r0
 800c10a:	4660      	mov	r0, ip
 800c10c:	4302      	orrs	r2, r0
 800c10e:	6072      	str	r2, [r6, #4]
 800c110:	00ca      	lsls	r2, r1, #3
 800c112:	1992      	adds	r2, r2, r6
 800c114:	6891      	ldr	r1, [r2, #8]
 800c116:	60e2      	str	r2, [r4, #12]
 800c118:	60a1      	str	r1, [r4, #8]
 800c11a:	6094      	str	r4, [r2, #8]
 800c11c:	60cc      	str	r4, [r1, #12]
 800c11e:	2201      	movs	r2, #1
 800c120:	4876      	ldr	r0, [pc, #472]	; (800c2fc <_malloc_r+0x328>)
 800c122:	1099      	asrs	r1, r3, #2
 800c124:	408a      	lsls	r2, r1
 800c126:	6841      	ldr	r1, [r0, #4]
 800c128:	4291      	cmp	r1, r2
 800c12a:	d328      	bcc.n	800c17e <_malloc_r+0x1aa>
 800c12c:	420a      	tst	r2, r1
 800c12e:	d105      	bne.n	800c13c <_malloc_r+0x168>
 800c130:	2403      	movs	r4, #3
 800c132:	43a3      	bics	r3, r4
 800c134:	0052      	lsls	r2, r2, #1
 800c136:	3304      	adds	r3, #4
 800c138:	420a      	tst	r2, r1
 800c13a:	d0fb      	beq.n	800c134 <_malloc_r+0x160>
 800c13c:	496f      	ldr	r1, [pc, #444]	; (800c2fc <_malloc_r+0x328>)
 800c13e:	9104      	str	r1, [sp, #16]
 800c140:	00d9      	lsls	r1, r3, #3
 800c142:	1841      	adds	r1, r0, r1
 800c144:	468c      	mov	ip, r1
 800c146:	000f      	movs	r7, r1
 800c148:	9302      	str	r3, [sp, #8]
 800c14a:	68fc      	ldr	r4, [r7, #12]
 800c14c:	42bc      	cmp	r4, r7
 800c14e:	d000      	beq.n	800c152 <_malloc_r+0x17e>
 800c150:	e09b      	b.n	800c28a <_malloc_r+0x2b6>
 800c152:	2403      	movs	r4, #3
 800c154:	9902      	ldr	r1, [sp, #8]
 800c156:	3708      	adds	r7, #8
 800c158:	3101      	adds	r1, #1
 800c15a:	9102      	str	r1, [sp, #8]
 800c15c:	4221      	tst	r1, r4
 800c15e:	d1f4      	bne.n	800c14a <_malloc_r+0x176>
 800c160:	2103      	movs	r1, #3
 800c162:	420b      	tst	r3, r1
 800c164:	d000      	beq.n	800c168 <_malloc_r+0x194>
 800c166:	e0b7      	b.n	800c2d8 <_malloc_r+0x304>
 800c168:	6843      	ldr	r3, [r0, #4]
 800c16a:	4393      	bics	r3, r2
 800c16c:	6043      	str	r3, [r0, #4]
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	0052      	lsls	r2, r2, #1
 800c172:	6859      	ldr	r1, [r3, #4]
 800c174:	4291      	cmp	r1, r2
 800c176:	d302      	bcc.n	800c17e <_malloc_r+0x1aa>
 800c178:	2a00      	cmp	r2, #0
 800c17a:	d000      	beq.n	800c17e <_malloc_r+0x1aa>
 800c17c:	e0bb      	b.n	800c2f6 <_malloc_r+0x322>
 800c17e:	2203      	movs	r2, #3
 800c180:	6883      	ldr	r3, [r0, #8]
 800c182:	9302      	str	r3, [sp, #8]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	4393      	bics	r3, r2
 800c188:	9303      	str	r3, [sp, #12]
 800c18a:	42ab      	cmp	r3, r5
 800c18c:	d303      	bcc.n	800c196 <_malloc_r+0x1c2>
 800c18e:	1b59      	subs	r1, r3, r5
 800c190:	290f      	cmp	r1, #15
 800c192:	dd00      	ble.n	800c196 <_malloc_r+0x1c2>
 800c194:	e123      	b.n	800c3de <_malloc_r+0x40a>
 800c196:	9b02      	ldr	r3, [sp, #8]
 800c198:	9a03      	ldr	r2, [sp, #12]
 800c19a:	2008      	movs	r0, #8
 800c19c:	189e      	adds	r6, r3, r2
 800c19e:	4b5a      	ldr	r3, [pc, #360]	; (800c308 <_malloc_r+0x334>)
 800c1a0:	681f      	ldr	r7, [r3, #0]
 800c1a2:	f001 fb4b 	bl	800d83c <sysconf>
 800c1a6:	4b59      	ldr	r3, [pc, #356]	; (800c30c <_malloc_r+0x338>)
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	197f      	adds	r7, r7, r5
 800c1ae:	9004      	str	r0, [sp, #16]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	d003      	beq.n	800c1bc <_malloc_r+0x1e8>
 800c1b4:	1e7b      	subs	r3, r7, #1
 800c1b6:	181b      	adds	r3, r3, r0
 800c1b8:	4247      	negs	r7, r0
 800c1ba:	401f      	ands	r7, r3
 800c1bc:	0039      	movs	r1, r7
 800c1be:	9801      	ldr	r0, [sp, #4]
 800c1c0:	f001 fae8 	bl	800d794 <_sbrk_r>
 800c1c4:	0004      	movs	r4, r0
 800c1c6:	1c43      	adds	r3, r0, #1
 800c1c8:	d100      	bne.n	800c1cc <_malloc_r+0x1f8>
 800c1ca:	e0de      	b.n	800c38a <_malloc_r+0x3b6>
 800c1cc:	4286      	cmp	r6, r0
 800c1ce:	d904      	bls.n	800c1da <_malloc_r+0x206>
 800c1d0:	4b4a      	ldr	r3, [pc, #296]	; (800c2fc <_malloc_r+0x328>)
 800c1d2:	9a02      	ldr	r2, [sp, #8]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d000      	beq.n	800c1da <_malloc_r+0x206>
 800c1d8:	e0d7      	b.n	800c38a <_malloc_r+0x3b6>
 800c1da:	4a4d      	ldr	r2, [pc, #308]	; (800c310 <_malloc_r+0x33c>)
 800c1dc:	6813      	ldr	r3, [r2, #0]
 800c1de:	18fb      	adds	r3, r7, r3
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	9a04      	ldr	r2, [sp, #16]
 800c1e4:	3a01      	subs	r2, #1
 800c1e6:	42a6      	cmp	r6, r4
 800c1e8:	d000      	beq.n	800c1ec <_malloc_r+0x218>
 800c1ea:	e097      	b.n	800c31c <_malloc_r+0x348>
 800c1ec:	4216      	tst	r6, r2
 800c1ee:	d000      	beq.n	800c1f2 <_malloc_r+0x21e>
 800c1f0:	e094      	b.n	800c31c <_malloc_r+0x348>
 800c1f2:	4b42      	ldr	r3, [pc, #264]	; (800c2fc <_malloc_r+0x328>)
 800c1f4:	689a      	ldr	r2, [r3, #8]
 800c1f6:	9b03      	ldr	r3, [sp, #12]
 800c1f8:	19df      	adds	r7, r3, r7
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	433b      	orrs	r3, r7
 800c1fe:	6053      	str	r3, [r2, #4]
 800c200:	4b43      	ldr	r3, [pc, #268]	; (800c310 <_malloc_r+0x33c>)
 800c202:	4a44      	ldr	r2, [pc, #272]	; (800c314 <_malloc_r+0x340>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6811      	ldr	r1, [r2, #0]
 800c208:	428b      	cmp	r3, r1
 800c20a:	d900      	bls.n	800c20e <_malloc_r+0x23a>
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	4a42      	ldr	r2, [pc, #264]	; (800c318 <_malloc_r+0x344>)
 800c210:	6811      	ldr	r1, [r2, #0]
 800c212:	428b      	cmp	r3, r1
 800c214:	d800      	bhi.n	800c218 <_malloc_r+0x244>
 800c216:	e0b8      	b.n	800c38a <_malloc_r+0x3b6>
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	e0b6      	b.n	800c38a <_malloc_r+0x3b6>
 800c21c:	0a50      	lsrs	r0, r2, #9
 800c21e:	2804      	cmp	r0, #4
 800c220:	d811      	bhi.n	800c246 <_malloc_r+0x272>
 800c222:	0991      	lsrs	r1, r2, #6
 800c224:	3138      	adds	r1, #56	; 0x38
 800c226:	00cf      	lsls	r7, r1, #3
 800c228:	19bf      	adds	r7, r7, r6
 800c22a:	68b8      	ldr	r0, [r7, #8]
 800c22c:	4287      	cmp	r7, r0
 800c22e:	d125      	bne.n	800c27c <_malloc_r+0x2a8>
 800c230:	2201      	movs	r2, #1
 800c232:	1089      	asrs	r1, r1, #2
 800c234:	408a      	lsls	r2, r1
 800c236:	4661      	mov	r1, ip
 800c238:	430a      	orrs	r2, r1
 800c23a:	6072      	str	r2, [r6, #4]
 800c23c:	60e7      	str	r7, [r4, #12]
 800c23e:	60a0      	str	r0, [r4, #8]
 800c240:	60bc      	str	r4, [r7, #8]
 800c242:	60c4      	str	r4, [r0, #12]
 800c244:	e76b      	b.n	800c11e <_malloc_r+0x14a>
 800c246:	2814      	cmp	r0, #20
 800c248:	d802      	bhi.n	800c250 <_malloc_r+0x27c>
 800c24a:	0001      	movs	r1, r0
 800c24c:	315b      	adds	r1, #91	; 0x5b
 800c24e:	e7ea      	b.n	800c226 <_malloc_r+0x252>
 800c250:	2854      	cmp	r0, #84	; 0x54
 800c252:	d802      	bhi.n	800c25a <_malloc_r+0x286>
 800c254:	0b11      	lsrs	r1, r2, #12
 800c256:	316e      	adds	r1, #110	; 0x6e
 800c258:	e7e5      	b.n	800c226 <_malloc_r+0x252>
 800c25a:	21aa      	movs	r1, #170	; 0xaa
 800c25c:	0049      	lsls	r1, r1, #1
 800c25e:	4288      	cmp	r0, r1
 800c260:	d802      	bhi.n	800c268 <_malloc_r+0x294>
 800c262:	0bd1      	lsrs	r1, r2, #15
 800c264:	3177      	adds	r1, #119	; 0x77
 800c266:	e7de      	b.n	800c226 <_malloc_r+0x252>
 800c268:	4f26      	ldr	r7, [pc, #152]	; (800c304 <_malloc_r+0x330>)
 800c26a:	217e      	movs	r1, #126	; 0x7e
 800c26c:	42b8      	cmp	r0, r7
 800c26e:	d8da      	bhi.n	800c226 <_malloc_r+0x252>
 800c270:	0c91      	lsrs	r1, r2, #18
 800c272:	317c      	adds	r1, #124	; 0x7c
 800c274:	e7d7      	b.n	800c226 <_malloc_r+0x252>
 800c276:	6880      	ldr	r0, [r0, #8]
 800c278:	4287      	cmp	r7, r0
 800c27a:	d004      	beq.n	800c286 <_malloc_r+0x2b2>
 800c27c:	2603      	movs	r6, #3
 800c27e:	6841      	ldr	r1, [r0, #4]
 800c280:	43b1      	bics	r1, r6
 800c282:	4291      	cmp	r1, r2
 800c284:	d8f7      	bhi.n	800c276 <_malloc_r+0x2a2>
 800c286:	68c7      	ldr	r7, [r0, #12]
 800c288:	e7d8      	b.n	800c23c <_malloc_r+0x268>
 800c28a:	2603      	movs	r6, #3
 800c28c:	6861      	ldr	r1, [r4, #4]
 800c28e:	43b1      	bics	r1, r6
 800c290:	9103      	str	r1, [sp, #12]
 800c292:	68e6      	ldr	r6, [r4, #12]
 800c294:	1b49      	subs	r1, r1, r5
 800c296:	290f      	cmp	r1, #15
 800c298:	dd10      	ble.n	800c2bc <_malloc_r+0x2e8>
 800c29a:	2201      	movs	r2, #1
 800c29c:	1963      	adds	r3, r4, r5
 800c29e:	4315      	orrs	r5, r2
 800c2a0:	6065      	str	r5, [r4, #4]
 800c2a2:	68a5      	ldr	r5, [r4, #8]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	60ee      	str	r6, [r5, #12]
 800c2a8:	60b5      	str	r5, [r6, #8]
 800c2aa:	6143      	str	r3, [r0, #20]
 800c2ac:	6103      	str	r3, [r0, #16]
 800c2ae:	4814      	ldr	r0, [pc, #80]	; (800c300 <_malloc_r+0x32c>)
 800c2b0:	605a      	str	r2, [r3, #4]
 800c2b2:	60d8      	str	r0, [r3, #12]
 800c2b4:	6098      	str	r0, [r3, #8]
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	50e1      	str	r1, [r4, r3]
 800c2ba:	e6eb      	b.n	800c094 <_malloc_r+0xc0>
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	db09      	blt.n	800c2d4 <_malloc_r+0x300>
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	18e1      	adds	r1, r4, r3
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	684a      	ldr	r2, [r1, #4]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	604b      	str	r3, [r1, #4]
 800c2cc:	68a3      	ldr	r3, [r4, #8]
 800c2ce:	60de      	str	r6, [r3, #12]
 800c2d0:	60b3      	str	r3, [r6, #8]
 800c2d2:	e6df      	b.n	800c094 <_malloc_r+0xc0>
 800c2d4:	0034      	movs	r4, r6
 800c2d6:	e739      	b.n	800c14c <_malloc_r+0x178>
 800c2d8:	2108      	movs	r1, #8
 800c2da:	4249      	negs	r1, r1
 800c2dc:	448c      	add	ip, r1
 800c2de:	4661      	mov	r1, ip
 800c2e0:	6889      	ldr	r1, [r1, #8]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	4561      	cmp	r1, ip
 800c2e6:	d100      	bne.n	800c2ea <_malloc_r+0x316>
 800c2e8:	e73a      	b.n	800c160 <_malloc_r+0x18c>
 800c2ea:	e740      	b.n	800c16e <_malloc_r+0x19a>
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	0052      	lsls	r2, r2, #1
 800c2f0:	420a      	tst	r2, r1
 800c2f2:	d0fb      	beq.n	800c2ec <_malloc_r+0x318>
 800c2f4:	e724      	b.n	800c140 <_malloc_r+0x16c>
 800c2f6:	9b02      	ldr	r3, [sp, #8]
 800c2f8:	e7fa      	b.n	800c2f0 <_malloc_r+0x31c>
 800c2fa:	46c0      	nop			; (mov r8, r8)
 800c2fc:	20000028 	.word	0x20000028
 800c300:	20000030 	.word	0x20000030
 800c304:	00000554 	.word	0x00000554
 800c308:	20000c84 	.word	0x20000c84
 800c30c:	20000430 	.word	0x20000430
 800c310:	20000c54 	.word	0x20000c54
 800c314:	20000c7c 	.word	0x20000c7c
 800c318:	20000c80 	.word	0x20000c80
 800c31c:	4934      	ldr	r1, [pc, #208]	; (800c3f0 <_malloc_r+0x41c>)
 800c31e:	6808      	ldr	r0, [r1, #0]
 800c320:	3001      	adds	r0, #1
 800c322:	d140      	bne.n	800c3a6 <_malloc_r+0x3d2>
 800c324:	600c      	str	r4, [r1, #0]
 800c326:	2107      	movs	r1, #7
 800c328:	0026      	movs	r6, r4
 800c32a:	2300      	movs	r3, #0
 800c32c:	400e      	ands	r6, r1
 800c32e:	420c      	tst	r4, r1
 800c330:	d002      	beq.n	800c338 <_malloc_r+0x364>
 800c332:	3308      	adds	r3, #8
 800c334:	1b9b      	subs	r3, r3, r6
 800c336:	18e4      	adds	r4, r4, r3
 800c338:	19e1      	adds	r1, r4, r7
 800c33a:	9105      	str	r1, [sp, #20]
 800c33c:	9f05      	ldr	r7, [sp, #20]
 800c33e:	9904      	ldr	r1, [sp, #16]
 800c340:	4017      	ands	r7, r2
 800c342:	18cb      	adds	r3, r1, r3
 800c344:	1bdf      	subs	r7, r3, r7
 800c346:	4017      	ands	r7, r2
 800c348:	0039      	movs	r1, r7
 800c34a:	9801      	ldr	r0, [sp, #4]
 800c34c:	f001 fa22 	bl	800d794 <_sbrk_r>
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	d107      	bne.n	800c364 <_malloc_r+0x390>
 800c354:	1e37      	subs	r7, r6, #0
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	d004      	beq.n	800c364 <_malloc_r+0x390>
 800c35a:	0030      	movs	r0, r6
 800c35c:	2700      	movs	r7, #0
 800c35e:	9b05      	ldr	r3, [sp, #20]
 800c360:	3808      	subs	r0, #8
 800c362:	1818      	adds	r0, r3, r0
 800c364:	4a23      	ldr	r2, [pc, #140]	; (800c3f4 <_malloc_r+0x420>)
 800c366:	1b00      	subs	r0, r0, r4
 800c368:	6813      	ldr	r3, [r2, #0]
 800c36a:	19c0      	adds	r0, r0, r7
 800c36c:	19db      	adds	r3, r3, r7
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	2201      	movs	r2, #1
 800c372:	4b21      	ldr	r3, [pc, #132]	; (800c3f8 <_malloc_r+0x424>)
 800c374:	9902      	ldr	r1, [sp, #8]
 800c376:	4310      	orrs	r0, r2
 800c378:	609c      	str	r4, [r3, #8]
 800c37a:	6060      	str	r0, [r4, #4]
 800c37c:	4299      	cmp	r1, r3
 800c37e:	d100      	bne.n	800c382 <_malloc_r+0x3ae>
 800c380:	e73e      	b.n	800c200 <_malloc_r+0x22c>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	2b0f      	cmp	r3, #15
 800c386:	d813      	bhi.n	800c3b0 <_malloc_r+0x3dc>
 800c388:	6062      	str	r2, [r4, #4]
 800c38a:	2203      	movs	r2, #3
 800c38c:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <_malloc_r+0x424>)
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	4393      	bics	r3, r2
 800c394:	1b59      	subs	r1, r3, r5
 800c396:	42ab      	cmp	r3, r5
 800c398:	d301      	bcc.n	800c39e <_malloc_r+0x3ca>
 800c39a:	290f      	cmp	r1, #15
 800c39c:	dc1f      	bgt.n	800c3de <_malloc_r+0x40a>
 800c39e:	9801      	ldr	r0, [sp, #4]
 800c3a0:	f000 f834 	bl	800c40c <__malloc_unlock>
 800c3a4:	e623      	b.n	800bfee <_malloc_r+0x1a>
 800c3a6:	4913      	ldr	r1, [pc, #76]	; (800c3f4 <_malloc_r+0x420>)
 800c3a8:	1ba6      	subs	r6, r4, r6
 800c3aa:	18f6      	adds	r6, r6, r3
 800c3ac:	600e      	str	r6, [r1, #0]
 800c3ae:	e7ba      	b.n	800c326 <_malloc_r+0x352>
 800c3b0:	2107      	movs	r1, #7
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	3b0c      	subs	r3, #12
 800c3b6:	438b      	bics	r3, r1
 800c3b8:	9902      	ldr	r1, [sp, #8]
 800c3ba:	6849      	ldr	r1, [r1, #4]
 800c3bc:	400a      	ands	r2, r1
 800c3be:	9902      	ldr	r1, [sp, #8]
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	604a      	str	r2, [r1, #4]
 800c3c4:	18ca      	adds	r2, r1, r3
 800c3c6:	2105      	movs	r1, #5
 800c3c8:	6051      	str	r1, [r2, #4]
 800c3ca:	6091      	str	r1, [r2, #8]
 800c3cc:	2b0f      	cmp	r3, #15
 800c3ce:	d800      	bhi.n	800c3d2 <_malloc_r+0x3fe>
 800c3d0:	e716      	b.n	800c200 <_malloc_r+0x22c>
 800c3d2:	9902      	ldr	r1, [sp, #8]
 800c3d4:	9801      	ldr	r0, [sp, #4]
 800c3d6:	3108      	adds	r1, #8
 800c3d8:	f001 fab6 	bl	800d948 <_free_r>
 800c3dc:	e710      	b.n	800c200 <_malloc_r+0x22c>
 800c3de:	2201      	movs	r2, #1
 800c3e0:	0013      	movs	r3, r2
 800c3e2:	4805      	ldr	r0, [pc, #20]	; (800c3f8 <_malloc_r+0x424>)
 800c3e4:	432b      	orrs	r3, r5
 800c3e6:	6884      	ldr	r4, [r0, #8]
 800c3e8:	6063      	str	r3, [r4, #4]
 800c3ea:	1963      	adds	r3, r4, r5
 800c3ec:	6083      	str	r3, [r0, #8]
 800c3ee:	e623      	b.n	800c038 <_malloc_r+0x64>
 800c3f0:	20000430 	.word	0x20000430
 800c3f4:	20000c54 	.word	0x20000c54
 800c3f8:	20000028 	.word	0x20000028

0800c3fc <__malloc_lock>:
 800c3fc:	b510      	push	{r4, lr}
 800c3fe:	4802      	ldr	r0, [pc, #8]	; (800c408 <__malloc_lock+0xc>)
 800c400:	f001 fa1a 	bl	800d838 <__retarget_lock_acquire_recursive>
 800c404:	bd10      	pop	{r4, pc}
 800c406:	46c0      	nop			; (mov r8, r8)
 800c408:	20000dc9 	.word	0x20000dc9

0800c40c <__malloc_unlock>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	4802      	ldr	r0, [pc, #8]	; (800c418 <__malloc_unlock+0xc>)
 800c410:	f001 fa13 	bl	800d83a <__retarget_lock_release_recursive>
 800c414:	bd10      	pop	{r4, pc}
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	20000dc9 	.word	0x20000dc9

0800c41c <sulp>:
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	0016      	movs	r6, r2
 800c420:	000d      	movs	r5, r1
 800c422:	f002 f9e7 	bl	800e7f4 <__ulp>
 800c426:	2e00      	cmp	r6, #0
 800c428:	d00d      	beq.n	800c446 <sulp+0x2a>
 800c42a:	236b      	movs	r3, #107	; 0x6b
 800c42c:	006a      	lsls	r2, r5, #1
 800c42e:	0d52      	lsrs	r2, r2, #21
 800c430:	1a9b      	subs	r3, r3, r2
 800c432:	2b00      	cmp	r3, #0
 800c434:	dd07      	ble.n	800c446 <sulp+0x2a>
 800c436:	2400      	movs	r4, #0
 800c438:	4a03      	ldr	r2, [pc, #12]	; (800c448 <sulp+0x2c>)
 800c43a:	051b      	lsls	r3, r3, #20
 800c43c:	189d      	adds	r5, r3, r2
 800c43e:	002b      	movs	r3, r5
 800c440:	0022      	movs	r2, r4
 800c442:	f7f5 f913 	bl	800166c <__aeabi_dmul>
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	3ff00000 	.word	0x3ff00000

0800c44c <_strtod_l>:
 800c44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c44e:	b0a1      	sub	sp, #132	; 0x84
 800c450:	9219      	str	r2, [sp, #100]	; 0x64
 800c452:	2200      	movs	r2, #0
 800c454:	2600      	movs	r6, #0
 800c456:	2700      	movs	r7, #0
 800c458:	9004      	str	r0, [sp, #16]
 800c45a:	9107      	str	r1, [sp, #28]
 800c45c:	921c      	str	r2, [sp, #112]	; 0x70
 800c45e:	911b      	str	r1, [sp, #108]	; 0x6c
 800c460:	780a      	ldrb	r2, [r1, #0]
 800c462:	2a2b      	cmp	r2, #43	; 0x2b
 800c464:	d055      	beq.n	800c512 <_strtod_l+0xc6>
 800c466:	d841      	bhi.n	800c4ec <_strtod_l+0xa0>
 800c468:	2a0d      	cmp	r2, #13
 800c46a:	d83b      	bhi.n	800c4e4 <_strtod_l+0x98>
 800c46c:	2a08      	cmp	r2, #8
 800c46e:	d83b      	bhi.n	800c4e8 <_strtod_l+0x9c>
 800c470:	2a00      	cmp	r2, #0
 800c472:	d044      	beq.n	800c4fe <_strtod_l+0xb2>
 800c474:	2200      	movs	r2, #0
 800c476:	920f      	str	r2, [sp, #60]	; 0x3c
 800c478:	2100      	movs	r1, #0
 800c47a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c47c:	9109      	str	r1, [sp, #36]	; 0x24
 800c47e:	782a      	ldrb	r2, [r5, #0]
 800c480:	2a30      	cmp	r2, #48	; 0x30
 800c482:	d000      	beq.n	800c486 <_strtod_l+0x3a>
 800c484:	e085      	b.n	800c592 <_strtod_l+0x146>
 800c486:	786a      	ldrb	r2, [r5, #1]
 800c488:	3120      	adds	r1, #32
 800c48a:	438a      	bics	r2, r1
 800c48c:	2a58      	cmp	r2, #88	; 0x58
 800c48e:	d000      	beq.n	800c492 <_strtod_l+0x46>
 800c490:	e075      	b.n	800c57e <_strtod_l+0x132>
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c496:	4a97      	ldr	r2, [pc, #604]	; (800c6f4 <_strtod_l+0x2a8>)
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	ab1c      	add	r3, sp, #112	; 0x70
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	9804      	ldr	r0, [sp, #16]
 800c4a0:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a2:	a91b      	add	r1, sp, #108	; 0x6c
 800c4a4:	f001 fb6c 	bl	800db80 <__gethex>
 800c4a8:	230f      	movs	r3, #15
 800c4aa:	0002      	movs	r2, r0
 800c4ac:	401a      	ands	r2, r3
 800c4ae:	0004      	movs	r4, r0
 800c4b0:	9205      	str	r2, [sp, #20]
 800c4b2:	4218      	tst	r0, r3
 800c4b4:	d005      	beq.n	800c4c2 <_strtod_l+0x76>
 800c4b6:	2a06      	cmp	r2, #6
 800c4b8:	d12d      	bne.n	800c516 <_strtod_l+0xca>
 800c4ba:	1c6b      	adds	r3, r5, #1
 800c4bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4be:	2300      	movs	r3, #0
 800c4c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <_strtod_l+0x82>
 800c4c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d01b      	beq.n	800c50c <_strtod_l+0xc0>
 800c4d4:	2380      	movs	r3, #128	; 0x80
 800c4d6:	0032      	movs	r2, r6
 800c4d8:	061b      	lsls	r3, r3, #24
 800c4da:	18fb      	adds	r3, r7, r3
 800c4dc:	0010      	movs	r0, r2
 800c4de:	0019      	movs	r1, r3
 800c4e0:	b021      	add	sp, #132	; 0x84
 800c4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e4:	2a20      	cmp	r2, #32
 800c4e6:	d1c5      	bne.n	800c474 <_strtod_l+0x28>
 800c4e8:	3101      	adds	r1, #1
 800c4ea:	e7b8      	b.n	800c45e <_strtod_l+0x12>
 800c4ec:	2a2d      	cmp	r2, #45	; 0x2d
 800c4ee:	d1c1      	bne.n	800c474 <_strtod_l+0x28>
 800c4f0:	3a2c      	subs	r2, #44	; 0x2c
 800c4f2:	920f      	str	r2, [sp, #60]	; 0x3c
 800c4f4:	1c4a      	adds	r2, r1, #1
 800c4f6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4f8:	784a      	ldrb	r2, [r1, #1]
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	d1bc      	bne.n	800c478 <_strtod_l+0x2c>
 800c4fe:	9b07      	ldr	r3, [sp, #28]
 800c500:	931b      	str	r3, [sp, #108]	; 0x6c
 800c502:	2300      	movs	r3, #0
 800c504:	930f      	str	r3, [sp, #60]	; 0x3c
 800c506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1dd      	bne.n	800c4c8 <_strtod_l+0x7c>
 800c50c:	0032      	movs	r2, r6
 800c50e:	003b      	movs	r3, r7
 800c510:	e7e4      	b.n	800c4dc <_strtod_l+0x90>
 800c512:	2200      	movs	r2, #0
 800c514:	e7ed      	b.n	800c4f2 <_strtod_l+0xa6>
 800c516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d007      	beq.n	800c52c <_strtod_l+0xe0>
 800c51c:	2135      	movs	r1, #53	; 0x35
 800c51e:	a81e      	add	r0, sp, #120	; 0x78
 800c520:	f002 fa59 	bl	800e9d6 <__copybits>
 800c524:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c526:	9804      	ldr	r0, [sp, #16]
 800c528:	f001 fe56 	bl	800e1d8 <_Bfree>
 800c52c:	9805      	ldr	r0, [sp, #20]
 800c52e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c530:	3801      	subs	r0, #1
 800c532:	2804      	cmp	r0, #4
 800c534:	d806      	bhi.n	800c544 <_strtod_l+0xf8>
 800c536:	f7f3 fded 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c53a:	0312      	.short	0x0312
 800c53c:	1e1c      	.short	0x1e1c
 800c53e:	12          	.byte	0x12
 800c53f:	00          	.byte	0x00
 800c540:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c542:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c544:	05e4      	lsls	r4, r4, #23
 800c546:	d502      	bpl.n	800c54e <_strtod_l+0x102>
 800c548:	2380      	movs	r3, #128	; 0x80
 800c54a:	061b      	lsls	r3, r3, #24
 800c54c:	431f      	orrs	r7, r3
 800c54e:	4b6a      	ldr	r3, [pc, #424]	; (800c6f8 <_strtod_l+0x2ac>)
 800c550:	423b      	tst	r3, r7
 800c552:	d1b6      	bne.n	800c4c2 <_strtod_l+0x76>
 800c554:	f001 f944 	bl	800d7e0 <__errno>
 800c558:	2322      	movs	r3, #34	; 0x22
 800c55a:	6003      	str	r3, [r0, #0]
 800c55c:	e7b1      	b.n	800c4c2 <_strtod_l+0x76>
 800c55e:	4967      	ldr	r1, [pc, #412]	; (800c6fc <_strtod_l+0x2b0>)
 800c560:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c562:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c564:	400a      	ands	r2, r1
 800c566:	4966      	ldr	r1, [pc, #408]	; (800c700 <_strtod_l+0x2b4>)
 800c568:	185b      	adds	r3, r3, r1
 800c56a:	051b      	lsls	r3, r3, #20
 800c56c:	431a      	orrs	r2, r3
 800c56e:	0017      	movs	r7, r2
 800c570:	e7e8      	b.n	800c544 <_strtod_l+0xf8>
 800c572:	4f61      	ldr	r7, [pc, #388]	; (800c6f8 <_strtod_l+0x2ac>)
 800c574:	e7e6      	b.n	800c544 <_strtod_l+0xf8>
 800c576:	2601      	movs	r6, #1
 800c578:	4f62      	ldr	r7, [pc, #392]	; (800c704 <_strtod_l+0x2b8>)
 800c57a:	4276      	negs	r6, r6
 800c57c:	e7e2      	b.n	800c544 <_strtod_l+0xf8>
 800c57e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	921b      	str	r2, [sp, #108]	; 0x6c
 800c584:	785b      	ldrb	r3, [r3, #1]
 800c586:	2b30      	cmp	r3, #48	; 0x30
 800c588:	d0f9      	beq.n	800c57e <_strtod_l+0x132>
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d099      	beq.n	800c4c2 <_strtod_l+0x76>
 800c58e:	2301      	movs	r3, #1
 800c590:	9309      	str	r3, [sp, #36]	; 0x24
 800c592:	2500      	movs	r5, #0
 800c594:	220a      	movs	r2, #10
 800c596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c598:	950d      	str	r5, [sp, #52]	; 0x34
 800c59a:	9310      	str	r3, [sp, #64]	; 0x40
 800c59c:	9508      	str	r5, [sp, #32]
 800c59e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c5a0:	7804      	ldrb	r4, [r0, #0]
 800c5a2:	0023      	movs	r3, r4
 800c5a4:	3b30      	subs	r3, #48	; 0x30
 800c5a6:	b2d9      	uxtb	r1, r3
 800c5a8:	2909      	cmp	r1, #9
 800c5aa:	d927      	bls.n	800c5fc <_strtod_l+0x1b0>
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	4956      	ldr	r1, [pc, #344]	; (800c708 <_strtod_l+0x2bc>)
 800c5b0:	f001 f838 	bl	800d624 <strncmp>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d031      	beq.n	800c61c <_strtod_l+0x1d0>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	0023      	movs	r3, r4
 800c5bc:	4684      	mov	ip, r0
 800c5be:	9a08      	ldr	r2, [sp, #32]
 800c5c0:	900c      	str	r0, [sp, #48]	; 0x30
 800c5c2:	9205      	str	r2, [sp, #20]
 800c5c4:	2220      	movs	r2, #32
 800c5c6:	0019      	movs	r1, r3
 800c5c8:	4391      	bics	r1, r2
 800c5ca:	000a      	movs	r2, r1
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	9106      	str	r1, [sp, #24]
 800c5d0:	2a45      	cmp	r2, #69	; 0x45
 800c5d2:	d000      	beq.n	800c5d6 <_strtod_l+0x18a>
 800c5d4:	e0c2      	b.n	800c75c <_strtod_l+0x310>
 800c5d6:	9b05      	ldr	r3, [sp, #20]
 800c5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5da:	4303      	orrs	r3, r0
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	428b      	cmp	r3, r1
 800c5e0:	d08d      	beq.n	800c4fe <_strtod_l+0xb2>
 800c5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5e4:	9307      	str	r3, [sp, #28]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5ea:	9b07      	ldr	r3, [sp, #28]
 800c5ec:	785b      	ldrb	r3, [r3, #1]
 800c5ee:	2b2b      	cmp	r3, #43	; 0x2b
 800c5f0:	d071      	beq.n	800c6d6 <_strtod_l+0x28a>
 800c5f2:	000c      	movs	r4, r1
 800c5f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c5f6:	d174      	bne.n	800c6e2 <_strtod_l+0x296>
 800c5f8:	2401      	movs	r4, #1
 800c5fa:	e06d      	b.n	800c6d8 <_strtod_l+0x28c>
 800c5fc:	9908      	ldr	r1, [sp, #32]
 800c5fe:	2908      	cmp	r1, #8
 800c600:	dc09      	bgt.n	800c616 <_strtod_l+0x1ca>
 800c602:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c604:	4351      	muls	r1, r2
 800c606:	185b      	adds	r3, r3, r1
 800c608:	930d      	str	r3, [sp, #52]	; 0x34
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	3001      	adds	r0, #1
 800c60e:	3301      	adds	r3, #1
 800c610:	9308      	str	r3, [sp, #32]
 800c612:	901b      	str	r0, [sp, #108]	; 0x6c
 800c614:	e7c3      	b.n	800c59e <_strtod_l+0x152>
 800c616:	4355      	muls	r5, r2
 800c618:	195d      	adds	r5, r3, r5
 800c61a:	e7f6      	b.n	800c60a <_strtod_l+0x1be>
 800c61c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	921b      	str	r2, [sp, #108]	; 0x6c
 800c622:	9a08      	ldr	r2, [sp, #32]
 800c624:	785b      	ldrb	r3, [r3, #1]
 800c626:	2a00      	cmp	r2, #0
 800c628:	d03a      	beq.n	800c6a0 <_strtod_l+0x254>
 800c62a:	900c      	str	r0, [sp, #48]	; 0x30
 800c62c:	9205      	str	r2, [sp, #20]
 800c62e:	001a      	movs	r2, r3
 800c630:	3a30      	subs	r2, #48	; 0x30
 800c632:	2a09      	cmp	r2, #9
 800c634:	d912      	bls.n	800c65c <_strtod_l+0x210>
 800c636:	2201      	movs	r2, #1
 800c638:	4694      	mov	ip, r2
 800c63a:	e7c3      	b.n	800c5c4 <_strtod_l+0x178>
 800c63c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c63e:	3001      	adds	r0, #1
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	921b      	str	r2, [sp, #108]	; 0x6c
 800c644:	785b      	ldrb	r3, [r3, #1]
 800c646:	2b30      	cmp	r3, #48	; 0x30
 800c648:	d0f8      	beq.n	800c63c <_strtod_l+0x1f0>
 800c64a:	001a      	movs	r2, r3
 800c64c:	3a31      	subs	r2, #49	; 0x31
 800c64e:	2a08      	cmp	r2, #8
 800c650:	d83c      	bhi.n	800c6cc <_strtod_l+0x280>
 800c652:	900c      	str	r0, [sp, #48]	; 0x30
 800c654:	2000      	movs	r0, #0
 800c656:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c658:	9005      	str	r0, [sp, #20]
 800c65a:	9210      	str	r2, [sp, #64]	; 0x40
 800c65c:	001a      	movs	r2, r3
 800c65e:	1c41      	adds	r1, r0, #1
 800c660:	3a30      	subs	r2, #48	; 0x30
 800c662:	2b30      	cmp	r3, #48	; 0x30
 800c664:	d016      	beq.n	800c694 <_strtod_l+0x248>
 800c666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c668:	185b      	adds	r3, r3, r1
 800c66a:	930c      	str	r3, [sp, #48]	; 0x30
 800c66c:	9b05      	ldr	r3, [sp, #20]
 800c66e:	210a      	movs	r1, #10
 800c670:	469c      	mov	ip, r3
 800c672:	4484      	add	ip, r0
 800c674:	4563      	cmp	r3, ip
 800c676:	d115      	bne.n	800c6a4 <_strtod_l+0x258>
 800c678:	9905      	ldr	r1, [sp, #20]
 800c67a:	9b05      	ldr	r3, [sp, #20]
 800c67c:	3101      	adds	r1, #1
 800c67e:	1809      	adds	r1, r1, r0
 800c680:	181b      	adds	r3, r3, r0
 800c682:	9105      	str	r1, [sp, #20]
 800c684:	2b08      	cmp	r3, #8
 800c686:	dc19      	bgt.n	800c6bc <_strtod_l+0x270>
 800c688:	230a      	movs	r3, #10
 800c68a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c68c:	434b      	muls	r3, r1
 800c68e:	2100      	movs	r1, #0
 800c690:	18d3      	adds	r3, r2, r3
 800c692:	930d      	str	r3, [sp, #52]	; 0x34
 800c694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c696:	0008      	movs	r0, r1
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c69c:	785b      	ldrb	r3, [r3, #1]
 800c69e:	e7c6      	b.n	800c62e <_strtod_l+0x1e2>
 800c6a0:	9808      	ldr	r0, [sp, #32]
 800c6a2:	e7d0      	b.n	800c646 <_strtod_l+0x1fa>
 800c6a4:	1c5c      	adds	r4, r3, #1
 800c6a6:	2b08      	cmp	r3, #8
 800c6a8:	dc04      	bgt.n	800c6b4 <_strtod_l+0x268>
 800c6aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ac:	434b      	muls	r3, r1
 800c6ae:	930d      	str	r3, [sp, #52]	; 0x34
 800c6b0:	0023      	movs	r3, r4
 800c6b2:	e7df      	b.n	800c674 <_strtod_l+0x228>
 800c6b4:	2c10      	cmp	r4, #16
 800c6b6:	dcfb      	bgt.n	800c6b0 <_strtod_l+0x264>
 800c6b8:	434d      	muls	r5, r1
 800c6ba:	e7f9      	b.n	800c6b0 <_strtod_l+0x264>
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	2100      	movs	r1, #0
 800c6c0:	2b10      	cmp	r3, #16
 800c6c2:	dce7      	bgt.n	800c694 <_strtod_l+0x248>
 800c6c4:	230a      	movs	r3, #10
 800c6c6:	435d      	muls	r5, r3
 800c6c8:	1955      	adds	r5, r2, r5
 800c6ca:	e7e3      	b.n	800c694 <_strtod_l+0x248>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	920c      	str	r2, [sp, #48]	; 0x30
 800c6d0:	9205      	str	r2, [sp, #20]
 800c6d2:	3201      	adds	r2, #1
 800c6d4:	e7b0      	b.n	800c638 <_strtod_l+0x1ec>
 800c6d6:	2400      	movs	r4, #0
 800c6d8:	9b07      	ldr	r3, [sp, #28]
 800c6da:	3302      	adds	r3, #2
 800c6dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6de:	9b07      	ldr	r3, [sp, #28]
 800c6e0:	789b      	ldrb	r3, [r3, #2]
 800c6e2:	001a      	movs	r2, r3
 800c6e4:	3a30      	subs	r2, #48	; 0x30
 800c6e6:	2a09      	cmp	r2, #9
 800c6e8:	d914      	bls.n	800c714 <_strtod_l+0x2c8>
 800c6ea:	9a07      	ldr	r2, [sp, #28]
 800c6ec:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	e033      	b.n	800c75a <_strtod_l+0x30e>
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	08015d20 	.word	0x08015d20
 800c6f8:	7ff00000 	.word	0x7ff00000
 800c6fc:	ffefffff 	.word	0xffefffff
 800c700:	00000433 	.word	0x00000433
 800c704:	7fffffff 	.word	0x7fffffff
 800c708:	08015d1c 	.word	0x08015d1c
 800c70c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	921b      	str	r2, [sp, #108]	; 0x6c
 800c712:	785b      	ldrb	r3, [r3, #1]
 800c714:	2b30      	cmp	r3, #48	; 0x30
 800c716:	d0f9      	beq.n	800c70c <_strtod_l+0x2c0>
 800c718:	2200      	movs	r2, #0
 800c71a:	9206      	str	r2, [sp, #24]
 800c71c:	001a      	movs	r2, r3
 800c71e:	3a31      	subs	r2, #49	; 0x31
 800c720:	2a08      	cmp	r2, #8
 800c722:	d81b      	bhi.n	800c75c <_strtod_l+0x310>
 800c724:	3b30      	subs	r3, #48	; 0x30
 800c726:	930e      	str	r3, [sp, #56]	; 0x38
 800c728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c72a:	9306      	str	r3, [sp, #24]
 800c72c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c72e:	1c59      	adds	r1, r3, #1
 800c730:	911b      	str	r1, [sp, #108]	; 0x6c
 800c732:	785b      	ldrb	r3, [r3, #1]
 800c734:	001a      	movs	r2, r3
 800c736:	3a30      	subs	r2, #48	; 0x30
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d93a      	bls.n	800c7b2 <_strtod_l+0x366>
 800c73c:	9a06      	ldr	r2, [sp, #24]
 800c73e:	1a8a      	subs	r2, r1, r2
 800c740:	49b2      	ldr	r1, [pc, #712]	; (800ca0c <_strtod_l+0x5c0>)
 800c742:	9106      	str	r1, [sp, #24]
 800c744:	2a08      	cmp	r2, #8
 800c746:	dc04      	bgt.n	800c752 <_strtod_l+0x306>
 800c748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c74a:	9206      	str	r2, [sp, #24]
 800c74c:	428a      	cmp	r2, r1
 800c74e:	dd00      	ble.n	800c752 <_strtod_l+0x306>
 800c750:	9106      	str	r1, [sp, #24]
 800c752:	2c00      	cmp	r4, #0
 800c754:	d002      	beq.n	800c75c <_strtod_l+0x310>
 800c756:	9a06      	ldr	r2, [sp, #24]
 800c758:	4252      	negs	r2, r2
 800c75a:	9206      	str	r2, [sp, #24]
 800c75c:	9a05      	ldr	r2, [sp, #20]
 800c75e:	2a00      	cmp	r2, #0
 800c760:	d14d      	bne.n	800c7fe <_strtod_l+0x3b2>
 800c762:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c764:	4310      	orrs	r0, r2
 800c766:	d000      	beq.n	800c76a <_strtod_l+0x31e>
 800c768:	e6ab      	b.n	800c4c2 <_strtod_l+0x76>
 800c76a:	4662      	mov	r2, ip
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	d000      	beq.n	800c772 <_strtod_l+0x326>
 800c770:	e6c5      	b.n	800c4fe <_strtod_l+0xb2>
 800c772:	2b69      	cmp	r3, #105	; 0x69
 800c774:	d027      	beq.n	800c7c6 <_strtod_l+0x37a>
 800c776:	dc23      	bgt.n	800c7c0 <_strtod_l+0x374>
 800c778:	2b49      	cmp	r3, #73	; 0x49
 800c77a:	d024      	beq.n	800c7c6 <_strtod_l+0x37a>
 800c77c:	2b4e      	cmp	r3, #78	; 0x4e
 800c77e:	d000      	beq.n	800c782 <_strtod_l+0x336>
 800c780:	e6bd      	b.n	800c4fe <_strtod_l+0xb2>
 800c782:	49a3      	ldr	r1, [pc, #652]	; (800ca10 <_strtod_l+0x5c4>)
 800c784:	a81b      	add	r0, sp, #108	; 0x6c
 800c786:	f001 fc31 	bl	800dfec <__match>
 800c78a:	2800      	cmp	r0, #0
 800c78c:	d100      	bne.n	800c790 <_strtod_l+0x344>
 800c78e:	e6b6      	b.n	800c4fe <_strtod_l+0xb2>
 800c790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b28      	cmp	r3, #40	; 0x28
 800c796:	d12c      	bne.n	800c7f2 <_strtod_l+0x3a6>
 800c798:	499e      	ldr	r1, [pc, #632]	; (800ca14 <_strtod_l+0x5c8>)
 800c79a:	aa1e      	add	r2, sp, #120	; 0x78
 800c79c:	a81b      	add	r0, sp, #108	; 0x6c
 800c79e:	f001 fc39 	bl	800e014 <__hexnan>
 800c7a2:	2805      	cmp	r0, #5
 800c7a4:	d125      	bne.n	800c7f2 <_strtod_l+0x3a6>
 800c7a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c7a8:	4a9b      	ldr	r2, [pc, #620]	; (800ca18 <_strtod_l+0x5cc>)
 800c7aa:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c7ac:	431a      	orrs	r2, r3
 800c7ae:	0017      	movs	r7, r2
 800c7b0:	e687      	b.n	800c4c2 <_strtod_l+0x76>
 800c7b2:	220a      	movs	r2, #10
 800c7b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c7b6:	434a      	muls	r2, r1
 800c7b8:	18d2      	adds	r2, r2, r3
 800c7ba:	3a30      	subs	r2, #48	; 0x30
 800c7bc:	920e      	str	r2, [sp, #56]	; 0x38
 800c7be:	e7b5      	b.n	800c72c <_strtod_l+0x2e0>
 800c7c0:	2b6e      	cmp	r3, #110	; 0x6e
 800c7c2:	d0de      	beq.n	800c782 <_strtod_l+0x336>
 800c7c4:	e69b      	b.n	800c4fe <_strtod_l+0xb2>
 800c7c6:	4995      	ldr	r1, [pc, #596]	; (800ca1c <_strtod_l+0x5d0>)
 800c7c8:	a81b      	add	r0, sp, #108	; 0x6c
 800c7ca:	f001 fc0f 	bl	800dfec <__match>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d100      	bne.n	800c7d4 <_strtod_l+0x388>
 800c7d2:	e694      	b.n	800c4fe <_strtod_l+0xb2>
 800c7d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7d6:	4992      	ldr	r1, [pc, #584]	; (800ca20 <_strtod_l+0x5d4>)
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	a81b      	add	r0, sp, #108	; 0x6c
 800c7dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7de:	f001 fc05 	bl	800dfec <__match>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d102      	bne.n	800c7ec <_strtod_l+0x3a0>
 800c7e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7ec:	2600      	movs	r6, #0
 800c7ee:	4f8a      	ldr	r7, [pc, #552]	; (800ca18 <_strtod_l+0x5cc>)
 800c7f0:	e667      	b.n	800c4c2 <_strtod_l+0x76>
 800c7f2:	488c      	ldr	r0, [pc, #560]	; (800ca24 <_strtod_l+0x5d8>)
 800c7f4:	f001 f836 	bl	800d864 <nan>
 800c7f8:	0006      	movs	r6, r0
 800c7fa:	000f      	movs	r7, r1
 800c7fc:	e661      	b.n	800c4c2 <_strtod_l+0x76>
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	9309      	str	r3, [sp, #36]	; 0x24
 800c806:	9b08      	ldr	r3, [sp, #32]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <_strtod_l+0x3c4>
 800c80c:	9b05      	ldr	r3, [sp, #20]
 800c80e:	9308      	str	r3, [sp, #32]
 800c810:	9c05      	ldr	r4, [sp, #20]
 800c812:	2c10      	cmp	r4, #16
 800c814:	dd00      	ble.n	800c818 <_strtod_l+0x3cc>
 800c816:	2410      	movs	r4, #16
 800c818:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c81a:	f7f5 fdef 	bl	80023fc <__aeabi_ui2d>
 800c81e:	9b05      	ldr	r3, [sp, #20]
 800c820:	0006      	movs	r6, r0
 800c822:	000f      	movs	r7, r1
 800c824:	2b09      	cmp	r3, #9
 800c826:	dd15      	ble.n	800c854 <_strtod_l+0x408>
 800c828:	0022      	movs	r2, r4
 800c82a:	4b7f      	ldr	r3, [pc, #508]	; (800ca28 <_strtod_l+0x5dc>)
 800c82c:	3a09      	subs	r2, #9
 800c82e:	00d2      	lsls	r2, r2, #3
 800c830:	189b      	adds	r3, r3, r2
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f7f4 ff19 	bl	800166c <__aeabi_dmul>
 800c83a:	0006      	movs	r6, r0
 800c83c:	0028      	movs	r0, r5
 800c83e:	000f      	movs	r7, r1
 800c840:	f7f5 fddc 	bl	80023fc <__aeabi_ui2d>
 800c844:	0002      	movs	r2, r0
 800c846:	000b      	movs	r3, r1
 800c848:	0030      	movs	r0, r6
 800c84a:	0039      	movs	r1, r7
 800c84c:	f7f3 ffb4 	bl	80007b8 <__aeabi_dadd>
 800c850:	0006      	movs	r6, r0
 800c852:	000f      	movs	r7, r1
 800c854:	9b05      	ldr	r3, [sp, #20]
 800c856:	2b0f      	cmp	r3, #15
 800c858:	dc39      	bgt.n	800c8ce <_strtod_l+0x482>
 800c85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d100      	bne.n	800c862 <_strtod_l+0x416>
 800c860:	e62f      	b.n	800c4c2 <_strtod_l+0x76>
 800c862:	dd24      	ble.n	800c8ae <_strtod_l+0x462>
 800c864:	2b16      	cmp	r3, #22
 800c866:	dc09      	bgt.n	800c87c <_strtod_l+0x430>
 800c868:	496f      	ldr	r1, [pc, #444]	; (800ca28 <_strtod_l+0x5dc>)
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	18c9      	adds	r1, r1, r3
 800c86e:	0032      	movs	r2, r6
 800c870:	6808      	ldr	r0, [r1, #0]
 800c872:	6849      	ldr	r1, [r1, #4]
 800c874:	003b      	movs	r3, r7
 800c876:	f7f4 fef9 	bl	800166c <__aeabi_dmul>
 800c87a:	e7bd      	b.n	800c7f8 <_strtod_l+0x3ac>
 800c87c:	2325      	movs	r3, #37	; 0x25
 800c87e:	9a05      	ldr	r2, [sp, #20]
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c884:	4293      	cmp	r3, r2
 800c886:	db22      	blt.n	800c8ce <_strtod_l+0x482>
 800c888:	240f      	movs	r4, #15
 800c88a:	9b05      	ldr	r3, [sp, #20]
 800c88c:	4d66      	ldr	r5, [pc, #408]	; (800ca28 <_strtod_l+0x5dc>)
 800c88e:	1ae4      	subs	r4, r4, r3
 800c890:	00e1      	lsls	r1, r4, #3
 800c892:	1869      	adds	r1, r5, r1
 800c894:	0032      	movs	r2, r6
 800c896:	6808      	ldr	r0, [r1, #0]
 800c898:	6849      	ldr	r1, [r1, #4]
 800c89a:	003b      	movs	r3, r7
 800c89c:	f7f4 fee6 	bl	800166c <__aeabi_dmul>
 800c8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a2:	1b1c      	subs	r4, r3, r4
 800c8a4:	00e4      	lsls	r4, r4, #3
 800c8a6:	192d      	adds	r5, r5, r4
 800c8a8:	682a      	ldr	r2, [r5, #0]
 800c8aa:	686b      	ldr	r3, [r5, #4]
 800c8ac:	e7e3      	b.n	800c876 <_strtod_l+0x42a>
 800c8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b0:	3316      	adds	r3, #22
 800c8b2:	db0c      	blt.n	800c8ce <_strtod_l+0x482>
 800c8b4:	9906      	ldr	r1, [sp, #24]
 800c8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8b8:	4b5b      	ldr	r3, [pc, #364]	; (800ca28 <_strtod_l+0x5dc>)
 800c8ba:	1a52      	subs	r2, r2, r1
 800c8bc:	00d2      	lsls	r2, r2, #3
 800c8be:	189b      	adds	r3, r3, r2
 800c8c0:	0030      	movs	r0, r6
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	0039      	movs	r1, r7
 800c8c8:	f7f4 fad6 	bl	8000e78 <__aeabi_ddiv>
 800c8cc:	e794      	b.n	800c7f8 <_strtod_l+0x3ac>
 800c8ce:	9b05      	ldr	r3, [sp, #20]
 800c8d0:	1b1c      	subs	r4, r3, r4
 800c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d4:	18e4      	adds	r4, r4, r3
 800c8d6:	2c00      	cmp	r4, #0
 800c8d8:	dd72      	ble.n	800c9c0 <_strtod_l+0x574>
 800c8da:	220f      	movs	r2, #15
 800c8dc:	0023      	movs	r3, r4
 800c8de:	4013      	ands	r3, r2
 800c8e0:	4214      	tst	r4, r2
 800c8e2:	d00a      	beq.n	800c8fa <_strtod_l+0x4ae>
 800c8e4:	4950      	ldr	r1, [pc, #320]	; (800ca28 <_strtod_l+0x5dc>)
 800c8e6:	00db      	lsls	r3, r3, #3
 800c8e8:	18c9      	adds	r1, r1, r3
 800c8ea:	0032      	movs	r2, r6
 800c8ec:	6808      	ldr	r0, [r1, #0]
 800c8ee:	6849      	ldr	r1, [r1, #4]
 800c8f0:	003b      	movs	r3, r7
 800c8f2:	f7f4 febb 	bl	800166c <__aeabi_dmul>
 800c8f6:	0006      	movs	r6, r0
 800c8f8:	000f      	movs	r7, r1
 800c8fa:	230f      	movs	r3, #15
 800c8fc:	439c      	bics	r4, r3
 800c8fe:	d04a      	beq.n	800c996 <_strtod_l+0x54a>
 800c900:	3326      	adds	r3, #38	; 0x26
 800c902:	33ff      	adds	r3, #255	; 0xff
 800c904:	429c      	cmp	r4, r3
 800c906:	dd22      	ble.n	800c94e <_strtod_l+0x502>
 800c908:	2300      	movs	r3, #0
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	9306      	str	r3, [sp, #24]
 800c90e:	930d      	str	r3, [sp, #52]	; 0x34
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	2322      	movs	r3, #34	; 0x22
 800c914:	2600      	movs	r6, #0
 800c916:	9a04      	ldr	r2, [sp, #16]
 800c918:	4f3f      	ldr	r7, [pc, #252]	; (800ca18 <_strtod_l+0x5cc>)
 800c91a:	6013      	str	r3, [r2, #0]
 800c91c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c91e:	42b3      	cmp	r3, r6
 800c920:	d100      	bne.n	800c924 <_strtod_l+0x4d8>
 800c922:	e5ce      	b.n	800c4c2 <_strtod_l+0x76>
 800c924:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c926:	9804      	ldr	r0, [sp, #16]
 800c928:	f001 fc56 	bl	800e1d8 <_Bfree>
 800c92c:	9908      	ldr	r1, [sp, #32]
 800c92e:	9804      	ldr	r0, [sp, #16]
 800c930:	f001 fc52 	bl	800e1d8 <_Bfree>
 800c934:	9906      	ldr	r1, [sp, #24]
 800c936:	9804      	ldr	r0, [sp, #16]
 800c938:	f001 fc4e 	bl	800e1d8 <_Bfree>
 800c93c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c93e:	9804      	ldr	r0, [sp, #16]
 800c940:	f001 fc4a 	bl	800e1d8 <_Bfree>
 800c944:	9905      	ldr	r1, [sp, #20]
 800c946:	9804      	ldr	r0, [sp, #16]
 800c948:	f001 fc46 	bl	800e1d8 <_Bfree>
 800c94c:	e5b9      	b.n	800c4c2 <_strtod_l+0x76>
 800c94e:	2300      	movs	r3, #0
 800c950:	0030      	movs	r0, r6
 800c952:	0039      	movs	r1, r7
 800c954:	4d35      	ldr	r5, [pc, #212]	; (800ca2c <_strtod_l+0x5e0>)
 800c956:	1124      	asrs	r4, r4, #4
 800c958:	9307      	str	r3, [sp, #28]
 800c95a:	2c01      	cmp	r4, #1
 800c95c:	dc1e      	bgt.n	800c99c <_strtod_l+0x550>
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <_strtod_l+0x51a>
 800c962:	0006      	movs	r6, r0
 800c964:	000f      	movs	r7, r1
 800c966:	4b32      	ldr	r3, [pc, #200]	; (800ca30 <_strtod_l+0x5e4>)
 800c968:	9a07      	ldr	r2, [sp, #28]
 800c96a:	18ff      	adds	r7, r7, r3
 800c96c:	4b2f      	ldr	r3, [pc, #188]	; (800ca2c <_strtod_l+0x5e0>)
 800c96e:	00d2      	lsls	r2, r2, #3
 800c970:	189d      	adds	r5, r3, r2
 800c972:	6828      	ldr	r0, [r5, #0]
 800c974:	6869      	ldr	r1, [r5, #4]
 800c976:	0032      	movs	r2, r6
 800c978:	003b      	movs	r3, r7
 800c97a:	f7f4 fe77 	bl	800166c <__aeabi_dmul>
 800c97e:	4b26      	ldr	r3, [pc, #152]	; (800ca18 <_strtod_l+0x5cc>)
 800c980:	4a2c      	ldr	r2, [pc, #176]	; (800ca34 <_strtod_l+0x5e8>)
 800c982:	0006      	movs	r6, r0
 800c984:	400b      	ands	r3, r1
 800c986:	4293      	cmp	r3, r2
 800c988:	d8be      	bhi.n	800c908 <_strtod_l+0x4bc>
 800c98a:	4a2b      	ldr	r2, [pc, #172]	; (800ca38 <_strtod_l+0x5ec>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d913      	bls.n	800c9b8 <_strtod_l+0x56c>
 800c990:	2601      	movs	r6, #1
 800c992:	4f2a      	ldr	r7, [pc, #168]	; (800ca3c <_strtod_l+0x5f0>)
 800c994:	4276      	negs	r6, r6
 800c996:	2300      	movs	r3, #0
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	e088      	b.n	800caae <_strtod_l+0x662>
 800c99c:	2201      	movs	r2, #1
 800c99e:	4214      	tst	r4, r2
 800c9a0:	d004      	beq.n	800c9ac <_strtod_l+0x560>
 800c9a2:	682a      	ldr	r2, [r5, #0]
 800c9a4:	686b      	ldr	r3, [r5, #4]
 800c9a6:	f7f4 fe61 	bl	800166c <__aeabi_dmul>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	9a07      	ldr	r2, [sp, #28]
 800c9ae:	1064      	asrs	r4, r4, #1
 800c9b0:	3201      	adds	r2, #1
 800c9b2:	9207      	str	r2, [sp, #28]
 800c9b4:	3508      	adds	r5, #8
 800c9b6:	e7d0      	b.n	800c95a <_strtod_l+0x50e>
 800c9b8:	23d4      	movs	r3, #212	; 0xd4
 800c9ba:	049b      	lsls	r3, r3, #18
 800c9bc:	18cf      	adds	r7, r1, r3
 800c9be:	e7ea      	b.n	800c996 <_strtod_l+0x54a>
 800c9c0:	2c00      	cmp	r4, #0
 800c9c2:	d0e8      	beq.n	800c996 <_strtod_l+0x54a>
 800c9c4:	4264      	negs	r4, r4
 800c9c6:	230f      	movs	r3, #15
 800c9c8:	0022      	movs	r2, r4
 800c9ca:	401a      	ands	r2, r3
 800c9cc:	421c      	tst	r4, r3
 800c9ce:	d00a      	beq.n	800c9e6 <_strtod_l+0x59a>
 800c9d0:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <_strtod_l+0x5dc>)
 800c9d2:	00d2      	lsls	r2, r2, #3
 800c9d4:	189b      	adds	r3, r3, r2
 800c9d6:	0030      	movs	r0, r6
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	0039      	movs	r1, r7
 800c9de:	f7f4 fa4b 	bl	8000e78 <__aeabi_ddiv>
 800c9e2:	0006      	movs	r6, r0
 800c9e4:	000f      	movs	r7, r1
 800c9e6:	1124      	asrs	r4, r4, #4
 800c9e8:	d0d5      	beq.n	800c996 <_strtod_l+0x54a>
 800c9ea:	2c1f      	cmp	r4, #31
 800c9ec:	dd28      	ble.n	800ca40 <_strtod_l+0x5f4>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9305      	str	r3, [sp, #20]
 800c9f2:	9306      	str	r3, [sp, #24]
 800c9f4:	930d      	str	r3, [sp, #52]	; 0x34
 800c9f6:	9308      	str	r3, [sp, #32]
 800c9f8:	2322      	movs	r3, #34	; 0x22
 800c9fa:	9a04      	ldr	r2, [sp, #16]
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca02:	2700      	movs	r7, #0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d18d      	bne.n	800c924 <_strtod_l+0x4d8>
 800ca08:	e55b      	b.n	800c4c2 <_strtod_l+0x76>
 800ca0a:	46c0      	nop			; (mov r8, r8)
 800ca0c:	00004e1f 	.word	0x00004e1f
 800ca10:	08016051 	.word	0x08016051
 800ca14:	08015d34 	.word	0x08015d34
 800ca18:	7ff00000 	.word	0x7ff00000
 800ca1c:	08016049 	.word	0x08016049
 800ca20:	080160ff 	.word	0x080160ff
 800ca24:	080160fb 	.word	0x080160fb
 800ca28:	08015f70 	.word	0x08015f70
 800ca2c:	08015f48 	.word	0x08015f48
 800ca30:	fcb00000 	.word	0xfcb00000
 800ca34:	7ca00000 	.word	0x7ca00000
 800ca38:	7c900000 	.word	0x7c900000
 800ca3c:	7fefffff 	.word	0x7fefffff
 800ca40:	2310      	movs	r3, #16
 800ca42:	0022      	movs	r2, r4
 800ca44:	401a      	ands	r2, r3
 800ca46:	9207      	str	r2, [sp, #28]
 800ca48:	421c      	tst	r4, r3
 800ca4a:	d001      	beq.n	800ca50 <_strtod_l+0x604>
 800ca4c:	335a      	adds	r3, #90	; 0x5a
 800ca4e:	9307      	str	r3, [sp, #28]
 800ca50:	0030      	movs	r0, r6
 800ca52:	0039      	movs	r1, r7
 800ca54:	2300      	movs	r3, #0
 800ca56:	4dc4      	ldr	r5, [pc, #784]	; (800cd68 <_strtod_l+0x91c>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	4214      	tst	r4, r2
 800ca5c:	d004      	beq.n	800ca68 <_strtod_l+0x61c>
 800ca5e:	682a      	ldr	r2, [r5, #0]
 800ca60:	686b      	ldr	r3, [r5, #4]
 800ca62:	f7f4 fe03 	bl	800166c <__aeabi_dmul>
 800ca66:	2301      	movs	r3, #1
 800ca68:	1064      	asrs	r4, r4, #1
 800ca6a:	3508      	adds	r5, #8
 800ca6c:	2c00      	cmp	r4, #0
 800ca6e:	d1f3      	bne.n	800ca58 <_strtod_l+0x60c>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <_strtod_l+0x62c>
 800ca74:	0006      	movs	r6, r0
 800ca76:	000f      	movs	r7, r1
 800ca78:	9b07      	ldr	r3, [sp, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00f      	beq.n	800ca9e <_strtod_l+0x652>
 800ca7e:	236b      	movs	r3, #107	; 0x6b
 800ca80:	007a      	lsls	r2, r7, #1
 800ca82:	0d52      	lsrs	r2, r2, #21
 800ca84:	0039      	movs	r1, r7
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dd08      	ble.n	800ca9e <_strtod_l+0x652>
 800ca8c:	2b1f      	cmp	r3, #31
 800ca8e:	dc00      	bgt.n	800ca92 <_strtod_l+0x646>
 800ca90:	e121      	b.n	800ccd6 <_strtod_l+0x88a>
 800ca92:	2600      	movs	r6, #0
 800ca94:	2b34      	cmp	r3, #52	; 0x34
 800ca96:	dc00      	bgt.n	800ca9a <_strtod_l+0x64e>
 800ca98:	e116      	b.n	800ccc8 <_strtod_l+0x87c>
 800ca9a:	27dc      	movs	r7, #220	; 0xdc
 800ca9c:	04bf      	lsls	r7, r7, #18
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2300      	movs	r3, #0
 800caa2:	0030      	movs	r0, r6
 800caa4:	0039      	movs	r1, r7
 800caa6:	f7f3 fccf 	bl	8000448 <__aeabi_dcmpeq>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d19f      	bne.n	800c9ee <_strtod_l+0x5a2>
 800caae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cab0:	9a08      	ldr	r2, [sp, #32]
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cab6:	9b05      	ldr	r3, [sp, #20]
 800cab8:	9804      	ldr	r0, [sp, #16]
 800caba:	f001 fbdb 	bl	800e274 <__s2b>
 800cabe:	900d      	str	r0, [sp, #52]	; 0x34
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d100      	bne.n	800cac6 <_strtod_l+0x67a>
 800cac4:	e720      	b.n	800c908 <_strtod_l+0x4bc>
 800cac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac8:	9906      	ldr	r1, [sp, #24]
 800caca:	17da      	asrs	r2, r3, #31
 800cacc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cace:	1a5b      	subs	r3, r3, r1
 800cad0:	401a      	ands	r2, r3
 800cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad4:	9215      	str	r2, [sp, #84]	; 0x54
 800cad6:	43db      	mvns	r3, r3
 800cad8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cada:	17db      	asrs	r3, r3, #31
 800cadc:	401a      	ands	r2, r3
 800cade:	2300      	movs	r3, #0
 800cae0:	9218      	str	r2, [sp, #96]	; 0x60
 800cae2:	9305      	str	r3, [sp, #20]
 800cae4:	9306      	str	r3, [sp, #24]
 800cae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cae8:	9804      	ldr	r0, [sp, #16]
 800caea:	6859      	ldr	r1, [r3, #4]
 800caec:	f001 fb4c 	bl	800e188 <_Balloc>
 800caf0:	9008      	str	r0, [sp, #32]
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d100      	bne.n	800caf8 <_strtod_l+0x6ac>
 800caf6:	e70c      	b.n	800c912 <_strtod_l+0x4c6>
 800caf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cafa:	300c      	adds	r0, #12
 800cafc:	0019      	movs	r1, r3
 800cafe:	691a      	ldr	r2, [r3, #16]
 800cb00:	310c      	adds	r1, #12
 800cb02:	3202      	adds	r2, #2
 800cb04:	0092      	lsls	r2, r2, #2
 800cb06:	f000 fea4 	bl	800d852 <memcpy>
 800cb0a:	ab1e      	add	r3, sp, #120	; 0x78
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	ab1d      	add	r3, sp, #116	; 0x74
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	0032      	movs	r2, r6
 800cb14:	003b      	movs	r3, r7
 800cb16:	9804      	ldr	r0, [sp, #16]
 800cb18:	9610      	str	r6, [sp, #64]	; 0x40
 800cb1a:	9711      	str	r7, [sp, #68]	; 0x44
 800cb1c:	f001 fed2 	bl	800e8c4 <__d2b>
 800cb20:	901c      	str	r0, [sp, #112]	; 0x70
 800cb22:	2800      	cmp	r0, #0
 800cb24:	d100      	bne.n	800cb28 <_strtod_l+0x6dc>
 800cb26:	e6f4      	b.n	800c912 <_strtod_l+0x4c6>
 800cb28:	2101      	movs	r1, #1
 800cb2a:	9804      	ldr	r0, [sp, #16]
 800cb2c:	f001 fc36 	bl	800e39c <__i2b>
 800cb30:	9006      	str	r0, [sp, #24]
 800cb32:	2800      	cmp	r0, #0
 800cb34:	d100      	bne.n	800cb38 <_strtod_l+0x6ec>
 800cb36:	e6ec      	b.n	800c912 <_strtod_l+0x4c6>
 800cb38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb3c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cb3e:	1ad4      	subs	r4, r2, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	db01      	blt.n	800cb48 <_strtod_l+0x6fc>
 800cb44:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cb46:	195d      	adds	r5, r3, r5
 800cb48:	9907      	ldr	r1, [sp, #28]
 800cb4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb4c:	1a5b      	subs	r3, r3, r1
 800cb4e:	2136      	movs	r1, #54	; 0x36
 800cb50:	189b      	adds	r3, r3, r2
 800cb52:	1a8a      	subs	r2, r1, r2
 800cb54:	4985      	ldr	r1, [pc, #532]	; (800cd6c <_strtod_l+0x920>)
 800cb56:	2001      	movs	r0, #1
 800cb58:	468c      	mov	ip, r1
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	9114      	str	r1, [sp, #80]	; 0x50
 800cb60:	9012      	str	r0, [sp, #72]	; 0x48
 800cb62:	4563      	cmp	r3, ip
 800cb64:	da07      	bge.n	800cb76 <_strtod_l+0x72a>
 800cb66:	4661      	mov	r1, ip
 800cb68:	1ac9      	subs	r1, r1, r3
 800cb6a:	1a52      	subs	r2, r2, r1
 800cb6c:	291f      	cmp	r1, #31
 800cb6e:	dd00      	ble.n	800cb72 <_strtod_l+0x726>
 800cb70:	e0b6      	b.n	800cce0 <_strtod_l+0x894>
 800cb72:	4088      	lsls	r0, r1
 800cb74:	9012      	str	r0, [sp, #72]	; 0x48
 800cb76:	18ab      	adds	r3, r5, r2
 800cb78:	930c      	str	r3, [sp, #48]	; 0x30
 800cb7a:	18a4      	adds	r4, r4, r2
 800cb7c:	9b07      	ldr	r3, [sp, #28]
 800cb7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb80:	191c      	adds	r4, r3, r4
 800cb82:	002b      	movs	r3, r5
 800cb84:	4295      	cmp	r5, r2
 800cb86:	dd00      	ble.n	800cb8a <_strtod_l+0x73e>
 800cb88:	0013      	movs	r3, r2
 800cb8a:	42a3      	cmp	r3, r4
 800cb8c:	dd00      	ble.n	800cb90 <_strtod_l+0x744>
 800cb8e:	0023      	movs	r3, r4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	dd04      	ble.n	800cb9e <_strtod_l+0x752>
 800cb94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb96:	1ae4      	subs	r4, r4, r3
 800cb98:	1ad2      	subs	r2, r2, r3
 800cb9a:	920c      	str	r2, [sp, #48]	; 0x30
 800cb9c:	1aed      	subs	r5, r5, r3
 800cb9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dd17      	ble.n	800cbd4 <_strtod_l+0x788>
 800cba4:	001a      	movs	r2, r3
 800cba6:	9906      	ldr	r1, [sp, #24]
 800cba8:	9804      	ldr	r0, [sp, #16]
 800cbaa:	f001 fcbf 	bl	800e52c <__pow5mult>
 800cbae:	9006      	str	r0, [sp, #24]
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d100      	bne.n	800cbb6 <_strtod_l+0x76a>
 800cbb4:	e6ad      	b.n	800c912 <_strtod_l+0x4c6>
 800cbb6:	0001      	movs	r1, r0
 800cbb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cbba:	9804      	ldr	r0, [sp, #16]
 800cbbc:	f001 fc06 	bl	800e3cc <__multiply>
 800cbc0:	900e      	str	r0, [sp, #56]	; 0x38
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d100      	bne.n	800cbc8 <_strtod_l+0x77c>
 800cbc6:	e6a4      	b.n	800c912 <_strtod_l+0x4c6>
 800cbc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbca:	9804      	ldr	r0, [sp, #16]
 800cbcc:	f001 fb04 	bl	800e1d8 <_Bfree>
 800cbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbd2:	931c      	str	r3, [sp, #112]	; 0x70
 800cbd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dd00      	ble.n	800cbdc <_strtod_l+0x790>
 800cbda:	e087      	b.n	800ccec <_strtod_l+0x8a0>
 800cbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	dd08      	ble.n	800cbf4 <_strtod_l+0x7a8>
 800cbe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbe4:	9908      	ldr	r1, [sp, #32]
 800cbe6:	9804      	ldr	r0, [sp, #16]
 800cbe8:	f001 fca0 	bl	800e52c <__pow5mult>
 800cbec:	9008      	str	r0, [sp, #32]
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d100      	bne.n	800cbf4 <_strtod_l+0x7a8>
 800cbf2:	e68e      	b.n	800c912 <_strtod_l+0x4c6>
 800cbf4:	2c00      	cmp	r4, #0
 800cbf6:	dd08      	ble.n	800cc0a <_strtod_l+0x7be>
 800cbf8:	0022      	movs	r2, r4
 800cbfa:	9908      	ldr	r1, [sp, #32]
 800cbfc:	9804      	ldr	r0, [sp, #16]
 800cbfe:	f001 fcd7 	bl	800e5b0 <__lshift>
 800cc02:	9008      	str	r0, [sp, #32]
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d100      	bne.n	800cc0a <_strtod_l+0x7be>
 800cc08:	e683      	b.n	800c912 <_strtod_l+0x4c6>
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	dd08      	ble.n	800cc20 <_strtod_l+0x7d4>
 800cc0e:	002a      	movs	r2, r5
 800cc10:	9906      	ldr	r1, [sp, #24]
 800cc12:	9804      	ldr	r0, [sp, #16]
 800cc14:	f001 fccc 	bl	800e5b0 <__lshift>
 800cc18:	9006      	str	r0, [sp, #24]
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d100      	bne.n	800cc20 <_strtod_l+0x7d4>
 800cc1e:	e678      	b.n	800c912 <_strtod_l+0x4c6>
 800cc20:	9a08      	ldr	r2, [sp, #32]
 800cc22:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc24:	9804      	ldr	r0, [sp, #16]
 800cc26:	f001 fd4d 	bl	800e6c4 <__mdiff>
 800cc2a:	9005      	str	r0, [sp, #20]
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d100      	bne.n	800cc32 <_strtod_l+0x7e6>
 800cc30:	e66f      	b.n	800c912 <_strtod_l+0x4c6>
 800cc32:	2200      	movs	r2, #0
 800cc34:	68c3      	ldr	r3, [r0, #12]
 800cc36:	9906      	ldr	r1, [sp, #24]
 800cc38:	60c2      	str	r2, [r0, #12]
 800cc3a:	930c      	str	r3, [sp, #48]	; 0x30
 800cc3c:	f001 fd26 	bl	800e68c <__mcmp>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	da5d      	bge.n	800cd00 <_strtod_l+0x8b4>
 800cc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc46:	4333      	orrs	r3, r6
 800cc48:	d000      	beq.n	800cc4c <_strtod_l+0x800>
 800cc4a:	e088      	b.n	800cd5e <_strtod_l+0x912>
 800cc4c:	033b      	lsls	r3, r7, #12
 800cc4e:	d000      	beq.n	800cc52 <_strtod_l+0x806>
 800cc50:	e085      	b.n	800cd5e <_strtod_l+0x912>
 800cc52:	22d6      	movs	r2, #214	; 0xd6
 800cc54:	4b46      	ldr	r3, [pc, #280]	; (800cd70 <_strtod_l+0x924>)
 800cc56:	04d2      	lsls	r2, r2, #19
 800cc58:	403b      	ands	r3, r7
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d97f      	bls.n	800cd5e <_strtod_l+0x912>
 800cc5e:	9b05      	ldr	r3, [sp, #20]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d103      	bne.n	800cc6e <_strtod_l+0x822>
 800cc66:	9b05      	ldr	r3, [sp, #20]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	dd77      	ble.n	800cd5e <_strtod_l+0x912>
 800cc6e:	9905      	ldr	r1, [sp, #20]
 800cc70:	2201      	movs	r2, #1
 800cc72:	9804      	ldr	r0, [sp, #16]
 800cc74:	f001 fc9c 	bl	800e5b0 <__lshift>
 800cc78:	9906      	ldr	r1, [sp, #24]
 800cc7a:	9005      	str	r0, [sp, #20]
 800cc7c:	f001 fd06 	bl	800e68c <__mcmp>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	dd6c      	ble.n	800cd5e <_strtod_l+0x912>
 800cc84:	9907      	ldr	r1, [sp, #28]
 800cc86:	003b      	movs	r3, r7
 800cc88:	4a39      	ldr	r2, [pc, #228]	; (800cd70 <_strtod_l+0x924>)
 800cc8a:	2900      	cmp	r1, #0
 800cc8c:	d100      	bne.n	800cc90 <_strtod_l+0x844>
 800cc8e:	e094      	b.n	800cdba <_strtod_l+0x96e>
 800cc90:	0011      	movs	r1, r2
 800cc92:	20d6      	movs	r0, #214	; 0xd6
 800cc94:	4039      	ands	r1, r7
 800cc96:	04c0      	lsls	r0, r0, #19
 800cc98:	4281      	cmp	r1, r0
 800cc9a:	dd00      	ble.n	800cc9e <_strtod_l+0x852>
 800cc9c:	e08d      	b.n	800cdba <_strtod_l+0x96e>
 800cc9e:	23dc      	movs	r3, #220	; 0xdc
 800cca0:	049b      	lsls	r3, r3, #18
 800cca2:	4299      	cmp	r1, r3
 800cca4:	dc00      	bgt.n	800cca8 <_strtod_l+0x85c>
 800cca6:	e6a7      	b.n	800c9f8 <_strtod_l+0x5ac>
 800cca8:	0030      	movs	r0, r6
 800ccaa:	0039      	movs	r1, r7
 800ccac:	4b31      	ldr	r3, [pc, #196]	; (800cd74 <_strtod_l+0x928>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f7f4 fcdc 	bl	800166c <__aeabi_dmul>
 800ccb4:	4b2e      	ldr	r3, [pc, #184]	; (800cd70 <_strtod_l+0x924>)
 800ccb6:	0006      	movs	r6, r0
 800ccb8:	000f      	movs	r7, r1
 800ccba:	420b      	tst	r3, r1
 800ccbc:	d000      	beq.n	800ccc0 <_strtod_l+0x874>
 800ccbe:	e631      	b.n	800c924 <_strtod_l+0x4d8>
 800ccc0:	2322      	movs	r3, #34	; 0x22
 800ccc2:	9a04      	ldr	r2, [sp, #16]
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	e62d      	b.n	800c924 <_strtod_l+0x4d8>
 800ccc8:	234b      	movs	r3, #75	; 0x4b
 800ccca:	1a9a      	subs	r2, r3, r2
 800cccc:	3b4c      	subs	r3, #76	; 0x4c
 800ccce:	4093      	lsls	r3, r2
 800ccd0:	4019      	ands	r1, r3
 800ccd2:	000f      	movs	r7, r1
 800ccd4:	e6e3      	b.n	800ca9e <_strtod_l+0x652>
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	4252      	negs	r2, r2
 800ccda:	409a      	lsls	r2, r3
 800ccdc:	4016      	ands	r6, r2
 800ccde:	e6de      	b.n	800ca9e <_strtod_l+0x652>
 800cce0:	4925      	ldr	r1, [pc, #148]	; (800cd78 <_strtod_l+0x92c>)
 800cce2:	1acb      	subs	r3, r1, r3
 800cce4:	0001      	movs	r1, r0
 800cce6:	4099      	lsls	r1, r3
 800cce8:	9114      	str	r1, [sp, #80]	; 0x50
 800ccea:	e743      	b.n	800cb74 <_strtod_l+0x728>
 800ccec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccee:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ccf0:	9804      	ldr	r0, [sp, #16]
 800ccf2:	f001 fc5d 	bl	800e5b0 <__lshift>
 800ccf6:	901c      	str	r0, [sp, #112]	; 0x70
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d000      	beq.n	800ccfe <_strtod_l+0x8b2>
 800ccfc:	e76e      	b.n	800cbdc <_strtod_l+0x790>
 800ccfe:	e608      	b.n	800c912 <_strtod_l+0x4c6>
 800cd00:	970e      	str	r7, [sp, #56]	; 0x38
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d177      	bne.n	800cdf6 <_strtod_l+0x9aa>
 800cd06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd08:	033b      	lsls	r3, r7, #12
 800cd0a:	0b1b      	lsrs	r3, r3, #12
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d039      	beq.n	800cd84 <_strtod_l+0x938>
 800cd10:	4a1a      	ldr	r2, [pc, #104]	; (800cd7c <_strtod_l+0x930>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d139      	bne.n	800cd8a <_strtod_l+0x93e>
 800cd16:	2101      	movs	r1, #1
 800cd18:	9b07      	ldr	r3, [sp, #28]
 800cd1a:	4249      	negs	r1, r1
 800cd1c:	0032      	movs	r2, r6
 800cd1e:	0008      	movs	r0, r1
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <_strtod_l+0x8f0>
 800cd24:	24d4      	movs	r4, #212	; 0xd4
 800cd26:	4b12      	ldr	r3, [pc, #72]	; (800cd70 <_strtod_l+0x924>)
 800cd28:	0008      	movs	r0, r1
 800cd2a:	403b      	ands	r3, r7
 800cd2c:	04e4      	lsls	r4, r4, #19
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	d804      	bhi.n	800cd3c <_strtod_l+0x8f0>
 800cd32:	306c      	adds	r0, #108	; 0x6c
 800cd34:	0d1b      	lsrs	r3, r3, #20
 800cd36:	1ac3      	subs	r3, r0, r3
 800cd38:	4099      	lsls	r1, r3
 800cd3a:	0008      	movs	r0, r1
 800cd3c:	4282      	cmp	r2, r0
 800cd3e:	d124      	bne.n	800cd8a <_strtod_l+0x93e>
 800cd40:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <_strtod_l+0x934>)
 800cd42:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cd44:	4299      	cmp	r1, r3
 800cd46:	d102      	bne.n	800cd4e <_strtod_l+0x902>
 800cd48:	3201      	adds	r2, #1
 800cd4a:	d100      	bne.n	800cd4e <_strtod_l+0x902>
 800cd4c:	e5e1      	b.n	800c912 <_strtod_l+0x4c6>
 800cd4e:	4b08      	ldr	r3, [pc, #32]	; (800cd70 <_strtod_l+0x924>)
 800cd50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd52:	2600      	movs	r6, #0
 800cd54:	401a      	ands	r2, r3
 800cd56:	0013      	movs	r3, r2
 800cd58:	2280      	movs	r2, #128	; 0x80
 800cd5a:	0352      	lsls	r2, r2, #13
 800cd5c:	189f      	adds	r7, r3, r2
 800cd5e:	9b07      	ldr	r3, [sp, #28]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1a1      	bne.n	800cca8 <_strtod_l+0x85c>
 800cd64:	e5de      	b.n	800c924 <_strtod_l+0x4d8>
 800cd66:	46c0      	nop			; (mov r8, r8)
 800cd68:	08015d48 	.word	0x08015d48
 800cd6c:	fffffc02 	.word	0xfffffc02
 800cd70:	7ff00000 	.word	0x7ff00000
 800cd74:	39500000 	.word	0x39500000
 800cd78:	fffffbe2 	.word	0xfffffbe2
 800cd7c:	000fffff 	.word	0x000fffff
 800cd80:	7fefffff 	.word	0x7fefffff
 800cd84:	4333      	orrs	r3, r6
 800cd86:	d100      	bne.n	800cd8a <_strtod_l+0x93e>
 800cd88:	e77c      	b.n	800cc84 <_strtod_l+0x838>
 800cd8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01d      	beq.n	800cdcc <_strtod_l+0x980>
 800cd90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd94:	4213      	tst	r3, r2
 800cd96:	d0e2      	beq.n	800cd5e <_strtod_l+0x912>
 800cd98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd9a:	0030      	movs	r0, r6
 800cd9c:	0039      	movs	r1, r7
 800cd9e:	9a07      	ldr	r2, [sp, #28]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d017      	beq.n	800cdd4 <_strtod_l+0x988>
 800cda4:	f7ff fb3a 	bl	800c41c <sulp>
 800cda8:	0002      	movs	r2, r0
 800cdaa:	000b      	movs	r3, r1
 800cdac:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cdae:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cdb0:	f7f3 fd02 	bl	80007b8 <__aeabi_dadd>
 800cdb4:	0006      	movs	r6, r0
 800cdb6:	000f      	movs	r7, r1
 800cdb8:	e7d1      	b.n	800cd5e <_strtod_l+0x912>
 800cdba:	2601      	movs	r6, #1
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	4a98      	ldr	r2, [pc, #608]	; (800d020 <_strtod_l+0xbd4>)
 800cdc0:	4276      	negs	r6, r6
 800cdc2:	189b      	adds	r3, r3, r2
 800cdc4:	4a97      	ldr	r2, [pc, #604]	; (800d024 <_strtod_l+0xbd8>)
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	0017      	movs	r7, r2
 800cdca:	e7c8      	b.n	800cd5e <_strtod_l+0x912>
 800cdcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdce:	4233      	tst	r3, r6
 800cdd0:	d0c5      	beq.n	800cd5e <_strtod_l+0x912>
 800cdd2:	e7e1      	b.n	800cd98 <_strtod_l+0x94c>
 800cdd4:	f7ff fb22 	bl	800c41c <sulp>
 800cdd8:	0002      	movs	r2, r0
 800cdda:	000b      	movs	r3, r1
 800cddc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cdde:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cde0:	f7f4 ff06 	bl	8001bf0 <__aeabi_dsub>
 800cde4:	2200      	movs	r2, #0
 800cde6:	2300      	movs	r3, #0
 800cde8:	0006      	movs	r6, r0
 800cdea:	000f      	movs	r7, r1
 800cdec:	f7f3 fb2c 	bl	8000448 <__aeabi_dcmpeq>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d0b4      	beq.n	800cd5e <_strtod_l+0x912>
 800cdf4:	e600      	b.n	800c9f8 <_strtod_l+0x5ac>
 800cdf6:	9906      	ldr	r1, [sp, #24]
 800cdf8:	9805      	ldr	r0, [sp, #20]
 800cdfa:	f001 fdc3 	bl	800e984 <__ratio>
 800cdfe:	2380      	movs	r3, #128	; 0x80
 800ce00:	2200      	movs	r2, #0
 800ce02:	05db      	lsls	r3, r3, #23
 800ce04:	0004      	movs	r4, r0
 800ce06:	000d      	movs	r5, r1
 800ce08:	f7f3 fb2e 	bl	8000468 <__aeabi_dcmple>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d06d      	beq.n	800ceec <_strtod_l+0xaa0>
 800ce10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d000      	beq.n	800ce18 <_strtod_l+0x9cc>
 800ce16:	e07e      	b.n	800cf16 <_strtod_l+0xaca>
 800ce18:	2e00      	cmp	r6, #0
 800ce1a:	d158      	bne.n	800cece <_strtod_l+0xa82>
 800ce1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce1e:	031b      	lsls	r3, r3, #12
 800ce20:	d000      	beq.n	800ce24 <_strtod_l+0x9d8>
 800ce22:	e07f      	b.n	800cf24 <_strtod_l+0xad8>
 800ce24:	2200      	movs	r2, #0
 800ce26:	0020      	movs	r0, r4
 800ce28:	0029      	movs	r1, r5
 800ce2a:	4b7f      	ldr	r3, [pc, #508]	; (800d028 <_strtod_l+0xbdc>)
 800ce2c:	f7f3 fb12 	bl	8000454 <__aeabi_dcmplt>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	d158      	bne.n	800cee6 <_strtod_l+0xa9a>
 800ce34:	0020      	movs	r0, r4
 800ce36:	0029      	movs	r1, r5
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4b7c      	ldr	r3, [pc, #496]	; (800d02c <_strtod_l+0xbe0>)
 800ce3c:	f7f4 fc16 	bl	800166c <__aeabi_dmul>
 800ce40:	0004      	movs	r4, r0
 800ce42:	000d      	movs	r5, r1
 800ce44:	2380      	movs	r3, #128	; 0x80
 800ce46:	061b      	lsls	r3, r3, #24
 800ce48:	940a      	str	r4, [sp, #40]	; 0x28
 800ce4a:	18eb      	adds	r3, r5, r3
 800ce4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce52:	9212      	str	r2, [sp, #72]	; 0x48
 800ce54:	9313      	str	r3, [sp, #76]	; 0x4c
 800ce56:	4a76      	ldr	r2, [pc, #472]	; (800d030 <_strtod_l+0xbe4>)
 800ce58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	9314      	str	r3, [sp, #80]	; 0x50
 800ce5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce60:	4b74      	ldr	r3, [pc, #464]	; (800d034 <_strtod_l+0xbe8>)
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d000      	beq.n	800ce68 <_strtod_l+0xa1c>
 800ce66:	e091      	b.n	800cf8c <_strtod_l+0xb40>
 800ce68:	4a73      	ldr	r2, [pc, #460]	; (800d038 <_strtod_l+0xbec>)
 800ce6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce6c:	4694      	mov	ip, r2
 800ce6e:	4463      	add	r3, ip
 800ce70:	001f      	movs	r7, r3
 800ce72:	0030      	movs	r0, r6
 800ce74:	0019      	movs	r1, r3
 800ce76:	f001 fcbd 	bl	800e7f4 <__ulp>
 800ce7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7e:	f7f4 fbf5 	bl	800166c <__aeabi_dmul>
 800ce82:	0032      	movs	r2, r6
 800ce84:	003b      	movs	r3, r7
 800ce86:	f7f3 fc97 	bl	80007b8 <__aeabi_dadd>
 800ce8a:	4a69      	ldr	r2, [pc, #420]	; (800d030 <_strtod_l+0xbe4>)
 800ce8c:	4b6b      	ldr	r3, [pc, #428]	; (800d03c <_strtod_l+0xbf0>)
 800ce8e:	0006      	movs	r6, r0
 800ce90:	400a      	ands	r2, r1
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d949      	bls.n	800cf2a <_strtod_l+0xade>
 800ce96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ce98:	4b69      	ldr	r3, [pc, #420]	; (800d040 <_strtod_l+0xbf4>)
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d103      	bne.n	800cea6 <_strtod_l+0xa5a>
 800ce9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cea0:	3301      	adds	r3, #1
 800cea2:	d100      	bne.n	800cea6 <_strtod_l+0xa5a>
 800cea4:	e535      	b.n	800c912 <_strtod_l+0x4c6>
 800cea6:	2601      	movs	r6, #1
 800cea8:	4f65      	ldr	r7, [pc, #404]	; (800d040 <_strtod_l+0xbf4>)
 800ceaa:	4276      	negs	r6, r6
 800ceac:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ceae:	9804      	ldr	r0, [sp, #16]
 800ceb0:	f001 f992 	bl	800e1d8 <_Bfree>
 800ceb4:	9908      	ldr	r1, [sp, #32]
 800ceb6:	9804      	ldr	r0, [sp, #16]
 800ceb8:	f001 f98e 	bl	800e1d8 <_Bfree>
 800cebc:	9906      	ldr	r1, [sp, #24]
 800cebe:	9804      	ldr	r0, [sp, #16]
 800cec0:	f001 f98a 	bl	800e1d8 <_Bfree>
 800cec4:	9905      	ldr	r1, [sp, #20]
 800cec6:	9804      	ldr	r0, [sp, #16]
 800cec8:	f001 f986 	bl	800e1d8 <_Bfree>
 800cecc:	e60b      	b.n	800cae6 <_strtod_l+0x69a>
 800cece:	2e01      	cmp	r6, #1
 800ced0:	d103      	bne.n	800ceda <_strtod_l+0xa8e>
 800ced2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d100      	bne.n	800ceda <_strtod_l+0xa8e>
 800ced8:	e58e      	b.n	800c9f8 <_strtod_l+0x5ac>
 800ceda:	2300      	movs	r3, #0
 800cedc:	4c59      	ldr	r4, [pc, #356]	; (800d044 <_strtod_l+0xbf8>)
 800cede:	930a      	str	r3, [sp, #40]	; 0x28
 800cee0:	940b      	str	r4, [sp, #44]	; 0x2c
 800cee2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cee4:	e01c      	b.n	800cf20 <_strtod_l+0xad4>
 800cee6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cee8:	4d50      	ldr	r5, [pc, #320]	; (800d02c <_strtod_l+0xbe0>)
 800ceea:	e7ab      	b.n	800ce44 <_strtod_l+0x9f8>
 800ceec:	2200      	movs	r2, #0
 800ceee:	0020      	movs	r0, r4
 800cef0:	0029      	movs	r1, r5
 800cef2:	4b4e      	ldr	r3, [pc, #312]	; (800d02c <_strtod_l+0xbe0>)
 800cef4:	f7f4 fbba 	bl	800166c <__aeabi_dmul>
 800cef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cefa:	0004      	movs	r4, r0
 800cefc:	000b      	movs	r3, r1
 800cefe:	000d      	movs	r5, r1
 800cf00:	2a00      	cmp	r2, #0
 800cf02:	d104      	bne.n	800cf0e <_strtod_l+0xac2>
 800cf04:	2280      	movs	r2, #128	; 0x80
 800cf06:	0612      	lsls	r2, r2, #24
 800cf08:	900a      	str	r0, [sp, #40]	; 0x28
 800cf0a:	188b      	adds	r3, r1, r2
 800cf0c:	e79e      	b.n	800ce4c <_strtod_l+0xa00>
 800cf0e:	0002      	movs	r2, r0
 800cf10:	920a      	str	r2, [sp, #40]	; 0x28
 800cf12:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf14:	e79b      	b.n	800ce4e <_strtod_l+0xa02>
 800cf16:	2300      	movs	r3, #0
 800cf18:	4c43      	ldr	r4, [pc, #268]	; (800d028 <_strtod_l+0xbdc>)
 800cf1a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf1c:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf1e:	2400      	movs	r4, #0
 800cf20:	4d41      	ldr	r5, [pc, #260]	; (800d028 <_strtod_l+0xbdc>)
 800cf22:	e794      	b.n	800ce4e <_strtod_l+0xa02>
 800cf24:	2300      	movs	r3, #0
 800cf26:	4c47      	ldr	r4, [pc, #284]	; (800d044 <_strtod_l+0xbf8>)
 800cf28:	e7f7      	b.n	800cf1a <_strtod_l+0xace>
 800cf2a:	23d4      	movs	r3, #212	; 0xd4
 800cf2c:	049b      	lsls	r3, r3, #18
 800cf2e:	18cf      	adds	r7, r1, r3
 800cf30:	9b07      	ldr	r3, [sp, #28]
 800cf32:	970e      	str	r7, [sp, #56]	; 0x38
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1b9      	bne.n	800ceac <_strtod_l+0xa60>
 800cf38:	4b3d      	ldr	r3, [pc, #244]	; (800d030 <_strtod_l+0xbe4>)
 800cf3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf3c:	403b      	ands	r3, r7
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d1b4      	bne.n	800ceac <_strtod_l+0xa60>
 800cf42:	0020      	movs	r0, r4
 800cf44:	0029      	movs	r1, r5
 800cf46:	f7f3 fb19 	bl	800057c <__aeabi_d2lz>
 800cf4a:	f7f3 fb53 	bl	80005f4 <__aeabi_l2d>
 800cf4e:	0002      	movs	r2, r0
 800cf50:	000b      	movs	r3, r1
 800cf52:	0020      	movs	r0, r4
 800cf54:	0029      	movs	r1, r5
 800cf56:	f7f4 fe4b 	bl	8001bf0 <__aeabi_dsub>
 800cf5a:	033b      	lsls	r3, r7, #12
 800cf5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf5e:	0b1b      	lsrs	r3, r3, #12
 800cf60:	4333      	orrs	r3, r6
 800cf62:	4313      	orrs	r3, r2
 800cf64:	0004      	movs	r4, r0
 800cf66:	000d      	movs	r5, r1
 800cf68:	4a37      	ldr	r2, [pc, #220]	; (800d048 <_strtod_l+0xbfc>)
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d054      	beq.n	800d018 <_strtod_l+0xbcc>
 800cf6e:	4b37      	ldr	r3, [pc, #220]	; (800d04c <_strtod_l+0xc00>)
 800cf70:	f7f3 fa70 	bl	8000454 <__aeabi_dcmplt>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d000      	beq.n	800cf7a <_strtod_l+0xb2e>
 800cf78:	e4d4      	b.n	800c924 <_strtod_l+0x4d8>
 800cf7a:	0020      	movs	r0, r4
 800cf7c:	0029      	movs	r1, r5
 800cf7e:	4a34      	ldr	r2, [pc, #208]	; (800d050 <_strtod_l+0xc04>)
 800cf80:	4b2a      	ldr	r3, [pc, #168]	; (800d02c <_strtod_l+0xbe0>)
 800cf82:	f7f3 fa7b 	bl	800047c <__aeabi_dcmpgt>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d090      	beq.n	800ceac <_strtod_l+0xa60>
 800cf8a:	e4cb      	b.n	800c924 <_strtod_l+0x4d8>
 800cf8c:	9b07      	ldr	r3, [sp, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d02b      	beq.n	800cfea <_strtod_l+0xb9e>
 800cf92:	23d4      	movs	r3, #212	; 0xd4
 800cf94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf96:	04db      	lsls	r3, r3, #19
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d826      	bhi.n	800cfea <_strtod_l+0xb9e>
 800cf9c:	0020      	movs	r0, r4
 800cf9e:	0029      	movs	r1, r5
 800cfa0:	4a2c      	ldr	r2, [pc, #176]	; (800d054 <_strtod_l+0xc08>)
 800cfa2:	4b2d      	ldr	r3, [pc, #180]	; (800d058 <_strtod_l+0xc0c>)
 800cfa4:	f7f3 fa60 	bl	8000468 <__aeabi_dcmple>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d017      	beq.n	800cfdc <_strtod_l+0xb90>
 800cfac:	0020      	movs	r0, r4
 800cfae:	0029      	movs	r1, r5
 800cfb0:	f7f3 fac6 	bl	8000540 <__aeabi_d2uiz>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d100      	bne.n	800cfba <_strtod_l+0xb6e>
 800cfb8:	3001      	adds	r0, #1
 800cfba:	f7f5 fa1f 	bl	80023fc <__aeabi_ui2d>
 800cfbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfc0:	0004      	movs	r4, r0
 800cfc2:	000b      	movs	r3, r1
 800cfc4:	000d      	movs	r5, r1
 800cfc6:	2a00      	cmp	r2, #0
 800cfc8:	d122      	bne.n	800d010 <_strtod_l+0xbc4>
 800cfca:	2280      	movs	r2, #128	; 0x80
 800cfcc:	0612      	lsls	r2, r2, #24
 800cfce:	188b      	adds	r3, r1, r2
 800cfd0:	9016      	str	r0, [sp, #88]	; 0x58
 800cfd2:	9317      	str	r3, [sp, #92]	; 0x5c
 800cfd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cfd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfd8:	9212      	str	r2, [sp, #72]	; 0x48
 800cfda:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfdc:	22d6      	movs	r2, #214	; 0xd6
 800cfde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfe0:	04d2      	lsls	r2, r2, #19
 800cfe2:	189b      	adds	r3, r3, r2
 800cfe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfe6:	1a9b      	subs	r3, r3, r2
 800cfe8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfea:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cfec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cfee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cff0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cff2:	f001 fbff 	bl	800e7f4 <__ulp>
 800cff6:	0002      	movs	r2, r0
 800cff8:	000b      	movs	r3, r1
 800cffa:	0030      	movs	r0, r6
 800cffc:	0039      	movs	r1, r7
 800cffe:	f7f4 fb35 	bl	800166c <__aeabi_dmul>
 800d002:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d006:	f7f3 fbd7 	bl	80007b8 <__aeabi_dadd>
 800d00a:	0006      	movs	r6, r0
 800d00c:	000f      	movs	r7, r1
 800d00e:	e78f      	b.n	800cf30 <_strtod_l+0xae4>
 800d010:	0002      	movs	r2, r0
 800d012:	9216      	str	r2, [sp, #88]	; 0x58
 800d014:	9317      	str	r3, [sp, #92]	; 0x5c
 800d016:	e7dd      	b.n	800cfd4 <_strtod_l+0xb88>
 800d018:	4b10      	ldr	r3, [pc, #64]	; (800d05c <_strtod_l+0xc10>)
 800d01a:	f7f3 fa1b 	bl	8000454 <__aeabi_dcmplt>
 800d01e:	e7b2      	b.n	800cf86 <_strtod_l+0xb3a>
 800d020:	fff00000 	.word	0xfff00000
 800d024:	000fffff 	.word	0x000fffff
 800d028:	3ff00000 	.word	0x3ff00000
 800d02c:	3fe00000 	.word	0x3fe00000
 800d030:	7ff00000 	.word	0x7ff00000
 800d034:	7fe00000 	.word	0x7fe00000
 800d038:	fcb00000 	.word	0xfcb00000
 800d03c:	7c9fffff 	.word	0x7c9fffff
 800d040:	7fefffff 	.word	0x7fefffff
 800d044:	bff00000 	.word	0xbff00000
 800d048:	94a03595 	.word	0x94a03595
 800d04c:	3fdfffff 	.word	0x3fdfffff
 800d050:	35afe535 	.word	0x35afe535
 800d054:	ffc00000 	.word	0xffc00000
 800d058:	41dfffff 	.word	0x41dfffff
 800d05c:	3fcfffff 	.word	0x3fcfffff

0800d060 <_strtod_r>:
 800d060:	b510      	push	{r4, lr}
 800d062:	4b02      	ldr	r3, [pc, #8]	; (800d06c <_strtod_r+0xc>)
 800d064:	f7ff f9f2 	bl	800c44c <_strtod_l>
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	20000444 	.word	0x20000444

0800d070 <strtod>:
 800d070:	b510      	push	{r4, lr}
 800d072:	4c04      	ldr	r4, [pc, #16]	; (800d084 <strtod+0x14>)
 800d074:	000a      	movs	r2, r1
 800d076:	0001      	movs	r1, r0
 800d078:	4b03      	ldr	r3, [pc, #12]	; (800d088 <strtod+0x18>)
 800d07a:	6820      	ldr	r0, [r4, #0]
 800d07c:	f7ff f9e6 	bl	800c44c <_strtod_l>
 800d080:	bd10      	pop	{r4, pc}
 800d082:	46c0      	nop			; (mov r8, r8)
 800d084:	200006d0 	.word	0x200006d0
 800d088:	20000444 	.word	0x20000444

0800d08c <_strtol_l.constprop.0>:
 800d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d08e:	b087      	sub	sp, #28
 800d090:	001e      	movs	r6, r3
 800d092:	9005      	str	r0, [sp, #20]
 800d094:	9101      	str	r1, [sp, #4]
 800d096:	9202      	str	r2, [sp, #8]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d048      	beq.n	800d12e <_strtol_l.constprop.0+0xa2>
 800d09c:	000b      	movs	r3, r1
 800d09e:	2e24      	cmp	r6, #36	; 0x24
 800d0a0:	d845      	bhi.n	800d12e <_strtol_l.constprop.0+0xa2>
 800d0a2:	4a3b      	ldr	r2, [pc, #236]	; (800d190 <_strtol_l.constprop.0+0x104>)
 800d0a4:	2108      	movs	r1, #8
 800d0a6:	4694      	mov	ip, r2
 800d0a8:	001a      	movs	r2, r3
 800d0aa:	4660      	mov	r0, ip
 800d0ac:	7814      	ldrb	r4, [r2, #0]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	5d00      	ldrb	r0, [r0, r4]
 800d0b2:	001d      	movs	r5, r3
 800d0b4:	0007      	movs	r7, r0
 800d0b6:	400f      	ands	r7, r1
 800d0b8:	4208      	tst	r0, r1
 800d0ba:	d1f5      	bne.n	800d0a8 <_strtol_l.constprop.0+0x1c>
 800d0bc:	2c2d      	cmp	r4, #45	; 0x2d
 800d0be:	d13d      	bne.n	800d13c <_strtol_l.constprop.0+0xb0>
 800d0c0:	2701      	movs	r7, #1
 800d0c2:	781c      	ldrb	r4, [r3, #0]
 800d0c4:	1c95      	adds	r5, r2, #2
 800d0c6:	2e00      	cmp	r6, #0
 800d0c8:	d05e      	beq.n	800d188 <_strtol_l.constprop.0+0xfc>
 800d0ca:	2e10      	cmp	r6, #16
 800d0cc:	d109      	bne.n	800d0e2 <_strtol_l.constprop.0+0x56>
 800d0ce:	2c30      	cmp	r4, #48	; 0x30
 800d0d0:	d107      	bne.n	800d0e2 <_strtol_l.constprop.0+0x56>
 800d0d2:	2220      	movs	r2, #32
 800d0d4:	782b      	ldrb	r3, [r5, #0]
 800d0d6:	4393      	bics	r3, r2
 800d0d8:	2b58      	cmp	r3, #88	; 0x58
 800d0da:	d150      	bne.n	800d17e <_strtol_l.constprop.0+0xf2>
 800d0dc:	2610      	movs	r6, #16
 800d0de:	786c      	ldrb	r4, [r5, #1]
 800d0e0:	3502      	adds	r5, #2
 800d0e2:	4b2c      	ldr	r3, [pc, #176]	; (800d194 <_strtol_l.constprop.0+0x108>)
 800d0e4:	0031      	movs	r1, r6
 800d0e6:	18fb      	adds	r3, r7, r3
 800d0e8:	0018      	movs	r0, r3
 800d0ea:	9303      	str	r3, [sp, #12]
 800d0ec:	f7f3 f8ac 	bl	8000248 <__aeabi_uidivmod>
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	9104      	str	r1, [sp, #16]
 800d0f4:	2101      	movs	r1, #1
 800d0f6:	4684      	mov	ip, r0
 800d0f8:	0010      	movs	r0, r2
 800d0fa:	4249      	negs	r1, r1
 800d0fc:	0023      	movs	r3, r4
 800d0fe:	3b30      	subs	r3, #48	; 0x30
 800d100:	2b09      	cmp	r3, #9
 800d102:	d903      	bls.n	800d10c <_strtol_l.constprop.0+0x80>
 800d104:	3b11      	subs	r3, #17
 800d106:	2b19      	cmp	r3, #25
 800d108:	d81d      	bhi.n	800d146 <_strtol_l.constprop.0+0xba>
 800d10a:	330a      	adds	r3, #10
 800d10c:	429e      	cmp	r6, r3
 800d10e:	dd1e      	ble.n	800d14e <_strtol_l.constprop.0+0xc2>
 800d110:	1c54      	adds	r4, r2, #1
 800d112:	d009      	beq.n	800d128 <_strtol_l.constprop.0+0x9c>
 800d114:	000a      	movs	r2, r1
 800d116:	4584      	cmp	ip, r0
 800d118:	d306      	bcc.n	800d128 <_strtol_l.constprop.0+0x9c>
 800d11a:	d102      	bne.n	800d122 <_strtol_l.constprop.0+0x96>
 800d11c:	9c04      	ldr	r4, [sp, #16]
 800d11e:	429c      	cmp	r4, r3
 800d120:	db02      	blt.n	800d128 <_strtol_l.constprop.0+0x9c>
 800d122:	2201      	movs	r2, #1
 800d124:	4370      	muls	r0, r6
 800d126:	1818      	adds	r0, r3, r0
 800d128:	782c      	ldrb	r4, [r5, #0]
 800d12a:	3501      	adds	r5, #1
 800d12c:	e7e6      	b.n	800d0fc <_strtol_l.constprop.0+0x70>
 800d12e:	f000 fb57 	bl	800d7e0 <__errno>
 800d132:	2316      	movs	r3, #22
 800d134:	6003      	str	r3, [r0, #0]
 800d136:	2000      	movs	r0, #0
 800d138:	b007      	add	sp, #28
 800d13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d13c:	2c2b      	cmp	r4, #43	; 0x2b
 800d13e:	d1c2      	bne.n	800d0c6 <_strtol_l.constprop.0+0x3a>
 800d140:	781c      	ldrb	r4, [r3, #0]
 800d142:	1c95      	adds	r5, r2, #2
 800d144:	e7bf      	b.n	800d0c6 <_strtol_l.constprop.0+0x3a>
 800d146:	0023      	movs	r3, r4
 800d148:	3b61      	subs	r3, #97	; 0x61
 800d14a:	2b19      	cmp	r3, #25
 800d14c:	d9dd      	bls.n	800d10a <_strtol_l.constprop.0+0x7e>
 800d14e:	1c53      	adds	r3, r2, #1
 800d150:	d109      	bne.n	800d166 <_strtol_l.constprop.0+0xda>
 800d152:	2322      	movs	r3, #34	; 0x22
 800d154:	9a05      	ldr	r2, [sp, #20]
 800d156:	9803      	ldr	r0, [sp, #12]
 800d158:	6013      	str	r3, [r2, #0]
 800d15a:	9b02      	ldr	r3, [sp, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d0eb      	beq.n	800d138 <_strtol_l.constprop.0+0xac>
 800d160:	1e6b      	subs	r3, r5, #1
 800d162:	9301      	str	r3, [sp, #4]
 800d164:	e007      	b.n	800d176 <_strtol_l.constprop.0+0xea>
 800d166:	2f00      	cmp	r7, #0
 800d168:	d000      	beq.n	800d16c <_strtol_l.constprop.0+0xe0>
 800d16a:	4240      	negs	r0, r0
 800d16c:	9b02      	ldr	r3, [sp, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d0e2      	beq.n	800d138 <_strtol_l.constprop.0+0xac>
 800d172:	2a00      	cmp	r2, #0
 800d174:	d1f4      	bne.n	800d160 <_strtol_l.constprop.0+0xd4>
 800d176:	9b02      	ldr	r3, [sp, #8]
 800d178:	9a01      	ldr	r2, [sp, #4]
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	e7dc      	b.n	800d138 <_strtol_l.constprop.0+0xac>
 800d17e:	2430      	movs	r4, #48	; 0x30
 800d180:	2e00      	cmp	r6, #0
 800d182:	d1ae      	bne.n	800d0e2 <_strtol_l.constprop.0+0x56>
 800d184:	3608      	adds	r6, #8
 800d186:	e7ac      	b.n	800d0e2 <_strtol_l.constprop.0+0x56>
 800d188:	2c30      	cmp	r4, #48	; 0x30
 800d18a:	d0a2      	beq.n	800d0d2 <_strtol_l.constprop.0+0x46>
 800d18c:	260a      	movs	r6, #10
 800d18e:	e7a8      	b.n	800d0e2 <_strtol_l.constprop.0+0x56>
 800d190:	08015d71 	.word	0x08015d71
 800d194:	7fffffff 	.word	0x7fffffff

0800d198 <_strtol_r>:
 800d198:	b510      	push	{r4, lr}
 800d19a:	f7ff ff77 	bl	800d08c <_strtol_l.constprop.0>
 800d19e:	bd10      	pop	{r4, pc}

0800d1a0 <strtol>:
 800d1a0:	b510      	push	{r4, lr}
 800d1a2:	4c04      	ldr	r4, [pc, #16]	; (800d1b4 <strtol+0x14>)
 800d1a4:	0013      	movs	r3, r2
 800d1a6:	000a      	movs	r2, r1
 800d1a8:	0001      	movs	r1, r0
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	f7ff ff6e 	bl	800d08c <_strtol_l.constprop.0>
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	46c0      	nop			; (mov r8, r8)
 800d1b4:	200006d0 	.word	0x200006d0

0800d1b8 <_strtoul_l.constprop.0>:
 800d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	9202      	str	r2, [sp, #8]
 800d1be:	4a3e      	ldr	r2, [pc, #248]	; (800d2b8 <_strtoul_l.constprop.0+0x100>)
 800d1c0:	001e      	movs	r6, r3
 800d1c2:	9101      	str	r1, [sp, #4]
 800d1c4:	000b      	movs	r3, r1
 800d1c6:	4694      	mov	ip, r2
 800d1c8:	2108      	movs	r1, #8
 800d1ca:	9005      	str	r0, [sp, #20]
 800d1cc:	001a      	movs	r2, r3
 800d1ce:	4660      	mov	r0, ip
 800d1d0:	7814      	ldrb	r4, [r2, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	5d00      	ldrb	r0, [r0, r4]
 800d1d6:	001d      	movs	r5, r3
 800d1d8:	0007      	movs	r7, r0
 800d1da:	400f      	ands	r7, r1
 800d1dc:	4208      	tst	r0, r1
 800d1de:	d1f5      	bne.n	800d1cc <_strtoul_l.constprop.0+0x14>
 800d1e0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1e2:	d13d      	bne.n	800d260 <_strtoul_l.constprop.0+0xa8>
 800d1e4:	2701      	movs	r7, #1
 800d1e6:	781c      	ldrb	r4, [r3, #0]
 800d1e8:	1c95      	adds	r5, r2, #2
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d05f      	beq.n	800d2ae <_strtoul_l.constprop.0+0xf6>
 800d1ee:	2e10      	cmp	r6, #16
 800d1f0:	d109      	bne.n	800d206 <_strtoul_l.constprop.0+0x4e>
 800d1f2:	2c30      	cmp	r4, #48	; 0x30
 800d1f4:	d107      	bne.n	800d206 <_strtoul_l.constprop.0+0x4e>
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	782b      	ldrb	r3, [r5, #0]
 800d1fa:	4393      	bics	r3, r2
 800d1fc:	2b58      	cmp	r3, #88	; 0x58
 800d1fe:	d151      	bne.n	800d2a4 <_strtoul_l.constprop.0+0xec>
 800d200:	2610      	movs	r6, #16
 800d202:	786c      	ldrb	r4, [r5, #1]
 800d204:	3502      	adds	r5, #2
 800d206:	2001      	movs	r0, #1
 800d208:	0031      	movs	r1, r6
 800d20a:	4240      	negs	r0, r0
 800d20c:	f7f2 ff96 	bl	800013c <__udivsi3>
 800d210:	9003      	str	r0, [sp, #12]
 800d212:	2001      	movs	r0, #1
 800d214:	0031      	movs	r1, r6
 800d216:	4240      	negs	r0, r0
 800d218:	f7f3 f816 	bl	8000248 <__aeabi_uidivmod>
 800d21c:	2300      	movs	r3, #0
 800d21e:	2201      	movs	r2, #1
 800d220:	9104      	str	r1, [sp, #16]
 800d222:	2101      	movs	r1, #1
 800d224:	0018      	movs	r0, r3
 800d226:	4694      	mov	ip, r2
 800d228:	4249      	negs	r1, r1
 800d22a:	0022      	movs	r2, r4
 800d22c:	3a30      	subs	r2, #48	; 0x30
 800d22e:	2a09      	cmp	r2, #9
 800d230:	d903      	bls.n	800d23a <_strtoul_l.constprop.0+0x82>
 800d232:	3a11      	subs	r2, #17
 800d234:	2a19      	cmp	r2, #25
 800d236:	d818      	bhi.n	800d26a <_strtoul_l.constprop.0+0xb2>
 800d238:	320a      	adds	r2, #10
 800d23a:	4296      	cmp	r6, r2
 800d23c:	dd19      	ble.n	800d272 <_strtoul_l.constprop.0+0xba>
 800d23e:	1c5c      	adds	r4, r3, #1
 800d240:	d00b      	beq.n	800d25a <_strtoul_l.constprop.0+0xa2>
 800d242:	9c03      	ldr	r4, [sp, #12]
 800d244:	000b      	movs	r3, r1
 800d246:	4284      	cmp	r4, r0
 800d248:	d307      	bcc.n	800d25a <_strtoul_l.constprop.0+0xa2>
 800d24a:	d103      	bne.n	800d254 <_strtoul_l.constprop.0+0x9c>
 800d24c:	9c04      	ldr	r4, [sp, #16]
 800d24e:	000b      	movs	r3, r1
 800d250:	4294      	cmp	r4, r2
 800d252:	db02      	blt.n	800d25a <_strtoul_l.constprop.0+0xa2>
 800d254:	4663      	mov	r3, ip
 800d256:	4370      	muls	r0, r6
 800d258:	1810      	adds	r0, r2, r0
 800d25a:	782c      	ldrb	r4, [r5, #0]
 800d25c:	3501      	adds	r5, #1
 800d25e:	e7e4      	b.n	800d22a <_strtoul_l.constprop.0+0x72>
 800d260:	2c2b      	cmp	r4, #43	; 0x2b
 800d262:	d1c2      	bne.n	800d1ea <_strtoul_l.constprop.0+0x32>
 800d264:	781c      	ldrb	r4, [r3, #0]
 800d266:	1c95      	adds	r5, r2, #2
 800d268:	e7bf      	b.n	800d1ea <_strtoul_l.constprop.0+0x32>
 800d26a:	0022      	movs	r2, r4
 800d26c:	3a61      	subs	r2, #97	; 0x61
 800d26e:	2a19      	cmp	r2, #25
 800d270:	d9e2      	bls.n	800d238 <_strtoul_l.constprop.0+0x80>
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	d108      	bne.n	800d288 <_strtoul_l.constprop.0+0xd0>
 800d276:	2222      	movs	r2, #34	; 0x22
 800d278:	9905      	ldr	r1, [sp, #20]
 800d27a:	0018      	movs	r0, r3
 800d27c:	600a      	str	r2, [r1, #0]
 800d27e:	9a02      	ldr	r2, [sp, #8]
 800d280:	2a00      	cmp	r2, #0
 800d282:	d109      	bne.n	800d298 <_strtoul_l.constprop.0+0xe0>
 800d284:	b007      	add	sp, #28
 800d286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d288:	2f00      	cmp	r7, #0
 800d28a:	d000      	beq.n	800d28e <_strtoul_l.constprop.0+0xd6>
 800d28c:	4240      	negs	r0, r0
 800d28e:	9a02      	ldr	r2, [sp, #8]
 800d290:	2a00      	cmp	r2, #0
 800d292:	d0f7      	beq.n	800d284 <_strtoul_l.constprop.0+0xcc>
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <_strtoul_l.constprop.0+0xe4>
 800d298:	1e6b      	subs	r3, r5, #1
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	9b02      	ldr	r3, [sp, #8]
 800d29e:	9a01      	ldr	r2, [sp, #4]
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	e7ef      	b.n	800d284 <_strtoul_l.constprop.0+0xcc>
 800d2a4:	2430      	movs	r4, #48	; 0x30
 800d2a6:	2e00      	cmp	r6, #0
 800d2a8:	d1ad      	bne.n	800d206 <_strtoul_l.constprop.0+0x4e>
 800d2aa:	3608      	adds	r6, #8
 800d2ac:	e7ab      	b.n	800d206 <_strtoul_l.constprop.0+0x4e>
 800d2ae:	2c30      	cmp	r4, #48	; 0x30
 800d2b0:	d0a1      	beq.n	800d1f6 <_strtoul_l.constprop.0+0x3e>
 800d2b2:	260a      	movs	r6, #10
 800d2b4:	e7a7      	b.n	800d206 <_strtoul_l.constprop.0+0x4e>
 800d2b6:	46c0      	nop			; (mov r8, r8)
 800d2b8:	08015d71 	.word	0x08015d71

0800d2bc <_strtoul_r>:
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	f7ff ff7b 	bl	800d1b8 <_strtoul_l.constprop.0>
 800d2c2:	bd10      	pop	{r4, pc}

0800d2c4 <strtoul>:
 800d2c4:	b510      	push	{r4, lr}
 800d2c6:	4c04      	ldr	r4, [pc, #16]	; (800d2d8 <strtoul+0x14>)
 800d2c8:	0013      	movs	r3, r2
 800d2ca:	000a      	movs	r2, r1
 800d2cc:	0001      	movs	r1, r0
 800d2ce:	6820      	ldr	r0, [r4, #0]
 800d2d0:	f7ff ff72 	bl	800d1b8 <_strtoul_l.constprop.0>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	46c0      	nop			; (mov r8, r8)
 800d2d8:	200006d0 	.word	0x200006d0

0800d2dc <std>:
 800d2dc:	2300      	movs	r3, #0
 800d2de:	b510      	push	{r4, lr}
 800d2e0:	0004      	movs	r4, r0
 800d2e2:	6003      	str	r3, [r0, #0]
 800d2e4:	6043      	str	r3, [r0, #4]
 800d2e6:	6083      	str	r3, [r0, #8]
 800d2e8:	8181      	strh	r1, [r0, #12]
 800d2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800d2ec:	81c2      	strh	r2, [r0, #14]
 800d2ee:	6103      	str	r3, [r0, #16]
 800d2f0:	6143      	str	r3, [r0, #20]
 800d2f2:	6183      	str	r3, [r0, #24]
 800d2f4:	0019      	movs	r1, r3
 800d2f6:	2208      	movs	r2, #8
 800d2f8:	305c      	adds	r0, #92	; 0x5c
 800d2fa:	f000 f97d 	bl	800d5f8 <memset>
 800d2fe:	4b0b      	ldr	r3, [pc, #44]	; (800d32c <std+0x50>)
 800d300:	61e4      	str	r4, [r4, #28]
 800d302:	6223      	str	r3, [r4, #32]
 800d304:	4b0a      	ldr	r3, [pc, #40]	; (800d330 <std+0x54>)
 800d306:	6263      	str	r3, [r4, #36]	; 0x24
 800d308:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <std+0x58>)
 800d30a:	62a3      	str	r3, [r4, #40]	; 0x28
 800d30c:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <std+0x5c>)
 800d30e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d310:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <std+0x60>)
 800d312:	429c      	cmp	r4, r3
 800d314:	d005      	beq.n	800d322 <std+0x46>
 800d316:	4b0a      	ldr	r3, [pc, #40]	; (800d340 <std+0x64>)
 800d318:	429c      	cmp	r4, r3
 800d31a:	d002      	beq.n	800d322 <std+0x46>
 800d31c:	4b09      	ldr	r3, [pc, #36]	; (800d344 <std+0x68>)
 800d31e:	429c      	cmp	r4, r3
 800d320:	d103      	bne.n	800d32a <std+0x4e>
 800d322:	0020      	movs	r0, r4
 800d324:	3058      	adds	r0, #88	; 0x58
 800d326:	f000 fa85 	bl	800d834 <__retarget_lock_init_recursive>
 800d32a:	bd10      	pop	{r4, pc}
 800d32c:	0800d55d 	.word	0x0800d55d
 800d330:	0800d589 	.word	0x0800d589
 800d334:	0800d5c1 	.word	0x0800d5c1
 800d338:	0800d5ed 	.word	0x0800d5ed
 800d33c:	20000c88 	.word	0x20000c88
 800d340:	20000cf0 	.word	0x20000cf0
 800d344:	20000d58 	.word	0x20000d58

0800d348 <stdio_exit_handler>:
 800d348:	b510      	push	{r4, lr}
 800d34a:	4a03      	ldr	r2, [pc, #12]	; (800d358 <stdio_exit_handler+0x10>)
 800d34c:	4903      	ldr	r1, [pc, #12]	; (800d35c <stdio_exit_handler+0x14>)
 800d34e:	4804      	ldr	r0, [pc, #16]	; (800d360 <stdio_exit_handler+0x18>)
 800d350:	f000 f86c 	bl	800d42c <_fwalk_sglue>
 800d354:	bd10      	pop	{r4, pc}
 800d356:	46c0      	nop			; (mov r8, r8)
 800d358:	20000438 	.word	0x20000438
 800d35c:	08011335 	.word	0x08011335
 800d360:	200005b0 	.word	0x200005b0

0800d364 <cleanup_stdio>:
 800d364:	6841      	ldr	r1, [r0, #4]
 800d366:	4b0b      	ldr	r3, [pc, #44]	; (800d394 <cleanup_stdio+0x30>)
 800d368:	b510      	push	{r4, lr}
 800d36a:	0004      	movs	r4, r0
 800d36c:	4299      	cmp	r1, r3
 800d36e:	d001      	beq.n	800d374 <cleanup_stdio+0x10>
 800d370:	f003 ffe0 	bl	8011334 <_fclose_r>
 800d374:	68a1      	ldr	r1, [r4, #8]
 800d376:	4b08      	ldr	r3, [pc, #32]	; (800d398 <cleanup_stdio+0x34>)
 800d378:	4299      	cmp	r1, r3
 800d37a:	d002      	beq.n	800d382 <cleanup_stdio+0x1e>
 800d37c:	0020      	movs	r0, r4
 800d37e:	f003 ffd9 	bl	8011334 <_fclose_r>
 800d382:	68e1      	ldr	r1, [r4, #12]
 800d384:	4b05      	ldr	r3, [pc, #20]	; (800d39c <cleanup_stdio+0x38>)
 800d386:	4299      	cmp	r1, r3
 800d388:	d002      	beq.n	800d390 <cleanup_stdio+0x2c>
 800d38a:	0020      	movs	r0, r4
 800d38c:	f003 ffd2 	bl	8011334 <_fclose_r>
 800d390:	bd10      	pop	{r4, pc}
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	20000c88 	.word	0x20000c88
 800d398:	20000cf0 	.word	0x20000cf0
 800d39c:	20000d58 	.word	0x20000d58

0800d3a0 <global_stdio_init.part.0>:
 800d3a0:	b510      	push	{r4, lr}
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <global_stdio_init.part.0+0x28>)
 800d3a4:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <global_stdio_init.part.0+0x2c>)
 800d3a6:	2104      	movs	r1, #4
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	4809      	ldr	r0, [pc, #36]	; (800d3d0 <global_stdio_init.part.0+0x30>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f7ff ff95 	bl	800d2dc <std>
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	2109      	movs	r1, #9
 800d3b6:	4807      	ldr	r0, [pc, #28]	; (800d3d4 <global_stdio_init.part.0+0x34>)
 800d3b8:	f7ff ff90 	bl	800d2dc <std>
 800d3bc:	2202      	movs	r2, #2
 800d3be:	2112      	movs	r1, #18
 800d3c0:	4805      	ldr	r0, [pc, #20]	; (800d3d8 <global_stdio_init.part.0+0x38>)
 800d3c2:	f7ff ff8b 	bl	800d2dc <std>
 800d3c6:	bd10      	pop	{r4, pc}
 800d3c8:	20000dc0 	.word	0x20000dc0
 800d3cc:	0800d349 	.word	0x0800d349
 800d3d0:	20000c88 	.word	0x20000c88
 800d3d4:	20000cf0 	.word	0x20000cf0
 800d3d8:	20000d58 	.word	0x20000d58

0800d3dc <__sfp_lock_acquire>:
 800d3dc:	b510      	push	{r4, lr}
 800d3de:	4802      	ldr	r0, [pc, #8]	; (800d3e8 <__sfp_lock_acquire+0xc>)
 800d3e0:	f000 fa2a 	bl	800d838 <__retarget_lock_acquire_recursive>
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	46c0      	nop			; (mov r8, r8)
 800d3e8:	20000dca 	.word	0x20000dca

0800d3ec <__sfp_lock_release>:
 800d3ec:	b510      	push	{r4, lr}
 800d3ee:	4802      	ldr	r0, [pc, #8]	; (800d3f8 <__sfp_lock_release+0xc>)
 800d3f0:	f000 fa23 	bl	800d83a <__retarget_lock_release_recursive>
 800d3f4:	bd10      	pop	{r4, pc}
 800d3f6:	46c0      	nop			; (mov r8, r8)
 800d3f8:	20000dca 	.word	0x20000dca

0800d3fc <__sinit>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	0004      	movs	r4, r0
 800d400:	f7ff ffec 	bl	800d3dc <__sfp_lock_acquire>
 800d404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <__sinit+0x14>
 800d40a:	f7ff ffef 	bl	800d3ec <__sfp_lock_release>
 800d40e:	bd10      	pop	{r4, pc}
 800d410:	4b04      	ldr	r3, [pc, #16]	; (800d424 <__sinit+0x28>)
 800d412:	6363      	str	r3, [r4, #52]	; 0x34
 800d414:	4b04      	ldr	r3, [pc, #16]	; (800d428 <__sinit+0x2c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f6      	bne.n	800d40a <__sinit+0xe>
 800d41c:	f7ff ffc0 	bl	800d3a0 <global_stdio_init.part.0>
 800d420:	e7f3      	b.n	800d40a <__sinit+0xe>
 800d422:	46c0      	nop			; (mov r8, r8)
 800d424:	0800d365 	.word	0x0800d365
 800d428:	20000dc0 	.word	0x20000dc0

0800d42c <_fwalk_sglue>:
 800d42c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d42e:	0014      	movs	r4, r2
 800d430:	2600      	movs	r6, #0
 800d432:	9000      	str	r0, [sp, #0]
 800d434:	9101      	str	r1, [sp, #4]
 800d436:	68a5      	ldr	r5, [r4, #8]
 800d438:	6867      	ldr	r7, [r4, #4]
 800d43a:	3f01      	subs	r7, #1
 800d43c:	d504      	bpl.n	800d448 <_fwalk_sglue+0x1c>
 800d43e:	6824      	ldr	r4, [r4, #0]
 800d440:	2c00      	cmp	r4, #0
 800d442:	d1f8      	bne.n	800d436 <_fwalk_sglue+0xa>
 800d444:	0030      	movs	r0, r6
 800d446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d448:	89ab      	ldrh	r3, [r5, #12]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d908      	bls.n	800d460 <_fwalk_sglue+0x34>
 800d44e:	220e      	movs	r2, #14
 800d450:	5eab      	ldrsh	r3, [r5, r2]
 800d452:	3301      	adds	r3, #1
 800d454:	d004      	beq.n	800d460 <_fwalk_sglue+0x34>
 800d456:	0029      	movs	r1, r5
 800d458:	9800      	ldr	r0, [sp, #0]
 800d45a:	9b01      	ldr	r3, [sp, #4]
 800d45c:	4798      	blx	r3
 800d45e:	4306      	orrs	r6, r0
 800d460:	3568      	adds	r5, #104	; 0x68
 800d462:	e7ea      	b.n	800d43a <_fwalk_sglue+0xe>

0800d464 <snprintf>:
 800d464:	b40c      	push	{r2, r3}
 800d466:	b530      	push	{r4, r5, lr}
 800d468:	4b17      	ldr	r3, [pc, #92]	; (800d4c8 <snprintf+0x64>)
 800d46a:	000c      	movs	r4, r1
 800d46c:	681d      	ldr	r5, [r3, #0]
 800d46e:	b09d      	sub	sp, #116	; 0x74
 800d470:	2900      	cmp	r1, #0
 800d472:	da08      	bge.n	800d486 <snprintf+0x22>
 800d474:	238b      	movs	r3, #139	; 0x8b
 800d476:	2001      	movs	r0, #1
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	4240      	negs	r0, r0
 800d47c:	b01d      	add	sp, #116	; 0x74
 800d47e:	bc30      	pop	{r4, r5}
 800d480:	bc08      	pop	{r3}
 800d482:	b002      	add	sp, #8
 800d484:	4718      	bx	r3
 800d486:	2382      	movs	r3, #130	; 0x82
 800d488:	466a      	mov	r2, sp
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	8293      	strh	r3, [r2, #20]
 800d48e:	2300      	movs	r3, #0
 800d490:	9002      	str	r0, [sp, #8]
 800d492:	9006      	str	r0, [sp, #24]
 800d494:	4299      	cmp	r1, r3
 800d496:	d000      	beq.n	800d49a <snprintf+0x36>
 800d498:	1e4b      	subs	r3, r1, #1
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	9307      	str	r3, [sp, #28]
 800d49e:	2301      	movs	r3, #1
 800d4a0:	466a      	mov	r2, sp
 800d4a2:	425b      	negs	r3, r3
 800d4a4:	82d3      	strh	r3, [r2, #22]
 800d4a6:	0028      	movs	r0, r5
 800d4a8:	ab21      	add	r3, sp, #132	; 0x84
 800d4aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4ac:	a902      	add	r1, sp, #8
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	f001 fae2 	bl	800ea78 <_svfprintf_r>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	da01      	bge.n	800d4bc <snprintf+0x58>
 800d4b8:	238b      	movs	r3, #139	; 0x8b
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	2c00      	cmp	r4, #0
 800d4be:	d0dd      	beq.n	800d47c <snprintf+0x18>
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	9b02      	ldr	r3, [sp, #8]
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	e7d9      	b.n	800d47c <snprintf+0x18>
 800d4c8:	200006d0 	.word	0x200006d0

0800d4cc <sprintf>:
 800d4cc:	b40e      	push	{r1, r2, r3}
 800d4ce:	b500      	push	{lr}
 800d4d0:	490b      	ldr	r1, [pc, #44]	; (800d500 <sprintf+0x34>)
 800d4d2:	b09c      	sub	sp, #112	; 0x70
 800d4d4:	ab1d      	add	r3, sp, #116	; 0x74
 800d4d6:	9002      	str	r0, [sp, #8]
 800d4d8:	9006      	str	r0, [sp, #24]
 800d4da:	9107      	str	r1, [sp, #28]
 800d4dc:	9104      	str	r1, [sp, #16]
 800d4de:	4809      	ldr	r0, [pc, #36]	; (800d504 <sprintf+0x38>)
 800d4e0:	4909      	ldr	r1, [pc, #36]	; (800d508 <sprintf+0x3c>)
 800d4e2:	cb04      	ldmia	r3!, {r2}
 800d4e4:	9105      	str	r1, [sp, #20]
 800d4e6:	6800      	ldr	r0, [r0, #0]
 800d4e8:	a902      	add	r1, sp, #8
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	f001 fac4 	bl	800ea78 <_svfprintf_r>
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	9b02      	ldr	r3, [sp, #8]
 800d4f4:	701a      	strb	r2, [r3, #0]
 800d4f6:	b01c      	add	sp, #112	; 0x70
 800d4f8:	bc08      	pop	{r3}
 800d4fa:	b003      	add	sp, #12
 800d4fc:	4718      	bx	r3
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	7fffffff 	.word	0x7fffffff
 800d504:	200006d0 	.word	0x200006d0
 800d508:	ffff0208 	.word	0xffff0208

0800d50c <sscanf>:
 800d50c:	b40e      	push	{r1, r2, r3}
 800d50e:	b530      	push	{r4, r5, lr}
 800d510:	2381      	movs	r3, #129	; 0x81
 800d512:	b09c      	sub	sp, #112	; 0x70
 800d514:	466a      	mov	r2, sp
 800d516:	ac1f      	add	r4, sp, #124	; 0x7c
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	cc20      	ldmia	r4!, {r5}
 800d51c:	8293      	strh	r3, [r2, #20]
 800d51e:	9002      	str	r0, [sp, #8]
 800d520:	9006      	str	r0, [sp, #24]
 800d522:	f7f2 fdef 	bl	8000104 <strlen>
 800d526:	4b0b      	ldr	r3, [pc, #44]	; (800d554 <sscanf+0x48>)
 800d528:	466a      	mov	r2, sp
 800d52a:	930a      	str	r3, [sp, #40]	; 0x28
 800d52c:	2300      	movs	r3, #0
 800d52e:	9003      	str	r0, [sp, #12]
 800d530:	9007      	str	r0, [sp, #28]
 800d532:	4809      	ldr	r0, [pc, #36]	; (800d558 <sscanf+0x4c>)
 800d534:	930e      	str	r3, [sp, #56]	; 0x38
 800d536:	9313      	str	r3, [sp, #76]	; 0x4c
 800d538:	3b01      	subs	r3, #1
 800d53a:	82d3      	strh	r3, [r2, #22]
 800d53c:	a902      	add	r1, sp, #8
 800d53e:	0023      	movs	r3, r4
 800d540:	002a      	movs	r2, r5
 800d542:	6800      	ldr	r0, [r0, #0]
 800d544:	9401      	str	r4, [sp, #4]
 800d546:	f002 fcd9 	bl	800fefc <__ssvfscanf_r>
 800d54a:	b01c      	add	sp, #112	; 0x70
 800d54c:	bc30      	pop	{r4, r5}
 800d54e:	bc08      	pop	{r3}
 800d550:	b003      	add	sp, #12
 800d552:	4718      	bx	r3
 800d554:	0800d585 	.word	0x0800d585
 800d558:	200006d0 	.word	0x200006d0

0800d55c <__sread>:
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	000c      	movs	r4, r1
 800d560:	250e      	movs	r5, #14
 800d562:	5f49      	ldrsh	r1, [r1, r5]
 800d564:	f000 f902 	bl	800d76c <_read_r>
 800d568:	2800      	cmp	r0, #0
 800d56a:	db03      	blt.n	800d574 <__sread+0x18>
 800d56c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d56e:	181b      	adds	r3, r3, r0
 800d570:	6523      	str	r3, [r4, #80]	; 0x50
 800d572:	bd70      	pop	{r4, r5, r6, pc}
 800d574:	89a3      	ldrh	r3, [r4, #12]
 800d576:	4a02      	ldr	r2, [pc, #8]	; (800d580 <__sread+0x24>)
 800d578:	4013      	ands	r3, r2
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	e7f9      	b.n	800d572 <__sread+0x16>
 800d57e:	46c0      	nop			; (mov r8, r8)
 800d580:	ffffefff 	.word	0xffffefff

0800d584 <__seofread>:
 800d584:	2000      	movs	r0, #0
 800d586:	4770      	bx	lr

0800d588 <__swrite>:
 800d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58a:	001f      	movs	r7, r3
 800d58c:	898b      	ldrh	r3, [r1, #12]
 800d58e:	0005      	movs	r5, r0
 800d590:	000c      	movs	r4, r1
 800d592:	0016      	movs	r6, r2
 800d594:	05db      	lsls	r3, r3, #23
 800d596:	d505      	bpl.n	800d5a4 <__swrite+0x1c>
 800d598:	230e      	movs	r3, #14
 800d59a:	5ec9      	ldrsh	r1, [r1, r3]
 800d59c:	2200      	movs	r2, #0
 800d59e:	2302      	movs	r3, #2
 800d5a0:	f000 f8d0 	bl	800d744 <_lseek_r>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	4a05      	ldr	r2, [pc, #20]	; (800d5bc <__swrite+0x34>)
 800d5a8:	0028      	movs	r0, r5
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	0032      	movs	r2, r6
 800d5b0:	230e      	movs	r3, #14
 800d5b2:	5ee1      	ldrsh	r1, [r4, r3]
 800d5b4:	003b      	movs	r3, r7
 800d5b6:	f000 f8ff 	bl	800d7b8 <_write_r>
 800d5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5bc:	ffffefff 	.word	0xffffefff

0800d5c0 <__sseek>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	000c      	movs	r4, r1
 800d5c4:	250e      	movs	r5, #14
 800d5c6:	5f49      	ldrsh	r1, [r1, r5]
 800d5c8:	f000 f8bc 	bl	800d744 <_lseek_r>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	1c42      	adds	r2, r0, #1
 800d5d0:	d103      	bne.n	800d5da <__sseek+0x1a>
 800d5d2:	4a05      	ldr	r2, [pc, #20]	; (800d5e8 <__sseek+0x28>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	bd70      	pop	{r4, r5, r6, pc}
 800d5da:	2280      	movs	r2, #128	; 0x80
 800d5dc:	0152      	lsls	r2, r2, #5
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	6520      	str	r0, [r4, #80]	; 0x50
 800d5e4:	e7f8      	b.n	800d5d8 <__sseek+0x18>
 800d5e6:	46c0      	nop			; (mov r8, r8)
 800d5e8:	ffffefff 	.word	0xffffefff

0800d5ec <__sclose>:
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	230e      	movs	r3, #14
 800d5f0:	5ec9      	ldrsh	r1, [r1, r3]
 800d5f2:	f000 f895 	bl	800d720 <_close_r>
 800d5f6:	bd10      	pop	{r4, pc}

0800d5f8 <memset>:
 800d5f8:	0003      	movs	r3, r0
 800d5fa:	1882      	adds	r2, r0, r2
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d100      	bne.n	800d602 <memset+0xa>
 800d600:	4770      	bx	lr
 800d602:	7019      	strb	r1, [r3, #0]
 800d604:	3301      	adds	r3, #1
 800d606:	e7f9      	b.n	800d5fc <memset+0x4>

0800d608 <strchr>:
 800d608:	b2c9      	uxtb	r1, r1
 800d60a:	7803      	ldrb	r3, [r0, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d004      	beq.n	800d61a <strchr+0x12>
 800d610:	428b      	cmp	r3, r1
 800d612:	d100      	bne.n	800d616 <strchr+0xe>
 800d614:	4770      	bx	lr
 800d616:	3001      	adds	r0, #1
 800d618:	e7f7      	b.n	800d60a <strchr+0x2>
 800d61a:	424b      	negs	r3, r1
 800d61c:	4159      	adcs	r1, r3
 800d61e:	4249      	negs	r1, r1
 800d620:	4008      	ands	r0, r1
 800d622:	e7f7      	b.n	800d614 <strchr+0xc>

0800d624 <strncmp>:
 800d624:	b530      	push	{r4, r5, lr}
 800d626:	0005      	movs	r5, r0
 800d628:	1e10      	subs	r0, r2, #0
 800d62a:	d00b      	beq.n	800d644 <strncmp+0x20>
 800d62c:	2400      	movs	r4, #0
 800d62e:	3a01      	subs	r2, #1
 800d630:	5d2b      	ldrb	r3, [r5, r4]
 800d632:	5d08      	ldrb	r0, [r1, r4]
 800d634:	4283      	cmp	r3, r0
 800d636:	d104      	bne.n	800d642 <strncmp+0x1e>
 800d638:	42a2      	cmp	r2, r4
 800d63a:	d002      	beq.n	800d642 <strncmp+0x1e>
 800d63c:	3401      	adds	r4, #1
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d1f6      	bne.n	800d630 <strncmp+0xc>
 800d642:	1a18      	subs	r0, r3, r0
 800d644:	bd30      	pop	{r4, r5, pc}

0800d646 <strncpy>:
 800d646:	0003      	movs	r3, r0
 800d648:	b530      	push	{r4, r5, lr}
 800d64a:	001d      	movs	r5, r3
 800d64c:	2a00      	cmp	r2, #0
 800d64e:	d006      	beq.n	800d65e <strncpy+0x18>
 800d650:	780c      	ldrb	r4, [r1, #0]
 800d652:	3a01      	subs	r2, #1
 800d654:	3301      	adds	r3, #1
 800d656:	702c      	strb	r4, [r5, #0]
 800d658:	3101      	adds	r1, #1
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	d1f5      	bne.n	800d64a <strncpy+0x4>
 800d65e:	2100      	movs	r1, #0
 800d660:	189a      	adds	r2, r3, r2
 800d662:	4293      	cmp	r3, r2
 800d664:	d100      	bne.n	800d668 <strncpy+0x22>
 800d666:	bd30      	pop	{r4, r5, pc}
 800d668:	7019      	strb	r1, [r3, #0]
 800d66a:	3301      	adds	r3, #1
 800d66c:	e7f9      	b.n	800d662 <strncpy+0x1c>
	...

0800d670 <strtok>:
 800d670:	4b03      	ldr	r3, [pc, #12]	; (800d680 <strtok+0x10>)
 800d672:	b510      	push	{r4, lr}
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	2301      	movs	r3, #1
 800d678:	3250      	adds	r2, #80	; 0x50
 800d67a:	f000 f803 	bl	800d684 <__strtok_r>
 800d67e:	bd10      	pop	{r4, pc}
 800d680:	200006d0 	.word	0x200006d0

0800d684 <__strtok_r>:
 800d684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d686:	2800      	cmp	r0, #0
 800d688:	d102      	bne.n	800d690 <__strtok_r+0xc>
 800d68a:	6810      	ldr	r0, [r2, #0]
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d013      	beq.n	800d6b8 <__strtok_r+0x34>
 800d690:	0004      	movs	r4, r0
 800d692:	0020      	movs	r0, r4
 800d694:	000e      	movs	r6, r1
 800d696:	7805      	ldrb	r5, [r0, #0]
 800d698:	3401      	adds	r4, #1
 800d69a:	7837      	ldrb	r7, [r6, #0]
 800d69c:	2f00      	cmp	r7, #0
 800d69e:	d104      	bne.n	800d6aa <__strtok_r+0x26>
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	d10f      	bne.n	800d6c4 <__strtok_r+0x40>
 800d6a4:	0028      	movs	r0, r5
 800d6a6:	6015      	str	r5, [r2, #0]
 800d6a8:	e006      	b.n	800d6b8 <__strtok_r+0x34>
 800d6aa:	3601      	adds	r6, #1
 800d6ac:	42bd      	cmp	r5, r7
 800d6ae:	d1f4      	bne.n	800d69a <__strtok_r+0x16>
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1ee      	bne.n	800d692 <__strtok_r+0xe>
 800d6b4:	6014      	str	r4, [r2, #0]
 800d6b6:	7003      	strb	r3, [r0, #0]
 800d6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ba:	002f      	movs	r7, r5
 800d6bc:	e00f      	b.n	800d6de <__strtok_r+0x5a>
 800d6be:	3301      	adds	r3, #1
 800d6c0:	2e00      	cmp	r6, #0
 800d6c2:	d104      	bne.n	800d6ce <__strtok_r+0x4a>
 800d6c4:	0023      	movs	r3, r4
 800d6c6:	3401      	adds	r4, #1
 800d6c8:	781d      	ldrb	r5, [r3, #0]
 800d6ca:	0027      	movs	r7, r4
 800d6cc:	000b      	movs	r3, r1
 800d6ce:	781e      	ldrb	r6, [r3, #0]
 800d6d0:	42b5      	cmp	r5, r6
 800d6d2:	d1f4      	bne.n	800d6be <__strtok_r+0x3a>
 800d6d4:	2d00      	cmp	r5, #0
 800d6d6:	d0f0      	beq.n	800d6ba <__strtok_r+0x36>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	3c01      	subs	r4, #1
 800d6dc:	7023      	strb	r3, [r4, #0]
 800d6de:	6017      	str	r7, [r2, #0]
 800d6e0:	e7ea      	b.n	800d6b8 <__strtok_r+0x34>

0800d6e2 <strstr>:
 800d6e2:	780a      	ldrb	r2, [r1, #0]
 800d6e4:	b530      	push	{r4, r5, lr}
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	d10c      	bne.n	800d704 <strstr+0x22>
 800d6ea:	bd30      	pop	{r4, r5, pc}
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d108      	bne.n	800d702 <strstr+0x20>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	5ccc      	ldrb	r4, [r1, r3]
 800d6f4:	2c00      	cmp	r4, #0
 800d6f6:	d0f8      	beq.n	800d6ea <strstr+0x8>
 800d6f8:	5cc5      	ldrb	r5, [r0, r3]
 800d6fa:	42a5      	cmp	r5, r4
 800d6fc:	d101      	bne.n	800d702 <strstr+0x20>
 800d6fe:	3301      	adds	r3, #1
 800d700:	e7f7      	b.n	800d6f2 <strstr+0x10>
 800d702:	3001      	adds	r0, #1
 800d704:	7803      	ldrb	r3, [r0, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1f0      	bne.n	800d6ec <strstr+0xa>
 800d70a:	0018      	movs	r0, r3
 800d70c:	e7ed      	b.n	800d6ea <strstr+0x8>
	...

0800d710 <__locale_mb_cur_max>:
 800d710:	2294      	movs	r2, #148	; 0x94
 800d712:	4b02      	ldr	r3, [pc, #8]	; (800d71c <__locale_mb_cur_max+0xc>)
 800d714:	0052      	lsls	r2, r2, #1
 800d716:	5c98      	ldrb	r0, [r3, r2]
 800d718:	4770      	bx	lr
 800d71a:	46c0      	nop			; (mov r8, r8)
 800d71c:	20000444 	.word	0x20000444

0800d720 <_close_r>:
 800d720:	2300      	movs	r3, #0
 800d722:	b570      	push	{r4, r5, r6, lr}
 800d724:	4d06      	ldr	r5, [pc, #24]	; (800d740 <_close_r+0x20>)
 800d726:	0004      	movs	r4, r0
 800d728:	0008      	movs	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f6 fe29 	bl	8004382 <_close>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d103      	bne.n	800d73c <_close_r+0x1c>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d000      	beq.n	800d73c <_close_r+0x1c>
 800d73a:	6023      	str	r3, [r4, #0]
 800d73c:	bd70      	pop	{r4, r5, r6, pc}
 800d73e:	46c0      	nop			; (mov r8, r8)
 800d740:	20000dc4 	.word	0x20000dc4

0800d744 <_lseek_r>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	0004      	movs	r4, r0
 800d748:	0008      	movs	r0, r1
 800d74a:	0011      	movs	r1, r2
 800d74c:	001a      	movs	r2, r3
 800d74e:	2300      	movs	r3, #0
 800d750:	4d05      	ldr	r5, [pc, #20]	; (800d768 <_lseek_r+0x24>)
 800d752:	602b      	str	r3, [r5, #0]
 800d754:	f7f6 fe36 	bl	80043c4 <_lseek>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d103      	bne.n	800d764 <_lseek_r+0x20>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d000      	beq.n	800d764 <_lseek_r+0x20>
 800d762:	6023      	str	r3, [r4, #0]
 800d764:	bd70      	pop	{r4, r5, r6, pc}
 800d766:	46c0      	nop			; (mov r8, r8)
 800d768:	20000dc4 	.word	0x20000dc4

0800d76c <_read_r>:
 800d76c:	b570      	push	{r4, r5, r6, lr}
 800d76e:	0004      	movs	r4, r0
 800d770:	0008      	movs	r0, r1
 800d772:	0011      	movs	r1, r2
 800d774:	001a      	movs	r2, r3
 800d776:	2300      	movs	r3, #0
 800d778:	4d05      	ldr	r5, [pc, #20]	; (800d790 <_read_r+0x24>)
 800d77a:	602b      	str	r3, [r5, #0]
 800d77c:	f7f6 fdc8 	bl	8004310 <_read>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d103      	bne.n	800d78c <_read_r+0x20>
 800d784:	682b      	ldr	r3, [r5, #0]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d000      	beq.n	800d78c <_read_r+0x20>
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	20000dc4 	.word	0x20000dc4

0800d794 <_sbrk_r>:
 800d794:	2300      	movs	r3, #0
 800d796:	b570      	push	{r4, r5, r6, lr}
 800d798:	4d06      	ldr	r5, [pc, #24]	; (800d7b4 <_sbrk_r+0x20>)
 800d79a:	0004      	movs	r4, r0
 800d79c:	0008      	movs	r0, r1
 800d79e:	602b      	str	r3, [r5, #0]
 800d7a0:	f7f6 fe1c 	bl	80043dc <_sbrk>
 800d7a4:	1c43      	adds	r3, r0, #1
 800d7a6:	d103      	bne.n	800d7b0 <_sbrk_r+0x1c>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d000      	beq.n	800d7b0 <_sbrk_r+0x1c>
 800d7ae:	6023      	str	r3, [r4, #0]
 800d7b0:	bd70      	pop	{r4, r5, r6, pc}
 800d7b2:	46c0      	nop			; (mov r8, r8)
 800d7b4:	20000dc4 	.word	0x20000dc4

0800d7b8 <_write_r>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	0004      	movs	r4, r0
 800d7bc:	0008      	movs	r0, r1
 800d7be:	0011      	movs	r1, r2
 800d7c0:	001a      	movs	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4d05      	ldr	r5, [pc, #20]	; (800d7dc <_write_r+0x24>)
 800d7c6:	602b      	str	r3, [r5, #0]
 800d7c8:	f7f6 fdbf 	bl	800434a <_write>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d103      	bne.n	800d7d8 <_write_r+0x20>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d000      	beq.n	800d7d8 <_write_r+0x20>
 800d7d6:	6023      	str	r3, [r4, #0]
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
 800d7da:	46c0      	nop			; (mov r8, r8)
 800d7dc:	20000dc4 	.word	0x20000dc4

0800d7e0 <__errno>:
 800d7e0:	4b01      	ldr	r3, [pc, #4]	; (800d7e8 <__errno+0x8>)
 800d7e2:	6818      	ldr	r0, [r3, #0]
 800d7e4:	4770      	bx	lr
 800d7e6:	46c0      	nop			; (mov r8, r8)
 800d7e8:	200006d0 	.word	0x200006d0

0800d7ec <__libc_init_array>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	2600      	movs	r6, #0
 800d7f0:	4c0c      	ldr	r4, [pc, #48]	; (800d824 <__libc_init_array+0x38>)
 800d7f2:	4d0d      	ldr	r5, [pc, #52]	; (800d828 <__libc_init_array+0x3c>)
 800d7f4:	1b64      	subs	r4, r4, r5
 800d7f6:	10a4      	asrs	r4, r4, #2
 800d7f8:	42a6      	cmp	r6, r4
 800d7fa:	d109      	bne.n	800d810 <__libc_init_array+0x24>
 800d7fc:	2600      	movs	r6, #0
 800d7fe:	f006 fc3f 	bl	8014080 <_init>
 800d802:	4c0a      	ldr	r4, [pc, #40]	; (800d82c <__libc_init_array+0x40>)
 800d804:	4d0a      	ldr	r5, [pc, #40]	; (800d830 <__libc_init_array+0x44>)
 800d806:	1b64      	subs	r4, r4, r5
 800d808:	10a4      	asrs	r4, r4, #2
 800d80a:	42a6      	cmp	r6, r4
 800d80c:	d105      	bne.n	800d81a <__libc_init_array+0x2e>
 800d80e:	bd70      	pop	{r4, r5, r6, pc}
 800d810:	00b3      	lsls	r3, r6, #2
 800d812:	58eb      	ldr	r3, [r5, r3]
 800d814:	4798      	blx	r3
 800d816:	3601      	adds	r6, #1
 800d818:	e7ee      	b.n	800d7f8 <__libc_init_array+0xc>
 800d81a:	00b3      	lsls	r3, r6, #2
 800d81c:	58eb      	ldr	r3, [r5, r3]
 800d81e:	4798      	blx	r3
 800d820:	3601      	adds	r6, #1
 800d822:	e7f2      	b.n	800d80a <__libc_init_array+0x1e>
 800d824:	0801618c 	.word	0x0801618c
 800d828:	0801618c 	.word	0x0801618c
 800d82c:	08016194 	.word	0x08016194
 800d830:	0801618c 	.word	0x0801618c

0800d834 <__retarget_lock_init_recursive>:
 800d834:	4770      	bx	lr

0800d836 <__retarget_lock_close_recursive>:
 800d836:	4770      	bx	lr

0800d838 <__retarget_lock_acquire_recursive>:
 800d838:	4770      	bx	lr

0800d83a <__retarget_lock_release_recursive>:
 800d83a:	4770      	bx	lr

0800d83c <sysconf>:
 800d83c:	2380      	movs	r3, #128	; 0x80
 800d83e:	b510      	push	{r4, lr}
 800d840:	2808      	cmp	r0, #8
 800d842:	d004      	beq.n	800d84e <sysconf+0x12>
 800d844:	f7ff ffcc 	bl	800d7e0 <__errno>
 800d848:	2316      	movs	r3, #22
 800d84a:	6003      	str	r3, [r0, #0]
 800d84c:	3b17      	subs	r3, #23
 800d84e:	0018      	movs	r0, r3
 800d850:	bd10      	pop	{r4, pc}

0800d852 <memcpy>:
 800d852:	2300      	movs	r3, #0
 800d854:	b510      	push	{r4, lr}
 800d856:	429a      	cmp	r2, r3
 800d858:	d100      	bne.n	800d85c <memcpy+0xa>
 800d85a:	bd10      	pop	{r4, pc}
 800d85c:	5ccc      	ldrb	r4, [r1, r3]
 800d85e:	54c4      	strb	r4, [r0, r3]
 800d860:	3301      	adds	r3, #1
 800d862:	e7f8      	b.n	800d856 <memcpy+0x4>

0800d864 <nan>:
 800d864:	2000      	movs	r0, #0
 800d866:	4901      	ldr	r1, [pc, #4]	; (800d86c <nan+0x8>)
 800d868:	4770      	bx	lr
 800d86a:	46c0      	nop			; (mov r8, r8)
 800d86c:	7ff80000 	.word	0x7ff80000

0800d870 <nanf>:
 800d870:	4800      	ldr	r0, [pc, #0]	; (800d874 <nanf+0x4>)
 800d872:	4770      	bx	lr
 800d874:	7fc00000 	.word	0x7fc00000

0800d878 <register_fini>:
 800d878:	4b03      	ldr	r3, [pc, #12]	; (800d888 <register_fini+0x10>)
 800d87a:	b510      	push	{r4, lr}
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d002      	beq.n	800d886 <register_fini+0xe>
 800d880:	4802      	ldr	r0, [pc, #8]	; (800d88c <register_fini+0x14>)
 800d882:	f000 f805 	bl	800d890 <atexit>
 800d886:	bd10      	pop	{r4, pc}
 800d888:	00000000 	.word	0x00000000
 800d88c:	080115ed 	.word	0x080115ed

0800d890 <atexit>:
 800d890:	2300      	movs	r3, #0
 800d892:	b510      	push	{r4, lr}
 800d894:	0001      	movs	r1, r0
 800d896:	001a      	movs	r2, r3
 800d898:	0018      	movs	r0, r3
 800d89a:	f003 fef9 	bl	8011690 <__register_exitproc>
 800d89e:	bd10      	pop	{r4, pc}

0800d8a0 <_malloc_trim_r>:
 800d8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8a2:	0004      	movs	r4, r0
 800d8a4:	2008      	movs	r0, #8
 800d8a6:	000d      	movs	r5, r1
 800d8a8:	f7ff ffc8 	bl	800d83c <sysconf>
 800d8ac:	0006      	movs	r6, r0
 800d8ae:	0020      	movs	r0, r4
 800d8b0:	f7fe fda4 	bl	800c3fc <__malloc_lock>
 800d8b4:	2203      	movs	r2, #3
 800d8b6:	4f21      	ldr	r7, [pc, #132]	; (800d93c <_malloc_trim_r+0x9c>)
 800d8b8:	0031      	movs	r1, r6
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	4393      	bics	r3, r2
 800d8c0:	1b58      	subs	r0, r3, r5
 800d8c2:	3811      	subs	r0, #17
 800d8c4:	1980      	adds	r0, r0, r6
 800d8c6:	9301      	str	r3, [sp, #4]
 800d8c8:	f7f2 fc38 	bl	800013c <__udivsi3>
 800d8cc:	1e45      	subs	r5, r0, #1
 800d8ce:	4375      	muls	r5, r6
 800d8d0:	42ae      	cmp	r6, r5
 800d8d2:	dd04      	ble.n	800d8de <_malloc_trim_r+0x3e>
 800d8d4:	0020      	movs	r0, r4
 800d8d6:	f7fe fd99 	bl	800c40c <__malloc_unlock>
 800d8da:	2000      	movs	r0, #0
 800d8dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8de:	2100      	movs	r1, #0
 800d8e0:	0020      	movs	r0, r4
 800d8e2:	f7ff ff57 	bl	800d794 <_sbrk_r>
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	9a01      	ldr	r2, [sp, #4]
 800d8ea:	189b      	adds	r3, r3, r2
 800d8ec:	4298      	cmp	r0, r3
 800d8ee:	d1f1      	bne.n	800d8d4 <_malloc_trim_r+0x34>
 800d8f0:	0020      	movs	r0, r4
 800d8f2:	4269      	negs	r1, r5
 800d8f4:	f7ff ff4e 	bl	800d794 <_sbrk_r>
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d110      	bne.n	800d91e <_malloc_trim_r+0x7e>
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	0020      	movs	r0, r4
 800d900:	f7ff ff48 	bl	800d794 <_sbrk_r>
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	1a81      	subs	r1, r0, r2
 800d908:	290f      	cmp	r1, #15
 800d90a:	dde3      	ble.n	800d8d4 <_malloc_trim_r+0x34>
 800d90c:	4d0c      	ldr	r5, [pc, #48]	; (800d940 <_malloc_trim_r+0xa0>)
 800d90e:	4b0d      	ldr	r3, [pc, #52]	; (800d944 <_malloc_trim_r+0xa4>)
 800d910:	682d      	ldr	r5, [r5, #0]
 800d912:	1b40      	subs	r0, r0, r5
 800d914:	6018      	str	r0, [r3, #0]
 800d916:	2301      	movs	r3, #1
 800d918:	430b      	orrs	r3, r1
 800d91a:	6053      	str	r3, [r2, #4]
 800d91c:	e7da      	b.n	800d8d4 <_malloc_trim_r+0x34>
 800d91e:	2601      	movs	r6, #1
 800d920:	9b01      	ldr	r3, [sp, #4]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	1b5b      	subs	r3, r3, r5
 800d926:	4333      	orrs	r3, r6
 800d928:	6053      	str	r3, [r2, #4]
 800d92a:	4a06      	ldr	r2, [pc, #24]	; (800d944 <_malloc_trim_r+0xa4>)
 800d92c:	0020      	movs	r0, r4
 800d92e:	6813      	ldr	r3, [r2, #0]
 800d930:	1b5b      	subs	r3, r3, r5
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	f7fe fd6a 	bl	800c40c <__malloc_unlock>
 800d938:	0030      	movs	r0, r6
 800d93a:	e7cf      	b.n	800d8dc <_malloc_trim_r+0x3c>
 800d93c:	20000028 	.word	0x20000028
 800d940:	20000430 	.word	0x20000430
 800d944:	20000c54 	.word	0x20000c54

0800d948 <_free_r>:
 800d948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d94a:	1e0d      	subs	r5, r1, #0
 800d94c:	9001      	str	r0, [sp, #4]
 800d94e:	d02d      	beq.n	800d9ac <_free_r+0x64>
 800d950:	f7fe fd54 	bl	800c3fc <__malloc_lock>
 800d954:	2301      	movs	r3, #1
 800d956:	0029      	movs	r1, r5
 800d958:	469c      	mov	ip, r3
 800d95a:	3908      	subs	r1, #8
 800d95c:	684f      	ldr	r7, [r1, #4]
 800d95e:	4662      	mov	r2, ip
 800d960:	003b      	movs	r3, r7
 800d962:	4664      	mov	r4, ip
 800d964:	4393      	bics	r3, r2
 800d966:	18c8      	adds	r0, r1, r3
 800d968:	6845      	ldr	r5, [r0, #4]
 800d96a:	3202      	adds	r2, #2
 800d96c:	4395      	bics	r5, r2
 800d96e:	4a4a      	ldr	r2, [pc, #296]	; (800da98 <_free_r+0x150>)
 800d970:	4027      	ands	r7, r4
 800d972:	6896      	ldr	r6, [r2, #8]
 800d974:	4286      	cmp	r6, r0
 800d976:	d11a      	bne.n	800d9ae <_free_r+0x66>
 800d978:	195b      	adds	r3, r3, r5
 800d97a:	2f00      	cmp	r7, #0
 800d97c:	d106      	bne.n	800d98c <_free_r+0x44>
 800d97e:	6808      	ldr	r0, [r1, #0]
 800d980:	1a09      	subs	r1, r1, r0
 800d982:	688d      	ldr	r5, [r1, #8]
 800d984:	181b      	adds	r3, r3, r0
 800d986:	68c8      	ldr	r0, [r1, #12]
 800d988:	60e8      	str	r0, [r5, #12]
 800d98a:	6085      	str	r5, [r0, #8]
 800d98c:	2001      	movs	r0, #1
 800d98e:	4318      	orrs	r0, r3
 800d990:	6048      	str	r0, [r1, #4]
 800d992:	6091      	str	r1, [r2, #8]
 800d994:	4a41      	ldr	r2, [pc, #260]	; (800da9c <_free_r+0x154>)
 800d996:	6812      	ldr	r2, [r2, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d804      	bhi.n	800d9a6 <_free_r+0x5e>
 800d99c:	4b40      	ldr	r3, [pc, #256]	; (800daa0 <_free_r+0x158>)
 800d99e:	9801      	ldr	r0, [sp, #4]
 800d9a0:	6819      	ldr	r1, [r3, #0]
 800d9a2:	f7ff ff7d 	bl	800d8a0 <_malloc_trim_r>
 800d9a6:	9801      	ldr	r0, [sp, #4]
 800d9a8:	f7fe fd30 	bl	800c40c <__malloc_unlock>
 800d9ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	6045      	str	r5, [r0, #4]
 800d9b2:	42b7      	cmp	r7, r6
 800d9b4:	d109      	bne.n	800d9ca <_free_r+0x82>
 800d9b6:	680f      	ldr	r7, [r1, #0]
 800d9b8:	4c3a      	ldr	r4, [pc, #232]	; (800daa4 <_free_r+0x15c>)
 800d9ba:	1bc9      	subs	r1, r1, r7
 800d9bc:	19db      	adds	r3, r3, r7
 800d9be:	688f      	ldr	r7, [r1, #8]
 800d9c0:	42a7      	cmp	r7, r4
 800d9c2:	d02c      	beq.n	800da1e <_free_r+0xd6>
 800d9c4:	68cc      	ldr	r4, [r1, #12]
 800d9c6:	60fc      	str	r4, [r7, #12]
 800d9c8:	60a7      	str	r7, [r4, #8]
 800d9ca:	1947      	adds	r7, r0, r5
 800d9cc:	687c      	ldr	r4, [r7, #4]
 800d9ce:	2701      	movs	r7, #1
 800d9d0:	423c      	tst	r4, r7
 800d9d2:	d10b      	bne.n	800d9ec <_free_r+0xa4>
 800d9d4:	195b      	adds	r3, r3, r5
 800d9d6:	6885      	ldr	r5, [r0, #8]
 800d9d8:	2e00      	cmp	r6, #0
 800d9da:	d122      	bne.n	800da22 <_free_r+0xda>
 800d9dc:	4c31      	ldr	r4, [pc, #196]	; (800daa4 <_free_r+0x15c>)
 800d9de:	42a5      	cmp	r5, r4
 800d9e0:	d11f      	bne.n	800da22 <_free_r+0xda>
 800d9e2:	003e      	movs	r6, r7
 800d9e4:	6151      	str	r1, [r2, #20]
 800d9e6:	6111      	str	r1, [r2, #16]
 800d9e8:	60cd      	str	r5, [r1, #12]
 800d9ea:	608d      	str	r5, [r1, #8]
 800d9ec:	2501      	movs	r5, #1
 800d9ee:	0028      	movs	r0, r5
 800d9f0:	4318      	orrs	r0, r3
 800d9f2:	6048      	str	r0, [r1, #4]
 800d9f4:	50cb      	str	r3, [r1, r3]
 800d9f6:	2e00      	cmp	r6, #0
 800d9f8:	d1d5      	bne.n	800d9a6 <_free_r+0x5e>
 800d9fa:	2080      	movs	r0, #128	; 0x80
 800d9fc:	0080      	lsls	r0, r0, #2
 800d9fe:	4283      	cmp	r3, r0
 800da00:	d213      	bcs.n	800da2a <_free_r+0xe2>
 800da02:	08d8      	lsrs	r0, r3, #3
 800da04:	095b      	lsrs	r3, r3, #5
 800da06:	409d      	lsls	r5, r3
 800da08:	6853      	ldr	r3, [r2, #4]
 800da0a:	431d      	orrs	r5, r3
 800da0c:	00c3      	lsls	r3, r0, #3
 800da0e:	189b      	adds	r3, r3, r2
 800da10:	6055      	str	r5, [r2, #4]
 800da12:	689a      	ldr	r2, [r3, #8]
 800da14:	60cb      	str	r3, [r1, #12]
 800da16:	608a      	str	r2, [r1, #8]
 800da18:	6099      	str	r1, [r3, #8]
 800da1a:	60d1      	str	r1, [r2, #12]
 800da1c:	e7c3      	b.n	800d9a6 <_free_r+0x5e>
 800da1e:	4666      	mov	r6, ip
 800da20:	e7d3      	b.n	800d9ca <_free_r+0x82>
 800da22:	68c0      	ldr	r0, [r0, #12]
 800da24:	60e8      	str	r0, [r5, #12]
 800da26:	6085      	str	r5, [r0, #8]
 800da28:	e7e0      	b.n	800d9ec <_free_r+0xa4>
 800da2a:	0a5d      	lsrs	r5, r3, #9
 800da2c:	2d04      	cmp	r5, #4
 800da2e:	d812      	bhi.n	800da56 <_free_r+0x10e>
 800da30:	0998      	lsrs	r0, r3, #6
 800da32:	3038      	adds	r0, #56	; 0x38
 800da34:	00c6      	lsls	r6, r0, #3
 800da36:	18b6      	adds	r6, r6, r2
 800da38:	68b5      	ldr	r5, [r6, #8]
 800da3a:	2703      	movs	r7, #3
 800da3c:	42ae      	cmp	r6, r5
 800da3e:	d125      	bne.n	800da8c <_free_r+0x144>
 800da40:	2301      	movs	r3, #1
 800da42:	1080      	asrs	r0, r0, #2
 800da44:	4083      	lsls	r3, r0
 800da46:	6850      	ldr	r0, [r2, #4]
 800da48:	4303      	orrs	r3, r0
 800da4a:	6053      	str	r3, [r2, #4]
 800da4c:	60ce      	str	r6, [r1, #12]
 800da4e:	608d      	str	r5, [r1, #8]
 800da50:	60b1      	str	r1, [r6, #8]
 800da52:	60e9      	str	r1, [r5, #12]
 800da54:	e7a7      	b.n	800d9a6 <_free_r+0x5e>
 800da56:	2d14      	cmp	r5, #20
 800da58:	d802      	bhi.n	800da60 <_free_r+0x118>
 800da5a:	0028      	movs	r0, r5
 800da5c:	305b      	adds	r0, #91	; 0x5b
 800da5e:	e7e9      	b.n	800da34 <_free_r+0xec>
 800da60:	2d54      	cmp	r5, #84	; 0x54
 800da62:	d802      	bhi.n	800da6a <_free_r+0x122>
 800da64:	0b18      	lsrs	r0, r3, #12
 800da66:	306e      	adds	r0, #110	; 0x6e
 800da68:	e7e4      	b.n	800da34 <_free_r+0xec>
 800da6a:	20aa      	movs	r0, #170	; 0xaa
 800da6c:	0040      	lsls	r0, r0, #1
 800da6e:	4285      	cmp	r5, r0
 800da70:	d802      	bhi.n	800da78 <_free_r+0x130>
 800da72:	0bd8      	lsrs	r0, r3, #15
 800da74:	3077      	adds	r0, #119	; 0x77
 800da76:	e7dd      	b.n	800da34 <_free_r+0xec>
 800da78:	4e0b      	ldr	r6, [pc, #44]	; (800daa8 <_free_r+0x160>)
 800da7a:	207e      	movs	r0, #126	; 0x7e
 800da7c:	42b5      	cmp	r5, r6
 800da7e:	d8d9      	bhi.n	800da34 <_free_r+0xec>
 800da80:	0c98      	lsrs	r0, r3, #18
 800da82:	307c      	adds	r0, #124	; 0x7c
 800da84:	e7d6      	b.n	800da34 <_free_r+0xec>
 800da86:	68ad      	ldr	r5, [r5, #8]
 800da88:	42ae      	cmp	r6, r5
 800da8a:	d003      	beq.n	800da94 <_free_r+0x14c>
 800da8c:	686a      	ldr	r2, [r5, #4]
 800da8e:	43ba      	bics	r2, r7
 800da90:	429a      	cmp	r2, r3
 800da92:	d8f8      	bhi.n	800da86 <_free_r+0x13e>
 800da94:	68ee      	ldr	r6, [r5, #12]
 800da96:	e7d9      	b.n	800da4c <_free_r+0x104>
 800da98:	20000028 	.word	0x20000028
 800da9c:	20000434 	.word	0x20000434
 800daa0:	20000c84 	.word	0x20000c84
 800daa4:	20000030 	.word	0x20000030
 800daa8:	00000554 	.word	0x00000554

0800daac <rshift>:
 800daac:	0002      	movs	r2, r0
 800daae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dab0:	6904      	ldr	r4, [r0, #16]
 800dab2:	114b      	asrs	r3, r1, #5
 800dab4:	b085      	sub	sp, #20
 800dab6:	3214      	adds	r2, #20
 800dab8:	9302      	str	r3, [sp, #8]
 800daba:	114d      	asrs	r5, r1, #5
 800dabc:	0013      	movs	r3, r2
 800dabe:	42ac      	cmp	r4, r5
 800dac0:	dd32      	ble.n	800db28 <rshift+0x7c>
 800dac2:	261f      	movs	r6, #31
 800dac4:	000f      	movs	r7, r1
 800dac6:	114b      	asrs	r3, r1, #5
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	00a5      	lsls	r5, r4, #2
 800dacc:	18d3      	adds	r3, r2, r3
 800dace:	4037      	ands	r7, r6
 800dad0:	1955      	adds	r5, r2, r5
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	9701      	str	r7, [sp, #4]
 800dad6:	4231      	tst	r1, r6
 800dad8:	d10d      	bne.n	800daf6 <rshift+0x4a>
 800dada:	0016      	movs	r6, r2
 800dadc:	0019      	movs	r1, r3
 800dade:	428d      	cmp	r5, r1
 800dae0:	d836      	bhi.n	800db50 <rshift+0xa4>
 800dae2:	9900      	ldr	r1, [sp, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	3903      	subs	r1, #3
 800dae8:	428d      	cmp	r5, r1
 800daea:	d302      	bcc.n	800daf2 <rshift+0x46>
 800daec:	9b02      	ldr	r3, [sp, #8]
 800daee:	1ae4      	subs	r4, r4, r3
 800daf0:	00a3      	lsls	r3, r4, #2
 800daf2:	18d3      	adds	r3, r2, r3
 800daf4:	e018      	b.n	800db28 <rshift+0x7c>
 800daf6:	2120      	movs	r1, #32
 800daf8:	9e01      	ldr	r6, [sp, #4]
 800dafa:	9f01      	ldr	r7, [sp, #4]
 800dafc:	1b89      	subs	r1, r1, r6
 800dafe:	9e00      	ldr	r6, [sp, #0]
 800db00:	9103      	str	r1, [sp, #12]
 800db02:	ce02      	ldmia	r6!, {r1}
 800db04:	4694      	mov	ip, r2
 800db06:	40f9      	lsrs	r1, r7
 800db08:	42b5      	cmp	r5, r6
 800db0a:	d816      	bhi.n	800db3a <rshift+0x8e>
 800db0c:	9e00      	ldr	r6, [sp, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	3601      	adds	r6, #1
 800db12:	42b5      	cmp	r5, r6
 800db14:	d303      	bcc.n	800db1e <rshift+0x72>
 800db16:	9b02      	ldr	r3, [sp, #8]
 800db18:	1ae3      	subs	r3, r4, r3
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	3b04      	subs	r3, #4
 800db1e:	18d3      	adds	r3, r2, r3
 800db20:	6019      	str	r1, [r3, #0]
 800db22:	2900      	cmp	r1, #0
 800db24:	d000      	beq.n	800db28 <rshift+0x7c>
 800db26:	3304      	adds	r3, #4
 800db28:	1a99      	subs	r1, r3, r2
 800db2a:	1089      	asrs	r1, r1, #2
 800db2c:	6101      	str	r1, [r0, #16]
 800db2e:	4293      	cmp	r3, r2
 800db30:	d101      	bne.n	800db36 <rshift+0x8a>
 800db32:	2300      	movs	r3, #0
 800db34:	6143      	str	r3, [r0, #20]
 800db36:	b005      	add	sp, #20
 800db38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db3a:	6837      	ldr	r7, [r6, #0]
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	409f      	lsls	r7, r3
 800db40:	430f      	orrs	r7, r1
 800db42:	4661      	mov	r1, ip
 800db44:	c180      	stmia	r1!, {r7}
 800db46:	468c      	mov	ip, r1
 800db48:	9b01      	ldr	r3, [sp, #4]
 800db4a:	ce02      	ldmia	r6!, {r1}
 800db4c:	40d9      	lsrs	r1, r3
 800db4e:	e7db      	b.n	800db08 <rshift+0x5c>
 800db50:	c980      	ldmia	r1!, {r7}
 800db52:	c680      	stmia	r6!, {r7}
 800db54:	e7c3      	b.n	800dade <rshift+0x32>

0800db56 <__hexdig_fun>:
 800db56:	0002      	movs	r2, r0
 800db58:	3a30      	subs	r2, #48	; 0x30
 800db5a:	0003      	movs	r3, r0
 800db5c:	2a09      	cmp	r2, #9
 800db5e:	d802      	bhi.n	800db66 <__hexdig_fun+0x10>
 800db60:	3b20      	subs	r3, #32
 800db62:	b2d8      	uxtb	r0, r3
 800db64:	4770      	bx	lr
 800db66:	0002      	movs	r2, r0
 800db68:	3a61      	subs	r2, #97	; 0x61
 800db6a:	2a05      	cmp	r2, #5
 800db6c:	d801      	bhi.n	800db72 <__hexdig_fun+0x1c>
 800db6e:	3b47      	subs	r3, #71	; 0x47
 800db70:	e7f7      	b.n	800db62 <__hexdig_fun+0xc>
 800db72:	001a      	movs	r2, r3
 800db74:	3a41      	subs	r2, #65	; 0x41
 800db76:	2000      	movs	r0, #0
 800db78:	2a05      	cmp	r2, #5
 800db7a:	d8f3      	bhi.n	800db64 <__hexdig_fun+0xe>
 800db7c:	3b27      	subs	r3, #39	; 0x27
 800db7e:	e7f0      	b.n	800db62 <__hexdig_fun+0xc>

0800db80 <__gethex>:
 800db80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db82:	b089      	sub	sp, #36	; 0x24
 800db84:	9307      	str	r3, [sp, #28]
 800db86:	2302      	movs	r3, #2
 800db88:	9201      	str	r2, [sp, #4]
 800db8a:	680a      	ldr	r2, [r1, #0]
 800db8c:	425b      	negs	r3, r3
 800db8e:	9003      	str	r0, [sp, #12]
 800db90:	9106      	str	r1, [sp, #24]
 800db92:	1c96      	adds	r6, r2, #2
 800db94:	1a9b      	subs	r3, r3, r2
 800db96:	199a      	adds	r2, r3, r6
 800db98:	9600      	str	r6, [sp, #0]
 800db9a:	9205      	str	r2, [sp, #20]
 800db9c:	9a00      	ldr	r2, [sp, #0]
 800db9e:	3601      	adds	r6, #1
 800dba0:	7810      	ldrb	r0, [r2, #0]
 800dba2:	2830      	cmp	r0, #48	; 0x30
 800dba4:	d0f7      	beq.n	800db96 <__gethex+0x16>
 800dba6:	f7ff ffd6 	bl	800db56 <__hexdig_fun>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	001d      	movs	r5, r3
 800dbae:	9302      	str	r3, [sp, #8]
 800dbb0:	4298      	cmp	r0, r3
 800dbb2:	d11d      	bne.n	800dbf0 <__gethex+0x70>
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	49a6      	ldr	r1, [pc, #664]	; (800de50 <__gethex+0x2d0>)
 800dbb8:	9800      	ldr	r0, [sp, #0]
 800dbba:	f7ff fd33 	bl	800d624 <strncmp>
 800dbbe:	0007      	movs	r7, r0
 800dbc0:	42a8      	cmp	r0, r5
 800dbc2:	d169      	bne.n	800dc98 <__gethex+0x118>
 800dbc4:	9b00      	ldr	r3, [sp, #0]
 800dbc6:	0034      	movs	r4, r6
 800dbc8:	7858      	ldrb	r0, [r3, #1]
 800dbca:	f7ff ffc4 	bl	800db56 <__hexdig_fun>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	9302      	str	r3, [sp, #8]
 800dbd2:	42a8      	cmp	r0, r5
 800dbd4:	d02f      	beq.n	800dc36 <__gethex+0xb6>
 800dbd6:	9600      	str	r6, [sp, #0]
 800dbd8:	9b00      	ldr	r3, [sp, #0]
 800dbda:	7818      	ldrb	r0, [r3, #0]
 800dbdc:	2830      	cmp	r0, #48	; 0x30
 800dbde:	d009      	beq.n	800dbf4 <__gethex+0x74>
 800dbe0:	f7ff ffb9 	bl	800db56 <__hexdig_fun>
 800dbe4:	4242      	negs	r2, r0
 800dbe6:	4142      	adcs	r2, r0
 800dbe8:	2301      	movs	r3, #1
 800dbea:	0035      	movs	r5, r6
 800dbec:	9202      	str	r2, [sp, #8]
 800dbee:	9305      	str	r3, [sp, #20]
 800dbf0:	9c00      	ldr	r4, [sp, #0]
 800dbf2:	e004      	b.n	800dbfe <__gethex+0x7e>
 800dbf4:	9b00      	ldr	r3, [sp, #0]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	e7ed      	b.n	800dbd8 <__gethex+0x58>
 800dbfc:	3401      	adds	r4, #1
 800dbfe:	7820      	ldrb	r0, [r4, #0]
 800dc00:	f7ff ffa9 	bl	800db56 <__hexdig_fun>
 800dc04:	1e07      	subs	r7, r0, #0
 800dc06:	d1f9      	bne.n	800dbfc <__gethex+0x7c>
 800dc08:	2201      	movs	r2, #1
 800dc0a:	0020      	movs	r0, r4
 800dc0c:	4990      	ldr	r1, [pc, #576]	; (800de50 <__gethex+0x2d0>)
 800dc0e:	f7ff fd09 	bl	800d624 <strncmp>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d10d      	bne.n	800dc32 <__gethex+0xb2>
 800dc16:	2d00      	cmp	r5, #0
 800dc18:	d106      	bne.n	800dc28 <__gethex+0xa8>
 800dc1a:	3401      	adds	r4, #1
 800dc1c:	0025      	movs	r5, r4
 800dc1e:	7820      	ldrb	r0, [r4, #0]
 800dc20:	f7ff ff99 	bl	800db56 <__hexdig_fun>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d102      	bne.n	800dc2e <__gethex+0xae>
 800dc28:	1b2d      	subs	r5, r5, r4
 800dc2a:	00af      	lsls	r7, r5, #2
 800dc2c:	e003      	b.n	800dc36 <__gethex+0xb6>
 800dc2e:	3401      	adds	r4, #1
 800dc30:	e7f5      	b.n	800dc1e <__gethex+0x9e>
 800dc32:	2d00      	cmp	r5, #0
 800dc34:	d1f8      	bne.n	800dc28 <__gethex+0xa8>
 800dc36:	2220      	movs	r2, #32
 800dc38:	7823      	ldrb	r3, [r4, #0]
 800dc3a:	0026      	movs	r6, r4
 800dc3c:	4393      	bics	r3, r2
 800dc3e:	2b50      	cmp	r3, #80	; 0x50
 800dc40:	d11d      	bne.n	800dc7e <__gethex+0xfe>
 800dc42:	7863      	ldrb	r3, [r4, #1]
 800dc44:	2b2b      	cmp	r3, #43	; 0x2b
 800dc46:	d02c      	beq.n	800dca2 <__gethex+0x122>
 800dc48:	2b2d      	cmp	r3, #45	; 0x2d
 800dc4a:	d02e      	beq.n	800dcaa <__gethex+0x12a>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	1c66      	adds	r6, r4, #1
 800dc50:	9304      	str	r3, [sp, #16]
 800dc52:	7830      	ldrb	r0, [r6, #0]
 800dc54:	f7ff ff7f 	bl	800db56 <__hexdig_fun>
 800dc58:	1e43      	subs	r3, r0, #1
 800dc5a:	b2db      	uxtb	r3, r3
 800dc5c:	2b18      	cmp	r3, #24
 800dc5e:	d82b      	bhi.n	800dcb8 <__gethex+0x138>
 800dc60:	3810      	subs	r0, #16
 800dc62:	0005      	movs	r5, r0
 800dc64:	7870      	ldrb	r0, [r6, #1]
 800dc66:	f7ff ff76 	bl	800db56 <__hexdig_fun>
 800dc6a:	1e43      	subs	r3, r0, #1
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	3601      	adds	r6, #1
 800dc70:	2b18      	cmp	r3, #24
 800dc72:	d91c      	bls.n	800dcae <__gethex+0x12e>
 800dc74:	9b04      	ldr	r3, [sp, #16]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d000      	beq.n	800dc7c <__gethex+0xfc>
 800dc7a:	426d      	negs	r5, r5
 800dc7c:	197f      	adds	r7, r7, r5
 800dc7e:	9b06      	ldr	r3, [sp, #24]
 800dc80:	601e      	str	r6, [r3, #0]
 800dc82:	9b02      	ldr	r3, [sp, #8]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d019      	beq.n	800dcbc <__gethex+0x13c>
 800dc88:	2600      	movs	r6, #0
 800dc8a:	9b05      	ldr	r3, [sp, #20]
 800dc8c:	42b3      	cmp	r3, r6
 800dc8e:	d100      	bne.n	800dc92 <__gethex+0x112>
 800dc90:	3606      	adds	r6, #6
 800dc92:	0030      	movs	r0, r6
 800dc94:	b009      	add	sp, #36	; 0x24
 800dc96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc98:	2301      	movs	r3, #1
 800dc9a:	2700      	movs	r7, #0
 800dc9c:	9c00      	ldr	r4, [sp, #0]
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	e7c9      	b.n	800dc36 <__gethex+0xb6>
 800dca2:	2300      	movs	r3, #0
 800dca4:	9304      	str	r3, [sp, #16]
 800dca6:	1ca6      	adds	r6, r4, #2
 800dca8:	e7d3      	b.n	800dc52 <__gethex+0xd2>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e7fa      	b.n	800dca4 <__gethex+0x124>
 800dcae:	230a      	movs	r3, #10
 800dcb0:	435d      	muls	r5, r3
 800dcb2:	182d      	adds	r5, r5, r0
 800dcb4:	3d10      	subs	r5, #16
 800dcb6:	e7d5      	b.n	800dc64 <__gethex+0xe4>
 800dcb8:	0026      	movs	r6, r4
 800dcba:	e7e0      	b.n	800dc7e <__gethex+0xfe>
 800dcbc:	9b00      	ldr	r3, [sp, #0]
 800dcbe:	9902      	ldr	r1, [sp, #8]
 800dcc0:	1ae3      	subs	r3, r4, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	2b07      	cmp	r3, #7
 800dcc6:	dc0a      	bgt.n	800dcde <__gethex+0x15e>
 800dcc8:	9803      	ldr	r0, [sp, #12]
 800dcca:	f000 fa5d 	bl	800e188 <_Balloc>
 800dcce:	1e05      	subs	r5, r0, #0
 800dcd0:	d108      	bne.n	800dce4 <__gethex+0x164>
 800dcd2:	002a      	movs	r2, r5
 800dcd4:	21e4      	movs	r1, #228	; 0xe4
 800dcd6:	4b5f      	ldr	r3, [pc, #380]	; (800de54 <__gethex+0x2d4>)
 800dcd8:	485f      	ldr	r0, [pc, #380]	; (800de58 <__gethex+0x2d8>)
 800dcda:	f003 fd19 	bl	8011710 <__assert_func>
 800dcde:	3101      	adds	r1, #1
 800dce0:	105b      	asrs	r3, r3, #1
 800dce2:	e7ef      	b.n	800dcc4 <__gethex+0x144>
 800dce4:	0003      	movs	r3, r0
 800dce6:	3314      	adds	r3, #20
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	9305      	str	r3, [sp, #20]
 800dcec:	2300      	movs	r3, #0
 800dcee:	001e      	movs	r6, r3
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	42a3      	cmp	r3, r4
 800dcf6:	d33f      	bcc.n	800dd78 <__gethex+0x1f8>
 800dcf8:	9c05      	ldr	r4, [sp, #20]
 800dcfa:	9b02      	ldr	r3, [sp, #8]
 800dcfc:	c440      	stmia	r4!, {r6}
 800dcfe:	1ae4      	subs	r4, r4, r3
 800dd00:	10a4      	asrs	r4, r4, #2
 800dd02:	0030      	movs	r0, r6
 800dd04:	612c      	str	r4, [r5, #16]
 800dd06:	f000 fb01 	bl	800e30c <__hi0bits>
 800dd0a:	9b01      	ldr	r3, [sp, #4]
 800dd0c:	0164      	lsls	r4, r4, #5
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	1a26      	subs	r6, r4, r0
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	429e      	cmp	r6, r3
 800dd16:	dd51      	ble.n	800ddbc <__gethex+0x23c>
 800dd18:	1af6      	subs	r6, r6, r3
 800dd1a:	0031      	movs	r1, r6
 800dd1c:	0028      	movs	r0, r5
 800dd1e:	f000 fe7b 	bl	800ea18 <__any_on>
 800dd22:	1e04      	subs	r4, r0, #0
 800dd24:	d016      	beq.n	800dd54 <__gethex+0x1d4>
 800dd26:	2401      	movs	r4, #1
 800dd28:	231f      	movs	r3, #31
 800dd2a:	0020      	movs	r0, r4
 800dd2c:	1e72      	subs	r2, r6, #1
 800dd2e:	4013      	ands	r3, r2
 800dd30:	4098      	lsls	r0, r3
 800dd32:	0003      	movs	r3, r0
 800dd34:	1151      	asrs	r1, r2, #5
 800dd36:	9802      	ldr	r0, [sp, #8]
 800dd38:	0089      	lsls	r1, r1, #2
 800dd3a:	5809      	ldr	r1, [r1, r0]
 800dd3c:	4219      	tst	r1, r3
 800dd3e:	d009      	beq.n	800dd54 <__gethex+0x1d4>
 800dd40:	42a2      	cmp	r2, r4
 800dd42:	dd06      	ble.n	800dd52 <__gethex+0x1d2>
 800dd44:	0028      	movs	r0, r5
 800dd46:	1eb1      	subs	r1, r6, #2
 800dd48:	f000 fe66 	bl	800ea18 <__any_on>
 800dd4c:	3402      	adds	r4, #2
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	d100      	bne.n	800dd54 <__gethex+0x1d4>
 800dd52:	2402      	movs	r4, #2
 800dd54:	0031      	movs	r1, r6
 800dd56:	0028      	movs	r0, r5
 800dd58:	f7ff fea8 	bl	800daac <rshift>
 800dd5c:	19bf      	adds	r7, r7, r6
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	42bb      	cmp	r3, r7
 800dd64:	da3a      	bge.n	800dddc <__gethex+0x25c>
 800dd66:	0029      	movs	r1, r5
 800dd68:	9803      	ldr	r0, [sp, #12]
 800dd6a:	f000 fa35 	bl	800e1d8 <_Bfree>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd72:	26a3      	movs	r6, #163	; 0xa3
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	e78c      	b.n	800dc92 <__gethex+0x112>
 800dd78:	3c01      	subs	r4, #1
 800dd7a:	7823      	ldrb	r3, [r4, #0]
 800dd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd7e:	d012      	beq.n	800dda6 <__gethex+0x226>
 800dd80:	9b04      	ldr	r3, [sp, #16]
 800dd82:	2b20      	cmp	r3, #32
 800dd84:	d104      	bne.n	800dd90 <__gethex+0x210>
 800dd86:	9b05      	ldr	r3, [sp, #20]
 800dd88:	c340      	stmia	r3!, {r6}
 800dd8a:	2600      	movs	r6, #0
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	9604      	str	r6, [sp, #16]
 800dd90:	7820      	ldrb	r0, [r4, #0]
 800dd92:	f7ff fee0 	bl	800db56 <__hexdig_fun>
 800dd96:	230f      	movs	r3, #15
 800dd98:	4018      	ands	r0, r3
 800dd9a:	9b04      	ldr	r3, [sp, #16]
 800dd9c:	4098      	lsls	r0, r3
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4306      	orrs	r6, r0
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	e7a5      	b.n	800dcf2 <__gethex+0x172>
 800dda6:	9b00      	ldr	r3, [sp, #0]
 800dda8:	42a3      	cmp	r3, r4
 800ddaa:	d8e9      	bhi.n	800dd80 <__gethex+0x200>
 800ddac:	2201      	movs	r2, #1
 800ddae:	0020      	movs	r0, r4
 800ddb0:	4927      	ldr	r1, [pc, #156]	; (800de50 <__gethex+0x2d0>)
 800ddb2:	f7ff fc37 	bl	800d624 <strncmp>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d1e2      	bne.n	800dd80 <__gethex+0x200>
 800ddba:	e79a      	b.n	800dcf2 <__gethex+0x172>
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2400      	movs	r4, #0
 800ddc0:	429e      	cmp	r6, r3
 800ddc2:	dacc      	bge.n	800dd5e <__gethex+0x1de>
 800ddc4:	1b9e      	subs	r6, r3, r6
 800ddc6:	0029      	movs	r1, r5
 800ddc8:	0032      	movs	r2, r6
 800ddca:	9803      	ldr	r0, [sp, #12]
 800ddcc:	f000 fbf0 	bl	800e5b0 <__lshift>
 800ddd0:	0003      	movs	r3, r0
 800ddd2:	3314      	adds	r3, #20
 800ddd4:	0005      	movs	r5, r0
 800ddd6:	1bbf      	subs	r7, r7, r6
 800ddd8:	9302      	str	r3, [sp, #8]
 800ddda:	e7c0      	b.n	800dd5e <__gethex+0x1de>
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	685e      	ldr	r6, [r3, #4]
 800dde0:	42be      	cmp	r6, r7
 800dde2:	dd70      	ble.n	800dec6 <__gethex+0x346>
 800dde4:	9b00      	ldr	r3, [sp, #0]
 800dde6:	1bf6      	subs	r6, r6, r7
 800dde8:	42b3      	cmp	r3, r6
 800ddea:	dc37      	bgt.n	800de5c <__gethex+0x2dc>
 800ddec:	9b01      	ldr	r3, [sp, #4]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d024      	beq.n	800de3e <__gethex+0x2be>
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d026      	beq.n	800de46 <__gethex+0x2c6>
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d117      	bne.n	800de2c <__gethex+0x2ac>
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	42b3      	cmp	r3, r6
 800de00:	d114      	bne.n	800de2c <__gethex+0x2ac>
 800de02:	2b01      	cmp	r3, #1
 800de04:	d10b      	bne.n	800de1e <__gethex+0x29e>
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	9a07      	ldr	r2, [sp, #28]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	2662      	movs	r6, #98	; 0x62
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	2301      	movs	r3, #1
 800de12:	9a02      	ldr	r2, [sp, #8]
 800de14:	612b      	str	r3, [r5, #16]
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de1a:	601d      	str	r5, [r3, #0]
 800de1c:	e739      	b.n	800dc92 <__gethex+0x112>
 800de1e:	9900      	ldr	r1, [sp, #0]
 800de20:	0028      	movs	r0, r5
 800de22:	3901      	subs	r1, #1
 800de24:	f000 fdf8 	bl	800ea18 <__any_on>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d1ec      	bne.n	800de06 <__gethex+0x286>
 800de2c:	0029      	movs	r1, r5
 800de2e:	9803      	ldr	r0, [sp, #12]
 800de30:	f000 f9d2 	bl	800e1d8 <_Bfree>
 800de34:	2300      	movs	r3, #0
 800de36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de38:	2650      	movs	r6, #80	; 0x50
 800de3a:	6013      	str	r3, [r2, #0]
 800de3c:	e729      	b.n	800dc92 <__gethex+0x112>
 800de3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1f3      	bne.n	800de2c <__gethex+0x2ac>
 800de44:	e7df      	b.n	800de06 <__gethex+0x286>
 800de46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1dc      	bne.n	800de06 <__gethex+0x286>
 800de4c:	e7ee      	b.n	800de2c <__gethex+0x2ac>
 800de4e:	46c0      	nop			; (mov r8, r8)
 800de50:	08015d1c 	.word	0x08015d1c
 800de54:	08015e79 	.word	0x08015e79
 800de58:	08015e8a 	.word	0x08015e8a
 800de5c:	1e77      	subs	r7, r6, #1
 800de5e:	2c00      	cmp	r4, #0
 800de60:	d12f      	bne.n	800dec2 <__gethex+0x342>
 800de62:	2f00      	cmp	r7, #0
 800de64:	d004      	beq.n	800de70 <__gethex+0x2f0>
 800de66:	0039      	movs	r1, r7
 800de68:	0028      	movs	r0, r5
 800de6a:	f000 fdd5 	bl	800ea18 <__any_on>
 800de6e:	0004      	movs	r4, r0
 800de70:	231f      	movs	r3, #31
 800de72:	117a      	asrs	r2, r7, #5
 800de74:	401f      	ands	r7, r3
 800de76:	3b1e      	subs	r3, #30
 800de78:	40bb      	lsls	r3, r7
 800de7a:	9902      	ldr	r1, [sp, #8]
 800de7c:	0092      	lsls	r2, r2, #2
 800de7e:	5852      	ldr	r2, [r2, r1]
 800de80:	421a      	tst	r2, r3
 800de82:	d001      	beq.n	800de88 <__gethex+0x308>
 800de84:	2302      	movs	r3, #2
 800de86:	431c      	orrs	r4, r3
 800de88:	9b00      	ldr	r3, [sp, #0]
 800de8a:	0031      	movs	r1, r6
 800de8c:	1b9b      	subs	r3, r3, r6
 800de8e:	2602      	movs	r6, #2
 800de90:	0028      	movs	r0, r5
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	f7ff fe0a 	bl	800daac <rshift>
 800de98:	9b01      	ldr	r3, [sp, #4]
 800de9a:	685f      	ldr	r7, [r3, #4]
 800de9c:	2c00      	cmp	r4, #0
 800de9e:	d041      	beq.n	800df24 <__gethex+0x3a4>
 800dea0:	9b01      	ldr	r3, [sp, #4]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	2b02      	cmp	r3, #2
 800dea6:	d010      	beq.n	800deca <__gethex+0x34a>
 800dea8:	2b03      	cmp	r3, #3
 800deaa:	d012      	beq.n	800ded2 <__gethex+0x352>
 800deac:	2b01      	cmp	r3, #1
 800deae:	d106      	bne.n	800debe <__gethex+0x33e>
 800deb0:	07a2      	lsls	r2, r4, #30
 800deb2:	d504      	bpl.n	800debe <__gethex+0x33e>
 800deb4:	9a02      	ldr	r2, [sp, #8]
 800deb6:	6812      	ldr	r2, [r2, #0]
 800deb8:	4314      	orrs	r4, r2
 800deba:	421c      	tst	r4, r3
 800debc:	d10c      	bne.n	800ded8 <__gethex+0x358>
 800debe:	2310      	movs	r3, #16
 800dec0:	e02f      	b.n	800df22 <__gethex+0x3a2>
 800dec2:	2401      	movs	r4, #1
 800dec4:	e7d4      	b.n	800de70 <__gethex+0x2f0>
 800dec6:	2601      	movs	r6, #1
 800dec8:	e7e8      	b.n	800de9c <__gethex+0x31c>
 800deca:	2301      	movs	r3, #1
 800decc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dece:	1a9b      	subs	r3, r3, r2
 800ded0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ded2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0f2      	beq.n	800debe <__gethex+0x33e>
 800ded8:	692b      	ldr	r3, [r5, #16]
 800deda:	2000      	movs	r0, #0
 800dedc:	9302      	str	r3, [sp, #8]
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	9304      	str	r3, [sp, #16]
 800dee2:	002b      	movs	r3, r5
 800dee4:	9a04      	ldr	r2, [sp, #16]
 800dee6:	3314      	adds	r3, #20
 800dee8:	1899      	adds	r1, r3, r2
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	1c54      	adds	r4, r2, #1
 800deee:	d01e      	beq.n	800df2e <__gethex+0x3ae>
 800def0:	3201      	adds	r2, #1
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	002b      	movs	r3, r5
 800def6:	3314      	adds	r3, #20
 800def8:	2e02      	cmp	r6, #2
 800defa:	d141      	bne.n	800df80 <__gethex+0x400>
 800defc:	9a01      	ldr	r2, [sp, #4]
 800defe:	9900      	ldr	r1, [sp, #0]
 800df00:	6812      	ldr	r2, [r2, #0]
 800df02:	3a01      	subs	r2, #1
 800df04:	428a      	cmp	r2, r1
 800df06:	d10b      	bne.n	800df20 <__gethex+0x3a0>
 800df08:	221f      	movs	r2, #31
 800df0a:	9800      	ldr	r0, [sp, #0]
 800df0c:	1149      	asrs	r1, r1, #5
 800df0e:	4002      	ands	r2, r0
 800df10:	2001      	movs	r0, #1
 800df12:	0004      	movs	r4, r0
 800df14:	4094      	lsls	r4, r2
 800df16:	0089      	lsls	r1, r1, #2
 800df18:	58cb      	ldr	r3, [r1, r3]
 800df1a:	4223      	tst	r3, r4
 800df1c:	d000      	beq.n	800df20 <__gethex+0x3a0>
 800df1e:	2601      	movs	r6, #1
 800df20:	2320      	movs	r3, #32
 800df22:	431e      	orrs	r6, r3
 800df24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df26:	601d      	str	r5, [r3, #0]
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	601f      	str	r7, [r3, #0]
 800df2c:	e6b1      	b.n	800dc92 <__gethex+0x112>
 800df2e:	c301      	stmia	r3!, {r0}
 800df30:	4299      	cmp	r1, r3
 800df32:	d8da      	bhi.n	800deea <__gethex+0x36a>
 800df34:	68ab      	ldr	r3, [r5, #8]
 800df36:	9a02      	ldr	r2, [sp, #8]
 800df38:	429a      	cmp	r2, r3
 800df3a:	db18      	blt.n	800df6e <__gethex+0x3ee>
 800df3c:	6869      	ldr	r1, [r5, #4]
 800df3e:	9803      	ldr	r0, [sp, #12]
 800df40:	3101      	adds	r1, #1
 800df42:	f000 f921 	bl	800e188 <_Balloc>
 800df46:	1e04      	subs	r4, r0, #0
 800df48:	d104      	bne.n	800df54 <__gethex+0x3d4>
 800df4a:	0022      	movs	r2, r4
 800df4c:	2184      	movs	r1, #132	; 0x84
 800df4e:	4b1c      	ldr	r3, [pc, #112]	; (800dfc0 <__gethex+0x440>)
 800df50:	481c      	ldr	r0, [pc, #112]	; (800dfc4 <__gethex+0x444>)
 800df52:	e6c2      	b.n	800dcda <__gethex+0x15a>
 800df54:	0029      	movs	r1, r5
 800df56:	692a      	ldr	r2, [r5, #16]
 800df58:	310c      	adds	r1, #12
 800df5a:	3202      	adds	r2, #2
 800df5c:	0092      	lsls	r2, r2, #2
 800df5e:	300c      	adds	r0, #12
 800df60:	f7ff fc77 	bl	800d852 <memcpy>
 800df64:	0029      	movs	r1, r5
 800df66:	9803      	ldr	r0, [sp, #12]
 800df68:	f000 f936 	bl	800e1d8 <_Bfree>
 800df6c:	0025      	movs	r5, r4
 800df6e:	692b      	ldr	r3, [r5, #16]
 800df70:	1c5a      	adds	r2, r3, #1
 800df72:	612a      	str	r2, [r5, #16]
 800df74:	2201      	movs	r2, #1
 800df76:	3304      	adds	r3, #4
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	18eb      	adds	r3, r5, r3
 800df7c:	605a      	str	r2, [r3, #4]
 800df7e:	e7b9      	b.n	800def4 <__gethex+0x374>
 800df80:	692a      	ldr	r2, [r5, #16]
 800df82:	9902      	ldr	r1, [sp, #8]
 800df84:	428a      	cmp	r2, r1
 800df86:	dd09      	ble.n	800df9c <__gethex+0x41c>
 800df88:	2101      	movs	r1, #1
 800df8a:	0028      	movs	r0, r5
 800df8c:	f7ff fd8e 	bl	800daac <rshift>
 800df90:	9b01      	ldr	r3, [sp, #4]
 800df92:	3701      	adds	r7, #1
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	42bb      	cmp	r3, r7
 800df98:	dac1      	bge.n	800df1e <__gethex+0x39e>
 800df9a:	e6e4      	b.n	800dd66 <__gethex+0x1e6>
 800df9c:	221f      	movs	r2, #31
 800df9e:	9c00      	ldr	r4, [sp, #0]
 800dfa0:	9900      	ldr	r1, [sp, #0]
 800dfa2:	2601      	movs	r6, #1
 800dfa4:	4014      	ands	r4, r2
 800dfa6:	4211      	tst	r1, r2
 800dfa8:	d0ba      	beq.n	800df20 <__gethex+0x3a0>
 800dfaa:	9a04      	ldr	r2, [sp, #16]
 800dfac:	189b      	adds	r3, r3, r2
 800dfae:	3b04      	subs	r3, #4
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	f000 f9ab 	bl	800e30c <__hi0bits>
 800dfb6:	2320      	movs	r3, #32
 800dfb8:	1b1b      	subs	r3, r3, r4
 800dfba:	4298      	cmp	r0, r3
 800dfbc:	dbe4      	blt.n	800df88 <__gethex+0x408>
 800dfbe:	e7af      	b.n	800df20 <__gethex+0x3a0>
 800dfc0:	08015e79 	.word	0x08015e79
 800dfc4:	08015e8a 	.word	0x08015e8a

0800dfc8 <L_shift>:
 800dfc8:	2308      	movs	r3, #8
 800dfca:	b570      	push	{r4, r5, r6, lr}
 800dfcc:	2520      	movs	r5, #32
 800dfce:	1a9a      	subs	r2, r3, r2
 800dfd0:	0092      	lsls	r2, r2, #2
 800dfd2:	1aad      	subs	r5, r5, r2
 800dfd4:	6843      	ldr	r3, [r0, #4]
 800dfd6:	6804      	ldr	r4, [r0, #0]
 800dfd8:	001e      	movs	r6, r3
 800dfda:	40ae      	lsls	r6, r5
 800dfdc:	40d3      	lsrs	r3, r2
 800dfde:	4334      	orrs	r4, r6
 800dfe0:	6004      	str	r4, [r0, #0]
 800dfe2:	6043      	str	r3, [r0, #4]
 800dfe4:	3004      	adds	r0, #4
 800dfe6:	4288      	cmp	r0, r1
 800dfe8:	d3f4      	bcc.n	800dfd4 <L_shift+0xc>
 800dfea:	bd70      	pop	{r4, r5, r6, pc}

0800dfec <__match>:
 800dfec:	b530      	push	{r4, r5, lr}
 800dfee:	6803      	ldr	r3, [r0, #0]
 800dff0:	780c      	ldrb	r4, [r1, #0]
 800dff2:	3301      	adds	r3, #1
 800dff4:	2c00      	cmp	r4, #0
 800dff6:	d102      	bne.n	800dffe <__match+0x12>
 800dff8:	6003      	str	r3, [r0, #0]
 800dffa:	2001      	movs	r0, #1
 800dffc:	bd30      	pop	{r4, r5, pc}
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	0015      	movs	r5, r2
 800e002:	3d41      	subs	r5, #65	; 0x41
 800e004:	2d19      	cmp	r5, #25
 800e006:	d800      	bhi.n	800e00a <__match+0x1e>
 800e008:	3220      	adds	r2, #32
 800e00a:	3101      	adds	r1, #1
 800e00c:	42a2      	cmp	r2, r4
 800e00e:	d0ef      	beq.n	800dff0 <__match+0x4>
 800e010:	2000      	movs	r0, #0
 800e012:	e7f3      	b.n	800dffc <__match+0x10>

0800e014 <__hexnan>:
 800e014:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e016:	680b      	ldr	r3, [r1, #0]
 800e018:	b08b      	sub	sp, #44	; 0x2c
 800e01a:	9201      	str	r2, [sp, #4]
 800e01c:	9901      	ldr	r1, [sp, #4]
 800e01e:	115a      	asrs	r2, r3, #5
 800e020:	0092      	lsls	r2, r2, #2
 800e022:	188a      	adds	r2, r1, r2
 800e024:	9202      	str	r2, [sp, #8]
 800e026:	0019      	movs	r1, r3
 800e028:	221f      	movs	r2, #31
 800e02a:	4011      	ands	r1, r2
 800e02c:	9008      	str	r0, [sp, #32]
 800e02e:	9106      	str	r1, [sp, #24]
 800e030:	4213      	tst	r3, r2
 800e032:	d002      	beq.n	800e03a <__hexnan+0x26>
 800e034:	9b02      	ldr	r3, [sp, #8]
 800e036:	3304      	adds	r3, #4
 800e038:	9302      	str	r3, [sp, #8]
 800e03a:	9b02      	ldr	r3, [sp, #8]
 800e03c:	2500      	movs	r5, #0
 800e03e:	1f1f      	subs	r7, r3, #4
 800e040:	003e      	movs	r6, r7
 800e042:	003c      	movs	r4, r7
 800e044:	9b08      	ldr	r3, [sp, #32]
 800e046:	603d      	str	r5, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	9507      	str	r5, [sp, #28]
 800e04c:	9305      	str	r3, [sp, #20]
 800e04e:	9503      	str	r5, [sp, #12]
 800e050:	9b05      	ldr	r3, [sp, #20]
 800e052:	3301      	adds	r3, #1
 800e054:	9309      	str	r3, [sp, #36]	; 0x24
 800e056:	9b05      	ldr	r3, [sp, #20]
 800e058:	785b      	ldrb	r3, [r3, #1]
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d028      	beq.n	800e0b2 <__hexnan+0x9e>
 800e060:	9804      	ldr	r0, [sp, #16]
 800e062:	f7ff fd78 	bl	800db56 <__hexdig_fun>
 800e066:	2800      	cmp	r0, #0
 800e068:	d154      	bne.n	800e114 <__hexnan+0x100>
 800e06a:	9b04      	ldr	r3, [sp, #16]
 800e06c:	2b20      	cmp	r3, #32
 800e06e:	d819      	bhi.n	800e0a4 <__hexnan+0x90>
 800e070:	9b03      	ldr	r3, [sp, #12]
 800e072:	9a07      	ldr	r2, [sp, #28]
 800e074:	4293      	cmp	r3, r2
 800e076:	dd12      	ble.n	800e09e <__hexnan+0x8a>
 800e078:	42b4      	cmp	r4, r6
 800e07a:	d206      	bcs.n	800e08a <__hexnan+0x76>
 800e07c:	2d07      	cmp	r5, #7
 800e07e:	dc04      	bgt.n	800e08a <__hexnan+0x76>
 800e080:	002a      	movs	r2, r5
 800e082:	0031      	movs	r1, r6
 800e084:	0020      	movs	r0, r4
 800e086:	f7ff ff9f 	bl	800dfc8 <L_shift>
 800e08a:	9b01      	ldr	r3, [sp, #4]
 800e08c:	2508      	movs	r5, #8
 800e08e:	429c      	cmp	r4, r3
 800e090:	d905      	bls.n	800e09e <__hexnan+0x8a>
 800e092:	1f26      	subs	r6, r4, #4
 800e094:	2500      	movs	r5, #0
 800e096:	0034      	movs	r4, r6
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	6035      	str	r5, [r6, #0]
 800e09c:	9307      	str	r3, [sp, #28]
 800e09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a0:	9305      	str	r3, [sp, #20]
 800e0a2:	e7d5      	b.n	800e050 <__hexnan+0x3c>
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	2b29      	cmp	r3, #41	; 0x29
 800e0a8:	d159      	bne.n	800e15e <__hexnan+0x14a>
 800e0aa:	9b05      	ldr	r3, [sp, #20]
 800e0ac:	9a08      	ldr	r2, [sp, #32]
 800e0ae:	3302      	adds	r3, #2
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d052      	beq.n	800e15e <__hexnan+0x14a>
 800e0b8:	42b4      	cmp	r4, r6
 800e0ba:	d206      	bcs.n	800e0ca <__hexnan+0xb6>
 800e0bc:	2d07      	cmp	r5, #7
 800e0be:	dc04      	bgt.n	800e0ca <__hexnan+0xb6>
 800e0c0:	002a      	movs	r2, r5
 800e0c2:	0031      	movs	r1, r6
 800e0c4:	0020      	movs	r0, r4
 800e0c6:	f7ff ff7f 	bl	800dfc8 <L_shift>
 800e0ca:	9b01      	ldr	r3, [sp, #4]
 800e0cc:	429c      	cmp	r4, r3
 800e0ce:	d935      	bls.n	800e13c <__hexnan+0x128>
 800e0d0:	001a      	movs	r2, r3
 800e0d2:	0023      	movs	r3, r4
 800e0d4:	cb02      	ldmia	r3!, {r1}
 800e0d6:	c202      	stmia	r2!, {r1}
 800e0d8:	429f      	cmp	r7, r3
 800e0da:	d2fb      	bcs.n	800e0d4 <__hexnan+0xc0>
 800e0dc:	9b02      	ldr	r3, [sp, #8]
 800e0de:	1c62      	adds	r2, r4, #1
 800e0e0:	1ed9      	subs	r1, r3, #3
 800e0e2:	2304      	movs	r3, #4
 800e0e4:	4291      	cmp	r1, r2
 800e0e6:	d305      	bcc.n	800e0f4 <__hexnan+0xe0>
 800e0e8:	9b02      	ldr	r3, [sp, #8]
 800e0ea:	3b04      	subs	r3, #4
 800e0ec:	1b1b      	subs	r3, r3, r4
 800e0ee:	089b      	lsrs	r3, r3, #2
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	9a01      	ldr	r2, [sp, #4]
 800e0f6:	18d3      	adds	r3, r2, r3
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	c304      	stmia	r3!, {r2}
 800e0fc:	429f      	cmp	r7, r3
 800e0fe:	d2fc      	bcs.n	800e0fa <__hexnan+0xe6>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d104      	bne.n	800e110 <__hexnan+0xfc>
 800e106:	9b01      	ldr	r3, [sp, #4]
 800e108:	429f      	cmp	r7, r3
 800e10a:	d126      	bne.n	800e15a <__hexnan+0x146>
 800e10c:	2301      	movs	r3, #1
 800e10e:	603b      	str	r3, [r7, #0]
 800e110:	2005      	movs	r0, #5
 800e112:	e025      	b.n	800e160 <__hexnan+0x14c>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	3501      	adds	r5, #1
 800e118:	3301      	adds	r3, #1
 800e11a:	9303      	str	r3, [sp, #12]
 800e11c:	2d08      	cmp	r5, #8
 800e11e:	dd06      	ble.n	800e12e <__hexnan+0x11a>
 800e120:	9b01      	ldr	r3, [sp, #4]
 800e122:	429c      	cmp	r4, r3
 800e124:	d9bb      	bls.n	800e09e <__hexnan+0x8a>
 800e126:	2300      	movs	r3, #0
 800e128:	2501      	movs	r5, #1
 800e12a:	3c04      	subs	r4, #4
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	220f      	movs	r2, #15
 800e130:	6823      	ldr	r3, [r4, #0]
 800e132:	4010      	ands	r0, r2
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	4303      	orrs	r3, r0
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	e7b0      	b.n	800e09e <__hexnan+0x8a>
 800e13c:	9b06      	ldr	r3, [sp, #24]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0de      	beq.n	800e100 <__hexnan+0xec>
 800e142:	2320      	movs	r3, #32
 800e144:	9a06      	ldr	r2, [sp, #24]
 800e146:	9902      	ldr	r1, [sp, #8]
 800e148:	1a9b      	subs	r3, r3, r2
 800e14a:	2201      	movs	r2, #1
 800e14c:	4252      	negs	r2, r2
 800e14e:	40da      	lsrs	r2, r3
 800e150:	3904      	subs	r1, #4
 800e152:	680b      	ldr	r3, [r1, #0]
 800e154:	4013      	ands	r3, r2
 800e156:	600b      	str	r3, [r1, #0]
 800e158:	e7d2      	b.n	800e100 <__hexnan+0xec>
 800e15a:	3f04      	subs	r7, #4
 800e15c:	e7d0      	b.n	800e100 <__hexnan+0xec>
 800e15e:	2004      	movs	r0, #4
 800e160:	b00b      	add	sp, #44	; 0x2c
 800e162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e164 <__ascii_mbtowc>:
 800e164:	b082      	sub	sp, #8
 800e166:	2900      	cmp	r1, #0
 800e168:	d100      	bne.n	800e16c <__ascii_mbtowc+0x8>
 800e16a:	a901      	add	r1, sp, #4
 800e16c:	1e10      	subs	r0, r2, #0
 800e16e:	d006      	beq.n	800e17e <__ascii_mbtowc+0x1a>
 800e170:	2b00      	cmp	r3, #0
 800e172:	d006      	beq.n	800e182 <__ascii_mbtowc+0x1e>
 800e174:	7813      	ldrb	r3, [r2, #0]
 800e176:	600b      	str	r3, [r1, #0]
 800e178:	7810      	ldrb	r0, [r2, #0]
 800e17a:	1e43      	subs	r3, r0, #1
 800e17c:	4198      	sbcs	r0, r3
 800e17e:	b002      	add	sp, #8
 800e180:	4770      	bx	lr
 800e182:	2002      	movs	r0, #2
 800e184:	4240      	negs	r0, r0
 800e186:	e7fa      	b.n	800e17e <__ascii_mbtowc+0x1a>

0800e188 <_Balloc>:
 800e188:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e18a:	b570      	push	{r4, r5, r6, lr}
 800e18c:	0006      	movs	r6, r0
 800e18e:	000c      	movs	r4, r1
 800e190:	2b00      	cmp	r3, #0
 800e192:	d012      	beq.n	800e1ba <_Balloc+0x32>
 800e194:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800e196:	00a2      	lsls	r2, r4, #2
 800e198:	189b      	adds	r3, r3, r2
 800e19a:	6818      	ldr	r0, [r3, #0]
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d115      	bne.n	800e1cc <_Balloc+0x44>
 800e1a0:	2101      	movs	r1, #1
 800e1a2:	000d      	movs	r5, r1
 800e1a4:	40a5      	lsls	r5, r4
 800e1a6:	1d6a      	adds	r2, r5, #5
 800e1a8:	0030      	movs	r0, r6
 800e1aa:	0092      	lsls	r2, r2, #2
 800e1ac:	f003 face 	bl	801174c <_calloc_r>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d009      	beq.n	800e1c8 <_Balloc+0x40>
 800e1b4:	6044      	str	r4, [r0, #4]
 800e1b6:	6085      	str	r5, [r0, #8]
 800e1b8:	e00a      	b.n	800e1d0 <_Balloc+0x48>
 800e1ba:	2221      	movs	r2, #33	; 0x21
 800e1bc:	2104      	movs	r1, #4
 800e1be:	f003 fac5 	bl	801174c <_calloc_r>
 800e1c2:	6470      	str	r0, [r6, #68]	; 0x44
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d1e5      	bne.n	800e194 <_Balloc+0xc>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
 800e1cc:	6802      	ldr	r2, [r0, #0]
 800e1ce:	601a      	str	r2, [r3, #0]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	6103      	str	r3, [r0, #16]
 800e1d4:	60c3      	str	r3, [r0, #12]
 800e1d6:	e7f8      	b.n	800e1ca <_Balloc+0x42>

0800e1d8 <_Bfree>:
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	d006      	beq.n	800e1ea <_Bfree+0x12>
 800e1dc:	684a      	ldr	r2, [r1, #4]
 800e1de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e1e0:	0092      	lsls	r2, r2, #2
 800e1e2:	189b      	adds	r3, r3, r2
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	600a      	str	r2, [r1, #0]
 800e1e8:	6019      	str	r1, [r3, #0]
 800e1ea:	4770      	bx	lr

0800e1ec <__multadd>:
 800e1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ee:	000e      	movs	r6, r1
 800e1f0:	9001      	str	r0, [sp, #4]
 800e1f2:	000c      	movs	r4, r1
 800e1f4:	001d      	movs	r5, r3
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	690f      	ldr	r7, [r1, #16]
 800e1fa:	3614      	adds	r6, #20
 800e1fc:	6833      	ldr	r3, [r6, #0]
 800e1fe:	3001      	adds	r0, #1
 800e200:	b299      	uxth	r1, r3
 800e202:	4351      	muls	r1, r2
 800e204:	0c1b      	lsrs	r3, r3, #16
 800e206:	4353      	muls	r3, r2
 800e208:	1949      	adds	r1, r1, r5
 800e20a:	0c0d      	lsrs	r5, r1, #16
 800e20c:	195b      	adds	r3, r3, r5
 800e20e:	0c1d      	lsrs	r5, r3, #16
 800e210:	b289      	uxth	r1, r1
 800e212:	041b      	lsls	r3, r3, #16
 800e214:	185b      	adds	r3, r3, r1
 800e216:	c608      	stmia	r6!, {r3}
 800e218:	4287      	cmp	r7, r0
 800e21a:	dcef      	bgt.n	800e1fc <__multadd+0x10>
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	d022      	beq.n	800e266 <__multadd+0x7a>
 800e220:	68a3      	ldr	r3, [r4, #8]
 800e222:	42bb      	cmp	r3, r7
 800e224:	dc19      	bgt.n	800e25a <__multadd+0x6e>
 800e226:	6861      	ldr	r1, [r4, #4]
 800e228:	9801      	ldr	r0, [sp, #4]
 800e22a:	3101      	adds	r1, #1
 800e22c:	f7ff ffac 	bl	800e188 <_Balloc>
 800e230:	1e06      	subs	r6, r0, #0
 800e232:	d105      	bne.n	800e240 <__multadd+0x54>
 800e234:	0032      	movs	r2, r6
 800e236:	21ba      	movs	r1, #186	; 0xba
 800e238:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <__multadd+0x80>)
 800e23a:	480d      	ldr	r0, [pc, #52]	; (800e270 <__multadd+0x84>)
 800e23c:	f003 fa68 	bl	8011710 <__assert_func>
 800e240:	0021      	movs	r1, r4
 800e242:	6922      	ldr	r2, [r4, #16]
 800e244:	310c      	adds	r1, #12
 800e246:	3202      	adds	r2, #2
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	300c      	adds	r0, #12
 800e24c:	f7ff fb01 	bl	800d852 <memcpy>
 800e250:	0021      	movs	r1, r4
 800e252:	9801      	ldr	r0, [sp, #4]
 800e254:	f7ff ffc0 	bl	800e1d8 <_Bfree>
 800e258:	0034      	movs	r4, r6
 800e25a:	1d3b      	adds	r3, r7, #4
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	18e3      	adds	r3, r4, r3
 800e260:	605d      	str	r5, [r3, #4]
 800e262:	1c7b      	adds	r3, r7, #1
 800e264:	6123      	str	r3, [r4, #16]
 800e266:	0020      	movs	r0, r4
 800e268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e26a:	46c0      	nop			; (mov r8, r8)
 800e26c:	08015e79 	.word	0x08015e79
 800e270:	08015eea 	.word	0x08015eea

0800e274 <__s2b>:
 800e274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e276:	0006      	movs	r6, r0
 800e278:	0018      	movs	r0, r3
 800e27a:	000c      	movs	r4, r1
 800e27c:	3008      	adds	r0, #8
 800e27e:	2109      	movs	r1, #9
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	0015      	movs	r5, r2
 800e284:	f7f1 ffe4 	bl	8000250 <__divsi3>
 800e288:	2301      	movs	r3, #1
 800e28a:	2100      	movs	r1, #0
 800e28c:	4283      	cmp	r3, r0
 800e28e:	db0a      	blt.n	800e2a6 <__s2b+0x32>
 800e290:	0030      	movs	r0, r6
 800e292:	f7ff ff79 	bl	800e188 <_Balloc>
 800e296:	1e01      	subs	r1, r0, #0
 800e298:	d108      	bne.n	800e2ac <__s2b+0x38>
 800e29a:	000a      	movs	r2, r1
 800e29c:	4b19      	ldr	r3, [pc, #100]	; (800e304 <__s2b+0x90>)
 800e29e:	481a      	ldr	r0, [pc, #104]	; (800e308 <__s2b+0x94>)
 800e2a0:	31d3      	adds	r1, #211	; 0xd3
 800e2a2:	f003 fa35 	bl	8011710 <__assert_func>
 800e2a6:	005b      	lsls	r3, r3, #1
 800e2a8:	3101      	adds	r1, #1
 800e2aa:	e7ef      	b.n	800e28c <__s2b+0x18>
 800e2ac:	9b08      	ldr	r3, [sp, #32]
 800e2ae:	6143      	str	r3, [r0, #20]
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	6103      	str	r3, [r0, #16]
 800e2b4:	2d09      	cmp	r5, #9
 800e2b6:	dd18      	ble.n	800e2ea <__s2b+0x76>
 800e2b8:	0023      	movs	r3, r4
 800e2ba:	3309      	adds	r3, #9
 800e2bc:	001f      	movs	r7, r3
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	1964      	adds	r4, r4, r5
 800e2c2:	783b      	ldrb	r3, [r7, #0]
 800e2c4:	220a      	movs	r2, #10
 800e2c6:	0030      	movs	r0, r6
 800e2c8:	3b30      	subs	r3, #48	; 0x30
 800e2ca:	f7ff ff8f 	bl	800e1ec <__multadd>
 800e2ce:	3701      	adds	r7, #1
 800e2d0:	0001      	movs	r1, r0
 800e2d2:	42a7      	cmp	r7, r4
 800e2d4:	d1f5      	bne.n	800e2c2 <__s2b+0x4e>
 800e2d6:	002c      	movs	r4, r5
 800e2d8:	9b00      	ldr	r3, [sp, #0]
 800e2da:	3c08      	subs	r4, #8
 800e2dc:	191c      	adds	r4, r3, r4
 800e2de:	002f      	movs	r7, r5
 800e2e0:	9b01      	ldr	r3, [sp, #4]
 800e2e2:	429f      	cmp	r7, r3
 800e2e4:	db04      	blt.n	800e2f0 <__s2b+0x7c>
 800e2e6:	0008      	movs	r0, r1
 800e2e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e2ea:	2509      	movs	r5, #9
 800e2ec:	340a      	adds	r4, #10
 800e2ee:	e7f6      	b.n	800e2de <__s2b+0x6a>
 800e2f0:	1b63      	subs	r3, r4, r5
 800e2f2:	5ddb      	ldrb	r3, [r3, r7]
 800e2f4:	220a      	movs	r2, #10
 800e2f6:	0030      	movs	r0, r6
 800e2f8:	3b30      	subs	r3, #48	; 0x30
 800e2fa:	f7ff ff77 	bl	800e1ec <__multadd>
 800e2fe:	3701      	adds	r7, #1
 800e300:	0001      	movs	r1, r0
 800e302:	e7ed      	b.n	800e2e0 <__s2b+0x6c>
 800e304:	08015e79 	.word	0x08015e79
 800e308:	08015eea 	.word	0x08015eea

0800e30c <__hi0bits>:
 800e30c:	0003      	movs	r3, r0
 800e30e:	0c02      	lsrs	r2, r0, #16
 800e310:	2000      	movs	r0, #0
 800e312:	4282      	cmp	r2, r0
 800e314:	d101      	bne.n	800e31a <__hi0bits+0xe>
 800e316:	041b      	lsls	r3, r3, #16
 800e318:	3010      	adds	r0, #16
 800e31a:	0e1a      	lsrs	r2, r3, #24
 800e31c:	d101      	bne.n	800e322 <__hi0bits+0x16>
 800e31e:	3008      	adds	r0, #8
 800e320:	021b      	lsls	r3, r3, #8
 800e322:	0f1a      	lsrs	r2, r3, #28
 800e324:	d101      	bne.n	800e32a <__hi0bits+0x1e>
 800e326:	3004      	adds	r0, #4
 800e328:	011b      	lsls	r3, r3, #4
 800e32a:	0f9a      	lsrs	r2, r3, #30
 800e32c:	d101      	bne.n	800e332 <__hi0bits+0x26>
 800e32e:	3002      	adds	r0, #2
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	2b00      	cmp	r3, #0
 800e334:	db03      	blt.n	800e33e <__hi0bits+0x32>
 800e336:	3001      	adds	r0, #1
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	d400      	bmi.n	800e33e <__hi0bits+0x32>
 800e33c:	2020      	movs	r0, #32
 800e33e:	4770      	bx	lr

0800e340 <__lo0bits>:
 800e340:	6803      	ldr	r3, [r0, #0]
 800e342:	0001      	movs	r1, r0
 800e344:	2207      	movs	r2, #7
 800e346:	0018      	movs	r0, r3
 800e348:	4010      	ands	r0, r2
 800e34a:	4213      	tst	r3, r2
 800e34c:	d00d      	beq.n	800e36a <__lo0bits+0x2a>
 800e34e:	3a06      	subs	r2, #6
 800e350:	2000      	movs	r0, #0
 800e352:	4213      	tst	r3, r2
 800e354:	d105      	bne.n	800e362 <__lo0bits+0x22>
 800e356:	3002      	adds	r0, #2
 800e358:	4203      	tst	r3, r0
 800e35a:	d003      	beq.n	800e364 <__lo0bits+0x24>
 800e35c:	40d3      	lsrs	r3, r2
 800e35e:	0010      	movs	r0, r2
 800e360:	600b      	str	r3, [r1, #0]
 800e362:	4770      	bx	lr
 800e364:	089b      	lsrs	r3, r3, #2
 800e366:	600b      	str	r3, [r1, #0]
 800e368:	e7fb      	b.n	800e362 <__lo0bits+0x22>
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	d101      	bne.n	800e374 <__lo0bits+0x34>
 800e370:	2010      	movs	r0, #16
 800e372:	0c1b      	lsrs	r3, r3, #16
 800e374:	b2da      	uxtb	r2, r3
 800e376:	2a00      	cmp	r2, #0
 800e378:	d101      	bne.n	800e37e <__lo0bits+0x3e>
 800e37a:	3008      	adds	r0, #8
 800e37c:	0a1b      	lsrs	r3, r3, #8
 800e37e:	071a      	lsls	r2, r3, #28
 800e380:	d101      	bne.n	800e386 <__lo0bits+0x46>
 800e382:	3004      	adds	r0, #4
 800e384:	091b      	lsrs	r3, r3, #4
 800e386:	079a      	lsls	r2, r3, #30
 800e388:	d101      	bne.n	800e38e <__lo0bits+0x4e>
 800e38a:	3002      	adds	r0, #2
 800e38c:	089b      	lsrs	r3, r3, #2
 800e38e:	07da      	lsls	r2, r3, #31
 800e390:	d4e9      	bmi.n	800e366 <__lo0bits+0x26>
 800e392:	3001      	adds	r0, #1
 800e394:	085b      	lsrs	r3, r3, #1
 800e396:	d1e6      	bne.n	800e366 <__lo0bits+0x26>
 800e398:	2020      	movs	r0, #32
 800e39a:	e7e2      	b.n	800e362 <__lo0bits+0x22>

0800e39c <__i2b>:
 800e39c:	b510      	push	{r4, lr}
 800e39e:	000c      	movs	r4, r1
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	f7ff fef1 	bl	800e188 <_Balloc>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d107      	bne.n	800e3ba <__i2b+0x1e>
 800e3aa:	2146      	movs	r1, #70	; 0x46
 800e3ac:	4c05      	ldr	r4, [pc, #20]	; (800e3c4 <__i2b+0x28>)
 800e3ae:	0002      	movs	r2, r0
 800e3b0:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <__i2b+0x2c>)
 800e3b2:	0020      	movs	r0, r4
 800e3b4:	31ff      	adds	r1, #255	; 0xff
 800e3b6:	f003 f9ab 	bl	8011710 <__assert_func>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	6144      	str	r4, [r0, #20]
 800e3be:	6103      	str	r3, [r0, #16]
 800e3c0:	bd10      	pop	{r4, pc}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	08015eea 	.word	0x08015eea
 800e3c8:	08015e79 	.word	0x08015e79

0800e3cc <__multiply>:
 800e3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ce:	0015      	movs	r5, r2
 800e3d0:	690a      	ldr	r2, [r1, #16]
 800e3d2:	692b      	ldr	r3, [r5, #16]
 800e3d4:	000c      	movs	r4, r1
 800e3d6:	b08b      	sub	sp, #44	; 0x2c
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	da01      	bge.n	800e3e0 <__multiply+0x14>
 800e3dc:	002c      	movs	r4, r5
 800e3de:	000d      	movs	r5, r1
 800e3e0:	6927      	ldr	r7, [r4, #16]
 800e3e2:	692e      	ldr	r6, [r5, #16]
 800e3e4:	6861      	ldr	r1, [r4, #4]
 800e3e6:	19bb      	adds	r3, r7, r6
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	68a3      	ldr	r3, [r4, #8]
 800e3ec:	19ba      	adds	r2, r7, r6
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	da00      	bge.n	800e3f4 <__multiply+0x28>
 800e3f2:	3101      	adds	r1, #1
 800e3f4:	f7ff fec8 	bl	800e188 <_Balloc>
 800e3f8:	9002      	str	r0, [sp, #8]
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d106      	bne.n	800e40c <__multiply+0x40>
 800e3fe:	21b1      	movs	r1, #177	; 0xb1
 800e400:	4b48      	ldr	r3, [pc, #288]	; (800e524 <__multiply+0x158>)
 800e402:	4849      	ldr	r0, [pc, #292]	; (800e528 <__multiply+0x15c>)
 800e404:	9a02      	ldr	r2, [sp, #8]
 800e406:	0049      	lsls	r1, r1, #1
 800e408:	f003 f982 	bl	8011710 <__assert_func>
 800e40c:	9b02      	ldr	r3, [sp, #8]
 800e40e:	2200      	movs	r2, #0
 800e410:	3314      	adds	r3, #20
 800e412:	469c      	mov	ip, r3
 800e414:	19bb      	adds	r3, r7, r6
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4463      	add	r3, ip
 800e41a:	9304      	str	r3, [sp, #16]
 800e41c:	4663      	mov	r3, ip
 800e41e:	9904      	ldr	r1, [sp, #16]
 800e420:	428b      	cmp	r3, r1
 800e422:	d32a      	bcc.n	800e47a <__multiply+0xae>
 800e424:	0023      	movs	r3, r4
 800e426:	00bf      	lsls	r7, r7, #2
 800e428:	3314      	adds	r3, #20
 800e42a:	3514      	adds	r5, #20
 800e42c:	9308      	str	r3, [sp, #32]
 800e42e:	00b6      	lsls	r6, r6, #2
 800e430:	19db      	adds	r3, r3, r7
 800e432:	9305      	str	r3, [sp, #20]
 800e434:	19ab      	adds	r3, r5, r6
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	2304      	movs	r3, #4
 800e43a:	9306      	str	r3, [sp, #24]
 800e43c:	0023      	movs	r3, r4
 800e43e:	9a05      	ldr	r2, [sp, #20]
 800e440:	3315      	adds	r3, #21
 800e442:	9501      	str	r5, [sp, #4]
 800e444:	429a      	cmp	r2, r3
 800e446:	d305      	bcc.n	800e454 <__multiply+0x88>
 800e448:	1b13      	subs	r3, r2, r4
 800e44a:	3b15      	subs	r3, #21
 800e44c:	089b      	lsrs	r3, r3, #2
 800e44e:	3301      	adds	r3, #1
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	9306      	str	r3, [sp, #24]
 800e454:	9b01      	ldr	r3, [sp, #4]
 800e456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e458:	4293      	cmp	r3, r2
 800e45a:	d310      	bcc.n	800e47e <__multiply+0xb2>
 800e45c:	9b03      	ldr	r3, [sp, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	dd05      	ble.n	800e46e <__multiply+0xa2>
 800e462:	9b04      	ldr	r3, [sp, #16]
 800e464:	3b04      	subs	r3, #4
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d056      	beq.n	800e51c <__multiply+0x150>
 800e46e:	9b02      	ldr	r3, [sp, #8]
 800e470:	9a03      	ldr	r2, [sp, #12]
 800e472:	0018      	movs	r0, r3
 800e474:	611a      	str	r2, [r3, #16]
 800e476:	b00b      	add	sp, #44	; 0x2c
 800e478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e47a:	c304      	stmia	r3!, {r2}
 800e47c:	e7cf      	b.n	800e41e <__multiply+0x52>
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	6818      	ldr	r0, [r3, #0]
 800e482:	b280      	uxth	r0, r0
 800e484:	2800      	cmp	r0, #0
 800e486:	d01e      	beq.n	800e4c6 <__multiply+0xfa>
 800e488:	4667      	mov	r7, ip
 800e48a:	2500      	movs	r5, #0
 800e48c:	9e08      	ldr	r6, [sp, #32]
 800e48e:	ce02      	ldmia	r6!, {r1}
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	9307      	str	r3, [sp, #28]
 800e494:	b28b      	uxth	r3, r1
 800e496:	4343      	muls	r3, r0
 800e498:	001a      	movs	r2, r3
 800e49a:	466b      	mov	r3, sp
 800e49c:	8b9b      	ldrh	r3, [r3, #28]
 800e49e:	18d3      	adds	r3, r2, r3
 800e4a0:	195b      	adds	r3, r3, r5
 800e4a2:	0c0d      	lsrs	r5, r1, #16
 800e4a4:	4345      	muls	r5, r0
 800e4a6:	9a07      	ldr	r2, [sp, #28]
 800e4a8:	0c11      	lsrs	r1, r2, #16
 800e4aa:	1869      	adds	r1, r5, r1
 800e4ac:	0c1a      	lsrs	r2, r3, #16
 800e4ae:	188a      	adds	r2, r1, r2
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	0c15      	lsrs	r5, r2, #16
 800e4b4:	0412      	lsls	r2, r2, #16
 800e4b6:	431a      	orrs	r2, r3
 800e4b8:	9b05      	ldr	r3, [sp, #20]
 800e4ba:	c704      	stmia	r7!, {r2}
 800e4bc:	42b3      	cmp	r3, r6
 800e4be:	d8e6      	bhi.n	800e48e <__multiply+0xc2>
 800e4c0:	4663      	mov	r3, ip
 800e4c2:	9a06      	ldr	r2, [sp, #24]
 800e4c4:	509d      	str	r5, [r3, r2]
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	6818      	ldr	r0, [r3, #0]
 800e4ca:	0c00      	lsrs	r0, r0, #16
 800e4cc:	d020      	beq.n	800e510 <__multiply+0x144>
 800e4ce:	4663      	mov	r3, ip
 800e4d0:	0025      	movs	r5, r4
 800e4d2:	4661      	mov	r1, ip
 800e4d4:	2700      	movs	r7, #0
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3514      	adds	r5, #20
 800e4da:	682a      	ldr	r2, [r5, #0]
 800e4dc:	680e      	ldr	r6, [r1, #0]
 800e4de:	b292      	uxth	r2, r2
 800e4e0:	4342      	muls	r2, r0
 800e4e2:	0c36      	lsrs	r6, r6, #16
 800e4e4:	1992      	adds	r2, r2, r6
 800e4e6:	19d2      	adds	r2, r2, r7
 800e4e8:	0416      	lsls	r6, r2, #16
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	431e      	orrs	r6, r3
 800e4ee:	600e      	str	r6, [r1, #0]
 800e4f0:	cd40      	ldmia	r5!, {r6}
 800e4f2:	684b      	ldr	r3, [r1, #4]
 800e4f4:	0c36      	lsrs	r6, r6, #16
 800e4f6:	4346      	muls	r6, r0
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	0c12      	lsrs	r2, r2, #16
 800e4fc:	18f3      	adds	r3, r6, r3
 800e4fe:	189b      	adds	r3, r3, r2
 800e500:	9a05      	ldr	r2, [sp, #20]
 800e502:	0c1f      	lsrs	r7, r3, #16
 800e504:	3104      	adds	r1, #4
 800e506:	42aa      	cmp	r2, r5
 800e508:	d8e7      	bhi.n	800e4da <__multiply+0x10e>
 800e50a:	4662      	mov	r2, ip
 800e50c:	9906      	ldr	r1, [sp, #24]
 800e50e:	5053      	str	r3, [r2, r1]
 800e510:	9b01      	ldr	r3, [sp, #4]
 800e512:	3304      	adds	r3, #4
 800e514:	9301      	str	r3, [sp, #4]
 800e516:	2304      	movs	r3, #4
 800e518:	449c      	add	ip, r3
 800e51a:	e79b      	b.n	800e454 <__multiply+0x88>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	3b01      	subs	r3, #1
 800e520:	9303      	str	r3, [sp, #12]
 800e522:	e79b      	b.n	800e45c <__multiply+0x90>
 800e524:	08015e79 	.word	0x08015e79
 800e528:	08015eea 	.word	0x08015eea

0800e52c <__pow5mult>:
 800e52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e52e:	2303      	movs	r3, #3
 800e530:	0015      	movs	r5, r2
 800e532:	0007      	movs	r7, r0
 800e534:	000e      	movs	r6, r1
 800e536:	401a      	ands	r2, r3
 800e538:	421d      	tst	r5, r3
 800e53a:	d008      	beq.n	800e54e <__pow5mult+0x22>
 800e53c:	491a      	ldr	r1, [pc, #104]	; (800e5a8 <__pow5mult+0x7c>)
 800e53e:	3a01      	subs	r2, #1
 800e540:	0092      	lsls	r2, r2, #2
 800e542:	5852      	ldr	r2, [r2, r1]
 800e544:	2300      	movs	r3, #0
 800e546:	0031      	movs	r1, r6
 800e548:	f7ff fe50 	bl	800e1ec <__multadd>
 800e54c:	0006      	movs	r6, r0
 800e54e:	10ad      	asrs	r5, r5, #2
 800e550:	d027      	beq.n	800e5a2 <__pow5mult+0x76>
 800e552:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e554:	2c00      	cmp	r4, #0
 800e556:	d107      	bne.n	800e568 <__pow5mult+0x3c>
 800e558:	0038      	movs	r0, r7
 800e55a:	4914      	ldr	r1, [pc, #80]	; (800e5ac <__pow5mult+0x80>)
 800e55c:	f7ff ff1e 	bl	800e39c <__i2b>
 800e560:	2300      	movs	r3, #0
 800e562:	0004      	movs	r4, r0
 800e564:	6438      	str	r0, [r7, #64]	; 0x40
 800e566:	6003      	str	r3, [r0, #0]
 800e568:	2301      	movs	r3, #1
 800e56a:	421d      	tst	r5, r3
 800e56c:	d00a      	beq.n	800e584 <__pow5mult+0x58>
 800e56e:	0031      	movs	r1, r6
 800e570:	0022      	movs	r2, r4
 800e572:	0038      	movs	r0, r7
 800e574:	f7ff ff2a 	bl	800e3cc <__multiply>
 800e578:	0031      	movs	r1, r6
 800e57a:	9001      	str	r0, [sp, #4]
 800e57c:	0038      	movs	r0, r7
 800e57e:	f7ff fe2b 	bl	800e1d8 <_Bfree>
 800e582:	9e01      	ldr	r6, [sp, #4]
 800e584:	106d      	asrs	r5, r5, #1
 800e586:	d00c      	beq.n	800e5a2 <__pow5mult+0x76>
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d107      	bne.n	800e59e <__pow5mult+0x72>
 800e58e:	0022      	movs	r2, r4
 800e590:	0021      	movs	r1, r4
 800e592:	0038      	movs	r0, r7
 800e594:	f7ff ff1a 	bl	800e3cc <__multiply>
 800e598:	2300      	movs	r3, #0
 800e59a:	6020      	str	r0, [r4, #0]
 800e59c:	6003      	str	r3, [r0, #0]
 800e59e:	0004      	movs	r4, r0
 800e5a0:	e7e2      	b.n	800e568 <__pow5mult+0x3c>
 800e5a2:	0030      	movs	r0, r6
 800e5a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5a6:	46c0      	nop			; (mov r8, r8)
 800e5a8:	08016038 	.word	0x08016038
 800e5ac:	00000271 	.word	0x00000271

0800e5b0 <__lshift>:
 800e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5b2:	000c      	movs	r4, r1
 800e5b4:	0017      	movs	r7, r2
 800e5b6:	6923      	ldr	r3, [r4, #16]
 800e5b8:	1155      	asrs	r5, r2, #5
 800e5ba:	b087      	sub	sp, #28
 800e5bc:	18eb      	adds	r3, r5, r3
 800e5be:	9302      	str	r3, [sp, #8]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	9301      	str	r3, [sp, #4]
 800e5c4:	6849      	ldr	r1, [r1, #4]
 800e5c6:	68a3      	ldr	r3, [r4, #8]
 800e5c8:	9004      	str	r0, [sp, #16]
 800e5ca:	9a01      	ldr	r2, [sp, #4]
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	db10      	blt.n	800e5f2 <__lshift+0x42>
 800e5d0:	9804      	ldr	r0, [sp, #16]
 800e5d2:	f7ff fdd9 	bl	800e188 <_Balloc>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	0002      	movs	r2, r0
 800e5da:	0006      	movs	r6, r0
 800e5dc:	0019      	movs	r1, r3
 800e5de:	3214      	adds	r2, #20
 800e5e0:	4298      	cmp	r0, r3
 800e5e2:	d10c      	bne.n	800e5fe <__lshift+0x4e>
 800e5e4:	31df      	adds	r1, #223	; 0xdf
 800e5e6:	0032      	movs	r2, r6
 800e5e8:	4b26      	ldr	r3, [pc, #152]	; (800e684 <__lshift+0xd4>)
 800e5ea:	4827      	ldr	r0, [pc, #156]	; (800e688 <__lshift+0xd8>)
 800e5ec:	31ff      	adds	r1, #255	; 0xff
 800e5ee:	f003 f88f 	bl	8011710 <__assert_func>
 800e5f2:	3101      	adds	r1, #1
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	e7e8      	b.n	800e5ca <__lshift+0x1a>
 800e5f8:	0098      	lsls	r0, r3, #2
 800e5fa:	5011      	str	r1, [r2, r0]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	42ab      	cmp	r3, r5
 800e600:	dbfa      	blt.n	800e5f8 <__lshift+0x48>
 800e602:	43eb      	mvns	r3, r5
 800e604:	17db      	asrs	r3, r3, #31
 800e606:	401d      	ands	r5, r3
 800e608:	211f      	movs	r1, #31
 800e60a:	0023      	movs	r3, r4
 800e60c:	0038      	movs	r0, r7
 800e60e:	00ad      	lsls	r5, r5, #2
 800e610:	1955      	adds	r5, r2, r5
 800e612:	6922      	ldr	r2, [r4, #16]
 800e614:	3314      	adds	r3, #20
 800e616:	0092      	lsls	r2, r2, #2
 800e618:	4008      	ands	r0, r1
 800e61a:	4684      	mov	ip, r0
 800e61c:	189a      	adds	r2, r3, r2
 800e61e:	420f      	tst	r7, r1
 800e620:	d02a      	beq.n	800e678 <__lshift+0xc8>
 800e622:	3101      	adds	r1, #1
 800e624:	1a09      	subs	r1, r1, r0
 800e626:	9105      	str	r1, [sp, #20]
 800e628:	2100      	movs	r1, #0
 800e62a:	9503      	str	r5, [sp, #12]
 800e62c:	4667      	mov	r7, ip
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	40b8      	lsls	r0, r7
 800e632:	4308      	orrs	r0, r1
 800e634:	9903      	ldr	r1, [sp, #12]
 800e636:	c101      	stmia	r1!, {r0}
 800e638:	9103      	str	r1, [sp, #12]
 800e63a:	9805      	ldr	r0, [sp, #20]
 800e63c:	cb02      	ldmia	r3!, {r1}
 800e63e:	40c1      	lsrs	r1, r0
 800e640:	429a      	cmp	r2, r3
 800e642:	d8f3      	bhi.n	800e62c <__lshift+0x7c>
 800e644:	0020      	movs	r0, r4
 800e646:	3015      	adds	r0, #21
 800e648:	2304      	movs	r3, #4
 800e64a:	4282      	cmp	r2, r0
 800e64c:	d304      	bcc.n	800e658 <__lshift+0xa8>
 800e64e:	1b13      	subs	r3, r2, r4
 800e650:	3b15      	subs	r3, #21
 800e652:	089b      	lsrs	r3, r3, #2
 800e654:	3301      	adds	r3, #1
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	50e9      	str	r1, [r5, r3]
 800e65a:	2900      	cmp	r1, #0
 800e65c:	d002      	beq.n	800e664 <__lshift+0xb4>
 800e65e:	9b02      	ldr	r3, [sp, #8]
 800e660:	3302      	adds	r3, #2
 800e662:	9301      	str	r3, [sp, #4]
 800e664:	9b01      	ldr	r3, [sp, #4]
 800e666:	9804      	ldr	r0, [sp, #16]
 800e668:	3b01      	subs	r3, #1
 800e66a:	0021      	movs	r1, r4
 800e66c:	6133      	str	r3, [r6, #16]
 800e66e:	f7ff fdb3 	bl	800e1d8 <_Bfree>
 800e672:	0030      	movs	r0, r6
 800e674:	b007      	add	sp, #28
 800e676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e678:	cb02      	ldmia	r3!, {r1}
 800e67a:	c502      	stmia	r5!, {r1}
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d8fb      	bhi.n	800e678 <__lshift+0xc8>
 800e680:	e7f0      	b.n	800e664 <__lshift+0xb4>
 800e682:	46c0      	nop			; (mov r8, r8)
 800e684:	08015e79 	.word	0x08015e79
 800e688:	08015eea 	.word	0x08015eea

0800e68c <__mcmp>:
 800e68c:	b530      	push	{r4, r5, lr}
 800e68e:	690b      	ldr	r3, [r1, #16]
 800e690:	6904      	ldr	r4, [r0, #16]
 800e692:	0002      	movs	r2, r0
 800e694:	1ae0      	subs	r0, r4, r3
 800e696:	429c      	cmp	r4, r3
 800e698:	d10e      	bne.n	800e6b8 <__mcmp+0x2c>
 800e69a:	3214      	adds	r2, #20
 800e69c:	009b      	lsls	r3, r3, #2
 800e69e:	3114      	adds	r1, #20
 800e6a0:	0014      	movs	r4, r2
 800e6a2:	18c9      	adds	r1, r1, r3
 800e6a4:	18d2      	adds	r2, r2, r3
 800e6a6:	3a04      	subs	r2, #4
 800e6a8:	3904      	subs	r1, #4
 800e6aa:	6815      	ldr	r5, [r2, #0]
 800e6ac:	680b      	ldr	r3, [r1, #0]
 800e6ae:	429d      	cmp	r5, r3
 800e6b0:	d003      	beq.n	800e6ba <__mcmp+0x2e>
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	d303      	bcc.n	800e6c0 <__mcmp+0x34>
 800e6b8:	bd30      	pop	{r4, r5, pc}
 800e6ba:	4294      	cmp	r4, r2
 800e6bc:	d3f3      	bcc.n	800e6a6 <__mcmp+0x1a>
 800e6be:	e7fb      	b.n	800e6b8 <__mcmp+0x2c>
 800e6c0:	4240      	negs	r0, r0
 800e6c2:	e7f9      	b.n	800e6b8 <__mcmp+0x2c>

0800e6c4 <__mdiff>:
 800e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c6:	000e      	movs	r6, r1
 800e6c8:	0007      	movs	r7, r0
 800e6ca:	0011      	movs	r1, r2
 800e6cc:	0030      	movs	r0, r6
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	0014      	movs	r4, r2
 800e6d2:	f7ff ffdb 	bl	800e68c <__mcmp>
 800e6d6:	1e05      	subs	r5, r0, #0
 800e6d8:	d110      	bne.n	800e6fc <__mdiff+0x38>
 800e6da:	0001      	movs	r1, r0
 800e6dc:	0038      	movs	r0, r7
 800e6de:	f7ff fd53 	bl	800e188 <_Balloc>
 800e6e2:	1e02      	subs	r2, r0, #0
 800e6e4:	d104      	bne.n	800e6f0 <__mdiff+0x2c>
 800e6e6:	4b3f      	ldr	r3, [pc, #252]	; (800e7e4 <__mdiff+0x120>)
 800e6e8:	483f      	ldr	r0, [pc, #252]	; (800e7e8 <__mdiff+0x124>)
 800e6ea:	4940      	ldr	r1, [pc, #256]	; (800e7ec <__mdiff+0x128>)
 800e6ec:	f003 f810 	bl	8011710 <__assert_func>
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	6145      	str	r5, [r0, #20]
 800e6f4:	6103      	str	r3, [r0, #16]
 800e6f6:	0010      	movs	r0, r2
 800e6f8:	b007      	add	sp, #28
 800e6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	2800      	cmp	r0, #0
 800e702:	db04      	blt.n	800e70e <__mdiff+0x4a>
 800e704:	0023      	movs	r3, r4
 800e706:	0034      	movs	r4, r6
 800e708:	001e      	movs	r6, r3
 800e70a:	2300      	movs	r3, #0
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	0038      	movs	r0, r7
 800e710:	6861      	ldr	r1, [r4, #4]
 800e712:	f7ff fd39 	bl	800e188 <_Balloc>
 800e716:	1e02      	subs	r2, r0, #0
 800e718:	d103      	bne.n	800e722 <__mdiff+0x5e>
 800e71a:	4b32      	ldr	r3, [pc, #200]	; (800e7e4 <__mdiff+0x120>)
 800e71c:	4832      	ldr	r0, [pc, #200]	; (800e7e8 <__mdiff+0x124>)
 800e71e:	4934      	ldr	r1, [pc, #208]	; (800e7f0 <__mdiff+0x12c>)
 800e720:	e7e4      	b.n	800e6ec <__mdiff+0x28>
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	2700      	movs	r7, #0
 800e726:	60c3      	str	r3, [r0, #12]
 800e728:	6920      	ldr	r0, [r4, #16]
 800e72a:	3414      	adds	r4, #20
 800e72c:	0083      	lsls	r3, r0, #2
 800e72e:	18e3      	adds	r3, r4, r3
 800e730:	0021      	movs	r1, r4
 800e732:	9401      	str	r4, [sp, #4]
 800e734:	0034      	movs	r4, r6
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	6933      	ldr	r3, [r6, #16]
 800e73a:	3414      	adds	r4, #20
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	18e3      	adds	r3, r4, r3
 800e740:	9303      	str	r3, [sp, #12]
 800e742:	0013      	movs	r3, r2
 800e744:	3314      	adds	r3, #20
 800e746:	469c      	mov	ip, r3
 800e748:	9305      	str	r3, [sp, #20]
 800e74a:	9104      	str	r1, [sp, #16]
 800e74c:	9b04      	ldr	r3, [sp, #16]
 800e74e:	cc02      	ldmia	r4!, {r1}
 800e750:	cb20      	ldmia	r3!, {r5}
 800e752:	9304      	str	r3, [sp, #16]
 800e754:	b2ab      	uxth	r3, r5
 800e756:	19df      	adds	r7, r3, r7
 800e758:	b28b      	uxth	r3, r1
 800e75a:	1afb      	subs	r3, r7, r3
 800e75c:	0c09      	lsrs	r1, r1, #16
 800e75e:	0c2d      	lsrs	r5, r5, #16
 800e760:	1a6d      	subs	r5, r5, r1
 800e762:	1419      	asrs	r1, r3, #16
 800e764:	1869      	adds	r1, r5, r1
 800e766:	b29b      	uxth	r3, r3
 800e768:	140f      	asrs	r7, r1, #16
 800e76a:	0409      	lsls	r1, r1, #16
 800e76c:	4319      	orrs	r1, r3
 800e76e:	4663      	mov	r3, ip
 800e770:	c302      	stmia	r3!, {r1}
 800e772:	469c      	mov	ip, r3
 800e774:	9b03      	ldr	r3, [sp, #12]
 800e776:	42a3      	cmp	r3, r4
 800e778:	d8e8      	bhi.n	800e74c <__mdiff+0x88>
 800e77a:	0031      	movs	r1, r6
 800e77c:	9c03      	ldr	r4, [sp, #12]
 800e77e:	3115      	adds	r1, #21
 800e780:	2304      	movs	r3, #4
 800e782:	428c      	cmp	r4, r1
 800e784:	d304      	bcc.n	800e790 <__mdiff+0xcc>
 800e786:	1ba3      	subs	r3, r4, r6
 800e788:	3b15      	subs	r3, #21
 800e78a:	089b      	lsrs	r3, r3, #2
 800e78c:	3301      	adds	r3, #1
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	9901      	ldr	r1, [sp, #4]
 800e792:	18cd      	adds	r5, r1, r3
 800e794:	9905      	ldr	r1, [sp, #20]
 800e796:	002e      	movs	r6, r5
 800e798:	18cb      	adds	r3, r1, r3
 800e79a:	469c      	mov	ip, r3
 800e79c:	9902      	ldr	r1, [sp, #8]
 800e79e:	428e      	cmp	r6, r1
 800e7a0:	d310      	bcc.n	800e7c4 <__mdiff+0x100>
 800e7a2:	9e02      	ldr	r6, [sp, #8]
 800e7a4:	1ee9      	subs	r1, r5, #3
 800e7a6:	2400      	movs	r4, #0
 800e7a8:	428e      	cmp	r6, r1
 800e7aa:	d304      	bcc.n	800e7b6 <__mdiff+0xf2>
 800e7ac:	0031      	movs	r1, r6
 800e7ae:	3103      	adds	r1, #3
 800e7b0:	1b49      	subs	r1, r1, r5
 800e7b2:	0889      	lsrs	r1, r1, #2
 800e7b4:	008c      	lsls	r4, r1, #2
 800e7b6:	191b      	adds	r3, r3, r4
 800e7b8:	3b04      	subs	r3, #4
 800e7ba:	6819      	ldr	r1, [r3, #0]
 800e7bc:	2900      	cmp	r1, #0
 800e7be:	d00f      	beq.n	800e7e0 <__mdiff+0x11c>
 800e7c0:	6110      	str	r0, [r2, #16]
 800e7c2:	e798      	b.n	800e6f6 <__mdiff+0x32>
 800e7c4:	ce02      	ldmia	r6!, {r1}
 800e7c6:	b28c      	uxth	r4, r1
 800e7c8:	19e4      	adds	r4, r4, r7
 800e7ca:	0c0f      	lsrs	r7, r1, #16
 800e7cc:	1421      	asrs	r1, r4, #16
 800e7ce:	1879      	adds	r1, r7, r1
 800e7d0:	b2a4      	uxth	r4, r4
 800e7d2:	140f      	asrs	r7, r1, #16
 800e7d4:	0409      	lsls	r1, r1, #16
 800e7d6:	4321      	orrs	r1, r4
 800e7d8:	4664      	mov	r4, ip
 800e7da:	c402      	stmia	r4!, {r1}
 800e7dc:	46a4      	mov	ip, r4
 800e7de:	e7dd      	b.n	800e79c <__mdiff+0xd8>
 800e7e0:	3801      	subs	r0, #1
 800e7e2:	e7e9      	b.n	800e7b8 <__mdiff+0xf4>
 800e7e4:	08015e79 	.word	0x08015e79
 800e7e8:	08015eea 	.word	0x08015eea
 800e7ec:	00000237 	.word	0x00000237
 800e7f0:	00000245 	.word	0x00000245

0800e7f4 <__ulp>:
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <__ulp+0x30>)
 800e7f8:	4019      	ands	r1, r3
 800e7fa:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <__ulp+0x34>)
 800e7fc:	18c9      	adds	r1, r1, r3
 800e7fe:	4281      	cmp	r1, r0
 800e800:	dc06      	bgt.n	800e810 <__ulp+0x1c>
 800e802:	4249      	negs	r1, r1
 800e804:	150b      	asrs	r3, r1, #20
 800e806:	2b13      	cmp	r3, #19
 800e808:	dc03      	bgt.n	800e812 <__ulp+0x1e>
 800e80a:	2180      	movs	r1, #128	; 0x80
 800e80c:	0309      	lsls	r1, r1, #12
 800e80e:	4119      	asrs	r1, r3
 800e810:	4770      	bx	lr
 800e812:	3b14      	subs	r3, #20
 800e814:	2001      	movs	r0, #1
 800e816:	2b1e      	cmp	r3, #30
 800e818:	dc02      	bgt.n	800e820 <__ulp+0x2c>
 800e81a:	2080      	movs	r0, #128	; 0x80
 800e81c:	0600      	lsls	r0, r0, #24
 800e81e:	40d8      	lsrs	r0, r3
 800e820:	2100      	movs	r1, #0
 800e822:	e7f5      	b.n	800e810 <__ulp+0x1c>
 800e824:	7ff00000 	.word	0x7ff00000
 800e828:	fcc00000 	.word	0xfcc00000

0800e82c <__b2d>:
 800e82c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e82e:	0006      	movs	r6, r0
 800e830:	6903      	ldr	r3, [r0, #16]
 800e832:	3614      	adds	r6, #20
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	18f3      	adds	r3, r6, r3
 800e838:	1f1d      	subs	r5, r3, #4
 800e83a:	682c      	ldr	r4, [r5, #0]
 800e83c:	000f      	movs	r7, r1
 800e83e:	0020      	movs	r0, r4
 800e840:	9301      	str	r3, [sp, #4]
 800e842:	f7ff fd63 	bl	800e30c <__hi0bits>
 800e846:	2220      	movs	r2, #32
 800e848:	1a12      	subs	r2, r2, r0
 800e84a:	603a      	str	r2, [r7, #0]
 800e84c:	0003      	movs	r3, r0
 800e84e:	4a1c      	ldr	r2, [pc, #112]	; (800e8c0 <__b2d+0x94>)
 800e850:	280a      	cmp	r0, #10
 800e852:	dc15      	bgt.n	800e880 <__b2d+0x54>
 800e854:	210b      	movs	r1, #11
 800e856:	0027      	movs	r7, r4
 800e858:	1a09      	subs	r1, r1, r0
 800e85a:	40cf      	lsrs	r7, r1
 800e85c:	433a      	orrs	r2, r7
 800e85e:	468c      	mov	ip, r1
 800e860:	0011      	movs	r1, r2
 800e862:	2200      	movs	r2, #0
 800e864:	42ae      	cmp	r6, r5
 800e866:	d202      	bcs.n	800e86e <__b2d+0x42>
 800e868:	9a01      	ldr	r2, [sp, #4]
 800e86a:	3a08      	subs	r2, #8
 800e86c:	6812      	ldr	r2, [r2, #0]
 800e86e:	3315      	adds	r3, #21
 800e870:	409c      	lsls	r4, r3
 800e872:	4663      	mov	r3, ip
 800e874:	0027      	movs	r7, r4
 800e876:	40da      	lsrs	r2, r3
 800e878:	4317      	orrs	r7, r2
 800e87a:	0038      	movs	r0, r7
 800e87c:	b003      	add	sp, #12
 800e87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e880:	2700      	movs	r7, #0
 800e882:	42ae      	cmp	r6, r5
 800e884:	d202      	bcs.n	800e88c <__b2d+0x60>
 800e886:	9d01      	ldr	r5, [sp, #4]
 800e888:	3d08      	subs	r5, #8
 800e88a:	682f      	ldr	r7, [r5, #0]
 800e88c:	210b      	movs	r1, #11
 800e88e:	4249      	negs	r1, r1
 800e890:	468c      	mov	ip, r1
 800e892:	449c      	add	ip, r3
 800e894:	2b0b      	cmp	r3, #11
 800e896:	d010      	beq.n	800e8ba <__b2d+0x8e>
 800e898:	4661      	mov	r1, ip
 800e89a:	2320      	movs	r3, #32
 800e89c:	408c      	lsls	r4, r1
 800e89e:	1a5b      	subs	r3, r3, r1
 800e8a0:	0039      	movs	r1, r7
 800e8a2:	40d9      	lsrs	r1, r3
 800e8a4:	430c      	orrs	r4, r1
 800e8a6:	4322      	orrs	r2, r4
 800e8a8:	0011      	movs	r1, r2
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	42b5      	cmp	r5, r6
 800e8ae:	d901      	bls.n	800e8b4 <__b2d+0x88>
 800e8b0:	3d04      	subs	r5, #4
 800e8b2:	682a      	ldr	r2, [r5, #0]
 800e8b4:	4664      	mov	r4, ip
 800e8b6:	40a7      	lsls	r7, r4
 800e8b8:	e7dd      	b.n	800e876 <__b2d+0x4a>
 800e8ba:	4322      	orrs	r2, r4
 800e8bc:	0011      	movs	r1, r2
 800e8be:	e7dc      	b.n	800e87a <__b2d+0x4e>
 800e8c0:	3ff00000 	.word	0x3ff00000

0800e8c4 <__d2b>:
 800e8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	0014      	movs	r4, r2
 800e8ca:	001d      	movs	r5, r3
 800e8cc:	9f08      	ldr	r7, [sp, #32]
 800e8ce:	f7ff fc5b 	bl	800e188 <_Balloc>
 800e8d2:	1e06      	subs	r6, r0, #0
 800e8d4:	d105      	bne.n	800e8e2 <__d2b+0x1e>
 800e8d6:	0032      	movs	r2, r6
 800e8d8:	4b24      	ldr	r3, [pc, #144]	; (800e96c <__d2b+0xa8>)
 800e8da:	4825      	ldr	r0, [pc, #148]	; (800e970 <__d2b+0xac>)
 800e8dc:	4925      	ldr	r1, [pc, #148]	; (800e974 <__d2b+0xb0>)
 800e8de:	f002 ff17 	bl	8011710 <__assert_func>
 800e8e2:	032b      	lsls	r3, r5, #12
 800e8e4:	006d      	lsls	r5, r5, #1
 800e8e6:	0b1b      	lsrs	r3, r3, #12
 800e8e8:	0d6d      	lsrs	r5, r5, #21
 800e8ea:	d125      	bne.n	800e938 <__d2b+0x74>
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	2c00      	cmp	r4, #0
 800e8f0:	d028      	beq.n	800e944 <__d2b+0x80>
 800e8f2:	4668      	mov	r0, sp
 800e8f4:	9400      	str	r4, [sp, #0]
 800e8f6:	f7ff fd23 	bl	800e340 <__lo0bits>
 800e8fa:	9b01      	ldr	r3, [sp, #4]
 800e8fc:	9900      	ldr	r1, [sp, #0]
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d01e      	beq.n	800e940 <__d2b+0x7c>
 800e902:	2220      	movs	r2, #32
 800e904:	001c      	movs	r4, r3
 800e906:	1a12      	subs	r2, r2, r0
 800e908:	4094      	lsls	r4, r2
 800e90a:	0022      	movs	r2, r4
 800e90c:	40c3      	lsrs	r3, r0
 800e90e:	430a      	orrs	r2, r1
 800e910:	6172      	str	r2, [r6, #20]
 800e912:	9301      	str	r3, [sp, #4]
 800e914:	9c01      	ldr	r4, [sp, #4]
 800e916:	61b4      	str	r4, [r6, #24]
 800e918:	1e63      	subs	r3, r4, #1
 800e91a:	419c      	sbcs	r4, r3
 800e91c:	3401      	adds	r4, #1
 800e91e:	6134      	str	r4, [r6, #16]
 800e920:	2d00      	cmp	r5, #0
 800e922:	d017      	beq.n	800e954 <__d2b+0x90>
 800e924:	2435      	movs	r4, #53	; 0x35
 800e926:	4b14      	ldr	r3, [pc, #80]	; (800e978 <__d2b+0xb4>)
 800e928:	18ed      	adds	r5, r5, r3
 800e92a:	182d      	adds	r5, r5, r0
 800e92c:	603d      	str	r5, [r7, #0]
 800e92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e930:	1a24      	subs	r4, r4, r0
 800e932:	601c      	str	r4, [r3, #0]
 800e934:	0030      	movs	r0, r6
 800e936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e938:	2280      	movs	r2, #128	; 0x80
 800e93a:	0352      	lsls	r2, r2, #13
 800e93c:	4313      	orrs	r3, r2
 800e93e:	e7d5      	b.n	800e8ec <__d2b+0x28>
 800e940:	6171      	str	r1, [r6, #20]
 800e942:	e7e7      	b.n	800e914 <__d2b+0x50>
 800e944:	a801      	add	r0, sp, #4
 800e946:	f7ff fcfb 	bl	800e340 <__lo0bits>
 800e94a:	9b01      	ldr	r3, [sp, #4]
 800e94c:	2401      	movs	r4, #1
 800e94e:	6173      	str	r3, [r6, #20]
 800e950:	3020      	adds	r0, #32
 800e952:	e7e4      	b.n	800e91e <__d2b+0x5a>
 800e954:	4b09      	ldr	r3, [pc, #36]	; (800e97c <__d2b+0xb8>)
 800e956:	18c0      	adds	r0, r0, r3
 800e958:	4b09      	ldr	r3, [pc, #36]	; (800e980 <__d2b+0xbc>)
 800e95a:	6038      	str	r0, [r7, #0]
 800e95c:	18e3      	adds	r3, r4, r3
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	18f3      	adds	r3, r6, r3
 800e962:	6958      	ldr	r0, [r3, #20]
 800e964:	f7ff fcd2 	bl	800e30c <__hi0bits>
 800e968:	0164      	lsls	r4, r4, #5
 800e96a:	e7e0      	b.n	800e92e <__d2b+0x6a>
 800e96c:	08015e79 	.word	0x08015e79
 800e970:	08015eea 	.word	0x08015eea
 800e974:	0000030f 	.word	0x0000030f
 800e978:	fffffbcd 	.word	0xfffffbcd
 800e97c:	fffffbce 	.word	0xfffffbce
 800e980:	3fffffff 	.word	0x3fffffff

0800e984 <__ratio>:
 800e984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e986:	b087      	sub	sp, #28
 800e988:	000f      	movs	r7, r1
 800e98a:	a904      	add	r1, sp, #16
 800e98c:	0006      	movs	r6, r0
 800e98e:	f7ff ff4d 	bl	800e82c <__b2d>
 800e992:	9000      	str	r0, [sp, #0]
 800e994:	9101      	str	r1, [sp, #4]
 800e996:	9c00      	ldr	r4, [sp, #0]
 800e998:	9d01      	ldr	r5, [sp, #4]
 800e99a:	0038      	movs	r0, r7
 800e99c:	a905      	add	r1, sp, #20
 800e99e:	f7ff ff45 	bl	800e82c <__b2d>
 800e9a2:	9002      	str	r0, [sp, #8]
 800e9a4:	9103      	str	r1, [sp, #12]
 800e9a6:	9a02      	ldr	r2, [sp, #8]
 800e9a8:	9b03      	ldr	r3, [sp, #12]
 800e9aa:	6930      	ldr	r0, [r6, #16]
 800e9ac:	6939      	ldr	r1, [r7, #16]
 800e9ae:	9e04      	ldr	r6, [sp, #16]
 800e9b0:	1a40      	subs	r0, r0, r1
 800e9b2:	9905      	ldr	r1, [sp, #20]
 800e9b4:	0140      	lsls	r0, r0, #5
 800e9b6:	1a71      	subs	r1, r6, r1
 800e9b8:	1841      	adds	r1, r0, r1
 800e9ba:	0508      	lsls	r0, r1, #20
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	dd07      	ble.n	800e9d0 <__ratio+0x4c>
 800e9c0:	9901      	ldr	r1, [sp, #4]
 800e9c2:	1845      	adds	r5, r0, r1
 800e9c4:	0020      	movs	r0, r4
 800e9c6:	0029      	movs	r1, r5
 800e9c8:	f7f2 fa56 	bl	8000e78 <__aeabi_ddiv>
 800e9cc:	b007      	add	sp, #28
 800e9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9d0:	9903      	ldr	r1, [sp, #12]
 800e9d2:	1a0b      	subs	r3, r1, r0
 800e9d4:	e7f6      	b.n	800e9c4 <__ratio+0x40>

0800e9d6 <__copybits>:
 800e9d6:	b570      	push	{r4, r5, r6, lr}
 800e9d8:	0014      	movs	r4, r2
 800e9da:	0005      	movs	r5, r0
 800e9dc:	3901      	subs	r1, #1
 800e9de:	6913      	ldr	r3, [r2, #16]
 800e9e0:	1149      	asrs	r1, r1, #5
 800e9e2:	3101      	adds	r1, #1
 800e9e4:	0089      	lsls	r1, r1, #2
 800e9e6:	3414      	adds	r4, #20
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	1841      	adds	r1, r0, r1
 800e9ec:	18e3      	adds	r3, r4, r3
 800e9ee:	42a3      	cmp	r3, r4
 800e9f0:	d80d      	bhi.n	800ea0e <__copybits+0x38>
 800e9f2:	0014      	movs	r4, r2
 800e9f4:	3411      	adds	r4, #17
 800e9f6:	2500      	movs	r5, #0
 800e9f8:	429c      	cmp	r4, r3
 800e9fa:	d803      	bhi.n	800ea04 <__copybits+0x2e>
 800e9fc:	1a9b      	subs	r3, r3, r2
 800e9fe:	3b11      	subs	r3, #17
 800ea00:	089b      	lsrs	r3, r3, #2
 800ea02:	009d      	lsls	r5, r3, #2
 800ea04:	2300      	movs	r3, #0
 800ea06:	1940      	adds	r0, r0, r5
 800ea08:	4281      	cmp	r1, r0
 800ea0a:	d803      	bhi.n	800ea14 <__copybits+0x3e>
 800ea0c:	bd70      	pop	{r4, r5, r6, pc}
 800ea0e:	cc40      	ldmia	r4!, {r6}
 800ea10:	c540      	stmia	r5!, {r6}
 800ea12:	e7ec      	b.n	800e9ee <__copybits+0x18>
 800ea14:	c008      	stmia	r0!, {r3}
 800ea16:	e7f7      	b.n	800ea08 <__copybits+0x32>

0800ea18 <__any_on>:
 800ea18:	0002      	movs	r2, r0
 800ea1a:	6900      	ldr	r0, [r0, #16]
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	3214      	adds	r2, #20
 800ea20:	114b      	asrs	r3, r1, #5
 800ea22:	4298      	cmp	r0, r3
 800ea24:	db13      	blt.n	800ea4e <__any_on+0x36>
 800ea26:	dd0c      	ble.n	800ea42 <__any_on+0x2a>
 800ea28:	241f      	movs	r4, #31
 800ea2a:	0008      	movs	r0, r1
 800ea2c:	4020      	ands	r0, r4
 800ea2e:	4221      	tst	r1, r4
 800ea30:	d007      	beq.n	800ea42 <__any_on+0x2a>
 800ea32:	0099      	lsls	r1, r3, #2
 800ea34:	588c      	ldr	r4, [r1, r2]
 800ea36:	0021      	movs	r1, r4
 800ea38:	40c1      	lsrs	r1, r0
 800ea3a:	4081      	lsls	r1, r0
 800ea3c:	2001      	movs	r0, #1
 800ea3e:	428c      	cmp	r4, r1
 800ea40:	d104      	bne.n	800ea4c <__any_on+0x34>
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	18d3      	adds	r3, r2, r3
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d803      	bhi.n	800ea52 <__any_on+0x3a>
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	0003      	movs	r3, r0
 800ea50:	e7f7      	b.n	800ea42 <__any_on+0x2a>
 800ea52:	3b04      	subs	r3, #4
 800ea54:	6819      	ldr	r1, [r3, #0]
 800ea56:	2900      	cmp	r1, #0
 800ea58:	d0f5      	beq.n	800ea46 <__any_on+0x2e>
 800ea5a:	2001      	movs	r0, #1
 800ea5c:	e7f6      	b.n	800ea4c <__any_on+0x34>

0800ea5e <__ascii_wctomb>:
 800ea5e:	0003      	movs	r3, r0
 800ea60:	1e08      	subs	r0, r1, #0
 800ea62:	d005      	beq.n	800ea70 <__ascii_wctomb+0x12>
 800ea64:	2aff      	cmp	r2, #255	; 0xff
 800ea66:	d904      	bls.n	800ea72 <__ascii_wctomb+0x14>
 800ea68:	228a      	movs	r2, #138	; 0x8a
 800ea6a:	2001      	movs	r0, #1
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	4240      	negs	r0, r0
 800ea70:	4770      	bx	lr
 800ea72:	2001      	movs	r0, #1
 800ea74:	700a      	strb	r2, [r1, #0]
 800ea76:	e7fb      	b.n	800ea70 <__ascii_wctomb+0x12>

0800ea78 <_svfprintf_r>:
 800ea78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7a:	b0d9      	sub	sp, #356	; 0x164
 800ea7c:	001c      	movs	r4, r3
 800ea7e:	910b      	str	r1, [sp, #44]	; 0x2c
 800ea80:	9208      	str	r2, [sp, #32]
 800ea82:	900a      	str	r0, [sp, #40]	; 0x28
 800ea84:	f002 fdae 	bl	80115e4 <_localeconv_r>
 800ea88:	6803      	ldr	r3, [r0, #0]
 800ea8a:	0018      	movs	r0, r3
 800ea8c:	931c      	str	r3, [sp, #112]	; 0x70
 800ea8e:	f7f1 fb39 	bl	8000104 <strlen>
 800ea92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea94:	9016      	str	r0, [sp, #88]	; 0x58
 800ea96:	899b      	ldrh	r3, [r3, #12]
 800ea98:	061b      	lsls	r3, r3, #24
 800ea9a:	d517      	bpl.n	800eacc <_svfprintf_r+0x54>
 800ea9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d113      	bne.n	800eacc <_svfprintf_r+0x54>
 800eaa4:	2140      	movs	r1, #64	; 0x40
 800eaa6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eaa8:	f7fd fa94 	bl	800bfd4 <_malloc_r>
 800eaac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaae:	6018      	str	r0, [r3, #0]
 800eab0:	6118      	str	r0, [r3, #16]
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d107      	bne.n	800eac6 <_svfprintf_r+0x4e>
 800eab6:	230c      	movs	r3, #12
 800eab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	3b0d      	subs	r3, #13
 800eabe:	9317      	str	r3, [sp, #92]	; 0x5c
 800eac0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800eac2:	b059      	add	sp, #356	; 0x164
 800eac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eac6:	2340      	movs	r3, #64	; 0x40
 800eac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eaca:	6153      	str	r3, [r2, #20]
 800eacc:	2300      	movs	r3, #0
 800eace:	2200      	movs	r2, #0
 800ead0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ead2:	932d      	str	r3, [sp, #180]	; 0xb4
 800ead4:	930e      	str	r3, [sp, #56]	; 0x38
 800ead6:	2300      	movs	r3, #0
 800ead8:	9214      	str	r2, [sp, #80]	; 0x50
 800eada:	9315      	str	r3, [sp, #84]	; 0x54
 800eadc:	2300      	movs	r3, #0
 800eade:	af2f      	add	r7, sp, #188	; 0xbc
 800eae0:	972c      	str	r7, [sp, #176]	; 0xb0
 800eae2:	931f      	str	r3, [sp, #124]	; 0x7c
 800eae4:	931e      	str	r3, [sp, #120]	; 0x78
 800eae6:	9312      	str	r3, [sp, #72]	; 0x48
 800eae8:	931b      	str	r3, [sp, #108]	; 0x6c
 800eaea:	931d      	str	r3, [sp, #116]	; 0x74
 800eaec:	9317      	str	r3, [sp, #92]	; 0x5c
 800eaee:	9d08      	ldr	r5, [sp, #32]
 800eaf0:	782b      	ldrb	r3, [r5, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <_svfprintf_r+0x84>
 800eaf6:	2b25      	cmp	r3, #37	; 0x25
 800eaf8:	d000      	beq.n	800eafc <_svfprintf_r+0x84>
 800eafa:	e091      	b.n	800ec20 <_svfprintf_r+0x1a8>
 800eafc:	9b08      	ldr	r3, [sp, #32]
 800eafe:	1aee      	subs	r6, r5, r3
 800eb00:	429d      	cmp	r5, r3
 800eb02:	d016      	beq.n	800eb32 <_svfprintf_r+0xba>
 800eb04:	603b      	str	r3, [r7, #0]
 800eb06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eb08:	607e      	str	r6, [r7, #4]
 800eb0a:	199b      	adds	r3, r3, r6
 800eb0c:	932e      	str	r3, [sp, #184]	; 0xb8
 800eb0e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb10:	3708      	adds	r7, #8
 800eb12:	3301      	adds	r3, #1
 800eb14:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb16:	2b07      	cmp	r3, #7
 800eb18:	dd08      	ble.n	800eb2c <_svfprintf_r+0xb4>
 800eb1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb1e:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb20:	f004 f83a 	bl	8012b98 <__ssprint_r>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d000      	beq.n	800eb2a <_svfprintf_r+0xb2>
 800eb28:	e1cf      	b.n	800eeca <_svfprintf_r+0x452>
 800eb2a:	af2f      	add	r7, sp, #188	; 0xbc
 800eb2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb2e:	199b      	adds	r3, r3, r6
 800eb30:	9317      	str	r3, [sp, #92]	; 0x5c
 800eb32:	782b      	ldrb	r3, [r5, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d101      	bne.n	800eb3c <_svfprintf_r+0xc4>
 800eb38:	f001 f99e 	bl	800fe78 <_svfprintf_r+0x1400>
 800eb3c:	221b      	movs	r2, #27
 800eb3e:	2300      	movs	r3, #0
 800eb40:	a91e      	add	r1, sp, #120	; 0x78
 800eb42:	1852      	adds	r2, r2, r1
 800eb44:	7013      	strb	r3, [r2, #0]
 800eb46:	2201      	movs	r2, #1
 800eb48:	001e      	movs	r6, r3
 800eb4a:	4252      	negs	r2, r2
 800eb4c:	3501      	adds	r5, #1
 800eb4e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb50:	9318      	str	r3, [sp, #96]	; 0x60
 800eb52:	1c6b      	adds	r3, r5, #1
 800eb54:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb56:	782b      	ldrb	r3, [r5, #0]
 800eb58:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eb5c:	3820      	subs	r0, #32
 800eb5e:	285a      	cmp	r0, #90	; 0x5a
 800eb60:	d901      	bls.n	800eb66 <_svfprintf_r+0xee>
 800eb62:	f000 fe20 	bl	800f7a6 <_svfprintf_r+0xd2e>
 800eb66:	f7f1 fadf 	bl	8000128 <__gnu_thumb1_case_uhi>
 800eb6a:	0078      	.short	0x0078
 800eb6c:	061e061e 	.word	0x061e061e
 800eb70:	061e0082 	.word	0x061e0082
 800eb74:	061e061e 	.word	0x061e061e
 800eb78:	061e005d 	.word	0x061e005d
 800eb7c:	0084061e 	.word	0x0084061e
 800eb80:	061e008c 	.word	0x061e008c
 800eb84:	0091008a 	.word	0x0091008a
 800eb88:	00b2061e 	.word	0x00b2061e
 800eb8c:	00b400b4 	.word	0x00b400b4
 800eb90:	00b400b4 	.word	0x00b400b4
 800eb94:	00b400b4 	.word	0x00b400b4
 800eb98:	00b400b4 	.word	0x00b400b4
 800eb9c:	061e00b4 	.word	0x061e00b4
 800eba0:	061e061e 	.word	0x061e061e
 800eba4:	061e061e 	.word	0x061e061e
 800eba8:	061e061e 	.word	0x061e061e
 800ebac:	061e013b 	.word	0x061e013b
 800ebb0:	00f400e0 	.word	0x00f400e0
 800ebb4:	013b013b 	.word	0x013b013b
 800ebb8:	061e013b 	.word	0x061e013b
 800ebbc:	061e061e 	.word	0x061e061e
 800ebc0:	00c7061e 	.word	0x00c7061e
 800ebc4:	061e061e 	.word	0x061e061e
 800ebc8:	061e04c7 	.word	0x061e04c7
 800ebcc:	061e061e 	.word	0x061e061e
 800ebd0:	061e050a 	.word	0x061e050a
 800ebd4:	061e052a 	.word	0x061e052a
 800ebd8:	055c061e 	.word	0x055c061e
 800ebdc:	061e061e 	.word	0x061e061e
 800ebe0:	061e061e 	.word	0x061e061e
 800ebe4:	061e061e 	.word	0x061e061e
 800ebe8:	061e061e 	.word	0x061e061e
 800ebec:	061e013b 	.word	0x061e013b
 800ebf0:	00f600e0 	.word	0x00f600e0
 800ebf4:	013b013b 	.word	0x013b013b
 800ebf8:	00c9013b 	.word	0x00c9013b
 800ebfc:	00dc00f6 	.word	0x00dc00f6
 800ec00:	00d5061e 	.word	0x00d5061e
 800ec04:	04a7061e 	.word	0x04a7061e
 800ec08:	04fa04c9 	.word	0x04fa04c9
 800ec0c:	061e00dc 	.word	0x061e00dc
 800ec10:	0080050a 	.word	0x0080050a
 800ec14:	061e052c 	.word	0x061e052c
 800ec18:	057c061e 	.word	0x057c061e
 800ec1c:	0080061e 	.word	0x0080061e
 800ec20:	3501      	adds	r5, #1
 800ec22:	e765      	b.n	800eaf0 <_svfprintf_r+0x78>
 800ec24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec26:	f002 fcdd 	bl	80115e4 <_localeconv_r>
 800ec2a:	6843      	ldr	r3, [r0, #4]
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	931d      	str	r3, [sp, #116]	; 0x74
 800ec30:	f7f1 fa68 	bl	8000104 <strlen>
 800ec34:	901b      	str	r0, [sp, #108]	; 0x6c
 800ec36:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec38:	f002 fcd4 	bl	80115e4 <_localeconv_r>
 800ec3c:	6883      	ldr	r3, [r0, #8]
 800ec3e:	9312      	str	r3, [sp, #72]	; 0x48
 800ec40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d011      	beq.n	800ec6a <_svfprintf_r+0x1f2>
 800ec46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00e      	beq.n	800ec6a <_svfprintf_r+0x1f2>
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00b      	beq.n	800ec6a <_svfprintf_r+0x1f2>
 800ec52:	2380      	movs	r3, #128	; 0x80
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	431e      	orrs	r6, r3
 800ec58:	e007      	b.n	800ec6a <_svfprintf_r+0x1f2>
 800ec5a:	231b      	movs	r3, #27
 800ec5c:	aa1e      	add	r2, sp, #120	; 0x78
 800ec5e:	189b      	adds	r3, r3, r2
 800ec60:	781a      	ldrb	r2, [r3, #0]
 800ec62:	2a00      	cmp	r2, #0
 800ec64:	d101      	bne.n	800ec6a <_svfprintf_r+0x1f2>
 800ec66:	3220      	adds	r2, #32
 800ec68:	701a      	strb	r2, [r3, #0]
 800ec6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ec6c:	e771      	b.n	800eb52 <_svfprintf_r+0xda>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e7f1      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ec72:	cc08      	ldmia	r4!, {r3}
 800ec74:	9318      	str	r3, [sp, #96]	; 0x60
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	daf7      	bge.n	800ec6a <_svfprintf_r+0x1f2>
 800ec7a:	425b      	negs	r3, r3
 800ec7c:	9318      	str	r3, [sp, #96]	; 0x60
 800ec7e:	2304      	movs	r3, #4
 800ec80:	e7e9      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ec82:	231b      	movs	r3, #27
 800ec84:	aa1e      	add	r2, sp, #120	; 0x78
 800ec86:	189b      	adds	r3, r3, r2
 800ec88:	222b      	movs	r2, #43	; 0x2b
 800ec8a:	e7ed      	b.n	800ec68 <_svfprintf_r+0x1f0>
 800ec8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec90:	7812      	ldrb	r2, [r2, #0]
 800ec92:	3301      	adds	r3, #1
 800ec94:	920f      	str	r2, [sp, #60]	; 0x3c
 800ec96:	2a2a      	cmp	r2, #42	; 0x2a
 800ec98:	d010      	beq.n	800ecbc <_svfprintf_r+0x244>
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eca0:	9313      	str	r3, [sp, #76]	; 0x4c
 800eca2:	3a30      	subs	r2, #48	; 0x30
 800eca4:	2a09      	cmp	r2, #9
 800eca6:	d900      	bls.n	800ecaa <_svfprintf_r+0x232>
 800eca8:	e757      	b.n	800eb5a <_svfprintf_r+0xe2>
 800ecaa:	200a      	movs	r0, #10
 800ecac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ecae:	4341      	muls	r1, r0
 800ecb0:	188a      	adds	r2, r1, r2
 800ecb2:	9209      	str	r2, [sp, #36]	; 0x24
 800ecb4:	781a      	ldrb	r2, [r3, #0]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	920f      	str	r2, [sp, #60]	; 0x3c
 800ecba:	e7f0      	b.n	800ec9e <_svfprintf_r+0x226>
 800ecbc:	cc04      	ldmia	r4!, {r2}
 800ecbe:	9209      	str	r2, [sp, #36]	; 0x24
 800ecc0:	2a00      	cmp	r2, #0
 800ecc2:	da02      	bge.n	800ecca <_svfprintf_r+0x252>
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	4252      	negs	r2, r2
 800ecc8:	9209      	str	r2, [sp, #36]	; 0x24
 800ecca:	9313      	str	r3, [sp, #76]	; 0x4c
 800eccc:	e7cd      	b.n	800ec6a <_svfprintf_r+0x1f2>
 800ecce:	2380      	movs	r3, #128	; 0x80
 800ecd0:	e7c1      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecd6:	9218      	str	r2, [sp, #96]	; 0x60
 800ecd8:	210a      	movs	r1, #10
 800ecda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ecdc:	434a      	muls	r2, r1
 800ecde:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ece0:	3930      	subs	r1, #48	; 0x30
 800ece2:	188a      	adds	r2, r1, r2
 800ece4:	9218      	str	r2, [sp, #96]	; 0x60
 800ece6:	001a      	movs	r2, r3
 800ece8:	7812      	ldrb	r2, [r2, #0]
 800ecea:	3301      	adds	r3, #1
 800ecec:	920f      	str	r2, [sp, #60]	; 0x3c
 800ecee:	3a30      	subs	r2, #48	; 0x30
 800ecf0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ecf2:	2a09      	cmp	r2, #9
 800ecf4:	d9f0      	bls.n	800ecd8 <_svfprintf_r+0x260>
 800ecf6:	e730      	b.n	800eb5a <_svfprintf_r+0xe2>
 800ecf8:	2308      	movs	r3, #8
 800ecfa:	e7ac      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ecfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	2b68      	cmp	r3, #104	; 0x68
 800ed02:	d105      	bne.n	800ed10 <_svfprintf_r+0x298>
 800ed04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed06:	3301      	adds	r3, #1
 800ed08:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed0a:	2380      	movs	r3, #128	; 0x80
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	e7a2      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ed10:	2340      	movs	r3, #64	; 0x40
 800ed12:	e7a0      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ed14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b6c      	cmp	r3, #108	; 0x6c
 800ed1a:	d104      	bne.n	800ed26 <_svfprintf_r+0x2ae>
 800ed1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed1e:	3301      	adds	r3, #1
 800ed20:	9313      	str	r3, [sp, #76]	; 0x4c
 800ed22:	2320      	movs	r3, #32
 800ed24:	e797      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ed26:	2310      	movs	r3, #16
 800ed28:	e795      	b.n	800ec56 <_svfprintf_r+0x1de>
 800ed2a:	0021      	movs	r1, r4
 800ed2c:	c904      	ldmia	r1!, {r2}
 800ed2e:	ab3f      	add	r3, sp, #252	; 0xfc
 800ed30:	910d      	str	r1, [sp, #52]	; 0x34
 800ed32:	211b      	movs	r1, #27
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	2200      	movs	r2, #0
 800ed38:	a81e      	add	r0, sp, #120	; 0x78
 800ed3a:	1809      	adds	r1, r1, r0
 800ed3c:	700a      	strb	r2, [r1, #0]
 800ed3e:	920c      	str	r2, [sp, #48]	; 0x30
 800ed40:	3201      	adds	r2, #1
 800ed42:	9209      	str	r2, [sp, #36]	; 0x24
 800ed44:	2200      	movs	r2, #0
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	0015      	movs	r5, r2
 800ed4a:	9219      	str	r2, [sp, #100]	; 0x64
 800ed4c:	9210      	str	r2, [sp, #64]	; 0x40
 800ed4e:	9211      	str	r2, [sp, #68]	; 0x44
 800ed50:	e1f1      	b.n	800f136 <_svfprintf_r+0x6be>
 800ed52:	2310      	movs	r3, #16
 800ed54:	431e      	orrs	r6, r3
 800ed56:	06b3      	lsls	r3, r6, #26
 800ed58:	d531      	bpl.n	800edbe <_svfprintf_r+0x346>
 800ed5a:	2307      	movs	r3, #7
 800ed5c:	3407      	adds	r4, #7
 800ed5e:	439c      	bics	r4, r3
 800ed60:	0022      	movs	r2, r4
 800ed62:	ca18      	ldmia	r2!, {r3, r4}
 800ed64:	9306      	str	r3, [sp, #24]
 800ed66:	9407      	str	r4, [sp, #28]
 800ed68:	920d      	str	r2, [sp, #52]	; 0x34
 800ed6a:	9a07      	ldr	r2, [sp, #28]
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	da0b      	bge.n	800ed8a <_svfprintf_r+0x312>
 800ed72:	9c06      	ldr	r4, [sp, #24]
 800ed74:	9d07      	ldr	r5, [sp, #28]
 800ed76:	2200      	movs	r2, #0
 800ed78:	4261      	negs	r1, r4
 800ed7a:	41aa      	sbcs	r2, r5
 800ed7c:	9106      	str	r1, [sp, #24]
 800ed7e:	9207      	str	r2, [sp, #28]
 800ed80:	221b      	movs	r2, #27
 800ed82:	a91e      	add	r1, sp, #120	; 0x78
 800ed84:	1852      	adds	r2, r2, r1
 800ed86:	212d      	movs	r1, #45	; 0x2d
 800ed88:	7011      	strb	r1, [r2, #0]
 800ed8a:	9907      	ldr	r1, [sp, #28]
 800ed8c:	9a06      	ldr	r2, [sp, #24]
 800ed8e:	430a      	orrs	r2, r1
 800ed90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed92:	3101      	adds	r1, #1
 800ed94:	d101      	bne.n	800ed9a <_svfprintf_r+0x322>
 800ed96:	f001 f87b 	bl	800fe90 <_svfprintf_r+0x1418>
 800ed9a:	2180      	movs	r1, #128	; 0x80
 800ed9c:	0034      	movs	r4, r6
 800ed9e:	438c      	bics	r4, r1
 800eda0:	2a00      	cmp	r2, #0
 800eda2:	d001      	beq.n	800eda8 <_svfprintf_r+0x330>
 800eda4:	f001 f879 	bl	800fe9a <_svfprintf_r+0x1422>
 800eda8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edaa:	2a00      	cmp	r2, #0
 800edac:	d101      	bne.n	800edb2 <_svfprintf_r+0x33a>
 800edae:	f000 fcef 	bl	800f790 <_svfprintf_r+0xd18>
 800edb2:	2b01      	cmp	r3, #1
 800edb4:	d001      	beq.n	800edba <_svfprintf_r+0x342>
 800edb6:	f001 f874 	bl	800fea2 <_svfprintf_r+0x142a>
 800edba:	f000 fc79 	bl	800f6b0 <_svfprintf_r+0xc38>
 800edbe:	0022      	movs	r2, r4
 800edc0:	ca08      	ldmia	r2!, {r3}
 800edc2:	920d      	str	r2, [sp, #52]	; 0x34
 800edc4:	06f2      	lsls	r2, r6, #27
 800edc6:	d503      	bpl.n	800edd0 <_svfprintf_r+0x358>
 800edc8:	9306      	str	r3, [sp, #24]
 800edca:	17db      	asrs	r3, r3, #31
 800edcc:	9307      	str	r3, [sp, #28]
 800edce:	e7cc      	b.n	800ed6a <_svfprintf_r+0x2f2>
 800edd0:	0672      	lsls	r2, r6, #25
 800edd2:	d501      	bpl.n	800edd8 <_svfprintf_r+0x360>
 800edd4:	b21b      	sxth	r3, r3
 800edd6:	e7f7      	b.n	800edc8 <_svfprintf_r+0x350>
 800edd8:	05b2      	lsls	r2, r6, #22
 800edda:	d5f5      	bpl.n	800edc8 <_svfprintf_r+0x350>
 800eddc:	b25b      	sxtb	r3, r3
 800edde:	e7f3      	b.n	800edc8 <_svfprintf_r+0x350>
 800ede0:	2307      	movs	r3, #7
 800ede2:	3407      	adds	r4, #7
 800ede4:	439c      	bics	r4, r3
 800ede6:	0022      	movs	r2, r4
 800ede8:	ca18      	ldmia	r2!, {r3, r4}
 800edea:	920d      	str	r2, [sp, #52]	; 0x34
 800edec:	2201      	movs	r2, #1
 800edee:	9314      	str	r3, [sp, #80]	; 0x50
 800edf0:	9415      	str	r4, [sp, #84]	; 0x54
 800edf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edf4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800edf6:	005c      	lsls	r4, r3, #1
 800edf8:	0864      	lsrs	r4, r4, #1
 800edfa:	0028      	movs	r0, r5
 800edfc:	0021      	movs	r1, r4
 800edfe:	4b3e      	ldr	r3, [pc, #248]	; (800eef8 <_svfprintf_r+0x480>)
 800ee00:	4252      	negs	r2, r2
 800ee02:	f7f3 fa77 	bl	80022f4 <__aeabi_dcmpun>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d126      	bne.n	800ee58 <_svfprintf_r+0x3e0>
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	0028      	movs	r0, r5
 800ee0e:	0021      	movs	r1, r4
 800ee10:	4b39      	ldr	r3, [pc, #228]	; (800eef8 <_svfprintf_r+0x480>)
 800ee12:	4252      	negs	r2, r2
 800ee14:	f7f1 fb28 	bl	8000468 <__aeabi_dcmple>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d11d      	bne.n	800ee58 <_svfprintf_r+0x3e0>
 800ee1c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ee1e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ee20:	2200      	movs	r2, #0
 800ee22:	2300      	movs	r3, #0
 800ee24:	f7f1 fb16 	bl	8000454 <__aeabi_dcmplt>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d004      	beq.n	800ee36 <_svfprintf_r+0x3be>
 800ee2c:	231b      	movs	r3, #27
 800ee2e:	aa1e      	add	r2, sp, #120	; 0x78
 800ee30:	189b      	adds	r3, r3, r2
 800ee32:	222d      	movs	r2, #45	; 0x2d
 800ee34:	701a      	strb	r2, [r3, #0]
 800ee36:	4b31      	ldr	r3, [pc, #196]	; (800eefc <_svfprintf_r+0x484>)
 800ee38:	9308      	str	r3, [sp, #32]
 800ee3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee3c:	2b47      	cmp	r3, #71	; 0x47
 800ee3e:	dd01      	ble.n	800ee44 <_svfprintf_r+0x3cc>
 800ee40:	4b2f      	ldr	r3, [pc, #188]	; (800ef00 <_svfprintf_r+0x488>)
 800ee42:	9308      	str	r3, [sp, #32]
 800ee44:	2380      	movs	r3, #128	; 0x80
 800ee46:	439e      	bics	r6, r3
 800ee48:	2300      	movs	r3, #0
 800ee4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee4c:	3303      	adds	r3, #3
 800ee4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee50:	2300      	movs	r3, #0
 800ee52:	9319      	str	r3, [sp, #100]	; 0x64
 800ee54:	f000 fc78 	bl	800f748 <_svfprintf_r+0xcd0>
 800ee58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee5c:	0010      	movs	r0, r2
 800ee5e:	0019      	movs	r1, r3
 800ee60:	f7f3 fa48 	bl	80022f4 <__aeabi_dcmpun>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	d00e      	beq.n	800ee86 <_svfprintf_r+0x40e>
 800ee68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	da04      	bge.n	800ee78 <_svfprintf_r+0x400>
 800ee6e:	231b      	movs	r3, #27
 800ee70:	aa1e      	add	r2, sp, #120	; 0x78
 800ee72:	189b      	adds	r3, r3, r2
 800ee74:	222d      	movs	r2, #45	; 0x2d
 800ee76:	701a      	strb	r2, [r3, #0]
 800ee78:	4b22      	ldr	r3, [pc, #136]	; (800ef04 <_svfprintf_r+0x48c>)
 800ee7a:	9308      	str	r3, [sp, #32]
 800ee7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee7e:	2b47      	cmp	r3, #71	; 0x47
 800ee80:	dde0      	ble.n	800ee44 <_svfprintf_r+0x3cc>
 800ee82:	4b21      	ldr	r3, [pc, #132]	; (800ef08 <_svfprintf_r+0x490>)
 800ee84:	e7dd      	b.n	800ee42 <_svfprintf_r+0x3ca>
 800ee86:	2320      	movs	r3, #32
 800ee88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee8a:	439a      	bics	r2, r3
 800ee8c:	9210      	str	r2, [sp, #64]	; 0x40
 800ee8e:	2a41      	cmp	r2, #65	; 0x41
 800ee90:	d123      	bne.n	800eeda <_svfprintf_r+0x462>
 800ee92:	2230      	movs	r2, #48	; 0x30
 800ee94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee96:	ab25      	add	r3, sp, #148	; 0x94
 800ee98:	701a      	strb	r2, [r3, #0]
 800ee9a:	3248      	adds	r2, #72	; 0x48
 800ee9c:	2961      	cmp	r1, #97	; 0x61
 800ee9e:	d000      	beq.n	800eea2 <_svfprintf_r+0x42a>
 800eea0:	3a20      	subs	r2, #32
 800eea2:	705a      	strb	r2, [r3, #1]
 800eea4:	2302      	movs	r3, #2
 800eea6:	431e      	orrs	r6, r3
 800eea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeaa:	2b63      	cmp	r3, #99	; 0x63
 800eeac:	dd2e      	ble.n	800ef0c <_svfprintf_r+0x494>
 800eeae:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eeb0:	1c59      	adds	r1, r3, #1
 800eeb2:	f7fd f88f 	bl	800bfd4 <_malloc_r>
 800eeb6:	9008      	str	r0, [sp, #32]
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d000      	beq.n	800eebe <_svfprintf_r+0x446>
 800eebc:	e216      	b.n	800f2ec <_svfprintf_r+0x874>
 800eebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eec0:	899a      	ldrh	r2, [r3, #12]
 800eec2:	2340      	movs	r3, #64	; 0x40
 800eec4:	4313      	orrs	r3, r2
 800eec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eec8:	8193      	strh	r3, [r2, #12]
 800eeca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eecc:	899b      	ldrh	r3, [r3, #12]
 800eece:	065b      	lsls	r3, r3, #25
 800eed0:	d400      	bmi.n	800eed4 <_svfprintf_r+0x45c>
 800eed2:	e5f5      	b.n	800eac0 <_svfprintf_r+0x48>
 800eed4:	2301      	movs	r3, #1
 800eed6:	425b      	negs	r3, r3
 800eed8:	e5f1      	b.n	800eabe <_svfprintf_r+0x46>
 800eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eedc:	900c      	str	r0, [sp, #48]	; 0x30
 800eede:	3301      	adds	r3, #1
 800eee0:	d100      	bne.n	800eee4 <_svfprintf_r+0x46c>
 800eee2:	e206      	b.n	800f2f2 <_svfprintf_r+0x87a>
 800eee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eee6:	2b47      	cmp	r3, #71	; 0x47
 800eee8:	d114      	bne.n	800ef14 <_svfprintf_r+0x49c>
 800eeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d111      	bne.n	800ef14 <_svfprintf_r+0x49c>
 800eef0:	3301      	adds	r3, #1
 800eef2:	9309      	str	r3, [sp, #36]	; 0x24
 800eef4:	e00e      	b.n	800ef14 <_svfprintf_r+0x49c>
 800eef6:	46c0      	nop			; (mov r8, r8)
 800eef8:	7fefffff 	.word	0x7fefffff
 800eefc:	08016044 	.word	0x08016044
 800ef00:	08016048 	.word	0x08016048
 800ef04:	0801604c 	.word	0x0801604c
 800ef08:	08016050 	.word	0x08016050
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ef10:	ab3f      	add	r3, sp, #252	; 0xfc
 800ef12:	9308      	str	r3, [sp, #32]
 800ef14:	2380      	movs	r3, #128	; 0x80
 800ef16:	005b      	lsls	r3, r3, #1
 800ef18:	4333      	orrs	r3, r6
 800ef1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	db00      	blt.n	800ef26 <_svfprintf_r+0x4ae>
 800ef24:	e1e7      	b.n	800f2f6 <_svfprintf_r+0x87e>
 800ef26:	2280      	movs	r2, #128	; 0x80
 800ef28:	0612      	lsls	r2, r2, #24
 800ef2a:	4694      	mov	ip, r2
 800ef2c:	4463      	add	r3, ip
 800ef2e:	930e      	str	r3, [sp, #56]	; 0x38
 800ef30:	232d      	movs	r3, #45	; 0x2d
 800ef32:	9322      	str	r3, [sp, #136]	; 0x88
 800ef34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef36:	2b41      	cmp	r3, #65	; 0x41
 800ef38:	d000      	beq.n	800ef3c <_svfprintf_r+0x4c4>
 800ef3a:	e1f5      	b.n	800f328 <_svfprintf_r+0x8b0>
 800ef3c:	0028      	movs	r0, r5
 800ef3e:	aa26      	add	r2, sp, #152	; 0x98
 800ef40:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ef42:	f002 fb73 	bl	801162c <frexp>
 800ef46:	23ff      	movs	r3, #255	; 0xff
 800ef48:	2200      	movs	r2, #0
 800ef4a:	059b      	lsls	r3, r3, #22
 800ef4c:	f7f2 fb8e 	bl	800166c <__aeabi_dmul>
 800ef50:	2200      	movs	r2, #0
 800ef52:	2300      	movs	r3, #0
 800ef54:	0004      	movs	r4, r0
 800ef56:	000d      	movs	r5, r1
 800ef58:	f7f1 fa76 	bl	8000448 <__aeabi_dcmpeq>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d001      	beq.n	800ef64 <_svfprintf_r+0x4ec>
 800ef60:	2301      	movs	r3, #1
 800ef62:	9326      	str	r3, [sp, #152]	; 0x98
 800ef64:	4bda      	ldr	r3, [pc, #872]	; (800f2d0 <_svfprintf_r+0x858>)
 800ef66:	9319      	str	r3, [sp, #100]	; 0x64
 800ef68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef6a:	2b61      	cmp	r3, #97	; 0x61
 800ef6c:	d001      	beq.n	800ef72 <_svfprintf_r+0x4fa>
 800ef6e:	4bd9      	ldr	r3, [pc, #868]	; (800f2d4 <_svfprintf_r+0x85c>)
 800ef70:	9319      	str	r3, [sp, #100]	; 0x64
 800ef72:	9b08      	ldr	r3, [sp, #32]
 800ef74:	930e      	str	r3, [sp, #56]	; 0x38
 800ef76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	9311      	str	r3, [sp, #68]	; 0x44
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	4bd6      	ldr	r3, [pc, #856]	; (800f2d8 <_svfprintf_r+0x860>)
 800ef80:	0020      	movs	r0, r4
 800ef82:	0029      	movs	r1, r5
 800ef84:	f7f2 fb72 	bl	800166c <__aeabi_dmul>
 800ef88:	000d      	movs	r5, r1
 800ef8a:	0004      	movs	r4, r0
 800ef8c:	f7f3 f9d0 	bl	8002330 <__aeabi_d2iz>
 800ef90:	9021      	str	r0, [sp, #132]	; 0x84
 800ef92:	f7f3 fa03 	bl	800239c <__aeabi_i2d>
 800ef96:	0002      	movs	r2, r0
 800ef98:	000b      	movs	r3, r1
 800ef9a:	0020      	movs	r0, r4
 800ef9c:	0029      	movs	r1, r5
 800ef9e:	f7f2 fe27 	bl	8001bf0 <__aeabi_dsub>
 800efa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800efa4:	000d      	movs	r5, r1
 800efa6:	001a      	movs	r2, r3
 800efa8:	3201      	adds	r2, #1
 800efaa:	9921      	ldr	r1, [sp, #132]	; 0x84
 800efac:	920e      	str	r2, [sp, #56]	; 0x38
 800efae:	9223      	str	r2, [sp, #140]	; 0x8c
 800efb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800efb2:	0004      	movs	r4, r0
 800efb4:	5c52      	ldrb	r2, [r2, r1]
 800efb6:	701a      	strb	r2, [r3, #0]
 800efb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efba:	9320      	str	r3, [sp, #128]	; 0x80
 800efbc:	3301      	adds	r3, #1
 800efbe:	d00a      	beq.n	800efd6 <_svfprintf_r+0x55e>
 800efc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efc2:	2200      	movs	r2, #0
 800efc4:	3b01      	subs	r3, #1
 800efc6:	9311      	str	r3, [sp, #68]	; 0x44
 800efc8:	0020      	movs	r0, r4
 800efca:	2300      	movs	r3, #0
 800efcc:	0029      	movs	r1, r5
 800efce:	f7f1 fa3b 	bl	8000448 <__aeabi_dcmpeq>
 800efd2:	2800      	cmp	r0, #0
 800efd4:	d0d2      	beq.n	800ef7c <_svfprintf_r+0x504>
 800efd6:	2200      	movs	r2, #0
 800efd8:	0020      	movs	r0, r4
 800efda:	0029      	movs	r1, r5
 800efdc:	4bbf      	ldr	r3, [pc, #764]	; (800f2dc <_svfprintf_r+0x864>)
 800efde:	f7f1 fa4d 	bl	800047c <__aeabi_dcmpgt>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d10c      	bne.n	800f000 <_svfprintf_r+0x588>
 800efe6:	2200      	movs	r2, #0
 800efe8:	0020      	movs	r0, r4
 800efea:	0029      	movs	r1, r5
 800efec:	4bbb      	ldr	r3, [pc, #748]	; (800f2dc <_svfprintf_r+0x864>)
 800efee:	f7f1 fa2b 	bl	8000448 <__aeabi_dcmpeq>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d100      	bne.n	800eff8 <_svfprintf_r+0x580>
 800eff6:	e191      	b.n	800f31c <_svfprintf_r+0x8a4>
 800eff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800effa:	07db      	lsls	r3, r3, #31
 800effc:	d400      	bmi.n	800f000 <_svfprintf_r+0x588>
 800effe:	e18d      	b.n	800f31c <_svfprintf_r+0x8a4>
 800f000:	2030      	movs	r0, #48	; 0x30
 800f002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f004:	932a      	str	r3, [sp, #168]	; 0xa8
 800f006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f008:	7bdb      	ldrb	r3, [r3, #15]
 800f00a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800f00c:	3a01      	subs	r2, #1
 800f00e:	922a      	str	r2, [sp, #168]	; 0xa8
 800f010:	7811      	ldrb	r1, [r2, #0]
 800f012:	4299      	cmp	r1, r3
 800f014:	d100      	bne.n	800f018 <_svfprintf_r+0x5a0>
 800f016:	e171      	b.n	800f2fc <_svfprintf_r+0x884>
 800f018:	1c4b      	adds	r3, r1, #1
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2939      	cmp	r1, #57	; 0x39
 800f01e:	d101      	bne.n	800f024 <_svfprintf_r+0x5ac>
 800f020:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f022:	7a9b      	ldrb	r3, [r3, #10]
 800f024:	7013      	strb	r3, [r2, #0]
 800f026:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f028:	9a08      	ldr	r2, [sp, #32]
 800f02a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800f02c:	1a9b      	subs	r3, r3, r2
 800f02e:	930e      	str	r3, [sp, #56]	; 0x38
 800f030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f032:	2b47      	cmp	r3, #71	; 0x47
 800f034:	d000      	beq.n	800f038 <_svfprintf_r+0x5c0>
 800f036:	e1c4      	b.n	800f3c2 <_svfprintf_r+0x94a>
 800f038:	1ceb      	adds	r3, r5, #3
 800f03a:	db03      	blt.n	800f044 <_svfprintf_r+0x5cc>
 800f03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f03e:	42ab      	cmp	r3, r5
 800f040:	db00      	blt.n	800f044 <_svfprintf_r+0x5cc>
 800f042:	e1e6      	b.n	800f412 <_svfprintf_r+0x99a>
 800f044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f046:	3b02      	subs	r3, #2
 800f048:	930f      	str	r3, [sp, #60]	; 0x3c
 800f04a:	223c      	movs	r2, #60	; 0x3c
 800f04c:	466b      	mov	r3, sp
 800f04e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f050:	189b      	adds	r3, r3, r2
 800f052:	1e6c      	subs	r4, r5, #1
 800f054:	3a1c      	subs	r2, #28
 800f056:	2000      	movs	r0, #0
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	9426      	str	r4, [sp, #152]	; 0x98
 800f05c:	4391      	bics	r1, r2
 800f05e:	2941      	cmp	r1, #65	; 0x41
 800f060:	d102      	bne.n	800f068 <_svfprintf_r+0x5f0>
 800f062:	330f      	adds	r3, #15
 800f064:	b2db      	uxtb	r3, r3
 800f066:	3001      	adds	r0, #1
 800f068:	a928      	add	r1, sp, #160	; 0xa0
 800f06a:	700b      	strb	r3, [r1, #0]
 800f06c:	232b      	movs	r3, #43	; 0x2b
 800f06e:	2c00      	cmp	r4, #0
 800f070:	da02      	bge.n	800f078 <_svfprintf_r+0x600>
 800f072:	2401      	movs	r4, #1
 800f074:	3302      	adds	r3, #2
 800f076:	1b64      	subs	r4, r4, r5
 800f078:	704b      	strb	r3, [r1, #1]
 800f07a:	2c09      	cmp	r4, #9
 800f07c:	dc00      	bgt.n	800f080 <_svfprintf_r+0x608>
 800f07e:	e1ba      	b.n	800f3f6 <_svfprintf_r+0x97e>
 800f080:	2337      	movs	r3, #55	; 0x37
 800f082:	250a      	movs	r5, #10
 800f084:	aa1e      	add	r2, sp, #120	; 0x78
 800f086:	189b      	adds	r3, r3, r2
 800f088:	9310      	str	r3, [sp, #64]	; 0x40
 800f08a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f08c:	0020      	movs	r0, r4
 800f08e:	9309      	str	r3, [sp, #36]	; 0x24
 800f090:	0029      	movs	r1, r5
 800f092:	3b01      	subs	r3, #1
 800f094:	9310      	str	r3, [sp, #64]	; 0x40
 800f096:	f7f1 f9c1 	bl	800041c <__aeabi_idivmod>
 800f09a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f09c:	3130      	adds	r1, #48	; 0x30
 800f09e:	7019      	strb	r1, [r3, #0]
 800f0a0:	0020      	movs	r0, r4
 800f0a2:	0029      	movs	r1, r5
 800f0a4:	9411      	str	r4, [sp, #68]	; 0x44
 800f0a6:	f7f1 f8d3 	bl	8000250 <__divsi3>
 800f0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0ac:	0004      	movs	r4, r0
 800f0ae:	2b63      	cmp	r3, #99	; 0x63
 800f0b0:	dceb      	bgt.n	800f08a <_svfprintf_r+0x612>
 800f0b2:	222a      	movs	r2, #42	; 0x2a
 800f0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b6:	a81e      	add	r0, sp, #120	; 0x78
 800f0b8:	1e99      	subs	r1, r3, #2
 800f0ba:	1812      	adds	r2, r2, r0
 800f0bc:	2037      	movs	r0, #55	; 0x37
 800f0be:	000b      	movs	r3, r1
 800f0c0:	3430      	adds	r4, #48	; 0x30
 800f0c2:	700c      	strb	r4, [r1, #0]
 800f0c4:	ac1e      	add	r4, sp, #120	; 0x78
 800f0c6:	1900      	adds	r0, r0, r4
 800f0c8:	4283      	cmp	r3, r0
 800f0ca:	d200      	bcs.n	800f0ce <_svfprintf_r+0x656>
 800f0cc:	e18e      	b.n	800f3ec <_svfprintf_r+0x974>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4281      	cmp	r1, r0
 800f0d2:	d804      	bhi.n	800f0de <_svfprintf_r+0x666>
 800f0d4:	aa1e      	add	r2, sp, #120	; 0x78
 800f0d6:	3339      	adds	r3, #57	; 0x39
 800f0d8:	189b      	adds	r3, r3, r2
 800f0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0dc:	1a9b      	subs	r3, r3, r2
 800f0de:	222a      	movs	r2, #42	; 0x2a
 800f0e0:	a91e      	add	r1, sp, #120	; 0x78
 800f0e2:	1852      	adds	r2, r2, r1
 800f0e4:	18d3      	adds	r3, r2, r3
 800f0e6:	aa28      	add	r2, sp, #160	; 0xa0
 800f0e8:	1a9b      	subs	r3, r3, r2
 800f0ea:	931e      	str	r3, [sp, #120]	; 0x78
 800f0ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0f0:	4694      	mov	ip, r2
 800f0f2:	4463      	add	r3, ip
 800f0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	dc01      	bgt.n	800f100 <_svfprintf_r+0x688>
 800f0fc:	07f3      	lsls	r3, r6, #31
 800f0fe:	d504      	bpl.n	800f10a <_svfprintf_r+0x692>
 800f100:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f104:	4694      	mov	ip, r2
 800f106:	4463      	add	r3, ip
 800f108:	9309      	str	r3, [sp, #36]	; 0x24
 800f10a:	2280      	movs	r2, #128	; 0x80
 800f10c:	4b74      	ldr	r3, [pc, #464]	; (800f2e0 <_svfprintf_r+0x868>)
 800f10e:	0052      	lsls	r2, r2, #1
 800f110:	4033      	ands	r3, r6
 800f112:	431a      	orrs	r2, r3
 800f114:	2300      	movs	r3, #0
 800f116:	001d      	movs	r5, r3
 800f118:	921a      	str	r2, [sp, #104]	; 0x68
 800f11a:	9310      	str	r3, [sp, #64]	; 0x40
 800f11c:	9311      	str	r3, [sp, #68]	; 0x44
 800f11e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f120:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f122:	9319      	str	r3, [sp, #100]	; 0x64
 800f124:	2b00      	cmp	r3, #0
 800f126:	d006      	beq.n	800f136 <_svfprintf_r+0x6be>
 800f128:	231b      	movs	r3, #27
 800f12a:	aa1e      	add	r2, sp, #120	; 0x78
 800f12c:	189b      	adds	r3, r3, r2
 800f12e:	222d      	movs	r2, #45	; 0x2d
 800f130:	701a      	strb	r2, [r3, #0]
 800f132:	2300      	movs	r3, #0
 800f134:	9319      	str	r3, [sp, #100]	; 0x64
 800f136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f13a:	931a      	str	r3, [sp, #104]	; 0x68
 800f13c:	4293      	cmp	r3, r2
 800f13e:	da00      	bge.n	800f142 <_svfprintf_r+0x6ca>
 800f140:	921a      	str	r2, [sp, #104]	; 0x68
 800f142:	231b      	movs	r3, #27
 800f144:	aa1e      	add	r2, sp, #120	; 0x78
 800f146:	189b      	adds	r3, r3, r2
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	1e5a      	subs	r2, r3, #1
 800f14c:	4193      	sbcs	r3, r2
 800f14e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f150:	18d3      	adds	r3, r2, r3
 800f152:	931a      	str	r3, [sp, #104]	; 0x68
 800f154:	0032      	movs	r2, r6
 800f156:	2302      	movs	r3, #2
 800f158:	401a      	ands	r2, r3
 800f15a:	9220      	str	r2, [sp, #128]	; 0x80
 800f15c:	421e      	tst	r6, r3
 800f15e:	d002      	beq.n	800f166 <_svfprintf_r+0x6ee>
 800f160:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f162:	3302      	adds	r3, #2
 800f164:	931a      	str	r3, [sp, #104]	; 0x68
 800f166:	2384      	movs	r3, #132	; 0x84
 800f168:	0032      	movs	r2, r6
 800f16a:	401a      	ands	r2, r3
 800f16c:	9221      	str	r2, [sp, #132]	; 0x84
 800f16e:	421e      	tst	r6, r3
 800f170:	d11f      	bne.n	800f1b2 <_svfprintf_r+0x73a>
 800f172:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f174:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f176:	1a9c      	subs	r4, r3, r2
 800f178:	2c00      	cmp	r4, #0
 800f17a:	dd1a      	ble.n	800f1b2 <_svfprintf_r+0x73a>
 800f17c:	0039      	movs	r1, r7
 800f17e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f180:	4858      	ldr	r0, [pc, #352]	; (800f2e4 <_svfprintf_r+0x86c>)
 800f182:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f184:	3301      	adds	r3, #1
 800f186:	3108      	adds	r1, #8
 800f188:	6038      	str	r0, [r7, #0]
 800f18a:	2c10      	cmp	r4, #16
 800f18c:	dd00      	ble.n	800f190 <_svfprintf_r+0x718>
 800f18e:	e31c      	b.n	800f7ca <_svfprintf_r+0xd52>
 800f190:	607c      	str	r4, [r7, #4]
 800f192:	18a4      	adds	r4, r4, r2
 800f194:	000f      	movs	r7, r1
 800f196:	942e      	str	r4, [sp, #184]	; 0xb8
 800f198:	932d      	str	r3, [sp, #180]	; 0xb4
 800f19a:	2b07      	cmp	r3, #7
 800f19c:	dd09      	ble.n	800f1b2 <_svfprintf_r+0x73a>
 800f19e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f1a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800f1a4:	f003 fcf8 	bl	8012b98 <__ssprint_r>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d001      	beq.n	800f1b0 <_svfprintf_r+0x738>
 800f1ac:	f000 fe43 	bl	800fe36 <_svfprintf_r+0x13be>
 800f1b0:	af2f      	add	r7, sp, #188	; 0xbc
 800f1b2:	221b      	movs	r2, #27
 800f1b4:	a91e      	add	r1, sp, #120	; 0x78
 800f1b6:	1852      	adds	r2, r2, r1
 800f1b8:	7811      	ldrb	r1, [r2, #0]
 800f1ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f1bc:	2900      	cmp	r1, #0
 800f1be:	d014      	beq.n	800f1ea <_svfprintf_r+0x772>
 800f1c0:	603a      	str	r2, [r7, #0]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	189b      	adds	r3, r3, r2
 800f1c6:	932e      	str	r3, [sp, #184]	; 0xb8
 800f1c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f1ca:	607a      	str	r2, [r7, #4]
 800f1cc:	189b      	adds	r3, r3, r2
 800f1ce:	932d      	str	r3, [sp, #180]	; 0xb4
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	2b07      	cmp	r3, #7
 800f1d4:	dd09      	ble.n	800f1ea <_svfprintf_r+0x772>
 800f1d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f1da:	aa2c      	add	r2, sp, #176	; 0xb0
 800f1dc:	f003 fcdc 	bl	8012b98 <__ssprint_r>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d001      	beq.n	800f1e8 <_svfprintf_r+0x770>
 800f1e4:	f000 fe27 	bl	800fe36 <_svfprintf_r+0x13be>
 800f1e8:	af2f      	add	r7, sp, #188	; 0xbc
 800f1ea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f1ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	d015      	beq.n	800f21e <_svfprintf_r+0x7a6>
 800f1f2:	aa25      	add	r2, sp, #148	; 0x94
 800f1f4:	603a      	str	r2, [r7, #0]
 800f1f6:	2202      	movs	r2, #2
 800f1f8:	189b      	adds	r3, r3, r2
 800f1fa:	932e      	str	r3, [sp, #184]	; 0xb8
 800f1fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	3301      	adds	r3, #1
 800f202:	932d      	str	r3, [sp, #180]	; 0xb4
 800f204:	3708      	adds	r7, #8
 800f206:	2b07      	cmp	r3, #7
 800f208:	dd09      	ble.n	800f21e <_svfprintf_r+0x7a6>
 800f20a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f20c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f20e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f210:	f003 fcc2 	bl	8012b98 <__ssprint_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	d001      	beq.n	800f21c <_svfprintf_r+0x7a4>
 800f218:	f000 fe0d 	bl	800fe36 <_svfprintf_r+0x13be>
 800f21c:	af2f      	add	r7, sp, #188	; 0xbc
 800f21e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f220:	2b80      	cmp	r3, #128	; 0x80
 800f222:	d11f      	bne.n	800f264 <_svfprintf_r+0x7ec>
 800f224:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f228:	1a9c      	subs	r4, r3, r2
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	dd1a      	ble.n	800f264 <_svfprintf_r+0x7ec>
 800f22e:	0039      	movs	r1, r7
 800f230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f232:	482d      	ldr	r0, [pc, #180]	; (800f2e8 <_svfprintf_r+0x870>)
 800f234:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f236:	3301      	adds	r3, #1
 800f238:	3108      	adds	r1, #8
 800f23a:	6038      	str	r0, [r7, #0]
 800f23c:	2c10      	cmp	r4, #16
 800f23e:	dd00      	ble.n	800f242 <_svfprintf_r+0x7ca>
 800f240:	e2d6      	b.n	800f7f0 <_svfprintf_r+0xd78>
 800f242:	607c      	str	r4, [r7, #4]
 800f244:	18a4      	adds	r4, r4, r2
 800f246:	000f      	movs	r7, r1
 800f248:	942e      	str	r4, [sp, #184]	; 0xb8
 800f24a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f24c:	2b07      	cmp	r3, #7
 800f24e:	dd09      	ble.n	800f264 <_svfprintf_r+0x7ec>
 800f250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f252:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f254:	aa2c      	add	r2, sp, #176	; 0xb0
 800f256:	f003 fc9f 	bl	8012b98 <__ssprint_r>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d001      	beq.n	800f262 <_svfprintf_r+0x7ea>
 800f25e:	f000 fdea 	bl	800fe36 <_svfprintf_r+0x13be>
 800f262:	af2f      	add	r7, sp, #188	; 0xbc
 800f264:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f268:	1a9c      	subs	r4, r3, r2
 800f26a:	2c00      	cmp	r4, #0
 800f26c:	dd1a      	ble.n	800f2a4 <_svfprintf_r+0x82c>
 800f26e:	0039      	movs	r1, r7
 800f270:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f272:	481d      	ldr	r0, [pc, #116]	; (800f2e8 <_svfprintf_r+0x870>)
 800f274:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f276:	3301      	adds	r3, #1
 800f278:	3108      	adds	r1, #8
 800f27a:	6038      	str	r0, [r7, #0]
 800f27c:	2c10      	cmp	r4, #16
 800f27e:	dd00      	ble.n	800f282 <_svfprintf_r+0x80a>
 800f280:	e2c9      	b.n	800f816 <_svfprintf_r+0xd9e>
 800f282:	18a2      	adds	r2, r4, r2
 800f284:	607c      	str	r4, [r7, #4]
 800f286:	922e      	str	r2, [sp, #184]	; 0xb8
 800f288:	000f      	movs	r7, r1
 800f28a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f28c:	2b07      	cmp	r3, #7
 800f28e:	dd09      	ble.n	800f2a4 <_svfprintf_r+0x82c>
 800f290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f292:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f294:	aa2c      	add	r2, sp, #176	; 0xb0
 800f296:	f003 fc7f 	bl	8012b98 <__ssprint_r>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d001      	beq.n	800f2a2 <_svfprintf_r+0x82a>
 800f29e:	f000 fdca 	bl	800fe36 <_svfprintf_r+0x13be>
 800f2a2:	af2f      	add	r7, sp, #188	; 0xbc
 800f2a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f2a6:	9319      	str	r3, [sp, #100]	; 0x64
 800f2a8:	05f3      	lsls	r3, r6, #23
 800f2aa:	d500      	bpl.n	800f2ae <_svfprintf_r+0x836>
 800f2ac:	e2ce      	b.n	800f84c <_svfprintf_r+0xdd4>
 800f2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2b0:	9b08      	ldr	r3, [sp, #32]
 800f2b2:	4694      	mov	ip, r2
 800f2b4:	603b      	str	r3, [r7, #0]
 800f2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b8:	607b      	str	r3, [r7, #4]
 800f2ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f2bc:	4463      	add	r3, ip
 800f2be:	932e      	str	r3, [sp, #184]	; 0xb8
 800f2c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f2c6:	2b07      	cmp	r3, #7
 800f2c8:	dd00      	ble.n	800f2cc <_svfprintf_r+0x854>
 800f2ca:	e3a3      	b.n	800fa14 <_svfprintf_r+0xf9c>
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	e301      	b.n	800f8d4 <_svfprintf_r+0xe5c>
 800f2d0:	08016054 	.word	0x08016054
 800f2d4:	08016065 	.word	0x08016065
 800f2d8:	40300000 	.word	0x40300000
 800f2dc:	3fe00000 	.word	0x3fe00000
 800f2e0:	fffffbff 	.word	0xfffffbff
 800f2e4:	08016078 	.word	0x08016078
 800f2e8:	08016088 	.word	0x08016088
 800f2ec:	9b08      	ldr	r3, [sp, #32]
 800f2ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f2f0:	e610      	b.n	800ef14 <_svfprintf_r+0x49c>
 800f2f2:	2306      	movs	r3, #6
 800f2f4:	e5fd      	b.n	800eef2 <_svfprintf_r+0x47a>
 800f2f6:	930e      	str	r3, [sp, #56]	; 0x38
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	e61a      	b.n	800ef32 <_svfprintf_r+0x4ba>
 800f2fc:	7010      	strb	r0, [r2, #0]
 800f2fe:	e684      	b.n	800f00a <_svfprintf_r+0x592>
 800f300:	7018      	strb	r0, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	1aca      	subs	r2, r1, r3
 800f306:	d5fb      	bpl.n	800f300 <_svfprintf_r+0x888>
 800f308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f30a:	2300      	movs	r3, #0
 800f30c:	3201      	adds	r2, #1
 800f30e:	db01      	blt.n	800f314 <_svfprintf_r+0x89c>
 800f310:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f312:	3301      	adds	r3, #1
 800f314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f316:	18d3      	adds	r3, r2, r3
 800f318:	9323      	str	r3, [sp, #140]	; 0x8c
 800f31a:	e684      	b.n	800f026 <_svfprintf_r+0x5ae>
 800f31c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f31e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f320:	2030      	movs	r0, #48	; 0x30
 800f322:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f324:	1851      	adds	r1, r2, r1
 800f326:	e7ed      	b.n	800f304 <_svfprintf_r+0x88c>
 800f328:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f32a:	2303      	movs	r3, #3
 800f32c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f32e:	2a46      	cmp	r2, #70	; 0x46
 800f330:	d006      	beq.n	800f340 <_svfprintf_r+0x8c8>
 800f332:	0014      	movs	r4, r2
 800f334:	3c45      	subs	r4, #69	; 0x45
 800f336:	4262      	negs	r2, r4
 800f338:	4154      	adcs	r4, r2
 800f33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f33c:	3b01      	subs	r3, #1
 800f33e:	1914      	adds	r4, r2, r4
 800f340:	aa2a      	add	r2, sp, #168	; 0xa8
 800f342:	9204      	str	r2, [sp, #16]
 800f344:	aa27      	add	r2, sp, #156	; 0x9c
 800f346:	9203      	str	r2, [sp, #12]
 800f348:	aa26      	add	r2, sp, #152	; 0x98
 800f34a:	9202      	str	r2, [sp, #8]
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	002a      	movs	r2, r5
 800f350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f352:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f354:	9401      	str	r4, [sp, #4]
 800f356:	f002 fad7 	bl	8011908 <_dtoa_r>
 800f35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f35c:	9008      	str	r0, [sp, #32]
 800f35e:	2b47      	cmp	r3, #71	; 0x47
 800f360:	d103      	bne.n	800f36a <_svfprintf_r+0x8f2>
 800f362:	07f3      	lsls	r3, r6, #31
 800f364:	d401      	bmi.n	800f36a <_svfprintf_r+0x8f2>
 800f366:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f368:	e65e      	b.n	800f028 <_svfprintf_r+0x5b0>
 800f36a:	9b08      	ldr	r3, [sp, #32]
 800f36c:	191b      	adds	r3, r3, r4
 800f36e:	9311      	str	r3, [sp, #68]	; 0x44
 800f370:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f372:	2b46      	cmp	r3, #70	; 0x46
 800f374:	d112      	bne.n	800f39c <_svfprintf_r+0x924>
 800f376:	9b08      	ldr	r3, [sp, #32]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b30      	cmp	r3, #48	; 0x30
 800f37c:	d10a      	bne.n	800f394 <_svfprintf_r+0x91c>
 800f37e:	2200      	movs	r2, #0
 800f380:	2300      	movs	r3, #0
 800f382:	0028      	movs	r0, r5
 800f384:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f386:	f7f1 f85f 	bl	8000448 <__aeabi_dcmpeq>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d102      	bne.n	800f394 <_svfprintf_r+0x91c>
 800f38e:	2301      	movs	r3, #1
 800f390:	1b1b      	subs	r3, r3, r4
 800f392:	9326      	str	r3, [sp, #152]	; 0x98
 800f394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f398:	18d3      	adds	r3, r2, r3
 800f39a:	9311      	str	r3, [sp, #68]	; 0x44
 800f39c:	2200      	movs	r2, #0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	0028      	movs	r0, r5
 800f3a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f3a4:	f7f1 f850 	bl	8000448 <__aeabi_dcmpeq>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d001      	beq.n	800f3b0 <_svfprintf_r+0x938>
 800f3ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3ae:	932a      	str	r3, [sp, #168]	; 0xa8
 800f3b0:	2230      	movs	r2, #48	; 0x30
 800f3b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f3b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f3b6:	4299      	cmp	r1, r3
 800f3b8:	d9d5      	bls.n	800f366 <_svfprintf_r+0x8ee>
 800f3ba:	1c59      	adds	r1, r3, #1
 800f3bc:	912a      	str	r1, [sp, #168]	; 0xa8
 800f3be:	701a      	strb	r2, [r3, #0]
 800f3c0:	e7f7      	b.n	800f3b2 <_svfprintf_r+0x93a>
 800f3c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f3c4:	2b46      	cmp	r3, #70	; 0x46
 800f3c6:	d000      	beq.n	800f3ca <_svfprintf_r+0x952>
 800f3c8:	e63f      	b.n	800f04a <_svfprintf_r+0x5d2>
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	0033      	movs	r3, r6
 800f3ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3d0:	4013      	ands	r3, r2
 800f3d2:	430b      	orrs	r3, r1
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	dd2c      	ble.n	800f432 <_svfprintf_r+0x9ba>
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d046      	beq.n	800f46a <_svfprintf_r+0x9f2>
 800f3dc:	000a      	movs	r2, r1
 800f3de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f3e0:	18eb      	adds	r3, r5, r3
 800f3e2:	18d3      	adds	r3, r2, r3
 800f3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e6:	2366      	movs	r3, #102	; 0x66
 800f3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f3ea:	e030      	b.n	800f44e <_svfprintf_r+0x9d6>
 800f3ec:	781c      	ldrb	r4, [r3, #0]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	7014      	strb	r4, [r2, #0]
 800f3f2:	3201      	adds	r2, #1
 800f3f4:	e668      	b.n	800f0c8 <_svfprintf_r+0x650>
 800f3f6:	222a      	movs	r2, #42	; 0x2a
 800f3f8:	ab1e      	add	r3, sp, #120	; 0x78
 800f3fa:	18d2      	adds	r2, r2, r3
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d104      	bne.n	800f40a <_svfprintf_r+0x992>
 800f400:	2330      	movs	r3, #48	; 0x30
 800f402:	222b      	movs	r2, #43	; 0x2b
 800f404:	708b      	strb	r3, [r1, #2]
 800f406:	ab1e      	add	r3, sp, #120	; 0x78
 800f408:	18d2      	adds	r2, r2, r3
 800f40a:	3430      	adds	r4, #48	; 0x30
 800f40c:	1c53      	adds	r3, r2, #1
 800f40e:	7014      	strb	r4, [r2, #0]
 800f410:	e669      	b.n	800f0e6 <_svfprintf_r+0x66e>
 800f412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f414:	42ab      	cmp	r3, r5
 800f416:	dd12      	ble.n	800f43e <_svfprintf_r+0x9c6>
 800f418:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f41a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f41c:	4694      	mov	ip, r2
 800f41e:	4463      	add	r3, ip
 800f420:	9309      	str	r3, [sp, #36]	; 0x24
 800f422:	2367      	movs	r3, #103	; 0x67
 800f424:	930f      	str	r3, [sp, #60]	; 0x3c
 800f426:	2d00      	cmp	r5, #0
 800f428:	dc11      	bgt.n	800f44e <_svfprintf_r+0x9d6>
 800f42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f42c:	1b5b      	subs	r3, r3, r5
 800f42e:	3301      	adds	r3, #1
 800f430:	e00c      	b.n	800f44c <_svfprintf_r+0x9d4>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d01b      	beq.n	800f46e <_svfprintf_r+0x9f6>
 800f436:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f43a:	3301      	adds	r3, #1
 800f43c:	e7d1      	b.n	800f3e2 <_svfprintf_r+0x96a>
 800f43e:	2367      	movs	r3, #103	; 0x67
 800f440:	9509      	str	r5, [sp, #36]	; 0x24
 800f442:	930f      	str	r3, [sp, #60]	; 0x3c
 800f444:	07f3      	lsls	r3, r6, #31
 800f446:	d502      	bpl.n	800f44e <_svfprintf_r+0x9d6>
 800f448:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f44a:	18eb      	adds	r3, r5, r3
 800f44c:	9309      	str	r3, [sp, #36]	; 0x24
 800f44e:	2380      	movs	r3, #128	; 0x80
 800f450:	0032      	movs	r2, r6
 800f452:	00db      	lsls	r3, r3, #3
 800f454:	401a      	ands	r2, r3
 800f456:	9211      	str	r2, [sp, #68]	; 0x44
 800f458:	2200      	movs	r2, #0
 800f45a:	9210      	str	r2, [sp, #64]	; 0x40
 800f45c:	421e      	tst	r6, r3
 800f45e:	d100      	bne.n	800f462 <_svfprintf_r+0x9ea>
 800f460:	e65d      	b.n	800f11e <_svfprintf_r+0x6a6>
 800f462:	4295      	cmp	r5, r2
 800f464:	dc25      	bgt.n	800f4b2 <_svfprintf_r+0xa3a>
 800f466:	9211      	str	r2, [sp, #68]	; 0x44
 800f468:	e659      	b.n	800f11e <_svfprintf_r+0x6a6>
 800f46a:	9509      	str	r5, [sp, #36]	; 0x24
 800f46c:	e7bb      	b.n	800f3e6 <_svfprintf_r+0x96e>
 800f46e:	2366      	movs	r3, #102	; 0x66
 800f470:	9209      	str	r2, [sp, #36]	; 0x24
 800f472:	930f      	str	r3, [sp, #60]	; 0x3c
 800f474:	e7eb      	b.n	800f44e <_svfprintf_r+0x9d6>
 800f476:	42ab      	cmp	r3, r5
 800f478:	da0e      	bge.n	800f498 <_svfprintf_r+0xa20>
 800f47a:	1aed      	subs	r5, r5, r3
 800f47c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d012      	beq.n	800f4aa <_svfprintf_r+0xa32>
 800f484:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f486:	3301      	adds	r3, #1
 800f488:	9311      	str	r3, [sp, #68]	; 0x44
 800f48a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f48c:	3301      	adds	r3, #1
 800f48e:	9312      	str	r3, [sp, #72]	; 0x48
 800f490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2bff      	cmp	r3, #255	; 0xff
 800f496:	d1ee      	bne.n	800f476 <_svfprintf_r+0x9fe>
 800f498:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f49a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f49c:	189b      	adds	r3, r3, r2
 800f49e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f4a0:	4353      	muls	r3, r2
 800f4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4a4:	189b      	adds	r3, r3, r2
 800f4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4a8:	e639      	b.n	800f11e <_svfprintf_r+0x6a6>
 800f4aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	9310      	str	r3, [sp, #64]	; 0x40
 800f4b0:	e7ee      	b.n	800f490 <_svfprintf_r+0xa18>
 800f4b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4b4:	9311      	str	r3, [sp, #68]	; 0x44
 800f4b6:	e7eb      	b.n	800f490 <_svfprintf_r+0xa18>
 800f4b8:	1d23      	adds	r3, r4, #4
 800f4ba:	930d      	str	r3, [sp, #52]	; 0x34
 800f4bc:	06b3      	lsls	r3, r6, #26
 800f4be:	d509      	bpl.n	800f4d4 <_svfprintf_r+0xa5c>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	17d2      	asrs	r2, r2, #31
 800f4c8:	605a      	str	r2, [r3, #4]
 800f4ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f4cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f4ce:	9308      	str	r3, [sp, #32]
 800f4d0:	f7ff fb0d 	bl	800eaee <_svfprintf_r+0x76>
 800f4d4:	06f3      	lsls	r3, r6, #27
 800f4d6:	d503      	bpl.n	800f4e0 <_svfprintf_r+0xa68>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4dc:	601a      	str	r2, [r3, #0]
 800f4de:	e7f4      	b.n	800f4ca <_svfprintf_r+0xa52>
 800f4e0:	0673      	lsls	r3, r6, #25
 800f4e2:	d503      	bpl.n	800f4ec <_svfprintf_r+0xa74>
 800f4e4:	6823      	ldr	r3, [r4, #0]
 800f4e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4e8:	801a      	strh	r2, [r3, #0]
 800f4ea:	e7ee      	b.n	800f4ca <_svfprintf_r+0xa52>
 800f4ec:	05b6      	lsls	r6, r6, #22
 800f4ee:	d5f3      	bpl.n	800f4d8 <_svfprintf_r+0xa60>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f4f4:	701a      	strb	r2, [r3, #0]
 800f4f6:	e7e8      	b.n	800f4ca <_svfprintf_r+0xa52>
 800f4f8:	2310      	movs	r3, #16
 800f4fa:	431e      	orrs	r6, r3
 800f4fc:	2320      	movs	r3, #32
 800f4fe:	0030      	movs	r0, r6
 800f500:	4018      	ands	r0, r3
 800f502:	421e      	tst	r6, r3
 800f504:	d00f      	beq.n	800f526 <_svfprintf_r+0xaae>
 800f506:	3b19      	subs	r3, #25
 800f508:	3407      	adds	r4, #7
 800f50a:	439c      	bics	r4, r3
 800f50c:	0022      	movs	r2, r4
 800f50e:	ca18      	ldmia	r2!, {r3, r4}
 800f510:	9306      	str	r3, [sp, #24]
 800f512:	9407      	str	r4, [sp, #28]
 800f514:	920d      	str	r2, [sp, #52]	; 0x34
 800f516:	4bc9      	ldr	r3, [pc, #804]	; (800f83c <_svfprintf_r+0xdc4>)
 800f518:	401e      	ands	r6, r3
 800f51a:	2300      	movs	r3, #0
 800f51c:	221b      	movs	r2, #27
 800f51e:	a91e      	add	r1, sp, #120	; 0x78
 800f520:	1852      	adds	r2, r2, r1
 800f522:	2100      	movs	r1, #0
 800f524:	e430      	b.n	800ed88 <_svfprintf_r+0x310>
 800f526:	0022      	movs	r2, r4
 800f528:	ca08      	ldmia	r2!, {r3}
 800f52a:	0031      	movs	r1, r6
 800f52c:	920d      	str	r2, [sp, #52]	; 0x34
 800f52e:	2210      	movs	r2, #16
 800f530:	4011      	ands	r1, r2
 800f532:	4216      	tst	r6, r2
 800f534:	d002      	beq.n	800f53c <_svfprintf_r+0xac4>
 800f536:	9306      	str	r3, [sp, #24]
 800f538:	9007      	str	r0, [sp, #28]
 800f53a:	e7ec      	b.n	800f516 <_svfprintf_r+0xa9e>
 800f53c:	2240      	movs	r2, #64	; 0x40
 800f53e:	0030      	movs	r0, r6
 800f540:	4010      	ands	r0, r2
 800f542:	4216      	tst	r6, r2
 800f544:	d003      	beq.n	800f54e <_svfprintf_r+0xad6>
 800f546:	b29b      	uxth	r3, r3
 800f548:	9306      	str	r3, [sp, #24]
 800f54a:	9107      	str	r1, [sp, #28]
 800f54c:	e7e3      	b.n	800f516 <_svfprintf_r+0xa9e>
 800f54e:	2280      	movs	r2, #128	; 0x80
 800f550:	0031      	movs	r1, r6
 800f552:	0092      	lsls	r2, r2, #2
 800f554:	4011      	ands	r1, r2
 800f556:	4216      	tst	r6, r2
 800f558:	d0f6      	beq.n	800f548 <_svfprintf_r+0xad0>
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	e7eb      	b.n	800f536 <_svfprintf_r+0xabe>
 800f55e:	0023      	movs	r3, r4
 800f560:	cb04      	ldmia	r3!, {r2}
 800f562:	49b7      	ldr	r1, [pc, #732]	; (800f840 <_svfprintf_r+0xdc8>)
 800f564:	9206      	str	r2, [sp, #24]
 800f566:	aa25      	add	r2, sp, #148	; 0x94
 800f568:	8011      	strh	r1, [r2, #0]
 800f56a:	4ab6      	ldr	r2, [pc, #728]	; (800f844 <_svfprintf_r+0xdcc>)
 800f56c:	930d      	str	r3, [sp, #52]	; 0x34
 800f56e:	2300      	movs	r3, #0
 800f570:	921f      	str	r2, [sp, #124]	; 0x7c
 800f572:	2278      	movs	r2, #120	; 0x78
 800f574:	9307      	str	r3, [sp, #28]
 800f576:	3302      	adds	r3, #2
 800f578:	431e      	orrs	r6, r3
 800f57a:	920f      	str	r2, [sp, #60]	; 0x3c
 800f57c:	e7ce      	b.n	800f51c <_svfprintf_r+0xaa4>
 800f57e:	0023      	movs	r3, r4
 800f580:	cb04      	ldmia	r3!, {r2}
 800f582:	2400      	movs	r4, #0
 800f584:	930d      	str	r3, [sp, #52]	; 0x34
 800f586:	231b      	movs	r3, #27
 800f588:	9208      	str	r2, [sp, #32]
 800f58a:	aa1e      	add	r2, sp, #120	; 0x78
 800f58c:	189b      	adds	r3, r3, r2
 800f58e:	701c      	strb	r4, [r3, #0]
 800f590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f592:	3301      	adds	r3, #1
 800f594:	d00e      	beq.n	800f5b4 <_svfprintf_r+0xb3c>
 800f596:	0021      	movs	r1, r4
 800f598:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f59a:	9808      	ldr	r0, [sp, #32]
 800f59c:	f002 f83a 	bl	8011614 <memchr>
 800f5a0:	900c      	str	r0, [sp, #48]	; 0x30
 800f5a2:	42a0      	cmp	r0, r4
 800f5a4:	d100      	bne.n	800f5a8 <_svfprintf_r+0xb30>
 800f5a6:	e10d      	b.n	800f7c4 <_svfprintf_r+0xd4c>
 800f5a8:	9a08      	ldr	r2, [sp, #32]
 800f5aa:	1a83      	subs	r3, r0, r2
 800f5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ae:	0023      	movs	r3, r4
 800f5b0:	940c      	str	r4, [sp, #48]	; 0x30
 800f5b2:	e44e      	b.n	800ee52 <_svfprintf_r+0x3da>
 800f5b4:	9808      	ldr	r0, [sp, #32]
 800f5b6:	f7f0 fda5 	bl	8000104 <strlen>
 800f5ba:	9009      	str	r0, [sp, #36]	; 0x24
 800f5bc:	e7f7      	b.n	800f5ae <_svfprintf_r+0xb36>
 800f5be:	2310      	movs	r3, #16
 800f5c0:	431e      	orrs	r6, r3
 800f5c2:	2320      	movs	r3, #32
 800f5c4:	0030      	movs	r0, r6
 800f5c6:	4018      	ands	r0, r3
 800f5c8:	421e      	tst	r6, r3
 800f5ca:	d009      	beq.n	800f5e0 <_svfprintf_r+0xb68>
 800f5cc:	3b19      	subs	r3, #25
 800f5ce:	3407      	adds	r4, #7
 800f5d0:	439c      	bics	r4, r3
 800f5d2:	0022      	movs	r2, r4
 800f5d4:	ca18      	ldmia	r2!, {r3, r4}
 800f5d6:	9306      	str	r3, [sp, #24]
 800f5d8:	9407      	str	r4, [sp, #28]
 800f5da:	920d      	str	r2, [sp, #52]	; 0x34
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e79d      	b.n	800f51c <_svfprintf_r+0xaa4>
 800f5e0:	0023      	movs	r3, r4
 800f5e2:	cb04      	ldmia	r3!, {r2}
 800f5e4:	0031      	movs	r1, r6
 800f5e6:	930d      	str	r3, [sp, #52]	; 0x34
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	4019      	ands	r1, r3
 800f5ec:	421e      	tst	r6, r3
 800f5ee:	d003      	beq.n	800f5f8 <_svfprintf_r+0xb80>
 800f5f0:	9206      	str	r2, [sp, #24]
 800f5f2:	9007      	str	r0, [sp, #28]
 800f5f4:	3b0f      	subs	r3, #15
 800f5f6:	e791      	b.n	800f51c <_svfprintf_r+0xaa4>
 800f5f8:	2340      	movs	r3, #64	; 0x40
 800f5fa:	0030      	movs	r0, r6
 800f5fc:	4018      	ands	r0, r3
 800f5fe:	421e      	tst	r6, r3
 800f600:	d003      	beq.n	800f60a <_svfprintf_r+0xb92>
 800f602:	b293      	uxth	r3, r2
 800f604:	9306      	str	r3, [sp, #24]
 800f606:	9107      	str	r1, [sp, #28]
 800f608:	e7e8      	b.n	800f5dc <_svfprintf_r+0xb64>
 800f60a:	2380      	movs	r3, #128	; 0x80
 800f60c:	0031      	movs	r1, r6
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	4019      	ands	r1, r3
 800f612:	421e      	tst	r6, r3
 800f614:	d003      	beq.n	800f61e <_svfprintf_r+0xba6>
 800f616:	b2d3      	uxtb	r3, r2
 800f618:	9306      	str	r3, [sp, #24]
 800f61a:	9007      	str	r0, [sp, #28]
 800f61c:	e7de      	b.n	800f5dc <_svfprintf_r+0xb64>
 800f61e:	9206      	str	r2, [sp, #24]
 800f620:	e7f1      	b.n	800f606 <_svfprintf_r+0xb8e>
 800f622:	4b89      	ldr	r3, [pc, #548]	; (800f848 <_svfprintf_r+0xdd0>)
 800f624:	0030      	movs	r0, r6
 800f626:	931f      	str	r3, [sp, #124]	; 0x7c
 800f628:	2320      	movs	r3, #32
 800f62a:	4018      	ands	r0, r3
 800f62c:	421e      	tst	r6, r3
 800f62e:	d01a      	beq.n	800f666 <_svfprintf_r+0xbee>
 800f630:	3b19      	subs	r3, #25
 800f632:	3407      	adds	r4, #7
 800f634:	439c      	bics	r4, r3
 800f636:	0022      	movs	r2, r4
 800f638:	ca18      	ldmia	r2!, {r3, r4}
 800f63a:	9306      	str	r3, [sp, #24]
 800f63c:	9407      	str	r4, [sp, #28]
 800f63e:	920d      	str	r2, [sp, #52]	; 0x34
 800f640:	07f3      	lsls	r3, r6, #31
 800f642:	d50a      	bpl.n	800f65a <_svfprintf_r+0xbe2>
 800f644:	9b06      	ldr	r3, [sp, #24]
 800f646:	9a07      	ldr	r2, [sp, #28]
 800f648:	4313      	orrs	r3, r2
 800f64a:	d006      	beq.n	800f65a <_svfprintf_r+0xbe2>
 800f64c:	2230      	movs	r2, #48	; 0x30
 800f64e:	ab25      	add	r3, sp, #148	; 0x94
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f654:	705a      	strb	r2, [r3, #1]
 800f656:	2302      	movs	r3, #2
 800f658:	431e      	orrs	r6, r3
 800f65a:	4b78      	ldr	r3, [pc, #480]	; (800f83c <_svfprintf_r+0xdc4>)
 800f65c:	401e      	ands	r6, r3
 800f65e:	2302      	movs	r3, #2
 800f660:	e75c      	b.n	800f51c <_svfprintf_r+0xaa4>
 800f662:	4b78      	ldr	r3, [pc, #480]	; (800f844 <_svfprintf_r+0xdcc>)
 800f664:	e7de      	b.n	800f624 <_svfprintf_r+0xbac>
 800f666:	0023      	movs	r3, r4
 800f668:	cb04      	ldmia	r3!, {r2}
 800f66a:	0031      	movs	r1, r6
 800f66c:	930d      	str	r3, [sp, #52]	; 0x34
 800f66e:	2310      	movs	r3, #16
 800f670:	4019      	ands	r1, r3
 800f672:	421e      	tst	r6, r3
 800f674:	d002      	beq.n	800f67c <_svfprintf_r+0xc04>
 800f676:	9206      	str	r2, [sp, #24]
 800f678:	9007      	str	r0, [sp, #28]
 800f67a:	e7e1      	b.n	800f640 <_svfprintf_r+0xbc8>
 800f67c:	2340      	movs	r3, #64	; 0x40
 800f67e:	0030      	movs	r0, r6
 800f680:	4018      	ands	r0, r3
 800f682:	421e      	tst	r6, r3
 800f684:	d003      	beq.n	800f68e <_svfprintf_r+0xc16>
 800f686:	b293      	uxth	r3, r2
 800f688:	9306      	str	r3, [sp, #24]
 800f68a:	9107      	str	r1, [sp, #28]
 800f68c:	e7d8      	b.n	800f640 <_svfprintf_r+0xbc8>
 800f68e:	2380      	movs	r3, #128	; 0x80
 800f690:	0031      	movs	r1, r6
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4019      	ands	r1, r3
 800f696:	421e      	tst	r6, r3
 800f698:	d002      	beq.n	800f6a0 <_svfprintf_r+0xc28>
 800f69a:	b2d3      	uxtb	r3, r2
 800f69c:	9306      	str	r3, [sp, #24]
 800f69e:	e7eb      	b.n	800f678 <_svfprintf_r+0xc00>
 800f6a0:	9206      	str	r2, [sp, #24]
 800f6a2:	e7f2      	b.n	800f68a <_svfprintf_r+0xc12>
 800f6a4:	9b07      	ldr	r3, [sp, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <_svfprintf_r+0xc48>
 800f6aa:	9b06      	ldr	r3, [sp, #24]
 800f6ac:	2b09      	cmp	r3, #9
 800f6ae:	d807      	bhi.n	800f6c0 <_svfprintf_r+0xc48>
 800f6b0:	23e7      	movs	r3, #231	; 0xe7
 800f6b2:	aa1e      	add	r2, sp, #120	; 0x78
 800f6b4:	189b      	adds	r3, r3, r2
 800f6b6:	9a06      	ldr	r2, [sp, #24]
 800f6b8:	3230      	adds	r2, #48	; 0x30
 800f6ba:	701a      	strb	r2, [r3, #0]
 800f6bc:	f000 fc18 	bl	800fef0 <_svfprintf_r+0x1478>
 800f6c0:	2680      	movs	r6, #128	; 0x80
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	00f6      	lsls	r6, r6, #3
 800f6c6:	930e      	str	r3, [sp, #56]	; 0x38
 800f6c8:	ad58      	add	r5, sp, #352	; 0x160
 800f6ca:	4026      	ands	r6, r4
 800f6cc:	220a      	movs	r2, #10
 800f6ce:	9806      	ldr	r0, [sp, #24]
 800f6d0:	9907      	ldr	r1, [sp, #28]
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	f7f0 fee6 	bl	80004a4 <__aeabi_uldivmod>
 800f6d8:	1e6b      	subs	r3, r5, #1
 800f6da:	3230      	adds	r2, #48	; 0x30
 800f6dc:	9308      	str	r3, [sp, #32]
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6e2:	900c      	str	r0, [sp, #48]	; 0x30
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	9110      	str	r1, [sp, #64]	; 0x40
 800f6e8:	930e      	str	r3, [sp, #56]	; 0x38
 800f6ea:	2e00      	cmp	r6, #0
 800f6ec:	d01d      	beq.n	800f72a <_svfprintf_r+0xcb2>
 800f6ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d118      	bne.n	800f72a <_svfprintf_r+0xcb2>
 800f6f8:	2aff      	cmp	r2, #255	; 0xff
 800f6fa:	d016      	beq.n	800f72a <_svfprintf_r+0xcb2>
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d102      	bne.n	800f708 <_svfprintf_r+0xc90>
 800f702:	9b06      	ldr	r3, [sp, #24]
 800f704:	2b09      	cmp	r3, #9
 800f706:	d910      	bls.n	800f72a <_svfprintf_r+0xcb2>
 800f708:	9b08      	ldr	r3, [sp, #32]
 800f70a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f70c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f70e:	1a9b      	subs	r3, r3, r2
 800f710:	0018      	movs	r0, r3
 800f712:	9308      	str	r3, [sp, #32]
 800f714:	f7fd ff97 	bl	800d646 <strncpy>
 800f718:	2200      	movs	r2, #0
 800f71a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f71c:	920e      	str	r2, [sp, #56]	; 0x38
 800f71e:	785b      	ldrb	r3, [r3, #1]
 800f720:	1e5a      	subs	r2, r3, #1
 800f722:	4193      	sbcs	r3, r2
 800f724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f726:	18d3      	adds	r3, r2, r3
 800f728:	9312      	str	r3, [sp, #72]	; 0x48
 800f72a:	9b07      	ldr	r3, [sp, #28]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d10f      	bne.n	800f750 <_svfprintf_r+0xcd8>
 800f730:	9b06      	ldr	r3, [sp, #24]
 800f732:	2b09      	cmp	r3, #9
 800f734:	d80c      	bhi.n	800f750 <_svfprintf_r+0xcd8>
 800f736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f738:	9a08      	ldr	r2, [sp, #32]
 800f73a:	9319      	str	r3, [sp, #100]	; 0x64
 800f73c:	ab58      	add	r3, sp, #352	; 0x160
 800f73e:	1a9b      	subs	r3, r3, r2
 800f740:	9309      	str	r3, [sp, #36]	; 0x24
 800f742:	2300      	movs	r3, #0
 800f744:	0026      	movs	r6, r4
 800f746:	930c      	str	r3, [sp, #48]	; 0x30
 800f748:	001d      	movs	r5, r3
 800f74a:	9310      	str	r3, [sp, #64]	; 0x40
 800f74c:	9311      	str	r3, [sp, #68]	; 0x44
 800f74e:	e4f2      	b.n	800f136 <_svfprintf_r+0x6be>
 800f750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f752:	9d08      	ldr	r5, [sp, #32]
 800f754:	9306      	str	r3, [sp, #24]
 800f756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f758:	9307      	str	r3, [sp, #28]
 800f75a:	e7b7      	b.n	800f6cc <_svfprintf_r+0xc54>
 800f75c:	200f      	movs	r0, #15
 800f75e:	ab58      	add	r3, sp, #352	; 0x160
 800f760:	9308      	str	r3, [sp, #32]
 800f762:	9b08      	ldr	r3, [sp, #32]
 800f764:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f766:	3b01      	subs	r3, #1
 800f768:	9308      	str	r3, [sp, #32]
 800f76a:	9b06      	ldr	r3, [sp, #24]
 800f76c:	4003      	ands	r3, r0
 800f76e:	5cd3      	ldrb	r3, [r2, r3]
 800f770:	9a08      	ldr	r2, [sp, #32]
 800f772:	7013      	strb	r3, [r2, #0]
 800f774:	9b07      	ldr	r3, [sp, #28]
 800f776:	0719      	lsls	r1, r3, #28
 800f778:	9b06      	ldr	r3, [sp, #24]
 800f77a:	091a      	lsrs	r2, r3, #4
 800f77c:	9b07      	ldr	r3, [sp, #28]
 800f77e:	4311      	orrs	r1, r2
 800f780:	091b      	lsrs	r3, r3, #4
 800f782:	9307      	str	r3, [sp, #28]
 800f784:	000b      	movs	r3, r1
 800f786:	9a07      	ldr	r2, [sp, #28]
 800f788:	9106      	str	r1, [sp, #24]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	d1e9      	bne.n	800f762 <_svfprintf_r+0xcea>
 800f78e:	e7d2      	b.n	800f736 <_svfprintf_r+0xcbe>
 800f790:	aa58      	add	r2, sp, #352	; 0x160
 800f792:	9208      	str	r2, [sp, #32]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1ce      	bne.n	800f736 <_svfprintf_r+0xcbe>
 800f798:	07f6      	lsls	r6, r6, #31
 800f79a:	d5cc      	bpl.n	800f736 <_svfprintf_r+0xcbe>
 800f79c:	aa1e      	add	r2, sp, #120	; 0x78
 800f79e:	33e7      	adds	r3, #231	; 0xe7
 800f7a0:	189b      	adds	r3, r3, r2
 800f7a2:	2230      	movs	r2, #48	; 0x30
 800f7a4:	e789      	b.n	800f6ba <_svfprintf_r+0xc42>
 800f7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d100      	bne.n	800f7ae <_svfprintf_r+0xd36>
 800f7ac:	e364      	b.n	800fe78 <_svfprintf_r+0x1400>
 800f7ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f7b0:	211b      	movs	r1, #27
 800f7b2:	ab3f      	add	r3, sp, #252	; 0xfc
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	a81e      	add	r0, sp, #120	; 0x78
 800f7ba:	1809      	adds	r1, r1, r0
 800f7bc:	700a      	strb	r2, [r1, #0]
 800f7be:	940d      	str	r4, [sp, #52]	; 0x34
 800f7c0:	f7ff fabd 	bl	800ed3e <_svfprintf_r+0x2c6>
 800f7c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7c6:	f7ff fb44 	bl	800ee52 <_svfprintf_r+0x3da>
 800f7ca:	2010      	movs	r0, #16
 800f7cc:	1812      	adds	r2, r2, r0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7d2:	932d      	str	r3, [sp, #180]	; 0xb4
 800f7d4:	2b07      	cmp	r3, #7
 800f7d6:	dd08      	ble.n	800f7ea <_svfprintf_r+0xd72>
 800f7d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7da:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7dc:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7de:	f003 f9db 	bl	8012b98 <__ssprint_r>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d000      	beq.n	800f7e8 <_svfprintf_r+0xd70>
 800f7e6:	e326      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f7e8:	a92f      	add	r1, sp, #188	; 0xbc
 800f7ea:	000f      	movs	r7, r1
 800f7ec:	3c10      	subs	r4, #16
 800f7ee:	e4c5      	b.n	800f17c <_svfprintf_r+0x704>
 800f7f0:	2010      	movs	r0, #16
 800f7f2:	1812      	adds	r2, r2, r0
 800f7f4:	6078      	str	r0, [r7, #4]
 800f7f6:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800f7fa:	2b07      	cmp	r3, #7
 800f7fc:	dd08      	ble.n	800f810 <_svfprintf_r+0xd98>
 800f7fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f800:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f802:	aa2c      	add	r2, sp, #176	; 0xb0
 800f804:	f003 f9c8 	bl	8012b98 <__ssprint_r>
 800f808:	2800      	cmp	r0, #0
 800f80a:	d000      	beq.n	800f80e <_svfprintf_r+0xd96>
 800f80c:	e313      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f80e:	a92f      	add	r1, sp, #188	; 0xbc
 800f810:	000f      	movs	r7, r1
 800f812:	3c10      	subs	r4, #16
 800f814:	e50b      	b.n	800f22e <_svfprintf_r+0x7b6>
 800f816:	2010      	movs	r0, #16
 800f818:	1812      	adds	r2, r2, r0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	922e      	str	r2, [sp, #184]	; 0xb8
 800f81e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f820:	2b07      	cmp	r3, #7
 800f822:	dd08      	ble.n	800f836 <_svfprintf_r+0xdbe>
 800f824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f826:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f828:	aa2c      	add	r2, sp, #176	; 0xb0
 800f82a:	f003 f9b5 	bl	8012b98 <__ssprint_r>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d000      	beq.n	800f834 <_svfprintf_r+0xdbc>
 800f832:	e300      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f834:	a92f      	add	r1, sp, #188	; 0xbc
 800f836:	000f      	movs	r7, r1
 800f838:	3c10      	subs	r4, #16
 800f83a:	e518      	b.n	800f26e <_svfprintf_r+0x7f6>
 800f83c:	fffffbff 	.word	0xfffffbff
 800f840:	00007830 	.word	0x00007830
 800f844:	08016054 	.word	0x08016054
 800f848:	08016065 	.word	0x08016065
 800f84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f84e:	2b65      	cmp	r3, #101	; 0x65
 800f850:	dc00      	bgt.n	800f854 <_svfprintf_r+0xddc>
 800f852:	e241      	b.n	800fcd8 <_svfprintf_r+0x1260>
 800f854:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f856:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f858:	2200      	movs	r2, #0
 800f85a:	2300      	movs	r3, #0
 800f85c:	f7f0 fdf4 	bl	8000448 <__aeabi_dcmpeq>
 800f860:	2800      	cmp	r0, #0
 800f862:	d077      	beq.n	800f954 <_svfprintf_r+0xedc>
 800f864:	4bca      	ldr	r3, [pc, #808]	; (800fb90 <_svfprintf_r+0x1118>)
 800f866:	603b      	str	r3, [r7, #0]
 800f868:	2301      	movs	r3, #1
 800f86a:	607b      	str	r3, [r7, #4]
 800f86c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f86e:	3708      	adds	r7, #8
 800f870:	3301      	adds	r3, #1
 800f872:	932e      	str	r3, [sp, #184]	; 0xb8
 800f874:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f876:	3301      	adds	r3, #1
 800f878:	932d      	str	r3, [sp, #180]	; 0xb4
 800f87a:	2b07      	cmp	r3, #7
 800f87c:	dd08      	ble.n	800f890 <_svfprintf_r+0xe18>
 800f87e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f880:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f882:	aa2c      	add	r2, sp, #176	; 0xb0
 800f884:	f003 f988 	bl	8012b98 <__ssprint_r>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d000      	beq.n	800f88e <_svfprintf_r+0xe16>
 800f88c:	e2d3      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f88e:	af2f      	add	r7, sp, #188	; 0xbc
 800f890:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f894:	4293      	cmp	r3, r2
 800f896:	db01      	blt.n	800f89c <_svfprintf_r+0xe24>
 800f898:	07f3      	lsls	r3, r6, #31
 800f89a:	d51b      	bpl.n	800f8d4 <_svfprintf_r+0xe5c>
 800f89c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f89e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8a0:	603b      	str	r3, [r7, #0]
 800f8a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f8a4:	607b      	str	r3, [r7, #4]
 800f8a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	189b      	adds	r3, r3, r2
 800f8ac:	932e      	str	r3, [sp, #184]	; 0xb8
 800f8ae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8b4:	2b07      	cmp	r3, #7
 800f8b6:	dd08      	ble.n	800f8ca <_svfprintf_r+0xe52>
 800f8b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8be:	f003 f96b 	bl	8012b98 <__ssprint_r>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	d000      	beq.n	800f8c8 <_svfprintf_r+0xe50>
 800f8c6:	e2b6      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f8c8:	af2f      	add	r7, sp, #188	; 0xbc
 800f8ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8cc:	2510      	movs	r5, #16
 800f8ce:	1e5c      	subs	r4, r3, #1
 800f8d0:	2c00      	cmp	r4, #0
 800f8d2:	dc2e      	bgt.n	800f932 <_svfprintf_r+0xeba>
 800f8d4:	0776      	lsls	r6, r6, #29
 800f8d6:	d500      	bpl.n	800f8da <_svfprintf_r+0xe62>
 800f8d8:	e290      	b.n	800fdfc <_svfprintf_r+0x1384>
 800f8da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f8dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	da00      	bge.n	800f8e4 <_svfprintf_r+0xe6c>
 800f8e2:	0013      	movs	r3, r2
 800f8e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8e6:	18d3      	adds	r3, r2, r3
 800f8e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f8ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d007      	beq.n	800f900 <_svfprintf_r+0xe88>
 800f8f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8f4:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8f6:	f003 f94f 	bl	8012b98 <__ssprint_r>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d000      	beq.n	800f900 <_svfprintf_r+0xe88>
 800f8fe:	e29a      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f900:	2300      	movs	r3, #0
 800f902:	932d      	str	r3, [sp, #180]	; 0xb4
 800f904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f906:	2b00      	cmp	r3, #0
 800f908:	d000      	beq.n	800f90c <_svfprintf_r+0xe94>
 800f90a:	e2b0      	b.n	800fe6e <_svfprintf_r+0x13f6>
 800f90c:	af2f      	add	r7, sp, #188	; 0xbc
 800f90e:	e5dc      	b.n	800f4ca <_svfprintf_r+0xa52>
 800f910:	3210      	adds	r2, #16
 800f912:	607d      	str	r5, [r7, #4]
 800f914:	922e      	str	r2, [sp, #184]	; 0xb8
 800f916:	932d      	str	r3, [sp, #180]	; 0xb4
 800f918:	2b07      	cmp	r3, #7
 800f91a:	dd08      	ble.n	800f92e <_svfprintf_r+0xeb6>
 800f91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f91e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f920:	aa2c      	add	r2, sp, #176	; 0xb0
 800f922:	f003 f939 	bl	8012b98 <__ssprint_r>
 800f926:	2800      	cmp	r0, #0
 800f928:	d000      	beq.n	800f92c <_svfprintf_r+0xeb4>
 800f92a:	e284      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f92c:	a92f      	add	r1, sp, #188	; 0xbc
 800f92e:	000f      	movs	r7, r1
 800f930:	3c10      	subs	r4, #16
 800f932:	0039      	movs	r1, r7
 800f934:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f936:	4897      	ldr	r0, [pc, #604]	; (800fb94 <_svfprintf_r+0x111c>)
 800f938:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f93a:	3301      	adds	r3, #1
 800f93c:	3108      	adds	r1, #8
 800f93e:	6038      	str	r0, [r7, #0]
 800f940:	2c10      	cmp	r4, #16
 800f942:	dce5      	bgt.n	800f910 <_svfprintf_r+0xe98>
 800f944:	607c      	str	r4, [r7, #4]
 800f946:	18a4      	adds	r4, r4, r2
 800f948:	942e      	str	r4, [sp, #184]	; 0xb8
 800f94a:	000f      	movs	r7, r1
 800f94c:	932d      	str	r3, [sp, #180]	; 0xb4
 800f94e:	2b07      	cmp	r3, #7
 800f950:	ddc0      	ble.n	800f8d4 <_svfprintf_r+0xe5c>
 800f952:	e05f      	b.n	800fa14 <_svfprintf_r+0xf9c>
 800f954:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f956:	2b00      	cmp	r3, #0
 800f958:	dc78      	bgt.n	800fa4c <_svfprintf_r+0xfd4>
 800f95a:	4b8d      	ldr	r3, [pc, #564]	; (800fb90 <_svfprintf_r+0x1118>)
 800f95c:	603b      	str	r3, [r7, #0]
 800f95e:	2301      	movs	r3, #1
 800f960:	607b      	str	r3, [r7, #4]
 800f962:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f964:	3708      	adds	r7, #8
 800f966:	3301      	adds	r3, #1
 800f968:	932e      	str	r3, [sp, #184]	; 0xb8
 800f96a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f96c:	3301      	adds	r3, #1
 800f96e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f970:	2b07      	cmp	r3, #7
 800f972:	dd08      	ble.n	800f986 <_svfprintf_r+0xf0e>
 800f974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f976:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f978:	aa2c      	add	r2, sp, #176	; 0xb0
 800f97a:	f003 f90d 	bl	8012b98 <__ssprint_r>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d000      	beq.n	800f984 <_svfprintf_r+0xf0c>
 800f982:	e258      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f984:	af2f      	add	r7, sp, #188	; 0xbc
 800f986:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f988:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f98a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f98c:	430b      	orrs	r3, r1
 800f98e:	2101      	movs	r1, #1
 800f990:	4031      	ands	r1, r6
 800f992:	430b      	orrs	r3, r1
 800f994:	d09e      	beq.n	800f8d4 <_svfprintf_r+0xe5c>
 800f996:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f998:	603b      	str	r3, [r7, #0]
 800f99a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f99c:	607b      	str	r3, [r7, #4]
 800f99e:	189a      	adds	r2, r3, r2
 800f9a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9a2:	922e      	str	r2, [sp, #184]	; 0xb8
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	2b07      	cmp	r3, #7
 800f9ac:	dd08      	ble.n	800f9c0 <_svfprintf_r+0xf48>
 800f9ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9b2:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9b4:	f003 f8f0 	bl	8012b98 <__ssprint_r>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	d000      	beq.n	800f9be <_svfprintf_r+0xf46>
 800f9bc:	e23b      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f9be:	af2f      	add	r7, sp, #188	; 0xbc
 800f9c0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f9c2:	2c00      	cmp	r4, #0
 800f9c4:	da19      	bge.n	800f9fa <_svfprintf_r+0xf82>
 800f9c6:	0038      	movs	r0, r7
 800f9c8:	2510      	movs	r5, #16
 800f9ca:	4264      	negs	r4, r4
 800f9cc:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f9ce:	4a71      	ldr	r2, [pc, #452]	; (800fb94 <_svfprintf_r+0x111c>)
 800f9d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9d2:	3101      	adds	r1, #1
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	6002      	str	r2, [r0, #0]
 800f9d8:	2c10      	cmp	r4, #16
 800f9da:	dc25      	bgt.n	800fa28 <_svfprintf_r+0xfb0>
 800f9dc:	6044      	str	r4, [r0, #4]
 800f9de:	18e4      	adds	r4, r4, r3
 800f9e0:	942e      	str	r4, [sp, #184]	; 0xb8
 800f9e2:	912d      	str	r1, [sp, #180]	; 0xb4
 800f9e4:	2907      	cmp	r1, #7
 800f9e6:	dd08      	ble.n	800f9fa <_svfprintf_r+0xf82>
 800f9e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9ec:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9ee:	f003 f8d3 	bl	8012b98 <__ssprint_r>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	d000      	beq.n	800f9f8 <_svfprintf_r+0xf80>
 800f9f6:	e21e      	b.n	800fe36 <_svfprintf_r+0x13be>
 800f9f8:	af2f      	add	r7, sp, #188	; 0xbc
 800f9fa:	9b08      	ldr	r3, [sp, #32]
 800f9fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f9fe:	603b      	str	r3, [r7, #0]
 800fa00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa02:	18d2      	adds	r2, r2, r3
 800fa04:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa06:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800fa08:	607b      	str	r3, [r7, #4]
 800fa0a:	3201      	adds	r2, #1
 800fa0c:	922d      	str	r2, [sp, #180]	; 0xb4
 800fa0e:	2a07      	cmp	r2, #7
 800fa10:	dc00      	bgt.n	800fa14 <_svfprintf_r+0xf9c>
 800fa12:	e45b      	b.n	800f2cc <_svfprintf_r+0x854>
 800fa14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa18:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa1a:	f003 f8bd 	bl	8012b98 <__ssprint_r>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d000      	beq.n	800fa24 <_svfprintf_r+0xfac>
 800fa22:	e208      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fa24:	af2f      	add	r7, sp, #188	; 0xbc
 800fa26:	e755      	b.n	800f8d4 <_svfprintf_r+0xe5c>
 800fa28:	3310      	adds	r3, #16
 800fa2a:	6045      	str	r5, [r0, #4]
 800fa2c:	932e      	str	r3, [sp, #184]	; 0xb8
 800fa2e:	912d      	str	r1, [sp, #180]	; 0xb4
 800fa30:	2907      	cmp	r1, #7
 800fa32:	dd08      	ble.n	800fa46 <_svfprintf_r+0xfce>
 800fa34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa36:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa38:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa3a:	f003 f8ad 	bl	8012b98 <__ssprint_r>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d000      	beq.n	800fa44 <_svfprintf_r+0xfcc>
 800fa42:	e1f8      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fa44:	af2f      	add	r7, sp, #188	; 0xbc
 800fa46:	0038      	movs	r0, r7
 800fa48:	3c10      	subs	r4, #16
 800fa4a:	e7bf      	b.n	800f9cc <_svfprintf_r+0xf54>
 800fa4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa4e:	002c      	movs	r4, r5
 800fa50:	429d      	cmp	r5, r3
 800fa52:	dd00      	ble.n	800fa56 <_svfprintf_r+0xfde>
 800fa54:	001c      	movs	r4, r3
 800fa56:	2c00      	cmp	r4, #0
 800fa58:	dd14      	ble.n	800fa84 <_svfprintf_r+0x100c>
 800fa5a:	9b08      	ldr	r3, [sp, #32]
 800fa5c:	607c      	str	r4, [r7, #4]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa62:	3708      	adds	r7, #8
 800fa64:	18e3      	adds	r3, r4, r3
 800fa66:	932e      	str	r3, [sp, #184]	; 0xb8
 800fa68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa6e:	2b07      	cmp	r3, #7
 800fa70:	dd08      	ble.n	800fa84 <_svfprintf_r+0x100c>
 800fa72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa74:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa76:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa78:	f003 f88e 	bl	8012b98 <__ssprint_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d000      	beq.n	800fa82 <_svfprintf_r+0x100a>
 800fa80:	e1d9      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fa82:	af2f      	add	r7, sp, #188	; 0xbc
 800fa84:	43e3      	mvns	r3, r4
 800fa86:	17db      	asrs	r3, r3, #31
 800fa88:	401c      	ands	r4, r3
 800fa8a:	1b2c      	subs	r4, r5, r4
 800fa8c:	2c00      	cmp	r4, #0
 800fa8e:	dd18      	ble.n	800fac2 <_svfprintf_r+0x104a>
 800fa90:	0039      	movs	r1, r7
 800fa92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa94:	483f      	ldr	r0, [pc, #252]	; (800fb94 <_svfprintf_r+0x111c>)
 800fa96:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fa98:	3301      	adds	r3, #1
 800fa9a:	3108      	adds	r1, #8
 800fa9c:	6038      	str	r0, [r7, #0]
 800fa9e:	2c10      	cmp	r4, #16
 800faa0:	dc7a      	bgt.n	800fb98 <_svfprintf_r+0x1120>
 800faa2:	607c      	str	r4, [r7, #4]
 800faa4:	18a4      	adds	r4, r4, r2
 800faa6:	000f      	movs	r7, r1
 800faa8:	942e      	str	r4, [sp, #184]	; 0xb8
 800faaa:	932d      	str	r3, [sp, #180]	; 0xb4
 800faac:	2b07      	cmp	r3, #7
 800faae:	dd08      	ble.n	800fac2 <_svfprintf_r+0x104a>
 800fab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fab4:	aa2c      	add	r2, sp, #176	; 0xb0
 800fab6:	f003 f86f 	bl	8012b98 <__ssprint_r>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d000      	beq.n	800fac0 <_svfprintf_r+0x1048>
 800fabe:	e1ba      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fac0:	af2f      	add	r7, sp, #188	; 0xbc
 800fac2:	9b08      	ldr	r3, [sp, #32]
 800fac4:	195d      	adds	r5, r3, r5
 800fac6:	0573      	lsls	r3, r6, #21
 800fac8:	d50b      	bpl.n	800fae2 <_svfprintf_r+0x106a>
 800faca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800facc:	2b00      	cmp	r3, #0
 800face:	d176      	bne.n	800fbbe <_svfprintf_r+0x1146>
 800fad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d176      	bne.n	800fbc4 <_svfprintf_r+0x114c>
 800fad6:	9b08      	ldr	r3, [sp, #32]
 800fad8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fada:	189b      	adds	r3, r3, r2
 800fadc:	429d      	cmp	r5, r3
 800fade:	d900      	bls.n	800fae2 <_svfprintf_r+0x106a>
 800fae0:	001d      	movs	r5, r3
 800fae2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fae6:	4293      	cmp	r3, r2
 800fae8:	db01      	blt.n	800faee <_svfprintf_r+0x1076>
 800faea:	07f3      	lsls	r3, r6, #31
 800faec:	d516      	bpl.n	800fb1c <_svfprintf_r+0x10a4>
 800faee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800faf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800faf2:	603b      	str	r3, [r7, #0]
 800faf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800faf6:	607b      	str	r3, [r7, #4]
 800faf8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fafa:	3708      	adds	r7, #8
 800fafc:	189b      	adds	r3, r3, r2
 800fafe:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb02:	3301      	adds	r3, #1
 800fb04:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb06:	2b07      	cmp	r3, #7
 800fb08:	dd08      	ble.n	800fb1c <_svfprintf_r+0x10a4>
 800fb0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb0e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb10:	f003 f842 	bl	8012b98 <__ssprint_r>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	d000      	beq.n	800fb1a <_svfprintf_r+0x10a2>
 800fb18:	e18d      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fb1a:	af2f      	add	r7, sp, #188	; 0xbc
 800fb1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb1e:	9b08      	ldr	r3, [sp, #32]
 800fb20:	4694      	mov	ip, r2
 800fb22:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800fb24:	4463      	add	r3, ip
 800fb26:	1b5b      	subs	r3, r3, r5
 800fb28:	1b14      	subs	r4, r2, r4
 800fb2a:	429c      	cmp	r4, r3
 800fb2c:	dd00      	ble.n	800fb30 <_svfprintf_r+0x10b8>
 800fb2e:	001c      	movs	r4, r3
 800fb30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	dd12      	ble.n	800fb5c <_svfprintf_r+0x10e4>
 800fb36:	18e3      	adds	r3, r4, r3
 800fb38:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb3c:	603d      	str	r5, [r7, #0]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	607c      	str	r4, [r7, #4]
 800fb42:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb44:	3708      	adds	r7, #8
 800fb46:	2b07      	cmp	r3, #7
 800fb48:	dd08      	ble.n	800fb5c <_svfprintf_r+0x10e4>
 800fb4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb50:	f003 f822 	bl	8012b98 <__ssprint_r>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	d000      	beq.n	800fb5a <_svfprintf_r+0x10e2>
 800fb58:	e16d      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fb5a:	af2f      	add	r7, sp, #188	; 0xbc
 800fb5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800fb60:	2510      	movs	r5, #16
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	43e2      	mvns	r2, r4
 800fb66:	17d2      	asrs	r2, r2, #31
 800fb68:	4014      	ands	r4, r2
 800fb6a:	1b1c      	subs	r4, r3, r4
 800fb6c:	2c00      	cmp	r4, #0
 800fb6e:	dc00      	bgt.n	800fb72 <_svfprintf_r+0x10fa>
 800fb70:	e6b0      	b.n	800f8d4 <_svfprintf_r+0xe5c>
 800fb72:	0039      	movs	r1, r7
 800fb74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb76:	4807      	ldr	r0, [pc, #28]	; (800fb94 <_svfprintf_r+0x111c>)
 800fb78:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	3108      	adds	r1, #8
 800fb7e:	6038      	str	r0, [r7, #0]
 800fb80:	2c10      	cmp	r4, #16
 800fb82:	dd00      	ble.n	800fb86 <_svfprintf_r+0x110e>
 800fb84:	e096      	b.n	800fcb4 <_svfprintf_r+0x123c>
 800fb86:	1912      	adds	r2, r2, r4
 800fb88:	607c      	str	r4, [r7, #4]
 800fb8a:	922e      	str	r2, [sp, #184]	; 0xb8
 800fb8c:	e6dd      	b.n	800f94a <_svfprintf_r+0xed2>
 800fb8e:	46c0      	nop			; (mov r8, r8)
 800fb90:	08016076 	.word	0x08016076
 800fb94:	08016088 	.word	0x08016088
 800fb98:	2010      	movs	r0, #16
 800fb9a:	1812      	adds	r2, r2, r0
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	922e      	str	r2, [sp, #184]	; 0xb8
 800fba0:	932d      	str	r3, [sp, #180]	; 0xb4
 800fba2:	2b07      	cmp	r3, #7
 800fba4:	dd08      	ble.n	800fbb8 <_svfprintf_r+0x1140>
 800fba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fba8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbaa:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbac:	f002 fff4 	bl	8012b98 <__ssprint_r>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d000      	beq.n	800fbb6 <_svfprintf_r+0x113e>
 800fbb4:	e13f      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fbb6:	a92f      	add	r1, sp, #188	; 0xbc
 800fbb8:	000f      	movs	r7, r1
 800fbba:	3c10      	subs	r4, #16
 800fbbc:	e768      	b.n	800fa90 <_svfprintf_r+0x1018>
 800fbbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d05d      	beq.n	800fc80 <_svfprintf_r+0x1208>
 800fbc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	9310      	str	r3, [sp, #64]	; 0x40
 800fbca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fbce:	603b      	str	r3, [r7, #0]
 800fbd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbd2:	607b      	str	r3, [r7, #4]
 800fbd4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	189b      	adds	r3, r3, r2
 800fbda:	932e      	str	r3, [sp, #184]	; 0xb8
 800fbdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbde:	3301      	adds	r3, #1
 800fbe0:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbe2:	2b07      	cmp	r3, #7
 800fbe4:	dd08      	ble.n	800fbf8 <_svfprintf_r+0x1180>
 800fbe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbe8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbea:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbec:	f002 ffd4 	bl	8012b98 <__ssprint_r>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d000      	beq.n	800fbf6 <_svfprintf_r+0x117e>
 800fbf4:	e11f      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fbf6:	af2f      	add	r7, sp, #188	; 0xbc
 800fbf8:	9b08      	ldr	r3, [sp, #32]
 800fbfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fbfc:	189c      	adds	r4, r3, r2
 800fbfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc00:	1b64      	subs	r4, r4, r5
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	429c      	cmp	r4, r3
 800fc06:	dd00      	ble.n	800fc0a <_svfprintf_r+0x1192>
 800fc08:	001c      	movs	r4, r3
 800fc0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fc0c:	2c00      	cmp	r4, #0
 800fc0e:	dd12      	ble.n	800fc36 <_svfprintf_r+0x11be>
 800fc10:	18e3      	adds	r3, r4, r3
 800fc12:	932e      	str	r3, [sp, #184]	; 0xb8
 800fc14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fc16:	603d      	str	r5, [r7, #0]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	607c      	str	r4, [r7, #4]
 800fc1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc1e:	3708      	adds	r7, #8
 800fc20:	2b07      	cmp	r3, #7
 800fc22:	dd08      	ble.n	800fc36 <_svfprintf_r+0x11be>
 800fc24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc26:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc28:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc2a:	f002 ffb5 	bl	8012b98 <__ssprint_r>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d000      	beq.n	800fc34 <_svfprintf_r+0x11bc>
 800fc32:	e100      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fc34:	af2f      	add	r7, sp, #188	; 0xbc
 800fc36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc38:	781a      	ldrb	r2, [r3, #0]
 800fc3a:	43e3      	mvns	r3, r4
 800fc3c:	17db      	asrs	r3, r3, #31
 800fc3e:	401c      	ands	r4, r3
 800fc40:	1b14      	subs	r4, r2, r4
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	dd18      	ble.n	800fc78 <_svfprintf_r+0x1200>
 800fc46:	0039      	movs	r1, r7
 800fc48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fc4a:	48aa      	ldr	r0, [pc, #680]	; (800fef4 <_svfprintf_r+0x147c>)
 800fc4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fc4e:	3301      	adds	r3, #1
 800fc50:	3108      	adds	r1, #8
 800fc52:	6038      	str	r0, [r7, #0]
 800fc54:	2c10      	cmp	r4, #16
 800fc56:	dc1a      	bgt.n	800fc8e <_svfprintf_r+0x1216>
 800fc58:	1912      	adds	r2, r2, r4
 800fc5a:	607c      	str	r4, [r7, #4]
 800fc5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fc5e:	000f      	movs	r7, r1
 800fc60:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc62:	2b07      	cmp	r3, #7
 800fc64:	dd08      	ble.n	800fc78 <_svfprintf_r+0x1200>
 800fc66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc6c:	f002 ff94 	bl	8012b98 <__ssprint_r>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d000      	beq.n	800fc76 <_svfprintf_r+0x11fe>
 800fc74:	e0df      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fc76:	af2f      	add	r7, sp, #188	; 0xbc
 800fc78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	18ed      	adds	r5, r5, r3
 800fc7e:	e724      	b.n	800faca <_svfprintf_r+0x1052>
 800fc80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fc82:	3b01      	subs	r3, #1
 800fc84:	9312      	str	r3, [sp, #72]	; 0x48
 800fc86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	9311      	str	r3, [sp, #68]	; 0x44
 800fc8c:	e79d      	b.n	800fbca <_svfprintf_r+0x1152>
 800fc8e:	2010      	movs	r0, #16
 800fc90:	1812      	adds	r2, r2, r0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	922e      	str	r2, [sp, #184]	; 0xb8
 800fc96:	932d      	str	r3, [sp, #180]	; 0xb4
 800fc98:	2b07      	cmp	r3, #7
 800fc9a:	dd08      	ble.n	800fcae <_svfprintf_r+0x1236>
 800fc9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fca0:	aa2c      	add	r2, sp, #176	; 0xb0
 800fca2:	f002 ff79 	bl	8012b98 <__ssprint_r>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d000      	beq.n	800fcac <_svfprintf_r+0x1234>
 800fcaa:	e0c4      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fcac:	a92f      	add	r1, sp, #188	; 0xbc
 800fcae:	000f      	movs	r7, r1
 800fcb0:	3c10      	subs	r4, #16
 800fcb2:	e7c8      	b.n	800fc46 <_svfprintf_r+0x11ce>
 800fcb4:	3210      	adds	r2, #16
 800fcb6:	607d      	str	r5, [r7, #4]
 800fcb8:	922e      	str	r2, [sp, #184]	; 0xb8
 800fcba:	932d      	str	r3, [sp, #180]	; 0xb4
 800fcbc:	2b07      	cmp	r3, #7
 800fcbe:	dd08      	ble.n	800fcd2 <_svfprintf_r+0x125a>
 800fcc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fcc4:	aa2c      	add	r2, sp, #176	; 0xb0
 800fcc6:	f002 ff67 	bl	8012b98 <__ssprint_r>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d000      	beq.n	800fcd0 <_svfprintf_r+0x1258>
 800fcce:	e0b2      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fcd0:	a92f      	add	r1, sp, #188	; 0xbc
 800fcd2:	000f      	movs	r7, r1
 800fcd4:	3c10      	subs	r4, #16
 800fcd6:	e74c      	b.n	800fb72 <_svfprintf_r+0x10fa>
 800fcd8:	003c      	movs	r4, r7
 800fcda:	9919      	ldr	r1, [sp, #100]	; 0x64
 800fcdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fcde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fce0:	3101      	adds	r1, #1
 800fce2:	3301      	adds	r3, #1
 800fce4:	3408      	adds	r4, #8
 800fce6:	2a01      	cmp	r2, #1
 800fce8:	dc03      	bgt.n	800fcf2 <_svfprintf_r+0x127a>
 800fcea:	2201      	movs	r2, #1
 800fcec:	4216      	tst	r6, r2
 800fcee:	d100      	bne.n	800fcf2 <_svfprintf_r+0x127a>
 800fcf0:	e07f      	b.n	800fdf2 <_svfprintf_r+0x137a>
 800fcf2:	9a08      	ldr	r2, [sp, #32]
 800fcf4:	912e      	str	r1, [sp, #184]	; 0xb8
 800fcf6:	603a      	str	r2, [r7, #0]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	932d      	str	r3, [sp, #180]	; 0xb4
 800fcfc:	607a      	str	r2, [r7, #4]
 800fcfe:	2b07      	cmp	r3, #7
 800fd00:	dd08      	ble.n	800fd14 <_svfprintf_r+0x129c>
 800fd02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd06:	aa2c      	add	r2, sp, #176	; 0xb0
 800fd08:	f002 ff46 	bl	8012b98 <__ssprint_r>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d000      	beq.n	800fd12 <_svfprintf_r+0x129a>
 800fd10:	e091      	b.n	800fe36 <_svfprintf_r+0x13be>
 800fd12:	ac2f      	add	r4, sp, #188	; 0xbc
 800fd14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fd16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fd1c:	6063      	str	r3, [r4, #4]
 800fd1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fd20:	3408      	adds	r4, #8
 800fd22:	189b      	adds	r3, r3, r2
 800fd24:	932e      	str	r3, [sp, #184]	; 0xb8
 800fd26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd28:	3301      	adds	r3, #1
 800fd2a:	932d      	str	r3, [sp, #180]	; 0xb4
 800fd2c:	2b07      	cmp	r3, #7
 800fd2e:	dd07      	ble.n	800fd40 <_svfprintf_r+0x12c8>
 800fd30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd32:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd34:	aa2c      	add	r2, sp, #176	; 0xb0
 800fd36:	f002 ff2f 	bl	8012b98 <__ssprint_r>
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d17b      	bne.n	800fe36 <_svfprintf_r+0x13be>
 800fd3e:	ac2f      	add	r4, sp, #188	; 0xbc
 800fd40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd42:	2200      	movs	r2, #0
 800fd44:	9814      	ldr	r0, [sp, #80]	; 0x50
 800fd46:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fd48:	9309      	str	r3, [sp, #36]	; 0x24
 800fd4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd4c:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800fd4e:	1e5d      	subs	r5, r3, #1
 800fd50:	2300      	movs	r3, #0
 800fd52:	f7f0 fb79 	bl	8000448 <__aeabi_dcmpeq>
 800fd56:	2800      	cmp	r0, #0
 800fd58:	d126      	bne.n	800fda8 <_svfprintf_r+0x1330>
 800fd5a:	9b08      	ldr	r3, [sp, #32]
 800fd5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd5e:	3301      	adds	r3, #1
 800fd60:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	1e7b      	subs	r3, r7, #1
 800fd66:	3201      	adds	r2, #1
 800fd68:	185b      	adds	r3, r3, r1
 800fd6a:	6065      	str	r5, [r4, #4]
 800fd6c:	932e      	str	r3, [sp, #184]	; 0xb8
 800fd6e:	922d      	str	r2, [sp, #180]	; 0xb4
 800fd70:	3408      	adds	r4, #8
 800fd72:	2a07      	cmp	r2, #7
 800fd74:	dd07      	ble.n	800fd86 <_svfprintf_r+0x130e>
 800fd76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd78:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd7a:	aa2c      	add	r2, sp, #176	; 0xb0
 800fd7c:	f002 ff0c 	bl	8012b98 <__ssprint_r>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	d158      	bne.n	800fe36 <_svfprintf_r+0x13be>
 800fd84:	ac2f      	add	r4, sp, #188	; 0xbc
 800fd86:	ab28      	add	r3, sp, #160	; 0xa0
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fd8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fd8e:	6063      	str	r3, [r4, #4]
 800fd90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fd92:	189b      	adds	r3, r3, r2
 800fd94:	932e      	str	r3, [sp, #184]	; 0xb8
 800fd96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fd98:	3301      	adds	r3, #1
 800fd9a:	932d      	str	r3, [sp, #180]	; 0xb4
 800fd9c:	2b07      	cmp	r3, #7
 800fd9e:	dd00      	ble.n	800fda2 <_svfprintf_r+0x132a>
 800fda0:	e638      	b.n	800fa14 <_svfprintf_r+0xf9c>
 800fda2:	3408      	adds	r4, #8
 800fda4:	0027      	movs	r7, r4
 800fda6:	e595      	b.n	800f8d4 <_svfprintf_r+0xe5c>
 800fda8:	2710      	movs	r7, #16
 800fdaa:	2d00      	cmp	r5, #0
 800fdac:	ddeb      	ble.n	800fd86 <_svfprintf_r+0x130e>
 800fdae:	0021      	movs	r1, r4
 800fdb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fdb2:	4850      	ldr	r0, [pc, #320]	; (800fef4 <_svfprintf_r+0x147c>)
 800fdb4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	3108      	adds	r1, #8
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	2d10      	cmp	r5, #16
 800fdbe:	dc07      	bgt.n	800fdd0 <_svfprintf_r+0x1358>
 800fdc0:	6065      	str	r5, [r4, #4]
 800fdc2:	000c      	movs	r4, r1
 800fdc4:	18ad      	adds	r5, r5, r2
 800fdc6:	952e      	str	r5, [sp, #184]	; 0xb8
 800fdc8:	932d      	str	r3, [sp, #180]	; 0xb4
 800fdca:	2b07      	cmp	r3, #7
 800fdcc:	dddb      	ble.n	800fd86 <_svfprintf_r+0x130e>
 800fdce:	e7d2      	b.n	800fd76 <_svfprintf_r+0x12fe>
 800fdd0:	3210      	adds	r2, #16
 800fdd2:	6067      	str	r7, [r4, #4]
 800fdd4:	922e      	str	r2, [sp, #184]	; 0xb8
 800fdd6:	932d      	str	r3, [sp, #180]	; 0xb4
 800fdd8:	2b07      	cmp	r3, #7
 800fdda:	dd07      	ble.n	800fdec <_svfprintf_r+0x1374>
 800fddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdde:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fde0:	aa2c      	add	r2, sp, #176	; 0xb0
 800fde2:	f002 fed9 	bl	8012b98 <__ssprint_r>
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d125      	bne.n	800fe36 <_svfprintf_r+0x13be>
 800fdea:	a92f      	add	r1, sp, #188	; 0xbc
 800fdec:	000c      	movs	r4, r1
 800fdee:	3d10      	subs	r5, #16
 800fdf0:	e7dd      	b.n	800fdae <_svfprintf_r+0x1336>
 800fdf2:	9808      	ldr	r0, [sp, #32]
 800fdf4:	912e      	str	r1, [sp, #184]	; 0xb8
 800fdf6:	c705      	stmia	r7!, {r0, r2}
 800fdf8:	932d      	str	r3, [sp, #180]	; 0xb4
 800fdfa:	e7e6      	b.n	800fdca <_svfprintf_r+0x1352>
 800fdfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fdfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fe00:	2510      	movs	r5, #16
 800fe02:	1a9c      	subs	r4, r3, r2
 800fe04:	2c00      	cmp	r4, #0
 800fe06:	dc00      	bgt.n	800fe0a <_svfprintf_r+0x1392>
 800fe08:	e567      	b.n	800f8da <_svfprintf_r+0xe62>
 800fe0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fe0c:	493a      	ldr	r1, [pc, #232]	; (800fef8 <_svfprintf_r+0x1480>)
 800fe0e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fe10:	3301      	adds	r3, #1
 800fe12:	6039      	str	r1, [r7, #0]
 800fe14:	2c10      	cmp	r4, #16
 800fe16:	dc19      	bgt.n	800fe4c <_svfprintf_r+0x13d4>
 800fe18:	607c      	str	r4, [r7, #4]
 800fe1a:	18a4      	adds	r4, r4, r2
 800fe1c:	942e      	str	r4, [sp, #184]	; 0xb8
 800fe1e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fe20:	2b07      	cmp	r3, #7
 800fe22:	dc00      	bgt.n	800fe26 <_svfprintf_r+0x13ae>
 800fe24:	e559      	b.n	800f8da <_svfprintf_r+0xe62>
 800fe26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe2a:	aa2c      	add	r2, sp, #176	; 0xb0
 800fe2c:	f002 feb4 	bl	8012b98 <__ssprint_r>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d100      	bne.n	800fe36 <_svfprintf_r+0x13be>
 800fe34:	e551      	b.n	800f8da <_svfprintf_r+0xe62>
 800fe36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <_svfprintf_r+0x13c8>
 800fe3c:	f7ff f845 	bl	800eeca <_svfprintf_r+0x452>
 800fe40:	0019      	movs	r1, r3
 800fe42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe44:	f7fd fd80 	bl	800d948 <_free_r>
 800fe48:	f7ff f83f 	bl	800eeca <_svfprintf_r+0x452>
 800fe4c:	3210      	adds	r2, #16
 800fe4e:	607d      	str	r5, [r7, #4]
 800fe50:	922e      	str	r2, [sp, #184]	; 0xb8
 800fe52:	932d      	str	r3, [sp, #180]	; 0xb4
 800fe54:	3708      	adds	r7, #8
 800fe56:	2b07      	cmp	r3, #7
 800fe58:	dd07      	ble.n	800fe6a <_svfprintf_r+0x13f2>
 800fe5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe5e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fe60:	f002 fe9a 	bl	8012b98 <__ssprint_r>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d1e6      	bne.n	800fe36 <_svfprintf_r+0x13be>
 800fe68:	af2f      	add	r7, sp, #188	; 0xbc
 800fe6a:	3c10      	subs	r4, #16
 800fe6c:	e7cd      	b.n	800fe0a <_svfprintf_r+0x1392>
 800fe6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe70:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe72:	f7fd fd69 	bl	800d948 <_free_r>
 800fe76:	e549      	b.n	800f90c <_svfprintf_r+0xe94>
 800fe78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <_svfprintf_r+0x140a>
 800fe7e:	f7ff f824 	bl	800eeca <_svfprintf_r+0x452>
 800fe82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fe84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe86:	aa2c      	add	r2, sp, #176	; 0xb0
 800fe88:	f002 fe86 	bl	8012b98 <__ssprint_r>
 800fe8c:	f7ff f81d 	bl	800eeca <_svfprintf_r+0x452>
 800fe90:	0034      	movs	r4, r6
 800fe92:	2a00      	cmp	r2, #0
 800fe94:	d101      	bne.n	800fe9a <_svfprintf_r+0x1422>
 800fe96:	f7fe ff8c 	bl	800edb2 <_svfprintf_r+0x33a>
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d101      	bne.n	800fea2 <_svfprintf_r+0x142a>
 800fe9e:	f7ff fc01 	bl	800f6a4 <_svfprintf_r+0xc2c>
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d100      	bne.n	800fea8 <_svfprintf_r+0x1430>
 800fea6:	e459      	b.n	800f75c <_svfprintf_r+0xce4>
 800fea8:	2507      	movs	r5, #7
 800feaa:	ab58      	add	r3, sp, #352	; 0x160
 800feac:	9308      	str	r3, [sp, #32]
 800feae:	9a08      	ldr	r2, [sp, #32]
 800feb0:	0013      	movs	r3, r2
 800feb2:	3b01      	subs	r3, #1
 800feb4:	9308      	str	r3, [sp, #32]
 800feb6:	9b06      	ldr	r3, [sp, #24]
 800feb8:	9908      	ldr	r1, [sp, #32]
 800feba:	402b      	ands	r3, r5
 800febc:	3330      	adds	r3, #48	; 0x30
 800febe:	700b      	strb	r3, [r1, #0]
 800fec0:	9907      	ldr	r1, [sp, #28]
 800fec2:	074e      	lsls	r6, r1, #29
 800fec4:	9906      	ldr	r1, [sp, #24]
 800fec6:	08c8      	lsrs	r0, r1, #3
 800fec8:	9907      	ldr	r1, [sp, #28]
 800feca:	4306      	orrs	r6, r0
 800fecc:	08c9      	lsrs	r1, r1, #3
 800fece:	9107      	str	r1, [sp, #28]
 800fed0:	0031      	movs	r1, r6
 800fed2:	9807      	ldr	r0, [sp, #28]
 800fed4:	9606      	str	r6, [sp, #24]
 800fed6:	4301      	orrs	r1, r0
 800fed8:	d1e9      	bne.n	800feae <_svfprintf_r+0x1436>
 800feda:	07e1      	lsls	r1, r4, #31
 800fedc:	d400      	bmi.n	800fee0 <_svfprintf_r+0x1468>
 800fede:	e42a      	b.n	800f736 <_svfprintf_r+0xcbe>
 800fee0:	2b30      	cmp	r3, #48	; 0x30
 800fee2:	d100      	bne.n	800fee6 <_svfprintf_r+0x146e>
 800fee4:	e427      	b.n	800f736 <_svfprintf_r+0xcbe>
 800fee6:	2130      	movs	r1, #48	; 0x30
 800fee8:	9b08      	ldr	r3, [sp, #32]
 800feea:	3b01      	subs	r3, #1
 800feec:	7019      	strb	r1, [r3, #0]
 800feee:	1e93      	subs	r3, r2, #2
 800fef0:	9308      	str	r3, [sp, #32]
 800fef2:	e420      	b.n	800f736 <_svfprintf_r+0xcbe>
 800fef4:	08016088 	.word	0x08016088
 800fef8:	08016078 	.word	0x08016078

0800fefc <__ssvfscanf_r>:
 800fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fefe:	4ca7      	ldr	r4, [pc, #668]	; (801019c <__ssvfscanf_r+0x2a0>)
 800ff00:	44a5      	add	sp, r4
 800ff02:	af02      	add	r7, sp, #8
 800ff04:	633b      	str	r3, [r7, #48]	; 0x30
 800ff06:	000b      	movs	r3, r1
 800ff08:	6378      	str	r0, [r7, #52]	; 0x34
 800ff0a:	6479      	str	r1, [r7, #68]	; 0x44
 800ff0c:	61ba      	str	r2, [r7, #24]
 800ff0e:	220c      	movs	r2, #12
 800ff10:	5e9a      	ldrsh	r2, [r3, r2]
 800ff12:	2380      	movs	r3, #128	; 0x80
 800ff14:	019b      	lsls	r3, r3, #6
 800ff16:	421a      	tst	r2, r3
 800ff18:	d105      	bne.n	800ff26 <__ssvfscanf_r+0x2a>
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	818b      	strh	r3, [r1, #12]
 800ff1e:	4aa0      	ldr	r2, [pc, #640]	; (80101a0 <__ssvfscanf_r+0x2a4>)
 800ff20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ff22:	4013      	ands	r3, r2
 800ff24:	664b      	str	r3, [r1, #100]	; 0x64
 800ff26:	2300      	movs	r3, #0
 800ff28:	617b      	str	r3, [r7, #20]
 800ff2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ff2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff30:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff34:	69bb      	ldr	r3, [r7, #24]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	3201      	adds	r2, #1
 800ff3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff3e:	61ba      	str	r2, [r7, #24]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d100      	bne.n	800ff46 <__ssvfscanf_r+0x4a>
 800ff44:	e0d7      	b.n	80100f6 <__ssvfscanf_r+0x1fa>
 800ff46:	2608      	movs	r6, #8
 800ff48:	2108      	movs	r1, #8
 800ff4a:	4a96      	ldr	r2, [pc, #600]	; (80101a4 <__ssvfscanf_r+0x2a8>)
 800ff4c:	5cd2      	ldrb	r2, [r2, r3]
 800ff4e:	4016      	ands	r6, r2
 800ff50:	420a      	tst	r2, r1
 800ff52:	d01d      	beq.n	800ff90 <__ssvfscanf_r+0x94>
 800ff54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff56:	685b      	ldr	r3, [r3, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	dd12      	ble.n	800ff82 <__ssvfscanf_r+0x86>
 800ff5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff5e:	4991      	ldr	r1, [pc, #580]	; (80101a4 <__ssvfscanf_r+0x2a8>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	781a      	ldrb	r2, [r3, #0]
 800ff64:	5c8a      	ldrb	r2, [r1, r2]
 800ff66:	2108      	movs	r1, #8
 800ff68:	420a      	tst	r2, r1
 800ff6a:	d0e3      	beq.n	800ff34 <__ssvfscanf_r+0x38>
 800ff6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff70:	3201      	adds	r2, #1
 800ff72:	63ba      	str	r2, [r7, #56]	; 0x38
 800ff74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff76:	3301      	adds	r3, #1
 800ff78:	6852      	ldr	r2, [r2, #4]
 800ff7a:	600b      	str	r3, [r1, #0]
 800ff7c:	3a01      	subs	r2, #1
 800ff7e:	604a      	str	r2, [r1, #4]
 800ff80:	e7e8      	b.n	800ff54 <__ssvfscanf_r+0x58>
 800ff82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff86:	f002 fec7 	bl	8012d18 <__ssrefill_r>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d0e6      	beq.n	800ff5c <__ssvfscanf_r+0x60>
 800ff8e:	e7d1      	b.n	800ff34 <__ssvfscanf_r+0x38>
 800ff90:	2b25      	cmp	r3, #37	; 0x25
 800ff92:	d165      	bne.n	8010060 <__ssvfscanf_r+0x164>
 800ff94:	250a      	movs	r5, #10
 800ff96:	2480      	movs	r4, #128	; 0x80
 800ff98:	69ba      	ldr	r2, [r7, #24]
 800ff9a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800ff9c:	3b16      	subs	r3, #22
 800ff9e:	69b9      	ldr	r1, [r7, #24]
 800ffa0:	3101      	adds	r1, #1
 800ffa2:	61b9      	str	r1, [r7, #24]
 800ffa4:	7811      	ldrb	r1, [r2, #0]
 800ffa6:	0008      	movs	r0, r1
 800ffa8:	3825      	subs	r0, #37	; 0x25
 800ffaa:	2855      	cmp	r0, #85	; 0x55
 800ffac:	d900      	bls.n	800ffb0 <__ssvfscanf_r+0xb4>
 800ffae:	e170      	b.n	8010292 <__ssvfscanf_r+0x396>
 800ffb0:	f7f0 f8ba 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ffb4:	016f0056 	.word	0x016f0056
 800ffb8:	016f016f 	.word	0x016f016f
 800ffbc:	0081016f 	.word	0x0081016f
 800ffc0:	016f016f 	.word	0x016f016f
 800ffc4:	016f016f 	.word	0x016f016f
 800ffc8:	00b8016f 	.word	0x00b8016f
 800ffcc:	00b800b8 	.word	0x00b800b8
 800ffd0:	00b800b8 	.word	0x00b800b8
 800ffd4:	00b800b8 	.word	0x00b800b8
 800ffd8:	00b800b8 	.word	0x00b800b8
 800ffdc:	016f00b8 	.word	0x016f00b8
 800ffe0:	016f016f 	.word	0x016f016f
 800ffe4:	016f016f 	.word	0x016f016f
 800ffe8:	016f016f 	.word	0x016f016f
 800ffec:	016f00d8 	.word	0x016f00d8
 800fff0:	00c1010a 	.word	0x00c1010a
 800fff4:	00d800d8 	.word	0x00d800d8
 800fff8:	016f00d8 	.word	0x016f00d8
 800fffc:	016f016f 	.word	0x016f016f
 8010000:	009f016f 	.word	0x009f016f
 8010004:	016f016f 	.word	0x016f016f
 8010008:	016f00c9 	.word	0x016f00c9
 801000c:	016f016f 	.word	0x016f016f
 8010010:	016f00f0 	.word	0x016f00f0
 8010014:	016f016f 	.word	0x016f016f
 8010018:	00d1016f 	.word	0x00d1016f
 801001c:	016f016f 	.word	0x016f016f
 8010020:	016f00fe 	.word	0x016f00fe
 8010024:	016f016f 	.word	0x016f016f
 8010028:	016f016f 	.word	0x016f016f
 801002c:	016f00d8 	.word	0x016f00d8
 8010030:	00c3010c 	.word	0x00c3010c
 8010034:	00d800d8 	.word	0x00d800d8
 8010038:	009400d8 	.word	0x009400d8
 801003c:	009f012f 	.word	0x009f012f
 8010040:	0088016f 	.word	0x0088016f
 8010044:	011200a9 	.word	0x011200a9
 8010048:	011000cb 	.word	0x011000cb
 801004c:	016f016f 	.word	0x016f016f
 8010050:	00a600f2 	.word	0x00a600f2
 8010054:	016f00cf 	.word	0x016f00cf
 8010058:	00d1016f 	.word	0x00d1016f
 801005c:	00a6016f 	.word	0x00a6016f
 8010060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	2b00      	cmp	r3, #0
 8010066:	dd12      	ble.n	801008e <__ssvfscanf_r+0x192>
 8010068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801006a:	69ba      	ldr	r2, [r7, #24]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3a01      	subs	r2, #1
 8010070:	7819      	ldrb	r1, [r3, #0]
 8010072:	7812      	ldrb	r2, [r2, #0]
 8010074:	4291      	cmp	r1, r2
 8010076:	d13e      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 8010078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801007a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801007c:	6852      	ldr	r2, [r2, #4]
 801007e:	3301      	adds	r3, #1
 8010080:	600b      	str	r3, [r1, #0]
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	3a01      	subs	r2, #1
 8010086:	604a      	str	r2, [r1, #4]
 8010088:	3301      	adds	r3, #1
 801008a:	63bb      	str	r3, [r7, #56]	; 0x38
 801008c:	e752      	b.n	800ff34 <__ssvfscanf_r+0x38>
 801008e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010092:	f002 fe41 	bl	8012d18 <__ssrefill_r>
 8010096:	2800      	cmp	r0, #0
 8010098:	d0e6      	beq.n	8010068 <__ssvfscanf_r+0x16c>
 801009a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009c:	2b00      	cmp	r3, #0
 801009e:	d003      	beq.n	80100a8 <__ssvfscanf_r+0x1ac>
 80100a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100a2:	899b      	ldrh	r3, [r3, #12]
 80100a4:	065b      	lsls	r3, r3, #25
 80100a6:	d526      	bpl.n	80100f6 <__ssvfscanf_r+0x1fa>
 80100a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d000      	beq.n	80100b0 <__ssvfscanf_r+0x1b4>
 80100ae:	e0f6      	b.n	801029e <__ssvfscanf_r+0x3a2>
 80100b0:	3b01      	subs	r3, #1
 80100b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100b4:	e104      	b.n	80102c0 <__ssvfscanf_r+0x3c4>
 80100b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100b8:	4332      	orrs	r2, r6
 80100ba:	63fa      	str	r2, [r7, #60]	; 0x3c
 80100bc:	d11b      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 80100be:	2610      	movs	r6, #16
 80100c0:	69ba      	ldr	r2, [r7, #24]
 80100c2:	e76c      	b.n	800ff9e <__ssvfscanf_r+0xa2>
 80100c4:	421e      	tst	r6, r3
 80100c6:	d116      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 80100c8:	7851      	ldrb	r1, [r2, #1]
 80100ca:	296c      	cmp	r1, #108	; 0x6c
 80100cc:	d103      	bne.n	80100d6 <__ssvfscanf_r+0x1da>
 80100ce:	3202      	adds	r2, #2
 80100d0:	61ba      	str	r2, [r7, #24]
 80100d2:	2202      	movs	r2, #2
 80100d4:	e000      	b.n	80100d8 <__ssvfscanf_r+0x1dc>
 80100d6:	2201      	movs	r2, #1
 80100d8:	4316      	orrs	r6, r2
 80100da:	e7f1      	b.n	80100c0 <__ssvfscanf_r+0x1c4>
 80100dc:	421e      	tst	r6, r3
 80100de:	d10a      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 80100e0:	7851      	ldrb	r1, [r2, #1]
 80100e2:	2968      	cmp	r1, #104	; 0x68
 80100e4:	d103      	bne.n	80100ee <__ssvfscanf_r+0x1f2>
 80100e6:	3202      	adds	r2, #2
 80100e8:	61ba      	str	r2, [r7, #24]
 80100ea:	2208      	movs	r2, #8
 80100ec:	e7f4      	b.n	80100d8 <__ssvfscanf_r+0x1dc>
 80100ee:	2204      	movs	r2, #4
 80100f0:	e7f2      	b.n	80100d8 <__ssvfscanf_r+0x1dc>
 80100f2:	421e      	tst	r6, r3
 80100f4:	d0ed      	beq.n	80100d2 <__ssvfscanf_r+0x1d6>
 80100f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d000      	beq.n	80100fe <__ssvfscanf_r+0x202>
 80100fc:	e0da      	b.n	80102b4 <__ssvfscanf_r+0x3b8>
 80100fe:	e0df      	b.n	80102c0 <__ssvfscanf_r+0x3c4>
 8010100:	421e      	tst	r6, r3
 8010102:	d0dd      	beq.n	80100c0 <__ssvfscanf_r+0x1c4>
 8010104:	e7f7      	b.n	80100f6 <__ssvfscanf_r+0x1fa>
 8010106:	228f      	movs	r2, #143	; 0x8f
 8010108:	218f      	movs	r1, #143	; 0x8f
 801010a:	4032      	ands	r2, r6
 801010c:	420e      	tst	r6, r1
 801010e:	d1f2      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 8010110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010112:	2900      	cmp	r1, #0
 8010114:	d104      	bne.n	8010120 <__ssvfscanf_r+0x224>
 8010116:	b082      	sub	sp, #8
 8010118:	a902      	add	r1, sp, #8
 801011a:	6439      	str	r1, [r7, #64]	; 0x40
 801011c:	600a      	str	r2, [r1, #0]
 801011e:	604a      	str	r2, [r1, #4]
 8010120:	4326      	orrs	r6, r4
 8010122:	e7cd      	b.n	80100c0 <__ssvfscanf_r+0x1c4>
 8010124:	228f      	movs	r2, #143	; 0x8f
 8010126:	4216      	tst	r6, r2
 8010128:	d1e5      	bne.n	80100f6 <__ssvfscanf_r+0x1fa>
 801012a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801012c:	436a      	muls	r2, r5
 801012e:	3a30      	subs	r2, #48	; 0x30
 8010130:	188a      	adds	r2, r1, r2
 8010132:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010134:	e7c4      	b.n	80100c0 <__ssvfscanf_r+0x1c4>
 8010136:	2301      	movs	r3, #1
 8010138:	431e      	orrs	r6, r3
 801013a:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <__ssvfscanf_r+0x2ac>)
 801013c:	617b      	str	r3, [r7, #20]
 801013e:	230a      	movs	r3, #10
 8010140:	2403      	movs	r4, #3
 8010142:	627b      	str	r3, [r7, #36]	; 0x24
 8010144:	e00f      	b.n	8010166 <__ssvfscanf_r+0x26a>
 8010146:	2301      	movs	r3, #1
 8010148:	431e      	orrs	r6, r3
 801014a:	4b18      	ldr	r3, [pc, #96]	; (80101ac <__ssvfscanf_r+0x2b0>)
 801014c:	617b      	str	r3, [r7, #20]
 801014e:	2308      	movs	r3, #8
 8010150:	e7f6      	b.n	8010140 <__ssvfscanf_r+0x244>
 8010152:	4b16      	ldr	r3, [pc, #88]	; (80101ac <__ssvfscanf_r+0x2b0>)
 8010154:	e7f2      	b.n	801013c <__ssvfscanf_r+0x240>
 8010156:	2380      	movs	r3, #128	; 0x80
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	431e      	orrs	r6, r3
 801015c:	4b13      	ldr	r3, [pc, #76]	; (80101ac <__ssvfscanf_r+0x2b0>)
 801015e:	617b      	str	r3, [r7, #20]
 8010160:	2310      	movs	r3, #16
 8010162:	e7ed      	b.n	8010140 <__ssvfscanf_r+0x244>
 8010164:	2404      	movs	r4, #4
 8010166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	dd55      	ble.n	801021a <__ssvfscanf_r+0x31e>
 801016e:	0673      	lsls	r3, r6, #25
 8010170:	d407      	bmi.n	8010182 <__ssvfscanf_r+0x286>
 8010172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010174:	490b      	ldr	r1, [pc, #44]	; (80101a4 <__ssvfscanf_r+0x2a8>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	781a      	ldrb	r2, [r3, #0]
 801017a:	5c8a      	ldrb	r2, [r1, r2]
 801017c:	2108      	movs	r1, #8
 801017e:	420a      	tst	r2, r1
 8010180:	d152      	bne.n	8010228 <__ssvfscanf_r+0x32c>
 8010182:	1e60      	subs	r0, r4, #1
 8010184:	2803      	cmp	r0, #3
 8010186:	d863      	bhi.n	8010250 <__ssvfscanf_r+0x354>
 8010188:	f7ef ffce 	bl	8000128 <__gnu_thumb1_case_uhi>
 801018c:	03bd01da 	.word	0x03bd01da
 8010190:	068a0579 	.word	0x068a0579
 8010194:	2301      	movs	r3, #1
 8010196:	431e      	orrs	r6, r3
 8010198:	2402      	movs	r4, #2
 801019a:	e7e4      	b.n	8010166 <__ssvfscanf_r+0x26a>
 801019c:	fffffd34 	.word	0xfffffd34
 80101a0:	ffffdfff 	.word	0xffffdfff
 80101a4:	08015d71 	.word	0x08015d71
 80101a8:	0800d199 	.word	0x0800d199
 80101ac:	0800d2bd 	.word	0x0800d2bd
 80101b0:	2248      	movs	r2, #72	; 0x48
 80101b2:	2318      	movs	r3, #24
 80101b4:	189b      	adds	r3, r3, r2
 80101b6:	19d8      	adds	r0, r3, r7
 80101b8:	69b9      	ldr	r1, [r7, #24]
 80101ba:	f001 f9d7 	bl	801156c <__sccl>
 80101be:	2340      	movs	r3, #64	; 0x40
 80101c0:	2401      	movs	r4, #1
 80101c2:	61b8      	str	r0, [r7, #24]
 80101c4:	431e      	orrs	r6, r3
 80101c6:	e7ce      	b.n	8010166 <__ssvfscanf_r+0x26a>
 80101c8:	2301      	movs	r3, #1
 80101ca:	431e      	orrs	r6, r3
 80101cc:	2340      	movs	r3, #64	; 0x40
 80101ce:	2400      	movs	r4, #0
 80101d0:	431e      	orrs	r6, r3
 80101d2:	e7c8      	b.n	8010166 <__ssvfscanf_r+0x26a>
 80101d4:	2388      	movs	r3, #136	; 0x88
 80101d6:	e7bf      	b.n	8010158 <__ssvfscanf_r+0x25c>
 80101d8:	06f3      	lsls	r3, r6, #27
 80101da:	d500      	bpl.n	80101de <__ssvfscanf_r+0x2e2>
 80101dc:	e6aa      	b.n	800ff34 <__ssvfscanf_r+0x38>
 80101de:	2108      	movs	r1, #8
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	cb04      	ldmia	r3!, {r2}
 80101e4:	420e      	tst	r6, r1
 80101e6:	d003      	beq.n	80101f0 <__ssvfscanf_r+0x2f4>
 80101e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101ea:	7011      	strb	r1, [r2, #0]
 80101ec:	633b      	str	r3, [r7, #48]	; 0x30
 80101ee:	e6a1      	b.n	800ff34 <__ssvfscanf_r+0x38>
 80101f0:	0771      	lsls	r1, r6, #29
 80101f2:	d502      	bpl.n	80101fa <__ssvfscanf_r+0x2fe>
 80101f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101f6:	8011      	strh	r1, [r2, #0]
 80101f8:	e7f8      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 80101fa:	07f1      	lsls	r1, r6, #31
 80101fc:	d502      	bpl.n	8010204 <__ssvfscanf_r+0x308>
 80101fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010200:	6011      	str	r1, [r2, #0]
 8010202:	e7f3      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 8010204:	07b6      	lsls	r6, r6, #30
 8010206:	d5fa      	bpl.n	80101fe <__ssvfscanf_r+0x302>
 8010208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801020a:	6011      	str	r1, [r2, #0]
 801020c:	17c9      	asrs	r1, r1, #31
 801020e:	6051      	str	r1, [r2, #4]
 8010210:	e7ec      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 8010212:	4ba2      	ldr	r3, [pc, #648]	; (801049c <__ssvfscanf_r+0x5a0>)
 8010214:	617b      	str	r3, [r7, #20]
 8010216:	2300      	movs	r3, #0
 8010218:	e792      	b.n	8010140 <__ssvfscanf_r+0x244>
 801021a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801021c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801021e:	f002 fd7b 	bl	8012d18 <__ssrefill_r>
 8010222:	2800      	cmp	r0, #0
 8010224:	d0a3      	beq.n	801016e <__ssvfscanf_r+0x272>
 8010226:	e738      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801022a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801022c:	3201      	adds	r2, #1
 801022e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010232:	6852      	ldr	r2, [r2, #4]
 8010234:	3a01      	subs	r2, #1
 8010236:	604a      	str	r2, [r1, #4]
 8010238:	2a00      	cmp	r2, #0
 801023a:	dd02      	ble.n	8010242 <__ssvfscanf_r+0x346>
 801023c:	3301      	adds	r3, #1
 801023e:	600b      	str	r3, [r1, #0]
 8010240:	e797      	b.n	8010172 <__ssvfscanf_r+0x276>
 8010242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010246:	f002 fd67 	bl	8012d18 <__ssrefill_r>
 801024a:	2800      	cmp	r0, #0
 801024c:	d091      	beq.n	8010172 <__ssvfscanf_r+0x276>
 801024e:	e724      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010252:	2301      	movs	r3, #1
 8010254:	2a00      	cmp	r2, #0
 8010256:	d100      	bne.n	801025a <__ssvfscanf_r+0x35e>
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
 801025a:	2210      	movs	r2, #16
 801025c:	0034      	movs	r4, r6
 801025e:	4032      	ands	r2, r6
 8010260:	623a      	str	r2, [r7, #32]
 8010262:	401c      	ands	r4, r3
 8010264:	421e      	tst	r6, r3
 8010266:	d100      	bne.n	801026a <__ssvfscanf_r+0x36e>
 8010268:	e0f3      	b.n	8010452 <__ssvfscanf_r+0x556>
 801026a:	2a00      	cmp	r2, #0
 801026c:	d000      	beq.n	8010270 <__ssvfscanf_r+0x374>
 801026e:	e0b6      	b.n	80103de <__ssvfscanf_r+0x4e2>
 8010270:	2080      	movs	r0, #128	; 0x80
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	cb10      	ldmia	r3!, {r4}
 8010276:	613b      	str	r3, [r7, #16]
 8010278:	4206      	tst	r6, r0
 801027a:	d100      	bne.n	801027e <__ssvfscanf_r+0x382>
 801027c:	e0b7      	b.n	80103ee <__ssvfscanf_r+0x4f2>
 801027e:	2c00      	cmp	r4, #0
 8010280:	d007      	beq.n	8010292 <__ssvfscanf_r+0x396>
 8010282:	f7fb fe93 	bl	800bfac <malloc>
 8010286:	6338      	str	r0, [r7, #48]	; 0x30
 8010288:	2800      	cmp	r0, #0
 801028a:	d11f      	bne.n	80102cc <__ssvfscanf_r+0x3d0>
 801028c:	2301      	movs	r3, #1
 801028e:	425b      	negs	r3, r3
 8010290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010294:	2b00      	cmp	r3, #0
 8010296:	d013      	beq.n	80102c0 <__ssvfscanf_r+0x3c4>
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	3301      	adds	r3, #1
 801029c:	d10a      	bne.n	80102b4 <__ssvfscanf_r+0x3b8>
 801029e:	2400      	movs	r4, #0
 80102a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102a2:	681d      	ldr	r5, [r3, #0]
 80102a4:	88db      	ldrh	r3, [r3, #6]
 80102a6:	42a3      	cmp	r3, r4
 80102a8:	dd01      	ble.n	80102ae <__ssvfscanf_r+0x3b2>
 80102aa:	f001 f82a 	bl	8011302 <__ssvfscanf_r+0x1406>
 80102ae:	2301      	movs	r3, #1
 80102b0:	425b      	negs	r3, r3
 80102b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d001      	beq.n	80102c0 <__ssvfscanf_r+0x3c4>
 80102bc:	f7fb fe80 	bl	800bfc0 <free>
 80102c0:	46bd      	mov	sp, r7
 80102c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102c4:	23b1      	movs	r3, #177	; 0xb1
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	449d      	add	sp, r3
 80102ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	6023      	str	r3, [r4, #0]
 80102d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d2:	88de      	ldrh	r6, [r3, #6]
 80102d4:	889d      	ldrh	r5, [r3, #4]
 80102d6:	42ae      	cmp	r6, r5
 80102d8:	d30e      	bcc.n	80102f8 <__ssvfscanf_r+0x3fc>
 80102da:	4b71      	ldr	r3, [pc, #452]	; (80104a0 <__ssvfscanf_r+0x5a4>)
 80102dc:	429d      	cmp	r5, r3
 80102de:	d8d5      	bhi.n	801028c <__ssvfscanf_r+0x390>
 80102e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e2:	3508      	adds	r5, #8
 80102e4:	b2ad      	uxth	r5, r5
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	00a9      	lsls	r1, r5, #2
 80102ea:	f002 f901 	bl	80124f0 <realloc>
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d0cc      	beq.n	801028c <__ssvfscanf_r+0x390>
 80102f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f4:	6018      	str	r0, [r3, #0]
 80102f6:	809d      	strh	r5, [r3, #4]
 80102f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fa:	1c72      	adds	r2, r6, #1
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	00b6      	lsls	r6, r6, #2
 8010300:	50f4      	str	r4, [r6, r3]
 8010302:	2320      	movs	r3, #32
 8010304:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010306:	0026      	movs	r6, r4
 8010308:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801030a:	80ca      	strh	r2, [r1, #6]
 801030c:	61fb      	str	r3, [r7, #28]
 801030e:	2500      	movs	r5, #0
 8010310:	f7fd f9fe 	bl	800d710 <__locale_mb_cur_max>
 8010314:	42a8      	cmp	r0, r5
 8010316:	d100      	bne.n	801031a <__ssvfscanf_r+0x41e>
 8010318:	e6bf      	b.n	801009a <__ssvfscanf_r+0x19e>
 801031a:	1c6a      	adds	r2, r5, #1
 801031c:	60fa      	str	r2, [r7, #12]
 801031e:	228c      	movs	r2, #140	; 0x8c
 8010320:	2048      	movs	r0, #72	; 0x48
 8010322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010324:	0052      	lsls	r2, r2, #1
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	1812      	adds	r2, r2, r0
 801032a:	7819      	ldrb	r1, [r3, #0]
 801032c:	19d2      	adds	r2, r2, r7
 801032e:	5551      	strb	r1, [r2, r5]
 8010330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010332:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010334:	6852      	ldr	r2, [r2, #4]
 8010336:	3301      	adds	r3, #1
 8010338:	600b      	str	r3, [r1, #0]
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	3a01      	subs	r2, #1
 801033e:	604a      	str	r2, [r1, #4]
 8010340:	2b03      	cmp	r3, #3
 8010342:	d102      	bne.n	801034a <__ssvfscanf_r+0x44e>
 8010344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010346:	2b04      	cmp	r3, #4
 8010348:	d007      	beq.n	801035a <__ssvfscanf_r+0x45e>
 801034a:	2048      	movs	r0, #72	; 0x48
 801034c:	2310      	movs	r3, #16
 801034e:	181b      	adds	r3, r3, r0
 8010350:	2208      	movs	r2, #8
 8010352:	2100      	movs	r1, #0
 8010354:	19d8      	adds	r0, r3, r7
 8010356:	f7fd f94f 	bl	800d5f8 <memset>
 801035a:	2148      	movs	r1, #72	; 0x48
 801035c:	2310      	movs	r3, #16
 801035e:	228c      	movs	r2, #140	; 0x8c
 8010360:	185b      	adds	r3, r3, r1
 8010362:	0052      	lsls	r2, r2, #1
 8010364:	19db      	adds	r3, r3, r7
 8010366:	1852      	adds	r2, r2, r1
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	0021      	movs	r1, r4
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010370:	19d2      	adds	r2, r2, r7
 8010372:	f002 fbd1 	bl	8012b18 <_mbrtowc_r>
 8010376:	0003      	movs	r3, r0
 8010378:	62b8      	str	r0, [r7, #40]	; 0x28
 801037a:	3301      	adds	r3, #1
 801037c:	d100      	bne.n	8010380 <__ssvfscanf_r+0x484>
 801037e:	e68c      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010380:	2800      	cmp	r0, #0
 8010382:	d139      	bne.n	80103f8 <__ssvfscanf_r+0x4fc>
 8010384:	6a3b      	ldr	r3, [r7, #32]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d100      	bne.n	801038c <__ssvfscanf_r+0x490>
 801038a:	6023      	str	r3, [r4, #0]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010390:	4694      	mov	ip, r2
 8010392:	4463      	add	r3, ip
 8010394:	63bb      	str	r3, [r7, #56]	; 0x38
 8010396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010398:	2b03      	cmp	r3, #3
 801039a:	d102      	bne.n	80103a2 <__ssvfscanf_r+0x4a6>
 801039c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801039e:	2b04      	cmp	r3, #4
 80103a0:	d002      	beq.n	80103a8 <__ssvfscanf_r+0x4ac>
 80103a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103a4:	3b01      	subs	r3, #1
 80103a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d115      	bne.n	80103da <__ssvfscanf_r+0x4de>
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	d012      	beq.n	80103d8 <__ssvfscanf_r+0x4dc>
 80103b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b4:	69fa      	ldr	r2, [r7, #28]
 80103b6:	1ae5      	subs	r5, r4, r3
 80103b8:	10ab      	asrs	r3, r5, #2
 80103ba:	4293      	cmp	r3, r2
 80103bc:	d30c      	bcc.n	80103d8 <__ssvfscanf_r+0x4dc>
 80103be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103c0:	00d1      	lsls	r1, r2, #3
 80103c2:	f002 f895 	bl	80124f0 <realloc>
 80103c6:	6338      	str	r0, [r7, #48]	; 0x30
 80103c8:	2800      	cmp	r0, #0
 80103ca:	d100      	bne.n	80103ce <__ssvfscanf_r+0x4d2>
 80103cc:	e75e      	b.n	801028c <__ssvfscanf_r+0x390>
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	1944      	adds	r4, r0, r5
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	6030      	str	r0, [r6, #0]
 80103d6:	61fb      	str	r3, [r7, #28]
 80103d8:	3404      	adds	r4, #4
 80103da:	2500      	movs	r5, #0
 80103dc:	e010      	b.n	8010400 <__ssvfscanf_r+0x504>
 80103de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e0:	613b      	str	r3, [r7, #16]
 80103e2:	2300      	movs	r3, #0
 80103e4:	001e      	movs	r6, r3
 80103e6:	001c      	movs	r4, r3
 80103e8:	61fb      	str	r3, [r7, #28]
 80103ea:	633b      	str	r3, [r7, #48]	; 0x30
 80103ec:	e78f      	b.n	801030e <__ssvfscanf_r+0x412>
 80103ee:	6a3b      	ldr	r3, [r7, #32]
 80103f0:	001e      	movs	r6, r3
 80103f2:	61fb      	str	r3, [r7, #28]
 80103f4:	633b      	str	r3, [r7, #48]	; 0x30
 80103f6:	e78a      	b.n	801030e <__ssvfscanf_r+0x412>
 80103f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fa:	68fd      	ldr	r5, [r7, #12]
 80103fc:	3302      	adds	r3, #2
 80103fe:	d1c5      	bne.n	801038c <__ssvfscanf_r+0x490>
 8010400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	dc12      	bgt.n	801042e <__ssvfscanf_r+0x532>
 8010408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801040a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801040c:	f002 fc84 	bl	8012d18 <__ssrefill_r>
 8010410:	2800      	cmp	r0, #0
 8010412:	d00c      	beq.n	801042e <__ssvfscanf_r+0x532>
 8010414:	2d00      	cmp	r5, #0
 8010416:	d000      	beq.n	801041a <__ssvfscanf_r+0x51e>
 8010418:	e63f      	b.n	801009a <__ssvfscanf_r+0x19e>
 801041a:	2e00      	cmp	r6, #0
 801041c:	d10c      	bne.n	8010438 <__ssvfscanf_r+0x53c>
 801041e:	6a3b      	ldr	r3, [r7, #32]
 8010420:	425a      	negs	r2, r3
 8010422:	4153      	adcs	r3, r2
 8010424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010426:	18d3      	adds	r3, r2, r3
 8010428:	62fb      	str	r3, [r7, #44]	; 0x2c
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	e6de      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 801042e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010430:	2b00      	cmp	r3, #0
 8010432:	d000      	beq.n	8010436 <__ssvfscanf_r+0x53a>
 8010434:	e76c      	b.n	8010310 <__ssvfscanf_r+0x414>
 8010436:	e7f0      	b.n	801041a <__ssvfscanf_r+0x51e>
 8010438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043a:	69fa      	ldr	r2, [r7, #28]
 801043c:	1ae1      	subs	r1, r4, r3
 801043e:	108b      	asrs	r3, r1, #2
 8010440:	429a      	cmp	r2, r3
 8010442:	d9ec      	bls.n	801041e <__ssvfscanf_r+0x522>
 8010444:	6830      	ldr	r0, [r6, #0]
 8010446:	f002 f853 	bl	80124f0 <realloc>
 801044a:	2800      	cmp	r0, #0
 801044c:	d0e7      	beq.n	801041e <__ssvfscanf_r+0x522>
 801044e:	6030      	str	r0, [r6, #0]
 8010450:	e7e5      	b.n	801041e <__ssvfscanf_r+0x522>
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d025      	beq.n	80104a4 <__ssvfscanf_r+0x5a8>
 8010458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801045a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010460:	6812      	ldr	r2, [r2, #0]
 8010462:	4299      	cmp	r1, r3
 8010464:	dd11      	ble.n	801048a <__ssvfscanf_r+0x58e>
 8010466:	1ac9      	subs	r1, r1, r3
 8010468:	18d2      	adds	r2, r2, r3
 801046a:	18e4      	adds	r4, r4, r3
 801046c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801046e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010470:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010472:	0019      	movs	r1, r3
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	f002 fc4f 	bl	8012d18 <__ssrefill_r>
 801047a:	2800      	cmp	r0, #0
 801047c:	d0ec      	beq.n	8010458 <__ssvfscanf_r+0x55c>
 801047e:	2c00      	cmp	r4, #0
 8010480:	d100      	bne.n	8010484 <__ssvfscanf_r+0x588>
 8010482:	e60a      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010486:	191b      	adds	r3, r3, r4
 8010488:	e5ff      	b.n	801008a <__ssvfscanf_r+0x18e>
 801048a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801048c:	1a5b      	subs	r3, r3, r1
 801048e:	1864      	adds	r4, r4, r1
 8010490:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010492:	604b      	str	r3, [r1, #4]
 8010494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010496:	18d2      	adds	r2, r2, r3
 8010498:	600a      	str	r2, [r1, #0]
 801049a:	e7f3      	b.n	8010484 <__ssvfscanf_r+0x588>
 801049c:	0800d199 	.word	0x0800d199
 80104a0:	0000fff6 	.word	0x0000fff6
 80104a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a6:	0034      	movs	r4, r6
 80104a8:	cb20      	ldmia	r3!, {r5}
 80104aa:	633b      	str	r3, [r7, #48]	; 0x30
 80104ac:	2380      	movs	r3, #128	; 0x80
 80104ae:	401c      	ands	r4, r3
 80104b0:	421e      	tst	r6, r3
 80104b2:	d028      	beq.n	8010506 <__ssvfscanf_r+0x60a>
 80104b4:	2d00      	cmp	r5, #0
 80104b6:	d100      	bne.n	80104ba <__ssvfscanf_r+0x5be>
 80104b8:	e61d      	b.n	80100f6 <__ssvfscanf_r+0x1fa>
 80104ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104bc:	f7fb fd76 	bl	800bfac <malloc>
 80104c0:	6238      	str	r0, [r7, #32]
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d100      	bne.n	80104c8 <__ssvfscanf_r+0x5cc>
 80104c6:	e5ef      	b.n	80100a8 <__ssvfscanf_r+0x1ac>
 80104c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ca:	6028      	str	r0, [r5, #0]
 80104cc:	88de      	ldrh	r6, [r3, #6]
 80104ce:	889c      	ldrh	r4, [r3, #4]
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	42a6      	cmp	r6, r4
 80104d4:	d30e      	bcc.n	80104f4 <__ssvfscanf_r+0x5f8>
 80104d6:	4bbf      	ldr	r3, [pc, #764]	; (80107d4 <__ssvfscanf_r+0x8d8>)
 80104d8:	429c      	cmp	r4, r3
 80104da:	d900      	bls.n	80104de <__ssvfscanf_r+0x5e2>
 80104dc:	e6df      	b.n	801029e <__ssvfscanf_r+0x3a2>
 80104de:	3408      	adds	r4, #8
 80104e0:	b2a4      	uxth	r4, r4
 80104e2:	00a1      	lsls	r1, r4, #2
 80104e4:	f002 f804 	bl	80124f0 <realloc>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d100      	bne.n	80104ee <__ssvfscanf_r+0x5f2>
 80104ec:	e6d7      	b.n	801029e <__ssvfscanf_r+0x3a2>
 80104ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f0:	6018      	str	r0, [r3, #0]
 80104f2:	809c      	strh	r4, [r3, #4]
 80104f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104f6:	1c72      	adds	r2, r6, #1
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80104fc:	00b6      	lsls	r6, r6, #2
 80104fe:	002c      	movs	r4, r5
 8010500:	50f5      	str	r5, [r6, r3]
 8010502:	6a3d      	ldr	r5, [r7, #32]
 8010504:	80ca      	strh	r2, [r1, #6]
 8010506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010508:	0029      	movs	r1, r5
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	2201      	movs	r2, #1
 801050e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010510:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010512:	f002 fc20 	bl	8012d56 <_sfread_r>
 8010516:	1e05      	subs	r5, r0, #0
 8010518:	d100      	bne.n	801051c <__ssvfscanf_r+0x620>
 801051a:	e5be      	b.n	801009a <__ssvfscanf_r+0x19e>
 801051c:	2c00      	cmp	r4, #0
 801051e:	d009      	beq.n	8010534 <__ssvfscanf_r+0x638>
 8010520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010522:	4283      	cmp	r3, r0
 8010524:	d906      	bls.n	8010534 <__ssvfscanf_r+0x638>
 8010526:	0001      	movs	r1, r0
 8010528:	6820      	ldr	r0, [r4, #0]
 801052a:	f001 ffe1 	bl	80124f0 <realloc>
 801052e:	2800      	cmp	r0, #0
 8010530:	d000      	beq.n	8010534 <__ssvfscanf_r+0x638>
 8010532:	6020      	str	r0, [r4, #0]
 8010534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010536:	195b      	adds	r3, r3, r5
 8010538:	63bb      	str	r3, [r7, #56]	; 0x38
 801053a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801053c:	3301      	adds	r3, #1
 801053e:	e4f8      	b.n	800ff32 <__ssvfscanf_r+0x36>
 8010540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <__ssvfscanf_r+0x64e>
 8010546:	3b01      	subs	r3, #1
 8010548:	63fb      	str	r3, [r7, #60]	; 0x3c
 801054a:	2210      	movs	r2, #16
 801054c:	2301      	movs	r3, #1
 801054e:	0034      	movs	r4, r6
 8010550:	4032      	ands	r2, r6
 8010552:	401c      	ands	r4, r3
 8010554:	623a      	str	r2, [r7, #32]
 8010556:	421e      	tst	r6, r3
 8010558:	d100      	bne.n	801055c <__ssvfscanf_r+0x660>
 801055a:	e116      	b.n	801078a <__ssvfscanf_r+0x88e>
 801055c:	2a00      	cmp	r2, #0
 801055e:	d000      	beq.n	8010562 <__ssvfscanf_r+0x666>
 8010560:	e0b0      	b.n	80106c4 <__ssvfscanf_r+0x7c8>
 8010562:	2080      	movs	r0, #128	; 0x80
 8010564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010566:	cb10      	ldmia	r3!, {r4}
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	4206      	tst	r6, r0
 801056c:	d100      	bne.n	8010570 <__ssvfscanf_r+0x674>
 801056e:	e0b2      	b.n	80106d6 <__ssvfscanf_r+0x7da>
 8010570:	2c00      	cmp	r4, #0
 8010572:	d100      	bne.n	8010576 <__ssvfscanf_r+0x67a>
 8010574:	e68d      	b.n	8010292 <__ssvfscanf_r+0x396>
 8010576:	f7fb fd19 	bl	800bfac <malloc>
 801057a:	6338      	str	r0, [r7, #48]	; 0x30
 801057c:	2800      	cmp	r0, #0
 801057e:	d100      	bne.n	8010582 <__ssvfscanf_r+0x686>
 8010580:	e684      	b.n	801028c <__ssvfscanf_r+0x390>
 8010582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010588:	88de      	ldrh	r6, [r3, #6]
 801058a:	889d      	ldrh	r5, [r3, #4]
 801058c:	42ae      	cmp	r6, r5
 801058e:	d310      	bcc.n	80105b2 <__ssvfscanf_r+0x6b6>
 8010590:	4b90      	ldr	r3, [pc, #576]	; (80107d4 <__ssvfscanf_r+0x8d8>)
 8010592:	429d      	cmp	r5, r3
 8010594:	d900      	bls.n	8010598 <__ssvfscanf_r+0x69c>
 8010596:	e679      	b.n	801028c <__ssvfscanf_r+0x390>
 8010598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801059a:	3508      	adds	r5, #8
 801059c:	b2ad      	uxth	r5, r5
 801059e:	6818      	ldr	r0, [r3, #0]
 80105a0:	00a9      	lsls	r1, r5, #2
 80105a2:	f001 ffa5 	bl	80124f0 <realloc>
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d100      	bne.n	80105ac <__ssvfscanf_r+0x6b0>
 80105aa:	e66f      	b.n	801028c <__ssvfscanf_r+0x390>
 80105ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ae:	6018      	str	r0, [r3, #0]
 80105b0:	809d      	strh	r5, [r3, #4]
 80105b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b4:	1c72      	adds	r2, r6, #1
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	00b6      	lsls	r6, r6, #2
 80105ba:	50f4      	str	r4, [r6, r3]
 80105bc:	2320      	movs	r3, #32
 80105be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105c0:	0026      	movs	r6, r4
 80105c2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80105c4:	80ca      	strh	r2, [r1, #6]
 80105c6:	613b      	str	r3, [r7, #16]
 80105c8:	2500      	movs	r5, #0
 80105ca:	f7fd f8a1 	bl	800d710 <__locale_mb_cur_max>
 80105ce:	42a8      	cmp	r0, r5
 80105d0:	d100      	bne.n	80105d4 <__ssvfscanf_r+0x6d8>
 80105d2:	e562      	b.n	801009a <__ssvfscanf_r+0x19e>
 80105d4:	1c6a      	adds	r2, r5, #1
 80105d6:	61fa      	str	r2, [r7, #28]
 80105d8:	228c      	movs	r2, #140	; 0x8c
 80105da:	2048      	movs	r0, #72	; 0x48
 80105dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105de:	0052      	lsls	r2, r2, #1
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	1812      	adds	r2, r2, r0
 80105e4:	7819      	ldrb	r1, [r3, #0]
 80105e6:	19d2      	adds	r2, r2, r7
 80105e8:	5551      	strb	r1, [r2, r5]
 80105ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105ee:	6852      	ldr	r2, [r2, #4]
 80105f0:	3301      	adds	r3, #1
 80105f2:	600b      	str	r3, [r1, #0]
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	3a01      	subs	r2, #1
 80105f8:	604a      	str	r2, [r1, #4]
 80105fa:	2b03      	cmp	r3, #3
 80105fc:	d102      	bne.n	8010604 <__ssvfscanf_r+0x708>
 80105fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010600:	2b04      	cmp	r3, #4
 8010602:	d006      	beq.n	8010612 <__ssvfscanf_r+0x716>
 8010604:	2048      	movs	r0, #72	; 0x48
 8010606:	2208      	movs	r2, #8
 8010608:	1813      	adds	r3, r2, r0
 801060a:	2100      	movs	r1, #0
 801060c:	19d8      	adds	r0, r3, r7
 801060e:	f7fc fff3 	bl	800d5f8 <memset>
 8010612:	2148      	movs	r1, #72	; 0x48
 8010614:	2308      	movs	r3, #8
 8010616:	228c      	movs	r2, #140	; 0x8c
 8010618:	185b      	adds	r3, r3, r1
 801061a:	0052      	lsls	r2, r2, #1
 801061c:	19db      	adds	r3, r3, r7
 801061e:	1852      	adds	r2, r2, r1
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	0021      	movs	r1, r4
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010628:	19d2      	adds	r2, r2, r7
 801062a:	f002 fa75 	bl	8012b18 <_mbrtowc_r>
 801062e:	0003      	movs	r3, r0
 8010630:	62b8      	str	r0, [r7, #40]	; 0x28
 8010632:	3301      	adds	r3, #1
 8010634:	d100      	bne.n	8010638 <__ssvfscanf_r+0x73c>
 8010636:	e530      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010638:	2800      	cmp	r0, #0
 801063a:	d151      	bne.n	80106e0 <__ssvfscanf_r+0x7e4>
 801063c:	6020      	str	r0, [r4, #0]
 801063e:	2301      	movs	r3, #1
 8010640:	6825      	ldr	r5, [r4, #0]
 8010642:	425b      	negs	r3, r3
 8010644:	1c6a      	adds	r2, r5, #1
 8010646:	d01a      	beq.n	801067e <__ssvfscanf_r+0x782>
 8010648:	2048      	movs	r0, #72	; 0x48
 801064a:	3311      	adds	r3, #17
 801064c:	181b      	adds	r3, r3, r0
 801064e:	2208      	movs	r2, #8
 8010650:	2100      	movs	r1, #0
 8010652:	19d8      	adds	r0, r3, r7
 8010654:	f7fc ffd0 	bl	800d5f8 <memset>
 8010658:	4b5f      	ldr	r3, [pc, #380]	; (80107d8 <__ssvfscanf_r+0x8dc>)
 801065a:	2148      	movs	r1, #72	; 0x48
 801065c:	33e0      	adds	r3, #224	; 0xe0
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	2310      	movs	r3, #16
 8010662:	4694      	mov	ip, r2
 8010664:	185b      	adds	r3, r3, r1
 8010666:	002a      	movs	r2, r5
 8010668:	19db      	adds	r3, r3, r7
 801066a:	4665      	mov	r5, ip
 801066c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801066e:	1879      	adds	r1, r7, r1
 8010670:	47a8      	blx	r5
 8010672:	2300      	movs	r3, #0
 8010674:	2801      	cmp	r0, #1
 8010676:	d102      	bne.n	801067e <__ssvfscanf_r+0x782>
 8010678:	3348      	adds	r3, #72	; 0x48
 801067a:	18fb      	adds	r3, r7, r3
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	2218      	movs	r2, #24
 8010680:	2148      	movs	r1, #72	; 0x48
 8010682:	1852      	adds	r2, r2, r1
 8010684:	19d2      	adds	r2, r2, r7
 8010686:	5cd3      	ldrb	r3, [r2, r3]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d149      	bne.n	8010720 <__ssvfscanf_r+0x824>
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d137      	bne.n	8010702 <__ssvfscanf_r+0x806>
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d113      	bne.n	80106c0 <__ssvfscanf_r+0x7c4>
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	2e00      	cmp	r6, #0
 801069c:	d00d      	beq.n	80106ba <__ssvfscanf_r+0x7be>
 801069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	1ae4      	subs	r4, r4, r3
 80106a4:	10a3      	asrs	r3, r4, #2
 80106a6:	3301      	adds	r3, #1
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d906      	bls.n	80106ba <__ssvfscanf_r+0x7be>
 80106ac:	6830      	ldr	r0, [r6, #0]
 80106ae:	1d21      	adds	r1, r4, #4
 80106b0:	f001 ff1e 	bl	80124f0 <realloc>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d000      	beq.n	80106ba <__ssvfscanf_r+0x7be>
 80106b8:	6030      	str	r0, [r6, #0]
 80106ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106bc:	3301      	adds	r3, #1
 80106be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	e593      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 80106c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c6:	60fb      	str	r3, [r7, #12]
 80106c8:	2300      	movs	r3, #0
 80106ca:	001e      	movs	r6, r3
 80106cc:	613b      	str	r3, [r7, #16]
 80106ce:	633b      	str	r3, [r7, #48]	; 0x30
 80106d0:	334c      	adds	r3, #76	; 0x4c
 80106d2:	18fc      	adds	r4, r7, r3
 80106d4:	e778      	b.n	80105c8 <__ssvfscanf_r+0x6cc>
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	001e      	movs	r6, r3
 80106da:	613b      	str	r3, [r7, #16]
 80106dc:	633b      	str	r3, [r7, #48]	; 0x30
 80106de:	e773      	b.n	80105c8 <__ssvfscanf_r+0x6cc>
 80106e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e2:	69fd      	ldr	r5, [r7, #28]
 80106e4:	3302      	adds	r3, #2
 80106e6:	d1aa      	bne.n	801063e <__ssvfscanf_r+0x742>
 80106e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	dc47      	bgt.n	8010780 <__ssvfscanf_r+0x884>
 80106f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80106f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106f4:	f002 fb10 	bl	8012d18 <__ssrefill_r>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d041      	beq.n	8010780 <__ssvfscanf_r+0x884>
 80106fc:	2d00      	cmp	r5, #0
 80106fe:	d0c8      	beq.n	8010692 <__ssvfscanf_r+0x796>
 8010700:	e4cb      	b.n	801009a <__ssvfscanf_r+0x19e>
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	2248      	movs	r2, #72	; 0x48
 8010706:	3b01      	subs	r3, #1
 8010708:	61fb      	str	r3, [r7, #28]
 801070a:	238c      	movs	r3, #140	; 0x8c
 801070c:	005b      	lsls	r3, r3, #1
 801070e:	189b      	adds	r3, r3, r2
 8010710:	69fa      	ldr	r2, [r7, #28]
 8010712:	19db      	adds	r3, r3, r7
 8010714:	5cd1      	ldrb	r1, [r2, r3]
 8010716:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801071a:	f002 fac1 	bl	8012ca0 <_sungetc_r>
 801071e:	e7b5      	b.n	801068c <__ssvfscanf_r+0x790>
 8010720:	69fa      	ldr	r2, [r7, #28]
 8010722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010724:	4694      	mov	ip, r2
 8010726:	4463      	add	r3, ip
 8010728:	63bb      	str	r3, [r7, #56]	; 0x38
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	2b03      	cmp	r3, #3
 801072e:	d102      	bne.n	8010736 <__ssvfscanf_r+0x83a>
 8010730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010732:	2b04      	cmp	r3, #4
 8010734:	d002      	beq.n	801073c <__ssvfscanf_r+0x840>
 8010736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010738:	3b01      	subs	r3, #1
 801073a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801073c:	6a3b      	ldr	r3, [r7, #32]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d11a      	bne.n	8010778 <__ssvfscanf_r+0x87c>
 8010742:	3404      	adds	r4, #4
 8010744:	2e00      	cmp	r6, #0
 8010746:	d019      	beq.n	801077c <__ssvfscanf_r+0x880>
 8010748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	1ae3      	subs	r3, r4, r3
 801074e:	61fb      	str	r3, [r7, #28]
 8010750:	6a3d      	ldr	r5, [r7, #32]
 8010752:	109b      	asrs	r3, r3, #2
 8010754:	4293      	cmp	r3, r2
 8010756:	d3c7      	bcc.n	80106e8 <__ssvfscanf_r+0x7ec>
 8010758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801075a:	00d1      	lsls	r1, r2, #3
 801075c:	f001 fec8 	bl	80124f0 <realloc>
 8010760:	6338      	str	r0, [r7, #48]	; 0x30
 8010762:	2800      	cmp	r0, #0
 8010764:	d100      	bne.n	8010768 <__ssvfscanf_r+0x86c>
 8010766:	e591      	b.n	801028c <__ssvfscanf_r+0x390>
 8010768:	4684      	mov	ip, r0
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	69fc      	ldr	r4, [r7, #28]
 801076e:	005b      	lsls	r3, r3, #1
 8010770:	4464      	add	r4, ip
 8010772:	6030      	str	r0, [r6, #0]
 8010774:	613b      	str	r3, [r7, #16]
 8010776:	e7b7      	b.n	80106e8 <__ssvfscanf_r+0x7ec>
 8010778:	2500      	movs	r5, #0
 801077a:	e7b5      	b.n	80106e8 <__ssvfscanf_r+0x7ec>
 801077c:	0035      	movs	r5, r6
 801077e:	e7b3      	b.n	80106e8 <__ssvfscanf_r+0x7ec>
 8010780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010782:	2b00      	cmp	r3, #0
 8010784:	d000      	beq.n	8010788 <__ssvfscanf_r+0x88c>
 8010786:	e720      	b.n	80105ca <__ssvfscanf_r+0x6ce>
 8010788:	e783      	b.n	8010692 <__ssvfscanf_r+0x796>
 801078a:	6a3b      	ldr	r3, [r7, #32]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d025      	beq.n	80107dc <__ssvfscanf_r+0x8e0>
 8010790:	2118      	movs	r1, #24
 8010792:	2048      	movs	r0, #72	; 0x48
 8010794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010796:	1809      	adds	r1, r1, r0
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	19c9      	adds	r1, r1, r7
 801079c:	781a      	ldrb	r2, [r3, #0]
 801079e:	5c8a      	ldrb	r2, [r1, r2]
 80107a0:	2a00      	cmp	r2, #0
 80107a2:	d103      	bne.n	80107ac <__ssvfscanf_r+0x8b0>
 80107a4:	2c00      	cmp	r4, #0
 80107a6:	d000      	beq.n	80107aa <__ssvfscanf_r+0x8ae>
 80107a8:	e66c      	b.n	8010484 <__ssvfscanf_r+0x588>
 80107aa:	e4a4      	b.n	80100f6 <__ssvfscanf_r+0x1fa>
 80107ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107b0:	6852      	ldr	r2, [r2, #4]
 80107b2:	3301      	adds	r3, #1
 80107b4:	600b      	str	r3, [r1, #0]
 80107b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b8:	3a01      	subs	r2, #1
 80107ba:	3401      	adds	r4, #1
 80107bc:	604a      	str	r2, [r1, #4]
 80107be:	429c      	cmp	r4, r3
 80107c0:	d100      	bne.n	80107c4 <__ssvfscanf_r+0x8c8>
 80107c2:	e65f      	b.n	8010484 <__ssvfscanf_r+0x588>
 80107c4:	2a00      	cmp	r2, #0
 80107c6:	dce3      	bgt.n	8010790 <__ssvfscanf_r+0x894>
 80107c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107ca:	f002 faa5 	bl	8012d18 <__ssrefill_r>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d0de      	beq.n	8010790 <__ssvfscanf_r+0x894>
 80107d2:	e657      	b.n	8010484 <__ssvfscanf_r+0x588>
 80107d4:	0000fff6 	.word	0x0000fff6
 80107d8:	20000444 	.word	0x20000444
 80107dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107de:	0032      	movs	r2, r6
 80107e0:	cb20      	ldmia	r3!, {r5}
 80107e2:	61fb      	str	r3, [r7, #28]
 80107e4:	2380      	movs	r3, #128	; 0x80
 80107e6:	401a      	ands	r2, r3
 80107e8:	421e      	tst	r6, r3
 80107ea:	d100      	bne.n	80107ee <__ssvfscanf_r+0x8f2>
 80107ec:	e086      	b.n	80108fc <__ssvfscanf_r+0xa00>
 80107ee:	2d00      	cmp	r5, #0
 80107f0:	d100      	bne.n	80107f4 <__ssvfscanf_r+0x8f8>
 80107f2:	e480      	b.n	80100f6 <__ssvfscanf_r+0x1fa>
 80107f4:	2020      	movs	r0, #32
 80107f6:	f7fb fbd9 	bl	800bfac <malloc>
 80107fa:	6338      	str	r0, [r7, #48]	; 0x30
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d100      	bne.n	8010802 <__ssvfscanf_r+0x906>
 8010800:	e452      	b.n	80100a8 <__ssvfscanf_r+0x1ac>
 8010802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010804:	6028      	str	r0, [r5, #0]
 8010806:	88de      	ldrh	r6, [r3, #6]
 8010808:	889c      	ldrh	r4, [r3, #4]
 801080a:	6818      	ldr	r0, [r3, #0]
 801080c:	42a6      	cmp	r6, r4
 801080e:	d30e      	bcc.n	801082e <__ssvfscanf_r+0x932>
 8010810:	4bc3      	ldr	r3, [pc, #780]	; (8010b20 <__ssvfscanf_r+0xc24>)
 8010812:	429c      	cmp	r4, r3
 8010814:	d900      	bls.n	8010818 <__ssvfscanf_r+0x91c>
 8010816:	e542      	b.n	801029e <__ssvfscanf_r+0x3a2>
 8010818:	3408      	adds	r4, #8
 801081a:	b2a4      	uxth	r4, r4
 801081c:	00a1      	lsls	r1, r4, #2
 801081e:	f001 fe67 	bl	80124f0 <realloc>
 8010822:	2800      	cmp	r0, #0
 8010824:	d100      	bne.n	8010828 <__ssvfscanf_r+0x92c>
 8010826:	e53a      	b.n	801029e <__ssvfscanf_r+0x3a2>
 8010828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801082a:	6018      	str	r0, [r3, #0]
 801082c:	809c      	strh	r4, [r3, #4]
 801082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010830:	1c72      	adds	r2, r6, #1
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	00b6      	lsls	r6, r6, #2
 8010836:	50f5      	str	r5, [r6, r3]
 8010838:	2320      	movs	r3, #32
 801083a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801083c:	002e      	movs	r6, r5
 801083e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010840:	80ca      	strh	r2, [r1, #6]
 8010842:	623b      	str	r3, [r7, #32]
 8010844:	002c      	movs	r4, r5
 8010846:	2118      	movs	r1, #24
 8010848:	2048      	movs	r0, #72	; 0x48
 801084a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801084c:	1809      	adds	r1, r1, r0
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	19c9      	adds	r1, r1, r7
 8010852:	781a      	ldrb	r2, [r3, #0]
 8010854:	5c8a      	ldrb	r2, [r1, r2]
 8010856:	2a00      	cmp	r2, #0
 8010858:	d101      	bne.n	801085e <__ssvfscanf_r+0x962>
 801085a:	633d      	str	r5, [r7, #48]	; 0x30
 801085c:	e031      	b.n	80108c2 <__ssvfscanf_r+0x9c6>
 801085e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010860:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010862:	6852      	ldr	r2, [r2, #4]
 8010864:	3a01      	subs	r2, #1
 8010866:	604a      	str	r2, [r1, #4]
 8010868:	1c5a      	adds	r2, r3, #1
 801086a:	600a      	str	r2, [r1, #0]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	1c6a      	adds	r2, r5, #1
 8010870:	633a      	str	r2, [r7, #48]	; 0x30
 8010872:	702b      	strb	r3, [r5, #0]
 8010874:	2e00      	cmp	r6, #0
 8010876:	d010      	beq.n	801089a <__ssvfscanf_r+0x99e>
 8010878:	6a3b      	ldr	r3, [r7, #32]
 801087a:	1b15      	subs	r5, r2, r4
 801087c:	429d      	cmp	r5, r3
 801087e:	d30c      	bcc.n	801089a <__ssvfscanf_r+0x99e>
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	0020      	movs	r0, r4
 8010884:	0019      	movs	r1, r3
 8010886:	623b      	str	r3, [r7, #32]
 8010888:	f001 fe32 	bl	80124f0 <realloc>
 801088c:	1e04      	subs	r4, r0, #0
 801088e:	d101      	bne.n	8010894 <__ssvfscanf_r+0x998>
 8010890:	f7ff fc0a 	bl	80100a8 <__ssvfscanf_r+0x1ac>
 8010894:	1943      	adds	r3, r0, r5
 8010896:	633b      	str	r3, [r7, #48]	; 0x30
 8010898:	6030      	str	r0, [r6, #0]
 801089a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801089c:	3b01      	subs	r3, #1
 801089e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00e      	beq.n	80108c2 <__ssvfscanf_r+0x9c6>
 80108a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	dc2a      	bgt.n	8010902 <__ssvfscanf_r+0xa06>
 80108ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80108b0:	f002 fa32 	bl	8012d18 <__ssrefill_r>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d024      	beq.n	8010902 <__ssvfscanf_r+0xa06>
 80108b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ba:	42a3      	cmp	r3, r4
 80108bc:	d101      	bne.n	80108c2 <__ssvfscanf_r+0x9c6>
 80108be:	f7ff fbec 	bl	801009a <__ssvfscanf_r+0x19e>
 80108c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c4:	1b1d      	subs	r5, r3, r4
 80108c6:	42a3      	cmp	r3, r4
 80108c8:	d101      	bne.n	80108ce <__ssvfscanf_r+0x9d2>
 80108ca:	f7ff fc14 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 80108ce:	2300      	movs	r3, #0
 80108d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108d2:	7013      	strb	r3, [r2, #0]
 80108d4:	429e      	cmp	r6, r3
 80108d6:	d009      	beq.n	80108ec <__ssvfscanf_r+0x9f0>
 80108d8:	6a3b      	ldr	r3, [r7, #32]
 80108da:	1c69      	adds	r1, r5, #1
 80108dc:	428b      	cmp	r3, r1
 80108de:	d905      	bls.n	80108ec <__ssvfscanf_r+0x9f0>
 80108e0:	6830      	ldr	r0, [r6, #0]
 80108e2:	f001 fe05 	bl	80124f0 <realloc>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d000      	beq.n	80108ec <__ssvfscanf_r+0x9f0>
 80108ea:	6030      	str	r0, [r6, #0]
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	3301      	adds	r3, #1
 80108f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	195b      	adds	r3, r3, r5
 80108f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	e477      	b.n	80101ec <__ssvfscanf_r+0x2f0>
 80108fc:	0016      	movs	r6, r2
 80108fe:	623a      	str	r2, [r7, #32]
 8010900:	e7a0      	b.n	8010844 <__ssvfscanf_r+0x948>
 8010902:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8010904:	e79f      	b.n	8010846 <__ssvfscanf_r+0x94a>
 8010906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010908:	2b00      	cmp	r3, #0
 801090a:	d101      	bne.n	8010910 <__ssvfscanf_r+0xa14>
 801090c:	3b01      	subs	r3, #1
 801090e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010910:	2210      	movs	r2, #16
 8010912:	2301      	movs	r3, #1
 8010914:	0034      	movs	r4, r6
 8010916:	4032      	ands	r2, r6
 8010918:	401c      	ands	r4, r3
 801091a:	61fa      	str	r2, [r7, #28]
 801091c:	421e      	tst	r6, r3
 801091e:	d100      	bne.n	8010922 <__ssvfscanf_r+0xa26>
 8010920:	e102      	b.n	8010b28 <__ssvfscanf_r+0xc2c>
 8010922:	2a00      	cmp	r2, #0
 8010924:	d000      	beq.n	8010928 <__ssvfscanf_r+0xa2c>
 8010926:	e09f      	b.n	8010a68 <__ssvfscanf_r+0xb6c>
 8010928:	2080      	movs	r0, #128	; 0x80
 801092a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092c:	cb10      	ldmia	r3!, {r4}
 801092e:	60fb      	str	r3, [r7, #12]
 8010930:	4206      	tst	r6, r0
 8010932:	d100      	bne.n	8010936 <__ssvfscanf_r+0xa3a>
 8010934:	e0a1      	b.n	8010a7a <__ssvfscanf_r+0xb7e>
 8010936:	2c00      	cmp	r4, #0
 8010938:	d100      	bne.n	801093c <__ssvfscanf_r+0xa40>
 801093a:	e4aa      	b.n	8010292 <__ssvfscanf_r+0x396>
 801093c:	f7fb fb36 	bl	800bfac <malloc>
 8010940:	6338      	str	r0, [r7, #48]	; 0x30
 8010942:	2800      	cmp	r0, #0
 8010944:	d100      	bne.n	8010948 <__ssvfscanf_r+0xa4c>
 8010946:	e4a1      	b.n	801028c <__ssvfscanf_r+0x390>
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	6023      	str	r3, [r4, #0]
 801094c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801094e:	88de      	ldrh	r6, [r3, #6]
 8010950:	889d      	ldrh	r5, [r3, #4]
 8010952:	42ae      	cmp	r6, r5
 8010954:	d310      	bcc.n	8010978 <__ssvfscanf_r+0xa7c>
 8010956:	4b72      	ldr	r3, [pc, #456]	; (8010b20 <__ssvfscanf_r+0xc24>)
 8010958:	429d      	cmp	r5, r3
 801095a:	d900      	bls.n	801095e <__ssvfscanf_r+0xa62>
 801095c:	e496      	b.n	801028c <__ssvfscanf_r+0x390>
 801095e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010960:	3508      	adds	r5, #8
 8010962:	b2ad      	uxth	r5, r5
 8010964:	6818      	ldr	r0, [r3, #0]
 8010966:	00a9      	lsls	r1, r5, #2
 8010968:	f001 fdc2 	bl	80124f0 <realloc>
 801096c:	2800      	cmp	r0, #0
 801096e:	d100      	bne.n	8010972 <__ssvfscanf_r+0xa76>
 8010970:	e48c      	b.n	801028c <__ssvfscanf_r+0x390>
 8010972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010974:	6018      	str	r0, [r3, #0]
 8010976:	809d      	strh	r5, [r3, #4]
 8010978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801097a:	1c72      	adds	r2, r6, #1
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	00b6      	lsls	r6, r6, #2
 8010980:	50f4      	str	r4, [r6, r3]
 8010982:	2320      	movs	r3, #32
 8010984:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010986:	0025      	movs	r5, r4
 8010988:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801098a:	80ca      	strh	r2, [r1, #6]
 801098c:	613b      	str	r3, [r7, #16]
 801098e:	2300      	movs	r3, #0
 8010990:	623b      	str	r3, [r7, #32]
 8010992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010994:	4a63      	ldr	r2, [pc, #396]	; (8010b24 <__ssvfscanf_r+0xc28>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	5cd3      	ldrb	r3, [r2, r3]
 801099c:	2208      	movs	r2, #8
 801099e:	4213      	tst	r3, r2
 80109a0:	d149      	bne.n	8010a36 <__ssvfscanf_r+0xb3a>
 80109a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d046      	beq.n	8010a36 <__ssvfscanf_r+0xb3a>
 80109a8:	f7fc feb2 	bl	800d710 <__locale_mb_cur_max>
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	4298      	cmp	r0, r3
 80109b0:	d101      	bne.n	80109b6 <__ssvfscanf_r+0xaba>
 80109b2:	f7ff fb72 	bl	801009a <__ssvfscanf_r+0x19e>
 80109b6:	6a3a      	ldr	r2, [r7, #32]
 80109b8:	2048      	movs	r0, #72	; 0x48
 80109ba:	1c56      	adds	r6, r2, #1
 80109bc:	228c      	movs	r2, #140	; 0x8c
 80109be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c0:	0052      	lsls	r2, r2, #1
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	1812      	adds	r2, r2, r0
 80109c6:	7819      	ldrb	r1, [r3, #0]
 80109c8:	6a38      	ldr	r0, [r7, #32]
 80109ca:	19d2      	adds	r2, r2, r7
 80109cc:	5411      	strb	r1, [r2, r0]
 80109ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109d2:	6852      	ldr	r2, [r2, #4]
 80109d4:	3301      	adds	r3, #1
 80109d6:	600b      	str	r3, [r1, #0]
 80109d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109da:	3a01      	subs	r2, #1
 80109dc:	604a      	str	r2, [r1, #4]
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d102      	bne.n	80109e8 <__ssvfscanf_r+0xaec>
 80109e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	d007      	beq.n	80109f8 <__ssvfscanf_r+0xafc>
 80109e8:	2048      	movs	r0, #72	; 0x48
 80109ea:	2310      	movs	r3, #16
 80109ec:	181b      	adds	r3, r3, r0
 80109ee:	2208      	movs	r2, #8
 80109f0:	2100      	movs	r1, #0
 80109f2:	19d8      	adds	r0, r3, r7
 80109f4:	f7fc fe00 	bl	800d5f8 <memset>
 80109f8:	2148      	movs	r1, #72	; 0x48
 80109fa:	2310      	movs	r3, #16
 80109fc:	228c      	movs	r2, #140	; 0x8c
 80109fe:	185b      	adds	r3, r3, r1
 8010a00:	0052      	lsls	r2, r2, #1
 8010a02:	19db      	adds	r3, r3, r7
 8010a04:	1852      	adds	r2, r2, r1
 8010a06:	9300      	str	r3, [sp, #0]
 8010a08:	0021      	movs	r1, r4
 8010a0a:	0033      	movs	r3, r6
 8010a0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a0e:	19d2      	adds	r2, r2, r7
 8010a10:	f002 f882 	bl	8012b18 <_mbrtowc_r>
 8010a14:	0003      	movs	r3, r0
 8010a16:	62b8      	str	r0, [r7, #40]	; 0x28
 8010a18:	3301      	adds	r3, #1
 8010a1a:	d101      	bne.n	8010a20 <__ssvfscanf_r+0xb24>
 8010a1c:	f7ff fb3d 	bl	801009a <__ssvfscanf_r+0x19e>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	d12f      	bne.n	8010a84 <__ssvfscanf_r+0xb88>
 8010a24:	6020      	str	r0, [r4, #0]
 8010a26:	6820      	ldr	r0, [r4, #0]
 8010a28:	f002 f894 	bl	8012b54 <iswspace>
 8010a2c:	6238      	str	r0, [r7, #32]
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d04a      	beq.n	8010ac8 <__ssvfscanf_r+0xbcc>
 8010a32:	2e00      	cmp	r6, #0
 8010a34:	d13c      	bne.n	8010ab0 <__ssvfscanf_r+0xbb4>
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d000      	beq.n	8010a3e <__ssvfscanf_r+0xb42>
 8010a3c:	e640      	b.n	80106c0 <__ssvfscanf_r+0x7c4>
 8010a3e:	6023      	str	r3, [r4, #0]
 8010a40:	2d00      	cmp	r5, #0
 8010a42:	d100      	bne.n	8010a46 <__ssvfscanf_r+0xb4a>
 8010a44:	e639      	b.n	80106ba <__ssvfscanf_r+0x7be>
 8010a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a48:	693a      	ldr	r2, [r7, #16]
 8010a4a:	1ae4      	subs	r4, r4, r3
 8010a4c:	10a3      	asrs	r3, r4, #2
 8010a4e:	3301      	adds	r3, #1
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d800      	bhi.n	8010a56 <__ssvfscanf_r+0xb5a>
 8010a54:	e631      	b.n	80106ba <__ssvfscanf_r+0x7be>
 8010a56:	6828      	ldr	r0, [r5, #0]
 8010a58:	1d21      	adds	r1, r4, #4
 8010a5a:	f001 fd49 	bl	80124f0 <realloc>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d100      	bne.n	8010a64 <__ssvfscanf_r+0xb68>
 8010a62:	e62a      	b.n	80106ba <__ssvfscanf_r+0x7be>
 8010a64:	6028      	str	r0, [r5, #0]
 8010a66:	e628      	b.n	80106ba <__ssvfscanf_r+0x7be>
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	60fb      	str	r3, [r7, #12]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	001d      	movs	r5, r3
 8010a70:	613b      	str	r3, [r7, #16]
 8010a72:	633b      	str	r3, [r7, #48]	; 0x30
 8010a74:	334c      	adds	r3, #76	; 0x4c
 8010a76:	18fc      	adds	r4, r7, r3
 8010a78:	e789      	b.n	801098e <__ssvfscanf_r+0xa92>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	001d      	movs	r5, r3
 8010a7e:	613b      	str	r3, [r7, #16]
 8010a80:	633b      	str	r3, [r7, #48]	; 0x30
 8010a82:	e784      	b.n	801098e <__ssvfscanf_r+0xa92>
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	623e      	str	r6, [r7, #32]
 8010a88:	3302      	adds	r3, #2
 8010a8a:	d1cc      	bne.n	8010a26 <__ssvfscanf_r+0xb2a>
 8010a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dd00      	ble.n	8010a96 <__ssvfscanf_r+0xb9a>
 8010a94:	e77d      	b.n	8010992 <__ssvfscanf_r+0xa96>
 8010a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a9a:	f002 f93d 	bl	8012d18 <__ssrefill_r>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d100      	bne.n	8010aa4 <__ssvfscanf_r+0xba8>
 8010aa2:	e776      	b.n	8010992 <__ssvfscanf_r+0xa96>
 8010aa4:	6a3b      	ldr	r3, [r7, #32]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <__ssvfscanf_r+0xbb2>
 8010aaa:	f7ff faf6 	bl	801009a <__ssvfscanf_r+0x19e>
 8010aae:	e7c2      	b.n	8010a36 <__ssvfscanf_r+0xb3a>
 8010ab0:	238c      	movs	r3, #140	; 0x8c
 8010ab2:	2248      	movs	r2, #72	; 0x48
 8010ab4:	005b      	lsls	r3, r3, #1
 8010ab6:	189b      	adds	r3, r3, r2
 8010ab8:	3e01      	subs	r6, #1
 8010aba:	19db      	adds	r3, r3, r7
 8010abc:	5cf1      	ldrb	r1, [r6, r3]
 8010abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ac2:	f002 f8ed 	bl	8012ca0 <_sungetc_r>
 8010ac6:	e7b4      	b.n	8010a32 <__ssvfscanf_r+0xb36>
 8010ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aca:	199b      	adds	r3, r3, r6
 8010acc:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad0:	2b03      	cmp	r3, #3
 8010ad2:	d102      	bne.n	8010ada <__ssvfscanf_r+0xbde>
 8010ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ad6:	2b04      	cmp	r3, #4
 8010ad8:	d002      	beq.n	8010ae0 <__ssvfscanf_r+0xbe4>
 8010ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010adc:	3b01      	subs	r3, #1
 8010ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1d2      	bne.n	8010a8c <__ssvfscanf_r+0xb90>
 8010ae6:	3404      	adds	r4, #4
 8010ae8:	2d00      	cmp	r5, #0
 8010aea:	d016      	beq.n	8010b1a <__ssvfscanf_r+0xc1e>
 8010aec:	69fa      	ldr	r2, [r7, #28]
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	623a      	str	r2, [r7, #32]
 8010af2:	693a      	ldr	r2, [r7, #16]
 8010af4:	1ae6      	subs	r6, r4, r3
 8010af6:	10b3      	asrs	r3, r6, #2
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d3c7      	bcc.n	8010a8c <__ssvfscanf_r+0xb90>
 8010afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010afe:	00d1      	lsls	r1, r2, #3
 8010b00:	f001 fcf6 	bl	80124f0 <realloc>
 8010b04:	6338      	str	r0, [r7, #48]	; 0x30
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d101      	bne.n	8010b0e <__ssvfscanf_r+0xc12>
 8010b0a:	f7ff fbbf 	bl	801028c <__ssvfscanf_r+0x390>
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	1984      	adds	r4, r0, r6
 8010b12:	005b      	lsls	r3, r3, #1
 8010b14:	6028      	str	r0, [r5, #0]
 8010b16:	613b      	str	r3, [r7, #16]
 8010b18:	e7b8      	b.n	8010a8c <__ssvfscanf_r+0xb90>
 8010b1a:	623d      	str	r5, [r7, #32]
 8010b1c:	e7b6      	b.n	8010a8c <__ssvfscanf_r+0xb90>
 8010b1e:	46c0      	nop			; (mov r8, r8)
 8010b20:	0000fff6 	.word	0x0000fff6
 8010b24:	08015d71 	.word	0x08015d71
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d01c      	beq.n	8010b68 <__ssvfscanf_r+0xc6c>
 8010b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b30:	49bf      	ldr	r1, [pc, #764]	; (8010e30 <__ssvfscanf_r+0xf34>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	781a      	ldrb	r2, [r3, #0]
 8010b36:	5c8a      	ldrb	r2, [r1, r2]
 8010b38:	2108      	movs	r1, #8
 8010b3a:	420a      	tst	r2, r1
 8010b3c:	d000      	beq.n	8010b40 <__ssvfscanf_r+0xc44>
 8010b3e:	e4a1      	b.n	8010484 <__ssvfscanf_r+0x588>
 8010b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010b42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b44:	6852      	ldr	r2, [r2, #4]
 8010b46:	3301      	adds	r3, #1
 8010b48:	600b      	str	r3, [r1, #0]
 8010b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4c:	3a01      	subs	r2, #1
 8010b4e:	3401      	adds	r4, #1
 8010b50:	604a      	str	r2, [r1, #4]
 8010b52:	429c      	cmp	r4, r3
 8010b54:	d100      	bne.n	8010b58 <__ssvfscanf_r+0xc5c>
 8010b56:	e495      	b.n	8010484 <__ssvfscanf_r+0x588>
 8010b58:	2a00      	cmp	r2, #0
 8010b5a:	dce8      	bgt.n	8010b2e <__ssvfscanf_r+0xc32>
 8010b5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010b5e:	f002 f8db 	bl	8012d18 <__ssrefill_r>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d0e3      	beq.n	8010b2e <__ssvfscanf_r+0xc32>
 8010b66:	e48d      	b.n	8010484 <__ssvfscanf_r+0x588>
 8010b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6a:	0032      	movs	r2, r6
 8010b6c:	cb10      	ldmia	r3!, {r4}
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	2380      	movs	r3, #128	; 0x80
 8010b72:	401a      	ands	r2, r3
 8010b74:	421e      	tst	r6, r3
 8010b76:	d039      	beq.n	8010bec <__ssvfscanf_r+0xcf0>
 8010b78:	2c00      	cmp	r4, #0
 8010b7a:	d101      	bne.n	8010b80 <__ssvfscanf_r+0xc84>
 8010b7c:	f7ff fabb 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 8010b80:	2020      	movs	r0, #32
 8010b82:	f7fb fa13 	bl	800bfac <malloc>
 8010b86:	6338      	str	r0, [r7, #48]	; 0x30
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d101      	bne.n	8010b90 <__ssvfscanf_r+0xc94>
 8010b8c:	f7ff fa8c 	bl	80100a8 <__ssvfscanf_r+0x1ac>
 8010b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b92:	6020      	str	r0, [r4, #0]
 8010b94:	88de      	ldrh	r6, [r3, #6]
 8010b96:	889d      	ldrh	r5, [r3, #4]
 8010b98:	6818      	ldr	r0, [r3, #0]
 8010b9a:	42ae      	cmp	r6, r5
 8010b9c:	d310      	bcc.n	8010bc0 <__ssvfscanf_r+0xcc4>
 8010b9e:	4ba5      	ldr	r3, [pc, #660]	; (8010e34 <__ssvfscanf_r+0xf38>)
 8010ba0:	429d      	cmp	r5, r3
 8010ba2:	d901      	bls.n	8010ba8 <__ssvfscanf_r+0xcac>
 8010ba4:	f7ff fb7b 	bl	801029e <__ssvfscanf_r+0x3a2>
 8010ba8:	3508      	adds	r5, #8
 8010baa:	b2ad      	uxth	r5, r5
 8010bac:	00a9      	lsls	r1, r5, #2
 8010bae:	f001 fc9f 	bl	80124f0 <realloc>
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	d101      	bne.n	8010bba <__ssvfscanf_r+0xcbe>
 8010bb6:	f7ff fb72 	bl	801029e <__ssvfscanf_r+0x3a2>
 8010bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bbc:	6018      	str	r0, [r3, #0]
 8010bbe:	809d      	strh	r5, [r3, #4]
 8010bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bc2:	1c72      	adds	r2, r6, #1
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	00b6      	lsls	r6, r6, #2
 8010bc8:	50f4      	str	r4, [r6, r3]
 8010bca:	2320      	movs	r3, #32
 8010bcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010bce:	0026      	movs	r6, r4
 8010bd0:	80ca      	strh	r2, [r1, #6]
 8010bd2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8010bd6:	0025      	movs	r5, r4
 8010bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bda:	4995      	ldr	r1, [pc, #596]	; (8010e30 <__ssvfscanf_r+0xf34>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	781a      	ldrb	r2, [r3, #0]
 8010be0:	5c8a      	ldrb	r2, [r1, r2]
 8010be2:	2108      	movs	r1, #8
 8010be4:	420a      	tst	r2, r1
 8010be6:	d004      	beq.n	8010bf2 <__ssvfscanf_r+0xcf6>
 8010be8:	623c      	str	r4, [r7, #32]
 8010bea:	e031      	b.n	8010c50 <__ssvfscanf_r+0xd54>
 8010bec:	0016      	movs	r6, r2
 8010bee:	633a      	str	r2, [r7, #48]	; 0x30
 8010bf0:	e7f1      	b.n	8010bd6 <__ssvfscanf_r+0xcda>
 8010bf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010bf6:	6852      	ldr	r2, [r2, #4]
 8010bf8:	3a01      	subs	r2, #1
 8010bfa:	604a      	str	r2, [r1, #4]
 8010bfc:	1c5a      	adds	r2, r3, #1
 8010bfe:	600a      	str	r2, [r1, #0]
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	1c62      	adds	r2, r4, #1
 8010c04:	623a      	str	r2, [r7, #32]
 8010c06:	7023      	strb	r3, [r4, #0]
 8010c08:	2e00      	cmp	r6, #0
 8010c0a:	d010      	beq.n	8010c2e <__ssvfscanf_r+0xd32>
 8010c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0e:	1b54      	subs	r4, r2, r5
 8010c10:	429c      	cmp	r4, r3
 8010c12:	d30c      	bcc.n	8010c2e <__ssvfscanf_r+0xd32>
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	0028      	movs	r0, r5
 8010c18:	0019      	movs	r1, r3
 8010c1a:	633b      	str	r3, [r7, #48]	; 0x30
 8010c1c:	f001 fc68 	bl	80124f0 <realloc>
 8010c20:	1e05      	subs	r5, r0, #0
 8010c22:	d101      	bne.n	8010c28 <__ssvfscanf_r+0xd2c>
 8010c24:	f7ff fa40 	bl	80100a8 <__ssvfscanf_r+0x1ac>
 8010c28:	1903      	adds	r3, r0, r4
 8010c2a:	623b      	str	r3, [r7, #32]
 8010c2c:	6030      	str	r0, [r6, #0]
 8010c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c30:	3b01      	subs	r3, #1
 8010c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d00b      	beq.n	8010c50 <__ssvfscanf_r+0xd54>
 8010c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dd01      	ble.n	8010c44 <__ssvfscanf_r+0xd48>
 8010c40:	6a3c      	ldr	r4, [r7, #32]
 8010c42:	e7c9      	b.n	8010bd8 <__ssvfscanf_r+0xcdc>
 8010c44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c48:	f002 f866 	bl	8012d18 <__ssrefill_r>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d0f7      	beq.n	8010c40 <__ssvfscanf_r+0xd44>
 8010c50:	2300      	movs	r3, #0
 8010c52:	6a3a      	ldr	r2, [r7, #32]
 8010c54:	7013      	strb	r3, [r2, #0]
 8010c56:	1b55      	subs	r5, r2, r5
 8010c58:	2e00      	cmp	r6, #0
 8010c5a:	d009      	beq.n	8010c70 <__ssvfscanf_r+0xd74>
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	1c69      	adds	r1, r5, #1
 8010c60:	428b      	cmp	r3, r1
 8010c62:	d905      	bls.n	8010c70 <__ssvfscanf_r+0xd74>
 8010c64:	6830      	ldr	r0, [r6, #0]
 8010c66:	f001 fc43 	bl	80124f0 <realloc>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	d000      	beq.n	8010c70 <__ssvfscanf_r+0xd74>
 8010c6e:	6030      	str	r0, [r6, #0]
 8010c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c72:	195b      	adds	r3, r3, r5
 8010c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c78:	3301      	adds	r3, #1
 8010c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c7c:	e63c      	b.n	80108f8 <__ssvfscanf_r+0x9fc>
 8010c7e:	22ae      	movs	r2, #174	; 0xae
 8010c80:	2100      	movs	r1, #0
 8010c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c84:	0052      	lsls	r2, r2, #1
 8010c86:	3b01      	subs	r3, #1
 8010c88:	6239      	str	r1, [r7, #32]
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d906      	bls.n	8010c9c <__ssvfscanf_r+0xda0>
 8010c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c90:	3b5e      	subs	r3, #94	; 0x5e
 8010c92:	3bff      	subs	r3, #255	; 0xff
 8010c94:	623b      	str	r3, [r7, #32]
 8010c96:	235e      	movs	r3, #94	; 0x5e
 8010c98:	33ff      	adds	r3, #255	; 0xff
 8010c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c9c:	24d8      	movs	r4, #216	; 0xd8
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	2248      	movs	r2, #72	; 0x48
 8010ca2:	0124      	lsls	r4, r4, #4
 8010ca4:	4334      	orrs	r4, r6
 8010ca6:	2680      	movs	r6, #128	; 0x80
 8010ca8:	61fb      	str	r3, [r7, #28]
 8010caa:	3319      	adds	r3, #25
 8010cac:	33ff      	adds	r3, #255	; 0xff
 8010cae:	189b      	adds	r3, r3, r2
 8010cb0:	19dd      	adds	r5, r3, r7
 8010cb2:	00b6      	lsls	r6, r6, #2
 8010cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	7813      	ldrb	r3, [r2, #0]
 8010cba:	2b39      	cmp	r3, #57	; 0x39
 8010cbc:	d80f      	bhi.n	8010cde <__ssvfscanf_r+0xde2>
 8010cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8010cc0:	d91b      	bls.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010cc2:	0018      	movs	r0, r3
 8010cc4:	382b      	subs	r0, #43	; 0x2b
 8010cc6:	280e      	cmp	r0, #14
 8010cc8:	d817      	bhi.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010cca:	f7ef fa23 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010cce:	168f      	.short	0x168f
 8010cd0:	5416168f 	.word	0x5416168f
 8010cd4:	80808080 	.word	0x80808080
 8010cd8:	87808080 	.word	0x87808080
 8010cdc:	87          	.byte	0x87
 8010cdd:	00          	.byte	0x00
 8010cde:	2b66      	cmp	r3, #102	; 0x66
 8010ce0:	d83a      	bhi.n	8010d58 <__ssvfscanf_r+0xe5c>
 8010ce2:	2b60      	cmp	r3, #96	; 0x60
 8010ce4:	d803      	bhi.n	8010cee <__ssvfscanf_r+0xdf2>
 8010ce6:	2b46      	cmp	r3, #70	; 0x46
 8010ce8:	d805      	bhi.n	8010cf6 <__ssvfscanf_r+0xdfa>
 8010cea:	2b40      	cmp	r3, #64	; 0x40
 8010cec:	d905      	bls.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cf0:	290a      	cmp	r1, #10
 8010cf2:	dc71      	bgt.n	8010dd8 <__ssvfscanf_r+0xedc>
 8010cf4:	e001      	b.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010cf6:	2b58      	cmp	r3, #88	; 0x58
 8010cf8:	d030      	beq.n	8010d5c <__ssvfscanf_r+0xe60>
 8010cfa:	05e3      	lsls	r3, r4, #23
 8010cfc:	d515      	bpl.n	8010d2a <__ssvfscanf_r+0xe2e>
 8010cfe:	238c      	movs	r3, #140	; 0x8c
 8010d00:	2248      	movs	r2, #72	; 0x48
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	189b      	adds	r3, r3, r2
 8010d06:	19db      	adds	r3, r3, r7
 8010d08:	429d      	cmp	r5, r3
 8010d0a:	d905      	bls.n	8010d18 <__ssvfscanf_r+0xe1c>
 8010d0c:	3d01      	subs	r5, #1
 8010d0e:	7829      	ldrb	r1, [r5, #0]
 8010d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d14:	f001 ffc4 	bl	8012ca0 <_sungetc_r>
 8010d18:	238c      	movs	r3, #140	; 0x8c
 8010d1a:	2248      	movs	r2, #72	; 0x48
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	189b      	adds	r3, r3, r2
 8010d20:	19db      	adds	r3, r3, r7
 8010d22:	429d      	cmp	r5, r3
 8010d24:	d101      	bne.n	8010d2a <__ssvfscanf_r+0xe2e>
 8010d26:	f7ff f9e6 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 8010d2a:	2310      	movs	r3, #16
 8010d2c:	0022      	movs	r2, r4
 8010d2e:	401a      	ands	r2, r3
 8010d30:	421c      	tst	r4, r3
 8010d32:	d171      	bne.n	8010e18 <__ssvfscanf_r+0xf1c>
 8010d34:	218c      	movs	r1, #140	; 0x8c
 8010d36:	2048      	movs	r0, #72	; 0x48
 8010d38:	0049      	lsls	r1, r1, #1
 8010d3a:	1809      	adds	r1, r1, r0
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	697e      	ldr	r6, [r7, #20]
 8010d40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d42:	19c9      	adds	r1, r1, r7
 8010d44:	702a      	strb	r2, [r5, #0]
 8010d46:	47b0      	blx	r6
 8010d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4a:	1d1e      	adds	r6, r3, #4
 8010d4c:	06a3      	lsls	r3, r4, #26
 8010d4e:	d559      	bpl.n	8010e04 <__ssvfscanf_r+0xf08>
 8010d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	6018      	str	r0, [r3, #0]
 8010d56:	e05b      	b.n	8010e10 <__ssvfscanf_r+0xf14>
 8010d58:	2b78      	cmp	r3, #120	; 0x78
 8010d5a:	d1ce      	bne.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010d5c:	21c0      	movs	r1, #192	; 0xc0
 8010d5e:	00c9      	lsls	r1, r1, #3
 8010d60:	4021      	ands	r1, r4
 8010d62:	42b1      	cmp	r1, r6
 8010d64:	d1c9      	bne.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010d66:	4934      	ldr	r1, [pc, #208]	; (8010e38 <__ssvfscanf_r+0xf3c>)
 8010d68:	4021      	ands	r1, r4
 8010d6a:	24a0      	movs	r4, #160	; 0xa0
 8010d6c:	00e4      	lsls	r4, r4, #3
 8010d6e:	430c      	orrs	r4, r1
 8010d70:	2110      	movs	r1, #16
 8010d72:	6279      	str	r1, [r7, #36]	; 0x24
 8010d74:	e00b      	b.n	8010d8e <__ssvfscanf_r+0xe92>
 8010d76:	0521      	lsls	r1, r4, #20
 8010d78:	d509      	bpl.n	8010d8e <__ssvfscanf_r+0xe92>
 8010d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d7c:	2900      	cmp	r1, #0
 8010d7e:	d102      	bne.n	8010d86 <__ssvfscanf_r+0xe8a>
 8010d80:	3108      	adds	r1, #8
 8010d82:	4334      	orrs	r4, r6
 8010d84:	6279      	str	r1, [r7, #36]	; 0x24
 8010d86:	0561      	lsls	r1, r4, #21
 8010d88:	d504      	bpl.n	8010d94 <__ssvfscanf_r+0xe98>
 8010d8a:	492c      	ldr	r1, [pc, #176]	; (8010e3c <__ssvfscanf_r+0xf40>)
 8010d8c:	400c      	ands	r4, r1
 8010d8e:	702b      	strb	r3, [r5, #0]
 8010d90:	3501      	adds	r5, #1
 8010d92:	e00c      	b.n	8010dae <__ssvfscanf_r+0xeb2>
 8010d94:	4b2a      	ldr	r3, [pc, #168]	; (8010e40 <__ssvfscanf_r+0xf44>)
 8010d96:	401c      	ands	r4, r3
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d004      	beq.n	8010da8 <__ssvfscanf_r+0xeac>
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	623b      	str	r3, [r7, #32]
 8010da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010da4:	3301      	adds	r3, #1
 8010da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	3301      	adds	r3, #1
 8010dac:	61fb      	str	r3, [r7, #28]
 8010dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010db0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	3b01      	subs	r3, #1
 8010db6:	604b      	str	r3, [r1, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dd1c      	ble.n	8010df6 <__ssvfscanf_r+0xefa>
 8010dbc:	3201      	adds	r2, #1
 8010dbe:	600a      	str	r2, [r1, #0]
 8010dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d000      	beq.n	8010dcc <__ssvfscanf_r+0xed0>
 8010dca:	e773      	b.n	8010cb4 <__ssvfscanf_r+0xdb8>
 8010dcc:	e795      	b.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dd0:	491c      	ldr	r1, [pc, #112]	; (8010e44 <__ssvfscanf_r+0xf48>)
 8010dd2:	0040      	lsls	r0, r0, #1
 8010dd4:	5e41      	ldrsh	r1, [r0, r1]
 8010dd6:	6279      	str	r1, [r7, #36]	; 0x24
 8010dd8:	491b      	ldr	r1, [pc, #108]	; (8010e48 <__ssvfscanf_r+0xf4c>)
 8010dda:	e7d7      	b.n	8010d8c <__ssvfscanf_r+0xe90>
 8010ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dde:	4919      	ldr	r1, [pc, #100]	; (8010e44 <__ssvfscanf_r+0xf48>)
 8010de0:	0040      	lsls	r0, r0, #1
 8010de2:	5e41      	ldrsh	r1, [r0, r1]
 8010de4:	6279      	str	r1, [r7, #36]	; 0x24
 8010de6:	2908      	cmp	r1, #8
 8010de8:	dcf6      	bgt.n	8010dd8 <__ssvfscanf_r+0xedc>
 8010dea:	e786      	b.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010dec:	2180      	movs	r1, #128	; 0x80
 8010dee:	420c      	tst	r4, r1
 8010df0:	d083      	beq.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010df2:	438c      	bics	r4, r1
 8010df4:	e7cb      	b.n	8010d8e <__ssvfscanf_r+0xe92>
 8010df6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010df8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010dfa:	f001 ff8d 	bl	8012d18 <__ssrefill_r>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d0de      	beq.n	8010dc0 <__ssvfscanf_r+0xec4>
 8010e02:	e77a      	b.n	8010cfa <__ssvfscanf_r+0xdfe>
 8010e04:	2308      	movs	r3, #8
 8010e06:	421c      	tst	r4, r3
 8010e08:	d020      	beq.n	8010e4c <__ssvfscanf_r+0xf50>
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	7018      	strb	r0, [r3, #0]
 8010e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e12:	633e      	str	r6, [r7, #48]	; 0x30
 8010e14:	3301      	adds	r3, #1
 8010e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e18:	238c      	movs	r3, #140	; 0x8c
 8010e1a:	2248      	movs	r2, #72	; 0x48
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	189b      	adds	r3, r3, r2
 8010e20:	19db      	adds	r3, r3, r7
 8010e22:	1aed      	subs	r5, r5, r3
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	18ed      	adds	r5, r5, r3
 8010e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2a:	195b      	adds	r3, r3, r5
 8010e2c:	f7ff f92d 	bl	801008a <__ssvfscanf_r+0x18e>
 8010e30:	08015d71 	.word	0x08015d71
 8010e34:	0000fff6 	.word	0x0000fff6
 8010e38:	fffffdff 	.word	0xfffffdff
 8010e3c:	fffffa7f 	.word	0xfffffa7f
 8010e40:	fffffc7f 	.word	0xfffffc7f
 8010e44:	0801609e 	.word	0x0801609e
 8010e48:	fffff47f 	.word	0xfffff47f
 8010e4c:	0763      	lsls	r3, r4, #29
 8010e4e:	d503      	bpl.n	8010e58 <__ssvfscanf_r+0xf5c>
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	8018      	strh	r0, [r3, #0]
 8010e56:	e7db      	b.n	8010e10 <__ssvfscanf_r+0xf14>
 8010e58:	2301      	movs	r3, #1
 8010e5a:	0022      	movs	r2, r4
 8010e5c:	401a      	ands	r2, r3
 8010e5e:	421c      	tst	r4, r3
 8010e60:	d000      	beq.n	8010e64 <__ssvfscanf_r+0xf68>
 8010e62:	e775      	b.n	8010d50 <__ssvfscanf_r+0xe54>
 8010e64:	07a4      	lsls	r4, r4, #30
 8010e66:	d400      	bmi.n	8010e6a <__ssvfscanf_r+0xf6e>
 8010e68:	e772      	b.n	8010d50 <__ssvfscanf_r+0xe54>
 8010e6a:	4ba8      	ldr	r3, [pc, #672]	; (801110c <__ssvfscanf_r+0x1210>)
 8010e6c:	6979      	ldr	r1, [r7, #20]
 8010e6e:	4299      	cmp	r1, r3
 8010e70:	d10c      	bne.n	8010e8c <__ssvfscanf_r+0xf90>
 8010e72:	218c      	movs	r1, #140	; 0x8c
 8010e74:	2048      	movs	r0, #72	; 0x48
 8010e76:	0049      	lsls	r1, r1, #1
 8010e78:	1809      	adds	r1, r1, r0
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e7e:	19c9      	adds	r1, r1, r7
 8010e80:	f001 fe46 	bl	8012b10 <_strtoull_r>
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	c303      	stmia	r3!, {r0, r1}
 8010e8a:	e7c1      	b.n	8010e10 <__ssvfscanf_r+0xf14>
 8010e8c:	218c      	movs	r1, #140	; 0x8c
 8010e8e:	2048      	movs	r0, #72	; 0x48
 8010e90:	0049      	lsls	r1, r1, #1
 8010e92:	1809      	adds	r1, r1, r0
 8010e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e98:	19c9      	adds	r1, r1, r7
 8010e9a:	f001 fd87 	bl	80129ac <_strtoll_r>
 8010e9e:	e7f1      	b.n	8010e84 <__ssvfscanf_r+0xf88>
 8010ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ea2:	f000 fb9f 	bl	80115e4 <_localeconv_r>
 8010ea6:	22ae      	movs	r2, #174	; 0xae
 8010ea8:	2100      	movs	r1, #0
 8010eaa:	6803      	ldr	r3, [r0, #0]
 8010eac:	0052      	lsls	r2, r2, #1
 8010eae:	603b      	str	r3, [r7, #0]
 8010eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb2:	60f9      	str	r1, [r7, #12]
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d906      	bls.n	8010ec8 <__ssvfscanf_r+0xfcc>
 8010eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ebc:	3b5e      	subs	r3, #94	; 0x5e
 8010ebe:	3bff      	subs	r3, #255	; 0xff
 8010ec0:	60fb      	str	r3, [r7, #12]
 8010ec2:	235e      	movs	r3, #94	; 0x5e
 8010ec4:	33ff      	adds	r3, #255	; 0xff
 8010ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ec8:	23f0      	movs	r3, #240	; 0xf0
 8010eca:	00db      	lsls	r3, r3, #3
 8010ecc:	431e      	orrs	r6, r3
 8010ece:	238c      	movs	r3, #140	; 0x8c
 8010ed0:	2248      	movs	r2, #72	; 0x48
 8010ed2:	2400      	movs	r4, #0
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	189b      	adds	r3, r3, r2
 8010ed8:	623c      	str	r4, [r7, #32]
 8010eda:	607c      	str	r4, [r7, #4]
 8010edc:	60bc      	str	r4, [r7, #8]
 8010ede:	61fc      	str	r4, [r7, #28]
 8010ee0:	613c      	str	r4, [r7, #16]
 8010ee2:	19dd      	adds	r5, r3, r7
 8010ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	781a      	ldrb	r2, [r3, #0]
 8010eea:	0010      	movs	r0, r2
 8010eec:	382b      	subs	r0, #43	; 0x2b
 8010eee:	284e      	cmp	r0, #78	; 0x4e
 8010ef0:	d900      	bls.n	8010ef4 <__ssvfscanf_r+0xff8>
 8010ef2:	e133      	b.n	801115c <__ssvfscanf_r+0x1260>
 8010ef4:	f7ef f918 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010ef8:	0132009b 	.word	0x0132009b
 8010efc:	0132009b 	.word	0x0132009b
 8010f00:	004f0132 	.word	0x004f0132
 8010f04:	00720072 	.word	0x00720072
 8010f08:	00720072 	.word	0x00720072
 8010f0c:	00720072 	.word	0x00720072
 8010f10:	00720072 	.word	0x00720072
 8010f14:	01320072 	.word	0x01320072
 8010f18:	01320132 	.word	0x01320132
 8010f1c:	01320132 	.word	0x01320132
 8010f20:	01320132 	.word	0x01320132
 8010f24:	007b00bc 	.word	0x007b00bc
 8010f28:	007b007b 	.word	0x007b007b
 8010f2c:	00f7012f 	.word	0x00f7012f
 8010f30:	01320132 	.word	0x01320132
 8010f34:	013200e3 	.word	0x013200e3
 8010f38:	01320132 	.word	0x01320132
 8010f3c:	00a00132 	.word	0x00a00132
 8010f40:	01120132 	.word	0x01120132
 8010f44:	01320132 	.word	0x01320132
 8010f48:	01010132 	.word	0x01010132
 8010f4c:	01320132 	.word	0x01320132
 8010f50:	00820132 	.word	0x00820132
 8010f54:	01320105 	.word	0x01320105
 8010f58:	01320132 	.word	0x01320132
 8010f5c:	01320132 	.word	0x01320132
 8010f60:	01320132 	.word	0x01320132
 8010f64:	007b00bc 	.word	0x007b00bc
 8010f68:	007b007b 	.word	0x007b007b
 8010f6c:	00f7012f 	.word	0x00f7012f
 8010f70:	01320132 	.word	0x01320132
 8010f74:	013200e3 	.word	0x013200e3
 8010f78:	01320132 	.word	0x01320132
 8010f7c:	00a00132 	.word	0x00a00132
 8010f80:	01120132 	.word	0x01120132
 8010f84:	01320132 	.word	0x01320132
 8010f88:	01010132 	.word	0x01010132
 8010f8c:	01320132 	.word	0x01320132
 8010f90:	00820132 	.word	0x00820132
 8010f94:	0105      	.short	0x0105
 8010f96:	05f1      	lsls	r1, r6, #23
 8010f98:	d520      	bpl.n	8010fdc <__ssvfscanf_r+0x10e0>
 8010f9a:	2280      	movs	r2, #128	; 0x80
 8010f9c:	4396      	bics	r6, r2
 8010f9e:	69fa      	ldr	r2, [r7, #28]
 8010fa0:	3201      	adds	r2, #1
 8010fa2:	61fa      	str	r2, [r7, #28]
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	2a00      	cmp	r2, #0
 8010fa8:	d004      	beq.n	8010fb4 <__ssvfscanf_r+0x10b8>
 8010faa:	3a01      	subs	r2, #1
 8010fac:	60fa      	str	r2, [r7, #12]
 8010fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010fb0:	3201      	adds	r2, #1
 8010fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010fb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fb8:	3a01      	subs	r2, #1
 8010fba:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fbe:	3201      	adds	r2, #1
 8010fc0:	63ba      	str	r2, [r7, #56]	; 0x38
 8010fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fc4:	6852      	ldr	r2, [r2, #4]
 8010fc6:	3a01      	subs	r2, #1
 8010fc8:	604a      	str	r2, [r1, #4]
 8010fca:	2a00      	cmp	r2, #0
 8010fcc:	dc00      	bgt.n	8010fd0 <__ssvfscanf_r+0x10d4>
 8010fce:	e0d6      	b.n	801117e <__ssvfscanf_r+0x1282>
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	600b      	str	r3, [r1, #0]
 8010fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d184      	bne.n	8010ee4 <__ssvfscanf_r+0xfe8>
 8010fda:	e057      	b.n	801108c <__ssvfscanf_r+0x1190>
 8010fdc:	6a39      	ldr	r1, [r7, #32]
 8010fde:	1909      	adds	r1, r1, r4
 8010fe0:	2900      	cmp	r1, #0
 8010fe2:	d153      	bne.n	801108c <__ssvfscanf_r+0x1190>
 8010fe4:	494a      	ldr	r1, [pc, #296]	; (8011110 <__ssvfscanf_r+0x1214>)
 8010fe6:	400e      	ands	r6, r1
 8010fe8:	702a      	strb	r2, [r5, #0]
 8010fea:	3501      	adds	r5, #1
 8010fec:	e7e2      	b.n	8010fb4 <__ssvfscanf_r+0x10b8>
 8010fee:	0531      	lsls	r1, r6, #20
 8010ff0:	d54c      	bpl.n	801108c <__ssvfscanf_r+0x1190>
 8010ff2:	6a39      	ldr	r1, [r7, #32]
 8010ff4:	1909      	adds	r1, r1, r4
 8010ff6:	2900      	cmp	r1, #0
 8010ff8:	d040      	beq.n	801107c <__ssvfscanf_r+0x1180>
 8010ffa:	e047      	b.n	801108c <__ssvfscanf_r+0x1190>
 8010ffc:	2198      	movs	r1, #152	; 0x98
 8010ffe:	2080      	movs	r0, #128	; 0x80
 8011000:	0109      	lsls	r1, r1, #4
 8011002:	4031      	ands	r1, r6
 8011004:	0040      	lsls	r0, r0, #1
 8011006:	4281      	cmp	r1, r0
 8011008:	d140      	bne.n	801108c <__ssvfscanf_r+0x1190>
 801100a:	69f9      	ldr	r1, [r7, #28]
 801100c:	2901      	cmp	r1, #1
 801100e:	d13d      	bne.n	801108c <__ssvfscanf_r+0x1190>
 8011010:	2080      	movs	r0, #128	; 0x80
 8011012:	4940      	ldr	r1, [pc, #256]	; (8011114 <__ssvfscanf_r+0x1218>)
 8011014:	0100      	lsls	r0, r0, #4
 8011016:	400e      	ands	r6, r1
 8011018:	3132      	adds	r1, #50	; 0x32
 801101a:	31ff      	adds	r1, #255	; 0xff
 801101c:	7029      	strb	r1, [r5, #0]
 801101e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011020:	4306      	orrs	r6, r0
 8011022:	3901      	subs	r1, #1
 8011024:	63f9      	str	r1, [r7, #60]	; 0x3c
 8011026:	3501      	adds	r5, #1
 8011028:	2100      	movs	r1, #0
 801102a:	61f9      	str	r1, [r7, #28]
 801102c:	e7dc      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 801102e:	2180      	movs	r1, #128	; 0x80
 8011030:	420e      	tst	r6, r1
 8011032:	d02b      	beq.n	801108c <__ssvfscanf_r+0x1190>
 8011034:	438e      	bics	r6, r1
 8011036:	e7d7      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 8011038:	6a39      	ldr	r1, [r7, #32]
 801103a:	2900      	cmp	r1, #0
 801103c:	d10d      	bne.n	801105a <__ssvfscanf_r+0x115e>
 801103e:	69f9      	ldr	r1, [r7, #28]
 8011040:	2900      	cmp	r1, #0
 8011042:	d10e      	bne.n	8011062 <__ssvfscanf_r+0x1166>
 8011044:	21e0      	movs	r1, #224	; 0xe0
 8011046:	0030      	movs	r0, r6
 8011048:	00c9      	lsls	r1, r1, #3
 801104a:	4008      	ands	r0, r1
 801104c:	4288      	cmp	r0, r1
 801104e:	d108      	bne.n	8011062 <__ssvfscanf_r+0x1166>
 8011050:	4931      	ldr	r1, [pc, #196]	; (8011118 <__ssvfscanf_r+0x121c>)
 8011052:	400e      	ands	r6, r1
 8011054:	2101      	movs	r1, #1
 8011056:	6239      	str	r1, [r7, #32]
 8011058:	e7c6      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 801105a:	6a39      	ldr	r1, [r7, #32]
 801105c:	2902      	cmp	r1, #2
 801105e:	d100      	bne.n	8011062 <__ssvfscanf_r+0x1166>
 8011060:	e089      	b.n	8011176 <__ssvfscanf_r+0x127a>
 8011062:	2c01      	cmp	r4, #1
 8011064:	d001      	beq.n	801106a <__ssvfscanf_r+0x116e>
 8011066:	2c04      	cmp	r4, #4
 8011068:	d110      	bne.n	801108c <__ssvfscanf_r+0x1190>
 801106a:	3401      	adds	r4, #1
 801106c:	b2e4      	uxtb	r4, r4
 801106e:	e7bb      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 8011070:	0531      	lsls	r1, r6, #20
 8011072:	d508      	bpl.n	8011086 <__ssvfscanf_r+0x118a>
 8011074:	6a39      	ldr	r1, [r7, #32]
 8011076:	1909      	adds	r1, r1, r4
 8011078:	2900      	cmp	r1, #0
 801107a:	d104      	bne.n	8011086 <__ssvfscanf_r+0x118a>
 801107c:	4824      	ldr	r0, [pc, #144]	; (8011110 <__ssvfscanf_r+0x1214>)
 801107e:	000c      	movs	r4, r1
 8011080:	4006      	ands	r6, r0
 8011082:	6239      	str	r1, [r7, #32]
 8011084:	e7b0      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 8011086:	6a39      	ldr	r1, [r7, #32]
 8011088:	2901      	cmp	r1, #1
 801108a:	d076      	beq.n	801117a <__ssvfscanf_r+0x127e>
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <__ssvfscanf_r+0x119a>
 8011092:	4b20      	ldr	r3, [pc, #128]	; (8011114 <__ssvfscanf_r+0x1218>)
 8011094:	401e      	ands	r6, r3
 8011096:	6a3b      	ldr	r3, [r7, #32]
 8011098:	3b01      	subs	r3, #1
 801109a:	2b01      	cmp	r3, #1
 801109c:	d877      	bhi.n	801118e <__ssvfscanf_r+0x1292>
 801109e:	238c      	movs	r3, #140	; 0x8c
 80110a0:	2248      	movs	r2, #72	; 0x48
 80110a2:	005b      	lsls	r3, r3, #1
 80110a4:	189b      	adds	r3, r3, r2
 80110a6:	19db      	adds	r3, r3, r7
 80110a8:	429d      	cmp	r5, r3
 80110aa:	d801      	bhi.n	80110b0 <__ssvfscanf_r+0x11b4>
 80110ac:	f7ff f823 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 80110b0:	3d01      	subs	r5, #1
 80110b2:	7829      	ldrb	r1, [r5, #0]
 80110b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80110b8:	f001 fdf2 	bl	8012ca0 <_sungetc_r>
 80110bc:	e7ef      	b.n	801109e <__ssvfscanf_r+0x11a2>
 80110be:	2c00      	cmp	r4, #0
 80110c0:	d10c      	bne.n	80110dc <__ssvfscanf_r+0x11e0>
 80110c2:	69f9      	ldr	r1, [r7, #28]
 80110c4:	2900      	cmp	r1, #0
 80110c6:	d1e4      	bne.n	8011092 <__ssvfscanf_r+0x1196>
 80110c8:	21e0      	movs	r1, #224	; 0xe0
 80110ca:	0030      	movs	r0, r6
 80110cc:	00c9      	lsls	r1, r1, #3
 80110ce:	4008      	ands	r0, r1
 80110d0:	4288      	cmp	r0, r1
 80110d2:	d1e0      	bne.n	8011096 <__ssvfscanf_r+0x119a>
 80110d4:	4910      	ldr	r1, [pc, #64]	; (8011118 <__ssvfscanf_r+0x121c>)
 80110d6:	3401      	adds	r4, #1
 80110d8:	400e      	ands	r6, r1
 80110da:	e785      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 80110dc:	20fd      	movs	r0, #253	; 0xfd
 80110de:	1ee1      	subs	r1, r4, #3
 80110e0:	4201      	tst	r1, r0
 80110e2:	d1d3      	bne.n	801108c <__ssvfscanf_r+0x1190>
 80110e4:	e7c1      	b.n	801106a <__ssvfscanf_r+0x116e>
 80110e6:	0531      	lsls	r1, r6, #20
 80110e8:	d503      	bpl.n	80110f2 <__ssvfscanf_r+0x11f6>
 80110ea:	6a39      	ldr	r1, [r7, #32]
 80110ec:	1909      	adds	r1, r1, r4
 80110ee:	2900      	cmp	r1, #0
 80110f0:	d0c4      	beq.n	801107c <__ssvfscanf_r+0x1180>
 80110f2:	2c02      	cmp	r4, #2
 80110f4:	d1ca      	bne.n	801108c <__ssvfscanf_r+0x1190>
 80110f6:	2403      	movs	r4, #3
 80110f8:	e776      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 80110fa:	2c06      	cmp	r4, #6
 80110fc:	d1c6      	bne.n	801108c <__ssvfscanf_r+0x1190>
 80110fe:	2407      	movs	r4, #7
 8011100:	e772      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 8011102:	2c07      	cmp	r4, #7
 8011104:	d1c2      	bne.n	801108c <__ssvfscanf_r+0x1190>
 8011106:	2408      	movs	r4, #8
 8011108:	e76e      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 801110a:	46c0      	nop			; (mov r8, r8)
 801110c:	0800d2bd 	.word	0x0800d2bd
 8011110:	fffffe7f 	.word	0xfffffe7f
 8011114:	fffffeff 	.word	0xfffffeff
 8011118:	fffff87f 	.word	0xfffff87f
 801111c:	0531      	lsls	r1, r6, #20
 801111e:	d5b5      	bpl.n	801108c <__ssvfscanf_r+0x1190>
 8011120:	21a0      	movs	r1, #160	; 0xa0
 8011122:	2080      	movs	r0, #128	; 0x80
 8011124:	00c9      	lsls	r1, r1, #3
 8011126:	00c0      	lsls	r0, r0, #3
 8011128:	4031      	ands	r1, r6
 801112a:	4281      	cmp	r1, r0
 801112c:	d004      	beq.n	8011138 <__ssvfscanf_r+0x123c>
 801112e:	4206      	tst	r6, r0
 8011130:	d0ac      	beq.n	801108c <__ssvfscanf_r+0x1190>
 8011132:	69f9      	ldr	r1, [r7, #28]
 8011134:	2900      	cmp	r1, #0
 8011136:	d0ae      	beq.n	8011096 <__ssvfscanf_r+0x119a>
 8011138:	2180      	movs	r1, #128	; 0x80
 801113a:	0089      	lsls	r1, r1, #2
 801113c:	420e      	tst	r6, r1
 801113e:	d104      	bne.n	801114a <__ssvfscanf_r+0x124e>
 8011140:	69f9      	ldr	r1, [r7, #28]
 8011142:	6938      	ldr	r0, [r7, #16]
 8011144:	607d      	str	r5, [r7, #4]
 8011146:	1a09      	subs	r1, r1, r0
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	20c0      	movs	r0, #192	; 0xc0
 801114c:	4973      	ldr	r1, [pc, #460]	; (801131c <__ssvfscanf_r+0x1420>)
 801114e:	0040      	lsls	r0, r0, #1
 8011150:	400e      	ands	r6, r1
 8011152:	4306      	orrs	r6, r0
 8011154:	e768      	b.n	8011028 <__ssvfscanf_r+0x112c>
 8011156:	0531      	lsls	r1, r6, #20
 8011158:	d5e2      	bpl.n	8011120 <__ssvfscanf_r+0x1224>
 801115a:	e74a      	b.n	8010ff2 <__ssvfscanf_r+0x10f6>
 801115c:	6839      	ldr	r1, [r7, #0]
 801115e:	7809      	ldrb	r1, [r1, #0]
 8011160:	4291      	cmp	r1, r2
 8011162:	d193      	bne.n	801108c <__ssvfscanf_r+0x1190>
 8011164:	2180      	movs	r1, #128	; 0x80
 8011166:	0089      	lsls	r1, r1, #2
 8011168:	420e      	tst	r6, r1
 801116a:	d08f      	beq.n	801108c <__ssvfscanf_r+0x1190>
 801116c:	496c      	ldr	r1, [pc, #432]	; (8011320 <__ssvfscanf_r+0x1424>)
 801116e:	400e      	ands	r6, r1
 8011170:	69f9      	ldr	r1, [r7, #28]
 8011172:	6139      	str	r1, [r7, #16]
 8011174:	e738      	b.n	8010fe8 <__ssvfscanf_r+0x10ec>
 8011176:	2103      	movs	r1, #3
 8011178:	e76d      	b.n	8011056 <__ssvfscanf_r+0x115a>
 801117a:	2102      	movs	r1, #2
 801117c:	e76b      	b.n	8011056 <__ssvfscanf_r+0x115a>
 801117e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011180:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011182:	f001 fdc9 	bl	8012d18 <__ssrefill_r>
 8011186:	2800      	cmp	r0, #0
 8011188:	d100      	bne.n	801118c <__ssvfscanf_r+0x1290>
 801118a:	e723      	b.n	8010fd4 <__ssvfscanf_r+0x10d8>
 801118c:	e77e      	b.n	801108c <__ssvfscanf_r+0x1190>
 801118e:	1e63      	subs	r3, r4, #1
 8011190:	2b06      	cmp	r3, #6
 8011192:	d825      	bhi.n	80111e0 <__ssvfscanf_r+0x12e4>
 8011194:	2c02      	cmp	r4, #2
 8011196:	d837      	bhi.n	8011208 <__ssvfscanf_r+0x130c>
 8011198:	238c      	movs	r3, #140	; 0x8c
 801119a:	2248      	movs	r2, #72	; 0x48
 801119c:	005b      	lsls	r3, r3, #1
 801119e:	189b      	adds	r3, r3, r2
 80111a0:	19db      	adds	r3, r3, r7
 80111a2:	429d      	cmp	r5, r3
 80111a4:	d801      	bhi.n	80111aa <__ssvfscanf_r+0x12ae>
 80111a6:	f7fe ffa6 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 80111aa:	3d01      	subs	r5, #1
 80111ac:	7829      	ldrb	r1, [r5, #0]
 80111ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80111b2:	f001 fd75 	bl	8012ca0 <_sungetc_r>
 80111b6:	e7ef      	b.n	8011198 <__ssvfscanf_r+0x129c>
 80111b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111bc:	3b01      	subs	r3, #1
 80111be:	7819      	ldrb	r1, [r3, #0]
 80111c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80111c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111c4:	f001 fd6c 	bl	8012ca0 <_sungetc_r>
 80111c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ca:	6a3a      	ldr	r2, [r7, #32]
 80111cc:	189b      	adds	r3, r3, r2
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	2b03      	cmp	r3, #3
 80111d2:	d8f1      	bhi.n	80111b8 <__ssvfscanf_r+0x12bc>
 80111d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d6:	3c03      	subs	r4, #3
 80111d8:	b2e4      	uxtb	r4, r4
 80111da:	1b1b      	subs	r3, r3, r4
 80111dc:	1b2d      	subs	r5, r5, r4
 80111de:	63bb      	str	r3, [r7, #56]	; 0x38
 80111e0:	05f3      	lsls	r3, r6, #23
 80111e2:	d52f      	bpl.n	8011244 <__ssvfscanf_r+0x1348>
 80111e4:	0573      	lsls	r3, r6, #21
 80111e6:	d514      	bpl.n	8011212 <__ssvfscanf_r+0x1316>
 80111e8:	238c      	movs	r3, #140	; 0x8c
 80111ea:	2248      	movs	r2, #72	; 0x48
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	189b      	adds	r3, r3, r2
 80111f0:	19db      	adds	r3, r3, r7
 80111f2:	429d      	cmp	r5, r3
 80111f4:	d801      	bhi.n	80111fa <__ssvfscanf_r+0x12fe>
 80111f6:	f7fe ff7e 	bl	80100f6 <__ssvfscanf_r+0x1fa>
 80111fa:	3d01      	subs	r5, #1
 80111fc:	7829      	ldrb	r1, [r5, #0]
 80111fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011202:	f001 fd4d 	bl	8012ca0 <_sungetc_r>
 8011206:	e7ef      	b.n	80111e8 <__ssvfscanf_r+0x12ec>
 8011208:	1b63      	subs	r3, r4, r5
 801120a:	b2db      	uxtb	r3, r3
 801120c:	63fd      	str	r5, [r7, #60]	; 0x3c
 801120e:	623b      	str	r3, [r7, #32]
 8011210:	e7da      	b.n	80111c8 <__ssvfscanf_r+0x12cc>
 8011212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011214:	1e6c      	subs	r4, r5, #1
 8011216:	7821      	ldrb	r1, [r4, #0]
 8011218:	3b01      	subs	r3, #1
 801121a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801121c:	2965      	cmp	r1, #101	; 0x65
 801121e:	d00a      	beq.n	8011236 <__ssvfscanf_r+0x133a>
 8011220:	2945      	cmp	r1, #69	; 0x45
 8011222:	d008      	beq.n	8011236 <__ssvfscanf_r+0x133a>
 8011224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011228:	f001 fd3a 	bl	8012ca0 <_sungetc_r>
 801122c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122e:	1eac      	subs	r4, r5, #2
 8011230:	3b02      	subs	r3, #2
 8011232:	7821      	ldrb	r1, [r4, #0]
 8011234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011236:	0025      	movs	r5, r4
 8011238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801123a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801123c:	f001 fd30 	bl	8012ca0 <_sungetc_r>
 8011240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011242:	63bb      	str	r3, [r7, #56]	; 0x38
 8011244:	2310      	movs	r3, #16
 8011246:	0032      	movs	r2, r6
 8011248:	401a      	ands	r2, r3
 801124a:	421e      	tst	r6, r3
 801124c:	d001      	beq.n	8011252 <__ssvfscanf_r+0x1356>
 801124e:	f7fe fe71 	bl	800ff34 <__ssvfscanf_r+0x38>
 8011252:	23c0      	movs	r3, #192	; 0xc0
 8011254:	2180      	movs	r1, #128	; 0x80
 8011256:	00db      	lsls	r3, r3, #3
 8011258:	702a      	strb	r2, [r5, #0]
 801125a:	4033      	ands	r3, r6
 801125c:	00c9      	lsls	r1, r1, #3
 801125e:	428b      	cmp	r3, r1
 8011260:	d11f      	bne.n	80112a2 <__ssvfscanf_r+0x13a6>
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	69fa      	ldr	r2, [r7, #28]
 8011266:	69f9      	ldr	r1, [r7, #28]
 8011268:	1a9a      	subs	r2, r3, r2
 801126a:	428b      	cmp	r3, r1
 801126c:	d125      	bne.n	80112ba <__ssvfscanf_r+0x13be>
 801126e:	238c      	movs	r3, #140	; 0x8c
 8011270:	2148      	movs	r1, #72	; 0x48
 8011272:	005b      	lsls	r3, r3, #1
 8011274:	185b      	adds	r3, r3, r1
 8011276:	19d9      	adds	r1, r3, r7
 8011278:	2200      	movs	r2, #0
 801127a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801127c:	f7fb fef0 	bl	800d060 <_strtod_r>
 8011280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011282:	0004      	movs	r4, r0
 8011284:	3304      	adds	r3, #4
 8011286:	000d      	movs	r5, r1
 8011288:	623b      	str	r3, [r7, #32]
 801128a:	07f3      	lsls	r3, r6, #31
 801128c:	d523      	bpl.n	80112d6 <__ssvfscanf_r+0x13da>
 801128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	601c      	str	r4, [r3, #0]
 8011294:	605d      	str	r5, [r3, #4]
 8011296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011298:	3301      	adds	r3, #1
 801129a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	f7fe ffa5 	bl	80101ec <__ssvfscanf_r+0x2f0>
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d0e2      	beq.n	801126e <__ssvfscanf_r+0x1372>
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80112ac:	1c59      	adds	r1, r3, #1
 80112ae:	230a      	movs	r3, #10
 80112b0:	f7fb ff72 	bl	800d198 <_strtol_r>
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	687d      	ldr	r5, [r7, #4]
 80112b8:	1ac2      	subs	r2, r0, r3
 80112ba:	2148      	movs	r1, #72	; 0x48
 80112bc:	4b19      	ldr	r3, [pc, #100]	; (8011324 <__ssvfscanf_r+0x1428>)
 80112be:	185b      	adds	r3, r3, r1
 80112c0:	19db      	adds	r3, r3, r7
 80112c2:	429d      	cmp	r5, r3
 80112c4:	d302      	bcc.n	80112cc <__ssvfscanf_r+0x13d0>
 80112c6:	4b18      	ldr	r3, [pc, #96]	; (8011328 <__ssvfscanf_r+0x142c>)
 80112c8:	185b      	adds	r3, r3, r1
 80112ca:	19dd      	adds	r5, r3, r7
 80112cc:	0028      	movs	r0, r5
 80112ce:	4917      	ldr	r1, [pc, #92]	; (801132c <__ssvfscanf_r+0x1430>)
 80112d0:	f7fc f8fc 	bl	800d4cc <sprintf>
 80112d4:	e7cb      	b.n	801126e <__ssvfscanf_r+0x1372>
 80112d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80112dc:	07b6      	lsls	r6, r6, #30
 80112de:	d4d8      	bmi.n	8011292 <__ssvfscanf_r+0x1396>
 80112e0:	0002      	movs	r2, r0
 80112e2:	000b      	movs	r3, r1
 80112e4:	f7f1 f806 	bl	80022f4 <__aeabi_dcmpun>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d005      	beq.n	80112f8 <__ssvfscanf_r+0x13fc>
 80112ec:	4810      	ldr	r0, [pc, #64]	; (8011330 <__ssvfscanf_r+0x1434>)
 80112ee:	f7fc fabf 	bl	800d870 <nanf>
 80112f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f4:	6018      	str	r0, [r3, #0]
 80112f6:	e7ce      	b.n	8011296 <__ssvfscanf_r+0x139a>
 80112f8:	0020      	movs	r0, r4
 80112fa:	0029      	movs	r1, r5
 80112fc:	f7f1 f8a4 	bl	8002448 <__aeabi_d2f>
 8011300:	e7f7      	b.n	80112f2 <__ssvfscanf_r+0x13f6>
 8011302:	00a3      	lsls	r3, r4, #2
 8011304:	18ed      	adds	r5, r5, r3
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	3401      	adds	r4, #1
 801130a:	6818      	ldr	r0, [r3, #0]
 801130c:	f7fa fe58 	bl	800bfc0 <free>
 8011310:	2200      	movs	r2, #0
 8011312:	682b      	ldr	r3, [r5, #0]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	f7fe ffc3 	bl	80102a0 <__ssvfscanf_r+0x3a4>
 801131a:	46c0      	nop			; (mov r8, r8)
 801131c:	fffff07f 	.word	0xfffff07f
 8011320:	fffffd7f 	.word	0xfffffd7f
 8011324:	0000026b 	.word	0x0000026b
 8011328:	0000026a 	.word	0x0000026a
 801132c:	08016098 	.word	0x08016098
 8011330:	080160fb 	.word	0x080160fb

08011334 <_fclose_r>:
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	0005      	movs	r5, r0
 8011338:	1e0c      	subs	r4, r1, #0
 801133a:	d102      	bne.n	8011342 <_fclose_r+0xe>
 801133c:	2600      	movs	r6, #0
 801133e:	0030      	movs	r0, r6
 8011340:	bd70      	pop	{r4, r5, r6, pc}
 8011342:	2800      	cmp	r0, #0
 8011344:	d004      	beq.n	8011350 <_fclose_r+0x1c>
 8011346:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011348:	2b00      	cmp	r3, #0
 801134a:	d101      	bne.n	8011350 <_fclose_r+0x1c>
 801134c:	f7fc f856 	bl	800d3fc <__sinit>
 8011350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011352:	07db      	lsls	r3, r3, #31
 8011354:	d405      	bmi.n	8011362 <_fclose_r+0x2e>
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	059b      	lsls	r3, r3, #22
 801135a:	d402      	bmi.n	8011362 <_fclose_r+0x2e>
 801135c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801135e:	f7fc fa6b 	bl	800d838 <__retarget_lock_acquire_recursive>
 8011362:	220c      	movs	r2, #12
 8011364:	5ea3      	ldrsh	r3, [r4, r2]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d109      	bne.n	801137e <_fclose_r+0x4a>
 801136a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801136c:	3301      	adds	r3, #1
 801136e:	0016      	movs	r6, r2
 8011370:	401e      	ands	r6, r3
 8011372:	421a      	tst	r2, r3
 8011374:	d1e2      	bne.n	801133c <_fclose_r+0x8>
 8011376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011378:	f7fc fa5f 	bl	800d83a <__retarget_lock_release_recursive>
 801137c:	e7df      	b.n	801133e <_fclose_r+0xa>
 801137e:	0021      	movs	r1, r4
 8011380:	0028      	movs	r0, r5
 8011382:	f000 f837 	bl	80113f4 <__sflush_r>
 8011386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011388:	0006      	movs	r6, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d006      	beq.n	801139c <_fclose_r+0x68>
 801138e:	0028      	movs	r0, r5
 8011390:	69e1      	ldr	r1, [r4, #28]
 8011392:	4798      	blx	r3
 8011394:	2800      	cmp	r0, #0
 8011396:	da01      	bge.n	801139c <_fclose_r+0x68>
 8011398:	2601      	movs	r6, #1
 801139a:	4276      	negs	r6, r6
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	061b      	lsls	r3, r3, #24
 80113a0:	d503      	bpl.n	80113aa <_fclose_r+0x76>
 80113a2:	0028      	movs	r0, r5
 80113a4:	6921      	ldr	r1, [r4, #16]
 80113a6:	f7fc facf 	bl	800d948 <_free_r>
 80113aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80113ac:	2900      	cmp	r1, #0
 80113ae:	d008      	beq.n	80113c2 <_fclose_r+0x8e>
 80113b0:	0023      	movs	r3, r4
 80113b2:	3340      	adds	r3, #64	; 0x40
 80113b4:	4299      	cmp	r1, r3
 80113b6:	d002      	beq.n	80113be <_fclose_r+0x8a>
 80113b8:	0028      	movs	r0, r5
 80113ba:	f7fc fac5 	bl	800d948 <_free_r>
 80113be:	2300      	movs	r3, #0
 80113c0:	6323      	str	r3, [r4, #48]	; 0x30
 80113c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80113c4:	2900      	cmp	r1, #0
 80113c6:	d004      	beq.n	80113d2 <_fclose_r+0x9e>
 80113c8:	0028      	movs	r0, r5
 80113ca:	f7fc fabd 	bl	800d948 <_free_r>
 80113ce:	2300      	movs	r3, #0
 80113d0:	6463      	str	r3, [r4, #68]	; 0x44
 80113d2:	f7fc f803 	bl	800d3dc <__sfp_lock_acquire>
 80113d6:	2300      	movs	r3, #0
 80113d8:	81a3      	strh	r3, [r4, #12]
 80113da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113dc:	07db      	lsls	r3, r3, #31
 80113de:	d402      	bmi.n	80113e6 <_fclose_r+0xb2>
 80113e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113e2:	f7fc fa2a 	bl	800d83a <__retarget_lock_release_recursive>
 80113e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113e8:	f7fc fa25 	bl	800d836 <__retarget_lock_close_recursive>
 80113ec:	f7fb fffe 	bl	800d3ec <__sfp_lock_release>
 80113f0:	e7a5      	b.n	801133e <_fclose_r+0xa>
	...

080113f4 <__sflush_r>:
 80113f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113f6:	230c      	movs	r3, #12
 80113f8:	5eca      	ldrsh	r2, [r1, r3]
 80113fa:	000c      	movs	r4, r1
 80113fc:	0005      	movs	r5, r0
 80113fe:	b291      	uxth	r1, r2
 8011400:	0713      	lsls	r3, r2, #28
 8011402:	d464      	bmi.n	80114ce <__sflush_r+0xda>
 8011404:	2380      	movs	r3, #128	; 0x80
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4313      	orrs	r3, r2
 801140a:	6862      	ldr	r2, [r4, #4]
 801140c:	81a3      	strh	r3, [r4, #12]
 801140e:	2a00      	cmp	r2, #0
 8011410:	dc04      	bgt.n	801141c <__sflush_r+0x28>
 8011412:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011414:	2a00      	cmp	r2, #0
 8011416:	dc01      	bgt.n	801141c <__sflush_r+0x28>
 8011418:	2000      	movs	r0, #0
 801141a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801141c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801141e:	2f00      	cmp	r7, #0
 8011420:	d0fa      	beq.n	8011418 <__sflush_r+0x24>
 8011422:	2200      	movs	r2, #0
 8011424:	2080      	movs	r0, #128	; 0x80
 8011426:	682e      	ldr	r6, [r5, #0]
 8011428:	602a      	str	r2, [r5, #0]
 801142a:	001a      	movs	r2, r3
 801142c:	0140      	lsls	r0, r0, #5
 801142e:	69e1      	ldr	r1, [r4, #28]
 8011430:	4002      	ands	r2, r0
 8011432:	4203      	tst	r3, r0
 8011434:	d038      	beq.n	80114a8 <__sflush_r+0xb4>
 8011436:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011438:	89a3      	ldrh	r3, [r4, #12]
 801143a:	075b      	lsls	r3, r3, #29
 801143c:	d506      	bpl.n	801144c <__sflush_r+0x58>
 801143e:	6863      	ldr	r3, [r4, #4]
 8011440:	1ac0      	subs	r0, r0, r3
 8011442:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011444:	2b00      	cmp	r3, #0
 8011446:	d001      	beq.n	801144c <__sflush_r+0x58>
 8011448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801144a:	1ac0      	subs	r0, r0, r3
 801144c:	0002      	movs	r2, r0
 801144e:	2300      	movs	r3, #0
 8011450:	0028      	movs	r0, r5
 8011452:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8011454:	69e1      	ldr	r1, [r4, #28]
 8011456:	47b8      	blx	r7
 8011458:	89a2      	ldrh	r2, [r4, #12]
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	d106      	bne.n	801146c <__sflush_r+0x78>
 801145e:	6829      	ldr	r1, [r5, #0]
 8011460:	291d      	cmp	r1, #29
 8011462:	d830      	bhi.n	80114c6 <__sflush_r+0xd2>
 8011464:	4b2c      	ldr	r3, [pc, #176]	; (8011518 <__sflush_r+0x124>)
 8011466:	410b      	asrs	r3, r1
 8011468:	07db      	lsls	r3, r3, #31
 801146a:	d42c      	bmi.n	80114c6 <__sflush_r+0xd2>
 801146c:	4b2b      	ldr	r3, [pc, #172]	; (801151c <__sflush_r+0x128>)
 801146e:	4013      	ands	r3, r2
 8011470:	2200      	movs	r2, #0
 8011472:	6062      	str	r2, [r4, #4]
 8011474:	6922      	ldr	r2, [r4, #16]
 8011476:	b21b      	sxth	r3, r3
 8011478:	81a3      	strh	r3, [r4, #12]
 801147a:	6022      	str	r2, [r4, #0]
 801147c:	04db      	lsls	r3, r3, #19
 801147e:	d505      	bpl.n	801148c <__sflush_r+0x98>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	d102      	bne.n	801148a <__sflush_r+0x96>
 8011484:	682b      	ldr	r3, [r5, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d100      	bne.n	801148c <__sflush_r+0x98>
 801148a:	6520      	str	r0, [r4, #80]	; 0x50
 801148c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801148e:	602e      	str	r6, [r5, #0]
 8011490:	2900      	cmp	r1, #0
 8011492:	d0c1      	beq.n	8011418 <__sflush_r+0x24>
 8011494:	0023      	movs	r3, r4
 8011496:	3340      	adds	r3, #64	; 0x40
 8011498:	4299      	cmp	r1, r3
 801149a:	d002      	beq.n	80114a2 <__sflush_r+0xae>
 801149c:	0028      	movs	r0, r5
 801149e:	f7fc fa53 	bl	800d948 <_free_r>
 80114a2:	2000      	movs	r0, #0
 80114a4:	6320      	str	r0, [r4, #48]	; 0x30
 80114a6:	e7b8      	b.n	801141a <__sflush_r+0x26>
 80114a8:	2301      	movs	r3, #1
 80114aa:	0028      	movs	r0, r5
 80114ac:	47b8      	blx	r7
 80114ae:	1c43      	adds	r3, r0, #1
 80114b0:	d1c2      	bne.n	8011438 <__sflush_r+0x44>
 80114b2:	682b      	ldr	r3, [r5, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d0bf      	beq.n	8011438 <__sflush_r+0x44>
 80114b8:	2b1d      	cmp	r3, #29
 80114ba:	d001      	beq.n	80114c0 <__sflush_r+0xcc>
 80114bc:	2b16      	cmp	r3, #22
 80114be:	d101      	bne.n	80114c4 <__sflush_r+0xd0>
 80114c0:	602e      	str	r6, [r5, #0]
 80114c2:	e7a9      	b.n	8011418 <__sflush_r+0x24>
 80114c4:	89a2      	ldrh	r2, [r4, #12]
 80114c6:	2340      	movs	r3, #64	; 0x40
 80114c8:	4313      	orrs	r3, r2
 80114ca:	81a3      	strh	r3, [r4, #12]
 80114cc:	e7a5      	b.n	801141a <__sflush_r+0x26>
 80114ce:	6926      	ldr	r6, [r4, #16]
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	d0a1      	beq.n	8011418 <__sflush_r+0x24>
 80114d4:	6827      	ldr	r7, [r4, #0]
 80114d6:	6026      	str	r6, [r4, #0]
 80114d8:	1bbb      	subs	r3, r7, r6
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	2300      	movs	r3, #0
 80114de:	0789      	lsls	r1, r1, #30
 80114e0:	d100      	bne.n	80114e4 <__sflush_r+0xf0>
 80114e2:	6963      	ldr	r3, [r4, #20]
 80114e4:	60a3      	str	r3, [r4, #8]
 80114e6:	9b01      	ldr	r3, [sp, #4]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	dc00      	bgt.n	80114ee <__sflush_r+0xfa>
 80114ec:	e794      	b.n	8011418 <__sflush_r+0x24>
 80114ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114f0:	0032      	movs	r2, r6
 80114f2:	001f      	movs	r7, r3
 80114f4:	0028      	movs	r0, r5
 80114f6:	9b01      	ldr	r3, [sp, #4]
 80114f8:	69e1      	ldr	r1, [r4, #28]
 80114fa:	47b8      	blx	r7
 80114fc:	2800      	cmp	r0, #0
 80114fe:	dc06      	bgt.n	801150e <__sflush_r+0x11a>
 8011500:	2340      	movs	r3, #64	; 0x40
 8011502:	2001      	movs	r0, #1
 8011504:	89a2      	ldrh	r2, [r4, #12]
 8011506:	4240      	negs	r0, r0
 8011508:	4313      	orrs	r3, r2
 801150a:	81a3      	strh	r3, [r4, #12]
 801150c:	e785      	b.n	801141a <__sflush_r+0x26>
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	1836      	adds	r6, r6, r0
 8011512:	1a1b      	subs	r3, r3, r0
 8011514:	9301      	str	r3, [sp, #4]
 8011516:	e7e6      	b.n	80114e6 <__sflush_r+0xf2>
 8011518:	dfbffffe 	.word	0xdfbffffe
 801151c:	fffff7ff 	.word	0xfffff7ff

08011520 <_fflush_r>:
 8011520:	b570      	push	{r4, r5, r6, lr}
 8011522:	0005      	movs	r5, r0
 8011524:	000c      	movs	r4, r1
 8011526:	2800      	cmp	r0, #0
 8011528:	d004      	beq.n	8011534 <_fflush_r+0x14>
 801152a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801152c:	2b00      	cmp	r3, #0
 801152e:	d101      	bne.n	8011534 <_fflush_r+0x14>
 8011530:	f7fb ff64 	bl	800d3fc <__sinit>
 8011534:	220c      	movs	r2, #12
 8011536:	5ea3      	ldrsh	r3, [r4, r2]
 8011538:	1e1e      	subs	r6, r3, #0
 801153a:	d015      	beq.n	8011568 <_fflush_r+0x48>
 801153c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801153e:	07d2      	lsls	r2, r2, #31
 8011540:	d404      	bmi.n	801154c <_fflush_r+0x2c>
 8011542:	059b      	lsls	r3, r3, #22
 8011544:	d402      	bmi.n	801154c <_fflush_r+0x2c>
 8011546:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011548:	f7fc f976 	bl	800d838 <__retarget_lock_acquire_recursive>
 801154c:	0021      	movs	r1, r4
 801154e:	0028      	movs	r0, r5
 8011550:	f7ff ff50 	bl	80113f4 <__sflush_r>
 8011554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011556:	0006      	movs	r6, r0
 8011558:	07db      	lsls	r3, r3, #31
 801155a:	d405      	bmi.n	8011568 <_fflush_r+0x48>
 801155c:	89a3      	ldrh	r3, [r4, #12]
 801155e:	059b      	lsls	r3, r3, #22
 8011560:	d402      	bmi.n	8011568 <_fflush_r+0x48>
 8011562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011564:	f7fc f969 	bl	800d83a <__retarget_lock_release_recursive>
 8011568:	0030      	movs	r0, r6
 801156a:	bd70      	pop	{r4, r5, r6, pc}

0801156c <__sccl>:
 801156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801156e:	780b      	ldrb	r3, [r1, #0]
 8011570:	0004      	movs	r4, r0
 8011572:	2b5e      	cmp	r3, #94	; 0x5e
 8011574:	d019      	beq.n	80115aa <__sccl+0x3e>
 8011576:	2200      	movs	r2, #0
 8011578:	1c4d      	adds	r5, r1, #1
 801157a:	0021      	movs	r1, r4
 801157c:	1c60      	adds	r0, r4, #1
 801157e:	30ff      	adds	r0, #255	; 0xff
 8011580:	700a      	strb	r2, [r1, #0]
 8011582:	3101      	adds	r1, #1
 8011584:	4281      	cmp	r1, r0
 8011586:	d1fb      	bne.n	8011580 <__sccl+0x14>
 8011588:	1e68      	subs	r0, r5, #1
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00c      	beq.n	80115a8 <__sccl+0x3c>
 801158e:	2101      	movs	r1, #1
 8011590:	262d      	movs	r6, #45	; 0x2d
 8011592:	404a      	eors	r2, r1
 8011594:	0028      	movs	r0, r5
 8011596:	54e2      	strb	r2, [r4, r3]
 8011598:	7801      	ldrb	r1, [r0, #0]
 801159a:	1c45      	adds	r5, r0, #1
 801159c:	292d      	cmp	r1, #45	; 0x2d
 801159e:	d00c      	beq.n	80115ba <__sccl+0x4e>
 80115a0:	295d      	cmp	r1, #93	; 0x5d
 80115a2:	d01d      	beq.n	80115e0 <__sccl+0x74>
 80115a4:	2900      	cmp	r1, #0
 80115a6:	d104      	bne.n	80115b2 <__sccl+0x46>
 80115a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115aa:	2201      	movs	r2, #1
 80115ac:	784b      	ldrb	r3, [r1, #1]
 80115ae:	1c8d      	adds	r5, r1, #2
 80115b0:	e7e3      	b.n	801157a <__sccl+0xe>
 80115b2:	000b      	movs	r3, r1
 80115b4:	e7ee      	b.n	8011594 <__sccl+0x28>
 80115b6:	0033      	movs	r3, r6
 80115b8:	e7ec      	b.n	8011594 <__sccl+0x28>
 80115ba:	7841      	ldrb	r1, [r0, #1]
 80115bc:	295d      	cmp	r1, #93	; 0x5d
 80115be:	d0fa      	beq.n	80115b6 <__sccl+0x4a>
 80115c0:	428b      	cmp	r3, r1
 80115c2:	dcf8      	bgt.n	80115b6 <__sccl+0x4a>
 80115c4:	001d      	movs	r5, r3
 80115c6:	3002      	adds	r0, #2
 80115c8:	3501      	adds	r5, #1
 80115ca:	5562      	strb	r2, [r4, r5]
 80115cc:	42a9      	cmp	r1, r5
 80115ce:	dcfb      	bgt.n	80115c8 <__sccl+0x5c>
 80115d0:	2500      	movs	r5, #0
 80115d2:	1c5f      	adds	r7, r3, #1
 80115d4:	428b      	cmp	r3, r1
 80115d6:	da01      	bge.n	80115dc <__sccl+0x70>
 80115d8:	1acd      	subs	r5, r1, r3
 80115da:	3d01      	subs	r5, #1
 80115dc:	197b      	adds	r3, r7, r5
 80115de:	e7db      	b.n	8011598 <__sccl+0x2c>
 80115e0:	0028      	movs	r0, r5
 80115e2:	e7e1      	b.n	80115a8 <__sccl+0x3c>

080115e4 <_localeconv_r>:
 80115e4:	4800      	ldr	r0, [pc, #0]	; (80115e8 <_localeconv_r+0x4>)
 80115e6:	4770      	bx	lr
 80115e8:	20000534 	.word	0x20000534

080115ec <__libc_fini_array>:
 80115ec:	b570      	push	{r4, r5, r6, lr}
 80115ee:	4c07      	ldr	r4, [pc, #28]	; (801160c <__libc_fini_array+0x20>)
 80115f0:	4d07      	ldr	r5, [pc, #28]	; (8011610 <__libc_fini_array+0x24>)
 80115f2:	1b64      	subs	r4, r4, r5
 80115f4:	10a4      	asrs	r4, r4, #2
 80115f6:	2c00      	cmp	r4, #0
 80115f8:	d102      	bne.n	8011600 <__libc_fini_array+0x14>
 80115fa:	f002 fd47 	bl	801408c <_fini>
 80115fe:	bd70      	pop	{r4, r5, r6, pc}
 8011600:	3c01      	subs	r4, #1
 8011602:	00a3      	lsls	r3, r4, #2
 8011604:	58eb      	ldr	r3, [r5, r3]
 8011606:	4798      	blx	r3
 8011608:	e7f5      	b.n	80115f6 <__libc_fini_array+0xa>
 801160a:	46c0      	nop			; (mov r8, r8)
 801160c:	08016198 	.word	0x08016198
 8011610:	08016194 	.word	0x08016194

08011614 <memchr>:
 8011614:	b2c9      	uxtb	r1, r1
 8011616:	1882      	adds	r2, r0, r2
 8011618:	4290      	cmp	r0, r2
 801161a:	d101      	bne.n	8011620 <memchr+0xc>
 801161c:	2000      	movs	r0, #0
 801161e:	4770      	bx	lr
 8011620:	7803      	ldrb	r3, [r0, #0]
 8011622:	428b      	cmp	r3, r1
 8011624:	d0fb      	beq.n	801161e <memchr+0xa>
 8011626:	3001      	adds	r0, #1
 8011628:	e7f6      	b.n	8011618 <memchr+0x4>
	...

0801162c <frexp>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	0014      	movs	r4, r2
 8011630:	2500      	movs	r5, #0
 8011632:	6025      	str	r5, [r4, #0]
 8011634:	4d10      	ldr	r5, [pc, #64]	; (8011678 <frexp+0x4c>)
 8011636:	004b      	lsls	r3, r1, #1
 8011638:	000a      	movs	r2, r1
 801163a:	085b      	lsrs	r3, r3, #1
 801163c:	42ab      	cmp	r3, r5
 801163e:	dc1a      	bgt.n	8011676 <frexp+0x4a>
 8011640:	001d      	movs	r5, r3
 8011642:	4305      	orrs	r5, r0
 8011644:	d017      	beq.n	8011676 <frexp+0x4a>
 8011646:	4d0d      	ldr	r5, [pc, #52]	; (801167c <frexp+0x50>)
 8011648:	4229      	tst	r1, r5
 801164a:	d109      	bne.n	8011660 <frexp+0x34>
 801164c:	2200      	movs	r2, #0
 801164e:	4b0c      	ldr	r3, [pc, #48]	; (8011680 <frexp+0x54>)
 8011650:	f7f0 f80c 	bl	800166c <__aeabi_dmul>
 8011654:	2536      	movs	r5, #54	; 0x36
 8011656:	000a      	movs	r2, r1
 8011658:	004b      	lsls	r3, r1, #1
 801165a:	426d      	negs	r5, r5
 801165c:	085b      	lsrs	r3, r3, #1
 801165e:	6025      	str	r5, [r4, #0]
 8011660:	4d08      	ldr	r5, [pc, #32]	; (8011684 <frexp+0x58>)
 8011662:	151b      	asrs	r3, r3, #20
 8011664:	195b      	adds	r3, r3, r5
 8011666:	6825      	ldr	r5, [r4, #0]
 8011668:	18eb      	adds	r3, r5, r3
 801166a:	6023      	str	r3, [r4, #0]
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <frexp+0x5c>)
 801166e:	401a      	ands	r2, r3
 8011670:	4b06      	ldr	r3, [pc, #24]	; (801168c <frexp+0x60>)
 8011672:	4313      	orrs	r3, r2
 8011674:	0019      	movs	r1, r3
 8011676:	bd70      	pop	{r4, r5, r6, pc}
 8011678:	7fefffff 	.word	0x7fefffff
 801167c:	7ff00000 	.word	0x7ff00000
 8011680:	43500000 	.word	0x43500000
 8011684:	fffffc02 	.word	0xfffffc02
 8011688:	800fffff 	.word	0x800fffff
 801168c:	3fe00000 	.word	0x3fe00000

08011690 <__register_exitproc>:
 8011690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011692:	4f1c      	ldr	r7, [pc, #112]	; (8011704 <__register_exitproc+0x74>)
 8011694:	0004      	movs	r4, r0
 8011696:	6838      	ldr	r0, [r7, #0]
 8011698:	0016      	movs	r6, r2
 801169a:	9301      	str	r3, [sp, #4]
 801169c:	9100      	str	r1, [sp, #0]
 801169e:	f7fc f8cb 	bl	800d838 <__retarget_lock_acquire_recursive>
 80116a2:	4a19      	ldr	r2, [pc, #100]	; (8011708 <__register_exitproc+0x78>)
 80116a4:	6813      	ldr	r3, [r2, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d101      	bne.n	80116ae <__register_exitproc+0x1e>
 80116aa:	4b18      	ldr	r3, [pc, #96]	; (801170c <__register_exitproc+0x7c>)
 80116ac:	6013      	str	r3, [r2, #0]
 80116ae:	685a      	ldr	r2, [r3, #4]
 80116b0:	6838      	ldr	r0, [r7, #0]
 80116b2:	2a1f      	cmp	r2, #31
 80116b4:	dd04      	ble.n	80116c0 <__register_exitproc+0x30>
 80116b6:	f7fc f8c0 	bl	800d83a <__retarget_lock_release_recursive>
 80116ba:	2001      	movs	r0, #1
 80116bc:	4240      	negs	r0, r0
 80116be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80116c0:	2c00      	cmp	r4, #0
 80116c2:	d014      	beq.n	80116ee <__register_exitproc+0x5e>
 80116c4:	0091      	lsls	r1, r2, #2
 80116c6:	1859      	adds	r1, r3, r1
 80116c8:	000f      	movs	r7, r1
 80116ca:	3788      	adds	r7, #136	; 0x88
 80116cc:	603e      	str	r6, [r7, #0]
 80116ce:	2701      	movs	r7, #1
 80116d0:	001e      	movs	r6, r3
 80116d2:	4097      	lsls	r7, r2
 80116d4:	3685      	adds	r6, #133	; 0x85
 80116d6:	36ff      	adds	r6, #255	; 0xff
 80116d8:	6875      	ldr	r5, [r6, #4]
 80116da:	31fc      	adds	r1, #252	; 0xfc
 80116dc:	433d      	orrs	r5, r7
 80116de:	6075      	str	r5, [r6, #4]
 80116e0:	9d01      	ldr	r5, [sp, #4]
 80116e2:	60cd      	str	r5, [r1, #12]
 80116e4:	2c02      	cmp	r4, #2
 80116e6:	d102      	bne.n	80116ee <__register_exitproc+0x5e>
 80116e8:	68b1      	ldr	r1, [r6, #8]
 80116ea:	4339      	orrs	r1, r7
 80116ec:	60b1      	str	r1, [r6, #8]
 80116ee:	1c51      	adds	r1, r2, #1
 80116f0:	6059      	str	r1, [r3, #4]
 80116f2:	3202      	adds	r2, #2
 80116f4:	9900      	ldr	r1, [sp, #0]
 80116f6:	0092      	lsls	r2, r2, #2
 80116f8:	50d1      	str	r1, [r2, r3]
 80116fa:	f7fc f89e 	bl	800d83a <__retarget_lock_release_recursive>
 80116fe:	2000      	movs	r0, #0
 8011700:	e7dd      	b.n	80116be <__register_exitproc+0x2e>
 8011702:	46c0      	nop			; (mov r8, r8)
 8011704:	200006d4 	.word	0x200006d4
 8011708:	20000dcc 	.word	0x20000dcc
 801170c:	20000dd0 	.word	0x20000dd0

08011710 <__assert_func>:
 8011710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011712:	0014      	movs	r4, r2
 8011714:	001a      	movs	r2, r3
 8011716:	4b09      	ldr	r3, [pc, #36]	; (801173c <__assert_func+0x2c>)
 8011718:	0005      	movs	r5, r0
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	000e      	movs	r6, r1
 801171e:	68d8      	ldr	r0, [r3, #12]
 8011720:	4b07      	ldr	r3, [pc, #28]	; (8011740 <__assert_func+0x30>)
 8011722:	2c00      	cmp	r4, #0
 8011724:	d101      	bne.n	801172a <__assert_func+0x1a>
 8011726:	4b07      	ldr	r3, [pc, #28]	; (8011744 <__assert_func+0x34>)
 8011728:	001c      	movs	r4, r3
 801172a:	4907      	ldr	r1, [pc, #28]	; (8011748 <__assert_func+0x38>)
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	9402      	str	r4, [sp, #8]
 8011730:	002b      	movs	r3, r5
 8011732:	9600      	str	r6, [sp, #0]
 8011734:	f001 fa20 	bl	8012b78 <fiprintf>
 8011738:	f002 fb08 	bl	8013d4c <abort>
 801173c:	200006d0 	.word	0x200006d0
 8011740:	080160c0 	.word	0x080160c0
 8011744:	080160fb 	.word	0x080160fb
 8011748:	080160cd 	.word	0x080160cd

0801174c <_calloc_r>:
 801174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174e:	2400      	movs	r4, #0
 8011750:	0c0b      	lsrs	r3, r1, #16
 8011752:	0c16      	lsrs	r6, r2, #16
 8011754:	42a3      	cmp	r3, r4
 8011756:	d133      	bne.n	80117c0 <_calloc_r+0x74>
 8011758:	42a6      	cmp	r6, r4
 801175a:	d121      	bne.n	80117a0 <_calloc_r+0x54>
 801175c:	b28b      	uxth	r3, r1
 801175e:	b291      	uxth	r1, r2
 8011760:	4359      	muls	r1, r3
 8011762:	f7fa fc37 	bl	800bfd4 <_malloc_r>
 8011766:	1e05      	subs	r5, r0, #0
 8011768:	d033      	beq.n	80117d2 <_calloc_r+0x86>
 801176a:	0003      	movs	r3, r0
 801176c:	3b08      	subs	r3, #8
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	2303      	movs	r3, #3
 8011772:	439a      	bics	r2, r3
 8011774:	3a04      	subs	r2, #4
 8011776:	2a24      	cmp	r2, #36	; 0x24
 8011778:	d832      	bhi.n	80117e0 <_calloc_r+0x94>
 801177a:	0003      	movs	r3, r0
 801177c:	2a13      	cmp	r2, #19
 801177e:	d90a      	bls.n	8011796 <_calloc_r+0x4a>
 8011780:	6004      	str	r4, [r0, #0]
 8011782:	6044      	str	r4, [r0, #4]
 8011784:	3308      	adds	r3, #8
 8011786:	2a1b      	cmp	r2, #27
 8011788:	d905      	bls.n	8011796 <_calloc_r+0x4a>
 801178a:	6084      	str	r4, [r0, #8]
 801178c:	60c4      	str	r4, [r0, #12]
 801178e:	2a24      	cmp	r2, #36	; 0x24
 8011790:	d021      	beq.n	80117d6 <_calloc_r+0x8a>
 8011792:	0003      	movs	r3, r0
 8011794:	3310      	adds	r3, #16
 8011796:	2200      	movs	r2, #0
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	605a      	str	r2, [r3, #4]
 801179c:	609a      	str	r2, [r3, #8]
 801179e:	e018      	b.n	80117d2 <_calloc_r+0x86>
 80117a0:	1c33      	adds	r3, r6, #0
 80117a2:	1c0d      	adds	r5, r1, #0
 80117a4:	b289      	uxth	r1, r1
 80117a6:	b292      	uxth	r2, r2
 80117a8:	434a      	muls	r2, r1
 80117aa:	b2ad      	uxth	r5, r5
 80117ac:	b299      	uxth	r1, r3
 80117ae:	4369      	muls	r1, r5
 80117b0:	0c13      	lsrs	r3, r2, #16
 80117b2:	18c9      	adds	r1, r1, r3
 80117b4:	0c0b      	lsrs	r3, r1, #16
 80117b6:	d107      	bne.n	80117c8 <_calloc_r+0x7c>
 80117b8:	0409      	lsls	r1, r1, #16
 80117ba:	b292      	uxth	r2, r2
 80117bc:	4311      	orrs	r1, r2
 80117be:	e7d0      	b.n	8011762 <_calloc_r+0x16>
 80117c0:	2e00      	cmp	r6, #0
 80117c2:	d101      	bne.n	80117c8 <_calloc_r+0x7c>
 80117c4:	1c15      	adds	r5, r2, #0
 80117c6:	e7ed      	b.n	80117a4 <_calloc_r+0x58>
 80117c8:	f7fc f80a 	bl	800d7e0 <__errno>
 80117cc:	230c      	movs	r3, #12
 80117ce:	2500      	movs	r5, #0
 80117d0:	6003      	str	r3, [r0, #0]
 80117d2:	0028      	movs	r0, r5
 80117d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d6:	0003      	movs	r3, r0
 80117d8:	6104      	str	r4, [r0, #16]
 80117da:	3318      	adds	r3, #24
 80117dc:	6144      	str	r4, [r0, #20]
 80117de:	e7da      	b.n	8011796 <_calloc_r+0x4a>
 80117e0:	2100      	movs	r1, #0
 80117e2:	f7fb ff09 	bl	800d5f8 <memset>
 80117e6:	e7f4      	b.n	80117d2 <_calloc_r+0x86>

080117e8 <quorem>:
 80117e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117ea:	6902      	ldr	r2, [r0, #16]
 80117ec:	690b      	ldr	r3, [r1, #16]
 80117ee:	b089      	sub	sp, #36	; 0x24
 80117f0:	0007      	movs	r7, r0
 80117f2:	9104      	str	r1, [sp, #16]
 80117f4:	2000      	movs	r0, #0
 80117f6:	429a      	cmp	r2, r3
 80117f8:	db69      	blt.n	80118ce <quorem+0xe6>
 80117fa:	3b01      	subs	r3, #1
 80117fc:	009c      	lsls	r4, r3, #2
 80117fe:	9301      	str	r3, [sp, #4]
 8011800:	000b      	movs	r3, r1
 8011802:	3314      	adds	r3, #20
 8011804:	9306      	str	r3, [sp, #24]
 8011806:	191b      	adds	r3, r3, r4
 8011808:	9305      	str	r3, [sp, #20]
 801180a:	003b      	movs	r3, r7
 801180c:	3314      	adds	r3, #20
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	191c      	adds	r4, r3, r4
 8011812:	9b05      	ldr	r3, [sp, #20]
 8011814:	6826      	ldr	r6, [r4, #0]
 8011816:	681d      	ldr	r5, [r3, #0]
 8011818:	0030      	movs	r0, r6
 801181a:	3501      	adds	r5, #1
 801181c:	0029      	movs	r1, r5
 801181e:	f7ee fc8d 	bl	800013c <__udivsi3>
 8011822:	9002      	str	r0, [sp, #8]
 8011824:	42ae      	cmp	r6, r5
 8011826:	d329      	bcc.n	801187c <quorem+0x94>
 8011828:	9b06      	ldr	r3, [sp, #24]
 801182a:	2600      	movs	r6, #0
 801182c:	469c      	mov	ip, r3
 801182e:	9d03      	ldr	r5, [sp, #12]
 8011830:	9606      	str	r6, [sp, #24]
 8011832:	4662      	mov	r2, ip
 8011834:	ca08      	ldmia	r2!, {r3}
 8011836:	6828      	ldr	r0, [r5, #0]
 8011838:	4694      	mov	ip, r2
 801183a:	9a02      	ldr	r2, [sp, #8]
 801183c:	b299      	uxth	r1, r3
 801183e:	4351      	muls	r1, r2
 8011840:	0c1b      	lsrs	r3, r3, #16
 8011842:	4353      	muls	r3, r2
 8011844:	1989      	adds	r1, r1, r6
 8011846:	0c0a      	lsrs	r2, r1, #16
 8011848:	189b      	adds	r3, r3, r2
 801184a:	9307      	str	r3, [sp, #28]
 801184c:	0c1e      	lsrs	r6, r3, #16
 801184e:	9b06      	ldr	r3, [sp, #24]
 8011850:	b282      	uxth	r2, r0
 8011852:	18d2      	adds	r2, r2, r3
 8011854:	466b      	mov	r3, sp
 8011856:	b289      	uxth	r1, r1
 8011858:	8b9b      	ldrh	r3, [r3, #28]
 801185a:	1a52      	subs	r2, r2, r1
 801185c:	0c01      	lsrs	r1, r0, #16
 801185e:	1ac9      	subs	r1, r1, r3
 8011860:	1413      	asrs	r3, r2, #16
 8011862:	18cb      	adds	r3, r1, r3
 8011864:	1419      	asrs	r1, r3, #16
 8011866:	b292      	uxth	r2, r2
 8011868:	041b      	lsls	r3, r3, #16
 801186a:	4313      	orrs	r3, r2
 801186c:	c508      	stmia	r5!, {r3}
 801186e:	9b05      	ldr	r3, [sp, #20]
 8011870:	9106      	str	r1, [sp, #24]
 8011872:	4563      	cmp	r3, ip
 8011874:	d2dd      	bcs.n	8011832 <quorem+0x4a>
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d030      	beq.n	80118de <quorem+0xf6>
 801187c:	0038      	movs	r0, r7
 801187e:	9904      	ldr	r1, [sp, #16]
 8011880:	f7fc ff04 	bl	800e68c <__mcmp>
 8011884:	2800      	cmp	r0, #0
 8011886:	db21      	blt.n	80118cc <quorem+0xe4>
 8011888:	0038      	movs	r0, r7
 801188a:	2600      	movs	r6, #0
 801188c:	9b02      	ldr	r3, [sp, #8]
 801188e:	9c04      	ldr	r4, [sp, #16]
 8011890:	3301      	adds	r3, #1
 8011892:	9302      	str	r3, [sp, #8]
 8011894:	3014      	adds	r0, #20
 8011896:	3414      	adds	r4, #20
 8011898:	6803      	ldr	r3, [r0, #0]
 801189a:	cc02      	ldmia	r4!, {r1}
 801189c:	b29d      	uxth	r5, r3
 801189e:	19ad      	adds	r5, r5, r6
 80118a0:	b28a      	uxth	r2, r1
 80118a2:	1aaa      	subs	r2, r5, r2
 80118a4:	0c09      	lsrs	r1, r1, #16
 80118a6:	0c1b      	lsrs	r3, r3, #16
 80118a8:	1a5b      	subs	r3, r3, r1
 80118aa:	1411      	asrs	r1, r2, #16
 80118ac:	185b      	adds	r3, r3, r1
 80118ae:	141e      	asrs	r6, r3, #16
 80118b0:	b292      	uxth	r2, r2
 80118b2:	041b      	lsls	r3, r3, #16
 80118b4:	4313      	orrs	r3, r2
 80118b6:	c008      	stmia	r0!, {r3}
 80118b8:	9b05      	ldr	r3, [sp, #20]
 80118ba:	42a3      	cmp	r3, r4
 80118bc:	d2ec      	bcs.n	8011898 <quorem+0xb0>
 80118be:	9b01      	ldr	r3, [sp, #4]
 80118c0:	9a03      	ldr	r2, [sp, #12]
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	18d3      	adds	r3, r2, r3
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	d015      	beq.n	80118f8 <quorem+0x110>
 80118cc:	9802      	ldr	r0, [sp, #8]
 80118ce:	b009      	add	sp, #36	; 0x24
 80118d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d106      	bne.n	80118e6 <quorem+0xfe>
 80118d8:	9b01      	ldr	r3, [sp, #4]
 80118da:	3b01      	subs	r3, #1
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	9b03      	ldr	r3, [sp, #12]
 80118e0:	3c04      	subs	r4, #4
 80118e2:	42a3      	cmp	r3, r4
 80118e4:	d3f5      	bcc.n	80118d2 <quorem+0xea>
 80118e6:	9b01      	ldr	r3, [sp, #4]
 80118e8:	613b      	str	r3, [r7, #16]
 80118ea:	e7c7      	b.n	801187c <quorem+0x94>
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	2a00      	cmp	r2, #0
 80118f0:	d106      	bne.n	8011900 <quorem+0x118>
 80118f2:	9a01      	ldr	r2, [sp, #4]
 80118f4:	3a01      	subs	r2, #1
 80118f6:	9201      	str	r2, [sp, #4]
 80118f8:	9a03      	ldr	r2, [sp, #12]
 80118fa:	3b04      	subs	r3, #4
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d3f5      	bcc.n	80118ec <quorem+0x104>
 8011900:	9b01      	ldr	r3, [sp, #4]
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	e7e2      	b.n	80118cc <quorem+0xe4>
	...

08011908 <_dtoa_r>:
 8011908:	b5f0      	push	{r4, r5, r6, r7, lr}
 801190a:	0014      	movs	r4, r2
 801190c:	001d      	movs	r5, r3
 801190e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8011910:	b09d      	sub	sp, #116	; 0x74
 8011912:	9408      	str	r4, [sp, #32]
 8011914:	9509      	str	r5, [sp, #36]	; 0x24
 8011916:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8011918:	9004      	str	r0, [sp, #16]
 801191a:	2900      	cmp	r1, #0
 801191c:	d009      	beq.n	8011932 <_dtoa_r+0x2a>
 801191e:	2301      	movs	r3, #1
 8011920:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011922:	4093      	lsls	r3, r2
 8011924:	604a      	str	r2, [r1, #4]
 8011926:	608b      	str	r3, [r1, #8]
 8011928:	f7fc fc56 	bl	800e1d8 <_Bfree>
 801192c:	2300      	movs	r3, #0
 801192e:	9a04      	ldr	r2, [sp, #16]
 8011930:	6393      	str	r3, [r2, #56]	; 0x38
 8011932:	2d00      	cmp	r5, #0
 8011934:	da1e      	bge.n	8011974 <_dtoa_r+0x6c>
 8011936:	2301      	movs	r3, #1
 8011938:	6033      	str	r3, [r6, #0]
 801193a:	006b      	lsls	r3, r5, #1
 801193c:	085b      	lsrs	r3, r3, #1
 801193e:	9309      	str	r3, [sp, #36]	; 0x24
 8011940:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011942:	4bb5      	ldr	r3, [pc, #724]	; (8011c18 <_dtoa_r+0x310>)
 8011944:	4ab4      	ldr	r2, [pc, #720]	; (8011c18 <_dtoa_r+0x310>)
 8011946:	403b      	ands	r3, r7
 8011948:	4293      	cmp	r3, r2
 801194a:	d116      	bne.n	801197a <_dtoa_r+0x72>
 801194c:	4bb3      	ldr	r3, [pc, #716]	; (8011c1c <_dtoa_r+0x314>)
 801194e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011950:	6013      	str	r3, [r2, #0]
 8011952:	033b      	lsls	r3, r7, #12
 8011954:	0b1b      	lsrs	r3, r3, #12
 8011956:	4323      	orrs	r3, r4
 8011958:	d101      	bne.n	801195e <_dtoa_r+0x56>
 801195a:	f000 fdb2 	bl	80124c2 <_dtoa_r+0xbba>
 801195e:	4bb0      	ldr	r3, [pc, #704]	; (8011c20 <_dtoa_r+0x318>)
 8011960:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011962:	9306      	str	r3, [sp, #24]
 8011964:	2a00      	cmp	r2, #0
 8011966:	d002      	beq.n	801196e <_dtoa_r+0x66>
 8011968:	4bae      	ldr	r3, [pc, #696]	; (8011c24 <_dtoa_r+0x31c>)
 801196a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801196c:	6013      	str	r3, [r2, #0]
 801196e:	9806      	ldr	r0, [sp, #24]
 8011970:	b01d      	add	sp, #116	; 0x74
 8011972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011974:	2300      	movs	r3, #0
 8011976:	6033      	str	r3, [r6, #0]
 8011978:	e7e2      	b.n	8011940 <_dtoa_r+0x38>
 801197a:	9a08      	ldr	r2, [sp, #32]
 801197c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801197e:	9210      	str	r2, [sp, #64]	; 0x40
 8011980:	9311      	str	r3, [sp, #68]	; 0x44
 8011982:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011984:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011986:	2200      	movs	r2, #0
 8011988:	2300      	movs	r3, #0
 801198a:	f7ee fd5d 	bl	8000448 <__aeabi_dcmpeq>
 801198e:	1e06      	subs	r6, r0, #0
 8011990:	d009      	beq.n	80119a6 <_dtoa_r+0x9e>
 8011992:	2301      	movs	r3, #1
 8011994:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011996:	6013      	str	r3, [r2, #0]
 8011998:	4ba3      	ldr	r3, [pc, #652]	; (8011c28 <_dtoa_r+0x320>)
 801199a:	9306      	str	r3, [sp, #24]
 801199c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d0e5      	beq.n	801196e <_dtoa_r+0x66>
 80119a2:	4ba2      	ldr	r3, [pc, #648]	; (8011c2c <_dtoa_r+0x324>)
 80119a4:	e7e1      	b.n	801196a <_dtoa_r+0x62>
 80119a6:	ab1a      	add	r3, sp, #104	; 0x68
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80119ac:	9300      	str	r3, [sp, #0]
 80119ae:	9804      	ldr	r0, [sp, #16]
 80119b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119b4:	f7fc ff86 	bl	800e8c4 <__d2b>
 80119b8:	007a      	lsls	r2, r7, #1
 80119ba:	9005      	str	r0, [sp, #20]
 80119bc:	0d52      	lsrs	r2, r2, #21
 80119be:	d100      	bne.n	80119c2 <_dtoa_r+0xba>
 80119c0:	e07b      	b.n	8011aba <_dtoa_r+0x1b2>
 80119c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80119c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80119c6:	0319      	lsls	r1, r3, #12
 80119c8:	4b99      	ldr	r3, [pc, #612]	; (8011c30 <_dtoa_r+0x328>)
 80119ca:	0b09      	lsrs	r1, r1, #12
 80119cc:	430b      	orrs	r3, r1
 80119ce:	4999      	ldr	r1, [pc, #612]	; (8011c34 <_dtoa_r+0x32c>)
 80119d0:	1857      	adds	r7, r2, r1
 80119d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80119d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80119d6:	0019      	movs	r1, r3
 80119d8:	2200      	movs	r2, #0
 80119da:	4b97      	ldr	r3, [pc, #604]	; (8011c38 <_dtoa_r+0x330>)
 80119dc:	f7f0 f908 	bl	8001bf0 <__aeabi_dsub>
 80119e0:	4a96      	ldr	r2, [pc, #600]	; (8011c3c <_dtoa_r+0x334>)
 80119e2:	4b97      	ldr	r3, [pc, #604]	; (8011c40 <_dtoa_r+0x338>)
 80119e4:	f7ef fe42 	bl	800166c <__aeabi_dmul>
 80119e8:	4a96      	ldr	r2, [pc, #600]	; (8011c44 <_dtoa_r+0x33c>)
 80119ea:	4b97      	ldr	r3, [pc, #604]	; (8011c48 <_dtoa_r+0x340>)
 80119ec:	f7ee fee4 	bl	80007b8 <__aeabi_dadd>
 80119f0:	0004      	movs	r4, r0
 80119f2:	0038      	movs	r0, r7
 80119f4:	000d      	movs	r5, r1
 80119f6:	f7f0 fcd1 	bl	800239c <__aeabi_i2d>
 80119fa:	4a94      	ldr	r2, [pc, #592]	; (8011c4c <_dtoa_r+0x344>)
 80119fc:	4b94      	ldr	r3, [pc, #592]	; (8011c50 <_dtoa_r+0x348>)
 80119fe:	f7ef fe35 	bl	800166c <__aeabi_dmul>
 8011a02:	0002      	movs	r2, r0
 8011a04:	000b      	movs	r3, r1
 8011a06:	0020      	movs	r0, r4
 8011a08:	0029      	movs	r1, r5
 8011a0a:	f7ee fed5 	bl	80007b8 <__aeabi_dadd>
 8011a0e:	0004      	movs	r4, r0
 8011a10:	000d      	movs	r5, r1
 8011a12:	f7f0 fc8d 	bl	8002330 <__aeabi_d2iz>
 8011a16:	2200      	movs	r2, #0
 8011a18:	9003      	str	r0, [sp, #12]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	0020      	movs	r0, r4
 8011a1e:	0029      	movs	r1, r5
 8011a20:	f7ee fd18 	bl	8000454 <__aeabi_dcmplt>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d00b      	beq.n	8011a40 <_dtoa_r+0x138>
 8011a28:	9803      	ldr	r0, [sp, #12]
 8011a2a:	f7f0 fcb7 	bl	800239c <__aeabi_i2d>
 8011a2e:	002b      	movs	r3, r5
 8011a30:	0022      	movs	r2, r4
 8011a32:	f7ee fd09 	bl	8000448 <__aeabi_dcmpeq>
 8011a36:	4243      	negs	r3, r0
 8011a38:	4158      	adcs	r0, r3
 8011a3a:	9b03      	ldr	r3, [sp, #12]
 8011a3c:	1a1b      	subs	r3, r3, r0
 8011a3e:	9303      	str	r3, [sp, #12]
 8011a40:	2301      	movs	r3, #1
 8011a42:	9316      	str	r3, [sp, #88]	; 0x58
 8011a44:	9b03      	ldr	r3, [sp, #12]
 8011a46:	2b16      	cmp	r3, #22
 8011a48:	d810      	bhi.n	8011a6c <_dtoa_r+0x164>
 8011a4a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a4e:	9a03      	ldr	r2, [sp, #12]
 8011a50:	4b80      	ldr	r3, [pc, #512]	; (8011c54 <_dtoa_r+0x34c>)
 8011a52:	00d2      	lsls	r2, r2, #3
 8011a54:	189b      	adds	r3, r3, r2
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f7ee fcfb 	bl	8000454 <__aeabi_dcmplt>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d047      	beq.n	8011af2 <_dtoa_r+0x1ea>
 8011a62:	9b03      	ldr	r3, [sp, #12]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	9303      	str	r3, [sp, #12]
 8011a68:	2300      	movs	r3, #0
 8011a6a:	9316      	str	r3, [sp, #88]	; 0x58
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a70:	920a      	str	r2, [sp, #40]	; 0x28
 8011a72:	1bdb      	subs	r3, r3, r7
 8011a74:	1e5a      	subs	r2, r3, #1
 8011a76:	d53e      	bpl.n	8011af6 <_dtoa_r+0x1ee>
 8011a78:	2201      	movs	r2, #1
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8011a7e:	2300      	movs	r3, #0
 8011a80:	930c      	str	r3, [sp, #48]	; 0x30
 8011a82:	9b03      	ldr	r3, [sp, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	db38      	blt.n	8011afa <_dtoa_r+0x1f2>
 8011a88:	9a03      	ldr	r2, [sp, #12]
 8011a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a8c:	4694      	mov	ip, r2
 8011a8e:	4463      	add	r3, ip
 8011a90:	930c      	str	r3, [sp, #48]	; 0x30
 8011a92:	2300      	movs	r3, #0
 8011a94:	9213      	str	r2, [sp, #76]	; 0x4c
 8011a96:	930d      	str	r3, [sp, #52]	; 0x34
 8011a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011a9a:	2401      	movs	r4, #1
 8011a9c:	2b09      	cmp	r3, #9
 8011a9e:	d867      	bhi.n	8011b70 <_dtoa_r+0x268>
 8011aa0:	2b05      	cmp	r3, #5
 8011aa2:	dd02      	ble.n	8011aaa <_dtoa_r+0x1a2>
 8011aa4:	2400      	movs	r4, #0
 8011aa6:	3b04      	subs	r3, #4
 8011aa8:	9322      	str	r3, [sp, #136]	; 0x88
 8011aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011aac:	1e98      	subs	r0, r3, #2
 8011aae:	2803      	cmp	r0, #3
 8011ab0:	d867      	bhi.n	8011b82 <_dtoa_r+0x27a>
 8011ab2:	f7ee fb2f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8011ab6:	3a2b      	.short	0x3a2b
 8011ab8:	5b38      	.short	0x5b38
 8011aba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011abc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011abe:	18f6      	adds	r6, r6, r3
 8011ac0:	4b65      	ldr	r3, [pc, #404]	; (8011c58 <_dtoa_r+0x350>)
 8011ac2:	18f2      	adds	r2, r6, r3
 8011ac4:	2a20      	cmp	r2, #32
 8011ac6:	dd0f      	ble.n	8011ae8 <_dtoa_r+0x1e0>
 8011ac8:	2340      	movs	r3, #64	; 0x40
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	409f      	lsls	r7, r3
 8011ace:	4b63      	ldr	r3, [pc, #396]	; (8011c5c <_dtoa_r+0x354>)
 8011ad0:	0038      	movs	r0, r7
 8011ad2:	18f3      	adds	r3, r6, r3
 8011ad4:	40dc      	lsrs	r4, r3
 8011ad6:	4320      	orrs	r0, r4
 8011ad8:	f7f0 fc90 	bl	80023fc <__aeabi_ui2d>
 8011adc:	2201      	movs	r2, #1
 8011ade:	4b60      	ldr	r3, [pc, #384]	; (8011c60 <_dtoa_r+0x358>)
 8011ae0:	1e77      	subs	r7, r6, #1
 8011ae2:	18cb      	adds	r3, r1, r3
 8011ae4:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ae6:	e776      	b.n	80119d6 <_dtoa_r+0xce>
 8011ae8:	2320      	movs	r3, #32
 8011aea:	0020      	movs	r0, r4
 8011aec:	1a9b      	subs	r3, r3, r2
 8011aee:	4098      	lsls	r0, r3
 8011af0:	e7f2      	b.n	8011ad8 <_dtoa_r+0x1d0>
 8011af2:	9016      	str	r0, [sp, #88]	; 0x58
 8011af4:	e7ba      	b.n	8011a6c <_dtoa_r+0x164>
 8011af6:	920c      	str	r2, [sp, #48]	; 0x30
 8011af8:	e7c3      	b.n	8011a82 <_dtoa_r+0x17a>
 8011afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011afc:	9a03      	ldr	r2, [sp, #12]
 8011afe:	1a9b      	subs	r3, r3, r2
 8011b00:	930a      	str	r3, [sp, #40]	; 0x28
 8011b02:	4253      	negs	r3, r2
 8011b04:	930d      	str	r3, [sp, #52]	; 0x34
 8011b06:	2300      	movs	r3, #0
 8011b08:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b0a:	e7c5      	b.n	8011a98 <_dtoa_r+0x190>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b14:	9307      	str	r3, [sp, #28]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	dc13      	bgt.n	8011b42 <_dtoa_r+0x23a>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	001a      	movs	r2, r3
 8011b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b20:	9307      	str	r3, [sp, #28]
 8011b22:	9223      	str	r2, [sp, #140]	; 0x8c
 8011b24:	e00d      	b.n	8011b42 <_dtoa_r+0x23a>
 8011b26:	2301      	movs	r3, #1
 8011b28:	e7f1      	b.n	8011b0e <_dtoa_r+0x206>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011b2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b30:	4694      	mov	ip, r2
 8011b32:	9b03      	ldr	r3, [sp, #12]
 8011b34:	4463      	add	r3, ip
 8011b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b38:	3301      	adds	r3, #1
 8011b3a:	9307      	str	r3, [sp, #28]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	dc00      	bgt.n	8011b42 <_dtoa_r+0x23a>
 8011b40:	2301      	movs	r3, #1
 8011b42:	2100      	movs	r1, #0
 8011b44:	2204      	movs	r2, #4
 8011b46:	0010      	movs	r0, r2
 8011b48:	3014      	adds	r0, #20
 8011b4a:	4298      	cmp	r0, r3
 8011b4c:	d91d      	bls.n	8011b8a <_dtoa_r+0x282>
 8011b4e:	9b04      	ldr	r3, [sp, #16]
 8011b50:	0018      	movs	r0, r3
 8011b52:	63d9      	str	r1, [r3, #60]	; 0x3c
 8011b54:	f7fc fb18 	bl	800e188 <_Balloc>
 8011b58:	9006      	str	r0, [sp, #24]
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d118      	bne.n	8011b90 <_dtoa_r+0x288>
 8011b5e:	21b0      	movs	r1, #176	; 0xb0
 8011b60:	4b40      	ldr	r3, [pc, #256]	; (8011c64 <_dtoa_r+0x35c>)
 8011b62:	4841      	ldr	r0, [pc, #260]	; (8011c68 <_dtoa_r+0x360>)
 8011b64:	9a06      	ldr	r2, [sp, #24]
 8011b66:	31ff      	adds	r1, #255	; 0xff
 8011b68:	f7ff fdd2 	bl	8011710 <__assert_func>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e7dd      	b.n	8011b2c <_dtoa_r+0x224>
 8011b70:	2300      	movs	r3, #0
 8011b72:	940f      	str	r4, [sp, #60]	; 0x3c
 8011b74:	9322      	str	r3, [sp, #136]	; 0x88
 8011b76:	3b01      	subs	r3, #1
 8011b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b7a:	9307      	str	r3, [sp, #28]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	3313      	adds	r3, #19
 8011b80:	e7cf      	b.n	8011b22 <_dtoa_r+0x21a>
 8011b82:	2301      	movs	r3, #1
 8011b84:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b86:	3b02      	subs	r3, #2
 8011b88:	e7f6      	b.n	8011b78 <_dtoa_r+0x270>
 8011b8a:	3101      	adds	r1, #1
 8011b8c:	0052      	lsls	r2, r2, #1
 8011b8e:	e7da      	b.n	8011b46 <_dtoa_r+0x23e>
 8011b90:	9b04      	ldr	r3, [sp, #16]
 8011b92:	9a06      	ldr	r2, [sp, #24]
 8011b94:	639a      	str	r2, [r3, #56]	; 0x38
 8011b96:	9b07      	ldr	r3, [sp, #28]
 8011b98:	2b0e      	cmp	r3, #14
 8011b9a:	d900      	bls.n	8011b9e <_dtoa_r+0x296>
 8011b9c:	e0e3      	b.n	8011d66 <_dtoa_r+0x45e>
 8011b9e:	2c00      	cmp	r4, #0
 8011ba0:	d100      	bne.n	8011ba4 <_dtoa_r+0x29c>
 8011ba2:	e0e0      	b.n	8011d66 <_dtoa_r+0x45e>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	dd62      	ble.n	8011c70 <_dtoa_r+0x368>
 8011baa:	210f      	movs	r1, #15
 8011bac:	9a03      	ldr	r2, [sp, #12]
 8011bae:	4b29      	ldr	r3, [pc, #164]	; (8011c54 <_dtoa_r+0x34c>)
 8011bb0:	400a      	ands	r2, r1
 8011bb2:	00d2      	lsls	r2, r2, #3
 8011bb4:	189b      	adds	r3, r3, r2
 8011bb6:	681e      	ldr	r6, [r3, #0]
 8011bb8:	685f      	ldr	r7, [r3, #4]
 8011bba:	9b03      	ldr	r3, [sp, #12]
 8011bbc:	2402      	movs	r4, #2
 8011bbe:	111d      	asrs	r5, r3, #4
 8011bc0:	05db      	lsls	r3, r3, #23
 8011bc2:	d50a      	bpl.n	8011bda <_dtoa_r+0x2d2>
 8011bc4:	4b29      	ldr	r3, [pc, #164]	; (8011c6c <_dtoa_r+0x364>)
 8011bc6:	400d      	ands	r5, r1
 8011bc8:	6a1a      	ldr	r2, [r3, #32]
 8011bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bcc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011bce:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011bd0:	f7ef f952 	bl	8000e78 <__aeabi_ddiv>
 8011bd4:	9008      	str	r0, [sp, #32]
 8011bd6:	9109      	str	r1, [sp, #36]	; 0x24
 8011bd8:	3401      	adds	r4, #1
 8011bda:	4b24      	ldr	r3, [pc, #144]	; (8011c6c <_dtoa_r+0x364>)
 8011bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8011bde:	2d00      	cmp	r5, #0
 8011be0:	d108      	bne.n	8011bf4 <_dtoa_r+0x2ec>
 8011be2:	9808      	ldr	r0, [sp, #32]
 8011be4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011be6:	0032      	movs	r2, r6
 8011be8:	003b      	movs	r3, r7
 8011bea:	f7ef f945 	bl	8000e78 <__aeabi_ddiv>
 8011bee:	9008      	str	r0, [sp, #32]
 8011bf0:	9109      	str	r1, [sp, #36]	; 0x24
 8011bf2:	e058      	b.n	8011ca6 <_dtoa_r+0x39e>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	421d      	tst	r5, r3
 8011bf8:	d009      	beq.n	8011c0e <_dtoa_r+0x306>
 8011bfa:	18e4      	adds	r4, r4, r3
 8011bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bfe:	0030      	movs	r0, r6
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	0039      	movs	r1, r7
 8011c06:	f7ef fd31 	bl	800166c <__aeabi_dmul>
 8011c0a:	0006      	movs	r6, r0
 8011c0c:	000f      	movs	r7, r1
 8011c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c10:	106d      	asrs	r5, r5, #1
 8011c12:	3308      	adds	r3, #8
 8011c14:	e7e2      	b.n	8011bdc <_dtoa_r+0x2d4>
 8011c16:	46c0      	nop			; (mov r8, r8)
 8011c18:	7ff00000 	.word	0x7ff00000
 8011c1c:	0000270f 	.word	0x0000270f
 8011c20:	08016105 	.word	0x08016105
 8011c24:	08016108 	.word	0x08016108
 8011c28:	08016076 	.word	0x08016076
 8011c2c:	08016077 	.word	0x08016077
 8011c30:	3ff00000 	.word	0x3ff00000
 8011c34:	fffffc01 	.word	0xfffffc01
 8011c38:	3ff80000 	.word	0x3ff80000
 8011c3c:	636f4361 	.word	0x636f4361
 8011c40:	3fd287a7 	.word	0x3fd287a7
 8011c44:	8b60c8b3 	.word	0x8b60c8b3
 8011c48:	3fc68a28 	.word	0x3fc68a28
 8011c4c:	509f79fb 	.word	0x509f79fb
 8011c50:	3fd34413 	.word	0x3fd34413
 8011c54:	08015f70 	.word	0x08015f70
 8011c58:	00000432 	.word	0x00000432
 8011c5c:	00000412 	.word	0x00000412
 8011c60:	fe100000 	.word	0xfe100000
 8011c64:	08015e79 	.word	0x08015e79
 8011c68:	08016109 	.word	0x08016109
 8011c6c:	08015f48 	.word	0x08015f48
 8011c70:	9b03      	ldr	r3, [sp, #12]
 8011c72:	2402      	movs	r4, #2
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d016      	beq.n	8011ca6 <_dtoa_r+0x39e>
 8011c78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c7c:	220f      	movs	r2, #15
 8011c7e:	425d      	negs	r5, r3
 8011c80:	402a      	ands	r2, r5
 8011c82:	4bdd      	ldr	r3, [pc, #884]	; (8011ff8 <_dtoa_r+0x6f0>)
 8011c84:	00d2      	lsls	r2, r2, #3
 8011c86:	189b      	adds	r3, r3, r2
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	f7ef fcee 	bl	800166c <__aeabi_dmul>
 8011c90:	2701      	movs	r7, #1
 8011c92:	2300      	movs	r3, #0
 8011c94:	9008      	str	r0, [sp, #32]
 8011c96:	9109      	str	r1, [sp, #36]	; 0x24
 8011c98:	4ed8      	ldr	r6, [pc, #864]	; (8011ffc <_dtoa_r+0x6f4>)
 8011c9a:	112d      	asrs	r5, r5, #4
 8011c9c:	2d00      	cmp	r5, #0
 8011c9e:	d000      	beq.n	8011ca2 <_dtoa_r+0x39a>
 8011ca0:	e091      	b.n	8011dc6 <_dtoa_r+0x4be>
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d1a3      	bne.n	8011bee <_dtoa_r+0x2e6>
 8011ca6:	9e08      	ldr	r6, [sp, #32]
 8011ca8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011caa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d100      	bne.n	8011cb2 <_dtoa_r+0x3aa>
 8011cb0:	e094      	b.n	8011ddc <_dtoa_r+0x4d4>
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	0030      	movs	r0, r6
 8011cb6:	0039      	movs	r1, r7
 8011cb8:	4bd1      	ldr	r3, [pc, #836]	; (8012000 <_dtoa_r+0x6f8>)
 8011cba:	f7ee fbcb 	bl	8000454 <__aeabi_dcmplt>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d100      	bne.n	8011cc4 <_dtoa_r+0x3bc>
 8011cc2:	e08b      	b.n	8011ddc <_dtoa_r+0x4d4>
 8011cc4:	9b07      	ldr	r3, [sp, #28]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d100      	bne.n	8011ccc <_dtoa_r+0x3c4>
 8011cca:	e087      	b.n	8011ddc <_dtoa_r+0x4d4>
 8011ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	dd45      	ble.n	8011d5e <_dtoa_r+0x456>
 8011cd2:	9b03      	ldr	r3, [sp, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	3b01      	subs	r3, #1
 8011cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8011cda:	0030      	movs	r0, r6
 8011cdc:	4bc9      	ldr	r3, [pc, #804]	; (8012004 <_dtoa_r+0x6fc>)
 8011cde:	0039      	movs	r1, r7
 8011ce0:	f7ef fcc4 	bl	800166c <__aeabi_dmul>
 8011ce4:	9008      	str	r0, [sp, #32]
 8011ce6:	9109      	str	r1, [sp, #36]	; 0x24
 8011ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cea:	3401      	adds	r4, #1
 8011cec:	0020      	movs	r0, r4
 8011cee:	9e08      	ldr	r6, [sp, #32]
 8011cf0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8011cf4:	f7f0 fb52 	bl	800239c <__aeabi_i2d>
 8011cf8:	0032      	movs	r2, r6
 8011cfa:	003b      	movs	r3, r7
 8011cfc:	f7ef fcb6 	bl	800166c <__aeabi_dmul>
 8011d00:	2200      	movs	r2, #0
 8011d02:	4bc1      	ldr	r3, [pc, #772]	; (8012008 <_dtoa_r+0x700>)
 8011d04:	f7ee fd58 	bl	80007b8 <__aeabi_dadd>
 8011d08:	4ac0      	ldr	r2, [pc, #768]	; (801200c <_dtoa_r+0x704>)
 8011d0a:	9014      	str	r0, [sp, #80]	; 0x50
 8011d0c:	9115      	str	r1, [sp, #84]	; 0x54
 8011d0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011d12:	4694      	mov	ip, r2
 8011d14:	9308      	str	r3, [sp, #32]
 8011d16:	9409      	str	r4, [sp, #36]	; 0x24
 8011d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d1a:	4463      	add	r3, ip
 8011d1c:	9318      	str	r3, [sp, #96]	; 0x60
 8011d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d15e      	bne.n	8011de4 <_dtoa_r+0x4dc>
 8011d26:	2200      	movs	r2, #0
 8011d28:	4bb9      	ldr	r3, [pc, #740]	; (8012010 <_dtoa_r+0x708>)
 8011d2a:	0030      	movs	r0, r6
 8011d2c:	0039      	movs	r1, r7
 8011d2e:	f7ef ff5f 	bl	8001bf0 <__aeabi_dsub>
 8011d32:	9a08      	ldr	r2, [sp, #32]
 8011d34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011d36:	0004      	movs	r4, r0
 8011d38:	000d      	movs	r5, r1
 8011d3a:	f7ee fb9f 	bl	800047c <__aeabi_dcmpgt>
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d000      	beq.n	8011d44 <_dtoa_r+0x43c>
 8011d42:	e2b3      	b.n	80122ac <_dtoa_r+0x9a4>
 8011d44:	48b3      	ldr	r0, [pc, #716]	; (8012014 <_dtoa_r+0x70c>)
 8011d46:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011d48:	4684      	mov	ip, r0
 8011d4a:	4461      	add	r1, ip
 8011d4c:	000b      	movs	r3, r1
 8011d4e:	0020      	movs	r0, r4
 8011d50:	0029      	movs	r1, r5
 8011d52:	9a08      	ldr	r2, [sp, #32]
 8011d54:	f7ee fb7e 	bl	8000454 <__aeabi_dcmplt>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d000      	beq.n	8011d5e <_dtoa_r+0x456>
 8011d5c:	e2a3      	b.n	80122a6 <_dtoa_r+0x99e>
 8011d5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011d62:	9308      	str	r3, [sp, #32]
 8011d64:	9409      	str	r4, [sp, #36]	; 0x24
 8011d66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	da00      	bge.n	8011d6e <_dtoa_r+0x466>
 8011d6c:	e179      	b.n	8012062 <_dtoa_r+0x75a>
 8011d6e:	9a03      	ldr	r2, [sp, #12]
 8011d70:	2a0e      	cmp	r2, #14
 8011d72:	dd00      	ble.n	8011d76 <_dtoa_r+0x46e>
 8011d74:	e175      	b.n	8012062 <_dtoa_r+0x75a>
 8011d76:	4ba0      	ldr	r3, [pc, #640]	; (8011ff8 <_dtoa_r+0x6f0>)
 8011d78:	00d2      	lsls	r2, r2, #3
 8011d7a:	189b      	adds	r3, r3, r2
 8011d7c:	681e      	ldr	r6, [r3, #0]
 8011d7e:	685f      	ldr	r7, [r3, #4]
 8011d80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	db00      	blt.n	8011d88 <_dtoa_r+0x480>
 8011d86:	e0e5      	b.n	8011f54 <_dtoa_r+0x64c>
 8011d88:	9b07      	ldr	r3, [sp, #28]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	dd00      	ble.n	8011d90 <_dtoa_r+0x488>
 8011d8e:	e0e1      	b.n	8011f54 <_dtoa_r+0x64c>
 8011d90:	d000      	beq.n	8011d94 <_dtoa_r+0x48c>
 8011d92:	e288      	b.n	80122a6 <_dtoa_r+0x99e>
 8011d94:	2200      	movs	r2, #0
 8011d96:	0030      	movs	r0, r6
 8011d98:	0039      	movs	r1, r7
 8011d9a:	4b9d      	ldr	r3, [pc, #628]	; (8012010 <_dtoa_r+0x708>)
 8011d9c:	f7ef fc66 	bl	800166c <__aeabi_dmul>
 8011da0:	9a08      	ldr	r2, [sp, #32]
 8011da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da4:	f7ee fb74 	bl	8000490 <__aeabi_dcmpge>
 8011da8:	9e07      	ldr	r6, [sp, #28]
 8011daa:	0037      	movs	r7, r6
 8011dac:	2800      	cmp	r0, #0
 8011dae:	d000      	beq.n	8011db2 <_dtoa_r+0x4aa>
 8011db0:	e25f      	b.n	8012272 <_dtoa_r+0x96a>
 8011db2:	9b06      	ldr	r3, [sp, #24]
 8011db4:	9a06      	ldr	r2, [sp, #24]
 8011db6:	3301      	adds	r3, #1
 8011db8:	9308      	str	r3, [sp, #32]
 8011dba:	2331      	movs	r3, #49	; 0x31
 8011dbc:	7013      	strb	r3, [r2, #0]
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	e25a      	b.n	801227c <_dtoa_r+0x974>
 8011dc6:	423d      	tst	r5, r7
 8011dc8:	d005      	beq.n	8011dd6 <_dtoa_r+0x4ce>
 8011dca:	6832      	ldr	r2, [r6, #0]
 8011dcc:	6873      	ldr	r3, [r6, #4]
 8011dce:	f7ef fc4d 	bl	800166c <__aeabi_dmul>
 8011dd2:	003b      	movs	r3, r7
 8011dd4:	3401      	adds	r4, #1
 8011dd6:	106d      	asrs	r5, r5, #1
 8011dd8:	3608      	adds	r6, #8
 8011dda:	e75f      	b.n	8011c9c <_dtoa_r+0x394>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	930e      	str	r3, [sp, #56]	; 0x38
 8011de0:	9b07      	ldr	r3, [sp, #28]
 8011de2:	e783      	b.n	8011cec <_dtoa_r+0x3e4>
 8011de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011de6:	4b84      	ldr	r3, [pc, #528]	; (8011ff8 <_dtoa_r+0x6f0>)
 8011de8:	3a01      	subs	r2, #1
 8011dea:	00d2      	lsls	r2, r2, #3
 8011dec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011dee:	189b      	adds	r3, r3, r2
 8011df0:	9c08      	ldr	r4, [sp, #32]
 8011df2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	2900      	cmp	r1, #0
 8011dfa:	d051      	beq.n	8011ea0 <_dtoa_r+0x598>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	4986      	ldr	r1, [pc, #536]	; (8012018 <_dtoa_r+0x710>)
 8011e00:	f7ef f83a 	bl	8000e78 <__aeabi_ddiv>
 8011e04:	0022      	movs	r2, r4
 8011e06:	002b      	movs	r3, r5
 8011e08:	f7ef fef2 	bl	8001bf0 <__aeabi_dsub>
 8011e0c:	9a06      	ldr	r2, [sp, #24]
 8011e0e:	0004      	movs	r4, r0
 8011e10:	4694      	mov	ip, r2
 8011e12:	000d      	movs	r5, r1
 8011e14:	9b06      	ldr	r3, [sp, #24]
 8011e16:	9314      	str	r3, [sp, #80]	; 0x50
 8011e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e1a:	4463      	add	r3, ip
 8011e1c:	9318      	str	r3, [sp, #96]	; 0x60
 8011e1e:	0039      	movs	r1, r7
 8011e20:	0030      	movs	r0, r6
 8011e22:	f7f0 fa85 	bl	8002330 <__aeabi_d2iz>
 8011e26:	9012      	str	r0, [sp, #72]	; 0x48
 8011e28:	f7f0 fab8 	bl	800239c <__aeabi_i2d>
 8011e2c:	0002      	movs	r2, r0
 8011e2e:	000b      	movs	r3, r1
 8011e30:	0030      	movs	r0, r6
 8011e32:	0039      	movs	r1, r7
 8011e34:	f7ef fedc 	bl	8001bf0 <__aeabi_dsub>
 8011e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	9308      	str	r3, [sp, #32]
 8011e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e42:	0006      	movs	r6, r0
 8011e44:	3330      	adds	r3, #48	; 0x30
 8011e46:	7013      	strb	r3, [r2, #0]
 8011e48:	0022      	movs	r2, r4
 8011e4a:	002b      	movs	r3, r5
 8011e4c:	000f      	movs	r7, r1
 8011e4e:	f7ee fb01 	bl	8000454 <__aeabi_dcmplt>
 8011e52:	2800      	cmp	r0, #0
 8011e54:	d174      	bne.n	8011f40 <_dtoa_r+0x638>
 8011e56:	0032      	movs	r2, r6
 8011e58:	003b      	movs	r3, r7
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	4968      	ldr	r1, [pc, #416]	; (8012000 <_dtoa_r+0x6f8>)
 8011e5e:	f7ef fec7 	bl	8001bf0 <__aeabi_dsub>
 8011e62:	0022      	movs	r2, r4
 8011e64:	002b      	movs	r3, r5
 8011e66:	f7ee faf5 	bl	8000454 <__aeabi_dcmplt>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d000      	beq.n	8011e70 <_dtoa_r+0x568>
 8011e6e:	e0d7      	b.n	8012020 <_dtoa_r+0x718>
 8011e70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011e72:	9a08      	ldr	r2, [sp, #32]
 8011e74:	4293      	cmp	r3, r2
 8011e76:	d100      	bne.n	8011e7a <_dtoa_r+0x572>
 8011e78:	e771      	b.n	8011d5e <_dtoa_r+0x456>
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	0020      	movs	r0, r4
 8011e7e:	0029      	movs	r1, r5
 8011e80:	4b60      	ldr	r3, [pc, #384]	; (8012004 <_dtoa_r+0x6fc>)
 8011e82:	f7ef fbf3 	bl	800166c <__aeabi_dmul>
 8011e86:	4b5f      	ldr	r3, [pc, #380]	; (8012004 <_dtoa_r+0x6fc>)
 8011e88:	0004      	movs	r4, r0
 8011e8a:	000d      	movs	r5, r1
 8011e8c:	0030      	movs	r0, r6
 8011e8e:	0039      	movs	r1, r7
 8011e90:	2200      	movs	r2, #0
 8011e92:	f7ef fbeb 	bl	800166c <__aeabi_dmul>
 8011e96:	9b08      	ldr	r3, [sp, #32]
 8011e98:	0006      	movs	r6, r0
 8011e9a:	000f      	movs	r7, r1
 8011e9c:	9314      	str	r3, [sp, #80]	; 0x50
 8011e9e:	e7be      	b.n	8011e1e <_dtoa_r+0x516>
 8011ea0:	0020      	movs	r0, r4
 8011ea2:	0029      	movs	r1, r5
 8011ea4:	f7ef fbe2 	bl	800166c <__aeabi_dmul>
 8011ea8:	9a06      	ldr	r2, [sp, #24]
 8011eaa:	9b06      	ldr	r3, [sp, #24]
 8011eac:	4694      	mov	ip, r2
 8011eae:	9308      	str	r3, [sp, #32]
 8011eb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011eb2:	9014      	str	r0, [sp, #80]	; 0x50
 8011eb4:	9115      	str	r1, [sp, #84]	; 0x54
 8011eb6:	4463      	add	r3, ip
 8011eb8:	9319      	str	r3, [sp, #100]	; 0x64
 8011eba:	0030      	movs	r0, r6
 8011ebc:	0039      	movs	r1, r7
 8011ebe:	f7f0 fa37 	bl	8002330 <__aeabi_d2iz>
 8011ec2:	9018      	str	r0, [sp, #96]	; 0x60
 8011ec4:	f7f0 fa6a 	bl	800239c <__aeabi_i2d>
 8011ec8:	0002      	movs	r2, r0
 8011eca:	000b      	movs	r3, r1
 8011ecc:	0030      	movs	r0, r6
 8011ece:	0039      	movs	r1, r7
 8011ed0:	f7ef fe8e 	bl	8001bf0 <__aeabi_dsub>
 8011ed4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011ed6:	9b08      	ldr	r3, [sp, #32]
 8011ed8:	3630      	adds	r6, #48	; 0x30
 8011eda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011edc:	701e      	strb	r6, [r3, #0]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	0004      	movs	r4, r0
 8011ee2:	000d      	movs	r5, r1
 8011ee4:	9308      	str	r3, [sp, #32]
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d12d      	bne.n	8011f46 <_dtoa_r+0x63e>
 8011eea:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011eec:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011eee:	9a06      	ldr	r2, [sp, #24]
 8011ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ef2:	4694      	mov	ip, r2
 8011ef4:	4463      	add	r3, ip
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	9308      	str	r3, [sp, #32]
 8011efa:	4b47      	ldr	r3, [pc, #284]	; (8012018 <_dtoa_r+0x710>)
 8011efc:	f7ee fc5c 	bl	80007b8 <__aeabi_dadd>
 8011f00:	0002      	movs	r2, r0
 8011f02:	000b      	movs	r3, r1
 8011f04:	0020      	movs	r0, r4
 8011f06:	0029      	movs	r1, r5
 8011f08:	f7ee fab8 	bl	800047c <__aeabi_dcmpgt>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d000      	beq.n	8011f12 <_dtoa_r+0x60a>
 8011f10:	e086      	b.n	8012020 <_dtoa_r+0x718>
 8011f12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f16:	2000      	movs	r0, #0
 8011f18:	493f      	ldr	r1, [pc, #252]	; (8012018 <_dtoa_r+0x710>)
 8011f1a:	f7ef fe69 	bl	8001bf0 <__aeabi_dsub>
 8011f1e:	0002      	movs	r2, r0
 8011f20:	000b      	movs	r3, r1
 8011f22:	0020      	movs	r0, r4
 8011f24:	0029      	movs	r1, r5
 8011f26:	f7ee fa95 	bl	8000454 <__aeabi_dcmplt>
 8011f2a:	2800      	cmp	r0, #0
 8011f2c:	d100      	bne.n	8011f30 <_dtoa_r+0x628>
 8011f2e:	e716      	b.n	8011d5e <_dtoa_r+0x456>
 8011f30:	9b08      	ldr	r3, [sp, #32]
 8011f32:	001a      	movs	r2, r3
 8011f34:	3a01      	subs	r2, #1
 8011f36:	9208      	str	r2, [sp, #32]
 8011f38:	7812      	ldrb	r2, [r2, #0]
 8011f3a:	2a30      	cmp	r2, #48	; 0x30
 8011f3c:	d0f8      	beq.n	8011f30 <_dtoa_r+0x628>
 8011f3e:	9308      	str	r3, [sp, #32]
 8011f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f42:	9303      	str	r3, [sp, #12]
 8011f44:	e046      	b.n	8011fd4 <_dtoa_r+0x6cc>
 8011f46:	2200      	movs	r2, #0
 8011f48:	4b2e      	ldr	r3, [pc, #184]	; (8012004 <_dtoa_r+0x6fc>)
 8011f4a:	f7ef fb8f 	bl	800166c <__aeabi_dmul>
 8011f4e:	0006      	movs	r6, r0
 8011f50:	000f      	movs	r7, r1
 8011f52:	e7b2      	b.n	8011eba <_dtoa_r+0x5b2>
 8011f54:	9b06      	ldr	r3, [sp, #24]
 8011f56:	9a06      	ldr	r2, [sp, #24]
 8011f58:	930a      	str	r3, [sp, #40]	; 0x28
 8011f5a:	9b07      	ldr	r3, [sp, #28]
 8011f5c:	9c08      	ldr	r4, [sp, #32]
 8011f5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011f60:	3b01      	subs	r3, #1
 8011f62:	189b      	adds	r3, r3, r2
 8011f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f66:	0032      	movs	r2, r6
 8011f68:	003b      	movs	r3, r7
 8011f6a:	0020      	movs	r0, r4
 8011f6c:	0029      	movs	r1, r5
 8011f6e:	f7ee ff83 	bl	8000e78 <__aeabi_ddiv>
 8011f72:	f7f0 f9dd 	bl	8002330 <__aeabi_d2iz>
 8011f76:	9007      	str	r0, [sp, #28]
 8011f78:	f7f0 fa10 	bl	800239c <__aeabi_i2d>
 8011f7c:	0032      	movs	r2, r6
 8011f7e:	003b      	movs	r3, r7
 8011f80:	f7ef fb74 	bl	800166c <__aeabi_dmul>
 8011f84:	0002      	movs	r2, r0
 8011f86:	000b      	movs	r3, r1
 8011f88:	0020      	movs	r0, r4
 8011f8a:	0029      	movs	r1, r5
 8011f8c:	f7ef fe30 	bl	8001bf0 <__aeabi_dsub>
 8011f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f92:	001a      	movs	r2, r3
 8011f94:	3201      	adds	r2, #1
 8011f96:	920a      	str	r2, [sp, #40]	; 0x28
 8011f98:	9208      	str	r2, [sp, #32]
 8011f9a:	9a07      	ldr	r2, [sp, #28]
 8011f9c:	3230      	adds	r2, #48	; 0x30
 8011f9e:	701a      	strb	r2, [r3, #0]
 8011fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d14f      	bne.n	8012046 <_dtoa_r+0x73e>
 8011fa6:	0002      	movs	r2, r0
 8011fa8:	000b      	movs	r3, r1
 8011faa:	f7ee fc05 	bl	80007b8 <__aeabi_dadd>
 8011fae:	0032      	movs	r2, r6
 8011fb0:	003b      	movs	r3, r7
 8011fb2:	0004      	movs	r4, r0
 8011fb4:	000d      	movs	r5, r1
 8011fb6:	f7ee fa61 	bl	800047c <__aeabi_dcmpgt>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	d12e      	bne.n	801201c <_dtoa_r+0x714>
 8011fbe:	0032      	movs	r2, r6
 8011fc0:	003b      	movs	r3, r7
 8011fc2:	0020      	movs	r0, r4
 8011fc4:	0029      	movs	r1, r5
 8011fc6:	f7ee fa3f 	bl	8000448 <__aeabi_dcmpeq>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d002      	beq.n	8011fd4 <_dtoa_r+0x6cc>
 8011fce:	9b07      	ldr	r3, [sp, #28]
 8011fd0:	07de      	lsls	r6, r3, #31
 8011fd2:	d423      	bmi.n	801201c <_dtoa_r+0x714>
 8011fd4:	9905      	ldr	r1, [sp, #20]
 8011fd6:	9804      	ldr	r0, [sp, #16]
 8011fd8:	f7fc f8fe 	bl	800e1d8 <_Bfree>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9a08      	ldr	r2, [sp, #32]
 8011fe0:	7013      	strb	r3, [r2, #0]
 8011fe2:	9b03      	ldr	r3, [sp, #12]
 8011fe4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011fe6:	3301      	adds	r3, #1
 8011fe8:	6013      	str	r3, [r2, #0]
 8011fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d100      	bne.n	8011ff2 <_dtoa_r+0x6ea>
 8011ff0:	e4bd      	b.n	801196e <_dtoa_r+0x66>
 8011ff2:	9a08      	ldr	r2, [sp, #32]
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	e4ba      	b.n	801196e <_dtoa_r+0x66>
 8011ff8:	08015f70 	.word	0x08015f70
 8011ffc:	08015f48 	.word	0x08015f48
 8012000:	3ff00000 	.word	0x3ff00000
 8012004:	40240000 	.word	0x40240000
 8012008:	401c0000 	.word	0x401c0000
 801200c:	fcc00000 	.word	0xfcc00000
 8012010:	40140000 	.word	0x40140000
 8012014:	7cc00000 	.word	0x7cc00000
 8012018:	3fe00000 	.word	0x3fe00000
 801201c:	9b03      	ldr	r3, [sp, #12]
 801201e:	930e      	str	r3, [sp, #56]	; 0x38
 8012020:	9b08      	ldr	r3, [sp, #32]
 8012022:	9308      	str	r3, [sp, #32]
 8012024:	3b01      	subs	r3, #1
 8012026:	781a      	ldrb	r2, [r3, #0]
 8012028:	2a39      	cmp	r2, #57	; 0x39
 801202a:	d108      	bne.n	801203e <_dtoa_r+0x736>
 801202c:	9a06      	ldr	r2, [sp, #24]
 801202e:	429a      	cmp	r2, r3
 8012030:	d1f7      	bne.n	8012022 <_dtoa_r+0x71a>
 8012032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012034:	9906      	ldr	r1, [sp, #24]
 8012036:	3201      	adds	r2, #1
 8012038:	920e      	str	r2, [sp, #56]	; 0x38
 801203a:	2230      	movs	r2, #48	; 0x30
 801203c:	700a      	strb	r2, [r1, #0]
 801203e:	781a      	ldrb	r2, [r3, #0]
 8012040:	3201      	adds	r2, #1
 8012042:	701a      	strb	r2, [r3, #0]
 8012044:	e77c      	b.n	8011f40 <_dtoa_r+0x638>
 8012046:	2200      	movs	r2, #0
 8012048:	4ba9      	ldr	r3, [pc, #676]	; (80122f0 <_dtoa_r+0x9e8>)
 801204a:	f7ef fb0f 	bl	800166c <__aeabi_dmul>
 801204e:	2200      	movs	r2, #0
 8012050:	2300      	movs	r3, #0
 8012052:	0004      	movs	r4, r0
 8012054:	000d      	movs	r5, r1
 8012056:	f7ee f9f7 	bl	8000448 <__aeabi_dcmpeq>
 801205a:	2800      	cmp	r0, #0
 801205c:	d100      	bne.n	8012060 <_dtoa_r+0x758>
 801205e:	e782      	b.n	8011f66 <_dtoa_r+0x65e>
 8012060:	e7b8      	b.n	8011fd4 <_dtoa_r+0x6cc>
 8012062:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8012064:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012066:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012068:	2f00      	cmp	r7, #0
 801206a:	d012      	beq.n	8012092 <_dtoa_r+0x78a>
 801206c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801206e:	2a01      	cmp	r2, #1
 8012070:	dc6e      	bgt.n	8012150 <_dtoa_r+0x848>
 8012072:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012074:	2a00      	cmp	r2, #0
 8012076:	d065      	beq.n	8012144 <_dtoa_r+0x83c>
 8012078:	4a9e      	ldr	r2, [pc, #632]	; (80122f4 <_dtoa_r+0x9ec>)
 801207a:	189b      	adds	r3, r3, r2
 801207c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801207e:	2101      	movs	r1, #1
 8012080:	18d2      	adds	r2, r2, r3
 8012082:	920a      	str	r2, [sp, #40]	; 0x28
 8012084:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012086:	9804      	ldr	r0, [sp, #16]
 8012088:	18d3      	adds	r3, r2, r3
 801208a:	930c      	str	r3, [sp, #48]	; 0x30
 801208c:	f7fc f986 	bl	800e39c <__i2b>
 8012090:	0007      	movs	r7, r0
 8012092:	2c00      	cmp	r4, #0
 8012094:	d00e      	beq.n	80120b4 <_dtoa_r+0x7ac>
 8012096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012098:	2b00      	cmp	r3, #0
 801209a:	dd0b      	ble.n	80120b4 <_dtoa_r+0x7ac>
 801209c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801209e:	0023      	movs	r3, r4
 80120a0:	4294      	cmp	r4, r2
 80120a2:	dd00      	ble.n	80120a6 <_dtoa_r+0x79e>
 80120a4:	0013      	movs	r3, r2
 80120a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120a8:	1ae4      	subs	r4, r4, r3
 80120aa:	1ad2      	subs	r2, r2, r3
 80120ac:	920a      	str	r2, [sp, #40]	; 0x28
 80120ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120b0:	1ad3      	subs	r3, r2, r3
 80120b2:	930c      	str	r3, [sp, #48]	; 0x30
 80120b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d01e      	beq.n	80120f8 <_dtoa_r+0x7f0>
 80120ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d05c      	beq.n	801217a <_dtoa_r+0x872>
 80120c0:	2d00      	cmp	r5, #0
 80120c2:	dd10      	ble.n	80120e6 <_dtoa_r+0x7de>
 80120c4:	0039      	movs	r1, r7
 80120c6:	002a      	movs	r2, r5
 80120c8:	9804      	ldr	r0, [sp, #16]
 80120ca:	f7fc fa2f 	bl	800e52c <__pow5mult>
 80120ce:	9a05      	ldr	r2, [sp, #20]
 80120d0:	0001      	movs	r1, r0
 80120d2:	0007      	movs	r7, r0
 80120d4:	9804      	ldr	r0, [sp, #16]
 80120d6:	f7fc f979 	bl	800e3cc <__multiply>
 80120da:	0006      	movs	r6, r0
 80120dc:	9905      	ldr	r1, [sp, #20]
 80120de:	9804      	ldr	r0, [sp, #16]
 80120e0:	f7fc f87a 	bl	800e1d8 <_Bfree>
 80120e4:	9605      	str	r6, [sp, #20]
 80120e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120e8:	1b5a      	subs	r2, r3, r5
 80120ea:	42ab      	cmp	r3, r5
 80120ec:	d004      	beq.n	80120f8 <_dtoa_r+0x7f0>
 80120ee:	9905      	ldr	r1, [sp, #20]
 80120f0:	9804      	ldr	r0, [sp, #16]
 80120f2:	f7fc fa1b 	bl	800e52c <__pow5mult>
 80120f6:	9005      	str	r0, [sp, #20]
 80120f8:	2101      	movs	r1, #1
 80120fa:	9804      	ldr	r0, [sp, #16]
 80120fc:	f7fc f94e 	bl	800e39c <__i2b>
 8012100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012102:	0006      	movs	r6, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	dd3a      	ble.n	801217e <_dtoa_r+0x876>
 8012108:	001a      	movs	r2, r3
 801210a:	0001      	movs	r1, r0
 801210c:	9804      	ldr	r0, [sp, #16]
 801210e:	f7fc fa0d 	bl	800e52c <__pow5mult>
 8012112:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012114:	0006      	movs	r6, r0
 8012116:	2500      	movs	r5, #0
 8012118:	2b01      	cmp	r3, #1
 801211a:	dc38      	bgt.n	801218e <_dtoa_r+0x886>
 801211c:	2500      	movs	r5, #0
 801211e:	9b08      	ldr	r3, [sp, #32]
 8012120:	42ab      	cmp	r3, r5
 8012122:	d130      	bne.n	8012186 <_dtoa_r+0x87e>
 8012124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012126:	031b      	lsls	r3, r3, #12
 8012128:	42ab      	cmp	r3, r5
 801212a:	d12c      	bne.n	8012186 <_dtoa_r+0x87e>
 801212c:	4b72      	ldr	r3, [pc, #456]	; (80122f8 <_dtoa_r+0x9f0>)
 801212e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012130:	4213      	tst	r3, r2
 8012132:	d028      	beq.n	8012186 <_dtoa_r+0x87e>
 8012134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012136:	3501      	adds	r5, #1
 8012138:	3301      	adds	r3, #1
 801213a:	930a      	str	r3, [sp, #40]	; 0x28
 801213c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801213e:	3301      	adds	r3, #1
 8012140:	930c      	str	r3, [sp, #48]	; 0x30
 8012142:	e020      	b.n	8012186 <_dtoa_r+0x87e>
 8012144:	2336      	movs	r3, #54	; 0x36
 8012146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012148:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801214a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801214c:	1a9b      	subs	r3, r3, r2
 801214e:	e795      	b.n	801207c <_dtoa_r+0x774>
 8012150:	9b07      	ldr	r3, [sp, #28]
 8012152:	1e5d      	subs	r5, r3, #1
 8012154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012156:	42ab      	cmp	r3, r5
 8012158:	db07      	blt.n	801216a <_dtoa_r+0x862>
 801215a:	1b5d      	subs	r5, r3, r5
 801215c:	9b07      	ldr	r3, [sp, #28]
 801215e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012160:	2b00      	cmp	r3, #0
 8012162:	da8b      	bge.n	801207c <_dtoa_r+0x774>
 8012164:	1ae4      	subs	r4, r4, r3
 8012166:	2300      	movs	r3, #0
 8012168:	e788      	b.n	801207c <_dtoa_r+0x774>
 801216a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801216c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801216e:	1aeb      	subs	r3, r5, r3
 8012170:	18d3      	adds	r3, r2, r3
 8012172:	950d      	str	r5, [sp, #52]	; 0x34
 8012174:	9313      	str	r3, [sp, #76]	; 0x4c
 8012176:	2500      	movs	r5, #0
 8012178:	e7f0      	b.n	801215c <_dtoa_r+0x854>
 801217a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801217c:	e7b7      	b.n	80120ee <_dtoa_r+0x7e6>
 801217e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012180:	2500      	movs	r5, #0
 8012182:	2b01      	cmp	r3, #1
 8012184:	ddca      	ble.n	801211c <_dtoa_r+0x814>
 8012186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012188:	2001      	movs	r0, #1
 801218a:	2b00      	cmp	r3, #0
 801218c:	d008      	beq.n	80121a0 <_dtoa_r+0x898>
 801218e:	6933      	ldr	r3, [r6, #16]
 8012190:	3303      	adds	r3, #3
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	18f3      	adds	r3, r6, r3
 8012196:	6858      	ldr	r0, [r3, #4]
 8012198:	f7fc f8b8 	bl	800e30c <__hi0bits>
 801219c:	2320      	movs	r3, #32
 801219e:	1a18      	subs	r0, r3, r0
 80121a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121a2:	1818      	adds	r0, r3, r0
 80121a4:	0002      	movs	r2, r0
 80121a6:	231f      	movs	r3, #31
 80121a8:	401a      	ands	r2, r3
 80121aa:	4218      	tst	r0, r3
 80121ac:	d047      	beq.n	801223e <_dtoa_r+0x936>
 80121ae:	3301      	adds	r3, #1
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	2b04      	cmp	r3, #4
 80121b4:	dd3f      	ble.n	8012236 <_dtoa_r+0x92e>
 80121b6:	231c      	movs	r3, #28
 80121b8:	1a9b      	subs	r3, r3, r2
 80121ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121bc:	18e4      	adds	r4, r4, r3
 80121be:	18d2      	adds	r2, r2, r3
 80121c0:	920a      	str	r2, [sp, #40]	; 0x28
 80121c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121c4:	18d3      	adds	r3, r2, r3
 80121c6:	930c      	str	r3, [sp, #48]	; 0x30
 80121c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	dd05      	ble.n	80121da <_dtoa_r+0x8d2>
 80121ce:	001a      	movs	r2, r3
 80121d0:	9905      	ldr	r1, [sp, #20]
 80121d2:	9804      	ldr	r0, [sp, #16]
 80121d4:	f7fc f9ec 	bl	800e5b0 <__lshift>
 80121d8:	9005      	str	r0, [sp, #20]
 80121da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121dc:	2b00      	cmp	r3, #0
 80121de:	dd05      	ble.n	80121ec <_dtoa_r+0x8e4>
 80121e0:	0031      	movs	r1, r6
 80121e2:	001a      	movs	r2, r3
 80121e4:	9804      	ldr	r0, [sp, #16]
 80121e6:	f7fc f9e3 	bl	800e5b0 <__lshift>
 80121ea:	0006      	movs	r6, r0
 80121ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d027      	beq.n	8012242 <_dtoa_r+0x93a>
 80121f2:	0031      	movs	r1, r6
 80121f4:	9805      	ldr	r0, [sp, #20]
 80121f6:	f7fc fa49 	bl	800e68c <__mcmp>
 80121fa:	2800      	cmp	r0, #0
 80121fc:	da21      	bge.n	8012242 <_dtoa_r+0x93a>
 80121fe:	9b03      	ldr	r3, [sp, #12]
 8012200:	220a      	movs	r2, #10
 8012202:	3b01      	subs	r3, #1
 8012204:	9303      	str	r3, [sp, #12]
 8012206:	9905      	ldr	r1, [sp, #20]
 8012208:	2300      	movs	r3, #0
 801220a:	9804      	ldr	r0, [sp, #16]
 801220c:	f7fb ffee 	bl	800e1ec <__multadd>
 8012210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012212:	9005      	str	r0, [sp, #20]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d100      	bne.n	801221a <_dtoa_r+0x912>
 8012218:	e15d      	b.n	80124d6 <_dtoa_r+0xbce>
 801221a:	2300      	movs	r3, #0
 801221c:	0039      	movs	r1, r7
 801221e:	220a      	movs	r2, #10
 8012220:	9804      	ldr	r0, [sp, #16]
 8012222:	f7fb ffe3 	bl	800e1ec <__multadd>
 8012226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012228:	0007      	movs	r7, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	dc49      	bgt.n	80122c2 <_dtoa_r+0x9ba>
 801222e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012230:	2b02      	cmp	r3, #2
 8012232:	dc0e      	bgt.n	8012252 <_dtoa_r+0x94a>
 8012234:	e045      	b.n	80122c2 <_dtoa_r+0x9ba>
 8012236:	2b04      	cmp	r3, #4
 8012238:	d0c6      	beq.n	80121c8 <_dtoa_r+0x8c0>
 801223a:	331c      	adds	r3, #28
 801223c:	e7bd      	b.n	80121ba <_dtoa_r+0x8b2>
 801223e:	0013      	movs	r3, r2
 8012240:	e7fb      	b.n	801223a <_dtoa_r+0x932>
 8012242:	9b07      	ldr	r3, [sp, #28]
 8012244:	2b00      	cmp	r3, #0
 8012246:	dc36      	bgt.n	80122b6 <_dtoa_r+0x9ae>
 8012248:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801224a:	2b02      	cmp	r3, #2
 801224c:	dd33      	ble.n	80122b6 <_dtoa_r+0x9ae>
 801224e:	9b07      	ldr	r3, [sp, #28]
 8012250:	930b      	str	r3, [sp, #44]	; 0x2c
 8012252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10c      	bne.n	8012272 <_dtoa_r+0x96a>
 8012258:	0031      	movs	r1, r6
 801225a:	2205      	movs	r2, #5
 801225c:	9804      	ldr	r0, [sp, #16]
 801225e:	f7fb ffc5 	bl	800e1ec <__multadd>
 8012262:	0006      	movs	r6, r0
 8012264:	0001      	movs	r1, r0
 8012266:	9805      	ldr	r0, [sp, #20]
 8012268:	f7fc fa10 	bl	800e68c <__mcmp>
 801226c:	2800      	cmp	r0, #0
 801226e:	dd00      	ble.n	8012272 <_dtoa_r+0x96a>
 8012270:	e59f      	b.n	8011db2 <_dtoa_r+0x4aa>
 8012272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012274:	43db      	mvns	r3, r3
 8012276:	9303      	str	r3, [sp, #12]
 8012278:	9b06      	ldr	r3, [sp, #24]
 801227a:	9308      	str	r3, [sp, #32]
 801227c:	2500      	movs	r5, #0
 801227e:	0031      	movs	r1, r6
 8012280:	9804      	ldr	r0, [sp, #16]
 8012282:	f7fb ffa9 	bl	800e1d8 <_Bfree>
 8012286:	2f00      	cmp	r7, #0
 8012288:	d100      	bne.n	801228c <_dtoa_r+0x984>
 801228a:	e6a3      	b.n	8011fd4 <_dtoa_r+0x6cc>
 801228c:	2d00      	cmp	r5, #0
 801228e:	d005      	beq.n	801229c <_dtoa_r+0x994>
 8012290:	42bd      	cmp	r5, r7
 8012292:	d003      	beq.n	801229c <_dtoa_r+0x994>
 8012294:	0029      	movs	r1, r5
 8012296:	9804      	ldr	r0, [sp, #16]
 8012298:	f7fb ff9e 	bl	800e1d8 <_Bfree>
 801229c:	0039      	movs	r1, r7
 801229e:	9804      	ldr	r0, [sp, #16]
 80122a0:	f7fb ff9a 	bl	800e1d8 <_Bfree>
 80122a4:	e696      	b.n	8011fd4 <_dtoa_r+0x6cc>
 80122a6:	2600      	movs	r6, #0
 80122a8:	0037      	movs	r7, r6
 80122aa:	e7e2      	b.n	8012272 <_dtoa_r+0x96a>
 80122ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122ae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80122b0:	9303      	str	r3, [sp, #12]
 80122b2:	0037      	movs	r7, r6
 80122b4:	e57d      	b.n	8011db2 <_dtoa_r+0x4aa>
 80122b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d100      	bne.n	80122be <_dtoa_r+0x9b6>
 80122bc:	e0c3      	b.n	8012446 <_dtoa_r+0xb3e>
 80122be:	9b07      	ldr	r3, [sp, #28]
 80122c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80122c2:	2c00      	cmp	r4, #0
 80122c4:	dd05      	ble.n	80122d2 <_dtoa_r+0x9ca>
 80122c6:	0039      	movs	r1, r7
 80122c8:	0022      	movs	r2, r4
 80122ca:	9804      	ldr	r0, [sp, #16]
 80122cc:	f7fc f970 	bl	800e5b0 <__lshift>
 80122d0:	0007      	movs	r7, r0
 80122d2:	0038      	movs	r0, r7
 80122d4:	2d00      	cmp	r5, #0
 80122d6:	d024      	beq.n	8012322 <_dtoa_r+0xa1a>
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	9804      	ldr	r0, [sp, #16]
 80122dc:	f7fb ff54 	bl	800e188 <_Balloc>
 80122e0:	1e04      	subs	r4, r0, #0
 80122e2:	d111      	bne.n	8012308 <_dtoa_r+0xa00>
 80122e4:	0022      	movs	r2, r4
 80122e6:	4b05      	ldr	r3, [pc, #20]	; (80122fc <_dtoa_r+0x9f4>)
 80122e8:	4805      	ldr	r0, [pc, #20]	; (8012300 <_dtoa_r+0x9f8>)
 80122ea:	4906      	ldr	r1, [pc, #24]	; (8012304 <_dtoa_r+0x9fc>)
 80122ec:	e43c      	b.n	8011b68 <_dtoa_r+0x260>
 80122ee:	46c0      	nop			; (mov r8, r8)
 80122f0:	40240000 	.word	0x40240000
 80122f4:	00000433 	.word	0x00000433
 80122f8:	7ff00000 	.word	0x7ff00000
 80122fc:	08015e79 	.word	0x08015e79
 8012300:	08016109 	.word	0x08016109
 8012304:	000002ef 	.word	0x000002ef
 8012308:	0039      	movs	r1, r7
 801230a:	693a      	ldr	r2, [r7, #16]
 801230c:	310c      	adds	r1, #12
 801230e:	3202      	adds	r2, #2
 8012310:	0092      	lsls	r2, r2, #2
 8012312:	300c      	adds	r0, #12
 8012314:	f7fb fa9d 	bl	800d852 <memcpy>
 8012318:	2201      	movs	r2, #1
 801231a:	0021      	movs	r1, r4
 801231c:	9804      	ldr	r0, [sp, #16]
 801231e:	f7fc f947 	bl	800e5b0 <__lshift>
 8012322:	9b06      	ldr	r3, [sp, #24]
 8012324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012326:	9307      	str	r3, [sp, #28]
 8012328:	3b01      	subs	r3, #1
 801232a:	189b      	adds	r3, r3, r2
 801232c:	2201      	movs	r2, #1
 801232e:	003d      	movs	r5, r7
 8012330:	0007      	movs	r7, r0
 8012332:	930e      	str	r3, [sp, #56]	; 0x38
 8012334:	9b08      	ldr	r3, [sp, #32]
 8012336:	4013      	ands	r3, r2
 8012338:	930d      	str	r3, [sp, #52]	; 0x34
 801233a:	0031      	movs	r1, r6
 801233c:	9805      	ldr	r0, [sp, #20]
 801233e:	f7ff fa53 	bl	80117e8 <quorem>
 8012342:	0029      	movs	r1, r5
 8012344:	0004      	movs	r4, r0
 8012346:	900b      	str	r0, [sp, #44]	; 0x2c
 8012348:	9805      	ldr	r0, [sp, #20]
 801234a:	f7fc f99f 	bl	800e68c <__mcmp>
 801234e:	003a      	movs	r2, r7
 8012350:	900c      	str	r0, [sp, #48]	; 0x30
 8012352:	0031      	movs	r1, r6
 8012354:	9804      	ldr	r0, [sp, #16]
 8012356:	f7fc f9b5 	bl	800e6c4 <__mdiff>
 801235a:	2201      	movs	r2, #1
 801235c:	68c3      	ldr	r3, [r0, #12]
 801235e:	3430      	adds	r4, #48	; 0x30
 8012360:	9008      	str	r0, [sp, #32]
 8012362:	920a      	str	r2, [sp, #40]	; 0x28
 8012364:	2b00      	cmp	r3, #0
 8012366:	d104      	bne.n	8012372 <_dtoa_r+0xa6a>
 8012368:	0001      	movs	r1, r0
 801236a:	9805      	ldr	r0, [sp, #20]
 801236c:	f7fc f98e 	bl	800e68c <__mcmp>
 8012370:	900a      	str	r0, [sp, #40]	; 0x28
 8012372:	9908      	ldr	r1, [sp, #32]
 8012374:	9804      	ldr	r0, [sp, #16]
 8012376:	f7fb ff2f 	bl	800e1d8 <_Bfree>
 801237a:	9b07      	ldr	r3, [sp, #28]
 801237c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801237e:	3301      	adds	r3, #1
 8012380:	9308      	str	r3, [sp, #32]
 8012382:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012384:	4313      	orrs	r3, r2
 8012386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012388:	4313      	orrs	r3, r2
 801238a:	d109      	bne.n	80123a0 <_dtoa_r+0xa98>
 801238c:	2c39      	cmp	r4, #57	; 0x39
 801238e:	d022      	beq.n	80123d6 <_dtoa_r+0xace>
 8012390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012392:	2b00      	cmp	r3, #0
 8012394:	dd01      	ble.n	801239a <_dtoa_r+0xa92>
 8012396:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012398:	3431      	adds	r4, #49	; 0x31
 801239a:	9b07      	ldr	r3, [sp, #28]
 801239c:	701c      	strb	r4, [r3, #0]
 801239e:	e76e      	b.n	801227e <_dtoa_r+0x976>
 80123a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	db04      	blt.n	80123b0 <_dtoa_r+0xaa8>
 80123a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80123a8:	4313      	orrs	r3, r2
 80123aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123ac:	4313      	orrs	r3, r2
 80123ae:	d11e      	bne.n	80123ee <_dtoa_r+0xae6>
 80123b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	ddf1      	ble.n	801239a <_dtoa_r+0xa92>
 80123b6:	9905      	ldr	r1, [sp, #20]
 80123b8:	2201      	movs	r2, #1
 80123ba:	9804      	ldr	r0, [sp, #16]
 80123bc:	f7fc f8f8 	bl	800e5b0 <__lshift>
 80123c0:	0031      	movs	r1, r6
 80123c2:	9005      	str	r0, [sp, #20]
 80123c4:	f7fc f962 	bl	800e68c <__mcmp>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	dc02      	bgt.n	80123d2 <_dtoa_r+0xaca>
 80123cc:	d1e5      	bne.n	801239a <_dtoa_r+0xa92>
 80123ce:	07e3      	lsls	r3, r4, #31
 80123d0:	d5e3      	bpl.n	801239a <_dtoa_r+0xa92>
 80123d2:	2c39      	cmp	r4, #57	; 0x39
 80123d4:	d1df      	bne.n	8012396 <_dtoa_r+0xa8e>
 80123d6:	2339      	movs	r3, #57	; 0x39
 80123d8:	9a07      	ldr	r2, [sp, #28]
 80123da:	7013      	strb	r3, [r2, #0]
 80123dc:	9b08      	ldr	r3, [sp, #32]
 80123de:	9308      	str	r3, [sp, #32]
 80123e0:	3b01      	subs	r3, #1
 80123e2:	781a      	ldrb	r2, [r3, #0]
 80123e4:	2a39      	cmp	r2, #57	; 0x39
 80123e6:	d063      	beq.n	80124b0 <_dtoa_r+0xba8>
 80123e8:	3201      	adds	r2, #1
 80123ea:	701a      	strb	r2, [r3, #0]
 80123ec:	e747      	b.n	801227e <_dtoa_r+0x976>
 80123ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	dd03      	ble.n	80123fc <_dtoa_r+0xaf4>
 80123f4:	2c39      	cmp	r4, #57	; 0x39
 80123f6:	d0ee      	beq.n	80123d6 <_dtoa_r+0xace>
 80123f8:	3401      	adds	r4, #1
 80123fa:	e7ce      	b.n	801239a <_dtoa_r+0xa92>
 80123fc:	9b07      	ldr	r3, [sp, #28]
 80123fe:	9a07      	ldr	r2, [sp, #28]
 8012400:	701c      	strb	r4, [r3, #0]
 8012402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012404:	4293      	cmp	r3, r2
 8012406:	d03e      	beq.n	8012486 <_dtoa_r+0xb7e>
 8012408:	2300      	movs	r3, #0
 801240a:	220a      	movs	r2, #10
 801240c:	9905      	ldr	r1, [sp, #20]
 801240e:	9804      	ldr	r0, [sp, #16]
 8012410:	f7fb feec 	bl	800e1ec <__multadd>
 8012414:	2300      	movs	r3, #0
 8012416:	9005      	str	r0, [sp, #20]
 8012418:	220a      	movs	r2, #10
 801241a:	0029      	movs	r1, r5
 801241c:	9804      	ldr	r0, [sp, #16]
 801241e:	42bd      	cmp	r5, r7
 8012420:	d106      	bne.n	8012430 <_dtoa_r+0xb28>
 8012422:	f7fb fee3 	bl	800e1ec <__multadd>
 8012426:	0005      	movs	r5, r0
 8012428:	0007      	movs	r7, r0
 801242a:	9b08      	ldr	r3, [sp, #32]
 801242c:	9307      	str	r3, [sp, #28]
 801242e:	e784      	b.n	801233a <_dtoa_r+0xa32>
 8012430:	f7fb fedc 	bl	800e1ec <__multadd>
 8012434:	0039      	movs	r1, r7
 8012436:	0005      	movs	r5, r0
 8012438:	2300      	movs	r3, #0
 801243a:	220a      	movs	r2, #10
 801243c:	9804      	ldr	r0, [sp, #16]
 801243e:	f7fb fed5 	bl	800e1ec <__multadd>
 8012442:	0007      	movs	r7, r0
 8012444:	e7f1      	b.n	801242a <_dtoa_r+0xb22>
 8012446:	9b07      	ldr	r3, [sp, #28]
 8012448:	930b      	str	r3, [sp, #44]	; 0x2c
 801244a:	2500      	movs	r5, #0
 801244c:	0031      	movs	r1, r6
 801244e:	9805      	ldr	r0, [sp, #20]
 8012450:	f7ff f9ca 	bl	80117e8 <quorem>
 8012454:	9b06      	ldr	r3, [sp, #24]
 8012456:	3030      	adds	r0, #48	; 0x30
 8012458:	5558      	strb	r0, [r3, r5]
 801245a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801245c:	3501      	adds	r5, #1
 801245e:	0004      	movs	r4, r0
 8012460:	42ab      	cmp	r3, r5
 8012462:	dd07      	ble.n	8012474 <_dtoa_r+0xb6c>
 8012464:	2300      	movs	r3, #0
 8012466:	220a      	movs	r2, #10
 8012468:	9905      	ldr	r1, [sp, #20]
 801246a:	9804      	ldr	r0, [sp, #16]
 801246c:	f7fb febe 	bl	800e1ec <__multadd>
 8012470:	9005      	str	r0, [sp, #20]
 8012472:	e7eb      	b.n	801244c <_dtoa_r+0xb44>
 8012474:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012476:	2301      	movs	r3, #1
 8012478:	2a00      	cmp	r2, #0
 801247a:	dd00      	ble.n	801247e <_dtoa_r+0xb76>
 801247c:	0013      	movs	r3, r2
 801247e:	2500      	movs	r5, #0
 8012480:	9a06      	ldr	r2, [sp, #24]
 8012482:	18d3      	adds	r3, r2, r3
 8012484:	9308      	str	r3, [sp, #32]
 8012486:	9905      	ldr	r1, [sp, #20]
 8012488:	2201      	movs	r2, #1
 801248a:	9804      	ldr	r0, [sp, #16]
 801248c:	f7fc f890 	bl	800e5b0 <__lshift>
 8012490:	0031      	movs	r1, r6
 8012492:	9005      	str	r0, [sp, #20]
 8012494:	f7fc f8fa 	bl	800e68c <__mcmp>
 8012498:	2800      	cmp	r0, #0
 801249a:	dc9f      	bgt.n	80123dc <_dtoa_r+0xad4>
 801249c:	d101      	bne.n	80124a2 <_dtoa_r+0xb9a>
 801249e:	07e4      	lsls	r4, r4, #31
 80124a0:	d49c      	bmi.n	80123dc <_dtoa_r+0xad4>
 80124a2:	9b08      	ldr	r3, [sp, #32]
 80124a4:	9308      	str	r3, [sp, #32]
 80124a6:	3b01      	subs	r3, #1
 80124a8:	781a      	ldrb	r2, [r3, #0]
 80124aa:	2a30      	cmp	r2, #48	; 0x30
 80124ac:	d0fa      	beq.n	80124a4 <_dtoa_r+0xb9c>
 80124ae:	e6e6      	b.n	801227e <_dtoa_r+0x976>
 80124b0:	9a06      	ldr	r2, [sp, #24]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d193      	bne.n	80123de <_dtoa_r+0xad6>
 80124b6:	9b03      	ldr	r3, [sp, #12]
 80124b8:	3301      	adds	r3, #1
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	2331      	movs	r3, #49	; 0x31
 80124be:	7013      	strb	r3, [r2, #0]
 80124c0:	e6dd      	b.n	801227e <_dtoa_r+0x976>
 80124c2:	4b09      	ldr	r3, [pc, #36]	; (80124e8 <_dtoa_r+0xbe0>)
 80124c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80124c6:	9306      	str	r3, [sp, #24]
 80124c8:	4b08      	ldr	r3, [pc, #32]	; (80124ec <_dtoa_r+0xbe4>)
 80124ca:	2a00      	cmp	r2, #0
 80124cc:	d001      	beq.n	80124d2 <_dtoa_r+0xbca>
 80124ce:	f7ff fa4c 	bl	801196a <_dtoa_r+0x62>
 80124d2:	f7ff fa4c 	bl	801196e <_dtoa_r+0x66>
 80124d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124d8:	2b00      	cmp	r3, #0
 80124da:	dcb6      	bgt.n	801244a <_dtoa_r+0xb42>
 80124dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80124de:	2b02      	cmp	r3, #2
 80124e0:	dd00      	ble.n	80124e4 <_dtoa_r+0xbdc>
 80124e2:	e6b6      	b.n	8012252 <_dtoa_r+0x94a>
 80124e4:	e7b1      	b.n	801244a <_dtoa_r+0xb42>
 80124e6:	46c0      	nop			; (mov r8, r8)
 80124e8:	080160fc 	.word	0x080160fc
 80124ec:	08016104 	.word	0x08016104

080124f0 <realloc>:
 80124f0:	b510      	push	{r4, lr}
 80124f2:	4b03      	ldr	r3, [pc, #12]	; (8012500 <realloc+0x10>)
 80124f4:	000a      	movs	r2, r1
 80124f6:	0001      	movs	r1, r0
 80124f8:	6818      	ldr	r0, [r3, #0]
 80124fa:	f000 f803 	bl	8012504 <_realloc_r>
 80124fe:	bd10      	pop	{r4, pc}
 8012500:	200006d0 	.word	0x200006d0

08012504 <_realloc_r>:
 8012504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012506:	b087      	sub	sp, #28
 8012508:	1e0c      	subs	r4, r1, #0
 801250a:	9001      	str	r0, [sp, #4]
 801250c:	9205      	str	r2, [sp, #20]
 801250e:	d106      	bne.n	801251e <_realloc_r+0x1a>
 8012510:	0011      	movs	r1, r2
 8012512:	f7f9 fd5f 	bl	800bfd4 <_malloc_r>
 8012516:	0007      	movs	r7, r0
 8012518:	0038      	movs	r0, r7
 801251a:	b007      	add	sp, #28
 801251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801251e:	9801      	ldr	r0, [sp, #4]
 8012520:	f7f9 ff6c 	bl	800c3fc <__malloc_lock>
 8012524:	0023      	movs	r3, r4
 8012526:	3b08      	subs	r3, #8
 8012528:	685f      	ldr	r7, [r3, #4]
 801252a:	9304      	str	r3, [sp, #16]
 801252c:	9b05      	ldr	r3, [sp, #20]
 801252e:	330b      	adds	r3, #11
 8012530:	2b16      	cmp	r3, #22
 8012532:	d908      	bls.n	8012546 <_realloc_r+0x42>
 8012534:	2207      	movs	r2, #7
 8012536:	4393      	bics	r3, r2
 8012538:	9300      	str	r3, [sp, #0]
 801253a:	d506      	bpl.n	801254a <_realloc_r+0x46>
 801253c:	230c      	movs	r3, #12
 801253e:	9a01      	ldr	r2, [sp, #4]
 8012540:	2700      	movs	r7, #0
 8012542:	6013      	str	r3, [r2, #0]
 8012544:	e7e8      	b.n	8012518 <_realloc_r+0x14>
 8012546:	2310      	movs	r3, #16
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	9b00      	ldr	r3, [sp, #0]
 801254c:	9a05      	ldr	r2, [sp, #20]
 801254e:	4293      	cmp	r3, r2
 8012550:	d3f4      	bcc.n	801253c <_realloc_r+0x38>
 8012552:	9b04      	ldr	r3, [sp, #16]
 8012554:	003a      	movs	r2, r7
 8012556:	9302      	str	r3, [sp, #8]
 8012558:	2303      	movs	r3, #3
 801255a:	439a      	bics	r2, r3
 801255c:	9b00      	ldr	r3, [sp, #0]
 801255e:	9203      	str	r2, [sp, #12]
 8012560:	4293      	cmp	r3, r2
 8012562:	dc00      	bgt.n	8012566 <_realloc_r+0x62>
 8012564:	e169      	b.n	801283a <_realloc_r+0x336>
 8012566:	9b04      	ldr	r3, [sp, #16]
 8012568:	48b8      	ldr	r0, [pc, #736]	; (801284c <_realloc_r+0x348>)
 801256a:	189b      	adds	r3, r3, r2
 801256c:	6882      	ldr	r2, [r0, #8]
 801256e:	4694      	mov	ip, r2
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	459c      	cmp	ip, r3
 8012574:	d006      	beq.n	8012584 <_realloc_r+0x80>
 8012576:	2501      	movs	r5, #1
 8012578:	0011      	movs	r1, r2
 801257a:	43a9      	bics	r1, r5
 801257c:	1859      	adds	r1, r3, r1
 801257e:	6849      	ldr	r1, [r1, #4]
 8012580:	4229      	tst	r1, r5
 8012582:	d144      	bne.n	801260e <_realloc_r+0x10a>
 8012584:	2103      	movs	r1, #3
 8012586:	438a      	bics	r2, r1
 8012588:	9903      	ldr	r1, [sp, #12]
 801258a:	188e      	adds	r6, r1, r2
 801258c:	9900      	ldr	r1, [sp, #0]
 801258e:	459c      	cmp	ip, r3
 8012590:	d117      	bne.n	80125c2 <_realloc_r+0xbe>
 8012592:	3110      	adds	r1, #16
 8012594:	42b1      	cmp	r1, r6
 8012596:	dc3c      	bgt.n	8012612 <_realloc_r+0x10e>
 8012598:	9a00      	ldr	r2, [sp, #0]
 801259a:	2101      	movs	r1, #1
 801259c:	4694      	mov	ip, r2
 801259e:	1ab6      	subs	r6, r6, r2
 80125a0:	0022      	movs	r2, r4
 80125a2:	9b04      	ldr	r3, [sp, #16]
 80125a4:	430e      	orrs	r6, r1
 80125a6:	4463      	add	r3, ip
 80125a8:	6083      	str	r3, [r0, #8]
 80125aa:	3a08      	subs	r2, #8
 80125ac:	605e      	str	r6, [r3, #4]
 80125ae:	6853      	ldr	r3, [r2, #4]
 80125b0:	9801      	ldr	r0, [sp, #4]
 80125b2:	400b      	ands	r3, r1
 80125b4:	4661      	mov	r1, ip
 80125b6:	430b      	orrs	r3, r1
 80125b8:	6053      	str	r3, [r2, #4]
 80125ba:	f7f9 ff27 	bl	800c40c <__malloc_unlock>
 80125be:	0027      	movs	r7, r4
 80125c0:	e7aa      	b.n	8012518 <_realloc_r+0x14>
 80125c2:	42b1      	cmp	r1, r6
 80125c4:	dc25      	bgt.n	8012612 <_realloc_r+0x10e>
 80125c6:	68da      	ldr	r2, [r3, #12]
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	60da      	str	r2, [r3, #12]
 80125cc:	6093      	str	r3, [r2, #8]
 80125ce:	9b00      	ldr	r3, [sp, #0]
 80125d0:	9a02      	ldr	r2, [sp, #8]
 80125d2:	1af4      	subs	r4, r6, r3
 80125d4:	9b02      	ldr	r3, [sp, #8]
 80125d6:	1992      	adds	r2, r2, r6
 80125d8:	6858      	ldr	r0, [r3, #4]
 80125da:	2301      	movs	r3, #1
 80125dc:	4018      	ands	r0, r3
 80125de:	2c0f      	cmp	r4, #15
 80125e0:	d800      	bhi.n	80125e4 <_realloc_r+0xe0>
 80125e2:	e12c      	b.n	801283e <_realloc_r+0x33a>
 80125e4:	9d00      	ldr	r5, [sp, #0]
 80125e6:	9902      	ldr	r1, [sp, #8]
 80125e8:	4328      	orrs	r0, r5
 80125ea:	1949      	adds	r1, r1, r5
 80125ec:	9d02      	ldr	r5, [sp, #8]
 80125ee:	431c      	orrs	r4, r3
 80125f0:	6068      	str	r0, [r5, #4]
 80125f2:	604c      	str	r4, [r1, #4]
 80125f4:	6850      	ldr	r0, [r2, #4]
 80125f6:	3108      	adds	r1, #8
 80125f8:	4303      	orrs	r3, r0
 80125fa:	6053      	str	r3, [r2, #4]
 80125fc:	9801      	ldr	r0, [sp, #4]
 80125fe:	f7fb f9a3 	bl	800d948 <_free_r>
 8012602:	9801      	ldr	r0, [sp, #4]
 8012604:	f7f9 ff02 	bl	800c40c <__malloc_unlock>
 8012608:	9f02      	ldr	r7, [sp, #8]
 801260a:	3708      	adds	r7, #8
 801260c:	e784      	b.n	8012518 <_realloc_r+0x14>
 801260e:	2200      	movs	r2, #0
 8012610:	0013      	movs	r3, r2
 8012612:	07ff      	lsls	r7, r7, #31
 8012614:	d500      	bpl.n	8012618 <_realloc_r+0x114>
 8012616:	e0c6      	b.n	80127a6 <_realloc_r+0x2a2>
 8012618:	0021      	movs	r1, r4
 801261a:	2003      	movs	r0, #3
 801261c:	3908      	subs	r1, #8
 801261e:	680d      	ldr	r5, [r1, #0]
 8012620:	9904      	ldr	r1, [sp, #16]
 8012622:	1b4d      	subs	r5, r1, r5
 8012624:	6869      	ldr	r1, [r5, #4]
 8012626:	4381      	bics	r1, r0
 8012628:	9803      	ldr	r0, [sp, #12]
 801262a:	180f      	adds	r7, r1, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d100      	bne.n	8012632 <_realloc_r+0x12e>
 8012630:	e084      	b.n	801273c <_realloc_r+0x238>
 8012632:	19d6      	adds	r6, r2, r7
 8012634:	459c      	cmp	ip, r3
 8012636:	d148      	bne.n	80126ca <_realloc_r+0x1c6>
 8012638:	9b00      	ldr	r3, [sp, #0]
 801263a:	3310      	adds	r3, #16
 801263c:	42b3      	cmp	r3, r6
 801263e:	dc7d      	bgt.n	801273c <_realloc_r+0x238>
 8012640:	68aa      	ldr	r2, [r5, #8]
 8012642:	68eb      	ldr	r3, [r5, #12]
 8012644:	002f      	movs	r7, r5
 8012646:	60d3      	str	r3, [r2, #12]
 8012648:	609a      	str	r2, [r3, #8]
 801264a:	0002      	movs	r2, r0
 801264c:	3a04      	subs	r2, #4
 801264e:	3708      	adds	r7, #8
 8012650:	2a24      	cmp	r2, #36	; 0x24
 8012652:	d835      	bhi.n	80126c0 <_realloc_r+0x1bc>
 8012654:	003b      	movs	r3, r7
 8012656:	2a13      	cmp	r2, #19
 8012658:	d908      	bls.n	801266c <_realloc_r+0x168>
 801265a:	6823      	ldr	r3, [r4, #0]
 801265c:	60ab      	str	r3, [r5, #8]
 801265e:	6863      	ldr	r3, [r4, #4]
 8012660:	60eb      	str	r3, [r5, #12]
 8012662:	2a1b      	cmp	r2, #27
 8012664:	d81a      	bhi.n	801269c <_realloc_r+0x198>
 8012666:	002b      	movs	r3, r5
 8012668:	3408      	adds	r4, #8
 801266a:	3310      	adds	r3, #16
 801266c:	6822      	ldr	r2, [r4, #0]
 801266e:	601a      	str	r2, [r3, #0]
 8012670:	6862      	ldr	r2, [r4, #4]
 8012672:	605a      	str	r2, [r3, #4]
 8012674:	68a2      	ldr	r2, [r4, #8]
 8012676:	609a      	str	r2, [r3, #8]
 8012678:	9b00      	ldr	r3, [sp, #0]
 801267a:	4a74      	ldr	r2, [pc, #464]	; (801284c <_realloc_r+0x348>)
 801267c:	18eb      	adds	r3, r5, r3
 801267e:	6093      	str	r3, [r2, #8]
 8012680:	9a00      	ldr	r2, [sp, #0]
 8012682:	1ab6      	subs	r6, r6, r2
 8012684:	2201      	movs	r2, #1
 8012686:	4316      	orrs	r6, r2
 8012688:	605e      	str	r6, [r3, #4]
 801268a:	686b      	ldr	r3, [r5, #4]
 801268c:	4013      	ands	r3, r2
 801268e:	9a00      	ldr	r2, [sp, #0]
 8012690:	4313      	orrs	r3, r2
 8012692:	606b      	str	r3, [r5, #4]
 8012694:	9801      	ldr	r0, [sp, #4]
 8012696:	f7f9 feb9 	bl	800c40c <__malloc_unlock>
 801269a:	e73d      	b.n	8012518 <_realloc_r+0x14>
 801269c:	68a3      	ldr	r3, [r4, #8]
 801269e:	612b      	str	r3, [r5, #16]
 80126a0:	68e3      	ldr	r3, [r4, #12]
 80126a2:	616b      	str	r3, [r5, #20]
 80126a4:	2a24      	cmp	r2, #36	; 0x24
 80126a6:	d003      	beq.n	80126b0 <_realloc_r+0x1ac>
 80126a8:	002b      	movs	r3, r5
 80126aa:	3410      	adds	r4, #16
 80126ac:	3318      	adds	r3, #24
 80126ae:	e7dd      	b.n	801266c <_realloc_r+0x168>
 80126b0:	6923      	ldr	r3, [r4, #16]
 80126b2:	61ab      	str	r3, [r5, #24]
 80126b4:	002b      	movs	r3, r5
 80126b6:	6962      	ldr	r2, [r4, #20]
 80126b8:	3320      	adds	r3, #32
 80126ba:	61ea      	str	r2, [r5, #28]
 80126bc:	3418      	adds	r4, #24
 80126be:	e7d5      	b.n	801266c <_realloc_r+0x168>
 80126c0:	0021      	movs	r1, r4
 80126c2:	0038      	movs	r0, r7
 80126c4:	f001 fb2f 	bl	8013d26 <memmove>
 80126c8:	e7d6      	b.n	8012678 <_realloc_r+0x174>
 80126ca:	9a00      	ldr	r2, [sp, #0]
 80126cc:	42b2      	cmp	r2, r6
 80126ce:	dc35      	bgt.n	801273c <_realloc_r+0x238>
 80126d0:	0028      	movs	r0, r5
 80126d2:	68da      	ldr	r2, [r3, #12]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	3008      	adds	r0, #8
 80126d8:	60da      	str	r2, [r3, #12]
 80126da:	6093      	str	r3, [r2, #8]
 80126dc:	68aa      	ldr	r2, [r5, #8]
 80126de:	68eb      	ldr	r3, [r5, #12]
 80126e0:	60d3      	str	r3, [r2, #12]
 80126e2:	609a      	str	r2, [r3, #8]
 80126e4:	9a03      	ldr	r2, [sp, #12]
 80126e6:	3a04      	subs	r2, #4
 80126e8:	2a24      	cmp	r2, #36	; 0x24
 80126ea:	d823      	bhi.n	8012734 <_realloc_r+0x230>
 80126ec:	2a13      	cmp	r2, #19
 80126ee:	d907      	bls.n	8012700 <_realloc_r+0x1fc>
 80126f0:	6823      	ldr	r3, [r4, #0]
 80126f2:	60ab      	str	r3, [r5, #8]
 80126f4:	6863      	ldr	r3, [r4, #4]
 80126f6:	60eb      	str	r3, [r5, #12]
 80126f8:	2a1b      	cmp	r2, #27
 80126fa:	d809      	bhi.n	8012710 <_realloc_r+0x20c>
 80126fc:	3408      	adds	r4, #8
 80126fe:	3008      	adds	r0, #8
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	6003      	str	r3, [r0, #0]
 8012704:	6863      	ldr	r3, [r4, #4]
 8012706:	6043      	str	r3, [r0, #4]
 8012708:	68a3      	ldr	r3, [r4, #8]
 801270a:	6083      	str	r3, [r0, #8]
 801270c:	9502      	str	r5, [sp, #8]
 801270e:	e75e      	b.n	80125ce <_realloc_r+0xca>
 8012710:	68a3      	ldr	r3, [r4, #8]
 8012712:	612b      	str	r3, [r5, #16]
 8012714:	68e3      	ldr	r3, [r4, #12]
 8012716:	616b      	str	r3, [r5, #20]
 8012718:	2a24      	cmp	r2, #36	; 0x24
 801271a:	d003      	beq.n	8012724 <_realloc_r+0x220>
 801271c:	0028      	movs	r0, r5
 801271e:	3410      	adds	r4, #16
 8012720:	3018      	adds	r0, #24
 8012722:	e7ed      	b.n	8012700 <_realloc_r+0x1fc>
 8012724:	0028      	movs	r0, r5
 8012726:	6923      	ldr	r3, [r4, #16]
 8012728:	3020      	adds	r0, #32
 801272a:	61ab      	str	r3, [r5, #24]
 801272c:	6963      	ldr	r3, [r4, #20]
 801272e:	3418      	adds	r4, #24
 8012730:	61eb      	str	r3, [r5, #28]
 8012732:	e7e5      	b.n	8012700 <_realloc_r+0x1fc>
 8012734:	0021      	movs	r1, r4
 8012736:	f001 faf6 	bl	8013d26 <memmove>
 801273a:	e7e7      	b.n	801270c <_realloc_r+0x208>
 801273c:	9b00      	ldr	r3, [sp, #0]
 801273e:	42bb      	cmp	r3, r7
 8012740:	dc31      	bgt.n	80127a6 <_realloc_r+0x2a2>
 8012742:	0028      	movs	r0, r5
 8012744:	68aa      	ldr	r2, [r5, #8]
 8012746:	68eb      	ldr	r3, [r5, #12]
 8012748:	3008      	adds	r0, #8
 801274a:	60d3      	str	r3, [r2, #12]
 801274c:	609a      	str	r2, [r3, #8]
 801274e:	9a03      	ldr	r2, [sp, #12]
 8012750:	3a04      	subs	r2, #4
 8012752:	2a24      	cmp	r2, #36	; 0x24
 8012754:	d823      	bhi.n	801279e <_realloc_r+0x29a>
 8012756:	2a13      	cmp	r2, #19
 8012758:	d907      	bls.n	801276a <_realloc_r+0x266>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	60ab      	str	r3, [r5, #8]
 801275e:	6863      	ldr	r3, [r4, #4]
 8012760:	60eb      	str	r3, [r5, #12]
 8012762:	2a1b      	cmp	r2, #27
 8012764:	d809      	bhi.n	801277a <_realloc_r+0x276>
 8012766:	3408      	adds	r4, #8
 8012768:	3008      	adds	r0, #8
 801276a:	6823      	ldr	r3, [r4, #0]
 801276c:	6003      	str	r3, [r0, #0]
 801276e:	6863      	ldr	r3, [r4, #4]
 8012770:	6043      	str	r3, [r0, #4]
 8012772:	68a3      	ldr	r3, [r4, #8]
 8012774:	6083      	str	r3, [r0, #8]
 8012776:	003e      	movs	r6, r7
 8012778:	e7c8      	b.n	801270c <_realloc_r+0x208>
 801277a:	68a3      	ldr	r3, [r4, #8]
 801277c:	612b      	str	r3, [r5, #16]
 801277e:	68e3      	ldr	r3, [r4, #12]
 8012780:	616b      	str	r3, [r5, #20]
 8012782:	2a24      	cmp	r2, #36	; 0x24
 8012784:	d003      	beq.n	801278e <_realloc_r+0x28a>
 8012786:	0028      	movs	r0, r5
 8012788:	3410      	adds	r4, #16
 801278a:	3018      	adds	r0, #24
 801278c:	e7ed      	b.n	801276a <_realloc_r+0x266>
 801278e:	0028      	movs	r0, r5
 8012790:	6923      	ldr	r3, [r4, #16]
 8012792:	3020      	adds	r0, #32
 8012794:	61ab      	str	r3, [r5, #24]
 8012796:	6963      	ldr	r3, [r4, #20]
 8012798:	3418      	adds	r4, #24
 801279a:	61eb      	str	r3, [r5, #28]
 801279c:	e7e5      	b.n	801276a <_realloc_r+0x266>
 801279e:	0021      	movs	r1, r4
 80127a0:	f001 fac1 	bl	8013d26 <memmove>
 80127a4:	e7e7      	b.n	8012776 <_realloc_r+0x272>
 80127a6:	9905      	ldr	r1, [sp, #20]
 80127a8:	9801      	ldr	r0, [sp, #4]
 80127aa:	f7f9 fc13 	bl	800bfd4 <_malloc_r>
 80127ae:	1e07      	subs	r7, r0, #0
 80127b0:	d100      	bne.n	80127b4 <_realloc_r+0x2b0>
 80127b2:	e76f      	b.n	8012694 <_realloc_r+0x190>
 80127b4:	0023      	movs	r3, r4
 80127b6:	2201      	movs	r2, #1
 80127b8:	3b08      	subs	r3, #8
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	4393      	bics	r3, r2
 80127be:	9a04      	ldr	r2, [sp, #16]
 80127c0:	18d3      	adds	r3, r2, r3
 80127c2:	0002      	movs	r2, r0
 80127c4:	3a08      	subs	r2, #8
 80127c6:	4293      	cmp	r3, r2
 80127c8:	d105      	bne.n	80127d6 <_realloc_r+0x2d2>
 80127ca:	685e      	ldr	r6, [r3, #4]
 80127cc:	2303      	movs	r3, #3
 80127ce:	439e      	bics	r6, r3
 80127d0:	9b03      	ldr	r3, [sp, #12]
 80127d2:	18f6      	adds	r6, r6, r3
 80127d4:	e6fb      	b.n	80125ce <_realloc_r+0xca>
 80127d6:	9a03      	ldr	r2, [sp, #12]
 80127d8:	3a04      	subs	r2, #4
 80127da:	2a24      	cmp	r2, #36	; 0x24
 80127dc:	d829      	bhi.n	8012832 <_realloc_r+0x32e>
 80127de:	0003      	movs	r3, r0
 80127e0:	0021      	movs	r1, r4
 80127e2:	2a13      	cmp	r2, #19
 80127e4:	d908      	bls.n	80127f8 <_realloc_r+0x2f4>
 80127e6:	6823      	ldr	r3, [r4, #0]
 80127e8:	6003      	str	r3, [r0, #0]
 80127ea:	6863      	ldr	r3, [r4, #4]
 80127ec:	6043      	str	r3, [r0, #4]
 80127ee:	2a1b      	cmp	r2, #27
 80127f0:	d80d      	bhi.n	801280e <_realloc_r+0x30a>
 80127f2:	0003      	movs	r3, r0
 80127f4:	3108      	adds	r1, #8
 80127f6:	3308      	adds	r3, #8
 80127f8:	680a      	ldr	r2, [r1, #0]
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	684a      	ldr	r2, [r1, #4]
 80127fe:	605a      	str	r2, [r3, #4]
 8012800:	688a      	ldr	r2, [r1, #8]
 8012802:	609a      	str	r2, [r3, #8]
 8012804:	0021      	movs	r1, r4
 8012806:	9801      	ldr	r0, [sp, #4]
 8012808:	f7fb f89e 	bl	800d948 <_free_r>
 801280c:	e742      	b.n	8012694 <_realloc_r+0x190>
 801280e:	68a3      	ldr	r3, [r4, #8]
 8012810:	6083      	str	r3, [r0, #8]
 8012812:	68e3      	ldr	r3, [r4, #12]
 8012814:	60c3      	str	r3, [r0, #12]
 8012816:	2a24      	cmp	r2, #36	; 0x24
 8012818:	d003      	beq.n	8012822 <_realloc_r+0x31e>
 801281a:	0003      	movs	r3, r0
 801281c:	3110      	adds	r1, #16
 801281e:	3310      	adds	r3, #16
 8012820:	e7ea      	b.n	80127f8 <_realloc_r+0x2f4>
 8012822:	6923      	ldr	r3, [r4, #16]
 8012824:	3118      	adds	r1, #24
 8012826:	6103      	str	r3, [r0, #16]
 8012828:	0003      	movs	r3, r0
 801282a:	6962      	ldr	r2, [r4, #20]
 801282c:	3318      	adds	r3, #24
 801282e:	6142      	str	r2, [r0, #20]
 8012830:	e7e2      	b.n	80127f8 <_realloc_r+0x2f4>
 8012832:	0021      	movs	r1, r4
 8012834:	f001 fa77 	bl	8013d26 <memmove>
 8012838:	e7e4      	b.n	8012804 <_realloc_r+0x300>
 801283a:	9e03      	ldr	r6, [sp, #12]
 801283c:	e6c7      	b.n	80125ce <_realloc_r+0xca>
 801283e:	9902      	ldr	r1, [sp, #8]
 8012840:	4306      	orrs	r6, r0
 8012842:	604e      	str	r6, [r1, #4]
 8012844:	6851      	ldr	r1, [r2, #4]
 8012846:	430b      	orrs	r3, r1
 8012848:	6053      	str	r3, [r2, #4]
 801284a:	e6da      	b.n	8012602 <_realloc_r+0xfe>
 801284c:	20000028 	.word	0x20000028

08012850 <_strtoll_l.constprop.0>:
 8012850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012852:	b08d      	sub	sp, #52	; 0x34
 8012854:	9203      	str	r2, [sp, #12]
 8012856:	4a53      	ldr	r2, [pc, #332]	; (80129a4 <_strtoll_l.constprop.0+0x154>)
 8012858:	001e      	movs	r6, r3
 801285a:	9102      	str	r1, [sp, #8]
 801285c:	000b      	movs	r3, r1
 801285e:	4694      	mov	ip, r2
 8012860:	2108      	movs	r1, #8
 8012862:	900a      	str	r0, [sp, #40]	; 0x28
 8012864:	001a      	movs	r2, r3
 8012866:	4660      	mov	r0, ip
 8012868:	7814      	ldrb	r4, [r2, #0]
 801286a:	3301      	adds	r3, #1
 801286c:	5d00      	ldrb	r0, [r0, r4]
 801286e:	001d      	movs	r5, r3
 8012870:	0007      	movs	r7, r0
 8012872:	400f      	ands	r7, r1
 8012874:	4208      	tst	r0, r1
 8012876:	d1f5      	bne.n	8012864 <_strtoll_l.constprop.0+0x14>
 8012878:	2c2d      	cmp	r4, #45	; 0x2d
 801287a:	d153      	bne.n	8012924 <_strtoll_l.constprop.0+0xd4>
 801287c:	781c      	ldrb	r4, [r3, #0]
 801287e:	2301      	movs	r3, #1
 8012880:	1c95      	adds	r5, r2, #2
 8012882:	9301      	str	r3, [sp, #4]
 8012884:	2e00      	cmp	r6, #0
 8012886:	d100      	bne.n	801288a <_strtoll_l.constprop.0+0x3a>
 8012888:	e086      	b.n	8012998 <_strtoll_l.constprop.0+0x148>
 801288a:	2e10      	cmp	r6, #16
 801288c:	d10a      	bne.n	80128a4 <_strtoll_l.constprop.0+0x54>
 801288e:	2c30      	cmp	r4, #48	; 0x30
 8012890:	d108      	bne.n	80128a4 <_strtoll_l.constprop.0+0x54>
 8012892:	2220      	movs	r2, #32
 8012894:	782b      	ldrb	r3, [r5, #0]
 8012896:	4393      	bics	r3, r2
 8012898:	2b58      	cmp	r3, #88	; 0x58
 801289a:	d000      	beq.n	801289e <_strtoll_l.constprop.0+0x4e>
 801289c:	e076      	b.n	801298c <_strtoll_l.constprop.0+0x13c>
 801289e:	2610      	movs	r6, #16
 80128a0:	786c      	ldrb	r4, [r5, #1]
 80128a2:	3502      	adds	r5, #2
 80128a4:	2001      	movs	r0, #1
 80128a6:	2300      	movs	r3, #0
 80128a8:	493f      	ldr	r1, [pc, #252]	; (80129a8 <_strtoll_l.constprop.0+0x158>)
 80128aa:	9a01      	ldr	r2, [sp, #4]
 80128ac:	4240      	negs	r0, r0
 80128ae:	1812      	adds	r2, r2, r0
 80128b0:	414b      	adcs	r3, r1
 80128b2:	9204      	str	r2, [sp, #16]
 80128b4:	9305      	str	r3, [sp, #20]
 80128b6:	9804      	ldr	r0, [sp, #16]
 80128b8:	9905      	ldr	r1, [sp, #20]
 80128ba:	17f3      	asrs	r3, r6, #31
 80128bc:	0032      	movs	r2, r6
 80128be:	930b      	str	r3, [sp, #44]	; 0x2c
 80128c0:	f7ed fdf0 	bl	80004a4 <__aeabi_uldivmod>
 80128c4:	2300      	movs	r3, #0
 80128c6:	000f      	movs	r7, r1
 80128c8:	9008      	str	r0, [sp, #32]
 80128ca:	2100      	movs	r1, #0
 80128cc:	2000      	movs	r0, #0
 80128ce:	9209      	str	r2, [sp, #36]	; 0x24
 80128d0:	0022      	movs	r2, r4
 80128d2:	3a30      	subs	r2, #48	; 0x30
 80128d4:	2a09      	cmp	r2, #9
 80128d6:	d82b      	bhi.n	8012930 <_strtoll_l.constprop.0+0xe0>
 80128d8:	0014      	movs	r4, r2
 80128da:	42a6      	cmp	r6, r4
 80128dc:	dd37      	ble.n	801294e <_strtoll_l.constprop.0+0xfe>
 80128de:	1c5a      	adds	r2, r3, #1
 80128e0:	d01d      	beq.n	801291e <_strtoll_l.constprop.0+0xce>
 80128e2:	42b9      	cmp	r1, r7
 80128e4:	d830      	bhi.n	8012948 <_strtoll_l.constprop.0+0xf8>
 80128e6:	d102      	bne.n	80128ee <_strtoll_l.constprop.0+0x9e>
 80128e8:	9b08      	ldr	r3, [sp, #32]
 80128ea:	4298      	cmp	r0, r3
 80128ec:	d82c      	bhi.n	8012948 <_strtoll_l.constprop.0+0xf8>
 80128ee:	9b08      	ldr	r3, [sp, #32]
 80128f0:	4283      	cmp	r3, r0
 80128f2:	d106      	bne.n	8012902 <_strtoll_l.constprop.0+0xb2>
 80128f4:	428f      	cmp	r7, r1
 80128f6:	d104      	bne.n	8012902 <_strtoll_l.constprop.0+0xb2>
 80128f8:	2301      	movs	r3, #1
 80128fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128fc:	425b      	negs	r3, r3
 80128fe:	42a2      	cmp	r2, r4
 8012900:	db0d      	blt.n	801291e <_strtoll_l.constprop.0+0xce>
 8012902:	000b      	movs	r3, r1
 8012904:	0002      	movs	r2, r0
 8012906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012908:	0030      	movs	r0, r6
 801290a:	f7ed fdeb 	bl	80004e4 <__aeabi_lmul>
 801290e:	17e3      	asrs	r3, r4, #31
 8012910:	9406      	str	r4, [sp, #24]
 8012912:	9307      	str	r3, [sp, #28]
 8012914:	9b06      	ldr	r3, [sp, #24]
 8012916:	9c07      	ldr	r4, [sp, #28]
 8012918:	18c0      	adds	r0, r0, r3
 801291a:	4161      	adcs	r1, r4
 801291c:	2301      	movs	r3, #1
 801291e:	782c      	ldrb	r4, [r5, #0]
 8012920:	3501      	adds	r5, #1
 8012922:	e7d5      	b.n	80128d0 <_strtoll_l.constprop.0+0x80>
 8012924:	9701      	str	r7, [sp, #4]
 8012926:	2c2b      	cmp	r4, #43	; 0x2b
 8012928:	d1ac      	bne.n	8012884 <_strtoll_l.constprop.0+0x34>
 801292a:	781c      	ldrb	r4, [r3, #0]
 801292c:	1c95      	adds	r5, r2, #2
 801292e:	e7a9      	b.n	8012884 <_strtoll_l.constprop.0+0x34>
 8012930:	0022      	movs	r2, r4
 8012932:	3a41      	subs	r2, #65	; 0x41
 8012934:	2a19      	cmp	r2, #25
 8012936:	d801      	bhi.n	801293c <_strtoll_l.constprop.0+0xec>
 8012938:	3c37      	subs	r4, #55	; 0x37
 801293a:	e7ce      	b.n	80128da <_strtoll_l.constprop.0+0x8a>
 801293c:	0022      	movs	r2, r4
 801293e:	3a61      	subs	r2, #97	; 0x61
 8012940:	2a19      	cmp	r2, #25
 8012942:	d804      	bhi.n	801294e <_strtoll_l.constprop.0+0xfe>
 8012944:	3c57      	subs	r4, #87	; 0x57
 8012946:	e7c8      	b.n	80128da <_strtoll_l.constprop.0+0x8a>
 8012948:	2301      	movs	r3, #1
 801294a:	425b      	negs	r3, r3
 801294c:	e7e7      	b.n	801291e <_strtoll_l.constprop.0+0xce>
 801294e:	1c5a      	adds	r2, r3, #1
 8012950:	d109      	bne.n	8012966 <_strtoll_l.constprop.0+0x116>
 8012952:	9804      	ldr	r0, [sp, #16]
 8012954:	9905      	ldr	r1, [sp, #20]
 8012956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012958:	3323      	adds	r3, #35	; 0x23
 801295a:	6013      	str	r3, [r2, #0]
 801295c:	9b03      	ldr	r3, [sp, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10e      	bne.n	8012980 <_strtoll_l.constprop.0+0x130>
 8012962:	b00d      	add	sp, #52	; 0x34
 8012964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012966:	9a01      	ldr	r2, [sp, #4]
 8012968:	2a00      	cmp	r2, #0
 801296a:	d004      	beq.n	8012976 <_strtoll_l.constprop.0+0x126>
 801296c:	0006      	movs	r6, r0
 801296e:	000f      	movs	r7, r1
 8012970:	2100      	movs	r1, #0
 8012972:	4270      	negs	r0, r6
 8012974:	41b9      	sbcs	r1, r7
 8012976:	9a03      	ldr	r2, [sp, #12]
 8012978:	2a00      	cmp	r2, #0
 801297a:	d0f2      	beq.n	8012962 <_strtoll_l.constprop.0+0x112>
 801297c:	2b00      	cmp	r3, #0
 801297e:	d001      	beq.n	8012984 <_strtoll_l.constprop.0+0x134>
 8012980:	1e6b      	subs	r3, r5, #1
 8012982:	9302      	str	r3, [sp, #8]
 8012984:	9b03      	ldr	r3, [sp, #12]
 8012986:	9a02      	ldr	r2, [sp, #8]
 8012988:	601a      	str	r2, [r3, #0]
 801298a:	e7ea      	b.n	8012962 <_strtoll_l.constprop.0+0x112>
 801298c:	2430      	movs	r4, #48	; 0x30
 801298e:	2e00      	cmp	r6, #0
 8012990:	d000      	beq.n	8012994 <_strtoll_l.constprop.0+0x144>
 8012992:	e787      	b.n	80128a4 <_strtoll_l.constprop.0+0x54>
 8012994:	3608      	adds	r6, #8
 8012996:	e785      	b.n	80128a4 <_strtoll_l.constprop.0+0x54>
 8012998:	2c30      	cmp	r4, #48	; 0x30
 801299a:	d100      	bne.n	801299e <_strtoll_l.constprop.0+0x14e>
 801299c:	e779      	b.n	8012892 <_strtoll_l.constprop.0+0x42>
 801299e:	260a      	movs	r6, #10
 80129a0:	e780      	b.n	80128a4 <_strtoll_l.constprop.0+0x54>
 80129a2:	46c0      	nop			; (mov r8, r8)
 80129a4:	08015d71 	.word	0x08015d71
 80129a8:	7fffffff 	.word	0x7fffffff

080129ac <_strtoll_r>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	f7ff ff4f 	bl	8012850 <_strtoll_l.constprop.0>
 80129b2:	bd10      	pop	{r4, pc}

080129b4 <_strtoull_l.constprop.0>:
 80129b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129b6:	b08b      	sub	sp, #44	; 0x2c
 80129b8:	9202      	str	r2, [sp, #8]
 80129ba:	4a54      	ldr	r2, [pc, #336]	; (8012b0c <_strtoull_l.constprop.0+0x158>)
 80129bc:	001e      	movs	r6, r3
 80129be:	9101      	str	r1, [sp, #4]
 80129c0:	000b      	movs	r3, r1
 80129c2:	4694      	mov	ip, r2
 80129c4:	2108      	movs	r1, #8
 80129c6:	9009      	str	r0, [sp, #36]	; 0x24
 80129c8:	001a      	movs	r2, r3
 80129ca:	4660      	mov	r0, ip
 80129cc:	7814      	ldrb	r4, [r2, #0]
 80129ce:	3301      	adds	r3, #1
 80129d0:	5d00      	ldrb	r0, [r0, r4]
 80129d2:	001d      	movs	r5, r3
 80129d4:	0007      	movs	r7, r0
 80129d6:	400f      	ands	r7, r1
 80129d8:	4208      	tst	r0, r1
 80129da:	d1f5      	bne.n	80129c8 <_strtoull_l.constprop.0+0x14>
 80129dc:	2c2d      	cmp	r4, #45	; 0x2d
 80129de:	d154      	bne.n	8012a8a <_strtoull_l.constprop.0+0xd6>
 80129e0:	781c      	ldrb	r4, [r3, #0]
 80129e2:	2301      	movs	r3, #1
 80129e4:	1c95      	adds	r5, r2, #2
 80129e6:	9306      	str	r3, [sp, #24]
 80129e8:	2e00      	cmp	r6, #0
 80129ea:	d100      	bne.n	80129ee <_strtoull_l.constprop.0+0x3a>
 80129ec:	e088      	b.n	8012b00 <_strtoull_l.constprop.0+0x14c>
 80129ee:	2e10      	cmp	r6, #16
 80129f0:	d10a      	bne.n	8012a08 <_strtoull_l.constprop.0+0x54>
 80129f2:	2c30      	cmp	r4, #48	; 0x30
 80129f4:	d108      	bne.n	8012a08 <_strtoull_l.constprop.0+0x54>
 80129f6:	2220      	movs	r2, #32
 80129f8:	782b      	ldrb	r3, [r5, #0]
 80129fa:	4393      	bics	r3, r2
 80129fc:	2b58      	cmp	r3, #88	; 0x58
 80129fe:	d000      	beq.n	8012a02 <_strtoull_l.constprop.0+0x4e>
 8012a00:	e078      	b.n	8012af4 <_strtoull_l.constprop.0+0x140>
 8012a02:	2610      	movs	r6, #16
 8012a04:	786c      	ldrb	r4, [r5, #1]
 8012a06:	3502      	adds	r5, #2
 8012a08:	17f7      	asrs	r7, r6, #31
 8012a0a:	0032      	movs	r2, r6
 8012a0c:	003b      	movs	r3, r7
 8012a0e:	2001      	movs	r0, #1
 8012a10:	4240      	negs	r0, r0
 8012a12:	17c1      	asrs	r1, r0, #31
 8012a14:	f7ed fd46 	bl	80004a4 <__aeabi_uldivmod>
 8012a18:	0032      	movs	r2, r6
 8012a1a:	9007      	str	r0, [sp, #28]
 8012a1c:	9103      	str	r1, [sp, #12]
 8012a1e:	003b      	movs	r3, r7
 8012a20:	2001      	movs	r0, #1
 8012a22:	4240      	negs	r0, r0
 8012a24:	17c1      	asrs	r1, r0, #31
 8012a26:	f7ed fd3d 	bl	80004a4 <__aeabi_uldivmod>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	2000      	movs	r0, #0
 8012a2e:	2100      	movs	r1, #0
 8012a30:	9208      	str	r2, [sp, #32]
 8012a32:	0022      	movs	r2, r4
 8012a34:	3a30      	subs	r2, #48	; 0x30
 8012a36:	2a09      	cmp	r2, #9
 8012a38:	d82d      	bhi.n	8012a96 <_strtoull_l.constprop.0+0xe2>
 8012a3a:	0014      	movs	r4, r2
 8012a3c:	42a6      	cmp	r6, r4
 8012a3e:	dd39      	ble.n	8012ab4 <_strtoull_l.constprop.0+0x100>
 8012a40:	1c5a      	adds	r2, r3, #1
 8012a42:	d01f      	beq.n	8012a84 <_strtoull_l.constprop.0+0xd0>
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	4299      	cmp	r1, r3
 8012a48:	d831      	bhi.n	8012aae <_strtoull_l.constprop.0+0xfa>
 8012a4a:	d102      	bne.n	8012a52 <_strtoull_l.constprop.0+0x9e>
 8012a4c:	9b07      	ldr	r3, [sp, #28]
 8012a4e:	4298      	cmp	r0, r3
 8012a50:	d82d      	bhi.n	8012aae <_strtoull_l.constprop.0+0xfa>
 8012a52:	9b07      	ldr	r3, [sp, #28]
 8012a54:	4283      	cmp	r3, r0
 8012a56:	d107      	bne.n	8012a68 <_strtoull_l.constprop.0+0xb4>
 8012a58:	9b03      	ldr	r3, [sp, #12]
 8012a5a:	428b      	cmp	r3, r1
 8012a5c:	d104      	bne.n	8012a68 <_strtoull_l.constprop.0+0xb4>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	9a08      	ldr	r2, [sp, #32]
 8012a62:	425b      	negs	r3, r3
 8012a64:	42a2      	cmp	r2, r4
 8012a66:	db0d      	blt.n	8012a84 <_strtoull_l.constprop.0+0xd0>
 8012a68:	000b      	movs	r3, r1
 8012a6a:	0002      	movs	r2, r0
 8012a6c:	0039      	movs	r1, r7
 8012a6e:	0030      	movs	r0, r6
 8012a70:	f7ed fd38 	bl	80004e4 <__aeabi_lmul>
 8012a74:	17e3      	asrs	r3, r4, #31
 8012a76:	9404      	str	r4, [sp, #16]
 8012a78:	9305      	str	r3, [sp, #20]
 8012a7a:	9b04      	ldr	r3, [sp, #16]
 8012a7c:	9c05      	ldr	r4, [sp, #20]
 8012a7e:	18c0      	adds	r0, r0, r3
 8012a80:	4161      	adcs	r1, r4
 8012a82:	2301      	movs	r3, #1
 8012a84:	782c      	ldrb	r4, [r5, #0]
 8012a86:	3501      	adds	r5, #1
 8012a88:	e7d3      	b.n	8012a32 <_strtoull_l.constprop.0+0x7e>
 8012a8a:	9706      	str	r7, [sp, #24]
 8012a8c:	2c2b      	cmp	r4, #43	; 0x2b
 8012a8e:	d1ab      	bne.n	80129e8 <_strtoull_l.constprop.0+0x34>
 8012a90:	781c      	ldrb	r4, [r3, #0]
 8012a92:	1c95      	adds	r5, r2, #2
 8012a94:	e7a8      	b.n	80129e8 <_strtoull_l.constprop.0+0x34>
 8012a96:	0022      	movs	r2, r4
 8012a98:	3a41      	subs	r2, #65	; 0x41
 8012a9a:	2a19      	cmp	r2, #25
 8012a9c:	d801      	bhi.n	8012aa2 <_strtoull_l.constprop.0+0xee>
 8012a9e:	3c37      	subs	r4, #55	; 0x37
 8012aa0:	e7cc      	b.n	8012a3c <_strtoull_l.constprop.0+0x88>
 8012aa2:	0022      	movs	r2, r4
 8012aa4:	3a61      	subs	r2, #97	; 0x61
 8012aa6:	2a19      	cmp	r2, #25
 8012aa8:	d804      	bhi.n	8012ab4 <_strtoull_l.constprop.0+0x100>
 8012aaa:	3c57      	subs	r4, #87	; 0x57
 8012aac:	e7c6      	b.n	8012a3c <_strtoull_l.constprop.0+0x88>
 8012aae:	2301      	movs	r3, #1
 8012ab0:	425b      	negs	r3, r3
 8012ab2:	e7e7      	b.n	8012a84 <_strtoull_l.constprop.0+0xd0>
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	d10a      	bne.n	8012ace <_strtoull_l.constprop.0+0x11a>
 8012ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012aba:	3323      	adds	r3, #35	; 0x23
 8012abc:	6013      	str	r3, [r2, #0]
 8012abe:	9b02      	ldr	r3, [sp, #8]
 8012ac0:	2001      	movs	r0, #1
 8012ac2:	4240      	negs	r0, r0
 8012ac4:	17c1      	asrs	r1, r0, #31
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d10e      	bne.n	8012ae8 <_strtoull_l.constprop.0+0x134>
 8012aca:	b00b      	add	sp, #44	; 0x2c
 8012acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ace:	9a06      	ldr	r2, [sp, #24]
 8012ad0:	2a00      	cmp	r2, #0
 8012ad2:	d004      	beq.n	8012ade <_strtoull_l.constprop.0+0x12a>
 8012ad4:	0006      	movs	r6, r0
 8012ad6:	000f      	movs	r7, r1
 8012ad8:	2100      	movs	r1, #0
 8012ada:	4270      	negs	r0, r6
 8012adc:	41b9      	sbcs	r1, r7
 8012ade:	9a02      	ldr	r2, [sp, #8]
 8012ae0:	2a00      	cmp	r2, #0
 8012ae2:	d0f2      	beq.n	8012aca <_strtoull_l.constprop.0+0x116>
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d001      	beq.n	8012aec <_strtoull_l.constprop.0+0x138>
 8012ae8:	1e6b      	subs	r3, r5, #1
 8012aea:	9301      	str	r3, [sp, #4]
 8012aec:	9b02      	ldr	r3, [sp, #8]
 8012aee:	9a01      	ldr	r2, [sp, #4]
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	e7ea      	b.n	8012aca <_strtoull_l.constprop.0+0x116>
 8012af4:	2430      	movs	r4, #48	; 0x30
 8012af6:	2e00      	cmp	r6, #0
 8012af8:	d000      	beq.n	8012afc <_strtoull_l.constprop.0+0x148>
 8012afa:	e785      	b.n	8012a08 <_strtoull_l.constprop.0+0x54>
 8012afc:	3608      	adds	r6, #8
 8012afe:	e783      	b.n	8012a08 <_strtoull_l.constprop.0+0x54>
 8012b00:	2c30      	cmp	r4, #48	; 0x30
 8012b02:	d100      	bne.n	8012b06 <_strtoull_l.constprop.0+0x152>
 8012b04:	e777      	b.n	80129f6 <_strtoull_l.constprop.0+0x42>
 8012b06:	260a      	movs	r6, #10
 8012b08:	e77e      	b.n	8012a08 <_strtoull_l.constprop.0+0x54>
 8012b0a:	46c0      	nop			; (mov r8, r8)
 8012b0c:	08015d71 	.word	0x08015d71

08012b10 <_strtoull_r>:
 8012b10:	b510      	push	{r4, lr}
 8012b12:	f7ff ff4f 	bl	80129b4 <_strtoull_l.constprop.0>
 8012b16:	bd10      	pop	{r4, pc}

08012b18 <_mbrtowc_r>:
 8012b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b1a:	0004      	movs	r4, r0
 8012b1c:	0010      	movs	r0, r2
 8012b1e:	4a0b      	ldr	r2, [pc, #44]	; (8012b4c <_mbrtowc_r+0x34>)
 8012b20:	9d06      	ldr	r5, [sp, #24]
 8012b22:	32e4      	adds	r2, #228	; 0xe4
 8012b24:	6816      	ldr	r6, [r2, #0]
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d10c      	bne.n	8012b44 <_mbrtowc_r+0x2c>
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	0001      	movs	r1, r0
 8012b2e:	4a08      	ldr	r2, [pc, #32]	; (8012b50 <_mbrtowc_r+0x38>)
 8012b30:	9500      	str	r5, [sp, #0]
 8012b32:	0020      	movs	r0, r4
 8012b34:	47b0      	blx	r6
 8012b36:	1c43      	adds	r3, r0, #1
 8012b38:	d103      	bne.n	8012b42 <_mbrtowc_r+0x2a>
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	602b      	str	r3, [r5, #0]
 8012b3e:	338a      	adds	r3, #138	; 0x8a
 8012b40:	6023      	str	r3, [r4, #0]
 8012b42:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8012b44:	0002      	movs	r2, r0
 8012b46:	9500      	str	r5, [sp, #0]
 8012b48:	e7f3      	b.n	8012b32 <_mbrtowc_r+0x1a>
 8012b4a:	46c0      	nop			; (mov r8, r8)
 8012b4c:	20000444 	.word	0x20000444
 8012b50:	080160fb 	.word	0x080160fb

08012b54 <iswspace>:
 8012b54:	b510      	push	{r4, lr}
 8012b56:	2100      	movs	r1, #0
 8012b58:	f000 f802 	bl	8012b60 <iswspace_l>
 8012b5c:	bd10      	pop	{r4, pc}
	...

08012b60 <iswspace_l>:
 8012b60:	0003      	movs	r3, r0
 8012b62:	2000      	movs	r0, #0
 8012b64:	2bff      	cmp	r3, #255	; 0xff
 8012b66:	d803      	bhi.n	8012b70 <iswspace_l+0x10>
 8012b68:	4a02      	ldr	r2, [pc, #8]	; (8012b74 <iswspace_l+0x14>)
 8012b6a:	5cd0      	ldrb	r0, [r2, r3]
 8012b6c:	2308      	movs	r3, #8
 8012b6e:	4018      	ands	r0, r3
 8012b70:	4770      	bx	lr
 8012b72:	46c0      	nop			; (mov r8, r8)
 8012b74:	08015d71 	.word	0x08015d71

08012b78 <fiprintf>:
 8012b78:	b40e      	push	{r1, r2, r3}
 8012b7a:	b517      	push	{r0, r1, r2, r4, lr}
 8012b7c:	4c05      	ldr	r4, [pc, #20]	; (8012b94 <fiprintf+0x1c>)
 8012b7e:	ab05      	add	r3, sp, #20
 8012b80:	cb04      	ldmia	r3!, {r2}
 8012b82:	0001      	movs	r1, r0
 8012b84:	6820      	ldr	r0, [r4, #0]
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	f000 f954 	bl	8012e34 <_vfiprintf_r>
 8012b8c:	bc1e      	pop	{r1, r2, r3, r4}
 8012b8e:	bc08      	pop	{r3}
 8012b90:	b003      	add	sp, #12
 8012b92:	4718      	bx	r3
 8012b94:	200006d0 	.word	0x200006d0

08012b98 <__ssprint_r>:
 8012b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b9a:	6813      	ldr	r3, [r2, #0]
 8012b9c:	b087      	sub	sp, #28
 8012b9e:	0017      	movs	r7, r2
 8012ba0:	9303      	str	r3, [sp, #12]
 8012ba2:	6893      	ldr	r3, [r2, #8]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	000c      	movs	r4, r1
 8012ba8:	9005      	str	r0, [sp, #20]
 8012baa:	9202      	str	r2, [sp, #8]
 8012bac:	9201      	str	r2, [sp, #4]
 8012bae:	4293      	cmp	r3, r2
 8012bb0:	d10d      	bne.n	8012bce <__ssprint_r+0x36>
 8012bb2:	2000      	movs	r0, #0
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	607b      	str	r3, [r7, #4]
 8012bb8:	b007      	add	sp, #28
 8012bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bbc:	9b03      	ldr	r3, [sp, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	9302      	str	r3, [sp, #8]
 8012bc2:	9b03      	ldr	r3, [sp, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	9301      	str	r3, [sp, #4]
 8012bc8:	9b03      	ldr	r3, [sp, #12]
 8012bca:	3308      	adds	r3, #8
 8012bcc:	9303      	str	r3, [sp, #12]
 8012bce:	9a01      	ldr	r2, [sp, #4]
 8012bd0:	68a6      	ldr	r6, [r4, #8]
 8012bd2:	6823      	ldr	r3, [r4, #0]
 8012bd4:	2a00      	cmp	r2, #0
 8012bd6:	d0f1      	beq.n	8012bbc <__ssprint_r+0x24>
 8012bd8:	42b2      	cmp	r2, r6
 8012bda:	d32e      	bcc.n	8012c3a <__ssprint_r+0xa2>
 8012bdc:	2190      	movs	r1, #144	; 0x90
 8012bde:	89a2      	ldrh	r2, [r4, #12]
 8012be0:	00c9      	lsls	r1, r1, #3
 8012be2:	420a      	tst	r2, r1
 8012be4:	d029      	beq.n	8012c3a <__ssprint_r+0xa2>
 8012be6:	2003      	movs	r0, #3
 8012be8:	6921      	ldr	r1, [r4, #16]
 8012bea:	1a5b      	subs	r3, r3, r1
 8012bec:	9304      	str	r3, [sp, #16]
 8012bee:	6963      	ldr	r3, [r4, #20]
 8012bf0:	4343      	muls	r3, r0
 8012bf2:	0fdd      	lsrs	r5, r3, #31
 8012bf4:	18ed      	adds	r5, r5, r3
 8012bf6:	9b04      	ldr	r3, [sp, #16]
 8012bf8:	9801      	ldr	r0, [sp, #4]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	181b      	adds	r3, r3, r0
 8012bfe:	106d      	asrs	r5, r5, #1
 8012c00:	42ab      	cmp	r3, r5
 8012c02:	d900      	bls.n	8012c06 <__ssprint_r+0x6e>
 8012c04:	001d      	movs	r5, r3
 8012c06:	0552      	lsls	r2, r2, #21
 8012c08:	d532      	bpl.n	8012c70 <__ssprint_r+0xd8>
 8012c0a:	0029      	movs	r1, r5
 8012c0c:	9805      	ldr	r0, [sp, #20]
 8012c0e:	f7f9 f9e1 	bl	800bfd4 <_malloc_r>
 8012c12:	1e06      	subs	r6, r0, #0
 8012c14:	d036      	beq.n	8012c84 <__ssprint_r+0xec>
 8012c16:	9a04      	ldr	r2, [sp, #16]
 8012c18:	6921      	ldr	r1, [r4, #16]
 8012c1a:	f7fa fe1a 	bl	800d852 <memcpy>
 8012c1e:	89a2      	ldrh	r2, [r4, #12]
 8012c20:	4b1e      	ldr	r3, [pc, #120]	; (8012c9c <__ssprint_r+0x104>)
 8012c22:	401a      	ands	r2, r3
 8012c24:	2380      	movs	r3, #128	; 0x80
 8012c26:	4313      	orrs	r3, r2
 8012c28:	81a3      	strh	r3, [r4, #12]
 8012c2a:	9b04      	ldr	r3, [sp, #16]
 8012c2c:	6126      	str	r6, [r4, #16]
 8012c2e:	18f6      	adds	r6, r6, r3
 8012c30:	6026      	str	r6, [r4, #0]
 8012c32:	6165      	str	r5, [r4, #20]
 8012c34:	9e01      	ldr	r6, [sp, #4]
 8012c36:	1aed      	subs	r5, r5, r3
 8012c38:	60a5      	str	r5, [r4, #8]
 8012c3a:	9b01      	ldr	r3, [sp, #4]
 8012c3c:	429e      	cmp	r6, r3
 8012c3e:	d900      	bls.n	8012c42 <__ssprint_r+0xaa>
 8012c40:	001e      	movs	r6, r3
 8012c42:	0032      	movs	r2, r6
 8012c44:	9902      	ldr	r1, [sp, #8]
 8012c46:	6820      	ldr	r0, [r4, #0]
 8012c48:	f001 f86d 	bl	8013d26 <memmove>
 8012c4c:	9a01      	ldr	r2, [sp, #4]
 8012c4e:	68a3      	ldr	r3, [r4, #8]
 8012c50:	4694      	mov	ip, r2
 8012c52:	1b9b      	subs	r3, r3, r6
 8012c54:	60a3      	str	r3, [r4, #8]
 8012c56:	6823      	ldr	r3, [r4, #0]
 8012c58:	199b      	adds	r3, r3, r6
 8012c5a:	6023      	str	r3, [r4, #0]
 8012c5c:	9b02      	ldr	r3, [sp, #8]
 8012c5e:	4463      	add	r3, ip
 8012c60:	9302      	str	r3, [sp, #8]
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	1a9b      	subs	r3, r3, r2
 8012c66:	60bb      	str	r3, [r7, #8]
 8012c68:	d0a3      	beq.n	8012bb2 <__ssprint_r+0x1a>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	9301      	str	r3, [sp, #4]
 8012c6e:	e7ae      	b.n	8012bce <__ssprint_r+0x36>
 8012c70:	002a      	movs	r2, r5
 8012c72:	9805      	ldr	r0, [sp, #20]
 8012c74:	f7ff fc46 	bl	8012504 <_realloc_r>
 8012c78:	1e06      	subs	r6, r0, #0
 8012c7a:	d1d6      	bne.n	8012c2a <__ssprint_r+0x92>
 8012c7c:	6921      	ldr	r1, [r4, #16]
 8012c7e:	9805      	ldr	r0, [sp, #20]
 8012c80:	f7fa fe62 	bl	800d948 <_free_r>
 8012c84:	230c      	movs	r3, #12
 8012c86:	9a05      	ldr	r2, [sp, #20]
 8012c88:	2001      	movs	r0, #1
 8012c8a:	6013      	str	r3, [r2, #0]
 8012c8c:	89a2      	ldrh	r2, [r4, #12]
 8012c8e:	3334      	adds	r3, #52	; 0x34
 8012c90:	4313      	orrs	r3, r2
 8012c92:	81a3      	strh	r3, [r4, #12]
 8012c94:	2300      	movs	r3, #0
 8012c96:	4240      	negs	r0, r0
 8012c98:	60bb      	str	r3, [r7, #8]
 8012c9a:	e78b      	b.n	8012bb4 <__ssprint_r+0x1c>
 8012c9c:	fffffb7f 	.word	0xfffffb7f

08012ca0 <_sungetc_r>:
 8012ca0:	b570      	push	{r4, r5, r6, lr}
 8012ca2:	0014      	movs	r4, r2
 8012ca4:	1c4b      	adds	r3, r1, #1
 8012ca6:	d103      	bne.n	8012cb0 <_sungetc_r+0x10>
 8012ca8:	2501      	movs	r5, #1
 8012caa:	426d      	negs	r5, r5
 8012cac:	0028      	movs	r0, r5
 8012cae:	bd70      	pop	{r4, r5, r6, pc}
 8012cb0:	8993      	ldrh	r3, [r2, #12]
 8012cb2:	2220      	movs	r2, #32
 8012cb4:	4393      	bics	r3, r2
 8012cb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012cb8:	81a3      	strh	r3, [r4, #12]
 8012cba:	b2ce      	uxtb	r6, r1
 8012cbc:	6863      	ldr	r3, [r4, #4]
 8012cbe:	b2cd      	uxtb	r5, r1
 8012cc0:	2a00      	cmp	r2, #0
 8012cc2:	d010      	beq.n	8012ce6 <_sungetc_r+0x46>
 8012cc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	dd07      	ble.n	8012cda <_sungetc_r+0x3a>
 8012cca:	6823      	ldr	r3, [r4, #0]
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	6023      	str	r3, [r4, #0]
 8012cd0:	701e      	strb	r6, [r3, #0]
 8012cd2:	6863      	ldr	r3, [r4, #4]
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	6063      	str	r3, [r4, #4]
 8012cd8:	e7e8      	b.n	8012cac <_sungetc_r+0xc>
 8012cda:	0021      	movs	r1, r4
 8012cdc:	f000 ff1a 	bl	8013b14 <__submore>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d0f2      	beq.n	8012cca <_sungetc_r+0x2a>
 8012ce4:	e7e0      	b.n	8012ca8 <_sungetc_r+0x8>
 8012ce6:	6921      	ldr	r1, [r4, #16]
 8012ce8:	6822      	ldr	r2, [r4, #0]
 8012cea:	2900      	cmp	r1, #0
 8012cec:	d007      	beq.n	8012cfe <_sungetc_r+0x5e>
 8012cee:	4291      	cmp	r1, r2
 8012cf0:	d205      	bcs.n	8012cfe <_sungetc_r+0x5e>
 8012cf2:	1e51      	subs	r1, r2, #1
 8012cf4:	7808      	ldrb	r0, [r1, #0]
 8012cf6:	42a8      	cmp	r0, r5
 8012cf8:	d101      	bne.n	8012cfe <_sungetc_r+0x5e>
 8012cfa:	6021      	str	r1, [r4, #0]
 8012cfc:	e7ea      	b.n	8012cd4 <_sungetc_r+0x34>
 8012cfe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012d00:	0023      	movs	r3, r4
 8012d02:	3340      	adds	r3, #64	; 0x40
 8012d04:	6323      	str	r3, [r4, #48]	; 0x30
 8012d06:	2303      	movs	r3, #3
 8012d08:	6363      	str	r3, [r4, #52]	; 0x34
 8012d0a:	0023      	movs	r3, r4
 8012d0c:	3342      	adds	r3, #66	; 0x42
 8012d0e:	63a2      	str	r2, [r4, #56]	; 0x38
 8012d10:	701e      	strb	r6, [r3, #0]
 8012d12:	6023      	str	r3, [r4, #0]
 8012d14:	2301      	movs	r3, #1
 8012d16:	e7de      	b.n	8012cd6 <_sungetc_r+0x36>

08012d18 <__ssrefill_r>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	000c      	movs	r4, r1
 8012d1c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012d1e:	2900      	cmp	r1, #0
 8012d20:	d00e      	beq.n	8012d40 <__ssrefill_r+0x28>
 8012d22:	0023      	movs	r3, r4
 8012d24:	3340      	adds	r3, #64	; 0x40
 8012d26:	4299      	cmp	r1, r3
 8012d28:	d001      	beq.n	8012d2e <__ssrefill_r+0x16>
 8012d2a:	f7fa fe0d 	bl	800d948 <_free_r>
 8012d2e:	2000      	movs	r0, #0
 8012d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012d32:	6320      	str	r0, [r4, #48]	; 0x30
 8012d34:	6063      	str	r3, [r4, #4]
 8012d36:	4283      	cmp	r3, r0
 8012d38:	d002      	beq.n	8012d40 <__ssrefill_r+0x28>
 8012d3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012d3c:	6023      	str	r3, [r4, #0]
 8012d3e:	bd10      	pop	{r4, pc}
 8012d40:	6923      	ldr	r3, [r4, #16]
 8012d42:	2001      	movs	r0, #1
 8012d44:	6023      	str	r3, [r4, #0]
 8012d46:	2300      	movs	r3, #0
 8012d48:	89a2      	ldrh	r2, [r4, #12]
 8012d4a:	6063      	str	r3, [r4, #4]
 8012d4c:	3320      	adds	r3, #32
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	4240      	negs	r0, r0
 8012d54:	e7f3      	b.n	8012d3e <__ssrefill_r+0x26>

08012d56 <_sfread_r>:
 8012d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d58:	0014      	movs	r4, r2
 8012d5a:	435c      	muls	r4, r3
 8012d5c:	b087      	sub	sp, #28
 8012d5e:	1e26      	subs	r6, r4, #0
 8012d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d62:	9005      	str	r0, [sp, #20]
 8012d64:	9101      	str	r1, [sp, #4]
 8012d66:	9202      	str	r2, [sp, #8]
 8012d68:	9303      	str	r3, [sp, #12]
 8012d6a:	d11e      	bne.n	8012daa <_sfread_r+0x54>
 8012d6c:	0020      	movs	r0, r4
 8012d6e:	b007      	add	sp, #28
 8012d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d72:	003a      	movs	r2, r7
 8012d74:	9801      	ldr	r0, [sp, #4]
 8012d76:	f7fa fd6c 	bl	800d852 <memcpy>
 8012d7a:	682b      	ldr	r3, [r5, #0]
 8012d7c:	0029      	movs	r1, r5
 8012d7e:	19db      	adds	r3, r3, r7
 8012d80:	602b      	str	r3, [r5, #0]
 8012d82:	2300      	movs	r3, #0
 8012d84:	606b      	str	r3, [r5, #4]
 8012d86:	9b01      	ldr	r3, [sp, #4]
 8012d88:	9805      	ldr	r0, [sp, #20]
 8012d8a:	19db      	adds	r3, r3, r7
 8012d8c:	9301      	str	r3, [sp, #4]
 8012d8e:	1bf3      	subs	r3, r6, r7
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	f7ff ffc1 	bl	8012d18 <__ssrefill_r>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d006      	beq.n	8012da8 <_sfread_r+0x52>
 8012d9a:	193c      	adds	r4, r7, r4
 8012d9c:	1ba0      	subs	r0, r4, r6
 8012d9e:	9902      	ldr	r1, [sp, #8]
 8012da0:	f7ed f9cc 	bl	800013c <__udivsi3>
 8012da4:	0004      	movs	r4, r0
 8012da6:	e7e1      	b.n	8012d6c <_sfread_r+0x16>
 8012da8:	9e04      	ldr	r6, [sp, #16]
 8012daa:	686f      	ldr	r7, [r5, #4]
 8012dac:	6829      	ldr	r1, [r5, #0]
 8012dae:	42b7      	cmp	r7, r6
 8012db0:	d3df      	bcc.n	8012d72 <_sfread_r+0x1c>
 8012db2:	0032      	movs	r2, r6
 8012db4:	9801      	ldr	r0, [sp, #4]
 8012db6:	f7fa fd4c 	bl	800d852 <memcpy>
 8012dba:	686b      	ldr	r3, [r5, #4]
 8012dbc:	9c03      	ldr	r4, [sp, #12]
 8012dbe:	1b9b      	subs	r3, r3, r6
 8012dc0:	606b      	str	r3, [r5, #4]
 8012dc2:	682b      	ldr	r3, [r5, #0]
 8012dc4:	199b      	adds	r3, r3, r6
 8012dc6:	602b      	str	r3, [r5, #0]
 8012dc8:	e7d0      	b.n	8012d6c <_sfread_r+0x16>

08012dca <__sprint_r>:
 8012dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dcc:	6893      	ldr	r3, [r2, #8]
 8012dce:	b085      	sub	sp, #20
 8012dd0:	9001      	str	r0, [sp, #4]
 8012dd2:	000d      	movs	r5, r1
 8012dd4:	0014      	movs	r4, r2
 8012dd6:	1e18      	subs	r0, r3, #0
 8012dd8:	d018      	beq.n	8012e0c <__sprint_r+0x42>
 8012dda:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012ddc:	049b      	lsls	r3, r3, #18
 8012dde:	d524      	bpl.n	8012e2a <__sprint_r+0x60>
 8012de0:	6817      	ldr	r7, [r2, #0]
 8012de2:	2600      	movs	r6, #0
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	9302      	str	r3, [sp, #8]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	9300      	str	r3, [sp, #0]
 8012dec:	089b      	lsrs	r3, r3, #2
 8012dee:	9303      	str	r3, [sp, #12]
 8012df0:	9b03      	ldr	r3, [sp, #12]
 8012df2:	42b3      	cmp	r3, r6
 8012df4:	dc0e      	bgt.n	8012e14 <__sprint_r+0x4a>
 8012df6:	2203      	movs	r2, #3
 8012df8:	9b00      	ldr	r3, [sp, #0]
 8012dfa:	68a0      	ldr	r0, [r4, #8]
 8012dfc:	4393      	bics	r3, r2
 8012dfe:	1ac0      	subs	r0, r0, r3
 8012e00:	60a0      	str	r0, [r4, #8]
 8012e02:	3708      	adds	r7, #8
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d1ec      	bne.n	8012de2 <__sprint_r+0x18>
 8012e08:	2300      	movs	r3, #0
 8012e0a:	60a3      	str	r3, [r4, #8]
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	6063      	str	r3, [r4, #4]
 8012e10:	b005      	add	sp, #20
 8012e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e14:	9902      	ldr	r1, [sp, #8]
 8012e16:	00b3      	lsls	r3, r6, #2
 8012e18:	58c9      	ldr	r1, [r1, r3]
 8012e1a:	002a      	movs	r2, r5
 8012e1c:	9801      	ldr	r0, [sp, #4]
 8012e1e:	f000 ff59 	bl	8013cd4 <_fputwc_r>
 8012e22:	1c43      	adds	r3, r0, #1
 8012e24:	d0f0      	beq.n	8012e08 <__sprint_r+0x3e>
 8012e26:	3601      	adds	r6, #1
 8012e28:	e7e2      	b.n	8012df0 <__sprint_r+0x26>
 8012e2a:	9801      	ldr	r0, [sp, #4]
 8012e2c:	f000 fd14 	bl	8013858 <__sfvwrite_r>
 8012e30:	e7ea      	b.n	8012e08 <__sprint_r+0x3e>
	...

08012e34 <_vfiprintf_r>:
 8012e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e36:	b0c1      	sub	sp, #260	; 0x104
 8012e38:	001c      	movs	r4, r3
 8012e3a:	001f      	movs	r7, r3
 8012e3c:	9006      	str	r0, [sp, #24]
 8012e3e:	9103      	str	r1, [sp, #12]
 8012e40:	9207      	str	r2, [sp, #28]
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d004      	beq.n	8012e50 <_vfiprintf_r+0x1c>
 8012e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d101      	bne.n	8012e50 <_vfiprintf_r+0x1c>
 8012e4c:	f7fa fad6 	bl	800d3fc <__sinit>
 8012e50:	9b03      	ldr	r3, [sp, #12]
 8012e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e54:	07db      	lsls	r3, r3, #31
 8012e56:	d407      	bmi.n	8012e68 <_vfiprintf_r+0x34>
 8012e58:	9b03      	ldr	r3, [sp, #12]
 8012e5a:	899b      	ldrh	r3, [r3, #12]
 8012e5c:	059b      	lsls	r3, r3, #22
 8012e5e:	d403      	bmi.n	8012e68 <_vfiprintf_r+0x34>
 8012e60:	9b03      	ldr	r3, [sp, #12]
 8012e62:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012e64:	f7fa fce8 	bl	800d838 <__retarget_lock_acquire_recursive>
 8012e68:	9b03      	ldr	r3, [sp, #12]
 8012e6a:	220c      	movs	r2, #12
 8012e6c:	5e9a      	ldrsh	r2, [r3, r2]
 8012e6e:	2380      	movs	r3, #128	; 0x80
 8012e70:	019b      	lsls	r3, r3, #6
 8012e72:	421a      	tst	r2, r3
 8012e74:	d107      	bne.n	8012e86 <_vfiprintf_r+0x52>
 8012e76:	4313      	orrs	r3, r2
 8012e78:	9a03      	ldr	r2, [sp, #12]
 8012e7a:	8193      	strh	r3, [r2, #12]
 8012e7c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012e7e:	4aa3      	ldr	r2, [pc, #652]	; (801310c <_vfiprintf_r+0x2d8>)
 8012e80:	4013      	ands	r3, r2
 8012e82:	9a03      	ldr	r2, [sp, #12]
 8012e84:	6653      	str	r3, [r2, #100]	; 0x64
 8012e86:	9b03      	ldr	r3, [sp, #12]
 8012e88:	899b      	ldrh	r3, [r3, #12]
 8012e8a:	071b      	lsls	r3, r3, #28
 8012e8c:	d503      	bpl.n	8012e96 <_vfiprintf_r+0x62>
 8012e8e:	9b03      	ldr	r3, [sp, #12]
 8012e90:	691b      	ldr	r3, [r3, #16]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d118      	bne.n	8012ec8 <_vfiprintf_r+0x94>
 8012e96:	9903      	ldr	r1, [sp, #12]
 8012e98:	9806      	ldr	r0, [sp, #24]
 8012e9a:	f000 fe79 	bl	8013b90 <__swsetup_r>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d012      	beq.n	8012ec8 <_vfiprintf_r+0x94>
 8012ea2:	9b03      	ldr	r3, [sp, #12]
 8012ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ea6:	07db      	lsls	r3, r3, #31
 8012ea8:	d505      	bpl.n	8012eb6 <_vfiprintf_r+0x82>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	425b      	negs	r3, r3
 8012eae:	9308      	str	r3, [sp, #32]
 8012eb0:	9808      	ldr	r0, [sp, #32]
 8012eb2:	b041      	add	sp, #260	; 0x104
 8012eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb6:	9b03      	ldr	r3, [sp, #12]
 8012eb8:	899b      	ldrh	r3, [r3, #12]
 8012eba:	059b      	lsls	r3, r3, #22
 8012ebc:	d4f5      	bmi.n	8012eaa <_vfiprintf_r+0x76>
 8012ebe:	9b03      	ldr	r3, [sp, #12]
 8012ec0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012ec2:	f7fa fcba 	bl	800d83a <__retarget_lock_release_recursive>
 8012ec6:	e7f0      	b.n	8012eaa <_vfiprintf_r+0x76>
 8012ec8:	221a      	movs	r2, #26
 8012eca:	9b03      	ldr	r3, [sp, #12]
 8012ecc:	899b      	ldrh	r3, [r3, #12]
 8012ece:	401a      	ands	r2, r3
 8012ed0:	2a0a      	cmp	r2, #10
 8012ed2:	d116      	bne.n	8012f02 <_vfiprintf_r+0xce>
 8012ed4:	9a03      	ldr	r2, [sp, #12]
 8012ed6:	210e      	movs	r1, #14
 8012ed8:	5e52      	ldrsh	r2, [r2, r1]
 8012eda:	2a00      	cmp	r2, #0
 8012edc:	db11      	blt.n	8012f02 <_vfiprintf_r+0xce>
 8012ede:	9a03      	ldr	r2, [sp, #12]
 8012ee0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012ee2:	07d2      	lsls	r2, r2, #31
 8012ee4:	d405      	bmi.n	8012ef2 <_vfiprintf_r+0xbe>
 8012ee6:	059b      	lsls	r3, r3, #22
 8012ee8:	d403      	bmi.n	8012ef2 <_vfiprintf_r+0xbe>
 8012eea:	9b03      	ldr	r3, [sp, #12]
 8012eec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012eee:	f7fa fca4 	bl	800d83a <__retarget_lock_release_recursive>
 8012ef2:	0023      	movs	r3, r4
 8012ef4:	9a07      	ldr	r2, [sp, #28]
 8012ef6:	9903      	ldr	r1, [sp, #12]
 8012ef8:	9806      	ldr	r0, [sp, #24]
 8012efa:	f000 fc69 	bl	80137d0 <__sbprintf>
 8012efe:	9008      	str	r0, [sp, #32]
 8012f00:	e7d6      	b.n	8012eb0 <_vfiprintf_r+0x7c>
 8012f02:	2300      	movs	r3, #0
 8012f04:	ad17      	add	r5, sp, #92	; 0x5c
 8012f06:	9514      	str	r5, [sp, #80]	; 0x50
 8012f08:	9316      	str	r3, [sp, #88]	; 0x58
 8012f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8012f0c:	930c      	str	r3, [sp, #48]	; 0x30
 8012f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8012f10:	930e      	str	r3, [sp, #56]	; 0x38
 8012f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f14:	9308      	str	r3, [sp, #32]
 8012f16:	9c07      	ldr	r4, [sp, #28]
 8012f18:	7823      	ldrb	r3, [r4, #0]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d002      	beq.n	8012f24 <_vfiprintf_r+0xf0>
 8012f1e:	2b25      	cmp	r3, #37	; 0x25
 8012f20:	d000      	beq.n	8012f24 <_vfiprintf_r+0xf0>
 8012f22:	e08d      	b.n	8013040 <_vfiprintf_r+0x20c>
 8012f24:	9b07      	ldr	r3, [sp, #28]
 8012f26:	1ae6      	subs	r6, r4, r3
 8012f28:	429c      	cmp	r4, r3
 8012f2a:	d016      	beq.n	8012f5a <_vfiprintf_r+0x126>
 8012f2c:	602b      	str	r3, [r5, #0]
 8012f2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012f30:	606e      	str	r6, [r5, #4]
 8012f32:	199b      	adds	r3, r3, r6
 8012f34:	9316      	str	r3, [sp, #88]	; 0x58
 8012f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f38:	3508      	adds	r5, #8
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	9315      	str	r3, [sp, #84]	; 0x54
 8012f3e:	2b07      	cmp	r3, #7
 8012f40:	dd08      	ble.n	8012f54 <_vfiprintf_r+0x120>
 8012f42:	9903      	ldr	r1, [sp, #12]
 8012f44:	9806      	ldr	r0, [sp, #24]
 8012f46:	aa14      	add	r2, sp, #80	; 0x50
 8012f48:	f7ff ff3f 	bl	8012dca <__sprint_r>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d000      	beq.n	8012f52 <_vfiprintf_r+0x11e>
 8012f50:	e3d9      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8012f52:	ad17      	add	r5, sp, #92	; 0x5c
 8012f54:	9b08      	ldr	r3, [sp, #32]
 8012f56:	199b      	adds	r3, r3, r6
 8012f58:	9308      	str	r3, [sp, #32]
 8012f5a:	7823      	ldrb	r3, [r4, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d101      	bne.n	8012f64 <_vfiprintf_r+0x130>
 8012f60:	f000 fbf6 	bl	8013750 <_vfiprintf_r+0x91c>
 8012f64:	2200      	movs	r2, #0
 8012f66:	a912      	add	r1, sp, #72	; 0x48
 8012f68:	70ca      	strb	r2, [r1, #3]
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	1c63      	adds	r3, r4, #1
 8012f6e:	0014      	movs	r4, r2
 8012f70:	4249      	negs	r1, r1
 8012f72:	9105      	str	r1, [sp, #20]
 8012f74:	9209      	str	r2, [sp, #36]	; 0x24
 8012f76:	1c5a      	adds	r2, r3, #1
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	9207      	str	r2, [sp, #28]
 8012f7c:	0018      	movs	r0, r3
 8012f7e:	3820      	subs	r0, #32
 8012f80:	285a      	cmp	r0, #90	; 0x5a
 8012f82:	d900      	bls.n	8012f86 <_vfiprintf_r+0x152>
 8012f84:	e362      	b.n	801364c <_vfiprintf_r+0x818>
 8012f86:	f7ed f8cf 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012f8a:	0078      	.short	0x0078
 8012f8c:	03610361 	.word	0x03610361
 8012f90:	03610081 	.word	0x03610081
 8012f94:	03610361 	.word	0x03610361
 8012f98:	0361005d 	.word	0x0361005d
 8012f9c:	00830361 	.word	0x00830361
 8012fa0:	0361008b 	.word	0x0361008b
 8012fa4:	008f0089 	.word	0x008f0089
 8012fa8:	00ad0361 	.word	0x00ad0361
 8012fac:	00af00af 	.word	0x00af00af
 8012fb0:	00af00af 	.word	0x00af00af
 8012fb4:	00af00af 	.word	0x00af00af
 8012fb8:	00af00af 	.word	0x00af00af
 8012fbc:	036100af 	.word	0x036100af
 8012fc0:	03610361 	.word	0x03610361
 8012fc4:	03610361 	.word	0x03610361
 8012fc8:	03610361 	.word	0x03610361
 8012fcc:	03610361 	.word	0x03610361
 8012fd0:	00e600da 	.word	0x00e600da
 8012fd4:	03610361 	.word	0x03610361
 8012fd8:	03610361 	.word	0x03610361
 8012fdc:	03610361 	.word	0x03610361
 8012fe0:	03610361 	.word	0x03610361
 8012fe4:	03610361 	.word	0x03610361
 8012fe8:	03610143 	.word	0x03610143
 8012fec:	03610361 	.word	0x03610361
 8012ff0:	03610182 	.word	0x03610182
 8012ff4:	0361027c 	.word	0x0361027c
 8012ff8:	02ae0361 	.word	0x02ae0361
 8012ffc:	03610361 	.word	0x03610361
 8013000:	03610361 	.word	0x03610361
 8013004:	03610361 	.word	0x03610361
 8013008:	03610361 	.word	0x03610361
 801300c:	03610361 	.word	0x03610361
 8013010:	00e800da 	.word	0x00e800da
 8013014:	03610361 	.word	0x03610361
 8013018:	00c30361 	.word	0x00c30361
 801301c:	00d600e8 	.word	0x00d600e8
 8013020:	00cf0361 	.word	0x00cf0361
 8013024:	01260361 	.word	0x01260361
 8013028:	01740145 	.word	0x01740145
 801302c:	036100d6 	.word	0x036100d6
 8013030:	007f0182 	.word	0x007f0182
 8013034:	0361027e 	.word	0x0361027e
 8013038:	02cd0361 	.word	0x02cd0361
 801303c:	007f0361 	.word	0x007f0361
 8013040:	3401      	adds	r4, #1
 8013042:	e769      	b.n	8012f18 <_vfiprintf_r+0xe4>
 8013044:	9806      	ldr	r0, [sp, #24]
 8013046:	f7fe facd 	bl	80115e4 <_localeconv_r>
 801304a:	6843      	ldr	r3, [r0, #4]
 801304c:	0018      	movs	r0, r3
 801304e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013050:	f7ed f858 	bl	8000104 <strlen>
 8013054:	900e      	str	r0, [sp, #56]	; 0x38
 8013056:	9806      	ldr	r0, [sp, #24]
 8013058:	f7fe fac4 	bl	80115e4 <_localeconv_r>
 801305c:	6883      	ldr	r3, [r0, #8]
 801305e:	930d      	str	r3, [sp, #52]	; 0x34
 8013060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013062:	2b00      	cmp	r3, #0
 8013064:	d010      	beq.n	8013088 <_vfiprintf_r+0x254>
 8013066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00d      	beq.n	8013088 <_vfiprintf_r+0x254>
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d00a      	beq.n	8013088 <_vfiprintf_r+0x254>
 8013072:	2380      	movs	r3, #128	; 0x80
 8013074:	00db      	lsls	r3, r3, #3
 8013076:	431c      	orrs	r4, r3
 8013078:	e006      	b.n	8013088 <_vfiprintf_r+0x254>
 801307a:	ab12      	add	r3, sp, #72	; 0x48
 801307c:	78da      	ldrb	r2, [r3, #3]
 801307e:	3303      	adds	r3, #3
 8013080:	2a00      	cmp	r2, #0
 8013082:	d101      	bne.n	8013088 <_vfiprintf_r+0x254>
 8013084:	3220      	adds	r2, #32
 8013086:	701a      	strb	r2, [r3, #0]
 8013088:	9b07      	ldr	r3, [sp, #28]
 801308a:	e774      	b.n	8012f76 <_vfiprintf_r+0x142>
 801308c:	2301      	movs	r3, #1
 801308e:	e7f2      	b.n	8013076 <_vfiprintf_r+0x242>
 8013090:	cf08      	ldmia	r7!, {r3}
 8013092:	9309      	str	r3, [sp, #36]	; 0x24
 8013094:	2b00      	cmp	r3, #0
 8013096:	daf7      	bge.n	8013088 <_vfiprintf_r+0x254>
 8013098:	425b      	negs	r3, r3
 801309a:	9309      	str	r3, [sp, #36]	; 0x24
 801309c:	2304      	movs	r3, #4
 801309e:	e7ea      	b.n	8013076 <_vfiprintf_r+0x242>
 80130a0:	222b      	movs	r2, #43	; 0x2b
 80130a2:	ab12      	add	r3, sp, #72	; 0x48
 80130a4:	70da      	strb	r2, [r3, #3]
 80130a6:	e7ef      	b.n	8013088 <_vfiprintf_r+0x254>
 80130a8:	9b07      	ldr	r3, [sp, #28]
 80130aa:	1c5a      	adds	r2, r3, #1
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	2b2a      	cmp	r3, #42	; 0x2a
 80130b0:	d00f      	beq.n	80130d2 <_vfiprintf_r+0x29e>
 80130b2:	2100      	movs	r1, #0
 80130b4:	9105      	str	r1, [sp, #20]
 80130b6:	0019      	movs	r1, r3
 80130b8:	3930      	subs	r1, #48	; 0x30
 80130ba:	9207      	str	r2, [sp, #28]
 80130bc:	2909      	cmp	r1, #9
 80130be:	d900      	bls.n	80130c2 <_vfiprintf_r+0x28e>
 80130c0:	e75c      	b.n	8012f7c <_vfiprintf_r+0x148>
 80130c2:	200a      	movs	r0, #10
 80130c4:	9b05      	ldr	r3, [sp, #20]
 80130c6:	4343      	muls	r3, r0
 80130c8:	185b      	adds	r3, r3, r1
 80130ca:	9305      	str	r3, [sp, #20]
 80130cc:	7813      	ldrb	r3, [r2, #0]
 80130ce:	3201      	adds	r2, #1
 80130d0:	e7f1      	b.n	80130b6 <_vfiprintf_r+0x282>
 80130d2:	cf08      	ldmia	r7!, {r3}
 80130d4:	9305      	str	r3, [sp, #20]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	da02      	bge.n	80130e0 <_vfiprintf_r+0x2ac>
 80130da:	2301      	movs	r3, #1
 80130dc:	425b      	negs	r3, r3
 80130de:	9305      	str	r3, [sp, #20]
 80130e0:	9207      	str	r2, [sp, #28]
 80130e2:	e7d1      	b.n	8013088 <_vfiprintf_r+0x254>
 80130e4:	2380      	movs	r3, #128	; 0x80
 80130e6:	e7c6      	b.n	8013076 <_vfiprintf_r+0x242>
 80130e8:	2100      	movs	r1, #0
 80130ea:	9a07      	ldr	r2, [sp, #28]
 80130ec:	9109      	str	r1, [sp, #36]	; 0x24
 80130ee:	200a      	movs	r0, #10
 80130f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130f2:	3b30      	subs	r3, #48	; 0x30
 80130f4:	4341      	muls	r1, r0
 80130f6:	185b      	adds	r3, r3, r1
 80130f8:	9309      	str	r3, [sp, #36]	; 0x24
 80130fa:	0013      	movs	r3, r2
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	3201      	adds	r2, #1
 8013100:	0019      	movs	r1, r3
 8013102:	3930      	subs	r1, #48	; 0x30
 8013104:	9207      	str	r2, [sp, #28]
 8013106:	2909      	cmp	r1, #9
 8013108:	d9f1      	bls.n	80130ee <_vfiprintf_r+0x2ba>
 801310a:	e737      	b.n	8012f7c <_vfiprintf_r+0x148>
 801310c:	ffffdfff 	.word	0xffffdfff
 8013110:	9b07      	ldr	r3, [sp, #28]
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	2b68      	cmp	r3, #104	; 0x68
 8013116:	d105      	bne.n	8013124 <_vfiprintf_r+0x2f0>
 8013118:	9b07      	ldr	r3, [sp, #28]
 801311a:	3301      	adds	r3, #1
 801311c:	9307      	str	r3, [sp, #28]
 801311e:	2380      	movs	r3, #128	; 0x80
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	e7a8      	b.n	8013076 <_vfiprintf_r+0x242>
 8013124:	2340      	movs	r3, #64	; 0x40
 8013126:	e7a6      	b.n	8013076 <_vfiprintf_r+0x242>
 8013128:	9b07      	ldr	r3, [sp, #28]
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	2b6c      	cmp	r3, #108	; 0x6c
 801312e:	d104      	bne.n	801313a <_vfiprintf_r+0x306>
 8013130:	9b07      	ldr	r3, [sp, #28]
 8013132:	3301      	adds	r3, #1
 8013134:	9307      	str	r3, [sp, #28]
 8013136:	2320      	movs	r3, #32
 8013138:	e79d      	b.n	8013076 <_vfiprintf_r+0x242>
 801313a:	2310      	movs	r3, #16
 801313c:	e79b      	b.n	8013076 <_vfiprintf_r+0x242>
 801313e:	003a      	movs	r2, r7
 8013140:	ca08      	ldmia	r2!, {r3}
 8013142:	ae27      	add	r6, sp, #156	; 0x9c
 8013144:	7033      	strb	r3, [r6, #0]
 8013146:	2300      	movs	r3, #0
 8013148:	9204      	str	r2, [sp, #16]
 801314a:	aa12      	add	r2, sp, #72	; 0x48
 801314c:	70d3      	strb	r3, [r2, #3]
 801314e:	2201      	movs	r2, #1
 8013150:	930b      	str	r3, [sp, #44]	; 0x2c
 8013152:	9205      	str	r2, [sp, #20]
 8013154:	e0b0      	b.n	80132b8 <_vfiprintf_r+0x484>
 8013156:	2310      	movs	r3, #16
 8013158:	431c      	orrs	r4, r3
 801315a:	06a3      	lsls	r3, r4, #26
 801315c:	d52a      	bpl.n	80131b4 <_vfiprintf_r+0x380>
 801315e:	2307      	movs	r3, #7
 8013160:	3707      	adds	r7, #7
 8013162:	439f      	bics	r7, r3
 8013164:	0039      	movs	r1, r7
 8013166:	c90c      	ldmia	r1!, {r2, r3}
 8013168:	9200      	str	r2, [sp, #0]
 801316a:	9301      	str	r3, [sp, #4]
 801316c:	9104      	str	r1, [sp, #16]
 801316e:	9a01      	ldr	r2, [sp, #4]
 8013170:	2301      	movs	r3, #1
 8013172:	2a00      	cmp	r2, #0
 8013174:	da09      	bge.n	801318a <_vfiprintf_r+0x356>
 8013176:	9e00      	ldr	r6, [sp, #0]
 8013178:	9f01      	ldr	r7, [sp, #4]
 801317a:	2200      	movs	r2, #0
 801317c:	4271      	negs	r1, r6
 801317e:	41ba      	sbcs	r2, r7
 8013180:	9100      	str	r1, [sp, #0]
 8013182:	9201      	str	r2, [sp, #4]
 8013184:	212d      	movs	r1, #45	; 0x2d
 8013186:	aa12      	add	r2, sp, #72	; 0x48
 8013188:	70d1      	strb	r1, [r2, #3]
 801318a:	9901      	ldr	r1, [sp, #4]
 801318c:	9a00      	ldr	r2, [sp, #0]
 801318e:	430a      	orrs	r2, r1
 8013190:	9905      	ldr	r1, [sp, #20]
 8013192:	3101      	adds	r1, #1
 8013194:	d100      	bne.n	8013198 <_vfiprintf_r+0x364>
 8013196:	e2e9      	b.n	801376c <_vfiprintf_r+0x938>
 8013198:	2180      	movs	r1, #128	; 0x80
 801319a:	0027      	movs	r7, r4
 801319c:	438f      	bics	r7, r1
 801319e:	2a00      	cmp	r2, #0
 80131a0:	d000      	beq.n	80131a4 <_vfiprintf_r+0x370>
 80131a2:	e2e7      	b.n	8013774 <_vfiprintf_r+0x940>
 80131a4:	9a05      	ldr	r2, [sp, #20]
 80131a6:	2a00      	cmp	r2, #0
 80131a8:	d100      	bne.n	80131ac <_vfiprintf_r+0x378>
 80131aa:	e243      	b.n	8013634 <_vfiprintf_r+0x800>
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d000      	beq.n	80131b2 <_vfiprintf_r+0x37e>
 80131b0:	e2e3      	b.n	801377a <_vfiprintf_r+0x946>
 80131b2:	e1e7      	b.n	8013584 <_vfiprintf_r+0x750>
 80131b4:	003a      	movs	r2, r7
 80131b6:	ca08      	ldmia	r2!, {r3}
 80131b8:	9204      	str	r2, [sp, #16]
 80131ba:	06e2      	lsls	r2, r4, #27
 80131bc:	d503      	bpl.n	80131c6 <_vfiprintf_r+0x392>
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	17db      	asrs	r3, r3, #31
 80131c2:	9301      	str	r3, [sp, #4]
 80131c4:	e7d3      	b.n	801316e <_vfiprintf_r+0x33a>
 80131c6:	0662      	lsls	r2, r4, #25
 80131c8:	d501      	bpl.n	80131ce <_vfiprintf_r+0x39a>
 80131ca:	b21b      	sxth	r3, r3
 80131cc:	e7f7      	b.n	80131be <_vfiprintf_r+0x38a>
 80131ce:	05a2      	lsls	r2, r4, #22
 80131d0:	d5f5      	bpl.n	80131be <_vfiprintf_r+0x38a>
 80131d2:	b25b      	sxtb	r3, r3
 80131d4:	e7f3      	b.n	80131be <_vfiprintf_r+0x38a>
 80131d6:	1d3b      	adds	r3, r7, #4
 80131d8:	9304      	str	r3, [sp, #16]
 80131da:	06a3      	lsls	r3, r4, #26
 80131dc:	d506      	bpl.n	80131ec <_vfiprintf_r+0x3b8>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	9a08      	ldr	r2, [sp, #32]
 80131e2:	601a      	str	r2, [r3, #0]
 80131e4:	17d2      	asrs	r2, r2, #31
 80131e6:	605a      	str	r2, [r3, #4]
 80131e8:	9f04      	ldr	r7, [sp, #16]
 80131ea:	e694      	b.n	8012f16 <_vfiprintf_r+0xe2>
 80131ec:	06e3      	lsls	r3, r4, #27
 80131ee:	d503      	bpl.n	80131f8 <_vfiprintf_r+0x3c4>
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	9a08      	ldr	r2, [sp, #32]
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	e7f7      	b.n	80131e8 <_vfiprintf_r+0x3b4>
 80131f8:	0663      	lsls	r3, r4, #25
 80131fa:	d503      	bpl.n	8013204 <_vfiprintf_r+0x3d0>
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	9a08      	ldr	r2, [sp, #32]
 8013200:	801a      	strh	r2, [r3, #0]
 8013202:	e7f1      	b.n	80131e8 <_vfiprintf_r+0x3b4>
 8013204:	05a4      	lsls	r4, r4, #22
 8013206:	d5f3      	bpl.n	80131f0 <_vfiprintf_r+0x3bc>
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	9a08      	ldr	r2, [sp, #32]
 801320c:	701a      	strb	r2, [r3, #0]
 801320e:	e7eb      	b.n	80131e8 <_vfiprintf_r+0x3b4>
 8013210:	2310      	movs	r3, #16
 8013212:	431c      	orrs	r4, r3
 8013214:	2320      	movs	r3, #32
 8013216:	0020      	movs	r0, r4
 8013218:	4018      	ands	r0, r3
 801321a:	421c      	tst	r4, r3
 801321c:	d00d      	beq.n	801323a <_vfiprintf_r+0x406>
 801321e:	3b19      	subs	r3, #25
 8013220:	3707      	adds	r7, #7
 8013222:	439f      	bics	r7, r3
 8013224:	0039      	movs	r1, r7
 8013226:	c90c      	ldmia	r1!, {r2, r3}
 8013228:	9200      	str	r2, [sp, #0]
 801322a:	9301      	str	r3, [sp, #4]
 801322c:	9104      	str	r1, [sp, #16]
 801322e:	4bcc      	ldr	r3, [pc, #816]	; (8013560 <_vfiprintf_r+0x72c>)
 8013230:	401c      	ands	r4, r3
 8013232:	2300      	movs	r3, #0
 8013234:	2100      	movs	r1, #0
 8013236:	aa12      	add	r2, sp, #72	; 0x48
 8013238:	e7a6      	b.n	8013188 <_vfiprintf_r+0x354>
 801323a:	003a      	movs	r2, r7
 801323c:	ca08      	ldmia	r2!, {r3}
 801323e:	0021      	movs	r1, r4
 8013240:	9204      	str	r2, [sp, #16]
 8013242:	2210      	movs	r2, #16
 8013244:	4011      	ands	r1, r2
 8013246:	4214      	tst	r4, r2
 8013248:	d002      	beq.n	8013250 <_vfiprintf_r+0x41c>
 801324a:	9300      	str	r3, [sp, #0]
 801324c:	9001      	str	r0, [sp, #4]
 801324e:	e7ee      	b.n	801322e <_vfiprintf_r+0x3fa>
 8013250:	2240      	movs	r2, #64	; 0x40
 8013252:	0020      	movs	r0, r4
 8013254:	4010      	ands	r0, r2
 8013256:	4214      	tst	r4, r2
 8013258:	d003      	beq.n	8013262 <_vfiprintf_r+0x42e>
 801325a:	b29b      	uxth	r3, r3
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	9101      	str	r1, [sp, #4]
 8013260:	e7e5      	b.n	801322e <_vfiprintf_r+0x3fa>
 8013262:	2280      	movs	r2, #128	; 0x80
 8013264:	0021      	movs	r1, r4
 8013266:	0092      	lsls	r2, r2, #2
 8013268:	4011      	ands	r1, r2
 801326a:	4214      	tst	r4, r2
 801326c:	d0f6      	beq.n	801325c <_vfiprintf_r+0x428>
 801326e:	b2db      	uxtb	r3, r3
 8013270:	e7eb      	b.n	801324a <_vfiprintf_r+0x416>
 8013272:	003b      	movs	r3, r7
 8013274:	cb04      	ldmia	r3!, {r2}
 8013276:	49bb      	ldr	r1, [pc, #748]	; (8013564 <_vfiprintf_r+0x730>)
 8013278:	9304      	str	r3, [sp, #16]
 801327a:	2300      	movs	r3, #0
 801327c:	9200      	str	r2, [sp, #0]
 801327e:	aa13      	add	r2, sp, #76	; 0x4c
 8013280:	8011      	strh	r1, [r2, #0]
 8013282:	4ab9      	ldr	r2, [pc, #740]	; (8013568 <_vfiprintf_r+0x734>)
 8013284:	9301      	str	r3, [sp, #4]
 8013286:	3302      	adds	r3, #2
 8013288:	431c      	orrs	r4, r3
 801328a:	920c      	str	r2, [sp, #48]	; 0x30
 801328c:	e7d2      	b.n	8013234 <_vfiprintf_r+0x400>
 801328e:	003b      	movs	r3, r7
 8013290:	2700      	movs	r7, #0
 8013292:	cb40      	ldmia	r3!, {r6}
 8013294:	9304      	str	r3, [sp, #16]
 8013296:	ab12      	add	r3, sp, #72	; 0x48
 8013298:	70df      	strb	r7, [r3, #3]
 801329a:	9b05      	ldr	r3, [sp, #20]
 801329c:	3301      	adds	r3, #1
 801329e:	d100      	bne.n	80132a2 <_vfiprintf_r+0x46e>
 80132a0:	e0ea      	b.n	8013478 <_vfiprintf_r+0x644>
 80132a2:	0039      	movs	r1, r7
 80132a4:	0030      	movs	r0, r6
 80132a6:	9a05      	ldr	r2, [sp, #20]
 80132a8:	f7fe f9b4 	bl	8011614 <memchr>
 80132ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80132ae:	42b8      	cmp	r0, r7
 80132b0:	d002      	beq.n	80132b8 <_vfiprintf_r+0x484>
 80132b2:	1b83      	subs	r3, r0, r6
 80132b4:	9305      	str	r3, [sp, #20]
 80132b6:	970b      	str	r7, [sp, #44]	; 0x2c
 80132b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ba:	9a05      	ldr	r2, [sp, #20]
 80132bc:	930a      	str	r3, [sp, #40]	; 0x28
 80132be:	4293      	cmp	r3, r2
 80132c0:	da00      	bge.n	80132c4 <_vfiprintf_r+0x490>
 80132c2:	920a      	str	r2, [sp, #40]	; 0x28
 80132c4:	ab12      	add	r3, sp, #72	; 0x48
 80132c6:	3303      	adds	r3, #3
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	1e5a      	subs	r2, r3, #1
 80132cc:	4193      	sbcs	r3, r2
 80132ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132d0:	18d3      	adds	r3, r2, r3
 80132d2:	930a      	str	r3, [sp, #40]	; 0x28
 80132d4:	0022      	movs	r2, r4
 80132d6:	2302      	movs	r3, #2
 80132d8:	401a      	ands	r2, r3
 80132da:	9210      	str	r2, [sp, #64]	; 0x40
 80132dc:	421c      	tst	r4, r3
 80132de:	d002      	beq.n	80132e6 <_vfiprintf_r+0x4b2>
 80132e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132e2:	3302      	adds	r3, #2
 80132e4:	930a      	str	r3, [sp, #40]	; 0x28
 80132e6:	2384      	movs	r3, #132	; 0x84
 80132e8:	0022      	movs	r2, r4
 80132ea:	401a      	ands	r2, r3
 80132ec:	9211      	str	r2, [sp, #68]	; 0x44
 80132ee:	421c      	tst	r4, r3
 80132f0:	d11e      	bne.n	8013330 <_vfiprintf_r+0x4fc>
 80132f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132f6:	1a9f      	subs	r7, r3, r2
 80132f8:	2f00      	cmp	r7, #0
 80132fa:	dd19      	ble.n	8013330 <_vfiprintf_r+0x4fc>
 80132fc:	0029      	movs	r1, r5
 80132fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013300:	489a      	ldr	r0, [pc, #616]	; (801356c <_vfiprintf_r+0x738>)
 8013302:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013304:	3301      	adds	r3, #1
 8013306:	3108      	adds	r1, #8
 8013308:	6028      	str	r0, [r5, #0]
 801330a:	2f10      	cmp	r7, #16
 801330c:	dd00      	ble.n	8013310 <_vfiprintf_r+0x4dc>
 801330e:	e1a7      	b.n	8013660 <_vfiprintf_r+0x82c>
 8013310:	606f      	str	r7, [r5, #4]
 8013312:	18bf      	adds	r7, r7, r2
 8013314:	000d      	movs	r5, r1
 8013316:	9716      	str	r7, [sp, #88]	; 0x58
 8013318:	9315      	str	r3, [sp, #84]	; 0x54
 801331a:	2b07      	cmp	r3, #7
 801331c:	dd08      	ble.n	8013330 <_vfiprintf_r+0x4fc>
 801331e:	9903      	ldr	r1, [sp, #12]
 8013320:	9806      	ldr	r0, [sp, #24]
 8013322:	aa14      	add	r2, sp, #80	; 0x50
 8013324:	f7ff fd51 	bl	8012dca <__sprint_r>
 8013328:	2800      	cmp	r0, #0
 801332a:	d000      	beq.n	801332e <_vfiprintf_r+0x4fa>
 801332c:	e1eb      	b.n	8013706 <_vfiprintf_r+0x8d2>
 801332e:	ad17      	add	r5, sp, #92	; 0x5c
 8013330:	a912      	add	r1, sp, #72	; 0x48
 8013332:	78c8      	ldrb	r0, [r1, #3]
 8013334:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013338:	3103      	adds	r1, #3
 801333a:	2800      	cmp	r0, #0
 801333c:	d012      	beq.n	8013364 <_vfiprintf_r+0x530>
 801333e:	6029      	str	r1, [r5, #0]
 8013340:	2101      	movs	r1, #1
 8013342:	3301      	adds	r3, #1
 8013344:	1852      	adds	r2, r2, r1
 8013346:	6069      	str	r1, [r5, #4]
 8013348:	9216      	str	r2, [sp, #88]	; 0x58
 801334a:	9315      	str	r3, [sp, #84]	; 0x54
 801334c:	3508      	adds	r5, #8
 801334e:	2b07      	cmp	r3, #7
 8013350:	dd08      	ble.n	8013364 <_vfiprintf_r+0x530>
 8013352:	9903      	ldr	r1, [sp, #12]
 8013354:	9806      	ldr	r0, [sp, #24]
 8013356:	aa14      	add	r2, sp, #80	; 0x50
 8013358:	f7ff fd37 	bl	8012dca <__sprint_r>
 801335c:	2800      	cmp	r0, #0
 801335e:	d000      	beq.n	8013362 <_vfiprintf_r+0x52e>
 8013360:	e1d1      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8013362:	ad17      	add	r5, sp, #92	; 0x5c
 8013364:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013366:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801336a:	2900      	cmp	r1, #0
 801336c:	d013      	beq.n	8013396 <_vfiprintf_r+0x562>
 801336e:	a913      	add	r1, sp, #76	; 0x4c
 8013370:	6029      	str	r1, [r5, #0]
 8013372:	2102      	movs	r1, #2
 8013374:	3301      	adds	r3, #1
 8013376:	1852      	adds	r2, r2, r1
 8013378:	6069      	str	r1, [r5, #4]
 801337a:	9216      	str	r2, [sp, #88]	; 0x58
 801337c:	9315      	str	r3, [sp, #84]	; 0x54
 801337e:	3508      	adds	r5, #8
 8013380:	2b07      	cmp	r3, #7
 8013382:	dd08      	ble.n	8013396 <_vfiprintf_r+0x562>
 8013384:	9903      	ldr	r1, [sp, #12]
 8013386:	9806      	ldr	r0, [sp, #24]
 8013388:	aa14      	add	r2, sp, #80	; 0x50
 801338a:	f7ff fd1e 	bl	8012dca <__sprint_r>
 801338e:	2800      	cmp	r0, #0
 8013390:	d000      	beq.n	8013394 <_vfiprintf_r+0x560>
 8013392:	e1b8      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8013394:	ad17      	add	r5, sp, #92	; 0x5c
 8013396:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013398:	2b80      	cmp	r3, #128	; 0x80
 801339a:	d11e      	bne.n	80133da <_vfiprintf_r+0x5a6>
 801339c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133a0:	1a9f      	subs	r7, r3, r2
 80133a2:	2f00      	cmp	r7, #0
 80133a4:	dd19      	ble.n	80133da <_vfiprintf_r+0x5a6>
 80133a6:	0029      	movs	r1, r5
 80133a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133aa:	4871      	ldr	r0, [pc, #452]	; (8013570 <_vfiprintf_r+0x73c>)
 80133ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80133ae:	3301      	adds	r3, #1
 80133b0:	3108      	adds	r1, #8
 80133b2:	6028      	str	r0, [r5, #0]
 80133b4:	2f10      	cmp	r7, #16
 80133b6:	dd00      	ble.n	80133ba <_vfiprintf_r+0x586>
 80133b8:	e164      	b.n	8013684 <_vfiprintf_r+0x850>
 80133ba:	606f      	str	r7, [r5, #4]
 80133bc:	18bf      	adds	r7, r7, r2
 80133be:	000d      	movs	r5, r1
 80133c0:	9716      	str	r7, [sp, #88]	; 0x58
 80133c2:	9315      	str	r3, [sp, #84]	; 0x54
 80133c4:	2b07      	cmp	r3, #7
 80133c6:	dd08      	ble.n	80133da <_vfiprintf_r+0x5a6>
 80133c8:	9903      	ldr	r1, [sp, #12]
 80133ca:	9806      	ldr	r0, [sp, #24]
 80133cc:	aa14      	add	r2, sp, #80	; 0x50
 80133ce:	f7ff fcfc 	bl	8012dca <__sprint_r>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d000      	beq.n	80133d8 <_vfiprintf_r+0x5a4>
 80133d6:	e196      	b.n	8013706 <_vfiprintf_r+0x8d2>
 80133d8:	ad17      	add	r5, sp, #92	; 0x5c
 80133da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133dc:	9a05      	ldr	r2, [sp, #20]
 80133de:	1a9f      	subs	r7, r3, r2
 80133e0:	2f00      	cmp	r7, #0
 80133e2:	dd19      	ble.n	8013418 <_vfiprintf_r+0x5e4>
 80133e4:	0029      	movs	r1, r5
 80133e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133e8:	4861      	ldr	r0, [pc, #388]	; (8013570 <_vfiprintf_r+0x73c>)
 80133ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80133ec:	3301      	adds	r3, #1
 80133ee:	3108      	adds	r1, #8
 80133f0:	6028      	str	r0, [r5, #0]
 80133f2:	2f10      	cmp	r7, #16
 80133f4:	dd00      	ble.n	80133f8 <_vfiprintf_r+0x5c4>
 80133f6:	e157      	b.n	80136a8 <_vfiprintf_r+0x874>
 80133f8:	606f      	str	r7, [r5, #4]
 80133fa:	18bf      	adds	r7, r7, r2
 80133fc:	000d      	movs	r5, r1
 80133fe:	9716      	str	r7, [sp, #88]	; 0x58
 8013400:	9315      	str	r3, [sp, #84]	; 0x54
 8013402:	2b07      	cmp	r3, #7
 8013404:	dd08      	ble.n	8013418 <_vfiprintf_r+0x5e4>
 8013406:	9903      	ldr	r1, [sp, #12]
 8013408:	9806      	ldr	r0, [sp, #24]
 801340a:	aa14      	add	r2, sp, #80	; 0x50
 801340c:	f7ff fcdd 	bl	8012dca <__sprint_r>
 8013410:	2800      	cmp	r0, #0
 8013412:	d000      	beq.n	8013416 <_vfiprintf_r+0x5e2>
 8013414:	e177      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8013416:	ad17      	add	r5, sp, #92	; 0x5c
 8013418:	9b05      	ldr	r3, [sp, #20]
 801341a:	9a05      	ldr	r2, [sp, #20]
 801341c:	606b      	str	r3, [r5, #4]
 801341e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013420:	602e      	str	r6, [r5, #0]
 8013422:	189b      	adds	r3, r3, r2
 8013424:	9316      	str	r3, [sp, #88]	; 0x58
 8013426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013428:	3508      	adds	r5, #8
 801342a:	3301      	adds	r3, #1
 801342c:	9315      	str	r3, [sp, #84]	; 0x54
 801342e:	2b07      	cmp	r3, #7
 8013430:	dd08      	ble.n	8013444 <_vfiprintf_r+0x610>
 8013432:	9903      	ldr	r1, [sp, #12]
 8013434:	9806      	ldr	r0, [sp, #24]
 8013436:	aa14      	add	r2, sp, #80	; 0x50
 8013438:	f7ff fcc7 	bl	8012dca <__sprint_r>
 801343c:	2800      	cmp	r0, #0
 801343e:	d000      	beq.n	8013442 <_vfiprintf_r+0x60e>
 8013440:	e161      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8013442:	ad17      	add	r5, sp, #92	; 0x5c
 8013444:	0764      	lsls	r4, r4, #29
 8013446:	d500      	bpl.n	801344a <_vfiprintf_r+0x616>
 8013448:	e140      	b.n	80136cc <_vfiprintf_r+0x898>
 801344a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801344c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801344e:	4293      	cmp	r3, r2
 8013450:	da00      	bge.n	8013454 <_vfiprintf_r+0x620>
 8013452:	0013      	movs	r3, r2
 8013454:	9a08      	ldr	r2, [sp, #32]
 8013456:	18d3      	adds	r3, r2, r3
 8013458:	9308      	str	r3, [sp, #32]
 801345a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801345c:	2b00      	cmp	r3, #0
 801345e:	d007      	beq.n	8013470 <_vfiprintf_r+0x63c>
 8013460:	9903      	ldr	r1, [sp, #12]
 8013462:	9806      	ldr	r0, [sp, #24]
 8013464:	aa14      	add	r2, sp, #80	; 0x50
 8013466:	f7ff fcb0 	bl	8012dca <__sprint_r>
 801346a:	2800      	cmp	r0, #0
 801346c:	d000      	beq.n	8013470 <_vfiprintf_r+0x63c>
 801346e:	e14a      	b.n	8013706 <_vfiprintf_r+0x8d2>
 8013470:	2300      	movs	r3, #0
 8013472:	ad17      	add	r5, sp, #92	; 0x5c
 8013474:	9315      	str	r3, [sp, #84]	; 0x54
 8013476:	e6b7      	b.n	80131e8 <_vfiprintf_r+0x3b4>
 8013478:	0030      	movs	r0, r6
 801347a:	f7ec fe43 	bl	8000104 <strlen>
 801347e:	9005      	str	r0, [sp, #20]
 8013480:	e719      	b.n	80132b6 <_vfiprintf_r+0x482>
 8013482:	2310      	movs	r3, #16
 8013484:	431c      	orrs	r4, r3
 8013486:	2320      	movs	r3, #32
 8013488:	0020      	movs	r0, r4
 801348a:	4018      	ands	r0, r3
 801348c:	421c      	tst	r4, r3
 801348e:	d009      	beq.n	80134a4 <_vfiprintf_r+0x670>
 8013490:	3b19      	subs	r3, #25
 8013492:	3707      	adds	r7, #7
 8013494:	439f      	bics	r7, r3
 8013496:	0039      	movs	r1, r7
 8013498:	c90c      	ldmia	r1!, {r2, r3}
 801349a:	9200      	str	r2, [sp, #0]
 801349c:	9301      	str	r3, [sp, #4]
 801349e:	9104      	str	r1, [sp, #16]
 80134a0:	2301      	movs	r3, #1
 80134a2:	e6c7      	b.n	8013234 <_vfiprintf_r+0x400>
 80134a4:	003b      	movs	r3, r7
 80134a6:	cb04      	ldmia	r3!, {r2}
 80134a8:	0021      	movs	r1, r4
 80134aa:	9304      	str	r3, [sp, #16]
 80134ac:	2310      	movs	r3, #16
 80134ae:	4019      	ands	r1, r3
 80134b0:	421c      	tst	r4, r3
 80134b2:	d003      	beq.n	80134bc <_vfiprintf_r+0x688>
 80134b4:	9200      	str	r2, [sp, #0]
 80134b6:	9001      	str	r0, [sp, #4]
 80134b8:	3b0f      	subs	r3, #15
 80134ba:	e6bb      	b.n	8013234 <_vfiprintf_r+0x400>
 80134bc:	2340      	movs	r3, #64	; 0x40
 80134be:	0020      	movs	r0, r4
 80134c0:	4018      	ands	r0, r3
 80134c2:	421c      	tst	r4, r3
 80134c4:	d003      	beq.n	80134ce <_vfiprintf_r+0x69a>
 80134c6:	b293      	uxth	r3, r2
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	9101      	str	r1, [sp, #4]
 80134cc:	e7e8      	b.n	80134a0 <_vfiprintf_r+0x66c>
 80134ce:	2380      	movs	r3, #128	; 0x80
 80134d0:	0021      	movs	r1, r4
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	4019      	ands	r1, r3
 80134d6:	421c      	tst	r4, r3
 80134d8:	d003      	beq.n	80134e2 <_vfiprintf_r+0x6ae>
 80134da:	b2d3      	uxtb	r3, r2
 80134dc:	9300      	str	r3, [sp, #0]
 80134de:	9001      	str	r0, [sp, #4]
 80134e0:	e7de      	b.n	80134a0 <_vfiprintf_r+0x66c>
 80134e2:	9200      	str	r2, [sp, #0]
 80134e4:	e7f1      	b.n	80134ca <_vfiprintf_r+0x696>
 80134e6:	4a23      	ldr	r2, [pc, #140]	; (8013574 <_vfiprintf_r+0x740>)
 80134e8:	0020      	movs	r0, r4
 80134ea:	920c      	str	r2, [sp, #48]	; 0x30
 80134ec:	2220      	movs	r2, #32
 80134ee:	4010      	ands	r0, r2
 80134f0:	4214      	tst	r4, r2
 80134f2:	d019      	beq.n	8013528 <_vfiprintf_r+0x6f4>
 80134f4:	3a19      	subs	r2, #25
 80134f6:	3707      	adds	r7, #7
 80134f8:	4397      	bics	r7, r2
 80134fa:	0038      	movs	r0, r7
 80134fc:	c806      	ldmia	r0!, {r1, r2}
 80134fe:	9100      	str	r1, [sp, #0]
 8013500:	9201      	str	r2, [sp, #4]
 8013502:	9004      	str	r0, [sp, #16]
 8013504:	07e2      	lsls	r2, r4, #31
 8013506:	d509      	bpl.n	801351c <_vfiprintf_r+0x6e8>
 8013508:	9a00      	ldr	r2, [sp, #0]
 801350a:	9901      	ldr	r1, [sp, #4]
 801350c:	430a      	orrs	r2, r1
 801350e:	d005      	beq.n	801351c <_vfiprintf_r+0x6e8>
 8013510:	aa13      	add	r2, sp, #76	; 0x4c
 8013512:	2130      	movs	r1, #48	; 0x30
 8013514:	7053      	strb	r3, [r2, #1]
 8013516:	2302      	movs	r3, #2
 8013518:	7011      	strb	r1, [r2, #0]
 801351a:	431c      	orrs	r4, r3
 801351c:	4b10      	ldr	r3, [pc, #64]	; (8013560 <_vfiprintf_r+0x72c>)
 801351e:	401c      	ands	r4, r3
 8013520:	2302      	movs	r3, #2
 8013522:	e687      	b.n	8013234 <_vfiprintf_r+0x400>
 8013524:	4a10      	ldr	r2, [pc, #64]	; (8013568 <_vfiprintf_r+0x734>)
 8013526:	e7df      	b.n	80134e8 <_vfiprintf_r+0x6b4>
 8013528:	0039      	movs	r1, r7
 801352a:	c904      	ldmia	r1!, {r2}
 801352c:	0026      	movs	r6, r4
 801352e:	9104      	str	r1, [sp, #16]
 8013530:	2110      	movs	r1, #16
 8013532:	400e      	ands	r6, r1
 8013534:	420c      	tst	r4, r1
 8013536:	d002      	beq.n	801353e <_vfiprintf_r+0x70a>
 8013538:	9200      	str	r2, [sp, #0]
 801353a:	9001      	str	r0, [sp, #4]
 801353c:	e7e2      	b.n	8013504 <_vfiprintf_r+0x6d0>
 801353e:	2140      	movs	r1, #64	; 0x40
 8013540:	0020      	movs	r0, r4
 8013542:	4008      	ands	r0, r1
 8013544:	420c      	tst	r4, r1
 8013546:	d003      	beq.n	8013550 <_vfiprintf_r+0x71c>
 8013548:	b292      	uxth	r2, r2
 801354a:	9200      	str	r2, [sp, #0]
 801354c:	9601      	str	r6, [sp, #4]
 801354e:	e7d9      	b.n	8013504 <_vfiprintf_r+0x6d0>
 8013550:	2180      	movs	r1, #128	; 0x80
 8013552:	0026      	movs	r6, r4
 8013554:	0089      	lsls	r1, r1, #2
 8013556:	400e      	ands	r6, r1
 8013558:	420c      	tst	r4, r1
 801355a:	d0f6      	beq.n	801354a <_vfiprintf_r+0x716>
 801355c:	b2d2      	uxtb	r2, r2
 801355e:	e7eb      	b.n	8013538 <_vfiprintf_r+0x704>
 8013560:	fffffbff 	.word	0xfffffbff
 8013564:	00007830 	.word	0x00007830
 8013568:	08016054 	.word	0x08016054
 801356c:	08016161 	.word	0x08016161
 8013570:	08016171 	.word	0x08016171
 8013574:	08016065 	.word	0x08016065
 8013578:	9b01      	ldr	r3, [sp, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d109      	bne.n	8013592 <_vfiprintf_r+0x75e>
 801357e:	9b00      	ldr	r3, [sp, #0]
 8013580:	2b09      	cmp	r3, #9
 8013582:	d806      	bhi.n	8013592 <_vfiprintf_r+0x75e>
 8013584:	26b7      	movs	r6, #183	; 0xb7
 8013586:	ab12      	add	r3, sp, #72	; 0x48
 8013588:	18f6      	adds	r6, r6, r3
 801358a:	9b00      	ldr	r3, [sp, #0]
 801358c:	3330      	adds	r3, #48	; 0x30
 801358e:	7033      	strb	r3, [r6, #0]
 8013590:	e115      	b.n	80137be <_vfiprintf_r+0x98a>
 8013592:	2380      	movs	r3, #128	; 0x80
 8013594:	2400      	movs	r4, #0
 8013596:	00db      	lsls	r3, r3, #3
 8013598:	403b      	ands	r3, r7
 801359a:	ae40      	add	r6, sp, #256	; 0x100
 801359c:	930a      	str	r3, [sp, #40]	; 0x28
 801359e:	220a      	movs	r2, #10
 80135a0:	9800      	ldr	r0, [sp, #0]
 80135a2:	9901      	ldr	r1, [sp, #4]
 80135a4:	2300      	movs	r3, #0
 80135a6:	f7ec ff7d 	bl	80004a4 <__aeabi_uldivmod>
 80135aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135ac:	3e01      	subs	r6, #1
 80135ae:	3230      	adds	r2, #48	; 0x30
 80135b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80135b2:	9110      	str	r1, [sp, #64]	; 0x40
 80135b4:	7032      	strb	r2, [r6, #0]
 80135b6:	3401      	adds	r4, #1
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d01a      	beq.n	80135f2 <_vfiprintf_r+0x7be>
 80135bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	42a3      	cmp	r3, r4
 80135c2:	d116      	bne.n	80135f2 <_vfiprintf_r+0x7be>
 80135c4:	2cff      	cmp	r4, #255	; 0xff
 80135c6:	d014      	beq.n	80135f2 <_vfiprintf_r+0x7be>
 80135c8:	9b01      	ldr	r3, [sp, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d102      	bne.n	80135d4 <_vfiprintf_r+0x7a0>
 80135ce:	9b00      	ldr	r3, [sp, #0]
 80135d0:	2b09      	cmp	r3, #9
 80135d2:	d90e      	bls.n	80135f2 <_vfiprintf_r+0x7be>
 80135d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80135d8:	1af6      	subs	r6, r6, r3
 80135da:	001a      	movs	r2, r3
 80135dc:	0030      	movs	r0, r6
 80135de:	f7fa f832 	bl	800d646 <strncpy>
 80135e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135e4:	2400      	movs	r4, #0
 80135e6:	785b      	ldrb	r3, [r3, #1]
 80135e8:	1e5a      	subs	r2, r3, #1
 80135ea:	4193      	sbcs	r3, r2
 80135ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135ee:	18d3      	adds	r3, r2, r3
 80135f0:	930d      	str	r3, [sp, #52]	; 0x34
 80135f2:	9b01      	ldr	r3, [sp, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d103      	bne.n	8013600 <_vfiprintf_r+0x7cc>
 80135f8:	9b00      	ldr	r3, [sp, #0]
 80135fa:	2b09      	cmp	r3, #9
 80135fc:	d800      	bhi.n	8013600 <_vfiprintf_r+0x7cc>
 80135fe:	e0de      	b.n	80137be <_vfiprintf_r+0x98a>
 8013600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013602:	9300      	str	r3, [sp, #0]
 8013604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013606:	9301      	str	r3, [sp, #4]
 8013608:	e7c9      	b.n	801359e <_vfiprintf_r+0x76a>
 801360a:	200f      	movs	r0, #15
 801360c:	9b00      	ldr	r3, [sp, #0]
 801360e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013610:	4003      	ands	r3, r0
 8013612:	5cd3      	ldrb	r3, [r2, r3]
 8013614:	3e01      	subs	r6, #1
 8013616:	7033      	strb	r3, [r6, #0]
 8013618:	9b01      	ldr	r3, [sp, #4]
 801361a:	0719      	lsls	r1, r3, #28
 801361c:	9b00      	ldr	r3, [sp, #0]
 801361e:	091a      	lsrs	r2, r3, #4
 8013620:	9b01      	ldr	r3, [sp, #4]
 8013622:	4311      	orrs	r1, r2
 8013624:	091b      	lsrs	r3, r3, #4
 8013626:	9301      	str	r3, [sp, #4]
 8013628:	000b      	movs	r3, r1
 801362a:	9a01      	ldr	r2, [sp, #4]
 801362c:	9100      	str	r1, [sp, #0]
 801362e:	4313      	orrs	r3, r2
 8013630:	d1ec      	bne.n	801360c <_vfiprintf_r+0x7d8>
 8013632:	e0c4      	b.n	80137be <_vfiprintf_r+0x98a>
 8013634:	ae40      	add	r6, sp, #256	; 0x100
 8013636:	2b00      	cmp	r3, #0
 8013638:	d000      	beq.n	801363c <_vfiprintf_r+0x808>
 801363a:	e0c0      	b.n	80137be <_vfiprintf_r+0x98a>
 801363c:	07e4      	lsls	r4, r4, #31
 801363e:	d400      	bmi.n	8013642 <_vfiprintf_r+0x80e>
 8013640:	e0bd      	b.n	80137be <_vfiprintf_r+0x98a>
 8013642:	26b7      	movs	r6, #183	; 0xb7
 8013644:	ab12      	add	r3, sp, #72	; 0x48
 8013646:	18f6      	adds	r6, r6, r3
 8013648:	2330      	movs	r3, #48	; 0x30
 801364a:	e7a0      	b.n	801358e <_vfiprintf_r+0x75a>
 801364c:	2b00      	cmp	r3, #0
 801364e:	d100      	bne.n	8013652 <_vfiprintf_r+0x81e>
 8013650:	e07e      	b.n	8013750 <_vfiprintf_r+0x91c>
 8013652:	ae27      	add	r6, sp, #156	; 0x9c
 8013654:	7033      	strb	r3, [r6, #0]
 8013656:	2300      	movs	r3, #0
 8013658:	aa12      	add	r2, sp, #72	; 0x48
 801365a:	70d3      	strb	r3, [r2, #3]
 801365c:	9704      	str	r7, [sp, #16]
 801365e:	e576      	b.n	801314e <_vfiprintf_r+0x31a>
 8013660:	2010      	movs	r0, #16
 8013662:	1812      	adds	r2, r2, r0
 8013664:	6068      	str	r0, [r5, #4]
 8013666:	9216      	str	r2, [sp, #88]	; 0x58
 8013668:	9315      	str	r3, [sp, #84]	; 0x54
 801366a:	2b07      	cmp	r3, #7
 801366c:	dd07      	ble.n	801367e <_vfiprintf_r+0x84a>
 801366e:	9903      	ldr	r1, [sp, #12]
 8013670:	9806      	ldr	r0, [sp, #24]
 8013672:	aa14      	add	r2, sp, #80	; 0x50
 8013674:	f7ff fba9 	bl	8012dca <__sprint_r>
 8013678:	2800      	cmp	r0, #0
 801367a:	d144      	bne.n	8013706 <_vfiprintf_r+0x8d2>
 801367c:	a917      	add	r1, sp, #92	; 0x5c
 801367e:	000d      	movs	r5, r1
 8013680:	3f10      	subs	r7, #16
 8013682:	e63b      	b.n	80132fc <_vfiprintf_r+0x4c8>
 8013684:	2010      	movs	r0, #16
 8013686:	1812      	adds	r2, r2, r0
 8013688:	6068      	str	r0, [r5, #4]
 801368a:	9216      	str	r2, [sp, #88]	; 0x58
 801368c:	9315      	str	r3, [sp, #84]	; 0x54
 801368e:	2b07      	cmp	r3, #7
 8013690:	dd07      	ble.n	80136a2 <_vfiprintf_r+0x86e>
 8013692:	9903      	ldr	r1, [sp, #12]
 8013694:	9806      	ldr	r0, [sp, #24]
 8013696:	aa14      	add	r2, sp, #80	; 0x50
 8013698:	f7ff fb97 	bl	8012dca <__sprint_r>
 801369c:	2800      	cmp	r0, #0
 801369e:	d132      	bne.n	8013706 <_vfiprintf_r+0x8d2>
 80136a0:	a917      	add	r1, sp, #92	; 0x5c
 80136a2:	000d      	movs	r5, r1
 80136a4:	3f10      	subs	r7, #16
 80136a6:	e67e      	b.n	80133a6 <_vfiprintf_r+0x572>
 80136a8:	2010      	movs	r0, #16
 80136aa:	1812      	adds	r2, r2, r0
 80136ac:	6068      	str	r0, [r5, #4]
 80136ae:	9216      	str	r2, [sp, #88]	; 0x58
 80136b0:	9315      	str	r3, [sp, #84]	; 0x54
 80136b2:	2b07      	cmp	r3, #7
 80136b4:	dd07      	ble.n	80136c6 <_vfiprintf_r+0x892>
 80136b6:	9903      	ldr	r1, [sp, #12]
 80136b8:	9806      	ldr	r0, [sp, #24]
 80136ba:	aa14      	add	r2, sp, #80	; 0x50
 80136bc:	f7ff fb85 	bl	8012dca <__sprint_r>
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d120      	bne.n	8013706 <_vfiprintf_r+0x8d2>
 80136c4:	a917      	add	r1, sp, #92	; 0x5c
 80136c6:	000d      	movs	r5, r1
 80136c8:	3f10      	subs	r7, #16
 80136ca:	e68b      	b.n	80133e4 <_vfiprintf_r+0x5b0>
 80136cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136d0:	2610      	movs	r6, #16
 80136d2:	1a9c      	subs	r4, r3, r2
 80136d4:	2c00      	cmp	r4, #0
 80136d6:	dc00      	bgt.n	80136da <_vfiprintf_r+0x8a6>
 80136d8:	e6b7      	b.n	801344a <_vfiprintf_r+0x616>
 80136da:	9915      	ldr	r1, [sp, #84]	; 0x54
 80136dc:	4a3b      	ldr	r2, [pc, #236]	; (80137cc <_vfiprintf_r+0x998>)
 80136de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80136e0:	3101      	adds	r1, #1
 80136e2:	602a      	str	r2, [r5, #0]
 80136e4:	2c10      	cmp	r4, #16
 80136e6:	dc22      	bgt.n	801372e <_vfiprintf_r+0x8fa>
 80136e8:	606c      	str	r4, [r5, #4]
 80136ea:	18e4      	adds	r4, r4, r3
 80136ec:	9416      	str	r4, [sp, #88]	; 0x58
 80136ee:	9115      	str	r1, [sp, #84]	; 0x54
 80136f0:	2907      	cmp	r1, #7
 80136f2:	dc00      	bgt.n	80136f6 <_vfiprintf_r+0x8c2>
 80136f4:	e6a9      	b.n	801344a <_vfiprintf_r+0x616>
 80136f6:	9903      	ldr	r1, [sp, #12]
 80136f8:	9806      	ldr	r0, [sp, #24]
 80136fa:	aa14      	add	r2, sp, #80	; 0x50
 80136fc:	f7ff fb65 	bl	8012dca <__sprint_r>
 8013700:	2800      	cmp	r0, #0
 8013702:	d100      	bne.n	8013706 <_vfiprintf_r+0x8d2>
 8013704:	e6a1      	b.n	801344a <_vfiprintf_r+0x616>
 8013706:	9b03      	ldr	r3, [sp, #12]
 8013708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801370a:	07db      	lsls	r3, r3, #31
 801370c:	d407      	bmi.n	801371e <_vfiprintf_r+0x8ea>
 801370e:	9b03      	ldr	r3, [sp, #12]
 8013710:	899b      	ldrh	r3, [r3, #12]
 8013712:	059b      	lsls	r3, r3, #22
 8013714:	d403      	bmi.n	801371e <_vfiprintf_r+0x8ea>
 8013716:	9b03      	ldr	r3, [sp, #12]
 8013718:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801371a:	f7fa f88e 	bl	800d83a <__retarget_lock_release_recursive>
 801371e:	9b03      	ldr	r3, [sp, #12]
 8013720:	899b      	ldrh	r3, [r3, #12]
 8013722:	065b      	lsls	r3, r3, #25
 8013724:	d401      	bmi.n	801372a <_vfiprintf_r+0x8f6>
 8013726:	f7ff fbc3 	bl	8012eb0 <_vfiprintf_r+0x7c>
 801372a:	f7ff fbbe 	bl	8012eaa <_vfiprintf_r+0x76>
 801372e:	3310      	adds	r3, #16
 8013730:	606e      	str	r6, [r5, #4]
 8013732:	9316      	str	r3, [sp, #88]	; 0x58
 8013734:	9115      	str	r1, [sp, #84]	; 0x54
 8013736:	3508      	adds	r5, #8
 8013738:	2907      	cmp	r1, #7
 801373a:	dd07      	ble.n	801374c <_vfiprintf_r+0x918>
 801373c:	9903      	ldr	r1, [sp, #12]
 801373e:	9806      	ldr	r0, [sp, #24]
 8013740:	aa14      	add	r2, sp, #80	; 0x50
 8013742:	f7ff fb42 	bl	8012dca <__sprint_r>
 8013746:	2800      	cmp	r0, #0
 8013748:	d1dd      	bne.n	8013706 <_vfiprintf_r+0x8d2>
 801374a:	ad17      	add	r5, sp, #92	; 0x5c
 801374c:	3c10      	subs	r4, #16
 801374e:	e7c4      	b.n	80136da <_vfiprintf_r+0x8a6>
 8013750:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013752:	2b00      	cmp	r3, #0
 8013754:	d102      	bne.n	801375c <_vfiprintf_r+0x928>
 8013756:	2300      	movs	r3, #0
 8013758:	9315      	str	r3, [sp, #84]	; 0x54
 801375a:	e7d4      	b.n	8013706 <_vfiprintf_r+0x8d2>
 801375c:	9903      	ldr	r1, [sp, #12]
 801375e:	9806      	ldr	r0, [sp, #24]
 8013760:	aa14      	add	r2, sp, #80	; 0x50
 8013762:	f7ff fb32 	bl	8012dca <__sprint_r>
 8013766:	2800      	cmp	r0, #0
 8013768:	d0f5      	beq.n	8013756 <_vfiprintf_r+0x922>
 801376a:	e7cc      	b.n	8013706 <_vfiprintf_r+0x8d2>
 801376c:	0027      	movs	r7, r4
 801376e:	2a00      	cmp	r2, #0
 8013770:	d100      	bne.n	8013774 <_vfiprintf_r+0x940>
 8013772:	e51b      	b.n	80131ac <_vfiprintf_r+0x378>
 8013774:	2b01      	cmp	r3, #1
 8013776:	d100      	bne.n	801377a <_vfiprintf_r+0x946>
 8013778:	e6fe      	b.n	8013578 <_vfiprintf_r+0x744>
 801377a:	ae40      	add	r6, sp, #256	; 0x100
 801377c:	2b02      	cmp	r3, #2
 801377e:	d100      	bne.n	8013782 <_vfiprintf_r+0x94e>
 8013780:	e743      	b.n	801360a <_vfiprintf_r+0x7d6>
 8013782:	2307      	movs	r3, #7
 8013784:	469c      	mov	ip, r3
 8013786:	4663      	mov	r3, ip
 8013788:	9900      	ldr	r1, [sp, #0]
 801378a:	0032      	movs	r2, r6
 801378c:	400b      	ands	r3, r1
 801378e:	9901      	ldr	r1, [sp, #4]
 8013790:	3e01      	subs	r6, #1
 8013792:	074c      	lsls	r4, r1, #29
 8013794:	9900      	ldr	r1, [sp, #0]
 8013796:	3330      	adds	r3, #48	; 0x30
 8013798:	08c8      	lsrs	r0, r1, #3
 801379a:	9901      	ldr	r1, [sp, #4]
 801379c:	4304      	orrs	r4, r0
 801379e:	08c9      	lsrs	r1, r1, #3
 80137a0:	9101      	str	r1, [sp, #4]
 80137a2:	0021      	movs	r1, r4
 80137a4:	9801      	ldr	r0, [sp, #4]
 80137a6:	7033      	strb	r3, [r6, #0]
 80137a8:	9400      	str	r4, [sp, #0]
 80137aa:	4301      	orrs	r1, r0
 80137ac:	d1eb      	bne.n	8013786 <_vfiprintf_r+0x952>
 80137ae:	07f9      	lsls	r1, r7, #31
 80137b0:	d505      	bpl.n	80137be <_vfiprintf_r+0x98a>
 80137b2:	2b30      	cmp	r3, #48	; 0x30
 80137b4:	d003      	beq.n	80137be <_vfiprintf_r+0x98a>
 80137b6:	2330      	movs	r3, #48	; 0x30
 80137b8:	3e01      	subs	r6, #1
 80137ba:	7033      	strb	r3, [r6, #0]
 80137bc:	1e96      	subs	r6, r2, #2
 80137be:	9b05      	ldr	r3, [sp, #20]
 80137c0:	003c      	movs	r4, r7
 80137c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80137c4:	ab40      	add	r3, sp, #256	; 0x100
 80137c6:	1b9b      	subs	r3, r3, r6
 80137c8:	9305      	str	r3, [sp, #20]
 80137ca:	e575      	b.n	80132b8 <_vfiprintf_r+0x484>
 80137cc:	08016161 	.word	0x08016161

080137d0 <__sbprintf>:
 80137d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137d2:	0015      	movs	r5, r2
 80137d4:	2202      	movs	r2, #2
 80137d6:	4c1e      	ldr	r4, [pc, #120]	; (8013850 <__sbprintf+0x80>)
 80137d8:	001f      	movs	r7, r3
 80137da:	898b      	ldrh	r3, [r1, #12]
 80137dc:	44a5      	add	sp, r4
 80137de:	4393      	bics	r3, r2
 80137e0:	466a      	mov	r2, sp
 80137e2:	8193      	strh	r3, [r2, #12]
 80137e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80137e6:	0006      	movs	r6, r0
 80137e8:	9319      	str	r3, [sp, #100]	; 0x64
 80137ea:	89cb      	ldrh	r3, [r1, #14]
 80137ec:	a816      	add	r0, sp, #88	; 0x58
 80137ee:	81d3      	strh	r3, [r2, #14]
 80137f0:	69cb      	ldr	r3, [r1, #28]
 80137f2:	000c      	movs	r4, r1
 80137f4:	9307      	str	r3, [sp, #28]
 80137f6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80137f8:	9309      	str	r3, [sp, #36]	; 0x24
 80137fa:	ab1a      	add	r3, sp, #104	; 0x68
 80137fc:	9300      	str	r3, [sp, #0]
 80137fe:	9304      	str	r3, [sp, #16]
 8013800:	2380      	movs	r3, #128	; 0x80
 8013802:	00db      	lsls	r3, r3, #3
 8013804:	9302      	str	r3, [sp, #8]
 8013806:	9305      	str	r3, [sp, #20]
 8013808:	2300      	movs	r3, #0
 801380a:	9306      	str	r3, [sp, #24]
 801380c:	f7fa f812 	bl	800d834 <__retarget_lock_init_recursive>
 8013810:	002a      	movs	r2, r5
 8013812:	003b      	movs	r3, r7
 8013814:	4669      	mov	r1, sp
 8013816:	0030      	movs	r0, r6
 8013818:	f7ff fb0c 	bl	8012e34 <_vfiprintf_r>
 801381c:	1e05      	subs	r5, r0, #0
 801381e:	db07      	blt.n	8013830 <__sbprintf+0x60>
 8013820:	4669      	mov	r1, sp
 8013822:	0030      	movs	r0, r6
 8013824:	f7fd fe7c 	bl	8011520 <_fflush_r>
 8013828:	2800      	cmp	r0, #0
 801382a:	d001      	beq.n	8013830 <__sbprintf+0x60>
 801382c:	2501      	movs	r5, #1
 801382e:	426d      	negs	r5, r5
 8013830:	466b      	mov	r3, sp
 8013832:	899a      	ldrh	r2, [r3, #12]
 8013834:	2340      	movs	r3, #64	; 0x40
 8013836:	421a      	tst	r2, r3
 8013838:	d002      	beq.n	8013840 <__sbprintf+0x70>
 801383a:	89a2      	ldrh	r2, [r4, #12]
 801383c:	4313      	orrs	r3, r2
 801383e:	81a3      	strh	r3, [r4, #12]
 8013840:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013842:	f7f9 fff8 	bl	800d836 <__retarget_lock_close_recursive>
 8013846:	0028      	movs	r0, r5
 8013848:	4b02      	ldr	r3, [pc, #8]	; (8013854 <__sbprintf+0x84>)
 801384a:	449d      	add	sp, r3
 801384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384e:	46c0      	nop			; (mov r8, r8)
 8013850:	fffffb94 	.word	0xfffffb94
 8013854:	0000046c 	.word	0x0000046c

08013858 <__sfvwrite_r>:
 8013858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801385a:	6893      	ldr	r3, [r2, #8]
 801385c:	b087      	sub	sp, #28
 801385e:	000c      	movs	r4, r1
 8013860:	9002      	str	r0, [sp, #8]
 8013862:	9204      	str	r2, [sp, #16]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d102      	bne.n	801386e <__sfvwrite_r+0x16>
 8013868:	2000      	movs	r0, #0
 801386a:	b007      	add	sp, #28
 801386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801386e:	898b      	ldrh	r3, [r1, #12]
 8013870:	071b      	lsls	r3, r3, #28
 8013872:	d557      	bpl.n	8013924 <__sfvwrite_r+0xcc>
 8013874:	690b      	ldr	r3, [r1, #16]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d054      	beq.n	8013924 <__sfvwrite_r+0xcc>
 801387a:	9b04      	ldr	r3, [sp, #16]
 801387c:	2202      	movs	r2, #2
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	9301      	str	r3, [sp, #4]
 8013882:	89a3      	ldrh	r3, [r4, #12]
 8013884:	001f      	movs	r7, r3
 8013886:	4017      	ands	r7, r2
 8013888:	4213      	tst	r3, r2
 801388a:	d171      	bne.n	8013970 <__sfvwrite_r+0x118>
 801388c:	2201      	movs	r2, #1
 801388e:	2101      	movs	r1, #1
 8013890:	401a      	ands	r2, r3
 8013892:	420b      	tst	r3, r1
 8013894:	d100      	bne.n	8013898 <__sfvwrite_r+0x40>
 8013896:	e0a5      	b.n	80139e4 <__sfvwrite_r+0x18c>
 8013898:	0038      	movs	r0, r7
 801389a:	003e      	movs	r6, r7
 801389c:	9703      	str	r7, [sp, #12]
 801389e:	9b03      	ldr	r3, [sp, #12]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d100      	bne.n	80138a6 <__sfvwrite_r+0x4e>
 80138a4:	e10b      	b.n	8013abe <__sfvwrite_r+0x266>
 80138a6:	2800      	cmp	r0, #0
 80138a8:	d10a      	bne.n	80138c0 <__sfvwrite_r+0x68>
 80138aa:	001a      	movs	r2, r3
 80138ac:	210a      	movs	r1, #10
 80138ae:	0030      	movs	r0, r6
 80138b0:	f7fd feb0 	bl	8011614 <memchr>
 80138b4:	9b03      	ldr	r3, [sp, #12]
 80138b6:	1c5f      	adds	r7, r3, #1
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d001      	beq.n	80138c0 <__sfvwrite_r+0x68>
 80138bc:	3001      	adds	r0, #1
 80138be:	1b87      	subs	r7, r0, r6
 80138c0:	9b03      	ldr	r3, [sp, #12]
 80138c2:	9705      	str	r7, [sp, #20]
 80138c4:	429f      	cmp	r7, r3
 80138c6:	d900      	bls.n	80138ca <__sfvwrite_r+0x72>
 80138c8:	9305      	str	r3, [sp, #20]
 80138ca:	6820      	ldr	r0, [r4, #0]
 80138cc:	6922      	ldr	r2, [r4, #16]
 80138ce:	68a5      	ldr	r5, [r4, #8]
 80138d0:	6963      	ldr	r3, [r4, #20]
 80138d2:	4290      	cmp	r0, r2
 80138d4:	d800      	bhi.n	80138d8 <__sfvwrite_r+0x80>
 80138d6:	e0fb      	b.n	8013ad0 <__sfvwrite_r+0x278>
 80138d8:	9a05      	ldr	r2, [sp, #20]
 80138da:	18ed      	adds	r5, r5, r3
 80138dc:	42aa      	cmp	r2, r5
 80138de:	dc00      	bgt.n	80138e2 <__sfvwrite_r+0x8a>
 80138e0:	e0f6      	b.n	8013ad0 <__sfvwrite_r+0x278>
 80138e2:	0031      	movs	r1, r6
 80138e4:	002a      	movs	r2, r5
 80138e6:	f000 fa1e 	bl	8013d26 <memmove>
 80138ea:	6823      	ldr	r3, [r4, #0]
 80138ec:	0021      	movs	r1, r4
 80138ee:	195b      	adds	r3, r3, r5
 80138f0:	9802      	ldr	r0, [sp, #8]
 80138f2:	6023      	str	r3, [r4, #0]
 80138f4:	f7fd fe14 	bl	8011520 <_fflush_r>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d16e      	bne.n	80139da <__sfvwrite_r+0x182>
 80138fc:	2001      	movs	r0, #1
 80138fe:	1b7f      	subs	r7, r7, r5
 8013900:	d105      	bne.n	801390e <__sfvwrite_r+0xb6>
 8013902:	0021      	movs	r1, r4
 8013904:	9802      	ldr	r0, [sp, #8]
 8013906:	f7fd fe0b 	bl	8011520 <_fflush_r>
 801390a:	2800      	cmp	r0, #0
 801390c:	d165      	bne.n	80139da <__sfvwrite_r+0x182>
 801390e:	9b03      	ldr	r3, [sp, #12]
 8013910:	9a04      	ldr	r2, [sp, #16]
 8013912:	1b5b      	subs	r3, r3, r5
 8013914:	9303      	str	r3, [sp, #12]
 8013916:	9b04      	ldr	r3, [sp, #16]
 8013918:	1976      	adds	r6, r6, r5
 801391a:	689b      	ldr	r3, [r3, #8]
 801391c:	1b5b      	subs	r3, r3, r5
 801391e:	6093      	str	r3, [r2, #8]
 8013920:	d1bd      	bne.n	801389e <__sfvwrite_r+0x46>
 8013922:	e7a1      	b.n	8013868 <__sfvwrite_r+0x10>
 8013924:	0021      	movs	r1, r4
 8013926:	9802      	ldr	r0, [sp, #8]
 8013928:	f000 f932 	bl	8013b90 <__swsetup_r>
 801392c:	2800      	cmp	r0, #0
 801392e:	d0a4      	beq.n	801387a <__sfvwrite_r+0x22>
 8013930:	2001      	movs	r0, #1
 8013932:	4240      	negs	r0, r0
 8013934:	e799      	b.n	801386a <__sfvwrite_r+0x12>
 8013936:	9b01      	ldr	r3, [sp, #4]
 8013938:	681e      	ldr	r6, [r3, #0]
 801393a:	685d      	ldr	r5, [r3, #4]
 801393c:	3308      	adds	r3, #8
 801393e:	9301      	str	r3, [sp, #4]
 8013940:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8013942:	69e1      	ldr	r1, [r4, #28]
 8013944:	2d00      	cmp	r5, #0
 8013946:	d0f6      	beq.n	8013936 <__sfvwrite_r+0xde>
 8013948:	4a6e      	ldr	r2, [pc, #440]	; (8013b04 <__sfvwrite_r+0x2ac>)
 801394a:	002b      	movs	r3, r5
 801394c:	4295      	cmp	r5, r2
 801394e:	d900      	bls.n	8013952 <__sfvwrite_r+0xfa>
 8013950:	0013      	movs	r3, r2
 8013952:	0032      	movs	r2, r6
 8013954:	9802      	ldr	r0, [sp, #8]
 8013956:	47b8      	blx	r7
 8013958:	2800      	cmp	r0, #0
 801395a:	dd3e      	ble.n	80139da <__sfvwrite_r+0x182>
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	9a04      	ldr	r2, [sp, #16]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	1836      	adds	r6, r6, r0
 8013964:	1a1b      	subs	r3, r3, r0
 8013966:	1a2d      	subs	r5, r5, r0
 8013968:	6093      	str	r3, [r2, #8]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1e8      	bne.n	8013940 <__sfvwrite_r+0xe8>
 801396e:	e77b      	b.n	8013868 <__sfvwrite_r+0x10>
 8013970:	2600      	movs	r6, #0
 8013972:	0035      	movs	r5, r6
 8013974:	e7e4      	b.n	8013940 <__sfvwrite_r+0xe8>
 8013976:	9b01      	ldr	r3, [sp, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	9303      	str	r3, [sp, #12]
 801397c:	9b01      	ldr	r3, [sp, #4]
 801397e:	685d      	ldr	r5, [r3, #4]
 8013980:	3308      	adds	r3, #8
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	220c      	movs	r2, #12
 8013986:	5ea3      	ldrsh	r3, [r4, r2]
 8013988:	6820      	ldr	r0, [r4, #0]
 801398a:	68a6      	ldr	r6, [r4, #8]
 801398c:	2d00      	cmp	r5, #0
 801398e:	d0f2      	beq.n	8013976 <__sfvwrite_r+0x11e>
 8013990:	2180      	movs	r1, #128	; 0x80
 8013992:	0089      	lsls	r1, r1, #2
 8013994:	b29a      	uxth	r2, r3
 8013996:	420b      	tst	r3, r1
 8013998:	d062      	beq.n	8013a60 <__sfvwrite_r+0x208>
 801399a:	42ae      	cmp	r6, r5
 801399c:	d837      	bhi.n	8013a0e <__sfvwrite_r+0x1b6>
 801399e:	2390      	movs	r3, #144	; 0x90
 80139a0:	00db      	lsls	r3, r3, #3
 80139a2:	421a      	tst	r2, r3
 80139a4:	d033      	beq.n	8013a0e <__sfvwrite_r+0x1b6>
 80139a6:	6921      	ldr	r1, [r4, #16]
 80139a8:	1a43      	subs	r3, r0, r1
 80139aa:	2003      	movs	r0, #3
 80139ac:	9305      	str	r3, [sp, #20]
 80139ae:	6963      	ldr	r3, [r4, #20]
 80139b0:	4343      	muls	r3, r0
 80139b2:	0fdf      	lsrs	r7, r3, #31
 80139b4:	18ff      	adds	r7, r7, r3
 80139b6:	9b05      	ldr	r3, [sp, #20]
 80139b8:	107f      	asrs	r7, r7, #1
 80139ba:	3301      	adds	r3, #1
 80139bc:	195b      	adds	r3, r3, r5
 80139be:	42bb      	cmp	r3, r7
 80139c0:	d900      	bls.n	80139c4 <__sfvwrite_r+0x16c>
 80139c2:	001f      	movs	r7, r3
 80139c4:	0552      	lsls	r2, r2, #21
 80139c6:	d53c      	bpl.n	8013a42 <__sfvwrite_r+0x1ea>
 80139c8:	0039      	movs	r1, r7
 80139ca:	9802      	ldr	r0, [sp, #8]
 80139cc:	f7f8 fb02 	bl	800bfd4 <_malloc_r>
 80139d0:	1e06      	subs	r6, r0, #0
 80139d2:	d10a      	bne.n	80139ea <__sfvwrite_r+0x192>
 80139d4:	230c      	movs	r3, #12
 80139d6:	9a02      	ldr	r2, [sp, #8]
 80139d8:	6013      	str	r3, [r2, #0]
 80139da:	2340      	movs	r3, #64	; 0x40
 80139dc:	89a2      	ldrh	r2, [r4, #12]
 80139de:	4313      	orrs	r3, r2
 80139e0:	81a3      	strh	r3, [r4, #12]
 80139e2:	e7a5      	b.n	8013930 <__sfvwrite_r+0xd8>
 80139e4:	0015      	movs	r5, r2
 80139e6:	9203      	str	r2, [sp, #12]
 80139e8:	e7cc      	b.n	8013984 <__sfvwrite_r+0x12c>
 80139ea:	9a05      	ldr	r2, [sp, #20]
 80139ec:	6921      	ldr	r1, [r4, #16]
 80139ee:	f7f9 ff30 	bl	800d852 <memcpy>
 80139f2:	89a2      	ldrh	r2, [r4, #12]
 80139f4:	4b44      	ldr	r3, [pc, #272]	; (8013b08 <__sfvwrite_r+0x2b0>)
 80139f6:	401a      	ands	r2, r3
 80139f8:	2380      	movs	r3, #128	; 0x80
 80139fa:	4313      	orrs	r3, r2
 80139fc:	81a3      	strh	r3, [r4, #12]
 80139fe:	9b05      	ldr	r3, [sp, #20]
 8013a00:	6126      	str	r6, [r4, #16]
 8013a02:	18f6      	adds	r6, r6, r3
 8013a04:	6026      	str	r6, [r4, #0]
 8013a06:	002e      	movs	r6, r5
 8013a08:	6167      	str	r7, [r4, #20]
 8013a0a:	1aff      	subs	r7, r7, r3
 8013a0c:	60a7      	str	r7, [r4, #8]
 8013a0e:	002f      	movs	r7, r5
 8013a10:	42ae      	cmp	r6, r5
 8013a12:	d900      	bls.n	8013a16 <__sfvwrite_r+0x1be>
 8013a14:	002e      	movs	r6, r5
 8013a16:	0032      	movs	r2, r6
 8013a18:	9903      	ldr	r1, [sp, #12]
 8013a1a:	6820      	ldr	r0, [r4, #0]
 8013a1c:	f000 f983 	bl	8013d26 <memmove>
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	1b9b      	subs	r3, r3, r6
 8013a24:	60a3      	str	r3, [r4, #8]
 8013a26:	6823      	ldr	r3, [r4, #0]
 8013a28:	199b      	adds	r3, r3, r6
 8013a2a:	6023      	str	r3, [r4, #0]
 8013a2c:	9b03      	ldr	r3, [sp, #12]
 8013a2e:	9a04      	ldr	r2, [sp, #16]
 8013a30:	19db      	adds	r3, r3, r7
 8013a32:	9303      	str	r3, [sp, #12]
 8013a34:	9b04      	ldr	r3, [sp, #16]
 8013a36:	1bed      	subs	r5, r5, r7
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	1bdb      	subs	r3, r3, r7
 8013a3c:	6093      	str	r3, [r2, #8]
 8013a3e:	d1a1      	bne.n	8013984 <__sfvwrite_r+0x12c>
 8013a40:	e712      	b.n	8013868 <__sfvwrite_r+0x10>
 8013a42:	003a      	movs	r2, r7
 8013a44:	9802      	ldr	r0, [sp, #8]
 8013a46:	f7fe fd5d 	bl	8012504 <_realloc_r>
 8013a4a:	1e06      	subs	r6, r0, #0
 8013a4c:	d1d7      	bne.n	80139fe <__sfvwrite_r+0x1a6>
 8013a4e:	6921      	ldr	r1, [r4, #16]
 8013a50:	9802      	ldr	r0, [sp, #8]
 8013a52:	f7f9 ff79 	bl	800d948 <_free_r>
 8013a56:	2280      	movs	r2, #128	; 0x80
 8013a58:	89a3      	ldrh	r3, [r4, #12]
 8013a5a:	4393      	bics	r3, r2
 8013a5c:	81a3      	strh	r3, [r4, #12]
 8013a5e:	e7b9      	b.n	80139d4 <__sfvwrite_r+0x17c>
 8013a60:	6923      	ldr	r3, [r4, #16]
 8013a62:	4283      	cmp	r3, r0
 8013a64:	d302      	bcc.n	8013a6c <__sfvwrite_r+0x214>
 8013a66:	6967      	ldr	r7, [r4, #20]
 8013a68:	42af      	cmp	r7, r5
 8013a6a:	d916      	bls.n	8013a9a <__sfvwrite_r+0x242>
 8013a6c:	42ae      	cmp	r6, r5
 8013a6e:	d900      	bls.n	8013a72 <__sfvwrite_r+0x21a>
 8013a70:	002e      	movs	r6, r5
 8013a72:	0032      	movs	r2, r6
 8013a74:	9903      	ldr	r1, [sp, #12]
 8013a76:	f000 f956 	bl	8013d26 <memmove>
 8013a7a:	68a3      	ldr	r3, [r4, #8]
 8013a7c:	6822      	ldr	r2, [r4, #0]
 8013a7e:	1b9b      	subs	r3, r3, r6
 8013a80:	1992      	adds	r2, r2, r6
 8013a82:	0037      	movs	r7, r6
 8013a84:	60a3      	str	r3, [r4, #8]
 8013a86:	6022      	str	r2, [r4, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d1cf      	bne.n	8013a2c <__sfvwrite_r+0x1d4>
 8013a8c:	0021      	movs	r1, r4
 8013a8e:	9802      	ldr	r0, [sp, #8]
 8013a90:	f7fd fd46 	bl	8011520 <_fflush_r>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d0c9      	beq.n	8013a2c <__sfvwrite_r+0x1d4>
 8013a98:	e79f      	b.n	80139da <__sfvwrite_r+0x182>
 8013a9a:	4b1c      	ldr	r3, [pc, #112]	; (8013b0c <__sfvwrite_r+0x2b4>)
 8013a9c:	0028      	movs	r0, r5
 8013a9e:	429d      	cmp	r5, r3
 8013aa0:	d900      	bls.n	8013aa4 <__sfvwrite_r+0x24c>
 8013aa2:	481b      	ldr	r0, [pc, #108]	; (8013b10 <__sfvwrite_r+0x2b8>)
 8013aa4:	0039      	movs	r1, r7
 8013aa6:	f7ec fbd3 	bl	8000250 <__divsi3>
 8013aaa:	003b      	movs	r3, r7
 8013aac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013aae:	4343      	muls	r3, r0
 8013ab0:	9a03      	ldr	r2, [sp, #12]
 8013ab2:	69e1      	ldr	r1, [r4, #28]
 8013ab4:	9802      	ldr	r0, [sp, #8]
 8013ab6:	47b0      	blx	r6
 8013ab8:	1e07      	subs	r7, r0, #0
 8013aba:	dcb7      	bgt.n	8013a2c <__sfvwrite_r+0x1d4>
 8013abc:	e78d      	b.n	80139da <__sfvwrite_r+0x182>
 8013abe:	9b01      	ldr	r3, [sp, #4]
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	681e      	ldr	r6, [r3, #0]
 8013ac4:	685b      	ldr	r3, [r3, #4]
 8013ac6:	9303      	str	r3, [sp, #12]
 8013ac8:	9b01      	ldr	r3, [sp, #4]
 8013aca:	3308      	adds	r3, #8
 8013acc:	9301      	str	r3, [sp, #4]
 8013ace:	e6e6      	b.n	801389e <__sfvwrite_r+0x46>
 8013ad0:	9a05      	ldr	r2, [sp, #20]
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	dc08      	bgt.n	8013ae8 <__sfvwrite_r+0x290>
 8013ad6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013ad8:	0032      	movs	r2, r6
 8013ada:	69e1      	ldr	r1, [r4, #28]
 8013adc:	9802      	ldr	r0, [sp, #8]
 8013ade:	47a8      	blx	r5
 8013ae0:	1e05      	subs	r5, r0, #0
 8013ae2:	dd00      	ble.n	8013ae6 <__sfvwrite_r+0x28e>
 8013ae4:	e70a      	b.n	80138fc <__sfvwrite_r+0xa4>
 8013ae6:	e778      	b.n	80139da <__sfvwrite_r+0x182>
 8013ae8:	9a05      	ldr	r2, [sp, #20]
 8013aea:	0031      	movs	r1, r6
 8013aec:	f000 f91b 	bl	8013d26 <memmove>
 8013af0:	9a05      	ldr	r2, [sp, #20]
 8013af2:	68a3      	ldr	r3, [r4, #8]
 8013af4:	0015      	movs	r5, r2
 8013af6:	1a9b      	subs	r3, r3, r2
 8013af8:	60a3      	str	r3, [r4, #8]
 8013afa:	6823      	ldr	r3, [r4, #0]
 8013afc:	189b      	adds	r3, r3, r2
 8013afe:	6023      	str	r3, [r4, #0]
 8013b00:	e6fc      	b.n	80138fc <__sfvwrite_r+0xa4>
 8013b02:	46c0      	nop			; (mov r8, r8)
 8013b04:	7ffffc00 	.word	0x7ffffc00
 8013b08:	fffffb7f 	.word	0xfffffb7f
 8013b0c:	7ffffffe 	.word	0x7ffffffe
 8013b10:	7fffffff 	.word	0x7fffffff

08013b14 <__submore>:
 8013b14:	000b      	movs	r3, r1
 8013b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b18:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8013b1a:	3340      	adds	r3, #64	; 0x40
 8013b1c:	000c      	movs	r4, r1
 8013b1e:	429d      	cmp	r5, r3
 8013b20:	d11c      	bne.n	8013b5c <__submore+0x48>
 8013b22:	2680      	movs	r6, #128	; 0x80
 8013b24:	00f6      	lsls	r6, r6, #3
 8013b26:	0031      	movs	r1, r6
 8013b28:	f7f8 fa54 	bl	800bfd4 <_malloc_r>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d102      	bne.n	8013b36 <__submore+0x22>
 8013b30:	2001      	movs	r0, #1
 8013b32:	4240      	negs	r0, r0
 8013b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013b36:	0023      	movs	r3, r4
 8013b38:	6320      	str	r0, [r4, #48]	; 0x30
 8013b3a:	6366      	str	r6, [r4, #52]	; 0x34
 8013b3c:	3342      	adds	r3, #66	; 0x42
 8013b3e:	781a      	ldrb	r2, [r3, #0]
 8013b40:	4b10      	ldr	r3, [pc, #64]	; (8013b84 <__submore+0x70>)
 8013b42:	54c2      	strb	r2, [r0, r3]
 8013b44:	0023      	movs	r3, r4
 8013b46:	3341      	adds	r3, #65	; 0x41
 8013b48:	781a      	ldrb	r2, [r3, #0]
 8013b4a:	4b0f      	ldr	r3, [pc, #60]	; (8013b88 <__submore+0x74>)
 8013b4c:	54c2      	strb	r2, [r0, r3]
 8013b4e:	782a      	ldrb	r2, [r5, #0]
 8013b50:	4b0e      	ldr	r3, [pc, #56]	; (8013b8c <__submore+0x78>)
 8013b52:	54c2      	strb	r2, [r0, r3]
 8013b54:	18c0      	adds	r0, r0, r3
 8013b56:	6020      	str	r0, [r4, #0]
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e7eb      	b.n	8013b34 <__submore+0x20>
 8013b5c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8013b5e:	0029      	movs	r1, r5
 8013b60:	0073      	lsls	r3, r6, #1
 8013b62:	001a      	movs	r2, r3
 8013b64:	9301      	str	r3, [sp, #4]
 8013b66:	f7fe fccd 	bl	8012504 <_realloc_r>
 8013b6a:	1e05      	subs	r5, r0, #0
 8013b6c:	d0e0      	beq.n	8013b30 <__submore+0x1c>
 8013b6e:	1987      	adds	r7, r0, r6
 8013b70:	0001      	movs	r1, r0
 8013b72:	0032      	movs	r2, r6
 8013b74:	0038      	movs	r0, r7
 8013b76:	f7f9 fe6c 	bl	800d852 <memcpy>
 8013b7a:	9b01      	ldr	r3, [sp, #4]
 8013b7c:	6027      	str	r7, [r4, #0]
 8013b7e:	6325      	str	r5, [r4, #48]	; 0x30
 8013b80:	6363      	str	r3, [r4, #52]	; 0x34
 8013b82:	e7e9      	b.n	8013b58 <__submore+0x44>
 8013b84:	000003ff 	.word	0x000003ff
 8013b88:	000003fe 	.word	0x000003fe
 8013b8c:	000003fd 	.word	0x000003fd

08013b90 <__swsetup_r>:
 8013b90:	4b30      	ldr	r3, [pc, #192]	; (8013c54 <__swsetup_r+0xc4>)
 8013b92:	b570      	push	{r4, r5, r6, lr}
 8013b94:	0005      	movs	r5, r0
 8013b96:	6818      	ldr	r0, [r3, #0]
 8013b98:	000c      	movs	r4, r1
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d004      	beq.n	8013ba8 <__swsetup_r+0x18>
 8013b9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d101      	bne.n	8013ba8 <__swsetup_r+0x18>
 8013ba4:	f7f9 fc2a 	bl	800d3fc <__sinit>
 8013ba8:	230c      	movs	r3, #12
 8013baa:	5ee2      	ldrsh	r2, [r4, r3]
 8013bac:	b293      	uxth	r3, r2
 8013bae:	0711      	lsls	r1, r2, #28
 8013bb0:	d423      	bmi.n	8013bfa <__swsetup_r+0x6a>
 8013bb2:	06d9      	lsls	r1, r3, #27
 8013bb4:	d407      	bmi.n	8013bc6 <__swsetup_r+0x36>
 8013bb6:	2309      	movs	r3, #9
 8013bb8:	2001      	movs	r0, #1
 8013bba:	602b      	str	r3, [r5, #0]
 8013bbc:	3337      	adds	r3, #55	; 0x37
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	81a3      	strh	r3, [r4, #12]
 8013bc2:	4240      	negs	r0, r0
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
 8013bc6:	075b      	lsls	r3, r3, #29
 8013bc8:	d513      	bpl.n	8013bf2 <__swsetup_r+0x62>
 8013bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013bcc:	2900      	cmp	r1, #0
 8013bce:	d008      	beq.n	8013be2 <__swsetup_r+0x52>
 8013bd0:	0023      	movs	r3, r4
 8013bd2:	3340      	adds	r3, #64	; 0x40
 8013bd4:	4299      	cmp	r1, r3
 8013bd6:	d002      	beq.n	8013bde <__swsetup_r+0x4e>
 8013bd8:	0028      	movs	r0, r5
 8013bda:	f7f9 feb5 	bl	800d948 <_free_r>
 8013bde:	2300      	movs	r3, #0
 8013be0:	6323      	str	r3, [r4, #48]	; 0x30
 8013be2:	2224      	movs	r2, #36	; 0x24
 8013be4:	89a3      	ldrh	r3, [r4, #12]
 8013be6:	4393      	bics	r3, r2
 8013be8:	81a3      	strh	r3, [r4, #12]
 8013bea:	2300      	movs	r3, #0
 8013bec:	6063      	str	r3, [r4, #4]
 8013bee:	6923      	ldr	r3, [r4, #16]
 8013bf0:	6023      	str	r3, [r4, #0]
 8013bf2:	2308      	movs	r3, #8
 8013bf4:	89a2      	ldrh	r2, [r4, #12]
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	81a3      	strh	r3, [r4, #12]
 8013bfa:	6923      	ldr	r3, [r4, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d10b      	bne.n	8013c18 <__swsetup_r+0x88>
 8013c00:	21a0      	movs	r1, #160	; 0xa0
 8013c02:	2280      	movs	r2, #128	; 0x80
 8013c04:	89a3      	ldrh	r3, [r4, #12]
 8013c06:	0089      	lsls	r1, r1, #2
 8013c08:	0092      	lsls	r2, r2, #2
 8013c0a:	400b      	ands	r3, r1
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d003      	beq.n	8013c18 <__swsetup_r+0x88>
 8013c10:	0021      	movs	r1, r4
 8013c12:	0028      	movs	r0, r5
 8013c14:	f000 f8e8 	bl	8013de8 <__smakebuf_r>
 8013c18:	220c      	movs	r2, #12
 8013c1a:	5ea3      	ldrsh	r3, [r4, r2]
 8013c1c:	2001      	movs	r0, #1
 8013c1e:	001a      	movs	r2, r3
 8013c20:	b299      	uxth	r1, r3
 8013c22:	4002      	ands	r2, r0
 8013c24:	4203      	tst	r3, r0
 8013c26:	d00f      	beq.n	8013c48 <__swsetup_r+0xb8>
 8013c28:	2200      	movs	r2, #0
 8013c2a:	60a2      	str	r2, [r4, #8]
 8013c2c:	6962      	ldr	r2, [r4, #20]
 8013c2e:	4252      	negs	r2, r2
 8013c30:	61a2      	str	r2, [r4, #24]
 8013c32:	2000      	movs	r0, #0
 8013c34:	6922      	ldr	r2, [r4, #16]
 8013c36:	4282      	cmp	r2, r0
 8013c38:	d1c4      	bne.n	8013bc4 <__swsetup_r+0x34>
 8013c3a:	0609      	lsls	r1, r1, #24
 8013c3c:	d5c2      	bpl.n	8013bc4 <__swsetup_r+0x34>
 8013c3e:	2240      	movs	r2, #64	; 0x40
 8013c40:	4313      	orrs	r3, r2
 8013c42:	81a3      	strh	r3, [r4, #12]
 8013c44:	3801      	subs	r0, #1
 8013c46:	e7bd      	b.n	8013bc4 <__swsetup_r+0x34>
 8013c48:	0788      	lsls	r0, r1, #30
 8013c4a:	d400      	bmi.n	8013c4e <__swsetup_r+0xbe>
 8013c4c:	6962      	ldr	r2, [r4, #20]
 8013c4e:	60a2      	str	r2, [r4, #8]
 8013c50:	e7ef      	b.n	8013c32 <__swsetup_r+0xa2>
 8013c52:	46c0      	nop			; (mov r8, r8)
 8013c54:	200006d0 	.word	0x200006d0

08013c58 <__fputwc>:
 8013c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c5a:	b085      	sub	sp, #20
 8013c5c:	000e      	movs	r6, r1
 8013c5e:	0015      	movs	r5, r2
 8013c60:	9001      	str	r0, [sp, #4]
 8013c62:	f7f9 fd55 	bl	800d710 <__locale_mb_cur_max>
 8013c66:	0004      	movs	r4, r0
 8013c68:	2801      	cmp	r0, #1
 8013c6a:	d119      	bne.n	8013ca0 <__fputwc+0x48>
 8013c6c:	1e73      	subs	r3, r6, #1
 8013c6e:	2bfe      	cmp	r3, #254	; 0xfe
 8013c70:	d816      	bhi.n	8013ca0 <__fputwc+0x48>
 8013c72:	ab02      	add	r3, sp, #8
 8013c74:	711e      	strb	r6, [r3, #4]
 8013c76:	2700      	movs	r7, #0
 8013c78:	42a7      	cmp	r7, r4
 8013c7a:	d020      	beq.n	8013cbe <__fputwc+0x66>
 8013c7c:	ab03      	add	r3, sp, #12
 8013c7e:	5dd9      	ldrb	r1, [r3, r7]
 8013c80:	68ab      	ldr	r3, [r5, #8]
 8013c82:	3b01      	subs	r3, #1
 8013c84:	60ab      	str	r3, [r5, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	da04      	bge.n	8013c94 <__fputwc+0x3c>
 8013c8a:	69aa      	ldr	r2, [r5, #24]
 8013c8c:	4293      	cmp	r3, r2
 8013c8e:	db19      	blt.n	8013cc4 <__fputwc+0x6c>
 8013c90:	290a      	cmp	r1, #10
 8013c92:	d017      	beq.n	8013cc4 <__fputwc+0x6c>
 8013c94:	682b      	ldr	r3, [r5, #0]
 8013c96:	1c5a      	adds	r2, r3, #1
 8013c98:	602a      	str	r2, [r5, #0]
 8013c9a:	7019      	strb	r1, [r3, #0]
 8013c9c:	3701      	adds	r7, #1
 8013c9e:	e7eb      	b.n	8013c78 <__fputwc+0x20>
 8013ca0:	002b      	movs	r3, r5
 8013ca2:	0032      	movs	r2, r6
 8013ca4:	9801      	ldr	r0, [sp, #4]
 8013ca6:	335c      	adds	r3, #92	; 0x5c
 8013ca8:	a903      	add	r1, sp, #12
 8013caa:	f000 f857 	bl	8013d5c <_wcrtomb_r>
 8013cae:	0004      	movs	r4, r0
 8013cb0:	1c43      	adds	r3, r0, #1
 8013cb2:	d1e0      	bne.n	8013c76 <__fputwc+0x1e>
 8013cb4:	2340      	movs	r3, #64	; 0x40
 8013cb6:	0006      	movs	r6, r0
 8013cb8:	89aa      	ldrh	r2, [r5, #12]
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	81ab      	strh	r3, [r5, #12]
 8013cbe:	0030      	movs	r0, r6
 8013cc0:	b005      	add	sp, #20
 8013cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc4:	002a      	movs	r2, r5
 8013cc6:	9801      	ldr	r0, [sp, #4]
 8013cc8:	f000 f8cc 	bl	8013e64 <__swbuf_r>
 8013ccc:	1c43      	adds	r3, r0, #1
 8013cce:	d1e5      	bne.n	8013c9c <__fputwc+0x44>
 8013cd0:	0006      	movs	r6, r0
 8013cd2:	e7f4      	b.n	8013cbe <__fputwc+0x66>

08013cd4 <_fputwc_r>:
 8013cd4:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013cd6:	b570      	push	{r4, r5, r6, lr}
 8013cd8:	0005      	movs	r5, r0
 8013cda:	000e      	movs	r6, r1
 8013cdc:	0014      	movs	r4, r2
 8013cde:	07db      	lsls	r3, r3, #31
 8013ce0:	d405      	bmi.n	8013cee <_fputwc_r+0x1a>
 8013ce2:	8993      	ldrh	r3, [r2, #12]
 8013ce4:	059b      	lsls	r3, r3, #22
 8013ce6:	d402      	bmi.n	8013cee <_fputwc_r+0x1a>
 8013ce8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8013cea:	f7f9 fda5 	bl	800d838 <__retarget_lock_acquire_recursive>
 8013cee:	230c      	movs	r3, #12
 8013cf0:	5ee2      	ldrsh	r2, [r4, r3]
 8013cf2:	2380      	movs	r3, #128	; 0x80
 8013cf4:	019b      	lsls	r3, r3, #6
 8013cf6:	421a      	tst	r2, r3
 8013cf8:	d104      	bne.n	8013d04 <_fputwc_r+0x30>
 8013cfa:	431a      	orrs	r2, r3
 8013cfc:	81a2      	strh	r2, [r4, #12]
 8013cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d00:	4313      	orrs	r3, r2
 8013d02:	6663      	str	r3, [r4, #100]	; 0x64
 8013d04:	0028      	movs	r0, r5
 8013d06:	0022      	movs	r2, r4
 8013d08:	0031      	movs	r1, r6
 8013d0a:	f7ff ffa5 	bl	8013c58 <__fputwc>
 8013d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d10:	0005      	movs	r5, r0
 8013d12:	07db      	lsls	r3, r3, #31
 8013d14:	d405      	bmi.n	8013d22 <_fputwc_r+0x4e>
 8013d16:	89a3      	ldrh	r3, [r4, #12]
 8013d18:	059b      	lsls	r3, r3, #22
 8013d1a:	d402      	bmi.n	8013d22 <_fputwc_r+0x4e>
 8013d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d1e:	f7f9 fd8c 	bl	800d83a <__retarget_lock_release_recursive>
 8013d22:	0028      	movs	r0, r5
 8013d24:	bd70      	pop	{r4, r5, r6, pc}

08013d26 <memmove>:
 8013d26:	b510      	push	{r4, lr}
 8013d28:	4288      	cmp	r0, r1
 8013d2a:	d902      	bls.n	8013d32 <memmove+0xc>
 8013d2c:	188b      	adds	r3, r1, r2
 8013d2e:	4298      	cmp	r0, r3
 8013d30:	d303      	bcc.n	8013d3a <memmove+0x14>
 8013d32:	2300      	movs	r3, #0
 8013d34:	e007      	b.n	8013d46 <memmove+0x20>
 8013d36:	5c8b      	ldrb	r3, [r1, r2]
 8013d38:	5483      	strb	r3, [r0, r2]
 8013d3a:	3a01      	subs	r2, #1
 8013d3c:	d2fb      	bcs.n	8013d36 <memmove+0x10>
 8013d3e:	bd10      	pop	{r4, pc}
 8013d40:	5ccc      	ldrb	r4, [r1, r3]
 8013d42:	54c4      	strb	r4, [r0, r3]
 8013d44:	3301      	adds	r3, #1
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d1fa      	bne.n	8013d40 <memmove+0x1a>
 8013d4a:	e7f8      	b.n	8013d3e <memmove+0x18>

08013d4c <abort>:
 8013d4c:	2006      	movs	r0, #6
 8013d4e:	b510      	push	{r4, lr}
 8013d50:	f000 f906 	bl	8013f60 <raise>
 8013d54:	2001      	movs	r0, #1
 8013d56:	f7f0 facf 	bl	80042f8 <_exit>
	...

08013d5c <_wcrtomb_r>:
 8013d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013d5e:	001d      	movs	r5, r3
 8013d60:	4b09      	ldr	r3, [pc, #36]	; (8013d88 <_wcrtomb_r+0x2c>)
 8013d62:	0004      	movs	r4, r0
 8013d64:	33e0      	adds	r3, #224	; 0xe0
 8013d66:	681e      	ldr	r6, [r3, #0]
 8013d68:	002b      	movs	r3, r5
 8013d6a:	2900      	cmp	r1, #0
 8013d6c:	d101      	bne.n	8013d72 <_wcrtomb_r+0x16>
 8013d6e:	000a      	movs	r2, r1
 8013d70:	a901      	add	r1, sp, #4
 8013d72:	0020      	movs	r0, r4
 8013d74:	47b0      	blx	r6
 8013d76:	1c43      	adds	r3, r0, #1
 8013d78:	d103      	bne.n	8013d82 <_wcrtomb_r+0x26>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	602b      	str	r3, [r5, #0]
 8013d7e:	338a      	adds	r3, #138	; 0x8a
 8013d80:	6023      	str	r3, [r4, #0]
 8013d82:	b004      	add	sp, #16
 8013d84:	bd70      	pop	{r4, r5, r6, pc}
 8013d86:	46c0      	nop			; (mov r8, r8)
 8013d88:	20000444 	.word	0x20000444

08013d8c <__swhatbuf_r>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	000e      	movs	r6, r1
 8013d90:	001d      	movs	r5, r3
 8013d92:	230e      	movs	r3, #14
 8013d94:	5ec9      	ldrsh	r1, [r1, r3]
 8013d96:	0014      	movs	r4, r2
 8013d98:	b096      	sub	sp, #88	; 0x58
 8013d9a:	2900      	cmp	r1, #0
 8013d9c:	da09      	bge.n	8013db2 <__swhatbuf_r+0x26>
 8013d9e:	89b2      	ldrh	r2, [r6, #12]
 8013da0:	2380      	movs	r3, #128	; 0x80
 8013da2:	0011      	movs	r1, r2
 8013da4:	4019      	ands	r1, r3
 8013da6:	421a      	tst	r2, r3
 8013da8:	d018      	beq.n	8013ddc <__swhatbuf_r+0x50>
 8013daa:	2100      	movs	r1, #0
 8013dac:	3b40      	subs	r3, #64	; 0x40
 8013dae:	0008      	movs	r0, r1
 8013db0:	e010      	b.n	8013dd4 <__swhatbuf_r+0x48>
 8013db2:	466a      	mov	r2, sp
 8013db4:	f000 f8de 	bl	8013f74 <_fstat_r>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	dbf0      	blt.n	8013d9e <__swhatbuf_r+0x12>
 8013dbc:	23f0      	movs	r3, #240	; 0xf0
 8013dbe:	9901      	ldr	r1, [sp, #4]
 8013dc0:	021b      	lsls	r3, r3, #8
 8013dc2:	4019      	ands	r1, r3
 8013dc4:	4b07      	ldr	r3, [pc, #28]	; (8013de4 <__swhatbuf_r+0x58>)
 8013dc6:	2080      	movs	r0, #128	; 0x80
 8013dc8:	18c9      	adds	r1, r1, r3
 8013dca:	424b      	negs	r3, r1
 8013dcc:	4159      	adcs	r1, r3
 8013dce:	2380      	movs	r3, #128	; 0x80
 8013dd0:	0100      	lsls	r0, r0, #4
 8013dd2:	00db      	lsls	r3, r3, #3
 8013dd4:	6029      	str	r1, [r5, #0]
 8013dd6:	6023      	str	r3, [r4, #0]
 8013dd8:	b016      	add	sp, #88	; 0x58
 8013dda:	bd70      	pop	{r4, r5, r6, pc}
 8013ddc:	2380      	movs	r3, #128	; 0x80
 8013dde:	00db      	lsls	r3, r3, #3
 8013de0:	e7e5      	b.n	8013dae <__swhatbuf_r+0x22>
 8013de2:	46c0      	nop			; (mov r8, r8)
 8013de4:	ffffe000 	.word	0xffffe000

08013de8 <__smakebuf_r>:
 8013de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dea:	2602      	movs	r6, #2
 8013dec:	898b      	ldrh	r3, [r1, #12]
 8013dee:	0005      	movs	r5, r0
 8013df0:	000c      	movs	r4, r1
 8013df2:	4233      	tst	r3, r6
 8013df4:	d006      	beq.n	8013e04 <__smakebuf_r+0x1c>
 8013df6:	0023      	movs	r3, r4
 8013df8:	3343      	adds	r3, #67	; 0x43
 8013dfa:	6023      	str	r3, [r4, #0]
 8013dfc:	6123      	str	r3, [r4, #16]
 8013dfe:	2301      	movs	r3, #1
 8013e00:	6163      	str	r3, [r4, #20]
 8013e02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013e04:	466a      	mov	r2, sp
 8013e06:	ab01      	add	r3, sp, #4
 8013e08:	f7ff ffc0 	bl	8013d8c <__swhatbuf_r>
 8013e0c:	9900      	ldr	r1, [sp, #0]
 8013e0e:	0007      	movs	r7, r0
 8013e10:	0028      	movs	r0, r5
 8013e12:	f7f8 f8df 	bl	800bfd4 <_malloc_r>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d108      	bne.n	8013e2c <__smakebuf_r+0x44>
 8013e1a:	220c      	movs	r2, #12
 8013e1c:	5ea3      	ldrsh	r3, [r4, r2]
 8013e1e:	059a      	lsls	r2, r3, #22
 8013e20:	d4ef      	bmi.n	8013e02 <__smakebuf_r+0x1a>
 8013e22:	2203      	movs	r2, #3
 8013e24:	4393      	bics	r3, r2
 8013e26:	431e      	orrs	r6, r3
 8013e28:	81a6      	strh	r6, [r4, #12]
 8013e2a:	e7e4      	b.n	8013df6 <__smakebuf_r+0xe>
 8013e2c:	2380      	movs	r3, #128	; 0x80
 8013e2e:	89a2      	ldrh	r2, [r4, #12]
 8013e30:	6020      	str	r0, [r4, #0]
 8013e32:	4313      	orrs	r3, r2
 8013e34:	81a3      	strh	r3, [r4, #12]
 8013e36:	9b00      	ldr	r3, [sp, #0]
 8013e38:	6120      	str	r0, [r4, #16]
 8013e3a:	6163      	str	r3, [r4, #20]
 8013e3c:	9b01      	ldr	r3, [sp, #4]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d00c      	beq.n	8013e5c <__smakebuf_r+0x74>
 8013e42:	0028      	movs	r0, r5
 8013e44:	230e      	movs	r3, #14
 8013e46:	5ee1      	ldrsh	r1, [r4, r3]
 8013e48:	f000 f8a6 	bl	8013f98 <_isatty_r>
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	d005      	beq.n	8013e5c <__smakebuf_r+0x74>
 8013e50:	2303      	movs	r3, #3
 8013e52:	89a2      	ldrh	r2, [r4, #12]
 8013e54:	439a      	bics	r2, r3
 8013e56:	3b02      	subs	r3, #2
 8013e58:	4313      	orrs	r3, r2
 8013e5a:	81a3      	strh	r3, [r4, #12]
 8013e5c:	89a3      	ldrh	r3, [r4, #12]
 8013e5e:	433b      	orrs	r3, r7
 8013e60:	81a3      	strh	r3, [r4, #12]
 8013e62:	e7ce      	b.n	8013e02 <__smakebuf_r+0x1a>

08013e64 <__swbuf_r>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	0006      	movs	r6, r0
 8013e68:	000d      	movs	r5, r1
 8013e6a:	0014      	movs	r4, r2
 8013e6c:	2800      	cmp	r0, #0
 8013e6e:	d004      	beq.n	8013e7a <__swbuf_r+0x16>
 8013e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d101      	bne.n	8013e7a <__swbuf_r+0x16>
 8013e76:	f7f9 fac1 	bl	800d3fc <__sinit>
 8013e7a:	69a3      	ldr	r3, [r4, #24]
 8013e7c:	60a3      	str	r3, [r4, #8]
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	071b      	lsls	r3, r3, #28
 8013e82:	d52e      	bpl.n	8013ee2 <__swbuf_r+0x7e>
 8013e84:	6923      	ldr	r3, [r4, #16]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d02b      	beq.n	8013ee2 <__swbuf_r+0x7e>
 8013e8a:	230c      	movs	r3, #12
 8013e8c:	5ee2      	ldrsh	r2, [r4, r3]
 8013e8e:	2380      	movs	r3, #128	; 0x80
 8013e90:	019b      	lsls	r3, r3, #6
 8013e92:	b2ef      	uxtb	r7, r5
 8013e94:	b2ed      	uxtb	r5, r5
 8013e96:	421a      	tst	r2, r3
 8013e98:	d02c      	beq.n	8013ef4 <__swbuf_r+0x90>
 8013e9a:	6923      	ldr	r3, [r4, #16]
 8013e9c:	6820      	ldr	r0, [r4, #0]
 8013e9e:	1ac0      	subs	r0, r0, r3
 8013ea0:	6963      	ldr	r3, [r4, #20]
 8013ea2:	4283      	cmp	r3, r0
 8013ea4:	dc05      	bgt.n	8013eb2 <__swbuf_r+0x4e>
 8013ea6:	0021      	movs	r1, r4
 8013ea8:	0030      	movs	r0, r6
 8013eaa:	f7fd fb39 	bl	8011520 <_fflush_r>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d11d      	bne.n	8013eee <__swbuf_r+0x8a>
 8013eb2:	68a3      	ldr	r3, [r4, #8]
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	60a3      	str	r3, [r4, #8]
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	1c5a      	adds	r2, r3, #1
 8013ebe:	6022      	str	r2, [r4, #0]
 8013ec0:	701f      	strb	r7, [r3, #0]
 8013ec2:	6963      	ldr	r3, [r4, #20]
 8013ec4:	4283      	cmp	r3, r0
 8013ec6:	d004      	beq.n	8013ed2 <__swbuf_r+0x6e>
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	07db      	lsls	r3, r3, #31
 8013ecc:	d507      	bpl.n	8013ede <__swbuf_r+0x7a>
 8013ece:	2d0a      	cmp	r5, #10
 8013ed0:	d105      	bne.n	8013ede <__swbuf_r+0x7a>
 8013ed2:	0021      	movs	r1, r4
 8013ed4:	0030      	movs	r0, r6
 8013ed6:	f7fd fb23 	bl	8011520 <_fflush_r>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d107      	bne.n	8013eee <__swbuf_r+0x8a>
 8013ede:	0028      	movs	r0, r5
 8013ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ee2:	0021      	movs	r1, r4
 8013ee4:	0030      	movs	r0, r6
 8013ee6:	f7ff fe53 	bl	8013b90 <__swsetup_r>
 8013eea:	2800      	cmp	r0, #0
 8013eec:	d0cd      	beq.n	8013e8a <__swbuf_r+0x26>
 8013eee:	2501      	movs	r5, #1
 8013ef0:	426d      	negs	r5, r5
 8013ef2:	e7f4      	b.n	8013ede <__swbuf_r+0x7a>
 8013ef4:	4313      	orrs	r3, r2
 8013ef6:	81a3      	strh	r3, [r4, #12]
 8013ef8:	4a02      	ldr	r2, [pc, #8]	; (8013f04 <__swbuf_r+0xa0>)
 8013efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013efc:	4013      	ands	r3, r2
 8013efe:	6663      	str	r3, [r4, #100]	; 0x64
 8013f00:	e7cb      	b.n	8013e9a <__swbuf_r+0x36>
 8013f02:	46c0      	nop			; (mov r8, r8)
 8013f04:	ffffdfff 	.word	0xffffdfff

08013f08 <_raise_r>:
 8013f08:	b570      	push	{r4, r5, r6, lr}
 8013f0a:	0004      	movs	r4, r0
 8013f0c:	000d      	movs	r5, r1
 8013f0e:	291f      	cmp	r1, #31
 8013f10:	d904      	bls.n	8013f1c <_raise_r+0x14>
 8013f12:	2316      	movs	r3, #22
 8013f14:	6003      	str	r3, [r0, #0]
 8013f16:	2001      	movs	r0, #1
 8013f18:	4240      	negs	r0, r0
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	0003      	movs	r3, r0
 8013f1e:	33fc      	adds	r3, #252	; 0xfc
 8013f20:	69db      	ldr	r3, [r3, #28]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d004      	beq.n	8013f30 <_raise_r+0x28>
 8013f26:	008a      	lsls	r2, r1, #2
 8013f28:	189b      	adds	r3, r3, r2
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	2a00      	cmp	r2, #0
 8013f2e:	d108      	bne.n	8013f42 <_raise_r+0x3a>
 8013f30:	0020      	movs	r0, r4
 8013f32:	f000 f855 	bl	8013fe0 <_getpid_r>
 8013f36:	002a      	movs	r2, r5
 8013f38:	0001      	movs	r1, r0
 8013f3a:	0020      	movs	r0, r4
 8013f3c:	f000 f83e 	bl	8013fbc <_kill_r>
 8013f40:	e7eb      	b.n	8013f1a <_raise_r+0x12>
 8013f42:	2000      	movs	r0, #0
 8013f44:	2a01      	cmp	r2, #1
 8013f46:	d0e8      	beq.n	8013f1a <_raise_r+0x12>
 8013f48:	1c51      	adds	r1, r2, #1
 8013f4a:	d103      	bne.n	8013f54 <_raise_r+0x4c>
 8013f4c:	2316      	movs	r3, #22
 8013f4e:	3001      	adds	r0, #1
 8013f50:	6023      	str	r3, [r4, #0]
 8013f52:	e7e2      	b.n	8013f1a <_raise_r+0x12>
 8013f54:	2400      	movs	r4, #0
 8013f56:	0028      	movs	r0, r5
 8013f58:	601c      	str	r4, [r3, #0]
 8013f5a:	4790      	blx	r2
 8013f5c:	0020      	movs	r0, r4
 8013f5e:	e7dc      	b.n	8013f1a <_raise_r+0x12>

08013f60 <raise>:
 8013f60:	b510      	push	{r4, lr}
 8013f62:	4b03      	ldr	r3, [pc, #12]	; (8013f70 <raise+0x10>)
 8013f64:	0001      	movs	r1, r0
 8013f66:	6818      	ldr	r0, [r3, #0]
 8013f68:	f7ff ffce 	bl	8013f08 <_raise_r>
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	46c0      	nop			; (mov r8, r8)
 8013f70:	200006d0 	.word	0x200006d0

08013f74 <_fstat_r>:
 8013f74:	2300      	movs	r3, #0
 8013f76:	b570      	push	{r4, r5, r6, lr}
 8013f78:	4d06      	ldr	r5, [pc, #24]	; (8013f94 <_fstat_r+0x20>)
 8013f7a:	0004      	movs	r4, r0
 8013f7c:	0008      	movs	r0, r1
 8013f7e:	0011      	movs	r1, r2
 8013f80:	602b      	str	r3, [r5, #0]
 8013f82:	f7f0 fa08 	bl	8004396 <_fstat>
 8013f86:	1c43      	adds	r3, r0, #1
 8013f88:	d103      	bne.n	8013f92 <_fstat_r+0x1e>
 8013f8a:	682b      	ldr	r3, [r5, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d000      	beq.n	8013f92 <_fstat_r+0x1e>
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	bd70      	pop	{r4, r5, r6, pc}
 8013f94:	20000dc4 	.word	0x20000dc4

08013f98 <_isatty_r>:
 8013f98:	2300      	movs	r3, #0
 8013f9a:	b570      	push	{r4, r5, r6, lr}
 8013f9c:	4d06      	ldr	r5, [pc, #24]	; (8013fb8 <_isatty_r+0x20>)
 8013f9e:	0004      	movs	r4, r0
 8013fa0:	0008      	movs	r0, r1
 8013fa2:	602b      	str	r3, [r5, #0]
 8013fa4:	f7f0 fa05 	bl	80043b2 <_isatty>
 8013fa8:	1c43      	adds	r3, r0, #1
 8013faa:	d103      	bne.n	8013fb4 <_isatty_r+0x1c>
 8013fac:	682b      	ldr	r3, [r5, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d000      	beq.n	8013fb4 <_isatty_r+0x1c>
 8013fb2:	6023      	str	r3, [r4, #0]
 8013fb4:	bd70      	pop	{r4, r5, r6, pc}
 8013fb6:	46c0      	nop			; (mov r8, r8)
 8013fb8:	20000dc4 	.word	0x20000dc4

08013fbc <_kill_r>:
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	b570      	push	{r4, r5, r6, lr}
 8013fc0:	4d06      	ldr	r5, [pc, #24]	; (8013fdc <_kill_r+0x20>)
 8013fc2:	0004      	movs	r4, r0
 8013fc4:	0008      	movs	r0, r1
 8013fc6:	0011      	movs	r1, r2
 8013fc8:	602b      	str	r3, [r5, #0]
 8013fca:	f7f0 f985 	bl	80042d8 <_kill>
 8013fce:	1c43      	adds	r3, r0, #1
 8013fd0:	d103      	bne.n	8013fda <_kill_r+0x1e>
 8013fd2:	682b      	ldr	r3, [r5, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d000      	beq.n	8013fda <_kill_r+0x1e>
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	20000dc4 	.word	0x20000dc4

08013fe0 <_getpid_r>:
 8013fe0:	b510      	push	{r4, lr}
 8013fe2:	f7f0 f973 	bl	80042cc <_getpid>
 8013fe6:	bd10      	pop	{r4, pc}

08013fe8 <round>:
 8013fe8:	b570      	push	{r4, r5, r6, lr}
 8013fea:	004a      	lsls	r2, r1, #1
 8013fec:	000d      	movs	r5, r1
 8013fee:	4920      	ldr	r1, [pc, #128]	; (8014070 <round+0x88>)
 8013ff0:	0d52      	lsrs	r2, r2, #21
 8013ff2:	1851      	adds	r1, r2, r1
 8013ff4:	0006      	movs	r6, r0
 8013ff6:	2913      	cmp	r1, #19
 8013ff8:	dc18      	bgt.n	801402c <round+0x44>
 8013ffa:	2900      	cmp	r1, #0
 8013ffc:	da09      	bge.n	8014012 <round+0x2a>
 8013ffe:	0feb      	lsrs	r3, r5, #31
 8014000:	2200      	movs	r2, #0
 8014002:	07db      	lsls	r3, r3, #31
 8014004:	3101      	adds	r1, #1
 8014006:	d101      	bne.n	801400c <round+0x24>
 8014008:	491a      	ldr	r1, [pc, #104]	; (8014074 <round+0x8c>)
 801400a:	430b      	orrs	r3, r1
 801400c:	0019      	movs	r1, r3
 801400e:	0010      	movs	r0, r2
 8014010:	e017      	b.n	8014042 <round+0x5a>
 8014012:	4c19      	ldr	r4, [pc, #100]	; (8014078 <round+0x90>)
 8014014:	410c      	asrs	r4, r1
 8014016:	0022      	movs	r2, r4
 8014018:	402a      	ands	r2, r5
 801401a:	4302      	orrs	r2, r0
 801401c:	d013      	beq.n	8014046 <round+0x5e>
 801401e:	2280      	movs	r2, #128	; 0x80
 8014020:	0312      	lsls	r2, r2, #12
 8014022:	410a      	asrs	r2, r1
 8014024:	1953      	adds	r3, r2, r5
 8014026:	43a3      	bics	r3, r4
 8014028:	2200      	movs	r2, #0
 801402a:	e7ef      	b.n	801400c <round+0x24>
 801402c:	2933      	cmp	r1, #51	; 0x33
 801402e:	dd0d      	ble.n	801404c <round+0x64>
 8014030:	2380      	movs	r3, #128	; 0x80
 8014032:	00db      	lsls	r3, r3, #3
 8014034:	4299      	cmp	r1, r3
 8014036:	d106      	bne.n	8014046 <round+0x5e>
 8014038:	0002      	movs	r2, r0
 801403a:	002b      	movs	r3, r5
 801403c:	0029      	movs	r1, r5
 801403e:	f7ec fbbb 	bl	80007b8 <__aeabi_dadd>
 8014042:	0006      	movs	r6, r0
 8014044:	000d      	movs	r5, r1
 8014046:	0030      	movs	r0, r6
 8014048:	0029      	movs	r1, r5
 801404a:	bd70      	pop	{r4, r5, r6, pc}
 801404c:	4c0b      	ldr	r4, [pc, #44]	; (801407c <round+0x94>)
 801404e:	1912      	adds	r2, r2, r4
 8014050:	2401      	movs	r4, #1
 8014052:	4264      	negs	r4, r4
 8014054:	40d4      	lsrs	r4, r2
 8014056:	4220      	tst	r0, r4
 8014058:	d0f5      	beq.n	8014046 <round+0x5e>
 801405a:	2233      	movs	r2, #51	; 0x33
 801405c:	1a51      	subs	r1, r2, r1
 801405e:	3a32      	subs	r2, #50	; 0x32
 8014060:	408a      	lsls	r2, r1
 8014062:	1812      	adds	r2, r2, r0
 8014064:	4282      	cmp	r2, r0
 8014066:	4180      	sbcs	r0, r0
 8014068:	4240      	negs	r0, r0
 801406a:	182b      	adds	r3, r5, r0
 801406c:	43a2      	bics	r2, r4
 801406e:	e7cd      	b.n	801400c <round+0x24>
 8014070:	fffffc01 	.word	0xfffffc01
 8014074:	3ff00000 	.word	0x3ff00000
 8014078:	000fffff 	.word	0x000fffff
 801407c:	fffffbed 	.word	0xfffffbed

08014080 <_init>:
 8014080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014082:	46c0      	nop			; (mov r8, r8)
 8014084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014086:	bc08      	pop	{r3}
 8014088:	469e      	mov	lr, r3
 801408a:	4770      	bx	lr

0801408c <_fini>:
 801408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801408e:	46c0      	nop			; (mov r8, r8)
 8014090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014092:	bc08      	pop	{r3}
 8014094:	469e      	mov	lr, r3
 8014096:	4770      	bx	lr
