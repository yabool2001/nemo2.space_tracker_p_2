
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ce8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  08012da8  08012da8  00022da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e94  08014e94  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014e94  08014e94  00024e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e9c  08014e9c  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014e9c  08014e9c  00024e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ea4  08014ea4  00024ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014ea8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200006d8  08015580  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f44  08015580  00030f44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a10d  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003adb  00000000  00000000  0004a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0004e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001354  00000000  00000000  0004fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fd3  00000000  00000000  00050f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f60f  00000000  00000000  00072f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb54b  00000000  00000000  0009251e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074cc  00000000  00000000  0015da6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00164f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012d8c 	.word	0x08012d8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012d8c 	.word	0x08012d8c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014904 	.word	0x08014904
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46c6      	mov	lr, r8
 80025ac:	b500      	push	{lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f001 fe43 	bl	800423c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 f9e9 	bl	800298c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ba:	f000 fc7b 	bl	8002eb4 <MX_GPIO_Init>
  MX_RTC_Init();
 80025be:	f000 fa3b 	bl	8002a38 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c2:	f000 fb1b 	bl	8002bfc <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c6:	f000 fadb 	bl	8002b80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025ca:	f000 fb55 	bl	8002c78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ce:	f000 fba1 	bl	8002d14 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d2:	f000 fbed 	bl	8002db0 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d6:	f000 fc39 	bl	8002e4c <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025da:	4bd5      	ldr	r3, [pc, #852]	; (8002930 <main+0x388>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fd74 	bl	80030cc <send_debug_logs>

  my_sys_init () ;
 80025e4:	f000 fda2 	bl	800312c <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025e8:	4bd2      	ldr	r3, [pc, #840]	; (8002934 <main+0x38c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	49d2      	ldr	r1, [pc, #840]	; (8002938 <main+0x390>)
 80025f0:	4bd2      	ldr	r3, [pc, #840]	; (800293c <main+0x394>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f009 fdf0 	bl	800c1d8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025f8:	4bd0      	ldr	r3, [pc, #832]	; (800293c <main+0x394>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fd66 	bl	80030cc <send_debug_logs>

  my_tim_init () ;
 8002600:	f001 fa1e 	bl	8003a40 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002604:	2002      	movs	r0, #2
 8002606:	f001 f8fd 	bl	8003804 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260a:	f001 f92d 	bl	8003868 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800260e:	4bcc      	ldr	r3, [pc, #816]	; (8002940 <main+0x398>)
 8002610:	0018      	movs	r0, r3
 8002612:	f007 fa0d 	bl	8009a30 <my_gnss_acq_coordinates>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	4bca      	ldr	r3, [pc, #808]	; (8002944 <main+0x39c>)
 800261c:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 800261e:	f001 f93d 	bl	800389c <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002622:	4bc9      	ldr	r3, [pc, #804]	; (8002948 <main+0x3a0>)
 8002624:	0018      	movs	r0, r3
 8002626:	f007 fb89 	bl	8009d3c <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262a:	4bc5      	ldr	r3, [pc, #788]	; (8002940 <main+0x398>)
 800262c:	7c1b      	ldrb	r3, [r3, #16]
 800262e:	001e      	movs	r6, r3
 8002630:	4bc3      	ldr	r3, [pc, #780]	; (8002940 <main+0x398>)
 8002632:	689c      	ldr	r4, [r3, #8]
 8002634:	68dd      	ldr	r5, [r3, #12]
 8002636:	4bc2      	ldr	r3, [pc, #776]	; (8002940 <main+0x398>)
 8002638:	8a5b      	ldrh	r3, [r3, #18]
 800263a:	4698      	mov	r8, r3
 800263c:	4bc0      	ldr	r3, [pc, #768]	; (8002940 <main+0x398>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	213c      	movs	r1, #60	; 0x3c
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd7a 	bl	800013c <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	4ac0      	ldr	r2, [pc, #768]	; (800294c <main+0x3a4>)
 800264c:	49c0      	ldr	r1, [pc, #768]	; (8002950 <main+0x3a8>)
 800264e:	48bb      	ldr	r0, [pc, #748]	; (800293c <main+0x394>)
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	4643      	mov	r3, r8
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	9402      	str	r4, [sp, #8]
 8002658:	9503      	str	r5, [sp, #12]
 800265a:	9601      	str	r6, [sp, #4]
 800265c:	4bba      	ldr	r3, [pc, #744]	; (8002948 <main+0x3a0>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23bb      	movs	r3, #187	; 0xbb
 8002662:	f009 fdb9 	bl	800c1d8 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002666:	4bb5      	ldr	r3, [pc, #724]	; (800293c <main+0x394>)
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fd2f 	bl	80030cc <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 800266e:	4bb5      	ldr	r3, [pc, #724]	; (8002944 <main+0x39c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4053      	eors	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d027      	beq.n	80026cc <main+0x124>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267c:	4bb5      	ldr	r3, [pc, #724]	; (8002954 <main+0x3ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f007 fb9d 	bl	8009dc0 <my_rtc_set_alarm>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d020      	beq.n	80026cc <main+0x124>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268a:	4ab0      	ldr	r2, [pc, #704]	; (800294c <main+0x3a4>)
 800268c:	49b2      	ldr	r1, [pc, #712]	; (8002958 <main+0x3b0>)
 800268e:	48ab      	ldr	r0, [pc, #684]	; (800293c <main+0x394>)
 8002690:	23c1      	movs	r3, #193	; 0xc1
 8002692:	f009 fda1 	bl	800c1d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002696:	4ba9      	ldr	r3, [pc, #676]	; (800293c <main+0x394>)
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fd17 	bl	80030cc <send_debug_logs>
		  my_tim_stop () ;
 800269e:	f001 f9eb 	bl	8003a78 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a2:	4bae      	ldr	r3, [pc, #696]	; (800295c <main+0x3b4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026a8:	f002 fa90 	bl	8004bcc <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ac:	4ba6      	ldr	r3, [pc, #664]	; (8002948 <main+0x3a0>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f007 fb44 	bl	8009d3c <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b4:	4aa5      	ldr	r2, [pc, #660]	; (800294c <main+0x3a4>)
 80026b6:	49aa      	ldr	r1, [pc, #680]	; (8002960 <main+0x3b8>)
 80026b8:	48a0      	ldr	r0, [pc, #640]	; (800293c <main+0x394>)
 80026ba:	4ba3      	ldr	r3, [pc, #652]	; (8002948 <main+0x3a0>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	23c7      	movs	r3, #199	; 0xc7
 80026c0:	f009 fd8a 	bl	800c1d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c4:	4b9d      	ldr	r3, [pc, #628]	; (800293c <main+0x394>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fd00 	bl	80030cc <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026cc:	f007 f8fe 	bl	80098cc <my_astro_init>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4053      	eors	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <main+0x154>
	  my_sys_restart () ;
 80026de:	f000 fdc3 	bl	8003268 <my_sys_restart>
 80026e2:	e087      	b.n	80027f4 <main+0x24c>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026e4:	4a99      	ldr	r2, [pc, #612]	; (800294c <main+0x3a4>)
 80026e6:	499f      	ldr	r1, [pc, #636]	; (8002964 <main+0x3bc>)
 80026e8:	4894      	ldr	r0, [pc, #592]	; (800293c <main+0x394>)
 80026ea:	23d2      	movs	r3, #210	; 0xd2
 80026ec:	f009 fd74 	bl	800c1d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <main+0x394>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 fcea 	bl	80030cc <send_debug_logs>
		  my_astro_handle_evt () ;
 80026f8:	f007 f948 	bl	800998c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80026fc:	f001 f980 	bl	8003a00 <my_astro_evt_pin>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d1ef      	bne.n	80026e4 <main+0x13c>
	  }
	  if ( sys_mode == 0 ) // Present sys_mode if other than production
 8002704:	4b8b      	ldr	r3, [pc, #556]	; (8002934 <main+0x38c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11d      	bne.n	8002748 <main+0x1a0>
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800270c:	4b96      	ldr	r3, [pc, #600]	; (8002968 <main+0x3c0>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	4698      	mov	r8, r3
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <main+0x398>)
 8002714:	689c      	ldr	r4, [r3, #8]
 8002716:	68dd      	ldr	r5, [r3, #12]
 8002718:	4b89      	ldr	r3, [pc, #548]	; (8002940 <main+0x398>)
 800271a:	8a5b      	ldrh	r3, [r3, #18]
 800271c:	001e      	movs	r6, r3
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <main+0x398>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	213c      	movs	r1, #60	; 0x3c
 8002724:	0018      	movs	r0, r3
 8002726:	f7fd fd09 	bl	800013c <__udivsi3>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	4b8f      	ldr	r3, [pc, #572]	; (800296c <main+0x3c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	498f      	ldr	r1, [pc, #572]	; (8002970 <main+0x3c8>)
 8002734:	488f      	ldr	r0, [pc, #572]	; (8002974 <main+0x3cc>)
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	9203      	str	r2, [sp, #12]
 800273a:	9602      	str	r6, [sp, #8]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	9501      	str	r5, [sp, #4]
 8002740:	4642      	mov	r2, r8
 8002742:	f009 fd49 	bl	800c1d8 <sprintf>
 8002746:	e020      	b.n	800278a <main+0x1e2>
	  else
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s,%u" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv , (uint16_t) sys_mode ) ;
 8002748:	4b87      	ldr	r3, [pc, #540]	; (8002968 <main+0x3c0>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4698      	mov	r8, r3
 800274e:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <main+0x398>)
 8002750:	689c      	ldr	r4, [r3, #8]
 8002752:	68dd      	ldr	r5, [r3, #12]
 8002754:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <main+0x398>)
 8002756:	8a5b      	ldrh	r3, [r3, #18]
 8002758:	001e      	movs	r6, r3
 800275a:	4b79      	ldr	r3, [pc, #484]	; (8002940 <main+0x398>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	213c      	movs	r1, #60	; 0x3c
 8002760:	0018      	movs	r0, r3
 8002762:	f7fd fceb 	bl	800013c <__udivsi3>
 8002766:	0003      	movs	r3, r0
 8002768:	469c      	mov	ip, r3
 800276a:	4b80      	ldr	r3, [pc, #512]	; (800296c <main+0x3c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a71      	ldr	r2, [pc, #452]	; (8002934 <main+0x38c>)
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4981      	ldr	r1, [pc, #516]	; (8002978 <main+0x3d0>)
 8002774:	487f      	ldr	r0, [pc, #508]	; (8002974 <main+0x3cc>)
 8002776:	9205      	str	r2, [sp, #20]
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	4663      	mov	r3, ip
 800277c:	9303      	str	r3, [sp, #12]
 800277e:	9602      	str	r6, [sp, #8]
 8002780:	9400      	str	r4, [sp, #0]
 8002782:	9501      	str	r5, [sp, #4]
 8002784:	4642      	mov	r2, r8
 8002786:	f009 fd27 	bl	800c1d8 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800278a:	4a70      	ldr	r2, [pc, #448]	; (800294c <main+0x3a4>)
 800278c:	497b      	ldr	r1, [pc, #492]	; (800297c <main+0x3d4>)
 800278e:	486b      	ldr	r0, [pc, #428]	; (800293c <main+0x394>)
 8002790:	4b78      	ldr	r3, [pc, #480]	; (8002974 <main+0x3cc>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	23da      	movs	r3, #218	; 0xda
 8002796:	f009 fd1f 	bl	800c1d8 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800279a:	4b68      	ldr	r3, [pc, #416]	; (800293c <main+0x394>)
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fc95 	bl	80030cc <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <main+0x398>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b66      	ldr	r3, [pc, #408]	; (8002940 <main+0x398>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f007 f92f 	bl	8009a10 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <main+0x3c0>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	b291      	uxth	r1, r2
 80027ba:	4a6b      	ldr	r2, [pc, #428]	; (8002968 <main+0x3c0>)
 80027bc:	8011      	strh	r1, [r2, #0]
 80027be:	4a6d      	ldr	r2, [pc, #436]	; (8002974 <main+0x3cc>)
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f007 f8ba 	bl	800993c <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027c8:	4b62      	ldr	r3, [pc, #392]	; (8002954 <main+0x3ac>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f007 faf7 	bl	8009dc0 <my_rtc_set_alarm>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d00e      	beq.n	80027f4 <main+0x24c>
	  {
		  my_sys_deepsleep () ;
 80027d6:	f000 fd6b 	bl	80032b0 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027da:	e00b      	b.n	80027f4 <main+0x24c>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027dc:	4a5b      	ldr	r2, [pc, #364]	; (800294c <main+0x3a4>)
 80027de:	4961      	ldr	r1, [pc, #388]	; (8002964 <main+0x3bc>)
 80027e0:	4856      	ldr	r0, [pc, #344]	; (800293c <main+0x394>)
 80027e2:	23ec      	movs	r3, #236	; 0xec
 80027e4:	f009 fcf8 	bl	800c1d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027e8:	4b54      	ldr	r3, [pc, #336]	; (800293c <main+0x394>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fc6e 	bl	80030cc <send_debug_logs>
		  my_astro_handle_evt () ;
 80027f0:	f007 f8cc 	bl	800998c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027f4:	f001 f904 	bl	8003a00 <my_astro_evt_pin>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d1ef      	bne.n	80027dc <main+0x234>
	  }
	  if ( astro_rcv_cmd_flag )
 80027fc:	4b60      	ldr	r3, [pc, #384]	; (8002980 <main+0x3d8>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <main+0x26c>
	  {
		  astro_rcv_cmd_flag = false ;
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <main+0x3d8>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 800280a:	f000 fe23 	bl	8003454 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <main+0x3dc>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002814:	4b51      	ldr	r3, [pc, #324]	; (800295c <main+0x3b4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <main+0x276>
 800281c:	e07d      	b.n	800291a <main+0x372>
	  {
		  my_rtc_alarm_flag = false ;
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <main+0x3b4>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002824:	f001 f820 	bl	8003868 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002828:	4b45      	ldr	r3, [pc, #276]	; (8002940 <main+0x398>)
 800282a:	0018      	movs	r0, r3
 800282c:	f007 f900 	bl	8009a30 <my_gnss_acq_coordinates>
 8002830:	0003      	movs	r3, r0
 8002832:	001a      	movs	r2, r3
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <main+0x39c>)
 8002836:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002838:	f001 f830 	bl	800389c <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <main+0x3a0>)
 800283e:	0018      	movs	r0, r3
 8002840:	f007 fa7c 	bl	8009d3c <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <main+0x398>)
 8002846:	7c1b      	ldrb	r3, [r3, #16]
 8002848:	001e      	movs	r6, r3
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <main+0x398>)
 800284c:	689c      	ldr	r4, [r3, #8]
 800284e:	68dd      	ldr	r5, [r3, #12]
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <main+0x398>)
 8002852:	8a5b      	ldrh	r3, [r3, #18]
 8002854:	4698      	mov	r8, r3
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <main+0x398>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	213c      	movs	r1, #60	; 0x3c
 800285c:	0018      	movs	r0, r3
 800285e:	f7fd fc6d 	bl	800013c <__udivsi3>
 8002862:	0003      	movs	r3, r0
 8002864:	4a39      	ldr	r2, [pc, #228]	; (800294c <main+0x3a4>)
 8002866:	493a      	ldr	r1, [pc, #232]	; (8002950 <main+0x3a8>)
 8002868:	4834      	ldr	r0, [pc, #208]	; (800293c <main+0x394>)
 800286a:	9305      	str	r3, [sp, #20]
 800286c:	4643      	mov	r3, r8
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	9402      	str	r4, [sp, #8]
 8002872:	9503      	str	r5, [sp, #12]
 8002874:	9601      	str	r6, [sp, #4]
 8002876:	4b34      	ldr	r3, [pc, #208]	; (8002948 <main+0x3a0>)
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	23fd      	movs	r3, #253	; 0xfd
 800287c:	f009 fcac 	bl	800c1d8 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <main+0x394>)
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fc22 	bl	80030cc <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <main+0x39c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d044      	beq.n	800291a <main+0x372>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002890:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <main+0x398>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <main+0x398>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0019      	movs	r1, r3
 800289a:	0010      	movs	r0, r2
 800289c:	f007 f8b8 	bl	8009a10 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <main+0x3c0>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	4698      	mov	r8, r3
 80028a6:	4b26      	ldr	r3, [pc, #152]	; (8002940 <main+0x398>)
 80028a8:	689c      	ldr	r4, [r3, #8]
 80028aa:	68dd      	ldr	r5, [r3, #12]
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <main+0x398>)
 80028ae:	8a5b      	ldrh	r3, [r3, #18]
 80028b0:	001e      	movs	r6, r3
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <main+0x398>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	213c      	movs	r1, #60	; 0x3c
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fc3f 	bl	800013c <__udivsi3>
 80028be:	0003      	movs	r3, r0
 80028c0:	469c      	mov	ip, r3
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <main+0x398>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <main+0x398>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	492f      	ldr	r1, [pc, #188]	; (8002988 <main+0x3e0>)
 80028cc:	4829      	ldr	r0, [pc, #164]	; (8002974 <main+0x3cc>)
 80028ce:	9305      	str	r3, [sp, #20]
 80028d0:	9204      	str	r2, [sp, #16]
 80028d2:	4663      	mov	r3, ip
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	9602      	str	r6, [sp, #8]
 80028d8:	9400      	str	r4, [sp, #0]
 80028da:	9501      	str	r5, [sp, #4]
 80028dc:	4642      	mov	r2, r8
 80028de:	f009 fc7b 	bl	800c1d8 <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <main+0x3c0>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	b291      	uxth	r1, r2
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <main+0x3c0>)
 80028ec:	8011      	strh	r1, [r2, #0]
 80028ee:	4a21      	ldr	r2, [pc, #132]	; (8002974 <main+0x3cc>)
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f007 f822 	bl	800993c <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 80028f8:	f001 f894 	bl	8003a24 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 80028fc:	2306      	movs	r3, #6
 80028fe:	33ff      	adds	r3, #255	; 0xff
 8002900:	001c      	movs	r4, r3
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <main+0x3a4>)
 8002904:	491d      	ldr	r1, [pc, #116]	; (800297c <main+0x3d4>)
 8002906:	480d      	ldr	r0, [pc, #52]	; (800293c <main+0x394>)
 8002908:	4b1a      	ldr	r3, [pc, #104]	; (8002974 <main+0x3cc>)
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	0023      	movs	r3, r4
 800290e:	f009 fc63 	bl	800c1d8 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <main+0x394>)
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fbd9 	bl	80030cc <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <main+0x3ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0018      	movs	r0, r3
 8002920:	f007 fa4e 	bl	8009dc0 <my_rtc_set_alarm>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d100      	bne.n	800292a <main+0x382>
 8002928:	e764      	b.n	80027f4 <main+0x24c>
	  {
		  my_sys_deepsleep () ;
 800292a:	f000 fcc1 	bl	80032b0 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 800292e:	e761      	b.n	80027f4 <main+0x24c>
 8002930:	20000000 	.word	0x20000000
 8002934:	20000a22 	.word	0x20000a22
 8002938:	08012dd8 	.word	0x08012dd8
 800293c:	20000b10 	.word	0x20000b10
 8002940:	20000ae8 	.word	0x20000ae8
 8002944:	20000b01 	.word	0x20000b01
 8002948:	20000a24 	.word	0x20000a24
 800294c:	08012de8 	.word	0x08012de8
 8002950:	08012dfc 	.word	0x08012dfc
 8002954:	2000000c 	.word	0x2000000c
 8002958:	08012e3c 	.word	0x08012e3c
 800295c:	20000b00 	.word	0x20000b00
 8002960:	08012e5c 	.word	0x08012e5c
 8002964:	08012e68 	.word	0x08012e68
 8002968:	20000ae4 	.word	0x20000ae4
 800296c:	20000004 	.word	0x20000004
 8002970:	08012e80 	.word	0x08012e80
 8002974:	20000a38 	.word	0x20000a38
 8002978:	08012e94 	.word	0x08012e94
 800297c:	08012eac 	.word	0x08012eac
 8002980:	20000c0a 	.word	0x20000c0a
 8002984:	20000c0c 	.word	0x20000c0c
 8002988:	08012ec0 	.word	0x08012ec0

0800298c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b095      	sub	sp, #84	; 0x54
 8002990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002992:	2414      	movs	r4, #20
 8002994:	193b      	adds	r3, r7, r4
 8002996:	0018      	movs	r0, r3
 8002998:	233c      	movs	r3, #60	; 0x3c
 800299a:	001a      	movs	r2, r3
 800299c:	2100      	movs	r1, #0
 800299e:	f009 fcb1 	bl	800c304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	0018      	movs	r0, r3
 80029a6:	2310      	movs	r3, #16
 80029a8:	001a      	movs	r2, r3
 80029aa:	2100      	movs	r1, #0
 80029ac:	f009 fcaa 	bl	800c304 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	0018      	movs	r0, r3
 80029b6:	f002 f923 	bl	8004c00 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029ba:	f002 f8c1 	bl	8004b40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <SystemClock_Config+0xa8>)
 80029c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <SystemClock_Config+0xa8>)
 80029c4:	2118      	movs	r1, #24
 80029c6:	438a      	bics	r2, r1
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2206      	movs	r2, #6
 80029ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2201      	movs	r2, #1
 80029d4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	0052      	lsls	r2, r2, #1
 80029dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	2240      	movs	r2, #64	; 0x40
 80029e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	0018      	movs	r0, r3
 80029f4:	f002 f950 	bl	8004c98 <HAL_RCC_OscConfig>
 80029f8:	1e03      	subs	r3, r0, #0
 80029fa:	d001      	beq.n	8002a00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80029fc:	f001 f882 	bl	8003b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	2207      	movs	r2, #7
 8002a04:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f002 fc9b 	bl	8005358 <HAL_RCC_ClockConfig>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d001      	beq.n	8002a2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a26:	f001 f86d 	bl	8003b04 <Error_Handler>
  }
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b015      	add	sp, #84	; 0x54
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000

08002a38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b090      	sub	sp, #64	; 0x40
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a3e:	232c      	movs	r3, #44	; 0x2c
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	0018      	movs	r0, r3
 8002a44:	2314      	movs	r3, #20
 8002a46:	001a      	movs	r2, r3
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f009 fc5b 	bl	800c304 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a4e:	2328      	movs	r3, #40	; 0x28
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a56:	003b      	movs	r3, r7
 8002a58:	0018      	movs	r0, r3
 8002a5a:	2328      	movs	r3, #40	; 0x28
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	2100      	movs	r1, #0
 8002a60:	f009 fc50 	bl	800c304 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a64:	4b44      	ldr	r3, [pc, #272]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a66:	4a45      	ldr	r2, [pc, #276]	; (8002b7c <MX_RTC_Init+0x144>)
 8002a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a6a:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a70:	4b41      	ldr	r3, [pc, #260]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a72:	227f      	movs	r2, #127	; 0x7f
 8002a74:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a76:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a78:	22ff      	movs	r2, #255	; 0xff
 8002a7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a88:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	05d2      	lsls	r2, r2, #23
 8002a94:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <MX_RTC_Init+0x140>)
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f003 f840 	bl	8005b24 <HAL_RTC_Init>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d001      	beq.n	8002aac <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002aa8:	f001 f82c 	bl	8003b04 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002acc:	187b      	adds	r3, r7, r1
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ad2:	1879      	adds	r1, r7, r1
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <MX_RTC_Init+0x140>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f003 f8c5 	bl	8005c68 <HAL_RTC_SetTime>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002ae2:	f001 f80f 	bl	8003b04 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002ae6:	2128      	movs	r1, #40	; 0x28
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2206      	movs	r2, #6
 8002aec:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2201      	movs	r2, #1
 8002af2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2201      	movs	r2, #1
 8002af8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2200      	movs	r2, #0
 8002afe:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b00:	1879      	adds	r1, r7, r1
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_RTC_Init+0x140>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	0018      	movs	r0, r3
 8002b08:	f003 f9b2 	bl	8005e70 <HAL_RTC_SetDate>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b10:	f000 fff8 	bl	8003b04 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b14:	003b      	movs	r3, r7
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b1a:	003b      	movs	r3, r7
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b20:	003b      	movs	r3, r7
 8002b22:	2200      	movs	r2, #0
 8002b24:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b26:	003b      	movs	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b32:	003b      	movs	r3, r7
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b38:	003b      	movs	r3, r7
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b3e:	003b      	movs	r3, r7
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b44:	003b      	movs	r3, r7
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b4a:	003b      	movs	r3, r7
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b52:	003b      	movs	r3, r7
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0052      	lsls	r2, r2, #1
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b5a:	0039      	movs	r1, r7
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <MX_RTC_Init+0x140>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	0018      	movs	r0, r3
 8002b62:	f003 fa65 	bl	8006030 <HAL_RTC_SetAlarm_IT>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b6a:	f000 ffcb 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b010      	add	sp, #64	; 0x40
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	200006f4 	.word	0x200006f4
 8002b7c:	40002800 	.word	0x40002800

08002b80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_SPI1_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b8c:	2282      	movs	r2, #130	; 0x82
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002b9a:	22e0      	movs	r2, #224	; 0xe0
 8002b9c:	00d2      	lsls	r2, r2, #3
 8002b9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bae:	2280      	movs	r2, #128	; 0x80
 8002bb0:	0092      	lsls	r2, r2, #2
 8002bb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bce:	2207      	movs	r2, #7
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002bda:	2208      	movs	r2, #8
 8002bdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <MX_SPI1_Init+0x74>)
 8002be0:	0018      	movs	r0, r3
 8002be2:	f003 fd05 	bl	80065f0 <HAL_SPI_Init>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bea:	f000 ff8b 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000720 	.word	0x20000720
 8002bf8:	40013000 	.word	0x40013000

08002bfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	0018      	movs	r0, r3
 8002c06:	230c      	movs	r3, #12
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f009 fb7a 	bl	800c304 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c12:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <MX_TIM6_Init+0x70>)
 8002c14:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <MX_TIM6_Init+0x74>)
 8002c1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <MX_TIM6_Init+0x78>)
 8002c26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c30:	0018      	movs	r0, r3
 8002c32:	f003 fd95 	bl	8006760 <HAL_TIM_Base_Init>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c3a:	f000 ff63 	bl	8003b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c44:	1d3b      	adds	r3, r7, #4
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c4a:	1d3a      	adds	r2, r7, #4
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_TIM6_Init+0x6c>)
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f004 f82d 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c5a:	f000 ff53 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b004      	add	sp, #16
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	20000784 	.word	0x20000784
 8002c6c:	40001000 	.word	0x40001000
 8002c70:	00003e7f 	.word	0x00003e7f
 8002c74:	000003e7 	.word	0x000003e7

08002c78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c7c:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c7e:	4a24      	ldr	r2, [pc, #144]	; (8002d10 <MX_USART1_UART_Init+0x98>)
 8002c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c84:	22e1      	movs	r2, #225	; 0xe1
 8002c86:	0252      	lsls	r2, r2, #9
 8002c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb4:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f004 f882 	bl	8006dcc <HAL_UART_Init>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ccc:	f000 ff1a 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd0:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f005 f85d 	bl	8007d94 <HAL_UARTEx_SetTxFifoThreshold>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cde:	f000 ff11 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f005 f894 	bl	8007e14 <HAL_UARTEx_SetRxFifoThreshold>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002cf0:	f000 ff08 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <MX_USART1_UART_Init+0x94>)
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f005 f812 	bl	8007d20 <HAL_UARTEx_DisableFifoMode>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d00:	f000 ff00 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200007d0 	.word	0x200007d0
 8002d10:	40013800 	.word	0x40013800

08002d14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d1a:	4a24      	ldr	r2, [pc, #144]	; (8002dac <MX_USART2_UART_Init+0x98>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d20:	22e1      	movs	r2, #225	; 0xe1
 8002d22:	0252      	lsls	r2, r2, #9
 8002d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d56:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f004 f834 	bl	8006dcc <HAL_UART_Init>
 8002d64:	1e03      	subs	r3, r0, #0
 8002d66:	d001      	beq.n	8002d6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d68:	f000 fecc 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	0018      	movs	r0, r3
 8002d72:	f005 f80f 	bl	8007d94 <HAL_UARTEx_SetTxFifoThreshold>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d7a:	f000 fec3 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d80:	2100      	movs	r1, #0
 8002d82:	0018      	movs	r0, r3
 8002d84:	f005 f846 	bl	8007e14 <HAL_UARTEx_SetRxFifoThreshold>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d8c:	f000 feba 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <MX_USART2_UART_Init+0x94>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f004 ffc4 	bl	8007d20 <HAL_UARTEx_DisableFifoMode>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d9c:	f000 feb2 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	20000864 	.word	0x20000864
 8002dac:	40004400 	.word	0x40004400

08002db0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002db6:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <MX_USART3_UART_Init+0x98>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dbc:	2296      	movs	r2, #150	; 0x96
 8002dbe:	0192      	lsls	r2, r2, #6
 8002dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f003 ffe6 	bl	8006dcc <HAL_UART_Init>
 8002e00:	1e03      	subs	r3, r0, #0
 8002e02:	d001      	beq.n	8002e08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e04:	f000 fe7e 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f004 ffc1 	bl	8007d94 <HAL_UARTEx_SetTxFifoThreshold>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e16:	f000 fe75 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f004 fff8 	bl	8007e14 <HAL_UARTEx_SetRxFifoThreshold>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e28:	f000 fe6c 	bl	8003b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <MX_USART3_UART_Init+0x94>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f004 ff76 	bl	8007d20 <HAL_UARTEx_DisableFifoMode>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e38:	f000 fe64 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	200008f8 	.word	0x200008f8
 8002e48:	40004800 	.word	0x40004800

08002e4c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <MX_USART5_UART_Init+0x64>)
 8002e54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e58:	2296      	movs	r2, #150	; 0x96
 8002e5a:	0192      	lsls	r2, r2, #6
 8002e5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e72:	220c      	movs	r2, #12
 8002e74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <MX_USART5_UART_Init+0x60>)
 8002e96:	0018      	movs	r0, r3
 8002e98:	f003 ff98 	bl	8006dcc <HAL_UART_Init>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ea0:	f000 fe30 	bl	8003b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	2000098c 	.word	0x2000098c
 8002eb0:	40005000 	.word	0x40005000

08002eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b08b      	sub	sp, #44	; 0x2c
 8002eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	2414      	movs	r4, #20
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	2314      	movs	r3, #20
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f009 fa1d 	bl	800c304 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eca:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ece:	4b79      	ldr	r3, [pc, #484]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eda:	2204      	movs	r2, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee2:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34
 8002eee:	4b71      	ldr	r3, [pc, #452]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002f00:	2102      	movs	r1, #2
 8002f02:	430a      	orrs	r2, r1
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
 8002f06:	4b6b      	ldr	r3, [pc, #428]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f12:	4b68      	ldr	r3, [pc, #416]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002f18:	2108      	movs	r1, #8
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1e:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <MX_GPIO_Init+0x200>)
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	2208      	movs	r2, #8
 8002f24:	4013      	ands	r3, r2
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f2a:	23a0      	movs	r3, #160	; 0xa0
 8002f2c:	05db      	lsls	r3, r3, #23
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2110      	movs	r1, #16
 8002f32:	0018      	movs	r0, r3
 8002f34:	f001 fdb3 	bl	8004a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f38:	495f      	ldr	r1, [pc, #380]	; (80030b8 <MX_GPIO_Init+0x204>)
 8002f3a:	4b60      	ldr	r3, [pc, #384]	; (80030bc <MX_GPIO_Init+0x208>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 fdad 	bl	8004a9e <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	485c      	ldr	r0, [pc, #368]	; (80030bc <MX_GPIO_Init+0x208>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	f001 fda6 	bl	8004a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <MX_GPIO_Init+0x20c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	2103      	movs	r1, #3
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f001 fda0 	bl	8004a9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	2288      	movs	r2, #136	; 0x88
 8002f68:	0352      	lsls	r2, r2, #13
 8002f6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f72:	193a      	adds	r2, r7, r4
 8002f74:	23a0      	movs	r3, #160	; 0xa0
 8002f76:	05db      	lsls	r3, r3, #23
 8002f78:	0011      	movs	r1, r2
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f001 fb2e 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2202      	movs	r2, #2
 8002f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	193b      	adds	r3, r7, r4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	193b      	adds	r3, r7, r4
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002f92:	193a      	adds	r2, r7, r4
 8002f94:	23a0      	movs	r3, #160	; 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f001 fb1e 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fa0:	193b      	adds	r3, r7, r4
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	2201      	movs	r2, #1
 8002faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fb8:	193a      	adds	r2, r7, r4
 8002fba:	23a0      	movs	r3, #160	; 0xa0
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f001 fb0b 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fc6:	193b      	adds	r3, r7, r4
 8002fc8:	4a3e      	ldr	r2, [pc, #248]	; (80030c4 <MX_GPIO_Init+0x210>)
 8002fca:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	2201      	movs	r2, #1
 8002fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	2200      	movs	r2, #0
 8002fdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	4a36      	ldr	r2, [pc, #216]	; (80030bc <MX_GPIO_Init+0x208>)
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	0010      	movs	r0, r2
 8002fe6:	f001 faf9 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002fea:	0021      	movs	r1, r4
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	2288      	movs	r2, #136	; 0x88
 8002ff6:	0352      	lsls	r2, r2, #13
 8002ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	000c      	movs	r4, r1
 8003002:	187b      	adds	r3, r7, r1
 8003004:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <MX_GPIO_Init+0x208>)
 8003006:	0019      	movs	r1, r3
 8003008:	0010      	movs	r0, r2
 800300a:	f001 fae7 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800300e:	0021      	movs	r1, r4
 8003010:	187b      	adds	r3, r7, r1
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	0192      	lsls	r2, r2, #6
 8003016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003018:	000c      	movs	r4, r1
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2211      	movs	r2, #17
 800301e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	193b      	adds	r3, r7, r4
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	193b      	adds	r3, r7, r4
 8003028:	2200      	movs	r2, #0
 800302a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 800302c:	193b      	adds	r3, r7, r4
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <MX_GPIO_Init+0x208>)
 8003030:	0019      	movs	r1, r3
 8003032:	0010      	movs	r0, r2
 8003034:	f001 fad2 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <MX_GPIO_Init+0x214>)
 800303c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800303e:	193b      	adds	r3, r7, r4
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	193b      	adds	r3, r7, r4
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	193b      	adds	r3, r7, r4
 800304c:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <MX_GPIO_Init+0x208>)
 800304e:	0019      	movs	r1, r3
 8003050:	0010      	movs	r0, r2
 8003052:	f001 fac3 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003056:	193b      	adds	r3, r7, r4
 8003058:	2203      	movs	r2, #3
 800305a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305c:	193b      	adds	r3, r7, r4
 800305e:	2201      	movs	r2, #1
 8003060:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	193b      	adds	r3, r7, r4
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	193b      	adds	r3, r7, r4
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306e:	193b      	adds	r3, r7, r4
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <MX_GPIO_Init+0x20c>)
 8003072:	0019      	movs	r1, r3
 8003074:	0010      	movs	r0, r2
 8003076:	f001 fab1 	bl	80045dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800307a:	0021      	movs	r1, r4
 800307c:	187b      	adds	r3, r7, r1
 800307e:	220c      	movs	r2, #12
 8003080:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	2201      	movs	r2, #1
 800308c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800308e:	187b      	adds	r3, r7, r1
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <MX_GPIO_Init+0x20c>)
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f001 faa1 	bl	80045dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	2006      	movs	r0, #6
 80030a0:	f001 fa66 	bl	8004570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030a4:	2006      	movs	r0, #6
 80030a6:	f001 fa78 	bl	800459a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b00b      	add	sp, #44	; 0x2c
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	40021000 	.word	0x40021000
 80030b8:	0000a403 	.word	0x0000a403
 80030bc:	50000400 	.word	0x50000400
 80030c0:	50000c00 	.word	0x50000c00
 80030c4:	00008c03 	.word	0x00008c03
 80030c8:	00004040 	.word	0x00004040

080030cc <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0018      	movs	r0, r3
 80030d8:	f7fd f814 	bl	8000104 <strlen>
 80030dc:	0003      	movs	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2bfa      	cmp	r3, #250	; 0xfa
 80030e4:	d908      	bls.n	80030f8 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80030e6:	23fa      	movs	r3, #250	; 0xfa
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	490d      	ldr	r1, [pc, #52]	; (8003120 <send_debug_logs+0x54>)
 80030ec:	480d      	ldr	r0, [pc, #52]	; (8003124 <send_debug_logs+0x58>)
 80030ee:	222a      	movs	r2, #42	; 0x2a
 80030f0:	f003 ff02 	bl	8006ef8 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80030f4:	23fa      	movs	r3, #250	; 0xfa
 80030f6:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	23fa      	movs	r3, #250	; 0xfa
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4808      	ldr	r0, [pc, #32]	; (8003124 <send_debug_logs+0x58>)
 8003104:	f003 fef8 	bl	8006ef8 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003108:	23fa      	movs	r3, #250	; 0xfa
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <send_debug_logs+0x5c>)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <send_debug_logs+0x58>)
 8003110:	2201      	movs	r2, #1
 8003112:	f003 fef1 	bl	8006ef8 <HAL_UART_Transmit>
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	08012ed8 	.word	0x08012ed8
 8003124:	20000864 	.word	0x20000864
 8003128:	08012f04 	.word	0x08012f04

0800312c <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 8003130:	4b43      	ldr	r3, [pc, #268]	; (8003240 <my_sys_init+0x114>)
 8003132:	2200      	movs	r2, #0
 8003134:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003136:	4b42      	ldr	r3, [pc, #264]	; (8003240 <my_sys_init+0x114>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 800313c:	4b41      	ldr	r3, [pc, #260]	; (8003244 <my_sys_init+0x118>)
 800313e:	2104      	movs	r1, #4
 8003140:	0018      	movs	r0, r3
 8003142:	f001 fc8f 	bl	8004a64 <HAL_GPIO_ReadPin>
 8003146:	0003      	movs	r3, r0
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	4193      	sbcs	r3, r2
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <my_sys_init+0x11c>)
 8003150:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <my_sys_init+0x118>)
 8003154:	2108      	movs	r1, #8
 8003156:	0018      	movs	r0, r3
 8003158:	f001 fc84 	bl	8004a64 <HAL_GPIO_ReadPin>
 800315c:	0003      	movs	r3, r0
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	4193      	sbcs	r3, r2
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <my_sys_init+0x120>)
 8003166:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003168:	4b37      	ldr	r3, [pc, #220]	; (8003248 <my_sys_init+0x11c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2201      	movs	r2, #1
 800316e:	4053      	eors	r3, r2
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <my_sys_init+0x7e>
 8003176:	4b35      	ldr	r3, [pc, #212]	; (800324c <my_sys_init+0x120>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2201      	movs	r2, #1
 800317c:	4053      	eors	r3, r2
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d012      	beq.n	80031aa <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <my_sys_init+0x124>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <my_sys_init+0x128>)
 800318c:	22e1      	movs	r2, #225	; 0xe1
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 8003192:	4b31      	ldr	r3, [pc, #196]	; (8003258 <my_sys_init+0x12c>)
 8003194:	2278      	movs	r2, #120	; 0x78
 8003196:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <my_sys_init+0x130>)
 800319a:	221e      	movs	r2, #30
 800319c:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 800319e:	4930      	ldr	r1, [pc, #192]	; (8003260 <my_sys_init+0x134>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	05db      	lsls	r3, r3, #23
 80031a6:	600a      	str	r2, [r1, #0]
 80031a8:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <my_sys_init+0x11c>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <my_sys_init+0xba>
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <my_sys_init+0x120>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2201      	movs	r2, #1
 80031b8:	4053      	eors	r3, r2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <my_sys_init+0x124>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <my_sys_init+0x128>)
 80031c8:	22e1      	movs	r2, #225	; 0xe1
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <my_sys_init+0x12c>)
 80031d0:	2278      	movs	r2, #120	; 0x78
 80031d2:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <my_sys_init+0x130>)
 80031d6:	221e      	movs	r2, #30
 80031d8:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031da:	4921      	ldr	r1, [pc, #132]	; (8003260 <my_sys_init+0x134>)
 80031dc:	2200      	movs	r2, #0
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	600a      	str	r2, [r1, #0]
 80031e4:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <my_sys_init+0x11c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4053      	eors	r3, r2
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <my_sys_init+0xf6>
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <my_sys_init+0x120>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d012      	beq.n	8003222 <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <my_sys_init+0x124>)
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <my_sys_init+0x128>)
 8003204:	2296      	movs	r2, #150	; 0x96
 8003206:	0052      	lsls	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800320a:	4b13      	ldr	r3, [pc, #76]	; (8003258 <my_sys_init+0x12c>)
 800320c:	2296      	movs	r2, #150	; 0x96
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <my_sys_init+0x130>)
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003218:	4911      	ldr	r1, [pc, #68]	; (8003260 <my_sys_init+0x134>)
 800321a:	2200      	movs	r2, #0
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <my_sys_init+0x138>)
 800321e:	600a      	str	r2, [r1, #0]
 8003220:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <my_sys_init+0x11c>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <my_sys_init+0x10c>
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <my_sys_init+0x120>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <my_sys_init+0x124>)
 8003234:	2203      	movs	r2, #3
 8003236:	701a      	strb	r2, [r3, #0]
	}
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000ae8 	.word	0x20000ae8
 8003244:	50000c00 	.word	0x50000c00
 8003248:	20000a20 	.word	0x20000a20
 800324c:	20000a21 	.word	0x20000a21
 8003250:	20000a22 	.word	0x20000a22
 8003254:	2000000c 	.word	0x2000000c
 8003258:	2000001a 	.word	0x2000001a
 800325c:	2000001c 	.word	0x2000001c
 8003260:	20000020 	.word	0x20000020
 8003264:	40240000 	.word	0x40240000

08003268 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <my_sys_restart+0x34>)
 8003270:	0018      	movs	r0, r3
 8003272:	f006 fd63 	bl	8009d3c <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003276:	4c0a      	ldr	r4, [pc, #40]	; (80032a0 <my_sys_restart+0x38>)
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <my_sys_restart+0x3c>)
 800327a:	490b      	ldr	r1, [pc, #44]	; (80032a8 <my_sys_restart+0x40>)
 800327c:	480b      	ldr	r0, [pc, #44]	; (80032ac <my_sys_restart+0x44>)
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <my_sys_restart+0x34>)
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	0023      	movs	r3, r4
 8003284:	f008 ffa8 	bl	800c1d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <my_sys_restart+0x44>)
 800328a:	0018      	movs	r0, r3
 800328c:	f7ff ff1e 	bl	80030cc <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 8003290:	f001 f993 	bl	80045ba <HAL_NVIC_SystemReset>
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b001      	add	sp, #4
 800329a:	bd90      	pop	{r4, r7, pc}
 800329c:	20000a24 	.word	0x20000a24
 80032a0:	0000033d 	.word	0x0000033d
 80032a4:	08012de8 	.word	0x08012de8
 80032a8:	08012f08 	.word	0x08012f08
 80032ac:	20000b10 	.word	0x20000b10

080032b0 <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80032b6:	23d4      	movs	r3, #212	; 0xd4
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <my_sys_deepsleep+0x68>)
 80032bc:	4917      	ldr	r1, [pc, #92]	; (800331c <my_sys_deepsleep+0x6c>)
 80032be:	4818      	ldr	r0, [pc, #96]	; (8003320 <my_sys_deepsleep+0x70>)
 80032c0:	f008 ff8a 	bl	800c1d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <my_sys_deepsleep+0x70>)
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff00 	bl	80030cc <send_debug_logs>
	my_tim_stop () ;
 80032cc:	f000 fbd4 	bl	8003a78 <my_tim_stop>
	HAL_SuspendTick () ;
 80032d0:	f001 f85e 	bl	8004390 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <my_sys_deepsleep+0x74>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032da:	2380      	movs	r3, #128	; 0x80
 80032dc:	01db      	lsls	r3, r3, #7
 80032de:	2102      	movs	r1, #2
 80032e0:	0018      	movs	r0, r3
 80032e2:	f001 fc3b 	bl	8004b5c <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 80032e6:	f001 f861 	bl	80043ac <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <my_sys_deepsleep+0x78>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f006 fd25 	bl	8009d3c <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80032f2:	23d6      	movs	r3, #214	; 0xd6
 80032f4:	009c      	lsls	r4, r3, #2
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <my_sys_deepsleep+0x68>)
 80032f8:	490c      	ldr	r1, [pc, #48]	; (800332c <my_sys_deepsleep+0x7c>)
 80032fa:	4809      	ldr	r0, [pc, #36]	; (8003320 <my_sys_deepsleep+0x70>)
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <my_sys_deepsleep+0x78>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	0023      	movs	r3, r4
 8003302:	f008 ff69 	bl	800c1d8 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <my_sys_deepsleep+0x70>)
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fedf 	bl	80030cc <send_debug_logs>
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b001      	add	sp, #4
 8003314:	bd90      	pop	{r4, r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	08012de8 	.word	0x08012de8
 800331c:	08012f48 	.word	0x08012f48
 8003320:	20000b10 	.word	0x20000b10
 8003324:	20000b00 	.word	0x20000b00
 8003328:	20000a24 	.word	0x20000a24
 800332c:	08012f7c 	.word	0x08012f7c

08003330 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	2396      	movs	r3, #150	; 0x96
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	429a      	cmp	r2, r3
 8003340:	d30b      	bcc.n	800335a <my_sys_change_watchdog_time_ths+0x2a>
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	23e1      	movs	r3, #225	; 0xe1
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	429a      	cmp	r2, r3
 800334a:	d806      	bhi.n	800335a <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	b29a      	uxth	r2, r3
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <my_sys_change_watchdog_time_ths+0x34>)
 8003352:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <my_sys_change_watchdog_time_ths+0x38>)
 8003356:	2201      	movs	r2, #1
 8003358:	721a      	strb	r2, [r3, #8]
	}
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	20000008 	.word	0x20000008
 8003368:	20000ad8 	.word	0x20000ad8

0800336c <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	2396      	movs	r3, #150	; 0x96
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	429a      	cmp	r2, r3
 800337c:	d309      	bcc.n	8003392 <my_sys_change_AlarmA_time+0x26>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a06      	ldr	r2, [pc, #24]	; (800339c <my_sys_change_AlarmA_time+0x30>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d805      	bhi.n	8003392 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <my_sys_change_AlarmA_time+0x34>)
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <my_sys_change_AlarmA_time+0x38>)
 800338e:	2201      	movs	r2, #1
 8003390:	721a      	strb	r2, [r3, #8]
	}
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	0083d600 	.word	0x0083d600
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	20000ad8 	.word	0x20000ad8

080033a8 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b2c      	cmp	r3, #44	; 0x2c
 80033b4:	d90b      	bls.n	80033ce <my_sys_change_fix_acq_ths+0x26>
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	2396      	movs	r3, #150	; 0x96
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d806      	bhi.n	80033ce <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <my_sys_change_fix_acq_ths+0x30>)
 80033c6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <my_sys_change_fix_acq_ths+0x34>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	721a      	strb	r2, [r3, #8]
	}
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b002      	add	sp, #8
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	2000001a 	.word	0x2000001a
 80033dc:	20000ad8 	.word	0x20000ad8

080033e0 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b0e      	cmp	r3, #14
 80033ec:	d90b      	bls.n	8003406 <my_sys_change_min_tns_time_ths+0x26>
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	2396      	movs	r3, #150	; 0x96
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d806      	bhi.n	8003406 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <my_sys_change_min_tns_time_ths+0x30>)
 80033fe:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <my_sys_change_min_tns_time_ths+0x34>)
 8003402:	2201      	movs	r2, #1
 8003404:	721a      	strb	r2, [r3, #8]
	}
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	2000001c 	.word	0x2000001c
 8003414:	20000ad8 	.word	0x20000ad8

08003418 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <my_sys_change_pdop_ths+0x2a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b64      	cmp	r3, #100	; 0x64
 800342a:	d80a      	bhi.n	8003442 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7fe ffe5 	bl	80023fc <__aeabi_ui2d>
 8003432:	0002      	movs	r2, r0
 8003434:	000b      	movs	r3, r1
 8003436:	4905      	ldr	r1, [pc, #20]	; (800344c <my_sys_change_pdop_ths+0x34>)
 8003438:	600a      	str	r2, [r1, #0]
 800343a:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <my_sys_change_pdop_ths+0x38>)
 800343e:	2201      	movs	r2, #1
 8003440:	721a      	strb	r2, [r3, #8]
	}
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	20000020 	.word	0x20000020
 8003450:	20000ad8 	.word	0x20000ad8

08003454 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 8003454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003456:	46d6      	mov	lr, sl
 8003458:	464f      	mov	r7, r9
 800345a:	4646      	mov	r6, r8
 800345c:	b5c0      	push	{r6, r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 8003462:	4bd1      	ldr	r3, [pc, #836]	; (80037a8 <my_tracker_handle_cmd+0x354>)
 8003464:	0018      	movs	r0, r3
 8003466:	f007 fb79 	bl	800ab5c <my_tracker_api_is_cmd>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d100      	bne.n	8003470 <my_tracker_handle_cmd+0x1c>
 800346e:	e192      	b.n	8003796 <my_tracker_handle_cmd+0x342>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003470:	4acd      	ldr	r2, [pc, #820]	; (80037a8 <my_tracker_handle_cmd+0x354>)
 8003472:	4bce      	ldr	r3, [pc, #824]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003474:	0011      	movs	r1, r2
 8003476:	0018      	movs	r0, r3
 8003478:	f007 fbda 	bl	800ac30 <my_tracker_api_parse_cmd>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d100      	bne.n	8003482 <my_tracker_handle_cmd+0x2e>
 8003480:	e189      	b.n	8003796 <my_tracker_handle_cmd+0x342>
		{
			switch ( my_astro_cmd.code )
 8003482:	4bca      	ldr	r3, [pc, #808]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d900      	bls.n	800348c <my_tracker_handle_cmd+0x38>
 800348a:	e152      	b.n	8003732 <my_tracker_handle_cmd+0x2de>
 800348c:	009a      	lsls	r2, r3, #2
 800348e:	4bc8      	ldr	r3, [pc, #800]	; (80037b0 <my_tracker_handle_cmd+0x35c>)
 8003490:	18d3      	adds	r3, r2, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 8003496:	4bc5      	ldr	r3, [pc, #788]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff ff48 	bl	8003330 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034a0:	4bc4      	ldr	r3, [pc, #784]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	001c      	movs	r4, r3
 80034a6:	4bc1      	ldr	r3, [pc, #772]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80034a8:	7a1b      	ldrb	r3, [r3, #8]
 80034aa:	001d      	movs	r5, r3
 80034ac:	4bbf      	ldr	r3, [pc, #764]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	001a      	movs	r2, r3
 80034b2:	4bbe      	ldr	r3, [pc, #760]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	49c0      	ldr	r1, [pc, #768]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 80034b8:	48c0      	ldr	r0, [pc, #768]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	9200      	str	r2, [sp, #0]
 80034be:	002b      	movs	r3, r5
 80034c0:	0022      	movs	r2, r4
 80034c2:	f008 fe89 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034c6:	4cbe      	ldr	r4, [pc, #760]	; (80037c0 <my_tracker_handle_cmd+0x36c>)
 80034c8:	4abe      	ldr	r2, [pc, #760]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 80034ca:	49bf      	ldr	r1, [pc, #764]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 80034cc:	48bf      	ldr	r0, [pc, #764]	; (80037cc <my_tracker_handle_cmd+0x378>)
 80034ce:	4bbb      	ldr	r3, [pc, #748]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	0023      	movs	r3, r4
 80034d4:	f008 fe80 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034d8:	4bbc      	ldr	r3, [pc, #752]	; (80037cc <my_tracker_handle_cmd+0x378>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f7ff fdf6 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80034e0:	4bb4      	ldr	r3, [pc, #720]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	b291      	uxth	r1, r2
 80034e8:	4ab2      	ldr	r2, [pc, #712]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80034ea:	8011      	strh	r1, [r2, #0]
 80034ec:	4ab3      	ldr	r2, [pc, #716]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80034ee:	0011      	movs	r1, r2
 80034f0:	0018      	movs	r0, r3
 80034f2:	f006 fa23 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80034f6:	f000 fa95 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  break ;
 80034fa:	e14c      	b.n	8003796 <my_tracker_handle_cmd+0x342>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 80034fc:	4bab      	ldr	r3, [pc, #684]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff33 	bl	800336c <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003506:	4bab      	ldr	r3, [pc, #684]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	001c      	movs	r4, r3
 800350c:	4ba7      	ldr	r3, [pc, #668]	; (80037ac <my_tracker_handle_cmd+0x358>)
 800350e:	7a1b      	ldrb	r3, [r3, #8]
 8003510:	001d      	movs	r5, r3
 8003512:	4ba6      	ldr	r3, [pc, #664]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	001a      	movs	r2, r3
 8003518:	4ba4      	ldr	r3, [pc, #656]	; (80037ac <my_tracker_handle_cmd+0x358>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	49a6      	ldr	r1, [pc, #664]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 800351e:	48a7      	ldr	r0, [pc, #668]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	9200      	str	r2, [sp, #0]
 8003524:	002b      	movs	r3, r5
 8003526:	0022      	movs	r2, r4
 8003528:	f008 fe56 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800352c:	4ca8      	ldr	r4, [pc, #672]	; (80037d0 <my_tracker_handle_cmd+0x37c>)
 800352e:	4aa5      	ldr	r2, [pc, #660]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 8003530:	49a5      	ldr	r1, [pc, #660]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 8003532:	48a6      	ldr	r0, [pc, #664]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003534:	4ba1      	ldr	r3, [pc, #644]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	0023      	movs	r3, r4
 800353a:	f008 fe4d 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800353e:	4ba3      	ldr	r3, [pc, #652]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fdc3 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003546:	4b9b      	ldr	r3, [pc, #620]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	b291      	uxth	r1, r2
 800354e:	4a99      	ldr	r2, [pc, #612]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003550:	8011      	strh	r1, [r2, #0]
 8003552:	4a9a      	ldr	r2, [pc, #616]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003554:	0011      	movs	r1, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f006 f9f0 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800355c:	f000 fa62 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  break ;
 8003560:	e119      	b.n	8003796 <my_tracker_handle_cmd+0x342>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 8003562:	4b92      	ldr	r3, [pc, #584]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff ff1e 	bl	80033a8 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800356c:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	001c      	movs	r4, r3
 8003572:	4b8e      	ldr	r3, [pc, #568]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003574:	7a1b      	ldrb	r3, [r3, #8]
 8003576:	001d      	movs	r5, r3
 8003578:	4b8c      	ldr	r3, [pc, #560]	; (80037ac <my_tracker_handle_cmd+0x358>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	001a      	movs	r2, r3
 800357e:	4b8b      	ldr	r3, [pc, #556]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	498d      	ldr	r1, [pc, #564]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 8003584:	488d      	ldr	r0, [pc, #564]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	9200      	str	r2, [sp, #0]
 800358a:	002b      	movs	r3, r5
 800358c:	0022      	movs	r2, r4
 800358e:	f008 fe23 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003592:	4c90      	ldr	r4, [pc, #576]	; (80037d4 <my_tracker_handle_cmd+0x380>)
 8003594:	4a8b      	ldr	r2, [pc, #556]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 8003596:	498c      	ldr	r1, [pc, #560]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 8003598:	488c      	ldr	r0, [pc, #560]	; (80037cc <my_tracker_handle_cmd+0x378>)
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <my_tracker_handle_cmd+0x368>)
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	0023      	movs	r3, r4
 80035a0:	f008 fe1a 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035a4:	4b89      	ldr	r3, [pc, #548]	; (80037cc <my_tracker_handle_cmd+0x378>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7ff fd90 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035ac:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	b291      	uxth	r1, r2
 80035b4:	4a7f      	ldr	r2, [pc, #508]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80035b6:	8011      	strh	r1, [r2, #0]
 80035b8:	4a80      	ldr	r2, [pc, #512]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f006 f9bd 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80035c2:	f000 fa2f 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  break ;
 80035c6:	e0e6      	b.n	8003796 <my_tracker_handle_cmd+0x342>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 80035c8:	4b78      	ldr	r3, [pc, #480]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff ff07 	bl	80033e0 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035d2:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	001c      	movs	r4, r3
 80035d8:	4b74      	ldr	r3, [pc, #464]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80035da:	7a1b      	ldrb	r3, [r3, #8]
 80035dc:	001d      	movs	r5, r3
 80035de:	4b73      	ldr	r3, [pc, #460]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	001a      	movs	r2, r3
 80035e4:	4b71      	ldr	r3, [pc, #452]	; (80037ac <my_tracker_handle_cmd+0x358>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	4973      	ldr	r1, [pc, #460]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 80035ea:	4874      	ldr	r0, [pc, #464]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	9200      	str	r2, [sp, #0]
 80035f0:	002b      	movs	r3, r5
 80035f2:	0022      	movs	r2, r4
 80035f4:	f008 fdf0 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035f8:	4c77      	ldr	r4, [pc, #476]	; (80037d8 <my_tracker_handle_cmd+0x384>)
 80035fa:	4a72      	ldr	r2, [pc, #456]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 80035fc:	4972      	ldr	r1, [pc, #456]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 80035fe:	4873      	ldr	r0, [pc, #460]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003600:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	0023      	movs	r3, r4
 8003606:	f008 fde7 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800360a:	4b70      	ldr	r3, [pc, #448]	; (80037cc <my_tracker_handle_cmd+0x378>)
 800360c:	0018      	movs	r0, r3
 800360e:	f7ff fd5d 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003612:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	b291      	uxth	r1, r2
 800361a:	4a66      	ldr	r2, [pc, #408]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800361c:	8011      	strh	r1, [r2, #0]
 800361e:	4a67      	ldr	r2, [pc, #412]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f006 f98a 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003628:	f000 f9fc 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  break ;
 800362c:	e0b3      	b.n	8003796 <my_tracker_handle_cmd+0x342>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 800362e:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff fef0 	bl	8003418 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003638:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	001c      	movs	r4, r3
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003640:	7a1b      	ldrb	r3, [r3, #8]
 8003642:	001d      	movs	r5, r3
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	001a      	movs	r2, r3
 800364a:	4b58      	ldr	r3, [pc, #352]	; (80037ac <my_tracker_handle_cmd+0x358>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	495a      	ldr	r1, [pc, #360]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 8003650:	485a      	ldr	r0, [pc, #360]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	002b      	movs	r3, r5
 8003658:	0022      	movs	r2, r4
 800365a:	f008 fdbd 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800365e:	4c5f      	ldr	r4, [pc, #380]	; (80037dc <my_tracker_handle_cmd+0x388>)
 8003660:	4a58      	ldr	r2, [pc, #352]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 8003662:	4959      	ldr	r1, [pc, #356]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 8003664:	4859      	ldr	r0, [pc, #356]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003666:	4b55      	ldr	r3, [pc, #340]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	0023      	movs	r3, r4
 800366c:	f008 fdb4 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003670:	4b56      	ldr	r3, [pc, #344]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fd2a 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003678:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	b291      	uxth	r1, r2
 8003680:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003682:	8011      	strh	r1, [r2, #0]
 8003684:	4a4d      	ldr	r2, [pc, #308]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003686:	0011      	movs	r1, r2
 8003688:	0018      	movs	r0, r3
 800368a:	f006 f957 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800368e:	f000 f9c9 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  break ;
 8003692:	e080      	b.n	8003796 <my_tracker_handle_cmd+0x342>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d000      	beq.n	800369e <my_tracker_handle_cmd+0x24a>
 800369c:	e078      	b.n	8003790 <my_tracker_handle_cmd+0x33c>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 800369e:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	469a      	mov	sl, r3
 80036a4:	4b4e      	ldr	r3, [pc, #312]	; (80037e0 <my_tracker_handle_cmd+0x38c>)
 80036a6:	681d      	ldr	r5, [r3, #0]
 80036a8:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <my_tracker_handle_cmd+0x390>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	001e      	movs	r6, r3
 80036ae:	4b4e      	ldr	r3, [pc, #312]	; (80037e8 <my_tracker_handle_cmd+0x394>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	469c      	mov	ip, r3
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <my_tracker_handle_cmd+0x398>)
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	4b4d      	ldr	r3, [pc, #308]	; (80037f0 <my_tracker_handle_cmd+0x39c>)
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	4698      	mov	r8, r3
 80036be:	4b4d      	ldr	r3, [pc, #308]	; (80037f4 <my_tracker_handle_cmd+0x3a0>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	4699      	mov	r9, r3
 80036c4:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <my_tracker_handle_cmd+0x3a4>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4c4c      	ldr	r4, [pc, #304]	; (80037fc <my_tracker_handle_cmd+0x3a8>)
 80036cc:	483b      	ldr	r0, [pc, #236]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80036ce:	9206      	str	r2, [sp, #24]
 80036d0:	9307      	str	r3, [sp, #28]
 80036d2:	464b      	mov	r3, r9
 80036d4:	9304      	str	r3, [sp, #16]
 80036d6:	4643      	mov	r3, r8
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	9102      	str	r1, [sp, #8]
 80036dc:	4663      	mov	r3, ip
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	9600      	str	r6, [sp, #0]
 80036e2:	002b      	movs	r3, r5
 80036e4:	4652      	mov	r2, sl
 80036e6:	0021      	movs	r1, r4
 80036e8:	f008 fd76 	bl	800c1d8 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80036ec:	23ee      	movs	r3, #238	; 0xee
 80036ee:	009c      	lsls	r4, r3, #2
 80036f0:	4a34      	ldr	r2, [pc, #208]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 80036f2:	4935      	ldr	r1, [pc, #212]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 80036f4:	4835      	ldr	r0, [pc, #212]	; (80037cc <my_tracker_handle_cmd+0x378>)
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <my_tracker_handle_cmd+0x368>)
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	0023      	movs	r3, r4
 80036fc:	f008 fd6c 	bl	800c1d8 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff fce2 	bl	80030cc <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003708:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	b291      	uxth	r1, r2
 8003710:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003712:	8011      	strh	r1, [r2, #0]
 8003714:	4a29      	ldr	r2, [pc, #164]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003716:	0011      	movs	r1, r2
 8003718:	0018      	movs	r0, r3
 800371a:	f006 f90f 	bl	800993c <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 800371e:	f000 f981 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 8003722:	e035      	b.n	8003790 <my_tracker_handle_cmd+0x33c>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d133      	bne.n	8003794 <my_tracker_handle_cmd+0x340>
					  my_sys_restart () ;
 800372c:	f7ff fd9c 	bl	8003268 <my_sys_restart>
				  break ;
 8003730:	e030      	b.n	8003794 <my_tracker_handle_cmd+0x340>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	001c      	movs	r4, r3
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <my_tracker_handle_cmd+0x358>)
 800373a:	7a1b      	ldrb	r3, [r3, #8]
 800373c:	001d      	movs	r5, r3
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	001a      	movs	r2, r3
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <my_tracker_handle_cmd+0x358>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	491b      	ldr	r1, [pc, #108]	; (80037b8 <my_tracker_handle_cmd+0x364>)
 800374a:	481c      	ldr	r0, [pc, #112]	; (80037bc <my_tracker_handle_cmd+0x368>)
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	9200      	str	r2, [sp, #0]
 8003750:	002b      	movs	r3, r5
 8003752:	0022      	movs	r2, r4
 8003754:	f008 fd40 	bl	800c1d8 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003758:	4c29      	ldr	r4, [pc, #164]	; (8003800 <my_tracker_handle_cmd+0x3ac>)
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <my_tracker_handle_cmd+0x370>)
 800375c:	491a      	ldr	r1, [pc, #104]	; (80037c8 <my_tracker_handle_cmd+0x374>)
 800375e:	481b      	ldr	r0, [pc, #108]	; (80037cc <my_tracker_handle_cmd+0x378>)
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	0023      	movs	r3, r4
 8003766:	f008 fd37 	bl	800c1d8 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800376a:	4b18      	ldr	r3, [pc, #96]	; (80037cc <my_tracker_handle_cmd+0x378>)
 800376c:	0018      	movs	r0, r3
 800376e:	f7ff fcad 	bl	80030cc <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	b291      	uxth	r1, r2
 800377a:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <my_tracker_handle_cmd+0x360>)
 800377c:	8011      	strh	r1, [r2, #0]
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <my_tracker_handle_cmd+0x368>)
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f006 f8da 	bl	800993c <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003788:	f000 f94c 	bl	8003a24 <my_astro_turn_payload_id_counter>
				  return false ;
 800378c:	2300      	movs	r3, #0
 800378e:	e003      	b.n	8003798 <my_tracker_handle_cmd+0x344>
				  break ;
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	e000      	b.n	8003796 <my_tracker_handle_cmd+0x342>
				  break ;
 8003794:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 8003796:	2301      	movs	r3, #1
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	bce0      	pop	{r5, r6, r7}
 800379e:	46ba      	mov	sl, r7
 80037a0:	46b1      	mov	r9, r6
 80037a2:	46a8      	mov	r8, r5
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000c0c 	.word	0x20000c0c
 80037ac:	20000ad8 	.word	0x20000ad8
 80037b0:	08014944 	.word	0x08014944
 80037b4:	20000ae4 	.word	0x20000ae4
 80037b8:	08012fa0 	.word	0x08012fa0
 80037bc:	20000a38 	.word	0x20000a38
 80037c0:	0000038f 	.word	0x0000038f
 80037c4:	08012de8 	.word	0x08012de8
 80037c8:	08012eac 	.word	0x08012eac
 80037cc:	20000b10 	.word	0x20000b10
 80037d0:	00000397 	.word	0x00000397
 80037d4:	0000039f 	.word	0x0000039f
 80037d8:	000003a7 	.word	0x000003a7
 80037dc:	000003af 	.word	0x000003af
 80037e0:	20000004 	.word	0x20000004
 80037e4:	20000a22 	.word	0x20000a22
 80037e8:	20000008 	.word	0x20000008
 80037ec:	2000000c 	.word	0x2000000c
 80037f0:	2000001a 	.word	0x2000001a
 80037f4:	2000001c 	.word	0x2000001c
 80037f8:	20000020 	.word	0x20000020
 80037fc:	08012fb0 	.word	0x08012fb0
 8003800:	000003c5 	.word	0x000003c5

08003804 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	0002      	movs	r2, r0
 800380c:	1dfb      	adds	r3, r7, #7
 800380e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10e      	bne.n	8003836 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003818:	2380      	movs	r3, #128	; 0x80
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4811      	ldr	r0, [pc, #68]	; (8003864 <my_ant_sw_pos+0x60>)
 800381e:	2200      	movs	r2, #0
 8003820:	0019      	movs	r1, r3
 8003822:	f001 f93c 	bl	8004a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003826:	2380      	movs	r3, #128	; 0x80
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	480e      	ldr	r0, [pc, #56]	; (8003864 <my_ant_sw_pos+0x60>)
 800382c:	2201      	movs	r2, #1
 800382e:	0019      	movs	r1, r3
 8003830:	f001 f935 	bl	8004a9e <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003834:	e011      	b.n	800385a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d10d      	bne.n	800385a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	4808      	ldr	r0, [pc, #32]	; (8003864 <my_ant_sw_pos+0x60>)
 8003844:	2201      	movs	r2, #1
 8003846:	0019      	movs	r1, r3
 8003848:	f001 f929 	bl	8004a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <my_ant_sw_pos+0x60>)
 8003852:	2200      	movs	r2, #0
 8003854:	0019      	movs	r1, r3
 8003856:	f001 f922 	bl	8004a9e <HAL_GPIO_WritePin>
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	50000400 	.word	0x50000400

08003868 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 800386c:	2001      	movs	r0, #1
 800386e:	f7ff ffc9 	bl	8003804 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	4808      	ldr	r0, [pc, #32]	; (8003898 <my_gnss_sw_on+0x30>)
 8003878:	2201      	movs	r2, #1
 800387a:	0019      	movs	r1, r3
 800387c:	f001 f90f 	bl	8004a9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	019b      	lsls	r3, r3, #6
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <my_gnss_sw_on+0x30>)
 8003886:	2201      	movs	r2, #1
 8003888:	0019      	movs	r1, r3
 800388a:	f001 f908 	bl	8004a9e <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800388e:	f7ff fadd 	bl	8002e4c <MX_USART5_UART_Init>
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	50000400 	.word	0x50000400

0800389c <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80038a0:	2002      	movs	r0, #2
 80038a2:	f7ff ffaf 	bl	8003804 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <my_gnss_sw_off+0x3c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d811      	bhi.n	80038d2 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	480a      	ldr	r0, [pc, #40]	; (80038dc <my_gnss_sw_off+0x40>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	0019      	movs	r1, r3
 80038b8:	f001 f8f1 	bl	8004a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	019b      	lsls	r3, r3, #6
 80038c0:	4806      	ldr	r0, [pc, #24]	; (80038dc <my_gnss_sw_off+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	0019      	movs	r1, r3
 80038c6:	f001 f8ea 	bl	8004a9e <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <my_gnss_sw_off+0x44>)
 80038cc:	0018      	movs	r0, r3
 80038ce:	f003 fad3 	bl	8006e78 <HAL_UART_DeInit>
	}
}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000a22 	.word	0x20000a22
 80038dc:	50000400 	.word	0x50000400
 80038e0:	2000098c 	.word	0x2000098c

080038e4 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	000a      	movs	r2, r1
 80038ee:	1cfb      	adds	r3, r7, #3
 80038f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80038f2:	23fa      	movs	r3, #250	; 0xfa
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <my_gnss_receive_byte+0x3c>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	f003 fba0 	bl	8007040 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <my_gnss_receive_byte+0x40>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003908:	23fa      	movs	r3, #250	; 0xfa
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4806      	ldr	r0, [pc, #24]	; (8003928 <my_gnss_receive_byte+0x44>)
 8003910:	2201      	movs	r2, #1
 8003912:	f003 faf1 	bl	8006ef8 <HAL_UART_Transmit>
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	2000098c 	.word	0x2000098c
 8003924:	20000a22 	.word	0x20000a22
 8003928:	20000864 	.word	0x20000864

0800392c <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <my_astronode_reset+0x30>)
 8003932:	2201      	movs	r2, #1
 8003934:	2102      	movs	r1, #2
 8003936:	0018      	movs	r0, r3
 8003938:	f001 f8b1 	bl	8004a9e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 800393c:	2001      	movs	r0, #1
 800393e:	f000 fd03 	bl	8004348 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <my_astronode_reset+0x30>)
 8003944:	2200      	movs	r2, #0
 8003946:	2102      	movs	r1, #2
 8003948:	0018      	movs	r0, r3
 800394a:	f001 f8a8 	bl	8004a9e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 800394e:	20fa      	movs	r0, #250	; 0xfa
 8003950:	f000 fcfa 	bl	8004348 <HAL_Delay>
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	50000400 	.word	0x50000400

08003960 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <send_astronode_request+0x34>)
 800396c:	0018      	movs	r0, r3
 800396e:	f7ff fbad 	bl	80030cc <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff fba9 	bl	80030cc <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b29a      	uxth	r2, r3
 800397e:	23fa      	movs	r3, #250	; 0xfa
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4804      	ldr	r0, [pc, #16]	; (8003998 <send_astronode_request+0x38>)
 8003986:	f003 fab7 	bl	8006ef8 <HAL_UART_Transmit>
}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	08012fd4 	.word	0x08012fd4
 8003998:	200008f8 	.word	0x200008f8

0800399c <get_systick>:
uint32_t get_systick ( void )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 80039a0:	f000 fcc8 	bl	8004334 <HAL_GetTick>
 80039a4:	0003      	movs	r3, r0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	000a      	movs	r2, r1
 80039b6:	1cbb      	adds	r3, r7, #2
 80039b8:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 80039ba:	f7ff ffef 	bl	800399c <get_systick>
 80039be:	0002      	movs	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	1cba      	adds	r2, r7, #2
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	419b      	sbcs	r3, r3
 80039cc:	425b      	negs	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4806      	ldr	r0, [pc, #24]	; (80039fc <is_astronode_character_received+0x24>)
 80039e4:	2364      	movs	r3, #100	; 0x64
 80039e6:	2201      	movs	r2, #1
 80039e8:	f003 fb2a 	bl	8007040 <HAL_UART_Receive>
 80039ec:	0003      	movs	r3, r0
 80039ee:	425a      	negs	r2, r3
 80039f0:	4153      	adcs	r3, r2
 80039f2:	b2db      	uxtb	r3, r3
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200008f8 	.word	0x200008f8

08003a00 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <my_astro_evt_pin+0x20>)
 8003a06:	2104      	movs	r1, #4
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f001 f82b 	bl	8004a64 <HAL_GPIO_ReadPin>
 8003a0e:	0003      	movs	r3, r0
 8003a10:	3b01      	subs	r3, #1
 8003a12:	425a      	negs	r2, r3
 8003a14:	4153      	adcs	r3, r2
 8003a16:	b2db      	uxtb	r3, r3
}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	50000400 	.word	0x50000400

08003a24 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <my_astro_turn_payload_id_counter+0x18>)
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	2b63      	cmp	r3, #99	; 0x63
 8003a2e:	d902      	bls.n	8003a36 <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <my_astro_turn_payload_id_counter+0x18>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	801a      	strh	r2, [r3, #0]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000ae4 	.word	0x20000ae4

08003a40 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <my_tim_init+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	611a      	str	r2, [r3, #16]
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000784 	.word	0x20000784

08003a58 <my_tim_start>:

void my_tim_start ()
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <my_tim_start+0x18>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <my_tim_start+0x1c>)
 8003a64:	0018      	movs	r0, r3
 8003a66:	f002 fed3 	bl	8006810 <HAL_TIM_Base_Start_IT>
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000c34 	.word	0x20000c34
 8003a74:	20000784 	.word	0x20000784

08003a78 <my_tim_stop>:

void my_tim_stop ()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <my_tim_stop+0x14>)
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f002 ff28 	bl	80068d4 <HAL_TIM_Base_Stop_IT>
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000784 	.word	0x20000784

08003a90 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d10d      	bne.n	8003abe <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003aac:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003aae:	4b07      	ldr	r3, [pc, #28]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d901      	bls.n	8003abe <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003aba:	f7ff fbd5 	bl	8003268 <my_sys_restart>
	}
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	40001000 	.word	0x40001000
 8003acc:	20000c34 	.word	0x20000c34
 8003ad0:	20000008 	.word	0x20000008

08003ad4 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_RTC_AlarmAEventCallback+0x18>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	20000b00 	.word	0x20000b00

08003af0 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	0002      	movs	r2, r0
 8003af8:	1dbb      	adds	r3, r7, #6
 8003afa:	801a      	strh	r2, [r3, #0]

}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b08:	b672      	cpsid	i
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <Error_Handler+0x8>
	...

08003b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	607b      	str	r3, [r7, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0549      	lsls	r1, r1, #21
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	055b      	lsls	r3, r3, #21
 8003b44:	4013      	ands	r3, r2
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003b4a:	23c0      	movs	r3, #192	; 0xc0
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fc3a 	bl	80043c8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b097      	sub	sp, #92	; 0x5c
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b68:	240c      	movs	r4, #12
 8003b6a:	193b      	adds	r3, r7, r4
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	234c      	movs	r3, #76	; 0x4c
 8003b70:	001a      	movs	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	f008 fbc6 	bl	800c304 <memset>
  if(hrtc->Instance==RTC)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_RTC_MspInit+0x84>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12c      	bne.n	8003bdc <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	2280      	movs	r2, #128	; 0x80
 8003b86:	0292      	lsls	r2, r2, #10
 8003b88:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b8a:	193b      	adds	r3, r7, r4
 8003b8c:	2280      	movs	r2, #128	; 0x80
 8003b8e:	0052      	lsls	r2, r2, #1
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	0018      	movs	r0, r3
 8003b96:	f001 fd89 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8003b9a:	1e03      	subs	r3, r0, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003b9e:	f7ff ffb1 	bl	8003b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RTC_MspInit+0x88>)
 8003ba4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RTC_MspInit+0x88>)
 8003ba8:	2180      	movs	r1, #128	; 0x80
 8003baa:	0209      	lsls	r1, r1, #8
 8003bac:	430a      	orrs	r2, r1
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <HAL_RTC_MspInit+0x88>)
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RTC_MspInit+0x88>)
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	00c9      	lsls	r1, r1, #3
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RTC_MspInit+0x88>)
 8003bc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2103      	movs	r1, #3
 8003bd0:	2002      	movs	r0, #2
 8003bd2:	f000 fccd 	bl	8004570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003bd6:	2002      	movs	r0, #2
 8003bd8:	f000 fcdf 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b017      	add	sp, #92	; 0x5c
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	40002800 	.word	0x40002800
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b08b      	sub	sp, #44	; 0x2c
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	2414      	movs	r4, #20
 8003bf6:	193b      	adds	r3, r7, r4
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	2314      	movs	r3, #20
 8003bfc:	001a      	movs	r2, r3
 8003bfe:	2100      	movs	r1, #0
 8003c00:	f008 fb80 	bl	800c304 <memset>
  if(hspi->Instance==SPI1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1b      	ldr	r2, [pc, #108]	; (8003c78 <HAL_SPI_MspInit+0x8c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d130      	bne.n	8003c70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0149      	lsls	r1, r1, #5
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	015b      	lsls	r3, r3, #5
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c30:	2101      	movs	r1, #1
 8003c32:	430a      	orrs	r2, r1
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_SPI_MspInit+0x90>)
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003c42:	0021      	movs	r1, r4
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	22e0      	movs	r2, #224	; 0xe0
 8003c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	187b      	adds	r3, r7, r1
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	2200      	movs	r2, #0
 8003c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c62:	187a      	adds	r2, r7, r1
 8003c64:	23a0      	movs	r3, #160	; 0xa0
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fcb6 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b00b      	add	sp, #44	; 0x2c
 8003c76:	bd90      	pop	{r4, r7, pc}
 8003c78:	40013000 	.word	0x40013000
 8003c7c:	40021000 	.word	0x40021000

08003c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_TIM_Base_MspInit+0x44>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d113      	bne.n	8003cba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_TIM_Base_MspInit+0x48>)
 8003c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_TIM_Base_MspInit+0x48>)
 8003c98:	2110      	movs	r1, #16
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_TIM_Base_MspInit+0x48>)
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2102      	movs	r1, #2
 8003cae:	2011      	movs	r0, #17
 8003cb0:	f000 fc5e 	bl	8004570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003cb4:	2011      	movs	r0, #17
 8003cb6:	f000 fc70 	bl	800459a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	40001000 	.word	0x40001000
 8003cc8:	40021000 	.word	0x40021000

08003ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b0a3      	sub	sp, #140	; 0x8c
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	2374      	movs	r3, #116	; 0x74
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	0018      	movs	r0, r3
 8003cda:	2314      	movs	r3, #20
 8003cdc:	001a      	movs	r2, r3
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f008 fb10 	bl	800c304 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ce4:	2428      	movs	r4, #40	; 0x28
 8003ce6:	193b      	adds	r3, r7, r4
 8003ce8:	0018      	movs	r0, r3
 8003cea:	234c      	movs	r3, #76	; 0x4c
 8003cec:	001a      	movs	r2, r3
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f008 fb08 	bl	800c304 <memset>
  if(huart->Instance==USART1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a84      	ldr	r2, [pc, #528]	; (8003f0c <HAL_UART_MspInit+0x240>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d140      	bne.n	8003d80 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	2200      	movs	r2, #0
 8003d08:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f001 fccd 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8003d12:	1e03      	subs	r3, r0, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d16:	f7ff fef5 	bl	8003b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d1a:	4b7d      	ldr	r3, [pc, #500]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1e:	4b7c      	ldr	r3, [pc, #496]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	01c9      	lsls	r1, r1, #7
 8003d24:	430a      	orrs	r2, r1
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
 8003d28:	4b79      	ldr	r3, [pc, #484]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2c:	2380      	movs	r3, #128	; 0x80
 8003d2e:	01db      	lsls	r3, r3, #7
 8003d30:	4013      	ands	r3, r2
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d36:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3a:	4b75      	ldr	r3, [pc, #468]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34
 8003d42:	4b73      	ldr	r3, [pc, #460]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	2201      	movs	r2, #1
 8003d48:	4013      	ands	r3, r2
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003d4e:	2174      	movs	r1, #116	; 0x74
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	22c0      	movs	r2, #192	; 0xc0
 8003d54:	00d2      	lsls	r2, r2, #3
 8003d56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	187b      	adds	r3, r7, r1
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	2200      	movs	r2, #0
 8003d68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d70:	187a      	adds	r2, r7, r1
 8003d72:	23a0      	movs	r3, #160	; 0xa0
 8003d74:	05db      	lsls	r3, r3, #23
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fc2f 	bl	80045dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003d7e:	e0c0      	b.n	8003f02 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a63      	ldr	r2, [pc, #396]	; (8003f14 <HAL_UART_MspInit+0x248>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d140      	bne.n	8003e0c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d8a:	2128      	movs	r1, #40	; 0x28
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2202      	movs	r2, #2
 8003d90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f001 fc86 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003da4:	f7ff feae 	bl	8003b04 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dac:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0289      	lsls	r1, r1, #10
 8003db2:	430a      	orrs	r2, r1
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003db6:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc4:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc8:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003ddc:	2174      	movs	r1, #116	; 0x74
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	220c      	movs	r2, #12
 8003de2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2202      	movs	r2, #2
 8003de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2201      	movs	r2, #1
 8003dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dfc:	187a      	adds	r2, r7, r1
 8003dfe:	23a0      	movs	r3, #160	; 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f000 fbe9 	bl	80045dc <HAL_GPIO_Init>
}
 8003e0a:	e07a      	b.n	8003f02 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a41      	ldr	r2, [pc, #260]	; (8003f18 <HAL_UART_MspInit+0x24c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d140      	bne.n	8003e98 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003e16:	2128      	movs	r1, #40	; 0x28
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	0018      	movs	r0, r3
 8003e28:	f001 fc40 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003e30:	f7ff fe68 	bl	8003b04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e34:	4b36      	ldr	r3, [pc, #216]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	02c9      	lsls	r1, r1, #11
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e42:	4b33      	ldr	r3, [pc, #204]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	02db      	lsls	r3, r3, #11
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	4b2f      	ldr	r3, [pc, #188]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e54:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e56:	2102      	movs	r1, #2
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e5c:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003e68:	2174      	movs	r1, #116	; 0x74
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	22c0      	movs	r2, #192	; 0xc0
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	2202      	movs	r2, #2
 8003e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2200      	movs	r2, #0
 8003e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2204      	movs	r2, #4
 8003e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_UART_MspInit+0x250>)
 8003e8e:	0019      	movs	r1, r3
 8003e90:	0010      	movs	r0, r2
 8003e92:	f000 fba3 	bl	80045dc <HAL_GPIO_Init>
}
 8003e96:	e034      	b.n	8003f02 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_UART_MspInit+0x254>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12f      	bne.n	8003f02 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	0049      	lsls	r1, r1, #1
 8003eac:	430a      	orrs	r2, r1
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ebe:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_UART_MspInit+0x244>)
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003ed6:	2174      	movs	r1, #116	; 0x74
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2218      	movs	r2, #24
 8003edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2200      	movs	r2, #0
 8003eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <HAL_UART_MspInit+0x250>)
 8003efa:	0019      	movs	r1, r3
 8003efc:	0010      	movs	r0, r2
 8003efe:	f000 fb6d 	bl	80045dc <HAL_GPIO_Init>
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b023      	add	sp, #140	; 0x8c
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40013800 	.word	0x40013800
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40004400 	.word	0x40004400
 8003f18:	40004800 	.word	0x40004800
 8003f1c:	50000400 	.word	0x50000400
 8003f20:	40005000 	.word	0x40005000

08003f24 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <HAL_UART_MspDeInit+0xa4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10e      	bne.n	8003f54 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003f36:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f3c:	4924      	ldr	r1, [pc, #144]	; (8003fd0 <HAL_UART_MspDeInit+0xac>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003f42:	23c0      	movs	r3, #192	; 0xc0
 8003f44:	00da      	lsls	r2, r3, #3
 8003f46:	23a0      	movs	r3, #160	; 0xa0
 8003f48:	05db      	lsls	r3, r3, #23
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 fcb1 	bl	80048b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003f52:	e034      	b.n	8003fbe <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_UART_MspDeInit+0xb0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003f5e:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f62:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f64:	491c      	ldr	r1, [pc, #112]	; (8003fd8 <HAL_UART_MspDeInit+0xb4>)
 8003f66:	400a      	ands	r2, r1
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003f6a:	23a0      	movs	r3, #160	; 0xa0
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	210c      	movs	r1, #12
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 fc9f 	bl	80048b4 <HAL_GPIO_DeInit>
}
 8003f76:	e022      	b.n	8003fbe <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <HAL_UART_MspDeInit+0xb8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10d      	bne.n	8003f9e <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003f88:	4915      	ldr	r1, [pc, #84]	; (8003fe0 <HAL_UART_MspDeInit+0xbc>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003f8e:	23c0      	movs	r3, #192	; 0xc0
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <HAL_UART_MspDeInit+0xc0>)
 8003f94:	0019      	movs	r1, r3
 8003f96:	0010      	movs	r0, r2
 8003f98:	f000 fc8c 	bl	80048b4 <HAL_GPIO_DeInit>
}
 8003f9c:	e00f      	b.n	8003fbe <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_UART_MspDeInit+0xc4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10a      	bne.n	8003fbe <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <HAL_UART_MspDeInit+0xa8>)
 8003fae:	490f      	ldr	r1, [pc, #60]	; (8003fec <HAL_UART_MspDeInit+0xc8>)
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_UART_MspDeInit+0xc0>)
 8003fb6:	2118      	movs	r1, #24
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f000 fc7b 	bl	80048b4 <HAL_GPIO_DeInit>
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	ffffbfff 	.word	0xffffbfff
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	fffdffff 	.word	0xfffdffff
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	fffbffff 	.word	0xfffbffff
 8003fe4:	50000400 	.word	0x50000400
 8003fe8:	40005000 	.word	0x40005000
 8003fec:	fffffeff 	.word	0xfffffeff

08003ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <NMI_Handler+0x4>

08003ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffa:	e7fe      	b.n	8003ffa <HardFault_Handler+0x4>

08003ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004014:	f000 f97c 	bl	8004310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <RTC_TAMP_IRQHandler+0x14>)
 8004026:	0018      	movs	r0, r3
 8004028:	f002 f942 	bl	80062b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	200006f4 	.word	0x200006f4

08004038 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 800403c:	2004      	movs	r0, #4
 800403e:	f000 fd4b 	bl	8004ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800404e:	0018      	movs	r0, r3
 8004050:	f002 fc6e 	bl	8006930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	20000784 	.word	0x20000784

08004060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  return 1;
 8004064:	2301      	movs	r3, #1
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_kill>:

int _kill(int pid, int sig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004076:	f008 fa39 	bl	800c4ec <__errno>
 800407a:	0003      	movs	r3, r0
 800407c:	2216      	movs	r2, #22
 800407e:	601a      	str	r2, [r3, #0]
  return -1;
 8004080:	2301      	movs	r3, #1
 8004082:	425b      	negs	r3, r3
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}

0800408c <_exit>:

void _exit (int status)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004094:	2301      	movs	r3, #1
 8004096:	425a      	negs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0011      	movs	r1, r2
 800409c:	0018      	movs	r0, r3
 800409e:	f7ff ffe5 	bl	800406c <_kill>
  while (1) {}    /* Make sure we hang here */
 80040a2:	e7fe      	b.n	80040a2 <_exit+0x16>

080040a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	e00a      	b.n	80040cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040b6:	e000      	b.n	80040ba <_read+0x16>
 80040b8:	bf00      	nop
 80040ba:	0001      	movs	r1, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	60ba      	str	r2, [r7, #8]
 80040c2:	b2ca      	uxtb	r2, r1
 80040c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	dbf0      	blt.n	80040b6 <_read+0x12>
  }

  return len;
 80040d4:	687b      	ldr	r3, [r7, #4]
}
 80040d6:	0018      	movs	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	b006      	add	sp, #24
 80040dc:	bd80      	pop	{r7, pc}

080040de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e009      	b.n	8004104 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	60ba      	str	r2, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	0018      	movs	r0, r3
 80040fa:	e000      	b.n	80040fe <_write+0x20>
 80040fc:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	3301      	adds	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	dbf1      	blt.n	80040f0 <_write+0x12>
  }
  return len;
 800410c:	687b      	ldr	r3, [r7, #4]
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b006      	add	sp, #24
 8004114:	bd80      	pop	{r7, pc}

08004116 <_close>:

int _close(int file)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800411e:	2301      	movs	r3, #1
 8004120:	425b      	negs	r3, r3
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}

0800412a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	0192      	lsls	r2, r2, #6
 800413a:	605a      	str	r2, [r3, #4]
  return 0;
 800413c:	2300      	movs	r3, #0
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}

08004146 <_isatty>:

int _isatty(int file)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800414e:	2301      	movs	r3, #1
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}

08004158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004164:	2300      	movs	r3, #0
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004178:	4a14      	ldr	r2, [pc, #80]	; (80041cc <_sbrk+0x5c>)
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <_sbrk+0x60>)
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <_sbrk+0x64>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <_sbrk+0x64>)
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <_sbrk+0x68>)
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <_sbrk+0x64>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	18d3      	adds	r3, r2, r3
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d207      	bcs.n	80041b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041a0:	f008 f9a4 	bl	800c4ec <__errno>
 80041a4:	0003      	movs	r3, r0
 80041a6:	220c      	movs	r2, #12
 80041a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	425b      	negs	r3, r3
 80041ae:	e009      	b.n	80041c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <_sbrk+0x64>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	18d2      	adds	r2, r2, r3
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <_sbrk+0x64>)
 80041c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80041c2:	68fb      	ldr	r3, [r7, #12]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b006      	add	sp, #24
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20024000 	.word	0x20024000
 80041d0:	00000400 	.word	0x00000400
 80041d4:	20000b04 	.word	0x20000b04
 80041d8:	20000f48 	.word	0x20000f48

080041dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80041e8:	480d      	ldr	r0, [pc, #52]	; (8004220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80041ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041ec:	f7ff fff6 	bl	80041dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <LoopForever+0x6>)
  ldr r1, =_edata
 80041f2:	490d      	ldr	r1, [pc, #52]	; (8004228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <LoopForever+0xe>)
  movs r3, #0
 80041f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041f8:	e002      	b.n	8004200 <LoopCopyDataInit>

080041fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041fe:	3304      	adds	r3, #4

08004200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004204:	d3f9      	bcc.n	80041fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004206:	4a0a      	ldr	r2, [pc, #40]	; (8004230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004208:	4c0a      	ldr	r4, [pc, #40]	; (8004234 <LoopForever+0x16>)
  movs r3, #0
 800420a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800420c:	e001      	b.n	8004212 <LoopFillZerobss>

0800420e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800420e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004210:	3204      	adds	r2, #4

08004212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004214:	d3fb      	bcc.n	800420e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004216:	f008 f96f 	bl	800c4f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800421a:	f7fe f9c5 	bl	80025a8 <main>

0800421e <LoopForever>:

LoopForever:
  b LoopForever
 800421e:	e7fe      	b.n	800421e <LoopForever>
  ldr   r0, =_estack
 8004220:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004228:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 800422c:	08014ea8 	.word	0x08014ea8
  ldr r2, =_sbss
 8004230:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8004234:	20000f44 	.word	0x20000f44

08004238 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004238:	e7fe      	b.n	8004238 <ADC1_COMP_IRQHandler>
	...

0800423c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004242:	1dfb      	adds	r3, r7, #7
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004248:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_Init+0x3c>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_Init+0x3c>)
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	0049      	lsls	r1, r1, #1
 8004252:	430a      	orrs	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004256:	2003      	movs	r0, #3
 8004258:	f000 f810 	bl	800427c <HAL_InitTick>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d003      	beq.n	8004268 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004260:	1dfb      	adds	r3, r7, #7
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e001      	b.n	800426c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004268:	f7ff fc52 	bl	8003b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800426c:	1dfb      	adds	r3, r7, #7
 800426e:	781b      	ldrb	r3, [r3, #0]
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40022000 	.word	0x40022000

0800427c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004284:	230f      	movs	r3, #15
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800428c:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <HAL_InitTick+0x88>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d02b      	beq.n	80042ec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <HAL_InitTick+0x8c>)
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_InitTick+0x88>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	0019      	movs	r1, r3
 800429e:	23fa      	movs	r3, #250	; 0xfa
 80042a0:	0098      	lsls	r0, r3, #2
 80042a2:	f7fb ff4b 	bl	800013c <__udivsi3>
 80042a6:	0003      	movs	r3, r0
 80042a8:	0019      	movs	r1, r3
 80042aa:	0020      	movs	r0, r4
 80042ac:	f7fb ff46 	bl	800013c <__udivsi3>
 80042b0:	0003      	movs	r3, r0
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 f985 	bl	80045c2 <HAL_SYSTICK_Config>
 80042b8:	1e03      	subs	r3, r0, #0
 80042ba:	d112      	bne.n	80042e2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d80a      	bhi.n	80042d8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	2301      	movs	r3, #1
 80042c6:	425b      	negs	r3, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 f950 	bl	8004570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_InitTick+0x90>)
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e00d      	b.n	80042f4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80042d8:	230f      	movs	r3, #15
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
 80042e0:	e008      	b.n	80042f4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80042e2:	230f      	movs	r3, #15
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
 80042ea:	e003      	b.n	80042f4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80042ec:	230f      	movs	r3, #15
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80042f4:	230f      	movs	r3, #15
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	781b      	ldrb	r3, [r3, #0]
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b005      	add	sp, #20
 8004300:	bd90      	pop	{r4, r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000018 	.word	0x20000018
 8004308:	20000010 	.word	0x20000010
 800430c:	20000014 	.word	0x20000014

08004310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_IncTick+0x1c>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	001a      	movs	r2, r3
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_IncTick+0x20>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	18d2      	adds	r2, r2, r3
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_IncTick+0x20>)
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	20000018 	.word	0x20000018
 8004330:	20000b08 	.word	0x20000b08

08004334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <HAL_GetTick+0x10>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	0018      	movs	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	20000b08 	.word	0x20000b08

08004348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7ff fff0 	bl	8004334 <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	d005      	beq.n	800436e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_Delay+0x44>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	001a      	movs	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	189b      	adds	r3, r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	f7ff ffe0 	bl	8004334 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d8f7      	bhi.n	8004370 <HAL_Delay+0x28>
  {
  }
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	20000018 	.word	0x20000018

08004390 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004394:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_SuspendTick+0x18>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_SuspendTick+0x18>)
 800439a:	2102      	movs	r1, #2
 800439c:	438a      	bics	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	e000e010 	.word	0xe000e010

080043ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <HAL_ResumeTick+0x18>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_ResumeTick+0x18>)
 80043b6:	2102      	movs	r1, #2
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b002      	add	sp, #8
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	40010000 	.word	0x40010000
 80043f0:	fffff9ff 	.word	0xfffff9ff

080043f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	0002      	movs	r2, r0
 80043fc:	1dfb      	adds	r3, r7, #7
 80043fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b7f      	cmp	r3, #127	; 0x7f
 8004406:	d809      	bhi.n	800441c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004408:	1dfb      	adds	r3, r7, #7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	001a      	movs	r2, r3
 800440e:	231f      	movs	r3, #31
 8004410:	401a      	ands	r2, r3
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <__NVIC_EnableIRQ+0x30>)
 8004414:	2101      	movs	r1, #1
 8004416:	4091      	lsls	r1, r2
 8004418:	000a      	movs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}
 8004424:	e000e100 	.word	0xe000e100

08004428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	0002      	movs	r2, r0
 8004430:	6039      	str	r1, [r7, #0]
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004436:	1dfb      	adds	r3, r7, #7
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b7f      	cmp	r3, #127	; 0x7f
 800443c:	d828      	bhi.n	8004490 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800443e:	4a2f      	ldr	r2, [pc, #188]	; (80044fc <__NVIC_SetPriority+0xd4>)
 8004440:	1dfb      	adds	r3, r7, #7
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b25b      	sxtb	r3, r3
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	33c0      	adds	r3, #192	; 0xc0
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	589b      	ldr	r3, [r3, r2]
 800444e:	1dfa      	adds	r2, r7, #7
 8004450:	7812      	ldrb	r2, [r2, #0]
 8004452:	0011      	movs	r1, r2
 8004454:	2203      	movs	r2, #3
 8004456:	400a      	ands	r2, r1
 8004458:	00d2      	lsls	r2, r2, #3
 800445a:	21ff      	movs	r1, #255	; 0xff
 800445c:	4091      	lsls	r1, r2
 800445e:	000a      	movs	r2, r1
 8004460:	43d2      	mvns	r2, r2
 8004462:	401a      	ands	r2, r3
 8004464:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	019b      	lsls	r3, r3, #6
 800446a:	22ff      	movs	r2, #255	; 0xff
 800446c:	401a      	ands	r2, r3
 800446e:	1dfb      	adds	r3, r7, #7
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	0018      	movs	r0, r3
 8004474:	2303      	movs	r3, #3
 8004476:	4003      	ands	r3, r0
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800447c:	481f      	ldr	r0, [pc, #124]	; (80044fc <__NVIC_SetPriority+0xd4>)
 800447e:	1dfb      	adds	r3, r7, #7
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b25b      	sxtb	r3, r3
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	430a      	orrs	r2, r1
 8004488:	33c0      	adds	r3, #192	; 0xc0
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800448e:	e031      	b.n	80044f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <__NVIC_SetPriority+0xd8>)
 8004492:	1dfb      	adds	r3, r7, #7
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	0019      	movs	r1, r3
 8004498:	230f      	movs	r3, #15
 800449a:	400b      	ands	r3, r1
 800449c:	3b08      	subs	r3, #8
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3306      	adds	r3, #6
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	3304      	adds	r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	1dfa      	adds	r2, r7, #7
 80044ac:	7812      	ldrb	r2, [r2, #0]
 80044ae:	0011      	movs	r1, r2
 80044b0:	2203      	movs	r2, #3
 80044b2:	400a      	ands	r2, r1
 80044b4:	00d2      	lsls	r2, r2, #3
 80044b6:	21ff      	movs	r1, #255	; 0xff
 80044b8:	4091      	lsls	r1, r2
 80044ba:	000a      	movs	r2, r1
 80044bc:	43d2      	mvns	r2, r2
 80044be:	401a      	ands	r2, r3
 80044c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	22ff      	movs	r2, #255	; 0xff
 80044c8:	401a      	ands	r2, r3
 80044ca:	1dfb      	adds	r3, r7, #7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	0018      	movs	r0, r3
 80044d0:	2303      	movs	r3, #3
 80044d2:	4003      	ands	r3, r0
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044d8:	4809      	ldr	r0, [pc, #36]	; (8004500 <__NVIC_SetPriority+0xd8>)
 80044da:	1dfb      	adds	r3, r7, #7
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	001c      	movs	r4, r3
 80044e0:	230f      	movs	r3, #15
 80044e2:	4023      	ands	r3, r4
 80044e4:	3b08      	subs	r3, #8
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	3306      	adds	r3, #6
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	18c3      	adds	r3, r0, r3
 80044f0:	3304      	adds	r3, #4
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b003      	add	sp, #12
 80044fa:	bd90      	pop	{r4, r7, pc}
 80044fc:	e000e100 	.word	0xe000e100
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004508:	f3bf 8f4f 	dsb	sy
}
 800450c:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__NVIC_SystemReset+0x1c>)
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <__NVIC_SystemReset+0x20>)
 8004512:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004514:	f3bf 8f4f 	dsb	sy
}
 8004518:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	e7fd      	b.n	800451a <__NVIC_SystemReset+0x16>
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	e000ed00 	.word	0xe000ed00
 8004524:	05fa0004 	.word	0x05fa0004

08004528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	045b      	lsls	r3, r3, #17
 8004538:	429a      	cmp	r2, r3
 800453a:	d301      	bcc.n	8004540 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800453c:	2301      	movs	r3, #1
 800453e:	e010      	b.n	8004562 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <SysTick_Config+0x44>)
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	3a01      	subs	r2, #1
 8004546:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004548:	2301      	movs	r3, #1
 800454a:	425b      	negs	r3, r3
 800454c:	2103      	movs	r1, #3
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff ff6a 	bl	8004428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <SysTick_Config+0x44>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800455a:	4b04      	ldr	r3, [pc, #16]	; (800456c <SysTick_Config+0x44>)
 800455c:	2207      	movs	r2, #7
 800455e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004560:	2300      	movs	r3, #0
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b002      	add	sp, #8
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	e000e010 	.word	0xe000e010

08004570 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	210f      	movs	r1, #15
 800457c:	187b      	adds	r3, r7, r1
 800457e:	1c02      	adds	r2, r0, #0
 8004580:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	187b      	adds	r3, r7, r1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	b25b      	sxtb	r3, r3
 800458a:	0011      	movs	r1, r2
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff ff4b 	bl	8004428 <__NVIC_SetPriority>
}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b004      	add	sp, #16
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	0002      	movs	r2, r0
 80045a2:	1dfb      	adds	r3, r7, #7
 80045a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff ff21 	bl	80043f4 <__NVIC_EnableIRQ>
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80045be:	f7ff ffa1 	bl	8004504 <__NVIC_SystemReset>

080045c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff ffab 	bl	8004528 <SysTick_Config>
 80045d2:	0003      	movs	r3, r0
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ea:	e14d      	b.n	8004888 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2101      	movs	r1, #1
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4091      	lsls	r1, r2
 80045f6:	000a      	movs	r2, r1
 80045f8:	4013      	ands	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d100      	bne.n	8004604 <HAL_GPIO_Init+0x28>
 8004602:	e13e      	b.n	8004882 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2203      	movs	r2, #3
 800460a:	4013      	ands	r3, r2
 800460c:	2b01      	cmp	r3, #1
 800460e:	d005      	beq.n	800461c <HAL_GPIO_Init+0x40>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2203      	movs	r2, #3
 8004616:	4013      	ands	r3, r2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	409a      	lsls	r2, r3
 800462a:	0013      	movs	r3, r2
 800462c:	43da      	mvns	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	0013      	movs	r3, r2
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	409a      	lsls	r2, r3
 8004658:	0013      	movs	r3, r2
 800465a:	43da      	mvns	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	2201      	movs	r2, #1
 800466a:	401a      	ands	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	409a      	lsls	r2, r3
 8004670:	0013      	movs	r3, r2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2203      	movs	r2, #3
 8004684:	4013      	ands	r3, r2
 8004686:	2b03      	cmp	r3, #3
 8004688:	d017      	beq.n	80046ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	409a      	lsls	r2, r3
 8004698:	0013      	movs	r3, r2
 800469a:	43da      	mvns	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	409a      	lsls	r2, r3
 80046ac:	0013      	movs	r3, r2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2203      	movs	r2, #3
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d123      	bne.n	800470e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	08da      	lsrs	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3208      	adds	r2, #8
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	58d3      	ldr	r3, [r2, r3]
 80046d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2207      	movs	r2, #7
 80046d8:	4013      	ands	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	220f      	movs	r2, #15
 80046de:	409a      	lsls	r2, r3
 80046e0:	0013      	movs	r3, r2
 80046e2:	43da      	mvns	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2107      	movs	r1, #7
 80046f2:	400b      	ands	r3, r1
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	409a      	lsls	r2, r3
 80046f8:	0013      	movs	r3, r2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	409a      	lsls	r2, r3
 800471c:	0013      	movs	r3, r2
 800471e:	43da      	mvns	r2, r3
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2203      	movs	r2, #3
 800472c:	401a      	ands	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	0013      	movs	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	23c0      	movs	r3, #192	; 0xc0
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	4013      	ands	r3, r2
 800474c:	d100      	bne.n	8004750 <HAL_GPIO_Init+0x174>
 800474e:	e098      	b.n	8004882 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004750:	4a53      	ldr	r2, [pc, #332]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	089b      	lsrs	r3, r3, #2
 8004756:	3318      	adds	r3, #24
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	589b      	ldr	r3, [r3, r2]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2203      	movs	r2, #3
 8004762:	4013      	ands	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	220f      	movs	r2, #15
 8004768:	409a      	lsls	r2, r3
 800476a:	0013      	movs	r3, r2
 800476c:	43da      	mvns	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	23a0      	movs	r3, #160	; 0xa0
 8004778:	05db      	lsls	r3, r3, #23
 800477a:	429a      	cmp	r2, r3
 800477c:	d019      	beq.n	80047b2 <HAL_GPIO_Init+0x1d6>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a48      	ldr	r2, [pc, #288]	; (80048a4 <HAL_GPIO_Init+0x2c8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_GPIO_Init+0x1d2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a47      	ldr	r2, [pc, #284]	; (80048a8 <HAL_GPIO_Init+0x2cc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00d      	beq.n	80047aa <HAL_GPIO_Init+0x1ce>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a46      	ldr	r2, [pc, #280]	; (80048ac <HAL_GPIO_Init+0x2d0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <HAL_GPIO_Init+0x1ca>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a45      	ldr	r2, [pc, #276]	; (80048b0 <HAL_GPIO_Init+0x2d4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <HAL_GPIO_Init+0x1c6>
 800479e:	2304      	movs	r3, #4
 80047a0:	e008      	b.n	80047b4 <HAL_GPIO_Init+0x1d8>
 80047a2:	2305      	movs	r3, #5
 80047a4:	e006      	b.n	80047b4 <HAL_GPIO_Init+0x1d8>
 80047a6:	2303      	movs	r3, #3
 80047a8:	e004      	b.n	80047b4 <HAL_GPIO_Init+0x1d8>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e002      	b.n	80047b4 <HAL_GPIO_Init+0x1d8>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_GPIO_Init+0x1d8>
 80047b2:	2300      	movs	r3, #0
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	2103      	movs	r1, #3
 80047b8:	400a      	ands	r2, r1
 80047ba:	00d2      	lsls	r2, r2, #3
 80047bc:	4093      	lsls	r3, r2
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80047c4:	4936      	ldr	r1, [pc, #216]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	3318      	adds	r3, #24
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d2:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	43da      	mvns	r2, r3
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	035b      	lsls	r3, r3, #13
 80047ea:	4013      	ands	r3, r2
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80047fc:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	43da      	mvns	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	039b      	lsls	r3, r3, #14
 8004814:	4013      	ands	r3, r2
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 8004828:	2384      	movs	r3, #132	; 0x84
 800482a:	58d3      	ldr	r3, [r2, r3]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43da      	mvns	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	029b      	lsls	r3, r3, #10
 8004840:	4013      	ands	r3, r2
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800484c:	4914      	ldr	r1, [pc, #80]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 800484e:	2284      	movs	r2, #132	; 0x84
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004854:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	58d3      	ldr	r3, [r2, r3]
 800485a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	43da      	mvns	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	025b      	lsls	r3, r3, #9
 800486e:	4013      	ands	r3, r2
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800487a:	4909      	ldr	r1, [pc, #36]	; (80048a0 <HAL_GPIO_Init+0x2c4>)
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	40da      	lsrs	r2, r3
 8004890:	1e13      	subs	r3, r2, #0
 8004892:	d000      	beq.n	8004896 <HAL_GPIO_Init+0x2ba>
 8004894:	e6aa      	b.n	80045ec <HAL_GPIO_Init+0x10>
  }
}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b006      	add	sp, #24
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021800 	.word	0x40021800
 80048a4:	50000400 	.word	0x50000400
 80048a8:	50000800 	.word	0x50000800
 80048ac:	50000c00 	.word	0x50000c00
 80048b0:	50001000 	.word	0x50001000

080048b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80048c2:	e0ba      	b.n	8004a3a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048c4:	2201      	movs	r2, #1
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	409a      	lsls	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d100      	bne.n	80048d8 <HAL_GPIO_DeInit+0x24>
 80048d6:	e0ad      	b.n	8004a34 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80048d8:	4a5d      	ldr	r2, [pc, #372]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3318      	adds	r3, #24
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	589b      	ldr	r3, [r3, r2]
 80048e4:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2203      	movs	r2, #3
 80048ea:	4013      	ands	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	220f      	movs	r2, #15
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	23a0      	movs	r3, #160	; 0xa0
 80048fc:	05db      	lsls	r3, r3, #23
 80048fe:	429a      	cmp	r2, r3
 8004900:	d019      	beq.n	8004936 <HAL_GPIO_DeInit+0x82>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a53      	ldr	r2, [pc, #332]	; (8004a54 <HAL_GPIO_DeInit+0x1a0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_DeInit+0x7e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_GPIO_DeInit+0x1a4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00d      	beq.n	800492e <HAL_GPIO_DeInit+0x7a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a51      	ldr	r2, [pc, #324]	; (8004a5c <HAL_GPIO_DeInit+0x1a8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_DeInit+0x76>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a50      	ldr	r2, [pc, #320]	; (8004a60 <HAL_GPIO_DeInit+0x1ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_GPIO_DeInit+0x72>
 8004922:	2304      	movs	r3, #4
 8004924:	e008      	b.n	8004938 <HAL_GPIO_DeInit+0x84>
 8004926:	2305      	movs	r3, #5
 8004928:	e006      	b.n	8004938 <HAL_GPIO_DeInit+0x84>
 800492a:	2303      	movs	r3, #3
 800492c:	e004      	b.n	8004938 <HAL_GPIO_DeInit+0x84>
 800492e:	2302      	movs	r3, #2
 8004930:	e002      	b.n	8004938 <HAL_GPIO_DeInit+0x84>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_GPIO_DeInit+0x84>
 8004936:	2300      	movs	r3, #0
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	2103      	movs	r1, #3
 800493c:	400a      	ands	r2, r1
 800493e:	00d2      	lsls	r2, r2, #3
 8004940:	4093      	lsls	r3, r2
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	429a      	cmp	r2, r3
 8004946:	d136      	bne.n	80049b6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004948:	4a41      	ldr	r2, [pc, #260]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	58d3      	ldr	r3, [r2, r3]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	43d2      	mvns	r2, r2
 8004952:	493f      	ldr	r1, [pc, #252]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 8004954:	4013      	ands	r3, r2
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800495a:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 800495c:	2384      	movs	r3, #132	; 0x84
 800495e:	58d3      	ldr	r3, [r2, r3]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	43d2      	mvns	r2, r2
 8004964:	493a      	ldr	r1, [pc, #232]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 8004966:	4013      	ands	r3, r2
 8004968:	2284      	movs	r2, #132	; 0x84
 800496a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800496c:	4b38      	ldr	r3, [pc, #224]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	43d9      	mvns	r1, r3
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 8004976:	400a      	ands	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800497a:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43d9      	mvns	r1, r3
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 8004984:	400a      	ands	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2203      	movs	r2, #3
 800498c:	4013      	ands	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	220f      	movs	r2, #15
 8004992:	409a      	lsls	r2, r3
 8004994:	0013      	movs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004998:	4a2d      	ldr	r2, [pc, #180]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	3318      	adds	r3, #24
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	589a      	ldr	r2, [r3, r2]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43d9      	mvns	r1, r3
 80049a8:	4829      	ldr	r0, [pc, #164]	; (8004a50 <HAL_GPIO_DeInit+0x19c>)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	400a      	ands	r2, r1
 80049b0:	3318      	adds	r3, #24
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2103      	movs	r1, #3
 80049c0:	4099      	lsls	r1, r3
 80049c2:	000b      	movs	r3, r1
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	08da      	lsrs	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3208      	adds	r2, #8
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	58d3      	ldr	r3, [r2, r3]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	2107      	movs	r1, #7
 80049da:	400a      	ands	r2, r1
 80049dc:	0092      	lsls	r2, r2, #2
 80049de:	210f      	movs	r1, #15
 80049e0:	4091      	lsls	r1, r2
 80049e2:	000a      	movs	r2, r1
 80049e4:	43d1      	mvns	r1, r2
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	08d2      	lsrs	r2, r2, #3
 80049ea:	4019      	ands	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3208      	adds	r2, #8
 80049f0:	0092      	lsls	r2, r2, #2
 80049f2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	0052      	lsls	r2, r2, #1
 80049fc:	2103      	movs	r1, #3
 80049fe:	4091      	lsls	r1, r2
 8004a00:	000a      	movs	r2, r1
 8004a02:	43d2      	mvns	r2, r2
 8004a04:	401a      	ands	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4091      	lsls	r1, r2
 8004a14:	000a      	movs	r2, r1
 8004a16:	43d2      	mvns	r2, r2
 8004a18:	401a      	ands	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	0052      	lsls	r2, r2, #1
 8004a26:	2103      	movs	r1, #3
 8004a28:	4091      	lsls	r1, r2
 8004a2a:	000a      	movs	r2, r1
 8004a2c:	43d2      	mvns	r2, r2
 8004a2e:	401a      	ands	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3301      	adds	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	40da      	lsrs	r2, r3
 8004a40:	1e13      	subs	r3, r2, #0
 8004a42:	d000      	beq.n	8004a46 <HAL_GPIO_DeInit+0x192>
 8004a44:	e73e      	b.n	80048c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021800 	.word	0x40021800
 8004a54:	50000400 	.word	0x50000400
 8004a58:	50000800 	.word	0x50000800
 8004a5c:	50000c00 	.word	0x50000c00
 8004a60:	50001000 	.word	0x50001000

08004a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	000a      	movs	r2, r1
 8004a6e:	1cbb      	adds	r3, r7, #2
 8004a70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	1cba      	adds	r2, r7, #2
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004a7e:	230f      	movs	r3, #15
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e003      	b.n	8004a90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a90:	230f      	movs	r3, #15
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	781b      	ldrb	r3, [r3, #0]
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b004      	add	sp, #16
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	0008      	movs	r0, r1
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	1cbb      	adds	r3, r7, #2
 8004aac:	1c02      	adds	r2, r0, #0
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	1c7b      	adds	r3, r7, #1
 8004ab2:	1c0a      	adds	r2, r1, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab6:	1c7b      	adds	r3, r7, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004abe:	1cbb      	adds	r3, r7, #2
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ac6:	e003      	b.n	8004ad0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ac8:	1cbb      	adds	r3, r7, #2
 8004aca:	881a      	ldrh	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ad0:	46c0      	nop			; (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	0002      	movs	r2, r0
 8004ae0:	1dbb      	adds	r3, r7, #6
 8004ae2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	1dba      	adds	r2, r7, #6
 8004aea:	8812      	ldrh	r2, [r2, #0]
 8004aec:	4013      	ands	r3, r2
 8004aee:	d008      	beq.n	8004b02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004af2:	1dba      	adds	r2, r7, #6
 8004af4:	8812      	ldrh	r2, [r2, #0]
 8004af6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004af8:	1dbb      	adds	r3, r7, #6
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fe fff7 	bl	8003af0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004b02:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	1dba      	adds	r2, r7, #6
 8004b08:	8812      	ldrh	r2, [r2, #0]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d008      	beq.n	8004b20 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b10:	1dba      	adds	r2, r7, #6
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004b16:	1dbb      	adds	r3, r7, #6
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f806 	bl	8004b2c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021800 	.word	0x40021800

08004b2c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	0002      	movs	r2, r0
 8004b34:	1dbb      	adds	r3, r7, #6
 8004b36:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b002      	add	sp, #8
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	0049      	lsls	r1, r1, #1
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40007000 	.word	0x40007000

08004b5c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	000a      	movs	r2, r1
 8004b66:	1cfb      	adds	r3, r7, #3
 8004b68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <HAL_PWR_EnterSTOPMode+0x68>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2207      	movs	r2, #7
 8004b76:	4393      	bics	r3, r2
 8004b78:	001a      	movs	r2, r3
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_PWR_EnterSTOPMode+0x68>)
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e005      	b.n	8004b90 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004b84:	4b0f      	ldr	r3, [pc, #60]	; (8004bc4 <HAL_PWR_EnterSTOPMode+0x68>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <HAL_PWR_EnterSTOPMode+0x68>)
 8004b8a:	2107      	movs	r1, #7
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004b96:	2104      	movs	r1, #4
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004b9c:	1cfb      	adds	r3, r7, #3
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ba4:	bf30      	wfi
 8004ba6:	e002      	b.n	8004bae <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ba8:	bf40      	sev
    __WFE();
 8004baa:	bf20      	wfe
    __WFE();
 8004bac:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004bb4:	2104      	movs	r1, #4
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	611a      	str	r2, [r3, #16]
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b002      	add	sp, #8
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	e000ed00 	.word	0xe000ed00

08004bcc <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	4393      	bics	r3, r2
 8004bd8:	001a      	movs	r2, r3
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004bdc:	2103      	movs	r1, #3
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004be8:	2104      	movs	r1, #4
 8004bea:	430a      	orrs	r2, r1
 8004bec:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004bee:	bf30      	wfi
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40007000 	.word	0x40007000
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d11f      	bne.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	0013      	movs	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	4912      	ldr	r1, [pc, #72]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7fb fa82 	bl	800013c <__udivsi3>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c3e:	e008      	b.n	8004c52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	e001      	b.n	8004c52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e009      	b.n	8004c66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d0ed      	beq.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	40007000 	.word	0x40007000
 8004c74:	fffff9ff 	.word	0xfffff9ff
 8004c78:	20000010 	.word	0x20000010
 8004c7c:	000f4240 	.word	0x000f4240

08004c80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	23e0      	movs	r3, #224	; 0xe0
 8004c8a:	01db      	lsls	r3, r3, #7
 8004c8c:	4013      	ands	r3, r2
}
 8004c8e:	0018      	movs	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000

08004c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f000 fb50 	bl	800534c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x20>
 8004cb6:	e07c      	b.n	8004db2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb8:	4bc3      	ldr	r3, [pc, #780]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2238      	movs	r2, #56	; 0x38
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc2:	4bc1      	ldr	r3, [pc, #772]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x40>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d002      	beq.n	8004cde <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cde:	4bba      	ldr	r3, [pc, #744]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d062      	beq.n	8004db0 <HAL_RCC_OscConfig+0x118>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d15e      	bne.n	8004db0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e32a      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	025b      	lsls	r3, r3, #9
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_OscConfig+0x7a>
 8004d02:	4bb1      	ldr	r3, [pc, #708]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4bb0      	ldr	r3, [pc, #704]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	0249      	lsls	r1, r1, #9
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e020      	b.n	8004d54 <HAL_RCC_OscConfig+0xbc>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	23a0      	movs	r3, #160	; 0xa0
 8004d18:	02db      	lsls	r3, r3, #11
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10e      	bne.n	8004d3c <HAL_RCC_OscConfig+0xa4>
 8004d1e:	4baa      	ldr	r3, [pc, #680]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4ba9      	ldr	r3, [pc, #676]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d24:	2180      	movs	r1, #128	; 0x80
 8004d26:	02c9      	lsls	r1, r1, #11
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	4ba6      	ldr	r3, [pc, #664]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4ba5      	ldr	r3, [pc, #660]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d32:	2180      	movs	r1, #128	; 0x80
 8004d34:	0249      	lsls	r1, r1, #9
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e00b      	b.n	8004d54 <HAL_RCC_OscConfig+0xbc>
 8004d3c:	4ba2      	ldr	r3, [pc, #648]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4ba1      	ldr	r3, [pc, #644]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d42:	49a2      	ldr	r1, [pc, #648]	; (8004fcc <HAL_RCC_OscConfig+0x334>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b9f      	ldr	r3, [pc, #636]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b9e      	ldr	r3, [pc, #632]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d4e:	49a0      	ldr	r1, [pc, #640]	; (8004fd0 <HAL_RCC_OscConfig+0x338>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d014      	beq.n	8004d86 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7ff faea 	bl	8004334 <HAL_GetTick>
 8004d60:	0003      	movs	r3, r0
 8004d62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d66:	f7ff fae5 	bl	8004334 <HAL_GetTick>
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	; 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e2e9      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d78:	4b93      	ldr	r3, [pc, #588]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	029b      	lsls	r3, r3, #10
 8004d80:	4013      	ands	r3, r2
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0xce>
 8004d84:	e015      	b.n	8004db2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7ff fad5 	bl	8004334 <HAL_GetTick>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7ff fad0 	bl	8004334 <HAL_GetTick>
 8004d94:	0002      	movs	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e2d4      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004da2:	4b89      	ldr	r3, [pc, #548]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	4013      	ands	r3, r2
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0xf8>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2202      	movs	r2, #2
 8004db8:	4013      	ands	r3, r2
 8004dba:	d100      	bne.n	8004dbe <HAL_RCC_OscConfig+0x126>
 8004dbc:	e099      	b.n	8004ef2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dbe:	4b82      	ldr	r3, [pc, #520]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2238      	movs	r2, #56	; 0x38
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc8:	4b7f      	ldr	r3, [pc, #508]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	4013      	ands	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d102      	bne.n	8004dde <HAL_RCC_OscConfig+0x146>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d135      	bne.n	8004e50 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de4:	4b78      	ldr	r3, [pc, #480]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4013      	ands	r3, r2
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_OscConfig+0x164>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e2a7      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b72      	ldr	r3, [pc, #456]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x33c>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	021a      	lsls	r2, r3, #8
 8004e0c:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d112      	bne.n	8004e3e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e18:	4b6b      	ldr	r3, [pc, #428]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x340>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	0019      	movs	r1, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004e2c:	4b66      	ldr	r3, [pc, #408]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0adb      	lsrs	r3, r3, #11
 8004e32:	2207      	movs	r2, #7
 8004e34:	4013      	ands	r3, r2
 8004e36:	4a69      	ldr	r2, [pc, #420]	; (8004fdc <HAL_RCC_OscConfig+0x344>)
 8004e38:	40da      	lsrs	r2, r3
 8004e3a:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_RCC_OscConfig+0x348>)
 8004e3c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e3e:	4b69      	ldr	r3, [pc, #420]	; (8004fe4 <HAL_RCC_OscConfig+0x34c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7ff fa1a 	bl	800427c <HAL_InitTick>
 8004e48:	1e03      	subs	r3, r0, #0
 8004e4a:	d051      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e27d      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d030      	beq.n	8004eba <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004e58:	4b5b      	ldr	r3, [pc, #364]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5e      	ldr	r2, [pc, #376]	; (8004fd8 <HAL_RCC_OscConfig+0x340>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	4b58      	ldr	r3, [pc, #352]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004e6c:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	4b55      	ldr	r3, [pc, #340]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0049      	lsls	r1, r1, #1
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7ff fa5b 	bl	8004334 <HAL_GetTick>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e84:	f7ff fa56 	bl	8004334 <HAL_GetTick>
 8004e88:	0002      	movs	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e25a      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e96:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea2:	4b49      	ldr	r3, [pc, #292]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4a4b      	ldr	r2, [pc, #300]	; (8004fd4 <HAL_RCC_OscConfig+0x33c>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	021a      	lsls	r2, r3, #8
 8004eb2:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	e01b      	b.n	8004ef2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004eba:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004ec0:	4949      	ldr	r1, [pc, #292]	; (8004fe8 <HAL_RCC_OscConfig+0x350>)
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7ff fa35 	bl	8004334 <HAL_GetTick>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7ff fa30 	bl	8004334 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e234      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee2:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4013      	ands	r3, r2
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x238>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ef0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d047      	beq.n	8004f8c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004efc:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2238      	movs	r2, #56	; 0x38
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b18      	cmp	r3, #24
 8004f06:	d10a      	bne.n	8004f1e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004f08:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d03c      	beq.n	8004f8c <HAL_RCC_OscConfig+0x2f4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d138      	bne.n	8004f8c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e216      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f2a:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f32:	f7ff f9ff 	bl	8004334 <HAL_GetTick>
 8004f36:	0003      	movs	r3, r0
 8004f38:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3c:	f7ff f9fa 	bl	8004334 <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1fe      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f52:	2202      	movs	r2, #2
 8004f54:	4013      	ands	r3, r2
 8004f56:	d0f1      	beq.n	8004f3c <HAL_RCC_OscConfig+0x2a4>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f60:	2101      	movs	r1, #1
 8004f62:	438a      	bics	r2, r1
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7ff f9e5 	bl	8004334 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f70:	f7ff f9e0 	bl	8004334 <HAL_GetTick>
 8004f74:	0002      	movs	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1e4      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f86:	2202      	movs	r2, #2
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d1f1      	bne.n	8004f70 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2204      	movs	r2, #4
 8004f92:	4013      	ands	r3, r2
 8004f94:	d100      	bne.n	8004f98 <HAL_RCC_OscConfig+0x300>
 8004f96:	e0c7      	b.n	8005128 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f98:	231f      	movs	r3, #31
 8004f9a:	18fb      	adds	r3, r7, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004fa0:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2238      	movs	r2, #56	; 0x38
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d11f      	bne.n	8004fec <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_OscConfig+0x330>)
 8004fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d100      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x320>
 8004fb6:	e0b7      	b.n	8005128 <HAL_RCC_OscConfig+0x490>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d000      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x32a>
 8004fc0:	e0b2      	b.n	8005128 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e1c2      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	fffeffff 	.word	0xfffeffff
 8004fd0:	fffbffff 	.word	0xfffbffff
 8004fd4:	ffff80ff 	.word	0xffff80ff
 8004fd8:	ffffc7ff 	.word	0xffffc7ff
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	20000010 	.word	0x20000010
 8004fe4:	20000014 	.word	0x20000014
 8004fe8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fec:	4bb5      	ldr	r3, [pc, #724]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8004fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	055b      	lsls	r3, r3, #21
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_OscConfig+0x364>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x366>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d011      	beq.n	8005026 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4bb0      	ldr	r3, [pc, #704]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005006:	4baf      	ldr	r3, [pc, #700]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	0549      	lsls	r1, r1, #21
 800500c:	430a      	orrs	r2, r1
 800500e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005010:	4bac      	ldr	r3, [pc, #688]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	055b      	lsls	r3, r3, #21
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800501e:	231f      	movs	r3, #31
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005026:	4ba8      	ldr	r3, [pc, #672]	; (80052c8 <HAL_RCC_OscConfig+0x630>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4013      	ands	r3, r2
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005032:	4ba5      	ldr	r3, [pc, #660]	; (80052c8 <HAL_RCC_OscConfig+0x630>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4ba4      	ldr	r3, [pc, #656]	; (80052c8 <HAL_RCC_OscConfig+0x630>)
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0049      	lsls	r1, r1, #1
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005040:	f7ff f978 	bl	8004334 <HAL_GetTick>
 8005044:	0003      	movs	r3, r0
 8005046:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504a:	f7ff f973 	bl	8004334 <HAL_GetTick>
 800504e:	0002      	movs	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e177      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505c:	4b9a      	ldr	r3, [pc, #616]	; (80052c8 <HAL_RCC_OscConfig+0x630>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <HAL_RCC_OscConfig+0x3e6>
 8005070:	4b94      	ldr	r3, [pc, #592]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005074:	4b93      	ldr	r3, [pc, #588]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005076:	2101      	movs	r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	65da      	str	r2, [r3, #92]	; 0x5c
 800507c:	e01c      	b.n	80050b8 <HAL_RCC_OscConfig+0x420>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b05      	cmp	r3, #5
 8005084:	d10c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x408>
 8005086:	4b8f      	ldr	r3, [pc, #572]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005088:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800508a:	4b8e      	ldr	r3, [pc, #568]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800508c:	2104      	movs	r1, #4
 800508e:	430a      	orrs	r2, r1
 8005090:	65da      	str	r2, [r3, #92]	; 0x5c
 8005092:	4b8c      	ldr	r3, [pc, #560]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005096:	4b8b      	ldr	r3, [pc, #556]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005098:	2101      	movs	r1, #1
 800509a:	430a      	orrs	r2, r1
 800509c:	65da      	str	r2, [r3, #92]	; 0x5c
 800509e:	e00b      	b.n	80050b8 <HAL_RCC_OscConfig+0x420>
 80050a0:	4b88      	ldr	r3, [pc, #544]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80050a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050a4:	4b87      	ldr	r3, [pc, #540]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80050a6:	2101      	movs	r1, #1
 80050a8:	438a      	bics	r2, r1
 80050aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ac:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80050ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050b0:	4b84      	ldr	r3, [pc, #528]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80050b2:	2104      	movs	r1, #4
 80050b4:	438a      	bics	r2, r1
 80050b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d014      	beq.n	80050ea <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7ff f938 	bl	8004334 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	e009      	b.n	80050de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7ff f933 	bl	8004334 <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	4a7d      	ldr	r2, [pc, #500]	; (80052cc <HAL_RCC_OscConfig+0x634>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e136      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050de:	4b79      	ldr	r3, [pc, #484]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	2202      	movs	r2, #2
 80050e4:	4013      	ands	r3, r2
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x432>
 80050e8:	e013      	b.n	8005112 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7ff f923 	bl	8004334 <HAL_GetTick>
 80050ee:	0003      	movs	r3, r0
 80050f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f2:	e009      	b.n	8005108 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7ff f91e 	bl	8004334 <HAL_GetTick>
 80050f8:	0002      	movs	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	4a73      	ldr	r2, [pc, #460]	; (80052cc <HAL_RCC_OscConfig+0x634>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e121      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005108:	4b6e      	ldr	r3, [pc, #440]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800510a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005112:	231f      	movs	r3, #31
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d105      	bne.n	8005128 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800511c:	4b69      	ldr	r3, [pc, #420]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800511e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005120:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005122:	496b      	ldr	r1, [pc, #428]	; (80052d0 <HAL_RCC_OscConfig+0x638>)
 8005124:	400a      	ands	r2, r1
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2220      	movs	r2, #32
 800512e:	4013      	ands	r3, r2
 8005130:	d039      	beq.n	80051a6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800513a:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b61      	ldr	r3, [pc, #388]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	03c9      	lsls	r1, r1, #15
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005148:	f7ff f8f4 	bl	8004334 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005152:	f7ff f8ef 	bl	8004334 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0f3      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005164:	4b57      	ldr	r3, [pc, #348]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	4013      	ands	r3, r2
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x4ba>
 8005170:	e019      	b.n	80051a6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005172:	4b54      	ldr	r3, [pc, #336]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b53      	ldr	r3, [pc, #332]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005178:	4956      	ldr	r1, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x63c>)
 800517a:	400a      	ands	r2, r1
 800517c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517e:	f7ff f8d9 	bl	8004334 <HAL_GetTick>
 8005182:	0003      	movs	r3, r0
 8005184:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005188:	f7ff f8d4 	bl	8004334 <HAL_GetTick>
 800518c:	0002      	movs	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0d8      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800519a:	4b4a      	ldr	r3, [pc, #296]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	4013      	ands	r3, r2
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d100      	bne.n	80051b0 <HAL_RCC_OscConfig+0x518>
 80051ae:	e0cc      	b.n	800534a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b0:	4b44      	ldr	r3, [pc, #272]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2238      	movs	r2, #56	; 0x38
 80051b6:	4013      	ands	r3, r2
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d100      	bne.n	80051be <HAL_RCC_OscConfig+0x526>
 80051bc:	e07b      	b.n	80052b6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d156      	bne.n	8005274 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c6:	4b3f      	ldr	r3, [pc, #252]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b3e      	ldr	r3, [pc, #248]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80051cc:	4942      	ldr	r1, [pc, #264]	; (80052d8 <HAL_RCC_OscConfig+0x640>)
 80051ce:	400a      	ands	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d2:	f7ff f8af 	bl	8004334 <HAL_GetTick>
 80051d6:	0003      	movs	r3, r0
 80051d8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7ff f8aa 	bl	8004334 <HAL_GetTick>
 80051e0:	0002      	movs	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0ae      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ee:	4b35      	ldr	r3, [pc, #212]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	049b      	lsls	r3, r3, #18
 80051f6:	4013      	ands	r3, r2
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051fa:	4b32      	ldr	r3, [pc, #200]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	4a37      	ldr	r2, [pc, #220]	; (80052dc <HAL_RCC_OscConfig+0x644>)
 8005200:	4013      	ands	r3, r2
 8005202:	0019      	movs	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	431a      	orrs	r2, r3
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800522a:	430a      	orrs	r2, r1
 800522c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522e:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	0449      	lsls	r1, r1, #17
 8005238:	430a      	orrs	r2, r1
 800523a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800523c:	4b21      	ldr	r3, [pc, #132]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005242:	2180      	movs	r1, #128	; 0x80
 8005244:	0549      	lsls	r1, r1, #21
 8005246:	430a      	orrs	r2, r1
 8005248:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7ff f873 	bl	8004334 <HAL_GetTick>
 800524e:	0003      	movs	r3, r0
 8005250:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005254:	f7ff f86e 	bl	8004334 <HAL_GetTick>
 8005258:	0002      	movs	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e072      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	2380      	movs	r3, #128	; 0x80
 800526c:	049b      	lsls	r3, r3, #18
 800526e:	4013      	ands	r3, r2
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0x5bc>
 8005272:	e06a      	b.n	800534a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b13      	ldr	r3, [pc, #76]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800527a:	4917      	ldr	r1, [pc, #92]	; (80052d8 <HAL_RCC_OscConfig+0x640>)
 800527c:	400a      	ands	r2, r1
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7ff f858 	bl	8004334 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528a:	f7ff f853 	bl	8004334 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e057      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	049b      	lsls	r3, r3, #18
 80052a4:	4013      	ands	r3, r2
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80052a8:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_OscConfig+0x62c>)
 80052ae:	490c      	ldr	r1, [pc, #48]	; (80052e0 <HAL_RCC_OscConfig+0x648>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e049      	b.n	800534a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d112      	bne.n	80052e4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e044      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	40021000 	.word	0x40021000
 80052c8:	40007000 	.word	0x40007000
 80052cc:	00001388 	.word	0x00001388
 80052d0:	efffffff 	.word	0xefffffff
 80052d4:	ffbfffff 	.word	0xffbfffff
 80052d8:	feffffff 	.word	0xfeffffff
 80052dc:	11c1808c 	.word	0x11c1808c
 80052e0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <HAL_RCC_OscConfig+0x6bc>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2203      	movs	r2, #3
 80052ee:	401a      	ands	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d126      	bne.n	8005346 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2270      	movs	r2, #112	; 0x70
 80052fc:	401a      	ands	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d11f      	bne.n	8005346 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	23fe      	movs	r3, #254	; 0xfe
 800530a:	01db      	lsls	r3, r3, #7
 800530c:	401a      	ands	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d116      	bne.n	8005346 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	23f8      	movs	r3, #248	; 0xf8
 800531c:	039b      	lsls	r3, r3, #14
 800531e:	401a      	ands	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d10e      	bne.n	8005346 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	23e0      	movs	r3, #224	; 0xe0
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	401a      	ands	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	0f5b      	lsrs	r3, r3, #29
 800533c:	075a      	lsls	r2, r3, #29
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b008      	add	sp, #32
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40021000 	.word	0x40021000

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0e9      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2207      	movs	r2, #7
 8005372:	4013      	ands	r3, r2
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d91e      	bls.n	80053b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b73      	ldr	r3, [pc, #460]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2207      	movs	r2, #7
 8005380:	4393      	bics	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	4b70      	ldr	r3, [pc, #448]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800538c:	f7fe ffd2 	bl	8004334 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005394:	e009      	b.n	80053aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fe ffcd 	bl	8004334 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a6a      	ldr	r2, [pc, #424]	; (800554c <HAL_RCC_ClockConfig+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e0ca      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2207      	movs	r2, #7
 80053b0:	4013      	ands	r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2202      	movs	r2, #2
 80053be:	4013      	ands	r3, r2
 80053c0:	d015      	beq.n	80053ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2204      	movs	r2, #4
 80053c8:	4013      	ands	r3, r2
 80053ca:	d006      	beq.n	80053da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053cc:	4b60      	ldr	r3, [pc, #384]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b5f      	ldr	r3, [pc, #380]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053d2:	21e0      	movs	r1, #224	; 0xe0
 80053d4:	01c9      	lsls	r1, r1, #7
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053da:	4b5d      	ldr	r3, [pc, #372]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4a5d      	ldr	r2, [pc, #372]	; (8005554 <HAL_RCC_ClockConfig+0x1fc>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	0019      	movs	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 80053ea:	430a      	orrs	r2, r1
 80053ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	4013      	ands	r3, r2
 80053f6:	d057      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005400:	4b53      	ldr	r3, [pc, #332]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	029b      	lsls	r3, r3, #10
 8005408:	4013      	ands	r3, r2
 800540a:	d12b      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e097      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d107      	bne.n	8005428 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005418:	4b4d      	ldr	r3, [pc, #308]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	049b      	lsls	r3, r3, #18
 8005420:	4013      	ands	r3, r2
 8005422:	d11f      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e08b      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d107      	bne.n	8005440 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005430:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4013      	ands	r3, r2
 800543a:	d113      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e07f      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d106      	bne.n	8005456 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005448:	4b41      	ldr	r3, [pc, #260]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	2202      	movs	r2, #2
 800544e:	4013      	ands	r3, r2
 8005450:	d108      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e074      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	2202      	movs	r2, #2
 800545c:	4013      	ands	r3, r2
 800545e:	d101      	bne.n	8005464 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e06d      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005464:	4b3a      	ldr	r3, [pc, #232]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2207      	movs	r2, #7
 800546a:	4393      	bics	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005474:	430a      	orrs	r2, r1
 8005476:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fe ff5c 	bl	8004334 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005480:	e009      	b.n	8005496 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005482:	f7fe ff57 	bl	8004334 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <HAL_RCC_ClockConfig+0x1f4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e054      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005496:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2238      	movs	r2, #56	; 0x38
 800549c:	401a      	ands	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d1ec      	bne.n	8005482 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a8:	4b27      	ldr	r3, [pc, #156]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2207      	movs	r2, #7
 80054ae:	4013      	ands	r3, r2
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d21e      	bcs.n	80054f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2207      	movs	r2, #7
 80054bc:	4393      	bics	r3, r2
 80054be:	0019      	movs	r1, r3
 80054c0:	4b21      	ldr	r3, [pc, #132]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054c8:	f7fe ff34 	bl	8004334 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054d0:	e009      	b.n	80054e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054d2:	f7fe ff2f 	bl	8004334 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_RCC_ClockConfig+0x1f4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e02c      	b.n	8005540 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <HAL_RCC_ClockConfig+0x1f0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2207      	movs	r2, #7
 80054ec:	4013      	ands	r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1ee      	bne.n	80054d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2204      	movs	r2, #4
 80054fa:	4013      	ands	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	4a15      	ldr	r2, [pc, #84]	; (8005558 <HAL_RCC_ClockConfig+0x200>)
 8005504:	4013      	ands	r3, r2
 8005506:	0019      	movs	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005512:	f000 f829 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 8005516:	0001      	movs	r1, r0
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <HAL_RCC_ClockConfig+0x1f8>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	220f      	movs	r2, #15
 8005520:	401a      	ands	r2, r3
 8005522:	4b0e      	ldr	r3, [pc, #56]	; (800555c <HAL_RCC_ClockConfig+0x204>)
 8005524:	0092      	lsls	r2, r2, #2
 8005526:	58d3      	ldr	r3, [r2, r3]
 8005528:	221f      	movs	r2, #31
 800552a:	4013      	ands	r3, r2
 800552c:	000a      	movs	r2, r1
 800552e:	40da      	lsrs	r2, r3
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_RCC_ClockConfig+0x208>)
 8005532:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_ClockConfig+0x20c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0018      	movs	r0, r3
 800553a:	f7fe fe9f 	bl	800427c <HAL_InitTick>
 800553e:	0003      	movs	r3, r0
}
 8005540:	0018      	movs	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	b004      	add	sp, #16
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40022000 	.word	0x40022000
 800554c:	00001388 	.word	0x00001388
 8005550:	40021000 	.word	0x40021000
 8005554:	fffff0ff 	.word	0xfffff0ff
 8005558:	ffff8fff 	.word	0xffff8fff
 800555c:	0801496c 	.word	0x0801496c
 8005560:	20000010 	.word	0x20000010
 8005564:	20000014 	.word	0x20000014

08005568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800556e:	4b3c      	ldr	r3, [pc, #240]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2238      	movs	r2, #56	; 0x38
 8005574:	4013      	ands	r3, r2
 8005576:	d10f      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0adb      	lsrs	r3, r3, #11
 800557e:	2207      	movs	r2, #7
 8005580:	4013      	ands	r3, r2
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	0013      	movs	r3, r2
 8005588:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	4835      	ldr	r0, [pc, #212]	; (8005664 <HAL_RCC_GetSysClockFreq+0xfc>)
 800558e:	f7fa fdd5 	bl	800013c <__udivsi3>
 8005592:	0003      	movs	r3, r0
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	e05d      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005598:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2238      	movs	r2, #56	; 0x38
 800559e:	4013      	ands	r3, r2
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d102      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055a4:	4b30      	ldr	r3, [pc, #192]	; (8005668 <HAL_RCC_GetSysClockFreq+0x100>)
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	e054      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055aa:	4b2d      	ldr	r3, [pc, #180]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2238      	movs	r2, #56	; 0x38
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d138      	bne.n	8005628 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80055b6:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	2203      	movs	r2, #3
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c0:	4b27      	ldr	r3, [pc, #156]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	2207      	movs	r2, #7
 80055c8:	4013      	ands	r3, r2
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d10d      	bne.n	80055f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4824      	ldr	r0, [pc, #144]	; (8005668 <HAL_RCC_GetSysClockFreq+0x100>)
 80055d8:	f7fa fdb0 	bl	800013c <__udivsi3>
 80055dc:	0003      	movs	r3, r0
 80055de:	0019      	movs	r1, r3
 80055e0:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	227f      	movs	r2, #127	; 0x7f
 80055e8:	4013      	ands	r3, r2
 80055ea:	434b      	muls	r3, r1
 80055ec:	617b      	str	r3, [r7, #20]
        break;
 80055ee:	e00d      	b.n	800560c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	481c      	ldr	r0, [pc, #112]	; (8005664 <HAL_RCC_GetSysClockFreq+0xfc>)
 80055f4:	f7fa fda2 	bl	800013c <__udivsi3>
 80055f8:	0003      	movs	r3, r0
 80055fa:	0019      	movs	r1, r3
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	0a1b      	lsrs	r3, r3, #8
 8005602:	227f      	movs	r2, #127	; 0x7f
 8005604:	4013      	ands	r3, r2
 8005606:	434b      	muls	r3, r1
 8005608:	617b      	str	r3, [r7, #20]
        break;
 800560a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	0f5b      	lsrs	r3, r3, #29
 8005612:	2207      	movs	r2, #7
 8005614:	4013      	ands	r3, r2
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	6978      	ldr	r0, [r7, #20]
 800561e:	f7fa fd8d 	bl	800013c <__udivsi3>
 8005622:	0003      	movs	r3, r0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e015      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005628:	4b0d      	ldr	r3, [pc, #52]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2238      	movs	r2, #56	; 0x38
 800562e:	4013      	ands	r3, r2
 8005630:	2b20      	cmp	r3, #32
 8005632:	d103      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	e00b      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2238      	movs	r2, #56	; 0x38
 8005642:	4013      	ands	r3, r2
 8005644:	2b18      	cmp	r3, #24
 8005646:	d103      	bne.n	8005650 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005648:	23fa      	movs	r3, #250	; 0xfa
 800564a:	01db      	lsls	r3, r3, #7
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e001      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005654:	693b      	ldr	r3, [r7, #16]
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b006      	add	sp, #24
 800565c:	bd80      	pop	{r7, pc}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	40021000 	.word	0x40021000
 8005664:	00f42400 	.word	0x00f42400
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b02      	ldr	r3, [pc, #8]	; (800567c <HAL_RCC_GetHCLKFreq+0x10>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	20000010 	.word	0x20000010

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b5b0      	push	{r4, r5, r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005684:	f7ff fff2 	bl	800566c <HAL_RCC_GetHCLKFreq>
 8005688:	0004      	movs	r4, r0
 800568a:	f7ff faf9 	bl	8004c80 <LL_RCC_GetAPB1Prescaler>
 800568e:	0003      	movs	r3, r0
 8005690:	0b1a      	lsrs	r2, r3, #12
 8005692:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	58d3      	ldr	r3, [r2, r3]
 8005698:	221f      	movs	r2, #31
 800569a:	4013      	ands	r3, r2
 800569c:	40dc      	lsrs	r4, r3
 800569e:	0023      	movs	r3, r4
}
 80056a0:	0018      	movs	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdb0      	pop	{r4, r5, r7, pc}
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	080149ac 	.word	0x080149ac

080056ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80056b4:	2313      	movs	r3, #19
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056bc:	2312      	movs	r3, #18
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	4013      	ands	r3, r2
 80056ce:	d100      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80056d0:	e0ad      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056d2:	2011      	movs	r0, #17
 80056d4:	183b      	adds	r3, r7, r0
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056da:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	055b      	lsls	r3, r3, #21
 80056e2:	4013      	ands	r3, r2
 80056e4:	d110      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ea:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0549      	lsls	r1, r1, #21
 80056f0:	430a      	orrs	r2, r1
 80056f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80056f4:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	055b      	lsls	r3, r3, #21
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005702:	183b      	adds	r3, r7, r0
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005708:	4b3c      	ldr	r3, [pc, #240]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800570e:	2180      	movs	r1, #128	; 0x80
 8005710:	0049      	lsls	r1, r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005716:	f7fe fe0d 	bl	8004334 <HAL_GetTick>
 800571a:	0003      	movs	r3, r0
 800571c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800571e:	e00b      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005720:	f7fe fe08 	bl	8004334 <HAL_GetTick>
 8005724:	0002      	movs	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d904      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800572e:	2313      	movs	r3, #19
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2203      	movs	r2, #3
 8005734:	701a      	strb	r2, [r3, #0]
        break;
 8005736:	e005      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005738:	4b30      	ldr	r3, [pc, #192]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4013      	ands	r3, r2
 8005742:	d0ed      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005744:	2313      	movs	r3, #19
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d15e      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800574e:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005752:	23c0      	movs	r3, #192	; 0xc0
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4013      	ands	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	429a      	cmp	r2, r3
 8005768:	d014      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800576a:	4b23      	ldr	r3, [pc, #140]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800576c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576e:	4a24      	ldr	r2, [pc, #144]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005770:	4013      	ands	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005774:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	0249      	lsls	r1, r1, #9
 800577e:	430a      	orrs	r2, r1
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005782:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005786:	4b1c      	ldr	r3, [pc, #112]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005788:	491e      	ldr	r1, [pc, #120]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800578a:	400a      	ands	r2, r1
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2201      	movs	r2, #1
 8005798:	4013      	ands	r3, r2
 800579a:	d016      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fe fdca 	bl	8004334 <HAL_GetTick>
 80057a0:	0003      	movs	r3, r0
 80057a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057a4:	e00c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a6:	f7fe fdc5 	bl	8004334 <HAL_GetTick>
 80057aa:	0002      	movs	r2, r0
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d904      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80057b6:	2313      	movs	r3, #19
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	2203      	movs	r2, #3
 80057bc:	701a      	strb	r2, [r3, #0]
            break;
 80057be:	e004      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c0:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	2202      	movs	r2, #2
 80057c6:	4013      	ands	r3, r2
 80057c8:	d0ed      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80057ca:	2313      	movs	r3, #19
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	4a09      	ldr	r2, [pc, #36]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80057da:	4013      	ands	r3, r2
 80057dc:	0019      	movs	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80057e4:	430a      	orrs	r2, r1
 80057e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80057e8:	e016      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057ea:	2312      	movs	r3, #18
 80057ec:	18fb      	adds	r3, r7, r3
 80057ee:	2213      	movs	r2, #19
 80057f0:	18ba      	adds	r2, r7, r2
 80057f2:	7812      	ldrb	r2, [r2, #0]
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	e00f      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40007000 	.word	0x40007000
 8005800:	fffffcff 	.word	0xfffffcff
 8005804:	fffeffff 	.word	0xfffeffff
 8005808:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	2312      	movs	r3, #18
 800580e:	18fb      	adds	r3, r7, r3
 8005810:	2213      	movs	r2, #19
 8005812:	18ba      	adds	r2, r7, r2
 8005814:	7812      	ldrb	r2, [r2, #0]
 8005816:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005818:	2311      	movs	r3, #17
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d105      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005822:	4bb6      	ldr	r3, [pc, #728]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005826:	4bb5      	ldr	r3, [pc, #724]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005828:	49b5      	ldr	r1, [pc, #724]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800582a:	400a      	ands	r2, r1
 800582c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	4013      	ands	r3, r2
 8005836:	d009      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005838:	4bb0      	ldr	r3, [pc, #704]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	2203      	movs	r2, #3
 800583e:	4393      	bics	r3, r2
 8005840:	0019      	movs	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4bad      	ldr	r3, [pc, #692]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005848:	430a      	orrs	r2, r1
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2202      	movs	r2, #2
 8005852:	4013      	ands	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005856:	4ba9      	ldr	r3, [pc, #676]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	220c      	movs	r2, #12
 800585c:	4393      	bics	r3, r2
 800585e:	0019      	movs	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4ba5      	ldr	r3, [pc, #660]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005866:	430a      	orrs	r2, r1
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2204      	movs	r2, #4
 8005870:	4013      	ands	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005874:	4ba1      	ldr	r3, [pc, #644]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	2230      	movs	r2, #48	; 0x30
 800587a:	4393      	bics	r3, r2
 800587c:	0019      	movs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	4b9e      	ldr	r3, [pc, #632]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005884:	430a      	orrs	r2, r1
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	4013      	ands	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005892:	4b9a      	ldr	r3, [pc, #616]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	4a9b      	ldr	r2, [pc, #620]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005898:	4013      	ands	r3, r2
 800589a:	0019      	movs	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	4b96      	ldr	r3, [pc, #600]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058a2:	430a      	orrs	r2, r1
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	2380      	movs	r3, #128	; 0x80
 80058ac:	015b      	lsls	r3, r3, #5
 80058ae:	4013      	ands	r3, r2
 80058b0:	d009      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80058b2:	4b92      	ldr	r3, [pc, #584]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b6:	4a94      	ldr	r2, [pc, #592]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	0019      	movs	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	4b8e      	ldr	r3, [pc, #568]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058c2:	430a      	orrs	r2, r1
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4013      	ands	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058d2:	4b8a      	ldr	r3, [pc, #552]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	4a8d      	ldr	r2, [pc, #564]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80058d8:	4013      	ands	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e0:	4b86      	ldr	r3, [pc, #536]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058e2:	430a      	orrs	r2, r1
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	2380      	movs	r3, #128	; 0x80
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4013      	ands	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058f2:	4b82      	ldr	r3, [pc, #520]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	4a86      	ldr	r2, [pc, #536]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4b7e      	ldr	r3, [pc, #504]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005902:	430a      	orrs	r2, r1
 8005904:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2220      	movs	r2, #32
 800590c:	4013      	ands	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005910:	4b7a      	ldr	r3, [pc, #488]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	4a7f      	ldr	r2, [pc, #508]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005916:	4013      	ands	r3, r2
 8005918:	0019      	movs	r1, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	4b77      	ldr	r3, [pc, #476]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005920:	430a      	orrs	r2, r1
 8005922:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	4013      	ands	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800592e:	4b73      	ldr	r3, [pc, #460]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	4a79      	ldr	r2, [pc, #484]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005934:	4013      	ands	r3, r2
 8005936:	0019      	movs	r1, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	4b6f      	ldr	r3, [pc, #444]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800593e:	430a      	orrs	r2, r1
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	01db      	lsls	r3, r3, #7
 800594a:	4013      	ands	r3, r2
 800594c:	d015      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800594e:	4b6b      	ldr	r3, [pc, #428]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	0899      	lsrs	r1, r3, #2
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595a:	4b68      	ldr	r3, [pc, #416]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800595c:	430a      	orrs	r2, r1
 800595e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	05db      	lsls	r3, r3, #23
 8005968:	429a      	cmp	r2, r3
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800596c:	4b63      	ldr	r3, [pc, #396]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	4b62      	ldr	r3, [pc, #392]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	0249      	lsls	r1, r1, #9
 8005976:	430a      	orrs	r2, r1
 8005978:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	4013      	ands	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005986:	4b5d      	ldr	r3, [pc, #372]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	2240      	movs	r2, #64	; 0x40
 800598c:	4393      	bics	r3, r2
 800598e:	0019      	movs	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	4b59      	ldr	r3, [pc, #356]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005996:	430a      	orrs	r2, r1
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	039b      	lsls	r3, r3, #14
 80059a2:	4013      	ands	r3, r2
 80059a4:	d016      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059a6:	4b55      	ldr	r3, [pc, #340]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	4a5c      	ldr	r2, [pc, #368]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	0019      	movs	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b4:	4b51      	ldr	r3, [pc, #324]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b6:	430a      	orrs	r2, r1
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	03db      	lsls	r3, r3, #15
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d106      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80059c6:	4b4d      	ldr	r3, [pc, #308]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059cc:	2180      	movs	r1, #128	; 0x80
 80059ce:	0449      	lsls	r1, r1, #17
 80059d0:	430a      	orrs	r2, r1
 80059d2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	03db      	lsls	r3, r3, #15
 80059dc:	4013      	ands	r3, r2
 80059de:	d016      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80059e0:	4b46      	ldr	r3, [pc, #280]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	4a4e      	ldr	r2, [pc, #312]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	0019      	movs	r1, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059ee:	4b43      	ldr	r3, [pc, #268]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059f0:	430a      	orrs	r2, r1
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	045b      	lsls	r3, r3, #17
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d106      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	4b3d      	ldr	r3, [pc, #244]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	0449      	lsls	r1, r1, #17
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4013      	ands	r3, r2
 8005a18:	d014      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005a1a:	4b38      	ldr	r3, [pc, #224]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	2203      	movs	r2, #3
 8005a20:	4393      	bics	r3, r2
 8005a22:	0019      	movs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	4b34      	ldr	r3, [pc, #208]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d106      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005a36:	4b31      	ldr	r3, [pc, #196]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	4b30      	ldr	r3, [pc, #192]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	0249      	lsls	r1, r1, #9
 8005a40:	430a      	orrs	r2, r1
 8005a42:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	019b      	lsls	r3, r3, #6
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d014      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005a50:	4b2a      	ldr	r3, [pc, #168]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	220c      	movs	r2, #12
 8005a56:	4393      	bics	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a5e:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005a6c:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	4b22      	ldr	r3, [pc, #136]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a72:	2180      	movs	r1, #128	; 0x80
 8005a74:	0249      	lsls	r1, r1, #9
 8005a76:	430a      	orrs	r2, r1
 8005a78:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	045b      	lsls	r3, r3, #17
 8005a82:	4013      	ands	r3, r2
 8005a84:	d016      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a86:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	0019      	movs	r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a94:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a96:	430a      	orrs	r2, r1
 8005a98:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	0449      	lsls	r1, r1, #17
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	2380      	movs	r3, #128	; 0x80
 8005aba:	049b      	lsls	r3, r3, #18
 8005abc:	4013      	ands	r3, r2
 8005abe:	d016      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	4a10      	ldr	r2, [pc, #64]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	0019      	movs	r1, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ace:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ae0:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	0449      	lsls	r1, r1, #17
 8005aea:	430a      	orrs	r2, r1
 8005aec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005aee:	2312      	movs	r3, #18
 8005af0:	18fb      	adds	r3, r7, r3
 8005af2:	781b      	ldrb	r3, [r3, #0]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b006      	add	sp, #24
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	efffffff 	.word	0xefffffff
 8005b04:	fffff3ff 	.word	0xfffff3ff
 8005b08:	fffffcff 	.word	0xfffffcff
 8005b0c:	fff3ffff 	.word	0xfff3ffff
 8005b10:	ffcfffff 	.word	0xffcfffff
 8005b14:	ffffcfff 	.word	0xffffcfff
 8005b18:	ffff3fff 	.word	0xffff3fff
 8005b1c:	ffbfffff 	.word	0xffbfffff
 8005b20:	feffffff 	.word	0xfeffffff

08005b24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b24:	b5b0      	push	{r4, r5, r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b2c:	230f      	movs	r3, #15
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d100      	bne.n	8005b3c <HAL_RTC_Init+0x18>
 8005b3a:	e08c      	b.n	8005c56 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2229      	movs	r2, #41	; 0x29
 8005b40:	5c9b      	ldrb	r3, [r3, r2]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2228      	movs	r2, #40	; 0x28
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2288      	movs	r2, #136	; 0x88
 8005b54:	0212      	lsls	r2, r2, #8
 8005b56:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f7fe f800 	bl	8003b60 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2229      	movs	r2, #41	; 0x29
 8005b64:	2102      	movs	r1, #2
 8005b66:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	2210      	movs	r2, #16
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d062      	beq.n	8005c3c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	22ca      	movs	r2, #202	; 0xca
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2253      	movs	r2, #83	; 0x53
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005b86:	250f      	movs	r5, #15
 8005b88:	197c      	adds	r4, r7, r5
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 fbf3 	bl	8006378 <RTC_EnterInitMode>
 8005b92:	0003      	movs	r3, r0
 8005b94:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005b96:	0028      	movs	r0, r5
 8005b98:	183b      	adds	r3, r7, r0
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d12c      	bne.n	8005bfa <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	492e      	ldr	r1, [pc, #184]	; (8005c64 <HAL_RTC_Init+0x140>)
 8005bac:	400a      	ands	r2, r1
 8005bae:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6912      	ldr	r2, [r2, #16]
 8005bd6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6919      	ldr	r1, [r3, #16]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	041a      	lsls	r2, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005bec:	183c      	adds	r4, r7, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f000 fc03 	bl	80063fc <RTC_ExitInitMode>
 8005bf6:	0003      	movs	r3, r0
 8005bf8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005bfa:	230f      	movs	r3, #15
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	00d2      	lsls	r2, r2, #3
 8005c10:	08d2      	lsrs	r2, r2, #3
 8005c12:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	22ff      	movs	r2, #255	; 0xff
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24
 8005c3a:	e003      	b.n	8005c44 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005c3c:	230f      	movs	r3, #15
 8005c3e:	18fb      	adds	r3, r7, r3
 8005c40:	2200      	movs	r2, #0
 8005c42:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005c44:	230f      	movs	r3, #15
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2229      	movs	r2, #41	; 0x29
 8005c52:	2101      	movs	r1, #1
 8005c54:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005c56:	230f      	movs	r3, #15
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	781b      	ldrb	r3, [r3, #0]
}
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	b004      	add	sp, #16
 8005c62:	bdb0      	pop	{r4, r5, r7, pc}
 8005c64:	fb8fffbf 	.word	0xfb8fffbf

08005c68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2228      	movs	r2, #40	; 0x28
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_RTC_SetTime+0x1a>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e092      	b.n	8005da8 <HAL_RTC_SetTime+0x140>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2228      	movs	r2, #40	; 0x28
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2229      	movs	r2, #41	; 0x29
 8005c8e:	2102      	movs	r1, #2
 8005c90:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	22ca      	movs	r2, #202	; 0xca
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2253      	movs	r2, #83	; 0x53
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ca2:	2513      	movs	r5, #19
 8005ca4:	197c      	adds	r4, r7, r5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f000 fb65 	bl	8006378 <RTC_EnterInitMode>
 8005cae:	0003      	movs	r3, r0
 8005cb0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005cb2:	197b      	adds	r3, r7, r5
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d162      	bne.n	8005d80 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d125      	bne.n	8005d0c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2240      	movs	r2, #64	; 0x40
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d102      	bne.n	8005cd2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 fbd4 	bl	8006484 <RTC_ByteToBcd2>
 8005cdc:	0003      	movs	r3, r0
 8005cde:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f000 fbcd 	bl	8006484 <RTC_ByteToBcd2>
 8005cea:	0003      	movs	r3, r0
 8005cec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005cee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	789b      	ldrb	r3, [r3, #2]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fbc5 	bl	8006484 <RTC_ByteToBcd2>
 8005cfa:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005cfc:	0022      	movs	r2, r4
 8005cfe:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	78db      	ldrb	r3, [r3, #3]
 8005d04:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e017      	b.n	8005d3c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2240      	movs	r2, #64	; 0x40
 8005d14:	4013      	ands	r3, r2
 8005d16:	d102      	bne.n	8005d1e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d2a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d30:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	491b      	ldr	r1, [pc, #108]	; (8005db0 <HAL_RTC_SetTime+0x148>)
 8005d44:	400a      	ands	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4918      	ldr	r1, [pc, #96]	; (8005db4 <HAL_RTC_SetTime+0x14c>)
 8005d54:	400a      	ands	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d70:	2313      	movs	r3, #19
 8005d72:	18fc      	adds	r4, r7, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 fb40 	bl	80063fc <RTC_ExitInitMode>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	22ff      	movs	r2, #255	; 0xff
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005d88:	2313      	movs	r3, #19
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2229      	movs	r2, #41	; 0x29
 8005d96:	2101      	movs	r1, #1
 8005d98:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2228      	movs	r2, #40	; 0x28
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]

  return status;
 8005da2:	2313      	movs	r3, #19
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	781b      	ldrb	r3, [r3, #0]
}
 8005da8:	0018      	movs	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b006      	add	sp, #24
 8005dae:	bdb0      	pop	{r4, r5, r7, pc}
 8005db0:	007f7f7f 	.word	0x007f7f7f
 8005db4:	fffbffff 	.word	0xfffbffff

08005db8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	045b      	lsls	r3, r3, #17
 8005dd6:	0c5a      	lsrs	r2, r3, #17
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_RTC_GetTime+0xb4>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	223f      	movs	r2, #63	; 0x3f
 8005df0:	4013      	ands	r3, r2
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	227f      	movs	r2, #127	; 0x7f
 8005e00:	4013      	ands	r3, r2
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	227f      	movs	r2, #127	; 0x7f
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	0d9b      	lsrs	r3, r3, #22
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4013      	ands	r3, r2
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11a      	bne.n	8005e62 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 fb4f 	bl	80064d4 <RTC_Bcd2ToByte>
 8005e36:	0003      	movs	r3, r0
 8005e38:	001a      	movs	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 fb46 	bl	80064d4 <RTC_Bcd2ToByte>
 8005e48:	0003      	movs	r3, r0
 8005e4a:	001a      	movs	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	789b      	ldrb	r3, [r3, #2]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 fb3d 	bl	80064d4 <RTC_Bcd2ToByte>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b006      	add	sp, #24
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	007f7f7f 	.word	0x007f7f7f

08005e70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e70:	b5b0      	push	{r4, r5, r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2228      	movs	r2, #40	; 0x28
 8005e80:	5c9b      	ldrb	r3, [r3, r2]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_RTC_SetDate+0x1a>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e07e      	b.n	8005f88 <HAL_RTC_SetDate+0x118>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2228      	movs	r2, #40	; 0x28
 8005e8e:	2101      	movs	r1, #1
 8005e90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2229      	movs	r2, #41	; 0x29
 8005e96:	2102      	movs	r1, #2
 8005e98:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10e      	bne.n	8005ebe <HAL_RTC_SetDate+0x4e>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	2310      	movs	r3, #16
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d008      	beq.n	8005ebe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	4393      	bics	r3, r2
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	330a      	adds	r3, #10
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11c      	bne.n	8005efe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 fadb 	bl	8006484 <RTC_ByteToBcd2>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 fad4 	bl	8006484 <RTC_ByteToBcd2>
 8005edc:	0003      	movs	r3, r0
 8005ede:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ee0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	789b      	ldrb	r3, [r3, #2]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 facc 	bl	8006484 <RTC_ByteToBcd2>
 8005eec:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005eee:	0022      	movs	r2, r4
 8005ef0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	e00e      	b.n	8005f1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005f0a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005f10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	22ca      	movs	r2, #202	; 0xca
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2253      	movs	r2, #83	; 0x53
 8005f2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f2c:	2513      	movs	r5, #19
 8005f2e:	197c      	adds	r4, r7, r5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 fa20 	bl	8006378 <RTC_EnterInitMode>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	183b      	adds	r3, r7, r0
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10c      	bne.n	8005f60 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4910      	ldr	r1, [pc, #64]	; (8005f90 <HAL_RTC_SetDate+0x120>)
 8005f4e:	400a      	ands	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f52:	183c      	adds	r4, r7, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	0018      	movs	r0, r3
 8005f58:	f000 fa50 	bl	80063fc <RTC_ExitInitMode>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	22ff      	movs	r2, #255	; 0xff
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005f68:	2313      	movs	r3, #19
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2229      	movs	r2, #41	; 0x29
 8005f76:	2101      	movs	r1, #1
 8005f78:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2228      	movs	r2, #40	; 0x28
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5499      	strb	r1, [r3, r2]

  return status;
 8005f82:	2313      	movs	r3, #19
 8005f84:	18fb      	adds	r3, r7, r3
 8005f86:	781b      	ldrb	r3, [r3, #0]
}
 8005f88:	0018      	movs	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b006      	add	sp, #24
 8005f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f90:	00ffff3f 	.word	0x00ffff3f

08005f94 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <HAL_RTC_GetDate+0x98>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	0a1b      	lsrs	r3, r3, #8
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	221f      	movs	r2, #31
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	223f      	movs	r2, #63	; 0x3f
 8005fcc:	4013      	ands	r3, r2
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	0b5b      	lsrs	r3, r3, #13
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2207      	movs	r2, #7
 8005fdc:	4013      	ands	r3, r2
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d11a      	bne.n	8006020 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 fa70 	bl	80064d4 <RTC_Bcd2ToByte>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 fa67 	bl	80064d4 <RTC_Bcd2ToByte>
 8006006:	0003      	movs	r3, r0
 8006008:	001a      	movs	r2, r3
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	789b      	ldrb	r3, [r3, #2]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 fa5e 	bl	80064d4 <RTC_Bcd2ToByte>
 8006018:	0003      	movs	r3, r0
 800601a:	001a      	movs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b006      	add	sp, #24
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	00ffff3f 	.word	0x00ffff3f

08006030 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b089      	sub	sp, #36	; 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2228      	movs	r2, #40	; 0x28
 8006040:	5c9b      	ldrb	r3, [r3, r2]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_RTC_SetAlarm_IT+0x1a>
 8006046:	2302      	movs	r3, #2
 8006048:	e127      	b.n	800629a <HAL_RTC_SetAlarm_IT+0x26a>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2228      	movs	r2, #40	; 0x28
 800604e:	2101      	movs	r1, #1
 8006050:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2229      	movs	r2, #41	; 0x29
 8006056:	2102      	movs	r1, #2
 8006058:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d136      	bne.n	80060ce <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2240      	movs	r2, #64	; 0x40
 8006068:	4013      	ands	r3, r2
 800606a:	d102      	bne.n	8006072 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2200      	movs	r2, #0
 8006070:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 fa04 	bl	8006484 <RTC_ByteToBcd2>
 800607c:	0003      	movs	r3, r0
 800607e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	0018      	movs	r0, r3
 8006086:	f000 f9fd 	bl	8006484 <RTC_ByteToBcd2>
 800608a:	0003      	movs	r3, r0
 800608c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800608e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	789b      	ldrb	r3, [r3, #2]
 8006094:	0018      	movs	r0, r3
 8006096:	f000 f9f5 	bl	8006484 <RTC_ByteToBcd2>
 800609a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800609c:	0022      	movs	r2, r4
 800609e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060a6:	431a      	orrs	r2, r3
 80060a8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2220      	movs	r2, #32
 80060ae:	5c9b      	ldrb	r3, [r3, r2]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f9e7 	bl	8006484 <RTC_ByteToBcd2>
 80060b6:	0003      	movs	r3, r0
 80060b8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060ba:	0022      	movs	r2, r4
 80060bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e022      	b.n	8006114 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2240      	movs	r2, #64	; 0x40
 80060d6:	4013      	ands	r3, r2
 80060d8:	d102      	bne.n	80060e0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060ec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	78db      	ldrb	r3, [r3, #3]
 80060f8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2120      	movs	r1, #32
 8006100:	5c5b      	ldrb	r3, [r3, r1]
 8006102:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006104:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800610a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006110:	4313      	orrs	r3, r2
 8006112:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	22ca      	movs	r2, #202	; 0xca
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2253      	movs	r2, #83	; 0x53
 800612e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	429a      	cmp	r2, r3
 800613a:	d14c      	bne.n	80061d6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4957      	ldr	r1, [pc, #348]	; (80062a4 <HAL_RTC_SetAlarm_IT+0x274>)
 8006148:	400a      	ands	r2, r1
 800614a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2101      	movs	r1, #1
 8006158:	430a      	orrs	r2, r1
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800615c:	f7fe f8ea 	bl	8004334 <HAL_GetTick>
 8006160:	0003      	movs	r3, r0
 8006162:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006164:	e016      	b.n	8006194 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006166:	f7fe f8e5 	bl	8004334 <HAL_GetTick>
 800616a:	0002      	movs	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	23fa      	movs	r3, #250	; 0xfa
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	429a      	cmp	r2, r3
 8006176:	d90d      	bls.n	8006194 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	22ff      	movs	r2, #255	; 0xff
 800617e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2229      	movs	r2, #41	; 0x29
 8006184:	2103      	movs	r1, #3
 8006186:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2228      	movs	r2, #40	; 0x28
 800618c:	2100      	movs	r1, #0
 800618e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e082      	b.n	800629a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	4013      	ands	r3, r2
 800619e:	d0e2      	beq.n	8006166 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	0049      	lsls	r1, r1, #1
 80061be:	430a      	orrs	r2, r1
 80061c0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	0149      	lsls	r1, r1, #5
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
 80061d4:	e04b      	b.n	800626e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4931      	ldr	r1, [pc, #196]	; (80062a8 <HAL_RTC_SetAlarm_IT+0x278>)
 80061e2:	400a      	ands	r2, r1
 80061e4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2102      	movs	r1, #2
 80061f2:	430a      	orrs	r2, r1
 80061f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80061f6:	f7fe f89d 	bl	8004334 <HAL_GetTick>
 80061fa:	0003      	movs	r3, r0
 80061fc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80061fe:	e016      	b.n	800622e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006200:	f7fe f898 	bl	8004334 <HAL_GetTick>
 8006204:	0002      	movs	r2, r0
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	23fa      	movs	r3, #250	; 0xfa
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	429a      	cmp	r2, r3
 8006210:	d90d      	bls.n	800622e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	22ff      	movs	r2, #255	; 0xff
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2229      	movs	r2, #41	; 0x29
 800621e:	2103      	movs	r1, #3
 8006220:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2228      	movs	r2, #40	; 0x28
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e035      	b.n	800629a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2202      	movs	r2, #2
 8006236:	4013      	ands	r3, r2
 8006238:	d0e2      	beq.n	8006200 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0089      	lsls	r1, r1, #2
 8006258:	430a      	orrs	r2, r1
 800625a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2180      	movs	r1, #128	; 0x80
 8006268:	0189      	lsls	r1, r1, #6
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800626e:	4a0f      	ldr	r2, [pc, #60]	; (80062ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	58d3      	ldr	r3, [r2, r3]
 8006274:	490d      	ldr	r1, [pc, #52]	; (80062ac <HAL_RTC_SetAlarm_IT+0x27c>)
 8006276:	2280      	movs	r2, #128	; 0x80
 8006278:	0312      	lsls	r2, r2, #12
 800627a:	4313      	orrs	r3, r2
 800627c:	2280      	movs	r2, #128	; 0x80
 800627e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2229      	movs	r2, #41	; 0x29
 800628c:	2101      	movs	r1, #1
 800628e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2228      	movs	r2, #40	; 0x28
 8006294:	2100      	movs	r1, #0
 8006296:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	0018      	movs	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	b009      	add	sp, #36	; 0x24
 80062a0:	bd90      	pop	{r4, r7, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	fffffeff 	.word	0xfffffeff
 80062a8:	fffffdff 	.word	0xfffffdff
 80062ac:	40021800 	.word	0x40021800

080062b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	015b      	lsls	r3, r3, #5
 80062c2:	4013      	ands	r3, r2
 80062c4:	d011      	beq.n	80062ea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	2201      	movs	r2, #1
 80062ce:	4013      	ands	r3, r2
 80062d0:	d00b      	beq.n	80062ea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2101      	movs	r1, #1
 80062de:	430a      	orrs	r2, r1
 80062e0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7fd fbf5 	bl	8003ad4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	019b      	lsls	r3, r3, #6
 80062f4:	4013      	ands	r3, r2
 80062f6:	d011      	beq.n	800631c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fe:	2202      	movs	r2, #2
 8006300:	4013      	ands	r3, r2
 8006302:	d00b      	beq.n	800631c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2102      	movs	r1, #2
 8006310:	430a      	orrs	r2, r1
 8006312:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	0018      	movs	r0, r3
 8006318:	f000 f961 	bl	80065de <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2229      	movs	r2, #41	; 0x29
 8006320:	2101      	movs	r1, #1
 8006322:	5499      	strb	r1, [r3, r2]
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0e      	ldr	r2, [pc, #56]	; (8006374 <HAL_RTC_WaitForSynchro+0x48>)
 800633a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800633c:	f7fd fffa 	bl	8004334 <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006344:	e00a      	b.n	800635c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006346:	f7fd fff5 	bl	8004334 <HAL_GetTick>
 800634a:	0002      	movs	r2, r0
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	23fa      	movs	r3, #250	; 0xfa
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	429a      	cmp	r2, r3
 8006356:	d901      	bls.n	800635c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e006      	b.n	800636a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	4013      	ands	r3, r2
 8006366:	d0ee      	beq.n	8006346 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	0001005f 	.word	0x0001005f

08006378 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006380:	230f      	movs	r3, #15
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2240      	movs	r2, #64	; 0x40
 8006390:	4013      	ands	r3, r2
 8006392:	d12c      	bne.n	80063ee <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2180      	movs	r1, #128	; 0x80
 80063a0:	430a      	orrs	r2, r1
 80063a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063a4:	f7fd ffc6 	bl	8004334 <HAL_GetTick>
 80063a8:	0003      	movs	r3, r0
 80063aa:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063ac:	e014      	b.n	80063d8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80063ae:	f7fd ffc1 	bl	8004334 <HAL_GetTick>
 80063b2:	0002      	movs	r2, r0
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	200f      	movs	r0, #15
 80063ba:	183b      	adds	r3, r7, r0
 80063bc:	1839      	adds	r1, r7, r0
 80063be:	7809      	ldrb	r1, [r1, #0]
 80063c0:	7019      	strb	r1, [r3, #0]
 80063c2:	23fa      	movs	r3, #250	; 0xfa
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d906      	bls.n	80063d8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80063ca:	183b      	adds	r3, r7, r0
 80063cc:	2203      	movs	r2, #3
 80063ce:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2229      	movs	r2, #41	; 0x29
 80063d4:	2103      	movs	r1, #3
 80063d6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	4013      	ands	r3, r2
 80063e2:	d104      	bne.n	80063ee <RTC_EnterInitMode+0x76>
 80063e4:	230f      	movs	r3, #15
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d1df      	bne.n	80063ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80063ee:	230f      	movs	r3, #15
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	781b      	ldrb	r3, [r3, #0]
}
 80063f4:	0018      	movs	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b004      	add	sp, #16
 80063fa:	bd80      	pop	{r7, pc}

080063fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	240f      	movs	r4, #15
 8006406:	193b      	adds	r3, r7, r4
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800640c:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <RTC_ExitInitMode+0x84>)
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <RTC_ExitInitMode+0x84>)
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	438a      	bics	r2, r1
 8006416:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <RTC_ExitInitMode+0x84>)
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2220      	movs	r2, #32
 800641e:	4013      	ands	r3, r2
 8006420:	d10d      	bne.n	800643e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff ff81 	bl	800632c <HAL_RTC_WaitForSynchro>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d021      	beq.n	8006472 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2229      	movs	r2, #41	; 0x29
 8006432:	2103      	movs	r1, #3
 8006434:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006436:	193b      	adds	r3, r7, r4
 8006438:	2203      	movs	r2, #3
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e019      	b.n	8006472 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <RTC_ExitInitMode+0x84>)
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <RTC_ExitInitMode+0x84>)
 8006444:	2120      	movs	r1, #32
 8006446:	438a      	bics	r2, r1
 8006448:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f7ff ff6d 	bl	800632c <HAL_RTC_WaitForSynchro>
 8006452:	1e03      	subs	r3, r0, #0
 8006454:	d007      	beq.n	8006466 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2229      	movs	r2, #41	; 0x29
 800645a:	2103      	movs	r1, #3
 800645c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800645e:	230f      	movs	r3, #15
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	2203      	movs	r2, #3
 8006464:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006466:	4b06      	ldr	r3, [pc, #24]	; (8006480 <RTC_ExitInitMode+0x84>)
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <RTC_ExitInitMode+0x84>)
 800646c:	2120      	movs	r1, #32
 800646e:	430a      	orrs	r2, r1
 8006470:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006472:	230f      	movs	r3, #15
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	781b      	ldrb	r3, [r3, #0]
}
 8006478:	0018      	movs	r0, r3
 800647a:	46bd      	mov	sp, r7
 800647c:	b005      	add	sp, #20
 800647e:	bd90      	pop	{r4, r7, pc}
 8006480:	40002800 	.word	0x40002800

08006484 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	0002      	movs	r2, r0
 800648c:	1dfb      	adds	r3, r7, #7
 800648e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006494:	230b      	movs	r3, #11
 8006496:	18fb      	adds	r3, r7, r3
 8006498:	1dfa      	adds	r2, r7, #7
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800649e:	e008      	b.n	80064b2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80064a6:	220b      	movs	r2, #11
 80064a8:	18bb      	adds	r3, r7, r2
 80064aa:	18ba      	adds	r2, r7, r2
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	3a0a      	subs	r2, #10
 80064b0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80064b2:	210b      	movs	r1, #11
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b09      	cmp	r3, #9
 80064ba:	d8f1      	bhi.n	80064a0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	b2db      	uxtb	r3, r3
}
 80064cc:	0018      	movs	r0, r3
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b004      	add	sp, #16
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	0002      	movs	r2, r0
 80064dc:	1dfb      	adds	r3, r7, #7
 80064de:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80064e0:	1dfb      	adds	r3, r7, #7
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	091b      	lsrs	r3, r3, #4
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	001a      	movs	r2, r3
 80064ea:	0013      	movs	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	1dfb      	adds	r3, r7, #7
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	210f      	movs	r1, #15
 80064fe:	400b      	ands	r3, r1
 8006500:	b2db      	uxtb	r3, r3
 8006502:	18d3      	adds	r3, r2, r3
 8006504:	b2db      	uxtb	r3, r3
}
 8006506:	0018      	movs	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	b004      	add	sp, #16
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2228      	movs	r2, #40	; 0x28
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006520:	2302      	movs	r3, #2
 8006522:	e024      	b.n	800656e <HAL_RTCEx_EnableBypassShadow+0x60>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2228      	movs	r2, #40	; 0x28
 8006528:	2101      	movs	r1, #1
 800652a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2229      	movs	r2, #41	; 0x29
 8006530:	2102      	movs	r1, #2
 8006532:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	22ca      	movs	r2, #202	; 0xca
 800653a:	625a      	str	r2, [r3, #36]	; 0x24
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2253      	movs	r2, #83	; 0x53
 8006542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2120      	movs	r1, #32
 8006550:	430a      	orrs	r2, r1
 8006552:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	22ff      	movs	r2, #255	; 0xff
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2229      	movs	r2, #41	; 0x29
 8006560:	2101      	movs	r1, #1
 8006562:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2228      	movs	r2, #40	; 0x28
 8006568:	2100      	movs	r1, #0
 800656a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	0018      	movs	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	b002      	add	sp, #8
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2228      	movs	r2, #40	; 0x28
 8006582:	5c9b      	ldrb	r3, [r3, r2]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_RTCEx_DisableBypassShadow+0x16>
 8006588:	2302      	movs	r3, #2
 800658a:	e024      	b.n	80065d6 <HAL_RTCEx_DisableBypassShadow+0x60>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2228      	movs	r2, #40	; 0x28
 8006590:	2101      	movs	r1, #1
 8006592:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2229      	movs	r2, #41	; 0x29
 8006598:	2102      	movs	r1, #2
 800659a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	22ca      	movs	r2, #202	; 0xca
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2253      	movs	r2, #83	; 0x53
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	21df      	movs	r1, #223	; 0xdf
 80065b8:	400a      	ands	r2, r1
 80065ba:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2229      	movs	r2, #41	; 0x29
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2228      	movs	r2, #40	; 0x28
 80065d0:	2100      	movs	r1, #0
 80065d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b002      	add	sp, #8
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b002      	add	sp, #8
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e0a8      	b.n	8006754 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	2382      	movs	r3, #130	; 0x82
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	429a      	cmp	r2, r3
 8006614:	d009      	beq.n	800662a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	61da      	str	r2, [r3, #28]
 800661c:	e005      	b.n	800662a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	225d      	movs	r2, #93	; 0x5d
 8006634:	5c9b      	ldrb	r3, [r3, r2]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d107      	bne.n	800664c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	225c      	movs	r2, #92	; 0x5c
 8006640:	2100      	movs	r1, #0
 8006642:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0018      	movs	r0, r3
 8006648:	f7fd fad0 	bl	8003bec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	225d      	movs	r2, #93	; 0x5d
 8006650:	2102      	movs	r1, #2
 8006652:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2140      	movs	r1, #64	; 0x40
 8006660:	438a      	bics	r2, r1
 8006662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	23e0      	movs	r3, #224	; 0xe0
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	429a      	cmp	r2, r3
 800666e:	d902      	bls.n	8006676 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e002      	b.n	800667c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006676:	2380      	movs	r3, #128	; 0x80
 8006678:	015b      	lsls	r3, r3, #5
 800667a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	23f0      	movs	r3, #240	; 0xf0
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	429a      	cmp	r2, r3
 8006686:	d008      	beq.n	800669a <HAL_SPI_Init+0xaa>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	23e0      	movs	r3, #224	; 0xe0
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	429a      	cmp	r2, r3
 8006692:	d002      	beq.n	800669a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	2382      	movs	r3, #130	; 0x82
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	401a      	ands	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6899      	ldr	r1, [r3, #8]
 80066a8:	2384      	movs	r3, #132	; 0x84
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	400b      	ands	r3, r1
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	2102      	movs	r1, #2
 80066b6:	400b      	ands	r3, r1
 80066b8:	431a      	orrs	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	2101      	movs	r1, #1
 80066c0:	400b      	ands	r3, r1
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6999      	ldr	r1, [r3, #24]
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	400b      	ands	r3, r1
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2138      	movs	r1, #56	; 0x38
 80066d6:	400b      	ands	r3, r1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	2180      	movs	r1, #128	; 0x80
 80066e0:	400b      	ands	r3, r1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	0011      	movs	r1, r2
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ea:	2380      	movs	r3, #128	; 0x80
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	401a      	ands	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	0c1b      	lsrs	r3, r3, #16
 80066fe:	2204      	movs	r2, #4
 8006700:	401a      	ands	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2110      	movs	r1, #16
 8006708:	400b      	ands	r3, r1
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	2108      	movs	r1, #8
 8006712:	400b      	ands	r3, r1
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68d9      	ldr	r1, [r3, #12]
 800671a:	23f0      	movs	r3, #240	; 0xf0
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	400b      	ands	r3, r1
 8006720:	431a      	orrs	r2, r3
 8006722:	0011      	movs	r1, r2
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	015b      	lsls	r3, r3, #5
 800672a:	401a      	ands	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4907      	ldr	r1, [pc, #28]	; (800675c <HAL_SPI_Init+0x16c>)
 8006740:	400a      	ands	r2, r1
 8006742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	225d      	movs	r2, #93	; 0x5d
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	0018      	movs	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	b004      	add	sp, #16
 800675a:	bd80      	pop	{r7, pc}
 800675c:	fffff7ff 	.word	0xfffff7ff

08006760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e04a      	b.n	8006808 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	223d      	movs	r2, #61	; 0x3d
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	223c      	movs	r2, #60	; 0x3c
 8006782:	2100      	movs	r1, #0
 8006784:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0018      	movs	r0, r3
 800678a:	f7fd fa79 	bl	8003c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	223d      	movs	r2, #61	; 0x3d
 8006792:	2102      	movs	r1, #2
 8006794:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3304      	adds	r3, #4
 800679e:	0019      	movs	r1, r3
 80067a0:	0010      	movs	r0, r2
 80067a2:	f000 f9ed 	bl	8006b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2248      	movs	r2, #72	; 0x48
 80067aa:	2101      	movs	r1, #1
 80067ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	223e      	movs	r2, #62	; 0x3e
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	223f      	movs	r2, #63	; 0x3f
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2240      	movs	r2, #64	; 0x40
 80067c2:	2101      	movs	r1, #1
 80067c4:	5499      	strb	r1, [r3, r2]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2241      	movs	r2, #65	; 0x41
 80067ca:	2101      	movs	r1, #1
 80067cc:	5499      	strb	r1, [r3, r2]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2242      	movs	r2, #66	; 0x42
 80067d2:	2101      	movs	r1, #1
 80067d4:	5499      	strb	r1, [r3, r2]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2243      	movs	r2, #67	; 0x43
 80067da:	2101      	movs	r1, #1
 80067dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2244      	movs	r2, #68	; 0x44
 80067e2:	2101      	movs	r1, #1
 80067e4:	5499      	strb	r1, [r3, r2]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2245      	movs	r2, #69	; 0x45
 80067ea:	2101      	movs	r1, #1
 80067ec:	5499      	strb	r1, [r3, r2]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2246      	movs	r2, #70	; 0x46
 80067f2:	2101      	movs	r1, #1
 80067f4:	5499      	strb	r1, [r3, r2]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2247      	movs	r2, #71	; 0x47
 80067fa:	2101      	movs	r1, #1
 80067fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	223d      	movs	r2, #61	; 0x3d
 8006802:	2101      	movs	r1, #1
 8006804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b002      	add	sp, #8
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	223d      	movs	r2, #61	; 0x3d
 800681c:	5c9b      	ldrb	r3, [r3, r2]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d001      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e047      	b.n	80068b8 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	223d      	movs	r2, #61	; 0x3d
 800682c:	2102      	movs	r1, #2
 800682e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2101      	movs	r1, #1
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d014      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x64>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	2380      	movs	r3, #128	; 0x80
 8006850:	05db      	lsls	r3, r3, #23
 8006852:	429a      	cmp	r2, r3
 8006854:	d00e      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x64>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d009      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x64>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <HAL_TIM_Base_Start_IT+0x64>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a17      	ldr	r2, [pc, #92]	; (80068cc <HAL_TIM_Base_Start_IT+0xbc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d116      	bne.n	80068a2 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	4a15      	ldr	r2, [pc, #84]	; (80068d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800687c:	4013      	ands	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b06      	cmp	r3, #6
 8006884:	d016      	beq.n	80068b4 <HAL_TIM_Base_Start_IT+0xa4>
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	025b      	lsls	r3, r3, #9
 800688c:	429a      	cmp	r2, r3
 800688e:	d011      	beq.n	80068b4 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2101      	movs	r1, #1
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a0:	e008      	b.n	80068b4 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2101      	movs	r1, #1
 80068ae:	430a      	orrs	r2, r1
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e000      	b.n	80068b6 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	0018      	movs	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b004      	add	sp, #16
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40014000 	.word	0x40014000
 80068d0:	00010007 	.word	0x00010007

080068d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	438a      	bics	r2, r1
 80068ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	4a0d      	ldr	r2, [pc, #52]	; (8006928 <HAL_TIM_Base_Stop_IT+0x54>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	d10d      	bne.n	8006914 <HAL_TIM_Base_Stop_IT+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4a0b      	ldr	r2, [pc, #44]	; (800692c <HAL_TIM_Base_Stop_IT+0x58>)
 8006900:	4013      	ands	r3, r2
 8006902:	d107      	bne.n	8006914 <HAL_TIM_Base_Stop_IT+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2101      	movs	r1, #1
 8006910:	438a      	bics	r2, r1
 8006912:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	223d      	movs	r2, #61	; 0x3d
 8006918:	2101      	movs	r1, #1
 800691a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b002      	add	sp, #8
 8006924:	bd80      	pop	{r7, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	00001111 	.word	0x00001111
 800692c:	00000444 	.word	0x00000444

08006930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2202      	movs	r2, #2
 800694c:	4013      	ands	r3, r2
 800694e:	d021      	beq.n	8006994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2202      	movs	r2, #2
 8006954:	4013      	ands	r3, r2
 8006956:	d01d      	beq.n	8006994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2203      	movs	r2, #3
 800695e:	4252      	negs	r2, r2
 8006960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	2203      	movs	r2, #3
 8006970:	4013      	ands	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	0018      	movs	r0, r3
 8006978:	f000 f8ea 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 800697c:	e007      	b.n	800698e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0018      	movs	r0, r3
 8006982:	f000 f8dd 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f000 f8e9 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2204      	movs	r2, #4
 8006998:	4013      	ands	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2204      	movs	r2, #4
 80069a0:	4013      	ands	r3, r2
 80069a2:	d01e      	beq.n	80069e2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2205      	movs	r2, #5
 80069aa:	4252      	negs	r2, r2
 80069ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	23c0      	movs	r3, #192	; 0xc0
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4013      	ands	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f000 f8c3 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 80069ca:	e007      	b.n	80069dc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	0018      	movs	r0, r3
 80069d0:	f000 f8b6 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	0018      	movs	r0, r3
 80069d8:	f000 f8c2 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2208      	movs	r2, #8
 80069e6:	4013      	ands	r3, r2
 80069e8:	d021      	beq.n	8006a2e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2208      	movs	r2, #8
 80069ee:	4013      	ands	r3, r2
 80069f0:	d01d      	beq.n	8006a2e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2209      	movs	r2, #9
 80069f8:	4252      	negs	r2, r2
 80069fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2204      	movs	r2, #4
 8006a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	2203      	movs	r2, #3
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 f89d 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006a16:	e007      	b.n	8006a28 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f890 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 f89c 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2210      	movs	r2, #16
 8006a32:	4013      	ands	r3, r2
 8006a34:	d022      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2210      	movs	r2, #16
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	d01e      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2211      	movs	r2, #17
 8006a44:	4252      	negs	r2, r2
 8006a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	23c0      	movs	r3, #192	; 0xc0
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4013      	ands	r3, r2
 8006a5a:	d004      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f000 f876 	bl	8006b50 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e007      	b.n	8006a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f000 f869 	bl	8006b40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0018      	movs	r0, r3
 8006a72:	f000 f875 	bl	8006b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00c      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d008      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2202      	movs	r2, #2
 8006a92:	4252      	negs	r2, r2
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7fc fff9 	bl	8003a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2280      	movs	r2, #128	; 0x80
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d104      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	019b      	lsls	r3, r3, #6
 8006aac:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006aae:	d00b      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2280      	movs	r2, #128	; 0x80
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d007      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a1e      	ldr	r2, [pc, #120]	; (8006b38 <HAL_TIM_IRQHandler+0x208>)
 8006abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 f972 	bl	8006dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d00b      	beq.n	8006aea <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d007      	beq.n	8006aea <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_TIM_IRQHandler+0x20c>)
 8006ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 f969 	bl	8006dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2240      	movs	r2, #64	; 0x40
 8006aee:	4013      	ands	r3, r2
 8006af0:	d00c      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	4013      	ands	r3, r2
 8006af8:	d008      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2241      	movs	r2, #65	; 0x41
 8006b00:	4252      	negs	r2, r2
 8006b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 f832 	bl	8006b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	4013      	ands	r3, r2
 8006b12:	d00c      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2220      	movs	r2, #32
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d008      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2221      	movs	r2, #33	; 0x21
 8006b22:	4252      	negs	r2, r2
 8006b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f000 f937 	bl	8006d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b004      	add	sp, #16
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	ffffdf7f 	.word	0xffffdf7f
 8006b3c:	fffffeff 	.word	0xfffffeff

08006b40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b48:	46c0      	nop			; (mov r8, r8)
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	b002      	add	sp, #8
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b58:	46c0      	nop			; (mov r8, r8)
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b68:	46c0      	nop			; (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b78:	46c0      	nop			; (mov r8, r8)
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a3f      	ldr	r2, [pc, #252]	; (8006c90 <TIM_Base_SetConfig+0x110>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d00c      	beq.n	8006bb2 <TIM_Base_SetConfig+0x32>
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	05db      	lsls	r3, r3, #23
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d007      	beq.n	8006bb2 <TIM_Base_SetConfig+0x32>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a3b      	ldr	r2, [pc, #236]	; (8006c94 <TIM_Base_SetConfig+0x114>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_Base_SetConfig+0x32>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a3a      	ldr	r2, [pc, #232]	; (8006c98 <TIM_Base_SetConfig+0x118>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d108      	bne.n	8006bc4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2270      	movs	r2, #112	; 0x70
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a32      	ldr	r2, [pc, #200]	; (8006c90 <TIM_Base_SetConfig+0x110>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d01c      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	2380      	movs	r3, #128	; 0x80
 8006bd0:	05db      	lsls	r3, r3, #23
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d017      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2e      	ldr	r2, [pc, #184]	; (8006c94 <TIM_Base_SetConfig+0x114>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d013      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2d      	ldr	r2, [pc, #180]	; (8006c98 <TIM_Base_SetConfig+0x118>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00f      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <TIM_Base_SetConfig+0x11c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00b      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <TIM_Base_SetConfig+0x120>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <TIM_Base_SetConfig+0x124>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <TIM_Base_SetConfig+0x86>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a29      	ldr	r2, [pc, #164]	; (8006ca8 <TIM_Base_SetConfig+0x128>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d108      	bne.n	8006c18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a28      	ldr	r2, [pc, #160]	; (8006cac <TIM_Base_SetConfig+0x12c>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2280      	movs	r2, #128	; 0x80
 8006c1c:	4393      	bics	r3, r2
 8006c1e:	001a      	movs	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <TIM_Base_SetConfig+0x110>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0xde>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <TIM_Base_SetConfig+0x120>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0xde>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <TIM_Base_SetConfig+0x124>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0xde>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a13      	ldr	r2, [pc, #76]	; (8006ca8 <TIM_Base_SetConfig+0x128>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d103      	bne.n	8006c66 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2201      	movs	r2, #1
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d106      	bne.n	8006c86 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	4393      	bics	r3, r2
 8006c80:	001a      	movs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	611a      	str	r2, [r3, #16]
  }
}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	b004      	add	sp, #16
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	40012c00 	.word	0x40012c00
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40002000 	.word	0x40002000
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	fffffcff 	.word	0xfffffcff

08006cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	223c      	movs	r2, #60	; 0x3c
 8006cbe:	5c9b      	ldrb	r3, [r3, r2]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e05a      	b.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	223c      	movs	r2, #60	; 0x3c
 8006ccc:	2101      	movs	r1, #1
 8006cce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	223d      	movs	r2, #61	; 0x3d
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d108      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2270      	movs	r2, #112	; 0x70
 8006d08:	4393      	bics	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d014      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	2380      	movs	r3, #128	; 0x80
 8006d2e:	05db      	lsls	r3, r3, #23
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d00e      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10c      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2280      	movs	r2, #128	; 0x80
 8006d56:	4393      	bics	r3, r2
 8006d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	223d      	movs	r2, #61	; 0x3d
 8006d70:	2101      	movs	r1, #1
 8006d72:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	223c      	movs	r2, #60	; 0x3c
 8006d78:	2100      	movs	r1, #0
 8006d7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	0018      	movs	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b004      	add	sp, #16
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	ff0fffff 	.word	0xff0fffff
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40014000 	.word	0x40014000

08006d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b002      	add	sp, #8
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b002      	add	sp, #8
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e046      	b.n	8006e6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2288      	movs	r2, #136	; 0x88
 8006de2:	589b      	ldr	r3, [r3, r2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2284      	movs	r2, #132	; 0x84
 8006dec:	2100      	movs	r1, #0
 8006dee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7fc ff6a 	bl	8003ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2288      	movs	r2, #136	; 0x88
 8006dfc:	2124      	movs	r1, #36	; 0x24
 8006dfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	438a      	bics	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f000 fd4c 	bl	80078b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 f9f2 	bl	800720c <UART_SetConfig>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e01c      	b.n	8006e6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	490d      	ldr	r1, [pc, #52]	; (8006e74 <HAL_UART_Init+0xa8>)
 8006e3e:	400a      	ands	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	212a      	movs	r1, #42	; 0x2a
 8006e4e:	438a      	bics	r2, r1
 8006e50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f000 fddb 	bl	8007a20 <UART_CheckIdleState>
 8006e6a:	0003      	movs	r3, r0
}
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	ffffb7ff 	.word	0xffffb7ff

08006e78 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e032      	b.n	8006ef0 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2288      	movs	r2, #136	; 0x88
 8006e8e:	2124      	movs	r1, #36	; 0x24
 8006e90:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	438a      	bics	r2, r1
 8006ea0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7fd f831 	bl	8003f24 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2290      	movs	r2, #144	; 0x90
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2288      	movs	r2, #136	; 0x88
 8006ece:	2100      	movs	r1, #0
 8006ed0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	228c      	movs	r2, #140	; 0x8c
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2284      	movs	r2, #132	; 0x84
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b002      	add	sp, #8
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	1dbb      	adds	r3, r7, #6
 8006f06:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2288      	movs	r2, #136	; 0x88
 8006f0c:	589b      	ldr	r3, [r3, r2]
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	d000      	beq.n	8006f14 <HAL_UART_Transmit+0x1c>
 8006f12:	e090      	b.n	8007036 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_UART_Transmit+0x2a>
 8006f1a:	1dbb      	adds	r3, r7, #6
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e088      	b.n	8007038 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d109      	bne.n	8006f46 <HAL_UART_Transmit+0x4e>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d001      	beq.n	8006f46 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e078      	b.n	8007038 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2290      	movs	r2, #144	; 0x90
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2288      	movs	r2, #136	; 0x88
 8006f52:	2121      	movs	r1, #33	; 0x21
 8006f54:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f56:	f7fd f9ed 	bl	8004334 <HAL_GetTick>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	1dba      	adds	r2, r7, #6
 8006f62:	2154      	movs	r1, #84	; 0x54
 8006f64:	8812      	ldrh	r2, [r2, #0]
 8006f66:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1dba      	adds	r2, r7, #6
 8006f6c:	2156      	movs	r1, #86	; 0x56
 8006f6e:	8812      	ldrh	r2, [r2, #0]
 8006f70:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	015b      	lsls	r3, r3, #5
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d108      	bne.n	8006f90 <HAL_UART_Transmit+0x98>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d104      	bne.n	8006f90 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	61bb      	str	r3, [r7, #24]
 8006f8e:	e003      	b.n	8006f98 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f98:	e030      	b.n	8006ffc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	0013      	movs	r3, r2
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2180      	movs	r1, #128	; 0x80
 8006fa8:	f000 fde4 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8006fac:	1e03      	subs	r3, r0, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2288      	movs	r2, #136	; 0x88
 8006fb4:	2120      	movs	r1, #32
 8006fb6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e03d      	b.n	8007038 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	001a      	movs	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	05d2      	lsls	r2, r2, #23
 8006fce:	0dd2      	lsrs	r2, r2, #23
 8006fd0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	e007      	b.n	8006fea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2256      	movs	r2, #86	; 0x56
 8006fee:	5a9b      	ldrh	r3, [r3, r2]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b299      	uxth	r1, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2256      	movs	r2, #86	; 0x56
 8006ffa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2256      	movs	r2, #86	; 0x56
 8007000:	5a9b      	ldrh	r3, [r3, r2]
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1c8      	bne.n	8006f9a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	0013      	movs	r3, r2
 8007012:	2200      	movs	r2, #0
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	f000 fdad 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 800701a:	1e03      	subs	r3, r0, #0
 800701c:	d005      	beq.n	800702a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2288      	movs	r2, #136	; 0x88
 8007022:	2120      	movs	r1, #32
 8007024:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e006      	b.n	8007038 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2288      	movs	r2, #136	; 0x88
 800702e:	2120      	movs	r1, #32
 8007030:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007036:	2302      	movs	r3, #2
  }
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b008      	add	sp, #32
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	1dbb      	adds	r3, r7, #6
 800704e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	228c      	movs	r2, #140	; 0x8c
 8007054:	589b      	ldr	r3, [r3, r2]
 8007056:	2b20      	cmp	r3, #32
 8007058:	d000      	beq.n	800705c <HAL_UART_Receive+0x1c>
 800705a:	e0d0      	b.n	80071fe <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_UART_Receive+0x2a>
 8007062:	1dbb      	adds	r3, r7, #6
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e0c8      	b.n	8007200 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	2380      	movs	r3, #128	; 0x80
 8007074:	015b      	lsls	r3, r3, #5
 8007076:	429a      	cmp	r2, r3
 8007078:	d109      	bne.n	800708e <HAL_UART_Receive+0x4e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2201      	movs	r2, #1
 8007086:	4013      	ands	r3, r2
 8007088:	d001      	beq.n	800708e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e0b8      	b.n	8007200 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2290      	movs	r2, #144	; 0x90
 8007092:	2100      	movs	r1, #0
 8007094:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	228c      	movs	r2, #140	; 0x8c
 800709a:	2122      	movs	r1, #34	; 0x22
 800709c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070a4:	f7fd f946 	bl	8004334 <HAL_GetTick>
 80070a8:	0003      	movs	r3, r0
 80070aa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1dba      	adds	r2, r7, #6
 80070b0:	215c      	movs	r1, #92	; 0x5c
 80070b2:	8812      	ldrh	r2, [r2, #0]
 80070b4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1dba      	adds	r2, r7, #6
 80070ba:	215e      	movs	r1, #94	; 0x5e
 80070bc:	8812      	ldrh	r2, [r2, #0]
 80070be:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	015b      	lsls	r3, r3, #5
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d10d      	bne.n	80070e8 <HAL_UART_Receive+0xa8>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <HAL_UART_Receive+0x9e>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2260      	movs	r2, #96	; 0x60
 80070d8:	494b      	ldr	r1, [pc, #300]	; (8007208 <HAL_UART_Receive+0x1c8>)
 80070da:	5299      	strh	r1, [r3, r2]
 80070dc:	e02e      	b.n	800713c <HAL_UART_Receive+0xfc>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2260      	movs	r2, #96	; 0x60
 80070e2:	21ff      	movs	r1, #255	; 0xff
 80070e4:	5299      	strh	r1, [r3, r2]
 80070e6:	e029      	b.n	800713c <HAL_UART_Receive+0xfc>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10d      	bne.n	800710c <HAL_UART_Receive+0xcc>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <HAL_UART_Receive+0xc2>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2260      	movs	r2, #96	; 0x60
 80070fc:	21ff      	movs	r1, #255	; 0xff
 80070fe:	5299      	strh	r1, [r3, r2]
 8007100:	e01c      	b.n	800713c <HAL_UART_Receive+0xfc>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2260      	movs	r2, #96	; 0x60
 8007106:	217f      	movs	r1, #127	; 0x7f
 8007108:	5299      	strh	r1, [r3, r2]
 800710a:	e017      	b.n	800713c <HAL_UART_Receive+0xfc>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	055b      	lsls	r3, r3, #21
 8007114:	429a      	cmp	r2, r3
 8007116:	d10d      	bne.n	8007134 <HAL_UART_Receive+0xf4>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_UART_Receive+0xea>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2260      	movs	r2, #96	; 0x60
 8007124:	217f      	movs	r1, #127	; 0x7f
 8007126:	5299      	strh	r1, [r3, r2]
 8007128:	e008      	b.n	800713c <HAL_UART_Receive+0xfc>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2260      	movs	r2, #96	; 0x60
 800712e:	213f      	movs	r1, #63	; 0x3f
 8007130:	5299      	strh	r1, [r3, r2]
 8007132:	e003      	b.n	800713c <HAL_UART_Receive+0xfc>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2260      	movs	r2, #96	; 0x60
 8007138:	2100      	movs	r1, #0
 800713a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800713c:	2312      	movs	r3, #18
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	2160      	movs	r1, #96	; 0x60
 8007144:	5a52      	ldrh	r2, [r2, r1]
 8007146:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	2380      	movs	r3, #128	; 0x80
 800714e:	015b      	lsls	r3, r3, #5
 8007150:	429a      	cmp	r2, r3
 8007152:	d108      	bne.n	8007166 <HAL_UART_Receive+0x126>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800715c:	2300      	movs	r3, #0
 800715e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	e003      	b.n	800716e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800716e:	e03a      	b.n	80071e6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	0013      	movs	r3, r2
 800717a:	2200      	movs	r2, #0
 800717c:	2120      	movs	r1, #32
 800717e:	f000 fcf9 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007182:	1e03      	subs	r3, r0, #0
 8007184:	d005      	beq.n	8007192 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	228c      	movs	r2, #140	; 0x8c
 800718a:	2120      	movs	r1, #32
 800718c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e036      	b.n	8007200 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10e      	bne.n	80071b6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2212      	movs	r2, #18
 80071a2:	18ba      	adds	r2, r7, r2
 80071a4:	8812      	ldrh	r2, [r2, #0]
 80071a6:	4013      	ands	r3, r2
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	3302      	adds	r3, #2
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	e00e      	b.n	80071d4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2212      	movs	r2, #18
 80071c0:	18ba      	adds	r2, r7, r2
 80071c2:	8812      	ldrh	r2, [r2, #0]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	4013      	ands	r3, r2
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	225e      	movs	r2, #94	; 0x5e
 80071d8:	5a9b      	ldrh	r3, [r3, r2]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b299      	uxth	r1, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	225e      	movs	r2, #94	; 0x5e
 80071e4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	225e      	movs	r2, #94	; 0x5e
 80071ea:	5a9b      	ldrh	r3, [r3, r2]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1be      	bne.n	8007170 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	228c      	movs	r2, #140	; 0x8c
 80071f6:	2120      	movs	r1, #32
 80071f8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e000      	b.n	8007200 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80071fe:	2302      	movs	r3, #2
  }
}
 8007200:	0018      	movs	r0, r3
 8007202:	46bd      	mov	sp, r7
 8007204:	b008      	add	sp, #32
 8007206:	bd80      	pop	{r7, pc}
 8007208:	000001ff 	.word	0x000001ff

0800720c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	b5b0      	push	{r4, r5, r7, lr}
 800720e:	b090      	sub	sp, #64	; 0x40
 8007210:	af00      	add	r7, sp, #0
 8007212:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007214:	231a      	movs	r3, #26
 8007216:	2220      	movs	r2, #32
 8007218:	189b      	adds	r3, r3, r2
 800721a:	19db      	adds	r3, r3, r7
 800721c:	2200      	movs	r2, #0
 800721e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	431a      	orrs	r2, r3
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	4313      	orrs	r3, r2
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4ac1      	ldr	r2, [pc, #772]	; (8007544 <UART_SetConfig+0x338>)
 8007240:	4013      	ands	r3, r2
 8007242:	0019      	movs	r1, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	430b      	orrs	r3, r1
 800724c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4abc      	ldr	r2, [pc, #752]	; (8007548 <UART_SetConfig+0x33c>)
 8007256:	4013      	ands	r3, r2
 8007258:	0018      	movs	r0, r3
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	68d9      	ldr	r1, [r3, #12]
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	0003      	movs	r3, r0
 8007264:	430b      	orrs	r3, r1
 8007266:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4ab6      	ldr	r2, [pc, #728]	; (800754c <UART_SetConfig+0x340>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d009      	beq.n	800728c <UART_SetConfig+0x80>
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4ab4      	ldr	r2, [pc, #720]	; (8007550 <UART_SetConfig+0x344>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d004      	beq.n	800728c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007288:	4313      	orrs	r3, r2
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	4ab0      	ldr	r2, [pc, #704]	; (8007554 <UART_SetConfig+0x348>)
 8007294:	4013      	ands	r3, r2
 8007296:	0019      	movs	r1, r3
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800729e:	430b      	orrs	r3, r1
 80072a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	220f      	movs	r2, #15
 80072aa:	4393      	bics	r3, r2
 80072ac:	0018      	movs	r0, r3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	0003      	movs	r3, r0
 80072b8:	430b      	orrs	r3, r1
 80072ba:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4aa5      	ldr	r2, [pc, #660]	; (8007558 <UART_SetConfig+0x34c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d131      	bne.n	800732a <UART_SetConfig+0x11e>
 80072c6:	4ba5      	ldr	r3, [pc, #660]	; (800755c <UART_SetConfig+0x350>)
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	2203      	movs	r2, #3
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d01d      	beq.n	800730e <UART_SetConfig+0x102>
 80072d2:	d823      	bhi.n	800731c <UART_SetConfig+0x110>
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d00c      	beq.n	80072f2 <UART_SetConfig+0xe6>
 80072d8:	d820      	bhi.n	800731c <UART_SetConfig+0x110>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <UART_SetConfig+0xd8>
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d00e      	beq.n	8007300 <UART_SetConfig+0xf4>
 80072e2:	e01b      	b.n	800731c <UART_SetConfig+0x110>
 80072e4:	231b      	movs	r3, #27
 80072e6:	2220      	movs	r2, #32
 80072e8:	189b      	adds	r3, r3, r2
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	2200      	movs	r2, #0
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e154      	b.n	800759c <UART_SetConfig+0x390>
 80072f2:	231b      	movs	r3, #27
 80072f4:	2220      	movs	r2, #32
 80072f6:	189b      	adds	r3, r3, r2
 80072f8:	19db      	adds	r3, r3, r7
 80072fa:	2202      	movs	r2, #2
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e14d      	b.n	800759c <UART_SetConfig+0x390>
 8007300:	231b      	movs	r3, #27
 8007302:	2220      	movs	r2, #32
 8007304:	189b      	adds	r3, r3, r2
 8007306:	19db      	adds	r3, r3, r7
 8007308:	2204      	movs	r2, #4
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	e146      	b.n	800759c <UART_SetConfig+0x390>
 800730e:	231b      	movs	r3, #27
 8007310:	2220      	movs	r2, #32
 8007312:	189b      	adds	r3, r3, r2
 8007314:	19db      	adds	r3, r3, r7
 8007316:	2208      	movs	r2, #8
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e13f      	b.n	800759c <UART_SetConfig+0x390>
 800731c:	231b      	movs	r3, #27
 800731e:	2220      	movs	r2, #32
 8007320:	189b      	adds	r3, r3, r2
 8007322:	19db      	adds	r3, r3, r7
 8007324:	2210      	movs	r2, #16
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e138      	b.n	800759c <UART_SetConfig+0x390>
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a8c      	ldr	r2, [pc, #560]	; (8007560 <UART_SetConfig+0x354>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d131      	bne.n	8007398 <UART_SetConfig+0x18c>
 8007334:	4b89      	ldr	r3, [pc, #548]	; (800755c <UART_SetConfig+0x350>)
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	220c      	movs	r2, #12
 800733a:	4013      	ands	r3, r2
 800733c:	2b0c      	cmp	r3, #12
 800733e:	d01d      	beq.n	800737c <UART_SetConfig+0x170>
 8007340:	d823      	bhi.n	800738a <UART_SetConfig+0x17e>
 8007342:	2b08      	cmp	r3, #8
 8007344:	d00c      	beq.n	8007360 <UART_SetConfig+0x154>
 8007346:	d820      	bhi.n	800738a <UART_SetConfig+0x17e>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <UART_SetConfig+0x146>
 800734c:	2b04      	cmp	r3, #4
 800734e:	d00e      	beq.n	800736e <UART_SetConfig+0x162>
 8007350:	e01b      	b.n	800738a <UART_SetConfig+0x17e>
 8007352:	231b      	movs	r3, #27
 8007354:	2220      	movs	r2, #32
 8007356:	189b      	adds	r3, r3, r2
 8007358:	19db      	adds	r3, r3, r7
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	e11d      	b.n	800759c <UART_SetConfig+0x390>
 8007360:	231b      	movs	r3, #27
 8007362:	2220      	movs	r2, #32
 8007364:	189b      	adds	r3, r3, r2
 8007366:	19db      	adds	r3, r3, r7
 8007368:	2202      	movs	r2, #2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e116      	b.n	800759c <UART_SetConfig+0x390>
 800736e:	231b      	movs	r3, #27
 8007370:	2220      	movs	r2, #32
 8007372:	189b      	adds	r3, r3, r2
 8007374:	19db      	adds	r3, r3, r7
 8007376:	2204      	movs	r2, #4
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	e10f      	b.n	800759c <UART_SetConfig+0x390>
 800737c:	231b      	movs	r3, #27
 800737e:	2220      	movs	r2, #32
 8007380:	189b      	adds	r3, r3, r2
 8007382:	19db      	adds	r3, r3, r7
 8007384:	2208      	movs	r2, #8
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e108      	b.n	800759c <UART_SetConfig+0x390>
 800738a:	231b      	movs	r3, #27
 800738c:	2220      	movs	r2, #32
 800738e:	189b      	adds	r3, r3, r2
 8007390:	19db      	adds	r3, r3, r7
 8007392:	2210      	movs	r2, #16
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	e101      	b.n	800759c <UART_SetConfig+0x390>
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a71      	ldr	r2, [pc, #452]	; (8007564 <UART_SetConfig+0x358>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d131      	bne.n	8007406 <UART_SetConfig+0x1fa>
 80073a2:	4b6e      	ldr	r3, [pc, #440]	; (800755c <UART_SetConfig+0x350>)
 80073a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a6:	2230      	movs	r2, #48	; 0x30
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b30      	cmp	r3, #48	; 0x30
 80073ac:	d01d      	beq.n	80073ea <UART_SetConfig+0x1de>
 80073ae:	d823      	bhi.n	80073f8 <UART_SetConfig+0x1ec>
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d00c      	beq.n	80073ce <UART_SetConfig+0x1c2>
 80073b4:	d820      	bhi.n	80073f8 <UART_SetConfig+0x1ec>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <UART_SetConfig+0x1b4>
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d00e      	beq.n	80073dc <UART_SetConfig+0x1d0>
 80073be:	e01b      	b.n	80073f8 <UART_SetConfig+0x1ec>
 80073c0:	231b      	movs	r3, #27
 80073c2:	2220      	movs	r2, #32
 80073c4:	189b      	adds	r3, r3, r2
 80073c6:	19db      	adds	r3, r3, r7
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	e0e6      	b.n	800759c <UART_SetConfig+0x390>
 80073ce:	231b      	movs	r3, #27
 80073d0:	2220      	movs	r2, #32
 80073d2:	189b      	adds	r3, r3, r2
 80073d4:	19db      	adds	r3, r3, r7
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	e0df      	b.n	800759c <UART_SetConfig+0x390>
 80073dc:	231b      	movs	r3, #27
 80073de:	2220      	movs	r2, #32
 80073e0:	189b      	adds	r3, r3, r2
 80073e2:	19db      	adds	r3, r3, r7
 80073e4:	2204      	movs	r2, #4
 80073e6:	701a      	strb	r2, [r3, #0]
 80073e8:	e0d8      	b.n	800759c <UART_SetConfig+0x390>
 80073ea:	231b      	movs	r3, #27
 80073ec:	2220      	movs	r2, #32
 80073ee:	189b      	adds	r3, r3, r2
 80073f0:	19db      	adds	r3, r3, r7
 80073f2:	2208      	movs	r2, #8
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	e0d1      	b.n	800759c <UART_SetConfig+0x390>
 80073f8:	231b      	movs	r3, #27
 80073fa:	2220      	movs	r2, #32
 80073fc:	189b      	adds	r3, r3, r2
 80073fe:	19db      	adds	r3, r3, r7
 8007400:	2210      	movs	r2, #16
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	e0ca      	b.n	800759c <UART_SetConfig+0x390>
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a57      	ldr	r2, [pc, #348]	; (8007568 <UART_SetConfig+0x35c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d106      	bne.n	800741e <UART_SetConfig+0x212>
 8007410:	231b      	movs	r3, #27
 8007412:	2220      	movs	r2, #32
 8007414:	189b      	adds	r3, r3, r2
 8007416:	19db      	adds	r3, r3, r7
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
 800741c:	e0be      	b.n	800759c <UART_SetConfig+0x390>
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a52      	ldr	r2, [pc, #328]	; (800756c <UART_SetConfig+0x360>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d106      	bne.n	8007436 <UART_SetConfig+0x22a>
 8007428:	231b      	movs	r3, #27
 800742a:	2220      	movs	r2, #32
 800742c:	189b      	adds	r3, r3, r2
 800742e:	19db      	adds	r3, r3, r7
 8007430:	2200      	movs	r2, #0
 8007432:	701a      	strb	r2, [r3, #0]
 8007434:	e0b2      	b.n	800759c <UART_SetConfig+0x390>
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a4d      	ldr	r2, [pc, #308]	; (8007570 <UART_SetConfig+0x364>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d106      	bne.n	800744e <UART_SetConfig+0x242>
 8007440:	231b      	movs	r3, #27
 8007442:	2220      	movs	r2, #32
 8007444:	189b      	adds	r3, r3, r2
 8007446:	19db      	adds	r3, r3, r7
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	e0a6      	b.n	800759c <UART_SetConfig+0x390>
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3e      	ldr	r2, [pc, #248]	; (800754c <UART_SetConfig+0x340>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d13e      	bne.n	80074d6 <UART_SetConfig+0x2ca>
 8007458:	4b40      	ldr	r3, [pc, #256]	; (800755c <UART_SetConfig+0x350>)
 800745a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745c:	23c0      	movs	r3, #192	; 0xc0
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	4013      	ands	r3, r2
 8007462:	22c0      	movs	r2, #192	; 0xc0
 8007464:	0112      	lsls	r2, r2, #4
 8007466:	4293      	cmp	r3, r2
 8007468:	d027      	beq.n	80074ba <UART_SetConfig+0x2ae>
 800746a:	22c0      	movs	r2, #192	; 0xc0
 800746c:	0112      	lsls	r2, r2, #4
 800746e:	4293      	cmp	r3, r2
 8007470:	d82a      	bhi.n	80074c8 <UART_SetConfig+0x2bc>
 8007472:	2280      	movs	r2, #128	; 0x80
 8007474:	0112      	lsls	r2, r2, #4
 8007476:	4293      	cmp	r3, r2
 8007478:	d011      	beq.n	800749e <UART_SetConfig+0x292>
 800747a:	2280      	movs	r2, #128	; 0x80
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	4293      	cmp	r3, r2
 8007480:	d822      	bhi.n	80074c8 <UART_SetConfig+0x2bc>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <UART_SetConfig+0x284>
 8007486:	2280      	movs	r2, #128	; 0x80
 8007488:	00d2      	lsls	r2, r2, #3
 800748a:	4293      	cmp	r3, r2
 800748c:	d00e      	beq.n	80074ac <UART_SetConfig+0x2a0>
 800748e:	e01b      	b.n	80074c8 <UART_SetConfig+0x2bc>
 8007490:	231b      	movs	r3, #27
 8007492:	2220      	movs	r2, #32
 8007494:	189b      	adds	r3, r3, r2
 8007496:	19db      	adds	r3, r3, r7
 8007498:	2200      	movs	r2, #0
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	e07e      	b.n	800759c <UART_SetConfig+0x390>
 800749e:	231b      	movs	r3, #27
 80074a0:	2220      	movs	r2, #32
 80074a2:	189b      	adds	r3, r3, r2
 80074a4:	19db      	adds	r3, r3, r7
 80074a6:	2202      	movs	r2, #2
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e077      	b.n	800759c <UART_SetConfig+0x390>
 80074ac:	231b      	movs	r3, #27
 80074ae:	2220      	movs	r2, #32
 80074b0:	189b      	adds	r3, r3, r2
 80074b2:	19db      	adds	r3, r3, r7
 80074b4:	2204      	movs	r2, #4
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e070      	b.n	800759c <UART_SetConfig+0x390>
 80074ba:	231b      	movs	r3, #27
 80074bc:	2220      	movs	r2, #32
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	19db      	adds	r3, r3, r7
 80074c2:	2208      	movs	r2, #8
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e069      	b.n	800759c <UART_SetConfig+0x390>
 80074c8:	231b      	movs	r3, #27
 80074ca:	2220      	movs	r2, #32
 80074cc:	189b      	adds	r3, r3, r2
 80074ce:	19db      	adds	r3, r3, r7
 80074d0:	2210      	movs	r2, #16
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e062      	b.n	800759c <UART_SetConfig+0x390>
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <UART_SetConfig+0x344>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d157      	bne.n	8007590 <UART_SetConfig+0x384>
 80074e0:	4b1e      	ldr	r3, [pc, #120]	; (800755c <UART_SetConfig+0x350>)
 80074e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074e4:	23c0      	movs	r3, #192	; 0xc0
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4013      	ands	r3, r2
 80074ea:	22c0      	movs	r2, #192	; 0xc0
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d040      	beq.n	8007574 <UART_SetConfig+0x368>
 80074f2:	22c0      	movs	r2, #192	; 0xc0
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d843      	bhi.n	8007582 <UART_SetConfig+0x376>
 80074fa:	2280      	movs	r2, #128	; 0x80
 80074fc:	0092      	lsls	r2, r2, #2
 80074fe:	4293      	cmp	r3, r2
 8007500:	d011      	beq.n	8007526 <UART_SetConfig+0x31a>
 8007502:	2280      	movs	r2, #128	; 0x80
 8007504:	0092      	lsls	r2, r2, #2
 8007506:	4293      	cmp	r3, r2
 8007508:	d83b      	bhi.n	8007582 <UART_SetConfig+0x376>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <UART_SetConfig+0x30c>
 800750e:	2280      	movs	r2, #128	; 0x80
 8007510:	0052      	lsls	r2, r2, #1
 8007512:	4293      	cmp	r3, r2
 8007514:	d00e      	beq.n	8007534 <UART_SetConfig+0x328>
 8007516:	e034      	b.n	8007582 <UART_SetConfig+0x376>
 8007518:	231b      	movs	r3, #27
 800751a:	2220      	movs	r2, #32
 800751c:	189b      	adds	r3, r3, r2
 800751e:	19db      	adds	r3, r3, r7
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
 8007524:	e03a      	b.n	800759c <UART_SetConfig+0x390>
 8007526:	231b      	movs	r3, #27
 8007528:	2220      	movs	r2, #32
 800752a:	189b      	adds	r3, r3, r2
 800752c:	19db      	adds	r3, r3, r7
 800752e:	2202      	movs	r2, #2
 8007530:	701a      	strb	r2, [r3, #0]
 8007532:	e033      	b.n	800759c <UART_SetConfig+0x390>
 8007534:	231b      	movs	r3, #27
 8007536:	2220      	movs	r2, #32
 8007538:	189b      	adds	r3, r3, r2
 800753a:	19db      	adds	r3, r3, r7
 800753c:	2204      	movs	r2, #4
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	e02c      	b.n	800759c <UART_SetConfig+0x390>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	cfff69f3 	.word	0xcfff69f3
 8007548:	ffffcfff 	.word	0xffffcfff
 800754c:	40008000 	.word	0x40008000
 8007550:	40008400 	.word	0x40008400
 8007554:	11fff4ff 	.word	0x11fff4ff
 8007558:	40013800 	.word	0x40013800
 800755c:	40021000 	.word	0x40021000
 8007560:	40004400 	.word	0x40004400
 8007564:	40004800 	.word	0x40004800
 8007568:	40004c00 	.word	0x40004c00
 800756c:	40005000 	.word	0x40005000
 8007570:	40013c00 	.word	0x40013c00
 8007574:	231b      	movs	r3, #27
 8007576:	2220      	movs	r2, #32
 8007578:	189b      	adds	r3, r3, r2
 800757a:	19db      	adds	r3, r3, r7
 800757c:	2208      	movs	r2, #8
 800757e:	701a      	strb	r2, [r3, #0]
 8007580:	e00c      	b.n	800759c <UART_SetConfig+0x390>
 8007582:	231b      	movs	r3, #27
 8007584:	2220      	movs	r2, #32
 8007586:	189b      	adds	r3, r3, r2
 8007588:	19db      	adds	r3, r3, r7
 800758a:	2210      	movs	r2, #16
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e005      	b.n	800759c <UART_SetConfig+0x390>
 8007590:	231b      	movs	r3, #27
 8007592:	2220      	movs	r2, #32
 8007594:	189b      	adds	r3, r3, r2
 8007596:	19db      	adds	r3, r3, r7
 8007598:	2210      	movs	r2, #16
 800759a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4ac1      	ldr	r2, [pc, #772]	; (80078a8 <UART_SetConfig+0x69c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d005      	beq.n	80075b2 <UART_SetConfig+0x3a6>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4ac0      	ldr	r2, [pc, #768]	; (80078ac <UART_SetConfig+0x6a0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d000      	beq.n	80075b2 <UART_SetConfig+0x3a6>
 80075b0:	e093      	b.n	80076da <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075b2:	231b      	movs	r3, #27
 80075b4:	2220      	movs	r2, #32
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	19db      	adds	r3, r3, r7
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d015      	beq.n	80075ec <UART_SetConfig+0x3e0>
 80075c0:	dc18      	bgt.n	80075f4 <UART_SetConfig+0x3e8>
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d00d      	beq.n	80075e2 <UART_SetConfig+0x3d6>
 80075c6:	dc15      	bgt.n	80075f4 <UART_SetConfig+0x3e8>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <UART_SetConfig+0x3c6>
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d005      	beq.n	80075dc <UART_SetConfig+0x3d0>
 80075d0:	e010      	b.n	80075f4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d2:	f7fe f855 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80075d6:	0003      	movs	r3, r0
 80075d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075da:	e014      	b.n	8007606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075dc:	4bb4      	ldr	r3, [pc, #720]	; (80078b0 <UART_SetConfig+0x6a4>)
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075e0:	e011      	b.n	8007606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075e2:	f7fd ffc1 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 80075e6:	0003      	movs	r3, r0
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ea:	e00c      	b.n	8007606 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075f2:	e008      	b.n	8007606 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075f8:	231a      	movs	r3, #26
 80075fa:	2220      	movs	r2, #32
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	19db      	adds	r3, r3, r7
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
        break;
 8007604:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	2b00      	cmp	r3, #0
 800760a:	d100      	bne.n	800760e <UART_SetConfig+0x402>
 800760c:	e135      	b.n	800787a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007612:	4ba8      	ldr	r3, [pc, #672]	; (80078b4 <UART_SetConfig+0x6a8>)
 8007614:	0052      	lsls	r2, r2, #1
 8007616:	5ad3      	ldrh	r3, [r2, r3]
 8007618:	0019      	movs	r1, r3
 800761a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800761c:	f7f8 fd8e 	bl	800013c <__udivsi3>
 8007620:	0003      	movs	r3, r0
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	0013      	movs	r3, r2
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	189b      	adds	r3, r3, r2
 800762e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007630:	429a      	cmp	r2, r3
 8007632:	d305      	bcc.n	8007640 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800763a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800763c:	429a      	cmp	r2, r3
 800763e:	d906      	bls.n	800764e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007640:	231a      	movs	r3, #26
 8007642:	2220      	movs	r2, #32
 8007644:	189b      	adds	r3, r3, r2
 8007646:	19db      	adds	r3, r3, r7
 8007648:	2201      	movs	r2, #1
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e044      	b.n	80076d8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800765a:	4b96      	ldr	r3, [pc, #600]	; (80078b4 <UART_SetConfig+0x6a8>)
 800765c:	0052      	lsls	r2, r2, #1
 800765e:	5ad3      	ldrh	r3, [r2, r3]
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	69b8      	ldr	r0, [r7, #24]
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	f7f8 ff19 	bl	80004a4 <__aeabi_uldivmod>
 8007672:	0002      	movs	r2, r0
 8007674:	000b      	movs	r3, r1
 8007676:	0e11      	lsrs	r1, r2, #24
 8007678:	021d      	lsls	r5, r3, #8
 800767a:	430d      	orrs	r5, r1
 800767c:	0214      	lsls	r4, r2, #8
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	60bb      	str	r3, [r7, #8]
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	68b8      	ldr	r0, [r7, #8]
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	1900      	adds	r0, r0, r4
 8007690:	4169      	adcs	r1, r5
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	603b      	str	r3, [r7, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f7f8 ff00 	bl	80004a4 <__aeabi_uldivmod>
 80076a4:	0002      	movs	r2, r0
 80076a6:	000b      	movs	r3, r1
 80076a8:	0013      	movs	r3, r2
 80076aa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	23c0      	movs	r3, #192	; 0xc0
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d309      	bcc.n	80076ca <UART_SetConfig+0x4be>
 80076b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b8:	2380      	movs	r3, #128	; 0x80
 80076ba:	035b      	lsls	r3, r3, #13
 80076bc:	429a      	cmp	r2, r3
 80076be:	d204      	bcs.n	80076ca <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c6:	60da      	str	r2, [r3, #12]
 80076c8:	e006      	b.n	80076d8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80076ca:	231a      	movs	r3, #26
 80076cc:	2220      	movs	r2, #32
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	19db      	adds	r3, r3, r7
 80076d2:	2201      	movs	r2, #1
 80076d4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80076d6:	e0d0      	b.n	800787a <UART_SetConfig+0x66e>
 80076d8:	e0cf      	b.n	800787a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	69da      	ldr	r2, [r3, #28]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d000      	beq.n	80076e8 <UART_SetConfig+0x4dc>
 80076e6:	e070      	b.n	80077ca <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80076e8:	231b      	movs	r3, #27
 80076ea:	2220      	movs	r2, #32
 80076ec:	189b      	adds	r3, r3, r2
 80076ee:	19db      	adds	r3, r3, r7
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d015      	beq.n	8007722 <UART_SetConfig+0x516>
 80076f6:	dc18      	bgt.n	800772a <UART_SetConfig+0x51e>
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d00d      	beq.n	8007718 <UART_SetConfig+0x50c>
 80076fc:	dc15      	bgt.n	800772a <UART_SetConfig+0x51e>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <UART_SetConfig+0x4fc>
 8007702:	2b02      	cmp	r3, #2
 8007704:	d005      	beq.n	8007712 <UART_SetConfig+0x506>
 8007706:	e010      	b.n	800772a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fd ffba 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800770c:	0003      	movs	r3, r0
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007710:	e014      	b.n	800773c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007712:	4b67      	ldr	r3, [pc, #412]	; (80078b0 <UART_SetConfig+0x6a4>)
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007716:	e011      	b.n	800773c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007718:	f7fd ff26 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 800771c:	0003      	movs	r3, r0
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007720:	e00c      	b.n	800773c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007722:	2380      	movs	r3, #128	; 0x80
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007728:	e008      	b.n	800773c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800772e:	231a      	movs	r3, #26
 8007730:	2220      	movs	r2, #32
 8007732:	189b      	adds	r3, r3, r2
 8007734:	19db      	adds	r3, r3, r7
 8007736:	2201      	movs	r2, #1
 8007738:	701a      	strb	r2, [r3, #0]
        break;
 800773a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	2b00      	cmp	r3, #0
 8007740:	d100      	bne.n	8007744 <UART_SetConfig+0x538>
 8007742:	e09a      	b.n	800787a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007748:	4b5a      	ldr	r3, [pc, #360]	; (80078b4 <UART_SetConfig+0x6a8>)
 800774a:	0052      	lsls	r2, r2, #1
 800774c:	5ad3      	ldrh	r3, [r2, r3]
 800774e:	0019      	movs	r1, r3
 8007750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007752:	f7f8 fcf3 	bl	800013c <__udivsi3>
 8007756:	0003      	movs	r3, r0
 8007758:	005a      	lsls	r2, r3, #1
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	18d2      	adds	r2, r2, r3
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	0019      	movs	r1, r3
 8007768:	0010      	movs	r0, r2
 800776a:	f7f8 fce7 	bl	800013c <__udivsi3>
 800776e:	0003      	movs	r3, r0
 8007770:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d921      	bls.n	80077bc <UART_SetConfig+0x5b0>
 8007778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800777a:	2380      	movs	r3, #128	; 0x80
 800777c:	025b      	lsls	r3, r3, #9
 800777e:	429a      	cmp	r2, r3
 8007780:	d21c      	bcs.n	80077bc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	b29a      	uxth	r2, r3
 8007786:	200e      	movs	r0, #14
 8007788:	2420      	movs	r4, #32
 800778a:	1903      	adds	r3, r0, r4
 800778c:	19db      	adds	r3, r3, r7
 800778e:	210f      	movs	r1, #15
 8007790:	438a      	bics	r2, r1
 8007792:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	2207      	movs	r2, #7
 800779c:	4013      	ands	r3, r2
 800779e:	b299      	uxth	r1, r3
 80077a0:	1903      	adds	r3, r0, r4
 80077a2:	19db      	adds	r3, r3, r7
 80077a4:	1902      	adds	r2, r0, r4
 80077a6:	19d2      	adds	r2, r2, r7
 80077a8:	8812      	ldrh	r2, [r2, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	1902      	adds	r2, r0, r4
 80077b4:	19d2      	adds	r2, r2, r7
 80077b6:	8812      	ldrh	r2, [r2, #0]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	e05e      	b.n	800787a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80077bc:	231a      	movs	r3, #26
 80077be:	2220      	movs	r2, #32
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	19db      	adds	r3, r3, r7
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	e057      	b.n	800787a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ca:	231b      	movs	r3, #27
 80077cc:	2220      	movs	r2, #32
 80077ce:	189b      	adds	r3, r3, r2
 80077d0:	19db      	adds	r3, r3, r7
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d015      	beq.n	8007804 <UART_SetConfig+0x5f8>
 80077d8:	dc18      	bgt.n	800780c <UART_SetConfig+0x600>
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d00d      	beq.n	80077fa <UART_SetConfig+0x5ee>
 80077de:	dc15      	bgt.n	800780c <UART_SetConfig+0x600>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <UART_SetConfig+0x5de>
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d005      	beq.n	80077f4 <UART_SetConfig+0x5e8>
 80077e8:	e010      	b.n	800780c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ea:	f7fd ff49 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80077ee:	0003      	movs	r3, r0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f2:	e014      	b.n	800781e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f4:	4b2e      	ldr	r3, [pc, #184]	; (80078b0 <UART_SetConfig+0x6a4>)
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f8:	e011      	b.n	800781e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fd feb5 	bl	8005568 <HAL_RCC_GetSysClockFreq>
 80077fe:	0003      	movs	r3, r0
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007802:	e00c      	b.n	800781e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007804:	2380      	movs	r3, #128	; 0x80
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800780a:	e008      	b.n	800781e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007810:	231a      	movs	r3, #26
 8007812:	2220      	movs	r2, #32
 8007814:	189b      	adds	r3, r3, r2
 8007816:	19db      	adds	r3, r3, r7
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]
        break;
 800781c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02a      	beq.n	800787a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007828:	4b22      	ldr	r3, [pc, #136]	; (80078b4 <UART_SetConfig+0x6a8>)
 800782a:	0052      	lsls	r2, r2, #1
 800782c:	5ad3      	ldrh	r3, [r2, r3]
 800782e:	0019      	movs	r1, r3
 8007830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007832:	f7f8 fc83 	bl	800013c <__udivsi3>
 8007836:	0003      	movs	r3, r0
 8007838:	001a      	movs	r2, r3
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	18d2      	adds	r2, r2, r3
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	0019      	movs	r1, r3
 8007848:	0010      	movs	r0, r2
 800784a:	f7f8 fc77 	bl	800013c <__udivsi3>
 800784e:	0003      	movs	r3, r0
 8007850:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d90a      	bls.n	800786e <UART_SetConfig+0x662>
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	2380      	movs	r3, #128	; 0x80
 800785c:	025b      	lsls	r3, r3, #9
 800785e:	429a      	cmp	r2, r3
 8007860:	d205      	bcs.n	800786e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	b29a      	uxth	r2, r3
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60da      	str	r2, [r3, #12]
 800786c:	e005      	b.n	800787a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800786e:	231a      	movs	r3, #26
 8007870:	2220      	movs	r2, #32
 8007872:	189b      	adds	r3, r3, r2
 8007874:	19db      	adds	r3, r3, r7
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	226a      	movs	r2, #106	; 0x6a
 800787e:	2101      	movs	r1, #1
 8007880:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	2268      	movs	r2, #104	; 0x68
 8007886:	2101      	movs	r1, #1
 8007888:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	2200      	movs	r2, #0
 800788e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2200      	movs	r2, #0
 8007894:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007896:	231a      	movs	r3, #26
 8007898:	2220      	movs	r2, #32
 800789a:	189b      	adds	r3, r3, r2
 800789c:	19db      	adds	r3, r3, r7
 800789e:	781b      	ldrb	r3, [r3, #0]
}
 80078a0:	0018      	movs	r0, r3
 80078a2:	46bd      	mov	sp, r7
 80078a4:	b010      	add	sp, #64	; 0x40
 80078a6:	bdb0      	pop	{r4, r5, r7, pc}
 80078a8:	40008000 	.word	0x40008000
 80078ac:	40008400 	.word	0x40008400
 80078b0:	00f42400 	.word	0x00f42400
 80078b4:	080149cc 	.word	0x080149cc

080078b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c4:	2208      	movs	r2, #8
 80078c6:	4013      	ands	r3, r2
 80078c8:	d00b      	beq.n	80078e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4a4a      	ldr	r2, [pc, #296]	; (80079fc <UART_AdvFeatureConfig+0x144>)
 80078d2:	4013      	ands	r3, r2
 80078d4:	0019      	movs	r1, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e6:	2201      	movs	r2, #1
 80078e8:	4013      	ands	r3, r2
 80078ea:	d00b      	beq.n	8007904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	4a43      	ldr	r2, [pc, #268]	; (8007a00 <UART_AdvFeatureConfig+0x148>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	0019      	movs	r1, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	2202      	movs	r2, #2
 800790a:	4013      	ands	r3, r2
 800790c:	d00b      	beq.n	8007926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4a3b      	ldr	r2, [pc, #236]	; (8007a04 <UART_AdvFeatureConfig+0x14c>)
 8007916:	4013      	ands	r3, r2
 8007918:	0019      	movs	r1, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792a:	2204      	movs	r2, #4
 800792c:	4013      	ands	r3, r2
 800792e:	d00b      	beq.n	8007948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	4a34      	ldr	r2, [pc, #208]	; (8007a08 <UART_AdvFeatureConfig+0x150>)
 8007938:	4013      	ands	r3, r2
 800793a:	0019      	movs	r1, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	2210      	movs	r2, #16
 800794e:	4013      	ands	r3, r2
 8007950:	d00b      	beq.n	800796a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4a2c      	ldr	r2, [pc, #176]	; (8007a0c <UART_AdvFeatureConfig+0x154>)
 800795a:	4013      	ands	r3, r2
 800795c:	0019      	movs	r1, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	2220      	movs	r2, #32
 8007970:	4013      	ands	r3, r2
 8007972:	d00b      	beq.n	800798c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	4a25      	ldr	r2, [pc, #148]	; (8007a10 <UART_AdvFeatureConfig+0x158>)
 800797c:	4013      	ands	r3, r2
 800797e:	0019      	movs	r1, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	2240      	movs	r2, #64	; 0x40
 8007992:	4013      	ands	r3, r2
 8007994:	d01d      	beq.n	80079d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <UART_AdvFeatureConfig+0x15c>)
 800799e:	4013      	ands	r3, r2
 80079a0:	0019      	movs	r1, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b2:	2380      	movs	r3, #128	; 0x80
 80079b4:	035b      	lsls	r3, r3, #13
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d10b      	bne.n	80079d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <UART_AdvFeatureConfig+0x160>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	0019      	movs	r1, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	4013      	ands	r3, r2
 80079da:	d00b      	beq.n	80079f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	4a0e      	ldr	r2, [pc, #56]	; (8007a1c <UART_AdvFeatureConfig+0x164>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	0019      	movs	r1, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]
  }
}
 80079f4:	46c0      	nop			; (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b002      	add	sp, #8
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	ffff7fff 	.word	0xffff7fff
 8007a00:	fffdffff 	.word	0xfffdffff
 8007a04:	fffeffff 	.word	0xfffeffff
 8007a08:	fffbffff 	.word	0xfffbffff
 8007a0c:	ffffefff 	.word	0xffffefff
 8007a10:	ffffdfff 	.word	0xffffdfff
 8007a14:	ffefffff 	.word	0xffefffff
 8007a18:	ff9fffff 	.word	0xff9fffff
 8007a1c:	fff7ffff 	.word	0xfff7ffff

08007a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b092      	sub	sp, #72	; 0x48
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2290      	movs	r2, #144	; 0x90
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a30:	f7fc fc80 	bl	8004334 <HAL_GetTick>
 8007a34:	0003      	movs	r3, r0
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2208      	movs	r2, #8
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d12d      	bne.n	8007aa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a48:	2280      	movs	r2, #128	; 0x80
 8007a4a:	0391      	lsls	r1, r2, #14
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4a47      	ldr	r2, [pc, #284]	; (8007b6c <UART_CheckIdleState+0x14c>)
 8007a50:	9200      	str	r2, [sp, #0]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f000 f88e 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007a58:	1e03      	subs	r3, r0, #0
 8007a5a:	d022      	beq.n	8007aa2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a66:	2301      	movs	r3, #1
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	438a      	bics	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a88:	f383 8810 	msr	PRIMASK, r3
}
 8007a8c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2288      	movs	r2, #136	; 0x88
 8007a92:	2120      	movs	r1, #32
 8007a94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2284      	movs	r2, #132	; 0x84
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e060      	b.n	8007b64 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d146      	bne.n	8007b3e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	03d1      	lsls	r1, r2, #15
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4a2c      	ldr	r2, [pc, #176]	; (8007b6c <UART_CheckIdleState+0x14c>)
 8007aba:	9200      	str	r2, [sp, #0]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f000 f859 	bl	8007b74 <UART_WaitOnFlagUntilTimeout>
 8007ac2:	1e03      	subs	r3, r0, #0
 8007ac4:	d03b      	beq.n	8007b3e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8007acc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f383 8810 	msr	PRIMASK, r3
}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4922      	ldr	r1, [pc, #136]	; (8007b70 <UART_CheckIdleState+0x150>)
 8007ae8:	400a      	ands	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f383 8810 	msr	PRIMASK, r3
}
 8007af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af8:	f3ef 8310 	mrs	r3, PRIMASK
 8007afc:	61bb      	str	r3, [r7, #24]
  return(result);
 8007afe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	2301      	movs	r3, #1
 8007b04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f383 8810 	msr	PRIMASK, r3
}
 8007b0c:	46c0      	nop			; (mov r8, r8)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2101      	movs	r1, #1
 8007b1a:	438a      	bics	r2, r1
 8007b1c:	609a      	str	r2, [r3, #8]
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	f383 8810 	msr	PRIMASK, r3
}
 8007b28:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	228c      	movs	r2, #140	; 0x8c
 8007b2e:	2120      	movs	r1, #32
 8007b30:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2284      	movs	r2, #132	; 0x84
 8007b36:	2100      	movs	r1, #0
 8007b38:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e012      	b.n	8007b64 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2288      	movs	r2, #136	; 0x88
 8007b42:	2120      	movs	r1, #32
 8007b44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	228c      	movs	r2, #140	; 0x8c
 8007b4a:	2120      	movs	r1, #32
 8007b4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2284      	movs	r2, #132	; 0x84
 8007b5e:	2100      	movs	r1, #0
 8007b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	0018      	movs	r0, r3
 8007b66:	46bd      	mov	sp, r7
 8007b68:	b010      	add	sp, #64	; 0x40
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	01ffffff 	.word	0x01ffffff
 8007b70:	fffffedf 	.word	0xfffffedf

08007b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	1dfb      	adds	r3, r7, #7
 8007b82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b84:	e051      	b.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	d04e      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8c:	f7fc fbd2 	bl	8004334 <HAL_GetTick>
 8007b90:	0002      	movs	r2, r0
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e051      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2204      	movs	r2, #4
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d03b      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b80      	cmp	r3, #128	; 0x80
 8007bb6:	d038      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d035      	beq.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d111      	bne.n	8007bf0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f000 f83c 	bl	8007c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2290      	movs	r2, #144	; 0x90
 8007be0:	2108      	movs	r1, #8
 8007be2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2284      	movs	r2, #132	; 0x84
 8007be8:	2100      	movs	r1, #0
 8007bea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e02c      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69da      	ldr	r2, [r3, #28]
 8007bf6:	2380      	movs	r3, #128	; 0x80
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	401a      	ands	r2, r3
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d112      	bne.n	8007c2a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2280      	movs	r2, #128	; 0x80
 8007c0a:	0112      	lsls	r2, r2, #4
 8007c0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	0018      	movs	r0, r3
 8007c12:	f000 f81f 	bl	8007c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2290      	movs	r2, #144	; 0x90
 8007c1a:	2120      	movs	r1, #32
 8007c1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2284      	movs	r2, #132	; 0x84
 8007c22:	2100      	movs	r1, #0
 8007c24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e00f      	b.n	8007c4a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4013      	ands	r3, r2
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	425a      	negs	r2, r3
 8007c3a:	4153      	adcs	r3, r2
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	001a      	movs	r2, r3
 8007c40:	1dfb      	adds	r3, r7, #7
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d09e      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b004      	add	sp, #16
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c60:	617b      	str	r3, [r7, #20]
  return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	2301      	movs	r3, #1
 8007c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f383 8810 	msr	PRIMASK, r3
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4926      	ldr	r1, [pc, #152]	; (8007d18 <UART_EndRxTransfer+0xc4>)
 8007c7e:	400a      	ands	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f383 8810 	msr	PRIMASK, r3
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c92:	623b      	str	r3, [r7, #32]
  return(result);
 8007c94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30
 8007c98:	2301      	movs	r3, #1
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689a      	ldr	r2, [r3, #8]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	491b      	ldr	r1, [pc, #108]	; (8007d1c <UART_EndRxTransfer+0xc8>)
 8007cb0:	400a      	ands	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f383 8810 	msr	PRIMASK, r3
}
 8007cbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d118      	bne.n	8007cfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2110      	movs	r1, #16
 8007cea:	438a      	bics	r2, r1
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f383 8810 	msr	PRIMASK, r3
}
 8007cf8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	228c      	movs	r2, #140	; 0x8c
 8007cfe:	2120      	movs	r1, #32
 8007d00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b00e      	add	sp, #56	; 0x38
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	fffffedf 	.word	0xfffffedf
 8007d1c:	effffffe 	.word	0xeffffffe

08007d20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2284      	movs	r2, #132	; 0x84
 8007d2c:	5c9b      	ldrb	r3, [r3, r2]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d101      	bne.n	8007d36 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d32:	2302      	movs	r3, #2
 8007d34:	e027      	b.n	8007d86 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2284      	movs	r2, #132	; 0x84
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2288      	movs	r2, #136	; 0x88
 8007d42:	2124      	movs	r1, #36	; 0x24
 8007d44:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2101      	movs	r1, #1
 8007d5a:	438a      	bics	r2, r1
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4a0b      	ldr	r2, [pc, #44]	; (8007d90 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2288      	movs	r2, #136	; 0x88
 8007d78:	2120      	movs	r1, #32
 8007d7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2284      	movs	r2, #132	; 0x84
 8007d80:	2100      	movs	r1, #0
 8007d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	0018      	movs	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	b004      	add	sp, #16
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	46c0      	nop			; (mov r8, r8)
 8007d90:	dfffffff 	.word	0xdfffffff

08007d94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2284      	movs	r2, #132	; 0x84
 8007da2:	5c9b      	ldrb	r3, [r3, r2]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e02e      	b.n	8007e0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2284      	movs	r2, #132	; 0x84
 8007db0:	2101      	movs	r1, #1
 8007db2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2288      	movs	r2, #136	; 0x88
 8007db8:	2124      	movs	r1, #36	; 0x24
 8007dba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	438a      	bics	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	08d9      	lsrs	r1, r3, #3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	0018      	movs	r0, r3
 8007dec:	f000 f854 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2288      	movs	r2, #136	; 0x88
 8007dfc:	2120      	movs	r1, #32
 8007dfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2284      	movs	r2, #132	; 0x84
 8007e04:	2100      	movs	r1, #0
 8007e06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b004      	add	sp, #16
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2284      	movs	r2, #132	; 0x84
 8007e22:	5c9b      	ldrb	r3, [r3, r2]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e02f      	b.n	8007e8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2284      	movs	r2, #132	; 0x84
 8007e30:	2101      	movs	r1, #1
 8007e32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2288      	movs	r2, #136	; 0x88
 8007e38:	2124      	movs	r1, #36	; 0x24
 8007e3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	438a      	bics	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	4a0e      	ldr	r2, [pc, #56]	; (8007e94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	0019      	movs	r1, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f813 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2288      	movs	r2, #136	; 0x88
 8007e7e:	2120      	movs	r1, #32
 8007e80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2284      	movs	r2, #132	; 0x84
 8007e86:	2100      	movs	r1, #0
 8007e88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b004      	add	sp, #16
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	f1ffffff 	.word	0xf1ffffff

08007e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	226a      	movs	r2, #106	; 0x6a
 8007eac:	2101      	movs	r1, #1
 8007eae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2268      	movs	r2, #104	; 0x68
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eb8:	e043      	b.n	8007f42 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eba:	260f      	movs	r6, #15
 8007ebc:	19bb      	adds	r3, r7, r6
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ec2:	200e      	movs	r0, #14
 8007ec4:	183b      	adds	r3, r7, r0
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	0e5b      	lsrs	r3, r3, #25
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	240d      	movs	r4, #13
 8007ed6:	193b      	adds	r3, r7, r4
 8007ed8:	2107      	movs	r1, #7
 8007eda:	400a      	ands	r2, r1
 8007edc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	0f5b      	lsrs	r3, r3, #29
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	250c      	movs	r5, #12
 8007eea:	197b      	adds	r3, r7, r5
 8007eec:	2107      	movs	r1, #7
 8007eee:	400a      	ands	r2, r1
 8007ef0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	197a      	adds	r2, r7, r5
 8007ef8:	7812      	ldrb	r2, [r2, #0]
 8007efa:	4914      	ldr	r1, [pc, #80]	; (8007f4c <UARTEx_SetNbDataToProcess+0xb4>)
 8007efc:	5c8a      	ldrb	r2, [r1, r2]
 8007efe:	435a      	muls	r2, r3
 8007f00:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f02:	197b      	adds	r3, r7, r5
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0a:	0019      	movs	r1, r3
 8007f0c:	f7f8 f9a0 	bl	8000250 <__divsi3>
 8007f10:	0003      	movs	r3, r0
 8007f12:	b299      	uxth	r1, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	226a      	movs	r2, #106	; 0x6a
 8007f18:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f1a:	19bb      	adds	r3, r7, r6
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	193a      	adds	r2, r7, r4
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	490a      	ldr	r1, [pc, #40]	; (8007f4c <UARTEx_SetNbDataToProcess+0xb4>)
 8007f24:	5c8a      	ldrb	r2, [r1, r2]
 8007f26:	435a      	muls	r2, r3
 8007f28:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f2a:	193b      	adds	r3, r7, r4
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <UARTEx_SetNbDataToProcess+0xb8>)
 8007f30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f32:	0019      	movs	r1, r3
 8007f34:	f7f8 f98c 	bl	8000250 <__divsi3>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	b299      	uxth	r1, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2268      	movs	r2, #104	; 0x68
 8007f40:	5299      	strh	r1, [r3, r2]
}
 8007f42:	46c0      	nop			; (mov r8, r8)
 8007f44:	46bd      	mov	sp, r7
 8007f46:	b005      	add	sp, #20
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4a:	46c0      	nop			; (mov r8, r8)
 8007f4c:	080149e4 	.word	0x080149e4
 8007f50:	080149ec 	.word	0x080149ec

08007f54 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007f54:	b5b0      	push	{r4, r5, r7, lr}
 8007f56:	b0e4      	sub	sp, #400	; 0x190
 8007f58:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f5a:	24c8      	movs	r4, #200	; 0xc8
 8007f5c:	193b      	adds	r3, r7, r4
 8007f5e:	0018      	movs	r0, r3
 8007f60:	23c6      	movs	r3, #198	; 0xc6
 8007f62:	001a      	movs	r2, r3
 8007f64:	2100      	movs	r1, #0
 8007f66:	f004 f9cd 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <astronode_send_cfg_sr+0x64>)
 8007f6c:	25c8      	movs	r5, #200	; 0xc8
 8007f6e:	006d      	lsls	r5, r5, #1
 8007f70:	195b      	adds	r3, r3, r5
 8007f72:	19db      	adds	r3, r3, r7
 8007f74:	0018      	movs	r0, r3
 8007f76:	23c6      	movs	r3, #198	; 0xc6
 8007f78:	001a      	movs	r2, r3
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	f004 f9c2 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007f80:	193b      	adds	r3, r7, r4
 8007f82:	2210      	movs	r2, #16
 8007f84:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007f86:	003a      	movs	r2, r7
 8007f88:	193b      	adds	r3, r7, r4
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f001 fa87 	bl	80094a0 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <astronode_send_cfg_sr+0x64>)
 8007f94:	195b      	adds	r3, r3, r5
 8007f96:	19db      	adds	r3, r3, r7
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b90      	cmp	r3, #144	; 0x90
 8007f9c:	d104      	bne.n	8007fa8 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <astronode_send_cfg_sr+0x68>)
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f7fb f893 	bl	80030cc <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007fa6:	e003      	b.n	8007fb0 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007fa8:	4b05      	ldr	r3, [pc, #20]	; (8007fc0 <astronode_send_cfg_sr+0x6c>)
 8007faa:	0018      	movs	r0, r3
 8007fac:	f7fb f88e 	bl	80030cc <send_debug_logs>
}
 8007fb0:	46c0      	nop			; (mov r8, r8)
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b064      	add	sp, #400	; 0x190
 8007fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fb8:	fffffe70 	.word	0xfffffe70
 8007fbc:	08013408 	.word	0x08013408
 8007fc0:	0801343c 	.word	0x0801343c

08007fc4 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	b0e7      	sub	sp, #412	; 0x19c
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	0005      	movs	r5, r0
 8007fcc:	000c      	movs	r4, r1
 8007fce:	0010      	movs	r0, r2
 8007fd0:	0019      	movs	r1, r3
 8007fd2:	4b4b      	ldr	r3, [pc, #300]	; (8008100 <astronode_send_cfg_wr+0x13c>)
 8007fd4:	26cc      	movs	r6, #204	; 0xcc
 8007fd6:	0076      	lsls	r6, r6, #1
 8007fd8:	199b      	adds	r3, r3, r6
 8007fda:	19db      	adds	r3, r3, r7
 8007fdc:	1c2a      	adds	r2, r5, #0
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	4b48      	ldr	r3, [pc, #288]	; (8008104 <astronode_send_cfg_wr+0x140>)
 8007fe2:	0035      	movs	r5, r6
 8007fe4:	195b      	adds	r3, r3, r5
 8007fe6:	19db      	adds	r3, r3, r7
 8007fe8:	1c22      	adds	r2, r4, #0
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	4b46      	ldr	r3, [pc, #280]	; (8008108 <astronode_send_cfg_wr+0x144>)
 8007fee:	002c      	movs	r4, r5
 8007ff0:	191b      	adds	r3, r3, r4
 8007ff2:	19db      	adds	r3, r3, r7
 8007ff4:	1c02      	adds	r2, r0, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	4b44      	ldr	r3, [pc, #272]	; (800810c <astronode_send_cfg_wr+0x148>)
 8007ffa:	191b      	adds	r3, r3, r4
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	1c0a      	adds	r2, r1, #0
 8008000:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008002:	25d0      	movs	r5, #208	; 0xd0
 8008004:	197b      	adds	r3, r7, r5
 8008006:	0018      	movs	r0, r3
 8008008:	23c6      	movs	r3, #198	; 0xc6
 800800a:	001a      	movs	r2, r3
 800800c:	2100      	movs	r1, #0
 800800e:	f004 f979 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008012:	4b3f      	ldr	r3, [pc, #252]	; (8008110 <astronode_send_cfg_wr+0x14c>)
 8008014:	191b      	adds	r3, r3, r4
 8008016:	19db      	adds	r3, r3, r7
 8008018:	0018      	movs	r0, r3
 800801a:	23c6      	movs	r3, #198	; 0xc6
 800801c:	001a      	movs	r2, r3
 800801e:	2100      	movs	r1, #0
 8008020:	f004 f970 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008024:	0029      	movs	r1, r5
 8008026:	187b      	adds	r3, r7, r1
 8008028:	2205      	movs	r2, #5
 800802a:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 800802c:	4b34      	ldr	r3, [pc, #208]	; (8008100 <astronode_send_cfg_wr+0x13c>)
 800802e:	191b      	adds	r3, r3, r4
 8008030:	19db      	adds	r3, r3, r7
 8008032:	2200      	movs	r2, #0
 8008034:	569a      	ldrsb	r2, [r3, r2]
 8008036:	4b33      	ldr	r3, [pc, #204]	; (8008104 <astronode_send_cfg_wr+0x140>)
 8008038:	191b      	adds	r3, r3, r4
 800803a:	19db      	adds	r3, r3, r7
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	b25b      	sxtb	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008046:	4b30      	ldr	r3, [pc, #192]	; (8008108 <astronode_send_cfg_wr+0x144>)
 8008048:	191b      	adds	r3, r3, r4
 800804a:	19db      	adds	r3, r3, r7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	b25b      	sxtb	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008056:	4b2d      	ldr	r3, [pc, #180]	; (800810c <astronode_send_cfg_wr+0x148>)
 8008058:	191b      	adds	r3, r3, r4
 800805a:	19db      	adds	r3, r3, r7
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	b25b      	sxtb	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b25b      	sxtb	r3, r3
 8008066:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008068:	187b      	adds	r3, r7, r1
 800806a:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 800806c:	23d4      	movs	r3, #212	; 0xd4
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	2508      	movs	r5, #8
 8008072:	195b      	adds	r3, r3, r5
 8008074:	19db      	adds	r3, r3, r7
 8008076:	2200      	movs	r2, #0
 8008078:	569a      	ldrsb	r2, [r3, r2]
 800807a:	23d6      	movs	r3, #214	; 0xd6
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	195b      	adds	r3, r3, r5
 8008080:	19db      	adds	r3, r3, r7
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	b25b      	sxtb	r3, r3
 8008088:	4313      	orrs	r3, r2
 800808a:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 800808c:	23d8      	movs	r3, #216	; 0xd8
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	195b      	adds	r3, r3, r5
 8008092:	19db      	adds	r3, r3, r7
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	b25b      	sxtb	r3, r3
 800809a:	4313      	orrs	r3, r2
 800809c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800809e:	23da      	movs	r3, #218	; 0xda
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	195b      	adds	r3, r3, r5
 80080a4:	19db      	adds	r3, r3, r7
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	00db      	lsls	r3, r3, #3
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	4313      	orrs	r3, r2
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 80080b6:	0008      	movs	r0, r1
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	22c4      	movs	r2, #196	; 0xc4
 80080bc:	2103      	movs	r1, #3
 80080be:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80080c0:	002b      	movs	r3, r5
 80080c2:	18fa      	adds	r2, r7, r3
 80080c4:	183b      	adds	r3, r7, r0
 80080c6:	0011      	movs	r1, r2
 80080c8:	0018      	movs	r0, r3
 80080ca:	f001 f9e9 	bl	80094a0 <astronode_transport_send_receive>
 80080ce:	0003      	movs	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d10f      	bne.n	80080f4 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 80080d4:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <astronode_send_cfg_wr+0x14c>)
 80080d6:	191b      	adds	r3, r3, r4
 80080d8:	19db      	adds	r3, r3, r7
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b85      	cmp	r3, #133	; 0x85
 80080de:	d105      	bne.n	80080ec <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80080e0:	4b0c      	ldr	r3, [pc, #48]	; (8008114 <astronode_send_cfg_wr+0x150>)
 80080e2:	0018      	movs	r0, r3
 80080e4:	f7fa fff2 	bl	80030cc <send_debug_logs>
            return true ;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e004      	b.n	80080f6 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <astronode_send_cfg_wr+0x154>)
 80080ee:	0018      	movs	r0, r3
 80080f0:	f7fa ffec 	bl	80030cc <send_debug_logs>
        }
    }
    return false ;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b067      	add	sp, #412	; 0x19c
 80080fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	fffffe6f 	.word	0xfffffe6f
 8008104:	fffffe6e 	.word	0xfffffe6e
 8008108:	fffffe6d 	.word	0xfffffe6d
 800810c:	fffffe6c 	.word	0xfffffe6c
 8008110:	fffffe70 	.word	0xfffffe70
 8008114:	08013470 	.word	0x08013470
 8008118:	0801349c 	.word	0x0801349c

0800811c <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 800811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811e:	b0ed      	sub	sp, #436	; 0x1b4
 8008120:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008122:	21c8      	movs	r1, #200	; 0xc8
 8008124:	2318      	movs	r3, #24
 8008126:	18cb      	adds	r3, r1, r3
 8008128:	19db      	adds	r3, r3, r7
 800812a:	0018      	movs	r0, r3
 800812c:	23c6      	movs	r3, #198	; 0xc6
 800812e:	001a      	movs	r2, r3
 8008130:	2100      	movs	r1, #0
 8008132:	f004 f8e7 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008136:	4b4a      	ldr	r3, [pc, #296]	; (8008260 <astronode_send_mgi_rr+0x144>)
 8008138:	26cc      	movs	r6, #204	; 0xcc
 800813a:	0076      	lsls	r6, r6, #1
 800813c:	199b      	adds	r3, r3, r6
 800813e:	2218      	movs	r2, #24
 8008140:	4694      	mov	ip, r2
 8008142:	44bc      	add	ip, r7
 8008144:	4463      	add	r3, ip
 8008146:	0018      	movs	r0, r3
 8008148:	23c6      	movs	r3, #198	; 0xc6
 800814a:	001a      	movs	r2, r3
 800814c:	2100      	movs	r1, #0
 800814e:	f004 f8d9 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008152:	21c8      	movs	r1, #200	; 0xc8
 8008154:	2318      	movs	r3, #24
 8008156:	18cb      	adds	r3, r1, r3
 8008158:	19db      	adds	r3, r3, r7
 800815a:	2219      	movs	r2, #25
 800815c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800815e:	2318      	movs	r3, #24
 8008160:	18fa      	adds	r2, r7, r3
 8008162:	2318      	movs	r3, #24
 8008164:	18cb      	adds	r3, r1, r3
 8008166:	19db      	adds	r3, r3, r7
 8008168:	0011      	movs	r1, r2
 800816a:	0018      	movs	r0, r3
 800816c:	f001 f998 	bl	80094a0 <astronode_transport_send_receive>
 8008170:	0003      	movs	r3, r0
 8008172:	2b01      	cmp	r3, #1
 8008174:	d16f      	bne.n	8008256 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8008176:	4b3a      	ldr	r3, [pc, #232]	; (8008260 <astronode_send_mgi_rr+0x144>)
 8008178:	0032      	movs	r2, r6
 800817a:	189b      	adds	r3, r3, r2
 800817c:	2118      	movs	r1, #24
 800817e:	468c      	mov	ip, r1
 8008180:	44bc      	add	ip, r7
 8008182:	4463      	add	r3, ip
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b99      	cmp	r3, #153	; 0x99
 8008188:	d161      	bne.n	800824e <astronode_send_mgi_rr+0x132>
        {
 800818a:	466b      	mov	r3, sp
 800818c:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800818e:	4b34      	ldr	r3, [pc, #208]	; (8008260 <astronode_send_mgi_rr+0x144>)
 8008190:	189b      	adds	r3, r3, r2
 8008192:	2218      	movs	r2, #24
 8008194:	4694      	mov	ip, r2
 8008196:	44bc      	add	ip, r7
 8008198:	4463      	add	r3, ip
 800819a:	22c4      	movs	r2, #196	; 0xc4
 800819c:	5a9b      	ldrh	r3, [r3, r2]
 800819e:	001a      	movs	r2, r3
 80081a0:	3a01      	subs	r2, #1
 80081a2:	21ca      	movs	r1, #202	; 0xca
 80081a4:	0049      	lsls	r1, r1, #1
 80081a6:	2018      	movs	r0, #24
 80081a8:	1809      	adds	r1, r1, r0
 80081aa:	19c9      	adds	r1, r1, r7
 80081ac:	600a      	str	r2, [r1, #0]
 80081ae:	001c      	movs	r4, r3
 80081b0:	2200      	movs	r2, #0
 80081b2:	0015      	movs	r5, r2
 80081b4:	0020      	movs	r0, r4
 80081b6:	0029      	movs	r1, r5
 80081b8:	0004      	movs	r4, r0
 80081ba:	0f62      	lsrs	r2, r4, #29
 80081bc:	000c      	movs	r4, r1
 80081be:	00e4      	lsls	r4, r4, #3
 80081c0:	617c      	str	r4, [r7, #20]
 80081c2:	697c      	ldr	r4, [r7, #20]
 80081c4:	4314      	orrs	r4, r2
 80081c6:	617c      	str	r4, [r7, #20]
 80081c8:	0001      	movs	r1, r0
 80081ca:	00c9      	lsls	r1, r1, #3
 80081cc:	6139      	str	r1, [r7, #16]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	2200      	movs	r2, #0
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	6838      	ldr	r0, [r7, #0]
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	0004      	movs	r4, r0
 80081da:	0f62      	lsrs	r2, r4, #29
 80081dc:	000c      	movs	r4, r1
 80081de:	00e4      	lsls	r4, r4, #3
 80081e0:	60fc      	str	r4, [r7, #12]
 80081e2:	68fc      	ldr	r4, [r7, #12]
 80081e4:	4314      	orrs	r4, r2
 80081e6:	60fc      	str	r4, [r7, #12]
 80081e8:	0001      	movs	r1, r0
 80081ea:	00ca      	lsls	r2, r1, #3
 80081ec:	60ba      	str	r2, [r7, #8]
 80081ee:	3307      	adds	r3, #7
 80081f0:	08db      	lsrs	r3, r3, #3
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	4669      	mov	r1, sp
 80081f6:	1acb      	subs	r3, r1, r3
 80081f8:	469d      	mov	sp, r3
 80081fa:	466b      	mov	r3, sp
 80081fc:	3300      	adds	r3, #0
 80081fe:	24c8      	movs	r4, #200	; 0xc8
 8008200:	0064      	lsls	r4, r4, #1
 8008202:	2218      	movs	r2, #24
 8008204:	18a2      	adds	r2, r4, r2
 8008206:	19d1      	adds	r1, r2, r7
 8008208:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <astronode_send_mgi_rr+0x148>)
 800820c:	0018      	movs	r0, r3
 800820e:	f7fa ff5d 	bl	80030cc <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <astronode_send_mgi_rr+0x144>)
 8008214:	22cc      	movs	r2, #204	; 0xcc
 8008216:	0052      	lsls	r2, r2, #1
 8008218:	189b      	adds	r3, r3, r2
 800821a:	2218      	movs	r2, #24
 800821c:	4694      	mov	ip, r2
 800821e:	44bc      	add	ip, r7
 8008220:	4463      	add	r3, ip
 8008222:	22c4      	movs	r2, #196	; 0xc4
 8008224:	5a9b      	ldrh	r3, [r3, r2]
 8008226:	0019      	movs	r1, r3
 8008228:	2318      	movs	r3, #24
 800822a:	18fb      	adds	r3, r7, r3
 800822c:	3301      	adds	r3, #1
 800822e:	4a0e      	ldr	r2, [pc, #56]	; (8008268 <astronode_send_mgi_rr+0x14c>)
 8008230:	2018      	movs	r0, #24
 8008232:	1820      	adds	r0, r4, r0
 8008234:	19c0      	adds	r0, r0, r7
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	f003 ff9a 	bl	800c170 <snprintf>
            send_debug_logs(guid);
 800823c:	2318      	movs	r3, #24
 800823e:	18e3      	adds	r3, r4, r3
 8008240:	19db      	adds	r3, r3, r7
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	0018      	movs	r0, r3
 8008246:	f7fa ff41 	bl	80030cc <send_debug_logs>
 800824a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 800824c:	e003      	b.n	8008256 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <astronode_send_mgi_rr+0x150>)
 8008250:	0018      	movs	r0, r3
 8008252:	f7fa ff3b 	bl	80030cc <send_debug_logs>
}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	46bd      	mov	sp, r7
 800825a:	b06d      	add	sp, #436	; 0x1b4
 800825c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825e:	46c0      	nop			; (mov r8, r8)
 8008260:	fffffe68 	.word	0xfffffe68
 8008264:	08013528 	.word	0x08013528
 8008268:	08013538 	.word	0x08013538
 800826c:	0801353c 	.word	0x0801353c

08008270 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008272:	b0ed      	sub	sp, #436	; 0x1b4
 8008274:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008276:	21c8      	movs	r1, #200	; 0xc8
 8008278:	2318      	movs	r3, #24
 800827a:	18cb      	adds	r3, r1, r3
 800827c:	19db      	adds	r3, r3, r7
 800827e:	0018      	movs	r0, r3
 8008280:	23c6      	movs	r3, #198	; 0xc6
 8008282:	001a      	movs	r2, r3
 8008284:	2100      	movs	r1, #0
 8008286:	f004 f83d 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 800828a:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <astronode_send_msn_rr+0x144>)
 800828c:	26cc      	movs	r6, #204	; 0xcc
 800828e:	0076      	lsls	r6, r6, #1
 8008290:	199b      	adds	r3, r3, r6
 8008292:	2218      	movs	r2, #24
 8008294:	4694      	mov	ip, r2
 8008296:	44bc      	add	ip, r7
 8008298:	4463      	add	r3, ip
 800829a:	0018      	movs	r0, r3
 800829c:	23c6      	movs	r3, #198	; 0xc6
 800829e:	001a      	movs	r2, r3
 80082a0:	2100      	movs	r1, #0
 80082a2:	f004 f82f 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80082a6:	21c8      	movs	r1, #200	; 0xc8
 80082a8:	2318      	movs	r3, #24
 80082aa:	18cb      	adds	r3, r1, r3
 80082ac:	19db      	adds	r3, r3, r7
 80082ae:	221a      	movs	r2, #26
 80082b0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80082b2:	2318      	movs	r3, #24
 80082b4:	18fa      	adds	r2, r7, r3
 80082b6:	2318      	movs	r3, #24
 80082b8:	18cb      	adds	r3, r1, r3
 80082ba:	19db      	adds	r3, r3, r7
 80082bc:	0011      	movs	r1, r2
 80082be:	0018      	movs	r0, r3
 80082c0:	f001 f8ee 	bl	80094a0 <astronode_transport_send_receive>
 80082c4:	0003      	movs	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d16f      	bne.n	80083aa <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 80082ca:	4b3a      	ldr	r3, [pc, #232]	; (80083b4 <astronode_send_msn_rr+0x144>)
 80082cc:	0032      	movs	r2, r6
 80082ce:	189b      	adds	r3, r3, r2
 80082d0:	2118      	movs	r1, #24
 80082d2:	468c      	mov	ip, r1
 80082d4:	44bc      	add	ip, r7
 80082d6:	4463      	add	r3, ip
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b9a      	cmp	r3, #154	; 0x9a
 80082dc:	d161      	bne.n	80083a2 <astronode_send_msn_rr+0x132>
        {
 80082de:	466b      	mov	r3, sp
 80082e0:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 80082e2:	4b34      	ldr	r3, [pc, #208]	; (80083b4 <astronode_send_msn_rr+0x144>)
 80082e4:	189b      	adds	r3, r3, r2
 80082e6:	2218      	movs	r2, #24
 80082e8:	4694      	mov	ip, r2
 80082ea:	44bc      	add	ip, r7
 80082ec:	4463      	add	r3, ip
 80082ee:	22c4      	movs	r2, #196	; 0xc4
 80082f0:	5a9b      	ldrh	r3, [r3, r2]
 80082f2:	001a      	movs	r2, r3
 80082f4:	3a01      	subs	r2, #1
 80082f6:	21ca      	movs	r1, #202	; 0xca
 80082f8:	0049      	lsls	r1, r1, #1
 80082fa:	2018      	movs	r0, #24
 80082fc:	1809      	adds	r1, r1, r0
 80082fe:	19c9      	adds	r1, r1, r7
 8008300:	600a      	str	r2, [r1, #0]
 8008302:	001c      	movs	r4, r3
 8008304:	2200      	movs	r2, #0
 8008306:	0015      	movs	r5, r2
 8008308:	0020      	movs	r0, r4
 800830a:	0029      	movs	r1, r5
 800830c:	0004      	movs	r4, r0
 800830e:	0f62      	lsrs	r2, r4, #29
 8008310:	000c      	movs	r4, r1
 8008312:	00e4      	lsls	r4, r4, #3
 8008314:	617c      	str	r4, [r7, #20]
 8008316:	697c      	ldr	r4, [r7, #20]
 8008318:	4314      	orrs	r4, r2
 800831a:	617c      	str	r4, [r7, #20]
 800831c:	0001      	movs	r1, r0
 800831e:	00c9      	lsls	r1, r1, #3
 8008320:	6139      	str	r1, [r7, #16]
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	6838      	ldr	r0, [r7, #0]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	0004      	movs	r4, r0
 800832e:	0f62      	lsrs	r2, r4, #29
 8008330:	000c      	movs	r4, r1
 8008332:	00e4      	lsls	r4, r4, #3
 8008334:	60fc      	str	r4, [r7, #12]
 8008336:	68fc      	ldr	r4, [r7, #12]
 8008338:	4314      	orrs	r4, r2
 800833a:	60fc      	str	r4, [r7, #12]
 800833c:	0001      	movs	r1, r0
 800833e:	00ca      	lsls	r2, r1, #3
 8008340:	60ba      	str	r2, [r7, #8]
 8008342:	3307      	adds	r3, #7
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4669      	mov	r1, sp
 800834a:	1acb      	subs	r3, r1, r3
 800834c:	469d      	mov	sp, r3
 800834e:	466b      	mov	r3, sp
 8008350:	3300      	adds	r3, #0
 8008352:	24c8      	movs	r4, #200	; 0xc8
 8008354:	0064      	lsls	r4, r4, #1
 8008356:	2218      	movs	r2, #24
 8008358:	18a2      	adds	r2, r4, r2
 800835a:	19d1      	adds	r1, r2, r7
 800835c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 800835e:	4b16      	ldr	r3, [pc, #88]	; (80083b8 <astronode_send_msn_rr+0x148>)
 8008360:	0018      	movs	r0, r3
 8008362:	f7fa feb3 	bl	80030cc <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8008366:	4b13      	ldr	r3, [pc, #76]	; (80083b4 <astronode_send_msn_rr+0x144>)
 8008368:	22cc      	movs	r2, #204	; 0xcc
 800836a:	0052      	lsls	r2, r2, #1
 800836c:	189b      	adds	r3, r3, r2
 800836e:	2218      	movs	r2, #24
 8008370:	4694      	mov	ip, r2
 8008372:	44bc      	add	ip, r7
 8008374:	4463      	add	r3, ip
 8008376:	22c4      	movs	r2, #196	; 0xc4
 8008378:	5a9b      	ldrh	r3, [r3, r2]
 800837a:	0019      	movs	r1, r3
 800837c:	2318      	movs	r3, #24
 800837e:	18fb      	adds	r3, r7, r3
 8008380:	3301      	adds	r3, #1
 8008382:	4a0e      	ldr	r2, [pc, #56]	; (80083bc <astronode_send_msn_rr+0x14c>)
 8008384:	2018      	movs	r0, #24
 8008386:	1820      	adds	r0, r4, r0
 8008388:	19c0      	adds	r0, r0, r7
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	f003 fef0 	bl	800c170 <snprintf>
            send_debug_logs(serial_number);
 8008390:	2318      	movs	r3, #24
 8008392:	18e3      	adds	r3, r4, r3
 8008394:	19db      	adds	r3, r3, r7
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	0018      	movs	r0, r3
 800839a:	f7fa fe97 	bl	80030cc <send_debug_logs>
 800839e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80083a0:	e003      	b.n	80083aa <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80083a2:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <astronode_send_msn_rr+0x150>)
 80083a4:	0018      	movs	r0, r3
 80083a6:	f7fa fe91 	bl	80030cc <send_debug_logs>
}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	46bd      	mov	sp, r7
 80083ae:	b06d      	add	sp, #436	; 0x1b4
 80083b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	fffffe68 	.word	0xfffffe68
 80083b8:	08013558 	.word	0x08013558
 80083bc:	08013538 	.word	0x08013538
 80083c0:	08013574 	.word	0x08013574

080083c4 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 80083c4:	b5b0      	push	{r4, r5, r7, lr}
 80083c6:	b0e4      	sub	sp, #400	; 0x190
 80083c8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083ca:	24c8      	movs	r4, #200	; 0xc8
 80083cc:	193b      	adds	r3, r7, r4
 80083ce:	0018      	movs	r0, r3
 80083d0:	23c6      	movs	r3, #198	; 0xc6
 80083d2:	001a      	movs	r2, r3
 80083d4:	2100      	movs	r1, #0
 80083d6:	f003 ff95 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 80083dc:	25c8      	movs	r5, #200	; 0xc8
 80083de:	006d      	lsls	r5, r5, #1
 80083e0:	195b      	adds	r3, r3, r5
 80083e2:	19db      	adds	r3, r3, r7
 80083e4:	0018      	movs	r0, r3
 80083e6:	23c6      	movs	r3, #198	; 0xc6
 80083e8:	001a      	movs	r2, r3
 80083ea:	2100      	movs	r1, #0
 80083ec:	f003 ff8a 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 80083f0:	193b      	adds	r3, r7, r4
 80083f2:	2265      	movs	r2, #101	; 0x65
 80083f4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083f6:	003a      	movs	r2, r7
 80083f8:	193b      	adds	r3, r7, r4
 80083fa:	0011      	movs	r1, r2
 80083fc:	0018      	movs	r0, r3
 80083fe:	f001 f84f 	bl	80094a0 <astronode_transport_send_receive>
 8008402:	0003      	movs	r3, r0
 8008404:	2b01      	cmp	r3, #1
 8008406:	d147      	bne.n	8008498 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8008408:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 800840a:	195b      	adds	r3, r3, r5
 800840c:	19db      	adds	r3, r3, r7
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2be5      	cmp	r3, #229	; 0xe5
 8008412:	d141      	bne.n	8008498 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8008414:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 8008416:	195b      	adds	r3, r3, r5
 8008418:	19db      	adds	r3, r3, r7
 800841a:	785b      	ldrb	r3, [r3, #1]
 800841c:	001a      	movs	r2, r3
 800841e:	2301      	movs	r3, #1
 8008420:	4013      	ands	r3, r2
 8008422:	d006      	beq.n	8008432 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8008424:	4b1f      	ldr	r3, [pc, #124]	; (80084a4 <astronode_send_evt_rr+0xe0>)
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800842a:	4b1f      	ldr	r3, [pc, #124]	; (80084a8 <astronode_send_evt_rr+0xe4>)
 800842c:	0018      	movs	r0, r3
 800842e:	f7fa fe4d 	bl	80030cc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8008432:	4b1b      	ldr	r3, [pc, #108]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 8008434:	22c8      	movs	r2, #200	; 0xc8
 8008436:	0052      	lsls	r2, r2, #1
 8008438:	189b      	adds	r3, r3, r2
 800843a:	19db      	adds	r3, r3, r7
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	001a      	movs	r2, r3
 8008440:	2302      	movs	r3, #2
 8008442:	4013      	ands	r3, r2
 8008444:	d006      	beq.n	8008454 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8008446:	4b19      	ldr	r3, [pc, #100]	; (80084ac <astronode_send_evt_rr+0xe8>)
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 800844c:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <astronode_send_evt_rr+0xec>)
 800844e:	0018      	movs	r0, r3
 8008450:	f7fa fe3c 	bl	80030cc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 8008456:	22c8      	movs	r2, #200	; 0xc8
 8008458:	0052      	lsls	r2, r2, #1
 800845a:	189b      	adds	r3, r3, r2
 800845c:	19db      	adds	r3, r3, r7
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	001a      	movs	r2, r3
 8008462:	2304      	movs	r3, #4
 8008464:	4013      	ands	r3, r2
 8008466:	d006      	beq.n	8008476 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008468:	4b12      	ldr	r3, [pc, #72]	; (80084b4 <astronode_send_evt_rr+0xf0>)
 800846a:	2201      	movs	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <astronode_send_evt_rr+0xf4>)
 8008470:	0018      	movs	r0, r3
 8008472:	f7fa fe2b 	bl	80030cc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <astronode_send_evt_rr+0xdc>)
 8008478:	22c8      	movs	r2, #200	; 0xc8
 800847a:	0052      	lsls	r2, r2, #1
 800847c:	189b      	adds	r3, r3, r2
 800847e:	19db      	adds	r3, r3, r7
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	001a      	movs	r2, r3
 8008484:	2308      	movs	r3, #8
 8008486:	4013      	ands	r3, r2
 8008488:	d006      	beq.n	8008498 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <astronode_send_evt_rr+0xf8>)
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <astronode_send_evt_rr+0xfc>)
 8008492:	0018      	movs	r0, r3
 8008494:	f7fa fe1a 	bl	80030cc <send_debug_logs>
            }

        }
    }
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b064      	add	sp, #400	; 0x190
 800849e:	bdb0      	pop	{r4, r5, r7, pc}
 80084a0:	fffffe70 	.word	0xfffffe70
 80084a4:	20000b0c 	.word	0x20000b0c
 80084a8:	0801361c 	.word	0x0801361c
 80084ac:	20000b0d 	.word	0x20000b0d
 80084b0:	08013640 	.word	0x08013640
 80084b4:	20000b0e 	.word	0x20000b0e
 80084b8:	08013658 	.word	0x08013658
 80084bc:	20000b0f 	.word	0x20000b0f
 80084c0:	0801366c 	.word	0x0801366c

080084c4 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 80084c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c6:	b0e7      	sub	sp, #412	; 0x19c
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 80084ce:	24d0      	movs	r4, #208	; 0xd0
 80084d0:	193b      	adds	r3, r7, r4
 80084d2:	0018      	movs	r0, r3
 80084d4:	23c6      	movs	r3, #198	; 0xc6
 80084d6:	001a      	movs	r2, r3
 80084d8:	2100      	movs	r1, #0
 80084da:	f003 ff13 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 80084de:	4b56      	ldr	r3, [pc, #344]	; (8008638 <astronode_send_geo_wr+0x174>)
 80084e0:	26cc      	movs	r6, #204	; 0xcc
 80084e2:	0076      	lsls	r6, r6, #1
 80084e4:	199b      	adds	r3, r3, r6
 80084e6:	19db      	adds	r3, r3, r7
 80084e8:	0018      	movs	r0, r3
 80084ea:	23c6      	movs	r3, #198	; 0xc6
 80084ec:	001a      	movs	r2, r3
 80084ee:	2100      	movs	r1, #0
 80084f0:	f003 ff08 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 80084f4:	193b      	adds	r3, r7, r4
 80084f6:	2235      	movs	r2, #53	; 0x35
 80084f8:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 80084fa:	193b      	adds	r3, r7, r4
 80084fc:	22c4      	movs	r2, #196	; 0xc4
 80084fe:	5a9b      	ldrh	r3, [r3, r2]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	b290      	uxth	r0, r2
 8008504:	193a      	adds	r2, r7, r4
 8008506:	21c4      	movs	r1, #196	; 0xc4
 8008508:	5250      	strh	r0, [r2, r1]
 800850a:	0019      	movs	r1, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	193b      	adds	r3, r7, r4
 8008512:	185b      	adds	r3, r3, r1
 8008514:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	1218      	asrs	r0, r3, #8
 800851a:	0025      	movs	r5, r4
 800851c:	197b      	adds	r3, r7, r5
 800851e:	22c4      	movs	r2, #196	; 0xc4
 8008520:	5a9b      	ldrh	r3, [r3, r2]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	b294      	uxth	r4, r2
 8008526:	197a      	adds	r2, r7, r5
 8008528:	21c4      	movs	r1, #196	; 0xc4
 800852a:	5254      	strh	r4, [r2, r1]
 800852c:	0019      	movs	r1, r3
 800852e:	b2c2      	uxtb	r2, r0
 8008530:	002c      	movs	r4, r5
 8008532:	193b      	adds	r3, r7, r4
 8008534:	185b      	adds	r3, r3, r1
 8008536:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	1418      	asrs	r0, r3, #16
 800853c:	0025      	movs	r5, r4
 800853e:	197b      	adds	r3, r7, r5
 8008540:	22c4      	movs	r2, #196	; 0xc4
 8008542:	5a9b      	ldrh	r3, [r3, r2]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	b294      	uxth	r4, r2
 8008548:	197a      	adds	r2, r7, r5
 800854a:	21c4      	movs	r1, #196	; 0xc4
 800854c:	5254      	strh	r4, [r2, r1]
 800854e:	0019      	movs	r1, r3
 8008550:	b2c2      	uxtb	r2, r0
 8008552:	002c      	movs	r4, r5
 8008554:	193b      	adds	r3, r7, r4
 8008556:	185b      	adds	r3, r3, r1
 8008558:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	1618      	asrs	r0, r3, #24
 800855e:	0025      	movs	r5, r4
 8008560:	197b      	adds	r3, r7, r5
 8008562:	22c4      	movs	r2, #196	; 0xc4
 8008564:	5a9b      	ldrh	r3, [r3, r2]
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	b294      	uxth	r4, r2
 800856a:	197a      	adds	r2, r7, r5
 800856c:	21c4      	movs	r1, #196	; 0xc4
 800856e:	5254      	strh	r4, [r2, r1]
 8008570:	0019      	movs	r1, r3
 8008572:	b2c2      	uxtb	r2, r0
 8008574:	002c      	movs	r4, r5
 8008576:	193b      	adds	r3, r7, r4
 8008578:	185b      	adds	r3, r3, r1
 800857a:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 800857c:	193b      	adds	r3, r7, r4
 800857e:	22c4      	movs	r2, #196	; 0xc4
 8008580:	5a9b      	ldrh	r3, [r3, r2]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	b290      	uxth	r0, r2
 8008586:	193a      	adds	r2, r7, r4
 8008588:	21c4      	movs	r1, #196	; 0xc4
 800858a:	5250      	strh	r0, [r2, r1]
 800858c:	0019      	movs	r1, r3
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	193b      	adds	r3, r7, r4
 8008594:	185b      	adds	r3, r3, r1
 8008596:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	1218      	asrs	r0, r3, #8
 800859c:	0025      	movs	r5, r4
 800859e:	197b      	adds	r3, r7, r5
 80085a0:	22c4      	movs	r2, #196	; 0xc4
 80085a2:	5a9b      	ldrh	r3, [r3, r2]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	b294      	uxth	r4, r2
 80085a8:	197a      	adds	r2, r7, r5
 80085aa:	21c4      	movs	r1, #196	; 0xc4
 80085ac:	5254      	strh	r4, [r2, r1]
 80085ae:	0019      	movs	r1, r3
 80085b0:	b2c2      	uxtb	r2, r0
 80085b2:	002c      	movs	r4, r5
 80085b4:	193b      	adds	r3, r7, r4
 80085b6:	185b      	adds	r3, r3, r1
 80085b8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	1418      	asrs	r0, r3, #16
 80085be:	0025      	movs	r5, r4
 80085c0:	197b      	adds	r3, r7, r5
 80085c2:	22c4      	movs	r2, #196	; 0xc4
 80085c4:	5a9b      	ldrh	r3, [r3, r2]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	b294      	uxth	r4, r2
 80085ca:	197a      	adds	r2, r7, r5
 80085cc:	21c4      	movs	r1, #196	; 0xc4
 80085ce:	5254      	strh	r4, [r2, r1]
 80085d0:	0019      	movs	r1, r3
 80085d2:	b2c2      	uxtb	r2, r0
 80085d4:	002c      	movs	r4, r5
 80085d6:	193b      	adds	r3, r7, r4
 80085d8:	185b      	adds	r3, r3, r1
 80085da:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	1618      	asrs	r0, r3, #24
 80085e0:	0025      	movs	r5, r4
 80085e2:	197b      	adds	r3, r7, r5
 80085e4:	22c4      	movs	r2, #196	; 0xc4
 80085e6:	5a9b      	ldrh	r3, [r3, r2]
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	b294      	uxth	r4, r2
 80085ec:	197a      	adds	r2, r7, r5
 80085ee:	21c4      	movs	r1, #196	; 0xc4
 80085f0:	5254      	strh	r4, [r2, r1]
 80085f2:	0019      	movs	r1, r3
 80085f4:	b2c2      	uxtb	r2, r0
 80085f6:	0028      	movs	r0, r5
 80085f8:	183b      	adds	r3, r7, r0
 80085fa:	185b      	adds	r3, r3, r1
 80085fc:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085fe:	2308      	movs	r3, #8
 8008600:	18fa      	adds	r2, r7, r3
 8008602:	183b      	adds	r3, r7, r0
 8008604:	0011      	movs	r1, r2
 8008606:	0018      	movs	r0, r3
 8008608:	f000 ff4a 	bl	80094a0 <astronode_transport_send_receive>
 800860c:	0003      	movs	r3, r0
 800860e:	2b01      	cmp	r3, #1
 8008610:	d10e      	bne.n	8008630 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <astronode_send_geo_wr+0x174>)
 8008614:	199b      	adds	r3, r3, r6
 8008616:	19db      	adds	r3, r3, r7
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2bb5      	cmp	r3, #181	; 0xb5
 800861c:	d104      	bne.n	8008628 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 800861e:	4b07      	ldr	r3, [pc, #28]	; (800863c <astronode_send_geo_wr+0x178>)
 8008620:	0018      	movs	r0, r3
 8008622:	f7fa fd53 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 8008626:	e003      	b.n	8008630 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <astronode_send_geo_wr+0x17c>)
 800862a:	0018      	movs	r0, r3
 800862c:	f7fa fd4e 	bl	80030cc <send_debug_logs>
}
 8008630:	46c0      	nop			; (mov r8, r8)
 8008632:	46bd      	mov	sp, r7
 8008634:	b067      	add	sp, #412	; 0x19c
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008638:	fffffe70 	.word	0xfffffe70
 800863c:	08013680 	.word	0x08013680
 8008640:	080136ac 	.word	0x080136ac

08008644 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8008644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008646:	b0fd      	sub	sp, #500	; 0x1f4
 8008648:	af02      	add	r7, sp, #8
 800864a:	6039      	str	r1, [r7, #0]
 800864c:	0011      	movs	r1, r2
 800864e:	4b4c      	ldr	r3, [pc, #304]	; (8008780 <astronode_send_pld_er+0x13c>)
 8008650:	26f4      	movs	r6, #244	; 0xf4
 8008652:	0076      	lsls	r6, r6, #1
 8008654:	199b      	adds	r3, r3, r6
 8008656:	19db      	adds	r3, r3, r7
 8008658:	1c02      	adds	r2, r0, #0
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	4b49      	ldr	r3, [pc, #292]	; (8008784 <astronode_send_pld_er+0x140>)
 800865e:	199b      	adds	r3, r3, r6
 8008660:	19db      	adds	r3, r3, r7
 8008662:	1c0a      	adds	r2, r1, #0
 8008664:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008666:	2490      	movs	r4, #144	; 0x90
 8008668:	0064      	lsls	r4, r4, #1
 800866a:	193b      	adds	r3, r7, r4
 800866c:	0018      	movs	r0, r3
 800866e:	23c6      	movs	r3, #198	; 0xc6
 8008670:	001a      	movs	r2, r3
 8008672:	2100      	movs	r1, #0
 8008674:	f003 fe46 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008678:	4b43      	ldr	r3, [pc, #268]	; (8008788 <astronode_send_pld_er+0x144>)
 800867a:	199b      	adds	r3, r3, r6
 800867c:	19db      	adds	r3, r3, r7
 800867e:	0018      	movs	r0, r3
 8008680:	23c6      	movs	r3, #198	; 0xc6
 8008682:	001a      	movs	r2, r3
 8008684:	2100      	movs	r1, #0
 8008686:	f003 fe3d 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800868a:	193b      	adds	r3, r7, r4
 800868c:	2225      	movs	r2, #37	; 0x25
 800868e:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008690:	193b      	adds	r3, r7, r4
 8008692:	22c4      	movs	r2, #196	; 0xc4
 8008694:	5a9b      	ldrh	r3, [r3, r2]
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	b290      	uxth	r0, r2
 800869a:	193a      	adds	r2, r7, r4
 800869c:	21c4      	movs	r1, #196	; 0xc4
 800869e:	5250      	strh	r0, [r2, r1]
 80086a0:	0019      	movs	r1, r3
 80086a2:	4b37      	ldr	r3, [pc, #220]	; (8008780 <astronode_send_pld_er+0x13c>)
 80086a4:	199b      	adds	r3, r3, r6
 80086a6:	19db      	adds	r3, r3, r7
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	193b      	adds	r3, r7, r4
 80086ae:	185b      	adds	r3, r3, r1
 80086b0:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80086b2:	4b33      	ldr	r3, [pc, #204]	; (8008780 <astronode_send_pld_er+0x13c>)
 80086b4:	199b      	adds	r3, r3, r6
 80086b6:	19db      	adds	r3, r3, r7
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	b298      	uxth	r0, r3
 80086be:	0025      	movs	r5, r4
 80086c0:	197b      	adds	r3, r7, r5
 80086c2:	22c4      	movs	r2, #196	; 0xc4
 80086c4:	5a9b      	ldrh	r3, [r3, r2]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	b294      	uxth	r4, r2
 80086ca:	197a      	adds	r2, r7, r5
 80086cc:	21c4      	movs	r1, #196	; 0xc4
 80086ce:	5254      	strh	r4, [r2, r1]
 80086d0:	0019      	movs	r1, r3
 80086d2:	b2c2      	uxtb	r2, r0
 80086d4:	002c      	movs	r4, r5
 80086d6:	193b      	adds	r3, r7, r4
 80086d8:	185b      	adds	r3, r3, r1
 80086da:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 80086dc:	193b      	adds	r3, r7, r4
 80086de:	22c4      	movs	r2, #196	; 0xc4
 80086e0:	5a9b      	ldrh	r3, [r3, r2]
 80086e2:	001a      	movs	r2, r3
 80086e4:	193b      	adds	r3, r7, r4
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	1c58      	adds	r0, r3, #1
 80086ea:	4b26      	ldr	r3, [pc, #152]	; (8008784 <astronode_send_pld_er+0x140>)
 80086ec:	199b      	adds	r3, r3, r6
 80086ee:	19db      	adds	r3, r3, r7
 80086f0:	881a      	ldrh	r2, [r3, #0]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	0019      	movs	r1, r3
 80086f6:	f003 ff32 	bl	800c55e <memcpy>
    request.payload_len = 2 + payload_length;
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <astronode_send_pld_er+0x140>)
 80086fc:	199b      	adds	r3, r3, r6
 80086fe:	19db      	adds	r3, r3, r7
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	3302      	adds	r3, #2
 8008704:	b299      	uxth	r1, r3
 8008706:	193b      	adds	r3, r7, r4
 8008708:	22c4      	movs	r2, #196	; 0xc4
 800870a:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 800870c:	2358      	movs	r3, #88	; 0x58
 800870e:	18fa      	adds	r2, r7, r3
 8008710:	193b      	adds	r3, r7, r4
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f000 fec3 	bl	80094a0 <astronode_transport_send_receive>
 800871a:	0003      	movs	r3, r0
 800871c:	2b01      	cmp	r3, #1
 800871e:	d12a      	bne.n	8008776 <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8008720:	4b19      	ldr	r3, [pc, #100]	; (8008788 <astronode_send_pld_er+0x144>)
 8008722:	199b      	adds	r3, r3, r6
 8008724:	19db      	adds	r3, r3, r7
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2ba5      	cmp	r3, #165	; 0xa5
 800872a:	d114      	bne.n	8008756 <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 800872c:	4b14      	ldr	r3, [pc, #80]	; (8008780 <astronode_send_pld_er+0x13c>)
 800872e:	199b      	adds	r3, r3, r6
 8008730:	19db      	adds	r3, r3, r7
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	22ea      	movs	r2, #234	; 0xea
 8008736:	32ff      	adds	r2, #255	; 0xff
 8008738:	0014      	movs	r4, r2
 800873a:	4a14      	ldr	r2, [pc, #80]	; (800878c <astronode_send_pld_er+0x148>)
 800873c:	4914      	ldr	r1, [pc, #80]	; (8008790 <astronode_send_pld_er+0x14c>)
 800873e:	2508      	movs	r5, #8
 8008740:	1978      	adds	r0, r7, r5
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	0023      	movs	r3, r4
 8008746:	f003 fd47 	bl	800c1d8 <sprintf>
            send_debug_logs ( s ) ;
 800874a:	197b      	adds	r3, r7, r5
 800874c:	0018      	movs	r0, r3
 800874e:	f7fa fcbd 	bl	80030cc <send_debug_logs>
            return true ;
 8008752:	2301      	movs	r3, #1
 8008754:	e010      	b.n	8008778 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 8008756:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <astronode_send_pld_er+0x13c>)
 8008758:	22f4      	movs	r2, #244	; 0xf4
 800875a:	0052      	lsls	r2, r2, #1
 800875c:	189b      	adds	r3, r3, r2
 800875e:	19db      	adds	r3, r3, r7
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	490c      	ldr	r1, [pc, #48]	; (8008794 <astronode_send_pld_er+0x150>)
 8008764:	2408      	movs	r4, #8
 8008766:	193b      	adds	r3, r7, r4
 8008768:	0018      	movs	r0, r3
 800876a:	f003 fd35 	bl	800c1d8 <sprintf>
            send_debug_logs ( s ) ;
 800876e:	193b      	adds	r3, r7, r4
 8008770:	0018      	movs	r0, r3
 8008772:	f7fa fcab 	bl	80030cc <send_debug_logs>
        }
    }
    return false ;
 8008776:	2300      	movs	r3, #0
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b07b      	add	sp, #492	; 0x1ec
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008780:	fffffe1e 	.word	0xfffffe1e
 8008784:	fffffe1c 	.word	0xfffffe1c
 8008788:	fffffe70 	.word	0xfffffe70
 800878c:	08013724 	.word	0x08013724
 8008790:	08013750 	.word	0x08013750
 8008794:	0801376c 	.word	0x0801376c

08008798 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008798:	b5b0      	push	{r4, r5, r7, lr}
 800879a:	b0e4      	sub	sp, #400	; 0x190
 800879c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800879e:	24c8      	movs	r4, #200	; 0xc8
 80087a0:	193b      	adds	r3, r7, r4
 80087a2:	0018      	movs	r0, r3
 80087a4:	23c6      	movs	r3, #198	; 0xc6
 80087a6:	001a      	movs	r2, r3
 80087a8:	2100      	movs	r1, #0
 80087aa:	f003 fdab 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 80087ae:	4b15      	ldr	r3, [pc, #84]	; (8008804 <astronode_send_pld_fr+0x6c>)
 80087b0:	25c8      	movs	r5, #200	; 0xc8
 80087b2:	006d      	lsls	r5, r5, #1
 80087b4:	195b      	adds	r3, r3, r5
 80087b6:	19db      	adds	r3, r3, r7
 80087b8:	0018      	movs	r0, r3
 80087ba:	23c6      	movs	r3, #198	; 0xc6
 80087bc:	001a      	movs	r2, r3
 80087be:	2100      	movs	r1, #0
 80087c0:	f003 fda0 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 80087c4:	193b      	adds	r3, r7, r4
 80087c6:	2227      	movs	r2, #39	; 0x27
 80087c8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087ca:	003a      	movs	r2, r7
 80087cc:	193b      	adds	r3, r7, r4
 80087ce:	0011      	movs	r1, r2
 80087d0:	0018      	movs	r0, r3
 80087d2:	f000 fe65 	bl	80094a0 <astronode_transport_send_receive>
 80087d6:	0003      	movs	r3, r0
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d10e      	bne.n	80087fa <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <astronode_send_pld_fr+0x6c>)
 80087de:	195b      	adds	r3, r3, r5
 80087e0:	19db      	adds	r3, r3, r7
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2ba7      	cmp	r3, #167	; 0xa7
 80087e6:	d104      	bne.n	80087f2 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 80087e8:	4b07      	ldr	r3, [pc, #28]	; (8008808 <astronode_send_pld_fr+0x70>)
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7fa fc6e 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 80087f0:	e003      	b.n	80087fa <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <astronode_send_pld_fr+0x74>)
 80087f4:	0018      	movs	r0, r3
 80087f6:	f7fa fc69 	bl	80030cc <send_debug_logs>
}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	46bd      	mov	sp, r7
 80087fe:	b064      	add	sp, #400	; 0x190
 8008800:	bdb0      	pop	{r4, r5, r7, pc}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	fffffe70 	.word	0xfffffe70
 8008808:	0801379c 	.word	0x0801379c
 800880c:	080137d4 	.word	0x080137d4

08008810 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8008810:	b5b0      	push	{r4, r5, r7, lr}
 8008812:	b0e4      	sub	sp, #400	; 0x190
 8008814:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008816:	24c8      	movs	r4, #200	; 0xc8
 8008818:	193b      	adds	r3, r7, r4
 800881a:	0018      	movs	r0, r3
 800881c:	23c6      	movs	r3, #198	; 0xc6
 800881e:	001a      	movs	r2, r3
 8008820:	2100      	movs	r1, #0
 8008822:	f003 fd6f 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008826:	4b16      	ldr	r3, [pc, #88]	; (8008880 <astronode_send_res_cr+0x70>)
 8008828:	25c8      	movs	r5, #200	; 0xc8
 800882a:	006d      	lsls	r5, r5, #1
 800882c:	195b      	adds	r3, r3, r5
 800882e:	19db      	adds	r3, r3, r7
 8008830:	0018      	movs	r0, r3
 8008832:	23c6      	movs	r3, #198	; 0xc6
 8008834:	001a      	movs	r2, r3
 8008836:	2100      	movs	r1, #0
 8008838:	f003 fd64 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 800883c:	193b      	adds	r3, r7, r4
 800883e:	2255      	movs	r2, #85	; 0x55
 8008840:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008842:	003a      	movs	r2, r7
 8008844:	193b      	adds	r3, r7, r4
 8008846:	0011      	movs	r1, r2
 8008848:	0018      	movs	r0, r3
 800884a:	f000 fe29 	bl	80094a0 <astronode_transport_send_receive>
 800884e:	0003      	movs	r3, r0
 8008850:	2b01      	cmp	r3, #1
 8008852:	d111      	bne.n	8008878 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8008854:	4b0a      	ldr	r3, [pc, #40]	; (8008880 <astronode_send_res_cr+0x70>)
 8008856:	195b      	adds	r3, r3, r5
 8008858:	19db      	adds	r3, r3, r7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2bd5      	cmp	r3, #213	; 0xd5
 800885e:	d107      	bne.n	8008870 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008860:	4b08      	ldr	r3, [pc, #32]	; (8008884 <astronode_send_res_cr+0x74>)
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8008866:	4b08      	ldr	r3, [pc, #32]	; (8008888 <astronode_send_res_cr+0x78>)
 8008868:	0018      	movs	r0, r3
 800886a:	f7fa fc2f 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800886e:	e003      	b.n	8008878 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <astronode_send_res_cr+0x7c>)
 8008872:	0018      	movs	r0, r3
 8008874:	f7fa fc2a 	bl	80030cc <send_debug_logs>
}
 8008878:	46c0      	nop			; (mov r8, r8)
 800887a:	46bd      	mov	sp, r7
 800887c:	b064      	add	sp, #400	; 0x190
 800887e:	bdb0      	pop	{r4, r5, r7, pc}
 8008880:	fffffe70 	.word	0xfffffe70
 8008884:	20000b0d 	.word	0x20000b0d
 8008888:	08013810 	.word	0x08013810
 800888c:	08013844 	.word	0x08013844

08008890 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008890:	b5b0      	push	{r4, r5, r7, lr}
 8008892:	b0fa      	sub	sp, #488	; 0x1e8
 8008894:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8008896:	258e      	movs	r5, #142	; 0x8e
 8008898:	006d      	lsls	r5, r5, #1
 800889a:	197b      	adds	r3, r7, r5
 800889c:	0018      	movs	r0, r3
 800889e:	23c6      	movs	r3, #198	; 0xc6
 80088a0:	001a      	movs	r2, r3
 80088a2:	2100      	movs	r1, #0
 80088a4:	f003 fd2e 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0} ;
 80088a8:	4b28      	ldr	r3, [pc, #160]	; (800894c <astronode_send_rtc_rr+0xbc>)
 80088aa:	24f4      	movs	r4, #244	; 0xf4
 80088ac:	0064      	lsls	r4, r4, #1
 80088ae:	191b      	adds	r3, r3, r4
 80088b0:	19db      	adds	r3, r3, r7
 80088b2:	0018      	movs	r0, r3
 80088b4:	23c6      	movs	r3, #198	; 0xc6
 80088b6:	001a      	movs	r2, r3
 80088b8:	2100      	movs	r1, #0
 80088ba:	f003 fd23 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 80088be:	197b      	adds	r3, r7, r5
 80088c0:	2217      	movs	r2, #23
 80088c2:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80088c4:	2354      	movs	r3, #84	; 0x54
 80088c6:	18fa      	adds	r2, r7, r3
 80088c8:	197b      	adds	r3, r7, r5
 80088ca:	0011      	movs	r1, r2
 80088cc:	0018      	movs	r0, r3
 80088ce:	f000 fde7 	bl	80094a0 <astronode_transport_send_receive>
 80088d2:	0003      	movs	r3, r0
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d133      	bne.n	8008940 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 80088d8:	4b1c      	ldr	r3, [pc, #112]	; (800894c <astronode_send_rtc_rr+0xbc>)
 80088da:	0021      	movs	r1, r4
 80088dc:	185b      	adds	r3, r3, r1
 80088de:	19db      	adds	r3, r3, r7
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b97      	cmp	r3, #151	; 0x97
 80088e4:	d128      	bne.n	8008938 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 80088e6:	4b19      	ldr	r3, [pc, #100]	; (800894c <astronode_send_rtc_rr+0xbc>)
 80088e8:	185b      	adds	r3, r3, r1
 80088ea:	19db      	adds	r3, r3, r7
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 80088f0:	4b16      	ldr	r3, [pc, #88]	; (800894c <astronode_send_rtc_rr+0xbc>)
 80088f2:	185b      	adds	r3, r3, r1
 80088f4:	19db      	adds	r3, r3, r7
 80088f6:	789b      	ldrb	r3, [r3, #2]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80088fc:	4b13      	ldr	r3, [pc, #76]	; (800894c <astronode_send_rtc_rr+0xbc>)
 80088fe:	185b      	adds	r3, r3, r1
 8008900:	19db      	adds	r3, r3, r7
 8008902:	78db      	ldrb	r3, [r3, #3]
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 8008908:	4b10      	ldr	r3, [pc, #64]	; (800894c <astronode_send_rtc_rr+0xbc>)
 800890a:	185b      	adds	r3, r3, r1
 800890c:	19db      	adds	r3, r3, r7
 800890e:	791b      	ldrb	r3, [r3, #4]
 8008910:	061b      	lsls	r3, r3, #24
 8008912:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008914:	24f2      	movs	r4, #242	; 0xf2
 8008916:	0064      	lsls	r4, r4, #1
 8008918:	193a      	adds	r2, r7, r4
 800891a:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 800891c:	193b      	adds	r3, r7, r4
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	490b      	ldr	r1, [pc, #44]	; (8008950 <astronode_send_rtc_rr+0xc0>)
 8008922:	1d3b      	adds	r3, r7, #4
 8008924:	0018      	movs	r0, r3
 8008926:	f003 fc57 	bl	800c1d8 <sprintf>
            send_debug_logs ( str ) ;
 800892a:	1d3b      	adds	r3, r7, #4
 800892c:	0018      	movs	r0, r3
 800892e:	f7fa fbcd 	bl	80030cc <send_debug_logs>
            return rtc_time ;
 8008932:	193b      	adds	r3, r7, r4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	e004      	b.n	8008942 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <astronode_send_rtc_rr+0xc4>)
 800893a:	0018      	movs	r0, r3
 800893c:	f7fa fbc6 	bl	80030cc <send_debug_logs>
        }
    }
    return 0 ;
 8008940:	2300      	movs	r3, #0
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b07a      	add	sp, #488	; 0x1e8
 8008948:	bdb0      	pop	{r4, r5, r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	fffffe6c 	.word	0xfffffe6c
 8008950:	08013870 	.word	0x08013870
 8008954:	080138b0 	.word	0x080138b0

08008958 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 8008958:	b5b0      	push	{r4, r5, r7, lr}
 800895a:	b0f8      	sub	sp, #480	; 0x1e0
 800895c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800895e:	258c      	movs	r5, #140	; 0x8c
 8008960:	006d      	lsls	r5, r5, #1
 8008962:	197b      	adds	r3, r7, r5
 8008964:	0018      	movs	r0, r3
 8008966:	23c6      	movs	r3, #198	; 0xc6
 8008968:	001a      	movs	r2, r3
 800896a:	2100      	movs	r1, #0
 800896c:	f003 fcca 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008970:	4b21      	ldr	r3, [pc, #132]	; (80089f8 <astronode_send_sak_rr+0xa0>)
 8008972:	24f0      	movs	r4, #240	; 0xf0
 8008974:	0064      	lsls	r4, r4, #1
 8008976:	191b      	adds	r3, r3, r4
 8008978:	19db      	adds	r3, r3, r7
 800897a:	0018      	movs	r0, r3
 800897c:	23c6      	movs	r3, #198	; 0xc6
 800897e:	001a      	movs	r2, r3
 8008980:	2100      	movs	r1, #0
 8008982:	f003 fcbf 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008986:	197b      	adds	r3, r7, r5
 8008988:	2245      	movs	r2, #69	; 0x45
 800898a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800898c:	2350      	movs	r3, #80	; 0x50
 800898e:	18fa      	adds	r2, r7, r3
 8008990:	197b      	adds	r3, r7, r5
 8008992:	0011      	movs	r1, r2
 8008994:	0018      	movs	r0, r3
 8008996:	f000 fd83 	bl	80094a0 <astronode_transport_send_receive>
 800899a:	0003      	movs	r3, r0
 800899c:	2b01      	cmp	r3, #1
 800899e:	d126      	bne.n	80089ee <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80089a0:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <astronode_send_sak_rr+0xa0>)
 80089a2:	191b      	adds	r3, r3, r4
 80089a4:	19db      	adds	r3, r3, r7
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2bc5      	cmp	r3, #197	; 0xc5
 80089aa:	d11c      	bne.n	80089e6 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80089ac:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <astronode_send_sak_rr+0xa0>)
 80089ae:	191b      	adds	r3, r3, r4
 80089b0:	19db      	adds	r3, r3, r7
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	b299      	uxth	r1, r3
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <astronode_send_sak_rr+0xa0>)
 80089b8:	191b      	adds	r3, r3, r4
 80089ba:	19db      	adds	r3, r3, r7
 80089bc:	789b      	ldrb	r3, [r3, #2]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	20ef      	movs	r0, #239	; 0xef
 80089c6:	0040      	lsls	r0, r0, #1
 80089c8:	183b      	adds	r3, r7, r0
 80089ca:	188a      	adds	r2, r1, r2
 80089cc:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 80089ce:	183b      	adds	r3, r7, r0
 80089d0:	881a      	ldrh	r2, [r3, #0]
 80089d2:	490a      	ldr	r1, [pc, #40]	; (80089fc <astronode_send_sak_rr+0xa4>)
 80089d4:	003b      	movs	r3, r7
 80089d6:	0018      	movs	r0, r3
 80089d8:	f003 fbfe 	bl	800c1d8 <sprintf>
            send_debug_logs(str);
 80089dc:	003b      	movs	r3, r7
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fa fb74 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 80089e4:	e003      	b.n	80089ee <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 80089e6:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <astronode_send_sak_rr+0xa8>)
 80089e8:	0018      	movs	r0, r3
 80089ea:	f7fa fb6f 	bl	80030cc <send_debug_logs>
}
 80089ee:	46c0      	nop			; (mov r8, r8)
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b078      	add	sp, #480	; 0x1e0
 80089f4:	bdb0      	pop	{r4, r5, r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	fffffe70 	.word	0xfffffe70
 80089fc:	080138cc 	.word	0x080138cc
 8008a00:	080138f8 	.word	0x080138f8

08008a04 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008a04:	b5b0      	push	{r4, r5, r7, lr}
 8008a06:	b0e4      	sub	sp, #400	; 0x190
 8008a08:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a0a:	24c8      	movs	r4, #200	; 0xc8
 8008a0c:	193b      	adds	r3, r7, r4
 8008a0e:	0018      	movs	r0, r3
 8008a10:	23c6      	movs	r3, #198	; 0xc6
 8008a12:	001a      	movs	r2, r3
 8008a14:	2100      	movs	r1, #0
 8008a16:	f003 fc75 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008a1a:	4b16      	ldr	r3, [pc, #88]	; (8008a74 <astronode_send_sak_cr+0x70>)
 8008a1c:	25c8      	movs	r5, #200	; 0xc8
 8008a1e:	006d      	lsls	r5, r5, #1
 8008a20:	195b      	adds	r3, r3, r5
 8008a22:	19db      	adds	r3, r3, r7
 8008a24:	0018      	movs	r0, r3
 8008a26:	23c6      	movs	r3, #198	; 0xc6
 8008a28:	001a      	movs	r2, r3
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	f003 fc6a 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008a30:	193b      	adds	r3, r7, r4
 8008a32:	2246      	movs	r2, #70	; 0x46
 8008a34:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a36:	003a      	movs	r2, r7
 8008a38:	193b      	adds	r3, r7, r4
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 fd2f 	bl	80094a0 <astronode_transport_send_receive>
 8008a42:	0003      	movs	r3, r0
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d111      	bne.n	8008a6c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <astronode_send_sak_cr+0x70>)
 8008a4a:	195b      	adds	r3, r3, r5
 8008a4c:	19db      	adds	r3, r3, r7
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2bc6      	cmp	r3, #198	; 0xc6
 8008a52:	d107      	bne.n	8008a64 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008a54:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <astronode_send_sak_cr+0x74>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <astronode_send_sak_cr+0x78>)
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7fa fb35 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008a62:	e003      	b.n	8008a6c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <astronode_send_sak_cr+0x7c>)
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7fa fb30 	bl	80030cc <send_debug_logs>
}
 8008a6c:	46c0      	nop			; (mov r8, r8)
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	b064      	add	sp, #400	; 0x190
 8008a72:	bdb0      	pop	{r4, r5, r7, pc}
 8008a74:	fffffe70 	.word	0xfffffe70
 8008a78:	20000b0c 	.word	0x20000b0c
 8008a7c:	0801392c 	.word	0x0801392c
 8008a80:	08013954 	.word	0x08013954

08008a84 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a86:	b0ed      	sub	sp, #436	; 0x1b4
 8008a88:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008a8a:	21c8      	movs	r1, #200	; 0xc8
 8008a8c:	2318      	movs	r3, #24
 8008a8e:	18cb      	adds	r3, r1, r3
 8008a90:	19db      	adds	r3, r3, r7
 8008a92:	0018      	movs	r0, r3
 8008a94:	23c6      	movs	r3, #198	; 0xc6
 8008a96:	001a      	movs	r2, r3
 8008a98:	2100      	movs	r1, #0
 8008a9a:	f003 fc33 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	; (8008bc8 <astronode_send_mpn_rr+0x144>)
 8008aa0:	26cc      	movs	r6, #204	; 0xcc
 8008aa2:	0076      	lsls	r6, r6, #1
 8008aa4:	199b      	adds	r3, r3, r6
 8008aa6:	2218      	movs	r2, #24
 8008aa8:	4694      	mov	ip, r2
 8008aaa:	44bc      	add	ip, r7
 8008aac:	4463      	add	r3, ip
 8008aae:	0018      	movs	r0, r3
 8008ab0:	23c6      	movs	r3, #198	; 0xc6
 8008ab2:	001a      	movs	r2, r3
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	f003 fc25 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008aba:	21c8      	movs	r1, #200	; 0xc8
 8008abc:	2318      	movs	r3, #24
 8008abe:	18cb      	adds	r3, r1, r3
 8008ac0:	19db      	adds	r3, r3, r7
 8008ac2:	221b      	movs	r2, #27
 8008ac4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008ac6:	2318      	movs	r3, #24
 8008ac8:	18fa      	adds	r2, r7, r3
 8008aca:	2318      	movs	r3, #24
 8008acc:	18cb      	adds	r3, r1, r3
 8008ace:	19db      	adds	r3, r3, r7
 8008ad0:	0011      	movs	r1, r2
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f000 fce4 	bl	80094a0 <astronode_transport_send_receive>
 8008ad8:	0003      	movs	r3, r0
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d16f      	bne.n	8008bbe <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008ade:	4b3a      	ldr	r3, [pc, #232]	; (8008bc8 <astronode_send_mpn_rr+0x144>)
 8008ae0:	0032      	movs	r2, r6
 8008ae2:	189b      	adds	r3, r3, r2
 8008ae4:	2118      	movs	r1, #24
 8008ae6:	468c      	mov	ip, r1
 8008ae8:	44bc      	add	ip, r7
 8008aea:	4463      	add	r3, ip
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	2b9b      	cmp	r3, #155	; 0x9b
 8008af0:	d161      	bne.n	8008bb6 <astronode_send_mpn_rr+0x132>
        {
 8008af2:	466b      	mov	r3, sp
 8008af4:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008af6:	4b34      	ldr	r3, [pc, #208]	; (8008bc8 <astronode_send_mpn_rr+0x144>)
 8008af8:	189b      	adds	r3, r3, r2
 8008afa:	2218      	movs	r2, #24
 8008afc:	4694      	mov	ip, r2
 8008afe:	44bc      	add	ip, r7
 8008b00:	4463      	add	r3, ip
 8008b02:	22c4      	movs	r2, #196	; 0xc4
 8008b04:	5a9b      	ldrh	r3, [r3, r2]
 8008b06:	001a      	movs	r2, r3
 8008b08:	3a01      	subs	r2, #1
 8008b0a:	21ca      	movs	r1, #202	; 0xca
 8008b0c:	0049      	lsls	r1, r1, #1
 8008b0e:	2018      	movs	r0, #24
 8008b10:	1809      	adds	r1, r1, r0
 8008b12:	19c9      	adds	r1, r1, r7
 8008b14:	600a      	str	r2, [r1, #0]
 8008b16:	001c      	movs	r4, r3
 8008b18:	2200      	movs	r2, #0
 8008b1a:	0015      	movs	r5, r2
 8008b1c:	0020      	movs	r0, r4
 8008b1e:	0029      	movs	r1, r5
 8008b20:	0004      	movs	r4, r0
 8008b22:	0f62      	lsrs	r2, r4, #29
 8008b24:	000c      	movs	r4, r1
 8008b26:	00e4      	lsls	r4, r4, #3
 8008b28:	617c      	str	r4, [r7, #20]
 8008b2a:	697c      	ldr	r4, [r7, #20]
 8008b2c:	4314      	orrs	r4, r2
 8008b2e:	617c      	str	r4, [r7, #20]
 8008b30:	0001      	movs	r1, r0
 8008b32:	00c9      	lsls	r1, r1, #3
 8008b34:	6139      	str	r1, [r7, #16]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	6838      	ldr	r0, [r7, #0]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	0004      	movs	r4, r0
 8008b42:	0f62      	lsrs	r2, r4, #29
 8008b44:	000c      	movs	r4, r1
 8008b46:	00e4      	lsls	r4, r4, #3
 8008b48:	60fc      	str	r4, [r7, #12]
 8008b4a:	68fc      	ldr	r4, [r7, #12]
 8008b4c:	4314      	orrs	r4, r2
 8008b4e:	60fc      	str	r4, [r7, #12]
 8008b50:	0001      	movs	r1, r0
 8008b52:	00ca      	lsls	r2, r1, #3
 8008b54:	60ba      	str	r2, [r7, #8]
 8008b56:	3307      	adds	r3, #7
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4669      	mov	r1, sp
 8008b5e:	1acb      	subs	r3, r1, r3
 8008b60:	469d      	mov	sp, r3
 8008b62:	466b      	mov	r3, sp
 8008b64:	3300      	adds	r3, #0
 8008b66:	24c8      	movs	r4, #200	; 0xc8
 8008b68:	0064      	lsls	r4, r4, #1
 8008b6a:	2218      	movs	r2, #24
 8008b6c:	18a2      	adds	r2, r4, r2
 8008b6e:	19d1      	adds	r1, r2, r7
 8008b70:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008b72:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <astronode_send_mpn_rr+0x148>)
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7fa faa9 	bl	80030cc <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008b7a:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <astronode_send_mpn_rr+0x144>)
 8008b7c:	22cc      	movs	r2, #204	; 0xcc
 8008b7e:	0052      	lsls	r2, r2, #1
 8008b80:	189b      	adds	r3, r3, r2
 8008b82:	2218      	movs	r2, #24
 8008b84:	4694      	mov	ip, r2
 8008b86:	44bc      	add	ip, r7
 8008b88:	4463      	add	r3, ip
 8008b8a:	22c4      	movs	r2, #196	; 0xc4
 8008b8c:	5a9b      	ldrh	r3, [r3, r2]
 8008b8e:	0019      	movs	r1, r3
 8008b90:	2318      	movs	r3, #24
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	3301      	adds	r3, #1
 8008b96:	4a0e      	ldr	r2, [pc, #56]	; (8008bd0 <astronode_send_mpn_rr+0x14c>)
 8008b98:	2018      	movs	r0, #24
 8008b9a:	1820      	adds	r0, r4, r0
 8008b9c:	19c0      	adds	r0, r0, r7
 8008b9e:	6800      	ldr	r0, [r0, #0]
 8008ba0:	f003 fae6 	bl	800c170 <snprintf>
            send_debug_logs(product_number);
 8008ba4:	2318      	movs	r3, #24
 8008ba6:	18e3      	adds	r3, r4, r3
 8008ba8:	19db      	adds	r3, r3, r7
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	0018      	movs	r0, r3
 8008bae:	f7fa fa8d 	bl	80030cc <send_debug_logs>
 8008bb2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008bb4:	e003      	b.n	8008bbe <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008bb6:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <astronode_send_mpn_rr+0x150>)
 8008bb8:	0018      	movs	r0, r3
 8008bba:	f7fa fa87 	bl	80030cc <send_debug_logs>
}
 8008bbe:	46c0      	nop			; (mov r8, r8)
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	b06d      	add	sp, #436	; 0x1b4
 8008bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc6:	46c0      	nop			; (mov r8, r8)
 8008bc8:	fffffe68 	.word	0xfffffe68
 8008bcc:	08013a1c 	.word	0x08013a1c
 8008bd0:	08013538 	.word	0x08013538
 8008bd4:	08013574 	.word	0x08013574

08008bd8 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008bd8:	b5b0      	push	{r4, r5, r7, lr}
 8008bda:	b0e4      	sub	sp, #400	; 0x190
 8008bdc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008bde:	24c8      	movs	r4, #200	; 0xc8
 8008be0:	193b      	adds	r3, r7, r4
 8008be2:	0018      	movs	r0, r3
 8008be4:	23c6      	movs	r3, #198	; 0xc6
 8008be6:	001a      	movs	r2, r3
 8008be8:	2100      	movs	r1, #0
 8008bea:	f003 fb8b 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <astronode_send_cmd_cr+0x70>)
 8008bf0:	25c8      	movs	r5, #200	; 0xc8
 8008bf2:	006d      	lsls	r5, r5, #1
 8008bf4:	195b      	adds	r3, r3, r5
 8008bf6:	19db      	adds	r3, r3, r7
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	23c6      	movs	r3, #198	; 0xc6
 8008bfc:	001a      	movs	r2, r3
 8008bfe:	2100      	movs	r1, #0
 8008c00:	f003 fb80 	bl	800c304 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008c04:	193b      	adds	r3, r7, r4
 8008c06:	2248      	movs	r2, #72	; 0x48
 8008c08:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008c0a:	003a      	movs	r2, r7
 8008c0c:	193b      	adds	r3, r7, r4
 8008c0e:	0011      	movs	r1, r2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f000 fc45 	bl	80094a0 <astronode_transport_send_receive>
 8008c16:	0003      	movs	r3, r0
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d111      	bne.n	8008c40 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <astronode_send_cmd_cr+0x70>)
 8008c1e:	195b      	adds	r3, r3, r5
 8008c20:	19db      	adds	r3, r3, r7
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2bc8      	cmp	r3, #200	; 0xc8
 8008c26:	d107      	bne.n	8008c38 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008c28:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <astronode_send_cmd_cr+0x74>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008c2e:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <astronode_send_cmd_cr+0x78>)
 8008c30:	0018      	movs	r0, r3
 8008c32:	f7fa fa4b 	bl	80030cc <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008c36:	e003      	b.n	8008c40 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008c38:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <astronode_send_cmd_cr+0x7c>)
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7fa fa46 	bl	80030cc <send_debug_logs>
}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b064      	add	sp, #400	; 0x190
 8008c46:	bdb0      	pop	{r4, r5, r7, pc}
 8008c48:	fffffe70 	.word	0xfffffe70
 8008c4c:	20000b0e 	.word	0x20000b0e
 8008c50:	08013e6c 	.word	0x08013e6c
 8008c54:	08013e90 	.word	0x08013e90

08008c58 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8008c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5a:	4cc6      	ldr	r4, [pc, #792]	; (8008f74 <astronode_send_cmd_rr+0x31c>)
 8008c5c:	44a5      	add	sp, r4
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008c62:	2190      	movs	r1, #144	; 0x90
 8008c64:	0049      	lsls	r1, r1, #1
 8008c66:	2318      	movs	r3, #24
 8008c68:	18cb      	adds	r3, r1, r3
 8008c6a:	19db      	adds	r3, r3, r7
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	23c6      	movs	r3, #198	; 0xc6
 8008c70:	001a      	movs	r2, r3
 8008c72:	2100      	movs	r1, #0
 8008c74:	f003 fb46 	bl	800c304 <memset>
    astronode_app_msg_t answer = {0};
 8008c78:	4bbf      	ldr	r3, [pc, #764]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008c7a:	26fc      	movs	r6, #252	; 0xfc
 8008c7c:	0076      	lsls	r6, r6, #1
 8008c7e:	199b      	adds	r3, r3, r6
 8008c80:	2218      	movs	r2, #24
 8008c82:	4694      	mov	ip, r2
 8008c84:	44bc      	add	ip, r7
 8008c86:	4463      	add	r3, ip
 8008c88:	0018      	movs	r0, r3
 8008c8a:	23c6      	movs	r3, #198	; 0xc6
 8008c8c:	001a      	movs	r2, r3
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f003 fb38 	bl	800c304 <memset>
    bool result = false ;
 8008c94:	23f8      	movs	r3, #248	; 0xf8
 8008c96:	33ff      	adds	r3, #255	; 0xff
 8008c98:	2218      	movs	r2, #24
 8008c9a:	189b      	adds	r3, r3, r2
 8008c9c:	19db      	adds	r3, r3, r7
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008ca2:	2190      	movs	r1, #144	; 0x90
 8008ca4:	0049      	lsls	r1, r1, #1
 8008ca6:	2318      	movs	r3, #24
 8008ca8:	18cb      	adds	r3, r1, r3
 8008caa:	19db      	adds	r3, r3, r7
 8008cac:	2247      	movs	r2, #71	; 0x47
 8008cae:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008cb0:	2258      	movs	r2, #88	; 0x58
 8008cb2:	2318      	movs	r3, #24
 8008cb4:	18d3      	adds	r3, r2, r3
 8008cb6:	19da      	adds	r2, r3, r7
 8008cb8:	2318      	movs	r3, #24
 8008cba:	18cb      	adds	r3, r1, r3
 8008cbc:	19db      	adds	r3, r3, r7
 8008cbe:	0011      	movs	r1, r2
 8008cc0:	0018      	movs	r0, r3
 8008cc2:	f000 fbed 	bl	80094a0 <astronode_transport_send_receive>
 8008cc6:	0003      	movs	r3, r0
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d000      	beq.n	8008cce <astronode_send_cmd_rr+0x76>
 8008ccc:	e146      	b.n	8008f5c <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008cce:	4baa      	ldr	r3, [pc, #680]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008cd0:	199a      	adds	r2, r3, r6
 8008cd2:	2318      	movs	r3, #24
 8008cd4:	18fb      	adds	r3, r7, r3
 8008cd6:	18d3      	adds	r3, r2, r3
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2bc7      	cmp	r3, #199	; 0xc7
 8008cdc:	d000      	beq.n	8008ce0 <astronode_send_cmd_rr+0x88>
 8008cde:	e139      	b.n	8008f54 <astronode_send_cmd_rr+0x2fc>
        {
 8008ce0:	466b      	mov	r3, sp
 8008ce2:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008ce4:	4ba5      	ldr	r3, [pc, #660]	; (8008f7c <astronode_send_cmd_rr+0x324>)
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7fa f9f0 	bl	80030cc <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008cec:	4ba2      	ldr	r3, [pc, #648]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008cee:	21fc      	movs	r1, #252	; 0xfc
 8008cf0:	0049      	lsls	r1, r1, #1
 8008cf2:	185a      	adds	r2, r3, r1
 8008cf4:	2318      	movs	r3, #24
 8008cf6:	18fb      	adds	r3, r7, r3
 8008cf8:	18d3      	adds	r3, r2, r3
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008cfe:	4b9e      	ldr	r3, [pc, #632]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008d00:	1858      	adds	r0, r3, r1
 8008d02:	2318      	movs	r3, #24
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	18c3      	adds	r3, r0, r3
 8008d08:	789b      	ldrb	r3, [r3, #2]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008d0e:	4b9a      	ldr	r3, [pc, #616]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008d10:	1858      	adds	r0, r3, r1
 8008d12:	2318      	movs	r3, #24
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	18c3      	adds	r3, r0, r3
 8008d18:	78db      	ldrb	r3, [r3, #3]
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008d1e:	4b96      	ldr	r3, [pc, #600]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008d20:	1858      	adds	r0, r3, r1
 8008d22:	2318      	movs	r3, #24
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	18c3      	adds	r3, r0, r3
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	061b      	lsls	r3, r3, #24
 8008d2c:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008d2e:	22f8      	movs	r2, #248	; 0xf8
 8008d30:	0052      	lsls	r2, r2, #1
 8008d32:	2118      	movs	r1, #24
 8008d34:	1851      	adds	r1, r2, r1
 8008d36:	19c8      	adds	r0, r1, r7
 8008d38:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008d3a:	2318      	movs	r3, #24
 8008d3c:	18d3      	adds	r3, r2, r3
 8008d3e:	19da      	adds	r2, r3, r7
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	498f      	ldr	r1, [pc, #572]	; (8008f80 <astronode_send_cmd_rr+0x328>)
 8008d44:	2008      	movs	r0, #8
 8008d46:	2318      	movs	r3, #24
 8008d48:	18c3      	adds	r3, r0, r3
 8008d4a:	19db      	adds	r3, r3, r7
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f003 fa43 	bl	800c1d8 <sprintf>
            send_debug_logs(str);
 8008d52:	2008      	movs	r0, #8
 8008d54:	2318      	movs	r3, #24
 8008d56:	18c3      	adds	r3, r0, r3
 8008d58:	19db      	adds	r3, r3, r7
 8008d5a:	0018      	movs	r0, r3
 8008d5c:	f7fa f9b6 	bl	80030cc <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008d60:	4b85      	ldr	r3, [pc, #532]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008d62:	21fc      	movs	r1, #252	; 0xfc
 8008d64:	0049      	lsls	r1, r1, #1
 8008d66:	185a      	adds	r2, r3, r1
 8008d68:	2318      	movs	r3, #24
 8008d6a:	18fb      	adds	r3, r7, r3
 8008d6c:	18d3      	adds	r3, r2, r3
 8008d6e:	22c4      	movs	r2, #196	; 0xc4
 8008d70:	5a9b      	ldrh	r3, [r3, r2]
 8008d72:	2b2c      	cmp	r3, #44	; 0x2c
 8008d74:	d013      	beq.n	8008d9e <astronode_send_cmd_rr+0x146>
 8008d76:	4b80      	ldr	r3, [pc, #512]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008d78:	185a      	adds	r2, r3, r1
 8008d7a:	2318      	movs	r3, #24
 8008d7c:	18fb      	adds	r3, r7, r3
 8008d7e:	18d3      	adds	r3, r2, r3
 8008d80:	22c4      	movs	r2, #196	; 0xc4
 8008d82:	5a9b      	ldrh	r3, [r3, r2]
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d00a      	beq.n	8008d9e <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8008d88:	4b7e      	ldr	r3, [pc, #504]	; (8008f84 <astronode_send_cmd_rr+0x32c>)
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f7fa f99e 	bl	80030cc <send_debug_logs>
                return result ;
 8008d90:	23f8      	movs	r3, #248	; 0xf8
 8008d92:	33ff      	adds	r3, #255	; 0xff
 8008d94:	2218      	movs	r2, #24
 8008d96:	189b      	adds	r3, r3, r2
 8008d98:	19db      	adds	r3, r3, r7
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	e0d8      	b.n	8008f50 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008d9e:	4b76      	ldr	r3, [pc, #472]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008da0:	22fc      	movs	r2, #252	; 0xfc
 8008da2:	0052      	lsls	r2, r2, #1
 8008da4:	189b      	adds	r3, r3, r2
 8008da6:	2218      	movs	r2, #24
 8008da8:	4694      	mov	ip, r2
 8008daa:	44bc      	add	ip, r7
 8008dac:	4463      	add	r3, ip
 8008dae:	22c4      	movs	r2, #196	; 0xc4
 8008db0:	5a9b      	ldrh	r3, [r3, r2]
 8008db2:	001a      	movs	r2, r3
 8008db4:	3a01      	subs	r2, #1
 8008db6:	21f6      	movs	r1, #246	; 0xf6
 8008db8:	0049      	lsls	r1, r1, #1
 8008dba:	2018      	movs	r0, #24
 8008dbc:	1809      	adds	r1, r1, r0
 8008dbe:	19c9      	adds	r1, r1, r7
 8008dc0:	600a      	str	r2, [r1, #0]
 8008dc2:	001c      	movs	r4, r3
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	0015      	movs	r5, r2
 8008dc8:	0020      	movs	r0, r4
 8008dca:	0029      	movs	r1, r5
 8008dcc:	0004      	movs	r4, r0
 8008dce:	0f62      	lsrs	r2, r4, #29
 8008dd0:	000c      	movs	r4, r1
 8008dd2:	00e4      	lsls	r4, r4, #3
 8008dd4:	617c      	str	r4, [r7, #20]
 8008dd6:	697c      	ldr	r4, [r7, #20]
 8008dd8:	4314      	orrs	r4, r2
 8008dda:	617c      	str	r4, [r7, #20]
 8008ddc:	0001      	movs	r1, r0
 8008dde:	00c9      	lsls	r1, r1, #3
 8008de0:	6139      	str	r1, [r7, #16]
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	2200      	movs	r2, #0
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	6838      	ldr	r0, [r7, #0]
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	0004      	movs	r4, r0
 8008dee:	0f62      	lsrs	r2, r4, #29
 8008df0:	000c      	movs	r4, r1
 8008df2:	00e4      	lsls	r4, r4, #3
 8008df4:	60fc      	str	r4, [r7, #12]
 8008df6:	68fc      	ldr	r4, [r7, #12]
 8008df8:	4314      	orrs	r4, r2
 8008dfa:	60fc      	str	r4, [r7, #12]
 8008dfc:	0001      	movs	r1, r0
 8008dfe:	00ca      	lsls	r2, r1, #3
 8008e00:	60ba      	str	r2, [r7, #8]
 8008e02:	3307      	adds	r3, #7
 8008e04:	08db      	lsrs	r3, r3, #3
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4669      	mov	r1, sp
 8008e0a:	1acb      	subs	r3, r1, r3
 8008e0c:	469d      	mov	sp, r3
 8008e0e:	466b      	mov	r3, sp
 8008e10:	3300      	adds	r3, #0
 8008e12:	20f4      	movs	r0, #244	; 0xf4
 8008e14:	0040      	lsls	r0, r0, #1
 8008e16:	2218      	movs	r2, #24
 8008e18:	1882      	adds	r2, r0, r2
 8008e1a:	19d1      	adds	r1, r2, r7
 8008e1c:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008e1e:	4b56      	ldr	r3, [pc, #344]	; (8008f78 <astronode_send_cmd_rr+0x320>)
 8008e20:	22fc      	movs	r2, #252	; 0xfc
 8008e22:	0052      	lsls	r2, r2, #1
 8008e24:	189b      	adds	r3, r3, r2
 8008e26:	2218      	movs	r2, #24
 8008e28:	4694      	mov	ip, r2
 8008e2a:	44bc      	add	ip, r7
 8008e2c:	4463      	add	r3, ip
 8008e2e:	22c4      	movs	r2, #196	; 0xc4
 8008e30:	5a9b      	ldrh	r3, [r3, r2]
 8008e32:	3b03      	subs	r3, #3
 8008e34:	0019      	movs	r1, r3
 8008e36:	2358      	movs	r3, #88	; 0x58
 8008e38:	2218      	movs	r2, #24
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	19db      	adds	r3, r3, r7
 8008e3e:	3305      	adds	r3, #5
 8008e40:	4a51      	ldr	r2, [pc, #324]	; (8008f88 <astronode_send_cmd_rr+0x330>)
 8008e42:	2418      	movs	r4, #24
 8008e44:	1900      	adds	r0, r0, r4
 8008e46:	19c0      	adds	r0, r0, r7
 8008e48:	6800      	ldr	r0, [r0, #0]
 8008e4a:	f003 f991 	bl	800c170 <snprintf>
 8008e4e:	0002      	movs	r2, r0
 8008e50:	23f3      	movs	r3, #243	; 0xf3
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	2118      	movs	r1, #24
 8008e56:	185b      	adds	r3, r3, r1
 8008e58:	19db      	adds	r3, r3, r7
 8008e5a:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008e5c:	23fb      	movs	r3, #251	; 0xfb
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	2218      	movs	r2, #24
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	19db      	adds	r3, r3, r7
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e037      	b.n	8008edc <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008e6c:	23fb      	movs	r3, #251	; 0xfb
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	2218      	movs	r2, #24
 8008e72:	189b      	adds	r3, r3, r2
 8008e74:	19db      	adds	r3, r3, r7
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	22f4      	movs	r2, #244	; 0xf4
 8008e7a:	0052      	lsls	r2, r2, #1
 8008e7c:	2118      	movs	r1, #24
 8008e7e:	1852      	adds	r2, r2, r1
 8008e80:	19d2      	adds	r2, r2, r7
 8008e82:	6812      	ldr	r2, [r2, #0]
 8008e84:	5cd3      	ldrb	r3, [r2, r3]
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	4b40      	ldr	r3, [pc, #256]	; (8008f8c <astronode_send_cmd_rr+0x334>)
 8008e8a:	18d3      	adds	r3, r2, r3
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	001a      	movs	r2, r3
 8008e90:	2397      	movs	r3, #151	; 0x97
 8008e92:	4013      	ands	r3, r2
 8008e94:	d105      	bne.n	8008ea2 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008e96:	4b3e      	ldr	r3, [pc, #248]	; (8008f90 <astronode_send_cmd_rr+0x338>)
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f7fa f917 	bl	80030cc <send_debug_logs>
                    return false;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	e056      	b.n	8008f50 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008ea2:	20fb      	movs	r0, #251	; 0xfb
 8008ea4:	0040      	lsls	r0, r0, #1
 8008ea6:	2318      	movs	r3, #24
 8008ea8:	18c3      	adds	r3, r0, r3
 8008eaa:	19db      	adds	r3, r3, r7
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	2318      	movs	r3, #24
 8008eb0:	18c3      	adds	r3, r0, r3
 8008eb2:	19db      	adds	r3, r3, r7
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	69f9      	ldr	r1, [r7, #28]
 8008eb8:	18cb      	adds	r3, r1, r3
 8008eba:	21f4      	movs	r1, #244	; 0xf4
 8008ebc:	0049      	lsls	r1, r1, #1
 8008ebe:	2418      	movs	r4, #24
 8008ec0:	1909      	adds	r1, r1, r4
 8008ec2:	19c9      	adds	r1, r1, r7
 8008ec4:	6809      	ldr	r1, [r1, #0]
 8008ec6:	5c8a      	ldrb	r2, [r1, r2]
 8008ec8:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008eca:	2318      	movs	r3, #24
 8008ecc:	18c3      	adds	r3, r0, r3
 8008ece:	19db      	adds	r3, r3, r7
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	2318      	movs	r3, #24
 8008ed4:	18c3      	adds	r3, r0, r3
 8008ed6:	19db      	adds	r3, r3, r7
 8008ed8:	3201      	adds	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	23fb      	movs	r3, #251	; 0xfb
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	2218      	movs	r2, #24
 8008ee2:	189b      	adds	r3, r3, r2
 8008ee4:	19db      	adds	r3, r3, r7
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	21f3      	movs	r1, #243	; 0xf3
 8008eec:	0049      	lsls	r1, r1, #1
 8008eee:	2218      	movs	r2, #24
 8008ef0:	188a      	adds	r2, r1, r2
 8008ef2:	19d2      	adds	r2, r2, r7
 8008ef4:	8812      	ldrh	r2, [r2, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d8b8      	bhi.n	8008e6c <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8008efa:	23f8      	movs	r3, #248	; 0xf8
 8008efc:	33ff      	adds	r3, #255	; 0xff
 8008efe:	2218      	movs	r2, #24
 8008f00:	189b      	adds	r3, r3, r2
 8008f02:	19db      	adds	r3, r3, r7
 8008f04:	2201      	movs	r2, #1
 8008f06:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008f08:	2318      	movs	r3, #24
 8008f0a:	18cb      	adds	r3, r1, r3
 8008f0c:	19db      	adds	r3, r3, r7
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	69fa      	ldr	r2, [r7, #28]
 8008f12:	18d3      	adds	r3, r2, r3
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008f18:	4b1e      	ldr	r3, [pc, #120]	; (8008f94 <astronode_send_cmd_rr+0x33c>)
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f7fa f8d6 	bl	80030cc <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008f20:	2358      	movs	r3, #88	; 0x58
 8008f22:	2218      	movs	r2, #24
 8008f24:	189b      	adds	r3, r3, r2
 8008f26:	19db      	adds	r3, r3, r7
 8008f28:	1d5a      	adds	r2, r3, #5
 8008f2a:	491b      	ldr	r1, [pc, #108]	; (8008f98 <astronode_send_cmd_rr+0x340>)
 8008f2c:	24f4      	movs	r4, #244	; 0xf4
 8008f2e:	0064      	lsls	r4, r4, #1
 8008f30:	2318      	movs	r3, #24
 8008f32:	18e3      	adds	r3, r4, r3
 8008f34:	19db      	adds	r3, r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f003 f94d 	bl	800c1d8 <sprintf>
            send_debug_logs(command_content);
 8008f3e:	2318      	movs	r3, #24
 8008f40:	18e3      	adds	r3, r4, r3
 8008f42:	19db      	adds	r3, r3, r7
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7fa f8c0 	bl	80030cc <send_debug_logs>
 8008f4c:	46b5      	mov	sp, r6
 8008f4e:	e005      	b.n	8008f5c <astronode_send_cmd_rr+0x304>
                return result ;
 8008f50:	46b5      	mov	sp, r6
 8008f52:	e009      	b.n	8008f68 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008f54:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <astronode_send_cmd_rr+0x344>)
 8008f56:	0018      	movs	r0, r3
 8008f58:	f7fa f8b8 	bl	80030cc <send_debug_logs>
        }
    }
    return result ;
 8008f5c:	23f8      	movs	r3, #248	; 0xf8
 8008f5e:	33ff      	adds	r3, #255	; 0xff
 8008f60:	2218      	movs	r2, #24
 8008f62:	189b      	adds	r3, r3, r2
 8008f64:	19db      	adds	r3, r3, r7
 8008f66:	781b      	ldrb	r3, [r3, #0]
}
 8008f68:	0018      	movs	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	2385      	movs	r3, #133	; 0x85
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	449d      	add	sp, r3
 8008f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f74:	fffffdec 	.word	0xfffffdec
 8008f78:	fffffe60 	.word	0xfffffe60
 8008f7c:	08013ea8 	.word	0x08013ea8
 8008f80:	08013ec4 	.word	0x08013ec4
 8008f84:	08013f14 	.word	0x08013f14
 8008f88:	08013538 	.word	0x08013538
 8008f8c:	08014a80 	.word	0x08014a80
 8008f90:	08013f28 	.word	0x08013f28
 8008f94:	08013f54 	.word	0x08013f54
 8008f98:	08013f6c 	.word	0x08013f6c
 8008f9c:	08013f70 	.word	0x08013f70

08008fa0 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008fa4:	4b02      	ldr	r3, [pc, #8]	; (8008fb0 <is_sak_available+0x10>)
 8008fa6:	781b      	ldrb	r3, [r3, #0]
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	20000b0c 	.word	0x20000b0c

08008fb4 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <is_astronode_reset+0x10>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
}
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	20000b0d 	.word	0x20000b0d

08008fc8 <is_command_available>:

bool is_command_available()
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <is_command_available+0x10>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
}
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	20000b0e 	.word	0x20000b0e

08008fdc <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	0002      	movs	r2, r0
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	1dfb      	adds	r3, r7, #7
 8008fe8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008fea:	1dfb      	adds	r3, r7, #7
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b2f      	cmp	r3, #47	; 0x2f
 8008ff0:	d90b      	bls.n	800900a <ascii_to_value+0x2e>
 8008ff2:	1dfb      	adds	r3, r7, #7
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b39      	cmp	r3, #57	; 0x39
 8008ff8:	d807      	bhi.n	800900a <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008ffa:	1dfb      	adds	r3, r7, #7
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	b2da      	uxtb	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	701a      	strb	r2, [r3, #0]
        return true;
 8009006:	2301      	movs	r3, #1
 8009008:	e010      	b.n	800902c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 800900a:	1dfb      	adds	r3, r7, #7
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d90b      	bls.n	800902a <ascii_to_value+0x4e>
 8009012:	1dfb      	adds	r3, r7, #7
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b46      	cmp	r3, #70	; 0x46
 8009018:	d807      	bhi.n	800902a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 800901a:	1dfb      	adds	r3, r7, #7
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	3b37      	subs	r3, #55	; 0x37
 8009020:	b2da      	uxtb	r2, r3
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	701a      	strb	r2, [r3, #0]
        return true;
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800902a:	2300      	movs	r3, #0
    }
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b002      	add	sp, #8
 8009032:	bd80      	pop	{r7, pc}

08009034 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800903e:	250e      	movs	r5, #14
 8009040:	197b      	adds	r3, r7, r5
 8009042:	2200      	movs	r2, #0
 8009044:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009046:	197b      	adds	r3, r7, r5
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	197a      	adds	r2, r7, r5
 800904c:	1c59      	adds	r1, r3, #1
 800904e:	8011      	strh	r1, [r2, #0]
 8009050:	001a      	movs	r2, r3
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	189b      	adds	r3, r3, r2
 8009056:	2202      	movs	r2, #2
 8009058:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	260a      	movs	r6, #10
 800905e:	19bc      	adds	r4, r7, r6
 8009060:	4a44      	ldr	r2, [pc, #272]	; (8009174 <astronode_create_request_transport+0x140>)
 8009062:	2101      	movs	r1, #1
 8009064:	0018      	movs	r0, r3
 8009066:	f000 fa7d 	bl	8009564 <calculate_crc>
 800906a:	0003      	movs	r3, r0
 800906c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	1c58      	adds	r0, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	22c4      	movs	r2, #196	; 0xc4
 8009076:	5a99      	ldrh	r1, [r3, r2]
 8009078:	19bc      	adds	r4, r7, r6
 800907a:	19bb      	adds	r3, r7, r6
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	001a      	movs	r2, r3
 8009080:	f000 fa70 	bl	8009564 <calculate_crc>
 8009084:	0003      	movs	r3, r0
 8009086:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009088:	19bb      	adds	r3, r7, r6
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	b21a      	sxth	r2, r3
 8009090:	0031      	movs	r1, r6
 8009092:	19bb      	adds	r3, r7, r6
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	b29b      	uxth	r3, r3
 800909a:	b21b      	sxth	r3, r3
 800909c:	4313      	orrs	r3, r2
 800909e:	b21a      	sxth	r2, r3
 80090a0:	187b      	adds	r3, r7, r1
 80090a2:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7818      	ldrb	r0, [r3, #0]
 80090a8:	197b      	adds	r3, r7, r5
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	18d3      	adds	r3, r2, r3
 80090b0:	0019      	movs	r1, r3
 80090b2:	f000 fbeb 	bl	800988c <uint8_to_ascii_buffer>
    index += 2;
 80090b6:	197b      	adds	r3, r7, r5
 80090b8:	197a      	adds	r2, r7, r5
 80090ba:	8812      	ldrh	r2, [r2, #0]
 80090bc:	3202      	adds	r2, #2
 80090be:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80090c0:	230c      	movs	r3, #12
 80090c2:	18fb      	adds	r3, r7, r3
 80090c4:	2200      	movs	r2, #0
 80090c6:	801a      	strh	r2, [r3, #0]
 80090c8:	e017      	b.n	80090fa <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80090ca:	240c      	movs	r4, #12
 80090cc:	193b      	adds	r3, r7, r4
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	18d3      	adds	r3, r2, r3
 80090d4:	7858      	ldrb	r0, [r3, #1]
 80090d6:	250e      	movs	r5, #14
 80090d8:	197b      	adds	r3, r7, r5
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	18d3      	adds	r3, r2, r3
 80090e0:	0019      	movs	r1, r3
 80090e2:	f000 fbd3 	bl	800988c <uint8_to_ascii_buffer>
        index += 2;
 80090e6:	197b      	adds	r3, r7, r5
 80090e8:	197a      	adds	r2, r7, r5
 80090ea:	8812      	ldrh	r2, [r2, #0]
 80090ec:	3202      	adds	r2, #2
 80090ee:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80090f0:	193b      	adds	r3, r7, r4
 80090f2:	881a      	ldrh	r2, [r3, #0]
 80090f4:	193b      	adds	r3, r7, r4
 80090f6:	3201      	adds	r2, #1
 80090f8:	801a      	strh	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	22c4      	movs	r2, #196	; 0xc4
 80090fe:	5a9b      	ldrh	r3, [r3, r2]
 8009100:	220c      	movs	r2, #12
 8009102:	18ba      	adds	r2, r7, r2
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d3df      	bcc.n	80090ca <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 800910a:	250a      	movs	r5, #10
 800910c:	197b      	adds	r3, r7, r5
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	b29b      	uxth	r3, r3
 8009114:	b2d8      	uxtb	r0, r3
 8009116:	240e      	movs	r4, #14
 8009118:	193b      	adds	r3, r7, r4
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	18d3      	adds	r3, r2, r3
 8009120:	0019      	movs	r1, r3
 8009122:	f000 fbb3 	bl	800988c <uint8_to_ascii_buffer>
    index += 2;
 8009126:	0021      	movs	r1, r4
 8009128:	187b      	adds	r3, r7, r1
 800912a:	187a      	adds	r2, r7, r1
 800912c:	8812      	ldrh	r2, [r2, #0]
 800912e:	3202      	adds	r2, #2
 8009130:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8009132:	197b      	adds	r3, r7, r5
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b2d8      	uxtb	r0, r3
 8009138:	000c      	movs	r4, r1
 800913a:	187b      	adds	r3, r7, r1
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	18d3      	adds	r3, r2, r3
 8009142:	0019      	movs	r1, r3
 8009144:	f000 fba2 	bl	800988c <uint8_to_ascii_buffer>
    index += 2;
 8009148:	0020      	movs	r0, r4
 800914a:	183b      	adds	r3, r7, r0
 800914c:	183a      	adds	r2, r7, r0
 800914e:	8812      	ldrh	r2, [r2, #0]
 8009150:	3202      	adds	r2, #2
 8009152:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8009154:	183b      	adds	r3, r7, r0
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	183a      	adds	r2, r7, r0
 800915a:	1c59      	adds	r1, r3, #1
 800915c:	8011      	strh	r1, [r2, #0]
 800915e:	001a      	movs	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	189b      	adds	r3, r3, r2
 8009164:	2203      	movs	r2, #3
 8009166:	701a      	strb	r2, [r3, #0]

    return index;
 8009168:	183b      	adds	r3, r7, r0
 800916a:	881b      	ldrh	r3, [r3, #0]
}
 800916c:	0018      	movs	r0, r3
 800916e:	46bd      	mov	sp, r7
 8009170:	b005      	add	sp, #20
 8009172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009174:	0000ffff 	.word	0x0000ffff

08009178 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917a:	b089      	sub	sp, #36	; 0x24
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	230a      	movs	r3, #10
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	1c0a      	adds	r2, r1, #0
 8009188:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d005      	beq.n	800919e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009192:	4bbd      	ldr	r3, [pc, #756]	; (8009488 <astronode_decode_answer_transport+0x310>)
 8009194:	0018      	movs	r0, r3
 8009196:	f7f9 ff99 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 800919a:	2300      	movs	r3, #0
 800919c:	e170      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800919e:	210a      	movs	r1, #10
 80091a0:	187b      	adds	r3, r7, r1
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	2201      	movs	r2, #1
 80091a6:	4013      	ands	r3, r2
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <astronode_decode_answer_transport+0x3e>
 80091ae:	187b      	adds	r3, r7, r1
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	d805      	bhi.n	80091c2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 80091b6:	4bb5      	ldr	r3, [pc, #724]	; (800948c <astronode_decode_answer_transport+0x314>)
 80091b8:	0018      	movs	r0, r3
 80091ba:	f7f9 ff87 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 80091be:	2300      	movs	r3, #0
 80091c0:	e15e      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80091c2:	230a      	movs	r3, #10
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	3b08      	subs	r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da00      	bge.n	80091d0 <astronode_decode_answer_transport+0x58>
 80091ce:	3301      	adds	r3, #1
 80091d0:	105b      	asrs	r3, r3, #1
 80091d2:	b299      	uxth	r1, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	22c4      	movs	r2, #196	; 0xc4
 80091d8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80091da:	230a      	movs	r3, #10
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d005      	beq.n	80091f8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80091ec:	4ba8      	ldr	r3, [pc, #672]	; (8009490 <astronode_decode_answer_transport+0x318>)
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f9 ff6c 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e143      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80091f8:	2117      	movs	r1, #23
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8009200:	2416      	movs	r4, #22
 8009202:	193b      	adds	r3, r7, r4
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	187a      	adds	r2, r7, r1
 8009210:	0011      	movs	r1, r2
 8009212:	0018      	movs	r0, r3
 8009214:	f7ff fee2 	bl	8008fdc <ascii_to_value>
 8009218:	0003      	movs	r3, r0
 800921a:	001a      	movs	r2, r3
 800921c:	2301      	movs	r3, #1
 800921e:	4053      	eors	r3, r2
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10e      	bne.n	8009244 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3302      	adds	r3, #2
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	193a      	adds	r2, r7, r4
 800922e:	0011      	movs	r1, r2
 8009230:	0018      	movs	r0, r3
 8009232:	f7ff fed3 	bl	8008fdc <ascii_to_value>
 8009236:	0003      	movs	r3, r0
 8009238:	001a      	movs	r2, r3
 800923a:	2301      	movs	r3, #1
 800923c:	4053      	eors	r3, r2
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009244:	4b93      	ldr	r3, [pc, #588]	; (8009494 <astronode_decode_answer_transport+0x31c>)
 8009246:	0018      	movs	r0, r3
 8009248:	f7f9 ff40 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 800924c:	2300      	movs	r3, #0
 800924e:	e117      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8009250:	2317      	movs	r3, #23
 8009252:	18fb      	adds	r3, r7, r3
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	b2da      	uxtb	r2, r3
 800925a:	2316      	movs	r3, #22
 800925c:	18fb      	adds	r3, r7, r3
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	18d3      	adds	r3, r2, r3
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009268:	231e      	movs	r3, #30
 800926a:	18fb      	adds	r3, r7, r3
 800926c:	2203      	movs	r2, #3
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	231c      	movs	r3, #28
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	2200      	movs	r2, #0
 8009276:	801a      	strh	r2, [r3, #0]
 8009278:	e045      	b.n	8009306 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800927a:	241e      	movs	r4, #30
 800927c:	193b      	adds	r3, r7, r4
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	18d3      	adds	r3, r2, r3
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2217      	movs	r2, #23
 8009288:	18ba      	adds	r2, r7, r2
 800928a:	0011      	movs	r1, r2
 800928c:	0018      	movs	r0, r3
 800928e:	f7ff fea5 	bl	8008fdc <ascii_to_value>
 8009292:	0003      	movs	r3, r0
 8009294:	001a      	movs	r2, r3
 8009296:	2301      	movs	r3, #1
 8009298:	4053      	eors	r3, r2
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d112      	bne.n	80092c6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80092a0:	193b      	adds	r3, r7, r4
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	18d3      	adds	r3, r2, r3
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2216      	movs	r2, #22
 80092ae:	18ba      	adds	r2, r7, r2
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f7ff fe92 	bl	8008fdc <ascii_to_value>
 80092b8:	0003      	movs	r3, r0
 80092ba:	001a      	movs	r2, r3
 80092bc:	2301      	movs	r3, #1
 80092be:	4053      	eors	r3, r2
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d005      	beq.n	80092d2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80092c6:	4b73      	ldr	r3, [pc, #460]	; (8009494 <astronode_decode_answer_transport+0x31c>)
 80092c8:	0018      	movs	r0, r3
 80092ca:	f7f9 feff 	bl	80030cc <send_debug_logs>
            return RS_FAILURE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e0d6      	b.n	8009480 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80092d2:	2317      	movs	r3, #23
 80092d4:	18fb      	adds	r3, r7, r3
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	b2d9      	uxtb	r1, r3
 80092dc:	2316      	movs	r3, #22
 80092de:	18fb      	adds	r3, r7, r3
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	201c      	movs	r0, #28
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	1838      	adds	r0, r7, r0
 80092ea:	1c5c      	adds	r4, r3, #1
 80092ec:	8004      	strh	r4, [r0, #0]
 80092ee:	0018      	movs	r0, r3
 80092f0:	188b      	adds	r3, r1, r2
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	181b      	adds	r3, r3, r0
 80092f8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80092fa:	221e      	movs	r2, #30
 80092fc:	18bb      	adds	r3, r7, r2
 80092fe:	18ba      	adds	r2, r7, r2
 8009300:	8812      	ldrh	r2, [r2, #0]
 8009302:	3202      	adds	r2, #2
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	231e      	movs	r3, #30
 8009308:	18fb      	adds	r3, r7, r3
 800930a:	881a      	ldrh	r2, [r3, #0]
 800930c:	260a      	movs	r6, #10
 800930e:	19bb      	adds	r3, r7, r6
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	3b05      	subs	r3, #5
 8009314:	429a      	cmp	r2, r3
 8009316:	dbb0      	blt.n	800927a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	251a      	movs	r5, #26
 800931c:	197c      	adds	r4, r7, r5
 800931e:	4a5e      	ldr	r2, [pc, #376]	; (8009498 <astronode_decode_answer_transport+0x320>)
 8009320:	2101      	movs	r1, #1
 8009322:	0018      	movs	r0, r3
 8009324:	f000 f91e 	bl	8009564 <calculate_crc>
 8009328:	0003      	movs	r3, r0
 800932a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	1c58      	adds	r0, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	22c4      	movs	r2, #196	; 0xc4
 8009334:	5a99      	ldrh	r1, [r3, r2]
 8009336:	197c      	adds	r4, r7, r5
 8009338:	197b      	adds	r3, r7, r5
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	001a      	movs	r2, r3
 800933e:	f000 f911 	bl	8009564 <calculate_crc>
 8009342:	0003      	movs	r3, r0
 8009344:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8009346:	197b      	adds	r3, r7, r5
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	021b      	lsls	r3, r3, #8
 800934c:	b21a      	sxth	r2, r3
 800934e:	0029      	movs	r1, r5
 8009350:	197b      	adds	r3, r7, r5
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	0a1b      	lsrs	r3, r3, #8
 8009356:	b29b      	uxth	r3, r3
 8009358:	b21b      	sxth	r3, r3
 800935a:	4313      	orrs	r3, r2
 800935c:	b21a      	sxth	r2, r3
 800935e:	187b      	adds	r3, r7, r1
 8009360:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8009362:	19bb      	adds	r3, r7, r6
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	3b05      	subs	r3, #5
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	18d3      	adds	r3, r2, r3
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2217      	movs	r2, #23
 8009370:	18ba      	adds	r2, r7, r2
 8009372:	0011      	movs	r1, r2
 8009374:	0018      	movs	r0, r3
 8009376:	f7ff fe31 	bl	8008fdc <ascii_to_value>
 800937a:	0003      	movs	r3, r0
 800937c:	001a      	movs	r2, r3
 800937e:	2301      	movs	r3, #1
 8009380:	4053      	eors	r3, r2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d112      	bne.n	80093ae <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8009388:	19bb      	adds	r3, r7, r6
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	3b04      	subs	r3, #4
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2216      	movs	r2, #22
 8009396:	18ba      	adds	r2, r7, r2
 8009398:	0011      	movs	r1, r2
 800939a:	0018      	movs	r0, r3
 800939c:	f7ff fe1e 	bl	8008fdc <ascii_to_value>
 80093a0:	0003      	movs	r3, r0
 80093a2:	001a      	movs	r2, r3
 80093a4:	2301      	movs	r3, #1
 80093a6:	4053      	eors	r3, r2
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d005      	beq.n	80093ba <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80093ae:	4b39      	ldr	r3, [pc, #228]	; (8009494 <astronode_decode_answer_transport+0x31c>)
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7f9 fe8b 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	e062      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 80093ba:	2017      	movs	r0, #23
 80093bc:	183b      	adds	r3, r7, r0
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	031b      	lsls	r3, r3, #12
 80093c4:	b299      	uxth	r1, r3
 80093c6:	2416      	movs	r4, #22
 80093c8:	193b      	adds	r3, r7, r4
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	2318      	movs	r3, #24
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	188a      	adds	r2, r1, r2
 80093d8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 80093da:	250a      	movs	r5, #10
 80093dc:	197b      	adds	r3, r7, r5
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	3b03      	subs	r3, #3
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	18d3      	adds	r3, r2, r3
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	183a      	adds	r2, r7, r0
 80093ea:	0011      	movs	r1, r2
 80093ec:	0018      	movs	r0, r3
 80093ee:	f7ff fdf5 	bl	8008fdc <ascii_to_value>
 80093f2:	0003      	movs	r3, r0
 80093f4:	001a      	movs	r2, r3
 80093f6:	2301      	movs	r3, #1
 80093f8:	4053      	eors	r3, r2
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d111      	bne.n	8009424 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8009400:	197b      	adds	r3, r7, r5
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	3b02      	subs	r3, #2
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	18d3      	adds	r3, r2, r3
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	193a      	adds	r2, r7, r4
 800940e:	0011      	movs	r1, r2
 8009410:	0018      	movs	r0, r3
 8009412:	f7ff fde3 	bl	8008fdc <ascii_to_value>
 8009416:	0003      	movs	r3, r0
 8009418:	001a      	movs	r2, r3
 800941a:	2301      	movs	r3, #1
 800941c:	4053      	eors	r3, r2
 800941e:	b2db      	uxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009424:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <astronode_decode_answer_transport+0x31c>)
 8009426:	0018      	movs	r0, r3
 8009428:	f7f9 fe50 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 800942c:	2300      	movs	r3, #0
 800942e:	e027      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8009430:	2317      	movs	r3, #23
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	b29b      	uxth	r3, r3
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	b29a      	uxth	r2, r3
 800943c:	2316      	movs	r3, #22
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	18d3      	adds	r3, r2, r3
 8009446:	b299      	uxth	r1, r3
 8009448:	2018      	movs	r0, #24
 800944a:	183b      	adds	r3, r7, r0
 800944c:	183a      	adds	r2, r7, r0
 800944e:	8812      	ldrh	r2, [r2, #0]
 8009450:	188a      	adds	r2, r1, r2
 8009452:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8009454:	183a      	adds	r2, r7, r0
 8009456:	231a      	movs	r3, #26
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	8812      	ldrh	r2, [r2, #0]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d005      	beq.n	800946e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009462:	4b0e      	ldr	r3, [pc, #56]	; (800949c <astronode_decode_answer_transport+0x324>)
 8009464:	0018      	movs	r0, r3
 8009466:	f7f9 fe31 	bl	80030cc <send_debug_logs>
        return RS_FAILURE;
 800946a:	2300      	movs	r3, #0
 800946c:	e008      	b.n	8009480 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	2bff      	cmp	r3, #255	; 0xff
 8009474:	d103      	bne.n	800947e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	0018      	movs	r0, r3
 800947a:	f000 f8c3 	bl	8009604 <check_for_error>
    }

    return RS_SUCCESS;
 800947e:	2301      	movs	r3, #1
}
 8009480:	0018      	movs	r0, r3
 8009482:	46bd      	mov	sp, r7
 8009484:	b009      	add	sp, #36	; 0x24
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	08014000 	.word	0x08014000
 800948c:	08014050 	.word	0x08014050
 8009490:	080140a0 	.word	0x080140a0
 8009494:	080140f0 	.word	0x080140f0
 8009498:	0000ffff 	.word	0x0000ffff
 800949c:	0801413c 	.word	0x0801413c

080094a0 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80094a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a2:	4c2b      	ldr	r4, [pc, #172]	; (8009550 <astronode_transport_send_receive+0xb0>)
 80094a4:	44a5      	add	sp, r4
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80094ac:	4b29      	ldr	r3, [pc, #164]	; (8009554 <astronode_transport_send_receive+0xb4>)
 80094ae:	25ca      	movs	r5, #202	; 0xca
 80094b0:	00ad      	lsls	r5, r5, #2
 80094b2:	195b      	adds	r3, r3, r5
 80094b4:	19db      	adds	r3, r3, r7
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	3304      	adds	r3, #4
 80094bc:	22c4      	movs	r2, #196	; 0xc4
 80094be:	0052      	lsls	r2, r2, #1
 80094c0:	2100      	movs	r1, #0
 80094c2:	0018      	movs	r0, r3
 80094c4:	f002 ff1e 	bl	800c304 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 80094c8:	4b23      	ldr	r3, [pc, #140]	; (8009558 <astronode_transport_send_receive+0xb8>)
 80094ca:	195b      	adds	r3, r3, r5
 80094cc:	19db      	adds	r3, r3, r7
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	3304      	adds	r3, #4
 80094d4:	22c4      	movs	r2, #196	; 0xc4
 80094d6:	0052      	lsls	r2, r2, #1
 80094d8:	2100      	movs	r1, #0
 80094da:	0018      	movs	r0, r3
 80094dc:	f002 ff12 	bl	800c304 <memset>
    uint16_t answer_length =  0;
 80094e0:	4b1e      	ldr	r3, [pc, #120]	; (800955c <astronode_transport_send_receive+0xbc>)
 80094e2:	195b      	adds	r3, r3, r5
 80094e4:	19db      	adds	r3, r3, r7
 80094e6:	2200      	movs	r2, #0
 80094e8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 80094ea:	4e1d      	ldr	r6, [pc, #116]	; (8009560 <astronode_transport_send_receive+0xc0>)
 80094ec:	19bc      	adds	r4, r7, r6
 80094ee:	23cc      	movs	r3, #204	; 0xcc
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	18fa      	adds	r2, r7, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	0011      	movs	r1, r2
 80094f8:	0018      	movs	r0, r3
 80094fa:	f7ff fd9b 	bl	8009034 <astronode_create_request_transport>
 80094fe:	0003      	movs	r3, r0
 8009500:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8009502:	19bb      	adds	r3, r7, r6
 8009504:	881a      	ldrh	r2, [r3, #0]
 8009506:	23cc      	movs	r3, #204	; 0xcc
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	18fb      	adds	r3, r7, r3
 800950c:	0011      	movs	r1, r2
 800950e:	0018      	movs	r0, r3
 8009510:	f7fa fa26 	bl	8003960 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8009514:	230a      	movs	r3, #10
 8009516:	18fa      	adds	r2, r7, r3
 8009518:	240c      	movs	r4, #12
 800951a:	193b      	adds	r3, r7, r4
 800951c:	0011      	movs	r1, r2
 800951e:	0018      	movs	r0, r3
 8009520:	f000 f92c 	bl	800977c <receive_astronode_answer>
 8009524:	0003      	movs	r3, r0
 8009526:	2b01      	cmp	r3, #1
 8009528:	d10a      	bne.n	8009540 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <astronode_transport_send_receive+0xbc>)
 800952c:	195b      	adds	r3, r3, r5
 800952e:	19db      	adds	r3, r3, r7
 8009530:	8819      	ldrh	r1, [r3, #0]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	193b      	adds	r3, r7, r4
 8009536:	0018      	movs	r0, r3
 8009538:	f7ff fe1e 	bl	8009178 <astronode_decode_answer_transport>
 800953c:	0003      	movs	r3, r0
 800953e:	e000      	b.n	8009542 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8009540:	2300      	movs	r3, #0
    }
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	23cb      	movs	r3, #203	; 0xcb
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	449d      	add	sp, r3
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	fffffcd4 	.word	0xfffffcd4
 8009554:	fffffe70 	.word	0xfffffe70
 8009558:	fffffce4 	.word	0xfffffce4
 800955c:	fffffce2 	.word	0xfffffce2
 8009560:	00000326 	.word	0x00000326

08009564 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009564:	b590      	push	{r4, r7, lr}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	0008      	movs	r0, r1
 800956e:	0011      	movs	r1, r2
 8009570:	1cbb      	adds	r3, r7, #2
 8009572:	1c02      	adds	r2, r0, #0
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	003b      	movs	r3, r7
 8009578:	1c0a      	adds	r2, r1, #0
 800957a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800957c:	230e      	movs	r3, #14
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	003a      	movs	r2, r7
 8009582:	8812      	ldrh	r2, [r2, #0]
 8009584:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8009586:	e02e      	b.n	80095e6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009588:	240e      	movs	r4, #14
 800958a:	193b      	adds	r3, r7, r4
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b299      	uxth	r1, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	b29a      	uxth	r2, r3
 800959c:	200c      	movs	r0, #12
 800959e:	183b      	adds	r3, r7, r0
 80095a0:	404a      	eors	r2, r1
 80095a2:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 80095a4:	183b      	adds	r3, r7, r0
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	091b      	lsrs	r3, r3, #4
 80095aa:	b299      	uxth	r1, r3
 80095ac:	183b      	adds	r3, r7, r0
 80095ae:	183a      	adds	r2, r7, r0
 80095b0:	8812      	ldrh	r2, [r2, #0]
 80095b2:	404a      	eors	r2, r1
 80095b4:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 80095b6:	0021      	movs	r1, r4
 80095b8:	187b      	adds	r3, r7, r1
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	b21a      	sxth	r2, r3
 80095c0:	183b      	adds	r3, r7, r0
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	031b      	lsls	r3, r3, #12
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	4053      	eors	r3, r2
 80095ca:	b21a      	sxth	r2, r3
 80095cc:	183b      	adds	r3, r7, r0
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	015b      	lsls	r3, r3, #5
 80095d2:	b21b      	sxth	r3, r3
 80095d4:	4053      	eors	r3, r2
 80095d6:	b21a      	sxth	r2, r3
 80095d8:	183b      	adds	r3, r7, r0
 80095da:	2000      	movs	r0, #0
 80095dc:	5e1b      	ldrsh	r3, [r3, r0]
 80095de:	4053      	eors	r3, r2
 80095e0:	b21a      	sxth	r2, r3
 80095e2:	187b      	adds	r3, r7, r1
 80095e4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 80095e6:	1cbb      	adds	r3, r7, #2
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	1cba      	adds	r2, r7, #2
 80095ec:	1e59      	subs	r1, r3, #1
 80095ee:	8011      	strh	r1, [r2, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1c9      	bne.n	8009588 <calculate_crc+0x24>
    }
    return crc;
 80095f4:	230e      	movs	r3, #14
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	881b      	ldrh	r3, [r3, #0]
}
 80095fa:	0018      	movs	r0, r3
 80095fc:	46bd      	mov	sp, r7
 80095fe:	b005      	add	sp, #20
 8009600:	bd90      	pop	{r4, r7, pc}
	...

08009604 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	b299      	uxth	r1, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	789b      	ldrb	r3, [r3, #2]
 8009616:	b29b      	uxth	r3, r3
 8009618:	021b      	lsls	r3, r3, #8
 800961a:	b29a      	uxth	r2, r3
 800961c:	200e      	movs	r0, #14
 800961e:	183b      	adds	r3, r7, r0
 8009620:	188a      	adds	r2, r1, r2
 8009622:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8009624:	183b      	adds	r3, r7, r0
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	4a40      	ldr	r2, [pc, #256]	; (800972c <check_for_error+0x128>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d100      	bne.n	8009630 <check_for_error+0x2c>
 800962e:	e06f      	b.n	8009710 <check_for_error+0x10c>
 8009630:	4a3e      	ldr	r2, [pc, #248]	; (800972c <check_for_error+0x128>)
 8009632:	4293      	cmp	r3, r2
 8009634:	dd00      	ble.n	8009638 <check_for_error+0x34>
 8009636:	e070      	b.n	800971a <check_for_error+0x116>
 8009638:	4a3d      	ldr	r2, [pc, #244]	; (8009730 <check_for_error+0x12c>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d100      	bne.n	8009640 <check_for_error+0x3c>
 800963e:	e062      	b.n	8009706 <check_for_error+0x102>
 8009640:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <check_for_error+0x12c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	dd00      	ble.n	8009648 <check_for_error+0x44>
 8009646:	e068      	b.n	800971a <check_for_error+0x116>
 8009648:	4a3a      	ldr	r2, [pc, #232]	; (8009734 <check_for_error+0x130>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d056      	beq.n	80096fc <check_for_error+0xf8>
 800964e:	4a39      	ldr	r2, [pc, #228]	; (8009734 <check_for_error+0x130>)
 8009650:	4293      	cmp	r3, r2
 8009652:	dd00      	ble.n	8009656 <check_for_error+0x52>
 8009654:	e061      	b.n	800971a <check_for_error+0x116>
 8009656:	4a38      	ldr	r2, [pc, #224]	; (8009738 <check_for_error+0x134>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d04a      	beq.n	80096f2 <check_for_error+0xee>
 800965c:	4a36      	ldr	r2, [pc, #216]	; (8009738 <check_for_error+0x134>)
 800965e:	4293      	cmp	r3, r2
 8009660:	dc5b      	bgt.n	800971a <check_for_error+0x116>
 8009662:	4a36      	ldr	r2, [pc, #216]	; (800973c <check_for_error+0x138>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d03f      	beq.n	80096e8 <check_for_error+0xe4>
 8009668:	4a34      	ldr	r2, [pc, #208]	; (800973c <check_for_error+0x138>)
 800966a:	4293      	cmp	r3, r2
 800966c:	dc55      	bgt.n	800971a <check_for_error+0x116>
 800966e:	4a34      	ldr	r2, [pc, #208]	; (8009740 <check_for_error+0x13c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d034      	beq.n	80096de <check_for_error+0xda>
 8009674:	4a32      	ldr	r2, [pc, #200]	; (8009740 <check_for_error+0x13c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	dc4f      	bgt.n	800971a <check_for_error+0x116>
 800967a:	4a32      	ldr	r2, [pc, #200]	; (8009744 <check_for_error+0x140>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d029      	beq.n	80096d4 <check_for_error+0xd0>
 8009680:	4a30      	ldr	r2, [pc, #192]	; (8009744 <check_for_error+0x140>)
 8009682:	4293      	cmp	r3, r2
 8009684:	dc49      	bgt.n	800971a <check_for_error+0x116>
 8009686:	4a30      	ldr	r2, [pc, #192]	; (8009748 <check_for_error+0x144>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d01e      	beq.n	80096ca <check_for_error+0xc6>
 800968c:	4a2e      	ldr	r2, [pc, #184]	; (8009748 <check_for_error+0x144>)
 800968e:	4293      	cmp	r3, r2
 8009690:	dc43      	bgt.n	800971a <check_for_error+0x116>
 8009692:	2222      	movs	r2, #34	; 0x22
 8009694:	32ff      	adds	r2, #255	; 0xff
 8009696:	4293      	cmp	r3, r2
 8009698:	d012      	beq.n	80096c0 <check_for_error+0xbc>
 800969a:	2291      	movs	r2, #145	; 0x91
 800969c:	0052      	lsls	r2, r2, #1
 800969e:	4293      	cmp	r3, r2
 80096a0:	da3b      	bge.n	800971a <check_for_error+0x116>
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d002      	beq.n	80096ac <check_for_error+0xa8>
 80096a6:	2b11      	cmp	r3, #17
 80096a8:	d005      	beq.n	80096b6 <check_for_error+0xb2>
 80096aa:	e036      	b.n	800971a <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 80096ac:	4b27      	ldr	r3, [pc, #156]	; (800974c <check_for_error+0x148>)
 80096ae:	0018      	movs	r0, r3
 80096b0:	f7f9 fd0c 	bl	80030cc <send_debug_logs>
            break;
 80096b4:	e036      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 80096b6:	4b26      	ldr	r3, [pc, #152]	; (8009750 <check_for_error+0x14c>)
 80096b8:	0018      	movs	r0, r3
 80096ba:	f7f9 fd07 	bl	80030cc <send_debug_logs>
            break;
 80096be:	e031      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 80096c0:	4b24      	ldr	r3, [pc, #144]	; (8009754 <check_for_error+0x150>)
 80096c2:	0018      	movs	r0, r3
 80096c4:	f7f9 fd02 	bl	80030cc <send_debug_logs>
            break;
 80096c8:	e02c      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <check_for_error+0x154>)
 80096cc:	0018      	movs	r0, r3
 80096ce:	f7f9 fcfd 	bl	80030cc <send_debug_logs>
            break;
 80096d2:	e027      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 80096d4:	4b21      	ldr	r3, [pc, #132]	; (800975c <check_for_error+0x158>)
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7f9 fcf8 	bl	80030cc <send_debug_logs>
            break;
 80096dc:	e022      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 80096de:	4b20      	ldr	r3, [pc, #128]	; (8009760 <check_for_error+0x15c>)
 80096e0:	0018      	movs	r0, r3
 80096e2:	f7f9 fcf3 	bl	80030cc <send_debug_logs>
            break;
 80096e6:	e01d      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 80096e8:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <check_for_error+0x160>)
 80096ea:	0018      	movs	r0, r3
 80096ec:	f7f9 fcee 	bl	80030cc <send_debug_logs>
            break;
 80096f0:	e018      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <check_for_error+0x164>)
 80096f4:	0018      	movs	r0, r3
 80096f6:	f7f9 fce9 	bl	80030cc <send_debug_logs>
            break;
 80096fa:	e013      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80096fc:	4b1b      	ldr	r3, [pc, #108]	; (800976c <check_for_error+0x168>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f7f9 fce4 	bl	80030cc <send_debug_logs>
            break;
 8009704:	e00e      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8009706:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <check_for_error+0x16c>)
 8009708:	0018      	movs	r0, r3
 800970a:	f7f9 fcdf 	bl	80030cc <send_debug_logs>
            break;
 800970e:	e009      	b.n	8009724 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8009710:	4b18      	ldr	r3, [pc, #96]	; (8009774 <check_for_error+0x170>)
 8009712:	0018      	movs	r0, r3
 8009714:	f7f9 fcda 	bl	80030cc <send_debug_logs>
            break;
 8009718:	e004      	b.n	8009724 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800971a:	4b17      	ldr	r3, [pc, #92]	; (8009778 <check_for_error+0x174>)
 800971c:	0018      	movs	r0, r3
 800971e:	f7f9 fcd5 	bl	80030cc <send_debug_logs>
            break;
 8009722:	46c0      	nop			; (mov r8, r8)
    }
}
 8009724:	46c0      	nop			; (mov r8, r8)
 8009726:	46bd      	mov	sp, r7
 8009728:	b004      	add	sp, #16
 800972a:	bd80      	pop	{r7, pc}
 800972c:	00004601 	.word	0x00004601
 8009730:	00004501 	.word	0x00004501
 8009734:	00003501 	.word	0x00003501
 8009738:	00002601 	.word	0x00002601
 800973c:	00002511 	.word	0x00002511
 8009740:	00002501 	.word	0x00002501
 8009744:	00000611 	.word	0x00000611
 8009748:	00000601 	.word	0x00000601
 800974c:	08014180 	.word	0x08014180
 8009750:	080141cc 	.word	0x080141cc
 8009754:	08014230 	.word	0x08014230
 8009758:	08014268 	.word	0x08014268
 800975c:	0801430c 	.word	0x0801430c
 8009760:	08014374 	.word	0x08014374
 8009764:	080143d4 	.word	0x080143d4
 8009768:	08014460 	.word	0x08014460
 800976c:	080144c0 	.word	0x080144c0
 8009770:	0801456c 	.word	0x0801456c
 8009774:	080145b8 	.word	0x080145b8
 8009778:	08014600 	.word	0x08014600

0800977c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800977c:	b5b0      	push	{r4, r5, r7, lr}
 800977e:	b086      	sub	sp, #24
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009786:	230f      	movs	r3, #15
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2200      	movs	r2, #0
 800978c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800978e:	2316      	movs	r3, #22
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2200      	movs	r2, #0
 8009794:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009796:	f7fa f901 	bl	800399c <get_systick>
 800979a:	0003      	movs	r3, r0
 800979c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800979e:	2315      	movs	r3, #21
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 80097a6:	e054      	b.n	8009852 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 80097a8:	4a34      	ldr	r2, [pc, #208]	; (800987c <receive_astronode_answer+0x100>)
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	0011      	movs	r1, r2
 80097ae:	0018      	movs	r0, r3
 80097b0:	f7fa f8fc 	bl	80039ac <is_systick_timeout_over>
 80097b4:	1e03      	subs	r3, r0, #0
 80097b6:	d005      	beq.n	80097c4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 80097b8:	4b31      	ldr	r3, [pc, #196]	; (8009880 <receive_astronode_answer+0x104>)
 80097ba:	0018      	movs	r0, r3
 80097bc:	f7f9 fc86 	bl	80030cc <send_debug_logs>
            return RS_FAILURE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	e057      	b.n	8009874 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 80097c4:	250f      	movs	r5, #15
 80097c6:	197b      	adds	r3, r7, r5
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7fa f905 	bl	80039d8 <is_astronode_character_received>
 80097ce:	0003      	movs	r3, r0
 80097d0:	0019      	movs	r1, r3
 80097d2:	2016      	movs	r0, #22
 80097d4:	183b      	adds	r3, r7, r0
 80097d6:	183a      	adds	r2, r7, r0
 80097d8:	8812      	ldrh	r2, [r2, #0]
 80097da:	801a      	strh	r2, [r3, #0]
 80097dc:	2415      	movs	r4, #21
 80097de:	193b      	adds	r3, r7, r4
 80097e0:	193a      	adds	r2, r7, r4
 80097e2:	7812      	ldrb	r2, [r2, #0]
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d033      	beq.n	8009852 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 80097ea:	197b      	adds	r3, r7, r5
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d105      	bne.n	80097fe <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 80097f2:	193b      	adds	r3, r7, r4
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
                length = 0;
 80097f8:	183b      	adds	r3, r7, r0
 80097fa:	2200      	movs	r2, #0
 80097fc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80097fe:	2116      	movs	r1, #22
 8009800:	187b      	adds	r3, r7, r1
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	18d3      	adds	r3, r2, r3
 8009808:	220f      	movs	r2, #15
 800980a:	18ba      	adds	r2, r7, r2
 800980c:	7812      	ldrb	r2, [r2, #0]
 800980e:	701a      	strb	r2, [r3, #0]
            length++;
 8009810:	187b      	adds	r3, r7, r1
 8009812:	881a      	ldrh	r2, [r3, #0]
 8009814:	187b      	adds	r3, r7, r1
 8009816:	3201      	adds	r2, #1
 8009818:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800981a:	187b      	adds	r3, r7, r1
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	2bb2      	cmp	r3, #178	; 0xb2
 8009820:	d905      	bls.n	800982e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8009822:	4b18      	ldr	r3, [pc, #96]	; (8009884 <receive_astronode_answer+0x108>)
 8009824:	0018      	movs	r0, r3
 8009826:	f7f9 fc51 	bl	80030cc <send_debug_logs>
                return RS_FAILURE;
 800982a:	2300      	movs	r3, #0
 800982c:	e022      	b.n	8009874 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800982e:	230f      	movs	r3, #15
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d10c      	bne.n	8009852 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8009838:	2216      	movs	r2, #22
 800983a:	18bb      	adds	r3, r7, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d907      	bls.n	8009852 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	18ba      	adds	r2, r7, r2
 8009846:	8812      	ldrh	r2, [r2, #0]
 8009848:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800984a:	2315      	movs	r3, #21
 800984c:	18fb      	adds	r3, r7, r3
 800984e:	2201      	movs	r2, #1
 8009850:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8009852:	2315      	movs	r3, #21
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2201      	movs	r2, #1
 800985a:	4053      	eors	r3, r2
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d1a2      	bne.n	80097a8 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <receive_astronode_answer+0x10c>)
 8009864:	0018      	movs	r0, r3
 8009866:	f7f9 fc31 	bl	80030cc <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	0018      	movs	r0, r3
 800986e:	f7f9 fc2d 	bl	80030cc <send_debug_logs>

    return RS_SUCCESS;
 8009872:	2301      	movs	r3, #1
}
 8009874:	0018      	movs	r0, r3
 8009876:	46bd      	mov	sp, r7
 8009878:	b006      	add	sp, #24
 800987a:	bdb0      	pop	{r4, r5, r7, pc}
 800987c:	000005dc 	.word	0x000005dc
 8009880:	08014624 	.word	0x08014624
 8009884:	08014648 	.word	0x08014648
 8009888:	08014694 	.word	0x08014694

0800988c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	0002      	movs	r2, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	1dfb      	adds	r3, r7, #7
 8009898:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800989a:	1dfb      	adds	r3, r7, #7
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	091b      	lsrs	r3, r3, #4
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	001a      	movs	r2, r3
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <uint8_to_ascii_buffer+0x3c>)
 80098a6:	5c9a      	ldrb	r2, [r3, r2]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 80098ac:	1dfb      	adds	r3, r7, #7
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	220f      	movs	r2, #15
 80098b2:	401a      	ands	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	3301      	adds	r3, #1
 80098b8:	4903      	ldr	r1, [pc, #12]	; (80098c8 <uint8_to_ascii_buffer+0x3c>)
 80098ba:	5c8a      	ldrb	r2, [r1, r2]
 80098bc:	701a      	strb	r2, [r3, #0]
}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	46bd      	mov	sp, r7
 80098c2:	b002      	add	sp, #8
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	46c0      	nop			; (mov r8, r8)
 80098c8:	080149f4 	.word	0x080149f4

080098cc <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 80098d2:	1dfb      	adds	r3, r7, #7
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 80098d8:	e012      	b.n	8009900 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 80098da:	f7fa f827 	bl	800392c <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 80098de:	1dfc      	adds	r4, r7, #7
 80098e0:	2300      	movs	r3, #0
 80098e2:	9303      	str	r3, [sp, #12]
 80098e4:	2301      	movs	r3, #1
 80098e6:	9302      	str	r3, [sp, #8]
 80098e8:	2301      	movs	r3, #1
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	2301      	movs	r3, #1
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	2300      	movs	r3, #0
 80098f2:	2201      	movs	r2, #1
 80098f4:	2101      	movs	r1, #1
 80098f6:	2001      	movs	r0, #1
 80098f8:	f7fe fb64 	bl	8007fc4 <astronode_send_cfg_wr>
 80098fc:	0003      	movs	r3, r0
 80098fe:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 8009900:	1dfb      	adds	r3, r7, #7
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2201      	movs	r2, #1
 8009906:	4053      	eors	r3, r2
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e5      	bne.n	80098da <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800990e:	1dfb      	adds	r3, r7, #7
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 8009916:	f7fe ffbb 	bl	8008890 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800991a:	f7fe fb1b 	bl	8007f54 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800991e:	f7ff f8b1 	bl	8008a84 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 8009922:	f7fe fca5 	bl	8008270 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 8009926:	f7fe fbf9 	bl	800811c <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800992a:	f7fe ff35 	bl	8008798 <astronode_send_pld_fr>
		return true ;
 800992e:	2301      	movs	r3, #1
 8009930:	e000      	b.n	8009934 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 8009932:	2300      	movs	r3, #0
	}
}
 8009934:	0018      	movs	r0, r3
 8009936:	46bd      	mov	sp, r7
 8009938:	b003      	add	sp, #12
 800993a:	bd90      	pop	{r4, r7, pc}

0800993c <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	0002      	movs	r2, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	1dbb      	adds	r3, r7, #6
 8009948:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	0018      	movs	r0, r3
 800994e:	f7f6 fbd9 	bl	8000104 <strlen>
 8009952:	0003      	movs	r3, r0
 8009954:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2ba0      	cmp	r3, #160	; 0xa0
 800995a:	d80b      	bhi.n	8009974 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	b29a      	uxth	r2, r3
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	1dbb      	adds	r3, r7, #6
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	0018      	movs	r0, r3
 8009968:	f7fe fe6c 	bl	8008644 <astronode_send_pld_er>
 800996c:	1e03      	subs	r3, r0, #0
 800996e:	d005      	beq.n	800997c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009970:	2301      	movs	r3, #1
 8009972:	e004      	b.n	800997e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009974:	4b04      	ldr	r3, [pc, #16]	; (8009988 <my_astro_add_payload_2_queue+0x4c>)
 8009976:	0018      	movs	r0, r3
 8009978:	f7f9 fba8 	bl	80030cc <send_debug_logs>
	}
	return false ;
 800997c:	2300      	movs	r3, #0
}
 800997e:	0018      	movs	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	b004      	add	sp, #16
 8009984:	bd80      	pop	{r7, pc}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	080146c0 	.word	0x080146c0

0800998c <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009990:	4b19      	ldr	r3, [pc, #100]	; (80099f8 <my_astro_handle_evt+0x6c>)
 8009992:	0018      	movs	r0, r3
 8009994:	f7f9 fb9a 	bl	80030cc <send_debug_logs>
	astronode_send_evt_rr () ;
 8009998:	f7fe fd14 	bl	80083c4 <astronode_send_evt_rr>
	if (is_sak_available () )
 800999c:	f7ff fb00 	bl	8008fa0 <is_sak_available>
 80099a0:	1e03      	subs	r3, r0, #0
 80099a2:	d007      	beq.n	80099b4 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 80099a4:	f7fe ffd8 	bl	8008958 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 80099a8:	f7ff f82c 	bl	8008a04 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 80099ac:	4b13      	ldr	r3, [pc, #76]	; (80099fc <my_astro_handle_evt+0x70>)
 80099ae:	0018      	movs	r0, r3
 80099b0:	f7f9 fb8c 	bl	80030cc <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 80099b4:	f7ff fafe 	bl	8008fb4 <is_astronode_reset>
 80099b8:	1e03      	subs	r3, r0, #0
 80099ba:	d005      	beq.n	80099c8 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <my_astro_handle_evt+0x74>)
 80099be:	0018      	movs	r0, r3
 80099c0:	f7f9 fb84 	bl	80030cc <send_debug_logs>
	  astronode_send_res_cr () ;
 80099c4:	f7fe ff24 	bl	8008810 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 80099c8:	f7ff fafe 	bl	8008fc8 <is_command_available>
 80099cc:	1e03      	subs	r3, r0, #0
 80099ce:	d00e      	beq.n	80099ee <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 80099d0:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <my_astro_handle_evt+0x78>)
 80099d2:	0018      	movs	r0, r3
 80099d4:	f7f9 fb7a 	bl	80030cc <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 80099d8:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <my_astro_handle_evt+0x7c>)
 80099da:	0018      	movs	r0, r3
 80099dc:	f7ff f93c 	bl	8008c58 <astronode_send_cmd_rr>
 80099e0:	1e03      	subs	r3, r0, #0
 80099e2:	d002      	beq.n	80099ea <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <my_astro_handle_evt+0x80>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 80099ea:	f7ff f8f5 	bl	8008bd8 <astronode_send_cmd_cr>
	}
	return true ;
 80099ee:	2301      	movs	r3, #1
}
 80099f0:	0018      	movs	r0, r3
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	08014728 	.word	0x08014728
 80099fc:	0801475c 	.word	0x0801475c
 8009a00:	080147a0 	.word	0x080147a0
 8009a04:	080147dc 	.word	0x080147dc
 8009a08:	20000c0c 	.word	0x20000c0c
 8009a0c:	20000c0a 	.word	0x20000c0a

08009a10 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0011      	movs	r1, r2
 8009a20:	0018      	movs	r0, r3
 8009a22:	f7fe fd4f 	bl	80084c4 <astronode_send_geo_wr>
}
 8009a26:	46c0      	nop			; (mov r8, r8)
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	b002      	add	sp, #8
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8009a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a32:	4ca5      	ldr	r4, [pc, #660]	; (8009cc8 <my_gnss_acq_coordinates+0x298>)
 8009a34:	44a5      	add	sp, r4
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8009a3a:	4ba4      	ldr	r3, [pc, #656]	; (8009ccc <my_gnss_acq_coordinates+0x29c>)
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	2200      	movs	r2, #0
 8009a40:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8009a42:	4ba3      	ldr	r3, [pc, #652]	; (8009cd0 <my_gnss_acq_coordinates+0x2a0>)
 8009a44:	18fb      	adds	r3, r7, r3
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8009a4a:	4ba2      	ldr	r3, [pc, #648]	; (8009cd4 <my_gnss_acq_coordinates+0x2a4>)
 8009a4c:	18fb      	adds	r3, r7, r3
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8009a52:	4ba1      	ldr	r3, [pc, #644]	; (8009cd8 <my_gnss_acq_coordinates+0x2a8>)
 8009a54:	18fb      	adds	r3, r7, r3
 8009a56:	2200      	movs	r2, #0
 8009a58:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009a5a:	4ba0      	ldr	r3, [pc, #640]	; (8009cdc <my_gnss_acq_coordinates+0x2ac>)
 8009a5c:	18fb      	adds	r3, r7, r3
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009a62:	4b9f      	ldr	r3, [pc, #636]	; (8009ce0 <my_gnss_acq_coordinates+0x2b0>)
 8009a64:	2486      	movs	r4, #134	; 0x86
 8009a66:	00a4      	lsls	r4, r4, #2
 8009a68:	191b      	adds	r3, r3, r4
 8009a6a:	19db      	adds	r3, r3, r7
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	601a      	str	r2, [r3, #0]
 8009a70:	3304      	adds	r3, #4
 8009a72:	22f6      	movs	r2, #246	; 0xf6
 8009a74:	2100      	movs	r1, #0
 8009a76:	0018      	movs	r0, r3
 8009a78:	f002 fc44 	bl	800c304 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009a7c:	4b99      	ldr	r3, [pc, #612]	; (8009ce4 <my_gnss_acq_coordinates+0x2b4>)
 8009a7e:	191b      	adds	r3, r3, r4
 8009a80:	19db      	adds	r3, r3, r7
 8009a82:	2200      	movs	r2, #0
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	3304      	adds	r3, #4
 8009a88:	22f6      	movs	r2, #246	; 0xf6
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f002 fc39 	bl	800c304 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009a92:	4b95      	ldr	r3, [pc, #596]	; (8009ce8 <my_gnss_acq_coordinates+0x2b8>)
 8009a94:	2284      	movs	r2, #132	; 0x84
 8009a96:	0092      	lsls	r2, r2, #2
 8009a98:	18ba      	adds	r2, r7, r2
 8009a9a:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009a9c:	4b93      	ldr	r3, [pc, #588]	; (8009cec <my_gnss_acq_coordinates+0x2bc>)
 8009a9e:	2283      	movs	r2, #131	; 0x83
 8009aa0:	0092      	lsls	r2, r2, #2
 8009aa2:	18ba      	adds	r2, r7, r2
 8009aa4:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009aa6:	4b92      	ldr	r3, [pc, #584]	; (8009cf0 <my_gnss_acq_coordinates+0x2c0>)
 8009aa8:	2282      	movs	r2, #130	; 0x82
 8009aaa:	0092      	lsls	r2, r2, #2
 8009aac:	18ba      	adds	r2, r7, r2
 8009aae:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009ab0:	4b90      	ldr	r3, [pc, #576]	; (8009cf4 <my_gnss_acq_coordinates+0x2c4>)
 8009ab2:	2281      	movs	r2, #129	; 0x81
 8009ab4:	0092      	lsls	r2, r2, #2
 8009ab6:	18ba      	adds	r2, r7, r2
 8009ab8:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2230      	movs	r2, #48	; 0x30
 8009abe:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4b8c      	ldr	r3, [pc, #560]	; (8009cf8 <my_gnss_acq_coordinates+0x2c8>)
 8009ac6:	608a      	str	r2, [r1, #8]
 8009ac8:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009aca:	f7f9 ffc5 	bl	8003a58 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009ace:	e0c4      	b.n	8009c5a <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009ad0:	4c80      	ldr	r4, [pc, #512]	; (8009cd4 <my_gnss_acq_coordinates+0x2a4>)
 8009ad2:	193b      	adds	r3, r7, r4
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f7f9 ff04 	bl	80038e4 <my_gnss_receive_byte>
		if ( rx_byte )
 8009adc:	0020      	movs	r0, r4
 8009ade:	183b      	adds	r3, r7, r0
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	4c7b      	ldr	r4, [pc, #492]	; (8009cd0 <my_gnss_acq_coordinates+0x2a0>)
 8009ae4:	193a      	adds	r2, r7, r4
 8009ae6:	1939      	adds	r1, r7, r4
 8009ae8:	7809      	ldrb	r1, [r1, #0]
 8009aea:	7011      	strb	r1, [r2, #0]
 8009aec:	4d7b      	ldr	r5, [pc, #492]	; (8009cdc <my_gnss_acq_coordinates+0x2ac>)
 8009aee:	197a      	adds	r2, r7, r5
 8009af0:	1979      	adds	r1, r7, r5
 8009af2:	7809      	ldrb	r1, [r1, #0]
 8009af4:	7011      	strb	r1, [r2, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d100      	bne.n	8009afc <my_gnss_acq_coordinates+0xcc>
 8009afa:	e0ae      	b.n	8009c5a <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009afc:	4b76      	ldr	r3, [pc, #472]	; (8009cd8 <my_gnss_acq_coordinates+0x2a8>)
 8009afe:	18fa      	adds	r2, r7, r3
 8009b00:	2684      	movs	r6, #132	; 0x84
 8009b02:	0076      	lsls	r6, r6, #1
 8009b04:	19b9      	adds	r1, r7, r6
 8009b06:	183b      	adds	r3, r7, r0
 8009b08:	0018      	movs	r0, r3
 8009b0a:	f000 fbf9 	bl	800a300 <my_nmea_message>
 8009b0e:	0001      	movs	r1, r0
 8009b10:	193b      	adds	r3, r7, r4
 8009b12:	193a      	adds	r2, r7, r4
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	197b      	adds	r3, r7, r5
 8009b1a:	197a      	adds	r2, r7, r5
 8009b1c:	7812      	ldrb	r2, [r2, #0]
 8009b1e:	701a      	strb	r2, [r3, #0]
 8009b20:	2902      	cmp	r1, #2
 8009b22:	d000      	beq.n	8009b26 <my_gnss_acq_coordinates+0xf6>
 8009b24:	e099      	b.n	8009c5a <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8009b26:	19bb      	adds	r3, r7, r6
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f000 fca9 	bl	800a480 <is_my_nmea_checksum_ok>
 8009b2e:	0003      	movs	r3, r0
 8009b30:	0019      	movs	r1, r3
 8009b32:	193b      	adds	r3, r7, r4
 8009b34:	193a      	adds	r2, r7, r4
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	701a      	strb	r2, [r3, #0]
 8009b3a:	197b      	adds	r3, r7, r5
 8009b3c:	197a      	adds	r2, r7, r5
 8009b3e:	7812      	ldrb	r2, [r2, #0]
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	2900      	cmp	r1, #0
 8009b44:	d100      	bne.n	8009b48 <my_gnss_acq_coordinates+0x118>
 8009b46:	e088      	b.n	8009c5a <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 8009b48:	193b      	adds	r3, r7, r4
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4053      	eors	r3, r2
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d015      	beq.n	8009b82 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7c1b      	ldrb	r3, [r3, #16]
 8009b5a:	2b33      	cmp	r3, #51	; 0x33
 8009b5c:	d111      	bne.n	8009b82 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009b5e:	2383      	movs	r3, #131	; 0x83
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	18fb      	adds	r3, r7, r3
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	19bb      	adds	r3, r7, r6
 8009b68:	0011      	movs	r1, r2
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f002 fc3f 	bl	800c3ee <strstr>
 8009b70:	1e03      	subs	r3, r0, #0
 8009b72:	d006      	beq.n	8009b82 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009b74:	19bb      	adds	r3, r7, r6
 8009b76:	0018      	movs	r0, r3
 8009b78:	f000 f9a6 	bl	8009ec8 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009b7c:	193b      	adds	r3, r7, r4
 8009b7e:	2201      	movs	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009b82:	2384      	movs	r3, #132	; 0x84
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	18fb      	adds	r3, r7, r3
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	2484      	movs	r4, #132	; 0x84
 8009b8c:	0064      	lsls	r4, r4, #1
 8009b8e:	193b      	adds	r3, r7, r4
 8009b90:	0011      	movs	r1, r2
 8009b92:	0018      	movs	r0, r3
 8009b94:	f002 fc2b 	bl	800c3ee <strstr>
 8009b98:	1e03      	subs	r3, r0, #0
 8009b9a:	d012      	beq.n	8009bc2 <my_gnss_acq_coordinates+0x192>
 8009b9c:	4d4f      	ldr	r5, [pc, #316]	; (8009cdc <my_gnss_acq_coordinates+0x2ac>)
 8009b9e:	197b      	adds	r3, r7, r5
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d80d      	bhi.n	8009bc2 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 8009ba6:	4b55      	ldr	r3, [pc, #340]	; (8009cfc <my_gnss_acq_coordinates+0x2cc>)
 8009ba8:	881a      	ldrh	r2, [r3, #0]
 8009baa:	4b55      	ldr	r3, [pc, #340]	; (8009d00 <my_gnss_acq_coordinates+0x2d0>)
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d85b      	bhi.n	8009c6a <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009bb2:	193b      	adds	r3, r7, r4
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	f000 fe09 	bl	800a7cc <my_nmea_get_gsv_tns>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	001a      	movs	r2, r3
 8009bbe:	197b      	adds	r3, r7, r5
 8009bc0:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 8009bc2:	2382      	movs	r3, #130	; 0x82
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	2484      	movs	r4, #132	; 0x84
 8009bcc:	0064      	lsls	r4, r4, #1
 8009bce:	193b      	adds	r3, r7, r4
 8009bd0:	0011      	movs	r1, r2
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	f002 fc0b 	bl	800c3ee <strstr>
 8009bd8:	1e03      	subs	r3, r0, #0
 8009bda:	d010      	beq.n	8009bfe <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009bdc:	193b      	adds	r3, r7, r4
 8009bde:	0018      	movs	r0, r3
 8009be0:	f000 fbfa 	bl	800a3d8 <get_my_nmea_gngsa_fixed_mode_s>
 8009be4:	0003      	movs	r3, r0
 8009be6:	001a      	movs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009bec:	193b      	adds	r3, r7, r4
 8009bee:	0018      	movs	r0, r3
 8009bf0:	f000 fbfd 	bl	800a3ee <get_my_nmea_gngsa_pdop_d>
 8009bf4:	0002      	movs	r2, r0
 8009bf6:	000b      	movs	r3, r1
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	608a      	str	r2, [r1, #8]
 8009bfc:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009bfe:	2381      	movs	r3, #129	; 0x81
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	2384      	movs	r3, #132	; 0x84
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	0011      	movs	r1, r2
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f002 fbed 	bl	800c3ee <strstr>
 8009c14:	1e03      	subs	r3, r0, #0
 8009c16:	d020      	beq.n	8009c5a <my_gnss_acq_coordinates+0x22a>
 8009c18:	4b2d      	ldr	r3, [pc, #180]	; (8009cd0 <my_gnss_acq_coordinates+0x2a0>)
 8009c1a:	18fb      	adds	r3, r7, r3
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01b      	beq.n	8009c5a <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	7c1b      	ldrb	r3, [r3, #16]
 8009c26:	2b33      	cmp	r3, #51	; 0x33
 8009c28:	d121      	bne.n	8009c6e <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009c2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ce4 <my_gnss_acq_coordinates+0x2b4>)
 8009c2c:	2186      	movs	r1, #134	; 0x86
 8009c2e:	0089      	lsls	r1, r1, #2
 8009c30:	185b      	adds	r3, r3, r1
 8009c32:	19da      	adds	r2, r3, r7
 8009c34:	4b2a      	ldr	r3, [pc, #168]	; (8009ce0 <my_gnss_acq_coordinates+0x2b0>)
 8009c36:	185b      	adds	r3, r3, r1
 8009c38:	19db      	adds	r3, r3, r7
 8009c3a:	0010      	movs	r0, r2
 8009c3c:	0019      	movs	r1, r3
 8009c3e:	23fa      	movs	r3, #250	; 0xfa
 8009c40:	001a      	movs	r2, r3
 8009c42:	f002 fc8c 	bl	800c55e <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6898      	ldr	r0, [r3, #8]
 8009c4a:	68d9      	ldr	r1, [r3, #12]
 8009c4c:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <my_gnss_acq_coordinates+0x2d4>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f7f6 fc09 	bl	8000468 <__aeabi_dcmple>
 8009c56:	1e03      	subs	r3, r0, #0
 8009c58:	d10b      	bne.n	8009c72 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009c5a:	4b28      	ldr	r3, [pc, #160]	; (8009cfc <my_gnss_acq_coordinates+0x2cc>)
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	4b2a      	ldr	r3, [pc, #168]	; (8009d08 <my_gnss_acq_coordinates+0x2d8>)
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d200      	bcs.n	8009c68 <my_gnss_acq_coordinates+0x238>
 8009c66:	e733      	b.n	8009ad0 <my_gnss_acq_coordinates+0xa0>
 8009c68:	e004      	b.n	8009c74 <my_gnss_acq_coordinates+0x244>
							break ;
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	e002      	b.n	8009c74 <my_gnss_acq_coordinates+0x244>
							break ;
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	e000      	b.n	8009c74 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009c72:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009c74:	f7f9 ff00 	bl	8003a78 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <my_gnss_acq_coordinates+0x2b4>)
 8009c7a:	2286      	movs	r2, #134	; 0x86
 8009c7c:	0092      	lsls	r2, r2, #2
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	19db      	adds	r3, r3, r7
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	230c      	movs	r3, #12
 8009c8c:	18fb      	adds	r3, r7, r3
 8009c8e:	0011      	movs	r1, r2
 8009c90:	0018      	movs	r0, r3
 8009c92:	f000 fcb1 	bl	800a5f8 <my_nmea_get_gngll_coordinates>
		r = true ;
 8009c96:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <my_gnss_acq_coordinates+0x29c>)
 8009c98:	18fb      	adds	r3, r7, r3
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009c9e:	4b17      	ldr	r3, [pc, #92]	; (8009cfc <my_gnss_acq_coordinates+0x2cc>)
 8009ca0:	881a      	ldrh	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	4a14      	ldr	r2, [pc, #80]	; (8009cfc <my_gnss_acq_coordinates+0x2cc>)
 8009cac:	8812      	ldrh	r2, [r2, #0]
 8009cae:	189a      	adds	r2, r3, r2
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	615a      	str	r2, [r3, #20]
	return r ;
 8009cb4:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <my_gnss_acq_coordinates+0x29c>)
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	781b      	ldrb	r3, [r3, #0]
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	2387      	movs	r3, #135	; 0x87
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	449d      	add	sp, r3
 8009cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc6:	46c0      	nop			; (mov r8, r8)
 8009cc8:	fffffde4 	.word	0xfffffde4
 8009ccc:	00000217 	.word	0x00000217
 8009cd0:	00000216 	.word	0x00000216
 8009cd4:	00000203 	.word	0x00000203
 8009cd8:	00000202 	.word	0x00000202
 8009cdc:	00000215 	.word	0x00000215
 8009ce0:	fffffef0 	.word	0xfffffef0
 8009ce4:	fffffdf4 	.word	0xfffffdf4
 8009ce8:	0801481c 	.word	0x0801481c
 8009cec:	08014824 	.word	0x08014824
 8009cf0:	0801482c 	.word	0x0801482c
 8009cf4:	08014834 	.word	0x08014834
 8009cf8:	408f4000 	.word	0x408f4000
 8009cfc:	20000c34 	.word	0x20000c34
 8009d00:	2000001c 	.word	0x2000001c
 8009d04:	20000020 	.word	0x20000020
 8009d08:	2000001a 	.word	0x2000001a

08009d0c <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8009d16:	6879      	ldr	r1, [r7, #4]
 8009d18:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <my_rtc_get_dt+0x2c>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f7fc f939 	bl	8005f94 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <my_rtc_get_dt+0x2c>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	0018      	movs	r0, r3
 8009d2a:	f7fc f845 	bl	8005db8 <HAL_RTC_GetTime>
}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b002      	add	sp, #8
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	200006f4 	.word	0x200006f4

08009d3c <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3e:	b08d      	sub	sp, #52	; 0x34
 8009d40:	af04      	add	r7, sp, #16
 8009d42:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009d44:	2508      	movs	r5, #8
 8009d46:	1979      	adds	r1, r7, r5
 8009d48:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <my_rtc_get_dt_s+0x7c>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7fc f833 	bl	8005db8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009d52:	241c      	movs	r4, #28
 8009d54:	1939      	adds	r1, r7, r4
 8009d56:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <my_rtc_get_dt_s+0x7c>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f7fc f91a 	bl	8005f94 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009d60:	0021      	movs	r1, r4
 8009d62:	187b      	adds	r3, r7, r1
 8009d64:	78db      	ldrb	r3, [r3, #3]
 8009d66:	22fa      	movs	r2, #250	; 0xfa
 8009d68:	00d2      	lsls	r2, r2, #3
 8009d6a:	189a      	adds	r2, r3, r2
 8009d6c:	187b      	adds	r3, r7, r1
 8009d6e:	785b      	ldrb	r3, [r3, #1]
 8009d70:	469c      	mov	ip, r3
 8009d72:	187b      	adds	r3, r7, r1
 8009d74:	789b      	ldrb	r3, [r3, #2]
 8009d76:	001c      	movs	r4, r3
 8009d78:	0028      	movs	r0, r5
 8009d7a:	183b      	adds	r3, r7, r0
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	001d      	movs	r5, r3
 8009d80:	183b      	adds	r3, r7, r0
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	001e      	movs	r6, r3
 8009d86:	183b      	adds	r3, r7, r0
 8009d88:	789b      	ldrb	r3, [r3, #2]
 8009d8a:	490c      	ldr	r1, [pc, #48]	; (8009dbc <my_rtc_get_dt_s+0x80>)
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	9303      	str	r3, [sp, #12]
 8009d90:	9602      	str	r6, [sp, #8]
 8009d92:	9501      	str	r5, [sp, #4]
 8009d94:	9400      	str	r4, [sp, #0]
 8009d96:	4663      	mov	r3, ip
 8009d98:	f002 fa1e 	bl	800c1d8 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009d9c:	211c      	movs	r1, #28
 8009d9e:	187b      	adds	r3, r7, r1
 8009da0:	78db      	ldrb	r3, [r3, #3]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	22fa      	movs	r2, #250	; 0xfa
 8009da6:	00d2      	lsls	r2, r2, #3
 8009da8:	4694      	mov	ip, r2
 8009daa:	4463      	add	r3, ip
 8009dac:	b29b      	uxth	r3, r3
}
 8009dae:	0018      	movs	r0, r3
 8009db0:	46bd      	mov	sp, r7
 8009db2:	b009      	add	sp, #36	; 0x24
 8009db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	200006f4 	.word	0x200006f4
 8009dbc:	08014884 	.word	0x08014884

08009dc0 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dc2:	b0a9      	sub	sp, #164	; 0xa4
 8009dc4:	af02      	add	r7, sp, #8
 8009dc6:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009dc8:	2434      	movs	r4, #52	; 0x34
 8009dca:	193a      	adds	r2, r7, r4
 8009dcc:	2548      	movs	r5, #72	; 0x48
 8009dce:	197b      	adds	r3, r7, r5
 8009dd0:	0011      	movs	r1, r2
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f7ff ff9a 	bl	8009d0c <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009dd8:	2680      	movs	r6, #128	; 0x80
 8009dda:	19bb      	adds	r3, r7, r6
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f7ff ffad 	bl	8009d3c <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009de2:	4a36      	ldr	r2, [pc, #216]	; (8009ebc <my_rtc_set_alarm+0xfc>)
 8009de4:	4936      	ldr	r1, [pc, #216]	; (8009ec0 <my_rtc_set_alarm+0x100>)
 8009de6:	234c      	movs	r3, #76	; 0x4c
 8009de8:	18f8      	adds	r0, r7, r3
 8009dea:	19bb      	adds	r3, r7, r6
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	232d      	movs	r3, #45	; 0x2d
 8009df0:	f002 f9f2 	bl	800c1d8 <sprintf>
	send_debug_logs ( m ) ;
 8009df4:	234c      	movs	r3, #76	; 0x4c
 8009df6:	18fb      	adds	r3, r7, r3
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f7f9 f967 	bl	80030cc <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009dfe:	193a      	adds	r2, r7, r4
 8009e00:	197b      	adds	r3, r7, r5
 8009e02:	0011      	movs	r1, r2
 8009e04:	0018      	movs	r0, r3
 8009e06:	f000 f90d 	bl	800a024 <my_conv_rtc2timestamp>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	189b      	adds	r3, r3, r2
 8009e10:	2094      	movs	r0, #148	; 0x94
 8009e12:	183a      	adds	r2, r7, r0
 8009e14:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8009e16:	193a      	adds	r2, r7, r4
 8009e18:	1979      	adds	r1, r7, r5
 8009e1a:	1838      	adds	r0, r7, r0
 8009e1c:	6803      	ldr	r3, [r0, #0]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f000 f974 	bl	800a10c <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009e24:	193b      	adds	r3, r7, r4
 8009e26:	781a      	ldrb	r2, [r3, #0]
 8009e28:	210c      	movs	r1, #12
 8009e2a:	187b      	adds	r3, r7, r1
 8009e2c:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009e2e:	193b      	adds	r3, r7, r4
 8009e30:	785a      	ldrb	r2, [r3, #1]
 8009e32:	187b      	adds	r3, r7, r1
 8009e34:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8009e36:	193b      	adds	r3, r7, r4
 8009e38:	789a      	ldrb	r2, [r3, #2]
 8009e3a:	187b      	adds	r3, r7, r1
 8009e3c:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009e3e:	0008      	movs	r0, r1
 8009e40:	183b      	adds	r3, r7, r0
 8009e42:	2200      	movs	r2, #0
 8009e44:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8009e46:	183b      	adds	r3, r7, r0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009e4c:	183b      	adds	r3, r7, r0
 8009e4e:	2200      	movs	r2, #0
 8009e50:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009e52:	183b      	adds	r3, r7, r0
 8009e54:	2200      	movs	r2, #0
 8009e56:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009e58:	183b      	adds	r3, r7, r0
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009e5e:	183b      	adds	r3, r7, r0
 8009e60:	2200      	movs	r2, #0
 8009e62:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009e64:	197b      	adds	r3, r7, r5
 8009e66:	7899      	ldrb	r1, [r3, #2]
 8009e68:	183b      	adds	r3, r7, r0
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009e6e:	183b      	adds	r3, r7, r0
 8009e70:	2280      	movs	r2, #128	; 0x80
 8009e72:	0052      	lsls	r2, r2, #1
 8009e74:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009e76:	1839      	adds	r1, r7, r0
 8009e78:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <my_rtc_set_alarm+0x104>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f7fc f8d7 	bl	8006030 <HAL_RTC_SetAlarm_IT>
 8009e82:	1e03      	subs	r3, r0, #0
 8009e84:	d114      	bne.n	8009eb0 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009e86:	19ba      	adds	r2, r7, r6
 8009e88:	1939      	adds	r1, r7, r4
 8009e8a:	197b      	adds	r3, r7, r5
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f000 f9ff 	bl	800a290 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009e92:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <my_rtc_set_alarm+0xfc>)
 8009e94:	490a      	ldr	r1, [pc, #40]	; (8009ec0 <my_rtc_set_alarm+0x100>)
 8009e96:	244c      	movs	r4, #76	; 0x4c
 8009e98:	1938      	adds	r0, r7, r4
 8009e9a:	19bb      	adds	r3, r7, r6
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	2341      	movs	r3, #65	; 0x41
 8009ea0:	f002 f99a 	bl	800c1d8 <sprintf>
		send_debug_logs ( m ) ;
 8009ea4:	193b      	adds	r3, r7, r4
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	f7f9 f910 	bl	80030cc <send_debug_logs>
		return true ;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e000      	b.n	8009eb2 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	b027      	add	sp, #156	; 0x9c
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	080148a4 	.word	0x080148a4
 8009ec0:	080148c0 	.word	0x080148c0
 8009ec4:	200006f4 	.word	0x200006f4

08009ec8 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009ec8:	b5b0      	push	{r4, r5, r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009ed0:	2508      	movs	r5, #8
 8009ed2:	197b      	adds	r3, r7, r5
 8009ed4:	1cda      	adds	r2, r3, #3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	0011      	movs	r1, r2
 8009eda:	0018      	movs	r0, r3
 8009edc:	f000 fcae 	bl	800a83c <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009ee0:	197b      	adds	r3, r7, r5
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	0011      	movs	r1, r2
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f000 fce1 	bl	800a8b0 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009eee:	197b      	adds	r3, r7, r5
 8009ef0:	1c9a      	adds	r2, r3, #2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	0011      	movs	r1, r2
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f000 fd14 	bl	800a924 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009efc:	240c      	movs	r4, #12
 8009efe:	193a      	adds	r2, r7, r4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	0011      	movs	r1, r2
 8009f04:	0018      	movs	r0, r3
 8009f06:	f000 fd47 	bl	800a998 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009f0a:	193b      	adds	r3, r7, r4
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	0011      	movs	r1, r2
 8009f12:	0018      	movs	r0, r3
 8009f14:	f000 fd7a 	bl	800aa0c <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009f18:	193b      	adds	r3, r7, r4
 8009f1a:	1c9a      	adds	r2, r3, #2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	0011      	movs	r1, r2
 8009f20:	0018      	movs	r0, r3
 8009f22:	f000 fdad 	bl	800aa80 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009f26:	193b      	adds	r3, r7, r4
 8009f28:	1d1a      	adds	r2, r3, #4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	0011      	movs	r1, r2
 8009f2e:	0018      	movs	r0, r3
 8009f30:	f000 fde0 	bl	800aaf4 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009f34:	193b      	adds	r3, r7, r4
 8009f36:	2200      	movs	r2, #0
 8009f38:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009f3a:	193b      	adds	r3, r7, r4
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009f42:	0018      	movs	r0, r3
 8009f44:	f7fc fae3 	bl	800650e <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009f48:	1939      	adds	r1, r7, r4
 8009f4a:	4b09      	ldr	r3, [pc, #36]	; (8009f70 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f7fb fe8a 	bl	8005c68 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009f54:	1979      	adds	r1, r7, r5
 8009f56:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009f58:	2200      	movs	r2, #0
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	f7fb ff88 	bl	8005e70 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009f60:	4b03      	ldr	r3, [pc, #12]	; (8009f70 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009f62:	0018      	movs	r0, r3
 8009f64:	f7fc fb07 	bl	8006576 <HAL_RTCEx_DisableBypassShadow>
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b008      	add	sp, #32
 8009f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f70:	200006f4 	.word	0x200006f4

08009f74 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2100      	movs	r1, #0
 8009f80:	0018      	movs	r0, r3
 8009f82:	f001 fefb 	bl	800bd7c <strtod>
 8009f86:	0002      	movs	r2, r0
 8009f88:	000b      	movs	r3, r1
 8009f8a:	60ba      	str	r2, [r7, #8]
 8009f8c:	60fb      	str	r3, [r7, #12]
    return d ;
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	68fb      	ldr	r3, [r7, #12]
}
 8009f92:	0010      	movs	r0, r2
 8009f94:	0019      	movs	r1, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b004      	add	sp, #16
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	0008      	movs	r0, r1
 8009fa6:	0011      	movs	r1, r2
 8009fa8:	1cfb      	adds	r3, r7, #3
 8009faa:	1c02      	adds	r2, r0, #0
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	1cbb      	adds	r3, r7, #2
 8009fb0:	1c0a      	adds	r2, r1, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009fb4:	230f      	movs	r3, #15
 8009fb6:	18fb      	adds	r3, r7, r3
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009fbc:	230e      	movs	r3, #14
 8009fbe:	18fb      	adds	r3, r7, r3
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009fc4:	e01c      	b.n	800a000 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009fc6:	230f      	movs	r3, #15
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	18d3      	adds	r3, r2, r3
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	1cfa      	adds	r2, r7, #3
 8009fd4:	7812      	ldrb	r2, [r2, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d105      	bne.n	8009fe6 <my_find_char_position+0x4a>
			p++ ;
 8009fda:	210e      	movs	r1, #14
 8009fdc:	187b      	adds	r3, r7, r1
 8009fde:	781a      	ldrb	r2, [r3, #0]
 8009fe0:	187b      	adds	r3, r7, r1
 8009fe2:	3201      	adds	r2, #1
 8009fe4:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009fe6:	230e      	movs	r3, #14
 8009fe8:	18fa      	adds	r2, r7, r3
 8009fea:	1cbb      	adds	r3, r7, #2
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d00e      	beq.n	800a012 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009ff4:	210f      	movs	r1, #15
 8009ff6:	187b      	adds	r3, r7, r1
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	187b      	adds	r3, r7, r1
 8009ffc:	3201      	adds	r2, #1
 8009ffe:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a000:	230f      	movs	r3, #15
 800a002:	18fb      	adds	r3, r7, r3
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	18d3      	adds	r3, r2, r3
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1da      	bne.n	8009fc6 <my_find_char_position+0x2a>
 800a010:	e000      	b.n	800a014 <my_find_char_position+0x78>
			break ;
 800a012:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a014:	230f      	movs	r3, #15
 800a016:	18fb      	adds	r3, r7, r3
 800a018:	781b      	ldrb	r3, [r3, #0]
}
 800a01a:	0018      	movs	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	b004      	add	sp, #16
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	78db      	ldrb	r3, [r3, #3]
 800a032:	22fa      	movs	r2, #250	; 0xfa
 800a034:	00d2      	lsls	r2, r2, #3
 800a036:	4694      	mov	ip, r2
 800a038:	4463      	add	r3, ip
 800a03a:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	0013      	movs	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	189b      	adds	r3, r3, r2
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	189b      	adds	r3, r3, r2
 800a048:	009a      	lsls	r2, r3, #2
 800a04a:	189a      	adds	r2, r3, r2
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	492c      	ldr	r1, [pc, #176]	; (800a100 <my_conv_rtc2timestamp+0xdc>)
 800a050:	468c      	mov	ip, r1
 800a052:	4463      	add	r3, ip
 800a054:	089b      	lsrs	r3, r3, #2
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	4a2a      	ldr	r2, [pc, #168]	; (800a104 <my_conv_rtc2timestamp+0xe0>)
 800a05a:	4694      	mov	ip, r2
 800a05c:	4463      	add	r3, ip
 800a05e:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
 800a064:	e00a      	b.n	800a07c <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a066:	4a28      	ldr	r2, [pc, #160]	; (800a108 <my_conv_rtc2timestamp+0xe4>)
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	18d3      	adds	r3, r2, r3
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	001a      	movs	r2, r3
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	189b      	adds	r3, r3, r2
 800a074:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	3301      	adds	r3, #1
 800a07a:	613b      	str	r3, [r7, #16]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	785b      	ldrb	r3, [r3, #1]
 800a080:	3b01      	subs	r3, #1
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	429a      	cmp	r2, r3
 800a086:	dbee      	blt.n	800a066 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d908      	bls.n	800a0a2 <my_conv_rtc2timestamp+0x7e>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	0018      	movs	r0, r3
 800a094:	f000 f8de 	bl	800a254 <my_conv_is_leap_year>
 800a098:	1e03      	subs	r3, r0, #0
 800a09a:	d002      	beq.n	800a0a2 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	789b      	ldrb	r3, [r3, #2]
 800a0a6:	001a      	movs	r2, r3
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	18d3      	adds	r3, r2, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	0013      	movs	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	189b      	adds	r3, r3, r2
 800a0b8:	011a      	lsls	r2, r3, #4
 800a0ba:	1ad2      	subs	r2, r2, r3
 800a0bc:	0113      	lsls	r3, r2, #4
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	01db      	lsls	r3, r3, #7
 800a0c2:	0019      	movs	r1, r3
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	001a      	movs	r2, r3
 800a0ca:	0013      	movs	r3, r2
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	1a9b      	subs	r3, r3, r2
 800a0d0:	011a      	lsls	r2, r3, #4
 800a0d2:	1ad2      	subs	r2, r2, r3
 800a0d4:	0113      	lsls	r3, r2, #4
 800a0d6:	001a      	movs	r2, r3
 800a0d8:	0013      	movs	r3, r2
 800a0da:	18ca      	adds	r2, r1, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	0019      	movs	r1, r3
 800a0e2:	000b      	movs	r3, r1
 800a0e4:	011b      	lsls	r3, r3, #4
 800a0e6:	1a5b      	subs	r3, r3, r1
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	18d3      	adds	r3, r2, r3
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	7892      	ldrb	r2, [r2, #2]
 800a0f0:	189b      	adds	r3, r3, r2
 800a0f2:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
}
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	b006      	add	sp, #24
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	fffff84f 	.word	0xfffff84f
 800a104:	fff50736 	.word	0xfff50736
 800a108:	08014a04 	.word	0x08014a04

0800a10c <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a10c:	b590      	push	{r4, r7, lr}
 800a10e:	b08b      	sub	sp, #44	; 0x2c
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	213c      	movs	r1, #60	; 0x3c
 800a11c:	0018      	movs	r0, r3
 800a11e:	f7f6 f893 	bl	8000248 <__aeabi_uidivmod>
 800a122:	000b      	movs	r3, r1
 800a124:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	213c      	movs	r1, #60	; 0x3c
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7f6 f806 	bl	800013c <__udivsi3>
 800a130:	0003      	movs	r3, r0
 800a132:	213c      	movs	r1, #60	; 0x3c
 800a134:	0018      	movs	r0, r3
 800a136:	f7f6 f887 	bl	8000248 <__aeabi_uidivmod>
 800a13a:	000b      	movs	r3, r1
 800a13c:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	22e1      	movs	r2, #225	; 0xe1
 800a142:	0111      	lsls	r1, r2, #4
 800a144:	0018      	movs	r0, r3
 800a146:	f7f5 fff9 	bl	800013c <__udivsi3>
 800a14a:	0003      	movs	r3, r0
 800a14c:	2118      	movs	r1, #24
 800a14e:	0018      	movs	r0, r3
 800a150:	f7f6 f87a 	bl	8000248 <__aeabi_uidivmod>
 800a154:	000b      	movs	r3, r1
 800a156:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	493b      	ldr	r1, [pc, #236]	; (800a248 <my_conv_timestamp2rtc+0x13c>)
 800a15c:	0018      	movs	r0, r3
 800a15e:	f7f5 ffed 	bl	800013c <__udivsi3>
 800a162:	0003      	movs	r3, r0
 800a164:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <my_conv_timestamp2rtc+0x140>)
 800a168:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a16a:	e00d      	b.n	800a188 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800a16c:	6a3b      	ldr	r3, [r7, #32]
 800a16e:	0018      	movs	r0, r3
 800a170:	f000 f870 	bl	800a254 <my_conv_is_leap_year>
 800a174:	0003      	movs	r3, r0
 800a176:	336e      	adds	r3, #110	; 0x6e
 800a178:	33ff      	adds	r3, #255	; 0xff
 800a17a:	001a      	movs	r2, r3
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	1a9b      	subs	r3, r3, r2
 800a180:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	3301      	adds	r3, #1
 800a186:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a188:	6a3b      	ldr	r3, [r7, #32]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f000 f862 	bl	800a254 <my_conv_is_leap_year>
 800a190:	0003      	movs	r3, r0
 800a192:	336e      	adds	r3, #110	; 0x6e
 800a194:	33ff      	adds	r3, #255	; 0xff
 800a196:	001a      	movs	r2, r3
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d2e6      	bcs.n	800a16c <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a1a2:	e018      	b.n	800a1d6 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a1a4:	4b2a      	ldr	r3, [pc, #168]	; (800a250 <my_conv_timestamp2rtc+0x144>)
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	0052      	lsls	r2, r2, #1
 800a1aa:	5ad3      	ldrh	r3, [r2, r3]
 800a1ac:	001c      	movs	r4, r3
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d107      	bne.n	800a1c4 <my_conv_timestamp2rtc+0xb8>
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 f84c 	bl	800a254 <my_conv_is_leap_year>
 800a1bc:	1e03      	subs	r3, r0, #0
 800a1be:	d001      	beq.n	800a1c4 <my_conv_timestamp2rtc+0xb8>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e000      	b.n	800a1c6 <my_conv_timestamp2rtc+0xba>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	191b      	adds	r3, r3, r4
 800a1c8:	001a      	movs	r2, r3
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a1d6:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <my_conv_timestamp2rtc+0x144>)
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	0052      	lsls	r2, r2, #1
 800a1dc:	5ad3      	ldrh	r3, [r2, r3]
 800a1de:	001c      	movs	r4, r3
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d107      	bne.n	800a1f6 <my_conv_timestamp2rtc+0xea>
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f000 f833 	bl	800a254 <my_conv_is_leap_year>
 800a1ee:	1e03      	subs	r3, r0, #0
 800a1f0:	d001      	beq.n	800a1f6 <my_conv_timestamp2rtc+0xea>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <my_conv_timestamp2rtc+0xec>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	191b      	adds	r3, r3, r4
 800a1fa:	001a      	movs	r2, r3
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d2d0      	bcs.n	800a1a4 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	b2db      	uxtb	r3, r3
 800a206:	3330      	adds	r3, #48	; 0x30
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	3301      	adds	r3, #1
 800a214:	b2da      	uxtb	r2, r3
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	3301      	adds	r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	b2da      	uxtb	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	709a      	strb	r2, [r3, #2]
}
 800a23e:	46c0      	nop			; (mov r8, r8)
 800a240:	46bd      	mov	sp, r7
 800a242:	b00b      	add	sp, #44	; 0x2c
 800a244:	bd90      	pop	{r4, r7, pc}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	00015180 	.word	0x00015180
 800a24c:	000007b2 	.word	0x000007b2
 800a250:	08014a10 	.word	0x08014a10

0800a254 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2203      	movs	r2, #3
 800a260:	4013      	ands	r3, r2
 800a262:	d106      	bne.n	800a272 <my_conv_is_leap_year+0x1e>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2164      	movs	r1, #100	; 0x64
 800a268:	0018      	movs	r0, r3
 800a26a:	f7f6 f8d7 	bl	800041c <__aeabi_idivmod>
 800a26e:	1e0b      	subs	r3, r1, #0
 800a270:	d107      	bne.n	800a282 <my_conv_is_leap_year+0x2e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	22c8      	movs	r2, #200	; 0xc8
 800a276:	0051      	lsls	r1, r2, #1
 800a278:	0018      	movs	r0, r3
 800a27a:	f7f6 f8cf 	bl	800041c <__aeabi_idivmod>
 800a27e:	1e0b      	subs	r3, r1, #0
 800a280:	d101      	bne.n	800a286 <my_conv_is_leap_year+0x32>
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <my_conv_is_leap_year+0x34>
 800a286:	2300      	movs	r3, #0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b002      	add	sp, #8
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800a290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a292:	b089      	sub	sp, #36	; 0x24
 800a294:	af04      	add	r7, sp, #16
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	78db      	ldrb	r3, [r3, #3]
 800a2a0:	22fa      	movs	r2, #250	; 0xfa
 800a2a2:	00d2      	lsls	r2, r2, #3
 800a2a4:	189a      	adds	r2, r3, r2
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	469c      	mov	ip, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	789b      	ldrb	r3, [r3, #2]
 800a2b0:	001c      	movs	r4, r3
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	001d      	movs	r5, r3
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	001e      	movs	r6, r3
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	789b      	ldrb	r3, [r3, #2]
 800a2c2:	4906      	ldr	r1, [pc, #24]	; (800a2dc <my_conv_dt_2_dts+0x4c>)
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	9303      	str	r3, [sp, #12]
 800a2c8:	9602      	str	r6, [sp, #8]
 800a2ca:	9501      	str	r5, [sp, #4]
 800a2cc:	9400      	str	r4, [sp, #0]
 800a2ce:	4663      	mov	r3, ip
 800a2d0:	f001 ff82 	bl	800c1d8 <sprintf>
}
 800a2d4:	46c0      	nop			; (mov r8, r8)
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	b005      	add	sp, #20
 800a2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2dc:	080148cc 	.word	0x080148cc

0800a2e0 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	18f9      	adds	r1, r7, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	220a      	movs	r2, #10
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f001 fe6d 	bl	800bfd0 <strtoul>
 800a2f6:	0003      	movs	r3, r0
}
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	b004      	add	sp, #16
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b24      	cmp	r3, #36	; 0x24
 800a312:	d117      	bne.n	800a344 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	b2d1      	uxtb	r1, r2
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	7011      	strb	r1, [r2, #0]
 800a326:	001a      	movs	r2, r3
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	189b      	adds	r3, r3, r2
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	7812      	ldrb	r2, [r2, #0]
 800a330:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	001a      	movs	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	189b      	adds	r3, r3, r2
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a340:	2300      	movs	r3, #0
 800a342:	e045      	b.n	800a3d0 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b1f      	cmp	r3, #31
 800a34a:	d907      	bls.n	800a35c <my_nmea_message+0x5c>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b7e      	cmp	r3, #126	; 0x7e
 800a352:	d803      	bhi.n	800a35c <my_nmea_message+0x5c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d103      	bne.n	800a364 <my_nmea_message+0x64>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b0d      	cmp	r3, #13
 800a362:	d114      	bne.n	800a38e <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	b2d1      	uxtb	r1, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	7011      	strb	r1, [r2, #0]
 800a370:	001a      	movs	r2, r3
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	189b      	adds	r3, r3, r2
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	7812      	ldrb	r2, [r2, #0]
 800a37a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	001a      	movs	r2, r3
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	189b      	adds	r3, r3, r2
 800a386:	2200      	movs	r2, #0
 800a388:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e020      	b.n	800a3d0 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b0a      	cmp	r3, #10
 800a394:	d11a      	bne.n	800a3cc <my_nmea_message+0xcc>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d916      	bls.n	800a3cc <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	701a      	strb	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	001a      	movs	r2, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b0d      	cmp	r3, #13
 800a3b8:	d108      	bne.n	800a3cc <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	001a      	movs	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e001      	b.n	800a3d0 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	425b      	negs	r3, r3
}
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b004      	add	sp, #16
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3309      	adds	r3, #9
 800a3e4:	781b      	ldrb	r3, [r3, #0]
}
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	b002      	add	sp, #8
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a3ee:	b5b0      	push	{r4, r5, r7, lr}
 800a3f0:	b086      	sub	sp, #24
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	220f      	movs	r2, #15
 800a3fa:	212c      	movs	r1, #44	; 0x2c
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f7ff fdcd 	bl	8009f9c <my_find_char_position>
 800a402:	0003      	movs	r3, r0
 800a404:	001a      	movs	r2, r3
 800a406:	2517      	movs	r5, #23
 800a408:	197b      	adds	r3, r7, r5
 800a40a:	3201      	adds	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2210      	movs	r2, #16
 800a412:	212c      	movs	r1, #44	; 0x2c
 800a414:	0018      	movs	r0, r3
 800a416:	f7ff fdc1 	bl	8009f9c <my_find_char_position>
 800a41a:	0003      	movs	r3, r0
 800a41c:	0019      	movs	r1, r3
 800a41e:	2416      	movs	r4, #22
 800a420:	193b      	adds	r3, r7, r4
 800a422:	197a      	adds	r2, r7, r5
 800a424:	7812      	ldrb	r2, [r2, #0]
 800a426:	1a8a      	subs	r2, r1, r2
 800a428:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a42a:	193b      	adds	r3, r7, r4
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	3301      	adds	r3, #1
 800a430:	0018      	movs	r0, r3
 800a432:	f000 fc41 	bl	800acb8 <malloc>
 800a436:	0003      	movs	r3, r0
 800a438:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a43a:	197b      	adds	r3, r7, r5
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	18d1      	adds	r1, r2, r3
 800a442:	193b      	adds	r3, r7, r4
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	0018      	movs	r0, r3
 800a44a:	f001 ff82 	bl	800c352 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a44e:	193b      	adds	r3, r7, r4
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	18d3      	adds	r3, r2, r3
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	0018      	movs	r0, r3
 800a45e:	f7ff fd89 	bl	8009f74 <my_string2double_conv>
 800a462:	0002      	movs	r2, r0
 800a464:	000b      	movs	r3, r1
 800a466:	60ba      	str	r2, [r7, #8]
 800a468:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	0018      	movs	r0, r3
 800a46e:	f000 fc2d 	bl	800accc <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	68fb      	ldr	r3, [r7, #12]
}
 800a476:	0010      	movs	r0, r2
 800a478:	0019      	movs	r1, r3
 800a47a:	46bd      	mov	sp, r7
 800a47c:	b006      	add	sp, #24
 800a47e:	bdb0      	pop	{r4, r5, r7, pc}

0800a480 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a488:	230f      	movs	r3, #15
 800a48a:	18fb      	adds	r3, r7, r3
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a490:	230e      	movs	r3, #14
 800a492:	18fb      	adds	r3, r7, r3
 800a494:	2201      	movs	r2, #1
 800a496:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a498:	e00f      	b.n	800a4ba <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a49a:	220e      	movs	r2, #14
 800a49c:	18bb      	adds	r3, r7, r2
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	18ba      	adds	r2, r7, r2
 800a4a2:	1c59      	adds	r1, r3, #1
 800a4a4:	7011      	strb	r1, [r2, #0]
 800a4a6:	001a      	movs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	189b      	adds	r3, r3, r2
 800a4ac:	7819      	ldrb	r1, [r3, #0]
 800a4ae:	220f      	movs	r2, #15
 800a4b0:	18bb      	adds	r3, r7, r2
 800a4b2:	18ba      	adds	r2, r7, r2
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	404a      	eors	r2, r1
 800a4b8:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a4ba:	210e      	movs	r1, #14
 800a4bc:	187b      	adds	r3, r7, r1
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	18d3      	adds	r3, r2, r3
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c8:	d00a      	beq.n	800a4e0 <is_my_nmea_checksum_ok+0x60>
 800a4ca:	187b      	adds	r3, r7, r1
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	18d3      	adds	r3, r2, r3
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <is_my_nmea_checksum_ok+0x60>
 800a4d8:	187b      	adds	r3, r7, r1
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1dc      	bne.n	800a49a <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a4e0:	230f      	movs	r3, #15
 800a4e2:	18fb      	adds	r3, r7, r3
 800a4e4:	781c      	ldrb	r4, [r3, #0]
 800a4e6:	210e      	movs	r1, #14
 800a4e8:	187b      	adds	r3, r7, r1
 800a4ea:	187a      	adds	r2, r7, r1
 800a4ec:	7812      	ldrb	r2, [r2, #0]
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	187b      	adds	r3, r7, r1
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	18d3      	adds	r3, r2, r3
 800a4fa:	2210      	movs	r2, #16
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	0018      	movs	r0, r3
 800a500:	f001 fcd4 	bl	800beac <strtol>
 800a504:	0003      	movs	r3, r0
 800a506:	1ae3      	subs	r3, r4, r3
 800a508:	425a      	negs	r2, r3
 800a50a:	4153      	adcs	r3, r2
 800a50c:	b2db      	uxtb	r3, r3
}
 800a50e:	0018      	movs	r0, r3
 800a510:	46bd      	mov	sp, r7
 800a512:	b005      	add	sp, #20
 800a514:	bd90      	pop	{r4, r7, pc}
	...

0800a518 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a518:	b5b0      	push	{r4, r5, r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	000a      	movs	r2, r1
 800a522:	1cfb      	adds	r3, r7, #3
 800a524:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a526:	2308      	movs	r3, #8
 800a528:	18fa      	adds	r2, r7, r3
 800a52a:	492f      	ldr	r1, [pc, #188]	; (800a5e8 <nmea2decimal+0xd0>)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	0018      	movs	r0, r3
 800a530:	f001 fe72 	bl	800c218 <sscanf>
    min = deg / 100 ;
 800a534:	68b8      	ldr	r0, [r7, #8]
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	4b2c      	ldr	r3, [pc, #176]	; (800a5ec <nmea2decimal+0xd4>)
 800a53c:	f7f6 fc9c 	bl	8000e78 <__aeabi_ddiv>
 800a540:	0002      	movs	r2, r0
 800a542:	000b      	movs	r3, r1
 800a544:	613a      	str	r2, [r7, #16]
 800a546:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a548:	6938      	ldr	r0, [r7, #16]
 800a54a:	6979      	ldr	r1, [r7, #20]
 800a54c:	f7f7 fef0 	bl	8002330 <__aeabi_d2iz>
 800a550:	0003      	movs	r3, r0
 800a552:	0018      	movs	r0, r3
 800a554:	f7f7 ff22 	bl	800239c <__aeabi_i2d>
 800a558:	0002      	movs	r2, r0
 800a55a:	000b      	movs	r3, r1
 800a55c:	60ba      	str	r2, [r7, #8]
 800a55e:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6938      	ldr	r0, [r7, #16]
 800a566:	6979      	ldr	r1, [r7, #20]
 800a568:	f7f7 fb42 	bl	8001bf0 <__aeabi_dsub>
 800a56c:	0002      	movs	r2, r0
 800a56e:	000b      	movs	r3, r1
 800a570:	0010      	movs	r0, r2
 800a572:	0019      	movs	r1, r3
 800a574:	2200      	movs	r2, #0
 800a576:	4b1e      	ldr	r3, [pc, #120]	; (800a5f0 <nmea2decimal+0xd8>)
 800a578:	f7f7 f878 	bl	800166c <__aeabi_dmul>
 800a57c:	0002      	movs	r2, r0
 800a57e:	000b      	movs	r3, r1
 800a580:	613a      	str	r2, [r7, #16]
 800a582:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a584:	2200      	movs	r2, #0
 800a586:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <nmea2decimal+0xdc>)
 800a588:	6938      	ldr	r0, [r7, #16]
 800a58a:	6979      	ldr	r1, [r7, #20]
 800a58c:	f7f6 fc74 	bl	8000e78 <__aeabi_ddiv>
 800a590:	0002      	movs	r2, r0
 800a592:	000b      	movs	r3, r1
 800a594:	613a      	str	r2, [r7, #16]
 800a596:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a598:	1cfb      	adds	r3, r7, #3
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b53      	cmp	r3, #83	; 0x53
 800a59e:	d003      	beq.n	800a5a8 <nmea2decimal+0x90>
 800a5a0:	1cfb      	adds	r3, r7, #3
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	2b57      	cmp	r3, #87	; 0x57
 800a5a6:	d10e      	bne.n	800a5c6 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a5a8:	68b8      	ldr	r0, [r7, #8]
 800a5aa:	68f9      	ldr	r1, [r7, #12]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f7f6 f902 	bl	80007b8 <__aeabi_dadd>
 800a5b4:	0002      	movs	r2, r0
 800a5b6:	000b      	movs	r3, r1
 800a5b8:	0011      	movs	r1, r2
 800a5ba:	000c      	movs	r4, r1
 800a5bc:	2180      	movs	r1, #128	; 0x80
 800a5be:	0609      	lsls	r1, r1, #24
 800a5c0:	4059      	eors	r1, r3
 800a5c2:	000d      	movs	r5, r1
 800a5c4:	e009      	b.n	800a5da <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a5c6:	68b8      	ldr	r0, [r7, #8]
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f7f6 f8f3 	bl	80007b8 <__aeabi_dadd>
 800a5d2:	0002      	movs	r2, r0
 800a5d4:	000b      	movs	r3, r1
 800a5d6:	0014      	movs	r4, r2
 800a5d8:	001d      	movs	r5, r3
}
 800a5da:	0022      	movs	r2, r4
 800a5dc:	002b      	movs	r3, r5
 800a5de:	0010      	movs	r0, r2
 800a5e0:	0019      	movs	r1, r3
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b006      	add	sp, #24
 800a5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a5e8:	080148ec 	.word	0x080148ec
 800a5ec:	40590000 	.word	0x40590000
 800a5f0:	40240000 	.word	0x40240000
 800a5f4:	40180000 	.word	0x40180000

0800a5f8 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5fa:	b08d      	sub	sp, #52	; 0x34
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	212c      	movs	r1, #44	; 0x2c
 800a608:	0018      	movs	r0, r3
 800a60a:	f7ff fcc7 	bl	8009f9c <my_find_char_position>
 800a60e:	0003      	movs	r3, r0
 800a610:	001a      	movs	r2, r3
 800a612:	252f      	movs	r5, #47	; 0x2f
 800a614:	197b      	adds	r3, r7, r5
 800a616:	3201      	adds	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2202      	movs	r2, #2
 800a61e:	212c      	movs	r1, #44	; 0x2c
 800a620:	0018      	movs	r0, r3
 800a622:	f7ff fcbb 	bl	8009f9c <my_find_char_position>
 800a626:	0003      	movs	r3, r0
 800a628:	0019      	movs	r1, r3
 800a62a:	242e      	movs	r4, #46	; 0x2e
 800a62c:	193b      	adds	r3, r7, r4
 800a62e:	197a      	adds	r2, r7, r5
 800a630:	7812      	ldrb	r2, [r2, #0]
 800a632:	1a8a      	subs	r2, r1, r2
 800a634:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a636:	193b      	adds	r3, r7, r4
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	3301      	adds	r3, #1
 800a63c:	0018      	movs	r0, r3
 800a63e:	f000 fb3b 	bl	800acb8 <malloc>
 800a642:	0003      	movs	r3, r0
 800a644:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a646:	197b      	adds	r3, r7, r5
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	18d1      	adds	r1, r2, r3
 800a64e:	193b      	adds	r3, r7, r4
 800a650:	781a      	ldrb	r2, [r3, #0]
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	0018      	movs	r0, r3
 800a656:	f001 fe7c 	bl	800c352 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a65a:	193b      	adds	r3, r7, r4
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a660:	18d3      	adds	r3, r2, r3
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a666:	197b      	adds	r3, r7, r5
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	193b      	adds	r3, r7, r4
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	18d3      	adds	r3, r2, r3
 800a670:	3301      	adds	r3, #1
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	18d2      	adds	r2, r2, r3
 800a676:	2627      	movs	r6, #39	; 0x27
 800a678:	19bb      	adds	r3, r7, r6
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a67e:	19bb      	adds	r3, r7, r6
 800a680:	781a      	ldrb	r2, [r3, #0]
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	0011      	movs	r1, r2
 800a686:	0018      	movs	r0, r3
 800a688:	f7ff ff46 	bl	800a518 <nmea2decimal>
 800a68c:	0002      	movs	r2, r0
 800a68e:	000b      	movs	r3, r1
 800a690:	61ba      	str	r2, [r7, #24]
 800a692:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a696:	0018      	movs	r0, r3
 800a698:	f000 fb18 	bl	800accc <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a69c:	2200      	movs	r2, #0
 800a69e:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a6a0:	69b8      	ldr	r0, [r7, #24]
 800a6a2:	69f9      	ldr	r1, [r7, #28]
 800a6a4:	f7f6 ffe2 	bl	800166c <__aeabi_dmul>
 800a6a8:	0002      	movs	r2, r0
 800a6aa:	000b      	movs	r3, r1
 800a6ac:	0010      	movs	r0, r2
 800a6ae:	0019      	movs	r1, r3
 800a6b0:	f008 fb20 	bl	8012cf4 <round>
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	4b43      	ldr	r3, [pc, #268]	; (800a7c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a6b8:	f7f6 fbde 	bl	8000e78 <__aeabi_ddiv>
 800a6bc:	0002      	movs	r2, r0
 800a6be:	000b      	movs	r3, r1
 800a6c0:	61ba      	str	r2, [r7, #24]
 800a6c2:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	4b40      	ldr	r3, [pc, #256]	; (800a7c8 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a6c8:	69b8      	ldr	r0, [r7, #24]
 800a6ca:	69f9      	ldr	r1, [r7, #28]
 800a6cc:	f7f6 ffce 	bl	800166c <__aeabi_dmul>
 800a6d0:	0002      	movs	r2, r0
 800a6d2:	000b      	movs	r3, r1
 800a6d4:	0010      	movs	r0, r2
 800a6d6:	0019      	movs	r1, r3
 800a6d8:	f7f7 fe2a 	bl	8002330 <__aeabi_d2iz>
 800a6dc:	0002      	movs	r2, r0
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2203      	movs	r2, #3
 800a6e6:	212c      	movs	r1, #44	; 0x2c
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	f7ff fc57 	bl	8009f9c <my_find_char_position>
 800a6ee:	0003      	movs	r3, r0
 800a6f0:	001a      	movs	r2, r3
 800a6f2:	197b      	adds	r3, r7, r5
 800a6f4:	3201      	adds	r2, #1
 800a6f6:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2204      	movs	r2, #4
 800a6fc:	212c      	movs	r1, #44	; 0x2c
 800a6fe:	0018      	movs	r0, r3
 800a700:	f7ff fc4c 	bl	8009f9c <my_find_char_position>
 800a704:	0003      	movs	r3, r0
 800a706:	0019      	movs	r1, r3
 800a708:	193b      	adds	r3, r7, r4
 800a70a:	197a      	adds	r2, r7, r5
 800a70c:	7812      	ldrb	r2, [r2, #0]
 800a70e:	1a8a      	subs	r2, r1, r2
 800a710:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a712:	193b      	adds	r3, r7, r4
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	3301      	adds	r3, #1
 800a718:	0018      	movs	r0, r3
 800a71a:	f000 facd 	bl	800acb8 <malloc>
 800a71e:	0003      	movs	r3, r0
 800a720:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a722:	197b      	adds	r3, r7, r5
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	18d1      	adds	r1, r2, r3
 800a72a:	193b      	adds	r3, r7, r4
 800a72c:	781a      	ldrb	r2, [r3, #0]
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	0018      	movs	r0, r3
 800a732:	f001 fe0e 	bl	800c352 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a736:	193b      	adds	r3, r7, r4
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	18d3      	adds	r3, r2, r3
 800a73e:	2200      	movs	r2, #0
 800a740:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a742:	197b      	adds	r3, r7, r5
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	193b      	adds	r3, r7, r4
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	18d3      	adds	r3, r2, r3
 800a74c:	3301      	adds	r3, #1
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	18d2      	adds	r2, r2, r3
 800a752:	19bb      	adds	r3, r7, r6
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a758:	19bb      	adds	r3, r7, r6
 800a75a:	781a      	ldrb	r2, [r3, #0]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	0011      	movs	r1, r2
 800a760:	0018      	movs	r0, r3
 800a762:	f7ff fed9 	bl	800a518 <nmea2decimal>
 800a766:	0002      	movs	r2, r0
 800a768:	000b      	movs	r3, r1
 800a76a:	60ba      	str	r2, [r7, #8]
 800a76c:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	0018      	movs	r0, r3
 800a772:	f000 faab 	bl	800accc <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a776:	2200      	movs	r2, #0
 800a778:	4b12      	ldr	r3, [pc, #72]	; (800a7c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a77a:	68b8      	ldr	r0, [r7, #8]
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	f7f6 ff75 	bl	800166c <__aeabi_dmul>
 800a782:	0002      	movs	r2, r0
 800a784:	000b      	movs	r3, r1
 800a786:	0010      	movs	r0, r2
 800a788:	0019      	movs	r1, r3
 800a78a:	f008 fab3 	bl	8012cf4 <round>
 800a78e:	2200      	movs	r2, #0
 800a790:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a792:	f7f6 fb71 	bl	8000e78 <__aeabi_ddiv>
 800a796:	0002      	movs	r2, r0
 800a798:	000b      	movs	r3, r1
 800a79a:	60ba      	str	r2, [r7, #8]
 800a79c:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a7a2:	68b8      	ldr	r0, [r7, #8]
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	f7f6 ff61 	bl	800166c <__aeabi_dmul>
 800a7aa:	0002      	movs	r2, r0
 800a7ac:	000b      	movs	r3, r1
 800a7ae:	0010      	movs	r0, r2
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	f7f7 fdbd 	bl	8002330 <__aeabi_d2iz>
 800a7b6:	0002      	movs	r2, r0
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	605a      	str	r2, [r3, #4]
}
 800a7bc:	46c0      	nop			; (mov r8, r8)
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b00d      	add	sp, #52	; 0x34
 800a7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c4:	412e8480 	.word	0x412e8480
 800a7c8:	416312d0 	.word	0x416312d0

0800a7cc <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a7cc:	b5b0      	push	{r4, r5, r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a7d4:	240e      	movs	r4, #14
 800a7d6:	193b      	adds	r3, r7, r4
 800a7d8:	2200      	movs	r2, #0
 800a7da:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2203      	movs	r2, #3
 800a7e0:	212c      	movs	r1, #44	; 0x2c
 800a7e2:	0018      	movs	r0, r3
 800a7e4:	f7ff fbda 	bl	8009f9c <my_find_char_position>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	001a      	movs	r2, r3
 800a7ec:	2517      	movs	r5, #23
 800a7ee:	197b      	adds	r3, r7, r5
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a7f4:	2003      	movs	r0, #3
 800a7f6:	f000 fa5f 	bl	800acb8 <malloc>
 800a7fa:	0003      	movs	r3, r0
 800a7fc:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a7fe:	197b      	adds	r3, r7, r5
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	18d1      	adds	r1, r2, r3
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2202      	movs	r2, #2
 800a80a:	0018      	movs	r0, r3
 800a80c:	f001 fda1 	bl	800c352 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3302      	adds	r3, #2
 800a814:	2200      	movs	r2, #0
 800a816:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a818:	193a      	adds	r2, r7, r4
 800a81a:	4907      	ldr	r1, [pc, #28]	; (800a838 <my_nmea_get_gsv_tns+0x6c>)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	0018      	movs	r0, r3
 800a820:	f001 fcfa 	bl	800c218 <sscanf>
	free ( s ) ;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	0018      	movs	r0, r3
 800a828:	f000 fa50 	bl	800accc <free>
	return tns ;
 800a82c:	193b      	adds	r3, r7, r4
 800a82e:	881b      	ldrh	r3, [r3, #0]
}
 800a830:	0018      	movs	r0, r3
 800a832:	46bd      	mov	sp, r7
 800a834:	b006      	add	sp, #24
 800a836:	bdb0      	pop	{r4, r5, r7, pc}
 800a838:	080148f8 	.word	0x080148f8

0800a83c <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a83c:	b590      	push	{r4, r7, lr}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2209      	movs	r2, #9
 800a84a:	212c      	movs	r1, #44	; 0x2c
 800a84c:	0018      	movs	r0, r3
 800a84e:	f7ff fba5 	bl	8009f9c <my_find_char_position>
 800a852:	0003      	movs	r3, r0
 800a854:	001a      	movs	r2, r3
 800a856:	2417      	movs	r4, #23
 800a858:	193b      	adds	r3, r7, r4
 800a85a:	3205      	adds	r2, #5
 800a85c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a85e:	2003      	movs	r0, #3
 800a860:	f000 fa2a 	bl	800acb8 <malloc>
 800a864:	0003      	movs	r3, r0
 800a866:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a868:	193b      	adds	r3, r7, r4
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	18d1      	adds	r1, r2, r3
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2202      	movs	r2, #2
 800a874:	0018      	movs	r0, r3
 800a876:	f001 fd6c 	bl	800c352 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	3302      	adds	r3, #2
 800a87e:	2200      	movs	r2, #0
 800a880:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a882:	240e      	movs	r4, #14
 800a884:	193a      	adds	r2, r7, r4
 800a886:	4909      	ldr	r1, [pc, #36]	; (800a8ac <my_nmea_get_rmc_date_yy+0x70>)
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	0018      	movs	r0, r3
 800a88c:	f001 fcc4 	bl	800c218 <sscanf>
	free ( s ) ;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	0018      	movs	r0, r3
 800a894:	f000 fa1a 	bl	800accc <free>
	*yy = (uint8_t) temp ;
 800a898:	193b      	adds	r3, r7, r4
 800a89a:	881b      	ldrh	r3, [r3, #0]
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	701a      	strb	r2, [r3, #0]

}
 800a8a2:	46c0      	nop			; (mov r8, r8)
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b007      	add	sp, #28
 800a8a8:	bd90      	pop	{r4, r7, pc}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	080148f8 	.word	0x080148f8

0800a8b0 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a8b0:	b590      	push	{r4, r7, lr}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2209      	movs	r2, #9
 800a8be:	212c      	movs	r1, #44	; 0x2c
 800a8c0:	0018      	movs	r0, r3
 800a8c2:	f7ff fb6b 	bl	8009f9c <my_find_char_position>
 800a8c6:	0003      	movs	r3, r0
 800a8c8:	001a      	movs	r2, r3
 800a8ca:	2417      	movs	r4, #23
 800a8cc:	193b      	adds	r3, r7, r4
 800a8ce:	3203      	adds	r2, #3
 800a8d0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a8d2:	2003      	movs	r0, #3
 800a8d4:	f000 f9f0 	bl	800acb8 <malloc>
 800a8d8:	0003      	movs	r3, r0
 800a8da:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a8dc:	193b      	adds	r3, r7, r4
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	18d1      	adds	r1, r2, r3
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f001 fd32 	bl	800c352 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3302      	adds	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a8f6:	240e      	movs	r4, #14
 800a8f8:	193a      	adds	r2, r7, r4
 800a8fa:	4909      	ldr	r1, [pc, #36]	; (800a920 <my_nmea_get_rmc_date_mm+0x70>)
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	0018      	movs	r0, r3
 800a900:	f001 fc8a 	bl	800c218 <sscanf>
	free ( s ) ;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	0018      	movs	r0, r3
 800a908:	f000 f9e0 	bl	800accc <free>
	*mm = (uint8_t) temp ;
 800a90c:	193b      	adds	r3, r7, r4
 800a90e:	881b      	ldrh	r3, [r3, #0]
 800a910:	b2da      	uxtb	r2, r3
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	701a      	strb	r2, [r3, #0]

}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	46bd      	mov	sp, r7
 800a91a:	b007      	add	sp, #28
 800a91c:	bd90      	pop	{r4, r7, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	080148f8 	.word	0x080148f8

0800a924 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2209      	movs	r2, #9
 800a932:	212c      	movs	r1, #44	; 0x2c
 800a934:	0018      	movs	r0, r3
 800a936:	f7ff fb31 	bl	8009f9c <my_find_char_position>
 800a93a:	0003      	movs	r3, r0
 800a93c:	001a      	movs	r2, r3
 800a93e:	2417      	movs	r4, #23
 800a940:	193b      	adds	r3, r7, r4
 800a942:	3201      	adds	r2, #1
 800a944:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a946:	2003      	movs	r0, #3
 800a948:	f000 f9b6 	bl	800acb8 <malloc>
 800a94c:	0003      	movs	r3, r0
 800a94e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a950:	193b      	adds	r3, r7, r4
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	18d1      	adds	r1, r2, r3
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	2202      	movs	r2, #2
 800a95c:	0018      	movs	r0, r3
 800a95e:	f001 fcf8 	bl	800c352 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	3302      	adds	r3, #2
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a96a:	240e      	movs	r4, #14
 800a96c:	193a      	adds	r2, r7, r4
 800a96e:	4909      	ldr	r1, [pc, #36]	; (800a994 <my_nmea_get_rmc_date_dd+0x70>)
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	0018      	movs	r0, r3
 800a974:	f001 fc50 	bl	800c218 <sscanf>
	free ( s ) ;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	0018      	movs	r0, r3
 800a97c:	f000 f9a6 	bl	800accc <free>
	*dd = (uint8_t) temp ;
 800a980:	193b      	adds	r3, r7, r4
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b2da      	uxtb	r2, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	701a      	strb	r2, [r3, #0]

}
 800a98a:	46c0      	nop			; (mov r8, r8)
 800a98c:	46bd      	mov	sp, r7
 800a98e:	b007      	add	sp, #28
 800a990:	bd90      	pop	{r4, r7, pc}
 800a992:	46c0      	nop			; (mov r8, r8)
 800a994:	080148f8 	.word	0x080148f8

0800a998 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a998:	b590      	push	{r4, r7, lr}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	212c      	movs	r1, #44	; 0x2c
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	f7ff faf7 	bl	8009f9c <my_find_char_position>
 800a9ae:	0003      	movs	r3, r0
 800a9b0:	001a      	movs	r2, r3
 800a9b2:	2417      	movs	r4, #23
 800a9b4:	193b      	adds	r3, r7, r4
 800a9b6:	3201      	adds	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a9ba:	2003      	movs	r0, #3
 800a9bc:	f000 f97c 	bl	800acb8 <malloc>
 800a9c0:	0003      	movs	r3, r0
 800a9c2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a9c4:	193b      	adds	r3, r7, r4
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	18d1      	adds	r1, r2, r3
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f001 fcbe 	bl	800c352 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	3302      	adds	r3, #2
 800a9da:	2200      	movs	r2, #0
 800a9dc:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a9de:	240e      	movs	r4, #14
 800a9e0:	193a      	adds	r2, r7, r4
 800a9e2:	4909      	ldr	r1, [pc, #36]	; (800aa08 <my_nmea_get_rmc_utc_hh+0x70>)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	0018      	movs	r0, r3
 800a9e8:	f001 fc16 	bl	800c218 <sscanf>
	free ( s ) ;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	f000 f96c 	bl	800accc <free>
	*hh = (uint8_t) temp ;
 800a9f4:	193b      	adds	r3, r7, r4
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	701a      	strb	r2, [r3, #0]

}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b007      	add	sp, #28
 800aa04:	bd90      	pop	{r4, r7, pc}
 800aa06:	46c0      	nop			; (mov r8, r8)
 800aa08:	080148f8 	.word	0x080148f8

0800aa0c <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800aa0c:	b590      	push	{r4, r7, lr}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	212c      	movs	r1, #44	; 0x2c
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f7ff fabd 	bl	8009f9c <my_find_char_position>
 800aa22:	0003      	movs	r3, r0
 800aa24:	001a      	movs	r2, r3
 800aa26:	2417      	movs	r4, #23
 800aa28:	193b      	adds	r3, r7, r4
 800aa2a:	3203      	adds	r2, #3
 800aa2c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aa2e:	2003      	movs	r0, #3
 800aa30:	f000 f942 	bl	800acb8 <malloc>
 800aa34:	0003      	movs	r3, r0
 800aa36:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aa38:	193b      	adds	r3, r7, r4
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	18d1      	adds	r1, r2, r3
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	2202      	movs	r2, #2
 800aa44:	0018      	movs	r0, r3
 800aa46:	f001 fc84 	bl	800c352 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3302      	adds	r3, #2
 800aa4e:	2200      	movs	r2, #0
 800aa50:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aa52:	240e      	movs	r4, #14
 800aa54:	193a      	adds	r2, r7, r4
 800aa56:	4909      	ldr	r1, [pc, #36]	; (800aa7c <my_nmea_get_rmc_utc_mm+0x70>)
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f001 fbdc 	bl	800c218 <sscanf>
	free ( s ) ;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	0018      	movs	r0, r3
 800aa64:	f000 f932 	bl	800accc <free>
	*mm = (uint8_t) temp ;
 800aa68:	193b      	adds	r3, r7, r4
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	701a      	strb	r2, [r3, #0]

}
 800aa72:	46c0      	nop			; (mov r8, r8)
 800aa74:	46bd      	mov	sp, r7
 800aa76:	b007      	add	sp, #28
 800aa78:	bd90      	pop	{r4, r7, pc}
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	080148f8 	.word	0x080148f8

0800aa80 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800aa80:	b590      	push	{r4, r7, lr}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	212c      	movs	r1, #44	; 0x2c
 800aa90:	0018      	movs	r0, r3
 800aa92:	f7ff fa83 	bl	8009f9c <my_find_char_position>
 800aa96:	0003      	movs	r3, r0
 800aa98:	001a      	movs	r2, r3
 800aa9a:	2417      	movs	r4, #23
 800aa9c:	193b      	adds	r3, r7, r4
 800aa9e:	3205      	adds	r2, #5
 800aaa0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aaa2:	2003      	movs	r0, #3
 800aaa4:	f000 f908 	bl	800acb8 <malloc>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aaac:	193b      	adds	r3, r7, r4
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	18d1      	adds	r1, r2, r3
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	2202      	movs	r2, #2
 800aab8:	0018      	movs	r0, r3
 800aaba:	f001 fc4a 	bl	800c352 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3302      	adds	r3, #2
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aac6:	240e      	movs	r4, #14
 800aac8:	193a      	adds	r2, r7, r4
 800aaca:	4909      	ldr	r1, [pc, #36]	; (800aaf0 <my_nmea_get_rmc_utc_ss+0x70>)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	0018      	movs	r0, r3
 800aad0:	f001 fba2 	bl	800c218 <sscanf>
	free ( s ) ;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	0018      	movs	r0, r3
 800aad8:	f000 f8f8 	bl	800accc <free>
	*ss = (uint8_t) temp ;
 800aadc:	193b      	adds	r3, r7, r4
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	701a      	strb	r2, [r3, #0]

}
 800aae6:	46c0      	nop			; (mov r8, r8)
 800aae8:	46bd      	mov	sp, r7
 800aaea:	b007      	add	sp, #28
 800aaec:	bd90      	pop	{r4, r7, pc}
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	080148f8 	.word	0x080148f8

0800aaf4 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800aaf4:	b590      	push	{r4, r7, lr}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	212c      	movs	r1, #44	; 0x2c
 800ab04:	0018      	movs	r0, r3
 800ab06:	f7ff fa49 	bl	8009f9c <my_find_char_position>
 800ab0a:	0003      	movs	r3, r0
 800ab0c:	001a      	movs	r2, r3
 800ab0e:	240f      	movs	r4, #15
 800ab10:	193b      	adds	r3, r7, r4
 800ab12:	3208      	adds	r2, #8
 800ab14:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab16:	2004      	movs	r0, #4
 800ab18:	f000 f8ce 	bl	800acb8 <malloc>
 800ab1c:	0003      	movs	r3, r0
 800ab1e:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab20:	193b      	adds	r3, r7, r4
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	18d1      	adds	r1, r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f001 fc10 	bl	800c352 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	3303      	adds	r3, #3
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	4906      	ldr	r1, [pc, #24]	; (800ab58 <my_nmea_get_rmc_utc_sss+0x64>)
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	0018      	movs	r0, r3
 800ab42:	f001 fb69 	bl	800c218 <sscanf>
	free ( s ) ;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 f8bf 	bl	800accc <free>
}
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	46bd      	mov	sp, r7
 800ab52:	b005      	add	sp, #20
 800ab54:	bd90      	pop	{r4, r7, pc}
 800ab56:	46c0      	nop			; (mov r8, r8)
 800ab58:	080148fc 	.word	0x080148fc

0800ab5c <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	0018      	movs	r0, r3
 800ab68:	f7f5 facc 	bl	8000104 <strlen>
 800ab6c:	0003      	movs	r3, r0
 800ab6e:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800ab70:	2317      	movs	r3, #23
 800ab72:	18fb      	adds	r3, r7, r3
 800ab74:	2200      	movs	r2, #0
 800ab76:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800ab78:	2316      	movs	r3, #22
 800ab7a:	18fb      	adds	r3, r7, r3
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d902      	bls.n	800ab8c <my_tracker_api_is_cmd+0x30>
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d901      	bls.n	800ab90 <my_tracker_api_is_cmd+0x34>
		return false ;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e04b      	b.n	800ac28 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800ab90:	2317      	movs	r3, #23
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	2200      	movs	r2, #0
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	e025      	b.n	800abe6 <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800ab9a:	2317      	movs	r3, #23
 800ab9c:	18fb      	adds	r3, r7, r3
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	18d3      	adds	r3, r2, r3
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b2c      	cmp	r3, #44	; 0x2c
 800aba8:	d106      	bne.n	800abb8 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800abaa:	2116      	movs	r1, #22
 800abac:	187b      	adds	r3, r7, r1
 800abae:	781a      	ldrb	r2, [r3, #0]
 800abb0:	187b      	adds	r3, r7, r1
 800abb2:	3201      	adds	r2, #1
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e010      	b.n	800abda <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800abb8:	2117      	movs	r1, #23
 800abba:	187b      	adds	r3, r7, r1
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	18d3      	adds	r3, r2, r3
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b2f      	cmp	r3, #47	; 0x2f
 800abc6:	d906      	bls.n	800abd6 <my_tracker_api_is_cmd+0x7a>
 800abc8:	187b      	adds	r3, r7, r1
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	18d3      	adds	r3, r2, r3
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b39      	cmp	r3, #57	; 0x39
 800abd4:	d901      	bls.n	800abda <my_tracker_api_is_cmd+0x7e>
			return false;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e026      	b.n	800ac28 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800abda:	2117      	movs	r1, #23
 800abdc:	187b      	adds	r3, r7, r1
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	187b      	adds	r3, r7, r1
 800abe2:	3201      	adds	r2, #1
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	2317      	movs	r3, #23
 800abe8:	18fb      	adds	r3, r7, r3
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d8d3      	bhi.n	800ab9a <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800abf2:	2316      	movs	r3, #22
 800abf4:	18fb      	adds	r3, r7, r3
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d901      	bls.n	800ac00 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800abfc:	2300      	movs	r3, #0
 800abfe:	e013      	b.n	800ac28 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	212c      	movs	r1, #44	; 0x2c
 800ac04:	0018      	movs	r0, r3
 800ac06:	f001 fb85 	bl	800c314 <strchr>
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d802      	bhi.n	800ac22 <my_tracker_api_is_cmd+0xc6>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <my_tracker_api_is_cmd+0xca>
		return false ;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e000      	b.n	800ac28 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800ac26:	2301      	movs	r3, #1
}
 800ac28:	0018      	movs	r0, r3
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b006      	add	sp, #24
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <my_tracker_api_parse_cmd+0x84>)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	0011      	movs	r1, r2
 800ac52:	0018      	movs	r0, r3
 800ac54:	f001 fb92 	bl	800c37c <strtok>
 800ac58:	0003      	movs	r3, r0
 800ac5a:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	0018      	movs	r0, r3
 800ac60:	f7ff fb3e 	bl	800a2e0 <my_conv_string_2_uint32_t>
 800ac64:	0003      	movs	r3, r0
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800ac6c:	4b11      	ldr	r3, [pc, #68]	; (800acb4 <my_tracker_api_parse_cmd+0x84>)
 800ac6e:	0019      	movs	r1, r3
 800ac70:	2000      	movs	r0, #0
 800ac72:	f001 fb83 	bl	800c37c <strtok>
 800ac76:	0003      	movs	r3, r0
 800ac78:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f7ff fb2f 	bl	800a2e0 <my_conv_string_2_uint32_t>
 800ac82:	0002      	movs	r2, r0
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <my_tracker_api_parse_cmd+0x84>)
 800ac8a:	0019      	movs	r1, r3
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f001 fb75 	bl	800c37c <strtok>
 800ac92:	0003      	movs	r3, r0
 800ac94:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <my_tracker_api_parse_cmd+0x74>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800aca4:	2300      	movs	r3, #0
 800aca6:	e000      	b.n	800acaa <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800aca8:	2301      	movs	r3, #1
}
 800acaa:	0018      	movs	r0, r3
 800acac:	46bd      	mov	sp, r7
 800acae:	b004      	add	sp, #16
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	08014900 	.word	0x08014900

0800acb8 <malloc>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <malloc+0x10>)
 800acbc:	0001      	movs	r1, r0
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	f000 f80e 	bl	800ace0 <_malloc_r>
 800acc4:	bd10      	pop	{r4, pc}
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	200006d0 	.word	0x200006d0

0800accc <free>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4b03      	ldr	r3, [pc, #12]	; (800acdc <free+0x10>)
 800acd0:	0001      	movs	r1, r0
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	f001 fcbe 	bl	800c654 <_free_r>
 800acd8:	bd10      	pop	{r4, pc}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	200006d0 	.word	0x200006d0

0800ace0 <_malloc_r>:
 800ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace2:	000d      	movs	r5, r1
 800ace4:	b087      	sub	sp, #28
 800ace6:	350b      	adds	r5, #11
 800ace8:	9001      	str	r0, [sp, #4]
 800acea:	2d16      	cmp	r5, #22
 800acec:	d908      	bls.n	800ad00 <_malloc_r+0x20>
 800acee:	2207      	movs	r2, #7
 800acf0:	4395      	bics	r5, r2
 800acf2:	d506      	bpl.n	800ad02 <_malloc_r+0x22>
 800acf4:	230c      	movs	r3, #12
 800acf6:	9a01      	ldr	r2, [sp, #4]
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	2000      	movs	r0, #0
 800acfc:	b007      	add	sp, #28
 800acfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad00:	2510      	movs	r5, #16
 800ad02:	42a9      	cmp	r1, r5
 800ad04:	d8f6      	bhi.n	800acf4 <_malloc_r+0x14>
 800ad06:	9801      	ldr	r0, [sp, #4]
 800ad08:	f000 f9fe 	bl	800b108 <__malloc_lock>
 800ad0c:	23fc      	movs	r3, #252	; 0xfc
 800ad0e:	4ebe      	ldr	r6, [pc, #760]	; (800b008 <_malloc_r+0x328>)
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	429d      	cmp	r5, r3
 800ad14:	d219      	bcs.n	800ad4a <_malloc_r+0x6a>
 800ad16:	002a      	movs	r2, r5
 800ad18:	3208      	adds	r2, #8
 800ad1a:	18b2      	adds	r2, r6, r2
 800ad1c:	0011      	movs	r1, r2
 800ad1e:	6854      	ldr	r4, [r2, #4]
 800ad20:	3908      	subs	r1, #8
 800ad22:	08eb      	lsrs	r3, r5, #3
 800ad24:	428c      	cmp	r4, r1
 800ad26:	d103      	bne.n	800ad30 <_malloc_r+0x50>
 800ad28:	68d4      	ldr	r4, [r2, #12]
 800ad2a:	3302      	adds	r3, #2
 800ad2c:	42a2      	cmp	r2, r4
 800ad2e:	d022      	beq.n	800ad76 <_malloc_r+0x96>
 800ad30:	2203      	movs	r2, #3
 800ad32:	6863      	ldr	r3, [r4, #4]
 800ad34:	68a1      	ldr	r1, [r4, #8]
 800ad36:	4393      	bics	r3, r2
 800ad38:	68e2      	ldr	r2, [r4, #12]
 800ad3a:	18e3      	adds	r3, r4, r3
 800ad3c:	60ca      	str	r2, [r1, #12]
 800ad3e:	6091      	str	r1, [r2, #8]
 800ad40:	2201      	movs	r2, #1
 800ad42:	6859      	ldr	r1, [r3, #4]
 800ad44:	430a      	orrs	r2, r1
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	e02a      	b.n	800ada0 <_malloc_r+0xc0>
 800ad4a:	233f      	movs	r3, #63	; 0x3f
 800ad4c:	0a6a      	lsrs	r2, r5, #9
 800ad4e:	d003      	beq.n	800ad58 <_malloc_r+0x78>
 800ad50:	2a04      	cmp	r2, #4
 800ad52:	d82b      	bhi.n	800adac <_malloc_r+0xcc>
 800ad54:	09ab      	lsrs	r3, r5, #6
 800ad56:	3338      	adds	r3, #56	; 0x38
 800ad58:	2203      	movs	r2, #3
 800ad5a:	4694      	mov	ip, r2
 800ad5c:	00d9      	lsls	r1, r3, #3
 800ad5e:	1989      	adds	r1, r1, r6
 800ad60:	68cc      	ldr	r4, [r1, #12]
 800ad62:	428c      	cmp	r4, r1
 800ad64:	d006      	beq.n	800ad74 <_malloc_r+0x94>
 800ad66:	4660      	mov	r0, ip
 800ad68:	6862      	ldr	r2, [r4, #4]
 800ad6a:	4382      	bics	r2, r0
 800ad6c:	1b57      	subs	r7, r2, r5
 800ad6e:	2f0f      	cmp	r7, #15
 800ad70:	dd34      	ble.n	800addc <_malloc_r+0xfc>
 800ad72:	3b01      	subs	r3, #1
 800ad74:	3301      	adds	r3, #1
 800ad76:	6934      	ldr	r4, [r6, #16]
 800ad78:	49a4      	ldr	r1, [pc, #656]	; (800b00c <_malloc_r+0x32c>)
 800ad7a:	428c      	cmp	r4, r1
 800ad7c:	d055      	beq.n	800ae2a <_malloc_r+0x14a>
 800ad7e:	2003      	movs	r0, #3
 800ad80:	6862      	ldr	r2, [r4, #4]
 800ad82:	4382      	bics	r2, r0
 800ad84:	1b50      	subs	r0, r2, r5
 800ad86:	280f      	cmp	r0, #15
 800ad88:	dd36      	ble.n	800adf8 <_malloc_r+0x118>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	1967      	adds	r7, r4, r5
 800ad8e:	431d      	orrs	r5, r3
 800ad90:	4303      	orrs	r3, r0
 800ad92:	6065      	str	r5, [r4, #4]
 800ad94:	6177      	str	r7, [r6, #20]
 800ad96:	6137      	str	r7, [r6, #16]
 800ad98:	60f9      	str	r1, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	607b      	str	r3, [r7, #4]
 800ad9e:	50a0      	str	r0, [r4, r2]
 800ada0:	9801      	ldr	r0, [sp, #4]
 800ada2:	f000 f9b9 	bl	800b118 <__malloc_unlock>
 800ada6:	0020      	movs	r0, r4
 800ada8:	3008      	adds	r0, #8
 800adaa:	e7a7      	b.n	800acfc <_malloc_r+0x1c>
 800adac:	2a14      	cmp	r2, #20
 800adae:	d802      	bhi.n	800adb6 <_malloc_r+0xd6>
 800adb0:	0013      	movs	r3, r2
 800adb2:	335b      	adds	r3, #91	; 0x5b
 800adb4:	e7d0      	b.n	800ad58 <_malloc_r+0x78>
 800adb6:	2a54      	cmp	r2, #84	; 0x54
 800adb8:	d802      	bhi.n	800adc0 <_malloc_r+0xe0>
 800adba:	0b2b      	lsrs	r3, r5, #12
 800adbc:	336e      	adds	r3, #110	; 0x6e
 800adbe:	e7cb      	b.n	800ad58 <_malloc_r+0x78>
 800adc0:	23aa      	movs	r3, #170	; 0xaa
 800adc2:	005b      	lsls	r3, r3, #1
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d802      	bhi.n	800adce <_malloc_r+0xee>
 800adc8:	0beb      	lsrs	r3, r5, #15
 800adca:	3377      	adds	r3, #119	; 0x77
 800adcc:	e7c4      	b.n	800ad58 <_malloc_r+0x78>
 800adce:	4990      	ldr	r1, [pc, #576]	; (800b010 <_malloc_r+0x330>)
 800add0:	237e      	movs	r3, #126	; 0x7e
 800add2:	428a      	cmp	r2, r1
 800add4:	d8c0      	bhi.n	800ad58 <_malloc_r+0x78>
 800add6:	0cab      	lsrs	r3, r5, #18
 800add8:	337c      	adds	r3, #124	; 0x7c
 800adda:	e7bd      	b.n	800ad58 <_malloc_r+0x78>
 800addc:	68e0      	ldr	r0, [r4, #12]
 800adde:	2f00      	cmp	r7, #0
 800ade0:	db08      	blt.n	800adf4 <_malloc_r+0x114>
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	60d8      	str	r0, [r3, #12]
 800ade6:	6083      	str	r3, [r0, #8]
 800ade8:	2301      	movs	r3, #1
 800adea:	18a2      	adds	r2, r4, r2
 800adec:	6851      	ldr	r1, [r2, #4]
 800adee:	430b      	orrs	r3, r1
 800adf0:	6053      	str	r3, [r2, #4]
 800adf2:	e7d5      	b.n	800ada0 <_malloc_r+0xc0>
 800adf4:	0004      	movs	r4, r0
 800adf6:	e7b4      	b.n	800ad62 <_malloc_r+0x82>
 800adf8:	6171      	str	r1, [r6, #20]
 800adfa:	6131      	str	r1, [r6, #16]
 800adfc:	2800      	cmp	r0, #0
 800adfe:	daf3      	bge.n	800ade8 <_malloc_r+0x108>
 800ae00:	6871      	ldr	r1, [r6, #4]
 800ae02:	468c      	mov	ip, r1
 800ae04:	2180      	movs	r1, #128	; 0x80
 800ae06:	0089      	lsls	r1, r1, #2
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	d300      	bcc.n	800ae0e <_malloc_r+0x12e>
 800ae0c:	e08c      	b.n	800af28 <_malloc_r+0x248>
 800ae0e:	08d1      	lsrs	r1, r2, #3
 800ae10:	0950      	lsrs	r0, r2, #5
 800ae12:	2201      	movs	r2, #1
 800ae14:	4082      	lsls	r2, r0
 800ae16:	4660      	mov	r0, ip
 800ae18:	4302      	orrs	r2, r0
 800ae1a:	6072      	str	r2, [r6, #4]
 800ae1c:	00ca      	lsls	r2, r1, #3
 800ae1e:	1992      	adds	r2, r2, r6
 800ae20:	6891      	ldr	r1, [r2, #8]
 800ae22:	60e2      	str	r2, [r4, #12]
 800ae24:	60a1      	str	r1, [r4, #8]
 800ae26:	6094      	str	r4, [r2, #8]
 800ae28:	60cc      	str	r4, [r1, #12]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	4876      	ldr	r0, [pc, #472]	; (800b008 <_malloc_r+0x328>)
 800ae2e:	1099      	asrs	r1, r3, #2
 800ae30:	408a      	lsls	r2, r1
 800ae32:	6841      	ldr	r1, [r0, #4]
 800ae34:	4291      	cmp	r1, r2
 800ae36:	d328      	bcc.n	800ae8a <_malloc_r+0x1aa>
 800ae38:	420a      	tst	r2, r1
 800ae3a:	d105      	bne.n	800ae48 <_malloc_r+0x168>
 800ae3c:	2403      	movs	r4, #3
 800ae3e:	43a3      	bics	r3, r4
 800ae40:	0052      	lsls	r2, r2, #1
 800ae42:	3304      	adds	r3, #4
 800ae44:	420a      	tst	r2, r1
 800ae46:	d0fb      	beq.n	800ae40 <_malloc_r+0x160>
 800ae48:	496f      	ldr	r1, [pc, #444]	; (800b008 <_malloc_r+0x328>)
 800ae4a:	9104      	str	r1, [sp, #16]
 800ae4c:	00d9      	lsls	r1, r3, #3
 800ae4e:	1841      	adds	r1, r0, r1
 800ae50:	468c      	mov	ip, r1
 800ae52:	000f      	movs	r7, r1
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	68fc      	ldr	r4, [r7, #12]
 800ae58:	42bc      	cmp	r4, r7
 800ae5a:	d000      	beq.n	800ae5e <_malloc_r+0x17e>
 800ae5c:	e09b      	b.n	800af96 <_malloc_r+0x2b6>
 800ae5e:	2403      	movs	r4, #3
 800ae60:	9902      	ldr	r1, [sp, #8]
 800ae62:	3708      	adds	r7, #8
 800ae64:	3101      	adds	r1, #1
 800ae66:	9102      	str	r1, [sp, #8]
 800ae68:	4221      	tst	r1, r4
 800ae6a:	d1f4      	bne.n	800ae56 <_malloc_r+0x176>
 800ae6c:	2103      	movs	r1, #3
 800ae6e:	420b      	tst	r3, r1
 800ae70:	d000      	beq.n	800ae74 <_malloc_r+0x194>
 800ae72:	e0b7      	b.n	800afe4 <_malloc_r+0x304>
 800ae74:	6843      	ldr	r3, [r0, #4]
 800ae76:	4393      	bics	r3, r2
 800ae78:	6043      	str	r3, [r0, #4]
 800ae7a:	9b04      	ldr	r3, [sp, #16]
 800ae7c:	0052      	lsls	r2, r2, #1
 800ae7e:	6859      	ldr	r1, [r3, #4]
 800ae80:	4291      	cmp	r1, r2
 800ae82:	d302      	bcc.n	800ae8a <_malloc_r+0x1aa>
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	d000      	beq.n	800ae8a <_malloc_r+0x1aa>
 800ae88:	e0bb      	b.n	800b002 <_malloc_r+0x322>
 800ae8a:	2203      	movs	r2, #3
 800ae8c:	6883      	ldr	r3, [r0, #8]
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	4393      	bics	r3, r2
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	42ab      	cmp	r3, r5
 800ae98:	d303      	bcc.n	800aea2 <_malloc_r+0x1c2>
 800ae9a:	1b59      	subs	r1, r3, r5
 800ae9c:	290f      	cmp	r1, #15
 800ae9e:	dd00      	ble.n	800aea2 <_malloc_r+0x1c2>
 800aea0:	e123      	b.n	800b0ea <_malloc_r+0x40a>
 800aea2:	9b02      	ldr	r3, [sp, #8]
 800aea4:	9a03      	ldr	r2, [sp, #12]
 800aea6:	2008      	movs	r0, #8
 800aea8:	189e      	adds	r6, r3, r2
 800aeaa:	4b5a      	ldr	r3, [pc, #360]	; (800b014 <_malloc_r+0x334>)
 800aeac:	681f      	ldr	r7, [r3, #0]
 800aeae:	f001 fb4b 	bl	800c548 <sysconf>
 800aeb2:	4b59      	ldr	r3, [pc, #356]	; (800b018 <_malloc_r+0x338>)
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	197f      	adds	r7, r7, r5
 800aeba:	9004      	str	r0, [sp, #16]
 800aebc:	3301      	adds	r3, #1
 800aebe:	d003      	beq.n	800aec8 <_malloc_r+0x1e8>
 800aec0:	1e7b      	subs	r3, r7, #1
 800aec2:	181b      	adds	r3, r3, r0
 800aec4:	4247      	negs	r7, r0
 800aec6:	401f      	ands	r7, r3
 800aec8:	0039      	movs	r1, r7
 800aeca:	9801      	ldr	r0, [sp, #4]
 800aecc:	f001 fae8 	bl	800c4a0 <_sbrk_r>
 800aed0:	0004      	movs	r4, r0
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d100      	bne.n	800aed8 <_malloc_r+0x1f8>
 800aed6:	e0de      	b.n	800b096 <_malloc_r+0x3b6>
 800aed8:	4286      	cmp	r6, r0
 800aeda:	d904      	bls.n	800aee6 <_malloc_r+0x206>
 800aedc:	4b4a      	ldr	r3, [pc, #296]	; (800b008 <_malloc_r+0x328>)
 800aede:	9a02      	ldr	r2, [sp, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d000      	beq.n	800aee6 <_malloc_r+0x206>
 800aee4:	e0d7      	b.n	800b096 <_malloc_r+0x3b6>
 800aee6:	4a4d      	ldr	r2, [pc, #308]	; (800b01c <_malloc_r+0x33c>)
 800aee8:	6813      	ldr	r3, [r2, #0]
 800aeea:	18fb      	adds	r3, r7, r3
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	9a04      	ldr	r2, [sp, #16]
 800aef0:	3a01      	subs	r2, #1
 800aef2:	42a6      	cmp	r6, r4
 800aef4:	d000      	beq.n	800aef8 <_malloc_r+0x218>
 800aef6:	e097      	b.n	800b028 <_malloc_r+0x348>
 800aef8:	4216      	tst	r6, r2
 800aefa:	d000      	beq.n	800aefe <_malloc_r+0x21e>
 800aefc:	e094      	b.n	800b028 <_malloc_r+0x348>
 800aefe:	4b42      	ldr	r3, [pc, #264]	; (800b008 <_malloc_r+0x328>)
 800af00:	689a      	ldr	r2, [r3, #8]
 800af02:	9b03      	ldr	r3, [sp, #12]
 800af04:	19df      	adds	r7, r3, r7
 800af06:	2301      	movs	r3, #1
 800af08:	433b      	orrs	r3, r7
 800af0a:	6053      	str	r3, [r2, #4]
 800af0c:	4b43      	ldr	r3, [pc, #268]	; (800b01c <_malloc_r+0x33c>)
 800af0e:	4a44      	ldr	r2, [pc, #272]	; (800b020 <_malloc_r+0x340>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6811      	ldr	r1, [r2, #0]
 800af14:	428b      	cmp	r3, r1
 800af16:	d900      	bls.n	800af1a <_malloc_r+0x23a>
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	4a42      	ldr	r2, [pc, #264]	; (800b024 <_malloc_r+0x344>)
 800af1c:	6811      	ldr	r1, [r2, #0]
 800af1e:	428b      	cmp	r3, r1
 800af20:	d800      	bhi.n	800af24 <_malloc_r+0x244>
 800af22:	e0b8      	b.n	800b096 <_malloc_r+0x3b6>
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	e0b6      	b.n	800b096 <_malloc_r+0x3b6>
 800af28:	0a50      	lsrs	r0, r2, #9
 800af2a:	2804      	cmp	r0, #4
 800af2c:	d811      	bhi.n	800af52 <_malloc_r+0x272>
 800af2e:	0991      	lsrs	r1, r2, #6
 800af30:	3138      	adds	r1, #56	; 0x38
 800af32:	00cf      	lsls	r7, r1, #3
 800af34:	19bf      	adds	r7, r7, r6
 800af36:	68b8      	ldr	r0, [r7, #8]
 800af38:	4287      	cmp	r7, r0
 800af3a:	d125      	bne.n	800af88 <_malloc_r+0x2a8>
 800af3c:	2201      	movs	r2, #1
 800af3e:	1089      	asrs	r1, r1, #2
 800af40:	408a      	lsls	r2, r1
 800af42:	4661      	mov	r1, ip
 800af44:	430a      	orrs	r2, r1
 800af46:	6072      	str	r2, [r6, #4]
 800af48:	60e7      	str	r7, [r4, #12]
 800af4a:	60a0      	str	r0, [r4, #8]
 800af4c:	60bc      	str	r4, [r7, #8]
 800af4e:	60c4      	str	r4, [r0, #12]
 800af50:	e76b      	b.n	800ae2a <_malloc_r+0x14a>
 800af52:	2814      	cmp	r0, #20
 800af54:	d802      	bhi.n	800af5c <_malloc_r+0x27c>
 800af56:	0001      	movs	r1, r0
 800af58:	315b      	adds	r1, #91	; 0x5b
 800af5a:	e7ea      	b.n	800af32 <_malloc_r+0x252>
 800af5c:	2854      	cmp	r0, #84	; 0x54
 800af5e:	d802      	bhi.n	800af66 <_malloc_r+0x286>
 800af60:	0b11      	lsrs	r1, r2, #12
 800af62:	316e      	adds	r1, #110	; 0x6e
 800af64:	e7e5      	b.n	800af32 <_malloc_r+0x252>
 800af66:	21aa      	movs	r1, #170	; 0xaa
 800af68:	0049      	lsls	r1, r1, #1
 800af6a:	4288      	cmp	r0, r1
 800af6c:	d802      	bhi.n	800af74 <_malloc_r+0x294>
 800af6e:	0bd1      	lsrs	r1, r2, #15
 800af70:	3177      	adds	r1, #119	; 0x77
 800af72:	e7de      	b.n	800af32 <_malloc_r+0x252>
 800af74:	4f26      	ldr	r7, [pc, #152]	; (800b010 <_malloc_r+0x330>)
 800af76:	217e      	movs	r1, #126	; 0x7e
 800af78:	42b8      	cmp	r0, r7
 800af7a:	d8da      	bhi.n	800af32 <_malloc_r+0x252>
 800af7c:	0c91      	lsrs	r1, r2, #18
 800af7e:	317c      	adds	r1, #124	; 0x7c
 800af80:	e7d7      	b.n	800af32 <_malloc_r+0x252>
 800af82:	6880      	ldr	r0, [r0, #8]
 800af84:	4287      	cmp	r7, r0
 800af86:	d004      	beq.n	800af92 <_malloc_r+0x2b2>
 800af88:	2603      	movs	r6, #3
 800af8a:	6841      	ldr	r1, [r0, #4]
 800af8c:	43b1      	bics	r1, r6
 800af8e:	4291      	cmp	r1, r2
 800af90:	d8f7      	bhi.n	800af82 <_malloc_r+0x2a2>
 800af92:	68c7      	ldr	r7, [r0, #12]
 800af94:	e7d8      	b.n	800af48 <_malloc_r+0x268>
 800af96:	2603      	movs	r6, #3
 800af98:	6861      	ldr	r1, [r4, #4]
 800af9a:	43b1      	bics	r1, r6
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	68e6      	ldr	r6, [r4, #12]
 800afa0:	1b49      	subs	r1, r1, r5
 800afa2:	290f      	cmp	r1, #15
 800afa4:	dd10      	ble.n	800afc8 <_malloc_r+0x2e8>
 800afa6:	2201      	movs	r2, #1
 800afa8:	1963      	adds	r3, r4, r5
 800afaa:	4315      	orrs	r5, r2
 800afac:	6065      	str	r5, [r4, #4]
 800afae:	68a5      	ldr	r5, [r4, #8]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	60ee      	str	r6, [r5, #12]
 800afb4:	60b5      	str	r5, [r6, #8]
 800afb6:	6143      	str	r3, [r0, #20]
 800afb8:	6103      	str	r3, [r0, #16]
 800afba:	4814      	ldr	r0, [pc, #80]	; (800b00c <_malloc_r+0x32c>)
 800afbc:	605a      	str	r2, [r3, #4]
 800afbe:	60d8      	str	r0, [r3, #12]
 800afc0:	6098      	str	r0, [r3, #8]
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	50e1      	str	r1, [r4, r3]
 800afc6:	e6eb      	b.n	800ada0 <_malloc_r+0xc0>
 800afc8:	2900      	cmp	r1, #0
 800afca:	db09      	blt.n	800afe0 <_malloc_r+0x300>
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	18e1      	adds	r1, r4, r3
 800afd0:	2301      	movs	r3, #1
 800afd2:	684a      	ldr	r2, [r1, #4]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	604b      	str	r3, [r1, #4]
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	60de      	str	r6, [r3, #12]
 800afdc:	60b3      	str	r3, [r6, #8]
 800afde:	e6df      	b.n	800ada0 <_malloc_r+0xc0>
 800afe0:	0034      	movs	r4, r6
 800afe2:	e739      	b.n	800ae58 <_malloc_r+0x178>
 800afe4:	2108      	movs	r1, #8
 800afe6:	4249      	negs	r1, r1
 800afe8:	448c      	add	ip, r1
 800afea:	4661      	mov	r1, ip
 800afec:	6889      	ldr	r1, [r1, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	4561      	cmp	r1, ip
 800aff2:	d100      	bne.n	800aff6 <_malloc_r+0x316>
 800aff4:	e73a      	b.n	800ae6c <_malloc_r+0x18c>
 800aff6:	e740      	b.n	800ae7a <_malloc_r+0x19a>
 800aff8:	3304      	adds	r3, #4
 800affa:	0052      	lsls	r2, r2, #1
 800affc:	420a      	tst	r2, r1
 800affe:	d0fb      	beq.n	800aff8 <_malloc_r+0x318>
 800b000:	e724      	b.n	800ae4c <_malloc_r+0x16c>
 800b002:	9b02      	ldr	r3, [sp, #8]
 800b004:	e7fa      	b.n	800affc <_malloc_r+0x31c>
 800b006:	46c0      	nop			; (mov r8, r8)
 800b008:	20000028 	.word	0x20000028
 800b00c:	20000030 	.word	0x20000030
 800b010:	00000554 	.word	0x00000554
 800b014:	20000c68 	.word	0x20000c68
 800b018:	20000430 	.word	0x20000430
 800b01c:	20000c38 	.word	0x20000c38
 800b020:	20000c60 	.word	0x20000c60
 800b024:	20000c64 	.word	0x20000c64
 800b028:	4934      	ldr	r1, [pc, #208]	; (800b0fc <_malloc_r+0x41c>)
 800b02a:	6808      	ldr	r0, [r1, #0]
 800b02c:	3001      	adds	r0, #1
 800b02e:	d140      	bne.n	800b0b2 <_malloc_r+0x3d2>
 800b030:	600c      	str	r4, [r1, #0]
 800b032:	2107      	movs	r1, #7
 800b034:	0026      	movs	r6, r4
 800b036:	2300      	movs	r3, #0
 800b038:	400e      	ands	r6, r1
 800b03a:	420c      	tst	r4, r1
 800b03c:	d002      	beq.n	800b044 <_malloc_r+0x364>
 800b03e:	3308      	adds	r3, #8
 800b040:	1b9b      	subs	r3, r3, r6
 800b042:	18e4      	adds	r4, r4, r3
 800b044:	19e1      	adds	r1, r4, r7
 800b046:	9105      	str	r1, [sp, #20]
 800b048:	9f05      	ldr	r7, [sp, #20]
 800b04a:	9904      	ldr	r1, [sp, #16]
 800b04c:	4017      	ands	r7, r2
 800b04e:	18cb      	adds	r3, r1, r3
 800b050:	1bdf      	subs	r7, r3, r7
 800b052:	4017      	ands	r7, r2
 800b054:	0039      	movs	r1, r7
 800b056:	9801      	ldr	r0, [sp, #4]
 800b058:	f001 fa22 	bl	800c4a0 <_sbrk_r>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d107      	bne.n	800b070 <_malloc_r+0x390>
 800b060:	1e37      	subs	r7, r6, #0
 800b062:	9805      	ldr	r0, [sp, #20]
 800b064:	d004      	beq.n	800b070 <_malloc_r+0x390>
 800b066:	0030      	movs	r0, r6
 800b068:	2700      	movs	r7, #0
 800b06a:	9b05      	ldr	r3, [sp, #20]
 800b06c:	3808      	subs	r0, #8
 800b06e:	1818      	adds	r0, r3, r0
 800b070:	4a23      	ldr	r2, [pc, #140]	; (800b100 <_malloc_r+0x420>)
 800b072:	1b00      	subs	r0, r0, r4
 800b074:	6813      	ldr	r3, [r2, #0]
 800b076:	19c0      	adds	r0, r0, r7
 800b078:	19db      	adds	r3, r3, r7
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	2201      	movs	r2, #1
 800b07e:	4b21      	ldr	r3, [pc, #132]	; (800b104 <_malloc_r+0x424>)
 800b080:	9902      	ldr	r1, [sp, #8]
 800b082:	4310      	orrs	r0, r2
 800b084:	609c      	str	r4, [r3, #8]
 800b086:	6060      	str	r0, [r4, #4]
 800b088:	4299      	cmp	r1, r3
 800b08a:	d100      	bne.n	800b08e <_malloc_r+0x3ae>
 800b08c:	e73e      	b.n	800af0c <_malloc_r+0x22c>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	2b0f      	cmp	r3, #15
 800b092:	d813      	bhi.n	800b0bc <_malloc_r+0x3dc>
 800b094:	6062      	str	r2, [r4, #4]
 800b096:	2203      	movs	r2, #3
 800b098:	4b1a      	ldr	r3, [pc, #104]	; (800b104 <_malloc_r+0x424>)
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	4393      	bics	r3, r2
 800b0a0:	1b59      	subs	r1, r3, r5
 800b0a2:	42ab      	cmp	r3, r5
 800b0a4:	d301      	bcc.n	800b0aa <_malloc_r+0x3ca>
 800b0a6:	290f      	cmp	r1, #15
 800b0a8:	dc1f      	bgt.n	800b0ea <_malloc_r+0x40a>
 800b0aa:	9801      	ldr	r0, [sp, #4]
 800b0ac:	f000 f834 	bl	800b118 <__malloc_unlock>
 800b0b0:	e623      	b.n	800acfa <_malloc_r+0x1a>
 800b0b2:	4913      	ldr	r1, [pc, #76]	; (800b100 <_malloc_r+0x420>)
 800b0b4:	1ba6      	subs	r6, r4, r6
 800b0b6:	18f6      	adds	r6, r6, r3
 800b0b8:	600e      	str	r6, [r1, #0]
 800b0ba:	e7ba      	b.n	800b032 <_malloc_r+0x352>
 800b0bc:	2107      	movs	r1, #7
 800b0be:	9b03      	ldr	r3, [sp, #12]
 800b0c0:	3b0c      	subs	r3, #12
 800b0c2:	438b      	bics	r3, r1
 800b0c4:	9902      	ldr	r1, [sp, #8]
 800b0c6:	6849      	ldr	r1, [r1, #4]
 800b0c8:	400a      	ands	r2, r1
 800b0ca:	9902      	ldr	r1, [sp, #8]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	604a      	str	r2, [r1, #4]
 800b0d0:	18ca      	adds	r2, r1, r3
 800b0d2:	2105      	movs	r1, #5
 800b0d4:	6051      	str	r1, [r2, #4]
 800b0d6:	6091      	str	r1, [r2, #8]
 800b0d8:	2b0f      	cmp	r3, #15
 800b0da:	d800      	bhi.n	800b0de <_malloc_r+0x3fe>
 800b0dc:	e716      	b.n	800af0c <_malloc_r+0x22c>
 800b0de:	9902      	ldr	r1, [sp, #8]
 800b0e0:	9801      	ldr	r0, [sp, #4]
 800b0e2:	3108      	adds	r1, #8
 800b0e4:	f001 fab6 	bl	800c654 <_free_r>
 800b0e8:	e710      	b.n	800af0c <_malloc_r+0x22c>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	0013      	movs	r3, r2
 800b0ee:	4805      	ldr	r0, [pc, #20]	; (800b104 <_malloc_r+0x424>)
 800b0f0:	432b      	orrs	r3, r5
 800b0f2:	6884      	ldr	r4, [r0, #8]
 800b0f4:	6063      	str	r3, [r4, #4]
 800b0f6:	1963      	adds	r3, r4, r5
 800b0f8:	6083      	str	r3, [r0, #8]
 800b0fa:	e623      	b.n	800ad44 <_malloc_r+0x64>
 800b0fc:	20000430 	.word	0x20000430
 800b100:	20000c38 	.word	0x20000c38
 800b104:	20000028 	.word	0x20000028

0800b108 <__malloc_lock>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	4802      	ldr	r0, [pc, #8]	; (800b114 <__malloc_lock+0xc>)
 800b10c:	f001 fa1a 	bl	800c544 <__retarget_lock_acquire_recursive>
 800b110:	bd10      	pop	{r4, pc}
 800b112:	46c0      	nop			; (mov r8, r8)
 800b114:	20000dad 	.word	0x20000dad

0800b118 <__malloc_unlock>:
 800b118:	b510      	push	{r4, lr}
 800b11a:	4802      	ldr	r0, [pc, #8]	; (800b124 <__malloc_unlock+0xc>)
 800b11c:	f001 fa13 	bl	800c546 <__retarget_lock_release_recursive>
 800b120:	bd10      	pop	{r4, pc}
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	20000dad 	.word	0x20000dad

0800b128 <sulp>:
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	0016      	movs	r6, r2
 800b12c:	000d      	movs	r5, r1
 800b12e:	f002 f9e7 	bl	800d500 <__ulp>
 800b132:	2e00      	cmp	r6, #0
 800b134:	d00d      	beq.n	800b152 <sulp+0x2a>
 800b136:	236b      	movs	r3, #107	; 0x6b
 800b138:	006a      	lsls	r2, r5, #1
 800b13a:	0d52      	lsrs	r2, r2, #21
 800b13c:	1a9b      	subs	r3, r3, r2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dd07      	ble.n	800b152 <sulp+0x2a>
 800b142:	2400      	movs	r4, #0
 800b144:	4a03      	ldr	r2, [pc, #12]	; (800b154 <sulp+0x2c>)
 800b146:	051b      	lsls	r3, r3, #20
 800b148:	189d      	adds	r5, r3, r2
 800b14a:	002b      	movs	r3, r5
 800b14c:	0022      	movs	r2, r4
 800b14e:	f7f6 fa8d 	bl	800166c <__aeabi_dmul>
 800b152:	bd70      	pop	{r4, r5, r6, pc}
 800b154:	3ff00000 	.word	0x3ff00000

0800b158 <_strtod_l>:
 800b158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15a:	b0a1      	sub	sp, #132	; 0x84
 800b15c:	9219      	str	r2, [sp, #100]	; 0x64
 800b15e:	2200      	movs	r2, #0
 800b160:	2600      	movs	r6, #0
 800b162:	2700      	movs	r7, #0
 800b164:	9004      	str	r0, [sp, #16]
 800b166:	9107      	str	r1, [sp, #28]
 800b168:	921c      	str	r2, [sp, #112]	; 0x70
 800b16a:	911b      	str	r1, [sp, #108]	; 0x6c
 800b16c:	780a      	ldrb	r2, [r1, #0]
 800b16e:	2a2b      	cmp	r2, #43	; 0x2b
 800b170:	d055      	beq.n	800b21e <_strtod_l+0xc6>
 800b172:	d841      	bhi.n	800b1f8 <_strtod_l+0xa0>
 800b174:	2a0d      	cmp	r2, #13
 800b176:	d83b      	bhi.n	800b1f0 <_strtod_l+0x98>
 800b178:	2a08      	cmp	r2, #8
 800b17a:	d83b      	bhi.n	800b1f4 <_strtod_l+0x9c>
 800b17c:	2a00      	cmp	r2, #0
 800b17e:	d044      	beq.n	800b20a <_strtod_l+0xb2>
 800b180:	2200      	movs	r2, #0
 800b182:	920f      	str	r2, [sp, #60]	; 0x3c
 800b184:	2100      	movs	r1, #0
 800b186:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b188:	9109      	str	r1, [sp, #36]	; 0x24
 800b18a:	782a      	ldrb	r2, [r5, #0]
 800b18c:	2a30      	cmp	r2, #48	; 0x30
 800b18e:	d000      	beq.n	800b192 <_strtod_l+0x3a>
 800b190:	e085      	b.n	800b29e <_strtod_l+0x146>
 800b192:	786a      	ldrb	r2, [r5, #1]
 800b194:	3120      	adds	r1, #32
 800b196:	438a      	bics	r2, r1
 800b198:	2a58      	cmp	r2, #88	; 0x58
 800b19a:	d000      	beq.n	800b19e <_strtod_l+0x46>
 800b19c:	e075      	b.n	800b28a <_strtod_l+0x132>
 800b19e:	9302      	str	r3, [sp, #8]
 800b1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1a2:	4a97      	ldr	r2, [pc, #604]	; (800b400 <_strtod_l+0x2a8>)
 800b1a4:	9301      	str	r3, [sp, #4]
 800b1a6:	ab1c      	add	r3, sp, #112	; 0x70
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	9804      	ldr	r0, [sp, #16]
 800b1ac:	ab1d      	add	r3, sp, #116	; 0x74
 800b1ae:	a91b      	add	r1, sp, #108	; 0x6c
 800b1b0:	f001 fb6c 	bl	800c88c <__gethex>
 800b1b4:	230f      	movs	r3, #15
 800b1b6:	0002      	movs	r2, r0
 800b1b8:	401a      	ands	r2, r3
 800b1ba:	0004      	movs	r4, r0
 800b1bc:	9205      	str	r2, [sp, #20]
 800b1be:	4218      	tst	r0, r3
 800b1c0:	d005      	beq.n	800b1ce <_strtod_l+0x76>
 800b1c2:	2a06      	cmp	r2, #6
 800b1c4:	d12d      	bne.n	800b222 <_strtod_l+0xca>
 800b1c6:	1c6b      	adds	r3, r5, #1
 800b1c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <_strtod_l+0x82>
 800b1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01b      	beq.n	800b218 <_strtod_l+0xc0>
 800b1e0:	2380      	movs	r3, #128	; 0x80
 800b1e2:	0032      	movs	r2, r6
 800b1e4:	061b      	lsls	r3, r3, #24
 800b1e6:	18fb      	adds	r3, r7, r3
 800b1e8:	0010      	movs	r0, r2
 800b1ea:	0019      	movs	r1, r3
 800b1ec:	b021      	add	sp, #132	; 0x84
 800b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1f0:	2a20      	cmp	r2, #32
 800b1f2:	d1c5      	bne.n	800b180 <_strtod_l+0x28>
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	e7b8      	b.n	800b16a <_strtod_l+0x12>
 800b1f8:	2a2d      	cmp	r2, #45	; 0x2d
 800b1fa:	d1c1      	bne.n	800b180 <_strtod_l+0x28>
 800b1fc:	3a2c      	subs	r2, #44	; 0x2c
 800b1fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800b200:	1c4a      	adds	r2, r1, #1
 800b202:	921b      	str	r2, [sp, #108]	; 0x6c
 800b204:	784a      	ldrb	r2, [r1, #1]
 800b206:	2a00      	cmp	r2, #0
 800b208:	d1bc      	bne.n	800b184 <_strtod_l+0x2c>
 800b20a:	9b07      	ldr	r3, [sp, #28]
 800b20c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b20e:	2300      	movs	r3, #0
 800b210:	930f      	str	r3, [sp, #60]	; 0x3c
 800b212:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1dd      	bne.n	800b1d4 <_strtod_l+0x7c>
 800b218:	0032      	movs	r2, r6
 800b21a:	003b      	movs	r3, r7
 800b21c:	e7e4      	b.n	800b1e8 <_strtod_l+0x90>
 800b21e:	2200      	movs	r2, #0
 800b220:	e7ed      	b.n	800b1fe <_strtod_l+0xa6>
 800b222:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b224:	2a00      	cmp	r2, #0
 800b226:	d007      	beq.n	800b238 <_strtod_l+0xe0>
 800b228:	2135      	movs	r1, #53	; 0x35
 800b22a:	a81e      	add	r0, sp, #120	; 0x78
 800b22c:	f002 fa59 	bl	800d6e2 <__copybits>
 800b230:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b232:	9804      	ldr	r0, [sp, #16]
 800b234:	f001 fe56 	bl	800cee4 <_Bfree>
 800b238:	9805      	ldr	r0, [sp, #20]
 800b23a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b23c:	3801      	subs	r0, #1
 800b23e:	2804      	cmp	r0, #4
 800b240:	d806      	bhi.n	800b250 <_strtod_l+0xf8>
 800b242:	f7f4 ff67 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b246:	0312      	.short	0x0312
 800b248:	1e1c      	.short	0x1e1c
 800b24a:	12          	.byte	0x12
 800b24b:	00          	.byte	0x00
 800b24c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b24e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b250:	05e4      	lsls	r4, r4, #23
 800b252:	d502      	bpl.n	800b25a <_strtod_l+0x102>
 800b254:	2380      	movs	r3, #128	; 0x80
 800b256:	061b      	lsls	r3, r3, #24
 800b258:	431f      	orrs	r7, r3
 800b25a:	4b6a      	ldr	r3, [pc, #424]	; (800b404 <_strtod_l+0x2ac>)
 800b25c:	423b      	tst	r3, r7
 800b25e:	d1b6      	bne.n	800b1ce <_strtod_l+0x76>
 800b260:	f001 f944 	bl	800c4ec <__errno>
 800b264:	2322      	movs	r3, #34	; 0x22
 800b266:	6003      	str	r3, [r0, #0]
 800b268:	e7b1      	b.n	800b1ce <_strtod_l+0x76>
 800b26a:	4967      	ldr	r1, [pc, #412]	; (800b408 <_strtod_l+0x2b0>)
 800b26c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b26e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b270:	400a      	ands	r2, r1
 800b272:	4966      	ldr	r1, [pc, #408]	; (800b40c <_strtod_l+0x2b4>)
 800b274:	185b      	adds	r3, r3, r1
 800b276:	051b      	lsls	r3, r3, #20
 800b278:	431a      	orrs	r2, r3
 800b27a:	0017      	movs	r7, r2
 800b27c:	e7e8      	b.n	800b250 <_strtod_l+0xf8>
 800b27e:	4f61      	ldr	r7, [pc, #388]	; (800b404 <_strtod_l+0x2ac>)
 800b280:	e7e6      	b.n	800b250 <_strtod_l+0xf8>
 800b282:	2601      	movs	r6, #1
 800b284:	4f62      	ldr	r7, [pc, #392]	; (800b410 <_strtod_l+0x2b8>)
 800b286:	4276      	negs	r6, r6
 800b288:	e7e2      	b.n	800b250 <_strtod_l+0xf8>
 800b28a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b290:	785b      	ldrb	r3, [r3, #1]
 800b292:	2b30      	cmp	r3, #48	; 0x30
 800b294:	d0f9      	beq.n	800b28a <_strtod_l+0x132>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d099      	beq.n	800b1ce <_strtod_l+0x76>
 800b29a:	2301      	movs	r3, #1
 800b29c:	9309      	str	r3, [sp, #36]	; 0x24
 800b29e:	2500      	movs	r5, #0
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2a4:	950d      	str	r5, [sp, #52]	; 0x34
 800b2a6:	9310      	str	r3, [sp, #64]	; 0x40
 800b2a8:	9508      	str	r5, [sp, #32]
 800b2aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b2ac:	7804      	ldrb	r4, [r0, #0]
 800b2ae:	0023      	movs	r3, r4
 800b2b0:	3b30      	subs	r3, #48	; 0x30
 800b2b2:	b2d9      	uxtb	r1, r3
 800b2b4:	2909      	cmp	r1, #9
 800b2b6:	d927      	bls.n	800b308 <_strtod_l+0x1b0>
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	4956      	ldr	r1, [pc, #344]	; (800b414 <_strtod_l+0x2bc>)
 800b2bc:	f001 f838 	bl	800c330 <strncmp>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d031      	beq.n	800b328 <_strtod_l+0x1d0>
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	0023      	movs	r3, r4
 800b2c8:	4684      	mov	ip, r0
 800b2ca:	9a08      	ldr	r2, [sp, #32]
 800b2cc:	900c      	str	r0, [sp, #48]	; 0x30
 800b2ce:	9205      	str	r2, [sp, #20]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	0019      	movs	r1, r3
 800b2d4:	4391      	bics	r1, r2
 800b2d6:	000a      	movs	r2, r1
 800b2d8:	2100      	movs	r1, #0
 800b2da:	9106      	str	r1, [sp, #24]
 800b2dc:	2a45      	cmp	r2, #69	; 0x45
 800b2de:	d000      	beq.n	800b2e2 <_strtod_l+0x18a>
 800b2e0:	e0c2      	b.n	800b468 <_strtod_l+0x310>
 800b2e2:	9b05      	ldr	r3, [sp, #20]
 800b2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e6:	4303      	orrs	r3, r0
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	428b      	cmp	r3, r1
 800b2ec:	d08d      	beq.n	800b20a <_strtod_l+0xb2>
 800b2ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2f0:	9307      	str	r3, [sp, #28]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2f6:	9b07      	ldr	r3, [sp, #28]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b2b      	cmp	r3, #43	; 0x2b
 800b2fc:	d071      	beq.n	800b3e2 <_strtod_l+0x28a>
 800b2fe:	000c      	movs	r4, r1
 800b300:	2b2d      	cmp	r3, #45	; 0x2d
 800b302:	d174      	bne.n	800b3ee <_strtod_l+0x296>
 800b304:	2401      	movs	r4, #1
 800b306:	e06d      	b.n	800b3e4 <_strtod_l+0x28c>
 800b308:	9908      	ldr	r1, [sp, #32]
 800b30a:	2908      	cmp	r1, #8
 800b30c:	dc09      	bgt.n	800b322 <_strtod_l+0x1ca>
 800b30e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b310:	4351      	muls	r1, r2
 800b312:	185b      	adds	r3, r3, r1
 800b314:	930d      	str	r3, [sp, #52]	; 0x34
 800b316:	9b08      	ldr	r3, [sp, #32]
 800b318:	3001      	adds	r0, #1
 800b31a:	3301      	adds	r3, #1
 800b31c:	9308      	str	r3, [sp, #32]
 800b31e:	901b      	str	r0, [sp, #108]	; 0x6c
 800b320:	e7c3      	b.n	800b2aa <_strtod_l+0x152>
 800b322:	4355      	muls	r5, r2
 800b324:	195d      	adds	r5, r3, r5
 800b326:	e7f6      	b.n	800b316 <_strtod_l+0x1be>
 800b328:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b32e:	9a08      	ldr	r2, [sp, #32]
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	2a00      	cmp	r2, #0
 800b334:	d03a      	beq.n	800b3ac <_strtod_l+0x254>
 800b336:	900c      	str	r0, [sp, #48]	; 0x30
 800b338:	9205      	str	r2, [sp, #20]
 800b33a:	001a      	movs	r2, r3
 800b33c:	3a30      	subs	r2, #48	; 0x30
 800b33e:	2a09      	cmp	r2, #9
 800b340:	d912      	bls.n	800b368 <_strtod_l+0x210>
 800b342:	2201      	movs	r2, #1
 800b344:	4694      	mov	ip, r2
 800b346:	e7c3      	b.n	800b2d0 <_strtod_l+0x178>
 800b348:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b34a:	3001      	adds	r0, #1
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b350:	785b      	ldrb	r3, [r3, #1]
 800b352:	2b30      	cmp	r3, #48	; 0x30
 800b354:	d0f8      	beq.n	800b348 <_strtod_l+0x1f0>
 800b356:	001a      	movs	r2, r3
 800b358:	3a31      	subs	r2, #49	; 0x31
 800b35a:	2a08      	cmp	r2, #8
 800b35c:	d83c      	bhi.n	800b3d8 <_strtod_l+0x280>
 800b35e:	900c      	str	r0, [sp, #48]	; 0x30
 800b360:	2000      	movs	r0, #0
 800b362:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b364:	9005      	str	r0, [sp, #20]
 800b366:	9210      	str	r2, [sp, #64]	; 0x40
 800b368:	001a      	movs	r2, r3
 800b36a:	1c41      	adds	r1, r0, #1
 800b36c:	3a30      	subs	r2, #48	; 0x30
 800b36e:	2b30      	cmp	r3, #48	; 0x30
 800b370:	d016      	beq.n	800b3a0 <_strtod_l+0x248>
 800b372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b374:	185b      	adds	r3, r3, r1
 800b376:	930c      	str	r3, [sp, #48]	; 0x30
 800b378:	9b05      	ldr	r3, [sp, #20]
 800b37a:	210a      	movs	r1, #10
 800b37c:	469c      	mov	ip, r3
 800b37e:	4484      	add	ip, r0
 800b380:	4563      	cmp	r3, ip
 800b382:	d115      	bne.n	800b3b0 <_strtod_l+0x258>
 800b384:	9905      	ldr	r1, [sp, #20]
 800b386:	9b05      	ldr	r3, [sp, #20]
 800b388:	3101      	adds	r1, #1
 800b38a:	1809      	adds	r1, r1, r0
 800b38c:	181b      	adds	r3, r3, r0
 800b38e:	9105      	str	r1, [sp, #20]
 800b390:	2b08      	cmp	r3, #8
 800b392:	dc19      	bgt.n	800b3c8 <_strtod_l+0x270>
 800b394:	230a      	movs	r3, #10
 800b396:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b398:	434b      	muls	r3, r1
 800b39a:	2100      	movs	r1, #0
 800b39c:	18d3      	adds	r3, r2, r3
 800b39e:	930d      	str	r3, [sp, #52]	; 0x34
 800b3a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3a2:	0008      	movs	r0, r1
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	e7c6      	b.n	800b33a <_strtod_l+0x1e2>
 800b3ac:	9808      	ldr	r0, [sp, #32]
 800b3ae:	e7d0      	b.n	800b352 <_strtod_l+0x1fa>
 800b3b0:	1c5c      	adds	r4, r3, #1
 800b3b2:	2b08      	cmp	r3, #8
 800b3b4:	dc04      	bgt.n	800b3c0 <_strtod_l+0x268>
 800b3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3b8:	434b      	muls	r3, r1
 800b3ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b3bc:	0023      	movs	r3, r4
 800b3be:	e7df      	b.n	800b380 <_strtod_l+0x228>
 800b3c0:	2c10      	cmp	r4, #16
 800b3c2:	dcfb      	bgt.n	800b3bc <_strtod_l+0x264>
 800b3c4:	434d      	muls	r5, r1
 800b3c6:	e7f9      	b.n	800b3bc <_strtod_l+0x264>
 800b3c8:	9b05      	ldr	r3, [sp, #20]
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	2b10      	cmp	r3, #16
 800b3ce:	dce7      	bgt.n	800b3a0 <_strtod_l+0x248>
 800b3d0:	230a      	movs	r3, #10
 800b3d2:	435d      	muls	r5, r3
 800b3d4:	1955      	adds	r5, r2, r5
 800b3d6:	e7e3      	b.n	800b3a0 <_strtod_l+0x248>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	920c      	str	r2, [sp, #48]	; 0x30
 800b3dc:	9205      	str	r2, [sp, #20]
 800b3de:	3201      	adds	r2, #1
 800b3e0:	e7b0      	b.n	800b344 <_strtod_l+0x1ec>
 800b3e2:	2400      	movs	r4, #0
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3ea:	9b07      	ldr	r3, [sp, #28]
 800b3ec:	789b      	ldrb	r3, [r3, #2]
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	3a30      	subs	r2, #48	; 0x30
 800b3f2:	2a09      	cmp	r2, #9
 800b3f4:	d914      	bls.n	800b420 <_strtod_l+0x2c8>
 800b3f6:	9a07      	ldr	r2, [sp, #28]
 800b3f8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	e033      	b.n	800b466 <_strtod_l+0x30e>
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	08014a2c 	.word	0x08014a2c
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	ffefffff 	.word	0xffefffff
 800b40c:	00000433 	.word	0x00000433
 800b410:	7fffffff 	.word	0x7fffffff
 800b414:	08014a28 	.word	0x08014a28
 800b418:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b41a:	1c5a      	adds	r2, r3, #1
 800b41c:	921b      	str	r2, [sp, #108]	; 0x6c
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	2b30      	cmp	r3, #48	; 0x30
 800b422:	d0f9      	beq.n	800b418 <_strtod_l+0x2c0>
 800b424:	2200      	movs	r2, #0
 800b426:	9206      	str	r2, [sp, #24]
 800b428:	001a      	movs	r2, r3
 800b42a:	3a31      	subs	r2, #49	; 0x31
 800b42c:	2a08      	cmp	r2, #8
 800b42e:	d81b      	bhi.n	800b468 <_strtod_l+0x310>
 800b430:	3b30      	subs	r3, #48	; 0x30
 800b432:	930e      	str	r3, [sp, #56]	; 0x38
 800b434:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b436:	9306      	str	r3, [sp, #24]
 800b438:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	911b      	str	r1, [sp, #108]	; 0x6c
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	001a      	movs	r2, r3
 800b442:	3a30      	subs	r2, #48	; 0x30
 800b444:	2a09      	cmp	r2, #9
 800b446:	d93a      	bls.n	800b4be <_strtod_l+0x366>
 800b448:	9a06      	ldr	r2, [sp, #24]
 800b44a:	1a8a      	subs	r2, r1, r2
 800b44c:	49b2      	ldr	r1, [pc, #712]	; (800b718 <_strtod_l+0x5c0>)
 800b44e:	9106      	str	r1, [sp, #24]
 800b450:	2a08      	cmp	r2, #8
 800b452:	dc04      	bgt.n	800b45e <_strtod_l+0x306>
 800b454:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b456:	9206      	str	r2, [sp, #24]
 800b458:	428a      	cmp	r2, r1
 800b45a:	dd00      	ble.n	800b45e <_strtod_l+0x306>
 800b45c:	9106      	str	r1, [sp, #24]
 800b45e:	2c00      	cmp	r4, #0
 800b460:	d002      	beq.n	800b468 <_strtod_l+0x310>
 800b462:	9a06      	ldr	r2, [sp, #24]
 800b464:	4252      	negs	r2, r2
 800b466:	9206      	str	r2, [sp, #24]
 800b468:	9a05      	ldr	r2, [sp, #20]
 800b46a:	2a00      	cmp	r2, #0
 800b46c:	d14d      	bne.n	800b50a <_strtod_l+0x3b2>
 800b46e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b470:	4310      	orrs	r0, r2
 800b472:	d000      	beq.n	800b476 <_strtod_l+0x31e>
 800b474:	e6ab      	b.n	800b1ce <_strtod_l+0x76>
 800b476:	4662      	mov	r2, ip
 800b478:	2a00      	cmp	r2, #0
 800b47a:	d000      	beq.n	800b47e <_strtod_l+0x326>
 800b47c:	e6c5      	b.n	800b20a <_strtod_l+0xb2>
 800b47e:	2b69      	cmp	r3, #105	; 0x69
 800b480:	d027      	beq.n	800b4d2 <_strtod_l+0x37a>
 800b482:	dc23      	bgt.n	800b4cc <_strtod_l+0x374>
 800b484:	2b49      	cmp	r3, #73	; 0x49
 800b486:	d024      	beq.n	800b4d2 <_strtod_l+0x37a>
 800b488:	2b4e      	cmp	r3, #78	; 0x4e
 800b48a:	d000      	beq.n	800b48e <_strtod_l+0x336>
 800b48c:	e6bd      	b.n	800b20a <_strtod_l+0xb2>
 800b48e:	49a3      	ldr	r1, [pc, #652]	; (800b71c <_strtod_l+0x5c4>)
 800b490:	a81b      	add	r0, sp, #108	; 0x6c
 800b492:	f001 fc31 	bl	800ccf8 <__match>
 800b496:	2800      	cmp	r0, #0
 800b498:	d100      	bne.n	800b49c <_strtod_l+0x344>
 800b49a:	e6b6      	b.n	800b20a <_strtod_l+0xb2>
 800b49c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b28      	cmp	r3, #40	; 0x28
 800b4a2:	d12c      	bne.n	800b4fe <_strtod_l+0x3a6>
 800b4a4:	499e      	ldr	r1, [pc, #632]	; (800b720 <_strtod_l+0x5c8>)
 800b4a6:	aa1e      	add	r2, sp, #120	; 0x78
 800b4a8:	a81b      	add	r0, sp, #108	; 0x6c
 800b4aa:	f001 fc39 	bl	800cd20 <__hexnan>
 800b4ae:	2805      	cmp	r0, #5
 800b4b0:	d125      	bne.n	800b4fe <_strtod_l+0x3a6>
 800b4b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b4b4:	4a9b      	ldr	r2, [pc, #620]	; (800b724 <_strtod_l+0x5cc>)
 800b4b6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	0017      	movs	r7, r2
 800b4bc:	e687      	b.n	800b1ce <_strtod_l+0x76>
 800b4be:	220a      	movs	r2, #10
 800b4c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4c2:	434a      	muls	r2, r1
 800b4c4:	18d2      	adds	r2, r2, r3
 800b4c6:	3a30      	subs	r2, #48	; 0x30
 800b4c8:	920e      	str	r2, [sp, #56]	; 0x38
 800b4ca:	e7b5      	b.n	800b438 <_strtod_l+0x2e0>
 800b4cc:	2b6e      	cmp	r3, #110	; 0x6e
 800b4ce:	d0de      	beq.n	800b48e <_strtod_l+0x336>
 800b4d0:	e69b      	b.n	800b20a <_strtod_l+0xb2>
 800b4d2:	4995      	ldr	r1, [pc, #596]	; (800b728 <_strtod_l+0x5d0>)
 800b4d4:	a81b      	add	r0, sp, #108	; 0x6c
 800b4d6:	f001 fc0f 	bl	800ccf8 <__match>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d100      	bne.n	800b4e0 <_strtod_l+0x388>
 800b4de:	e694      	b.n	800b20a <_strtod_l+0xb2>
 800b4e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4e2:	4992      	ldr	r1, [pc, #584]	; (800b72c <_strtod_l+0x5d4>)
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	a81b      	add	r0, sp, #108	; 0x6c
 800b4e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4ea:	f001 fc05 	bl	800ccf8 <__match>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d102      	bne.n	800b4f8 <_strtod_l+0x3a0>
 800b4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	4f8a      	ldr	r7, [pc, #552]	; (800b724 <_strtod_l+0x5cc>)
 800b4fc:	e667      	b.n	800b1ce <_strtod_l+0x76>
 800b4fe:	488c      	ldr	r0, [pc, #560]	; (800b730 <_strtod_l+0x5d8>)
 800b500:	f001 f836 	bl	800c570 <nan>
 800b504:	0006      	movs	r6, r0
 800b506:	000f      	movs	r7, r1
 800b508:	e661      	b.n	800b1ce <_strtod_l+0x76>
 800b50a:	9b06      	ldr	r3, [sp, #24]
 800b50c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b50e:	1a9b      	subs	r3, r3, r2
 800b510:	9309      	str	r3, [sp, #36]	; 0x24
 800b512:	9b08      	ldr	r3, [sp, #32]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <_strtod_l+0x3c4>
 800b518:	9b05      	ldr	r3, [sp, #20]
 800b51a:	9308      	str	r3, [sp, #32]
 800b51c:	9c05      	ldr	r4, [sp, #20]
 800b51e:	2c10      	cmp	r4, #16
 800b520:	dd00      	ble.n	800b524 <_strtod_l+0x3cc>
 800b522:	2410      	movs	r4, #16
 800b524:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b526:	f7f6 ff69 	bl	80023fc <__aeabi_ui2d>
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	0006      	movs	r6, r0
 800b52e:	000f      	movs	r7, r1
 800b530:	2b09      	cmp	r3, #9
 800b532:	dd15      	ble.n	800b560 <_strtod_l+0x408>
 800b534:	0022      	movs	r2, r4
 800b536:	4b7f      	ldr	r3, [pc, #508]	; (800b734 <_strtod_l+0x5dc>)
 800b538:	3a09      	subs	r2, #9
 800b53a:	00d2      	lsls	r2, r2, #3
 800b53c:	189b      	adds	r3, r3, r2
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	f7f6 f893 	bl	800166c <__aeabi_dmul>
 800b546:	0006      	movs	r6, r0
 800b548:	0028      	movs	r0, r5
 800b54a:	000f      	movs	r7, r1
 800b54c:	f7f6 ff56 	bl	80023fc <__aeabi_ui2d>
 800b550:	0002      	movs	r2, r0
 800b552:	000b      	movs	r3, r1
 800b554:	0030      	movs	r0, r6
 800b556:	0039      	movs	r1, r7
 800b558:	f7f5 f92e 	bl	80007b8 <__aeabi_dadd>
 800b55c:	0006      	movs	r6, r0
 800b55e:	000f      	movs	r7, r1
 800b560:	9b05      	ldr	r3, [sp, #20]
 800b562:	2b0f      	cmp	r3, #15
 800b564:	dc39      	bgt.n	800b5da <_strtod_l+0x482>
 800b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d100      	bne.n	800b56e <_strtod_l+0x416>
 800b56c:	e62f      	b.n	800b1ce <_strtod_l+0x76>
 800b56e:	dd24      	ble.n	800b5ba <_strtod_l+0x462>
 800b570:	2b16      	cmp	r3, #22
 800b572:	dc09      	bgt.n	800b588 <_strtod_l+0x430>
 800b574:	496f      	ldr	r1, [pc, #444]	; (800b734 <_strtod_l+0x5dc>)
 800b576:	00db      	lsls	r3, r3, #3
 800b578:	18c9      	adds	r1, r1, r3
 800b57a:	0032      	movs	r2, r6
 800b57c:	6808      	ldr	r0, [r1, #0]
 800b57e:	6849      	ldr	r1, [r1, #4]
 800b580:	003b      	movs	r3, r7
 800b582:	f7f6 f873 	bl	800166c <__aeabi_dmul>
 800b586:	e7bd      	b.n	800b504 <_strtod_l+0x3ac>
 800b588:	2325      	movs	r3, #37	; 0x25
 800b58a:	9a05      	ldr	r2, [sp, #20]
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b590:	4293      	cmp	r3, r2
 800b592:	db22      	blt.n	800b5da <_strtod_l+0x482>
 800b594:	240f      	movs	r4, #15
 800b596:	9b05      	ldr	r3, [sp, #20]
 800b598:	4d66      	ldr	r5, [pc, #408]	; (800b734 <_strtod_l+0x5dc>)
 800b59a:	1ae4      	subs	r4, r4, r3
 800b59c:	00e1      	lsls	r1, r4, #3
 800b59e:	1869      	adds	r1, r5, r1
 800b5a0:	0032      	movs	r2, r6
 800b5a2:	6808      	ldr	r0, [r1, #0]
 800b5a4:	6849      	ldr	r1, [r1, #4]
 800b5a6:	003b      	movs	r3, r7
 800b5a8:	f7f6 f860 	bl	800166c <__aeabi_dmul>
 800b5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ae:	1b1c      	subs	r4, r3, r4
 800b5b0:	00e4      	lsls	r4, r4, #3
 800b5b2:	192d      	adds	r5, r5, r4
 800b5b4:	682a      	ldr	r2, [r5, #0]
 800b5b6:	686b      	ldr	r3, [r5, #4]
 800b5b8:	e7e3      	b.n	800b582 <_strtod_l+0x42a>
 800b5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5bc:	3316      	adds	r3, #22
 800b5be:	db0c      	blt.n	800b5da <_strtod_l+0x482>
 800b5c0:	9906      	ldr	r1, [sp, #24]
 800b5c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5c4:	4b5b      	ldr	r3, [pc, #364]	; (800b734 <_strtod_l+0x5dc>)
 800b5c6:	1a52      	subs	r2, r2, r1
 800b5c8:	00d2      	lsls	r2, r2, #3
 800b5ca:	189b      	adds	r3, r3, r2
 800b5cc:	0030      	movs	r0, r6
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	0039      	movs	r1, r7
 800b5d4:	f7f5 fc50 	bl	8000e78 <__aeabi_ddiv>
 800b5d8:	e794      	b.n	800b504 <_strtod_l+0x3ac>
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	1b1c      	subs	r4, r3, r4
 800b5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e0:	18e4      	adds	r4, r4, r3
 800b5e2:	2c00      	cmp	r4, #0
 800b5e4:	dd72      	ble.n	800b6cc <_strtod_l+0x574>
 800b5e6:	220f      	movs	r2, #15
 800b5e8:	0023      	movs	r3, r4
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	4214      	tst	r4, r2
 800b5ee:	d00a      	beq.n	800b606 <_strtod_l+0x4ae>
 800b5f0:	4950      	ldr	r1, [pc, #320]	; (800b734 <_strtod_l+0x5dc>)
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	18c9      	adds	r1, r1, r3
 800b5f6:	0032      	movs	r2, r6
 800b5f8:	6808      	ldr	r0, [r1, #0]
 800b5fa:	6849      	ldr	r1, [r1, #4]
 800b5fc:	003b      	movs	r3, r7
 800b5fe:	f7f6 f835 	bl	800166c <__aeabi_dmul>
 800b602:	0006      	movs	r6, r0
 800b604:	000f      	movs	r7, r1
 800b606:	230f      	movs	r3, #15
 800b608:	439c      	bics	r4, r3
 800b60a:	d04a      	beq.n	800b6a2 <_strtod_l+0x54a>
 800b60c:	3326      	adds	r3, #38	; 0x26
 800b60e:	33ff      	adds	r3, #255	; 0xff
 800b610:	429c      	cmp	r4, r3
 800b612:	dd22      	ble.n	800b65a <_strtod_l+0x502>
 800b614:	2300      	movs	r3, #0
 800b616:	9305      	str	r3, [sp, #20]
 800b618:	9306      	str	r3, [sp, #24]
 800b61a:	930d      	str	r3, [sp, #52]	; 0x34
 800b61c:	9308      	str	r3, [sp, #32]
 800b61e:	2322      	movs	r3, #34	; 0x22
 800b620:	2600      	movs	r6, #0
 800b622:	9a04      	ldr	r2, [sp, #16]
 800b624:	4f3f      	ldr	r7, [pc, #252]	; (800b724 <_strtod_l+0x5cc>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b62a:	42b3      	cmp	r3, r6
 800b62c:	d100      	bne.n	800b630 <_strtod_l+0x4d8>
 800b62e:	e5ce      	b.n	800b1ce <_strtod_l+0x76>
 800b630:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b632:	9804      	ldr	r0, [sp, #16]
 800b634:	f001 fc56 	bl	800cee4 <_Bfree>
 800b638:	9908      	ldr	r1, [sp, #32]
 800b63a:	9804      	ldr	r0, [sp, #16]
 800b63c:	f001 fc52 	bl	800cee4 <_Bfree>
 800b640:	9906      	ldr	r1, [sp, #24]
 800b642:	9804      	ldr	r0, [sp, #16]
 800b644:	f001 fc4e 	bl	800cee4 <_Bfree>
 800b648:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b64a:	9804      	ldr	r0, [sp, #16]
 800b64c:	f001 fc4a 	bl	800cee4 <_Bfree>
 800b650:	9905      	ldr	r1, [sp, #20]
 800b652:	9804      	ldr	r0, [sp, #16]
 800b654:	f001 fc46 	bl	800cee4 <_Bfree>
 800b658:	e5b9      	b.n	800b1ce <_strtod_l+0x76>
 800b65a:	2300      	movs	r3, #0
 800b65c:	0030      	movs	r0, r6
 800b65e:	0039      	movs	r1, r7
 800b660:	4d35      	ldr	r5, [pc, #212]	; (800b738 <_strtod_l+0x5e0>)
 800b662:	1124      	asrs	r4, r4, #4
 800b664:	9307      	str	r3, [sp, #28]
 800b666:	2c01      	cmp	r4, #1
 800b668:	dc1e      	bgt.n	800b6a8 <_strtod_l+0x550>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <_strtod_l+0x51a>
 800b66e:	0006      	movs	r6, r0
 800b670:	000f      	movs	r7, r1
 800b672:	4b32      	ldr	r3, [pc, #200]	; (800b73c <_strtod_l+0x5e4>)
 800b674:	9a07      	ldr	r2, [sp, #28]
 800b676:	18ff      	adds	r7, r7, r3
 800b678:	4b2f      	ldr	r3, [pc, #188]	; (800b738 <_strtod_l+0x5e0>)
 800b67a:	00d2      	lsls	r2, r2, #3
 800b67c:	189d      	adds	r5, r3, r2
 800b67e:	6828      	ldr	r0, [r5, #0]
 800b680:	6869      	ldr	r1, [r5, #4]
 800b682:	0032      	movs	r2, r6
 800b684:	003b      	movs	r3, r7
 800b686:	f7f5 fff1 	bl	800166c <__aeabi_dmul>
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <_strtod_l+0x5cc>)
 800b68c:	4a2c      	ldr	r2, [pc, #176]	; (800b740 <_strtod_l+0x5e8>)
 800b68e:	0006      	movs	r6, r0
 800b690:	400b      	ands	r3, r1
 800b692:	4293      	cmp	r3, r2
 800b694:	d8be      	bhi.n	800b614 <_strtod_l+0x4bc>
 800b696:	4a2b      	ldr	r2, [pc, #172]	; (800b744 <_strtod_l+0x5ec>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d913      	bls.n	800b6c4 <_strtod_l+0x56c>
 800b69c:	2601      	movs	r6, #1
 800b69e:	4f2a      	ldr	r7, [pc, #168]	; (800b748 <_strtod_l+0x5f0>)
 800b6a0:	4276      	negs	r6, r6
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9307      	str	r3, [sp, #28]
 800b6a6:	e088      	b.n	800b7ba <_strtod_l+0x662>
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	4214      	tst	r4, r2
 800b6ac:	d004      	beq.n	800b6b8 <_strtod_l+0x560>
 800b6ae:	682a      	ldr	r2, [r5, #0]
 800b6b0:	686b      	ldr	r3, [r5, #4]
 800b6b2:	f7f5 ffdb 	bl	800166c <__aeabi_dmul>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	9a07      	ldr	r2, [sp, #28]
 800b6ba:	1064      	asrs	r4, r4, #1
 800b6bc:	3201      	adds	r2, #1
 800b6be:	9207      	str	r2, [sp, #28]
 800b6c0:	3508      	adds	r5, #8
 800b6c2:	e7d0      	b.n	800b666 <_strtod_l+0x50e>
 800b6c4:	23d4      	movs	r3, #212	; 0xd4
 800b6c6:	049b      	lsls	r3, r3, #18
 800b6c8:	18cf      	adds	r7, r1, r3
 800b6ca:	e7ea      	b.n	800b6a2 <_strtod_l+0x54a>
 800b6cc:	2c00      	cmp	r4, #0
 800b6ce:	d0e8      	beq.n	800b6a2 <_strtod_l+0x54a>
 800b6d0:	4264      	negs	r4, r4
 800b6d2:	230f      	movs	r3, #15
 800b6d4:	0022      	movs	r2, r4
 800b6d6:	401a      	ands	r2, r3
 800b6d8:	421c      	tst	r4, r3
 800b6da:	d00a      	beq.n	800b6f2 <_strtod_l+0x59a>
 800b6dc:	4b15      	ldr	r3, [pc, #84]	; (800b734 <_strtod_l+0x5dc>)
 800b6de:	00d2      	lsls	r2, r2, #3
 800b6e0:	189b      	adds	r3, r3, r2
 800b6e2:	0030      	movs	r0, r6
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	0039      	movs	r1, r7
 800b6ea:	f7f5 fbc5 	bl	8000e78 <__aeabi_ddiv>
 800b6ee:	0006      	movs	r6, r0
 800b6f0:	000f      	movs	r7, r1
 800b6f2:	1124      	asrs	r4, r4, #4
 800b6f4:	d0d5      	beq.n	800b6a2 <_strtod_l+0x54a>
 800b6f6:	2c1f      	cmp	r4, #31
 800b6f8:	dd28      	ble.n	800b74c <_strtod_l+0x5f4>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	9305      	str	r3, [sp, #20]
 800b6fe:	9306      	str	r3, [sp, #24]
 800b700:	930d      	str	r3, [sp, #52]	; 0x34
 800b702:	9308      	str	r3, [sp, #32]
 800b704:	2322      	movs	r3, #34	; 0x22
 800b706:	9a04      	ldr	r2, [sp, #16]
 800b708:	2600      	movs	r6, #0
 800b70a:	6013      	str	r3, [r2, #0]
 800b70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b70e:	2700      	movs	r7, #0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d18d      	bne.n	800b630 <_strtod_l+0x4d8>
 800b714:	e55b      	b.n	800b1ce <_strtod_l+0x76>
 800b716:	46c0      	nop			; (mov r8, r8)
 800b718:	00004e1f 	.word	0x00004e1f
 800b71c:	08014d61 	.word	0x08014d61
 800b720:	08014a40 	.word	0x08014a40
 800b724:	7ff00000 	.word	0x7ff00000
 800b728:	08014d59 	.word	0x08014d59
 800b72c:	08014e0f 	.word	0x08014e0f
 800b730:	08014e0b 	.word	0x08014e0b
 800b734:	08014c80 	.word	0x08014c80
 800b738:	08014c58 	.word	0x08014c58
 800b73c:	fcb00000 	.word	0xfcb00000
 800b740:	7ca00000 	.word	0x7ca00000
 800b744:	7c900000 	.word	0x7c900000
 800b748:	7fefffff 	.word	0x7fefffff
 800b74c:	2310      	movs	r3, #16
 800b74e:	0022      	movs	r2, r4
 800b750:	401a      	ands	r2, r3
 800b752:	9207      	str	r2, [sp, #28]
 800b754:	421c      	tst	r4, r3
 800b756:	d001      	beq.n	800b75c <_strtod_l+0x604>
 800b758:	335a      	adds	r3, #90	; 0x5a
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	0030      	movs	r0, r6
 800b75e:	0039      	movs	r1, r7
 800b760:	2300      	movs	r3, #0
 800b762:	4dc4      	ldr	r5, [pc, #784]	; (800ba74 <_strtod_l+0x91c>)
 800b764:	2201      	movs	r2, #1
 800b766:	4214      	tst	r4, r2
 800b768:	d004      	beq.n	800b774 <_strtod_l+0x61c>
 800b76a:	682a      	ldr	r2, [r5, #0]
 800b76c:	686b      	ldr	r3, [r5, #4]
 800b76e:	f7f5 ff7d 	bl	800166c <__aeabi_dmul>
 800b772:	2301      	movs	r3, #1
 800b774:	1064      	asrs	r4, r4, #1
 800b776:	3508      	adds	r5, #8
 800b778:	2c00      	cmp	r4, #0
 800b77a:	d1f3      	bne.n	800b764 <_strtod_l+0x60c>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <_strtod_l+0x62c>
 800b780:	0006      	movs	r6, r0
 800b782:	000f      	movs	r7, r1
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00f      	beq.n	800b7aa <_strtod_l+0x652>
 800b78a:	236b      	movs	r3, #107	; 0x6b
 800b78c:	007a      	lsls	r2, r7, #1
 800b78e:	0d52      	lsrs	r2, r2, #21
 800b790:	0039      	movs	r1, r7
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	2b00      	cmp	r3, #0
 800b796:	dd08      	ble.n	800b7aa <_strtod_l+0x652>
 800b798:	2b1f      	cmp	r3, #31
 800b79a:	dc00      	bgt.n	800b79e <_strtod_l+0x646>
 800b79c:	e121      	b.n	800b9e2 <_strtod_l+0x88a>
 800b79e:	2600      	movs	r6, #0
 800b7a0:	2b34      	cmp	r3, #52	; 0x34
 800b7a2:	dc00      	bgt.n	800b7a6 <_strtod_l+0x64e>
 800b7a4:	e116      	b.n	800b9d4 <_strtod_l+0x87c>
 800b7a6:	27dc      	movs	r7, #220	; 0xdc
 800b7a8:	04bf      	lsls	r7, r7, #18
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	0030      	movs	r0, r6
 800b7b0:	0039      	movs	r1, r7
 800b7b2:	f7f4 fe49 	bl	8000448 <__aeabi_dcmpeq>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d19f      	bne.n	800b6fa <_strtod_l+0x5a2>
 800b7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7bc:	9a08      	ldr	r2, [sp, #32]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	9804      	ldr	r0, [sp, #16]
 800b7c6:	f001 fbdb 	bl	800cf80 <__s2b>
 800b7ca:	900d      	str	r0, [sp, #52]	; 0x34
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d100      	bne.n	800b7d2 <_strtod_l+0x67a>
 800b7d0:	e720      	b.n	800b614 <_strtod_l+0x4bc>
 800b7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d4:	9906      	ldr	r1, [sp, #24]
 800b7d6:	17da      	asrs	r2, r3, #31
 800b7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7da:	1a5b      	subs	r3, r3, r1
 800b7dc:	401a      	ands	r2, r3
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	9215      	str	r2, [sp, #84]	; 0x54
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e6:	17db      	asrs	r3, r3, #31
 800b7e8:	401a      	ands	r2, r3
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	9218      	str	r2, [sp, #96]	; 0x60
 800b7ee:	9305      	str	r3, [sp, #20]
 800b7f0:	9306      	str	r3, [sp, #24]
 800b7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f4:	9804      	ldr	r0, [sp, #16]
 800b7f6:	6859      	ldr	r1, [r3, #4]
 800b7f8:	f001 fb4c 	bl	800ce94 <_Balloc>
 800b7fc:	9008      	str	r0, [sp, #32]
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d100      	bne.n	800b804 <_strtod_l+0x6ac>
 800b802:	e70c      	b.n	800b61e <_strtod_l+0x4c6>
 800b804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b806:	300c      	adds	r0, #12
 800b808:	0019      	movs	r1, r3
 800b80a:	691a      	ldr	r2, [r3, #16]
 800b80c:	310c      	adds	r1, #12
 800b80e:	3202      	adds	r2, #2
 800b810:	0092      	lsls	r2, r2, #2
 800b812:	f000 fea4 	bl	800c55e <memcpy>
 800b816:	ab1e      	add	r3, sp, #120	; 0x78
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	ab1d      	add	r3, sp, #116	; 0x74
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	0032      	movs	r2, r6
 800b820:	003b      	movs	r3, r7
 800b822:	9804      	ldr	r0, [sp, #16]
 800b824:	9610      	str	r6, [sp, #64]	; 0x40
 800b826:	9711      	str	r7, [sp, #68]	; 0x44
 800b828:	f001 fed2 	bl	800d5d0 <__d2b>
 800b82c:	901c      	str	r0, [sp, #112]	; 0x70
 800b82e:	2800      	cmp	r0, #0
 800b830:	d100      	bne.n	800b834 <_strtod_l+0x6dc>
 800b832:	e6f4      	b.n	800b61e <_strtod_l+0x4c6>
 800b834:	2101      	movs	r1, #1
 800b836:	9804      	ldr	r0, [sp, #16]
 800b838:	f001 fc36 	bl	800d0a8 <__i2b>
 800b83c:	9006      	str	r0, [sp, #24]
 800b83e:	2800      	cmp	r0, #0
 800b840:	d100      	bne.n	800b844 <_strtod_l+0x6ec>
 800b842:	e6ec      	b.n	800b61e <_strtod_l+0x4c6>
 800b844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b846:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b848:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b84a:	1ad4      	subs	r4, r2, r3
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	db01      	blt.n	800b854 <_strtod_l+0x6fc>
 800b850:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b852:	195d      	adds	r5, r3, r5
 800b854:	9907      	ldr	r1, [sp, #28]
 800b856:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b858:	1a5b      	subs	r3, r3, r1
 800b85a:	2136      	movs	r1, #54	; 0x36
 800b85c:	189b      	adds	r3, r3, r2
 800b85e:	1a8a      	subs	r2, r1, r2
 800b860:	4985      	ldr	r1, [pc, #532]	; (800ba78 <_strtod_l+0x920>)
 800b862:	2001      	movs	r0, #1
 800b864:	468c      	mov	ip, r1
 800b866:	2100      	movs	r1, #0
 800b868:	3b01      	subs	r3, #1
 800b86a:	9114      	str	r1, [sp, #80]	; 0x50
 800b86c:	9012      	str	r0, [sp, #72]	; 0x48
 800b86e:	4563      	cmp	r3, ip
 800b870:	da07      	bge.n	800b882 <_strtod_l+0x72a>
 800b872:	4661      	mov	r1, ip
 800b874:	1ac9      	subs	r1, r1, r3
 800b876:	1a52      	subs	r2, r2, r1
 800b878:	291f      	cmp	r1, #31
 800b87a:	dd00      	ble.n	800b87e <_strtod_l+0x726>
 800b87c:	e0b6      	b.n	800b9ec <_strtod_l+0x894>
 800b87e:	4088      	lsls	r0, r1
 800b880:	9012      	str	r0, [sp, #72]	; 0x48
 800b882:	18ab      	adds	r3, r5, r2
 800b884:	930c      	str	r3, [sp, #48]	; 0x30
 800b886:	18a4      	adds	r4, r4, r2
 800b888:	9b07      	ldr	r3, [sp, #28]
 800b88a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b88c:	191c      	adds	r4, r3, r4
 800b88e:	002b      	movs	r3, r5
 800b890:	4295      	cmp	r5, r2
 800b892:	dd00      	ble.n	800b896 <_strtod_l+0x73e>
 800b894:	0013      	movs	r3, r2
 800b896:	42a3      	cmp	r3, r4
 800b898:	dd00      	ble.n	800b89c <_strtod_l+0x744>
 800b89a:	0023      	movs	r3, r4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dd04      	ble.n	800b8aa <_strtod_l+0x752>
 800b8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8a2:	1ae4      	subs	r4, r4, r3
 800b8a4:	1ad2      	subs	r2, r2, r3
 800b8a6:	920c      	str	r2, [sp, #48]	; 0x30
 800b8a8:	1aed      	subs	r5, r5, r3
 800b8aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	dd17      	ble.n	800b8e0 <_strtod_l+0x788>
 800b8b0:	001a      	movs	r2, r3
 800b8b2:	9906      	ldr	r1, [sp, #24]
 800b8b4:	9804      	ldr	r0, [sp, #16]
 800b8b6:	f001 fcbf 	bl	800d238 <__pow5mult>
 800b8ba:	9006      	str	r0, [sp, #24]
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d100      	bne.n	800b8c2 <_strtod_l+0x76a>
 800b8c0:	e6ad      	b.n	800b61e <_strtod_l+0x4c6>
 800b8c2:	0001      	movs	r1, r0
 800b8c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b8c6:	9804      	ldr	r0, [sp, #16]
 800b8c8:	f001 fc06 	bl	800d0d8 <__multiply>
 800b8cc:	900e      	str	r0, [sp, #56]	; 0x38
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d100      	bne.n	800b8d4 <_strtod_l+0x77c>
 800b8d2:	e6a4      	b.n	800b61e <_strtod_l+0x4c6>
 800b8d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8d6:	9804      	ldr	r0, [sp, #16]
 800b8d8:	f001 fb04 	bl	800cee4 <_Bfree>
 800b8dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8de:	931c      	str	r3, [sp, #112]	; 0x70
 800b8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dd00      	ble.n	800b8e8 <_strtod_l+0x790>
 800b8e6:	e087      	b.n	800b9f8 <_strtod_l+0x8a0>
 800b8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	dd08      	ble.n	800b900 <_strtod_l+0x7a8>
 800b8ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8f0:	9908      	ldr	r1, [sp, #32]
 800b8f2:	9804      	ldr	r0, [sp, #16]
 800b8f4:	f001 fca0 	bl	800d238 <__pow5mult>
 800b8f8:	9008      	str	r0, [sp, #32]
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d100      	bne.n	800b900 <_strtod_l+0x7a8>
 800b8fe:	e68e      	b.n	800b61e <_strtod_l+0x4c6>
 800b900:	2c00      	cmp	r4, #0
 800b902:	dd08      	ble.n	800b916 <_strtod_l+0x7be>
 800b904:	0022      	movs	r2, r4
 800b906:	9908      	ldr	r1, [sp, #32]
 800b908:	9804      	ldr	r0, [sp, #16]
 800b90a:	f001 fcd7 	bl	800d2bc <__lshift>
 800b90e:	9008      	str	r0, [sp, #32]
 800b910:	2800      	cmp	r0, #0
 800b912:	d100      	bne.n	800b916 <_strtod_l+0x7be>
 800b914:	e683      	b.n	800b61e <_strtod_l+0x4c6>
 800b916:	2d00      	cmp	r5, #0
 800b918:	dd08      	ble.n	800b92c <_strtod_l+0x7d4>
 800b91a:	002a      	movs	r2, r5
 800b91c:	9906      	ldr	r1, [sp, #24]
 800b91e:	9804      	ldr	r0, [sp, #16]
 800b920:	f001 fccc 	bl	800d2bc <__lshift>
 800b924:	9006      	str	r0, [sp, #24]
 800b926:	2800      	cmp	r0, #0
 800b928:	d100      	bne.n	800b92c <_strtod_l+0x7d4>
 800b92a:	e678      	b.n	800b61e <_strtod_l+0x4c6>
 800b92c:	9a08      	ldr	r2, [sp, #32]
 800b92e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b930:	9804      	ldr	r0, [sp, #16]
 800b932:	f001 fd4d 	bl	800d3d0 <__mdiff>
 800b936:	9005      	str	r0, [sp, #20]
 800b938:	2800      	cmp	r0, #0
 800b93a:	d100      	bne.n	800b93e <_strtod_l+0x7e6>
 800b93c:	e66f      	b.n	800b61e <_strtod_l+0x4c6>
 800b93e:	2200      	movs	r2, #0
 800b940:	68c3      	ldr	r3, [r0, #12]
 800b942:	9906      	ldr	r1, [sp, #24]
 800b944:	60c2      	str	r2, [r0, #12]
 800b946:	930c      	str	r3, [sp, #48]	; 0x30
 800b948:	f001 fd26 	bl	800d398 <__mcmp>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	da5d      	bge.n	800ba0c <_strtod_l+0x8b4>
 800b950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b952:	4333      	orrs	r3, r6
 800b954:	d000      	beq.n	800b958 <_strtod_l+0x800>
 800b956:	e088      	b.n	800ba6a <_strtod_l+0x912>
 800b958:	033b      	lsls	r3, r7, #12
 800b95a:	d000      	beq.n	800b95e <_strtod_l+0x806>
 800b95c:	e085      	b.n	800ba6a <_strtod_l+0x912>
 800b95e:	22d6      	movs	r2, #214	; 0xd6
 800b960:	4b46      	ldr	r3, [pc, #280]	; (800ba7c <_strtod_l+0x924>)
 800b962:	04d2      	lsls	r2, r2, #19
 800b964:	403b      	ands	r3, r7
 800b966:	4293      	cmp	r3, r2
 800b968:	d97f      	bls.n	800ba6a <_strtod_l+0x912>
 800b96a:	9b05      	ldr	r3, [sp, #20]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <_strtod_l+0x822>
 800b972:	9b05      	ldr	r3, [sp, #20]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b01      	cmp	r3, #1
 800b978:	dd77      	ble.n	800ba6a <_strtod_l+0x912>
 800b97a:	9905      	ldr	r1, [sp, #20]
 800b97c:	2201      	movs	r2, #1
 800b97e:	9804      	ldr	r0, [sp, #16]
 800b980:	f001 fc9c 	bl	800d2bc <__lshift>
 800b984:	9906      	ldr	r1, [sp, #24]
 800b986:	9005      	str	r0, [sp, #20]
 800b988:	f001 fd06 	bl	800d398 <__mcmp>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dd6c      	ble.n	800ba6a <_strtod_l+0x912>
 800b990:	9907      	ldr	r1, [sp, #28]
 800b992:	003b      	movs	r3, r7
 800b994:	4a39      	ldr	r2, [pc, #228]	; (800ba7c <_strtod_l+0x924>)
 800b996:	2900      	cmp	r1, #0
 800b998:	d100      	bne.n	800b99c <_strtod_l+0x844>
 800b99a:	e094      	b.n	800bac6 <_strtod_l+0x96e>
 800b99c:	0011      	movs	r1, r2
 800b99e:	20d6      	movs	r0, #214	; 0xd6
 800b9a0:	4039      	ands	r1, r7
 800b9a2:	04c0      	lsls	r0, r0, #19
 800b9a4:	4281      	cmp	r1, r0
 800b9a6:	dd00      	ble.n	800b9aa <_strtod_l+0x852>
 800b9a8:	e08d      	b.n	800bac6 <_strtod_l+0x96e>
 800b9aa:	23dc      	movs	r3, #220	; 0xdc
 800b9ac:	049b      	lsls	r3, r3, #18
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	dc00      	bgt.n	800b9b4 <_strtod_l+0x85c>
 800b9b2:	e6a7      	b.n	800b704 <_strtod_l+0x5ac>
 800b9b4:	0030      	movs	r0, r6
 800b9b6:	0039      	movs	r1, r7
 800b9b8:	4b31      	ldr	r3, [pc, #196]	; (800ba80 <_strtod_l+0x928>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f7f5 fe56 	bl	800166c <__aeabi_dmul>
 800b9c0:	4b2e      	ldr	r3, [pc, #184]	; (800ba7c <_strtod_l+0x924>)
 800b9c2:	0006      	movs	r6, r0
 800b9c4:	000f      	movs	r7, r1
 800b9c6:	420b      	tst	r3, r1
 800b9c8:	d000      	beq.n	800b9cc <_strtod_l+0x874>
 800b9ca:	e631      	b.n	800b630 <_strtod_l+0x4d8>
 800b9cc:	2322      	movs	r3, #34	; 0x22
 800b9ce:	9a04      	ldr	r2, [sp, #16]
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	e62d      	b.n	800b630 <_strtod_l+0x4d8>
 800b9d4:	234b      	movs	r3, #75	; 0x4b
 800b9d6:	1a9a      	subs	r2, r3, r2
 800b9d8:	3b4c      	subs	r3, #76	; 0x4c
 800b9da:	4093      	lsls	r3, r2
 800b9dc:	4019      	ands	r1, r3
 800b9de:	000f      	movs	r7, r1
 800b9e0:	e6e3      	b.n	800b7aa <_strtod_l+0x652>
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4252      	negs	r2, r2
 800b9e6:	409a      	lsls	r2, r3
 800b9e8:	4016      	ands	r6, r2
 800b9ea:	e6de      	b.n	800b7aa <_strtod_l+0x652>
 800b9ec:	4925      	ldr	r1, [pc, #148]	; (800ba84 <_strtod_l+0x92c>)
 800b9ee:	1acb      	subs	r3, r1, r3
 800b9f0:	0001      	movs	r1, r0
 800b9f2:	4099      	lsls	r1, r3
 800b9f4:	9114      	str	r1, [sp, #80]	; 0x50
 800b9f6:	e743      	b.n	800b880 <_strtod_l+0x728>
 800b9f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9fc:	9804      	ldr	r0, [sp, #16]
 800b9fe:	f001 fc5d 	bl	800d2bc <__lshift>
 800ba02:	901c      	str	r0, [sp, #112]	; 0x70
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d000      	beq.n	800ba0a <_strtod_l+0x8b2>
 800ba08:	e76e      	b.n	800b8e8 <_strtod_l+0x790>
 800ba0a:	e608      	b.n	800b61e <_strtod_l+0x4c6>
 800ba0c:	970e      	str	r7, [sp, #56]	; 0x38
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d177      	bne.n	800bb02 <_strtod_l+0x9aa>
 800ba12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba14:	033b      	lsls	r3, r7, #12
 800ba16:	0b1b      	lsrs	r3, r3, #12
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d039      	beq.n	800ba90 <_strtod_l+0x938>
 800ba1c:	4a1a      	ldr	r2, [pc, #104]	; (800ba88 <_strtod_l+0x930>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d139      	bne.n	800ba96 <_strtod_l+0x93e>
 800ba22:	2101      	movs	r1, #1
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	4249      	negs	r1, r1
 800ba28:	0032      	movs	r2, r6
 800ba2a:	0008      	movs	r0, r1
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <_strtod_l+0x8f0>
 800ba30:	24d4      	movs	r4, #212	; 0xd4
 800ba32:	4b12      	ldr	r3, [pc, #72]	; (800ba7c <_strtod_l+0x924>)
 800ba34:	0008      	movs	r0, r1
 800ba36:	403b      	ands	r3, r7
 800ba38:	04e4      	lsls	r4, r4, #19
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	d804      	bhi.n	800ba48 <_strtod_l+0x8f0>
 800ba3e:	306c      	adds	r0, #108	; 0x6c
 800ba40:	0d1b      	lsrs	r3, r3, #20
 800ba42:	1ac3      	subs	r3, r0, r3
 800ba44:	4099      	lsls	r1, r3
 800ba46:	0008      	movs	r0, r1
 800ba48:	4282      	cmp	r2, r0
 800ba4a:	d124      	bne.n	800ba96 <_strtod_l+0x93e>
 800ba4c:	4b0f      	ldr	r3, [pc, #60]	; (800ba8c <_strtod_l+0x934>)
 800ba4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ba50:	4299      	cmp	r1, r3
 800ba52:	d102      	bne.n	800ba5a <_strtod_l+0x902>
 800ba54:	3201      	adds	r2, #1
 800ba56:	d100      	bne.n	800ba5a <_strtod_l+0x902>
 800ba58:	e5e1      	b.n	800b61e <_strtod_l+0x4c6>
 800ba5a:	4b08      	ldr	r3, [pc, #32]	; (800ba7c <_strtod_l+0x924>)
 800ba5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba5e:	2600      	movs	r6, #0
 800ba60:	401a      	ands	r2, r3
 800ba62:	0013      	movs	r3, r2
 800ba64:	2280      	movs	r2, #128	; 0x80
 800ba66:	0352      	lsls	r2, r2, #13
 800ba68:	189f      	adds	r7, r3, r2
 800ba6a:	9b07      	ldr	r3, [sp, #28]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1a1      	bne.n	800b9b4 <_strtod_l+0x85c>
 800ba70:	e5de      	b.n	800b630 <_strtod_l+0x4d8>
 800ba72:	46c0      	nop			; (mov r8, r8)
 800ba74:	08014a58 	.word	0x08014a58
 800ba78:	fffffc02 	.word	0xfffffc02
 800ba7c:	7ff00000 	.word	0x7ff00000
 800ba80:	39500000 	.word	0x39500000
 800ba84:	fffffbe2 	.word	0xfffffbe2
 800ba88:	000fffff 	.word	0x000fffff
 800ba8c:	7fefffff 	.word	0x7fefffff
 800ba90:	4333      	orrs	r3, r6
 800ba92:	d100      	bne.n	800ba96 <_strtod_l+0x93e>
 800ba94:	e77c      	b.n	800b990 <_strtod_l+0x838>
 800ba96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01d      	beq.n	800bad8 <_strtod_l+0x980>
 800ba9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800baa0:	4213      	tst	r3, r2
 800baa2:	d0e2      	beq.n	800ba6a <_strtod_l+0x912>
 800baa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baa6:	0030      	movs	r0, r6
 800baa8:	0039      	movs	r1, r7
 800baaa:	9a07      	ldr	r2, [sp, #28]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d017      	beq.n	800bae0 <_strtod_l+0x988>
 800bab0:	f7ff fb3a 	bl	800b128 <sulp>
 800bab4:	0002      	movs	r2, r0
 800bab6:	000b      	movs	r3, r1
 800bab8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800baba:	9911      	ldr	r1, [sp, #68]	; 0x44
 800babc:	f7f4 fe7c 	bl	80007b8 <__aeabi_dadd>
 800bac0:	0006      	movs	r6, r0
 800bac2:	000f      	movs	r7, r1
 800bac4:	e7d1      	b.n	800ba6a <_strtod_l+0x912>
 800bac6:	2601      	movs	r6, #1
 800bac8:	4013      	ands	r3, r2
 800baca:	4a98      	ldr	r2, [pc, #608]	; (800bd2c <_strtod_l+0xbd4>)
 800bacc:	4276      	negs	r6, r6
 800bace:	189b      	adds	r3, r3, r2
 800bad0:	4a97      	ldr	r2, [pc, #604]	; (800bd30 <_strtod_l+0xbd8>)
 800bad2:	431a      	orrs	r2, r3
 800bad4:	0017      	movs	r7, r2
 800bad6:	e7c8      	b.n	800ba6a <_strtod_l+0x912>
 800bad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bada:	4233      	tst	r3, r6
 800badc:	d0c5      	beq.n	800ba6a <_strtod_l+0x912>
 800bade:	e7e1      	b.n	800baa4 <_strtod_l+0x94c>
 800bae0:	f7ff fb22 	bl	800b128 <sulp>
 800bae4:	0002      	movs	r2, r0
 800bae6:	000b      	movs	r3, r1
 800bae8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800baea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800baec:	f7f6 f880 	bl	8001bf0 <__aeabi_dsub>
 800baf0:	2200      	movs	r2, #0
 800baf2:	2300      	movs	r3, #0
 800baf4:	0006      	movs	r6, r0
 800baf6:	000f      	movs	r7, r1
 800baf8:	f7f4 fca6 	bl	8000448 <__aeabi_dcmpeq>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d0b4      	beq.n	800ba6a <_strtod_l+0x912>
 800bb00:	e600      	b.n	800b704 <_strtod_l+0x5ac>
 800bb02:	9906      	ldr	r1, [sp, #24]
 800bb04:	9805      	ldr	r0, [sp, #20]
 800bb06:	f001 fdc3 	bl	800d690 <__ratio>
 800bb0a:	2380      	movs	r3, #128	; 0x80
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	05db      	lsls	r3, r3, #23
 800bb10:	0004      	movs	r4, r0
 800bb12:	000d      	movs	r5, r1
 800bb14:	f7f4 fca8 	bl	8000468 <__aeabi_dcmple>
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d06d      	beq.n	800bbf8 <_strtod_l+0xaa0>
 800bb1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d000      	beq.n	800bb24 <_strtod_l+0x9cc>
 800bb22:	e07e      	b.n	800bc22 <_strtod_l+0xaca>
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d158      	bne.n	800bbda <_strtod_l+0xa82>
 800bb28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb2a:	031b      	lsls	r3, r3, #12
 800bb2c:	d000      	beq.n	800bb30 <_strtod_l+0x9d8>
 800bb2e:	e07f      	b.n	800bc30 <_strtod_l+0xad8>
 800bb30:	2200      	movs	r2, #0
 800bb32:	0020      	movs	r0, r4
 800bb34:	0029      	movs	r1, r5
 800bb36:	4b7f      	ldr	r3, [pc, #508]	; (800bd34 <_strtod_l+0xbdc>)
 800bb38:	f7f4 fc8c 	bl	8000454 <__aeabi_dcmplt>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d158      	bne.n	800bbf2 <_strtod_l+0xa9a>
 800bb40:	0020      	movs	r0, r4
 800bb42:	0029      	movs	r1, r5
 800bb44:	2200      	movs	r2, #0
 800bb46:	4b7c      	ldr	r3, [pc, #496]	; (800bd38 <_strtod_l+0xbe0>)
 800bb48:	f7f5 fd90 	bl	800166c <__aeabi_dmul>
 800bb4c:	0004      	movs	r4, r0
 800bb4e:	000d      	movs	r5, r1
 800bb50:	2380      	movs	r3, #128	; 0x80
 800bb52:	061b      	lsls	r3, r3, #24
 800bb54:	940a      	str	r4, [sp, #40]	; 0x28
 800bb56:	18eb      	adds	r3, r5, r3
 800bb58:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb5e:	9212      	str	r2, [sp, #72]	; 0x48
 800bb60:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb62:	4a76      	ldr	r2, [pc, #472]	; (800bd3c <_strtod_l+0xbe4>)
 800bb64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb66:	4013      	ands	r3, r2
 800bb68:	9314      	str	r3, [sp, #80]	; 0x50
 800bb6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb6c:	4b74      	ldr	r3, [pc, #464]	; (800bd40 <_strtod_l+0xbe8>)
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d000      	beq.n	800bb74 <_strtod_l+0xa1c>
 800bb72:	e091      	b.n	800bc98 <_strtod_l+0xb40>
 800bb74:	4a73      	ldr	r2, [pc, #460]	; (800bd44 <_strtod_l+0xbec>)
 800bb76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb78:	4694      	mov	ip, r2
 800bb7a:	4463      	add	r3, ip
 800bb7c:	001f      	movs	r7, r3
 800bb7e:	0030      	movs	r0, r6
 800bb80:	0019      	movs	r1, r3
 800bb82:	f001 fcbd 	bl	800d500 <__ulp>
 800bb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb8a:	f7f5 fd6f 	bl	800166c <__aeabi_dmul>
 800bb8e:	0032      	movs	r2, r6
 800bb90:	003b      	movs	r3, r7
 800bb92:	f7f4 fe11 	bl	80007b8 <__aeabi_dadd>
 800bb96:	4a69      	ldr	r2, [pc, #420]	; (800bd3c <_strtod_l+0xbe4>)
 800bb98:	4b6b      	ldr	r3, [pc, #428]	; (800bd48 <_strtod_l+0xbf0>)
 800bb9a:	0006      	movs	r6, r0
 800bb9c:	400a      	ands	r2, r1
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d949      	bls.n	800bc36 <_strtod_l+0xade>
 800bba2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bba4:	4b69      	ldr	r3, [pc, #420]	; (800bd4c <_strtod_l+0xbf4>)
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d103      	bne.n	800bbb2 <_strtod_l+0xa5a>
 800bbaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbac:	3301      	adds	r3, #1
 800bbae:	d100      	bne.n	800bbb2 <_strtod_l+0xa5a>
 800bbb0:	e535      	b.n	800b61e <_strtod_l+0x4c6>
 800bbb2:	2601      	movs	r6, #1
 800bbb4:	4f65      	ldr	r7, [pc, #404]	; (800bd4c <_strtod_l+0xbf4>)
 800bbb6:	4276      	negs	r6, r6
 800bbb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbba:	9804      	ldr	r0, [sp, #16]
 800bbbc:	f001 f992 	bl	800cee4 <_Bfree>
 800bbc0:	9908      	ldr	r1, [sp, #32]
 800bbc2:	9804      	ldr	r0, [sp, #16]
 800bbc4:	f001 f98e 	bl	800cee4 <_Bfree>
 800bbc8:	9906      	ldr	r1, [sp, #24]
 800bbca:	9804      	ldr	r0, [sp, #16]
 800bbcc:	f001 f98a 	bl	800cee4 <_Bfree>
 800bbd0:	9905      	ldr	r1, [sp, #20]
 800bbd2:	9804      	ldr	r0, [sp, #16]
 800bbd4:	f001 f986 	bl	800cee4 <_Bfree>
 800bbd8:	e60b      	b.n	800b7f2 <_strtod_l+0x69a>
 800bbda:	2e01      	cmp	r6, #1
 800bbdc:	d103      	bne.n	800bbe6 <_strtod_l+0xa8e>
 800bbde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d100      	bne.n	800bbe6 <_strtod_l+0xa8e>
 800bbe4:	e58e      	b.n	800b704 <_strtod_l+0x5ac>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4c59      	ldr	r4, [pc, #356]	; (800bd50 <_strtod_l+0xbf8>)
 800bbea:	930a      	str	r3, [sp, #40]	; 0x28
 800bbec:	940b      	str	r4, [sp, #44]	; 0x2c
 800bbee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bbf0:	e01c      	b.n	800bc2c <_strtod_l+0xad4>
 800bbf2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bbf4:	4d50      	ldr	r5, [pc, #320]	; (800bd38 <_strtod_l+0xbe0>)
 800bbf6:	e7ab      	b.n	800bb50 <_strtod_l+0x9f8>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	0020      	movs	r0, r4
 800bbfc:	0029      	movs	r1, r5
 800bbfe:	4b4e      	ldr	r3, [pc, #312]	; (800bd38 <_strtod_l+0xbe0>)
 800bc00:	f7f5 fd34 	bl	800166c <__aeabi_dmul>
 800bc04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc06:	0004      	movs	r4, r0
 800bc08:	000b      	movs	r3, r1
 800bc0a:	000d      	movs	r5, r1
 800bc0c:	2a00      	cmp	r2, #0
 800bc0e:	d104      	bne.n	800bc1a <_strtod_l+0xac2>
 800bc10:	2280      	movs	r2, #128	; 0x80
 800bc12:	0612      	lsls	r2, r2, #24
 800bc14:	900a      	str	r0, [sp, #40]	; 0x28
 800bc16:	188b      	adds	r3, r1, r2
 800bc18:	e79e      	b.n	800bb58 <_strtod_l+0xa00>
 800bc1a:	0002      	movs	r2, r0
 800bc1c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc20:	e79b      	b.n	800bb5a <_strtod_l+0xa02>
 800bc22:	2300      	movs	r3, #0
 800bc24:	4c43      	ldr	r4, [pc, #268]	; (800bd34 <_strtod_l+0xbdc>)
 800bc26:	930a      	str	r3, [sp, #40]	; 0x28
 800bc28:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc2a:	2400      	movs	r4, #0
 800bc2c:	4d41      	ldr	r5, [pc, #260]	; (800bd34 <_strtod_l+0xbdc>)
 800bc2e:	e794      	b.n	800bb5a <_strtod_l+0xa02>
 800bc30:	2300      	movs	r3, #0
 800bc32:	4c47      	ldr	r4, [pc, #284]	; (800bd50 <_strtod_l+0xbf8>)
 800bc34:	e7f7      	b.n	800bc26 <_strtod_l+0xace>
 800bc36:	23d4      	movs	r3, #212	; 0xd4
 800bc38:	049b      	lsls	r3, r3, #18
 800bc3a:	18cf      	adds	r7, r1, r3
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	970e      	str	r7, [sp, #56]	; 0x38
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1b9      	bne.n	800bbb8 <_strtod_l+0xa60>
 800bc44:	4b3d      	ldr	r3, [pc, #244]	; (800bd3c <_strtod_l+0xbe4>)
 800bc46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc48:	403b      	ands	r3, r7
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d1b4      	bne.n	800bbb8 <_strtod_l+0xa60>
 800bc4e:	0020      	movs	r0, r4
 800bc50:	0029      	movs	r1, r5
 800bc52:	f7f4 fc93 	bl	800057c <__aeabi_d2lz>
 800bc56:	f7f4 fccd 	bl	80005f4 <__aeabi_l2d>
 800bc5a:	0002      	movs	r2, r0
 800bc5c:	000b      	movs	r3, r1
 800bc5e:	0020      	movs	r0, r4
 800bc60:	0029      	movs	r1, r5
 800bc62:	f7f5 ffc5 	bl	8001bf0 <__aeabi_dsub>
 800bc66:	033b      	lsls	r3, r7, #12
 800bc68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc6a:	0b1b      	lsrs	r3, r3, #12
 800bc6c:	4333      	orrs	r3, r6
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	0004      	movs	r4, r0
 800bc72:	000d      	movs	r5, r1
 800bc74:	4a37      	ldr	r2, [pc, #220]	; (800bd54 <_strtod_l+0xbfc>)
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d054      	beq.n	800bd24 <_strtod_l+0xbcc>
 800bc7a:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <_strtod_l+0xc00>)
 800bc7c:	f7f4 fbea 	bl	8000454 <__aeabi_dcmplt>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d000      	beq.n	800bc86 <_strtod_l+0xb2e>
 800bc84:	e4d4      	b.n	800b630 <_strtod_l+0x4d8>
 800bc86:	0020      	movs	r0, r4
 800bc88:	0029      	movs	r1, r5
 800bc8a:	4a34      	ldr	r2, [pc, #208]	; (800bd5c <_strtod_l+0xc04>)
 800bc8c:	4b2a      	ldr	r3, [pc, #168]	; (800bd38 <_strtod_l+0xbe0>)
 800bc8e:	f7f4 fbf5 	bl	800047c <__aeabi_dcmpgt>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d090      	beq.n	800bbb8 <_strtod_l+0xa60>
 800bc96:	e4cb      	b.n	800b630 <_strtod_l+0x4d8>
 800bc98:	9b07      	ldr	r3, [sp, #28]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d02b      	beq.n	800bcf6 <_strtod_l+0xb9e>
 800bc9e:	23d4      	movs	r3, #212	; 0xd4
 800bca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bca2:	04db      	lsls	r3, r3, #19
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d826      	bhi.n	800bcf6 <_strtod_l+0xb9e>
 800bca8:	0020      	movs	r0, r4
 800bcaa:	0029      	movs	r1, r5
 800bcac:	4a2c      	ldr	r2, [pc, #176]	; (800bd60 <_strtod_l+0xc08>)
 800bcae:	4b2d      	ldr	r3, [pc, #180]	; (800bd64 <_strtod_l+0xc0c>)
 800bcb0:	f7f4 fbda 	bl	8000468 <__aeabi_dcmple>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d017      	beq.n	800bce8 <_strtod_l+0xb90>
 800bcb8:	0020      	movs	r0, r4
 800bcba:	0029      	movs	r1, r5
 800bcbc:	f7f4 fc40 	bl	8000540 <__aeabi_d2uiz>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	d100      	bne.n	800bcc6 <_strtod_l+0xb6e>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f7f6 fb99 	bl	80023fc <__aeabi_ui2d>
 800bcca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bccc:	0004      	movs	r4, r0
 800bcce:	000b      	movs	r3, r1
 800bcd0:	000d      	movs	r5, r1
 800bcd2:	2a00      	cmp	r2, #0
 800bcd4:	d122      	bne.n	800bd1c <_strtod_l+0xbc4>
 800bcd6:	2280      	movs	r2, #128	; 0x80
 800bcd8:	0612      	lsls	r2, r2, #24
 800bcda:	188b      	adds	r3, r1, r2
 800bcdc:	9016      	str	r0, [sp, #88]	; 0x58
 800bcde:	9317      	str	r3, [sp, #92]	; 0x5c
 800bce0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bce2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bce4:	9212      	str	r2, [sp, #72]	; 0x48
 800bce6:	9313      	str	r3, [sp, #76]	; 0x4c
 800bce8:	22d6      	movs	r2, #214	; 0xd6
 800bcea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcec:	04d2      	lsls	r2, r2, #19
 800bcee:	189b      	adds	r3, r3, r2
 800bcf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	9313      	str	r3, [sp, #76]	; 0x4c
 800bcf6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bcf8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bcfa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bcfc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bcfe:	f001 fbff 	bl	800d500 <__ulp>
 800bd02:	0002      	movs	r2, r0
 800bd04:	000b      	movs	r3, r1
 800bd06:	0030      	movs	r0, r6
 800bd08:	0039      	movs	r1, r7
 800bd0a:	f7f5 fcaf 	bl	800166c <__aeabi_dmul>
 800bd0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd12:	f7f4 fd51 	bl	80007b8 <__aeabi_dadd>
 800bd16:	0006      	movs	r6, r0
 800bd18:	000f      	movs	r7, r1
 800bd1a:	e78f      	b.n	800bc3c <_strtod_l+0xae4>
 800bd1c:	0002      	movs	r2, r0
 800bd1e:	9216      	str	r2, [sp, #88]	; 0x58
 800bd20:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd22:	e7dd      	b.n	800bce0 <_strtod_l+0xb88>
 800bd24:	4b10      	ldr	r3, [pc, #64]	; (800bd68 <_strtod_l+0xc10>)
 800bd26:	f7f4 fb95 	bl	8000454 <__aeabi_dcmplt>
 800bd2a:	e7b2      	b.n	800bc92 <_strtod_l+0xb3a>
 800bd2c:	fff00000 	.word	0xfff00000
 800bd30:	000fffff 	.word	0x000fffff
 800bd34:	3ff00000 	.word	0x3ff00000
 800bd38:	3fe00000 	.word	0x3fe00000
 800bd3c:	7ff00000 	.word	0x7ff00000
 800bd40:	7fe00000 	.word	0x7fe00000
 800bd44:	fcb00000 	.word	0xfcb00000
 800bd48:	7c9fffff 	.word	0x7c9fffff
 800bd4c:	7fefffff 	.word	0x7fefffff
 800bd50:	bff00000 	.word	0xbff00000
 800bd54:	94a03595 	.word	0x94a03595
 800bd58:	3fdfffff 	.word	0x3fdfffff
 800bd5c:	35afe535 	.word	0x35afe535
 800bd60:	ffc00000 	.word	0xffc00000
 800bd64:	41dfffff 	.word	0x41dfffff
 800bd68:	3fcfffff 	.word	0x3fcfffff

0800bd6c <_strtod_r>:
 800bd6c:	b510      	push	{r4, lr}
 800bd6e:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <_strtod_r+0xc>)
 800bd70:	f7ff f9f2 	bl	800b158 <_strtod_l>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	20000444 	.word	0x20000444

0800bd7c <strtod>:
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	4c04      	ldr	r4, [pc, #16]	; (800bd90 <strtod+0x14>)
 800bd80:	000a      	movs	r2, r1
 800bd82:	0001      	movs	r1, r0
 800bd84:	4b03      	ldr	r3, [pc, #12]	; (800bd94 <strtod+0x18>)
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	f7ff f9e6 	bl	800b158 <_strtod_l>
 800bd8c:	bd10      	pop	{r4, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	200006d0 	.word	0x200006d0
 800bd94:	20000444 	.word	0x20000444

0800bd98 <_strtol_l.constprop.0>:
 800bd98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	001e      	movs	r6, r3
 800bd9e:	9005      	str	r0, [sp, #20]
 800bda0:	9101      	str	r1, [sp, #4]
 800bda2:	9202      	str	r2, [sp, #8]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d048      	beq.n	800be3a <_strtol_l.constprop.0+0xa2>
 800bda8:	000b      	movs	r3, r1
 800bdaa:	2e24      	cmp	r6, #36	; 0x24
 800bdac:	d845      	bhi.n	800be3a <_strtol_l.constprop.0+0xa2>
 800bdae:	4a3b      	ldr	r2, [pc, #236]	; (800be9c <_strtol_l.constprop.0+0x104>)
 800bdb0:	2108      	movs	r1, #8
 800bdb2:	4694      	mov	ip, r2
 800bdb4:	001a      	movs	r2, r3
 800bdb6:	4660      	mov	r0, ip
 800bdb8:	7814      	ldrb	r4, [r2, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	5d00      	ldrb	r0, [r0, r4]
 800bdbe:	001d      	movs	r5, r3
 800bdc0:	0007      	movs	r7, r0
 800bdc2:	400f      	ands	r7, r1
 800bdc4:	4208      	tst	r0, r1
 800bdc6:	d1f5      	bne.n	800bdb4 <_strtol_l.constprop.0+0x1c>
 800bdc8:	2c2d      	cmp	r4, #45	; 0x2d
 800bdca:	d13d      	bne.n	800be48 <_strtol_l.constprop.0+0xb0>
 800bdcc:	2701      	movs	r7, #1
 800bdce:	781c      	ldrb	r4, [r3, #0]
 800bdd0:	1c95      	adds	r5, r2, #2
 800bdd2:	2e00      	cmp	r6, #0
 800bdd4:	d05e      	beq.n	800be94 <_strtol_l.constprop.0+0xfc>
 800bdd6:	2e10      	cmp	r6, #16
 800bdd8:	d109      	bne.n	800bdee <_strtol_l.constprop.0+0x56>
 800bdda:	2c30      	cmp	r4, #48	; 0x30
 800bddc:	d107      	bne.n	800bdee <_strtol_l.constprop.0+0x56>
 800bdde:	2220      	movs	r2, #32
 800bde0:	782b      	ldrb	r3, [r5, #0]
 800bde2:	4393      	bics	r3, r2
 800bde4:	2b58      	cmp	r3, #88	; 0x58
 800bde6:	d150      	bne.n	800be8a <_strtol_l.constprop.0+0xf2>
 800bde8:	2610      	movs	r6, #16
 800bdea:	786c      	ldrb	r4, [r5, #1]
 800bdec:	3502      	adds	r5, #2
 800bdee:	4b2c      	ldr	r3, [pc, #176]	; (800bea0 <_strtol_l.constprop.0+0x108>)
 800bdf0:	0031      	movs	r1, r6
 800bdf2:	18fb      	adds	r3, r7, r3
 800bdf4:	0018      	movs	r0, r3
 800bdf6:	9303      	str	r3, [sp, #12]
 800bdf8:	f7f4 fa26 	bl	8000248 <__aeabi_uidivmod>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	9104      	str	r1, [sp, #16]
 800be00:	2101      	movs	r1, #1
 800be02:	4684      	mov	ip, r0
 800be04:	0010      	movs	r0, r2
 800be06:	4249      	negs	r1, r1
 800be08:	0023      	movs	r3, r4
 800be0a:	3b30      	subs	r3, #48	; 0x30
 800be0c:	2b09      	cmp	r3, #9
 800be0e:	d903      	bls.n	800be18 <_strtol_l.constprop.0+0x80>
 800be10:	3b11      	subs	r3, #17
 800be12:	2b19      	cmp	r3, #25
 800be14:	d81d      	bhi.n	800be52 <_strtol_l.constprop.0+0xba>
 800be16:	330a      	adds	r3, #10
 800be18:	429e      	cmp	r6, r3
 800be1a:	dd1e      	ble.n	800be5a <_strtol_l.constprop.0+0xc2>
 800be1c:	1c54      	adds	r4, r2, #1
 800be1e:	d009      	beq.n	800be34 <_strtol_l.constprop.0+0x9c>
 800be20:	000a      	movs	r2, r1
 800be22:	4584      	cmp	ip, r0
 800be24:	d306      	bcc.n	800be34 <_strtol_l.constprop.0+0x9c>
 800be26:	d102      	bne.n	800be2e <_strtol_l.constprop.0+0x96>
 800be28:	9c04      	ldr	r4, [sp, #16]
 800be2a:	429c      	cmp	r4, r3
 800be2c:	db02      	blt.n	800be34 <_strtol_l.constprop.0+0x9c>
 800be2e:	2201      	movs	r2, #1
 800be30:	4370      	muls	r0, r6
 800be32:	1818      	adds	r0, r3, r0
 800be34:	782c      	ldrb	r4, [r5, #0]
 800be36:	3501      	adds	r5, #1
 800be38:	e7e6      	b.n	800be08 <_strtol_l.constprop.0+0x70>
 800be3a:	f000 fb57 	bl	800c4ec <__errno>
 800be3e:	2316      	movs	r3, #22
 800be40:	6003      	str	r3, [r0, #0]
 800be42:	2000      	movs	r0, #0
 800be44:	b007      	add	sp, #28
 800be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be48:	2c2b      	cmp	r4, #43	; 0x2b
 800be4a:	d1c2      	bne.n	800bdd2 <_strtol_l.constprop.0+0x3a>
 800be4c:	781c      	ldrb	r4, [r3, #0]
 800be4e:	1c95      	adds	r5, r2, #2
 800be50:	e7bf      	b.n	800bdd2 <_strtol_l.constprop.0+0x3a>
 800be52:	0023      	movs	r3, r4
 800be54:	3b61      	subs	r3, #97	; 0x61
 800be56:	2b19      	cmp	r3, #25
 800be58:	d9dd      	bls.n	800be16 <_strtol_l.constprop.0+0x7e>
 800be5a:	1c53      	adds	r3, r2, #1
 800be5c:	d109      	bne.n	800be72 <_strtol_l.constprop.0+0xda>
 800be5e:	2322      	movs	r3, #34	; 0x22
 800be60:	9a05      	ldr	r2, [sp, #20]
 800be62:	9803      	ldr	r0, [sp, #12]
 800be64:	6013      	str	r3, [r2, #0]
 800be66:	9b02      	ldr	r3, [sp, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0eb      	beq.n	800be44 <_strtol_l.constprop.0+0xac>
 800be6c:	1e6b      	subs	r3, r5, #1
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	e007      	b.n	800be82 <_strtol_l.constprop.0+0xea>
 800be72:	2f00      	cmp	r7, #0
 800be74:	d000      	beq.n	800be78 <_strtol_l.constprop.0+0xe0>
 800be76:	4240      	negs	r0, r0
 800be78:	9b02      	ldr	r3, [sp, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0e2      	beq.n	800be44 <_strtol_l.constprop.0+0xac>
 800be7e:	2a00      	cmp	r2, #0
 800be80:	d1f4      	bne.n	800be6c <_strtol_l.constprop.0+0xd4>
 800be82:	9b02      	ldr	r3, [sp, #8]
 800be84:	9a01      	ldr	r2, [sp, #4]
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	e7dc      	b.n	800be44 <_strtol_l.constprop.0+0xac>
 800be8a:	2430      	movs	r4, #48	; 0x30
 800be8c:	2e00      	cmp	r6, #0
 800be8e:	d1ae      	bne.n	800bdee <_strtol_l.constprop.0+0x56>
 800be90:	3608      	adds	r6, #8
 800be92:	e7ac      	b.n	800bdee <_strtol_l.constprop.0+0x56>
 800be94:	2c30      	cmp	r4, #48	; 0x30
 800be96:	d0a2      	beq.n	800bdde <_strtol_l.constprop.0+0x46>
 800be98:	260a      	movs	r6, #10
 800be9a:	e7a8      	b.n	800bdee <_strtol_l.constprop.0+0x56>
 800be9c:	08014a81 	.word	0x08014a81
 800bea0:	7fffffff 	.word	0x7fffffff

0800bea4 <_strtol_r>:
 800bea4:	b510      	push	{r4, lr}
 800bea6:	f7ff ff77 	bl	800bd98 <_strtol_l.constprop.0>
 800beaa:	bd10      	pop	{r4, pc}

0800beac <strtol>:
 800beac:	b510      	push	{r4, lr}
 800beae:	4c04      	ldr	r4, [pc, #16]	; (800bec0 <strtol+0x14>)
 800beb0:	0013      	movs	r3, r2
 800beb2:	000a      	movs	r2, r1
 800beb4:	0001      	movs	r1, r0
 800beb6:	6820      	ldr	r0, [r4, #0]
 800beb8:	f7ff ff6e 	bl	800bd98 <_strtol_l.constprop.0>
 800bebc:	bd10      	pop	{r4, pc}
 800bebe:	46c0      	nop			; (mov r8, r8)
 800bec0:	200006d0 	.word	0x200006d0

0800bec4 <_strtoul_l.constprop.0>:
 800bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec6:	b087      	sub	sp, #28
 800bec8:	9202      	str	r2, [sp, #8]
 800beca:	4a3e      	ldr	r2, [pc, #248]	; (800bfc4 <_strtoul_l.constprop.0+0x100>)
 800becc:	001e      	movs	r6, r3
 800bece:	9101      	str	r1, [sp, #4]
 800bed0:	000b      	movs	r3, r1
 800bed2:	4694      	mov	ip, r2
 800bed4:	2108      	movs	r1, #8
 800bed6:	9005      	str	r0, [sp, #20]
 800bed8:	001a      	movs	r2, r3
 800beda:	4660      	mov	r0, ip
 800bedc:	7814      	ldrb	r4, [r2, #0]
 800bede:	3301      	adds	r3, #1
 800bee0:	5d00      	ldrb	r0, [r0, r4]
 800bee2:	001d      	movs	r5, r3
 800bee4:	0007      	movs	r7, r0
 800bee6:	400f      	ands	r7, r1
 800bee8:	4208      	tst	r0, r1
 800beea:	d1f5      	bne.n	800bed8 <_strtoul_l.constprop.0+0x14>
 800beec:	2c2d      	cmp	r4, #45	; 0x2d
 800beee:	d13d      	bne.n	800bf6c <_strtoul_l.constprop.0+0xa8>
 800bef0:	2701      	movs	r7, #1
 800bef2:	781c      	ldrb	r4, [r3, #0]
 800bef4:	1c95      	adds	r5, r2, #2
 800bef6:	2e00      	cmp	r6, #0
 800bef8:	d05f      	beq.n	800bfba <_strtoul_l.constprop.0+0xf6>
 800befa:	2e10      	cmp	r6, #16
 800befc:	d109      	bne.n	800bf12 <_strtoul_l.constprop.0+0x4e>
 800befe:	2c30      	cmp	r4, #48	; 0x30
 800bf00:	d107      	bne.n	800bf12 <_strtoul_l.constprop.0+0x4e>
 800bf02:	2220      	movs	r2, #32
 800bf04:	782b      	ldrb	r3, [r5, #0]
 800bf06:	4393      	bics	r3, r2
 800bf08:	2b58      	cmp	r3, #88	; 0x58
 800bf0a:	d151      	bne.n	800bfb0 <_strtoul_l.constprop.0+0xec>
 800bf0c:	2610      	movs	r6, #16
 800bf0e:	786c      	ldrb	r4, [r5, #1]
 800bf10:	3502      	adds	r5, #2
 800bf12:	2001      	movs	r0, #1
 800bf14:	0031      	movs	r1, r6
 800bf16:	4240      	negs	r0, r0
 800bf18:	f7f4 f910 	bl	800013c <__udivsi3>
 800bf1c:	9003      	str	r0, [sp, #12]
 800bf1e:	2001      	movs	r0, #1
 800bf20:	0031      	movs	r1, r6
 800bf22:	4240      	negs	r0, r0
 800bf24:	f7f4 f990 	bl	8000248 <__aeabi_uidivmod>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	9104      	str	r1, [sp, #16]
 800bf2e:	2101      	movs	r1, #1
 800bf30:	0018      	movs	r0, r3
 800bf32:	4694      	mov	ip, r2
 800bf34:	4249      	negs	r1, r1
 800bf36:	0022      	movs	r2, r4
 800bf38:	3a30      	subs	r2, #48	; 0x30
 800bf3a:	2a09      	cmp	r2, #9
 800bf3c:	d903      	bls.n	800bf46 <_strtoul_l.constprop.0+0x82>
 800bf3e:	3a11      	subs	r2, #17
 800bf40:	2a19      	cmp	r2, #25
 800bf42:	d818      	bhi.n	800bf76 <_strtoul_l.constprop.0+0xb2>
 800bf44:	320a      	adds	r2, #10
 800bf46:	4296      	cmp	r6, r2
 800bf48:	dd19      	ble.n	800bf7e <_strtoul_l.constprop.0+0xba>
 800bf4a:	1c5c      	adds	r4, r3, #1
 800bf4c:	d00b      	beq.n	800bf66 <_strtoul_l.constprop.0+0xa2>
 800bf4e:	9c03      	ldr	r4, [sp, #12]
 800bf50:	000b      	movs	r3, r1
 800bf52:	4284      	cmp	r4, r0
 800bf54:	d307      	bcc.n	800bf66 <_strtoul_l.constprop.0+0xa2>
 800bf56:	d103      	bne.n	800bf60 <_strtoul_l.constprop.0+0x9c>
 800bf58:	9c04      	ldr	r4, [sp, #16]
 800bf5a:	000b      	movs	r3, r1
 800bf5c:	4294      	cmp	r4, r2
 800bf5e:	db02      	blt.n	800bf66 <_strtoul_l.constprop.0+0xa2>
 800bf60:	4663      	mov	r3, ip
 800bf62:	4370      	muls	r0, r6
 800bf64:	1810      	adds	r0, r2, r0
 800bf66:	782c      	ldrb	r4, [r5, #0]
 800bf68:	3501      	adds	r5, #1
 800bf6a:	e7e4      	b.n	800bf36 <_strtoul_l.constprop.0+0x72>
 800bf6c:	2c2b      	cmp	r4, #43	; 0x2b
 800bf6e:	d1c2      	bne.n	800bef6 <_strtoul_l.constprop.0+0x32>
 800bf70:	781c      	ldrb	r4, [r3, #0]
 800bf72:	1c95      	adds	r5, r2, #2
 800bf74:	e7bf      	b.n	800bef6 <_strtoul_l.constprop.0+0x32>
 800bf76:	0022      	movs	r2, r4
 800bf78:	3a61      	subs	r2, #97	; 0x61
 800bf7a:	2a19      	cmp	r2, #25
 800bf7c:	d9e2      	bls.n	800bf44 <_strtoul_l.constprop.0+0x80>
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	d108      	bne.n	800bf94 <_strtoul_l.constprop.0+0xd0>
 800bf82:	2222      	movs	r2, #34	; 0x22
 800bf84:	9905      	ldr	r1, [sp, #20]
 800bf86:	0018      	movs	r0, r3
 800bf88:	600a      	str	r2, [r1, #0]
 800bf8a:	9a02      	ldr	r2, [sp, #8]
 800bf8c:	2a00      	cmp	r2, #0
 800bf8e:	d109      	bne.n	800bfa4 <_strtoul_l.constprop.0+0xe0>
 800bf90:	b007      	add	sp, #28
 800bf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf94:	2f00      	cmp	r7, #0
 800bf96:	d000      	beq.n	800bf9a <_strtoul_l.constprop.0+0xd6>
 800bf98:	4240      	negs	r0, r0
 800bf9a:	9a02      	ldr	r2, [sp, #8]
 800bf9c:	2a00      	cmp	r2, #0
 800bf9e:	d0f7      	beq.n	800bf90 <_strtoul_l.constprop.0+0xcc>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <_strtoul_l.constprop.0+0xe4>
 800bfa4:	1e6b      	subs	r3, r5, #1
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	9a01      	ldr	r2, [sp, #4]
 800bfac:	601a      	str	r2, [r3, #0]
 800bfae:	e7ef      	b.n	800bf90 <_strtoul_l.constprop.0+0xcc>
 800bfb0:	2430      	movs	r4, #48	; 0x30
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d1ad      	bne.n	800bf12 <_strtoul_l.constprop.0+0x4e>
 800bfb6:	3608      	adds	r6, #8
 800bfb8:	e7ab      	b.n	800bf12 <_strtoul_l.constprop.0+0x4e>
 800bfba:	2c30      	cmp	r4, #48	; 0x30
 800bfbc:	d0a1      	beq.n	800bf02 <_strtoul_l.constprop.0+0x3e>
 800bfbe:	260a      	movs	r6, #10
 800bfc0:	e7a7      	b.n	800bf12 <_strtoul_l.constprop.0+0x4e>
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	08014a81 	.word	0x08014a81

0800bfc8 <_strtoul_r>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	f7ff ff7b 	bl	800bec4 <_strtoul_l.constprop.0>
 800bfce:	bd10      	pop	{r4, pc}

0800bfd0 <strtoul>:
 800bfd0:	b510      	push	{r4, lr}
 800bfd2:	4c04      	ldr	r4, [pc, #16]	; (800bfe4 <strtoul+0x14>)
 800bfd4:	0013      	movs	r3, r2
 800bfd6:	000a      	movs	r2, r1
 800bfd8:	0001      	movs	r1, r0
 800bfda:	6820      	ldr	r0, [r4, #0]
 800bfdc:	f7ff ff72 	bl	800bec4 <_strtoul_l.constprop.0>
 800bfe0:	bd10      	pop	{r4, pc}
 800bfe2:	46c0      	nop			; (mov r8, r8)
 800bfe4:	200006d0 	.word	0x200006d0

0800bfe8 <std>:
 800bfe8:	2300      	movs	r3, #0
 800bfea:	b510      	push	{r4, lr}
 800bfec:	0004      	movs	r4, r0
 800bfee:	6003      	str	r3, [r0, #0]
 800bff0:	6043      	str	r3, [r0, #4]
 800bff2:	6083      	str	r3, [r0, #8]
 800bff4:	8181      	strh	r1, [r0, #12]
 800bff6:	6643      	str	r3, [r0, #100]	; 0x64
 800bff8:	81c2      	strh	r2, [r0, #14]
 800bffa:	6103      	str	r3, [r0, #16]
 800bffc:	6143      	str	r3, [r0, #20]
 800bffe:	6183      	str	r3, [r0, #24]
 800c000:	0019      	movs	r1, r3
 800c002:	2208      	movs	r2, #8
 800c004:	305c      	adds	r0, #92	; 0x5c
 800c006:	f000 f97d 	bl	800c304 <memset>
 800c00a:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <std+0x50>)
 800c00c:	61e4      	str	r4, [r4, #28]
 800c00e:	6223      	str	r3, [r4, #32]
 800c010:	4b0a      	ldr	r3, [pc, #40]	; (800c03c <std+0x54>)
 800c012:	6263      	str	r3, [r4, #36]	; 0x24
 800c014:	4b0a      	ldr	r3, [pc, #40]	; (800c040 <std+0x58>)
 800c016:	62a3      	str	r3, [r4, #40]	; 0x28
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <std+0x5c>)
 800c01a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c01c:	4b0a      	ldr	r3, [pc, #40]	; (800c048 <std+0x60>)
 800c01e:	429c      	cmp	r4, r3
 800c020:	d005      	beq.n	800c02e <std+0x46>
 800c022:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <std+0x64>)
 800c024:	429c      	cmp	r4, r3
 800c026:	d002      	beq.n	800c02e <std+0x46>
 800c028:	4b09      	ldr	r3, [pc, #36]	; (800c050 <std+0x68>)
 800c02a:	429c      	cmp	r4, r3
 800c02c:	d103      	bne.n	800c036 <std+0x4e>
 800c02e:	0020      	movs	r0, r4
 800c030:	3058      	adds	r0, #88	; 0x58
 800c032:	f000 fa85 	bl	800c540 <__retarget_lock_init_recursive>
 800c036:	bd10      	pop	{r4, pc}
 800c038:	0800c269 	.word	0x0800c269
 800c03c:	0800c295 	.word	0x0800c295
 800c040:	0800c2cd 	.word	0x0800c2cd
 800c044:	0800c2f9 	.word	0x0800c2f9
 800c048:	20000c6c 	.word	0x20000c6c
 800c04c:	20000cd4 	.word	0x20000cd4
 800c050:	20000d3c 	.word	0x20000d3c

0800c054 <stdio_exit_handler>:
 800c054:	b510      	push	{r4, lr}
 800c056:	4a03      	ldr	r2, [pc, #12]	; (800c064 <stdio_exit_handler+0x10>)
 800c058:	4903      	ldr	r1, [pc, #12]	; (800c068 <stdio_exit_handler+0x14>)
 800c05a:	4804      	ldr	r0, [pc, #16]	; (800c06c <stdio_exit_handler+0x18>)
 800c05c:	f000 f86c 	bl	800c138 <_fwalk_sglue>
 800c060:	bd10      	pop	{r4, pc}
 800c062:	46c0      	nop			; (mov r8, r8)
 800c064:	20000438 	.word	0x20000438
 800c068:	08010041 	.word	0x08010041
 800c06c:	200005b0 	.word	0x200005b0

0800c070 <cleanup_stdio>:
 800c070:	6841      	ldr	r1, [r0, #4]
 800c072:	4b0b      	ldr	r3, [pc, #44]	; (800c0a0 <cleanup_stdio+0x30>)
 800c074:	b510      	push	{r4, lr}
 800c076:	0004      	movs	r4, r0
 800c078:	4299      	cmp	r1, r3
 800c07a:	d001      	beq.n	800c080 <cleanup_stdio+0x10>
 800c07c:	f003 ffe0 	bl	8010040 <_fclose_r>
 800c080:	68a1      	ldr	r1, [r4, #8]
 800c082:	4b08      	ldr	r3, [pc, #32]	; (800c0a4 <cleanup_stdio+0x34>)
 800c084:	4299      	cmp	r1, r3
 800c086:	d002      	beq.n	800c08e <cleanup_stdio+0x1e>
 800c088:	0020      	movs	r0, r4
 800c08a:	f003 ffd9 	bl	8010040 <_fclose_r>
 800c08e:	68e1      	ldr	r1, [r4, #12]
 800c090:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <cleanup_stdio+0x38>)
 800c092:	4299      	cmp	r1, r3
 800c094:	d002      	beq.n	800c09c <cleanup_stdio+0x2c>
 800c096:	0020      	movs	r0, r4
 800c098:	f003 ffd2 	bl	8010040 <_fclose_r>
 800c09c:	bd10      	pop	{r4, pc}
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	20000c6c 	.word	0x20000c6c
 800c0a4:	20000cd4 	.word	0x20000cd4
 800c0a8:	20000d3c 	.word	0x20000d3c

0800c0ac <global_stdio_init.part.0>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <global_stdio_init.part.0+0x28>)
 800c0b0:	4a09      	ldr	r2, [pc, #36]	; (800c0d8 <global_stdio_init.part.0+0x2c>)
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	4809      	ldr	r0, [pc, #36]	; (800c0dc <global_stdio_init.part.0+0x30>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f7ff ff95 	bl	800bfe8 <std>
 800c0be:	2201      	movs	r2, #1
 800c0c0:	2109      	movs	r1, #9
 800c0c2:	4807      	ldr	r0, [pc, #28]	; (800c0e0 <global_stdio_init.part.0+0x34>)
 800c0c4:	f7ff ff90 	bl	800bfe8 <std>
 800c0c8:	2202      	movs	r2, #2
 800c0ca:	2112      	movs	r1, #18
 800c0cc:	4805      	ldr	r0, [pc, #20]	; (800c0e4 <global_stdio_init.part.0+0x38>)
 800c0ce:	f7ff ff8b 	bl	800bfe8 <std>
 800c0d2:	bd10      	pop	{r4, pc}
 800c0d4:	20000da4 	.word	0x20000da4
 800c0d8:	0800c055 	.word	0x0800c055
 800c0dc:	20000c6c 	.word	0x20000c6c
 800c0e0:	20000cd4 	.word	0x20000cd4
 800c0e4:	20000d3c 	.word	0x20000d3c

0800c0e8 <__sfp_lock_acquire>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	4802      	ldr	r0, [pc, #8]	; (800c0f4 <__sfp_lock_acquire+0xc>)
 800c0ec:	f000 fa2a 	bl	800c544 <__retarget_lock_acquire_recursive>
 800c0f0:	bd10      	pop	{r4, pc}
 800c0f2:	46c0      	nop			; (mov r8, r8)
 800c0f4:	20000dae 	.word	0x20000dae

0800c0f8 <__sfp_lock_release>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4802      	ldr	r0, [pc, #8]	; (800c104 <__sfp_lock_release+0xc>)
 800c0fc:	f000 fa23 	bl	800c546 <__retarget_lock_release_recursive>
 800c100:	bd10      	pop	{r4, pc}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	20000dae 	.word	0x20000dae

0800c108 <__sinit>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	0004      	movs	r4, r0
 800c10c:	f7ff ffec 	bl	800c0e8 <__sfp_lock_acquire>
 800c110:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c112:	2b00      	cmp	r3, #0
 800c114:	d002      	beq.n	800c11c <__sinit+0x14>
 800c116:	f7ff ffef 	bl	800c0f8 <__sfp_lock_release>
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	4b04      	ldr	r3, [pc, #16]	; (800c130 <__sinit+0x28>)
 800c11e:	6363      	str	r3, [r4, #52]	; 0x34
 800c120:	4b04      	ldr	r3, [pc, #16]	; (800c134 <__sinit+0x2c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f6      	bne.n	800c116 <__sinit+0xe>
 800c128:	f7ff ffc0 	bl	800c0ac <global_stdio_init.part.0>
 800c12c:	e7f3      	b.n	800c116 <__sinit+0xe>
 800c12e:	46c0      	nop			; (mov r8, r8)
 800c130:	0800c071 	.word	0x0800c071
 800c134:	20000da4 	.word	0x20000da4

0800c138 <_fwalk_sglue>:
 800c138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c13a:	0014      	movs	r4, r2
 800c13c:	2600      	movs	r6, #0
 800c13e:	9000      	str	r0, [sp, #0]
 800c140:	9101      	str	r1, [sp, #4]
 800c142:	68a5      	ldr	r5, [r4, #8]
 800c144:	6867      	ldr	r7, [r4, #4]
 800c146:	3f01      	subs	r7, #1
 800c148:	d504      	bpl.n	800c154 <_fwalk_sglue+0x1c>
 800c14a:	6824      	ldr	r4, [r4, #0]
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d1f8      	bne.n	800c142 <_fwalk_sglue+0xa>
 800c150:	0030      	movs	r0, r6
 800c152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c154:	89ab      	ldrh	r3, [r5, #12]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d908      	bls.n	800c16c <_fwalk_sglue+0x34>
 800c15a:	220e      	movs	r2, #14
 800c15c:	5eab      	ldrsh	r3, [r5, r2]
 800c15e:	3301      	adds	r3, #1
 800c160:	d004      	beq.n	800c16c <_fwalk_sglue+0x34>
 800c162:	0029      	movs	r1, r5
 800c164:	9800      	ldr	r0, [sp, #0]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	4798      	blx	r3
 800c16a:	4306      	orrs	r6, r0
 800c16c:	3568      	adds	r5, #104	; 0x68
 800c16e:	e7ea      	b.n	800c146 <_fwalk_sglue+0xe>

0800c170 <snprintf>:
 800c170:	b40c      	push	{r2, r3}
 800c172:	b530      	push	{r4, r5, lr}
 800c174:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <snprintf+0x64>)
 800c176:	000c      	movs	r4, r1
 800c178:	681d      	ldr	r5, [r3, #0]
 800c17a:	b09d      	sub	sp, #116	; 0x74
 800c17c:	2900      	cmp	r1, #0
 800c17e:	da08      	bge.n	800c192 <snprintf+0x22>
 800c180:	238b      	movs	r3, #139	; 0x8b
 800c182:	2001      	movs	r0, #1
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	4240      	negs	r0, r0
 800c188:	b01d      	add	sp, #116	; 0x74
 800c18a:	bc30      	pop	{r4, r5}
 800c18c:	bc08      	pop	{r3}
 800c18e:	b002      	add	sp, #8
 800c190:	4718      	bx	r3
 800c192:	2382      	movs	r3, #130	; 0x82
 800c194:	466a      	mov	r2, sp
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	8293      	strh	r3, [r2, #20]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9002      	str	r0, [sp, #8]
 800c19e:	9006      	str	r0, [sp, #24]
 800c1a0:	4299      	cmp	r1, r3
 800c1a2:	d000      	beq.n	800c1a6 <snprintf+0x36>
 800c1a4:	1e4b      	subs	r3, r1, #1
 800c1a6:	9304      	str	r3, [sp, #16]
 800c1a8:	9307      	str	r3, [sp, #28]
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	466a      	mov	r2, sp
 800c1ae:	425b      	negs	r3, r3
 800c1b0:	82d3      	strh	r3, [r2, #22]
 800c1b2:	0028      	movs	r0, r5
 800c1b4:	ab21      	add	r3, sp, #132	; 0x84
 800c1b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c1b8:	a902      	add	r1, sp, #8
 800c1ba:	9301      	str	r3, [sp, #4]
 800c1bc:	f001 fae2 	bl	800d784 <_svfprintf_r>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	da01      	bge.n	800c1c8 <snprintf+0x58>
 800c1c4:	238b      	movs	r3, #139	; 0x8b
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	d0dd      	beq.n	800c188 <snprintf+0x18>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	9b02      	ldr	r3, [sp, #8]
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e7d9      	b.n	800c188 <snprintf+0x18>
 800c1d4:	200006d0 	.word	0x200006d0

0800c1d8 <sprintf>:
 800c1d8:	b40e      	push	{r1, r2, r3}
 800c1da:	b500      	push	{lr}
 800c1dc:	490b      	ldr	r1, [pc, #44]	; (800c20c <sprintf+0x34>)
 800c1de:	b09c      	sub	sp, #112	; 0x70
 800c1e0:	ab1d      	add	r3, sp, #116	; 0x74
 800c1e2:	9002      	str	r0, [sp, #8]
 800c1e4:	9006      	str	r0, [sp, #24]
 800c1e6:	9107      	str	r1, [sp, #28]
 800c1e8:	9104      	str	r1, [sp, #16]
 800c1ea:	4809      	ldr	r0, [pc, #36]	; (800c210 <sprintf+0x38>)
 800c1ec:	4909      	ldr	r1, [pc, #36]	; (800c214 <sprintf+0x3c>)
 800c1ee:	cb04      	ldmia	r3!, {r2}
 800c1f0:	9105      	str	r1, [sp, #20]
 800c1f2:	6800      	ldr	r0, [r0, #0]
 800c1f4:	a902      	add	r1, sp, #8
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	f001 fac4 	bl	800d784 <_svfprintf_r>
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	9b02      	ldr	r3, [sp, #8]
 800c200:	701a      	strb	r2, [r3, #0]
 800c202:	b01c      	add	sp, #112	; 0x70
 800c204:	bc08      	pop	{r3}
 800c206:	b003      	add	sp, #12
 800c208:	4718      	bx	r3
 800c20a:	46c0      	nop			; (mov r8, r8)
 800c20c:	7fffffff 	.word	0x7fffffff
 800c210:	200006d0 	.word	0x200006d0
 800c214:	ffff0208 	.word	0xffff0208

0800c218 <sscanf>:
 800c218:	b40e      	push	{r1, r2, r3}
 800c21a:	b530      	push	{r4, r5, lr}
 800c21c:	2381      	movs	r3, #129	; 0x81
 800c21e:	b09c      	sub	sp, #112	; 0x70
 800c220:	466a      	mov	r2, sp
 800c222:	ac1f      	add	r4, sp, #124	; 0x7c
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	cc20      	ldmia	r4!, {r5}
 800c228:	8293      	strh	r3, [r2, #20]
 800c22a:	9002      	str	r0, [sp, #8]
 800c22c:	9006      	str	r0, [sp, #24]
 800c22e:	f7f3 ff69 	bl	8000104 <strlen>
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <sscanf+0x48>)
 800c234:	466a      	mov	r2, sp
 800c236:	930a      	str	r3, [sp, #40]	; 0x28
 800c238:	2300      	movs	r3, #0
 800c23a:	9003      	str	r0, [sp, #12]
 800c23c:	9007      	str	r0, [sp, #28]
 800c23e:	4809      	ldr	r0, [pc, #36]	; (800c264 <sscanf+0x4c>)
 800c240:	930e      	str	r3, [sp, #56]	; 0x38
 800c242:	9313      	str	r3, [sp, #76]	; 0x4c
 800c244:	3b01      	subs	r3, #1
 800c246:	82d3      	strh	r3, [r2, #22]
 800c248:	a902      	add	r1, sp, #8
 800c24a:	0023      	movs	r3, r4
 800c24c:	002a      	movs	r2, r5
 800c24e:	6800      	ldr	r0, [r0, #0]
 800c250:	9401      	str	r4, [sp, #4]
 800c252:	f002 fcd9 	bl	800ec08 <__ssvfscanf_r>
 800c256:	b01c      	add	sp, #112	; 0x70
 800c258:	bc30      	pop	{r4, r5}
 800c25a:	bc08      	pop	{r3}
 800c25c:	b003      	add	sp, #12
 800c25e:	4718      	bx	r3
 800c260:	0800c291 	.word	0x0800c291
 800c264:	200006d0 	.word	0x200006d0

0800c268 <__sread>:
 800c268:	b570      	push	{r4, r5, r6, lr}
 800c26a:	000c      	movs	r4, r1
 800c26c:	250e      	movs	r5, #14
 800c26e:	5f49      	ldrsh	r1, [r1, r5]
 800c270:	f000 f902 	bl	800c478 <_read_r>
 800c274:	2800      	cmp	r0, #0
 800c276:	db03      	blt.n	800c280 <__sread+0x18>
 800c278:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c27a:	181b      	adds	r3, r3, r0
 800c27c:	6523      	str	r3, [r4, #80]	; 0x50
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	4a02      	ldr	r2, [pc, #8]	; (800c28c <__sread+0x24>)
 800c284:	4013      	ands	r3, r2
 800c286:	81a3      	strh	r3, [r4, #12]
 800c288:	e7f9      	b.n	800c27e <__sread+0x16>
 800c28a:	46c0      	nop			; (mov r8, r8)
 800c28c:	ffffefff 	.word	0xffffefff

0800c290 <__seofread>:
 800c290:	2000      	movs	r0, #0
 800c292:	4770      	bx	lr

0800c294 <__swrite>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	001f      	movs	r7, r3
 800c298:	898b      	ldrh	r3, [r1, #12]
 800c29a:	0005      	movs	r5, r0
 800c29c:	000c      	movs	r4, r1
 800c29e:	0016      	movs	r6, r2
 800c2a0:	05db      	lsls	r3, r3, #23
 800c2a2:	d505      	bpl.n	800c2b0 <__swrite+0x1c>
 800c2a4:	230e      	movs	r3, #14
 800c2a6:	5ec9      	ldrsh	r1, [r1, r3]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	f000 f8d0 	bl	800c450 <_lseek_r>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	4a05      	ldr	r2, [pc, #20]	; (800c2c8 <__swrite+0x34>)
 800c2b4:	0028      	movs	r0, r5
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	0032      	movs	r2, r6
 800c2bc:	230e      	movs	r3, #14
 800c2be:	5ee1      	ldrsh	r1, [r4, r3]
 800c2c0:	003b      	movs	r3, r7
 800c2c2:	f000 f8ff 	bl	800c4c4 <_write_r>
 800c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c8:	ffffefff 	.word	0xffffefff

0800c2cc <__sseek>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	000c      	movs	r4, r1
 800c2d0:	250e      	movs	r5, #14
 800c2d2:	5f49      	ldrsh	r1, [r1, r5]
 800c2d4:	f000 f8bc 	bl	800c450 <_lseek_r>
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	1c42      	adds	r2, r0, #1
 800c2dc:	d103      	bne.n	800c2e6 <__sseek+0x1a>
 800c2de:	4a05      	ldr	r2, [pc, #20]	; (800c2f4 <__sseek+0x28>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	81a3      	strh	r3, [r4, #12]
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}
 800c2e6:	2280      	movs	r2, #128	; 0x80
 800c2e8:	0152      	lsls	r2, r2, #5
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	6520      	str	r0, [r4, #80]	; 0x50
 800c2f0:	e7f8      	b.n	800c2e4 <__sseek+0x18>
 800c2f2:	46c0      	nop			; (mov r8, r8)
 800c2f4:	ffffefff 	.word	0xffffefff

0800c2f8 <__sclose>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	230e      	movs	r3, #14
 800c2fc:	5ec9      	ldrsh	r1, [r1, r3]
 800c2fe:	f000 f895 	bl	800c42c <_close_r>
 800c302:	bd10      	pop	{r4, pc}

0800c304 <memset>:
 800c304:	0003      	movs	r3, r0
 800c306:	1882      	adds	r2, r0, r2
 800c308:	4293      	cmp	r3, r2
 800c30a:	d100      	bne.n	800c30e <memset+0xa>
 800c30c:	4770      	bx	lr
 800c30e:	7019      	strb	r1, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	e7f9      	b.n	800c308 <memset+0x4>

0800c314 <strchr>:
 800c314:	b2c9      	uxtb	r1, r1
 800c316:	7803      	ldrb	r3, [r0, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <strchr+0x12>
 800c31c:	428b      	cmp	r3, r1
 800c31e:	d100      	bne.n	800c322 <strchr+0xe>
 800c320:	4770      	bx	lr
 800c322:	3001      	adds	r0, #1
 800c324:	e7f7      	b.n	800c316 <strchr+0x2>
 800c326:	424b      	negs	r3, r1
 800c328:	4159      	adcs	r1, r3
 800c32a:	4249      	negs	r1, r1
 800c32c:	4008      	ands	r0, r1
 800c32e:	e7f7      	b.n	800c320 <strchr+0xc>

0800c330 <strncmp>:
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	0005      	movs	r5, r0
 800c334:	1e10      	subs	r0, r2, #0
 800c336:	d00b      	beq.n	800c350 <strncmp+0x20>
 800c338:	2400      	movs	r4, #0
 800c33a:	3a01      	subs	r2, #1
 800c33c:	5d2b      	ldrb	r3, [r5, r4]
 800c33e:	5d08      	ldrb	r0, [r1, r4]
 800c340:	4283      	cmp	r3, r0
 800c342:	d104      	bne.n	800c34e <strncmp+0x1e>
 800c344:	42a2      	cmp	r2, r4
 800c346:	d002      	beq.n	800c34e <strncmp+0x1e>
 800c348:	3401      	adds	r4, #1
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f6      	bne.n	800c33c <strncmp+0xc>
 800c34e:	1a18      	subs	r0, r3, r0
 800c350:	bd30      	pop	{r4, r5, pc}

0800c352 <strncpy>:
 800c352:	0003      	movs	r3, r0
 800c354:	b530      	push	{r4, r5, lr}
 800c356:	001d      	movs	r5, r3
 800c358:	2a00      	cmp	r2, #0
 800c35a:	d006      	beq.n	800c36a <strncpy+0x18>
 800c35c:	780c      	ldrb	r4, [r1, #0]
 800c35e:	3a01      	subs	r2, #1
 800c360:	3301      	adds	r3, #1
 800c362:	702c      	strb	r4, [r5, #0]
 800c364:	3101      	adds	r1, #1
 800c366:	2c00      	cmp	r4, #0
 800c368:	d1f5      	bne.n	800c356 <strncpy+0x4>
 800c36a:	2100      	movs	r1, #0
 800c36c:	189a      	adds	r2, r3, r2
 800c36e:	4293      	cmp	r3, r2
 800c370:	d100      	bne.n	800c374 <strncpy+0x22>
 800c372:	bd30      	pop	{r4, r5, pc}
 800c374:	7019      	strb	r1, [r3, #0]
 800c376:	3301      	adds	r3, #1
 800c378:	e7f9      	b.n	800c36e <strncpy+0x1c>
	...

0800c37c <strtok>:
 800c37c:	4b03      	ldr	r3, [pc, #12]	; (800c38c <strtok+0x10>)
 800c37e:	b510      	push	{r4, lr}
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	2301      	movs	r3, #1
 800c384:	3250      	adds	r2, #80	; 0x50
 800c386:	f000 f803 	bl	800c390 <__strtok_r>
 800c38a:	bd10      	pop	{r4, pc}
 800c38c:	200006d0 	.word	0x200006d0

0800c390 <__strtok_r>:
 800c390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c392:	2800      	cmp	r0, #0
 800c394:	d102      	bne.n	800c39c <__strtok_r+0xc>
 800c396:	6810      	ldr	r0, [r2, #0]
 800c398:	2800      	cmp	r0, #0
 800c39a:	d013      	beq.n	800c3c4 <__strtok_r+0x34>
 800c39c:	0004      	movs	r4, r0
 800c39e:	0020      	movs	r0, r4
 800c3a0:	000e      	movs	r6, r1
 800c3a2:	7805      	ldrb	r5, [r0, #0]
 800c3a4:	3401      	adds	r4, #1
 800c3a6:	7837      	ldrb	r7, [r6, #0]
 800c3a8:	2f00      	cmp	r7, #0
 800c3aa:	d104      	bne.n	800c3b6 <__strtok_r+0x26>
 800c3ac:	2d00      	cmp	r5, #0
 800c3ae:	d10f      	bne.n	800c3d0 <__strtok_r+0x40>
 800c3b0:	0028      	movs	r0, r5
 800c3b2:	6015      	str	r5, [r2, #0]
 800c3b4:	e006      	b.n	800c3c4 <__strtok_r+0x34>
 800c3b6:	3601      	adds	r6, #1
 800c3b8:	42bd      	cmp	r5, r7
 800c3ba:	d1f4      	bne.n	800c3a6 <__strtok_r+0x16>
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1ee      	bne.n	800c39e <__strtok_r+0xe>
 800c3c0:	6014      	str	r4, [r2, #0]
 800c3c2:	7003      	strb	r3, [r0, #0]
 800c3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c6:	002f      	movs	r7, r5
 800c3c8:	e00f      	b.n	800c3ea <__strtok_r+0x5a>
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	2e00      	cmp	r6, #0
 800c3ce:	d104      	bne.n	800c3da <__strtok_r+0x4a>
 800c3d0:	0023      	movs	r3, r4
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	781d      	ldrb	r5, [r3, #0]
 800c3d6:	0027      	movs	r7, r4
 800c3d8:	000b      	movs	r3, r1
 800c3da:	781e      	ldrb	r6, [r3, #0]
 800c3dc:	42b5      	cmp	r5, r6
 800c3de:	d1f4      	bne.n	800c3ca <__strtok_r+0x3a>
 800c3e0:	2d00      	cmp	r5, #0
 800c3e2:	d0f0      	beq.n	800c3c6 <__strtok_r+0x36>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	3c01      	subs	r4, #1
 800c3e8:	7023      	strb	r3, [r4, #0]
 800c3ea:	6017      	str	r7, [r2, #0]
 800c3ec:	e7ea      	b.n	800c3c4 <__strtok_r+0x34>

0800c3ee <strstr>:
 800c3ee:	780a      	ldrb	r2, [r1, #0]
 800c3f0:	b530      	push	{r4, r5, lr}
 800c3f2:	2a00      	cmp	r2, #0
 800c3f4:	d10c      	bne.n	800c410 <strstr+0x22>
 800c3f6:	bd30      	pop	{r4, r5, pc}
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d108      	bne.n	800c40e <strstr+0x20>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	5ccc      	ldrb	r4, [r1, r3]
 800c400:	2c00      	cmp	r4, #0
 800c402:	d0f8      	beq.n	800c3f6 <strstr+0x8>
 800c404:	5cc5      	ldrb	r5, [r0, r3]
 800c406:	42a5      	cmp	r5, r4
 800c408:	d101      	bne.n	800c40e <strstr+0x20>
 800c40a:	3301      	adds	r3, #1
 800c40c:	e7f7      	b.n	800c3fe <strstr+0x10>
 800c40e:	3001      	adds	r0, #1
 800c410:	7803      	ldrb	r3, [r0, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1f0      	bne.n	800c3f8 <strstr+0xa>
 800c416:	0018      	movs	r0, r3
 800c418:	e7ed      	b.n	800c3f6 <strstr+0x8>
	...

0800c41c <__locale_mb_cur_max>:
 800c41c:	2294      	movs	r2, #148	; 0x94
 800c41e:	4b02      	ldr	r3, [pc, #8]	; (800c428 <__locale_mb_cur_max+0xc>)
 800c420:	0052      	lsls	r2, r2, #1
 800c422:	5c98      	ldrb	r0, [r3, r2]
 800c424:	4770      	bx	lr
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	20000444 	.word	0x20000444

0800c42c <_close_r>:
 800c42c:	2300      	movs	r3, #0
 800c42e:	b570      	push	{r4, r5, r6, lr}
 800c430:	4d06      	ldr	r5, [pc, #24]	; (800c44c <_close_r+0x20>)
 800c432:	0004      	movs	r4, r0
 800c434:	0008      	movs	r0, r1
 800c436:	602b      	str	r3, [r5, #0]
 800c438:	f7f7 fe6d 	bl	8004116 <_close>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d103      	bne.n	800c448 <_close_r+0x1c>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d000      	beq.n	800c448 <_close_r+0x1c>
 800c446:	6023      	str	r3, [r4, #0]
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	20000da8 	.word	0x20000da8

0800c450 <_lseek_r>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	0004      	movs	r4, r0
 800c454:	0008      	movs	r0, r1
 800c456:	0011      	movs	r1, r2
 800c458:	001a      	movs	r2, r3
 800c45a:	2300      	movs	r3, #0
 800c45c:	4d05      	ldr	r5, [pc, #20]	; (800c474 <_lseek_r+0x24>)
 800c45e:	602b      	str	r3, [r5, #0]
 800c460:	f7f7 fe7a 	bl	8004158 <_lseek>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d103      	bne.n	800c470 <_lseek_r+0x20>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d000      	beq.n	800c470 <_lseek_r+0x20>
 800c46e:	6023      	str	r3, [r4, #0]
 800c470:	bd70      	pop	{r4, r5, r6, pc}
 800c472:	46c0      	nop			; (mov r8, r8)
 800c474:	20000da8 	.word	0x20000da8

0800c478 <_read_r>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	0004      	movs	r4, r0
 800c47c:	0008      	movs	r0, r1
 800c47e:	0011      	movs	r1, r2
 800c480:	001a      	movs	r2, r3
 800c482:	2300      	movs	r3, #0
 800c484:	4d05      	ldr	r5, [pc, #20]	; (800c49c <_read_r+0x24>)
 800c486:	602b      	str	r3, [r5, #0]
 800c488:	f7f7 fe0c 	bl	80040a4 <_read>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d103      	bne.n	800c498 <_read_r+0x20>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d000      	beq.n	800c498 <_read_r+0x20>
 800c496:	6023      	str	r3, [r4, #0]
 800c498:	bd70      	pop	{r4, r5, r6, pc}
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	20000da8 	.word	0x20000da8

0800c4a0 <_sbrk_r>:
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	b570      	push	{r4, r5, r6, lr}
 800c4a4:	4d06      	ldr	r5, [pc, #24]	; (800c4c0 <_sbrk_r+0x20>)
 800c4a6:	0004      	movs	r4, r0
 800c4a8:	0008      	movs	r0, r1
 800c4aa:	602b      	str	r3, [r5, #0]
 800c4ac:	f7f7 fe60 	bl	8004170 <_sbrk>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	d103      	bne.n	800c4bc <_sbrk_r+0x1c>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d000      	beq.n	800c4bc <_sbrk_r+0x1c>
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	20000da8 	.word	0x20000da8

0800c4c4 <_write_r>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	0004      	movs	r4, r0
 800c4c8:	0008      	movs	r0, r1
 800c4ca:	0011      	movs	r1, r2
 800c4cc:	001a      	movs	r2, r3
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4d05      	ldr	r5, [pc, #20]	; (800c4e8 <_write_r+0x24>)
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	f7f7 fe03 	bl	80040de <_write>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d103      	bne.n	800c4e4 <_write_r+0x20>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d000      	beq.n	800c4e4 <_write_r+0x20>
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	bd70      	pop	{r4, r5, r6, pc}
 800c4e6:	46c0      	nop			; (mov r8, r8)
 800c4e8:	20000da8 	.word	0x20000da8

0800c4ec <__errno>:
 800c4ec:	4b01      	ldr	r3, [pc, #4]	; (800c4f4 <__errno+0x8>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	4770      	bx	lr
 800c4f2:	46c0      	nop			; (mov r8, r8)
 800c4f4:	200006d0 	.word	0x200006d0

0800c4f8 <__libc_init_array>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	2600      	movs	r6, #0
 800c4fc:	4c0c      	ldr	r4, [pc, #48]	; (800c530 <__libc_init_array+0x38>)
 800c4fe:	4d0d      	ldr	r5, [pc, #52]	; (800c534 <__libc_init_array+0x3c>)
 800c500:	1b64      	subs	r4, r4, r5
 800c502:	10a4      	asrs	r4, r4, #2
 800c504:	42a6      	cmp	r6, r4
 800c506:	d109      	bne.n	800c51c <__libc_init_array+0x24>
 800c508:	2600      	movs	r6, #0
 800c50a:	f006 fc3f 	bl	8012d8c <_init>
 800c50e:	4c0a      	ldr	r4, [pc, #40]	; (800c538 <__libc_init_array+0x40>)
 800c510:	4d0a      	ldr	r5, [pc, #40]	; (800c53c <__libc_init_array+0x44>)
 800c512:	1b64      	subs	r4, r4, r5
 800c514:	10a4      	asrs	r4, r4, #2
 800c516:	42a6      	cmp	r6, r4
 800c518:	d105      	bne.n	800c526 <__libc_init_array+0x2e>
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	00b3      	lsls	r3, r6, #2
 800c51e:	58eb      	ldr	r3, [r5, r3]
 800c520:	4798      	blx	r3
 800c522:	3601      	adds	r6, #1
 800c524:	e7ee      	b.n	800c504 <__libc_init_array+0xc>
 800c526:	00b3      	lsls	r3, r6, #2
 800c528:	58eb      	ldr	r3, [r5, r3]
 800c52a:	4798      	blx	r3
 800c52c:	3601      	adds	r6, #1
 800c52e:	e7f2      	b.n	800c516 <__libc_init_array+0x1e>
 800c530:	08014e9c 	.word	0x08014e9c
 800c534:	08014e9c 	.word	0x08014e9c
 800c538:	08014ea4 	.word	0x08014ea4
 800c53c:	08014e9c 	.word	0x08014e9c

0800c540 <__retarget_lock_init_recursive>:
 800c540:	4770      	bx	lr

0800c542 <__retarget_lock_close_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_acquire_recursive>:
 800c544:	4770      	bx	lr

0800c546 <__retarget_lock_release_recursive>:
 800c546:	4770      	bx	lr

0800c548 <sysconf>:
 800c548:	2380      	movs	r3, #128	; 0x80
 800c54a:	b510      	push	{r4, lr}
 800c54c:	2808      	cmp	r0, #8
 800c54e:	d004      	beq.n	800c55a <sysconf+0x12>
 800c550:	f7ff ffcc 	bl	800c4ec <__errno>
 800c554:	2316      	movs	r3, #22
 800c556:	6003      	str	r3, [r0, #0]
 800c558:	3b17      	subs	r3, #23
 800c55a:	0018      	movs	r0, r3
 800c55c:	bd10      	pop	{r4, pc}

0800c55e <memcpy>:
 800c55e:	2300      	movs	r3, #0
 800c560:	b510      	push	{r4, lr}
 800c562:	429a      	cmp	r2, r3
 800c564:	d100      	bne.n	800c568 <memcpy+0xa>
 800c566:	bd10      	pop	{r4, pc}
 800c568:	5ccc      	ldrb	r4, [r1, r3]
 800c56a:	54c4      	strb	r4, [r0, r3]
 800c56c:	3301      	adds	r3, #1
 800c56e:	e7f8      	b.n	800c562 <memcpy+0x4>

0800c570 <nan>:
 800c570:	2000      	movs	r0, #0
 800c572:	4901      	ldr	r1, [pc, #4]	; (800c578 <nan+0x8>)
 800c574:	4770      	bx	lr
 800c576:	46c0      	nop			; (mov r8, r8)
 800c578:	7ff80000 	.word	0x7ff80000

0800c57c <nanf>:
 800c57c:	4800      	ldr	r0, [pc, #0]	; (800c580 <nanf+0x4>)
 800c57e:	4770      	bx	lr
 800c580:	7fc00000 	.word	0x7fc00000

0800c584 <register_fini>:
 800c584:	4b03      	ldr	r3, [pc, #12]	; (800c594 <register_fini+0x10>)
 800c586:	b510      	push	{r4, lr}
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <register_fini+0xe>
 800c58c:	4802      	ldr	r0, [pc, #8]	; (800c598 <register_fini+0x14>)
 800c58e:	f000 f805 	bl	800c59c <atexit>
 800c592:	bd10      	pop	{r4, pc}
 800c594:	00000000 	.word	0x00000000
 800c598:	080102f9 	.word	0x080102f9

0800c59c <atexit>:
 800c59c:	2300      	movs	r3, #0
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	0001      	movs	r1, r0
 800c5a2:	001a      	movs	r2, r3
 800c5a4:	0018      	movs	r0, r3
 800c5a6:	f003 fef9 	bl	801039c <__register_exitproc>
 800c5aa:	bd10      	pop	{r4, pc}

0800c5ac <_malloc_trim_r>:
 800c5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5ae:	0004      	movs	r4, r0
 800c5b0:	2008      	movs	r0, #8
 800c5b2:	000d      	movs	r5, r1
 800c5b4:	f7ff ffc8 	bl	800c548 <sysconf>
 800c5b8:	0006      	movs	r6, r0
 800c5ba:	0020      	movs	r0, r4
 800c5bc:	f7fe fda4 	bl	800b108 <__malloc_lock>
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	4f21      	ldr	r7, [pc, #132]	; (800c648 <_malloc_trim_r+0x9c>)
 800c5c4:	0031      	movs	r1, r6
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	4393      	bics	r3, r2
 800c5cc:	1b58      	subs	r0, r3, r5
 800c5ce:	3811      	subs	r0, #17
 800c5d0:	1980      	adds	r0, r0, r6
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	f7f3 fdb2 	bl	800013c <__udivsi3>
 800c5d8:	1e45      	subs	r5, r0, #1
 800c5da:	4375      	muls	r5, r6
 800c5dc:	42ae      	cmp	r6, r5
 800c5de:	dd04      	ble.n	800c5ea <_malloc_trim_r+0x3e>
 800c5e0:	0020      	movs	r0, r4
 800c5e2:	f7fe fd99 	bl	800b118 <__malloc_unlock>
 800c5e6:	2000      	movs	r0, #0
 800c5e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	0020      	movs	r0, r4
 800c5ee:	f7ff ff57 	bl	800c4a0 <_sbrk_r>
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	9a01      	ldr	r2, [sp, #4]
 800c5f6:	189b      	adds	r3, r3, r2
 800c5f8:	4298      	cmp	r0, r3
 800c5fa:	d1f1      	bne.n	800c5e0 <_malloc_trim_r+0x34>
 800c5fc:	0020      	movs	r0, r4
 800c5fe:	4269      	negs	r1, r5
 800c600:	f7ff ff4e 	bl	800c4a0 <_sbrk_r>
 800c604:	3001      	adds	r0, #1
 800c606:	d110      	bne.n	800c62a <_malloc_trim_r+0x7e>
 800c608:	2100      	movs	r1, #0
 800c60a:	0020      	movs	r0, r4
 800c60c:	f7ff ff48 	bl	800c4a0 <_sbrk_r>
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	1a81      	subs	r1, r0, r2
 800c614:	290f      	cmp	r1, #15
 800c616:	dde3      	ble.n	800c5e0 <_malloc_trim_r+0x34>
 800c618:	4d0c      	ldr	r5, [pc, #48]	; (800c64c <_malloc_trim_r+0xa0>)
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <_malloc_trim_r+0xa4>)
 800c61c:	682d      	ldr	r5, [r5, #0]
 800c61e:	1b40      	subs	r0, r0, r5
 800c620:	6018      	str	r0, [r3, #0]
 800c622:	2301      	movs	r3, #1
 800c624:	430b      	orrs	r3, r1
 800c626:	6053      	str	r3, [r2, #4]
 800c628:	e7da      	b.n	800c5e0 <_malloc_trim_r+0x34>
 800c62a:	2601      	movs	r6, #1
 800c62c:	9b01      	ldr	r3, [sp, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	1b5b      	subs	r3, r3, r5
 800c632:	4333      	orrs	r3, r6
 800c634:	6053      	str	r3, [r2, #4]
 800c636:	4a06      	ldr	r2, [pc, #24]	; (800c650 <_malloc_trim_r+0xa4>)
 800c638:	0020      	movs	r0, r4
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	1b5b      	subs	r3, r3, r5
 800c63e:	6013      	str	r3, [r2, #0]
 800c640:	f7fe fd6a 	bl	800b118 <__malloc_unlock>
 800c644:	0030      	movs	r0, r6
 800c646:	e7cf      	b.n	800c5e8 <_malloc_trim_r+0x3c>
 800c648:	20000028 	.word	0x20000028
 800c64c:	20000430 	.word	0x20000430
 800c650:	20000c38 	.word	0x20000c38

0800c654 <_free_r>:
 800c654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c656:	1e0d      	subs	r5, r1, #0
 800c658:	9001      	str	r0, [sp, #4]
 800c65a:	d02d      	beq.n	800c6b8 <_free_r+0x64>
 800c65c:	f7fe fd54 	bl	800b108 <__malloc_lock>
 800c660:	2301      	movs	r3, #1
 800c662:	0029      	movs	r1, r5
 800c664:	469c      	mov	ip, r3
 800c666:	3908      	subs	r1, #8
 800c668:	684f      	ldr	r7, [r1, #4]
 800c66a:	4662      	mov	r2, ip
 800c66c:	003b      	movs	r3, r7
 800c66e:	4664      	mov	r4, ip
 800c670:	4393      	bics	r3, r2
 800c672:	18c8      	adds	r0, r1, r3
 800c674:	6845      	ldr	r5, [r0, #4]
 800c676:	3202      	adds	r2, #2
 800c678:	4395      	bics	r5, r2
 800c67a:	4a4a      	ldr	r2, [pc, #296]	; (800c7a4 <_free_r+0x150>)
 800c67c:	4027      	ands	r7, r4
 800c67e:	6896      	ldr	r6, [r2, #8]
 800c680:	4286      	cmp	r6, r0
 800c682:	d11a      	bne.n	800c6ba <_free_r+0x66>
 800c684:	195b      	adds	r3, r3, r5
 800c686:	2f00      	cmp	r7, #0
 800c688:	d106      	bne.n	800c698 <_free_r+0x44>
 800c68a:	6808      	ldr	r0, [r1, #0]
 800c68c:	1a09      	subs	r1, r1, r0
 800c68e:	688d      	ldr	r5, [r1, #8]
 800c690:	181b      	adds	r3, r3, r0
 800c692:	68c8      	ldr	r0, [r1, #12]
 800c694:	60e8      	str	r0, [r5, #12]
 800c696:	6085      	str	r5, [r0, #8]
 800c698:	2001      	movs	r0, #1
 800c69a:	4318      	orrs	r0, r3
 800c69c:	6048      	str	r0, [r1, #4]
 800c69e:	6091      	str	r1, [r2, #8]
 800c6a0:	4a41      	ldr	r2, [pc, #260]	; (800c7a8 <_free_r+0x154>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d804      	bhi.n	800c6b2 <_free_r+0x5e>
 800c6a8:	4b40      	ldr	r3, [pc, #256]	; (800c7ac <_free_r+0x158>)
 800c6aa:	9801      	ldr	r0, [sp, #4]
 800c6ac:	6819      	ldr	r1, [r3, #0]
 800c6ae:	f7ff ff7d 	bl	800c5ac <_malloc_trim_r>
 800c6b2:	9801      	ldr	r0, [sp, #4]
 800c6b4:	f7fe fd30 	bl	800b118 <__malloc_unlock>
 800c6b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c6ba:	2600      	movs	r6, #0
 800c6bc:	6045      	str	r5, [r0, #4]
 800c6be:	42b7      	cmp	r7, r6
 800c6c0:	d109      	bne.n	800c6d6 <_free_r+0x82>
 800c6c2:	680f      	ldr	r7, [r1, #0]
 800c6c4:	4c3a      	ldr	r4, [pc, #232]	; (800c7b0 <_free_r+0x15c>)
 800c6c6:	1bc9      	subs	r1, r1, r7
 800c6c8:	19db      	adds	r3, r3, r7
 800c6ca:	688f      	ldr	r7, [r1, #8]
 800c6cc:	42a7      	cmp	r7, r4
 800c6ce:	d02c      	beq.n	800c72a <_free_r+0xd6>
 800c6d0:	68cc      	ldr	r4, [r1, #12]
 800c6d2:	60fc      	str	r4, [r7, #12]
 800c6d4:	60a7      	str	r7, [r4, #8]
 800c6d6:	1947      	adds	r7, r0, r5
 800c6d8:	687c      	ldr	r4, [r7, #4]
 800c6da:	2701      	movs	r7, #1
 800c6dc:	423c      	tst	r4, r7
 800c6de:	d10b      	bne.n	800c6f8 <_free_r+0xa4>
 800c6e0:	195b      	adds	r3, r3, r5
 800c6e2:	6885      	ldr	r5, [r0, #8]
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	d122      	bne.n	800c72e <_free_r+0xda>
 800c6e8:	4c31      	ldr	r4, [pc, #196]	; (800c7b0 <_free_r+0x15c>)
 800c6ea:	42a5      	cmp	r5, r4
 800c6ec:	d11f      	bne.n	800c72e <_free_r+0xda>
 800c6ee:	003e      	movs	r6, r7
 800c6f0:	6151      	str	r1, [r2, #20]
 800c6f2:	6111      	str	r1, [r2, #16]
 800c6f4:	60cd      	str	r5, [r1, #12]
 800c6f6:	608d      	str	r5, [r1, #8]
 800c6f8:	2501      	movs	r5, #1
 800c6fa:	0028      	movs	r0, r5
 800c6fc:	4318      	orrs	r0, r3
 800c6fe:	6048      	str	r0, [r1, #4]
 800c700:	50cb      	str	r3, [r1, r3]
 800c702:	2e00      	cmp	r6, #0
 800c704:	d1d5      	bne.n	800c6b2 <_free_r+0x5e>
 800c706:	2080      	movs	r0, #128	; 0x80
 800c708:	0080      	lsls	r0, r0, #2
 800c70a:	4283      	cmp	r3, r0
 800c70c:	d213      	bcs.n	800c736 <_free_r+0xe2>
 800c70e:	08d8      	lsrs	r0, r3, #3
 800c710:	095b      	lsrs	r3, r3, #5
 800c712:	409d      	lsls	r5, r3
 800c714:	6853      	ldr	r3, [r2, #4]
 800c716:	431d      	orrs	r5, r3
 800c718:	00c3      	lsls	r3, r0, #3
 800c71a:	189b      	adds	r3, r3, r2
 800c71c:	6055      	str	r5, [r2, #4]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	60cb      	str	r3, [r1, #12]
 800c722:	608a      	str	r2, [r1, #8]
 800c724:	6099      	str	r1, [r3, #8]
 800c726:	60d1      	str	r1, [r2, #12]
 800c728:	e7c3      	b.n	800c6b2 <_free_r+0x5e>
 800c72a:	4666      	mov	r6, ip
 800c72c:	e7d3      	b.n	800c6d6 <_free_r+0x82>
 800c72e:	68c0      	ldr	r0, [r0, #12]
 800c730:	60e8      	str	r0, [r5, #12]
 800c732:	6085      	str	r5, [r0, #8]
 800c734:	e7e0      	b.n	800c6f8 <_free_r+0xa4>
 800c736:	0a5d      	lsrs	r5, r3, #9
 800c738:	2d04      	cmp	r5, #4
 800c73a:	d812      	bhi.n	800c762 <_free_r+0x10e>
 800c73c:	0998      	lsrs	r0, r3, #6
 800c73e:	3038      	adds	r0, #56	; 0x38
 800c740:	00c6      	lsls	r6, r0, #3
 800c742:	18b6      	adds	r6, r6, r2
 800c744:	68b5      	ldr	r5, [r6, #8]
 800c746:	2703      	movs	r7, #3
 800c748:	42ae      	cmp	r6, r5
 800c74a:	d125      	bne.n	800c798 <_free_r+0x144>
 800c74c:	2301      	movs	r3, #1
 800c74e:	1080      	asrs	r0, r0, #2
 800c750:	4083      	lsls	r3, r0
 800c752:	6850      	ldr	r0, [r2, #4]
 800c754:	4303      	orrs	r3, r0
 800c756:	6053      	str	r3, [r2, #4]
 800c758:	60ce      	str	r6, [r1, #12]
 800c75a:	608d      	str	r5, [r1, #8]
 800c75c:	60b1      	str	r1, [r6, #8]
 800c75e:	60e9      	str	r1, [r5, #12]
 800c760:	e7a7      	b.n	800c6b2 <_free_r+0x5e>
 800c762:	2d14      	cmp	r5, #20
 800c764:	d802      	bhi.n	800c76c <_free_r+0x118>
 800c766:	0028      	movs	r0, r5
 800c768:	305b      	adds	r0, #91	; 0x5b
 800c76a:	e7e9      	b.n	800c740 <_free_r+0xec>
 800c76c:	2d54      	cmp	r5, #84	; 0x54
 800c76e:	d802      	bhi.n	800c776 <_free_r+0x122>
 800c770:	0b18      	lsrs	r0, r3, #12
 800c772:	306e      	adds	r0, #110	; 0x6e
 800c774:	e7e4      	b.n	800c740 <_free_r+0xec>
 800c776:	20aa      	movs	r0, #170	; 0xaa
 800c778:	0040      	lsls	r0, r0, #1
 800c77a:	4285      	cmp	r5, r0
 800c77c:	d802      	bhi.n	800c784 <_free_r+0x130>
 800c77e:	0bd8      	lsrs	r0, r3, #15
 800c780:	3077      	adds	r0, #119	; 0x77
 800c782:	e7dd      	b.n	800c740 <_free_r+0xec>
 800c784:	4e0b      	ldr	r6, [pc, #44]	; (800c7b4 <_free_r+0x160>)
 800c786:	207e      	movs	r0, #126	; 0x7e
 800c788:	42b5      	cmp	r5, r6
 800c78a:	d8d9      	bhi.n	800c740 <_free_r+0xec>
 800c78c:	0c98      	lsrs	r0, r3, #18
 800c78e:	307c      	adds	r0, #124	; 0x7c
 800c790:	e7d6      	b.n	800c740 <_free_r+0xec>
 800c792:	68ad      	ldr	r5, [r5, #8]
 800c794:	42ae      	cmp	r6, r5
 800c796:	d003      	beq.n	800c7a0 <_free_r+0x14c>
 800c798:	686a      	ldr	r2, [r5, #4]
 800c79a:	43ba      	bics	r2, r7
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d8f8      	bhi.n	800c792 <_free_r+0x13e>
 800c7a0:	68ee      	ldr	r6, [r5, #12]
 800c7a2:	e7d9      	b.n	800c758 <_free_r+0x104>
 800c7a4:	20000028 	.word	0x20000028
 800c7a8:	20000434 	.word	0x20000434
 800c7ac:	20000c68 	.word	0x20000c68
 800c7b0:	20000030 	.word	0x20000030
 800c7b4:	00000554 	.word	0x00000554

0800c7b8 <rshift>:
 800c7b8:	0002      	movs	r2, r0
 800c7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7bc:	6904      	ldr	r4, [r0, #16]
 800c7be:	114b      	asrs	r3, r1, #5
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	3214      	adds	r2, #20
 800c7c4:	9302      	str	r3, [sp, #8]
 800c7c6:	114d      	asrs	r5, r1, #5
 800c7c8:	0013      	movs	r3, r2
 800c7ca:	42ac      	cmp	r4, r5
 800c7cc:	dd32      	ble.n	800c834 <rshift+0x7c>
 800c7ce:	261f      	movs	r6, #31
 800c7d0:	000f      	movs	r7, r1
 800c7d2:	114b      	asrs	r3, r1, #5
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	00a5      	lsls	r5, r4, #2
 800c7d8:	18d3      	adds	r3, r2, r3
 800c7da:	4037      	ands	r7, r6
 800c7dc:	1955      	adds	r5, r2, r5
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	9701      	str	r7, [sp, #4]
 800c7e2:	4231      	tst	r1, r6
 800c7e4:	d10d      	bne.n	800c802 <rshift+0x4a>
 800c7e6:	0016      	movs	r6, r2
 800c7e8:	0019      	movs	r1, r3
 800c7ea:	428d      	cmp	r5, r1
 800c7ec:	d836      	bhi.n	800c85c <rshift+0xa4>
 800c7ee:	9900      	ldr	r1, [sp, #0]
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	3903      	subs	r1, #3
 800c7f4:	428d      	cmp	r5, r1
 800c7f6:	d302      	bcc.n	800c7fe <rshift+0x46>
 800c7f8:	9b02      	ldr	r3, [sp, #8]
 800c7fa:	1ae4      	subs	r4, r4, r3
 800c7fc:	00a3      	lsls	r3, r4, #2
 800c7fe:	18d3      	adds	r3, r2, r3
 800c800:	e018      	b.n	800c834 <rshift+0x7c>
 800c802:	2120      	movs	r1, #32
 800c804:	9e01      	ldr	r6, [sp, #4]
 800c806:	9f01      	ldr	r7, [sp, #4]
 800c808:	1b89      	subs	r1, r1, r6
 800c80a:	9e00      	ldr	r6, [sp, #0]
 800c80c:	9103      	str	r1, [sp, #12]
 800c80e:	ce02      	ldmia	r6!, {r1}
 800c810:	4694      	mov	ip, r2
 800c812:	40f9      	lsrs	r1, r7
 800c814:	42b5      	cmp	r5, r6
 800c816:	d816      	bhi.n	800c846 <rshift+0x8e>
 800c818:	9e00      	ldr	r6, [sp, #0]
 800c81a:	2300      	movs	r3, #0
 800c81c:	3601      	adds	r6, #1
 800c81e:	42b5      	cmp	r5, r6
 800c820:	d303      	bcc.n	800c82a <rshift+0x72>
 800c822:	9b02      	ldr	r3, [sp, #8]
 800c824:	1ae3      	subs	r3, r4, r3
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	3b04      	subs	r3, #4
 800c82a:	18d3      	adds	r3, r2, r3
 800c82c:	6019      	str	r1, [r3, #0]
 800c82e:	2900      	cmp	r1, #0
 800c830:	d000      	beq.n	800c834 <rshift+0x7c>
 800c832:	3304      	adds	r3, #4
 800c834:	1a99      	subs	r1, r3, r2
 800c836:	1089      	asrs	r1, r1, #2
 800c838:	6101      	str	r1, [r0, #16]
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d101      	bne.n	800c842 <rshift+0x8a>
 800c83e:	2300      	movs	r3, #0
 800c840:	6143      	str	r3, [r0, #20]
 800c842:	b005      	add	sp, #20
 800c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c846:	6837      	ldr	r7, [r6, #0]
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	409f      	lsls	r7, r3
 800c84c:	430f      	orrs	r7, r1
 800c84e:	4661      	mov	r1, ip
 800c850:	c180      	stmia	r1!, {r7}
 800c852:	468c      	mov	ip, r1
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	ce02      	ldmia	r6!, {r1}
 800c858:	40d9      	lsrs	r1, r3
 800c85a:	e7db      	b.n	800c814 <rshift+0x5c>
 800c85c:	c980      	ldmia	r1!, {r7}
 800c85e:	c680      	stmia	r6!, {r7}
 800c860:	e7c3      	b.n	800c7ea <rshift+0x32>

0800c862 <__hexdig_fun>:
 800c862:	0002      	movs	r2, r0
 800c864:	3a30      	subs	r2, #48	; 0x30
 800c866:	0003      	movs	r3, r0
 800c868:	2a09      	cmp	r2, #9
 800c86a:	d802      	bhi.n	800c872 <__hexdig_fun+0x10>
 800c86c:	3b20      	subs	r3, #32
 800c86e:	b2d8      	uxtb	r0, r3
 800c870:	4770      	bx	lr
 800c872:	0002      	movs	r2, r0
 800c874:	3a61      	subs	r2, #97	; 0x61
 800c876:	2a05      	cmp	r2, #5
 800c878:	d801      	bhi.n	800c87e <__hexdig_fun+0x1c>
 800c87a:	3b47      	subs	r3, #71	; 0x47
 800c87c:	e7f7      	b.n	800c86e <__hexdig_fun+0xc>
 800c87e:	001a      	movs	r2, r3
 800c880:	3a41      	subs	r2, #65	; 0x41
 800c882:	2000      	movs	r0, #0
 800c884:	2a05      	cmp	r2, #5
 800c886:	d8f3      	bhi.n	800c870 <__hexdig_fun+0xe>
 800c888:	3b27      	subs	r3, #39	; 0x27
 800c88a:	e7f0      	b.n	800c86e <__hexdig_fun+0xc>

0800c88c <__gethex>:
 800c88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c88e:	b089      	sub	sp, #36	; 0x24
 800c890:	9307      	str	r3, [sp, #28]
 800c892:	2302      	movs	r3, #2
 800c894:	9201      	str	r2, [sp, #4]
 800c896:	680a      	ldr	r2, [r1, #0]
 800c898:	425b      	negs	r3, r3
 800c89a:	9003      	str	r0, [sp, #12]
 800c89c:	9106      	str	r1, [sp, #24]
 800c89e:	1c96      	adds	r6, r2, #2
 800c8a0:	1a9b      	subs	r3, r3, r2
 800c8a2:	199a      	adds	r2, r3, r6
 800c8a4:	9600      	str	r6, [sp, #0]
 800c8a6:	9205      	str	r2, [sp, #20]
 800c8a8:	9a00      	ldr	r2, [sp, #0]
 800c8aa:	3601      	adds	r6, #1
 800c8ac:	7810      	ldrb	r0, [r2, #0]
 800c8ae:	2830      	cmp	r0, #48	; 0x30
 800c8b0:	d0f7      	beq.n	800c8a2 <__gethex+0x16>
 800c8b2:	f7ff ffd6 	bl	800c862 <__hexdig_fun>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	001d      	movs	r5, r3
 800c8ba:	9302      	str	r3, [sp, #8]
 800c8bc:	4298      	cmp	r0, r3
 800c8be:	d11d      	bne.n	800c8fc <__gethex+0x70>
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	49a6      	ldr	r1, [pc, #664]	; (800cb5c <__gethex+0x2d0>)
 800c8c4:	9800      	ldr	r0, [sp, #0]
 800c8c6:	f7ff fd33 	bl	800c330 <strncmp>
 800c8ca:	0007      	movs	r7, r0
 800c8cc:	42a8      	cmp	r0, r5
 800c8ce:	d169      	bne.n	800c9a4 <__gethex+0x118>
 800c8d0:	9b00      	ldr	r3, [sp, #0]
 800c8d2:	0034      	movs	r4, r6
 800c8d4:	7858      	ldrb	r0, [r3, #1]
 800c8d6:	f7ff ffc4 	bl	800c862 <__hexdig_fun>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	9302      	str	r3, [sp, #8]
 800c8de:	42a8      	cmp	r0, r5
 800c8e0:	d02f      	beq.n	800c942 <__gethex+0xb6>
 800c8e2:	9600      	str	r6, [sp, #0]
 800c8e4:	9b00      	ldr	r3, [sp, #0]
 800c8e6:	7818      	ldrb	r0, [r3, #0]
 800c8e8:	2830      	cmp	r0, #48	; 0x30
 800c8ea:	d009      	beq.n	800c900 <__gethex+0x74>
 800c8ec:	f7ff ffb9 	bl	800c862 <__hexdig_fun>
 800c8f0:	4242      	negs	r2, r0
 800c8f2:	4142      	adcs	r2, r0
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	0035      	movs	r5, r6
 800c8f8:	9202      	str	r2, [sp, #8]
 800c8fa:	9305      	str	r3, [sp, #20]
 800c8fc:	9c00      	ldr	r4, [sp, #0]
 800c8fe:	e004      	b.n	800c90a <__gethex+0x7e>
 800c900:	9b00      	ldr	r3, [sp, #0]
 800c902:	3301      	adds	r3, #1
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	e7ed      	b.n	800c8e4 <__gethex+0x58>
 800c908:	3401      	adds	r4, #1
 800c90a:	7820      	ldrb	r0, [r4, #0]
 800c90c:	f7ff ffa9 	bl	800c862 <__hexdig_fun>
 800c910:	1e07      	subs	r7, r0, #0
 800c912:	d1f9      	bne.n	800c908 <__gethex+0x7c>
 800c914:	2201      	movs	r2, #1
 800c916:	0020      	movs	r0, r4
 800c918:	4990      	ldr	r1, [pc, #576]	; (800cb5c <__gethex+0x2d0>)
 800c91a:	f7ff fd09 	bl	800c330 <strncmp>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d10d      	bne.n	800c93e <__gethex+0xb2>
 800c922:	2d00      	cmp	r5, #0
 800c924:	d106      	bne.n	800c934 <__gethex+0xa8>
 800c926:	3401      	adds	r4, #1
 800c928:	0025      	movs	r5, r4
 800c92a:	7820      	ldrb	r0, [r4, #0]
 800c92c:	f7ff ff99 	bl	800c862 <__hexdig_fun>
 800c930:	2800      	cmp	r0, #0
 800c932:	d102      	bne.n	800c93a <__gethex+0xae>
 800c934:	1b2d      	subs	r5, r5, r4
 800c936:	00af      	lsls	r7, r5, #2
 800c938:	e003      	b.n	800c942 <__gethex+0xb6>
 800c93a:	3401      	adds	r4, #1
 800c93c:	e7f5      	b.n	800c92a <__gethex+0x9e>
 800c93e:	2d00      	cmp	r5, #0
 800c940:	d1f8      	bne.n	800c934 <__gethex+0xa8>
 800c942:	2220      	movs	r2, #32
 800c944:	7823      	ldrb	r3, [r4, #0]
 800c946:	0026      	movs	r6, r4
 800c948:	4393      	bics	r3, r2
 800c94a:	2b50      	cmp	r3, #80	; 0x50
 800c94c:	d11d      	bne.n	800c98a <__gethex+0xfe>
 800c94e:	7863      	ldrb	r3, [r4, #1]
 800c950:	2b2b      	cmp	r3, #43	; 0x2b
 800c952:	d02c      	beq.n	800c9ae <__gethex+0x122>
 800c954:	2b2d      	cmp	r3, #45	; 0x2d
 800c956:	d02e      	beq.n	800c9b6 <__gethex+0x12a>
 800c958:	2300      	movs	r3, #0
 800c95a:	1c66      	adds	r6, r4, #1
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	7830      	ldrb	r0, [r6, #0]
 800c960:	f7ff ff7f 	bl	800c862 <__hexdig_fun>
 800c964:	1e43      	subs	r3, r0, #1
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b18      	cmp	r3, #24
 800c96a:	d82b      	bhi.n	800c9c4 <__gethex+0x138>
 800c96c:	3810      	subs	r0, #16
 800c96e:	0005      	movs	r5, r0
 800c970:	7870      	ldrb	r0, [r6, #1]
 800c972:	f7ff ff76 	bl	800c862 <__hexdig_fun>
 800c976:	1e43      	subs	r3, r0, #1
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	3601      	adds	r6, #1
 800c97c:	2b18      	cmp	r3, #24
 800c97e:	d91c      	bls.n	800c9ba <__gethex+0x12e>
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d000      	beq.n	800c988 <__gethex+0xfc>
 800c986:	426d      	negs	r5, r5
 800c988:	197f      	adds	r7, r7, r5
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	601e      	str	r6, [r3, #0]
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d019      	beq.n	800c9c8 <__gethex+0x13c>
 800c994:	2600      	movs	r6, #0
 800c996:	9b05      	ldr	r3, [sp, #20]
 800c998:	42b3      	cmp	r3, r6
 800c99a:	d100      	bne.n	800c99e <__gethex+0x112>
 800c99c:	3606      	adds	r6, #6
 800c99e:	0030      	movs	r0, r6
 800c9a0:	b009      	add	sp, #36	; 0x24
 800c9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	2700      	movs	r7, #0
 800c9a8:	9c00      	ldr	r4, [sp, #0]
 800c9aa:	9302      	str	r3, [sp, #8]
 800c9ac:	e7c9      	b.n	800c942 <__gethex+0xb6>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	1ca6      	adds	r6, r4, #2
 800c9b4:	e7d3      	b.n	800c95e <__gethex+0xd2>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e7fa      	b.n	800c9b0 <__gethex+0x124>
 800c9ba:	230a      	movs	r3, #10
 800c9bc:	435d      	muls	r5, r3
 800c9be:	182d      	adds	r5, r5, r0
 800c9c0:	3d10      	subs	r5, #16
 800c9c2:	e7d5      	b.n	800c970 <__gethex+0xe4>
 800c9c4:	0026      	movs	r6, r4
 800c9c6:	e7e0      	b.n	800c98a <__gethex+0xfe>
 800c9c8:	9b00      	ldr	r3, [sp, #0]
 800c9ca:	9902      	ldr	r1, [sp, #8]
 800c9cc:	1ae3      	subs	r3, r4, r3
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	2b07      	cmp	r3, #7
 800c9d2:	dc0a      	bgt.n	800c9ea <__gethex+0x15e>
 800c9d4:	9803      	ldr	r0, [sp, #12]
 800c9d6:	f000 fa5d 	bl	800ce94 <_Balloc>
 800c9da:	1e05      	subs	r5, r0, #0
 800c9dc:	d108      	bne.n	800c9f0 <__gethex+0x164>
 800c9de:	002a      	movs	r2, r5
 800c9e0:	21e4      	movs	r1, #228	; 0xe4
 800c9e2:	4b5f      	ldr	r3, [pc, #380]	; (800cb60 <__gethex+0x2d4>)
 800c9e4:	485f      	ldr	r0, [pc, #380]	; (800cb64 <__gethex+0x2d8>)
 800c9e6:	f003 fd19 	bl	801041c <__assert_func>
 800c9ea:	3101      	adds	r1, #1
 800c9ec:	105b      	asrs	r3, r3, #1
 800c9ee:	e7ef      	b.n	800c9d0 <__gethex+0x144>
 800c9f0:	0003      	movs	r3, r0
 800c9f2:	3314      	adds	r3, #20
 800c9f4:	9302      	str	r3, [sp, #8]
 800c9f6:	9305      	str	r3, [sp, #20]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	001e      	movs	r6, r3
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	9b00      	ldr	r3, [sp, #0]
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	d33f      	bcc.n	800ca84 <__gethex+0x1f8>
 800ca04:	9c05      	ldr	r4, [sp, #20]
 800ca06:	9b02      	ldr	r3, [sp, #8]
 800ca08:	c440      	stmia	r4!, {r6}
 800ca0a:	1ae4      	subs	r4, r4, r3
 800ca0c:	10a4      	asrs	r4, r4, #2
 800ca0e:	0030      	movs	r0, r6
 800ca10:	612c      	str	r4, [r5, #16]
 800ca12:	f000 fb01 	bl	800d018 <__hi0bits>
 800ca16:	9b01      	ldr	r3, [sp, #4]
 800ca18:	0164      	lsls	r4, r4, #5
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	1a26      	subs	r6, r4, r0
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	429e      	cmp	r6, r3
 800ca22:	dd51      	ble.n	800cac8 <__gethex+0x23c>
 800ca24:	1af6      	subs	r6, r6, r3
 800ca26:	0031      	movs	r1, r6
 800ca28:	0028      	movs	r0, r5
 800ca2a:	f000 fe7b 	bl	800d724 <__any_on>
 800ca2e:	1e04      	subs	r4, r0, #0
 800ca30:	d016      	beq.n	800ca60 <__gethex+0x1d4>
 800ca32:	2401      	movs	r4, #1
 800ca34:	231f      	movs	r3, #31
 800ca36:	0020      	movs	r0, r4
 800ca38:	1e72      	subs	r2, r6, #1
 800ca3a:	4013      	ands	r3, r2
 800ca3c:	4098      	lsls	r0, r3
 800ca3e:	0003      	movs	r3, r0
 800ca40:	1151      	asrs	r1, r2, #5
 800ca42:	9802      	ldr	r0, [sp, #8]
 800ca44:	0089      	lsls	r1, r1, #2
 800ca46:	5809      	ldr	r1, [r1, r0]
 800ca48:	4219      	tst	r1, r3
 800ca4a:	d009      	beq.n	800ca60 <__gethex+0x1d4>
 800ca4c:	42a2      	cmp	r2, r4
 800ca4e:	dd06      	ble.n	800ca5e <__gethex+0x1d2>
 800ca50:	0028      	movs	r0, r5
 800ca52:	1eb1      	subs	r1, r6, #2
 800ca54:	f000 fe66 	bl	800d724 <__any_on>
 800ca58:	3402      	adds	r4, #2
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d100      	bne.n	800ca60 <__gethex+0x1d4>
 800ca5e:	2402      	movs	r4, #2
 800ca60:	0031      	movs	r1, r6
 800ca62:	0028      	movs	r0, r5
 800ca64:	f7ff fea8 	bl	800c7b8 <rshift>
 800ca68:	19bf      	adds	r7, r7, r6
 800ca6a:	9b01      	ldr	r3, [sp, #4]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	42bb      	cmp	r3, r7
 800ca70:	da3a      	bge.n	800cae8 <__gethex+0x25c>
 800ca72:	0029      	movs	r1, r5
 800ca74:	9803      	ldr	r0, [sp, #12]
 800ca76:	f000 fa35 	bl	800cee4 <_Bfree>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca7e:	26a3      	movs	r6, #163	; 0xa3
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	e78c      	b.n	800c99e <__gethex+0x112>
 800ca84:	3c01      	subs	r4, #1
 800ca86:	7823      	ldrb	r3, [r4, #0]
 800ca88:	2b2e      	cmp	r3, #46	; 0x2e
 800ca8a:	d012      	beq.n	800cab2 <__gethex+0x226>
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d104      	bne.n	800ca9c <__gethex+0x210>
 800ca92:	9b05      	ldr	r3, [sp, #20]
 800ca94:	c340      	stmia	r3!, {r6}
 800ca96:	2600      	movs	r6, #0
 800ca98:	9305      	str	r3, [sp, #20]
 800ca9a:	9604      	str	r6, [sp, #16]
 800ca9c:	7820      	ldrb	r0, [r4, #0]
 800ca9e:	f7ff fee0 	bl	800c862 <__hexdig_fun>
 800caa2:	230f      	movs	r3, #15
 800caa4:	4018      	ands	r0, r3
 800caa6:	9b04      	ldr	r3, [sp, #16]
 800caa8:	4098      	lsls	r0, r3
 800caaa:	3304      	adds	r3, #4
 800caac:	4306      	orrs	r6, r0
 800caae:	9304      	str	r3, [sp, #16]
 800cab0:	e7a5      	b.n	800c9fe <__gethex+0x172>
 800cab2:	9b00      	ldr	r3, [sp, #0]
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	d8e9      	bhi.n	800ca8c <__gethex+0x200>
 800cab8:	2201      	movs	r2, #1
 800caba:	0020      	movs	r0, r4
 800cabc:	4927      	ldr	r1, [pc, #156]	; (800cb5c <__gethex+0x2d0>)
 800cabe:	f7ff fc37 	bl	800c330 <strncmp>
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d1e2      	bne.n	800ca8c <__gethex+0x200>
 800cac6:	e79a      	b.n	800c9fe <__gethex+0x172>
 800cac8:	9b00      	ldr	r3, [sp, #0]
 800caca:	2400      	movs	r4, #0
 800cacc:	429e      	cmp	r6, r3
 800cace:	dacc      	bge.n	800ca6a <__gethex+0x1de>
 800cad0:	1b9e      	subs	r6, r3, r6
 800cad2:	0029      	movs	r1, r5
 800cad4:	0032      	movs	r2, r6
 800cad6:	9803      	ldr	r0, [sp, #12]
 800cad8:	f000 fbf0 	bl	800d2bc <__lshift>
 800cadc:	0003      	movs	r3, r0
 800cade:	3314      	adds	r3, #20
 800cae0:	0005      	movs	r5, r0
 800cae2:	1bbf      	subs	r7, r7, r6
 800cae4:	9302      	str	r3, [sp, #8]
 800cae6:	e7c0      	b.n	800ca6a <__gethex+0x1de>
 800cae8:	9b01      	ldr	r3, [sp, #4]
 800caea:	685e      	ldr	r6, [r3, #4]
 800caec:	42be      	cmp	r6, r7
 800caee:	dd70      	ble.n	800cbd2 <__gethex+0x346>
 800caf0:	9b00      	ldr	r3, [sp, #0]
 800caf2:	1bf6      	subs	r6, r6, r7
 800caf4:	42b3      	cmp	r3, r6
 800caf6:	dc37      	bgt.n	800cb68 <__gethex+0x2dc>
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d024      	beq.n	800cb4a <__gethex+0x2be>
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d026      	beq.n	800cb52 <__gethex+0x2c6>
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d117      	bne.n	800cb38 <__gethex+0x2ac>
 800cb08:	9b00      	ldr	r3, [sp, #0]
 800cb0a:	42b3      	cmp	r3, r6
 800cb0c:	d114      	bne.n	800cb38 <__gethex+0x2ac>
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d10b      	bne.n	800cb2a <__gethex+0x29e>
 800cb12:	9b01      	ldr	r3, [sp, #4]
 800cb14:	9a07      	ldr	r2, [sp, #28]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	2662      	movs	r6, #98	; 0x62
 800cb1a:	6013      	str	r3, [r2, #0]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	9a02      	ldr	r2, [sp, #8]
 800cb20:	612b      	str	r3, [r5, #16]
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb26:	601d      	str	r5, [r3, #0]
 800cb28:	e739      	b.n	800c99e <__gethex+0x112>
 800cb2a:	9900      	ldr	r1, [sp, #0]
 800cb2c:	0028      	movs	r0, r5
 800cb2e:	3901      	subs	r1, #1
 800cb30:	f000 fdf8 	bl	800d724 <__any_on>
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d1ec      	bne.n	800cb12 <__gethex+0x286>
 800cb38:	0029      	movs	r1, r5
 800cb3a:	9803      	ldr	r0, [sp, #12]
 800cb3c:	f000 f9d2 	bl	800cee4 <_Bfree>
 800cb40:	2300      	movs	r3, #0
 800cb42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb44:	2650      	movs	r6, #80	; 0x50
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	e729      	b.n	800c99e <__gethex+0x112>
 800cb4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1f3      	bne.n	800cb38 <__gethex+0x2ac>
 800cb50:	e7df      	b.n	800cb12 <__gethex+0x286>
 800cb52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d1dc      	bne.n	800cb12 <__gethex+0x286>
 800cb58:	e7ee      	b.n	800cb38 <__gethex+0x2ac>
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	08014a28 	.word	0x08014a28
 800cb60:	08014b89 	.word	0x08014b89
 800cb64:	08014b9a 	.word	0x08014b9a
 800cb68:	1e77      	subs	r7, r6, #1
 800cb6a:	2c00      	cmp	r4, #0
 800cb6c:	d12f      	bne.n	800cbce <__gethex+0x342>
 800cb6e:	2f00      	cmp	r7, #0
 800cb70:	d004      	beq.n	800cb7c <__gethex+0x2f0>
 800cb72:	0039      	movs	r1, r7
 800cb74:	0028      	movs	r0, r5
 800cb76:	f000 fdd5 	bl	800d724 <__any_on>
 800cb7a:	0004      	movs	r4, r0
 800cb7c:	231f      	movs	r3, #31
 800cb7e:	117a      	asrs	r2, r7, #5
 800cb80:	401f      	ands	r7, r3
 800cb82:	3b1e      	subs	r3, #30
 800cb84:	40bb      	lsls	r3, r7
 800cb86:	9902      	ldr	r1, [sp, #8]
 800cb88:	0092      	lsls	r2, r2, #2
 800cb8a:	5852      	ldr	r2, [r2, r1]
 800cb8c:	421a      	tst	r2, r3
 800cb8e:	d001      	beq.n	800cb94 <__gethex+0x308>
 800cb90:	2302      	movs	r3, #2
 800cb92:	431c      	orrs	r4, r3
 800cb94:	9b00      	ldr	r3, [sp, #0]
 800cb96:	0031      	movs	r1, r6
 800cb98:	1b9b      	subs	r3, r3, r6
 800cb9a:	2602      	movs	r6, #2
 800cb9c:	0028      	movs	r0, r5
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	f7ff fe0a 	bl	800c7b8 <rshift>
 800cba4:	9b01      	ldr	r3, [sp, #4]
 800cba6:	685f      	ldr	r7, [r3, #4]
 800cba8:	2c00      	cmp	r4, #0
 800cbaa:	d041      	beq.n	800cc30 <__gethex+0x3a4>
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d010      	beq.n	800cbd6 <__gethex+0x34a>
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d012      	beq.n	800cbde <__gethex+0x352>
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d106      	bne.n	800cbca <__gethex+0x33e>
 800cbbc:	07a2      	lsls	r2, r4, #30
 800cbbe:	d504      	bpl.n	800cbca <__gethex+0x33e>
 800cbc0:	9a02      	ldr	r2, [sp, #8]
 800cbc2:	6812      	ldr	r2, [r2, #0]
 800cbc4:	4314      	orrs	r4, r2
 800cbc6:	421c      	tst	r4, r3
 800cbc8:	d10c      	bne.n	800cbe4 <__gethex+0x358>
 800cbca:	2310      	movs	r3, #16
 800cbcc:	e02f      	b.n	800cc2e <__gethex+0x3a2>
 800cbce:	2401      	movs	r4, #1
 800cbd0:	e7d4      	b.n	800cb7c <__gethex+0x2f0>
 800cbd2:	2601      	movs	r6, #1
 800cbd4:	e7e8      	b.n	800cba8 <__gethex+0x31c>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0f2      	beq.n	800cbca <__gethex+0x33e>
 800cbe4:	692b      	ldr	r3, [r5, #16]
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	9302      	str	r3, [sp, #8]
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	9304      	str	r3, [sp, #16]
 800cbee:	002b      	movs	r3, r5
 800cbf0:	9a04      	ldr	r2, [sp, #16]
 800cbf2:	3314      	adds	r3, #20
 800cbf4:	1899      	adds	r1, r3, r2
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	1c54      	adds	r4, r2, #1
 800cbfa:	d01e      	beq.n	800cc3a <__gethex+0x3ae>
 800cbfc:	3201      	adds	r2, #1
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	002b      	movs	r3, r5
 800cc02:	3314      	adds	r3, #20
 800cc04:	2e02      	cmp	r6, #2
 800cc06:	d141      	bne.n	800cc8c <__gethex+0x400>
 800cc08:	9a01      	ldr	r2, [sp, #4]
 800cc0a:	9900      	ldr	r1, [sp, #0]
 800cc0c:	6812      	ldr	r2, [r2, #0]
 800cc0e:	3a01      	subs	r2, #1
 800cc10:	428a      	cmp	r2, r1
 800cc12:	d10b      	bne.n	800cc2c <__gethex+0x3a0>
 800cc14:	221f      	movs	r2, #31
 800cc16:	9800      	ldr	r0, [sp, #0]
 800cc18:	1149      	asrs	r1, r1, #5
 800cc1a:	4002      	ands	r2, r0
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	0004      	movs	r4, r0
 800cc20:	4094      	lsls	r4, r2
 800cc22:	0089      	lsls	r1, r1, #2
 800cc24:	58cb      	ldr	r3, [r1, r3]
 800cc26:	4223      	tst	r3, r4
 800cc28:	d000      	beq.n	800cc2c <__gethex+0x3a0>
 800cc2a:	2601      	movs	r6, #1
 800cc2c:	2320      	movs	r3, #32
 800cc2e:	431e      	orrs	r6, r3
 800cc30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc32:	601d      	str	r5, [r3, #0]
 800cc34:	9b07      	ldr	r3, [sp, #28]
 800cc36:	601f      	str	r7, [r3, #0]
 800cc38:	e6b1      	b.n	800c99e <__gethex+0x112>
 800cc3a:	c301      	stmia	r3!, {r0}
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	d8da      	bhi.n	800cbf6 <__gethex+0x36a>
 800cc40:	68ab      	ldr	r3, [r5, #8]
 800cc42:	9a02      	ldr	r2, [sp, #8]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	db18      	blt.n	800cc7a <__gethex+0x3ee>
 800cc48:	6869      	ldr	r1, [r5, #4]
 800cc4a:	9803      	ldr	r0, [sp, #12]
 800cc4c:	3101      	adds	r1, #1
 800cc4e:	f000 f921 	bl	800ce94 <_Balloc>
 800cc52:	1e04      	subs	r4, r0, #0
 800cc54:	d104      	bne.n	800cc60 <__gethex+0x3d4>
 800cc56:	0022      	movs	r2, r4
 800cc58:	2184      	movs	r1, #132	; 0x84
 800cc5a:	4b1c      	ldr	r3, [pc, #112]	; (800cccc <__gethex+0x440>)
 800cc5c:	481c      	ldr	r0, [pc, #112]	; (800ccd0 <__gethex+0x444>)
 800cc5e:	e6c2      	b.n	800c9e6 <__gethex+0x15a>
 800cc60:	0029      	movs	r1, r5
 800cc62:	692a      	ldr	r2, [r5, #16]
 800cc64:	310c      	adds	r1, #12
 800cc66:	3202      	adds	r2, #2
 800cc68:	0092      	lsls	r2, r2, #2
 800cc6a:	300c      	adds	r0, #12
 800cc6c:	f7ff fc77 	bl	800c55e <memcpy>
 800cc70:	0029      	movs	r1, r5
 800cc72:	9803      	ldr	r0, [sp, #12]
 800cc74:	f000 f936 	bl	800cee4 <_Bfree>
 800cc78:	0025      	movs	r5, r4
 800cc7a:	692b      	ldr	r3, [r5, #16]
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	612a      	str	r2, [r5, #16]
 800cc80:	2201      	movs	r2, #1
 800cc82:	3304      	adds	r3, #4
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	18eb      	adds	r3, r5, r3
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	e7b9      	b.n	800cc00 <__gethex+0x374>
 800cc8c:	692a      	ldr	r2, [r5, #16]
 800cc8e:	9902      	ldr	r1, [sp, #8]
 800cc90:	428a      	cmp	r2, r1
 800cc92:	dd09      	ble.n	800cca8 <__gethex+0x41c>
 800cc94:	2101      	movs	r1, #1
 800cc96:	0028      	movs	r0, r5
 800cc98:	f7ff fd8e 	bl	800c7b8 <rshift>
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	3701      	adds	r7, #1
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	42bb      	cmp	r3, r7
 800cca4:	dac1      	bge.n	800cc2a <__gethex+0x39e>
 800cca6:	e6e4      	b.n	800ca72 <__gethex+0x1e6>
 800cca8:	221f      	movs	r2, #31
 800ccaa:	9c00      	ldr	r4, [sp, #0]
 800ccac:	9900      	ldr	r1, [sp, #0]
 800ccae:	2601      	movs	r6, #1
 800ccb0:	4014      	ands	r4, r2
 800ccb2:	4211      	tst	r1, r2
 800ccb4:	d0ba      	beq.n	800cc2c <__gethex+0x3a0>
 800ccb6:	9a04      	ldr	r2, [sp, #16]
 800ccb8:	189b      	adds	r3, r3, r2
 800ccba:	3b04      	subs	r3, #4
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	f000 f9ab 	bl	800d018 <__hi0bits>
 800ccc2:	2320      	movs	r3, #32
 800ccc4:	1b1b      	subs	r3, r3, r4
 800ccc6:	4298      	cmp	r0, r3
 800ccc8:	dbe4      	blt.n	800cc94 <__gethex+0x408>
 800ccca:	e7af      	b.n	800cc2c <__gethex+0x3a0>
 800cccc:	08014b89 	.word	0x08014b89
 800ccd0:	08014b9a 	.word	0x08014b9a

0800ccd4 <L_shift>:
 800ccd4:	2308      	movs	r3, #8
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	2520      	movs	r5, #32
 800ccda:	1a9a      	subs	r2, r3, r2
 800ccdc:	0092      	lsls	r2, r2, #2
 800ccde:	1aad      	subs	r5, r5, r2
 800cce0:	6843      	ldr	r3, [r0, #4]
 800cce2:	6804      	ldr	r4, [r0, #0]
 800cce4:	001e      	movs	r6, r3
 800cce6:	40ae      	lsls	r6, r5
 800cce8:	40d3      	lsrs	r3, r2
 800ccea:	4334      	orrs	r4, r6
 800ccec:	6004      	str	r4, [r0, #0]
 800ccee:	6043      	str	r3, [r0, #4]
 800ccf0:	3004      	adds	r0, #4
 800ccf2:	4288      	cmp	r0, r1
 800ccf4:	d3f4      	bcc.n	800cce0 <L_shift+0xc>
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}

0800ccf8 <__match>:
 800ccf8:	b530      	push	{r4, r5, lr}
 800ccfa:	6803      	ldr	r3, [r0, #0]
 800ccfc:	780c      	ldrb	r4, [r1, #0]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	2c00      	cmp	r4, #0
 800cd02:	d102      	bne.n	800cd0a <__match+0x12>
 800cd04:	6003      	str	r3, [r0, #0]
 800cd06:	2001      	movs	r0, #1
 800cd08:	bd30      	pop	{r4, r5, pc}
 800cd0a:	781a      	ldrb	r2, [r3, #0]
 800cd0c:	0015      	movs	r5, r2
 800cd0e:	3d41      	subs	r5, #65	; 0x41
 800cd10:	2d19      	cmp	r5, #25
 800cd12:	d800      	bhi.n	800cd16 <__match+0x1e>
 800cd14:	3220      	adds	r2, #32
 800cd16:	3101      	adds	r1, #1
 800cd18:	42a2      	cmp	r2, r4
 800cd1a:	d0ef      	beq.n	800ccfc <__match+0x4>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e7f3      	b.n	800cd08 <__match+0x10>

0800cd20 <__hexnan>:
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	680b      	ldr	r3, [r1, #0]
 800cd24:	b08b      	sub	sp, #44	; 0x2c
 800cd26:	9201      	str	r2, [sp, #4]
 800cd28:	9901      	ldr	r1, [sp, #4]
 800cd2a:	115a      	asrs	r2, r3, #5
 800cd2c:	0092      	lsls	r2, r2, #2
 800cd2e:	188a      	adds	r2, r1, r2
 800cd30:	9202      	str	r2, [sp, #8]
 800cd32:	0019      	movs	r1, r3
 800cd34:	221f      	movs	r2, #31
 800cd36:	4011      	ands	r1, r2
 800cd38:	9008      	str	r0, [sp, #32]
 800cd3a:	9106      	str	r1, [sp, #24]
 800cd3c:	4213      	tst	r3, r2
 800cd3e:	d002      	beq.n	800cd46 <__hexnan+0x26>
 800cd40:	9b02      	ldr	r3, [sp, #8]
 800cd42:	3304      	adds	r3, #4
 800cd44:	9302      	str	r3, [sp, #8]
 800cd46:	9b02      	ldr	r3, [sp, #8]
 800cd48:	2500      	movs	r5, #0
 800cd4a:	1f1f      	subs	r7, r3, #4
 800cd4c:	003e      	movs	r6, r7
 800cd4e:	003c      	movs	r4, r7
 800cd50:	9b08      	ldr	r3, [sp, #32]
 800cd52:	603d      	str	r5, [r7, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	9507      	str	r5, [sp, #28]
 800cd58:	9305      	str	r3, [sp, #20]
 800cd5a:	9503      	str	r5, [sp, #12]
 800cd5c:	9b05      	ldr	r3, [sp, #20]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	9309      	str	r3, [sp, #36]	; 0x24
 800cd62:	9b05      	ldr	r3, [sp, #20]
 800cd64:	785b      	ldrb	r3, [r3, #1]
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d028      	beq.n	800cdbe <__hexnan+0x9e>
 800cd6c:	9804      	ldr	r0, [sp, #16]
 800cd6e:	f7ff fd78 	bl	800c862 <__hexdig_fun>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d154      	bne.n	800ce20 <__hexnan+0x100>
 800cd76:	9b04      	ldr	r3, [sp, #16]
 800cd78:	2b20      	cmp	r3, #32
 800cd7a:	d819      	bhi.n	800cdb0 <__hexnan+0x90>
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	9a07      	ldr	r2, [sp, #28]
 800cd80:	4293      	cmp	r3, r2
 800cd82:	dd12      	ble.n	800cdaa <__hexnan+0x8a>
 800cd84:	42b4      	cmp	r4, r6
 800cd86:	d206      	bcs.n	800cd96 <__hexnan+0x76>
 800cd88:	2d07      	cmp	r5, #7
 800cd8a:	dc04      	bgt.n	800cd96 <__hexnan+0x76>
 800cd8c:	002a      	movs	r2, r5
 800cd8e:	0031      	movs	r1, r6
 800cd90:	0020      	movs	r0, r4
 800cd92:	f7ff ff9f 	bl	800ccd4 <L_shift>
 800cd96:	9b01      	ldr	r3, [sp, #4]
 800cd98:	2508      	movs	r5, #8
 800cd9a:	429c      	cmp	r4, r3
 800cd9c:	d905      	bls.n	800cdaa <__hexnan+0x8a>
 800cd9e:	1f26      	subs	r6, r4, #4
 800cda0:	2500      	movs	r5, #0
 800cda2:	0034      	movs	r4, r6
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	6035      	str	r5, [r6, #0]
 800cda8:	9307      	str	r3, [sp, #28]
 800cdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	e7d5      	b.n	800cd5c <__hexnan+0x3c>
 800cdb0:	9b04      	ldr	r3, [sp, #16]
 800cdb2:	2b29      	cmp	r3, #41	; 0x29
 800cdb4:	d159      	bne.n	800ce6a <__hexnan+0x14a>
 800cdb6:	9b05      	ldr	r3, [sp, #20]
 800cdb8:	9a08      	ldr	r2, [sp, #32]
 800cdba:	3302      	adds	r3, #2
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	9b03      	ldr	r3, [sp, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d052      	beq.n	800ce6a <__hexnan+0x14a>
 800cdc4:	42b4      	cmp	r4, r6
 800cdc6:	d206      	bcs.n	800cdd6 <__hexnan+0xb6>
 800cdc8:	2d07      	cmp	r5, #7
 800cdca:	dc04      	bgt.n	800cdd6 <__hexnan+0xb6>
 800cdcc:	002a      	movs	r2, r5
 800cdce:	0031      	movs	r1, r6
 800cdd0:	0020      	movs	r0, r4
 800cdd2:	f7ff ff7f 	bl	800ccd4 <L_shift>
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	429c      	cmp	r4, r3
 800cdda:	d935      	bls.n	800ce48 <__hexnan+0x128>
 800cddc:	001a      	movs	r2, r3
 800cdde:	0023      	movs	r3, r4
 800cde0:	cb02      	ldmia	r3!, {r1}
 800cde2:	c202      	stmia	r2!, {r1}
 800cde4:	429f      	cmp	r7, r3
 800cde6:	d2fb      	bcs.n	800cde0 <__hexnan+0xc0>
 800cde8:	9b02      	ldr	r3, [sp, #8]
 800cdea:	1c62      	adds	r2, r4, #1
 800cdec:	1ed9      	subs	r1, r3, #3
 800cdee:	2304      	movs	r3, #4
 800cdf0:	4291      	cmp	r1, r2
 800cdf2:	d305      	bcc.n	800ce00 <__hexnan+0xe0>
 800cdf4:	9b02      	ldr	r3, [sp, #8]
 800cdf6:	3b04      	subs	r3, #4
 800cdf8:	1b1b      	subs	r3, r3, r4
 800cdfa:	089b      	lsrs	r3, r3, #2
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	9a01      	ldr	r2, [sp, #4]
 800ce02:	18d3      	adds	r3, r2, r3
 800ce04:	2200      	movs	r2, #0
 800ce06:	c304      	stmia	r3!, {r2}
 800ce08:	429f      	cmp	r7, r3
 800ce0a:	d2fc      	bcs.n	800ce06 <__hexnan+0xe6>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d104      	bne.n	800ce1c <__hexnan+0xfc>
 800ce12:	9b01      	ldr	r3, [sp, #4]
 800ce14:	429f      	cmp	r7, r3
 800ce16:	d126      	bne.n	800ce66 <__hexnan+0x146>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	2005      	movs	r0, #5
 800ce1e:	e025      	b.n	800ce6c <__hexnan+0x14c>
 800ce20:	9b03      	ldr	r3, [sp, #12]
 800ce22:	3501      	adds	r5, #1
 800ce24:	3301      	adds	r3, #1
 800ce26:	9303      	str	r3, [sp, #12]
 800ce28:	2d08      	cmp	r5, #8
 800ce2a:	dd06      	ble.n	800ce3a <__hexnan+0x11a>
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	429c      	cmp	r4, r3
 800ce30:	d9bb      	bls.n	800cdaa <__hexnan+0x8a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	2501      	movs	r5, #1
 800ce36:	3c04      	subs	r4, #4
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	220f      	movs	r2, #15
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	4010      	ands	r0, r2
 800ce40:	011b      	lsls	r3, r3, #4
 800ce42:	4303      	orrs	r3, r0
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	e7b0      	b.n	800cdaa <__hexnan+0x8a>
 800ce48:	9b06      	ldr	r3, [sp, #24]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0de      	beq.n	800ce0c <__hexnan+0xec>
 800ce4e:	2320      	movs	r3, #32
 800ce50:	9a06      	ldr	r2, [sp, #24]
 800ce52:	9902      	ldr	r1, [sp, #8]
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	2201      	movs	r2, #1
 800ce58:	4252      	negs	r2, r2
 800ce5a:	40da      	lsrs	r2, r3
 800ce5c:	3904      	subs	r1, #4
 800ce5e:	680b      	ldr	r3, [r1, #0]
 800ce60:	4013      	ands	r3, r2
 800ce62:	600b      	str	r3, [r1, #0]
 800ce64:	e7d2      	b.n	800ce0c <__hexnan+0xec>
 800ce66:	3f04      	subs	r7, #4
 800ce68:	e7d0      	b.n	800ce0c <__hexnan+0xec>
 800ce6a:	2004      	movs	r0, #4
 800ce6c:	b00b      	add	sp, #44	; 0x2c
 800ce6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce70 <__ascii_mbtowc>:
 800ce70:	b082      	sub	sp, #8
 800ce72:	2900      	cmp	r1, #0
 800ce74:	d100      	bne.n	800ce78 <__ascii_mbtowc+0x8>
 800ce76:	a901      	add	r1, sp, #4
 800ce78:	1e10      	subs	r0, r2, #0
 800ce7a:	d006      	beq.n	800ce8a <__ascii_mbtowc+0x1a>
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d006      	beq.n	800ce8e <__ascii_mbtowc+0x1e>
 800ce80:	7813      	ldrb	r3, [r2, #0]
 800ce82:	600b      	str	r3, [r1, #0]
 800ce84:	7810      	ldrb	r0, [r2, #0]
 800ce86:	1e43      	subs	r3, r0, #1
 800ce88:	4198      	sbcs	r0, r3
 800ce8a:	b002      	add	sp, #8
 800ce8c:	4770      	bx	lr
 800ce8e:	2002      	movs	r0, #2
 800ce90:	4240      	negs	r0, r0
 800ce92:	e7fa      	b.n	800ce8a <__ascii_mbtowc+0x1a>

0800ce94 <_Balloc>:
 800ce94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ce96:	b570      	push	{r4, r5, r6, lr}
 800ce98:	0006      	movs	r6, r0
 800ce9a:	000c      	movs	r4, r1
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d012      	beq.n	800cec6 <_Balloc+0x32>
 800cea0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800cea2:	00a2      	lsls	r2, r4, #2
 800cea4:	189b      	adds	r3, r3, r2
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d115      	bne.n	800ced8 <_Balloc+0x44>
 800ceac:	2101      	movs	r1, #1
 800ceae:	000d      	movs	r5, r1
 800ceb0:	40a5      	lsls	r5, r4
 800ceb2:	1d6a      	adds	r2, r5, #5
 800ceb4:	0030      	movs	r0, r6
 800ceb6:	0092      	lsls	r2, r2, #2
 800ceb8:	f003 face 	bl	8010458 <_calloc_r>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d009      	beq.n	800ced4 <_Balloc+0x40>
 800cec0:	6044      	str	r4, [r0, #4]
 800cec2:	6085      	str	r5, [r0, #8]
 800cec4:	e00a      	b.n	800cedc <_Balloc+0x48>
 800cec6:	2221      	movs	r2, #33	; 0x21
 800cec8:	2104      	movs	r1, #4
 800ceca:	f003 fac5 	bl	8010458 <_calloc_r>
 800cece:	6470      	str	r0, [r6, #68]	; 0x44
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1e5      	bne.n	800cea0 <_Balloc+0xc>
 800ced4:	2000      	movs	r0, #0
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	6802      	ldr	r2, [r0, #0]
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	2300      	movs	r3, #0
 800cede:	6103      	str	r3, [r0, #16]
 800cee0:	60c3      	str	r3, [r0, #12]
 800cee2:	e7f8      	b.n	800ced6 <_Balloc+0x42>

0800cee4 <_Bfree>:
 800cee4:	2900      	cmp	r1, #0
 800cee6:	d006      	beq.n	800cef6 <_Bfree+0x12>
 800cee8:	684a      	ldr	r2, [r1, #4]
 800ceea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ceec:	0092      	lsls	r2, r2, #2
 800ceee:	189b      	adds	r3, r3, r2
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	600a      	str	r2, [r1, #0]
 800cef4:	6019      	str	r1, [r3, #0]
 800cef6:	4770      	bx	lr

0800cef8 <__multadd>:
 800cef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cefa:	000e      	movs	r6, r1
 800cefc:	9001      	str	r0, [sp, #4]
 800cefe:	000c      	movs	r4, r1
 800cf00:	001d      	movs	r5, r3
 800cf02:	2000      	movs	r0, #0
 800cf04:	690f      	ldr	r7, [r1, #16]
 800cf06:	3614      	adds	r6, #20
 800cf08:	6833      	ldr	r3, [r6, #0]
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	b299      	uxth	r1, r3
 800cf0e:	4351      	muls	r1, r2
 800cf10:	0c1b      	lsrs	r3, r3, #16
 800cf12:	4353      	muls	r3, r2
 800cf14:	1949      	adds	r1, r1, r5
 800cf16:	0c0d      	lsrs	r5, r1, #16
 800cf18:	195b      	adds	r3, r3, r5
 800cf1a:	0c1d      	lsrs	r5, r3, #16
 800cf1c:	b289      	uxth	r1, r1
 800cf1e:	041b      	lsls	r3, r3, #16
 800cf20:	185b      	adds	r3, r3, r1
 800cf22:	c608      	stmia	r6!, {r3}
 800cf24:	4287      	cmp	r7, r0
 800cf26:	dcef      	bgt.n	800cf08 <__multadd+0x10>
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	d022      	beq.n	800cf72 <__multadd+0x7a>
 800cf2c:	68a3      	ldr	r3, [r4, #8]
 800cf2e:	42bb      	cmp	r3, r7
 800cf30:	dc19      	bgt.n	800cf66 <__multadd+0x6e>
 800cf32:	6861      	ldr	r1, [r4, #4]
 800cf34:	9801      	ldr	r0, [sp, #4]
 800cf36:	3101      	adds	r1, #1
 800cf38:	f7ff ffac 	bl	800ce94 <_Balloc>
 800cf3c:	1e06      	subs	r6, r0, #0
 800cf3e:	d105      	bne.n	800cf4c <__multadd+0x54>
 800cf40:	0032      	movs	r2, r6
 800cf42:	21ba      	movs	r1, #186	; 0xba
 800cf44:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <__multadd+0x80>)
 800cf46:	480d      	ldr	r0, [pc, #52]	; (800cf7c <__multadd+0x84>)
 800cf48:	f003 fa68 	bl	801041c <__assert_func>
 800cf4c:	0021      	movs	r1, r4
 800cf4e:	6922      	ldr	r2, [r4, #16]
 800cf50:	310c      	adds	r1, #12
 800cf52:	3202      	adds	r2, #2
 800cf54:	0092      	lsls	r2, r2, #2
 800cf56:	300c      	adds	r0, #12
 800cf58:	f7ff fb01 	bl	800c55e <memcpy>
 800cf5c:	0021      	movs	r1, r4
 800cf5e:	9801      	ldr	r0, [sp, #4]
 800cf60:	f7ff ffc0 	bl	800cee4 <_Bfree>
 800cf64:	0034      	movs	r4, r6
 800cf66:	1d3b      	adds	r3, r7, #4
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	18e3      	adds	r3, r4, r3
 800cf6c:	605d      	str	r5, [r3, #4]
 800cf6e:	1c7b      	adds	r3, r7, #1
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	0020      	movs	r0, r4
 800cf74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf76:	46c0      	nop			; (mov r8, r8)
 800cf78:	08014b89 	.word	0x08014b89
 800cf7c:	08014bfa 	.word	0x08014bfa

0800cf80 <__s2b>:
 800cf80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf82:	0006      	movs	r6, r0
 800cf84:	0018      	movs	r0, r3
 800cf86:	000c      	movs	r4, r1
 800cf88:	3008      	adds	r0, #8
 800cf8a:	2109      	movs	r1, #9
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	0015      	movs	r5, r2
 800cf90:	f7f3 f95e 	bl	8000250 <__divsi3>
 800cf94:	2301      	movs	r3, #1
 800cf96:	2100      	movs	r1, #0
 800cf98:	4283      	cmp	r3, r0
 800cf9a:	db0a      	blt.n	800cfb2 <__s2b+0x32>
 800cf9c:	0030      	movs	r0, r6
 800cf9e:	f7ff ff79 	bl	800ce94 <_Balloc>
 800cfa2:	1e01      	subs	r1, r0, #0
 800cfa4:	d108      	bne.n	800cfb8 <__s2b+0x38>
 800cfa6:	000a      	movs	r2, r1
 800cfa8:	4b19      	ldr	r3, [pc, #100]	; (800d010 <__s2b+0x90>)
 800cfaa:	481a      	ldr	r0, [pc, #104]	; (800d014 <__s2b+0x94>)
 800cfac:	31d3      	adds	r1, #211	; 0xd3
 800cfae:	f003 fa35 	bl	801041c <__assert_func>
 800cfb2:	005b      	lsls	r3, r3, #1
 800cfb4:	3101      	adds	r1, #1
 800cfb6:	e7ef      	b.n	800cf98 <__s2b+0x18>
 800cfb8:	9b08      	ldr	r3, [sp, #32]
 800cfba:	6143      	str	r3, [r0, #20]
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	6103      	str	r3, [r0, #16]
 800cfc0:	2d09      	cmp	r5, #9
 800cfc2:	dd18      	ble.n	800cff6 <__s2b+0x76>
 800cfc4:	0023      	movs	r3, r4
 800cfc6:	3309      	adds	r3, #9
 800cfc8:	001f      	movs	r7, r3
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	1964      	adds	r4, r4, r5
 800cfce:	783b      	ldrb	r3, [r7, #0]
 800cfd0:	220a      	movs	r2, #10
 800cfd2:	0030      	movs	r0, r6
 800cfd4:	3b30      	subs	r3, #48	; 0x30
 800cfd6:	f7ff ff8f 	bl	800cef8 <__multadd>
 800cfda:	3701      	adds	r7, #1
 800cfdc:	0001      	movs	r1, r0
 800cfde:	42a7      	cmp	r7, r4
 800cfe0:	d1f5      	bne.n	800cfce <__s2b+0x4e>
 800cfe2:	002c      	movs	r4, r5
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	3c08      	subs	r4, #8
 800cfe8:	191c      	adds	r4, r3, r4
 800cfea:	002f      	movs	r7, r5
 800cfec:	9b01      	ldr	r3, [sp, #4]
 800cfee:	429f      	cmp	r7, r3
 800cff0:	db04      	blt.n	800cffc <__s2b+0x7c>
 800cff2:	0008      	movs	r0, r1
 800cff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cff6:	2509      	movs	r5, #9
 800cff8:	340a      	adds	r4, #10
 800cffa:	e7f6      	b.n	800cfea <__s2b+0x6a>
 800cffc:	1b63      	subs	r3, r4, r5
 800cffe:	5ddb      	ldrb	r3, [r3, r7]
 800d000:	220a      	movs	r2, #10
 800d002:	0030      	movs	r0, r6
 800d004:	3b30      	subs	r3, #48	; 0x30
 800d006:	f7ff ff77 	bl	800cef8 <__multadd>
 800d00a:	3701      	adds	r7, #1
 800d00c:	0001      	movs	r1, r0
 800d00e:	e7ed      	b.n	800cfec <__s2b+0x6c>
 800d010:	08014b89 	.word	0x08014b89
 800d014:	08014bfa 	.word	0x08014bfa

0800d018 <__hi0bits>:
 800d018:	0003      	movs	r3, r0
 800d01a:	0c02      	lsrs	r2, r0, #16
 800d01c:	2000      	movs	r0, #0
 800d01e:	4282      	cmp	r2, r0
 800d020:	d101      	bne.n	800d026 <__hi0bits+0xe>
 800d022:	041b      	lsls	r3, r3, #16
 800d024:	3010      	adds	r0, #16
 800d026:	0e1a      	lsrs	r2, r3, #24
 800d028:	d101      	bne.n	800d02e <__hi0bits+0x16>
 800d02a:	3008      	adds	r0, #8
 800d02c:	021b      	lsls	r3, r3, #8
 800d02e:	0f1a      	lsrs	r2, r3, #28
 800d030:	d101      	bne.n	800d036 <__hi0bits+0x1e>
 800d032:	3004      	adds	r0, #4
 800d034:	011b      	lsls	r3, r3, #4
 800d036:	0f9a      	lsrs	r2, r3, #30
 800d038:	d101      	bne.n	800d03e <__hi0bits+0x26>
 800d03a:	3002      	adds	r0, #2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	2b00      	cmp	r3, #0
 800d040:	db03      	blt.n	800d04a <__hi0bits+0x32>
 800d042:	3001      	adds	r0, #1
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	d400      	bmi.n	800d04a <__hi0bits+0x32>
 800d048:	2020      	movs	r0, #32
 800d04a:	4770      	bx	lr

0800d04c <__lo0bits>:
 800d04c:	6803      	ldr	r3, [r0, #0]
 800d04e:	0001      	movs	r1, r0
 800d050:	2207      	movs	r2, #7
 800d052:	0018      	movs	r0, r3
 800d054:	4010      	ands	r0, r2
 800d056:	4213      	tst	r3, r2
 800d058:	d00d      	beq.n	800d076 <__lo0bits+0x2a>
 800d05a:	3a06      	subs	r2, #6
 800d05c:	2000      	movs	r0, #0
 800d05e:	4213      	tst	r3, r2
 800d060:	d105      	bne.n	800d06e <__lo0bits+0x22>
 800d062:	3002      	adds	r0, #2
 800d064:	4203      	tst	r3, r0
 800d066:	d003      	beq.n	800d070 <__lo0bits+0x24>
 800d068:	40d3      	lsrs	r3, r2
 800d06a:	0010      	movs	r0, r2
 800d06c:	600b      	str	r3, [r1, #0]
 800d06e:	4770      	bx	lr
 800d070:	089b      	lsrs	r3, r3, #2
 800d072:	600b      	str	r3, [r1, #0]
 800d074:	e7fb      	b.n	800d06e <__lo0bits+0x22>
 800d076:	b29a      	uxth	r2, r3
 800d078:	2a00      	cmp	r2, #0
 800d07a:	d101      	bne.n	800d080 <__lo0bits+0x34>
 800d07c:	2010      	movs	r0, #16
 800d07e:	0c1b      	lsrs	r3, r3, #16
 800d080:	b2da      	uxtb	r2, r3
 800d082:	2a00      	cmp	r2, #0
 800d084:	d101      	bne.n	800d08a <__lo0bits+0x3e>
 800d086:	3008      	adds	r0, #8
 800d088:	0a1b      	lsrs	r3, r3, #8
 800d08a:	071a      	lsls	r2, r3, #28
 800d08c:	d101      	bne.n	800d092 <__lo0bits+0x46>
 800d08e:	3004      	adds	r0, #4
 800d090:	091b      	lsrs	r3, r3, #4
 800d092:	079a      	lsls	r2, r3, #30
 800d094:	d101      	bne.n	800d09a <__lo0bits+0x4e>
 800d096:	3002      	adds	r0, #2
 800d098:	089b      	lsrs	r3, r3, #2
 800d09a:	07da      	lsls	r2, r3, #31
 800d09c:	d4e9      	bmi.n	800d072 <__lo0bits+0x26>
 800d09e:	3001      	adds	r0, #1
 800d0a0:	085b      	lsrs	r3, r3, #1
 800d0a2:	d1e6      	bne.n	800d072 <__lo0bits+0x26>
 800d0a4:	2020      	movs	r0, #32
 800d0a6:	e7e2      	b.n	800d06e <__lo0bits+0x22>

0800d0a8 <__i2b>:
 800d0a8:	b510      	push	{r4, lr}
 800d0aa:	000c      	movs	r4, r1
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	f7ff fef1 	bl	800ce94 <_Balloc>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d107      	bne.n	800d0c6 <__i2b+0x1e>
 800d0b6:	2146      	movs	r1, #70	; 0x46
 800d0b8:	4c05      	ldr	r4, [pc, #20]	; (800d0d0 <__i2b+0x28>)
 800d0ba:	0002      	movs	r2, r0
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <__i2b+0x2c>)
 800d0be:	0020      	movs	r0, r4
 800d0c0:	31ff      	adds	r1, #255	; 0xff
 800d0c2:	f003 f9ab 	bl	801041c <__assert_func>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	6144      	str	r4, [r0, #20]
 800d0ca:	6103      	str	r3, [r0, #16]
 800d0cc:	bd10      	pop	{r4, pc}
 800d0ce:	46c0      	nop			; (mov r8, r8)
 800d0d0:	08014bfa 	.word	0x08014bfa
 800d0d4:	08014b89 	.word	0x08014b89

0800d0d8 <__multiply>:
 800d0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0da:	0015      	movs	r5, r2
 800d0dc:	690a      	ldr	r2, [r1, #16]
 800d0de:	692b      	ldr	r3, [r5, #16]
 800d0e0:	000c      	movs	r4, r1
 800d0e2:	b08b      	sub	sp, #44	; 0x2c
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	da01      	bge.n	800d0ec <__multiply+0x14>
 800d0e8:	002c      	movs	r4, r5
 800d0ea:	000d      	movs	r5, r1
 800d0ec:	6927      	ldr	r7, [r4, #16]
 800d0ee:	692e      	ldr	r6, [r5, #16]
 800d0f0:	6861      	ldr	r1, [r4, #4]
 800d0f2:	19bb      	adds	r3, r7, r6
 800d0f4:	9303      	str	r3, [sp, #12]
 800d0f6:	68a3      	ldr	r3, [r4, #8]
 800d0f8:	19ba      	adds	r2, r7, r6
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	da00      	bge.n	800d100 <__multiply+0x28>
 800d0fe:	3101      	adds	r1, #1
 800d100:	f7ff fec8 	bl	800ce94 <_Balloc>
 800d104:	9002      	str	r0, [sp, #8]
 800d106:	2800      	cmp	r0, #0
 800d108:	d106      	bne.n	800d118 <__multiply+0x40>
 800d10a:	21b1      	movs	r1, #177	; 0xb1
 800d10c:	4b48      	ldr	r3, [pc, #288]	; (800d230 <__multiply+0x158>)
 800d10e:	4849      	ldr	r0, [pc, #292]	; (800d234 <__multiply+0x15c>)
 800d110:	9a02      	ldr	r2, [sp, #8]
 800d112:	0049      	lsls	r1, r1, #1
 800d114:	f003 f982 	bl	801041c <__assert_func>
 800d118:	9b02      	ldr	r3, [sp, #8]
 800d11a:	2200      	movs	r2, #0
 800d11c:	3314      	adds	r3, #20
 800d11e:	469c      	mov	ip, r3
 800d120:	19bb      	adds	r3, r7, r6
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	4463      	add	r3, ip
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	4663      	mov	r3, ip
 800d12a:	9904      	ldr	r1, [sp, #16]
 800d12c:	428b      	cmp	r3, r1
 800d12e:	d32a      	bcc.n	800d186 <__multiply+0xae>
 800d130:	0023      	movs	r3, r4
 800d132:	00bf      	lsls	r7, r7, #2
 800d134:	3314      	adds	r3, #20
 800d136:	3514      	adds	r5, #20
 800d138:	9308      	str	r3, [sp, #32]
 800d13a:	00b6      	lsls	r6, r6, #2
 800d13c:	19db      	adds	r3, r3, r7
 800d13e:	9305      	str	r3, [sp, #20]
 800d140:	19ab      	adds	r3, r5, r6
 800d142:	9309      	str	r3, [sp, #36]	; 0x24
 800d144:	2304      	movs	r3, #4
 800d146:	9306      	str	r3, [sp, #24]
 800d148:	0023      	movs	r3, r4
 800d14a:	9a05      	ldr	r2, [sp, #20]
 800d14c:	3315      	adds	r3, #21
 800d14e:	9501      	str	r5, [sp, #4]
 800d150:	429a      	cmp	r2, r3
 800d152:	d305      	bcc.n	800d160 <__multiply+0x88>
 800d154:	1b13      	subs	r3, r2, r4
 800d156:	3b15      	subs	r3, #21
 800d158:	089b      	lsrs	r3, r3, #2
 800d15a:	3301      	adds	r3, #1
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	9306      	str	r3, [sp, #24]
 800d160:	9b01      	ldr	r3, [sp, #4]
 800d162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d164:	4293      	cmp	r3, r2
 800d166:	d310      	bcc.n	800d18a <__multiply+0xb2>
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dd05      	ble.n	800d17a <__multiply+0xa2>
 800d16e:	9b04      	ldr	r3, [sp, #16]
 800d170:	3b04      	subs	r3, #4
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d056      	beq.n	800d228 <__multiply+0x150>
 800d17a:	9b02      	ldr	r3, [sp, #8]
 800d17c:	9a03      	ldr	r2, [sp, #12]
 800d17e:	0018      	movs	r0, r3
 800d180:	611a      	str	r2, [r3, #16]
 800d182:	b00b      	add	sp, #44	; 0x2c
 800d184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d186:	c304      	stmia	r3!, {r2}
 800d188:	e7cf      	b.n	800d12a <__multiply+0x52>
 800d18a:	9b01      	ldr	r3, [sp, #4]
 800d18c:	6818      	ldr	r0, [r3, #0]
 800d18e:	b280      	uxth	r0, r0
 800d190:	2800      	cmp	r0, #0
 800d192:	d01e      	beq.n	800d1d2 <__multiply+0xfa>
 800d194:	4667      	mov	r7, ip
 800d196:	2500      	movs	r5, #0
 800d198:	9e08      	ldr	r6, [sp, #32]
 800d19a:	ce02      	ldmia	r6!, {r1}
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	9307      	str	r3, [sp, #28]
 800d1a0:	b28b      	uxth	r3, r1
 800d1a2:	4343      	muls	r3, r0
 800d1a4:	001a      	movs	r2, r3
 800d1a6:	466b      	mov	r3, sp
 800d1a8:	8b9b      	ldrh	r3, [r3, #28]
 800d1aa:	18d3      	adds	r3, r2, r3
 800d1ac:	195b      	adds	r3, r3, r5
 800d1ae:	0c0d      	lsrs	r5, r1, #16
 800d1b0:	4345      	muls	r5, r0
 800d1b2:	9a07      	ldr	r2, [sp, #28]
 800d1b4:	0c11      	lsrs	r1, r2, #16
 800d1b6:	1869      	adds	r1, r5, r1
 800d1b8:	0c1a      	lsrs	r2, r3, #16
 800d1ba:	188a      	adds	r2, r1, r2
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	0c15      	lsrs	r5, r2, #16
 800d1c0:	0412      	lsls	r2, r2, #16
 800d1c2:	431a      	orrs	r2, r3
 800d1c4:	9b05      	ldr	r3, [sp, #20]
 800d1c6:	c704      	stmia	r7!, {r2}
 800d1c8:	42b3      	cmp	r3, r6
 800d1ca:	d8e6      	bhi.n	800d19a <__multiply+0xc2>
 800d1cc:	4663      	mov	r3, ip
 800d1ce:	9a06      	ldr	r2, [sp, #24]
 800d1d0:	509d      	str	r5, [r3, r2]
 800d1d2:	9b01      	ldr	r3, [sp, #4]
 800d1d4:	6818      	ldr	r0, [r3, #0]
 800d1d6:	0c00      	lsrs	r0, r0, #16
 800d1d8:	d020      	beq.n	800d21c <__multiply+0x144>
 800d1da:	4663      	mov	r3, ip
 800d1dc:	0025      	movs	r5, r4
 800d1de:	4661      	mov	r1, ip
 800d1e0:	2700      	movs	r7, #0
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3514      	adds	r5, #20
 800d1e6:	682a      	ldr	r2, [r5, #0]
 800d1e8:	680e      	ldr	r6, [r1, #0]
 800d1ea:	b292      	uxth	r2, r2
 800d1ec:	4342      	muls	r2, r0
 800d1ee:	0c36      	lsrs	r6, r6, #16
 800d1f0:	1992      	adds	r2, r2, r6
 800d1f2:	19d2      	adds	r2, r2, r7
 800d1f4:	0416      	lsls	r6, r2, #16
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	431e      	orrs	r6, r3
 800d1fa:	600e      	str	r6, [r1, #0]
 800d1fc:	cd40      	ldmia	r5!, {r6}
 800d1fe:	684b      	ldr	r3, [r1, #4]
 800d200:	0c36      	lsrs	r6, r6, #16
 800d202:	4346      	muls	r6, r0
 800d204:	b29b      	uxth	r3, r3
 800d206:	0c12      	lsrs	r2, r2, #16
 800d208:	18f3      	adds	r3, r6, r3
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	9a05      	ldr	r2, [sp, #20]
 800d20e:	0c1f      	lsrs	r7, r3, #16
 800d210:	3104      	adds	r1, #4
 800d212:	42aa      	cmp	r2, r5
 800d214:	d8e7      	bhi.n	800d1e6 <__multiply+0x10e>
 800d216:	4662      	mov	r2, ip
 800d218:	9906      	ldr	r1, [sp, #24]
 800d21a:	5053      	str	r3, [r2, r1]
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	3304      	adds	r3, #4
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	2304      	movs	r3, #4
 800d224:	449c      	add	ip, r3
 800d226:	e79b      	b.n	800d160 <__multiply+0x88>
 800d228:	9b03      	ldr	r3, [sp, #12]
 800d22a:	3b01      	subs	r3, #1
 800d22c:	9303      	str	r3, [sp, #12]
 800d22e:	e79b      	b.n	800d168 <__multiply+0x90>
 800d230:	08014b89 	.word	0x08014b89
 800d234:	08014bfa 	.word	0x08014bfa

0800d238 <__pow5mult>:
 800d238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d23a:	2303      	movs	r3, #3
 800d23c:	0015      	movs	r5, r2
 800d23e:	0007      	movs	r7, r0
 800d240:	000e      	movs	r6, r1
 800d242:	401a      	ands	r2, r3
 800d244:	421d      	tst	r5, r3
 800d246:	d008      	beq.n	800d25a <__pow5mult+0x22>
 800d248:	491a      	ldr	r1, [pc, #104]	; (800d2b4 <__pow5mult+0x7c>)
 800d24a:	3a01      	subs	r2, #1
 800d24c:	0092      	lsls	r2, r2, #2
 800d24e:	5852      	ldr	r2, [r2, r1]
 800d250:	2300      	movs	r3, #0
 800d252:	0031      	movs	r1, r6
 800d254:	f7ff fe50 	bl	800cef8 <__multadd>
 800d258:	0006      	movs	r6, r0
 800d25a:	10ad      	asrs	r5, r5, #2
 800d25c:	d027      	beq.n	800d2ae <__pow5mult+0x76>
 800d25e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d260:	2c00      	cmp	r4, #0
 800d262:	d107      	bne.n	800d274 <__pow5mult+0x3c>
 800d264:	0038      	movs	r0, r7
 800d266:	4914      	ldr	r1, [pc, #80]	; (800d2b8 <__pow5mult+0x80>)
 800d268:	f7ff ff1e 	bl	800d0a8 <__i2b>
 800d26c:	2300      	movs	r3, #0
 800d26e:	0004      	movs	r4, r0
 800d270:	6438      	str	r0, [r7, #64]	; 0x40
 800d272:	6003      	str	r3, [r0, #0]
 800d274:	2301      	movs	r3, #1
 800d276:	421d      	tst	r5, r3
 800d278:	d00a      	beq.n	800d290 <__pow5mult+0x58>
 800d27a:	0031      	movs	r1, r6
 800d27c:	0022      	movs	r2, r4
 800d27e:	0038      	movs	r0, r7
 800d280:	f7ff ff2a 	bl	800d0d8 <__multiply>
 800d284:	0031      	movs	r1, r6
 800d286:	9001      	str	r0, [sp, #4]
 800d288:	0038      	movs	r0, r7
 800d28a:	f7ff fe2b 	bl	800cee4 <_Bfree>
 800d28e:	9e01      	ldr	r6, [sp, #4]
 800d290:	106d      	asrs	r5, r5, #1
 800d292:	d00c      	beq.n	800d2ae <__pow5mult+0x76>
 800d294:	6820      	ldr	r0, [r4, #0]
 800d296:	2800      	cmp	r0, #0
 800d298:	d107      	bne.n	800d2aa <__pow5mult+0x72>
 800d29a:	0022      	movs	r2, r4
 800d29c:	0021      	movs	r1, r4
 800d29e:	0038      	movs	r0, r7
 800d2a0:	f7ff ff1a 	bl	800d0d8 <__multiply>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	6020      	str	r0, [r4, #0]
 800d2a8:	6003      	str	r3, [r0, #0]
 800d2aa:	0004      	movs	r4, r0
 800d2ac:	e7e2      	b.n	800d274 <__pow5mult+0x3c>
 800d2ae:	0030      	movs	r0, r6
 800d2b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2b2:	46c0      	nop			; (mov r8, r8)
 800d2b4:	08014d48 	.word	0x08014d48
 800d2b8:	00000271 	.word	0x00000271

0800d2bc <__lshift>:
 800d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2be:	000c      	movs	r4, r1
 800d2c0:	0017      	movs	r7, r2
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	1155      	asrs	r5, r2, #5
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	18eb      	adds	r3, r5, r3
 800d2ca:	9302      	str	r3, [sp, #8]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	6849      	ldr	r1, [r1, #4]
 800d2d2:	68a3      	ldr	r3, [r4, #8]
 800d2d4:	9004      	str	r0, [sp, #16]
 800d2d6:	9a01      	ldr	r2, [sp, #4]
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	db10      	blt.n	800d2fe <__lshift+0x42>
 800d2dc:	9804      	ldr	r0, [sp, #16]
 800d2de:	f7ff fdd9 	bl	800ce94 <_Balloc>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	0002      	movs	r2, r0
 800d2e6:	0006      	movs	r6, r0
 800d2e8:	0019      	movs	r1, r3
 800d2ea:	3214      	adds	r2, #20
 800d2ec:	4298      	cmp	r0, r3
 800d2ee:	d10c      	bne.n	800d30a <__lshift+0x4e>
 800d2f0:	31df      	adds	r1, #223	; 0xdf
 800d2f2:	0032      	movs	r2, r6
 800d2f4:	4b26      	ldr	r3, [pc, #152]	; (800d390 <__lshift+0xd4>)
 800d2f6:	4827      	ldr	r0, [pc, #156]	; (800d394 <__lshift+0xd8>)
 800d2f8:	31ff      	adds	r1, #255	; 0xff
 800d2fa:	f003 f88f 	bl	801041c <__assert_func>
 800d2fe:	3101      	adds	r1, #1
 800d300:	005b      	lsls	r3, r3, #1
 800d302:	e7e8      	b.n	800d2d6 <__lshift+0x1a>
 800d304:	0098      	lsls	r0, r3, #2
 800d306:	5011      	str	r1, [r2, r0]
 800d308:	3301      	adds	r3, #1
 800d30a:	42ab      	cmp	r3, r5
 800d30c:	dbfa      	blt.n	800d304 <__lshift+0x48>
 800d30e:	43eb      	mvns	r3, r5
 800d310:	17db      	asrs	r3, r3, #31
 800d312:	401d      	ands	r5, r3
 800d314:	211f      	movs	r1, #31
 800d316:	0023      	movs	r3, r4
 800d318:	0038      	movs	r0, r7
 800d31a:	00ad      	lsls	r5, r5, #2
 800d31c:	1955      	adds	r5, r2, r5
 800d31e:	6922      	ldr	r2, [r4, #16]
 800d320:	3314      	adds	r3, #20
 800d322:	0092      	lsls	r2, r2, #2
 800d324:	4008      	ands	r0, r1
 800d326:	4684      	mov	ip, r0
 800d328:	189a      	adds	r2, r3, r2
 800d32a:	420f      	tst	r7, r1
 800d32c:	d02a      	beq.n	800d384 <__lshift+0xc8>
 800d32e:	3101      	adds	r1, #1
 800d330:	1a09      	subs	r1, r1, r0
 800d332:	9105      	str	r1, [sp, #20]
 800d334:	2100      	movs	r1, #0
 800d336:	9503      	str	r5, [sp, #12]
 800d338:	4667      	mov	r7, ip
 800d33a:	6818      	ldr	r0, [r3, #0]
 800d33c:	40b8      	lsls	r0, r7
 800d33e:	4308      	orrs	r0, r1
 800d340:	9903      	ldr	r1, [sp, #12]
 800d342:	c101      	stmia	r1!, {r0}
 800d344:	9103      	str	r1, [sp, #12]
 800d346:	9805      	ldr	r0, [sp, #20]
 800d348:	cb02      	ldmia	r3!, {r1}
 800d34a:	40c1      	lsrs	r1, r0
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d8f3      	bhi.n	800d338 <__lshift+0x7c>
 800d350:	0020      	movs	r0, r4
 800d352:	3015      	adds	r0, #21
 800d354:	2304      	movs	r3, #4
 800d356:	4282      	cmp	r2, r0
 800d358:	d304      	bcc.n	800d364 <__lshift+0xa8>
 800d35a:	1b13      	subs	r3, r2, r4
 800d35c:	3b15      	subs	r3, #21
 800d35e:	089b      	lsrs	r3, r3, #2
 800d360:	3301      	adds	r3, #1
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	50e9      	str	r1, [r5, r3]
 800d366:	2900      	cmp	r1, #0
 800d368:	d002      	beq.n	800d370 <__lshift+0xb4>
 800d36a:	9b02      	ldr	r3, [sp, #8]
 800d36c:	3302      	adds	r3, #2
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	9804      	ldr	r0, [sp, #16]
 800d374:	3b01      	subs	r3, #1
 800d376:	0021      	movs	r1, r4
 800d378:	6133      	str	r3, [r6, #16]
 800d37a:	f7ff fdb3 	bl	800cee4 <_Bfree>
 800d37e:	0030      	movs	r0, r6
 800d380:	b007      	add	sp, #28
 800d382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d384:	cb02      	ldmia	r3!, {r1}
 800d386:	c502      	stmia	r5!, {r1}
 800d388:	429a      	cmp	r2, r3
 800d38a:	d8fb      	bhi.n	800d384 <__lshift+0xc8>
 800d38c:	e7f0      	b.n	800d370 <__lshift+0xb4>
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	08014b89 	.word	0x08014b89
 800d394:	08014bfa 	.word	0x08014bfa

0800d398 <__mcmp>:
 800d398:	b530      	push	{r4, r5, lr}
 800d39a:	690b      	ldr	r3, [r1, #16]
 800d39c:	6904      	ldr	r4, [r0, #16]
 800d39e:	0002      	movs	r2, r0
 800d3a0:	1ae0      	subs	r0, r4, r3
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	d10e      	bne.n	800d3c4 <__mcmp+0x2c>
 800d3a6:	3214      	adds	r2, #20
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	3114      	adds	r1, #20
 800d3ac:	0014      	movs	r4, r2
 800d3ae:	18c9      	adds	r1, r1, r3
 800d3b0:	18d2      	adds	r2, r2, r3
 800d3b2:	3a04      	subs	r2, #4
 800d3b4:	3904      	subs	r1, #4
 800d3b6:	6815      	ldr	r5, [r2, #0]
 800d3b8:	680b      	ldr	r3, [r1, #0]
 800d3ba:	429d      	cmp	r5, r3
 800d3bc:	d003      	beq.n	800d3c6 <__mcmp+0x2e>
 800d3be:	2001      	movs	r0, #1
 800d3c0:	429d      	cmp	r5, r3
 800d3c2:	d303      	bcc.n	800d3cc <__mcmp+0x34>
 800d3c4:	bd30      	pop	{r4, r5, pc}
 800d3c6:	4294      	cmp	r4, r2
 800d3c8:	d3f3      	bcc.n	800d3b2 <__mcmp+0x1a>
 800d3ca:	e7fb      	b.n	800d3c4 <__mcmp+0x2c>
 800d3cc:	4240      	negs	r0, r0
 800d3ce:	e7f9      	b.n	800d3c4 <__mcmp+0x2c>

0800d3d0 <__mdiff>:
 800d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d2:	000e      	movs	r6, r1
 800d3d4:	0007      	movs	r7, r0
 800d3d6:	0011      	movs	r1, r2
 800d3d8:	0030      	movs	r0, r6
 800d3da:	b087      	sub	sp, #28
 800d3dc:	0014      	movs	r4, r2
 800d3de:	f7ff ffdb 	bl	800d398 <__mcmp>
 800d3e2:	1e05      	subs	r5, r0, #0
 800d3e4:	d110      	bne.n	800d408 <__mdiff+0x38>
 800d3e6:	0001      	movs	r1, r0
 800d3e8:	0038      	movs	r0, r7
 800d3ea:	f7ff fd53 	bl	800ce94 <_Balloc>
 800d3ee:	1e02      	subs	r2, r0, #0
 800d3f0:	d104      	bne.n	800d3fc <__mdiff+0x2c>
 800d3f2:	4b3f      	ldr	r3, [pc, #252]	; (800d4f0 <__mdiff+0x120>)
 800d3f4:	483f      	ldr	r0, [pc, #252]	; (800d4f4 <__mdiff+0x124>)
 800d3f6:	4940      	ldr	r1, [pc, #256]	; (800d4f8 <__mdiff+0x128>)
 800d3f8:	f003 f810 	bl	801041c <__assert_func>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	6145      	str	r5, [r0, #20]
 800d400:	6103      	str	r3, [r0, #16]
 800d402:	0010      	movs	r0, r2
 800d404:	b007      	add	sp, #28
 800d406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d408:	2301      	movs	r3, #1
 800d40a:	9301      	str	r3, [sp, #4]
 800d40c:	2800      	cmp	r0, #0
 800d40e:	db04      	blt.n	800d41a <__mdiff+0x4a>
 800d410:	0023      	movs	r3, r4
 800d412:	0034      	movs	r4, r6
 800d414:	001e      	movs	r6, r3
 800d416:	2300      	movs	r3, #0
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	0038      	movs	r0, r7
 800d41c:	6861      	ldr	r1, [r4, #4]
 800d41e:	f7ff fd39 	bl	800ce94 <_Balloc>
 800d422:	1e02      	subs	r2, r0, #0
 800d424:	d103      	bne.n	800d42e <__mdiff+0x5e>
 800d426:	4b32      	ldr	r3, [pc, #200]	; (800d4f0 <__mdiff+0x120>)
 800d428:	4832      	ldr	r0, [pc, #200]	; (800d4f4 <__mdiff+0x124>)
 800d42a:	4934      	ldr	r1, [pc, #208]	; (800d4fc <__mdiff+0x12c>)
 800d42c:	e7e4      	b.n	800d3f8 <__mdiff+0x28>
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	2700      	movs	r7, #0
 800d432:	60c3      	str	r3, [r0, #12]
 800d434:	6920      	ldr	r0, [r4, #16]
 800d436:	3414      	adds	r4, #20
 800d438:	0083      	lsls	r3, r0, #2
 800d43a:	18e3      	adds	r3, r4, r3
 800d43c:	0021      	movs	r1, r4
 800d43e:	9401      	str	r4, [sp, #4]
 800d440:	0034      	movs	r4, r6
 800d442:	9302      	str	r3, [sp, #8]
 800d444:	6933      	ldr	r3, [r6, #16]
 800d446:	3414      	adds	r4, #20
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	18e3      	adds	r3, r4, r3
 800d44c:	9303      	str	r3, [sp, #12]
 800d44e:	0013      	movs	r3, r2
 800d450:	3314      	adds	r3, #20
 800d452:	469c      	mov	ip, r3
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	9104      	str	r1, [sp, #16]
 800d458:	9b04      	ldr	r3, [sp, #16]
 800d45a:	cc02      	ldmia	r4!, {r1}
 800d45c:	cb20      	ldmia	r3!, {r5}
 800d45e:	9304      	str	r3, [sp, #16]
 800d460:	b2ab      	uxth	r3, r5
 800d462:	19df      	adds	r7, r3, r7
 800d464:	b28b      	uxth	r3, r1
 800d466:	1afb      	subs	r3, r7, r3
 800d468:	0c09      	lsrs	r1, r1, #16
 800d46a:	0c2d      	lsrs	r5, r5, #16
 800d46c:	1a6d      	subs	r5, r5, r1
 800d46e:	1419      	asrs	r1, r3, #16
 800d470:	1869      	adds	r1, r5, r1
 800d472:	b29b      	uxth	r3, r3
 800d474:	140f      	asrs	r7, r1, #16
 800d476:	0409      	lsls	r1, r1, #16
 800d478:	4319      	orrs	r1, r3
 800d47a:	4663      	mov	r3, ip
 800d47c:	c302      	stmia	r3!, {r1}
 800d47e:	469c      	mov	ip, r3
 800d480:	9b03      	ldr	r3, [sp, #12]
 800d482:	42a3      	cmp	r3, r4
 800d484:	d8e8      	bhi.n	800d458 <__mdiff+0x88>
 800d486:	0031      	movs	r1, r6
 800d488:	9c03      	ldr	r4, [sp, #12]
 800d48a:	3115      	adds	r1, #21
 800d48c:	2304      	movs	r3, #4
 800d48e:	428c      	cmp	r4, r1
 800d490:	d304      	bcc.n	800d49c <__mdiff+0xcc>
 800d492:	1ba3      	subs	r3, r4, r6
 800d494:	3b15      	subs	r3, #21
 800d496:	089b      	lsrs	r3, r3, #2
 800d498:	3301      	adds	r3, #1
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	9901      	ldr	r1, [sp, #4]
 800d49e:	18cd      	adds	r5, r1, r3
 800d4a0:	9905      	ldr	r1, [sp, #20]
 800d4a2:	002e      	movs	r6, r5
 800d4a4:	18cb      	adds	r3, r1, r3
 800d4a6:	469c      	mov	ip, r3
 800d4a8:	9902      	ldr	r1, [sp, #8]
 800d4aa:	428e      	cmp	r6, r1
 800d4ac:	d310      	bcc.n	800d4d0 <__mdiff+0x100>
 800d4ae:	9e02      	ldr	r6, [sp, #8]
 800d4b0:	1ee9      	subs	r1, r5, #3
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	428e      	cmp	r6, r1
 800d4b6:	d304      	bcc.n	800d4c2 <__mdiff+0xf2>
 800d4b8:	0031      	movs	r1, r6
 800d4ba:	3103      	adds	r1, #3
 800d4bc:	1b49      	subs	r1, r1, r5
 800d4be:	0889      	lsrs	r1, r1, #2
 800d4c0:	008c      	lsls	r4, r1, #2
 800d4c2:	191b      	adds	r3, r3, r4
 800d4c4:	3b04      	subs	r3, #4
 800d4c6:	6819      	ldr	r1, [r3, #0]
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	d00f      	beq.n	800d4ec <__mdiff+0x11c>
 800d4cc:	6110      	str	r0, [r2, #16]
 800d4ce:	e798      	b.n	800d402 <__mdiff+0x32>
 800d4d0:	ce02      	ldmia	r6!, {r1}
 800d4d2:	b28c      	uxth	r4, r1
 800d4d4:	19e4      	adds	r4, r4, r7
 800d4d6:	0c0f      	lsrs	r7, r1, #16
 800d4d8:	1421      	asrs	r1, r4, #16
 800d4da:	1879      	adds	r1, r7, r1
 800d4dc:	b2a4      	uxth	r4, r4
 800d4de:	140f      	asrs	r7, r1, #16
 800d4e0:	0409      	lsls	r1, r1, #16
 800d4e2:	4321      	orrs	r1, r4
 800d4e4:	4664      	mov	r4, ip
 800d4e6:	c402      	stmia	r4!, {r1}
 800d4e8:	46a4      	mov	ip, r4
 800d4ea:	e7dd      	b.n	800d4a8 <__mdiff+0xd8>
 800d4ec:	3801      	subs	r0, #1
 800d4ee:	e7e9      	b.n	800d4c4 <__mdiff+0xf4>
 800d4f0:	08014b89 	.word	0x08014b89
 800d4f4:	08014bfa 	.word	0x08014bfa
 800d4f8:	00000237 	.word	0x00000237
 800d4fc:	00000245 	.word	0x00000245

0800d500 <__ulp>:
 800d500:	2000      	movs	r0, #0
 800d502:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <__ulp+0x30>)
 800d504:	4019      	ands	r1, r3
 800d506:	4b0b      	ldr	r3, [pc, #44]	; (800d534 <__ulp+0x34>)
 800d508:	18c9      	adds	r1, r1, r3
 800d50a:	4281      	cmp	r1, r0
 800d50c:	dc06      	bgt.n	800d51c <__ulp+0x1c>
 800d50e:	4249      	negs	r1, r1
 800d510:	150b      	asrs	r3, r1, #20
 800d512:	2b13      	cmp	r3, #19
 800d514:	dc03      	bgt.n	800d51e <__ulp+0x1e>
 800d516:	2180      	movs	r1, #128	; 0x80
 800d518:	0309      	lsls	r1, r1, #12
 800d51a:	4119      	asrs	r1, r3
 800d51c:	4770      	bx	lr
 800d51e:	3b14      	subs	r3, #20
 800d520:	2001      	movs	r0, #1
 800d522:	2b1e      	cmp	r3, #30
 800d524:	dc02      	bgt.n	800d52c <__ulp+0x2c>
 800d526:	2080      	movs	r0, #128	; 0x80
 800d528:	0600      	lsls	r0, r0, #24
 800d52a:	40d8      	lsrs	r0, r3
 800d52c:	2100      	movs	r1, #0
 800d52e:	e7f5      	b.n	800d51c <__ulp+0x1c>
 800d530:	7ff00000 	.word	0x7ff00000
 800d534:	fcc00000 	.word	0xfcc00000

0800d538 <__b2d>:
 800d538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d53a:	0006      	movs	r6, r0
 800d53c:	6903      	ldr	r3, [r0, #16]
 800d53e:	3614      	adds	r6, #20
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	18f3      	adds	r3, r6, r3
 800d544:	1f1d      	subs	r5, r3, #4
 800d546:	682c      	ldr	r4, [r5, #0]
 800d548:	000f      	movs	r7, r1
 800d54a:	0020      	movs	r0, r4
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	f7ff fd63 	bl	800d018 <__hi0bits>
 800d552:	2220      	movs	r2, #32
 800d554:	1a12      	subs	r2, r2, r0
 800d556:	603a      	str	r2, [r7, #0]
 800d558:	0003      	movs	r3, r0
 800d55a:	4a1c      	ldr	r2, [pc, #112]	; (800d5cc <__b2d+0x94>)
 800d55c:	280a      	cmp	r0, #10
 800d55e:	dc15      	bgt.n	800d58c <__b2d+0x54>
 800d560:	210b      	movs	r1, #11
 800d562:	0027      	movs	r7, r4
 800d564:	1a09      	subs	r1, r1, r0
 800d566:	40cf      	lsrs	r7, r1
 800d568:	433a      	orrs	r2, r7
 800d56a:	468c      	mov	ip, r1
 800d56c:	0011      	movs	r1, r2
 800d56e:	2200      	movs	r2, #0
 800d570:	42ae      	cmp	r6, r5
 800d572:	d202      	bcs.n	800d57a <__b2d+0x42>
 800d574:	9a01      	ldr	r2, [sp, #4]
 800d576:	3a08      	subs	r2, #8
 800d578:	6812      	ldr	r2, [r2, #0]
 800d57a:	3315      	adds	r3, #21
 800d57c:	409c      	lsls	r4, r3
 800d57e:	4663      	mov	r3, ip
 800d580:	0027      	movs	r7, r4
 800d582:	40da      	lsrs	r2, r3
 800d584:	4317      	orrs	r7, r2
 800d586:	0038      	movs	r0, r7
 800d588:	b003      	add	sp, #12
 800d58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d58c:	2700      	movs	r7, #0
 800d58e:	42ae      	cmp	r6, r5
 800d590:	d202      	bcs.n	800d598 <__b2d+0x60>
 800d592:	9d01      	ldr	r5, [sp, #4]
 800d594:	3d08      	subs	r5, #8
 800d596:	682f      	ldr	r7, [r5, #0]
 800d598:	210b      	movs	r1, #11
 800d59a:	4249      	negs	r1, r1
 800d59c:	468c      	mov	ip, r1
 800d59e:	449c      	add	ip, r3
 800d5a0:	2b0b      	cmp	r3, #11
 800d5a2:	d010      	beq.n	800d5c6 <__b2d+0x8e>
 800d5a4:	4661      	mov	r1, ip
 800d5a6:	2320      	movs	r3, #32
 800d5a8:	408c      	lsls	r4, r1
 800d5aa:	1a5b      	subs	r3, r3, r1
 800d5ac:	0039      	movs	r1, r7
 800d5ae:	40d9      	lsrs	r1, r3
 800d5b0:	430c      	orrs	r4, r1
 800d5b2:	4322      	orrs	r2, r4
 800d5b4:	0011      	movs	r1, r2
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	42b5      	cmp	r5, r6
 800d5ba:	d901      	bls.n	800d5c0 <__b2d+0x88>
 800d5bc:	3d04      	subs	r5, #4
 800d5be:	682a      	ldr	r2, [r5, #0]
 800d5c0:	4664      	mov	r4, ip
 800d5c2:	40a7      	lsls	r7, r4
 800d5c4:	e7dd      	b.n	800d582 <__b2d+0x4a>
 800d5c6:	4322      	orrs	r2, r4
 800d5c8:	0011      	movs	r1, r2
 800d5ca:	e7dc      	b.n	800d586 <__b2d+0x4e>
 800d5cc:	3ff00000 	.word	0x3ff00000

0800d5d0 <__d2b>:
 800d5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	0014      	movs	r4, r2
 800d5d6:	001d      	movs	r5, r3
 800d5d8:	9f08      	ldr	r7, [sp, #32]
 800d5da:	f7ff fc5b 	bl	800ce94 <_Balloc>
 800d5de:	1e06      	subs	r6, r0, #0
 800d5e0:	d105      	bne.n	800d5ee <__d2b+0x1e>
 800d5e2:	0032      	movs	r2, r6
 800d5e4:	4b24      	ldr	r3, [pc, #144]	; (800d678 <__d2b+0xa8>)
 800d5e6:	4825      	ldr	r0, [pc, #148]	; (800d67c <__d2b+0xac>)
 800d5e8:	4925      	ldr	r1, [pc, #148]	; (800d680 <__d2b+0xb0>)
 800d5ea:	f002 ff17 	bl	801041c <__assert_func>
 800d5ee:	032b      	lsls	r3, r5, #12
 800d5f0:	006d      	lsls	r5, r5, #1
 800d5f2:	0b1b      	lsrs	r3, r3, #12
 800d5f4:	0d6d      	lsrs	r5, r5, #21
 800d5f6:	d125      	bne.n	800d644 <__d2b+0x74>
 800d5f8:	9301      	str	r3, [sp, #4]
 800d5fa:	2c00      	cmp	r4, #0
 800d5fc:	d028      	beq.n	800d650 <__d2b+0x80>
 800d5fe:	4668      	mov	r0, sp
 800d600:	9400      	str	r4, [sp, #0]
 800d602:	f7ff fd23 	bl	800d04c <__lo0bits>
 800d606:	9b01      	ldr	r3, [sp, #4]
 800d608:	9900      	ldr	r1, [sp, #0]
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d01e      	beq.n	800d64c <__d2b+0x7c>
 800d60e:	2220      	movs	r2, #32
 800d610:	001c      	movs	r4, r3
 800d612:	1a12      	subs	r2, r2, r0
 800d614:	4094      	lsls	r4, r2
 800d616:	0022      	movs	r2, r4
 800d618:	40c3      	lsrs	r3, r0
 800d61a:	430a      	orrs	r2, r1
 800d61c:	6172      	str	r2, [r6, #20]
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	9c01      	ldr	r4, [sp, #4]
 800d622:	61b4      	str	r4, [r6, #24]
 800d624:	1e63      	subs	r3, r4, #1
 800d626:	419c      	sbcs	r4, r3
 800d628:	3401      	adds	r4, #1
 800d62a:	6134      	str	r4, [r6, #16]
 800d62c:	2d00      	cmp	r5, #0
 800d62e:	d017      	beq.n	800d660 <__d2b+0x90>
 800d630:	2435      	movs	r4, #53	; 0x35
 800d632:	4b14      	ldr	r3, [pc, #80]	; (800d684 <__d2b+0xb4>)
 800d634:	18ed      	adds	r5, r5, r3
 800d636:	182d      	adds	r5, r5, r0
 800d638:	603d      	str	r5, [r7, #0]
 800d63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d63c:	1a24      	subs	r4, r4, r0
 800d63e:	601c      	str	r4, [r3, #0]
 800d640:	0030      	movs	r0, r6
 800d642:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d644:	2280      	movs	r2, #128	; 0x80
 800d646:	0352      	lsls	r2, r2, #13
 800d648:	4313      	orrs	r3, r2
 800d64a:	e7d5      	b.n	800d5f8 <__d2b+0x28>
 800d64c:	6171      	str	r1, [r6, #20]
 800d64e:	e7e7      	b.n	800d620 <__d2b+0x50>
 800d650:	a801      	add	r0, sp, #4
 800d652:	f7ff fcfb 	bl	800d04c <__lo0bits>
 800d656:	9b01      	ldr	r3, [sp, #4]
 800d658:	2401      	movs	r4, #1
 800d65a:	6173      	str	r3, [r6, #20]
 800d65c:	3020      	adds	r0, #32
 800d65e:	e7e4      	b.n	800d62a <__d2b+0x5a>
 800d660:	4b09      	ldr	r3, [pc, #36]	; (800d688 <__d2b+0xb8>)
 800d662:	18c0      	adds	r0, r0, r3
 800d664:	4b09      	ldr	r3, [pc, #36]	; (800d68c <__d2b+0xbc>)
 800d666:	6038      	str	r0, [r7, #0]
 800d668:	18e3      	adds	r3, r4, r3
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	18f3      	adds	r3, r6, r3
 800d66e:	6958      	ldr	r0, [r3, #20]
 800d670:	f7ff fcd2 	bl	800d018 <__hi0bits>
 800d674:	0164      	lsls	r4, r4, #5
 800d676:	e7e0      	b.n	800d63a <__d2b+0x6a>
 800d678:	08014b89 	.word	0x08014b89
 800d67c:	08014bfa 	.word	0x08014bfa
 800d680:	0000030f 	.word	0x0000030f
 800d684:	fffffbcd 	.word	0xfffffbcd
 800d688:	fffffbce 	.word	0xfffffbce
 800d68c:	3fffffff 	.word	0x3fffffff

0800d690 <__ratio>:
 800d690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d692:	b087      	sub	sp, #28
 800d694:	000f      	movs	r7, r1
 800d696:	a904      	add	r1, sp, #16
 800d698:	0006      	movs	r6, r0
 800d69a:	f7ff ff4d 	bl	800d538 <__b2d>
 800d69e:	9000      	str	r0, [sp, #0]
 800d6a0:	9101      	str	r1, [sp, #4]
 800d6a2:	9c00      	ldr	r4, [sp, #0]
 800d6a4:	9d01      	ldr	r5, [sp, #4]
 800d6a6:	0038      	movs	r0, r7
 800d6a8:	a905      	add	r1, sp, #20
 800d6aa:	f7ff ff45 	bl	800d538 <__b2d>
 800d6ae:	9002      	str	r0, [sp, #8]
 800d6b0:	9103      	str	r1, [sp, #12]
 800d6b2:	9a02      	ldr	r2, [sp, #8]
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	6930      	ldr	r0, [r6, #16]
 800d6b8:	6939      	ldr	r1, [r7, #16]
 800d6ba:	9e04      	ldr	r6, [sp, #16]
 800d6bc:	1a40      	subs	r0, r0, r1
 800d6be:	9905      	ldr	r1, [sp, #20]
 800d6c0:	0140      	lsls	r0, r0, #5
 800d6c2:	1a71      	subs	r1, r6, r1
 800d6c4:	1841      	adds	r1, r0, r1
 800d6c6:	0508      	lsls	r0, r1, #20
 800d6c8:	2900      	cmp	r1, #0
 800d6ca:	dd07      	ble.n	800d6dc <__ratio+0x4c>
 800d6cc:	9901      	ldr	r1, [sp, #4]
 800d6ce:	1845      	adds	r5, r0, r1
 800d6d0:	0020      	movs	r0, r4
 800d6d2:	0029      	movs	r1, r5
 800d6d4:	f7f3 fbd0 	bl	8000e78 <__aeabi_ddiv>
 800d6d8:	b007      	add	sp, #28
 800d6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6dc:	9903      	ldr	r1, [sp, #12]
 800d6de:	1a0b      	subs	r3, r1, r0
 800d6e0:	e7f6      	b.n	800d6d0 <__ratio+0x40>

0800d6e2 <__copybits>:
 800d6e2:	b570      	push	{r4, r5, r6, lr}
 800d6e4:	0014      	movs	r4, r2
 800d6e6:	0005      	movs	r5, r0
 800d6e8:	3901      	subs	r1, #1
 800d6ea:	6913      	ldr	r3, [r2, #16]
 800d6ec:	1149      	asrs	r1, r1, #5
 800d6ee:	3101      	adds	r1, #1
 800d6f0:	0089      	lsls	r1, r1, #2
 800d6f2:	3414      	adds	r4, #20
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	1841      	adds	r1, r0, r1
 800d6f8:	18e3      	adds	r3, r4, r3
 800d6fa:	42a3      	cmp	r3, r4
 800d6fc:	d80d      	bhi.n	800d71a <__copybits+0x38>
 800d6fe:	0014      	movs	r4, r2
 800d700:	3411      	adds	r4, #17
 800d702:	2500      	movs	r5, #0
 800d704:	429c      	cmp	r4, r3
 800d706:	d803      	bhi.n	800d710 <__copybits+0x2e>
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	3b11      	subs	r3, #17
 800d70c:	089b      	lsrs	r3, r3, #2
 800d70e:	009d      	lsls	r5, r3, #2
 800d710:	2300      	movs	r3, #0
 800d712:	1940      	adds	r0, r0, r5
 800d714:	4281      	cmp	r1, r0
 800d716:	d803      	bhi.n	800d720 <__copybits+0x3e>
 800d718:	bd70      	pop	{r4, r5, r6, pc}
 800d71a:	cc40      	ldmia	r4!, {r6}
 800d71c:	c540      	stmia	r5!, {r6}
 800d71e:	e7ec      	b.n	800d6fa <__copybits+0x18>
 800d720:	c008      	stmia	r0!, {r3}
 800d722:	e7f7      	b.n	800d714 <__copybits+0x32>

0800d724 <__any_on>:
 800d724:	0002      	movs	r2, r0
 800d726:	6900      	ldr	r0, [r0, #16]
 800d728:	b510      	push	{r4, lr}
 800d72a:	3214      	adds	r2, #20
 800d72c:	114b      	asrs	r3, r1, #5
 800d72e:	4298      	cmp	r0, r3
 800d730:	db13      	blt.n	800d75a <__any_on+0x36>
 800d732:	dd0c      	ble.n	800d74e <__any_on+0x2a>
 800d734:	241f      	movs	r4, #31
 800d736:	0008      	movs	r0, r1
 800d738:	4020      	ands	r0, r4
 800d73a:	4221      	tst	r1, r4
 800d73c:	d007      	beq.n	800d74e <__any_on+0x2a>
 800d73e:	0099      	lsls	r1, r3, #2
 800d740:	588c      	ldr	r4, [r1, r2]
 800d742:	0021      	movs	r1, r4
 800d744:	40c1      	lsrs	r1, r0
 800d746:	4081      	lsls	r1, r0
 800d748:	2001      	movs	r0, #1
 800d74a:	428c      	cmp	r4, r1
 800d74c:	d104      	bne.n	800d758 <__any_on+0x34>
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	18d3      	adds	r3, r2, r3
 800d752:	4293      	cmp	r3, r2
 800d754:	d803      	bhi.n	800d75e <__any_on+0x3a>
 800d756:	2000      	movs	r0, #0
 800d758:	bd10      	pop	{r4, pc}
 800d75a:	0003      	movs	r3, r0
 800d75c:	e7f7      	b.n	800d74e <__any_on+0x2a>
 800d75e:	3b04      	subs	r3, #4
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	2900      	cmp	r1, #0
 800d764:	d0f5      	beq.n	800d752 <__any_on+0x2e>
 800d766:	2001      	movs	r0, #1
 800d768:	e7f6      	b.n	800d758 <__any_on+0x34>

0800d76a <__ascii_wctomb>:
 800d76a:	0003      	movs	r3, r0
 800d76c:	1e08      	subs	r0, r1, #0
 800d76e:	d005      	beq.n	800d77c <__ascii_wctomb+0x12>
 800d770:	2aff      	cmp	r2, #255	; 0xff
 800d772:	d904      	bls.n	800d77e <__ascii_wctomb+0x14>
 800d774:	228a      	movs	r2, #138	; 0x8a
 800d776:	2001      	movs	r0, #1
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	4240      	negs	r0, r0
 800d77c:	4770      	bx	lr
 800d77e:	2001      	movs	r0, #1
 800d780:	700a      	strb	r2, [r1, #0]
 800d782:	e7fb      	b.n	800d77c <__ascii_wctomb+0x12>

0800d784 <_svfprintf_r>:
 800d784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d786:	b0d9      	sub	sp, #356	; 0x164
 800d788:	001c      	movs	r4, r3
 800d78a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d78c:	9208      	str	r2, [sp, #32]
 800d78e:	900a      	str	r0, [sp, #40]	; 0x28
 800d790:	f002 fdae 	bl	80102f0 <_localeconv_r>
 800d794:	6803      	ldr	r3, [r0, #0]
 800d796:	0018      	movs	r0, r3
 800d798:	931c      	str	r3, [sp, #112]	; 0x70
 800d79a:	f7f2 fcb3 	bl	8000104 <strlen>
 800d79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a0:	9016      	str	r0, [sp, #88]	; 0x58
 800d7a2:	899b      	ldrh	r3, [r3, #12]
 800d7a4:	061b      	lsls	r3, r3, #24
 800d7a6:	d517      	bpl.n	800d7d8 <_svfprintf_r+0x54>
 800d7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d113      	bne.n	800d7d8 <_svfprintf_r+0x54>
 800d7b0:	2140      	movs	r1, #64	; 0x40
 800d7b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7b4:	f7fd fa94 	bl	800ace0 <_malloc_r>
 800d7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7ba:	6018      	str	r0, [r3, #0]
 800d7bc:	6118      	str	r0, [r3, #16]
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d107      	bne.n	800d7d2 <_svfprintf_r+0x4e>
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	3b0d      	subs	r3, #13
 800d7ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d7ce:	b059      	add	sp, #356	; 0x164
 800d7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d2:	2340      	movs	r3, #64	; 0x40
 800d7d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7d6:	6153      	str	r3, [r2, #20]
 800d7d8:	2300      	movs	r3, #0
 800d7da:	2200      	movs	r2, #0
 800d7dc:	932e      	str	r3, [sp, #184]	; 0xb8
 800d7de:	932d      	str	r3, [sp, #180]	; 0xb4
 800d7e0:	930e      	str	r3, [sp, #56]	; 0x38
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9214      	str	r2, [sp, #80]	; 0x50
 800d7e6:	9315      	str	r3, [sp, #84]	; 0x54
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	af2f      	add	r7, sp, #188	; 0xbc
 800d7ec:	972c      	str	r7, [sp, #176]	; 0xb0
 800d7ee:	931f      	str	r3, [sp, #124]	; 0x7c
 800d7f0:	931e      	str	r3, [sp, #120]	; 0x78
 800d7f2:	9312      	str	r3, [sp, #72]	; 0x48
 800d7f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d7f6:	931d      	str	r3, [sp, #116]	; 0x74
 800d7f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7fa:	9d08      	ldr	r5, [sp, #32]
 800d7fc:	782b      	ldrb	r3, [r5, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d002      	beq.n	800d808 <_svfprintf_r+0x84>
 800d802:	2b25      	cmp	r3, #37	; 0x25
 800d804:	d000      	beq.n	800d808 <_svfprintf_r+0x84>
 800d806:	e091      	b.n	800d92c <_svfprintf_r+0x1a8>
 800d808:	9b08      	ldr	r3, [sp, #32]
 800d80a:	1aee      	subs	r6, r5, r3
 800d80c:	429d      	cmp	r5, r3
 800d80e:	d016      	beq.n	800d83e <_svfprintf_r+0xba>
 800d810:	603b      	str	r3, [r7, #0]
 800d812:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d814:	607e      	str	r6, [r7, #4]
 800d816:	199b      	adds	r3, r3, r6
 800d818:	932e      	str	r3, [sp, #184]	; 0xb8
 800d81a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d81c:	3708      	adds	r7, #8
 800d81e:	3301      	adds	r3, #1
 800d820:	932d      	str	r3, [sp, #180]	; 0xb4
 800d822:	2b07      	cmp	r3, #7
 800d824:	dd08      	ble.n	800d838 <_svfprintf_r+0xb4>
 800d826:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d828:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d82a:	aa2c      	add	r2, sp, #176	; 0xb0
 800d82c:	f004 f83a 	bl	80118a4 <__ssprint_r>
 800d830:	2800      	cmp	r0, #0
 800d832:	d000      	beq.n	800d836 <_svfprintf_r+0xb2>
 800d834:	e1cf      	b.n	800dbd6 <_svfprintf_r+0x452>
 800d836:	af2f      	add	r7, sp, #188	; 0xbc
 800d838:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d83a:	199b      	adds	r3, r3, r6
 800d83c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d83e:	782b      	ldrb	r3, [r5, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d101      	bne.n	800d848 <_svfprintf_r+0xc4>
 800d844:	f001 f99e 	bl	800eb84 <_svfprintf_r+0x1400>
 800d848:	221b      	movs	r2, #27
 800d84a:	2300      	movs	r3, #0
 800d84c:	a91e      	add	r1, sp, #120	; 0x78
 800d84e:	1852      	adds	r2, r2, r1
 800d850:	7013      	strb	r3, [r2, #0]
 800d852:	2201      	movs	r2, #1
 800d854:	001e      	movs	r6, r3
 800d856:	4252      	negs	r2, r2
 800d858:	3501      	adds	r5, #1
 800d85a:	9209      	str	r2, [sp, #36]	; 0x24
 800d85c:	9318      	str	r3, [sp, #96]	; 0x60
 800d85e:	1c6b      	adds	r3, r5, #1
 800d860:	9313      	str	r3, [sp, #76]	; 0x4c
 800d862:	782b      	ldrb	r3, [r5, #0]
 800d864:	930f      	str	r3, [sp, #60]	; 0x3c
 800d866:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d868:	3820      	subs	r0, #32
 800d86a:	285a      	cmp	r0, #90	; 0x5a
 800d86c:	d901      	bls.n	800d872 <_svfprintf_r+0xee>
 800d86e:	f000 fe20 	bl	800e4b2 <_svfprintf_r+0xd2e>
 800d872:	f7f2 fc59 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d876:	0078      	.short	0x0078
 800d878:	061e061e 	.word	0x061e061e
 800d87c:	061e0082 	.word	0x061e0082
 800d880:	061e061e 	.word	0x061e061e
 800d884:	061e005d 	.word	0x061e005d
 800d888:	0084061e 	.word	0x0084061e
 800d88c:	061e008c 	.word	0x061e008c
 800d890:	0091008a 	.word	0x0091008a
 800d894:	00b2061e 	.word	0x00b2061e
 800d898:	00b400b4 	.word	0x00b400b4
 800d89c:	00b400b4 	.word	0x00b400b4
 800d8a0:	00b400b4 	.word	0x00b400b4
 800d8a4:	00b400b4 	.word	0x00b400b4
 800d8a8:	061e00b4 	.word	0x061e00b4
 800d8ac:	061e061e 	.word	0x061e061e
 800d8b0:	061e061e 	.word	0x061e061e
 800d8b4:	061e061e 	.word	0x061e061e
 800d8b8:	061e013b 	.word	0x061e013b
 800d8bc:	00f400e0 	.word	0x00f400e0
 800d8c0:	013b013b 	.word	0x013b013b
 800d8c4:	061e013b 	.word	0x061e013b
 800d8c8:	061e061e 	.word	0x061e061e
 800d8cc:	00c7061e 	.word	0x00c7061e
 800d8d0:	061e061e 	.word	0x061e061e
 800d8d4:	061e04c7 	.word	0x061e04c7
 800d8d8:	061e061e 	.word	0x061e061e
 800d8dc:	061e050a 	.word	0x061e050a
 800d8e0:	061e052a 	.word	0x061e052a
 800d8e4:	055c061e 	.word	0x055c061e
 800d8e8:	061e061e 	.word	0x061e061e
 800d8ec:	061e061e 	.word	0x061e061e
 800d8f0:	061e061e 	.word	0x061e061e
 800d8f4:	061e061e 	.word	0x061e061e
 800d8f8:	061e013b 	.word	0x061e013b
 800d8fc:	00f600e0 	.word	0x00f600e0
 800d900:	013b013b 	.word	0x013b013b
 800d904:	00c9013b 	.word	0x00c9013b
 800d908:	00dc00f6 	.word	0x00dc00f6
 800d90c:	00d5061e 	.word	0x00d5061e
 800d910:	04a7061e 	.word	0x04a7061e
 800d914:	04fa04c9 	.word	0x04fa04c9
 800d918:	061e00dc 	.word	0x061e00dc
 800d91c:	0080050a 	.word	0x0080050a
 800d920:	061e052c 	.word	0x061e052c
 800d924:	057c061e 	.word	0x057c061e
 800d928:	0080061e 	.word	0x0080061e
 800d92c:	3501      	adds	r5, #1
 800d92e:	e765      	b.n	800d7fc <_svfprintf_r+0x78>
 800d930:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d932:	f002 fcdd 	bl	80102f0 <_localeconv_r>
 800d936:	6843      	ldr	r3, [r0, #4]
 800d938:	0018      	movs	r0, r3
 800d93a:	931d      	str	r3, [sp, #116]	; 0x74
 800d93c:	f7f2 fbe2 	bl	8000104 <strlen>
 800d940:	901b      	str	r0, [sp, #108]	; 0x6c
 800d942:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d944:	f002 fcd4 	bl	80102f0 <_localeconv_r>
 800d948:	6883      	ldr	r3, [r0, #8]
 800d94a:	9312      	str	r3, [sp, #72]	; 0x48
 800d94c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d011      	beq.n	800d976 <_svfprintf_r+0x1f2>
 800d952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00e      	beq.n	800d976 <_svfprintf_r+0x1f2>
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00b      	beq.n	800d976 <_svfprintf_r+0x1f2>
 800d95e:	2380      	movs	r3, #128	; 0x80
 800d960:	00db      	lsls	r3, r3, #3
 800d962:	431e      	orrs	r6, r3
 800d964:	e007      	b.n	800d976 <_svfprintf_r+0x1f2>
 800d966:	231b      	movs	r3, #27
 800d968:	aa1e      	add	r2, sp, #120	; 0x78
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	781a      	ldrb	r2, [r3, #0]
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d101      	bne.n	800d976 <_svfprintf_r+0x1f2>
 800d972:	3220      	adds	r2, #32
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d978:	e771      	b.n	800d85e <_svfprintf_r+0xda>
 800d97a:	2301      	movs	r3, #1
 800d97c:	e7f1      	b.n	800d962 <_svfprintf_r+0x1de>
 800d97e:	cc08      	ldmia	r4!, {r3}
 800d980:	9318      	str	r3, [sp, #96]	; 0x60
 800d982:	2b00      	cmp	r3, #0
 800d984:	daf7      	bge.n	800d976 <_svfprintf_r+0x1f2>
 800d986:	425b      	negs	r3, r3
 800d988:	9318      	str	r3, [sp, #96]	; 0x60
 800d98a:	2304      	movs	r3, #4
 800d98c:	e7e9      	b.n	800d962 <_svfprintf_r+0x1de>
 800d98e:	231b      	movs	r3, #27
 800d990:	aa1e      	add	r2, sp, #120	; 0x78
 800d992:	189b      	adds	r3, r3, r2
 800d994:	222b      	movs	r2, #43	; 0x2b
 800d996:	e7ed      	b.n	800d974 <_svfprintf_r+0x1f0>
 800d998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d99a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d99c:	7812      	ldrb	r2, [r2, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9a2:	2a2a      	cmp	r2, #42	; 0x2a
 800d9a4:	d010      	beq.n	800d9c8 <_svfprintf_r+0x244>
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9ae:	3a30      	subs	r2, #48	; 0x30
 800d9b0:	2a09      	cmp	r2, #9
 800d9b2:	d900      	bls.n	800d9b6 <_svfprintf_r+0x232>
 800d9b4:	e757      	b.n	800d866 <_svfprintf_r+0xe2>
 800d9b6:	200a      	movs	r0, #10
 800d9b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ba:	4341      	muls	r1, r0
 800d9bc:	188a      	adds	r2, r1, r2
 800d9be:	9209      	str	r2, [sp, #36]	; 0x24
 800d9c0:	781a      	ldrb	r2, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9c6:	e7f0      	b.n	800d9aa <_svfprintf_r+0x226>
 800d9c8:	cc04      	ldmia	r4!, {r2}
 800d9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800d9cc:	2a00      	cmp	r2, #0
 800d9ce:	da02      	bge.n	800d9d6 <_svfprintf_r+0x252>
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	4252      	negs	r2, r2
 800d9d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9d8:	e7cd      	b.n	800d976 <_svfprintf_r+0x1f2>
 800d9da:	2380      	movs	r3, #128	; 0x80
 800d9dc:	e7c1      	b.n	800d962 <_svfprintf_r+0x1de>
 800d9de:	2200      	movs	r2, #0
 800d9e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9e2:	9218      	str	r2, [sp, #96]	; 0x60
 800d9e4:	210a      	movs	r1, #10
 800d9e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d9e8:	434a      	muls	r2, r1
 800d9ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d9ec:	3930      	subs	r1, #48	; 0x30
 800d9ee:	188a      	adds	r2, r1, r2
 800d9f0:	9218      	str	r2, [sp, #96]	; 0x60
 800d9f2:	001a      	movs	r2, r3
 800d9f4:	7812      	ldrb	r2, [r2, #0]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9fa:	3a30      	subs	r2, #48	; 0x30
 800d9fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d9fe:	2a09      	cmp	r2, #9
 800da00:	d9f0      	bls.n	800d9e4 <_svfprintf_r+0x260>
 800da02:	e730      	b.n	800d866 <_svfprintf_r+0xe2>
 800da04:	2308      	movs	r3, #8
 800da06:	e7ac      	b.n	800d962 <_svfprintf_r+0x1de>
 800da08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	2b68      	cmp	r3, #104	; 0x68
 800da0e:	d105      	bne.n	800da1c <_svfprintf_r+0x298>
 800da10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da12:	3301      	adds	r3, #1
 800da14:	9313      	str	r3, [sp, #76]	; 0x4c
 800da16:	2380      	movs	r3, #128	; 0x80
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	e7a2      	b.n	800d962 <_svfprintf_r+0x1de>
 800da1c:	2340      	movs	r3, #64	; 0x40
 800da1e:	e7a0      	b.n	800d962 <_svfprintf_r+0x1de>
 800da20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	2b6c      	cmp	r3, #108	; 0x6c
 800da26:	d104      	bne.n	800da32 <_svfprintf_r+0x2ae>
 800da28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da2a:	3301      	adds	r3, #1
 800da2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800da2e:	2320      	movs	r3, #32
 800da30:	e797      	b.n	800d962 <_svfprintf_r+0x1de>
 800da32:	2310      	movs	r3, #16
 800da34:	e795      	b.n	800d962 <_svfprintf_r+0x1de>
 800da36:	0021      	movs	r1, r4
 800da38:	c904      	ldmia	r1!, {r2}
 800da3a:	ab3f      	add	r3, sp, #252	; 0xfc
 800da3c:	910d      	str	r1, [sp, #52]	; 0x34
 800da3e:	211b      	movs	r1, #27
 800da40:	701a      	strb	r2, [r3, #0]
 800da42:	2200      	movs	r2, #0
 800da44:	a81e      	add	r0, sp, #120	; 0x78
 800da46:	1809      	adds	r1, r1, r0
 800da48:	700a      	strb	r2, [r1, #0]
 800da4a:	920c      	str	r2, [sp, #48]	; 0x30
 800da4c:	3201      	adds	r2, #1
 800da4e:	9209      	str	r2, [sp, #36]	; 0x24
 800da50:	2200      	movs	r2, #0
 800da52:	9308      	str	r3, [sp, #32]
 800da54:	0015      	movs	r5, r2
 800da56:	9219      	str	r2, [sp, #100]	; 0x64
 800da58:	9210      	str	r2, [sp, #64]	; 0x40
 800da5a:	9211      	str	r2, [sp, #68]	; 0x44
 800da5c:	e1f1      	b.n	800de42 <_svfprintf_r+0x6be>
 800da5e:	2310      	movs	r3, #16
 800da60:	431e      	orrs	r6, r3
 800da62:	06b3      	lsls	r3, r6, #26
 800da64:	d531      	bpl.n	800daca <_svfprintf_r+0x346>
 800da66:	2307      	movs	r3, #7
 800da68:	3407      	adds	r4, #7
 800da6a:	439c      	bics	r4, r3
 800da6c:	0022      	movs	r2, r4
 800da6e:	ca18      	ldmia	r2!, {r3, r4}
 800da70:	9306      	str	r3, [sp, #24]
 800da72:	9407      	str	r4, [sp, #28]
 800da74:	920d      	str	r2, [sp, #52]	; 0x34
 800da76:	9a07      	ldr	r2, [sp, #28]
 800da78:	2301      	movs	r3, #1
 800da7a:	2a00      	cmp	r2, #0
 800da7c:	da0b      	bge.n	800da96 <_svfprintf_r+0x312>
 800da7e:	9c06      	ldr	r4, [sp, #24]
 800da80:	9d07      	ldr	r5, [sp, #28]
 800da82:	2200      	movs	r2, #0
 800da84:	4261      	negs	r1, r4
 800da86:	41aa      	sbcs	r2, r5
 800da88:	9106      	str	r1, [sp, #24]
 800da8a:	9207      	str	r2, [sp, #28]
 800da8c:	221b      	movs	r2, #27
 800da8e:	a91e      	add	r1, sp, #120	; 0x78
 800da90:	1852      	adds	r2, r2, r1
 800da92:	212d      	movs	r1, #45	; 0x2d
 800da94:	7011      	strb	r1, [r2, #0]
 800da96:	9907      	ldr	r1, [sp, #28]
 800da98:	9a06      	ldr	r2, [sp, #24]
 800da9a:	430a      	orrs	r2, r1
 800da9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da9e:	3101      	adds	r1, #1
 800daa0:	d101      	bne.n	800daa6 <_svfprintf_r+0x322>
 800daa2:	f001 f87b 	bl	800eb9c <_svfprintf_r+0x1418>
 800daa6:	2180      	movs	r1, #128	; 0x80
 800daa8:	0034      	movs	r4, r6
 800daaa:	438c      	bics	r4, r1
 800daac:	2a00      	cmp	r2, #0
 800daae:	d001      	beq.n	800dab4 <_svfprintf_r+0x330>
 800dab0:	f001 f879 	bl	800eba6 <_svfprintf_r+0x1422>
 800dab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dab6:	2a00      	cmp	r2, #0
 800dab8:	d101      	bne.n	800dabe <_svfprintf_r+0x33a>
 800daba:	f000 fcef 	bl	800e49c <_svfprintf_r+0xd18>
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d001      	beq.n	800dac6 <_svfprintf_r+0x342>
 800dac2:	f001 f874 	bl	800ebae <_svfprintf_r+0x142a>
 800dac6:	f000 fc79 	bl	800e3bc <_svfprintf_r+0xc38>
 800daca:	0022      	movs	r2, r4
 800dacc:	ca08      	ldmia	r2!, {r3}
 800dace:	920d      	str	r2, [sp, #52]	; 0x34
 800dad0:	06f2      	lsls	r2, r6, #27
 800dad2:	d503      	bpl.n	800dadc <_svfprintf_r+0x358>
 800dad4:	9306      	str	r3, [sp, #24]
 800dad6:	17db      	asrs	r3, r3, #31
 800dad8:	9307      	str	r3, [sp, #28]
 800dada:	e7cc      	b.n	800da76 <_svfprintf_r+0x2f2>
 800dadc:	0672      	lsls	r2, r6, #25
 800dade:	d501      	bpl.n	800dae4 <_svfprintf_r+0x360>
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	e7f7      	b.n	800dad4 <_svfprintf_r+0x350>
 800dae4:	05b2      	lsls	r2, r6, #22
 800dae6:	d5f5      	bpl.n	800dad4 <_svfprintf_r+0x350>
 800dae8:	b25b      	sxtb	r3, r3
 800daea:	e7f3      	b.n	800dad4 <_svfprintf_r+0x350>
 800daec:	2307      	movs	r3, #7
 800daee:	3407      	adds	r4, #7
 800daf0:	439c      	bics	r4, r3
 800daf2:	0022      	movs	r2, r4
 800daf4:	ca18      	ldmia	r2!, {r3, r4}
 800daf6:	920d      	str	r2, [sp, #52]	; 0x34
 800daf8:	2201      	movs	r2, #1
 800dafa:	9314      	str	r3, [sp, #80]	; 0x50
 800dafc:	9415      	str	r4, [sp, #84]	; 0x54
 800dafe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db00:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800db02:	005c      	lsls	r4, r3, #1
 800db04:	0864      	lsrs	r4, r4, #1
 800db06:	0028      	movs	r0, r5
 800db08:	0021      	movs	r1, r4
 800db0a:	4b3e      	ldr	r3, [pc, #248]	; (800dc04 <_svfprintf_r+0x480>)
 800db0c:	4252      	negs	r2, r2
 800db0e:	f7f4 fbf1 	bl	80022f4 <__aeabi_dcmpun>
 800db12:	2800      	cmp	r0, #0
 800db14:	d126      	bne.n	800db64 <_svfprintf_r+0x3e0>
 800db16:	2201      	movs	r2, #1
 800db18:	0028      	movs	r0, r5
 800db1a:	0021      	movs	r1, r4
 800db1c:	4b39      	ldr	r3, [pc, #228]	; (800dc04 <_svfprintf_r+0x480>)
 800db1e:	4252      	negs	r2, r2
 800db20:	f7f2 fca2 	bl	8000468 <__aeabi_dcmple>
 800db24:	2800      	cmp	r0, #0
 800db26:	d11d      	bne.n	800db64 <_svfprintf_r+0x3e0>
 800db28:	9814      	ldr	r0, [sp, #80]	; 0x50
 800db2a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800db2c:	2200      	movs	r2, #0
 800db2e:	2300      	movs	r3, #0
 800db30:	f7f2 fc90 	bl	8000454 <__aeabi_dcmplt>
 800db34:	2800      	cmp	r0, #0
 800db36:	d004      	beq.n	800db42 <_svfprintf_r+0x3be>
 800db38:	231b      	movs	r3, #27
 800db3a:	aa1e      	add	r2, sp, #120	; 0x78
 800db3c:	189b      	adds	r3, r3, r2
 800db3e:	222d      	movs	r2, #45	; 0x2d
 800db40:	701a      	strb	r2, [r3, #0]
 800db42:	4b31      	ldr	r3, [pc, #196]	; (800dc08 <_svfprintf_r+0x484>)
 800db44:	9308      	str	r3, [sp, #32]
 800db46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db48:	2b47      	cmp	r3, #71	; 0x47
 800db4a:	dd01      	ble.n	800db50 <_svfprintf_r+0x3cc>
 800db4c:	4b2f      	ldr	r3, [pc, #188]	; (800dc0c <_svfprintf_r+0x488>)
 800db4e:	9308      	str	r3, [sp, #32]
 800db50:	2380      	movs	r3, #128	; 0x80
 800db52:	439e      	bics	r6, r3
 800db54:	2300      	movs	r3, #0
 800db56:	930c      	str	r3, [sp, #48]	; 0x30
 800db58:	3303      	adds	r3, #3
 800db5a:	9309      	str	r3, [sp, #36]	; 0x24
 800db5c:	2300      	movs	r3, #0
 800db5e:	9319      	str	r3, [sp, #100]	; 0x64
 800db60:	f000 fc78 	bl	800e454 <_svfprintf_r+0xcd0>
 800db64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db68:	0010      	movs	r0, r2
 800db6a:	0019      	movs	r1, r3
 800db6c:	f7f4 fbc2 	bl	80022f4 <__aeabi_dcmpun>
 800db70:	2800      	cmp	r0, #0
 800db72:	d00e      	beq.n	800db92 <_svfprintf_r+0x40e>
 800db74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db76:	2b00      	cmp	r3, #0
 800db78:	da04      	bge.n	800db84 <_svfprintf_r+0x400>
 800db7a:	231b      	movs	r3, #27
 800db7c:	aa1e      	add	r2, sp, #120	; 0x78
 800db7e:	189b      	adds	r3, r3, r2
 800db80:	222d      	movs	r2, #45	; 0x2d
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	4b22      	ldr	r3, [pc, #136]	; (800dc10 <_svfprintf_r+0x48c>)
 800db86:	9308      	str	r3, [sp, #32]
 800db88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db8a:	2b47      	cmp	r3, #71	; 0x47
 800db8c:	dde0      	ble.n	800db50 <_svfprintf_r+0x3cc>
 800db8e:	4b21      	ldr	r3, [pc, #132]	; (800dc14 <_svfprintf_r+0x490>)
 800db90:	e7dd      	b.n	800db4e <_svfprintf_r+0x3ca>
 800db92:	2320      	movs	r3, #32
 800db94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db96:	439a      	bics	r2, r3
 800db98:	9210      	str	r2, [sp, #64]	; 0x40
 800db9a:	2a41      	cmp	r2, #65	; 0x41
 800db9c:	d123      	bne.n	800dbe6 <_svfprintf_r+0x462>
 800db9e:	2230      	movs	r2, #48	; 0x30
 800dba0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dba2:	ab25      	add	r3, sp, #148	; 0x94
 800dba4:	701a      	strb	r2, [r3, #0]
 800dba6:	3248      	adds	r2, #72	; 0x48
 800dba8:	2961      	cmp	r1, #97	; 0x61
 800dbaa:	d000      	beq.n	800dbae <_svfprintf_r+0x42a>
 800dbac:	3a20      	subs	r2, #32
 800dbae:	705a      	strb	r2, [r3, #1]
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	431e      	orrs	r6, r3
 800dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb6:	2b63      	cmp	r3, #99	; 0x63
 800dbb8:	dd2e      	ble.n	800dc18 <_svfprintf_r+0x494>
 800dbba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbbc:	1c59      	adds	r1, r3, #1
 800dbbe:	f7fd f88f 	bl	800ace0 <_malloc_r>
 800dbc2:	9008      	str	r0, [sp, #32]
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d000      	beq.n	800dbca <_svfprintf_r+0x446>
 800dbc8:	e216      	b.n	800dff8 <_svfprintf_r+0x874>
 800dbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbcc:	899a      	ldrh	r2, [r3, #12]
 800dbce:	2340      	movs	r3, #64	; 0x40
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbd4:	8193      	strh	r3, [r2, #12]
 800dbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbd8:	899b      	ldrh	r3, [r3, #12]
 800dbda:	065b      	lsls	r3, r3, #25
 800dbdc:	d400      	bmi.n	800dbe0 <_svfprintf_r+0x45c>
 800dbde:	e5f5      	b.n	800d7cc <_svfprintf_r+0x48>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	425b      	negs	r3, r3
 800dbe4:	e5f1      	b.n	800d7ca <_svfprintf_r+0x46>
 800dbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe8:	900c      	str	r0, [sp, #48]	; 0x30
 800dbea:	3301      	adds	r3, #1
 800dbec:	d100      	bne.n	800dbf0 <_svfprintf_r+0x46c>
 800dbee:	e206      	b.n	800dffe <_svfprintf_r+0x87a>
 800dbf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbf2:	2b47      	cmp	r3, #71	; 0x47
 800dbf4:	d114      	bne.n	800dc20 <_svfprintf_r+0x49c>
 800dbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d111      	bne.n	800dc20 <_svfprintf_r+0x49c>
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dc00:	e00e      	b.n	800dc20 <_svfprintf_r+0x49c>
 800dc02:	46c0      	nop			; (mov r8, r8)
 800dc04:	7fefffff 	.word	0x7fefffff
 800dc08:	08014d54 	.word	0x08014d54
 800dc0c:	08014d58 	.word	0x08014d58
 800dc10:	08014d5c 	.word	0x08014d5c
 800dc14:	08014d60 	.word	0x08014d60
 800dc18:	2300      	movs	r3, #0
 800dc1a:	930c      	str	r3, [sp, #48]	; 0x30
 800dc1c:	ab3f      	add	r3, sp, #252	; 0xfc
 800dc1e:	9308      	str	r3, [sp, #32]
 800dc20:	2380      	movs	r3, #128	; 0x80
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	4333      	orrs	r3, r6
 800dc26:	931a      	str	r3, [sp, #104]	; 0x68
 800dc28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	db00      	blt.n	800dc32 <_svfprintf_r+0x4ae>
 800dc30:	e1e7      	b.n	800e002 <_svfprintf_r+0x87e>
 800dc32:	2280      	movs	r2, #128	; 0x80
 800dc34:	0612      	lsls	r2, r2, #24
 800dc36:	4694      	mov	ip, r2
 800dc38:	4463      	add	r3, ip
 800dc3a:	930e      	str	r3, [sp, #56]	; 0x38
 800dc3c:	232d      	movs	r3, #45	; 0x2d
 800dc3e:	9322      	str	r3, [sp, #136]	; 0x88
 800dc40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc42:	2b41      	cmp	r3, #65	; 0x41
 800dc44:	d000      	beq.n	800dc48 <_svfprintf_r+0x4c4>
 800dc46:	e1f5      	b.n	800e034 <_svfprintf_r+0x8b0>
 800dc48:	0028      	movs	r0, r5
 800dc4a:	aa26      	add	r2, sp, #152	; 0x98
 800dc4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc4e:	f002 fb73 	bl	8010338 <frexp>
 800dc52:	23ff      	movs	r3, #255	; 0xff
 800dc54:	2200      	movs	r2, #0
 800dc56:	059b      	lsls	r3, r3, #22
 800dc58:	f7f3 fd08 	bl	800166c <__aeabi_dmul>
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2300      	movs	r3, #0
 800dc60:	0004      	movs	r4, r0
 800dc62:	000d      	movs	r5, r1
 800dc64:	f7f2 fbf0 	bl	8000448 <__aeabi_dcmpeq>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d001      	beq.n	800dc70 <_svfprintf_r+0x4ec>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	9326      	str	r3, [sp, #152]	; 0x98
 800dc70:	4bda      	ldr	r3, [pc, #872]	; (800dfdc <_svfprintf_r+0x858>)
 800dc72:	9319      	str	r3, [sp, #100]	; 0x64
 800dc74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc76:	2b61      	cmp	r3, #97	; 0x61
 800dc78:	d001      	beq.n	800dc7e <_svfprintf_r+0x4fa>
 800dc7a:	4bd9      	ldr	r3, [pc, #868]	; (800dfe0 <_svfprintf_r+0x85c>)
 800dc7c:	9319      	str	r3, [sp, #100]	; 0x64
 800dc7e:	9b08      	ldr	r3, [sp, #32]
 800dc80:	930e      	str	r3, [sp, #56]	; 0x38
 800dc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc84:	3b01      	subs	r3, #1
 800dc86:	9311      	str	r3, [sp, #68]	; 0x44
 800dc88:	2200      	movs	r2, #0
 800dc8a:	4bd6      	ldr	r3, [pc, #856]	; (800dfe4 <_svfprintf_r+0x860>)
 800dc8c:	0020      	movs	r0, r4
 800dc8e:	0029      	movs	r1, r5
 800dc90:	f7f3 fcec 	bl	800166c <__aeabi_dmul>
 800dc94:	000d      	movs	r5, r1
 800dc96:	0004      	movs	r4, r0
 800dc98:	f7f4 fb4a 	bl	8002330 <__aeabi_d2iz>
 800dc9c:	9021      	str	r0, [sp, #132]	; 0x84
 800dc9e:	f7f4 fb7d 	bl	800239c <__aeabi_i2d>
 800dca2:	0002      	movs	r2, r0
 800dca4:	000b      	movs	r3, r1
 800dca6:	0020      	movs	r0, r4
 800dca8:	0029      	movs	r1, r5
 800dcaa:	f7f3 ffa1 	bl	8001bf0 <__aeabi_dsub>
 800dcae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcb0:	000d      	movs	r5, r1
 800dcb2:	001a      	movs	r2, r3
 800dcb4:	3201      	adds	r2, #1
 800dcb6:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dcb8:	920e      	str	r2, [sp, #56]	; 0x38
 800dcba:	9223      	str	r2, [sp, #140]	; 0x8c
 800dcbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dcbe:	0004      	movs	r4, r0
 800dcc0:	5c52      	ldrb	r2, [r2, r1]
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcc6:	9320      	str	r3, [sp, #128]	; 0x80
 800dcc8:	3301      	adds	r3, #1
 800dcca:	d00a      	beq.n	800dce2 <_svfprintf_r+0x55e>
 800dccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcce:	2200      	movs	r2, #0
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	9311      	str	r3, [sp, #68]	; 0x44
 800dcd4:	0020      	movs	r0, r4
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	0029      	movs	r1, r5
 800dcda:	f7f2 fbb5 	bl	8000448 <__aeabi_dcmpeq>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d0d2      	beq.n	800dc88 <_svfprintf_r+0x504>
 800dce2:	2200      	movs	r2, #0
 800dce4:	0020      	movs	r0, r4
 800dce6:	0029      	movs	r1, r5
 800dce8:	4bbf      	ldr	r3, [pc, #764]	; (800dfe8 <_svfprintf_r+0x864>)
 800dcea:	f7f2 fbc7 	bl	800047c <__aeabi_dcmpgt>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d10c      	bne.n	800dd0c <_svfprintf_r+0x588>
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	0020      	movs	r0, r4
 800dcf6:	0029      	movs	r1, r5
 800dcf8:	4bbb      	ldr	r3, [pc, #748]	; (800dfe8 <_svfprintf_r+0x864>)
 800dcfa:	f7f2 fba5 	bl	8000448 <__aeabi_dcmpeq>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d100      	bne.n	800dd04 <_svfprintf_r+0x580>
 800dd02:	e191      	b.n	800e028 <_svfprintf_r+0x8a4>
 800dd04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd06:	07db      	lsls	r3, r3, #31
 800dd08:	d400      	bmi.n	800dd0c <_svfprintf_r+0x588>
 800dd0a:	e18d      	b.n	800e028 <_svfprintf_r+0x8a4>
 800dd0c:	2030      	movs	r0, #48	; 0x30
 800dd0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd10:	932a      	str	r3, [sp, #168]	; 0xa8
 800dd12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd14:	7bdb      	ldrb	r3, [r3, #15]
 800dd16:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800dd18:	3a01      	subs	r2, #1
 800dd1a:	922a      	str	r2, [sp, #168]	; 0xa8
 800dd1c:	7811      	ldrb	r1, [r2, #0]
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d100      	bne.n	800dd24 <_svfprintf_r+0x5a0>
 800dd22:	e171      	b.n	800e008 <_svfprintf_r+0x884>
 800dd24:	1c4b      	adds	r3, r1, #1
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2939      	cmp	r1, #57	; 0x39
 800dd2a:	d101      	bne.n	800dd30 <_svfprintf_r+0x5ac>
 800dd2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dd2e:	7a9b      	ldrb	r3, [r3, #10]
 800dd30:	7013      	strb	r3, [r2, #0]
 800dd32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd34:	9a08      	ldr	r2, [sp, #32]
 800dd36:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	930e      	str	r3, [sp, #56]	; 0x38
 800dd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd3e:	2b47      	cmp	r3, #71	; 0x47
 800dd40:	d000      	beq.n	800dd44 <_svfprintf_r+0x5c0>
 800dd42:	e1c4      	b.n	800e0ce <_svfprintf_r+0x94a>
 800dd44:	1ceb      	adds	r3, r5, #3
 800dd46:	db03      	blt.n	800dd50 <_svfprintf_r+0x5cc>
 800dd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4a:	42ab      	cmp	r3, r5
 800dd4c:	db00      	blt.n	800dd50 <_svfprintf_r+0x5cc>
 800dd4e:	e1e6      	b.n	800e11e <_svfprintf_r+0x99a>
 800dd50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd52:	3b02      	subs	r3, #2
 800dd54:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd56:	223c      	movs	r2, #60	; 0x3c
 800dd58:	466b      	mov	r3, sp
 800dd5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dd5c:	189b      	adds	r3, r3, r2
 800dd5e:	1e6c      	subs	r4, r5, #1
 800dd60:	3a1c      	subs	r2, #28
 800dd62:	2000      	movs	r0, #0
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	9426      	str	r4, [sp, #152]	; 0x98
 800dd68:	4391      	bics	r1, r2
 800dd6a:	2941      	cmp	r1, #65	; 0x41
 800dd6c:	d102      	bne.n	800dd74 <_svfprintf_r+0x5f0>
 800dd6e:	330f      	adds	r3, #15
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	3001      	adds	r0, #1
 800dd74:	a928      	add	r1, sp, #160	; 0xa0
 800dd76:	700b      	strb	r3, [r1, #0]
 800dd78:	232b      	movs	r3, #43	; 0x2b
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	da02      	bge.n	800dd84 <_svfprintf_r+0x600>
 800dd7e:	2401      	movs	r4, #1
 800dd80:	3302      	adds	r3, #2
 800dd82:	1b64      	subs	r4, r4, r5
 800dd84:	704b      	strb	r3, [r1, #1]
 800dd86:	2c09      	cmp	r4, #9
 800dd88:	dc00      	bgt.n	800dd8c <_svfprintf_r+0x608>
 800dd8a:	e1ba      	b.n	800e102 <_svfprintf_r+0x97e>
 800dd8c:	2337      	movs	r3, #55	; 0x37
 800dd8e:	250a      	movs	r5, #10
 800dd90:	aa1e      	add	r2, sp, #120	; 0x78
 800dd92:	189b      	adds	r3, r3, r2
 800dd94:	9310      	str	r3, [sp, #64]	; 0x40
 800dd96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd98:	0020      	movs	r0, r4
 800dd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd9c:	0029      	movs	r1, r5
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	9310      	str	r3, [sp, #64]	; 0x40
 800dda2:	f7f2 fb3b 	bl	800041c <__aeabi_idivmod>
 800dda6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dda8:	3130      	adds	r1, #48	; 0x30
 800ddaa:	7019      	strb	r1, [r3, #0]
 800ddac:	0020      	movs	r0, r4
 800ddae:	0029      	movs	r1, r5
 800ddb0:	9411      	str	r4, [sp, #68]	; 0x44
 800ddb2:	f7f2 fa4d 	bl	8000250 <__divsi3>
 800ddb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddb8:	0004      	movs	r4, r0
 800ddba:	2b63      	cmp	r3, #99	; 0x63
 800ddbc:	dceb      	bgt.n	800dd96 <_svfprintf_r+0x612>
 800ddbe:	222a      	movs	r2, #42	; 0x2a
 800ddc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc2:	a81e      	add	r0, sp, #120	; 0x78
 800ddc4:	1e99      	subs	r1, r3, #2
 800ddc6:	1812      	adds	r2, r2, r0
 800ddc8:	2037      	movs	r0, #55	; 0x37
 800ddca:	000b      	movs	r3, r1
 800ddcc:	3430      	adds	r4, #48	; 0x30
 800ddce:	700c      	strb	r4, [r1, #0]
 800ddd0:	ac1e      	add	r4, sp, #120	; 0x78
 800ddd2:	1900      	adds	r0, r0, r4
 800ddd4:	4283      	cmp	r3, r0
 800ddd6:	d200      	bcs.n	800ddda <_svfprintf_r+0x656>
 800ddd8:	e18e      	b.n	800e0f8 <_svfprintf_r+0x974>
 800ddda:	2300      	movs	r3, #0
 800dddc:	4281      	cmp	r1, r0
 800ddde:	d804      	bhi.n	800ddea <_svfprintf_r+0x666>
 800dde0:	aa1e      	add	r2, sp, #120	; 0x78
 800dde2:	3339      	adds	r3, #57	; 0x39
 800dde4:	189b      	adds	r3, r3, r2
 800dde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde8:	1a9b      	subs	r3, r3, r2
 800ddea:	222a      	movs	r2, #42	; 0x2a
 800ddec:	a91e      	add	r1, sp, #120	; 0x78
 800ddee:	1852      	adds	r2, r2, r1
 800ddf0:	18d3      	adds	r3, r2, r3
 800ddf2:	aa28      	add	r2, sp, #160	; 0xa0
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	931e      	str	r3, [sp, #120]	; 0x78
 800ddf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ddfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddfc:	4694      	mov	ip, r2
 800ddfe:	4463      	add	r3, ip
 800de00:	9309      	str	r3, [sp, #36]	; 0x24
 800de02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de04:	2b01      	cmp	r3, #1
 800de06:	dc01      	bgt.n	800de0c <_svfprintf_r+0x688>
 800de08:	07f3      	lsls	r3, r6, #31
 800de0a:	d504      	bpl.n	800de16 <_svfprintf_r+0x692>
 800de0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800de0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de10:	4694      	mov	ip, r2
 800de12:	4463      	add	r3, ip
 800de14:	9309      	str	r3, [sp, #36]	; 0x24
 800de16:	2280      	movs	r2, #128	; 0x80
 800de18:	4b74      	ldr	r3, [pc, #464]	; (800dfec <_svfprintf_r+0x868>)
 800de1a:	0052      	lsls	r2, r2, #1
 800de1c:	4033      	ands	r3, r6
 800de1e:	431a      	orrs	r2, r3
 800de20:	2300      	movs	r3, #0
 800de22:	001d      	movs	r5, r3
 800de24:	921a      	str	r2, [sp, #104]	; 0x68
 800de26:	9310      	str	r3, [sp, #64]	; 0x40
 800de28:	9311      	str	r3, [sp, #68]	; 0x44
 800de2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800de2c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800de2e:	9319      	str	r3, [sp, #100]	; 0x64
 800de30:	2b00      	cmp	r3, #0
 800de32:	d006      	beq.n	800de42 <_svfprintf_r+0x6be>
 800de34:	231b      	movs	r3, #27
 800de36:	aa1e      	add	r2, sp, #120	; 0x78
 800de38:	189b      	adds	r3, r3, r2
 800de3a:	222d      	movs	r2, #45	; 0x2d
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	2300      	movs	r3, #0
 800de40:	9319      	str	r3, [sp, #100]	; 0x64
 800de42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de46:	931a      	str	r3, [sp, #104]	; 0x68
 800de48:	4293      	cmp	r3, r2
 800de4a:	da00      	bge.n	800de4e <_svfprintf_r+0x6ca>
 800de4c:	921a      	str	r2, [sp, #104]	; 0x68
 800de4e:	231b      	movs	r3, #27
 800de50:	aa1e      	add	r2, sp, #120	; 0x78
 800de52:	189b      	adds	r3, r3, r2
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	1e5a      	subs	r2, r3, #1
 800de58:	4193      	sbcs	r3, r2
 800de5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de5c:	18d3      	adds	r3, r2, r3
 800de5e:	931a      	str	r3, [sp, #104]	; 0x68
 800de60:	0032      	movs	r2, r6
 800de62:	2302      	movs	r3, #2
 800de64:	401a      	ands	r2, r3
 800de66:	9220      	str	r2, [sp, #128]	; 0x80
 800de68:	421e      	tst	r6, r3
 800de6a:	d002      	beq.n	800de72 <_svfprintf_r+0x6ee>
 800de6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800de6e:	3302      	adds	r3, #2
 800de70:	931a      	str	r3, [sp, #104]	; 0x68
 800de72:	2384      	movs	r3, #132	; 0x84
 800de74:	0032      	movs	r2, r6
 800de76:	401a      	ands	r2, r3
 800de78:	9221      	str	r2, [sp, #132]	; 0x84
 800de7a:	421e      	tst	r6, r3
 800de7c:	d11f      	bne.n	800debe <_svfprintf_r+0x73a>
 800de7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800de80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de82:	1a9c      	subs	r4, r3, r2
 800de84:	2c00      	cmp	r4, #0
 800de86:	dd1a      	ble.n	800debe <_svfprintf_r+0x73a>
 800de88:	0039      	movs	r1, r7
 800de8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800de8c:	4858      	ldr	r0, [pc, #352]	; (800dff0 <_svfprintf_r+0x86c>)
 800de8e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800de90:	3301      	adds	r3, #1
 800de92:	3108      	adds	r1, #8
 800de94:	6038      	str	r0, [r7, #0]
 800de96:	2c10      	cmp	r4, #16
 800de98:	dd00      	ble.n	800de9c <_svfprintf_r+0x718>
 800de9a:	e31c      	b.n	800e4d6 <_svfprintf_r+0xd52>
 800de9c:	607c      	str	r4, [r7, #4]
 800de9e:	18a4      	adds	r4, r4, r2
 800dea0:	000f      	movs	r7, r1
 800dea2:	942e      	str	r4, [sp, #184]	; 0xb8
 800dea4:	932d      	str	r3, [sp, #180]	; 0xb4
 800dea6:	2b07      	cmp	r3, #7
 800dea8:	dd09      	ble.n	800debe <_svfprintf_r+0x73a>
 800deaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800deac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800deae:	aa2c      	add	r2, sp, #176	; 0xb0
 800deb0:	f003 fcf8 	bl	80118a4 <__ssprint_r>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d001      	beq.n	800debc <_svfprintf_r+0x738>
 800deb8:	f000 fe43 	bl	800eb42 <_svfprintf_r+0x13be>
 800debc:	af2f      	add	r7, sp, #188	; 0xbc
 800debe:	221b      	movs	r2, #27
 800dec0:	a91e      	add	r1, sp, #120	; 0x78
 800dec2:	1852      	adds	r2, r2, r1
 800dec4:	7811      	ldrb	r1, [r2, #0]
 800dec6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dec8:	2900      	cmp	r1, #0
 800deca:	d014      	beq.n	800def6 <_svfprintf_r+0x772>
 800decc:	603a      	str	r2, [r7, #0]
 800dece:	2201      	movs	r2, #1
 800ded0:	189b      	adds	r3, r3, r2
 800ded2:	932e      	str	r3, [sp, #184]	; 0xb8
 800ded4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	189b      	adds	r3, r3, r2
 800deda:	932d      	str	r3, [sp, #180]	; 0xb4
 800dedc:	3708      	adds	r7, #8
 800dede:	2b07      	cmp	r3, #7
 800dee0:	dd09      	ble.n	800def6 <_svfprintf_r+0x772>
 800dee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dee4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dee6:	aa2c      	add	r2, sp, #176	; 0xb0
 800dee8:	f003 fcdc 	bl	80118a4 <__ssprint_r>
 800deec:	2800      	cmp	r0, #0
 800deee:	d001      	beq.n	800def4 <_svfprintf_r+0x770>
 800def0:	f000 fe27 	bl	800eb42 <_svfprintf_r+0x13be>
 800def4:	af2f      	add	r7, sp, #188	; 0xbc
 800def6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800def8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800defa:	2a00      	cmp	r2, #0
 800defc:	d015      	beq.n	800df2a <_svfprintf_r+0x7a6>
 800defe:	aa25      	add	r2, sp, #148	; 0x94
 800df00:	603a      	str	r2, [r7, #0]
 800df02:	2202      	movs	r2, #2
 800df04:	189b      	adds	r3, r3, r2
 800df06:	932e      	str	r3, [sp, #184]	; 0xb8
 800df08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	3301      	adds	r3, #1
 800df0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800df10:	3708      	adds	r7, #8
 800df12:	2b07      	cmp	r3, #7
 800df14:	dd09      	ble.n	800df2a <_svfprintf_r+0x7a6>
 800df16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df1a:	aa2c      	add	r2, sp, #176	; 0xb0
 800df1c:	f003 fcc2 	bl	80118a4 <__ssprint_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	d001      	beq.n	800df28 <_svfprintf_r+0x7a4>
 800df24:	f000 fe0d 	bl	800eb42 <_svfprintf_r+0x13be>
 800df28:	af2f      	add	r7, sp, #188	; 0xbc
 800df2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df2c:	2b80      	cmp	r3, #128	; 0x80
 800df2e:	d11f      	bne.n	800df70 <_svfprintf_r+0x7ec>
 800df30:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df34:	1a9c      	subs	r4, r3, r2
 800df36:	2c00      	cmp	r4, #0
 800df38:	dd1a      	ble.n	800df70 <_svfprintf_r+0x7ec>
 800df3a:	0039      	movs	r1, r7
 800df3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df3e:	482d      	ldr	r0, [pc, #180]	; (800dff4 <_svfprintf_r+0x870>)
 800df40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df42:	3301      	adds	r3, #1
 800df44:	3108      	adds	r1, #8
 800df46:	6038      	str	r0, [r7, #0]
 800df48:	2c10      	cmp	r4, #16
 800df4a:	dd00      	ble.n	800df4e <_svfprintf_r+0x7ca>
 800df4c:	e2d6      	b.n	800e4fc <_svfprintf_r+0xd78>
 800df4e:	607c      	str	r4, [r7, #4]
 800df50:	18a4      	adds	r4, r4, r2
 800df52:	000f      	movs	r7, r1
 800df54:	942e      	str	r4, [sp, #184]	; 0xb8
 800df56:	932d      	str	r3, [sp, #180]	; 0xb4
 800df58:	2b07      	cmp	r3, #7
 800df5a:	dd09      	ble.n	800df70 <_svfprintf_r+0x7ec>
 800df5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df60:	aa2c      	add	r2, sp, #176	; 0xb0
 800df62:	f003 fc9f 	bl	80118a4 <__ssprint_r>
 800df66:	2800      	cmp	r0, #0
 800df68:	d001      	beq.n	800df6e <_svfprintf_r+0x7ea>
 800df6a:	f000 fdea 	bl	800eb42 <_svfprintf_r+0x13be>
 800df6e:	af2f      	add	r7, sp, #188	; 0xbc
 800df70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800df72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df74:	1a9c      	subs	r4, r3, r2
 800df76:	2c00      	cmp	r4, #0
 800df78:	dd1a      	ble.n	800dfb0 <_svfprintf_r+0x82c>
 800df7a:	0039      	movs	r1, r7
 800df7c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df7e:	481d      	ldr	r0, [pc, #116]	; (800dff4 <_svfprintf_r+0x870>)
 800df80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df82:	3301      	adds	r3, #1
 800df84:	3108      	adds	r1, #8
 800df86:	6038      	str	r0, [r7, #0]
 800df88:	2c10      	cmp	r4, #16
 800df8a:	dd00      	ble.n	800df8e <_svfprintf_r+0x80a>
 800df8c:	e2c9      	b.n	800e522 <_svfprintf_r+0xd9e>
 800df8e:	18a2      	adds	r2, r4, r2
 800df90:	607c      	str	r4, [r7, #4]
 800df92:	922e      	str	r2, [sp, #184]	; 0xb8
 800df94:	000f      	movs	r7, r1
 800df96:	932d      	str	r3, [sp, #180]	; 0xb4
 800df98:	2b07      	cmp	r3, #7
 800df9a:	dd09      	ble.n	800dfb0 <_svfprintf_r+0x82c>
 800df9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfa0:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfa2:	f003 fc7f 	bl	80118a4 <__ssprint_r>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d001      	beq.n	800dfae <_svfprintf_r+0x82a>
 800dfaa:	f000 fdca 	bl	800eb42 <_svfprintf_r+0x13be>
 800dfae:	af2f      	add	r7, sp, #188	; 0xbc
 800dfb0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800dfb2:	9319      	str	r3, [sp, #100]	; 0x64
 800dfb4:	05f3      	lsls	r3, r6, #23
 800dfb6:	d500      	bpl.n	800dfba <_svfprintf_r+0x836>
 800dfb8:	e2ce      	b.n	800e558 <_svfprintf_r+0xdd4>
 800dfba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfbc:	9b08      	ldr	r3, [sp, #32]
 800dfbe:	4694      	mov	ip, r2
 800dfc0:	603b      	str	r3, [r7, #0]
 800dfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc4:	607b      	str	r3, [r7, #4]
 800dfc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dfc8:	4463      	add	r3, ip
 800dfca:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfcc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfce:	3301      	adds	r3, #1
 800dfd0:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfd2:	2b07      	cmp	r3, #7
 800dfd4:	dd00      	ble.n	800dfd8 <_svfprintf_r+0x854>
 800dfd6:	e3a3      	b.n	800e720 <_svfprintf_r+0xf9c>
 800dfd8:	3708      	adds	r7, #8
 800dfda:	e301      	b.n	800e5e0 <_svfprintf_r+0xe5c>
 800dfdc:	08014d64 	.word	0x08014d64
 800dfe0:	08014d75 	.word	0x08014d75
 800dfe4:	40300000 	.word	0x40300000
 800dfe8:	3fe00000 	.word	0x3fe00000
 800dfec:	fffffbff 	.word	0xfffffbff
 800dff0:	08014d88 	.word	0x08014d88
 800dff4:	08014d98 	.word	0x08014d98
 800dff8:	9b08      	ldr	r3, [sp, #32]
 800dffa:	930c      	str	r3, [sp, #48]	; 0x30
 800dffc:	e610      	b.n	800dc20 <_svfprintf_r+0x49c>
 800dffe:	2306      	movs	r3, #6
 800e000:	e5fd      	b.n	800dbfe <_svfprintf_r+0x47a>
 800e002:	930e      	str	r3, [sp, #56]	; 0x38
 800e004:	2300      	movs	r3, #0
 800e006:	e61a      	b.n	800dc3e <_svfprintf_r+0x4ba>
 800e008:	7010      	strb	r0, [r2, #0]
 800e00a:	e684      	b.n	800dd16 <_svfprintf_r+0x592>
 800e00c:	7018      	strb	r0, [r3, #0]
 800e00e:	3301      	adds	r3, #1
 800e010:	1aca      	subs	r2, r1, r3
 800e012:	d5fb      	bpl.n	800e00c <_svfprintf_r+0x888>
 800e014:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e016:	2300      	movs	r3, #0
 800e018:	3201      	adds	r2, #1
 800e01a:	db01      	blt.n	800e020 <_svfprintf_r+0x89c>
 800e01c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e01e:	3301      	adds	r3, #1
 800e020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e022:	18d3      	adds	r3, r2, r3
 800e024:	9323      	str	r3, [sp, #140]	; 0x8c
 800e026:	e684      	b.n	800dd32 <_svfprintf_r+0x5ae>
 800e028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e02a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e02c:	2030      	movs	r0, #48	; 0x30
 800e02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e030:	1851      	adds	r1, r2, r1
 800e032:	e7ed      	b.n	800e010 <_svfprintf_r+0x88c>
 800e034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e036:	2303      	movs	r3, #3
 800e038:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e03a:	2a46      	cmp	r2, #70	; 0x46
 800e03c:	d006      	beq.n	800e04c <_svfprintf_r+0x8c8>
 800e03e:	0014      	movs	r4, r2
 800e040:	3c45      	subs	r4, #69	; 0x45
 800e042:	4262      	negs	r2, r4
 800e044:	4154      	adcs	r4, r2
 800e046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e048:	3b01      	subs	r3, #1
 800e04a:	1914      	adds	r4, r2, r4
 800e04c:	aa2a      	add	r2, sp, #168	; 0xa8
 800e04e:	9204      	str	r2, [sp, #16]
 800e050:	aa27      	add	r2, sp, #156	; 0x9c
 800e052:	9203      	str	r2, [sp, #12]
 800e054:	aa26      	add	r2, sp, #152	; 0x98
 800e056:	9202      	str	r2, [sp, #8]
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	002a      	movs	r2, r5
 800e05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e05e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e060:	9401      	str	r4, [sp, #4]
 800e062:	f002 fad7 	bl	8010614 <_dtoa_r>
 800e066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e068:	9008      	str	r0, [sp, #32]
 800e06a:	2b47      	cmp	r3, #71	; 0x47
 800e06c:	d103      	bne.n	800e076 <_svfprintf_r+0x8f2>
 800e06e:	07f3      	lsls	r3, r6, #31
 800e070:	d401      	bmi.n	800e076 <_svfprintf_r+0x8f2>
 800e072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e074:	e65e      	b.n	800dd34 <_svfprintf_r+0x5b0>
 800e076:	9b08      	ldr	r3, [sp, #32]
 800e078:	191b      	adds	r3, r3, r4
 800e07a:	9311      	str	r3, [sp, #68]	; 0x44
 800e07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e07e:	2b46      	cmp	r3, #70	; 0x46
 800e080:	d112      	bne.n	800e0a8 <_svfprintf_r+0x924>
 800e082:	9b08      	ldr	r3, [sp, #32]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b30      	cmp	r3, #48	; 0x30
 800e088:	d10a      	bne.n	800e0a0 <_svfprintf_r+0x91c>
 800e08a:	2200      	movs	r2, #0
 800e08c:	2300      	movs	r3, #0
 800e08e:	0028      	movs	r0, r5
 800e090:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e092:	f7f2 f9d9 	bl	8000448 <__aeabi_dcmpeq>
 800e096:	2800      	cmp	r0, #0
 800e098:	d102      	bne.n	800e0a0 <_svfprintf_r+0x91c>
 800e09a:	2301      	movs	r3, #1
 800e09c:	1b1b      	subs	r3, r3, r4
 800e09e:	9326      	str	r3, [sp, #152]	; 0x98
 800e0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0a4:	18d3      	adds	r3, r2, r3
 800e0a6:	9311      	str	r3, [sp, #68]	; 0x44
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	0028      	movs	r0, r5
 800e0ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e0b0:	f7f2 f9ca 	bl	8000448 <__aeabi_dcmpeq>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	d001      	beq.n	800e0bc <_svfprintf_r+0x938>
 800e0b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0ba:	932a      	str	r3, [sp, #168]	; 0xa8
 800e0bc:	2230      	movs	r2, #48	; 0x30
 800e0be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e0c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e0c2:	4299      	cmp	r1, r3
 800e0c4:	d9d5      	bls.n	800e072 <_svfprintf_r+0x8ee>
 800e0c6:	1c59      	adds	r1, r3, #1
 800e0c8:	912a      	str	r1, [sp, #168]	; 0xa8
 800e0ca:	701a      	strb	r2, [r3, #0]
 800e0cc:	e7f7      	b.n	800e0be <_svfprintf_r+0x93a>
 800e0ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0d0:	2b46      	cmp	r3, #70	; 0x46
 800e0d2:	d000      	beq.n	800e0d6 <_svfprintf_r+0x952>
 800e0d4:	e63f      	b.n	800dd56 <_svfprintf_r+0x5d2>
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	0033      	movs	r3, r6
 800e0da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0dc:	4013      	ands	r3, r2
 800e0de:	430b      	orrs	r3, r1
 800e0e0:	2d00      	cmp	r5, #0
 800e0e2:	dd2c      	ble.n	800e13e <_svfprintf_r+0x9ba>
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d046      	beq.n	800e176 <_svfprintf_r+0x9f2>
 800e0e8:	000a      	movs	r2, r1
 800e0ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0ec:	18eb      	adds	r3, r5, r3
 800e0ee:	18d3      	adds	r3, r2, r3
 800e0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f2:	2366      	movs	r3, #102	; 0x66
 800e0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0f6:	e030      	b.n	800e15a <_svfprintf_r+0x9d6>
 800e0f8:	781c      	ldrb	r4, [r3, #0]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	7014      	strb	r4, [r2, #0]
 800e0fe:	3201      	adds	r2, #1
 800e100:	e668      	b.n	800ddd4 <_svfprintf_r+0x650>
 800e102:	222a      	movs	r2, #42	; 0x2a
 800e104:	ab1e      	add	r3, sp, #120	; 0x78
 800e106:	18d2      	adds	r2, r2, r3
 800e108:	2800      	cmp	r0, #0
 800e10a:	d104      	bne.n	800e116 <_svfprintf_r+0x992>
 800e10c:	2330      	movs	r3, #48	; 0x30
 800e10e:	222b      	movs	r2, #43	; 0x2b
 800e110:	708b      	strb	r3, [r1, #2]
 800e112:	ab1e      	add	r3, sp, #120	; 0x78
 800e114:	18d2      	adds	r2, r2, r3
 800e116:	3430      	adds	r4, #48	; 0x30
 800e118:	1c53      	adds	r3, r2, #1
 800e11a:	7014      	strb	r4, [r2, #0]
 800e11c:	e669      	b.n	800ddf2 <_svfprintf_r+0x66e>
 800e11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e120:	42ab      	cmp	r3, r5
 800e122:	dd12      	ble.n	800e14a <_svfprintf_r+0x9c6>
 800e124:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e128:	4694      	mov	ip, r2
 800e12a:	4463      	add	r3, ip
 800e12c:	9309      	str	r3, [sp, #36]	; 0x24
 800e12e:	2367      	movs	r3, #103	; 0x67
 800e130:	930f      	str	r3, [sp, #60]	; 0x3c
 800e132:	2d00      	cmp	r5, #0
 800e134:	dc11      	bgt.n	800e15a <_svfprintf_r+0x9d6>
 800e136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e138:	1b5b      	subs	r3, r3, r5
 800e13a:	3301      	adds	r3, #1
 800e13c:	e00c      	b.n	800e158 <_svfprintf_r+0x9d4>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d01b      	beq.n	800e17a <_svfprintf_r+0x9f6>
 800e142:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e144:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e146:	3301      	adds	r3, #1
 800e148:	e7d1      	b.n	800e0ee <_svfprintf_r+0x96a>
 800e14a:	2367      	movs	r3, #103	; 0x67
 800e14c:	9509      	str	r5, [sp, #36]	; 0x24
 800e14e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e150:	07f3      	lsls	r3, r6, #31
 800e152:	d502      	bpl.n	800e15a <_svfprintf_r+0x9d6>
 800e154:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e156:	18eb      	adds	r3, r5, r3
 800e158:	9309      	str	r3, [sp, #36]	; 0x24
 800e15a:	2380      	movs	r3, #128	; 0x80
 800e15c:	0032      	movs	r2, r6
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	401a      	ands	r2, r3
 800e162:	9211      	str	r2, [sp, #68]	; 0x44
 800e164:	2200      	movs	r2, #0
 800e166:	9210      	str	r2, [sp, #64]	; 0x40
 800e168:	421e      	tst	r6, r3
 800e16a:	d100      	bne.n	800e16e <_svfprintf_r+0x9ea>
 800e16c:	e65d      	b.n	800de2a <_svfprintf_r+0x6a6>
 800e16e:	4295      	cmp	r5, r2
 800e170:	dc25      	bgt.n	800e1be <_svfprintf_r+0xa3a>
 800e172:	9211      	str	r2, [sp, #68]	; 0x44
 800e174:	e659      	b.n	800de2a <_svfprintf_r+0x6a6>
 800e176:	9509      	str	r5, [sp, #36]	; 0x24
 800e178:	e7bb      	b.n	800e0f2 <_svfprintf_r+0x96e>
 800e17a:	2366      	movs	r3, #102	; 0x66
 800e17c:	9209      	str	r2, [sp, #36]	; 0x24
 800e17e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e180:	e7eb      	b.n	800e15a <_svfprintf_r+0x9d6>
 800e182:	42ab      	cmp	r3, r5
 800e184:	da0e      	bge.n	800e1a4 <_svfprintf_r+0xa20>
 800e186:	1aed      	subs	r5, r5, r3
 800e188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e18a:	785b      	ldrb	r3, [r3, #1]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d012      	beq.n	800e1b6 <_svfprintf_r+0xa32>
 800e190:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e192:	3301      	adds	r3, #1
 800e194:	9311      	str	r3, [sp, #68]	; 0x44
 800e196:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e198:	3301      	adds	r3, #1
 800e19a:	9312      	str	r3, [sp, #72]	; 0x48
 800e19c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	2bff      	cmp	r3, #255	; 0xff
 800e1a2:	d1ee      	bne.n	800e182 <_svfprintf_r+0x9fe>
 800e1a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1a8:	189b      	adds	r3, r3, r2
 800e1aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e1ac:	4353      	muls	r3, r2
 800e1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1b0:	189b      	adds	r3, r3, r2
 800e1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1b4:	e639      	b.n	800de2a <_svfprintf_r+0x6a6>
 800e1b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	9310      	str	r3, [sp, #64]	; 0x40
 800e1bc:	e7ee      	b.n	800e19c <_svfprintf_r+0xa18>
 800e1be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1c0:	9311      	str	r3, [sp, #68]	; 0x44
 800e1c2:	e7eb      	b.n	800e19c <_svfprintf_r+0xa18>
 800e1c4:	1d23      	adds	r3, r4, #4
 800e1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800e1c8:	06b3      	lsls	r3, r6, #26
 800e1ca:	d509      	bpl.n	800e1e0 <_svfprintf_r+0xa5c>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	17d2      	asrs	r2, r2, #31
 800e1d4:	605a      	str	r2, [r3, #4]
 800e1d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e1da:	9308      	str	r3, [sp, #32]
 800e1dc:	f7ff fb0d 	bl	800d7fa <_svfprintf_r+0x76>
 800e1e0:	06f3      	lsls	r3, r6, #27
 800e1e2:	d503      	bpl.n	800e1ec <_svfprintf_r+0xa68>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	e7f4      	b.n	800e1d6 <_svfprintf_r+0xa52>
 800e1ec:	0673      	lsls	r3, r6, #25
 800e1ee:	d503      	bpl.n	800e1f8 <_svfprintf_r+0xa74>
 800e1f0:	6823      	ldr	r3, [r4, #0]
 800e1f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1f4:	801a      	strh	r2, [r3, #0]
 800e1f6:	e7ee      	b.n	800e1d6 <_svfprintf_r+0xa52>
 800e1f8:	05b6      	lsls	r6, r6, #22
 800e1fa:	d5f3      	bpl.n	800e1e4 <_svfprintf_r+0xa60>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	e7e8      	b.n	800e1d6 <_svfprintf_r+0xa52>
 800e204:	2310      	movs	r3, #16
 800e206:	431e      	orrs	r6, r3
 800e208:	2320      	movs	r3, #32
 800e20a:	0030      	movs	r0, r6
 800e20c:	4018      	ands	r0, r3
 800e20e:	421e      	tst	r6, r3
 800e210:	d00f      	beq.n	800e232 <_svfprintf_r+0xaae>
 800e212:	3b19      	subs	r3, #25
 800e214:	3407      	adds	r4, #7
 800e216:	439c      	bics	r4, r3
 800e218:	0022      	movs	r2, r4
 800e21a:	ca18      	ldmia	r2!, {r3, r4}
 800e21c:	9306      	str	r3, [sp, #24]
 800e21e:	9407      	str	r4, [sp, #28]
 800e220:	920d      	str	r2, [sp, #52]	; 0x34
 800e222:	4bc9      	ldr	r3, [pc, #804]	; (800e548 <_svfprintf_r+0xdc4>)
 800e224:	401e      	ands	r6, r3
 800e226:	2300      	movs	r3, #0
 800e228:	221b      	movs	r2, #27
 800e22a:	a91e      	add	r1, sp, #120	; 0x78
 800e22c:	1852      	adds	r2, r2, r1
 800e22e:	2100      	movs	r1, #0
 800e230:	e430      	b.n	800da94 <_svfprintf_r+0x310>
 800e232:	0022      	movs	r2, r4
 800e234:	ca08      	ldmia	r2!, {r3}
 800e236:	0031      	movs	r1, r6
 800e238:	920d      	str	r2, [sp, #52]	; 0x34
 800e23a:	2210      	movs	r2, #16
 800e23c:	4011      	ands	r1, r2
 800e23e:	4216      	tst	r6, r2
 800e240:	d002      	beq.n	800e248 <_svfprintf_r+0xac4>
 800e242:	9306      	str	r3, [sp, #24]
 800e244:	9007      	str	r0, [sp, #28]
 800e246:	e7ec      	b.n	800e222 <_svfprintf_r+0xa9e>
 800e248:	2240      	movs	r2, #64	; 0x40
 800e24a:	0030      	movs	r0, r6
 800e24c:	4010      	ands	r0, r2
 800e24e:	4216      	tst	r6, r2
 800e250:	d003      	beq.n	800e25a <_svfprintf_r+0xad6>
 800e252:	b29b      	uxth	r3, r3
 800e254:	9306      	str	r3, [sp, #24]
 800e256:	9107      	str	r1, [sp, #28]
 800e258:	e7e3      	b.n	800e222 <_svfprintf_r+0xa9e>
 800e25a:	2280      	movs	r2, #128	; 0x80
 800e25c:	0031      	movs	r1, r6
 800e25e:	0092      	lsls	r2, r2, #2
 800e260:	4011      	ands	r1, r2
 800e262:	4216      	tst	r6, r2
 800e264:	d0f6      	beq.n	800e254 <_svfprintf_r+0xad0>
 800e266:	b2db      	uxtb	r3, r3
 800e268:	e7eb      	b.n	800e242 <_svfprintf_r+0xabe>
 800e26a:	0023      	movs	r3, r4
 800e26c:	cb04      	ldmia	r3!, {r2}
 800e26e:	49b7      	ldr	r1, [pc, #732]	; (800e54c <_svfprintf_r+0xdc8>)
 800e270:	9206      	str	r2, [sp, #24]
 800e272:	aa25      	add	r2, sp, #148	; 0x94
 800e274:	8011      	strh	r1, [r2, #0]
 800e276:	4ab6      	ldr	r2, [pc, #728]	; (800e550 <_svfprintf_r+0xdcc>)
 800e278:	930d      	str	r3, [sp, #52]	; 0x34
 800e27a:	2300      	movs	r3, #0
 800e27c:	921f      	str	r2, [sp, #124]	; 0x7c
 800e27e:	2278      	movs	r2, #120	; 0x78
 800e280:	9307      	str	r3, [sp, #28]
 800e282:	3302      	adds	r3, #2
 800e284:	431e      	orrs	r6, r3
 800e286:	920f      	str	r2, [sp, #60]	; 0x3c
 800e288:	e7ce      	b.n	800e228 <_svfprintf_r+0xaa4>
 800e28a:	0023      	movs	r3, r4
 800e28c:	cb04      	ldmia	r3!, {r2}
 800e28e:	2400      	movs	r4, #0
 800e290:	930d      	str	r3, [sp, #52]	; 0x34
 800e292:	231b      	movs	r3, #27
 800e294:	9208      	str	r2, [sp, #32]
 800e296:	aa1e      	add	r2, sp, #120	; 0x78
 800e298:	189b      	adds	r3, r3, r2
 800e29a:	701c      	strb	r4, [r3, #0]
 800e29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e29e:	3301      	adds	r3, #1
 800e2a0:	d00e      	beq.n	800e2c0 <_svfprintf_r+0xb3c>
 800e2a2:	0021      	movs	r1, r4
 800e2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2a6:	9808      	ldr	r0, [sp, #32]
 800e2a8:	f002 f83a 	bl	8010320 <memchr>
 800e2ac:	900c      	str	r0, [sp, #48]	; 0x30
 800e2ae:	42a0      	cmp	r0, r4
 800e2b0:	d100      	bne.n	800e2b4 <_svfprintf_r+0xb30>
 800e2b2:	e10d      	b.n	800e4d0 <_svfprintf_r+0xd4c>
 800e2b4:	9a08      	ldr	r2, [sp, #32]
 800e2b6:	1a83      	subs	r3, r0, r2
 800e2b8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ba:	0023      	movs	r3, r4
 800e2bc:	940c      	str	r4, [sp, #48]	; 0x30
 800e2be:	e44e      	b.n	800db5e <_svfprintf_r+0x3da>
 800e2c0:	9808      	ldr	r0, [sp, #32]
 800e2c2:	f7f1 ff1f 	bl	8000104 <strlen>
 800e2c6:	9009      	str	r0, [sp, #36]	; 0x24
 800e2c8:	e7f7      	b.n	800e2ba <_svfprintf_r+0xb36>
 800e2ca:	2310      	movs	r3, #16
 800e2cc:	431e      	orrs	r6, r3
 800e2ce:	2320      	movs	r3, #32
 800e2d0:	0030      	movs	r0, r6
 800e2d2:	4018      	ands	r0, r3
 800e2d4:	421e      	tst	r6, r3
 800e2d6:	d009      	beq.n	800e2ec <_svfprintf_r+0xb68>
 800e2d8:	3b19      	subs	r3, #25
 800e2da:	3407      	adds	r4, #7
 800e2dc:	439c      	bics	r4, r3
 800e2de:	0022      	movs	r2, r4
 800e2e0:	ca18      	ldmia	r2!, {r3, r4}
 800e2e2:	9306      	str	r3, [sp, #24]
 800e2e4:	9407      	str	r4, [sp, #28]
 800e2e6:	920d      	str	r2, [sp, #52]	; 0x34
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e79d      	b.n	800e228 <_svfprintf_r+0xaa4>
 800e2ec:	0023      	movs	r3, r4
 800e2ee:	cb04      	ldmia	r3!, {r2}
 800e2f0:	0031      	movs	r1, r6
 800e2f2:	930d      	str	r3, [sp, #52]	; 0x34
 800e2f4:	2310      	movs	r3, #16
 800e2f6:	4019      	ands	r1, r3
 800e2f8:	421e      	tst	r6, r3
 800e2fa:	d003      	beq.n	800e304 <_svfprintf_r+0xb80>
 800e2fc:	9206      	str	r2, [sp, #24]
 800e2fe:	9007      	str	r0, [sp, #28]
 800e300:	3b0f      	subs	r3, #15
 800e302:	e791      	b.n	800e228 <_svfprintf_r+0xaa4>
 800e304:	2340      	movs	r3, #64	; 0x40
 800e306:	0030      	movs	r0, r6
 800e308:	4018      	ands	r0, r3
 800e30a:	421e      	tst	r6, r3
 800e30c:	d003      	beq.n	800e316 <_svfprintf_r+0xb92>
 800e30e:	b293      	uxth	r3, r2
 800e310:	9306      	str	r3, [sp, #24]
 800e312:	9107      	str	r1, [sp, #28]
 800e314:	e7e8      	b.n	800e2e8 <_svfprintf_r+0xb64>
 800e316:	2380      	movs	r3, #128	; 0x80
 800e318:	0031      	movs	r1, r6
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4019      	ands	r1, r3
 800e31e:	421e      	tst	r6, r3
 800e320:	d003      	beq.n	800e32a <_svfprintf_r+0xba6>
 800e322:	b2d3      	uxtb	r3, r2
 800e324:	9306      	str	r3, [sp, #24]
 800e326:	9007      	str	r0, [sp, #28]
 800e328:	e7de      	b.n	800e2e8 <_svfprintf_r+0xb64>
 800e32a:	9206      	str	r2, [sp, #24]
 800e32c:	e7f1      	b.n	800e312 <_svfprintf_r+0xb8e>
 800e32e:	4b89      	ldr	r3, [pc, #548]	; (800e554 <_svfprintf_r+0xdd0>)
 800e330:	0030      	movs	r0, r6
 800e332:	931f      	str	r3, [sp, #124]	; 0x7c
 800e334:	2320      	movs	r3, #32
 800e336:	4018      	ands	r0, r3
 800e338:	421e      	tst	r6, r3
 800e33a:	d01a      	beq.n	800e372 <_svfprintf_r+0xbee>
 800e33c:	3b19      	subs	r3, #25
 800e33e:	3407      	adds	r4, #7
 800e340:	439c      	bics	r4, r3
 800e342:	0022      	movs	r2, r4
 800e344:	ca18      	ldmia	r2!, {r3, r4}
 800e346:	9306      	str	r3, [sp, #24]
 800e348:	9407      	str	r4, [sp, #28]
 800e34a:	920d      	str	r2, [sp, #52]	; 0x34
 800e34c:	07f3      	lsls	r3, r6, #31
 800e34e:	d50a      	bpl.n	800e366 <_svfprintf_r+0xbe2>
 800e350:	9b06      	ldr	r3, [sp, #24]
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	4313      	orrs	r3, r2
 800e356:	d006      	beq.n	800e366 <_svfprintf_r+0xbe2>
 800e358:	2230      	movs	r2, #48	; 0x30
 800e35a:	ab25      	add	r3, sp, #148	; 0x94
 800e35c:	701a      	strb	r2, [r3, #0]
 800e35e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e360:	705a      	strb	r2, [r3, #1]
 800e362:	2302      	movs	r3, #2
 800e364:	431e      	orrs	r6, r3
 800e366:	4b78      	ldr	r3, [pc, #480]	; (800e548 <_svfprintf_r+0xdc4>)
 800e368:	401e      	ands	r6, r3
 800e36a:	2302      	movs	r3, #2
 800e36c:	e75c      	b.n	800e228 <_svfprintf_r+0xaa4>
 800e36e:	4b78      	ldr	r3, [pc, #480]	; (800e550 <_svfprintf_r+0xdcc>)
 800e370:	e7de      	b.n	800e330 <_svfprintf_r+0xbac>
 800e372:	0023      	movs	r3, r4
 800e374:	cb04      	ldmia	r3!, {r2}
 800e376:	0031      	movs	r1, r6
 800e378:	930d      	str	r3, [sp, #52]	; 0x34
 800e37a:	2310      	movs	r3, #16
 800e37c:	4019      	ands	r1, r3
 800e37e:	421e      	tst	r6, r3
 800e380:	d002      	beq.n	800e388 <_svfprintf_r+0xc04>
 800e382:	9206      	str	r2, [sp, #24]
 800e384:	9007      	str	r0, [sp, #28]
 800e386:	e7e1      	b.n	800e34c <_svfprintf_r+0xbc8>
 800e388:	2340      	movs	r3, #64	; 0x40
 800e38a:	0030      	movs	r0, r6
 800e38c:	4018      	ands	r0, r3
 800e38e:	421e      	tst	r6, r3
 800e390:	d003      	beq.n	800e39a <_svfprintf_r+0xc16>
 800e392:	b293      	uxth	r3, r2
 800e394:	9306      	str	r3, [sp, #24]
 800e396:	9107      	str	r1, [sp, #28]
 800e398:	e7d8      	b.n	800e34c <_svfprintf_r+0xbc8>
 800e39a:	2380      	movs	r3, #128	; 0x80
 800e39c:	0031      	movs	r1, r6
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4019      	ands	r1, r3
 800e3a2:	421e      	tst	r6, r3
 800e3a4:	d002      	beq.n	800e3ac <_svfprintf_r+0xc28>
 800e3a6:	b2d3      	uxtb	r3, r2
 800e3a8:	9306      	str	r3, [sp, #24]
 800e3aa:	e7eb      	b.n	800e384 <_svfprintf_r+0xc00>
 800e3ac:	9206      	str	r2, [sp, #24]
 800e3ae:	e7f2      	b.n	800e396 <_svfprintf_r+0xc12>
 800e3b0:	9b07      	ldr	r3, [sp, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d10a      	bne.n	800e3cc <_svfprintf_r+0xc48>
 800e3b6:	9b06      	ldr	r3, [sp, #24]
 800e3b8:	2b09      	cmp	r3, #9
 800e3ba:	d807      	bhi.n	800e3cc <_svfprintf_r+0xc48>
 800e3bc:	23e7      	movs	r3, #231	; 0xe7
 800e3be:	aa1e      	add	r2, sp, #120	; 0x78
 800e3c0:	189b      	adds	r3, r3, r2
 800e3c2:	9a06      	ldr	r2, [sp, #24]
 800e3c4:	3230      	adds	r2, #48	; 0x30
 800e3c6:	701a      	strb	r2, [r3, #0]
 800e3c8:	f000 fc18 	bl	800ebfc <_svfprintf_r+0x1478>
 800e3cc:	2680      	movs	r6, #128	; 0x80
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	00f6      	lsls	r6, r6, #3
 800e3d2:	930e      	str	r3, [sp, #56]	; 0x38
 800e3d4:	ad58      	add	r5, sp, #352	; 0x160
 800e3d6:	4026      	ands	r6, r4
 800e3d8:	220a      	movs	r2, #10
 800e3da:	9806      	ldr	r0, [sp, #24]
 800e3dc:	9907      	ldr	r1, [sp, #28]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f7f2 f860 	bl	80004a4 <__aeabi_uldivmod>
 800e3e4:	1e6b      	subs	r3, r5, #1
 800e3e6:	3230      	adds	r2, #48	; 0x30
 800e3e8:	9308      	str	r3, [sp, #32]
 800e3ea:	701a      	strb	r2, [r3, #0]
 800e3ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3ee:	900c      	str	r0, [sp, #48]	; 0x30
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	9110      	str	r1, [sp, #64]	; 0x40
 800e3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3f6:	2e00      	cmp	r6, #0
 800e3f8:	d01d      	beq.n	800e436 <_svfprintf_r+0xcb2>
 800e3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e3fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d118      	bne.n	800e436 <_svfprintf_r+0xcb2>
 800e404:	2aff      	cmp	r2, #255	; 0xff
 800e406:	d016      	beq.n	800e436 <_svfprintf_r+0xcb2>
 800e408:	9b07      	ldr	r3, [sp, #28]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d102      	bne.n	800e414 <_svfprintf_r+0xc90>
 800e40e:	9b06      	ldr	r3, [sp, #24]
 800e410:	2b09      	cmp	r3, #9
 800e412:	d910      	bls.n	800e436 <_svfprintf_r+0xcb2>
 800e414:	9b08      	ldr	r3, [sp, #32]
 800e416:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e418:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e41a:	1a9b      	subs	r3, r3, r2
 800e41c:	0018      	movs	r0, r3
 800e41e:	9308      	str	r3, [sp, #32]
 800e420:	f7fd ff97 	bl	800c352 <strncpy>
 800e424:	2200      	movs	r2, #0
 800e426:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e428:	920e      	str	r2, [sp, #56]	; 0x38
 800e42a:	785b      	ldrb	r3, [r3, #1]
 800e42c:	1e5a      	subs	r2, r3, #1
 800e42e:	4193      	sbcs	r3, r2
 800e430:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e432:	18d3      	adds	r3, r2, r3
 800e434:	9312      	str	r3, [sp, #72]	; 0x48
 800e436:	9b07      	ldr	r3, [sp, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10f      	bne.n	800e45c <_svfprintf_r+0xcd8>
 800e43c:	9b06      	ldr	r3, [sp, #24]
 800e43e:	2b09      	cmp	r3, #9
 800e440:	d80c      	bhi.n	800e45c <_svfprintf_r+0xcd8>
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	9a08      	ldr	r2, [sp, #32]
 800e446:	9319      	str	r3, [sp, #100]	; 0x64
 800e448:	ab58      	add	r3, sp, #352	; 0x160
 800e44a:	1a9b      	subs	r3, r3, r2
 800e44c:	9309      	str	r3, [sp, #36]	; 0x24
 800e44e:	2300      	movs	r3, #0
 800e450:	0026      	movs	r6, r4
 800e452:	930c      	str	r3, [sp, #48]	; 0x30
 800e454:	001d      	movs	r5, r3
 800e456:	9310      	str	r3, [sp, #64]	; 0x40
 800e458:	9311      	str	r3, [sp, #68]	; 0x44
 800e45a:	e4f2      	b.n	800de42 <_svfprintf_r+0x6be>
 800e45c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e45e:	9d08      	ldr	r5, [sp, #32]
 800e460:	9306      	str	r3, [sp, #24]
 800e462:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e464:	9307      	str	r3, [sp, #28]
 800e466:	e7b7      	b.n	800e3d8 <_svfprintf_r+0xc54>
 800e468:	200f      	movs	r0, #15
 800e46a:	ab58      	add	r3, sp, #352	; 0x160
 800e46c:	9308      	str	r3, [sp, #32]
 800e46e:	9b08      	ldr	r3, [sp, #32]
 800e470:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e472:	3b01      	subs	r3, #1
 800e474:	9308      	str	r3, [sp, #32]
 800e476:	9b06      	ldr	r3, [sp, #24]
 800e478:	4003      	ands	r3, r0
 800e47a:	5cd3      	ldrb	r3, [r2, r3]
 800e47c:	9a08      	ldr	r2, [sp, #32]
 800e47e:	7013      	strb	r3, [r2, #0]
 800e480:	9b07      	ldr	r3, [sp, #28]
 800e482:	0719      	lsls	r1, r3, #28
 800e484:	9b06      	ldr	r3, [sp, #24]
 800e486:	091a      	lsrs	r2, r3, #4
 800e488:	9b07      	ldr	r3, [sp, #28]
 800e48a:	4311      	orrs	r1, r2
 800e48c:	091b      	lsrs	r3, r3, #4
 800e48e:	9307      	str	r3, [sp, #28]
 800e490:	000b      	movs	r3, r1
 800e492:	9a07      	ldr	r2, [sp, #28]
 800e494:	9106      	str	r1, [sp, #24]
 800e496:	4313      	orrs	r3, r2
 800e498:	d1e9      	bne.n	800e46e <_svfprintf_r+0xcea>
 800e49a:	e7d2      	b.n	800e442 <_svfprintf_r+0xcbe>
 800e49c:	aa58      	add	r2, sp, #352	; 0x160
 800e49e:	9208      	str	r2, [sp, #32]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d1ce      	bne.n	800e442 <_svfprintf_r+0xcbe>
 800e4a4:	07f6      	lsls	r6, r6, #31
 800e4a6:	d5cc      	bpl.n	800e442 <_svfprintf_r+0xcbe>
 800e4a8:	aa1e      	add	r2, sp, #120	; 0x78
 800e4aa:	33e7      	adds	r3, #231	; 0xe7
 800e4ac:	189b      	adds	r3, r3, r2
 800e4ae:	2230      	movs	r2, #48	; 0x30
 800e4b0:	e789      	b.n	800e3c6 <_svfprintf_r+0xc42>
 800e4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d100      	bne.n	800e4ba <_svfprintf_r+0xd36>
 800e4b8:	e364      	b.n	800eb84 <_svfprintf_r+0x1400>
 800e4ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4bc:	211b      	movs	r1, #27
 800e4be:	ab3f      	add	r3, sp, #252	; 0xfc
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	a81e      	add	r0, sp, #120	; 0x78
 800e4c6:	1809      	adds	r1, r1, r0
 800e4c8:	700a      	strb	r2, [r1, #0]
 800e4ca:	940d      	str	r4, [sp, #52]	; 0x34
 800e4cc:	f7ff fabd 	bl	800da4a <_svfprintf_r+0x2c6>
 800e4d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4d2:	f7ff fb44 	bl	800db5e <_svfprintf_r+0x3da>
 800e4d6:	2010      	movs	r0, #16
 800e4d8:	1812      	adds	r2, r2, r0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4de:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4e0:	2b07      	cmp	r3, #7
 800e4e2:	dd08      	ble.n	800e4f6 <_svfprintf_r+0xd72>
 800e4e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4e8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ea:	f003 f9db 	bl	80118a4 <__ssprint_r>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d000      	beq.n	800e4f4 <_svfprintf_r+0xd70>
 800e4f2:	e326      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e4f4:	a92f      	add	r1, sp, #188	; 0xbc
 800e4f6:	000f      	movs	r7, r1
 800e4f8:	3c10      	subs	r4, #16
 800e4fa:	e4c5      	b.n	800de88 <_svfprintf_r+0x704>
 800e4fc:	2010      	movs	r0, #16
 800e4fe:	1812      	adds	r2, r2, r0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	922e      	str	r2, [sp, #184]	; 0xb8
 800e504:	932d      	str	r3, [sp, #180]	; 0xb4
 800e506:	2b07      	cmp	r3, #7
 800e508:	dd08      	ble.n	800e51c <_svfprintf_r+0xd98>
 800e50a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e50c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e50e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e510:	f003 f9c8 	bl	80118a4 <__ssprint_r>
 800e514:	2800      	cmp	r0, #0
 800e516:	d000      	beq.n	800e51a <_svfprintf_r+0xd96>
 800e518:	e313      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e51a:	a92f      	add	r1, sp, #188	; 0xbc
 800e51c:	000f      	movs	r7, r1
 800e51e:	3c10      	subs	r4, #16
 800e520:	e50b      	b.n	800df3a <_svfprintf_r+0x7b6>
 800e522:	2010      	movs	r0, #16
 800e524:	1812      	adds	r2, r2, r0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	922e      	str	r2, [sp, #184]	; 0xb8
 800e52a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e52c:	2b07      	cmp	r3, #7
 800e52e:	dd08      	ble.n	800e542 <_svfprintf_r+0xdbe>
 800e530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e532:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e534:	aa2c      	add	r2, sp, #176	; 0xb0
 800e536:	f003 f9b5 	bl	80118a4 <__ssprint_r>
 800e53a:	2800      	cmp	r0, #0
 800e53c:	d000      	beq.n	800e540 <_svfprintf_r+0xdbc>
 800e53e:	e300      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e540:	a92f      	add	r1, sp, #188	; 0xbc
 800e542:	000f      	movs	r7, r1
 800e544:	3c10      	subs	r4, #16
 800e546:	e518      	b.n	800df7a <_svfprintf_r+0x7f6>
 800e548:	fffffbff 	.word	0xfffffbff
 800e54c:	00007830 	.word	0x00007830
 800e550:	08014d64 	.word	0x08014d64
 800e554:	08014d75 	.word	0x08014d75
 800e558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e55a:	2b65      	cmp	r3, #101	; 0x65
 800e55c:	dc00      	bgt.n	800e560 <_svfprintf_r+0xddc>
 800e55e:	e241      	b.n	800e9e4 <_svfprintf_r+0x1260>
 800e560:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e562:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	f7f1 ff6e 	bl	8000448 <__aeabi_dcmpeq>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d077      	beq.n	800e660 <_svfprintf_r+0xedc>
 800e570:	4bca      	ldr	r3, [pc, #808]	; (800e89c <_svfprintf_r+0x1118>)
 800e572:	603b      	str	r3, [r7, #0]
 800e574:	2301      	movs	r3, #1
 800e576:	607b      	str	r3, [r7, #4]
 800e578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e57a:	3708      	adds	r7, #8
 800e57c:	3301      	adds	r3, #1
 800e57e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e580:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e582:	3301      	adds	r3, #1
 800e584:	932d      	str	r3, [sp, #180]	; 0xb4
 800e586:	2b07      	cmp	r3, #7
 800e588:	dd08      	ble.n	800e59c <_svfprintf_r+0xe18>
 800e58a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e58c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e58e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e590:	f003 f988 	bl	80118a4 <__ssprint_r>
 800e594:	2800      	cmp	r0, #0
 800e596:	d000      	beq.n	800e59a <_svfprintf_r+0xe16>
 800e598:	e2d3      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e59a:	af2f      	add	r7, sp, #188	; 0xbc
 800e59c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e59e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	db01      	blt.n	800e5a8 <_svfprintf_r+0xe24>
 800e5a4:	07f3      	lsls	r3, r6, #31
 800e5a6:	d51b      	bpl.n	800e5e0 <_svfprintf_r+0xe5c>
 800e5a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e5aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e5ac:	603b      	str	r3, [r7, #0]
 800e5ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5b0:	607b      	str	r3, [r7, #4]
 800e5b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	189b      	adds	r3, r3, r2
 800e5b8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5bc:	3301      	adds	r3, #1
 800e5be:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5c0:	2b07      	cmp	r3, #7
 800e5c2:	dd08      	ble.n	800e5d6 <_svfprintf_r+0xe52>
 800e5c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5ca:	f003 f96b 	bl	80118a4 <__ssprint_r>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d000      	beq.n	800e5d4 <_svfprintf_r+0xe50>
 800e5d2:	e2b6      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e5d4:	af2f      	add	r7, sp, #188	; 0xbc
 800e5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5d8:	2510      	movs	r5, #16
 800e5da:	1e5c      	subs	r4, r3, #1
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	dc2e      	bgt.n	800e63e <_svfprintf_r+0xeba>
 800e5e0:	0776      	lsls	r6, r6, #29
 800e5e2:	d500      	bpl.n	800e5e6 <_svfprintf_r+0xe62>
 800e5e4:	e290      	b.n	800eb08 <_svfprintf_r+0x1384>
 800e5e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e5e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	da00      	bge.n	800e5f0 <_svfprintf_r+0xe6c>
 800e5ee:	0013      	movs	r3, r2
 800e5f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e5f2:	18d3      	adds	r3, r2, r3
 800e5f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800e5f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d007      	beq.n	800e60c <_svfprintf_r+0xe88>
 800e5fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e600:	aa2c      	add	r2, sp, #176	; 0xb0
 800e602:	f003 f94f 	bl	80118a4 <__ssprint_r>
 800e606:	2800      	cmp	r0, #0
 800e608:	d000      	beq.n	800e60c <_svfprintf_r+0xe88>
 800e60a:	e29a      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e60c:	2300      	movs	r3, #0
 800e60e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e612:	2b00      	cmp	r3, #0
 800e614:	d000      	beq.n	800e618 <_svfprintf_r+0xe94>
 800e616:	e2b0      	b.n	800eb7a <_svfprintf_r+0x13f6>
 800e618:	af2f      	add	r7, sp, #188	; 0xbc
 800e61a:	e5dc      	b.n	800e1d6 <_svfprintf_r+0xa52>
 800e61c:	3210      	adds	r2, #16
 800e61e:	607d      	str	r5, [r7, #4]
 800e620:	922e      	str	r2, [sp, #184]	; 0xb8
 800e622:	932d      	str	r3, [sp, #180]	; 0xb4
 800e624:	2b07      	cmp	r3, #7
 800e626:	dd08      	ble.n	800e63a <_svfprintf_r+0xeb6>
 800e628:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e62a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e62c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e62e:	f003 f939 	bl	80118a4 <__ssprint_r>
 800e632:	2800      	cmp	r0, #0
 800e634:	d000      	beq.n	800e638 <_svfprintf_r+0xeb4>
 800e636:	e284      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e638:	a92f      	add	r1, sp, #188	; 0xbc
 800e63a:	000f      	movs	r7, r1
 800e63c:	3c10      	subs	r4, #16
 800e63e:	0039      	movs	r1, r7
 800e640:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e642:	4897      	ldr	r0, [pc, #604]	; (800e8a0 <_svfprintf_r+0x111c>)
 800e644:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e646:	3301      	adds	r3, #1
 800e648:	3108      	adds	r1, #8
 800e64a:	6038      	str	r0, [r7, #0]
 800e64c:	2c10      	cmp	r4, #16
 800e64e:	dce5      	bgt.n	800e61c <_svfprintf_r+0xe98>
 800e650:	607c      	str	r4, [r7, #4]
 800e652:	18a4      	adds	r4, r4, r2
 800e654:	942e      	str	r4, [sp, #184]	; 0xb8
 800e656:	000f      	movs	r7, r1
 800e658:	932d      	str	r3, [sp, #180]	; 0xb4
 800e65a:	2b07      	cmp	r3, #7
 800e65c:	ddc0      	ble.n	800e5e0 <_svfprintf_r+0xe5c>
 800e65e:	e05f      	b.n	800e720 <_svfprintf_r+0xf9c>
 800e660:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e662:	2b00      	cmp	r3, #0
 800e664:	dc78      	bgt.n	800e758 <_svfprintf_r+0xfd4>
 800e666:	4b8d      	ldr	r3, [pc, #564]	; (800e89c <_svfprintf_r+0x1118>)
 800e668:	603b      	str	r3, [r7, #0]
 800e66a:	2301      	movs	r3, #1
 800e66c:	607b      	str	r3, [r7, #4]
 800e66e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e670:	3708      	adds	r7, #8
 800e672:	3301      	adds	r3, #1
 800e674:	932e      	str	r3, [sp, #184]	; 0xb8
 800e676:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e678:	3301      	adds	r3, #1
 800e67a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e67c:	2b07      	cmp	r3, #7
 800e67e:	dd08      	ble.n	800e692 <_svfprintf_r+0xf0e>
 800e680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e682:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e684:	aa2c      	add	r2, sp, #176	; 0xb0
 800e686:	f003 f90d 	bl	80118a4 <__ssprint_r>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d000      	beq.n	800e690 <_svfprintf_r+0xf0c>
 800e68e:	e258      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e690:	af2f      	add	r7, sp, #188	; 0xbc
 800e692:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e694:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e696:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e698:	430b      	orrs	r3, r1
 800e69a:	2101      	movs	r1, #1
 800e69c:	4031      	ands	r1, r6
 800e69e:	430b      	orrs	r3, r1
 800e6a0:	d09e      	beq.n	800e5e0 <_svfprintf_r+0xe5c>
 800e6a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e6a4:	603b      	str	r3, [r7, #0]
 800e6a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e6a8:	607b      	str	r3, [r7, #4]
 800e6aa:	189a      	adds	r2, r3, r2
 800e6ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6ae:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	2b07      	cmp	r3, #7
 800e6b8:	dd08      	ble.n	800e6cc <_svfprintf_r+0xf48>
 800e6ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6be:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6c0:	f003 f8f0 	bl	80118a4 <__ssprint_r>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d000      	beq.n	800e6ca <_svfprintf_r+0xf46>
 800e6c8:	e23b      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e6ca:	af2f      	add	r7, sp, #188	; 0xbc
 800e6cc:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e6ce:	2c00      	cmp	r4, #0
 800e6d0:	da19      	bge.n	800e706 <_svfprintf_r+0xf82>
 800e6d2:	0038      	movs	r0, r7
 800e6d4:	2510      	movs	r5, #16
 800e6d6:	4264      	negs	r4, r4
 800e6d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e6da:	4a71      	ldr	r2, [pc, #452]	; (800e8a0 <_svfprintf_r+0x111c>)
 800e6dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6de:	3101      	adds	r1, #1
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	6002      	str	r2, [r0, #0]
 800e6e4:	2c10      	cmp	r4, #16
 800e6e6:	dc25      	bgt.n	800e734 <_svfprintf_r+0xfb0>
 800e6e8:	6044      	str	r4, [r0, #4]
 800e6ea:	18e4      	adds	r4, r4, r3
 800e6ec:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6ee:	912d      	str	r1, [sp, #180]	; 0xb4
 800e6f0:	2907      	cmp	r1, #7
 800e6f2:	dd08      	ble.n	800e706 <_svfprintf_r+0xf82>
 800e6f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6f8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6fa:	f003 f8d3 	bl	80118a4 <__ssprint_r>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d000      	beq.n	800e704 <_svfprintf_r+0xf80>
 800e702:	e21e      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e704:	af2f      	add	r7, sp, #188	; 0xbc
 800e706:	9b08      	ldr	r3, [sp, #32]
 800e708:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e70e:	18d2      	adds	r2, r2, r3
 800e710:	922e      	str	r2, [sp, #184]	; 0xb8
 800e712:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	3201      	adds	r2, #1
 800e718:	922d      	str	r2, [sp, #180]	; 0xb4
 800e71a:	2a07      	cmp	r2, #7
 800e71c:	dc00      	bgt.n	800e720 <_svfprintf_r+0xf9c>
 800e71e:	e45b      	b.n	800dfd8 <_svfprintf_r+0x854>
 800e720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e722:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e724:	aa2c      	add	r2, sp, #176	; 0xb0
 800e726:	f003 f8bd 	bl	80118a4 <__ssprint_r>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d000      	beq.n	800e730 <_svfprintf_r+0xfac>
 800e72e:	e208      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e730:	af2f      	add	r7, sp, #188	; 0xbc
 800e732:	e755      	b.n	800e5e0 <_svfprintf_r+0xe5c>
 800e734:	3310      	adds	r3, #16
 800e736:	6045      	str	r5, [r0, #4]
 800e738:	932e      	str	r3, [sp, #184]	; 0xb8
 800e73a:	912d      	str	r1, [sp, #180]	; 0xb4
 800e73c:	2907      	cmp	r1, #7
 800e73e:	dd08      	ble.n	800e752 <_svfprintf_r+0xfce>
 800e740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e742:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e744:	aa2c      	add	r2, sp, #176	; 0xb0
 800e746:	f003 f8ad 	bl	80118a4 <__ssprint_r>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d000      	beq.n	800e750 <_svfprintf_r+0xfcc>
 800e74e:	e1f8      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e750:	af2f      	add	r7, sp, #188	; 0xbc
 800e752:	0038      	movs	r0, r7
 800e754:	3c10      	subs	r4, #16
 800e756:	e7bf      	b.n	800e6d8 <_svfprintf_r+0xf54>
 800e758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e75a:	002c      	movs	r4, r5
 800e75c:	429d      	cmp	r5, r3
 800e75e:	dd00      	ble.n	800e762 <_svfprintf_r+0xfde>
 800e760:	001c      	movs	r4, r3
 800e762:	2c00      	cmp	r4, #0
 800e764:	dd14      	ble.n	800e790 <_svfprintf_r+0x100c>
 800e766:	9b08      	ldr	r3, [sp, #32]
 800e768:	607c      	str	r4, [r7, #4]
 800e76a:	603b      	str	r3, [r7, #0]
 800e76c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e76e:	3708      	adds	r7, #8
 800e770:	18e3      	adds	r3, r4, r3
 800e772:	932e      	str	r3, [sp, #184]	; 0xb8
 800e774:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e776:	3301      	adds	r3, #1
 800e778:	932d      	str	r3, [sp, #180]	; 0xb4
 800e77a:	2b07      	cmp	r3, #7
 800e77c:	dd08      	ble.n	800e790 <_svfprintf_r+0x100c>
 800e77e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e780:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e782:	aa2c      	add	r2, sp, #176	; 0xb0
 800e784:	f003 f88e 	bl	80118a4 <__ssprint_r>
 800e788:	2800      	cmp	r0, #0
 800e78a:	d000      	beq.n	800e78e <_svfprintf_r+0x100a>
 800e78c:	e1d9      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e78e:	af2f      	add	r7, sp, #188	; 0xbc
 800e790:	43e3      	mvns	r3, r4
 800e792:	17db      	asrs	r3, r3, #31
 800e794:	401c      	ands	r4, r3
 800e796:	1b2c      	subs	r4, r5, r4
 800e798:	2c00      	cmp	r4, #0
 800e79a:	dd18      	ble.n	800e7ce <_svfprintf_r+0x104a>
 800e79c:	0039      	movs	r1, r7
 800e79e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e7a0:	483f      	ldr	r0, [pc, #252]	; (800e8a0 <_svfprintf_r+0x111c>)
 800e7a2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	3108      	adds	r1, #8
 800e7a8:	6038      	str	r0, [r7, #0]
 800e7aa:	2c10      	cmp	r4, #16
 800e7ac:	dc7a      	bgt.n	800e8a4 <_svfprintf_r+0x1120>
 800e7ae:	607c      	str	r4, [r7, #4]
 800e7b0:	18a4      	adds	r4, r4, r2
 800e7b2:	000f      	movs	r7, r1
 800e7b4:	942e      	str	r4, [sp, #184]	; 0xb8
 800e7b6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e7b8:	2b07      	cmp	r3, #7
 800e7ba:	dd08      	ble.n	800e7ce <_svfprintf_r+0x104a>
 800e7bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7c2:	f003 f86f 	bl	80118a4 <__ssprint_r>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d000      	beq.n	800e7cc <_svfprintf_r+0x1048>
 800e7ca:	e1ba      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e7cc:	af2f      	add	r7, sp, #188	; 0xbc
 800e7ce:	9b08      	ldr	r3, [sp, #32]
 800e7d0:	195d      	adds	r5, r3, r5
 800e7d2:	0573      	lsls	r3, r6, #21
 800e7d4:	d50b      	bpl.n	800e7ee <_svfprintf_r+0x106a>
 800e7d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d176      	bne.n	800e8ca <_svfprintf_r+0x1146>
 800e7dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d176      	bne.n	800e8d0 <_svfprintf_r+0x114c>
 800e7e2:	9b08      	ldr	r3, [sp, #32]
 800e7e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7e6:	189b      	adds	r3, r3, r2
 800e7e8:	429d      	cmp	r5, r3
 800e7ea:	d900      	bls.n	800e7ee <_svfprintf_r+0x106a>
 800e7ec:	001d      	movs	r5, r3
 800e7ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	db01      	blt.n	800e7fa <_svfprintf_r+0x1076>
 800e7f6:	07f3      	lsls	r3, r6, #31
 800e7f8:	d516      	bpl.n	800e828 <_svfprintf_r+0x10a4>
 800e7fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e7fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e7fe:	603b      	str	r3, [r7, #0]
 800e800:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e802:	607b      	str	r3, [r7, #4]
 800e804:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e806:	3708      	adds	r7, #8
 800e808:	189b      	adds	r3, r3, r2
 800e80a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e80c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e80e:	3301      	adds	r3, #1
 800e810:	932d      	str	r3, [sp, #180]	; 0xb4
 800e812:	2b07      	cmp	r3, #7
 800e814:	dd08      	ble.n	800e828 <_svfprintf_r+0x10a4>
 800e816:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e818:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e81a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e81c:	f003 f842 	bl	80118a4 <__ssprint_r>
 800e820:	2800      	cmp	r0, #0
 800e822:	d000      	beq.n	800e826 <_svfprintf_r+0x10a2>
 800e824:	e18d      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e826:	af2f      	add	r7, sp, #188	; 0xbc
 800e828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e82a:	9b08      	ldr	r3, [sp, #32]
 800e82c:	4694      	mov	ip, r2
 800e82e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e830:	4463      	add	r3, ip
 800e832:	1b5b      	subs	r3, r3, r5
 800e834:	1b14      	subs	r4, r2, r4
 800e836:	429c      	cmp	r4, r3
 800e838:	dd00      	ble.n	800e83c <_svfprintf_r+0x10b8>
 800e83a:	001c      	movs	r4, r3
 800e83c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e83e:	2c00      	cmp	r4, #0
 800e840:	dd12      	ble.n	800e868 <_svfprintf_r+0x10e4>
 800e842:	18e3      	adds	r3, r4, r3
 800e844:	932e      	str	r3, [sp, #184]	; 0xb8
 800e846:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e848:	603d      	str	r5, [r7, #0]
 800e84a:	3301      	adds	r3, #1
 800e84c:	607c      	str	r4, [r7, #4]
 800e84e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e850:	3708      	adds	r7, #8
 800e852:	2b07      	cmp	r3, #7
 800e854:	dd08      	ble.n	800e868 <_svfprintf_r+0x10e4>
 800e856:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e858:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e85a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e85c:	f003 f822 	bl	80118a4 <__ssprint_r>
 800e860:	2800      	cmp	r0, #0
 800e862:	d000      	beq.n	800e866 <_svfprintf_r+0x10e2>
 800e864:	e16d      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e866:	af2f      	add	r7, sp, #188	; 0xbc
 800e868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e86a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e86c:	2510      	movs	r5, #16
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	43e2      	mvns	r2, r4
 800e872:	17d2      	asrs	r2, r2, #31
 800e874:	4014      	ands	r4, r2
 800e876:	1b1c      	subs	r4, r3, r4
 800e878:	2c00      	cmp	r4, #0
 800e87a:	dc00      	bgt.n	800e87e <_svfprintf_r+0x10fa>
 800e87c:	e6b0      	b.n	800e5e0 <_svfprintf_r+0xe5c>
 800e87e:	0039      	movs	r1, r7
 800e880:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e882:	4807      	ldr	r0, [pc, #28]	; (800e8a0 <_svfprintf_r+0x111c>)
 800e884:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e886:	3301      	adds	r3, #1
 800e888:	3108      	adds	r1, #8
 800e88a:	6038      	str	r0, [r7, #0]
 800e88c:	2c10      	cmp	r4, #16
 800e88e:	dd00      	ble.n	800e892 <_svfprintf_r+0x110e>
 800e890:	e096      	b.n	800e9c0 <_svfprintf_r+0x123c>
 800e892:	1912      	adds	r2, r2, r4
 800e894:	607c      	str	r4, [r7, #4]
 800e896:	922e      	str	r2, [sp, #184]	; 0xb8
 800e898:	e6dd      	b.n	800e656 <_svfprintf_r+0xed2>
 800e89a:	46c0      	nop			; (mov r8, r8)
 800e89c:	08014d86 	.word	0x08014d86
 800e8a0:	08014d98 	.word	0x08014d98
 800e8a4:	2010      	movs	r0, #16
 800e8a6:	1812      	adds	r2, r2, r0
 800e8a8:	6078      	str	r0, [r7, #4]
 800e8aa:	922e      	str	r2, [sp, #184]	; 0xb8
 800e8ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8ae:	2b07      	cmp	r3, #7
 800e8b0:	dd08      	ble.n	800e8c4 <_svfprintf_r+0x1140>
 800e8b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8b8:	f002 fff4 	bl	80118a4 <__ssprint_r>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d000      	beq.n	800e8c2 <_svfprintf_r+0x113e>
 800e8c0:	e13f      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e8c2:	a92f      	add	r1, sp, #188	; 0xbc
 800e8c4:	000f      	movs	r7, r1
 800e8c6:	3c10      	subs	r4, #16
 800e8c8:	e768      	b.n	800e79c <_svfprintf_r+0x1018>
 800e8ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d05d      	beq.n	800e98c <_svfprintf_r+0x1208>
 800e8d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8d2:	3b01      	subs	r3, #1
 800e8d4:	9310      	str	r3, [sp, #64]	; 0x40
 800e8d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e8d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8da:	603b      	str	r3, [r7, #0]
 800e8dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8de:	607b      	str	r3, [r7, #4]
 800e8e0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	189b      	adds	r3, r3, r2
 800e8e6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8ee:	2b07      	cmp	r3, #7
 800e8f0:	dd08      	ble.n	800e904 <_svfprintf_r+0x1180>
 800e8f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8f8:	f002 ffd4 	bl	80118a4 <__ssprint_r>
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	d000      	beq.n	800e902 <_svfprintf_r+0x117e>
 800e900:	e11f      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e902:	af2f      	add	r7, sp, #188	; 0xbc
 800e904:	9b08      	ldr	r3, [sp, #32]
 800e906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e908:	189c      	adds	r4, r3, r2
 800e90a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e90c:	1b64      	subs	r4, r4, r5
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	429c      	cmp	r4, r3
 800e912:	dd00      	ble.n	800e916 <_svfprintf_r+0x1192>
 800e914:	001c      	movs	r4, r3
 800e916:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e918:	2c00      	cmp	r4, #0
 800e91a:	dd12      	ble.n	800e942 <_svfprintf_r+0x11be>
 800e91c:	18e3      	adds	r3, r4, r3
 800e91e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e920:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e922:	603d      	str	r5, [r7, #0]
 800e924:	3301      	adds	r3, #1
 800e926:	607c      	str	r4, [r7, #4]
 800e928:	932d      	str	r3, [sp, #180]	; 0xb4
 800e92a:	3708      	adds	r7, #8
 800e92c:	2b07      	cmp	r3, #7
 800e92e:	dd08      	ble.n	800e942 <_svfprintf_r+0x11be>
 800e930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e932:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e934:	aa2c      	add	r2, sp, #176	; 0xb0
 800e936:	f002 ffb5 	bl	80118a4 <__ssprint_r>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d000      	beq.n	800e940 <_svfprintf_r+0x11bc>
 800e93e:	e100      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e940:	af2f      	add	r7, sp, #188	; 0xbc
 800e942:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e944:	781a      	ldrb	r2, [r3, #0]
 800e946:	43e3      	mvns	r3, r4
 800e948:	17db      	asrs	r3, r3, #31
 800e94a:	401c      	ands	r4, r3
 800e94c:	1b14      	subs	r4, r2, r4
 800e94e:	2c00      	cmp	r4, #0
 800e950:	dd18      	ble.n	800e984 <_svfprintf_r+0x1200>
 800e952:	0039      	movs	r1, r7
 800e954:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e956:	48aa      	ldr	r0, [pc, #680]	; (800ec00 <_svfprintf_r+0x147c>)
 800e958:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e95a:	3301      	adds	r3, #1
 800e95c:	3108      	adds	r1, #8
 800e95e:	6038      	str	r0, [r7, #0]
 800e960:	2c10      	cmp	r4, #16
 800e962:	dc1a      	bgt.n	800e99a <_svfprintf_r+0x1216>
 800e964:	1912      	adds	r2, r2, r4
 800e966:	607c      	str	r4, [r7, #4]
 800e968:	922e      	str	r2, [sp, #184]	; 0xb8
 800e96a:	000f      	movs	r7, r1
 800e96c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e96e:	2b07      	cmp	r3, #7
 800e970:	dd08      	ble.n	800e984 <_svfprintf_r+0x1200>
 800e972:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e974:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e976:	aa2c      	add	r2, sp, #176	; 0xb0
 800e978:	f002 ff94 	bl	80118a4 <__ssprint_r>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d000      	beq.n	800e982 <_svfprintf_r+0x11fe>
 800e980:	e0df      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e982:	af2f      	add	r7, sp, #188	; 0xbc
 800e984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	18ed      	adds	r5, r5, r3
 800e98a:	e724      	b.n	800e7d6 <_svfprintf_r+0x1052>
 800e98c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e98e:	3b01      	subs	r3, #1
 800e990:	9312      	str	r3, [sp, #72]	; 0x48
 800e992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e994:	3b01      	subs	r3, #1
 800e996:	9311      	str	r3, [sp, #68]	; 0x44
 800e998:	e79d      	b.n	800e8d6 <_svfprintf_r+0x1152>
 800e99a:	2010      	movs	r0, #16
 800e99c:	1812      	adds	r2, r2, r0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9a4:	2b07      	cmp	r3, #7
 800e9a6:	dd08      	ble.n	800e9ba <_svfprintf_r+0x1236>
 800e9a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9ae:	f002 ff79 	bl	80118a4 <__ssprint_r>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d000      	beq.n	800e9b8 <_svfprintf_r+0x1234>
 800e9b6:	e0c4      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e9b8:	a92f      	add	r1, sp, #188	; 0xbc
 800e9ba:	000f      	movs	r7, r1
 800e9bc:	3c10      	subs	r4, #16
 800e9be:	e7c8      	b.n	800e952 <_svfprintf_r+0x11ce>
 800e9c0:	3210      	adds	r2, #16
 800e9c2:	607d      	str	r5, [r7, #4]
 800e9c4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e9c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9c8:	2b07      	cmp	r3, #7
 800e9ca:	dd08      	ble.n	800e9de <_svfprintf_r+0x125a>
 800e9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9d2:	f002 ff67 	bl	80118a4 <__ssprint_r>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d000      	beq.n	800e9dc <_svfprintf_r+0x1258>
 800e9da:	e0b2      	b.n	800eb42 <_svfprintf_r+0x13be>
 800e9dc:	a92f      	add	r1, sp, #188	; 0xbc
 800e9de:	000f      	movs	r7, r1
 800e9e0:	3c10      	subs	r4, #16
 800e9e2:	e74c      	b.n	800e87e <_svfprintf_r+0x10fa>
 800e9e4:	003c      	movs	r4, r7
 800e9e6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e9e8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9ec:	3101      	adds	r1, #1
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	3408      	adds	r4, #8
 800e9f2:	2a01      	cmp	r2, #1
 800e9f4:	dc03      	bgt.n	800e9fe <_svfprintf_r+0x127a>
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	4216      	tst	r6, r2
 800e9fa:	d100      	bne.n	800e9fe <_svfprintf_r+0x127a>
 800e9fc:	e07f      	b.n	800eafe <_svfprintf_r+0x137a>
 800e9fe:	9a08      	ldr	r2, [sp, #32]
 800ea00:	912e      	str	r1, [sp, #184]	; 0xb8
 800ea02:	603a      	str	r2, [r7, #0]
 800ea04:	2201      	movs	r2, #1
 800ea06:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea08:	607a      	str	r2, [r7, #4]
 800ea0a:	2b07      	cmp	r3, #7
 800ea0c:	dd08      	ble.n	800ea20 <_svfprintf_r+0x129c>
 800ea0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea12:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea14:	f002 ff46 	bl	80118a4 <__ssprint_r>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d000      	beq.n	800ea1e <_svfprintf_r+0x129a>
 800ea1c:	e091      	b.n	800eb42 <_svfprintf_r+0x13be>
 800ea1e:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ea22:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ea28:	6063      	str	r3, [r4, #4]
 800ea2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea2c:	3408      	adds	r4, #8
 800ea2e:	189b      	adds	r3, r3, r2
 800ea30:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea34:	3301      	adds	r3, #1
 800ea36:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea38:	2b07      	cmp	r3, #7
 800ea3a:	dd07      	ble.n	800ea4c <_svfprintf_r+0x12c8>
 800ea3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea40:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea42:	f002 ff2f 	bl	80118a4 <__ssprint_r>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d17b      	bne.n	800eb42 <_svfprintf_r+0x13be>
 800ea4a:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea4e:	2200      	movs	r2, #0
 800ea50:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ea52:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ea54:	9309      	str	r3, [sp, #36]	; 0x24
 800ea56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea58:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800ea5a:	1e5d      	subs	r5, r3, #1
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f7f1 fcf3 	bl	8000448 <__aeabi_dcmpeq>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d126      	bne.n	800eab4 <_svfprintf_r+0x1330>
 800ea66:	9b08      	ldr	r3, [sp, #32]
 800ea68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	1e7b      	subs	r3, r7, #1
 800ea72:	3201      	adds	r2, #1
 800ea74:	185b      	adds	r3, r3, r1
 800ea76:	6065      	str	r5, [r4, #4]
 800ea78:	932e      	str	r3, [sp, #184]	; 0xb8
 800ea7a:	922d      	str	r2, [sp, #180]	; 0xb4
 800ea7c:	3408      	adds	r4, #8
 800ea7e:	2a07      	cmp	r2, #7
 800ea80:	dd07      	ble.n	800ea92 <_svfprintf_r+0x130e>
 800ea82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea86:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea88:	f002 ff0c 	bl	80118a4 <__ssprint_r>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d158      	bne.n	800eb42 <_svfprintf_r+0x13be>
 800ea90:	ac2f      	add	r4, sp, #188	; 0xbc
 800ea92:	ab28      	add	r3, sp, #160	; 0xa0
 800ea94:	6023      	str	r3, [r4, #0]
 800ea96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea9a:	6063      	str	r3, [r4, #4]
 800ea9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ea9e:	189b      	adds	r3, r3, r2
 800eaa0:	932e      	str	r3, [sp, #184]	; 0xb8
 800eaa2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	932d      	str	r3, [sp, #180]	; 0xb4
 800eaa8:	2b07      	cmp	r3, #7
 800eaaa:	dd00      	ble.n	800eaae <_svfprintf_r+0x132a>
 800eaac:	e638      	b.n	800e720 <_svfprintf_r+0xf9c>
 800eaae:	3408      	adds	r4, #8
 800eab0:	0027      	movs	r7, r4
 800eab2:	e595      	b.n	800e5e0 <_svfprintf_r+0xe5c>
 800eab4:	2710      	movs	r7, #16
 800eab6:	2d00      	cmp	r5, #0
 800eab8:	ddeb      	ble.n	800ea92 <_svfprintf_r+0x130e>
 800eaba:	0021      	movs	r1, r4
 800eabc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eabe:	4850      	ldr	r0, [pc, #320]	; (800ec00 <_svfprintf_r+0x147c>)
 800eac0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eac2:	3301      	adds	r3, #1
 800eac4:	3108      	adds	r1, #8
 800eac6:	6020      	str	r0, [r4, #0]
 800eac8:	2d10      	cmp	r5, #16
 800eaca:	dc07      	bgt.n	800eadc <_svfprintf_r+0x1358>
 800eacc:	6065      	str	r5, [r4, #4]
 800eace:	000c      	movs	r4, r1
 800ead0:	18ad      	adds	r5, r5, r2
 800ead2:	952e      	str	r5, [sp, #184]	; 0xb8
 800ead4:	932d      	str	r3, [sp, #180]	; 0xb4
 800ead6:	2b07      	cmp	r3, #7
 800ead8:	dddb      	ble.n	800ea92 <_svfprintf_r+0x130e>
 800eada:	e7d2      	b.n	800ea82 <_svfprintf_r+0x12fe>
 800eadc:	3210      	adds	r2, #16
 800eade:	6067      	str	r7, [r4, #4]
 800eae0:	922e      	str	r2, [sp, #184]	; 0xb8
 800eae2:	932d      	str	r3, [sp, #180]	; 0xb4
 800eae4:	2b07      	cmp	r3, #7
 800eae6:	dd07      	ble.n	800eaf8 <_svfprintf_r+0x1374>
 800eae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eaea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eaec:	aa2c      	add	r2, sp, #176	; 0xb0
 800eaee:	f002 fed9 	bl	80118a4 <__ssprint_r>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d125      	bne.n	800eb42 <_svfprintf_r+0x13be>
 800eaf6:	a92f      	add	r1, sp, #188	; 0xbc
 800eaf8:	000c      	movs	r4, r1
 800eafa:	3d10      	subs	r5, #16
 800eafc:	e7dd      	b.n	800eaba <_svfprintf_r+0x1336>
 800eafe:	9808      	ldr	r0, [sp, #32]
 800eb00:	912e      	str	r1, [sp, #184]	; 0xb8
 800eb02:	c705      	stmia	r7!, {r0, r2}
 800eb04:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb06:	e7e6      	b.n	800ead6 <_svfprintf_r+0x1352>
 800eb08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eb0c:	2510      	movs	r5, #16
 800eb0e:	1a9c      	subs	r4, r3, r2
 800eb10:	2c00      	cmp	r4, #0
 800eb12:	dc00      	bgt.n	800eb16 <_svfprintf_r+0x1392>
 800eb14:	e567      	b.n	800e5e6 <_svfprintf_r+0xe62>
 800eb16:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb18:	493a      	ldr	r1, [pc, #232]	; (800ec04 <_svfprintf_r+0x1480>)
 800eb1a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	6039      	str	r1, [r7, #0]
 800eb20:	2c10      	cmp	r4, #16
 800eb22:	dc19      	bgt.n	800eb58 <_svfprintf_r+0x13d4>
 800eb24:	607c      	str	r4, [r7, #4]
 800eb26:	18a4      	adds	r4, r4, r2
 800eb28:	942e      	str	r4, [sp, #184]	; 0xb8
 800eb2a:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb2c:	2b07      	cmp	r3, #7
 800eb2e:	dc00      	bgt.n	800eb32 <_svfprintf_r+0x13ae>
 800eb30:	e559      	b.n	800e5e6 <_svfprintf_r+0xe62>
 800eb32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb34:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb36:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb38:	f002 feb4 	bl	80118a4 <__ssprint_r>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d100      	bne.n	800eb42 <_svfprintf_r+0x13be>
 800eb40:	e551      	b.n	800e5e6 <_svfprintf_r+0xe62>
 800eb42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d101      	bne.n	800eb4c <_svfprintf_r+0x13c8>
 800eb48:	f7ff f845 	bl	800dbd6 <_svfprintf_r+0x452>
 800eb4c:	0019      	movs	r1, r3
 800eb4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb50:	f7fd fd80 	bl	800c654 <_free_r>
 800eb54:	f7ff f83f 	bl	800dbd6 <_svfprintf_r+0x452>
 800eb58:	3210      	adds	r2, #16
 800eb5a:	607d      	str	r5, [r7, #4]
 800eb5c:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb60:	3708      	adds	r7, #8
 800eb62:	2b07      	cmp	r3, #7
 800eb64:	dd07      	ble.n	800eb76 <_svfprintf_r+0x13f2>
 800eb66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb6a:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb6c:	f002 fe9a 	bl	80118a4 <__ssprint_r>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	d1e6      	bne.n	800eb42 <_svfprintf_r+0x13be>
 800eb74:	af2f      	add	r7, sp, #188	; 0xbc
 800eb76:	3c10      	subs	r4, #16
 800eb78:	e7cd      	b.n	800eb16 <_svfprintf_r+0x1392>
 800eb7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eb7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb7e:	f7fd fd69 	bl	800c654 <_free_r>
 800eb82:	e549      	b.n	800e618 <_svfprintf_r+0xe94>
 800eb84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <_svfprintf_r+0x140a>
 800eb8a:	f7ff f824 	bl	800dbd6 <_svfprintf_r+0x452>
 800eb8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb92:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb94:	f002 fe86 	bl	80118a4 <__ssprint_r>
 800eb98:	f7ff f81d 	bl	800dbd6 <_svfprintf_r+0x452>
 800eb9c:	0034      	movs	r4, r6
 800eb9e:	2a00      	cmp	r2, #0
 800eba0:	d101      	bne.n	800eba6 <_svfprintf_r+0x1422>
 800eba2:	f7fe ff8c 	bl	800dabe <_svfprintf_r+0x33a>
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d101      	bne.n	800ebae <_svfprintf_r+0x142a>
 800ebaa:	f7ff fc01 	bl	800e3b0 <_svfprintf_r+0xc2c>
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d100      	bne.n	800ebb4 <_svfprintf_r+0x1430>
 800ebb2:	e459      	b.n	800e468 <_svfprintf_r+0xce4>
 800ebb4:	2507      	movs	r5, #7
 800ebb6:	ab58      	add	r3, sp, #352	; 0x160
 800ebb8:	9308      	str	r3, [sp, #32]
 800ebba:	9a08      	ldr	r2, [sp, #32]
 800ebbc:	0013      	movs	r3, r2
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	9308      	str	r3, [sp, #32]
 800ebc2:	9b06      	ldr	r3, [sp, #24]
 800ebc4:	9908      	ldr	r1, [sp, #32]
 800ebc6:	402b      	ands	r3, r5
 800ebc8:	3330      	adds	r3, #48	; 0x30
 800ebca:	700b      	strb	r3, [r1, #0]
 800ebcc:	9907      	ldr	r1, [sp, #28]
 800ebce:	074e      	lsls	r6, r1, #29
 800ebd0:	9906      	ldr	r1, [sp, #24]
 800ebd2:	08c8      	lsrs	r0, r1, #3
 800ebd4:	9907      	ldr	r1, [sp, #28]
 800ebd6:	4306      	orrs	r6, r0
 800ebd8:	08c9      	lsrs	r1, r1, #3
 800ebda:	9107      	str	r1, [sp, #28]
 800ebdc:	0031      	movs	r1, r6
 800ebde:	9807      	ldr	r0, [sp, #28]
 800ebe0:	9606      	str	r6, [sp, #24]
 800ebe2:	4301      	orrs	r1, r0
 800ebe4:	d1e9      	bne.n	800ebba <_svfprintf_r+0x1436>
 800ebe6:	07e1      	lsls	r1, r4, #31
 800ebe8:	d400      	bmi.n	800ebec <_svfprintf_r+0x1468>
 800ebea:	e42a      	b.n	800e442 <_svfprintf_r+0xcbe>
 800ebec:	2b30      	cmp	r3, #48	; 0x30
 800ebee:	d100      	bne.n	800ebf2 <_svfprintf_r+0x146e>
 800ebf0:	e427      	b.n	800e442 <_svfprintf_r+0xcbe>
 800ebf2:	2130      	movs	r1, #48	; 0x30
 800ebf4:	9b08      	ldr	r3, [sp, #32]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	7019      	strb	r1, [r3, #0]
 800ebfa:	1e93      	subs	r3, r2, #2
 800ebfc:	9308      	str	r3, [sp, #32]
 800ebfe:	e420      	b.n	800e442 <_svfprintf_r+0xcbe>
 800ec00:	08014d98 	.word	0x08014d98
 800ec04:	08014d88 	.word	0x08014d88

0800ec08 <__ssvfscanf_r>:
 800ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0a:	4ca7      	ldr	r4, [pc, #668]	; (800eea8 <__ssvfscanf_r+0x2a0>)
 800ec0c:	44a5      	add	sp, r4
 800ec0e:	af02      	add	r7, sp, #8
 800ec10:	633b      	str	r3, [r7, #48]	; 0x30
 800ec12:	000b      	movs	r3, r1
 800ec14:	6378      	str	r0, [r7, #52]	; 0x34
 800ec16:	6479      	str	r1, [r7, #68]	; 0x44
 800ec18:	61ba      	str	r2, [r7, #24]
 800ec1a:	220c      	movs	r2, #12
 800ec1c:	5e9a      	ldrsh	r2, [r3, r2]
 800ec1e:	2380      	movs	r3, #128	; 0x80
 800ec20:	019b      	lsls	r3, r3, #6
 800ec22:	421a      	tst	r2, r3
 800ec24:	d105      	bne.n	800ec32 <__ssvfscanf_r+0x2a>
 800ec26:	4313      	orrs	r3, r2
 800ec28:	818b      	strh	r3, [r1, #12]
 800ec2a:	4aa0      	ldr	r2, [pc, #640]	; (800eeac <__ssvfscanf_r+0x2a4>)
 800ec2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ec2e:	4013      	ands	r3, r2
 800ec30:	664b      	str	r3, [r1, #100]	; 0x64
 800ec32:	2300      	movs	r3, #0
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	643b      	str	r3, [r7, #64]	; 0x40
 800ec38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	69ba      	ldr	r2, [r7, #24]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	3201      	adds	r2, #1
 800ec48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec4a:	61ba      	str	r2, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d100      	bne.n	800ec52 <__ssvfscanf_r+0x4a>
 800ec50:	e0d7      	b.n	800ee02 <__ssvfscanf_r+0x1fa>
 800ec52:	2608      	movs	r6, #8
 800ec54:	2108      	movs	r1, #8
 800ec56:	4a96      	ldr	r2, [pc, #600]	; (800eeb0 <__ssvfscanf_r+0x2a8>)
 800ec58:	5cd2      	ldrb	r2, [r2, r3]
 800ec5a:	4016      	ands	r6, r2
 800ec5c:	420a      	tst	r2, r1
 800ec5e:	d01d      	beq.n	800ec9c <__ssvfscanf_r+0x94>
 800ec60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	dd12      	ble.n	800ec8e <__ssvfscanf_r+0x86>
 800ec68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec6a:	4991      	ldr	r1, [pc, #580]	; (800eeb0 <__ssvfscanf_r+0x2a8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	781a      	ldrb	r2, [r3, #0]
 800ec70:	5c8a      	ldrb	r2, [r1, r2]
 800ec72:	2108      	movs	r1, #8
 800ec74:	420a      	tst	r2, r1
 800ec76:	d0e3      	beq.n	800ec40 <__ssvfscanf_r+0x38>
 800ec78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec7c:	3201      	adds	r2, #1
 800ec7e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ec80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec82:	3301      	adds	r3, #1
 800ec84:	6852      	ldr	r2, [r2, #4]
 800ec86:	600b      	str	r3, [r1, #0]
 800ec88:	3a01      	subs	r2, #1
 800ec8a:	604a      	str	r2, [r1, #4]
 800ec8c:	e7e8      	b.n	800ec60 <__ssvfscanf_r+0x58>
 800ec8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec92:	f002 fec7 	bl	8011a24 <__ssrefill_r>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d0e6      	beq.n	800ec68 <__ssvfscanf_r+0x60>
 800ec9a:	e7d1      	b.n	800ec40 <__ssvfscanf_r+0x38>
 800ec9c:	2b25      	cmp	r3, #37	; 0x25
 800ec9e:	d165      	bne.n	800ed6c <__ssvfscanf_r+0x164>
 800eca0:	250a      	movs	r5, #10
 800eca2:	2480      	movs	r4, #128	; 0x80
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	63fe      	str	r6, [r7, #60]	; 0x3c
 800eca8:	3b16      	subs	r3, #22
 800ecaa:	69b9      	ldr	r1, [r7, #24]
 800ecac:	3101      	adds	r1, #1
 800ecae:	61b9      	str	r1, [r7, #24]
 800ecb0:	7811      	ldrb	r1, [r2, #0]
 800ecb2:	0008      	movs	r0, r1
 800ecb4:	3825      	subs	r0, #37	; 0x25
 800ecb6:	2855      	cmp	r0, #85	; 0x55
 800ecb8:	d900      	bls.n	800ecbc <__ssvfscanf_r+0xb4>
 800ecba:	e170      	b.n	800ef9e <__ssvfscanf_r+0x396>
 800ecbc:	f7f1 fa34 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ecc0:	016f0056 	.word	0x016f0056
 800ecc4:	016f016f 	.word	0x016f016f
 800ecc8:	0081016f 	.word	0x0081016f
 800eccc:	016f016f 	.word	0x016f016f
 800ecd0:	016f016f 	.word	0x016f016f
 800ecd4:	00b8016f 	.word	0x00b8016f
 800ecd8:	00b800b8 	.word	0x00b800b8
 800ecdc:	00b800b8 	.word	0x00b800b8
 800ece0:	00b800b8 	.word	0x00b800b8
 800ece4:	00b800b8 	.word	0x00b800b8
 800ece8:	016f00b8 	.word	0x016f00b8
 800ecec:	016f016f 	.word	0x016f016f
 800ecf0:	016f016f 	.word	0x016f016f
 800ecf4:	016f016f 	.word	0x016f016f
 800ecf8:	016f00d8 	.word	0x016f00d8
 800ecfc:	00c1010a 	.word	0x00c1010a
 800ed00:	00d800d8 	.word	0x00d800d8
 800ed04:	016f00d8 	.word	0x016f00d8
 800ed08:	016f016f 	.word	0x016f016f
 800ed0c:	009f016f 	.word	0x009f016f
 800ed10:	016f016f 	.word	0x016f016f
 800ed14:	016f00c9 	.word	0x016f00c9
 800ed18:	016f016f 	.word	0x016f016f
 800ed1c:	016f00f0 	.word	0x016f00f0
 800ed20:	016f016f 	.word	0x016f016f
 800ed24:	00d1016f 	.word	0x00d1016f
 800ed28:	016f016f 	.word	0x016f016f
 800ed2c:	016f00fe 	.word	0x016f00fe
 800ed30:	016f016f 	.word	0x016f016f
 800ed34:	016f016f 	.word	0x016f016f
 800ed38:	016f00d8 	.word	0x016f00d8
 800ed3c:	00c3010c 	.word	0x00c3010c
 800ed40:	00d800d8 	.word	0x00d800d8
 800ed44:	009400d8 	.word	0x009400d8
 800ed48:	009f012f 	.word	0x009f012f
 800ed4c:	0088016f 	.word	0x0088016f
 800ed50:	011200a9 	.word	0x011200a9
 800ed54:	011000cb 	.word	0x011000cb
 800ed58:	016f016f 	.word	0x016f016f
 800ed5c:	00a600f2 	.word	0x00a600f2
 800ed60:	016f00cf 	.word	0x016f00cf
 800ed64:	00d1016f 	.word	0x00d1016f
 800ed68:	00a6016f 	.word	0x00a6016f
 800ed6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	dd12      	ble.n	800ed9a <__ssvfscanf_r+0x192>
 800ed74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3a01      	subs	r2, #1
 800ed7c:	7819      	ldrb	r1, [r3, #0]
 800ed7e:	7812      	ldrb	r2, [r2, #0]
 800ed80:	4291      	cmp	r1, r2
 800ed82:	d13e      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800ed84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed88:	6852      	ldr	r2, [r2, #4]
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	600b      	str	r3, [r1, #0]
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	3a01      	subs	r2, #1
 800ed92:	604a      	str	r2, [r1, #4]
 800ed94:	3301      	adds	r3, #1
 800ed96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed98:	e752      	b.n	800ec40 <__ssvfscanf_r+0x38>
 800ed9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed9e:	f002 fe41 	bl	8011a24 <__ssrefill_r>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d0e6      	beq.n	800ed74 <__ssvfscanf_r+0x16c>
 800eda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d003      	beq.n	800edb4 <__ssvfscanf_r+0x1ac>
 800edac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edae:	899b      	ldrh	r3, [r3, #12]
 800edb0:	065b      	lsls	r3, r3, #25
 800edb2:	d526      	bpl.n	800ee02 <__ssvfscanf_r+0x1fa>
 800edb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d000      	beq.n	800edbc <__ssvfscanf_r+0x1b4>
 800edba:	e0f6      	b.n	800efaa <__ssvfscanf_r+0x3a2>
 800edbc:	3b01      	subs	r3, #1
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edc0:	e104      	b.n	800efcc <__ssvfscanf_r+0x3c4>
 800edc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edc4:	4332      	orrs	r2, r6
 800edc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800edc8:	d11b      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800edca:	2610      	movs	r6, #16
 800edcc:	69ba      	ldr	r2, [r7, #24]
 800edce:	e76c      	b.n	800ecaa <__ssvfscanf_r+0xa2>
 800edd0:	421e      	tst	r6, r3
 800edd2:	d116      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800edd4:	7851      	ldrb	r1, [r2, #1]
 800edd6:	296c      	cmp	r1, #108	; 0x6c
 800edd8:	d103      	bne.n	800ede2 <__ssvfscanf_r+0x1da>
 800edda:	3202      	adds	r2, #2
 800eddc:	61ba      	str	r2, [r7, #24]
 800edde:	2202      	movs	r2, #2
 800ede0:	e000      	b.n	800ede4 <__ssvfscanf_r+0x1dc>
 800ede2:	2201      	movs	r2, #1
 800ede4:	4316      	orrs	r6, r2
 800ede6:	e7f1      	b.n	800edcc <__ssvfscanf_r+0x1c4>
 800ede8:	421e      	tst	r6, r3
 800edea:	d10a      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800edec:	7851      	ldrb	r1, [r2, #1]
 800edee:	2968      	cmp	r1, #104	; 0x68
 800edf0:	d103      	bne.n	800edfa <__ssvfscanf_r+0x1f2>
 800edf2:	3202      	adds	r2, #2
 800edf4:	61ba      	str	r2, [r7, #24]
 800edf6:	2208      	movs	r2, #8
 800edf8:	e7f4      	b.n	800ede4 <__ssvfscanf_r+0x1dc>
 800edfa:	2204      	movs	r2, #4
 800edfc:	e7f2      	b.n	800ede4 <__ssvfscanf_r+0x1dc>
 800edfe:	421e      	tst	r6, r3
 800ee00:	d0ed      	beq.n	800edde <__ssvfscanf_r+0x1d6>
 800ee02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d000      	beq.n	800ee0a <__ssvfscanf_r+0x202>
 800ee08:	e0da      	b.n	800efc0 <__ssvfscanf_r+0x3b8>
 800ee0a:	e0df      	b.n	800efcc <__ssvfscanf_r+0x3c4>
 800ee0c:	421e      	tst	r6, r3
 800ee0e:	d0dd      	beq.n	800edcc <__ssvfscanf_r+0x1c4>
 800ee10:	e7f7      	b.n	800ee02 <__ssvfscanf_r+0x1fa>
 800ee12:	228f      	movs	r2, #143	; 0x8f
 800ee14:	218f      	movs	r1, #143	; 0x8f
 800ee16:	4032      	ands	r2, r6
 800ee18:	420e      	tst	r6, r1
 800ee1a:	d1f2      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800ee1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee1e:	2900      	cmp	r1, #0
 800ee20:	d104      	bne.n	800ee2c <__ssvfscanf_r+0x224>
 800ee22:	b082      	sub	sp, #8
 800ee24:	a902      	add	r1, sp, #8
 800ee26:	6439      	str	r1, [r7, #64]	; 0x40
 800ee28:	600a      	str	r2, [r1, #0]
 800ee2a:	604a      	str	r2, [r1, #4]
 800ee2c:	4326      	orrs	r6, r4
 800ee2e:	e7cd      	b.n	800edcc <__ssvfscanf_r+0x1c4>
 800ee30:	228f      	movs	r2, #143	; 0x8f
 800ee32:	4216      	tst	r6, r2
 800ee34:	d1e5      	bne.n	800ee02 <__ssvfscanf_r+0x1fa>
 800ee36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee38:	436a      	muls	r2, r5
 800ee3a:	3a30      	subs	r2, #48	; 0x30
 800ee3c:	188a      	adds	r2, r1, r2
 800ee3e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee40:	e7c4      	b.n	800edcc <__ssvfscanf_r+0x1c4>
 800ee42:	2301      	movs	r3, #1
 800ee44:	431e      	orrs	r6, r3
 800ee46:	4b1b      	ldr	r3, [pc, #108]	; (800eeb4 <__ssvfscanf_r+0x2ac>)
 800ee48:	617b      	str	r3, [r7, #20]
 800ee4a:	230a      	movs	r3, #10
 800ee4c:	2403      	movs	r4, #3
 800ee4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee50:	e00f      	b.n	800ee72 <__ssvfscanf_r+0x26a>
 800ee52:	2301      	movs	r3, #1
 800ee54:	431e      	orrs	r6, r3
 800ee56:	4b18      	ldr	r3, [pc, #96]	; (800eeb8 <__ssvfscanf_r+0x2b0>)
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	2308      	movs	r3, #8
 800ee5c:	e7f6      	b.n	800ee4c <__ssvfscanf_r+0x244>
 800ee5e:	4b16      	ldr	r3, [pc, #88]	; (800eeb8 <__ssvfscanf_r+0x2b0>)
 800ee60:	e7f2      	b.n	800ee48 <__ssvfscanf_r+0x240>
 800ee62:	2380      	movs	r3, #128	; 0x80
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	431e      	orrs	r6, r3
 800ee68:	4b13      	ldr	r3, [pc, #76]	; (800eeb8 <__ssvfscanf_r+0x2b0>)
 800ee6a:	617b      	str	r3, [r7, #20]
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	e7ed      	b.n	800ee4c <__ssvfscanf_r+0x244>
 800ee70:	2404      	movs	r4, #4
 800ee72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd55      	ble.n	800ef26 <__ssvfscanf_r+0x31e>
 800ee7a:	0673      	lsls	r3, r6, #25
 800ee7c:	d407      	bmi.n	800ee8e <__ssvfscanf_r+0x286>
 800ee7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee80:	490b      	ldr	r1, [pc, #44]	; (800eeb0 <__ssvfscanf_r+0x2a8>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	781a      	ldrb	r2, [r3, #0]
 800ee86:	5c8a      	ldrb	r2, [r1, r2]
 800ee88:	2108      	movs	r1, #8
 800ee8a:	420a      	tst	r2, r1
 800ee8c:	d152      	bne.n	800ef34 <__ssvfscanf_r+0x32c>
 800ee8e:	1e60      	subs	r0, r4, #1
 800ee90:	2803      	cmp	r0, #3
 800ee92:	d863      	bhi.n	800ef5c <__ssvfscanf_r+0x354>
 800ee94:	f7f1 f948 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ee98:	03bd01da 	.word	0x03bd01da
 800ee9c:	068a0579 	.word	0x068a0579
 800eea0:	2301      	movs	r3, #1
 800eea2:	431e      	orrs	r6, r3
 800eea4:	2402      	movs	r4, #2
 800eea6:	e7e4      	b.n	800ee72 <__ssvfscanf_r+0x26a>
 800eea8:	fffffd34 	.word	0xfffffd34
 800eeac:	ffffdfff 	.word	0xffffdfff
 800eeb0:	08014a81 	.word	0x08014a81
 800eeb4:	0800bea5 	.word	0x0800bea5
 800eeb8:	0800bfc9 	.word	0x0800bfc9
 800eebc:	2248      	movs	r2, #72	; 0x48
 800eebe:	2318      	movs	r3, #24
 800eec0:	189b      	adds	r3, r3, r2
 800eec2:	19d8      	adds	r0, r3, r7
 800eec4:	69b9      	ldr	r1, [r7, #24]
 800eec6:	f001 f9d7 	bl	8010278 <__sccl>
 800eeca:	2340      	movs	r3, #64	; 0x40
 800eecc:	2401      	movs	r4, #1
 800eece:	61b8      	str	r0, [r7, #24]
 800eed0:	431e      	orrs	r6, r3
 800eed2:	e7ce      	b.n	800ee72 <__ssvfscanf_r+0x26a>
 800eed4:	2301      	movs	r3, #1
 800eed6:	431e      	orrs	r6, r3
 800eed8:	2340      	movs	r3, #64	; 0x40
 800eeda:	2400      	movs	r4, #0
 800eedc:	431e      	orrs	r6, r3
 800eede:	e7c8      	b.n	800ee72 <__ssvfscanf_r+0x26a>
 800eee0:	2388      	movs	r3, #136	; 0x88
 800eee2:	e7bf      	b.n	800ee64 <__ssvfscanf_r+0x25c>
 800eee4:	06f3      	lsls	r3, r6, #27
 800eee6:	d500      	bpl.n	800eeea <__ssvfscanf_r+0x2e2>
 800eee8:	e6aa      	b.n	800ec40 <__ssvfscanf_r+0x38>
 800eeea:	2108      	movs	r1, #8
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	cb04      	ldmia	r3!, {r2}
 800eef0:	420e      	tst	r6, r1
 800eef2:	d003      	beq.n	800eefc <__ssvfscanf_r+0x2f4>
 800eef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eef6:	7011      	strb	r1, [r2, #0]
 800eef8:	633b      	str	r3, [r7, #48]	; 0x30
 800eefa:	e6a1      	b.n	800ec40 <__ssvfscanf_r+0x38>
 800eefc:	0771      	lsls	r1, r6, #29
 800eefe:	d502      	bpl.n	800ef06 <__ssvfscanf_r+0x2fe>
 800ef00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef02:	8011      	strh	r1, [r2, #0]
 800ef04:	e7f8      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800ef06:	07f1      	lsls	r1, r6, #31
 800ef08:	d502      	bpl.n	800ef10 <__ssvfscanf_r+0x308>
 800ef0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef0c:	6011      	str	r1, [r2, #0]
 800ef0e:	e7f3      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800ef10:	07b6      	lsls	r6, r6, #30
 800ef12:	d5fa      	bpl.n	800ef0a <__ssvfscanf_r+0x302>
 800ef14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef16:	6011      	str	r1, [r2, #0]
 800ef18:	17c9      	asrs	r1, r1, #31
 800ef1a:	6051      	str	r1, [r2, #4]
 800ef1c:	e7ec      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800ef1e:	4ba2      	ldr	r3, [pc, #648]	; (800f1a8 <__ssvfscanf_r+0x5a0>)
 800ef20:	617b      	str	r3, [r7, #20]
 800ef22:	2300      	movs	r3, #0
 800ef24:	e792      	b.n	800ee4c <__ssvfscanf_r+0x244>
 800ef26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef2a:	f002 fd7b 	bl	8011a24 <__ssrefill_r>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0a3      	beq.n	800ee7a <__ssvfscanf_r+0x272>
 800ef32:	e738      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800ef34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef38:	3201      	adds	r2, #1
 800ef3a:	63ba      	str	r2, [r7, #56]	; 0x38
 800ef3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef3e:	6852      	ldr	r2, [r2, #4]
 800ef40:	3a01      	subs	r2, #1
 800ef42:	604a      	str	r2, [r1, #4]
 800ef44:	2a00      	cmp	r2, #0
 800ef46:	dd02      	ble.n	800ef4e <__ssvfscanf_r+0x346>
 800ef48:	3301      	adds	r3, #1
 800ef4a:	600b      	str	r3, [r1, #0]
 800ef4c:	e797      	b.n	800ee7e <__ssvfscanf_r+0x276>
 800ef4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef52:	f002 fd67 	bl	8011a24 <__ssrefill_r>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d091      	beq.n	800ee7e <__ssvfscanf_r+0x276>
 800ef5a:	e724      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800ef5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ef5e:	2301      	movs	r3, #1
 800ef60:	2a00      	cmp	r2, #0
 800ef62:	d100      	bne.n	800ef66 <__ssvfscanf_r+0x35e>
 800ef64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef66:	2210      	movs	r2, #16
 800ef68:	0034      	movs	r4, r6
 800ef6a:	4032      	ands	r2, r6
 800ef6c:	623a      	str	r2, [r7, #32]
 800ef6e:	401c      	ands	r4, r3
 800ef70:	421e      	tst	r6, r3
 800ef72:	d100      	bne.n	800ef76 <__ssvfscanf_r+0x36e>
 800ef74:	e0f3      	b.n	800f15e <__ssvfscanf_r+0x556>
 800ef76:	2a00      	cmp	r2, #0
 800ef78:	d000      	beq.n	800ef7c <__ssvfscanf_r+0x374>
 800ef7a:	e0b6      	b.n	800f0ea <__ssvfscanf_r+0x4e2>
 800ef7c:	2080      	movs	r0, #128	; 0x80
 800ef7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef80:	cb10      	ldmia	r3!, {r4}
 800ef82:	613b      	str	r3, [r7, #16]
 800ef84:	4206      	tst	r6, r0
 800ef86:	d100      	bne.n	800ef8a <__ssvfscanf_r+0x382>
 800ef88:	e0b7      	b.n	800f0fa <__ssvfscanf_r+0x4f2>
 800ef8a:	2c00      	cmp	r4, #0
 800ef8c:	d007      	beq.n	800ef9e <__ssvfscanf_r+0x396>
 800ef8e:	f7fb fe93 	bl	800acb8 <malloc>
 800ef92:	6338      	str	r0, [r7, #48]	; 0x30
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d11f      	bne.n	800efd8 <__ssvfscanf_r+0x3d0>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	425b      	negs	r3, r3
 800ef9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d013      	beq.n	800efcc <__ssvfscanf_r+0x3c4>
 800efa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa6:	3301      	adds	r3, #1
 800efa8:	d10a      	bne.n	800efc0 <__ssvfscanf_r+0x3b8>
 800efaa:	2400      	movs	r4, #0
 800efac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efae:	681d      	ldr	r5, [r3, #0]
 800efb0:	88db      	ldrh	r3, [r3, #6]
 800efb2:	42a3      	cmp	r3, r4
 800efb4:	dd01      	ble.n	800efba <__ssvfscanf_r+0x3b2>
 800efb6:	f001 f82a 	bl	801000e <__ssvfscanf_r+0x1406>
 800efba:	2301      	movs	r3, #1
 800efbc:	425b      	negs	r3, r3
 800efbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc2:	6818      	ldr	r0, [r3, #0]
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d001      	beq.n	800efcc <__ssvfscanf_r+0x3c4>
 800efc8:	f7fb fe80 	bl	800accc <free>
 800efcc:	46bd      	mov	sp, r7
 800efce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efd0:	23b1      	movs	r3, #177	; 0xb1
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	449d      	add	sp, r3
 800efd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efda:	6023      	str	r3, [r4, #0]
 800efdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efde:	88de      	ldrh	r6, [r3, #6]
 800efe0:	889d      	ldrh	r5, [r3, #4]
 800efe2:	42ae      	cmp	r6, r5
 800efe4:	d30e      	bcc.n	800f004 <__ssvfscanf_r+0x3fc>
 800efe6:	4b71      	ldr	r3, [pc, #452]	; (800f1ac <__ssvfscanf_r+0x5a4>)
 800efe8:	429d      	cmp	r5, r3
 800efea:	d8d5      	bhi.n	800ef98 <__ssvfscanf_r+0x390>
 800efec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efee:	3508      	adds	r5, #8
 800eff0:	b2ad      	uxth	r5, r5
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	00a9      	lsls	r1, r5, #2
 800eff6:	f002 f901 	bl	80111fc <realloc>
 800effa:	2800      	cmp	r0, #0
 800effc:	d0cc      	beq.n	800ef98 <__ssvfscanf_r+0x390>
 800effe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f000:	6018      	str	r0, [r3, #0]
 800f002:	809d      	strh	r5, [r3, #4]
 800f004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f006:	1c72      	adds	r2, r6, #1
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	00b6      	lsls	r6, r6, #2
 800f00c:	50f4      	str	r4, [r6, r3]
 800f00e:	2320      	movs	r3, #32
 800f010:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f012:	0026      	movs	r6, r4
 800f014:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f016:	80ca      	strh	r2, [r1, #6]
 800f018:	61fb      	str	r3, [r7, #28]
 800f01a:	2500      	movs	r5, #0
 800f01c:	f7fd f9fe 	bl	800c41c <__locale_mb_cur_max>
 800f020:	42a8      	cmp	r0, r5
 800f022:	d100      	bne.n	800f026 <__ssvfscanf_r+0x41e>
 800f024:	e6bf      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f026:	1c6a      	adds	r2, r5, #1
 800f028:	60fa      	str	r2, [r7, #12]
 800f02a:	228c      	movs	r2, #140	; 0x8c
 800f02c:	2048      	movs	r0, #72	; 0x48
 800f02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f030:	0052      	lsls	r2, r2, #1
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	1812      	adds	r2, r2, r0
 800f036:	7819      	ldrb	r1, [r3, #0]
 800f038:	19d2      	adds	r2, r2, r7
 800f03a:	5551      	strb	r1, [r2, r5]
 800f03c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f03e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f040:	6852      	ldr	r2, [r2, #4]
 800f042:	3301      	adds	r3, #1
 800f044:	600b      	str	r3, [r1, #0]
 800f046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f048:	3a01      	subs	r2, #1
 800f04a:	604a      	str	r2, [r1, #4]
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	d102      	bne.n	800f056 <__ssvfscanf_r+0x44e>
 800f050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f052:	2b04      	cmp	r3, #4
 800f054:	d007      	beq.n	800f066 <__ssvfscanf_r+0x45e>
 800f056:	2048      	movs	r0, #72	; 0x48
 800f058:	2310      	movs	r3, #16
 800f05a:	181b      	adds	r3, r3, r0
 800f05c:	2208      	movs	r2, #8
 800f05e:	2100      	movs	r1, #0
 800f060:	19d8      	adds	r0, r3, r7
 800f062:	f7fd f94f 	bl	800c304 <memset>
 800f066:	2148      	movs	r1, #72	; 0x48
 800f068:	2310      	movs	r3, #16
 800f06a:	228c      	movs	r2, #140	; 0x8c
 800f06c:	185b      	adds	r3, r3, r1
 800f06e:	0052      	lsls	r2, r2, #1
 800f070:	19db      	adds	r3, r3, r7
 800f072:	1852      	adds	r2, r2, r1
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	0021      	movs	r1, r4
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f07c:	19d2      	adds	r2, r2, r7
 800f07e:	f002 fbd1 	bl	8011824 <_mbrtowc_r>
 800f082:	0003      	movs	r3, r0
 800f084:	62b8      	str	r0, [r7, #40]	; 0x28
 800f086:	3301      	adds	r3, #1
 800f088:	d100      	bne.n	800f08c <__ssvfscanf_r+0x484>
 800f08a:	e68c      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d139      	bne.n	800f104 <__ssvfscanf_r+0x4fc>
 800f090:	6a3b      	ldr	r3, [r7, #32]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d100      	bne.n	800f098 <__ssvfscanf_r+0x490>
 800f096:	6023      	str	r3, [r4, #0]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09c:	4694      	mov	ip, r2
 800f09e:	4463      	add	r3, ip
 800f0a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	d102      	bne.n	800f0ae <__ssvfscanf_r+0x4a6>
 800f0a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0aa:	2b04      	cmp	r3, #4
 800f0ac:	d002      	beq.n	800f0b4 <__ssvfscanf_r+0x4ac>
 800f0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d115      	bne.n	800f0e6 <__ssvfscanf_r+0x4de>
 800f0ba:	2e00      	cmp	r6, #0
 800f0bc:	d012      	beq.n	800f0e4 <__ssvfscanf_r+0x4dc>
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	69fa      	ldr	r2, [r7, #28]
 800f0c2:	1ae5      	subs	r5, r4, r3
 800f0c4:	10ab      	asrs	r3, r5, #2
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d30c      	bcc.n	800f0e4 <__ssvfscanf_r+0x4dc>
 800f0ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0cc:	00d1      	lsls	r1, r2, #3
 800f0ce:	f002 f895 	bl	80111fc <realloc>
 800f0d2:	6338      	str	r0, [r7, #48]	; 0x30
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d100      	bne.n	800f0da <__ssvfscanf_r+0x4d2>
 800f0d8:	e75e      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	1944      	adds	r4, r0, r5
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	6030      	str	r0, [r6, #0]
 800f0e2:	61fb      	str	r3, [r7, #28]
 800f0e4:	3404      	adds	r4, #4
 800f0e6:	2500      	movs	r5, #0
 800f0e8:	e010      	b.n	800f10c <__ssvfscanf_r+0x504>
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	613b      	str	r3, [r7, #16]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	001e      	movs	r6, r3
 800f0f2:	001c      	movs	r4, r3
 800f0f4:	61fb      	str	r3, [r7, #28]
 800f0f6:	633b      	str	r3, [r7, #48]	; 0x30
 800f0f8:	e78f      	b.n	800f01a <__ssvfscanf_r+0x412>
 800f0fa:	6a3b      	ldr	r3, [r7, #32]
 800f0fc:	001e      	movs	r6, r3
 800f0fe:	61fb      	str	r3, [r7, #28]
 800f100:	633b      	str	r3, [r7, #48]	; 0x30
 800f102:	e78a      	b.n	800f01a <__ssvfscanf_r+0x412>
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	68fd      	ldr	r5, [r7, #12]
 800f108:	3302      	adds	r3, #2
 800f10a:	d1c5      	bne.n	800f098 <__ssvfscanf_r+0x490>
 800f10c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	dc12      	bgt.n	800f13a <__ssvfscanf_r+0x532>
 800f114:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f118:	f002 fc84 	bl	8011a24 <__ssrefill_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d00c      	beq.n	800f13a <__ssvfscanf_r+0x532>
 800f120:	2d00      	cmp	r5, #0
 800f122:	d000      	beq.n	800f126 <__ssvfscanf_r+0x51e>
 800f124:	e63f      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f126:	2e00      	cmp	r6, #0
 800f128:	d10c      	bne.n	800f144 <__ssvfscanf_r+0x53c>
 800f12a:	6a3b      	ldr	r3, [r7, #32]
 800f12c:	425a      	negs	r2, r3
 800f12e:	4153      	adcs	r3, r2
 800f130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f132:	18d3      	adds	r3, r2, r3
 800f134:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	e6de      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800f13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d000      	beq.n	800f142 <__ssvfscanf_r+0x53a>
 800f140:	e76c      	b.n	800f01c <__ssvfscanf_r+0x414>
 800f142:	e7f0      	b.n	800f126 <__ssvfscanf_r+0x51e>
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	69fa      	ldr	r2, [r7, #28]
 800f148:	1ae1      	subs	r1, r4, r3
 800f14a:	108b      	asrs	r3, r1, #2
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d9ec      	bls.n	800f12a <__ssvfscanf_r+0x522>
 800f150:	6830      	ldr	r0, [r6, #0]
 800f152:	f002 f853 	bl	80111fc <realloc>
 800f156:	2800      	cmp	r0, #0
 800f158:	d0e7      	beq.n	800f12a <__ssvfscanf_r+0x522>
 800f15a:	6030      	str	r0, [r6, #0]
 800f15c:	e7e5      	b.n	800f12a <__ssvfscanf_r+0x522>
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d025      	beq.n	800f1b0 <__ssvfscanf_r+0x5a8>
 800f164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f16c:	6812      	ldr	r2, [r2, #0]
 800f16e:	4299      	cmp	r1, r3
 800f170:	dd11      	ble.n	800f196 <__ssvfscanf_r+0x58e>
 800f172:	1ac9      	subs	r1, r1, r3
 800f174:	18d2      	adds	r2, r2, r3
 800f176:	18e4      	adds	r4, r4, r3
 800f178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f17a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f17c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f17e:	0019      	movs	r1, r3
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	f002 fc4f 	bl	8011a24 <__ssrefill_r>
 800f186:	2800      	cmp	r0, #0
 800f188:	d0ec      	beq.n	800f164 <__ssvfscanf_r+0x55c>
 800f18a:	2c00      	cmp	r4, #0
 800f18c:	d100      	bne.n	800f190 <__ssvfscanf_r+0x588>
 800f18e:	e60a      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	191b      	adds	r3, r3, r4
 800f194:	e5ff      	b.n	800ed96 <__ssvfscanf_r+0x18e>
 800f196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f198:	1a5b      	subs	r3, r3, r1
 800f19a:	1864      	adds	r4, r4, r1
 800f19c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f19e:	604b      	str	r3, [r1, #4]
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a2:	18d2      	adds	r2, r2, r3
 800f1a4:	600a      	str	r2, [r1, #0]
 800f1a6:	e7f3      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f1a8:	0800bea5 	.word	0x0800bea5
 800f1ac:	0000fff6 	.word	0x0000fff6
 800f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b2:	0034      	movs	r4, r6
 800f1b4:	cb20      	ldmia	r3!, {r5}
 800f1b6:	633b      	str	r3, [r7, #48]	; 0x30
 800f1b8:	2380      	movs	r3, #128	; 0x80
 800f1ba:	401c      	ands	r4, r3
 800f1bc:	421e      	tst	r6, r3
 800f1be:	d028      	beq.n	800f212 <__ssvfscanf_r+0x60a>
 800f1c0:	2d00      	cmp	r5, #0
 800f1c2:	d100      	bne.n	800f1c6 <__ssvfscanf_r+0x5be>
 800f1c4:	e61d      	b.n	800ee02 <__ssvfscanf_r+0x1fa>
 800f1c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f1c8:	f7fb fd76 	bl	800acb8 <malloc>
 800f1cc:	6238      	str	r0, [r7, #32]
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	d100      	bne.n	800f1d4 <__ssvfscanf_r+0x5cc>
 800f1d2:	e5ef      	b.n	800edb4 <__ssvfscanf_r+0x1ac>
 800f1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1d6:	6028      	str	r0, [r5, #0]
 800f1d8:	88de      	ldrh	r6, [r3, #6]
 800f1da:	889c      	ldrh	r4, [r3, #4]
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	42a6      	cmp	r6, r4
 800f1e0:	d30e      	bcc.n	800f200 <__ssvfscanf_r+0x5f8>
 800f1e2:	4bbf      	ldr	r3, [pc, #764]	; (800f4e0 <__ssvfscanf_r+0x8d8>)
 800f1e4:	429c      	cmp	r4, r3
 800f1e6:	d900      	bls.n	800f1ea <__ssvfscanf_r+0x5e2>
 800f1e8:	e6df      	b.n	800efaa <__ssvfscanf_r+0x3a2>
 800f1ea:	3408      	adds	r4, #8
 800f1ec:	b2a4      	uxth	r4, r4
 800f1ee:	00a1      	lsls	r1, r4, #2
 800f1f0:	f002 f804 	bl	80111fc <realloc>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d100      	bne.n	800f1fa <__ssvfscanf_r+0x5f2>
 800f1f8:	e6d7      	b.n	800efaa <__ssvfscanf_r+0x3a2>
 800f1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1fc:	6018      	str	r0, [r3, #0]
 800f1fe:	809c      	strh	r4, [r3, #4]
 800f200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f202:	1c72      	adds	r2, r6, #1
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f208:	00b6      	lsls	r6, r6, #2
 800f20a:	002c      	movs	r4, r5
 800f20c:	50f5      	str	r5, [r6, r3]
 800f20e:	6a3d      	ldr	r5, [r7, #32]
 800f210:	80ca      	strh	r2, [r1, #6]
 800f212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f214:	0029      	movs	r1, r5
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	2201      	movs	r2, #1
 800f21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f21e:	f002 fc20 	bl	8011a62 <_sfread_r>
 800f222:	1e05      	subs	r5, r0, #0
 800f224:	d100      	bne.n	800f228 <__ssvfscanf_r+0x620>
 800f226:	e5be      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f228:	2c00      	cmp	r4, #0
 800f22a:	d009      	beq.n	800f240 <__ssvfscanf_r+0x638>
 800f22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f22e:	4283      	cmp	r3, r0
 800f230:	d906      	bls.n	800f240 <__ssvfscanf_r+0x638>
 800f232:	0001      	movs	r1, r0
 800f234:	6820      	ldr	r0, [r4, #0]
 800f236:	f001 ffe1 	bl	80111fc <realloc>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d000      	beq.n	800f240 <__ssvfscanf_r+0x638>
 800f23e:	6020      	str	r0, [r4, #0]
 800f240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f242:	195b      	adds	r3, r3, r5
 800f244:	63bb      	str	r3, [r7, #56]	; 0x38
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	3301      	adds	r3, #1
 800f24a:	e4f8      	b.n	800ec3e <__ssvfscanf_r+0x36>
 800f24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d101      	bne.n	800f256 <__ssvfscanf_r+0x64e>
 800f252:	3b01      	subs	r3, #1
 800f254:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f256:	2210      	movs	r2, #16
 800f258:	2301      	movs	r3, #1
 800f25a:	0034      	movs	r4, r6
 800f25c:	4032      	ands	r2, r6
 800f25e:	401c      	ands	r4, r3
 800f260:	623a      	str	r2, [r7, #32]
 800f262:	421e      	tst	r6, r3
 800f264:	d100      	bne.n	800f268 <__ssvfscanf_r+0x660>
 800f266:	e116      	b.n	800f496 <__ssvfscanf_r+0x88e>
 800f268:	2a00      	cmp	r2, #0
 800f26a:	d000      	beq.n	800f26e <__ssvfscanf_r+0x666>
 800f26c:	e0b0      	b.n	800f3d0 <__ssvfscanf_r+0x7c8>
 800f26e:	2080      	movs	r0, #128	; 0x80
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	cb10      	ldmia	r3!, {r4}
 800f274:	60fb      	str	r3, [r7, #12]
 800f276:	4206      	tst	r6, r0
 800f278:	d100      	bne.n	800f27c <__ssvfscanf_r+0x674>
 800f27a:	e0b2      	b.n	800f3e2 <__ssvfscanf_r+0x7da>
 800f27c:	2c00      	cmp	r4, #0
 800f27e:	d100      	bne.n	800f282 <__ssvfscanf_r+0x67a>
 800f280:	e68d      	b.n	800ef9e <__ssvfscanf_r+0x396>
 800f282:	f7fb fd19 	bl	800acb8 <malloc>
 800f286:	6338      	str	r0, [r7, #48]	; 0x30
 800f288:	2800      	cmp	r0, #0
 800f28a:	d100      	bne.n	800f28e <__ssvfscanf_r+0x686>
 800f28c:	e684      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f294:	88de      	ldrh	r6, [r3, #6]
 800f296:	889d      	ldrh	r5, [r3, #4]
 800f298:	42ae      	cmp	r6, r5
 800f29a:	d310      	bcc.n	800f2be <__ssvfscanf_r+0x6b6>
 800f29c:	4b90      	ldr	r3, [pc, #576]	; (800f4e0 <__ssvfscanf_r+0x8d8>)
 800f29e:	429d      	cmp	r5, r3
 800f2a0:	d900      	bls.n	800f2a4 <__ssvfscanf_r+0x69c>
 800f2a2:	e679      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a6:	3508      	adds	r5, #8
 800f2a8:	b2ad      	uxth	r5, r5
 800f2aa:	6818      	ldr	r0, [r3, #0]
 800f2ac:	00a9      	lsls	r1, r5, #2
 800f2ae:	f001 ffa5 	bl	80111fc <realloc>
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d100      	bne.n	800f2b8 <__ssvfscanf_r+0x6b0>
 800f2b6:	e66f      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ba:	6018      	str	r0, [r3, #0]
 800f2bc:	809d      	strh	r5, [r3, #4]
 800f2be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c0:	1c72      	adds	r2, r6, #1
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	00b6      	lsls	r6, r6, #2
 800f2c6:	50f4      	str	r4, [r6, r3]
 800f2c8:	2320      	movs	r3, #32
 800f2ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2cc:	0026      	movs	r6, r4
 800f2ce:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f2d0:	80ca      	strh	r2, [r1, #6]
 800f2d2:	613b      	str	r3, [r7, #16]
 800f2d4:	2500      	movs	r5, #0
 800f2d6:	f7fd f8a1 	bl	800c41c <__locale_mb_cur_max>
 800f2da:	42a8      	cmp	r0, r5
 800f2dc:	d100      	bne.n	800f2e0 <__ssvfscanf_r+0x6d8>
 800f2de:	e562      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f2e0:	1c6a      	adds	r2, r5, #1
 800f2e2:	61fa      	str	r2, [r7, #28]
 800f2e4:	228c      	movs	r2, #140	; 0x8c
 800f2e6:	2048      	movs	r0, #72	; 0x48
 800f2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2ea:	0052      	lsls	r2, r2, #1
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	1812      	adds	r2, r2, r0
 800f2f0:	7819      	ldrb	r1, [r3, #0]
 800f2f2:	19d2      	adds	r2, r2, r7
 800f2f4:	5551      	strb	r1, [r2, r5]
 800f2f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2fa:	6852      	ldr	r2, [r2, #4]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	600b      	str	r3, [r1, #0]
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	3a01      	subs	r2, #1
 800f304:	604a      	str	r2, [r1, #4]
 800f306:	2b03      	cmp	r3, #3
 800f308:	d102      	bne.n	800f310 <__ssvfscanf_r+0x708>
 800f30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d006      	beq.n	800f31e <__ssvfscanf_r+0x716>
 800f310:	2048      	movs	r0, #72	; 0x48
 800f312:	2208      	movs	r2, #8
 800f314:	1813      	adds	r3, r2, r0
 800f316:	2100      	movs	r1, #0
 800f318:	19d8      	adds	r0, r3, r7
 800f31a:	f7fc fff3 	bl	800c304 <memset>
 800f31e:	2148      	movs	r1, #72	; 0x48
 800f320:	2308      	movs	r3, #8
 800f322:	228c      	movs	r2, #140	; 0x8c
 800f324:	185b      	adds	r3, r3, r1
 800f326:	0052      	lsls	r2, r2, #1
 800f328:	19db      	adds	r3, r3, r7
 800f32a:	1852      	adds	r2, r2, r1
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	0021      	movs	r1, r4
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f334:	19d2      	adds	r2, r2, r7
 800f336:	f002 fa75 	bl	8011824 <_mbrtowc_r>
 800f33a:	0003      	movs	r3, r0
 800f33c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f33e:	3301      	adds	r3, #1
 800f340:	d100      	bne.n	800f344 <__ssvfscanf_r+0x73c>
 800f342:	e530      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f344:	2800      	cmp	r0, #0
 800f346:	d151      	bne.n	800f3ec <__ssvfscanf_r+0x7e4>
 800f348:	6020      	str	r0, [r4, #0]
 800f34a:	2301      	movs	r3, #1
 800f34c:	6825      	ldr	r5, [r4, #0]
 800f34e:	425b      	negs	r3, r3
 800f350:	1c6a      	adds	r2, r5, #1
 800f352:	d01a      	beq.n	800f38a <__ssvfscanf_r+0x782>
 800f354:	2048      	movs	r0, #72	; 0x48
 800f356:	3311      	adds	r3, #17
 800f358:	181b      	adds	r3, r3, r0
 800f35a:	2208      	movs	r2, #8
 800f35c:	2100      	movs	r1, #0
 800f35e:	19d8      	adds	r0, r3, r7
 800f360:	f7fc ffd0 	bl	800c304 <memset>
 800f364:	4b5f      	ldr	r3, [pc, #380]	; (800f4e4 <__ssvfscanf_r+0x8dc>)
 800f366:	2148      	movs	r1, #72	; 0x48
 800f368:	33e0      	adds	r3, #224	; 0xe0
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	2310      	movs	r3, #16
 800f36e:	4694      	mov	ip, r2
 800f370:	185b      	adds	r3, r3, r1
 800f372:	002a      	movs	r2, r5
 800f374:	19db      	adds	r3, r3, r7
 800f376:	4665      	mov	r5, ip
 800f378:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f37a:	1879      	adds	r1, r7, r1
 800f37c:	47a8      	blx	r5
 800f37e:	2300      	movs	r3, #0
 800f380:	2801      	cmp	r0, #1
 800f382:	d102      	bne.n	800f38a <__ssvfscanf_r+0x782>
 800f384:	3348      	adds	r3, #72	; 0x48
 800f386:	18fb      	adds	r3, r7, r3
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	2218      	movs	r2, #24
 800f38c:	2148      	movs	r1, #72	; 0x48
 800f38e:	1852      	adds	r2, r2, r1
 800f390:	19d2      	adds	r2, r2, r7
 800f392:	5cd3      	ldrb	r3, [r2, r3]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d149      	bne.n	800f42c <__ssvfscanf_r+0x824>
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d137      	bne.n	800f40e <__ssvfscanf_r+0x806>
 800f39e:	6a3b      	ldr	r3, [r7, #32]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d113      	bne.n	800f3cc <__ssvfscanf_r+0x7c4>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	2e00      	cmp	r6, #0
 800f3a8:	d00d      	beq.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	693a      	ldr	r2, [r7, #16]
 800f3ae:	1ae4      	subs	r4, r4, r3
 800f3b0:	10a3      	asrs	r3, r4, #2
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d906      	bls.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f3b8:	6830      	ldr	r0, [r6, #0]
 800f3ba:	1d21      	adds	r1, r4, #4
 800f3bc:	f001 ff1e 	bl	80111fc <realloc>
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d000      	beq.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f3c4:	6030      	str	r0, [r6, #0]
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	e593      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	001e      	movs	r6, r3
 800f3d8:	613b      	str	r3, [r7, #16]
 800f3da:	633b      	str	r3, [r7, #48]	; 0x30
 800f3dc:	334c      	adds	r3, #76	; 0x4c
 800f3de:	18fc      	adds	r4, r7, r3
 800f3e0:	e778      	b.n	800f2d4 <__ssvfscanf_r+0x6cc>
 800f3e2:	6a3b      	ldr	r3, [r7, #32]
 800f3e4:	001e      	movs	r6, r3
 800f3e6:	613b      	str	r3, [r7, #16]
 800f3e8:	633b      	str	r3, [r7, #48]	; 0x30
 800f3ea:	e773      	b.n	800f2d4 <__ssvfscanf_r+0x6cc>
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	69fd      	ldr	r5, [r7, #28]
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	d1aa      	bne.n	800f34a <__ssvfscanf_r+0x742>
 800f3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dc47      	bgt.n	800f48c <__ssvfscanf_r+0x884>
 800f3fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f400:	f002 fb10 	bl	8011a24 <__ssrefill_r>
 800f404:	2800      	cmp	r0, #0
 800f406:	d041      	beq.n	800f48c <__ssvfscanf_r+0x884>
 800f408:	2d00      	cmp	r5, #0
 800f40a:	d0c8      	beq.n	800f39e <__ssvfscanf_r+0x796>
 800f40c:	e4cb      	b.n	800eda6 <__ssvfscanf_r+0x19e>
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	2248      	movs	r2, #72	; 0x48
 800f412:	3b01      	subs	r3, #1
 800f414:	61fb      	str	r3, [r7, #28]
 800f416:	238c      	movs	r3, #140	; 0x8c
 800f418:	005b      	lsls	r3, r3, #1
 800f41a:	189b      	adds	r3, r3, r2
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	19db      	adds	r3, r3, r7
 800f420:	5cd1      	ldrb	r1, [r2, r3]
 800f422:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f426:	f002 fac1 	bl	80119ac <_sungetc_r>
 800f42a:	e7b5      	b.n	800f398 <__ssvfscanf_r+0x790>
 800f42c:	69fa      	ldr	r2, [r7, #28]
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	4694      	mov	ip, r2
 800f432:	4463      	add	r3, ip
 800f434:	63bb      	str	r3, [r7, #56]	; 0x38
 800f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f438:	2b03      	cmp	r3, #3
 800f43a:	d102      	bne.n	800f442 <__ssvfscanf_r+0x83a>
 800f43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d002      	beq.n	800f448 <__ssvfscanf_r+0x840>
 800f442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f444:	3b01      	subs	r3, #1
 800f446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11a      	bne.n	800f484 <__ssvfscanf_r+0x87c>
 800f44e:	3404      	adds	r4, #4
 800f450:	2e00      	cmp	r6, #0
 800f452:	d019      	beq.n	800f488 <__ssvfscanf_r+0x880>
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	1ae3      	subs	r3, r4, r3
 800f45a:	61fb      	str	r3, [r7, #28]
 800f45c:	6a3d      	ldr	r5, [r7, #32]
 800f45e:	109b      	asrs	r3, r3, #2
 800f460:	4293      	cmp	r3, r2
 800f462:	d3c7      	bcc.n	800f3f4 <__ssvfscanf_r+0x7ec>
 800f464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f466:	00d1      	lsls	r1, r2, #3
 800f468:	f001 fec8 	bl	80111fc <realloc>
 800f46c:	6338      	str	r0, [r7, #48]	; 0x30
 800f46e:	2800      	cmp	r0, #0
 800f470:	d100      	bne.n	800f474 <__ssvfscanf_r+0x86c>
 800f472:	e591      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f474:	4684      	mov	ip, r0
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	69fc      	ldr	r4, [r7, #28]
 800f47a:	005b      	lsls	r3, r3, #1
 800f47c:	4464      	add	r4, ip
 800f47e:	6030      	str	r0, [r6, #0]
 800f480:	613b      	str	r3, [r7, #16]
 800f482:	e7b7      	b.n	800f3f4 <__ssvfscanf_r+0x7ec>
 800f484:	2500      	movs	r5, #0
 800f486:	e7b5      	b.n	800f3f4 <__ssvfscanf_r+0x7ec>
 800f488:	0035      	movs	r5, r6
 800f48a:	e7b3      	b.n	800f3f4 <__ssvfscanf_r+0x7ec>
 800f48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d000      	beq.n	800f494 <__ssvfscanf_r+0x88c>
 800f492:	e720      	b.n	800f2d6 <__ssvfscanf_r+0x6ce>
 800f494:	e783      	b.n	800f39e <__ssvfscanf_r+0x796>
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d025      	beq.n	800f4e8 <__ssvfscanf_r+0x8e0>
 800f49c:	2118      	movs	r1, #24
 800f49e:	2048      	movs	r0, #72	; 0x48
 800f4a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a2:	1809      	adds	r1, r1, r0
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	19c9      	adds	r1, r1, r7
 800f4a8:	781a      	ldrb	r2, [r3, #0]
 800f4aa:	5c8a      	ldrb	r2, [r1, r2]
 800f4ac:	2a00      	cmp	r2, #0
 800f4ae:	d103      	bne.n	800f4b8 <__ssvfscanf_r+0x8b0>
 800f4b0:	2c00      	cmp	r4, #0
 800f4b2:	d000      	beq.n	800f4b6 <__ssvfscanf_r+0x8ae>
 800f4b4:	e66c      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f4b6:	e4a4      	b.n	800ee02 <__ssvfscanf_r+0x1fa>
 800f4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4bc:	6852      	ldr	r2, [r2, #4]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	600b      	str	r3, [r1, #0]
 800f4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4c4:	3a01      	subs	r2, #1
 800f4c6:	3401      	adds	r4, #1
 800f4c8:	604a      	str	r2, [r1, #4]
 800f4ca:	429c      	cmp	r4, r3
 800f4cc:	d100      	bne.n	800f4d0 <__ssvfscanf_r+0x8c8>
 800f4ce:	e65f      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	dce3      	bgt.n	800f49c <__ssvfscanf_r+0x894>
 800f4d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4d6:	f002 faa5 	bl	8011a24 <__ssrefill_r>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d0de      	beq.n	800f49c <__ssvfscanf_r+0x894>
 800f4de:	e657      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f4e0:	0000fff6 	.word	0x0000fff6
 800f4e4:	20000444 	.word	0x20000444
 800f4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ea:	0032      	movs	r2, r6
 800f4ec:	cb20      	ldmia	r3!, {r5}
 800f4ee:	61fb      	str	r3, [r7, #28]
 800f4f0:	2380      	movs	r3, #128	; 0x80
 800f4f2:	401a      	ands	r2, r3
 800f4f4:	421e      	tst	r6, r3
 800f4f6:	d100      	bne.n	800f4fa <__ssvfscanf_r+0x8f2>
 800f4f8:	e086      	b.n	800f608 <__ssvfscanf_r+0xa00>
 800f4fa:	2d00      	cmp	r5, #0
 800f4fc:	d100      	bne.n	800f500 <__ssvfscanf_r+0x8f8>
 800f4fe:	e480      	b.n	800ee02 <__ssvfscanf_r+0x1fa>
 800f500:	2020      	movs	r0, #32
 800f502:	f7fb fbd9 	bl	800acb8 <malloc>
 800f506:	6338      	str	r0, [r7, #48]	; 0x30
 800f508:	2800      	cmp	r0, #0
 800f50a:	d100      	bne.n	800f50e <__ssvfscanf_r+0x906>
 800f50c:	e452      	b.n	800edb4 <__ssvfscanf_r+0x1ac>
 800f50e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f510:	6028      	str	r0, [r5, #0]
 800f512:	88de      	ldrh	r6, [r3, #6]
 800f514:	889c      	ldrh	r4, [r3, #4]
 800f516:	6818      	ldr	r0, [r3, #0]
 800f518:	42a6      	cmp	r6, r4
 800f51a:	d30e      	bcc.n	800f53a <__ssvfscanf_r+0x932>
 800f51c:	4bc3      	ldr	r3, [pc, #780]	; (800f82c <__ssvfscanf_r+0xc24>)
 800f51e:	429c      	cmp	r4, r3
 800f520:	d900      	bls.n	800f524 <__ssvfscanf_r+0x91c>
 800f522:	e542      	b.n	800efaa <__ssvfscanf_r+0x3a2>
 800f524:	3408      	adds	r4, #8
 800f526:	b2a4      	uxth	r4, r4
 800f528:	00a1      	lsls	r1, r4, #2
 800f52a:	f001 fe67 	bl	80111fc <realloc>
 800f52e:	2800      	cmp	r0, #0
 800f530:	d100      	bne.n	800f534 <__ssvfscanf_r+0x92c>
 800f532:	e53a      	b.n	800efaa <__ssvfscanf_r+0x3a2>
 800f534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f536:	6018      	str	r0, [r3, #0]
 800f538:	809c      	strh	r4, [r3, #4]
 800f53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f53c:	1c72      	adds	r2, r6, #1
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	00b6      	lsls	r6, r6, #2
 800f542:	50f5      	str	r5, [r6, r3]
 800f544:	2320      	movs	r3, #32
 800f546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f548:	002e      	movs	r6, r5
 800f54a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f54c:	80ca      	strh	r2, [r1, #6]
 800f54e:	623b      	str	r3, [r7, #32]
 800f550:	002c      	movs	r4, r5
 800f552:	2118      	movs	r1, #24
 800f554:	2048      	movs	r0, #72	; 0x48
 800f556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f558:	1809      	adds	r1, r1, r0
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	19c9      	adds	r1, r1, r7
 800f55e:	781a      	ldrb	r2, [r3, #0]
 800f560:	5c8a      	ldrb	r2, [r1, r2]
 800f562:	2a00      	cmp	r2, #0
 800f564:	d101      	bne.n	800f56a <__ssvfscanf_r+0x962>
 800f566:	633d      	str	r5, [r7, #48]	; 0x30
 800f568:	e031      	b.n	800f5ce <__ssvfscanf_r+0x9c6>
 800f56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f56c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f56e:	6852      	ldr	r2, [r2, #4]
 800f570:	3a01      	subs	r2, #1
 800f572:	604a      	str	r2, [r1, #4]
 800f574:	1c5a      	adds	r2, r3, #1
 800f576:	600a      	str	r2, [r1, #0]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	1c6a      	adds	r2, r5, #1
 800f57c:	633a      	str	r2, [r7, #48]	; 0x30
 800f57e:	702b      	strb	r3, [r5, #0]
 800f580:	2e00      	cmp	r6, #0
 800f582:	d010      	beq.n	800f5a6 <__ssvfscanf_r+0x99e>
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	1b15      	subs	r5, r2, r4
 800f588:	429d      	cmp	r5, r3
 800f58a:	d30c      	bcc.n	800f5a6 <__ssvfscanf_r+0x99e>
 800f58c:	005b      	lsls	r3, r3, #1
 800f58e:	0020      	movs	r0, r4
 800f590:	0019      	movs	r1, r3
 800f592:	623b      	str	r3, [r7, #32]
 800f594:	f001 fe32 	bl	80111fc <realloc>
 800f598:	1e04      	subs	r4, r0, #0
 800f59a:	d101      	bne.n	800f5a0 <__ssvfscanf_r+0x998>
 800f59c:	f7ff fc0a 	bl	800edb4 <__ssvfscanf_r+0x1ac>
 800f5a0:	1943      	adds	r3, r0, r5
 800f5a2:	633b      	str	r3, [r7, #48]	; 0x30
 800f5a4:	6030      	str	r0, [r6, #0]
 800f5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00e      	beq.n	800f5ce <__ssvfscanf_r+0x9c6>
 800f5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5b2:	685b      	ldr	r3, [r3, #4]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	dc2a      	bgt.n	800f60e <__ssvfscanf_r+0xa06>
 800f5b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5bc:	f002 fa32 	bl	8011a24 <__ssrefill_r>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d024      	beq.n	800f60e <__ssvfscanf_r+0xa06>
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	42a3      	cmp	r3, r4
 800f5c8:	d101      	bne.n	800f5ce <__ssvfscanf_r+0x9c6>
 800f5ca:	f7ff fbec 	bl	800eda6 <__ssvfscanf_r+0x19e>
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	1b1d      	subs	r5, r3, r4
 800f5d2:	42a3      	cmp	r3, r4
 800f5d4:	d101      	bne.n	800f5da <__ssvfscanf_r+0x9d2>
 800f5d6:	f7ff fc14 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5de:	7013      	strb	r3, [r2, #0]
 800f5e0:	429e      	cmp	r6, r3
 800f5e2:	d009      	beq.n	800f5f8 <__ssvfscanf_r+0x9f0>
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	1c69      	adds	r1, r5, #1
 800f5e8:	428b      	cmp	r3, r1
 800f5ea:	d905      	bls.n	800f5f8 <__ssvfscanf_r+0x9f0>
 800f5ec:	6830      	ldr	r0, [r6, #0]
 800f5ee:	f001 fe05 	bl	80111fc <realloc>
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	d000      	beq.n	800f5f8 <__ssvfscanf_r+0x9f0>
 800f5f6:	6030      	str	r0, [r6, #0]
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	195b      	adds	r3, r3, r5
 800f602:	63bb      	str	r3, [r7, #56]	; 0x38
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	e477      	b.n	800eef8 <__ssvfscanf_r+0x2f0>
 800f608:	0016      	movs	r6, r2
 800f60a:	623a      	str	r2, [r7, #32]
 800f60c:	e7a0      	b.n	800f550 <__ssvfscanf_r+0x948>
 800f60e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f610:	e79f      	b.n	800f552 <__ssvfscanf_r+0x94a>
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	2b00      	cmp	r3, #0
 800f616:	d101      	bne.n	800f61c <__ssvfscanf_r+0xa14>
 800f618:	3b01      	subs	r3, #1
 800f61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f61c:	2210      	movs	r2, #16
 800f61e:	2301      	movs	r3, #1
 800f620:	0034      	movs	r4, r6
 800f622:	4032      	ands	r2, r6
 800f624:	401c      	ands	r4, r3
 800f626:	61fa      	str	r2, [r7, #28]
 800f628:	421e      	tst	r6, r3
 800f62a:	d100      	bne.n	800f62e <__ssvfscanf_r+0xa26>
 800f62c:	e102      	b.n	800f834 <__ssvfscanf_r+0xc2c>
 800f62e:	2a00      	cmp	r2, #0
 800f630:	d000      	beq.n	800f634 <__ssvfscanf_r+0xa2c>
 800f632:	e09f      	b.n	800f774 <__ssvfscanf_r+0xb6c>
 800f634:	2080      	movs	r0, #128	; 0x80
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	cb10      	ldmia	r3!, {r4}
 800f63a:	60fb      	str	r3, [r7, #12]
 800f63c:	4206      	tst	r6, r0
 800f63e:	d100      	bne.n	800f642 <__ssvfscanf_r+0xa3a>
 800f640:	e0a1      	b.n	800f786 <__ssvfscanf_r+0xb7e>
 800f642:	2c00      	cmp	r4, #0
 800f644:	d100      	bne.n	800f648 <__ssvfscanf_r+0xa40>
 800f646:	e4aa      	b.n	800ef9e <__ssvfscanf_r+0x396>
 800f648:	f7fb fb36 	bl	800acb8 <malloc>
 800f64c:	6338      	str	r0, [r7, #48]	; 0x30
 800f64e:	2800      	cmp	r0, #0
 800f650:	d100      	bne.n	800f654 <__ssvfscanf_r+0xa4c>
 800f652:	e4a1      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	6023      	str	r3, [r4, #0]
 800f658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f65a:	88de      	ldrh	r6, [r3, #6]
 800f65c:	889d      	ldrh	r5, [r3, #4]
 800f65e:	42ae      	cmp	r6, r5
 800f660:	d310      	bcc.n	800f684 <__ssvfscanf_r+0xa7c>
 800f662:	4b72      	ldr	r3, [pc, #456]	; (800f82c <__ssvfscanf_r+0xc24>)
 800f664:	429d      	cmp	r5, r3
 800f666:	d900      	bls.n	800f66a <__ssvfscanf_r+0xa62>
 800f668:	e496      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66c:	3508      	adds	r5, #8
 800f66e:	b2ad      	uxth	r5, r5
 800f670:	6818      	ldr	r0, [r3, #0]
 800f672:	00a9      	lsls	r1, r5, #2
 800f674:	f001 fdc2 	bl	80111fc <realloc>
 800f678:	2800      	cmp	r0, #0
 800f67a:	d100      	bne.n	800f67e <__ssvfscanf_r+0xa76>
 800f67c:	e48c      	b.n	800ef98 <__ssvfscanf_r+0x390>
 800f67e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f680:	6018      	str	r0, [r3, #0]
 800f682:	809d      	strh	r5, [r3, #4]
 800f684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f686:	1c72      	adds	r2, r6, #1
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	00b6      	lsls	r6, r6, #2
 800f68c:	50f4      	str	r4, [r6, r3]
 800f68e:	2320      	movs	r3, #32
 800f690:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f692:	0025      	movs	r5, r4
 800f694:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f696:	80ca      	strh	r2, [r1, #6]
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	2300      	movs	r3, #0
 800f69c:	623b      	str	r3, [r7, #32]
 800f69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6a0:	4a63      	ldr	r2, [pc, #396]	; (800f830 <__ssvfscanf_r+0xc28>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	5cd3      	ldrb	r3, [r2, r3]
 800f6a8:	2208      	movs	r2, #8
 800f6aa:	4213      	tst	r3, r2
 800f6ac:	d149      	bne.n	800f742 <__ssvfscanf_r+0xb3a>
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d046      	beq.n	800f742 <__ssvfscanf_r+0xb3a>
 800f6b4:	f7fc feb2 	bl	800c41c <__locale_mb_cur_max>
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	4298      	cmp	r0, r3
 800f6bc:	d101      	bne.n	800f6c2 <__ssvfscanf_r+0xaba>
 800f6be:	f7ff fb72 	bl	800eda6 <__ssvfscanf_r+0x19e>
 800f6c2:	6a3a      	ldr	r2, [r7, #32]
 800f6c4:	2048      	movs	r0, #72	; 0x48
 800f6c6:	1c56      	adds	r6, r2, #1
 800f6c8:	228c      	movs	r2, #140	; 0x8c
 800f6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6cc:	0052      	lsls	r2, r2, #1
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	1812      	adds	r2, r2, r0
 800f6d2:	7819      	ldrb	r1, [r3, #0]
 800f6d4:	6a38      	ldr	r0, [r7, #32]
 800f6d6:	19d2      	adds	r2, r2, r7
 800f6d8:	5411      	strb	r1, [r2, r0]
 800f6da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f6dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6de:	6852      	ldr	r2, [r2, #4]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	600b      	str	r3, [r1, #0]
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	3a01      	subs	r2, #1
 800f6e8:	604a      	str	r2, [r1, #4]
 800f6ea:	2b03      	cmp	r3, #3
 800f6ec:	d102      	bne.n	800f6f4 <__ssvfscanf_r+0xaec>
 800f6ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6f0:	2b04      	cmp	r3, #4
 800f6f2:	d007      	beq.n	800f704 <__ssvfscanf_r+0xafc>
 800f6f4:	2048      	movs	r0, #72	; 0x48
 800f6f6:	2310      	movs	r3, #16
 800f6f8:	181b      	adds	r3, r3, r0
 800f6fa:	2208      	movs	r2, #8
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	19d8      	adds	r0, r3, r7
 800f700:	f7fc fe00 	bl	800c304 <memset>
 800f704:	2148      	movs	r1, #72	; 0x48
 800f706:	2310      	movs	r3, #16
 800f708:	228c      	movs	r2, #140	; 0x8c
 800f70a:	185b      	adds	r3, r3, r1
 800f70c:	0052      	lsls	r2, r2, #1
 800f70e:	19db      	adds	r3, r3, r7
 800f710:	1852      	adds	r2, r2, r1
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	0021      	movs	r1, r4
 800f716:	0033      	movs	r3, r6
 800f718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f71a:	19d2      	adds	r2, r2, r7
 800f71c:	f002 f882 	bl	8011824 <_mbrtowc_r>
 800f720:	0003      	movs	r3, r0
 800f722:	62b8      	str	r0, [r7, #40]	; 0x28
 800f724:	3301      	adds	r3, #1
 800f726:	d101      	bne.n	800f72c <__ssvfscanf_r+0xb24>
 800f728:	f7ff fb3d 	bl	800eda6 <__ssvfscanf_r+0x19e>
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d12f      	bne.n	800f790 <__ssvfscanf_r+0xb88>
 800f730:	6020      	str	r0, [r4, #0]
 800f732:	6820      	ldr	r0, [r4, #0]
 800f734:	f002 f894 	bl	8011860 <iswspace>
 800f738:	6238      	str	r0, [r7, #32]
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d04a      	beq.n	800f7d4 <__ssvfscanf_r+0xbcc>
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d13c      	bne.n	800f7bc <__ssvfscanf_r+0xbb4>
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d000      	beq.n	800f74a <__ssvfscanf_r+0xb42>
 800f748:	e640      	b.n	800f3cc <__ssvfscanf_r+0x7c4>
 800f74a:	6023      	str	r3, [r4, #0]
 800f74c:	2d00      	cmp	r5, #0
 800f74e:	d100      	bne.n	800f752 <__ssvfscanf_r+0xb4a>
 800f750:	e639      	b.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	1ae4      	subs	r4, r4, r3
 800f758:	10a3      	asrs	r3, r4, #2
 800f75a:	3301      	adds	r3, #1
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d800      	bhi.n	800f762 <__ssvfscanf_r+0xb5a>
 800f760:	e631      	b.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f762:	6828      	ldr	r0, [r5, #0]
 800f764:	1d21      	adds	r1, r4, #4
 800f766:	f001 fd49 	bl	80111fc <realloc>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d100      	bne.n	800f770 <__ssvfscanf_r+0xb68>
 800f76e:	e62a      	b.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f770:	6028      	str	r0, [r5, #0]
 800f772:	e628      	b.n	800f3c6 <__ssvfscanf_r+0x7be>
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	2300      	movs	r3, #0
 800f77a:	001d      	movs	r5, r3
 800f77c:	613b      	str	r3, [r7, #16]
 800f77e:	633b      	str	r3, [r7, #48]	; 0x30
 800f780:	334c      	adds	r3, #76	; 0x4c
 800f782:	18fc      	adds	r4, r7, r3
 800f784:	e789      	b.n	800f69a <__ssvfscanf_r+0xa92>
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	001d      	movs	r5, r3
 800f78a:	613b      	str	r3, [r7, #16]
 800f78c:	633b      	str	r3, [r7, #48]	; 0x30
 800f78e:	e784      	b.n	800f69a <__ssvfscanf_r+0xa92>
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	623e      	str	r6, [r7, #32]
 800f794:	3302      	adds	r3, #2
 800f796:	d1cc      	bne.n	800f732 <__ssvfscanf_r+0xb2a>
 800f798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dd00      	ble.n	800f7a2 <__ssvfscanf_r+0xb9a>
 800f7a0:	e77d      	b.n	800f69e <__ssvfscanf_r+0xa96>
 800f7a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f7a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7a6:	f002 f93d 	bl	8011a24 <__ssrefill_r>
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d100      	bne.n	800f7b0 <__ssvfscanf_r+0xba8>
 800f7ae:	e776      	b.n	800f69e <__ssvfscanf_r+0xa96>
 800f7b0:	6a3b      	ldr	r3, [r7, #32]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d001      	beq.n	800f7ba <__ssvfscanf_r+0xbb2>
 800f7b6:	f7ff faf6 	bl	800eda6 <__ssvfscanf_r+0x19e>
 800f7ba:	e7c2      	b.n	800f742 <__ssvfscanf_r+0xb3a>
 800f7bc:	238c      	movs	r3, #140	; 0x8c
 800f7be:	2248      	movs	r2, #72	; 0x48
 800f7c0:	005b      	lsls	r3, r3, #1
 800f7c2:	189b      	adds	r3, r3, r2
 800f7c4:	3e01      	subs	r6, #1
 800f7c6:	19db      	adds	r3, r3, r7
 800f7c8:	5cf1      	ldrb	r1, [r6, r3]
 800f7ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7ce:	f002 f8ed 	bl	80119ac <_sungetc_r>
 800f7d2:	e7b4      	b.n	800f73e <__ssvfscanf_r+0xb36>
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	199b      	adds	r3, r3, r6
 800f7d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7dc:	2b03      	cmp	r3, #3
 800f7de:	d102      	bne.n	800f7e6 <__ssvfscanf_r+0xbde>
 800f7e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7e2:	2b04      	cmp	r3, #4
 800f7e4:	d002      	beq.n	800f7ec <__ssvfscanf_r+0xbe4>
 800f7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1d2      	bne.n	800f798 <__ssvfscanf_r+0xb90>
 800f7f2:	3404      	adds	r4, #4
 800f7f4:	2d00      	cmp	r5, #0
 800f7f6:	d016      	beq.n	800f826 <__ssvfscanf_r+0xc1e>
 800f7f8:	69fa      	ldr	r2, [r7, #28]
 800f7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fc:	623a      	str	r2, [r7, #32]
 800f7fe:	693a      	ldr	r2, [r7, #16]
 800f800:	1ae6      	subs	r6, r4, r3
 800f802:	10b3      	asrs	r3, r6, #2
 800f804:	4293      	cmp	r3, r2
 800f806:	d3c7      	bcc.n	800f798 <__ssvfscanf_r+0xb90>
 800f808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f80a:	00d1      	lsls	r1, r2, #3
 800f80c:	f001 fcf6 	bl	80111fc <realloc>
 800f810:	6338      	str	r0, [r7, #48]	; 0x30
 800f812:	2800      	cmp	r0, #0
 800f814:	d101      	bne.n	800f81a <__ssvfscanf_r+0xc12>
 800f816:	f7ff fbbf 	bl	800ef98 <__ssvfscanf_r+0x390>
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	1984      	adds	r4, r0, r6
 800f81e:	005b      	lsls	r3, r3, #1
 800f820:	6028      	str	r0, [r5, #0]
 800f822:	613b      	str	r3, [r7, #16]
 800f824:	e7b8      	b.n	800f798 <__ssvfscanf_r+0xb90>
 800f826:	623d      	str	r5, [r7, #32]
 800f828:	e7b6      	b.n	800f798 <__ssvfscanf_r+0xb90>
 800f82a:	46c0      	nop			; (mov r8, r8)
 800f82c:	0000fff6 	.word	0x0000fff6
 800f830:	08014a81 	.word	0x08014a81
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d01c      	beq.n	800f874 <__ssvfscanf_r+0xc6c>
 800f83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83c:	49bf      	ldr	r1, [pc, #764]	; (800fb3c <__ssvfscanf_r+0xf34>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	781a      	ldrb	r2, [r3, #0]
 800f842:	5c8a      	ldrb	r2, [r1, r2]
 800f844:	2108      	movs	r1, #8
 800f846:	420a      	tst	r2, r1
 800f848:	d000      	beq.n	800f84c <__ssvfscanf_r+0xc44>
 800f84a:	e4a1      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f84c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f850:	6852      	ldr	r2, [r2, #4]
 800f852:	3301      	adds	r3, #1
 800f854:	600b      	str	r3, [r1, #0]
 800f856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f858:	3a01      	subs	r2, #1
 800f85a:	3401      	adds	r4, #1
 800f85c:	604a      	str	r2, [r1, #4]
 800f85e:	429c      	cmp	r4, r3
 800f860:	d100      	bne.n	800f864 <__ssvfscanf_r+0xc5c>
 800f862:	e495      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f864:	2a00      	cmp	r2, #0
 800f866:	dce8      	bgt.n	800f83a <__ssvfscanf_r+0xc32>
 800f868:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f86a:	f002 f8db 	bl	8011a24 <__ssrefill_r>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d0e3      	beq.n	800f83a <__ssvfscanf_r+0xc32>
 800f872:	e48d      	b.n	800f190 <__ssvfscanf_r+0x588>
 800f874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f876:	0032      	movs	r2, r6
 800f878:	cb10      	ldmia	r3!, {r4}
 800f87a:	61fb      	str	r3, [r7, #28]
 800f87c:	2380      	movs	r3, #128	; 0x80
 800f87e:	401a      	ands	r2, r3
 800f880:	421e      	tst	r6, r3
 800f882:	d039      	beq.n	800f8f8 <__ssvfscanf_r+0xcf0>
 800f884:	2c00      	cmp	r4, #0
 800f886:	d101      	bne.n	800f88c <__ssvfscanf_r+0xc84>
 800f888:	f7ff fabb 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800f88c:	2020      	movs	r0, #32
 800f88e:	f7fb fa13 	bl	800acb8 <malloc>
 800f892:	6338      	str	r0, [r7, #48]	; 0x30
 800f894:	2800      	cmp	r0, #0
 800f896:	d101      	bne.n	800f89c <__ssvfscanf_r+0xc94>
 800f898:	f7ff fa8c 	bl	800edb4 <__ssvfscanf_r+0x1ac>
 800f89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f89e:	6020      	str	r0, [r4, #0]
 800f8a0:	88de      	ldrh	r6, [r3, #6]
 800f8a2:	889d      	ldrh	r5, [r3, #4]
 800f8a4:	6818      	ldr	r0, [r3, #0]
 800f8a6:	42ae      	cmp	r6, r5
 800f8a8:	d310      	bcc.n	800f8cc <__ssvfscanf_r+0xcc4>
 800f8aa:	4ba5      	ldr	r3, [pc, #660]	; (800fb40 <__ssvfscanf_r+0xf38>)
 800f8ac:	429d      	cmp	r5, r3
 800f8ae:	d901      	bls.n	800f8b4 <__ssvfscanf_r+0xcac>
 800f8b0:	f7ff fb7b 	bl	800efaa <__ssvfscanf_r+0x3a2>
 800f8b4:	3508      	adds	r5, #8
 800f8b6:	b2ad      	uxth	r5, r5
 800f8b8:	00a9      	lsls	r1, r5, #2
 800f8ba:	f001 fc9f 	bl	80111fc <realloc>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d101      	bne.n	800f8c6 <__ssvfscanf_r+0xcbe>
 800f8c2:	f7ff fb72 	bl	800efaa <__ssvfscanf_r+0x3a2>
 800f8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c8:	6018      	str	r0, [r3, #0]
 800f8ca:	809d      	strh	r5, [r3, #4]
 800f8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ce:	1c72      	adds	r2, r6, #1
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	00b6      	lsls	r6, r6, #2
 800f8d4:	50f4      	str	r4, [r6, r3]
 800f8d6:	2320      	movs	r3, #32
 800f8d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f8da:	0026      	movs	r6, r4
 800f8dc:	80ca      	strh	r2, [r1, #6]
 800f8de:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800f8e2:	0025      	movs	r5, r4
 800f8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8e6:	4995      	ldr	r1, [pc, #596]	; (800fb3c <__ssvfscanf_r+0xf34>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	781a      	ldrb	r2, [r3, #0]
 800f8ec:	5c8a      	ldrb	r2, [r1, r2]
 800f8ee:	2108      	movs	r1, #8
 800f8f0:	420a      	tst	r2, r1
 800f8f2:	d004      	beq.n	800f8fe <__ssvfscanf_r+0xcf6>
 800f8f4:	623c      	str	r4, [r7, #32]
 800f8f6:	e031      	b.n	800f95c <__ssvfscanf_r+0xd54>
 800f8f8:	0016      	movs	r6, r2
 800f8fa:	633a      	str	r2, [r7, #48]	; 0x30
 800f8fc:	e7f1      	b.n	800f8e2 <__ssvfscanf_r+0xcda>
 800f8fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f900:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f902:	6852      	ldr	r2, [r2, #4]
 800f904:	3a01      	subs	r2, #1
 800f906:	604a      	str	r2, [r1, #4]
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	600a      	str	r2, [r1, #0]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	1c62      	adds	r2, r4, #1
 800f910:	623a      	str	r2, [r7, #32]
 800f912:	7023      	strb	r3, [r4, #0]
 800f914:	2e00      	cmp	r6, #0
 800f916:	d010      	beq.n	800f93a <__ssvfscanf_r+0xd32>
 800f918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91a:	1b54      	subs	r4, r2, r5
 800f91c:	429c      	cmp	r4, r3
 800f91e:	d30c      	bcc.n	800f93a <__ssvfscanf_r+0xd32>
 800f920:	005b      	lsls	r3, r3, #1
 800f922:	0028      	movs	r0, r5
 800f924:	0019      	movs	r1, r3
 800f926:	633b      	str	r3, [r7, #48]	; 0x30
 800f928:	f001 fc68 	bl	80111fc <realloc>
 800f92c:	1e05      	subs	r5, r0, #0
 800f92e:	d101      	bne.n	800f934 <__ssvfscanf_r+0xd2c>
 800f930:	f7ff fa40 	bl	800edb4 <__ssvfscanf_r+0x1ac>
 800f934:	1903      	adds	r3, r0, r4
 800f936:	623b      	str	r3, [r7, #32]
 800f938:	6030      	str	r0, [r6, #0]
 800f93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f93c:	3b01      	subs	r3, #1
 800f93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00b      	beq.n	800f95c <__ssvfscanf_r+0xd54>
 800f944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	dd01      	ble.n	800f950 <__ssvfscanf_r+0xd48>
 800f94c:	6a3c      	ldr	r4, [r7, #32]
 800f94e:	e7c9      	b.n	800f8e4 <__ssvfscanf_r+0xcdc>
 800f950:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f952:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f954:	f002 f866 	bl	8011a24 <__ssrefill_r>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d0f7      	beq.n	800f94c <__ssvfscanf_r+0xd44>
 800f95c:	2300      	movs	r3, #0
 800f95e:	6a3a      	ldr	r2, [r7, #32]
 800f960:	7013      	strb	r3, [r2, #0]
 800f962:	1b55      	subs	r5, r2, r5
 800f964:	2e00      	cmp	r6, #0
 800f966:	d009      	beq.n	800f97c <__ssvfscanf_r+0xd74>
 800f968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96a:	1c69      	adds	r1, r5, #1
 800f96c:	428b      	cmp	r3, r1
 800f96e:	d905      	bls.n	800f97c <__ssvfscanf_r+0xd74>
 800f970:	6830      	ldr	r0, [r6, #0]
 800f972:	f001 fc43 	bl	80111fc <realloc>
 800f976:	2800      	cmp	r0, #0
 800f978:	d000      	beq.n	800f97c <__ssvfscanf_r+0xd74>
 800f97a:	6030      	str	r0, [r6, #0]
 800f97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97e:	195b      	adds	r3, r3, r5
 800f980:	63bb      	str	r3, [r7, #56]	; 0x38
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	3301      	adds	r3, #1
 800f986:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f988:	e63c      	b.n	800f604 <__ssvfscanf_r+0x9fc>
 800f98a:	22ae      	movs	r2, #174	; 0xae
 800f98c:	2100      	movs	r1, #0
 800f98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f990:	0052      	lsls	r2, r2, #1
 800f992:	3b01      	subs	r3, #1
 800f994:	6239      	str	r1, [r7, #32]
 800f996:	4293      	cmp	r3, r2
 800f998:	d906      	bls.n	800f9a8 <__ssvfscanf_r+0xda0>
 800f99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f99c:	3b5e      	subs	r3, #94	; 0x5e
 800f99e:	3bff      	subs	r3, #255	; 0xff
 800f9a0:	623b      	str	r3, [r7, #32]
 800f9a2:	235e      	movs	r3, #94	; 0x5e
 800f9a4:	33ff      	adds	r3, #255	; 0xff
 800f9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9a8:	24d8      	movs	r4, #216	; 0xd8
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	2248      	movs	r2, #72	; 0x48
 800f9ae:	0124      	lsls	r4, r4, #4
 800f9b0:	4334      	orrs	r4, r6
 800f9b2:	2680      	movs	r6, #128	; 0x80
 800f9b4:	61fb      	str	r3, [r7, #28]
 800f9b6:	3319      	adds	r3, #25
 800f9b8:	33ff      	adds	r3, #255	; 0xff
 800f9ba:	189b      	adds	r3, r3, r2
 800f9bc:	19dd      	adds	r5, r3, r7
 800f9be:	00b6      	lsls	r6, r6, #2
 800f9c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	7813      	ldrb	r3, [r2, #0]
 800f9c6:	2b39      	cmp	r3, #57	; 0x39
 800f9c8:	d80f      	bhi.n	800f9ea <__ssvfscanf_r+0xde2>
 800f9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f9cc:	d91b      	bls.n	800fa06 <__ssvfscanf_r+0xdfe>
 800f9ce:	0018      	movs	r0, r3
 800f9d0:	382b      	subs	r0, #43	; 0x2b
 800f9d2:	280e      	cmp	r0, #14
 800f9d4:	d817      	bhi.n	800fa06 <__ssvfscanf_r+0xdfe>
 800f9d6:	f7f0 fb9d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f9da:	168f      	.short	0x168f
 800f9dc:	5416168f 	.word	0x5416168f
 800f9e0:	80808080 	.word	0x80808080
 800f9e4:	87808080 	.word	0x87808080
 800f9e8:	87          	.byte	0x87
 800f9e9:	00          	.byte	0x00
 800f9ea:	2b66      	cmp	r3, #102	; 0x66
 800f9ec:	d83a      	bhi.n	800fa64 <__ssvfscanf_r+0xe5c>
 800f9ee:	2b60      	cmp	r3, #96	; 0x60
 800f9f0:	d803      	bhi.n	800f9fa <__ssvfscanf_r+0xdf2>
 800f9f2:	2b46      	cmp	r3, #70	; 0x46
 800f9f4:	d805      	bhi.n	800fa02 <__ssvfscanf_r+0xdfa>
 800f9f6:	2b40      	cmp	r3, #64	; 0x40
 800f9f8:	d905      	bls.n	800fa06 <__ssvfscanf_r+0xdfe>
 800f9fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9fc:	290a      	cmp	r1, #10
 800f9fe:	dc71      	bgt.n	800fae4 <__ssvfscanf_r+0xedc>
 800fa00:	e001      	b.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fa02:	2b58      	cmp	r3, #88	; 0x58
 800fa04:	d030      	beq.n	800fa68 <__ssvfscanf_r+0xe60>
 800fa06:	05e3      	lsls	r3, r4, #23
 800fa08:	d515      	bpl.n	800fa36 <__ssvfscanf_r+0xe2e>
 800fa0a:	238c      	movs	r3, #140	; 0x8c
 800fa0c:	2248      	movs	r2, #72	; 0x48
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	189b      	adds	r3, r3, r2
 800fa12:	19db      	adds	r3, r3, r7
 800fa14:	429d      	cmp	r5, r3
 800fa16:	d905      	bls.n	800fa24 <__ssvfscanf_r+0xe1c>
 800fa18:	3d01      	subs	r5, #1
 800fa1a:	7829      	ldrb	r1, [r5, #0]
 800fa1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa20:	f001 ffc4 	bl	80119ac <_sungetc_r>
 800fa24:	238c      	movs	r3, #140	; 0x8c
 800fa26:	2248      	movs	r2, #72	; 0x48
 800fa28:	005b      	lsls	r3, r3, #1
 800fa2a:	189b      	adds	r3, r3, r2
 800fa2c:	19db      	adds	r3, r3, r7
 800fa2e:	429d      	cmp	r5, r3
 800fa30:	d101      	bne.n	800fa36 <__ssvfscanf_r+0xe2e>
 800fa32:	f7ff f9e6 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800fa36:	2310      	movs	r3, #16
 800fa38:	0022      	movs	r2, r4
 800fa3a:	401a      	ands	r2, r3
 800fa3c:	421c      	tst	r4, r3
 800fa3e:	d171      	bne.n	800fb24 <__ssvfscanf_r+0xf1c>
 800fa40:	218c      	movs	r1, #140	; 0x8c
 800fa42:	2048      	movs	r0, #72	; 0x48
 800fa44:	0049      	lsls	r1, r1, #1
 800fa46:	1809      	adds	r1, r1, r0
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	697e      	ldr	r6, [r7, #20]
 800fa4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa4e:	19c9      	adds	r1, r1, r7
 800fa50:	702a      	strb	r2, [r5, #0]
 800fa52:	47b0      	blx	r6
 800fa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa56:	1d1e      	adds	r6, r3, #4
 800fa58:	06a3      	lsls	r3, r4, #26
 800fa5a:	d559      	bpl.n	800fb10 <__ssvfscanf_r+0xf08>
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6018      	str	r0, [r3, #0]
 800fa62:	e05b      	b.n	800fb1c <__ssvfscanf_r+0xf14>
 800fa64:	2b78      	cmp	r3, #120	; 0x78
 800fa66:	d1ce      	bne.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fa68:	21c0      	movs	r1, #192	; 0xc0
 800fa6a:	00c9      	lsls	r1, r1, #3
 800fa6c:	4021      	ands	r1, r4
 800fa6e:	42b1      	cmp	r1, r6
 800fa70:	d1c9      	bne.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fa72:	4934      	ldr	r1, [pc, #208]	; (800fb44 <__ssvfscanf_r+0xf3c>)
 800fa74:	4021      	ands	r1, r4
 800fa76:	24a0      	movs	r4, #160	; 0xa0
 800fa78:	00e4      	lsls	r4, r4, #3
 800fa7a:	430c      	orrs	r4, r1
 800fa7c:	2110      	movs	r1, #16
 800fa7e:	6279      	str	r1, [r7, #36]	; 0x24
 800fa80:	e00b      	b.n	800fa9a <__ssvfscanf_r+0xe92>
 800fa82:	0521      	lsls	r1, r4, #20
 800fa84:	d509      	bpl.n	800fa9a <__ssvfscanf_r+0xe92>
 800fa86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa88:	2900      	cmp	r1, #0
 800fa8a:	d102      	bne.n	800fa92 <__ssvfscanf_r+0xe8a>
 800fa8c:	3108      	adds	r1, #8
 800fa8e:	4334      	orrs	r4, r6
 800fa90:	6279      	str	r1, [r7, #36]	; 0x24
 800fa92:	0561      	lsls	r1, r4, #21
 800fa94:	d504      	bpl.n	800faa0 <__ssvfscanf_r+0xe98>
 800fa96:	492c      	ldr	r1, [pc, #176]	; (800fb48 <__ssvfscanf_r+0xf40>)
 800fa98:	400c      	ands	r4, r1
 800fa9a:	702b      	strb	r3, [r5, #0]
 800fa9c:	3501      	adds	r5, #1
 800fa9e:	e00c      	b.n	800faba <__ssvfscanf_r+0xeb2>
 800faa0:	4b2a      	ldr	r3, [pc, #168]	; (800fb4c <__ssvfscanf_r+0xf44>)
 800faa2:	401c      	ands	r4, r3
 800faa4:	6a3b      	ldr	r3, [r7, #32]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d004      	beq.n	800fab4 <__ssvfscanf_r+0xeac>
 800faaa:	3b01      	subs	r3, #1
 800faac:	623b      	str	r3, [r7, #32]
 800faae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fab0:	3301      	adds	r3, #1
 800fab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	3301      	adds	r3, #1
 800fab8:	61fb      	str	r3, [r7, #28]
 800faba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fabc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	604b      	str	r3, [r1, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd1c      	ble.n	800fb02 <__ssvfscanf_r+0xefa>
 800fac8:	3201      	adds	r2, #1
 800faca:	600a      	str	r2, [r1, #0]
 800facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800face:	3b01      	subs	r3, #1
 800fad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d000      	beq.n	800fad8 <__ssvfscanf_r+0xed0>
 800fad6:	e773      	b.n	800f9c0 <__ssvfscanf_r+0xdb8>
 800fad8:	e795      	b.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fadc:	491c      	ldr	r1, [pc, #112]	; (800fb50 <__ssvfscanf_r+0xf48>)
 800fade:	0040      	lsls	r0, r0, #1
 800fae0:	5e41      	ldrsh	r1, [r0, r1]
 800fae2:	6279      	str	r1, [r7, #36]	; 0x24
 800fae4:	491b      	ldr	r1, [pc, #108]	; (800fb54 <__ssvfscanf_r+0xf4c>)
 800fae6:	e7d7      	b.n	800fa98 <__ssvfscanf_r+0xe90>
 800fae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800faea:	4919      	ldr	r1, [pc, #100]	; (800fb50 <__ssvfscanf_r+0xf48>)
 800faec:	0040      	lsls	r0, r0, #1
 800faee:	5e41      	ldrsh	r1, [r0, r1]
 800faf0:	6279      	str	r1, [r7, #36]	; 0x24
 800faf2:	2908      	cmp	r1, #8
 800faf4:	dcf6      	bgt.n	800fae4 <__ssvfscanf_r+0xedc>
 800faf6:	e786      	b.n	800fa06 <__ssvfscanf_r+0xdfe>
 800faf8:	2180      	movs	r1, #128	; 0x80
 800fafa:	420c      	tst	r4, r1
 800fafc:	d083      	beq.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fafe:	438c      	bics	r4, r1
 800fb00:	e7cb      	b.n	800fa9a <__ssvfscanf_r+0xe92>
 800fb02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb06:	f001 ff8d 	bl	8011a24 <__ssrefill_r>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0de      	beq.n	800facc <__ssvfscanf_r+0xec4>
 800fb0e:	e77a      	b.n	800fa06 <__ssvfscanf_r+0xdfe>
 800fb10:	2308      	movs	r3, #8
 800fb12:	421c      	tst	r4, r3
 800fb14:	d020      	beq.n	800fb58 <__ssvfscanf_r+0xf50>
 800fb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	7018      	strb	r0, [r3, #0]
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	633e      	str	r6, [r7, #48]	; 0x30
 800fb20:	3301      	adds	r3, #1
 800fb22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb24:	238c      	movs	r3, #140	; 0x8c
 800fb26:	2248      	movs	r2, #72	; 0x48
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	189b      	adds	r3, r3, r2
 800fb2c:	19db      	adds	r3, r3, r7
 800fb2e:	1aed      	subs	r5, r5, r3
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	18ed      	adds	r5, r5, r3
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	195b      	adds	r3, r3, r5
 800fb38:	f7ff f92d 	bl	800ed96 <__ssvfscanf_r+0x18e>
 800fb3c:	08014a81 	.word	0x08014a81
 800fb40:	0000fff6 	.word	0x0000fff6
 800fb44:	fffffdff 	.word	0xfffffdff
 800fb48:	fffffa7f 	.word	0xfffffa7f
 800fb4c:	fffffc7f 	.word	0xfffffc7f
 800fb50:	08014dae 	.word	0x08014dae
 800fb54:	fffff47f 	.word	0xfffff47f
 800fb58:	0763      	lsls	r3, r4, #29
 800fb5a:	d503      	bpl.n	800fb64 <__ssvfscanf_r+0xf5c>
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	8018      	strh	r0, [r3, #0]
 800fb62:	e7db      	b.n	800fb1c <__ssvfscanf_r+0xf14>
 800fb64:	2301      	movs	r3, #1
 800fb66:	0022      	movs	r2, r4
 800fb68:	401a      	ands	r2, r3
 800fb6a:	421c      	tst	r4, r3
 800fb6c:	d000      	beq.n	800fb70 <__ssvfscanf_r+0xf68>
 800fb6e:	e775      	b.n	800fa5c <__ssvfscanf_r+0xe54>
 800fb70:	07a4      	lsls	r4, r4, #30
 800fb72:	d400      	bmi.n	800fb76 <__ssvfscanf_r+0xf6e>
 800fb74:	e772      	b.n	800fa5c <__ssvfscanf_r+0xe54>
 800fb76:	4ba8      	ldr	r3, [pc, #672]	; (800fe18 <__ssvfscanf_r+0x1210>)
 800fb78:	6979      	ldr	r1, [r7, #20]
 800fb7a:	4299      	cmp	r1, r3
 800fb7c:	d10c      	bne.n	800fb98 <__ssvfscanf_r+0xf90>
 800fb7e:	218c      	movs	r1, #140	; 0x8c
 800fb80:	2048      	movs	r0, #72	; 0x48
 800fb82:	0049      	lsls	r1, r1, #1
 800fb84:	1809      	adds	r1, r1, r0
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb8a:	19c9      	adds	r1, r1, r7
 800fb8c:	f001 fe46 	bl	801181c <_strtoull_r>
 800fb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	c303      	stmia	r3!, {r0, r1}
 800fb96:	e7c1      	b.n	800fb1c <__ssvfscanf_r+0xf14>
 800fb98:	218c      	movs	r1, #140	; 0x8c
 800fb9a:	2048      	movs	r0, #72	; 0x48
 800fb9c:	0049      	lsls	r1, r1, #1
 800fb9e:	1809      	adds	r1, r1, r0
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fba4:	19c9      	adds	r1, r1, r7
 800fba6:	f001 fd87 	bl	80116b8 <_strtoll_r>
 800fbaa:	e7f1      	b.n	800fb90 <__ssvfscanf_r+0xf88>
 800fbac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbae:	f000 fb9f 	bl	80102f0 <_localeconv_r>
 800fbb2:	22ae      	movs	r2, #174	; 0xae
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	6803      	ldr	r3, [r0, #0]
 800fbb8:	0052      	lsls	r2, r2, #1
 800fbba:	603b      	str	r3, [r7, #0]
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	60f9      	str	r1, [r7, #12]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d906      	bls.n	800fbd4 <__ssvfscanf_r+0xfcc>
 800fbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbc8:	3b5e      	subs	r3, #94	; 0x5e
 800fbca:	3bff      	subs	r3, #255	; 0xff
 800fbcc:	60fb      	str	r3, [r7, #12]
 800fbce:	235e      	movs	r3, #94	; 0x5e
 800fbd0:	33ff      	adds	r3, #255	; 0xff
 800fbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fbd4:	23f0      	movs	r3, #240	; 0xf0
 800fbd6:	00db      	lsls	r3, r3, #3
 800fbd8:	431e      	orrs	r6, r3
 800fbda:	238c      	movs	r3, #140	; 0x8c
 800fbdc:	2248      	movs	r2, #72	; 0x48
 800fbde:	2400      	movs	r4, #0
 800fbe0:	005b      	lsls	r3, r3, #1
 800fbe2:	189b      	adds	r3, r3, r2
 800fbe4:	623c      	str	r4, [r7, #32]
 800fbe6:	607c      	str	r4, [r7, #4]
 800fbe8:	60bc      	str	r4, [r7, #8]
 800fbea:	61fc      	str	r4, [r7, #28]
 800fbec:	613c      	str	r4, [r7, #16]
 800fbee:	19dd      	adds	r5, r3, r7
 800fbf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	781a      	ldrb	r2, [r3, #0]
 800fbf6:	0010      	movs	r0, r2
 800fbf8:	382b      	subs	r0, #43	; 0x2b
 800fbfa:	284e      	cmp	r0, #78	; 0x4e
 800fbfc:	d900      	bls.n	800fc00 <__ssvfscanf_r+0xff8>
 800fbfe:	e133      	b.n	800fe68 <__ssvfscanf_r+0x1260>
 800fc00:	f7f0 fa92 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fc04:	0132009b 	.word	0x0132009b
 800fc08:	0132009b 	.word	0x0132009b
 800fc0c:	004f0132 	.word	0x004f0132
 800fc10:	00720072 	.word	0x00720072
 800fc14:	00720072 	.word	0x00720072
 800fc18:	00720072 	.word	0x00720072
 800fc1c:	00720072 	.word	0x00720072
 800fc20:	01320072 	.word	0x01320072
 800fc24:	01320132 	.word	0x01320132
 800fc28:	01320132 	.word	0x01320132
 800fc2c:	01320132 	.word	0x01320132
 800fc30:	007b00bc 	.word	0x007b00bc
 800fc34:	007b007b 	.word	0x007b007b
 800fc38:	00f7012f 	.word	0x00f7012f
 800fc3c:	01320132 	.word	0x01320132
 800fc40:	013200e3 	.word	0x013200e3
 800fc44:	01320132 	.word	0x01320132
 800fc48:	00a00132 	.word	0x00a00132
 800fc4c:	01120132 	.word	0x01120132
 800fc50:	01320132 	.word	0x01320132
 800fc54:	01010132 	.word	0x01010132
 800fc58:	01320132 	.word	0x01320132
 800fc5c:	00820132 	.word	0x00820132
 800fc60:	01320105 	.word	0x01320105
 800fc64:	01320132 	.word	0x01320132
 800fc68:	01320132 	.word	0x01320132
 800fc6c:	01320132 	.word	0x01320132
 800fc70:	007b00bc 	.word	0x007b00bc
 800fc74:	007b007b 	.word	0x007b007b
 800fc78:	00f7012f 	.word	0x00f7012f
 800fc7c:	01320132 	.word	0x01320132
 800fc80:	013200e3 	.word	0x013200e3
 800fc84:	01320132 	.word	0x01320132
 800fc88:	00a00132 	.word	0x00a00132
 800fc8c:	01120132 	.word	0x01120132
 800fc90:	01320132 	.word	0x01320132
 800fc94:	01010132 	.word	0x01010132
 800fc98:	01320132 	.word	0x01320132
 800fc9c:	00820132 	.word	0x00820132
 800fca0:	0105      	.short	0x0105
 800fca2:	05f1      	lsls	r1, r6, #23
 800fca4:	d520      	bpl.n	800fce8 <__ssvfscanf_r+0x10e0>
 800fca6:	2280      	movs	r2, #128	; 0x80
 800fca8:	4396      	bics	r6, r2
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	3201      	adds	r2, #1
 800fcae:	61fa      	str	r2, [r7, #28]
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	2a00      	cmp	r2, #0
 800fcb4:	d004      	beq.n	800fcc0 <__ssvfscanf_r+0x10b8>
 800fcb6:	3a01      	subs	r2, #1
 800fcb8:	60fa      	str	r2, [r7, #12]
 800fcba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcbc:	3201      	adds	r2, #1
 800fcbe:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fcc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fcc4:	3a01      	subs	r2, #1
 800fcc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fcc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcca:	3201      	adds	r2, #1
 800fccc:	63ba      	str	r2, [r7, #56]	; 0x38
 800fcce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcd0:	6852      	ldr	r2, [r2, #4]
 800fcd2:	3a01      	subs	r2, #1
 800fcd4:	604a      	str	r2, [r1, #4]
 800fcd6:	2a00      	cmp	r2, #0
 800fcd8:	dc00      	bgt.n	800fcdc <__ssvfscanf_r+0x10d4>
 800fcda:	e0d6      	b.n	800fe8a <__ssvfscanf_r+0x1282>
 800fcdc:	3301      	adds	r3, #1
 800fcde:	600b      	str	r3, [r1, #0]
 800fce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d184      	bne.n	800fbf0 <__ssvfscanf_r+0xfe8>
 800fce6:	e057      	b.n	800fd98 <__ssvfscanf_r+0x1190>
 800fce8:	6a39      	ldr	r1, [r7, #32]
 800fcea:	1909      	adds	r1, r1, r4
 800fcec:	2900      	cmp	r1, #0
 800fcee:	d153      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fcf0:	494a      	ldr	r1, [pc, #296]	; (800fe1c <__ssvfscanf_r+0x1214>)
 800fcf2:	400e      	ands	r6, r1
 800fcf4:	702a      	strb	r2, [r5, #0]
 800fcf6:	3501      	adds	r5, #1
 800fcf8:	e7e2      	b.n	800fcc0 <__ssvfscanf_r+0x10b8>
 800fcfa:	0531      	lsls	r1, r6, #20
 800fcfc:	d54c      	bpl.n	800fd98 <__ssvfscanf_r+0x1190>
 800fcfe:	6a39      	ldr	r1, [r7, #32]
 800fd00:	1909      	adds	r1, r1, r4
 800fd02:	2900      	cmp	r1, #0
 800fd04:	d040      	beq.n	800fd88 <__ssvfscanf_r+0x1180>
 800fd06:	e047      	b.n	800fd98 <__ssvfscanf_r+0x1190>
 800fd08:	2198      	movs	r1, #152	; 0x98
 800fd0a:	2080      	movs	r0, #128	; 0x80
 800fd0c:	0109      	lsls	r1, r1, #4
 800fd0e:	4031      	ands	r1, r6
 800fd10:	0040      	lsls	r0, r0, #1
 800fd12:	4281      	cmp	r1, r0
 800fd14:	d140      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fd16:	69f9      	ldr	r1, [r7, #28]
 800fd18:	2901      	cmp	r1, #1
 800fd1a:	d13d      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fd1c:	2080      	movs	r0, #128	; 0x80
 800fd1e:	4940      	ldr	r1, [pc, #256]	; (800fe20 <__ssvfscanf_r+0x1218>)
 800fd20:	0100      	lsls	r0, r0, #4
 800fd22:	400e      	ands	r6, r1
 800fd24:	3132      	adds	r1, #50	; 0x32
 800fd26:	31ff      	adds	r1, #255	; 0xff
 800fd28:	7029      	strb	r1, [r5, #0]
 800fd2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd2c:	4306      	orrs	r6, r0
 800fd2e:	3901      	subs	r1, #1
 800fd30:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fd32:	3501      	adds	r5, #1
 800fd34:	2100      	movs	r1, #0
 800fd36:	61f9      	str	r1, [r7, #28]
 800fd38:	e7dc      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fd3a:	2180      	movs	r1, #128	; 0x80
 800fd3c:	420e      	tst	r6, r1
 800fd3e:	d02b      	beq.n	800fd98 <__ssvfscanf_r+0x1190>
 800fd40:	438e      	bics	r6, r1
 800fd42:	e7d7      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fd44:	6a39      	ldr	r1, [r7, #32]
 800fd46:	2900      	cmp	r1, #0
 800fd48:	d10d      	bne.n	800fd66 <__ssvfscanf_r+0x115e>
 800fd4a:	69f9      	ldr	r1, [r7, #28]
 800fd4c:	2900      	cmp	r1, #0
 800fd4e:	d10e      	bne.n	800fd6e <__ssvfscanf_r+0x1166>
 800fd50:	21e0      	movs	r1, #224	; 0xe0
 800fd52:	0030      	movs	r0, r6
 800fd54:	00c9      	lsls	r1, r1, #3
 800fd56:	4008      	ands	r0, r1
 800fd58:	4288      	cmp	r0, r1
 800fd5a:	d108      	bne.n	800fd6e <__ssvfscanf_r+0x1166>
 800fd5c:	4931      	ldr	r1, [pc, #196]	; (800fe24 <__ssvfscanf_r+0x121c>)
 800fd5e:	400e      	ands	r6, r1
 800fd60:	2101      	movs	r1, #1
 800fd62:	6239      	str	r1, [r7, #32]
 800fd64:	e7c6      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fd66:	6a39      	ldr	r1, [r7, #32]
 800fd68:	2902      	cmp	r1, #2
 800fd6a:	d100      	bne.n	800fd6e <__ssvfscanf_r+0x1166>
 800fd6c:	e089      	b.n	800fe82 <__ssvfscanf_r+0x127a>
 800fd6e:	2c01      	cmp	r4, #1
 800fd70:	d001      	beq.n	800fd76 <__ssvfscanf_r+0x116e>
 800fd72:	2c04      	cmp	r4, #4
 800fd74:	d110      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fd76:	3401      	adds	r4, #1
 800fd78:	b2e4      	uxtb	r4, r4
 800fd7a:	e7bb      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fd7c:	0531      	lsls	r1, r6, #20
 800fd7e:	d508      	bpl.n	800fd92 <__ssvfscanf_r+0x118a>
 800fd80:	6a39      	ldr	r1, [r7, #32]
 800fd82:	1909      	adds	r1, r1, r4
 800fd84:	2900      	cmp	r1, #0
 800fd86:	d104      	bne.n	800fd92 <__ssvfscanf_r+0x118a>
 800fd88:	4824      	ldr	r0, [pc, #144]	; (800fe1c <__ssvfscanf_r+0x1214>)
 800fd8a:	000c      	movs	r4, r1
 800fd8c:	4006      	ands	r6, r0
 800fd8e:	6239      	str	r1, [r7, #32]
 800fd90:	e7b0      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fd92:	6a39      	ldr	r1, [r7, #32]
 800fd94:	2901      	cmp	r1, #1
 800fd96:	d076      	beq.n	800fe86 <__ssvfscanf_r+0x127e>
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d001      	beq.n	800fda2 <__ssvfscanf_r+0x119a>
 800fd9e:	4b20      	ldr	r3, [pc, #128]	; (800fe20 <__ssvfscanf_r+0x1218>)
 800fda0:	401e      	ands	r6, r3
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d877      	bhi.n	800fe9a <__ssvfscanf_r+0x1292>
 800fdaa:	238c      	movs	r3, #140	; 0x8c
 800fdac:	2248      	movs	r2, #72	; 0x48
 800fdae:	005b      	lsls	r3, r3, #1
 800fdb0:	189b      	adds	r3, r3, r2
 800fdb2:	19db      	adds	r3, r3, r7
 800fdb4:	429d      	cmp	r5, r3
 800fdb6:	d801      	bhi.n	800fdbc <__ssvfscanf_r+0x11b4>
 800fdb8:	f7ff f823 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800fdbc:	3d01      	subs	r5, #1
 800fdbe:	7829      	ldrb	r1, [r5, #0]
 800fdc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fdc4:	f001 fdf2 	bl	80119ac <_sungetc_r>
 800fdc8:	e7ef      	b.n	800fdaa <__ssvfscanf_r+0x11a2>
 800fdca:	2c00      	cmp	r4, #0
 800fdcc:	d10c      	bne.n	800fde8 <__ssvfscanf_r+0x11e0>
 800fdce:	69f9      	ldr	r1, [r7, #28]
 800fdd0:	2900      	cmp	r1, #0
 800fdd2:	d1e4      	bne.n	800fd9e <__ssvfscanf_r+0x1196>
 800fdd4:	21e0      	movs	r1, #224	; 0xe0
 800fdd6:	0030      	movs	r0, r6
 800fdd8:	00c9      	lsls	r1, r1, #3
 800fdda:	4008      	ands	r0, r1
 800fddc:	4288      	cmp	r0, r1
 800fdde:	d1e0      	bne.n	800fda2 <__ssvfscanf_r+0x119a>
 800fde0:	4910      	ldr	r1, [pc, #64]	; (800fe24 <__ssvfscanf_r+0x121c>)
 800fde2:	3401      	adds	r4, #1
 800fde4:	400e      	ands	r6, r1
 800fde6:	e785      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fde8:	20fd      	movs	r0, #253	; 0xfd
 800fdea:	1ee1      	subs	r1, r4, #3
 800fdec:	4201      	tst	r1, r0
 800fdee:	d1d3      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fdf0:	e7c1      	b.n	800fd76 <__ssvfscanf_r+0x116e>
 800fdf2:	0531      	lsls	r1, r6, #20
 800fdf4:	d503      	bpl.n	800fdfe <__ssvfscanf_r+0x11f6>
 800fdf6:	6a39      	ldr	r1, [r7, #32]
 800fdf8:	1909      	adds	r1, r1, r4
 800fdfa:	2900      	cmp	r1, #0
 800fdfc:	d0c4      	beq.n	800fd88 <__ssvfscanf_r+0x1180>
 800fdfe:	2c02      	cmp	r4, #2
 800fe00:	d1ca      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe02:	2403      	movs	r4, #3
 800fe04:	e776      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fe06:	2c06      	cmp	r4, #6
 800fe08:	d1c6      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe0a:	2407      	movs	r4, #7
 800fe0c:	e772      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fe0e:	2c07      	cmp	r4, #7
 800fe10:	d1c2      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe12:	2408      	movs	r4, #8
 800fe14:	e76e      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fe16:	46c0      	nop			; (mov r8, r8)
 800fe18:	0800bfc9 	.word	0x0800bfc9
 800fe1c:	fffffe7f 	.word	0xfffffe7f
 800fe20:	fffffeff 	.word	0xfffffeff
 800fe24:	fffff87f 	.word	0xfffff87f
 800fe28:	0531      	lsls	r1, r6, #20
 800fe2a:	d5b5      	bpl.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe2c:	21a0      	movs	r1, #160	; 0xa0
 800fe2e:	2080      	movs	r0, #128	; 0x80
 800fe30:	00c9      	lsls	r1, r1, #3
 800fe32:	00c0      	lsls	r0, r0, #3
 800fe34:	4031      	ands	r1, r6
 800fe36:	4281      	cmp	r1, r0
 800fe38:	d004      	beq.n	800fe44 <__ssvfscanf_r+0x123c>
 800fe3a:	4206      	tst	r6, r0
 800fe3c:	d0ac      	beq.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe3e:	69f9      	ldr	r1, [r7, #28]
 800fe40:	2900      	cmp	r1, #0
 800fe42:	d0ae      	beq.n	800fda2 <__ssvfscanf_r+0x119a>
 800fe44:	2180      	movs	r1, #128	; 0x80
 800fe46:	0089      	lsls	r1, r1, #2
 800fe48:	420e      	tst	r6, r1
 800fe4a:	d104      	bne.n	800fe56 <__ssvfscanf_r+0x124e>
 800fe4c:	69f9      	ldr	r1, [r7, #28]
 800fe4e:	6938      	ldr	r0, [r7, #16]
 800fe50:	607d      	str	r5, [r7, #4]
 800fe52:	1a09      	subs	r1, r1, r0
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	20c0      	movs	r0, #192	; 0xc0
 800fe58:	4973      	ldr	r1, [pc, #460]	; (8010028 <__ssvfscanf_r+0x1420>)
 800fe5a:	0040      	lsls	r0, r0, #1
 800fe5c:	400e      	ands	r6, r1
 800fe5e:	4306      	orrs	r6, r0
 800fe60:	e768      	b.n	800fd34 <__ssvfscanf_r+0x112c>
 800fe62:	0531      	lsls	r1, r6, #20
 800fe64:	d5e2      	bpl.n	800fe2c <__ssvfscanf_r+0x1224>
 800fe66:	e74a      	b.n	800fcfe <__ssvfscanf_r+0x10f6>
 800fe68:	6839      	ldr	r1, [r7, #0]
 800fe6a:	7809      	ldrb	r1, [r1, #0]
 800fe6c:	4291      	cmp	r1, r2
 800fe6e:	d193      	bne.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe70:	2180      	movs	r1, #128	; 0x80
 800fe72:	0089      	lsls	r1, r1, #2
 800fe74:	420e      	tst	r6, r1
 800fe76:	d08f      	beq.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe78:	496c      	ldr	r1, [pc, #432]	; (801002c <__ssvfscanf_r+0x1424>)
 800fe7a:	400e      	ands	r6, r1
 800fe7c:	69f9      	ldr	r1, [r7, #28]
 800fe7e:	6139      	str	r1, [r7, #16]
 800fe80:	e738      	b.n	800fcf4 <__ssvfscanf_r+0x10ec>
 800fe82:	2103      	movs	r1, #3
 800fe84:	e76d      	b.n	800fd62 <__ssvfscanf_r+0x115a>
 800fe86:	2102      	movs	r1, #2
 800fe88:	e76b      	b.n	800fd62 <__ssvfscanf_r+0x115a>
 800fe8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe8e:	f001 fdc9 	bl	8011a24 <__ssrefill_r>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d100      	bne.n	800fe98 <__ssvfscanf_r+0x1290>
 800fe96:	e723      	b.n	800fce0 <__ssvfscanf_r+0x10d8>
 800fe98:	e77e      	b.n	800fd98 <__ssvfscanf_r+0x1190>
 800fe9a:	1e63      	subs	r3, r4, #1
 800fe9c:	2b06      	cmp	r3, #6
 800fe9e:	d825      	bhi.n	800feec <__ssvfscanf_r+0x12e4>
 800fea0:	2c02      	cmp	r4, #2
 800fea2:	d837      	bhi.n	800ff14 <__ssvfscanf_r+0x130c>
 800fea4:	238c      	movs	r3, #140	; 0x8c
 800fea6:	2248      	movs	r2, #72	; 0x48
 800fea8:	005b      	lsls	r3, r3, #1
 800feaa:	189b      	adds	r3, r3, r2
 800feac:	19db      	adds	r3, r3, r7
 800feae:	429d      	cmp	r5, r3
 800feb0:	d801      	bhi.n	800feb6 <__ssvfscanf_r+0x12ae>
 800feb2:	f7fe ffa6 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800feb6:	3d01      	subs	r5, #1
 800feb8:	7829      	ldrb	r1, [r5, #0]
 800feba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800febc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800febe:	f001 fd75 	bl	80119ac <_sungetc_r>
 800fec2:	e7ef      	b.n	800fea4 <__ssvfscanf_r+0x129c>
 800fec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fec8:	3b01      	subs	r3, #1
 800feca:	7819      	ldrb	r1, [r3, #0]
 800fecc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fed0:	f001 fd6c 	bl	80119ac <_sungetc_r>
 800fed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed6:	6a3a      	ldr	r2, [r7, #32]
 800fed8:	189b      	adds	r3, r3, r2
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	2b03      	cmp	r3, #3
 800fede:	d8f1      	bhi.n	800fec4 <__ssvfscanf_r+0x12bc>
 800fee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee2:	3c03      	subs	r4, #3
 800fee4:	b2e4      	uxtb	r4, r4
 800fee6:	1b1b      	subs	r3, r3, r4
 800fee8:	1b2d      	subs	r5, r5, r4
 800feea:	63bb      	str	r3, [r7, #56]	; 0x38
 800feec:	05f3      	lsls	r3, r6, #23
 800feee:	d52f      	bpl.n	800ff50 <__ssvfscanf_r+0x1348>
 800fef0:	0573      	lsls	r3, r6, #21
 800fef2:	d514      	bpl.n	800ff1e <__ssvfscanf_r+0x1316>
 800fef4:	238c      	movs	r3, #140	; 0x8c
 800fef6:	2248      	movs	r2, #72	; 0x48
 800fef8:	005b      	lsls	r3, r3, #1
 800fefa:	189b      	adds	r3, r3, r2
 800fefc:	19db      	adds	r3, r3, r7
 800fefe:	429d      	cmp	r5, r3
 800ff00:	d801      	bhi.n	800ff06 <__ssvfscanf_r+0x12fe>
 800ff02:	f7fe ff7e 	bl	800ee02 <__ssvfscanf_r+0x1fa>
 800ff06:	3d01      	subs	r5, #1
 800ff08:	7829      	ldrb	r1, [r5, #0]
 800ff0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff0e:	f001 fd4d 	bl	80119ac <_sungetc_r>
 800ff12:	e7ef      	b.n	800fef4 <__ssvfscanf_r+0x12ec>
 800ff14:	1b63      	subs	r3, r4, r5
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	63fd      	str	r5, [r7, #60]	; 0x3c
 800ff1a:	623b      	str	r3, [r7, #32]
 800ff1c:	e7da      	b.n	800fed4 <__ssvfscanf_r+0x12cc>
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	1e6c      	subs	r4, r5, #1
 800ff22:	7821      	ldrb	r1, [r4, #0]
 800ff24:	3b01      	subs	r3, #1
 800ff26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff28:	2965      	cmp	r1, #101	; 0x65
 800ff2a:	d00a      	beq.n	800ff42 <__ssvfscanf_r+0x133a>
 800ff2c:	2945      	cmp	r1, #69	; 0x45
 800ff2e:	d008      	beq.n	800ff42 <__ssvfscanf_r+0x133a>
 800ff30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff34:	f001 fd3a 	bl	80119ac <_sungetc_r>
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	1eac      	subs	r4, r5, #2
 800ff3c:	3b02      	subs	r3, #2
 800ff3e:	7821      	ldrb	r1, [r4, #0]
 800ff40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff42:	0025      	movs	r5, r4
 800ff44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff48:	f001 fd30 	bl	80119ac <_sungetc_r>
 800ff4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff50:	2310      	movs	r3, #16
 800ff52:	0032      	movs	r2, r6
 800ff54:	401a      	ands	r2, r3
 800ff56:	421e      	tst	r6, r3
 800ff58:	d001      	beq.n	800ff5e <__ssvfscanf_r+0x1356>
 800ff5a:	f7fe fe71 	bl	800ec40 <__ssvfscanf_r+0x38>
 800ff5e:	23c0      	movs	r3, #192	; 0xc0
 800ff60:	2180      	movs	r1, #128	; 0x80
 800ff62:	00db      	lsls	r3, r3, #3
 800ff64:	702a      	strb	r2, [r5, #0]
 800ff66:	4033      	ands	r3, r6
 800ff68:	00c9      	lsls	r1, r1, #3
 800ff6a:	428b      	cmp	r3, r1
 800ff6c:	d11f      	bne.n	800ffae <__ssvfscanf_r+0x13a6>
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	69fa      	ldr	r2, [r7, #28]
 800ff72:	69f9      	ldr	r1, [r7, #28]
 800ff74:	1a9a      	subs	r2, r3, r2
 800ff76:	428b      	cmp	r3, r1
 800ff78:	d125      	bne.n	800ffc6 <__ssvfscanf_r+0x13be>
 800ff7a:	238c      	movs	r3, #140	; 0x8c
 800ff7c:	2148      	movs	r1, #72	; 0x48
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	185b      	adds	r3, r3, r1
 800ff82:	19d9      	adds	r1, r3, r7
 800ff84:	2200      	movs	r2, #0
 800ff86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff88:	f7fb fef0 	bl	800bd6c <_strtod_r>
 800ff8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8e:	0004      	movs	r4, r0
 800ff90:	3304      	adds	r3, #4
 800ff92:	000d      	movs	r5, r1
 800ff94:	623b      	str	r3, [r7, #32]
 800ff96:	07f3      	lsls	r3, r6, #31
 800ff98:	d523      	bpl.n	800ffe2 <__ssvfscanf_r+0x13da>
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	601c      	str	r4, [r3, #0]
 800ffa0:	605d      	str	r5, [r3, #4]
 800ffa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	f7fe ffa5 	bl	800eef8 <__ssvfscanf_r+0x2f0>
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0e2      	beq.n	800ff7a <__ssvfscanf_r+0x1372>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffb8:	1c59      	adds	r1, r3, #1
 800ffba:	230a      	movs	r3, #10
 800ffbc:	f7fb ff72 	bl	800bea4 <_strtol_r>
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	687d      	ldr	r5, [r7, #4]
 800ffc4:	1ac2      	subs	r2, r0, r3
 800ffc6:	2148      	movs	r1, #72	; 0x48
 800ffc8:	4b19      	ldr	r3, [pc, #100]	; (8010030 <__ssvfscanf_r+0x1428>)
 800ffca:	185b      	adds	r3, r3, r1
 800ffcc:	19db      	adds	r3, r3, r7
 800ffce:	429d      	cmp	r5, r3
 800ffd0:	d302      	bcc.n	800ffd8 <__ssvfscanf_r+0x13d0>
 800ffd2:	4b18      	ldr	r3, [pc, #96]	; (8010034 <__ssvfscanf_r+0x142c>)
 800ffd4:	185b      	adds	r3, r3, r1
 800ffd6:	19dd      	adds	r5, r3, r7
 800ffd8:	0028      	movs	r0, r5
 800ffda:	4917      	ldr	r1, [pc, #92]	; (8010038 <__ssvfscanf_r+0x1430>)
 800ffdc:	f7fc f8fc 	bl	800c1d8 <sprintf>
 800ffe0:	e7cb      	b.n	800ff7a <__ssvfscanf_r+0x1372>
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffe8:	07b6      	lsls	r6, r6, #30
 800ffea:	d4d8      	bmi.n	800ff9e <__ssvfscanf_r+0x1396>
 800ffec:	0002      	movs	r2, r0
 800ffee:	000b      	movs	r3, r1
 800fff0:	f7f2 f980 	bl	80022f4 <__aeabi_dcmpun>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d005      	beq.n	8010004 <__ssvfscanf_r+0x13fc>
 800fff8:	4810      	ldr	r0, [pc, #64]	; (801003c <__ssvfscanf_r+0x1434>)
 800fffa:	f7fc fabf 	bl	800c57c <nanf>
 800fffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010000:	6018      	str	r0, [r3, #0]
 8010002:	e7ce      	b.n	800ffa2 <__ssvfscanf_r+0x139a>
 8010004:	0020      	movs	r0, r4
 8010006:	0029      	movs	r1, r5
 8010008:	f7f2 fa1e 	bl	8002448 <__aeabi_d2f>
 801000c:	e7f7      	b.n	800fffe <__ssvfscanf_r+0x13f6>
 801000e:	00a3      	lsls	r3, r4, #2
 8010010:	18ed      	adds	r5, r5, r3
 8010012:	682b      	ldr	r3, [r5, #0]
 8010014:	3401      	adds	r4, #1
 8010016:	6818      	ldr	r0, [r3, #0]
 8010018:	f7fa fe58 	bl	800accc <free>
 801001c:	2200      	movs	r2, #0
 801001e:	682b      	ldr	r3, [r5, #0]
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	f7fe ffc3 	bl	800efac <__ssvfscanf_r+0x3a4>
 8010026:	46c0      	nop			; (mov r8, r8)
 8010028:	fffff07f 	.word	0xfffff07f
 801002c:	fffffd7f 	.word	0xfffffd7f
 8010030:	0000026b 	.word	0x0000026b
 8010034:	0000026a 	.word	0x0000026a
 8010038:	08014da8 	.word	0x08014da8
 801003c:	08014e0b 	.word	0x08014e0b

08010040 <_fclose_r>:
 8010040:	b570      	push	{r4, r5, r6, lr}
 8010042:	0005      	movs	r5, r0
 8010044:	1e0c      	subs	r4, r1, #0
 8010046:	d102      	bne.n	801004e <_fclose_r+0xe>
 8010048:	2600      	movs	r6, #0
 801004a:	0030      	movs	r0, r6
 801004c:	bd70      	pop	{r4, r5, r6, pc}
 801004e:	2800      	cmp	r0, #0
 8010050:	d004      	beq.n	801005c <_fclose_r+0x1c>
 8010052:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010054:	2b00      	cmp	r3, #0
 8010056:	d101      	bne.n	801005c <_fclose_r+0x1c>
 8010058:	f7fc f856 	bl	800c108 <__sinit>
 801005c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801005e:	07db      	lsls	r3, r3, #31
 8010060:	d405      	bmi.n	801006e <_fclose_r+0x2e>
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	059b      	lsls	r3, r3, #22
 8010066:	d402      	bmi.n	801006e <_fclose_r+0x2e>
 8010068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801006a:	f7fc fa6b 	bl	800c544 <__retarget_lock_acquire_recursive>
 801006e:	220c      	movs	r2, #12
 8010070:	5ea3      	ldrsh	r3, [r4, r2]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d109      	bne.n	801008a <_fclose_r+0x4a>
 8010076:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010078:	3301      	adds	r3, #1
 801007a:	0016      	movs	r6, r2
 801007c:	401e      	ands	r6, r3
 801007e:	421a      	tst	r2, r3
 8010080:	d1e2      	bne.n	8010048 <_fclose_r+0x8>
 8010082:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010084:	f7fc fa5f 	bl	800c546 <__retarget_lock_release_recursive>
 8010088:	e7df      	b.n	801004a <_fclose_r+0xa>
 801008a:	0021      	movs	r1, r4
 801008c:	0028      	movs	r0, r5
 801008e:	f000 f837 	bl	8010100 <__sflush_r>
 8010092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010094:	0006      	movs	r6, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d006      	beq.n	80100a8 <_fclose_r+0x68>
 801009a:	0028      	movs	r0, r5
 801009c:	69e1      	ldr	r1, [r4, #28]
 801009e:	4798      	blx	r3
 80100a0:	2800      	cmp	r0, #0
 80100a2:	da01      	bge.n	80100a8 <_fclose_r+0x68>
 80100a4:	2601      	movs	r6, #1
 80100a6:	4276      	negs	r6, r6
 80100a8:	89a3      	ldrh	r3, [r4, #12]
 80100aa:	061b      	lsls	r3, r3, #24
 80100ac:	d503      	bpl.n	80100b6 <_fclose_r+0x76>
 80100ae:	0028      	movs	r0, r5
 80100b0:	6921      	ldr	r1, [r4, #16]
 80100b2:	f7fc facf 	bl	800c654 <_free_r>
 80100b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80100b8:	2900      	cmp	r1, #0
 80100ba:	d008      	beq.n	80100ce <_fclose_r+0x8e>
 80100bc:	0023      	movs	r3, r4
 80100be:	3340      	adds	r3, #64	; 0x40
 80100c0:	4299      	cmp	r1, r3
 80100c2:	d002      	beq.n	80100ca <_fclose_r+0x8a>
 80100c4:	0028      	movs	r0, r5
 80100c6:	f7fc fac5 	bl	800c654 <_free_r>
 80100ca:	2300      	movs	r3, #0
 80100cc:	6323      	str	r3, [r4, #48]	; 0x30
 80100ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80100d0:	2900      	cmp	r1, #0
 80100d2:	d004      	beq.n	80100de <_fclose_r+0x9e>
 80100d4:	0028      	movs	r0, r5
 80100d6:	f7fc fabd 	bl	800c654 <_free_r>
 80100da:	2300      	movs	r3, #0
 80100dc:	6463      	str	r3, [r4, #68]	; 0x44
 80100de:	f7fc f803 	bl	800c0e8 <__sfp_lock_acquire>
 80100e2:	2300      	movs	r3, #0
 80100e4:	81a3      	strh	r3, [r4, #12]
 80100e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100e8:	07db      	lsls	r3, r3, #31
 80100ea:	d402      	bmi.n	80100f2 <_fclose_r+0xb2>
 80100ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ee:	f7fc fa2a 	bl	800c546 <__retarget_lock_release_recursive>
 80100f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100f4:	f7fc fa25 	bl	800c542 <__retarget_lock_close_recursive>
 80100f8:	f7fb fffe 	bl	800c0f8 <__sfp_lock_release>
 80100fc:	e7a5      	b.n	801004a <_fclose_r+0xa>
	...

08010100 <__sflush_r>:
 8010100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010102:	230c      	movs	r3, #12
 8010104:	5eca      	ldrsh	r2, [r1, r3]
 8010106:	000c      	movs	r4, r1
 8010108:	0005      	movs	r5, r0
 801010a:	b291      	uxth	r1, r2
 801010c:	0713      	lsls	r3, r2, #28
 801010e:	d464      	bmi.n	80101da <__sflush_r+0xda>
 8010110:	2380      	movs	r3, #128	; 0x80
 8010112:	011b      	lsls	r3, r3, #4
 8010114:	4313      	orrs	r3, r2
 8010116:	6862      	ldr	r2, [r4, #4]
 8010118:	81a3      	strh	r3, [r4, #12]
 801011a:	2a00      	cmp	r2, #0
 801011c:	dc04      	bgt.n	8010128 <__sflush_r+0x28>
 801011e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010120:	2a00      	cmp	r2, #0
 8010122:	dc01      	bgt.n	8010128 <__sflush_r+0x28>
 8010124:	2000      	movs	r0, #0
 8010126:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010128:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801012a:	2f00      	cmp	r7, #0
 801012c:	d0fa      	beq.n	8010124 <__sflush_r+0x24>
 801012e:	2200      	movs	r2, #0
 8010130:	2080      	movs	r0, #128	; 0x80
 8010132:	682e      	ldr	r6, [r5, #0]
 8010134:	602a      	str	r2, [r5, #0]
 8010136:	001a      	movs	r2, r3
 8010138:	0140      	lsls	r0, r0, #5
 801013a:	69e1      	ldr	r1, [r4, #28]
 801013c:	4002      	ands	r2, r0
 801013e:	4203      	tst	r3, r0
 8010140:	d038      	beq.n	80101b4 <__sflush_r+0xb4>
 8010142:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8010144:	89a3      	ldrh	r3, [r4, #12]
 8010146:	075b      	lsls	r3, r3, #29
 8010148:	d506      	bpl.n	8010158 <__sflush_r+0x58>
 801014a:	6863      	ldr	r3, [r4, #4]
 801014c:	1ac0      	subs	r0, r0, r3
 801014e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010150:	2b00      	cmp	r3, #0
 8010152:	d001      	beq.n	8010158 <__sflush_r+0x58>
 8010154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010156:	1ac0      	subs	r0, r0, r3
 8010158:	0002      	movs	r2, r0
 801015a:	2300      	movs	r3, #0
 801015c:	0028      	movs	r0, r5
 801015e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010160:	69e1      	ldr	r1, [r4, #28]
 8010162:	47b8      	blx	r7
 8010164:	89a2      	ldrh	r2, [r4, #12]
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	d106      	bne.n	8010178 <__sflush_r+0x78>
 801016a:	6829      	ldr	r1, [r5, #0]
 801016c:	291d      	cmp	r1, #29
 801016e:	d830      	bhi.n	80101d2 <__sflush_r+0xd2>
 8010170:	4b2c      	ldr	r3, [pc, #176]	; (8010224 <__sflush_r+0x124>)
 8010172:	410b      	asrs	r3, r1
 8010174:	07db      	lsls	r3, r3, #31
 8010176:	d42c      	bmi.n	80101d2 <__sflush_r+0xd2>
 8010178:	4b2b      	ldr	r3, [pc, #172]	; (8010228 <__sflush_r+0x128>)
 801017a:	4013      	ands	r3, r2
 801017c:	2200      	movs	r2, #0
 801017e:	6062      	str	r2, [r4, #4]
 8010180:	6922      	ldr	r2, [r4, #16]
 8010182:	b21b      	sxth	r3, r3
 8010184:	81a3      	strh	r3, [r4, #12]
 8010186:	6022      	str	r2, [r4, #0]
 8010188:	04db      	lsls	r3, r3, #19
 801018a:	d505      	bpl.n	8010198 <__sflush_r+0x98>
 801018c:	1c43      	adds	r3, r0, #1
 801018e:	d102      	bne.n	8010196 <__sflush_r+0x96>
 8010190:	682b      	ldr	r3, [r5, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d100      	bne.n	8010198 <__sflush_r+0x98>
 8010196:	6520      	str	r0, [r4, #80]	; 0x50
 8010198:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801019a:	602e      	str	r6, [r5, #0]
 801019c:	2900      	cmp	r1, #0
 801019e:	d0c1      	beq.n	8010124 <__sflush_r+0x24>
 80101a0:	0023      	movs	r3, r4
 80101a2:	3340      	adds	r3, #64	; 0x40
 80101a4:	4299      	cmp	r1, r3
 80101a6:	d002      	beq.n	80101ae <__sflush_r+0xae>
 80101a8:	0028      	movs	r0, r5
 80101aa:	f7fc fa53 	bl	800c654 <_free_r>
 80101ae:	2000      	movs	r0, #0
 80101b0:	6320      	str	r0, [r4, #48]	; 0x30
 80101b2:	e7b8      	b.n	8010126 <__sflush_r+0x26>
 80101b4:	2301      	movs	r3, #1
 80101b6:	0028      	movs	r0, r5
 80101b8:	47b8      	blx	r7
 80101ba:	1c43      	adds	r3, r0, #1
 80101bc:	d1c2      	bne.n	8010144 <__sflush_r+0x44>
 80101be:	682b      	ldr	r3, [r5, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d0bf      	beq.n	8010144 <__sflush_r+0x44>
 80101c4:	2b1d      	cmp	r3, #29
 80101c6:	d001      	beq.n	80101cc <__sflush_r+0xcc>
 80101c8:	2b16      	cmp	r3, #22
 80101ca:	d101      	bne.n	80101d0 <__sflush_r+0xd0>
 80101cc:	602e      	str	r6, [r5, #0]
 80101ce:	e7a9      	b.n	8010124 <__sflush_r+0x24>
 80101d0:	89a2      	ldrh	r2, [r4, #12]
 80101d2:	2340      	movs	r3, #64	; 0x40
 80101d4:	4313      	orrs	r3, r2
 80101d6:	81a3      	strh	r3, [r4, #12]
 80101d8:	e7a5      	b.n	8010126 <__sflush_r+0x26>
 80101da:	6926      	ldr	r6, [r4, #16]
 80101dc:	2e00      	cmp	r6, #0
 80101de:	d0a1      	beq.n	8010124 <__sflush_r+0x24>
 80101e0:	6827      	ldr	r7, [r4, #0]
 80101e2:	6026      	str	r6, [r4, #0]
 80101e4:	1bbb      	subs	r3, r7, r6
 80101e6:	9301      	str	r3, [sp, #4]
 80101e8:	2300      	movs	r3, #0
 80101ea:	0789      	lsls	r1, r1, #30
 80101ec:	d100      	bne.n	80101f0 <__sflush_r+0xf0>
 80101ee:	6963      	ldr	r3, [r4, #20]
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	9b01      	ldr	r3, [sp, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	dc00      	bgt.n	80101fa <__sflush_r+0xfa>
 80101f8:	e794      	b.n	8010124 <__sflush_r+0x24>
 80101fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101fc:	0032      	movs	r2, r6
 80101fe:	001f      	movs	r7, r3
 8010200:	0028      	movs	r0, r5
 8010202:	9b01      	ldr	r3, [sp, #4]
 8010204:	69e1      	ldr	r1, [r4, #28]
 8010206:	47b8      	blx	r7
 8010208:	2800      	cmp	r0, #0
 801020a:	dc06      	bgt.n	801021a <__sflush_r+0x11a>
 801020c:	2340      	movs	r3, #64	; 0x40
 801020e:	2001      	movs	r0, #1
 8010210:	89a2      	ldrh	r2, [r4, #12]
 8010212:	4240      	negs	r0, r0
 8010214:	4313      	orrs	r3, r2
 8010216:	81a3      	strh	r3, [r4, #12]
 8010218:	e785      	b.n	8010126 <__sflush_r+0x26>
 801021a:	9b01      	ldr	r3, [sp, #4]
 801021c:	1836      	adds	r6, r6, r0
 801021e:	1a1b      	subs	r3, r3, r0
 8010220:	9301      	str	r3, [sp, #4]
 8010222:	e7e6      	b.n	80101f2 <__sflush_r+0xf2>
 8010224:	dfbffffe 	.word	0xdfbffffe
 8010228:	fffff7ff 	.word	0xfffff7ff

0801022c <_fflush_r>:
 801022c:	b570      	push	{r4, r5, r6, lr}
 801022e:	0005      	movs	r5, r0
 8010230:	000c      	movs	r4, r1
 8010232:	2800      	cmp	r0, #0
 8010234:	d004      	beq.n	8010240 <_fflush_r+0x14>
 8010236:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010238:	2b00      	cmp	r3, #0
 801023a:	d101      	bne.n	8010240 <_fflush_r+0x14>
 801023c:	f7fb ff64 	bl	800c108 <__sinit>
 8010240:	220c      	movs	r2, #12
 8010242:	5ea3      	ldrsh	r3, [r4, r2]
 8010244:	1e1e      	subs	r6, r3, #0
 8010246:	d015      	beq.n	8010274 <_fflush_r+0x48>
 8010248:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801024a:	07d2      	lsls	r2, r2, #31
 801024c:	d404      	bmi.n	8010258 <_fflush_r+0x2c>
 801024e:	059b      	lsls	r3, r3, #22
 8010250:	d402      	bmi.n	8010258 <_fflush_r+0x2c>
 8010252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010254:	f7fc f976 	bl	800c544 <__retarget_lock_acquire_recursive>
 8010258:	0021      	movs	r1, r4
 801025a:	0028      	movs	r0, r5
 801025c:	f7ff ff50 	bl	8010100 <__sflush_r>
 8010260:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010262:	0006      	movs	r6, r0
 8010264:	07db      	lsls	r3, r3, #31
 8010266:	d405      	bmi.n	8010274 <_fflush_r+0x48>
 8010268:	89a3      	ldrh	r3, [r4, #12]
 801026a:	059b      	lsls	r3, r3, #22
 801026c:	d402      	bmi.n	8010274 <_fflush_r+0x48>
 801026e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010270:	f7fc f969 	bl	800c546 <__retarget_lock_release_recursive>
 8010274:	0030      	movs	r0, r6
 8010276:	bd70      	pop	{r4, r5, r6, pc}

08010278 <__sccl>:
 8010278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801027a:	780b      	ldrb	r3, [r1, #0]
 801027c:	0004      	movs	r4, r0
 801027e:	2b5e      	cmp	r3, #94	; 0x5e
 8010280:	d019      	beq.n	80102b6 <__sccl+0x3e>
 8010282:	2200      	movs	r2, #0
 8010284:	1c4d      	adds	r5, r1, #1
 8010286:	0021      	movs	r1, r4
 8010288:	1c60      	adds	r0, r4, #1
 801028a:	30ff      	adds	r0, #255	; 0xff
 801028c:	700a      	strb	r2, [r1, #0]
 801028e:	3101      	adds	r1, #1
 8010290:	4281      	cmp	r1, r0
 8010292:	d1fb      	bne.n	801028c <__sccl+0x14>
 8010294:	1e68      	subs	r0, r5, #1
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00c      	beq.n	80102b4 <__sccl+0x3c>
 801029a:	2101      	movs	r1, #1
 801029c:	262d      	movs	r6, #45	; 0x2d
 801029e:	404a      	eors	r2, r1
 80102a0:	0028      	movs	r0, r5
 80102a2:	54e2      	strb	r2, [r4, r3]
 80102a4:	7801      	ldrb	r1, [r0, #0]
 80102a6:	1c45      	adds	r5, r0, #1
 80102a8:	292d      	cmp	r1, #45	; 0x2d
 80102aa:	d00c      	beq.n	80102c6 <__sccl+0x4e>
 80102ac:	295d      	cmp	r1, #93	; 0x5d
 80102ae:	d01d      	beq.n	80102ec <__sccl+0x74>
 80102b0:	2900      	cmp	r1, #0
 80102b2:	d104      	bne.n	80102be <__sccl+0x46>
 80102b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102b6:	2201      	movs	r2, #1
 80102b8:	784b      	ldrb	r3, [r1, #1]
 80102ba:	1c8d      	adds	r5, r1, #2
 80102bc:	e7e3      	b.n	8010286 <__sccl+0xe>
 80102be:	000b      	movs	r3, r1
 80102c0:	e7ee      	b.n	80102a0 <__sccl+0x28>
 80102c2:	0033      	movs	r3, r6
 80102c4:	e7ec      	b.n	80102a0 <__sccl+0x28>
 80102c6:	7841      	ldrb	r1, [r0, #1]
 80102c8:	295d      	cmp	r1, #93	; 0x5d
 80102ca:	d0fa      	beq.n	80102c2 <__sccl+0x4a>
 80102cc:	428b      	cmp	r3, r1
 80102ce:	dcf8      	bgt.n	80102c2 <__sccl+0x4a>
 80102d0:	001d      	movs	r5, r3
 80102d2:	3002      	adds	r0, #2
 80102d4:	3501      	adds	r5, #1
 80102d6:	5562      	strb	r2, [r4, r5]
 80102d8:	42a9      	cmp	r1, r5
 80102da:	dcfb      	bgt.n	80102d4 <__sccl+0x5c>
 80102dc:	2500      	movs	r5, #0
 80102de:	1c5f      	adds	r7, r3, #1
 80102e0:	428b      	cmp	r3, r1
 80102e2:	da01      	bge.n	80102e8 <__sccl+0x70>
 80102e4:	1acd      	subs	r5, r1, r3
 80102e6:	3d01      	subs	r5, #1
 80102e8:	197b      	adds	r3, r7, r5
 80102ea:	e7db      	b.n	80102a4 <__sccl+0x2c>
 80102ec:	0028      	movs	r0, r5
 80102ee:	e7e1      	b.n	80102b4 <__sccl+0x3c>

080102f0 <_localeconv_r>:
 80102f0:	4800      	ldr	r0, [pc, #0]	; (80102f4 <_localeconv_r+0x4>)
 80102f2:	4770      	bx	lr
 80102f4:	20000534 	.word	0x20000534

080102f8 <__libc_fini_array>:
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	4c07      	ldr	r4, [pc, #28]	; (8010318 <__libc_fini_array+0x20>)
 80102fc:	4d07      	ldr	r5, [pc, #28]	; (801031c <__libc_fini_array+0x24>)
 80102fe:	1b64      	subs	r4, r4, r5
 8010300:	10a4      	asrs	r4, r4, #2
 8010302:	2c00      	cmp	r4, #0
 8010304:	d102      	bne.n	801030c <__libc_fini_array+0x14>
 8010306:	f002 fd47 	bl	8012d98 <_fini>
 801030a:	bd70      	pop	{r4, r5, r6, pc}
 801030c:	3c01      	subs	r4, #1
 801030e:	00a3      	lsls	r3, r4, #2
 8010310:	58eb      	ldr	r3, [r5, r3]
 8010312:	4798      	blx	r3
 8010314:	e7f5      	b.n	8010302 <__libc_fini_array+0xa>
 8010316:	46c0      	nop			; (mov r8, r8)
 8010318:	08014ea8 	.word	0x08014ea8
 801031c:	08014ea4 	.word	0x08014ea4

08010320 <memchr>:
 8010320:	b2c9      	uxtb	r1, r1
 8010322:	1882      	adds	r2, r0, r2
 8010324:	4290      	cmp	r0, r2
 8010326:	d101      	bne.n	801032c <memchr+0xc>
 8010328:	2000      	movs	r0, #0
 801032a:	4770      	bx	lr
 801032c:	7803      	ldrb	r3, [r0, #0]
 801032e:	428b      	cmp	r3, r1
 8010330:	d0fb      	beq.n	801032a <memchr+0xa>
 8010332:	3001      	adds	r0, #1
 8010334:	e7f6      	b.n	8010324 <memchr+0x4>
	...

08010338 <frexp>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	0014      	movs	r4, r2
 801033c:	2500      	movs	r5, #0
 801033e:	6025      	str	r5, [r4, #0]
 8010340:	4d10      	ldr	r5, [pc, #64]	; (8010384 <frexp+0x4c>)
 8010342:	004b      	lsls	r3, r1, #1
 8010344:	000a      	movs	r2, r1
 8010346:	085b      	lsrs	r3, r3, #1
 8010348:	42ab      	cmp	r3, r5
 801034a:	dc1a      	bgt.n	8010382 <frexp+0x4a>
 801034c:	001d      	movs	r5, r3
 801034e:	4305      	orrs	r5, r0
 8010350:	d017      	beq.n	8010382 <frexp+0x4a>
 8010352:	4d0d      	ldr	r5, [pc, #52]	; (8010388 <frexp+0x50>)
 8010354:	4229      	tst	r1, r5
 8010356:	d109      	bne.n	801036c <frexp+0x34>
 8010358:	2200      	movs	r2, #0
 801035a:	4b0c      	ldr	r3, [pc, #48]	; (801038c <frexp+0x54>)
 801035c:	f7f1 f986 	bl	800166c <__aeabi_dmul>
 8010360:	2536      	movs	r5, #54	; 0x36
 8010362:	000a      	movs	r2, r1
 8010364:	004b      	lsls	r3, r1, #1
 8010366:	426d      	negs	r5, r5
 8010368:	085b      	lsrs	r3, r3, #1
 801036a:	6025      	str	r5, [r4, #0]
 801036c:	4d08      	ldr	r5, [pc, #32]	; (8010390 <frexp+0x58>)
 801036e:	151b      	asrs	r3, r3, #20
 8010370:	195b      	adds	r3, r3, r5
 8010372:	6825      	ldr	r5, [r4, #0]
 8010374:	18eb      	adds	r3, r5, r3
 8010376:	6023      	str	r3, [r4, #0]
 8010378:	4b06      	ldr	r3, [pc, #24]	; (8010394 <frexp+0x5c>)
 801037a:	401a      	ands	r2, r3
 801037c:	4b06      	ldr	r3, [pc, #24]	; (8010398 <frexp+0x60>)
 801037e:	4313      	orrs	r3, r2
 8010380:	0019      	movs	r1, r3
 8010382:	bd70      	pop	{r4, r5, r6, pc}
 8010384:	7fefffff 	.word	0x7fefffff
 8010388:	7ff00000 	.word	0x7ff00000
 801038c:	43500000 	.word	0x43500000
 8010390:	fffffc02 	.word	0xfffffc02
 8010394:	800fffff 	.word	0x800fffff
 8010398:	3fe00000 	.word	0x3fe00000

0801039c <__register_exitproc>:
 801039c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801039e:	4f1c      	ldr	r7, [pc, #112]	; (8010410 <__register_exitproc+0x74>)
 80103a0:	0004      	movs	r4, r0
 80103a2:	6838      	ldr	r0, [r7, #0]
 80103a4:	0016      	movs	r6, r2
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	9100      	str	r1, [sp, #0]
 80103aa:	f7fc f8cb 	bl	800c544 <__retarget_lock_acquire_recursive>
 80103ae:	4a19      	ldr	r2, [pc, #100]	; (8010414 <__register_exitproc+0x78>)
 80103b0:	6813      	ldr	r3, [r2, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d101      	bne.n	80103ba <__register_exitproc+0x1e>
 80103b6:	4b18      	ldr	r3, [pc, #96]	; (8010418 <__register_exitproc+0x7c>)
 80103b8:	6013      	str	r3, [r2, #0]
 80103ba:	685a      	ldr	r2, [r3, #4]
 80103bc:	6838      	ldr	r0, [r7, #0]
 80103be:	2a1f      	cmp	r2, #31
 80103c0:	dd04      	ble.n	80103cc <__register_exitproc+0x30>
 80103c2:	f7fc f8c0 	bl	800c546 <__retarget_lock_release_recursive>
 80103c6:	2001      	movs	r0, #1
 80103c8:	4240      	negs	r0, r0
 80103ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103cc:	2c00      	cmp	r4, #0
 80103ce:	d014      	beq.n	80103fa <__register_exitproc+0x5e>
 80103d0:	0091      	lsls	r1, r2, #2
 80103d2:	1859      	adds	r1, r3, r1
 80103d4:	000f      	movs	r7, r1
 80103d6:	3788      	adds	r7, #136	; 0x88
 80103d8:	603e      	str	r6, [r7, #0]
 80103da:	2701      	movs	r7, #1
 80103dc:	001e      	movs	r6, r3
 80103de:	4097      	lsls	r7, r2
 80103e0:	3685      	adds	r6, #133	; 0x85
 80103e2:	36ff      	adds	r6, #255	; 0xff
 80103e4:	6875      	ldr	r5, [r6, #4]
 80103e6:	31fc      	adds	r1, #252	; 0xfc
 80103e8:	433d      	orrs	r5, r7
 80103ea:	6075      	str	r5, [r6, #4]
 80103ec:	9d01      	ldr	r5, [sp, #4]
 80103ee:	60cd      	str	r5, [r1, #12]
 80103f0:	2c02      	cmp	r4, #2
 80103f2:	d102      	bne.n	80103fa <__register_exitproc+0x5e>
 80103f4:	68b1      	ldr	r1, [r6, #8]
 80103f6:	4339      	orrs	r1, r7
 80103f8:	60b1      	str	r1, [r6, #8]
 80103fa:	1c51      	adds	r1, r2, #1
 80103fc:	6059      	str	r1, [r3, #4]
 80103fe:	3202      	adds	r2, #2
 8010400:	9900      	ldr	r1, [sp, #0]
 8010402:	0092      	lsls	r2, r2, #2
 8010404:	50d1      	str	r1, [r2, r3]
 8010406:	f7fc f89e 	bl	800c546 <__retarget_lock_release_recursive>
 801040a:	2000      	movs	r0, #0
 801040c:	e7dd      	b.n	80103ca <__register_exitproc+0x2e>
 801040e:	46c0      	nop			; (mov r8, r8)
 8010410:	200006d4 	.word	0x200006d4
 8010414:	20000db0 	.word	0x20000db0
 8010418:	20000db4 	.word	0x20000db4

0801041c <__assert_func>:
 801041c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801041e:	0014      	movs	r4, r2
 8010420:	001a      	movs	r2, r3
 8010422:	4b09      	ldr	r3, [pc, #36]	; (8010448 <__assert_func+0x2c>)
 8010424:	0005      	movs	r5, r0
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	000e      	movs	r6, r1
 801042a:	68d8      	ldr	r0, [r3, #12]
 801042c:	4b07      	ldr	r3, [pc, #28]	; (801044c <__assert_func+0x30>)
 801042e:	2c00      	cmp	r4, #0
 8010430:	d101      	bne.n	8010436 <__assert_func+0x1a>
 8010432:	4b07      	ldr	r3, [pc, #28]	; (8010450 <__assert_func+0x34>)
 8010434:	001c      	movs	r4, r3
 8010436:	4907      	ldr	r1, [pc, #28]	; (8010454 <__assert_func+0x38>)
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	9402      	str	r4, [sp, #8]
 801043c:	002b      	movs	r3, r5
 801043e:	9600      	str	r6, [sp, #0]
 8010440:	f001 fa20 	bl	8011884 <fiprintf>
 8010444:	f002 fb08 	bl	8012a58 <abort>
 8010448:	200006d0 	.word	0x200006d0
 801044c:	08014dd0 	.word	0x08014dd0
 8010450:	08014e0b 	.word	0x08014e0b
 8010454:	08014ddd 	.word	0x08014ddd

08010458 <_calloc_r>:
 8010458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801045a:	2400      	movs	r4, #0
 801045c:	0c0b      	lsrs	r3, r1, #16
 801045e:	0c16      	lsrs	r6, r2, #16
 8010460:	42a3      	cmp	r3, r4
 8010462:	d133      	bne.n	80104cc <_calloc_r+0x74>
 8010464:	42a6      	cmp	r6, r4
 8010466:	d121      	bne.n	80104ac <_calloc_r+0x54>
 8010468:	b28b      	uxth	r3, r1
 801046a:	b291      	uxth	r1, r2
 801046c:	4359      	muls	r1, r3
 801046e:	f7fa fc37 	bl	800ace0 <_malloc_r>
 8010472:	1e05      	subs	r5, r0, #0
 8010474:	d033      	beq.n	80104de <_calloc_r+0x86>
 8010476:	0003      	movs	r3, r0
 8010478:	3b08      	subs	r3, #8
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	2303      	movs	r3, #3
 801047e:	439a      	bics	r2, r3
 8010480:	3a04      	subs	r2, #4
 8010482:	2a24      	cmp	r2, #36	; 0x24
 8010484:	d832      	bhi.n	80104ec <_calloc_r+0x94>
 8010486:	0003      	movs	r3, r0
 8010488:	2a13      	cmp	r2, #19
 801048a:	d90a      	bls.n	80104a2 <_calloc_r+0x4a>
 801048c:	6004      	str	r4, [r0, #0]
 801048e:	6044      	str	r4, [r0, #4]
 8010490:	3308      	adds	r3, #8
 8010492:	2a1b      	cmp	r2, #27
 8010494:	d905      	bls.n	80104a2 <_calloc_r+0x4a>
 8010496:	6084      	str	r4, [r0, #8]
 8010498:	60c4      	str	r4, [r0, #12]
 801049a:	2a24      	cmp	r2, #36	; 0x24
 801049c:	d021      	beq.n	80104e2 <_calloc_r+0x8a>
 801049e:	0003      	movs	r3, r0
 80104a0:	3310      	adds	r3, #16
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	605a      	str	r2, [r3, #4]
 80104a8:	609a      	str	r2, [r3, #8]
 80104aa:	e018      	b.n	80104de <_calloc_r+0x86>
 80104ac:	1c33      	adds	r3, r6, #0
 80104ae:	1c0d      	adds	r5, r1, #0
 80104b0:	b289      	uxth	r1, r1
 80104b2:	b292      	uxth	r2, r2
 80104b4:	434a      	muls	r2, r1
 80104b6:	b2ad      	uxth	r5, r5
 80104b8:	b299      	uxth	r1, r3
 80104ba:	4369      	muls	r1, r5
 80104bc:	0c13      	lsrs	r3, r2, #16
 80104be:	18c9      	adds	r1, r1, r3
 80104c0:	0c0b      	lsrs	r3, r1, #16
 80104c2:	d107      	bne.n	80104d4 <_calloc_r+0x7c>
 80104c4:	0409      	lsls	r1, r1, #16
 80104c6:	b292      	uxth	r2, r2
 80104c8:	4311      	orrs	r1, r2
 80104ca:	e7d0      	b.n	801046e <_calloc_r+0x16>
 80104cc:	2e00      	cmp	r6, #0
 80104ce:	d101      	bne.n	80104d4 <_calloc_r+0x7c>
 80104d0:	1c15      	adds	r5, r2, #0
 80104d2:	e7ed      	b.n	80104b0 <_calloc_r+0x58>
 80104d4:	f7fc f80a 	bl	800c4ec <__errno>
 80104d8:	230c      	movs	r3, #12
 80104da:	2500      	movs	r5, #0
 80104dc:	6003      	str	r3, [r0, #0]
 80104de:	0028      	movs	r0, r5
 80104e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104e2:	0003      	movs	r3, r0
 80104e4:	6104      	str	r4, [r0, #16]
 80104e6:	3318      	adds	r3, #24
 80104e8:	6144      	str	r4, [r0, #20]
 80104ea:	e7da      	b.n	80104a2 <_calloc_r+0x4a>
 80104ec:	2100      	movs	r1, #0
 80104ee:	f7fb ff09 	bl	800c304 <memset>
 80104f2:	e7f4      	b.n	80104de <_calloc_r+0x86>

080104f4 <quorem>:
 80104f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104f6:	6902      	ldr	r2, [r0, #16]
 80104f8:	690b      	ldr	r3, [r1, #16]
 80104fa:	b089      	sub	sp, #36	; 0x24
 80104fc:	0007      	movs	r7, r0
 80104fe:	9104      	str	r1, [sp, #16]
 8010500:	2000      	movs	r0, #0
 8010502:	429a      	cmp	r2, r3
 8010504:	db69      	blt.n	80105da <quorem+0xe6>
 8010506:	3b01      	subs	r3, #1
 8010508:	009c      	lsls	r4, r3, #2
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	000b      	movs	r3, r1
 801050e:	3314      	adds	r3, #20
 8010510:	9306      	str	r3, [sp, #24]
 8010512:	191b      	adds	r3, r3, r4
 8010514:	9305      	str	r3, [sp, #20]
 8010516:	003b      	movs	r3, r7
 8010518:	3314      	adds	r3, #20
 801051a:	9303      	str	r3, [sp, #12]
 801051c:	191c      	adds	r4, r3, r4
 801051e:	9b05      	ldr	r3, [sp, #20]
 8010520:	6826      	ldr	r6, [r4, #0]
 8010522:	681d      	ldr	r5, [r3, #0]
 8010524:	0030      	movs	r0, r6
 8010526:	3501      	adds	r5, #1
 8010528:	0029      	movs	r1, r5
 801052a:	f7ef fe07 	bl	800013c <__udivsi3>
 801052e:	9002      	str	r0, [sp, #8]
 8010530:	42ae      	cmp	r6, r5
 8010532:	d329      	bcc.n	8010588 <quorem+0x94>
 8010534:	9b06      	ldr	r3, [sp, #24]
 8010536:	2600      	movs	r6, #0
 8010538:	469c      	mov	ip, r3
 801053a:	9d03      	ldr	r5, [sp, #12]
 801053c:	9606      	str	r6, [sp, #24]
 801053e:	4662      	mov	r2, ip
 8010540:	ca08      	ldmia	r2!, {r3}
 8010542:	6828      	ldr	r0, [r5, #0]
 8010544:	4694      	mov	ip, r2
 8010546:	9a02      	ldr	r2, [sp, #8]
 8010548:	b299      	uxth	r1, r3
 801054a:	4351      	muls	r1, r2
 801054c:	0c1b      	lsrs	r3, r3, #16
 801054e:	4353      	muls	r3, r2
 8010550:	1989      	adds	r1, r1, r6
 8010552:	0c0a      	lsrs	r2, r1, #16
 8010554:	189b      	adds	r3, r3, r2
 8010556:	9307      	str	r3, [sp, #28]
 8010558:	0c1e      	lsrs	r6, r3, #16
 801055a:	9b06      	ldr	r3, [sp, #24]
 801055c:	b282      	uxth	r2, r0
 801055e:	18d2      	adds	r2, r2, r3
 8010560:	466b      	mov	r3, sp
 8010562:	b289      	uxth	r1, r1
 8010564:	8b9b      	ldrh	r3, [r3, #28]
 8010566:	1a52      	subs	r2, r2, r1
 8010568:	0c01      	lsrs	r1, r0, #16
 801056a:	1ac9      	subs	r1, r1, r3
 801056c:	1413      	asrs	r3, r2, #16
 801056e:	18cb      	adds	r3, r1, r3
 8010570:	1419      	asrs	r1, r3, #16
 8010572:	b292      	uxth	r2, r2
 8010574:	041b      	lsls	r3, r3, #16
 8010576:	4313      	orrs	r3, r2
 8010578:	c508      	stmia	r5!, {r3}
 801057a:	9b05      	ldr	r3, [sp, #20]
 801057c:	9106      	str	r1, [sp, #24]
 801057e:	4563      	cmp	r3, ip
 8010580:	d2dd      	bcs.n	801053e <quorem+0x4a>
 8010582:	6823      	ldr	r3, [r4, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d030      	beq.n	80105ea <quorem+0xf6>
 8010588:	0038      	movs	r0, r7
 801058a:	9904      	ldr	r1, [sp, #16]
 801058c:	f7fc ff04 	bl	800d398 <__mcmp>
 8010590:	2800      	cmp	r0, #0
 8010592:	db21      	blt.n	80105d8 <quorem+0xe4>
 8010594:	0038      	movs	r0, r7
 8010596:	2600      	movs	r6, #0
 8010598:	9b02      	ldr	r3, [sp, #8]
 801059a:	9c04      	ldr	r4, [sp, #16]
 801059c:	3301      	adds	r3, #1
 801059e:	9302      	str	r3, [sp, #8]
 80105a0:	3014      	adds	r0, #20
 80105a2:	3414      	adds	r4, #20
 80105a4:	6803      	ldr	r3, [r0, #0]
 80105a6:	cc02      	ldmia	r4!, {r1}
 80105a8:	b29d      	uxth	r5, r3
 80105aa:	19ad      	adds	r5, r5, r6
 80105ac:	b28a      	uxth	r2, r1
 80105ae:	1aaa      	subs	r2, r5, r2
 80105b0:	0c09      	lsrs	r1, r1, #16
 80105b2:	0c1b      	lsrs	r3, r3, #16
 80105b4:	1a5b      	subs	r3, r3, r1
 80105b6:	1411      	asrs	r1, r2, #16
 80105b8:	185b      	adds	r3, r3, r1
 80105ba:	141e      	asrs	r6, r3, #16
 80105bc:	b292      	uxth	r2, r2
 80105be:	041b      	lsls	r3, r3, #16
 80105c0:	4313      	orrs	r3, r2
 80105c2:	c008      	stmia	r0!, {r3}
 80105c4:	9b05      	ldr	r3, [sp, #20]
 80105c6:	42a3      	cmp	r3, r4
 80105c8:	d2ec      	bcs.n	80105a4 <quorem+0xb0>
 80105ca:	9b01      	ldr	r3, [sp, #4]
 80105cc:	9a03      	ldr	r2, [sp, #12]
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	18d3      	adds	r3, r2, r3
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	2a00      	cmp	r2, #0
 80105d6:	d015      	beq.n	8010604 <quorem+0x110>
 80105d8:	9802      	ldr	r0, [sp, #8]
 80105da:	b009      	add	sp, #36	; 0x24
 80105dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d106      	bne.n	80105f2 <quorem+0xfe>
 80105e4:	9b01      	ldr	r3, [sp, #4]
 80105e6:	3b01      	subs	r3, #1
 80105e8:	9301      	str	r3, [sp, #4]
 80105ea:	9b03      	ldr	r3, [sp, #12]
 80105ec:	3c04      	subs	r4, #4
 80105ee:	42a3      	cmp	r3, r4
 80105f0:	d3f5      	bcc.n	80105de <quorem+0xea>
 80105f2:	9b01      	ldr	r3, [sp, #4]
 80105f4:	613b      	str	r3, [r7, #16]
 80105f6:	e7c7      	b.n	8010588 <quorem+0x94>
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	2a00      	cmp	r2, #0
 80105fc:	d106      	bne.n	801060c <quorem+0x118>
 80105fe:	9a01      	ldr	r2, [sp, #4]
 8010600:	3a01      	subs	r2, #1
 8010602:	9201      	str	r2, [sp, #4]
 8010604:	9a03      	ldr	r2, [sp, #12]
 8010606:	3b04      	subs	r3, #4
 8010608:	429a      	cmp	r2, r3
 801060a:	d3f5      	bcc.n	80105f8 <quorem+0x104>
 801060c:	9b01      	ldr	r3, [sp, #4]
 801060e:	613b      	str	r3, [r7, #16]
 8010610:	e7e2      	b.n	80105d8 <quorem+0xe4>
	...

08010614 <_dtoa_r>:
 8010614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010616:	0014      	movs	r4, r2
 8010618:	001d      	movs	r5, r3
 801061a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801061c:	b09d      	sub	sp, #116	; 0x74
 801061e:	9408      	str	r4, [sp, #32]
 8010620:	9509      	str	r5, [sp, #36]	; 0x24
 8010622:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8010624:	9004      	str	r0, [sp, #16]
 8010626:	2900      	cmp	r1, #0
 8010628:	d009      	beq.n	801063e <_dtoa_r+0x2a>
 801062a:	2301      	movs	r3, #1
 801062c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801062e:	4093      	lsls	r3, r2
 8010630:	604a      	str	r2, [r1, #4]
 8010632:	608b      	str	r3, [r1, #8]
 8010634:	f7fc fc56 	bl	800cee4 <_Bfree>
 8010638:	2300      	movs	r3, #0
 801063a:	9a04      	ldr	r2, [sp, #16]
 801063c:	6393      	str	r3, [r2, #56]	; 0x38
 801063e:	2d00      	cmp	r5, #0
 8010640:	da1e      	bge.n	8010680 <_dtoa_r+0x6c>
 8010642:	2301      	movs	r3, #1
 8010644:	6033      	str	r3, [r6, #0]
 8010646:	006b      	lsls	r3, r5, #1
 8010648:	085b      	lsrs	r3, r3, #1
 801064a:	9309      	str	r3, [sp, #36]	; 0x24
 801064c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801064e:	4bb5      	ldr	r3, [pc, #724]	; (8010924 <_dtoa_r+0x310>)
 8010650:	4ab4      	ldr	r2, [pc, #720]	; (8010924 <_dtoa_r+0x310>)
 8010652:	403b      	ands	r3, r7
 8010654:	4293      	cmp	r3, r2
 8010656:	d116      	bne.n	8010686 <_dtoa_r+0x72>
 8010658:	4bb3      	ldr	r3, [pc, #716]	; (8010928 <_dtoa_r+0x314>)
 801065a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801065c:	6013      	str	r3, [r2, #0]
 801065e:	033b      	lsls	r3, r7, #12
 8010660:	0b1b      	lsrs	r3, r3, #12
 8010662:	4323      	orrs	r3, r4
 8010664:	d101      	bne.n	801066a <_dtoa_r+0x56>
 8010666:	f000 fdb2 	bl	80111ce <_dtoa_r+0xbba>
 801066a:	4bb0      	ldr	r3, [pc, #704]	; (801092c <_dtoa_r+0x318>)
 801066c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801066e:	9306      	str	r3, [sp, #24]
 8010670:	2a00      	cmp	r2, #0
 8010672:	d002      	beq.n	801067a <_dtoa_r+0x66>
 8010674:	4bae      	ldr	r3, [pc, #696]	; (8010930 <_dtoa_r+0x31c>)
 8010676:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010678:	6013      	str	r3, [r2, #0]
 801067a:	9806      	ldr	r0, [sp, #24]
 801067c:	b01d      	add	sp, #116	; 0x74
 801067e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010680:	2300      	movs	r3, #0
 8010682:	6033      	str	r3, [r6, #0]
 8010684:	e7e2      	b.n	801064c <_dtoa_r+0x38>
 8010686:	9a08      	ldr	r2, [sp, #32]
 8010688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801068a:	9210      	str	r2, [sp, #64]	; 0x40
 801068c:	9311      	str	r3, [sp, #68]	; 0x44
 801068e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010690:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010692:	2200      	movs	r2, #0
 8010694:	2300      	movs	r3, #0
 8010696:	f7ef fed7 	bl	8000448 <__aeabi_dcmpeq>
 801069a:	1e06      	subs	r6, r0, #0
 801069c:	d009      	beq.n	80106b2 <_dtoa_r+0x9e>
 801069e:	2301      	movs	r3, #1
 80106a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	4ba3      	ldr	r3, [pc, #652]	; (8010934 <_dtoa_r+0x320>)
 80106a6:	9306      	str	r3, [sp, #24]
 80106a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0e5      	beq.n	801067a <_dtoa_r+0x66>
 80106ae:	4ba2      	ldr	r3, [pc, #648]	; (8010938 <_dtoa_r+0x324>)
 80106b0:	e7e1      	b.n	8010676 <_dtoa_r+0x62>
 80106b2:	ab1a      	add	r3, sp, #104	; 0x68
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	ab1b      	add	r3, sp, #108	; 0x6c
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	9804      	ldr	r0, [sp, #16]
 80106bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80106be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106c0:	f7fc ff86 	bl	800d5d0 <__d2b>
 80106c4:	007a      	lsls	r2, r7, #1
 80106c6:	9005      	str	r0, [sp, #20]
 80106c8:	0d52      	lsrs	r2, r2, #21
 80106ca:	d100      	bne.n	80106ce <_dtoa_r+0xba>
 80106cc:	e07b      	b.n	80107c6 <_dtoa_r+0x1b2>
 80106ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106d0:	9617      	str	r6, [sp, #92]	; 0x5c
 80106d2:	0319      	lsls	r1, r3, #12
 80106d4:	4b99      	ldr	r3, [pc, #612]	; (801093c <_dtoa_r+0x328>)
 80106d6:	0b09      	lsrs	r1, r1, #12
 80106d8:	430b      	orrs	r3, r1
 80106da:	4999      	ldr	r1, [pc, #612]	; (8010940 <_dtoa_r+0x32c>)
 80106dc:	1857      	adds	r7, r2, r1
 80106de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80106e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106e2:	0019      	movs	r1, r3
 80106e4:	2200      	movs	r2, #0
 80106e6:	4b97      	ldr	r3, [pc, #604]	; (8010944 <_dtoa_r+0x330>)
 80106e8:	f7f1 fa82 	bl	8001bf0 <__aeabi_dsub>
 80106ec:	4a96      	ldr	r2, [pc, #600]	; (8010948 <_dtoa_r+0x334>)
 80106ee:	4b97      	ldr	r3, [pc, #604]	; (801094c <_dtoa_r+0x338>)
 80106f0:	f7f0 ffbc 	bl	800166c <__aeabi_dmul>
 80106f4:	4a96      	ldr	r2, [pc, #600]	; (8010950 <_dtoa_r+0x33c>)
 80106f6:	4b97      	ldr	r3, [pc, #604]	; (8010954 <_dtoa_r+0x340>)
 80106f8:	f7f0 f85e 	bl	80007b8 <__aeabi_dadd>
 80106fc:	0004      	movs	r4, r0
 80106fe:	0038      	movs	r0, r7
 8010700:	000d      	movs	r5, r1
 8010702:	f7f1 fe4b 	bl	800239c <__aeabi_i2d>
 8010706:	4a94      	ldr	r2, [pc, #592]	; (8010958 <_dtoa_r+0x344>)
 8010708:	4b94      	ldr	r3, [pc, #592]	; (801095c <_dtoa_r+0x348>)
 801070a:	f7f0 ffaf 	bl	800166c <__aeabi_dmul>
 801070e:	0002      	movs	r2, r0
 8010710:	000b      	movs	r3, r1
 8010712:	0020      	movs	r0, r4
 8010714:	0029      	movs	r1, r5
 8010716:	f7f0 f84f 	bl	80007b8 <__aeabi_dadd>
 801071a:	0004      	movs	r4, r0
 801071c:	000d      	movs	r5, r1
 801071e:	f7f1 fe07 	bl	8002330 <__aeabi_d2iz>
 8010722:	2200      	movs	r2, #0
 8010724:	9003      	str	r0, [sp, #12]
 8010726:	2300      	movs	r3, #0
 8010728:	0020      	movs	r0, r4
 801072a:	0029      	movs	r1, r5
 801072c:	f7ef fe92 	bl	8000454 <__aeabi_dcmplt>
 8010730:	2800      	cmp	r0, #0
 8010732:	d00b      	beq.n	801074c <_dtoa_r+0x138>
 8010734:	9803      	ldr	r0, [sp, #12]
 8010736:	f7f1 fe31 	bl	800239c <__aeabi_i2d>
 801073a:	002b      	movs	r3, r5
 801073c:	0022      	movs	r2, r4
 801073e:	f7ef fe83 	bl	8000448 <__aeabi_dcmpeq>
 8010742:	4243      	negs	r3, r0
 8010744:	4158      	adcs	r0, r3
 8010746:	9b03      	ldr	r3, [sp, #12]
 8010748:	1a1b      	subs	r3, r3, r0
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	2301      	movs	r3, #1
 801074e:	9316      	str	r3, [sp, #88]	; 0x58
 8010750:	9b03      	ldr	r3, [sp, #12]
 8010752:	2b16      	cmp	r3, #22
 8010754:	d810      	bhi.n	8010778 <_dtoa_r+0x164>
 8010756:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010758:	9911      	ldr	r1, [sp, #68]	; 0x44
 801075a:	9a03      	ldr	r2, [sp, #12]
 801075c:	4b80      	ldr	r3, [pc, #512]	; (8010960 <_dtoa_r+0x34c>)
 801075e:	00d2      	lsls	r2, r2, #3
 8010760:	189b      	adds	r3, r3, r2
 8010762:	681a      	ldr	r2, [r3, #0]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	f7ef fe75 	bl	8000454 <__aeabi_dcmplt>
 801076a:	2800      	cmp	r0, #0
 801076c:	d047      	beq.n	80107fe <_dtoa_r+0x1ea>
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	3b01      	subs	r3, #1
 8010772:	9303      	str	r3, [sp, #12]
 8010774:	2300      	movs	r3, #0
 8010776:	9316      	str	r3, [sp, #88]	; 0x58
 8010778:	2200      	movs	r2, #0
 801077a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801077c:	920a      	str	r2, [sp, #40]	; 0x28
 801077e:	1bdb      	subs	r3, r3, r7
 8010780:	1e5a      	subs	r2, r3, #1
 8010782:	d53e      	bpl.n	8010802 <_dtoa_r+0x1ee>
 8010784:	2201      	movs	r2, #1
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	930a      	str	r3, [sp, #40]	; 0x28
 801078a:	2300      	movs	r3, #0
 801078c:	930c      	str	r3, [sp, #48]	; 0x30
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	2b00      	cmp	r3, #0
 8010792:	db38      	blt.n	8010806 <_dtoa_r+0x1f2>
 8010794:	9a03      	ldr	r2, [sp, #12]
 8010796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010798:	4694      	mov	ip, r2
 801079a:	4463      	add	r3, ip
 801079c:	930c      	str	r3, [sp, #48]	; 0x30
 801079e:	2300      	movs	r3, #0
 80107a0:	9213      	str	r2, [sp, #76]	; 0x4c
 80107a2:	930d      	str	r3, [sp, #52]	; 0x34
 80107a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107a6:	2401      	movs	r4, #1
 80107a8:	2b09      	cmp	r3, #9
 80107aa:	d867      	bhi.n	801087c <_dtoa_r+0x268>
 80107ac:	2b05      	cmp	r3, #5
 80107ae:	dd02      	ble.n	80107b6 <_dtoa_r+0x1a2>
 80107b0:	2400      	movs	r4, #0
 80107b2:	3b04      	subs	r3, #4
 80107b4:	9322      	str	r3, [sp, #136]	; 0x88
 80107b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80107b8:	1e98      	subs	r0, r3, #2
 80107ba:	2803      	cmp	r0, #3
 80107bc:	d867      	bhi.n	801088e <_dtoa_r+0x27a>
 80107be:	f7ef fca9 	bl	8000114 <__gnu_thumb1_case_uqi>
 80107c2:	3a2b      	.short	0x3a2b
 80107c4:	5b38      	.short	0x5b38
 80107c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80107c8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80107ca:	18f6      	adds	r6, r6, r3
 80107cc:	4b65      	ldr	r3, [pc, #404]	; (8010964 <_dtoa_r+0x350>)
 80107ce:	18f2      	adds	r2, r6, r3
 80107d0:	2a20      	cmp	r2, #32
 80107d2:	dd0f      	ble.n	80107f4 <_dtoa_r+0x1e0>
 80107d4:	2340      	movs	r3, #64	; 0x40
 80107d6:	1a9b      	subs	r3, r3, r2
 80107d8:	409f      	lsls	r7, r3
 80107da:	4b63      	ldr	r3, [pc, #396]	; (8010968 <_dtoa_r+0x354>)
 80107dc:	0038      	movs	r0, r7
 80107de:	18f3      	adds	r3, r6, r3
 80107e0:	40dc      	lsrs	r4, r3
 80107e2:	4320      	orrs	r0, r4
 80107e4:	f7f1 fe0a 	bl	80023fc <__aeabi_ui2d>
 80107e8:	2201      	movs	r2, #1
 80107ea:	4b60      	ldr	r3, [pc, #384]	; (801096c <_dtoa_r+0x358>)
 80107ec:	1e77      	subs	r7, r6, #1
 80107ee:	18cb      	adds	r3, r1, r3
 80107f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80107f2:	e776      	b.n	80106e2 <_dtoa_r+0xce>
 80107f4:	2320      	movs	r3, #32
 80107f6:	0020      	movs	r0, r4
 80107f8:	1a9b      	subs	r3, r3, r2
 80107fa:	4098      	lsls	r0, r3
 80107fc:	e7f2      	b.n	80107e4 <_dtoa_r+0x1d0>
 80107fe:	9016      	str	r0, [sp, #88]	; 0x58
 8010800:	e7ba      	b.n	8010778 <_dtoa_r+0x164>
 8010802:	920c      	str	r2, [sp, #48]	; 0x30
 8010804:	e7c3      	b.n	801078e <_dtoa_r+0x17a>
 8010806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010808:	9a03      	ldr	r2, [sp, #12]
 801080a:	1a9b      	subs	r3, r3, r2
 801080c:	930a      	str	r3, [sp, #40]	; 0x28
 801080e:	4253      	negs	r3, r2
 8010810:	930d      	str	r3, [sp, #52]	; 0x34
 8010812:	2300      	movs	r3, #0
 8010814:	9313      	str	r3, [sp, #76]	; 0x4c
 8010816:	e7c5      	b.n	80107a4 <_dtoa_r+0x190>
 8010818:	2300      	movs	r3, #0
 801081a:	930f      	str	r3, [sp, #60]	; 0x3c
 801081c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801081e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010820:	9307      	str	r3, [sp, #28]
 8010822:	2b00      	cmp	r3, #0
 8010824:	dc13      	bgt.n	801084e <_dtoa_r+0x23a>
 8010826:	2301      	movs	r3, #1
 8010828:	001a      	movs	r2, r3
 801082a:	930b      	str	r3, [sp, #44]	; 0x2c
 801082c:	9307      	str	r3, [sp, #28]
 801082e:	9223      	str	r2, [sp, #140]	; 0x8c
 8010830:	e00d      	b.n	801084e <_dtoa_r+0x23a>
 8010832:	2301      	movs	r3, #1
 8010834:	e7f1      	b.n	801081a <_dtoa_r+0x206>
 8010836:	2300      	movs	r3, #0
 8010838:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801083a:	930f      	str	r3, [sp, #60]	; 0x3c
 801083c:	4694      	mov	ip, r2
 801083e:	9b03      	ldr	r3, [sp, #12]
 8010840:	4463      	add	r3, ip
 8010842:	930b      	str	r3, [sp, #44]	; 0x2c
 8010844:	3301      	adds	r3, #1
 8010846:	9307      	str	r3, [sp, #28]
 8010848:	2b00      	cmp	r3, #0
 801084a:	dc00      	bgt.n	801084e <_dtoa_r+0x23a>
 801084c:	2301      	movs	r3, #1
 801084e:	2100      	movs	r1, #0
 8010850:	2204      	movs	r2, #4
 8010852:	0010      	movs	r0, r2
 8010854:	3014      	adds	r0, #20
 8010856:	4298      	cmp	r0, r3
 8010858:	d91d      	bls.n	8010896 <_dtoa_r+0x282>
 801085a:	9b04      	ldr	r3, [sp, #16]
 801085c:	0018      	movs	r0, r3
 801085e:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010860:	f7fc fb18 	bl	800ce94 <_Balloc>
 8010864:	9006      	str	r0, [sp, #24]
 8010866:	2800      	cmp	r0, #0
 8010868:	d118      	bne.n	801089c <_dtoa_r+0x288>
 801086a:	21b0      	movs	r1, #176	; 0xb0
 801086c:	4b40      	ldr	r3, [pc, #256]	; (8010970 <_dtoa_r+0x35c>)
 801086e:	4841      	ldr	r0, [pc, #260]	; (8010974 <_dtoa_r+0x360>)
 8010870:	9a06      	ldr	r2, [sp, #24]
 8010872:	31ff      	adds	r1, #255	; 0xff
 8010874:	f7ff fdd2 	bl	801041c <__assert_func>
 8010878:	2301      	movs	r3, #1
 801087a:	e7dd      	b.n	8010838 <_dtoa_r+0x224>
 801087c:	2300      	movs	r3, #0
 801087e:	940f      	str	r4, [sp, #60]	; 0x3c
 8010880:	9322      	str	r3, [sp, #136]	; 0x88
 8010882:	3b01      	subs	r3, #1
 8010884:	930b      	str	r3, [sp, #44]	; 0x2c
 8010886:	9307      	str	r3, [sp, #28]
 8010888:	2200      	movs	r2, #0
 801088a:	3313      	adds	r3, #19
 801088c:	e7cf      	b.n	801082e <_dtoa_r+0x21a>
 801088e:	2301      	movs	r3, #1
 8010890:	930f      	str	r3, [sp, #60]	; 0x3c
 8010892:	3b02      	subs	r3, #2
 8010894:	e7f6      	b.n	8010884 <_dtoa_r+0x270>
 8010896:	3101      	adds	r1, #1
 8010898:	0052      	lsls	r2, r2, #1
 801089a:	e7da      	b.n	8010852 <_dtoa_r+0x23e>
 801089c:	9b04      	ldr	r3, [sp, #16]
 801089e:	9a06      	ldr	r2, [sp, #24]
 80108a0:	639a      	str	r2, [r3, #56]	; 0x38
 80108a2:	9b07      	ldr	r3, [sp, #28]
 80108a4:	2b0e      	cmp	r3, #14
 80108a6:	d900      	bls.n	80108aa <_dtoa_r+0x296>
 80108a8:	e0e3      	b.n	8010a72 <_dtoa_r+0x45e>
 80108aa:	2c00      	cmp	r4, #0
 80108ac:	d100      	bne.n	80108b0 <_dtoa_r+0x29c>
 80108ae:	e0e0      	b.n	8010a72 <_dtoa_r+0x45e>
 80108b0:	9b03      	ldr	r3, [sp, #12]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dd62      	ble.n	801097c <_dtoa_r+0x368>
 80108b6:	210f      	movs	r1, #15
 80108b8:	9a03      	ldr	r2, [sp, #12]
 80108ba:	4b29      	ldr	r3, [pc, #164]	; (8010960 <_dtoa_r+0x34c>)
 80108bc:	400a      	ands	r2, r1
 80108be:	00d2      	lsls	r2, r2, #3
 80108c0:	189b      	adds	r3, r3, r2
 80108c2:	681e      	ldr	r6, [r3, #0]
 80108c4:	685f      	ldr	r7, [r3, #4]
 80108c6:	9b03      	ldr	r3, [sp, #12]
 80108c8:	2402      	movs	r4, #2
 80108ca:	111d      	asrs	r5, r3, #4
 80108cc:	05db      	lsls	r3, r3, #23
 80108ce:	d50a      	bpl.n	80108e6 <_dtoa_r+0x2d2>
 80108d0:	4b29      	ldr	r3, [pc, #164]	; (8010978 <_dtoa_r+0x364>)
 80108d2:	400d      	ands	r5, r1
 80108d4:	6a1a      	ldr	r2, [r3, #32]
 80108d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80108da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80108dc:	f7f0 facc 	bl	8000e78 <__aeabi_ddiv>
 80108e0:	9008      	str	r0, [sp, #32]
 80108e2:	9109      	str	r1, [sp, #36]	; 0x24
 80108e4:	3401      	adds	r4, #1
 80108e6:	4b24      	ldr	r3, [pc, #144]	; (8010978 <_dtoa_r+0x364>)
 80108e8:	930e      	str	r3, [sp, #56]	; 0x38
 80108ea:	2d00      	cmp	r5, #0
 80108ec:	d108      	bne.n	8010900 <_dtoa_r+0x2ec>
 80108ee:	9808      	ldr	r0, [sp, #32]
 80108f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108f2:	0032      	movs	r2, r6
 80108f4:	003b      	movs	r3, r7
 80108f6:	f7f0 fabf 	bl	8000e78 <__aeabi_ddiv>
 80108fa:	9008      	str	r0, [sp, #32]
 80108fc:	9109      	str	r1, [sp, #36]	; 0x24
 80108fe:	e058      	b.n	80109b2 <_dtoa_r+0x39e>
 8010900:	2301      	movs	r3, #1
 8010902:	421d      	tst	r5, r3
 8010904:	d009      	beq.n	801091a <_dtoa_r+0x306>
 8010906:	18e4      	adds	r4, r4, r3
 8010908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801090a:	0030      	movs	r0, r6
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	0039      	movs	r1, r7
 8010912:	f7f0 feab 	bl	800166c <__aeabi_dmul>
 8010916:	0006      	movs	r6, r0
 8010918:	000f      	movs	r7, r1
 801091a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801091c:	106d      	asrs	r5, r5, #1
 801091e:	3308      	adds	r3, #8
 8010920:	e7e2      	b.n	80108e8 <_dtoa_r+0x2d4>
 8010922:	46c0      	nop			; (mov r8, r8)
 8010924:	7ff00000 	.word	0x7ff00000
 8010928:	0000270f 	.word	0x0000270f
 801092c:	08014e15 	.word	0x08014e15
 8010930:	08014e18 	.word	0x08014e18
 8010934:	08014d86 	.word	0x08014d86
 8010938:	08014d87 	.word	0x08014d87
 801093c:	3ff00000 	.word	0x3ff00000
 8010940:	fffffc01 	.word	0xfffffc01
 8010944:	3ff80000 	.word	0x3ff80000
 8010948:	636f4361 	.word	0x636f4361
 801094c:	3fd287a7 	.word	0x3fd287a7
 8010950:	8b60c8b3 	.word	0x8b60c8b3
 8010954:	3fc68a28 	.word	0x3fc68a28
 8010958:	509f79fb 	.word	0x509f79fb
 801095c:	3fd34413 	.word	0x3fd34413
 8010960:	08014c80 	.word	0x08014c80
 8010964:	00000432 	.word	0x00000432
 8010968:	00000412 	.word	0x00000412
 801096c:	fe100000 	.word	0xfe100000
 8010970:	08014b89 	.word	0x08014b89
 8010974:	08014e19 	.word	0x08014e19
 8010978:	08014c58 	.word	0x08014c58
 801097c:	9b03      	ldr	r3, [sp, #12]
 801097e:	2402      	movs	r4, #2
 8010980:	2b00      	cmp	r3, #0
 8010982:	d016      	beq.n	80109b2 <_dtoa_r+0x39e>
 8010984:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010986:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010988:	220f      	movs	r2, #15
 801098a:	425d      	negs	r5, r3
 801098c:	402a      	ands	r2, r5
 801098e:	4bdd      	ldr	r3, [pc, #884]	; (8010d04 <_dtoa_r+0x6f0>)
 8010990:	00d2      	lsls	r2, r2, #3
 8010992:	189b      	adds	r3, r3, r2
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	f7f0 fe68 	bl	800166c <__aeabi_dmul>
 801099c:	2701      	movs	r7, #1
 801099e:	2300      	movs	r3, #0
 80109a0:	9008      	str	r0, [sp, #32]
 80109a2:	9109      	str	r1, [sp, #36]	; 0x24
 80109a4:	4ed8      	ldr	r6, [pc, #864]	; (8010d08 <_dtoa_r+0x6f4>)
 80109a6:	112d      	asrs	r5, r5, #4
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	d000      	beq.n	80109ae <_dtoa_r+0x39a>
 80109ac:	e091      	b.n	8010ad2 <_dtoa_r+0x4be>
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1a3      	bne.n	80108fa <_dtoa_r+0x2e6>
 80109b2:	9e08      	ldr	r6, [sp, #32]
 80109b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d100      	bne.n	80109be <_dtoa_r+0x3aa>
 80109bc:	e094      	b.n	8010ae8 <_dtoa_r+0x4d4>
 80109be:	2200      	movs	r2, #0
 80109c0:	0030      	movs	r0, r6
 80109c2:	0039      	movs	r1, r7
 80109c4:	4bd1      	ldr	r3, [pc, #836]	; (8010d0c <_dtoa_r+0x6f8>)
 80109c6:	f7ef fd45 	bl	8000454 <__aeabi_dcmplt>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	d100      	bne.n	80109d0 <_dtoa_r+0x3bc>
 80109ce:	e08b      	b.n	8010ae8 <_dtoa_r+0x4d4>
 80109d0:	9b07      	ldr	r3, [sp, #28]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d100      	bne.n	80109d8 <_dtoa_r+0x3c4>
 80109d6:	e087      	b.n	8010ae8 <_dtoa_r+0x4d4>
 80109d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	dd45      	ble.n	8010a6a <_dtoa_r+0x456>
 80109de:	9b03      	ldr	r3, [sp, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	3b01      	subs	r3, #1
 80109e4:	930e      	str	r3, [sp, #56]	; 0x38
 80109e6:	0030      	movs	r0, r6
 80109e8:	4bc9      	ldr	r3, [pc, #804]	; (8010d10 <_dtoa_r+0x6fc>)
 80109ea:	0039      	movs	r1, r7
 80109ec:	f7f0 fe3e 	bl	800166c <__aeabi_dmul>
 80109f0:	9008      	str	r0, [sp, #32]
 80109f2:	9109      	str	r1, [sp, #36]	; 0x24
 80109f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109f6:	3401      	adds	r4, #1
 80109f8:	0020      	movs	r0, r4
 80109fa:	9e08      	ldr	r6, [sp, #32]
 80109fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80109fe:	9312      	str	r3, [sp, #72]	; 0x48
 8010a00:	f7f1 fccc 	bl	800239c <__aeabi_i2d>
 8010a04:	0032      	movs	r2, r6
 8010a06:	003b      	movs	r3, r7
 8010a08:	f7f0 fe30 	bl	800166c <__aeabi_dmul>
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	4bc1      	ldr	r3, [pc, #772]	; (8010d14 <_dtoa_r+0x700>)
 8010a10:	f7ef fed2 	bl	80007b8 <__aeabi_dadd>
 8010a14:	4ac0      	ldr	r2, [pc, #768]	; (8010d18 <_dtoa_r+0x704>)
 8010a16:	9014      	str	r0, [sp, #80]	; 0x50
 8010a18:	9115      	str	r1, [sp, #84]	; 0x54
 8010a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010a1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010a1e:	4694      	mov	ip, r2
 8010a20:	9308      	str	r3, [sp, #32]
 8010a22:	9409      	str	r4, [sp, #36]	; 0x24
 8010a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a26:	4463      	add	r3, ip
 8010a28:	9318      	str	r3, [sp, #96]	; 0x60
 8010a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d15e      	bne.n	8010af0 <_dtoa_r+0x4dc>
 8010a32:	2200      	movs	r2, #0
 8010a34:	4bb9      	ldr	r3, [pc, #740]	; (8010d1c <_dtoa_r+0x708>)
 8010a36:	0030      	movs	r0, r6
 8010a38:	0039      	movs	r1, r7
 8010a3a:	f7f1 f8d9 	bl	8001bf0 <__aeabi_dsub>
 8010a3e:	9a08      	ldr	r2, [sp, #32]
 8010a40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010a42:	0004      	movs	r4, r0
 8010a44:	000d      	movs	r5, r1
 8010a46:	f7ef fd19 	bl	800047c <__aeabi_dcmpgt>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d000      	beq.n	8010a50 <_dtoa_r+0x43c>
 8010a4e:	e2b3      	b.n	8010fb8 <_dtoa_r+0x9a4>
 8010a50:	48b3      	ldr	r0, [pc, #716]	; (8010d20 <_dtoa_r+0x70c>)
 8010a52:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010a54:	4684      	mov	ip, r0
 8010a56:	4461      	add	r1, ip
 8010a58:	000b      	movs	r3, r1
 8010a5a:	0020      	movs	r0, r4
 8010a5c:	0029      	movs	r1, r5
 8010a5e:	9a08      	ldr	r2, [sp, #32]
 8010a60:	f7ef fcf8 	bl	8000454 <__aeabi_dcmplt>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	d000      	beq.n	8010a6a <_dtoa_r+0x456>
 8010a68:	e2a3      	b.n	8010fb2 <_dtoa_r+0x99e>
 8010a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010a6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010a6e:	9308      	str	r3, [sp, #32]
 8010a70:	9409      	str	r4, [sp, #36]	; 0x24
 8010a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	da00      	bge.n	8010a7a <_dtoa_r+0x466>
 8010a78:	e179      	b.n	8010d6e <_dtoa_r+0x75a>
 8010a7a:	9a03      	ldr	r2, [sp, #12]
 8010a7c:	2a0e      	cmp	r2, #14
 8010a7e:	dd00      	ble.n	8010a82 <_dtoa_r+0x46e>
 8010a80:	e175      	b.n	8010d6e <_dtoa_r+0x75a>
 8010a82:	4ba0      	ldr	r3, [pc, #640]	; (8010d04 <_dtoa_r+0x6f0>)
 8010a84:	00d2      	lsls	r2, r2, #3
 8010a86:	189b      	adds	r3, r3, r2
 8010a88:	681e      	ldr	r6, [r3, #0]
 8010a8a:	685f      	ldr	r7, [r3, #4]
 8010a8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	db00      	blt.n	8010a94 <_dtoa_r+0x480>
 8010a92:	e0e5      	b.n	8010c60 <_dtoa_r+0x64c>
 8010a94:	9b07      	ldr	r3, [sp, #28]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	dd00      	ble.n	8010a9c <_dtoa_r+0x488>
 8010a9a:	e0e1      	b.n	8010c60 <_dtoa_r+0x64c>
 8010a9c:	d000      	beq.n	8010aa0 <_dtoa_r+0x48c>
 8010a9e:	e288      	b.n	8010fb2 <_dtoa_r+0x99e>
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	0030      	movs	r0, r6
 8010aa4:	0039      	movs	r1, r7
 8010aa6:	4b9d      	ldr	r3, [pc, #628]	; (8010d1c <_dtoa_r+0x708>)
 8010aa8:	f7f0 fde0 	bl	800166c <__aeabi_dmul>
 8010aac:	9a08      	ldr	r2, [sp, #32]
 8010aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab0:	f7ef fcee 	bl	8000490 <__aeabi_dcmpge>
 8010ab4:	9e07      	ldr	r6, [sp, #28]
 8010ab6:	0037      	movs	r7, r6
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d000      	beq.n	8010abe <_dtoa_r+0x4aa>
 8010abc:	e25f      	b.n	8010f7e <_dtoa_r+0x96a>
 8010abe:	9b06      	ldr	r3, [sp, #24]
 8010ac0:	9a06      	ldr	r2, [sp, #24]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	9308      	str	r3, [sp, #32]
 8010ac6:	2331      	movs	r3, #49	; 0x31
 8010ac8:	7013      	strb	r3, [r2, #0]
 8010aca:	9b03      	ldr	r3, [sp, #12]
 8010acc:	3301      	adds	r3, #1
 8010ace:	9303      	str	r3, [sp, #12]
 8010ad0:	e25a      	b.n	8010f88 <_dtoa_r+0x974>
 8010ad2:	423d      	tst	r5, r7
 8010ad4:	d005      	beq.n	8010ae2 <_dtoa_r+0x4ce>
 8010ad6:	6832      	ldr	r2, [r6, #0]
 8010ad8:	6873      	ldr	r3, [r6, #4]
 8010ada:	f7f0 fdc7 	bl	800166c <__aeabi_dmul>
 8010ade:	003b      	movs	r3, r7
 8010ae0:	3401      	adds	r4, #1
 8010ae2:	106d      	asrs	r5, r5, #1
 8010ae4:	3608      	adds	r6, #8
 8010ae6:	e75f      	b.n	80109a8 <_dtoa_r+0x394>
 8010ae8:	9b03      	ldr	r3, [sp, #12]
 8010aea:	930e      	str	r3, [sp, #56]	; 0x38
 8010aec:	9b07      	ldr	r3, [sp, #28]
 8010aee:	e783      	b.n	80109f8 <_dtoa_r+0x3e4>
 8010af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010af2:	4b84      	ldr	r3, [pc, #528]	; (8010d04 <_dtoa_r+0x6f0>)
 8010af4:	3a01      	subs	r2, #1
 8010af6:	00d2      	lsls	r2, r2, #3
 8010af8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010afa:	189b      	adds	r3, r3, r2
 8010afc:	9c08      	ldr	r4, [sp, #32]
 8010afe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	2900      	cmp	r1, #0
 8010b06:	d051      	beq.n	8010bac <_dtoa_r+0x598>
 8010b08:	2000      	movs	r0, #0
 8010b0a:	4986      	ldr	r1, [pc, #536]	; (8010d24 <_dtoa_r+0x710>)
 8010b0c:	f7f0 f9b4 	bl	8000e78 <__aeabi_ddiv>
 8010b10:	0022      	movs	r2, r4
 8010b12:	002b      	movs	r3, r5
 8010b14:	f7f1 f86c 	bl	8001bf0 <__aeabi_dsub>
 8010b18:	9a06      	ldr	r2, [sp, #24]
 8010b1a:	0004      	movs	r4, r0
 8010b1c:	4694      	mov	ip, r2
 8010b1e:	000d      	movs	r5, r1
 8010b20:	9b06      	ldr	r3, [sp, #24]
 8010b22:	9314      	str	r3, [sp, #80]	; 0x50
 8010b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b26:	4463      	add	r3, ip
 8010b28:	9318      	str	r3, [sp, #96]	; 0x60
 8010b2a:	0039      	movs	r1, r7
 8010b2c:	0030      	movs	r0, r6
 8010b2e:	f7f1 fbff 	bl	8002330 <__aeabi_d2iz>
 8010b32:	9012      	str	r0, [sp, #72]	; 0x48
 8010b34:	f7f1 fc32 	bl	800239c <__aeabi_i2d>
 8010b38:	0002      	movs	r2, r0
 8010b3a:	000b      	movs	r3, r1
 8010b3c:	0030      	movs	r0, r6
 8010b3e:	0039      	movs	r1, r7
 8010b40:	f7f1 f856 	bl	8001bf0 <__aeabi_dsub>
 8010b44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010b46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b48:	3301      	adds	r3, #1
 8010b4a:	9308      	str	r3, [sp, #32]
 8010b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b4e:	0006      	movs	r6, r0
 8010b50:	3330      	adds	r3, #48	; 0x30
 8010b52:	7013      	strb	r3, [r2, #0]
 8010b54:	0022      	movs	r2, r4
 8010b56:	002b      	movs	r3, r5
 8010b58:	000f      	movs	r7, r1
 8010b5a:	f7ef fc7b 	bl	8000454 <__aeabi_dcmplt>
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d174      	bne.n	8010c4c <_dtoa_r+0x638>
 8010b62:	0032      	movs	r2, r6
 8010b64:	003b      	movs	r3, r7
 8010b66:	2000      	movs	r0, #0
 8010b68:	4968      	ldr	r1, [pc, #416]	; (8010d0c <_dtoa_r+0x6f8>)
 8010b6a:	f7f1 f841 	bl	8001bf0 <__aeabi_dsub>
 8010b6e:	0022      	movs	r2, r4
 8010b70:	002b      	movs	r3, r5
 8010b72:	f7ef fc6f 	bl	8000454 <__aeabi_dcmplt>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d000      	beq.n	8010b7c <_dtoa_r+0x568>
 8010b7a:	e0d7      	b.n	8010d2c <_dtoa_r+0x718>
 8010b7c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010b7e:	9a08      	ldr	r2, [sp, #32]
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d100      	bne.n	8010b86 <_dtoa_r+0x572>
 8010b84:	e771      	b.n	8010a6a <_dtoa_r+0x456>
 8010b86:	2200      	movs	r2, #0
 8010b88:	0020      	movs	r0, r4
 8010b8a:	0029      	movs	r1, r5
 8010b8c:	4b60      	ldr	r3, [pc, #384]	; (8010d10 <_dtoa_r+0x6fc>)
 8010b8e:	f7f0 fd6d 	bl	800166c <__aeabi_dmul>
 8010b92:	4b5f      	ldr	r3, [pc, #380]	; (8010d10 <_dtoa_r+0x6fc>)
 8010b94:	0004      	movs	r4, r0
 8010b96:	000d      	movs	r5, r1
 8010b98:	0030      	movs	r0, r6
 8010b9a:	0039      	movs	r1, r7
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f7f0 fd65 	bl	800166c <__aeabi_dmul>
 8010ba2:	9b08      	ldr	r3, [sp, #32]
 8010ba4:	0006      	movs	r6, r0
 8010ba6:	000f      	movs	r7, r1
 8010ba8:	9314      	str	r3, [sp, #80]	; 0x50
 8010baa:	e7be      	b.n	8010b2a <_dtoa_r+0x516>
 8010bac:	0020      	movs	r0, r4
 8010bae:	0029      	movs	r1, r5
 8010bb0:	f7f0 fd5c 	bl	800166c <__aeabi_dmul>
 8010bb4:	9a06      	ldr	r2, [sp, #24]
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	4694      	mov	ip, r2
 8010bba:	9308      	str	r3, [sp, #32]
 8010bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bbe:	9014      	str	r0, [sp, #80]	; 0x50
 8010bc0:	9115      	str	r1, [sp, #84]	; 0x54
 8010bc2:	4463      	add	r3, ip
 8010bc4:	9319      	str	r3, [sp, #100]	; 0x64
 8010bc6:	0030      	movs	r0, r6
 8010bc8:	0039      	movs	r1, r7
 8010bca:	f7f1 fbb1 	bl	8002330 <__aeabi_d2iz>
 8010bce:	9018      	str	r0, [sp, #96]	; 0x60
 8010bd0:	f7f1 fbe4 	bl	800239c <__aeabi_i2d>
 8010bd4:	0002      	movs	r2, r0
 8010bd6:	000b      	movs	r3, r1
 8010bd8:	0030      	movs	r0, r6
 8010bda:	0039      	movs	r1, r7
 8010bdc:	f7f1 f808 	bl	8001bf0 <__aeabi_dsub>
 8010be0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010be2:	9b08      	ldr	r3, [sp, #32]
 8010be4:	3630      	adds	r6, #48	; 0x30
 8010be6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010be8:	701e      	strb	r6, [r3, #0]
 8010bea:	3301      	adds	r3, #1
 8010bec:	0004      	movs	r4, r0
 8010bee:	000d      	movs	r5, r1
 8010bf0:	9308      	str	r3, [sp, #32]
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d12d      	bne.n	8010c52 <_dtoa_r+0x63e>
 8010bf6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010bf8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010bfa:	9a06      	ldr	r2, [sp, #24]
 8010bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bfe:	4694      	mov	ip, r2
 8010c00:	4463      	add	r3, ip
 8010c02:	2200      	movs	r2, #0
 8010c04:	9308      	str	r3, [sp, #32]
 8010c06:	4b47      	ldr	r3, [pc, #284]	; (8010d24 <_dtoa_r+0x710>)
 8010c08:	f7ef fdd6 	bl	80007b8 <__aeabi_dadd>
 8010c0c:	0002      	movs	r2, r0
 8010c0e:	000b      	movs	r3, r1
 8010c10:	0020      	movs	r0, r4
 8010c12:	0029      	movs	r1, r5
 8010c14:	f7ef fc32 	bl	800047c <__aeabi_dcmpgt>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	d000      	beq.n	8010c1e <_dtoa_r+0x60a>
 8010c1c:	e086      	b.n	8010d2c <_dtoa_r+0x718>
 8010c1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c22:	2000      	movs	r0, #0
 8010c24:	493f      	ldr	r1, [pc, #252]	; (8010d24 <_dtoa_r+0x710>)
 8010c26:	f7f0 ffe3 	bl	8001bf0 <__aeabi_dsub>
 8010c2a:	0002      	movs	r2, r0
 8010c2c:	000b      	movs	r3, r1
 8010c2e:	0020      	movs	r0, r4
 8010c30:	0029      	movs	r1, r5
 8010c32:	f7ef fc0f 	bl	8000454 <__aeabi_dcmplt>
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d100      	bne.n	8010c3c <_dtoa_r+0x628>
 8010c3a:	e716      	b.n	8010a6a <_dtoa_r+0x456>
 8010c3c:	9b08      	ldr	r3, [sp, #32]
 8010c3e:	001a      	movs	r2, r3
 8010c40:	3a01      	subs	r2, #1
 8010c42:	9208      	str	r2, [sp, #32]
 8010c44:	7812      	ldrb	r2, [r2, #0]
 8010c46:	2a30      	cmp	r2, #48	; 0x30
 8010c48:	d0f8      	beq.n	8010c3c <_dtoa_r+0x628>
 8010c4a:	9308      	str	r3, [sp, #32]
 8010c4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c4e:	9303      	str	r3, [sp, #12]
 8010c50:	e046      	b.n	8010ce0 <_dtoa_r+0x6cc>
 8010c52:	2200      	movs	r2, #0
 8010c54:	4b2e      	ldr	r3, [pc, #184]	; (8010d10 <_dtoa_r+0x6fc>)
 8010c56:	f7f0 fd09 	bl	800166c <__aeabi_dmul>
 8010c5a:	0006      	movs	r6, r0
 8010c5c:	000f      	movs	r7, r1
 8010c5e:	e7b2      	b.n	8010bc6 <_dtoa_r+0x5b2>
 8010c60:	9b06      	ldr	r3, [sp, #24]
 8010c62:	9a06      	ldr	r2, [sp, #24]
 8010c64:	930a      	str	r3, [sp, #40]	; 0x28
 8010c66:	9b07      	ldr	r3, [sp, #28]
 8010c68:	9c08      	ldr	r4, [sp, #32]
 8010c6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	189b      	adds	r3, r3, r2
 8010c70:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c72:	0032      	movs	r2, r6
 8010c74:	003b      	movs	r3, r7
 8010c76:	0020      	movs	r0, r4
 8010c78:	0029      	movs	r1, r5
 8010c7a:	f7f0 f8fd 	bl	8000e78 <__aeabi_ddiv>
 8010c7e:	f7f1 fb57 	bl	8002330 <__aeabi_d2iz>
 8010c82:	9007      	str	r0, [sp, #28]
 8010c84:	f7f1 fb8a 	bl	800239c <__aeabi_i2d>
 8010c88:	0032      	movs	r2, r6
 8010c8a:	003b      	movs	r3, r7
 8010c8c:	f7f0 fcee 	bl	800166c <__aeabi_dmul>
 8010c90:	0002      	movs	r2, r0
 8010c92:	000b      	movs	r3, r1
 8010c94:	0020      	movs	r0, r4
 8010c96:	0029      	movs	r1, r5
 8010c98:	f7f0 ffaa 	bl	8001bf0 <__aeabi_dsub>
 8010c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c9e:	001a      	movs	r2, r3
 8010ca0:	3201      	adds	r2, #1
 8010ca2:	920a      	str	r2, [sp, #40]	; 0x28
 8010ca4:	9208      	str	r2, [sp, #32]
 8010ca6:	9a07      	ldr	r2, [sp, #28]
 8010ca8:	3230      	adds	r2, #48	; 0x30
 8010caa:	701a      	strb	r2, [r3, #0]
 8010cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	d14f      	bne.n	8010d52 <_dtoa_r+0x73e>
 8010cb2:	0002      	movs	r2, r0
 8010cb4:	000b      	movs	r3, r1
 8010cb6:	f7ef fd7f 	bl	80007b8 <__aeabi_dadd>
 8010cba:	0032      	movs	r2, r6
 8010cbc:	003b      	movs	r3, r7
 8010cbe:	0004      	movs	r4, r0
 8010cc0:	000d      	movs	r5, r1
 8010cc2:	f7ef fbdb 	bl	800047c <__aeabi_dcmpgt>
 8010cc6:	2800      	cmp	r0, #0
 8010cc8:	d12e      	bne.n	8010d28 <_dtoa_r+0x714>
 8010cca:	0032      	movs	r2, r6
 8010ccc:	003b      	movs	r3, r7
 8010cce:	0020      	movs	r0, r4
 8010cd0:	0029      	movs	r1, r5
 8010cd2:	f7ef fbb9 	bl	8000448 <__aeabi_dcmpeq>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d002      	beq.n	8010ce0 <_dtoa_r+0x6cc>
 8010cda:	9b07      	ldr	r3, [sp, #28]
 8010cdc:	07de      	lsls	r6, r3, #31
 8010cde:	d423      	bmi.n	8010d28 <_dtoa_r+0x714>
 8010ce0:	9905      	ldr	r1, [sp, #20]
 8010ce2:	9804      	ldr	r0, [sp, #16]
 8010ce4:	f7fc f8fe 	bl	800cee4 <_Bfree>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	9a08      	ldr	r2, [sp, #32]
 8010cec:	7013      	strb	r3, [r2, #0]
 8010cee:	9b03      	ldr	r3, [sp, #12]
 8010cf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	6013      	str	r3, [r2, #0]
 8010cf6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d100      	bne.n	8010cfe <_dtoa_r+0x6ea>
 8010cfc:	e4bd      	b.n	801067a <_dtoa_r+0x66>
 8010cfe:	9a08      	ldr	r2, [sp, #32]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	e4ba      	b.n	801067a <_dtoa_r+0x66>
 8010d04:	08014c80 	.word	0x08014c80
 8010d08:	08014c58 	.word	0x08014c58
 8010d0c:	3ff00000 	.word	0x3ff00000
 8010d10:	40240000 	.word	0x40240000
 8010d14:	401c0000 	.word	0x401c0000
 8010d18:	fcc00000 	.word	0xfcc00000
 8010d1c:	40140000 	.word	0x40140000
 8010d20:	7cc00000 	.word	0x7cc00000
 8010d24:	3fe00000 	.word	0x3fe00000
 8010d28:	9b03      	ldr	r3, [sp, #12]
 8010d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8010d2c:	9b08      	ldr	r3, [sp, #32]
 8010d2e:	9308      	str	r3, [sp, #32]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	781a      	ldrb	r2, [r3, #0]
 8010d34:	2a39      	cmp	r2, #57	; 0x39
 8010d36:	d108      	bne.n	8010d4a <_dtoa_r+0x736>
 8010d38:	9a06      	ldr	r2, [sp, #24]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d1f7      	bne.n	8010d2e <_dtoa_r+0x71a>
 8010d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d40:	9906      	ldr	r1, [sp, #24]
 8010d42:	3201      	adds	r2, #1
 8010d44:	920e      	str	r2, [sp, #56]	; 0x38
 8010d46:	2230      	movs	r2, #48	; 0x30
 8010d48:	700a      	strb	r2, [r1, #0]
 8010d4a:	781a      	ldrb	r2, [r3, #0]
 8010d4c:	3201      	adds	r2, #1
 8010d4e:	701a      	strb	r2, [r3, #0]
 8010d50:	e77c      	b.n	8010c4c <_dtoa_r+0x638>
 8010d52:	2200      	movs	r2, #0
 8010d54:	4ba9      	ldr	r3, [pc, #676]	; (8010ffc <_dtoa_r+0x9e8>)
 8010d56:	f7f0 fc89 	bl	800166c <__aeabi_dmul>
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	0004      	movs	r4, r0
 8010d60:	000d      	movs	r5, r1
 8010d62:	f7ef fb71 	bl	8000448 <__aeabi_dcmpeq>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d100      	bne.n	8010d6c <_dtoa_r+0x758>
 8010d6a:	e782      	b.n	8010c72 <_dtoa_r+0x65e>
 8010d6c:	e7b8      	b.n	8010ce0 <_dtoa_r+0x6cc>
 8010d6e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010d70:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010d74:	2f00      	cmp	r7, #0
 8010d76:	d012      	beq.n	8010d9e <_dtoa_r+0x78a>
 8010d78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010d7a:	2a01      	cmp	r2, #1
 8010d7c:	dc6e      	bgt.n	8010e5c <_dtoa_r+0x848>
 8010d7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010d80:	2a00      	cmp	r2, #0
 8010d82:	d065      	beq.n	8010e50 <_dtoa_r+0x83c>
 8010d84:	4a9e      	ldr	r2, [pc, #632]	; (8011000 <_dtoa_r+0x9ec>)
 8010d86:	189b      	adds	r3, r3, r2
 8010d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d8a:	2101      	movs	r1, #1
 8010d8c:	18d2      	adds	r2, r2, r3
 8010d8e:	920a      	str	r2, [sp, #40]	; 0x28
 8010d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d92:	9804      	ldr	r0, [sp, #16]
 8010d94:	18d3      	adds	r3, r2, r3
 8010d96:	930c      	str	r3, [sp, #48]	; 0x30
 8010d98:	f7fc f986 	bl	800d0a8 <__i2b>
 8010d9c:	0007      	movs	r7, r0
 8010d9e:	2c00      	cmp	r4, #0
 8010da0:	d00e      	beq.n	8010dc0 <_dtoa_r+0x7ac>
 8010da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	dd0b      	ble.n	8010dc0 <_dtoa_r+0x7ac>
 8010da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010daa:	0023      	movs	r3, r4
 8010dac:	4294      	cmp	r4, r2
 8010dae:	dd00      	ble.n	8010db2 <_dtoa_r+0x79e>
 8010db0:	0013      	movs	r3, r2
 8010db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010db4:	1ae4      	subs	r4, r4, r3
 8010db6:	1ad2      	subs	r2, r2, r3
 8010db8:	920a      	str	r2, [sp, #40]	; 0x28
 8010dba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8010dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d01e      	beq.n	8010e04 <_dtoa_r+0x7f0>
 8010dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d05c      	beq.n	8010e86 <_dtoa_r+0x872>
 8010dcc:	2d00      	cmp	r5, #0
 8010dce:	dd10      	ble.n	8010df2 <_dtoa_r+0x7de>
 8010dd0:	0039      	movs	r1, r7
 8010dd2:	002a      	movs	r2, r5
 8010dd4:	9804      	ldr	r0, [sp, #16]
 8010dd6:	f7fc fa2f 	bl	800d238 <__pow5mult>
 8010dda:	9a05      	ldr	r2, [sp, #20]
 8010ddc:	0001      	movs	r1, r0
 8010dde:	0007      	movs	r7, r0
 8010de0:	9804      	ldr	r0, [sp, #16]
 8010de2:	f7fc f979 	bl	800d0d8 <__multiply>
 8010de6:	0006      	movs	r6, r0
 8010de8:	9905      	ldr	r1, [sp, #20]
 8010dea:	9804      	ldr	r0, [sp, #16]
 8010dec:	f7fc f87a 	bl	800cee4 <_Bfree>
 8010df0:	9605      	str	r6, [sp, #20]
 8010df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010df4:	1b5a      	subs	r2, r3, r5
 8010df6:	42ab      	cmp	r3, r5
 8010df8:	d004      	beq.n	8010e04 <_dtoa_r+0x7f0>
 8010dfa:	9905      	ldr	r1, [sp, #20]
 8010dfc:	9804      	ldr	r0, [sp, #16]
 8010dfe:	f7fc fa1b 	bl	800d238 <__pow5mult>
 8010e02:	9005      	str	r0, [sp, #20]
 8010e04:	2101      	movs	r1, #1
 8010e06:	9804      	ldr	r0, [sp, #16]
 8010e08:	f7fc f94e 	bl	800d0a8 <__i2b>
 8010e0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e0e:	0006      	movs	r6, r0
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	dd3a      	ble.n	8010e8a <_dtoa_r+0x876>
 8010e14:	001a      	movs	r2, r3
 8010e16:	0001      	movs	r1, r0
 8010e18:	9804      	ldr	r0, [sp, #16]
 8010e1a:	f7fc fa0d 	bl	800d238 <__pow5mult>
 8010e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e20:	0006      	movs	r6, r0
 8010e22:	2500      	movs	r5, #0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	dc38      	bgt.n	8010e9a <_dtoa_r+0x886>
 8010e28:	2500      	movs	r5, #0
 8010e2a:	9b08      	ldr	r3, [sp, #32]
 8010e2c:	42ab      	cmp	r3, r5
 8010e2e:	d130      	bne.n	8010e92 <_dtoa_r+0x87e>
 8010e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e32:	031b      	lsls	r3, r3, #12
 8010e34:	42ab      	cmp	r3, r5
 8010e36:	d12c      	bne.n	8010e92 <_dtoa_r+0x87e>
 8010e38:	4b72      	ldr	r3, [pc, #456]	; (8011004 <_dtoa_r+0x9f0>)
 8010e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e3c:	4213      	tst	r3, r2
 8010e3e:	d028      	beq.n	8010e92 <_dtoa_r+0x87e>
 8010e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e42:	3501      	adds	r5, #1
 8010e44:	3301      	adds	r3, #1
 8010e46:	930a      	str	r3, [sp, #40]	; 0x28
 8010e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	930c      	str	r3, [sp, #48]	; 0x30
 8010e4e:	e020      	b.n	8010e92 <_dtoa_r+0x87e>
 8010e50:	2336      	movs	r3, #54	; 0x36
 8010e52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e58:	1a9b      	subs	r3, r3, r2
 8010e5a:	e795      	b.n	8010d88 <_dtoa_r+0x774>
 8010e5c:	9b07      	ldr	r3, [sp, #28]
 8010e5e:	1e5d      	subs	r5, r3, #1
 8010e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e62:	42ab      	cmp	r3, r5
 8010e64:	db07      	blt.n	8010e76 <_dtoa_r+0x862>
 8010e66:	1b5d      	subs	r5, r3, r5
 8010e68:	9b07      	ldr	r3, [sp, #28]
 8010e6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	da8b      	bge.n	8010d88 <_dtoa_r+0x774>
 8010e70:	1ae4      	subs	r4, r4, r3
 8010e72:	2300      	movs	r3, #0
 8010e74:	e788      	b.n	8010d88 <_dtoa_r+0x774>
 8010e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e7a:	1aeb      	subs	r3, r5, r3
 8010e7c:	18d3      	adds	r3, r2, r3
 8010e7e:	950d      	str	r5, [sp, #52]	; 0x34
 8010e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8010e82:	2500      	movs	r5, #0
 8010e84:	e7f0      	b.n	8010e68 <_dtoa_r+0x854>
 8010e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010e88:	e7b7      	b.n	8010dfa <_dtoa_r+0x7e6>
 8010e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e8c:	2500      	movs	r5, #0
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	ddca      	ble.n	8010e28 <_dtoa_r+0x814>
 8010e92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e94:	2001      	movs	r0, #1
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d008      	beq.n	8010eac <_dtoa_r+0x898>
 8010e9a:	6933      	ldr	r3, [r6, #16]
 8010e9c:	3303      	adds	r3, #3
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	18f3      	adds	r3, r6, r3
 8010ea2:	6858      	ldr	r0, [r3, #4]
 8010ea4:	f7fc f8b8 	bl	800d018 <__hi0bits>
 8010ea8:	2320      	movs	r3, #32
 8010eaa:	1a18      	subs	r0, r3, r0
 8010eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eae:	1818      	adds	r0, r3, r0
 8010eb0:	0002      	movs	r2, r0
 8010eb2:	231f      	movs	r3, #31
 8010eb4:	401a      	ands	r2, r3
 8010eb6:	4218      	tst	r0, r3
 8010eb8:	d047      	beq.n	8010f4a <_dtoa_r+0x936>
 8010eba:	3301      	adds	r3, #1
 8010ebc:	1a9b      	subs	r3, r3, r2
 8010ebe:	2b04      	cmp	r3, #4
 8010ec0:	dd3f      	ble.n	8010f42 <_dtoa_r+0x92e>
 8010ec2:	231c      	movs	r3, #28
 8010ec4:	1a9b      	subs	r3, r3, r2
 8010ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ec8:	18e4      	adds	r4, r4, r3
 8010eca:	18d2      	adds	r2, r2, r3
 8010ecc:	920a      	str	r2, [sp, #40]	; 0x28
 8010ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ed0:	18d3      	adds	r3, r2, r3
 8010ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8010ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd05      	ble.n	8010ee6 <_dtoa_r+0x8d2>
 8010eda:	001a      	movs	r2, r3
 8010edc:	9905      	ldr	r1, [sp, #20]
 8010ede:	9804      	ldr	r0, [sp, #16]
 8010ee0:	f7fc f9ec 	bl	800d2bc <__lshift>
 8010ee4:	9005      	str	r0, [sp, #20]
 8010ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dd05      	ble.n	8010ef8 <_dtoa_r+0x8e4>
 8010eec:	0031      	movs	r1, r6
 8010eee:	001a      	movs	r2, r3
 8010ef0:	9804      	ldr	r0, [sp, #16]
 8010ef2:	f7fc f9e3 	bl	800d2bc <__lshift>
 8010ef6:	0006      	movs	r6, r0
 8010ef8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d027      	beq.n	8010f4e <_dtoa_r+0x93a>
 8010efe:	0031      	movs	r1, r6
 8010f00:	9805      	ldr	r0, [sp, #20]
 8010f02:	f7fc fa49 	bl	800d398 <__mcmp>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	da21      	bge.n	8010f4e <_dtoa_r+0x93a>
 8010f0a:	9b03      	ldr	r3, [sp, #12]
 8010f0c:	220a      	movs	r2, #10
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	9303      	str	r3, [sp, #12]
 8010f12:	9905      	ldr	r1, [sp, #20]
 8010f14:	2300      	movs	r3, #0
 8010f16:	9804      	ldr	r0, [sp, #16]
 8010f18:	f7fb ffee 	bl	800cef8 <__multadd>
 8010f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f1e:	9005      	str	r0, [sp, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d100      	bne.n	8010f26 <_dtoa_r+0x912>
 8010f24:	e15d      	b.n	80111e2 <_dtoa_r+0xbce>
 8010f26:	2300      	movs	r3, #0
 8010f28:	0039      	movs	r1, r7
 8010f2a:	220a      	movs	r2, #10
 8010f2c:	9804      	ldr	r0, [sp, #16]
 8010f2e:	f7fb ffe3 	bl	800cef8 <__multadd>
 8010f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f34:	0007      	movs	r7, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	dc49      	bgt.n	8010fce <_dtoa_r+0x9ba>
 8010f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	dc0e      	bgt.n	8010f5e <_dtoa_r+0x94a>
 8010f40:	e045      	b.n	8010fce <_dtoa_r+0x9ba>
 8010f42:	2b04      	cmp	r3, #4
 8010f44:	d0c6      	beq.n	8010ed4 <_dtoa_r+0x8c0>
 8010f46:	331c      	adds	r3, #28
 8010f48:	e7bd      	b.n	8010ec6 <_dtoa_r+0x8b2>
 8010f4a:	0013      	movs	r3, r2
 8010f4c:	e7fb      	b.n	8010f46 <_dtoa_r+0x932>
 8010f4e:	9b07      	ldr	r3, [sp, #28]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dc36      	bgt.n	8010fc2 <_dtoa_r+0x9ae>
 8010f54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f56:	2b02      	cmp	r3, #2
 8010f58:	dd33      	ble.n	8010fc2 <_dtoa_r+0x9ae>
 8010f5a:	9b07      	ldr	r3, [sp, #28]
 8010f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d10c      	bne.n	8010f7e <_dtoa_r+0x96a>
 8010f64:	0031      	movs	r1, r6
 8010f66:	2205      	movs	r2, #5
 8010f68:	9804      	ldr	r0, [sp, #16]
 8010f6a:	f7fb ffc5 	bl	800cef8 <__multadd>
 8010f6e:	0006      	movs	r6, r0
 8010f70:	0001      	movs	r1, r0
 8010f72:	9805      	ldr	r0, [sp, #20]
 8010f74:	f7fc fa10 	bl	800d398 <__mcmp>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	dd00      	ble.n	8010f7e <_dtoa_r+0x96a>
 8010f7c:	e59f      	b.n	8010abe <_dtoa_r+0x4aa>
 8010f7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f80:	43db      	mvns	r3, r3
 8010f82:	9303      	str	r3, [sp, #12]
 8010f84:	9b06      	ldr	r3, [sp, #24]
 8010f86:	9308      	str	r3, [sp, #32]
 8010f88:	2500      	movs	r5, #0
 8010f8a:	0031      	movs	r1, r6
 8010f8c:	9804      	ldr	r0, [sp, #16]
 8010f8e:	f7fb ffa9 	bl	800cee4 <_Bfree>
 8010f92:	2f00      	cmp	r7, #0
 8010f94:	d100      	bne.n	8010f98 <_dtoa_r+0x984>
 8010f96:	e6a3      	b.n	8010ce0 <_dtoa_r+0x6cc>
 8010f98:	2d00      	cmp	r5, #0
 8010f9a:	d005      	beq.n	8010fa8 <_dtoa_r+0x994>
 8010f9c:	42bd      	cmp	r5, r7
 8010f9e:	d003      	beq.n	8010fa8 <_dtoa_r+0x994>
 8010fa0:	0029      	movs	r1, r5
 8010fa2:	9804      	ldr	r0, [sp, #16]
 8010fa4:	f7fb ff9e 	bl	800cee4 <_Bfree>
 8010fa8:	0039      	movs	r1, r7
 8010faa:	9804      	ldr	r0, [sp, #16]
 8010fac:	f7fb ff9a 	bl	800cee4 <_Bfree>
 8010fb0:	e696      	b.n	8010ce0 <_dtoa_r+0x6cc>
 8010fb2:	2600      	movs	r6, #0
 8010fb4:	0037      	movs	r7, r6
 8010fb6:	e7e2      	b.n	8010f7e <_dtoa_r+0x96a>
 8010fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010fbc:	9303      	str	r3, [sp, #12]
 8010fbe:	0037      	movs	r7, r6
 8010fc0:	e57d      	b.n	8010abe <_dtoa_r+0x4aa>
 8010fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d100      	bne.n	8010fca <_dtoa_r+0x9b6>
 8010fc8:	e0c3      	b.n	8011152 <_dtoa_r+0xb3e>
 8010fca:	9b07      	ldr	r3, [sp, #28]
 8010fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fce:	2c00      	cmp	r4, #0
 8010fd0:	dd05      	ble.n	8010fde <_dtoa_r+0x9ca>
 8010fd2:	0039      	movs	r1, r7
 8010fd4:	0022      	movs	r2, r4
 8010fd6:	9804      	ldr	r0, [sp, #16]
 8010fd8:	f7fc f970 	bl	800d2bc <__lshift>
 8010fdc:	0007      	movs	r7, r0
 8010fde:	0038      	movs	r0, r7
 8010fe0:	2d00      	cmp	r5, #0
 8010fe2:	d024      	beq.n	801102e <_dtoa_r+0xa1a>
 8010fe4:	6879      	ldr	r1, [r7, #4]
 8010fe6:	9804      	ldr	r0, [sp, #16]
 8010fe8:	f7fb ff54 	bl	800ce94 <_Balloc>
 8010fec:	1e04      	subs	r4, r0, #0
 8010fee:	d111      	bne.n	8011014 <_dtoa_r+0xa00>
 8010ff0:	0022      	movs	r2, r4
 8010ff2:	4b05      	ldr	r3, [pc, #20]	; (8011008 <_dtoa_r+0x9f4>)
 8010ff4:	4805      	ldr	r0, [pc, #20]	; (801100c <_dtoa_r+0x9f8>)
 8010ff6:	4906      	ldr	r1, [pc, #24]	; (8011010 <_dtoa_r+0x9fc>)
 8010ff8:	e43c      	b.n	8010874 <_dtoa_r+0x260>
 8010ffa:	46c0      	nop			; (mov r8, r8)
 8010ffc:	40240000 	.word	0x40240000
 8011000:	00000433 	.word	0x00000433
 8011004:	7ff00000 	.word	0x7ff00000
 8011008:	08014b89 	.word	0x08014b89
 801100c:	08014e19 	.word	0x08014e19
 8011010:	000002ef 	.word	0x000002ef
 8011014:	0039      	movs	r1, r7
 8011016:	693a      	ldr	r2, [r7, #16]
 8011018:	310c      	adds	r1, #12
 801101a:	3202      	adds	r2, #2
 801101c:	0092      	lsls	r2, r2, #2
 801101e:	300c      	adds	r0, #12
 8011020:	f7fb fa9d 	bl	800c55e <memcpy>
 8011024:	2201      	movs	r2, #1
 8011026:	0021      	movs	r1, r4
 8011028:	9804      	ldr	r0, [sp, #16]
 801102a:	f7fc f947 	bl	800d2bc <__lshift>
 801102e:	9b06      	ldr	r3, [sp, #24]
 8011030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011032:	9307      	str	r3, [sp, #28]
 8011034:	3b01      	subs	r3, #1
 8011036:	189b      	adds	r3, r3, r2
 8011038:	2201      	movs	r2, #1
 801103a:	003d      	movs	r5, r7
 801103c:	0007      	movs	r7, r0
 801103e:	930e      	str	r3, [sp, #56]	; 0x38
 8011040:	9b08      	ldr	r3, [sp, #32]
 8011042:	4013      	ands	r3, r2
 8011044:	930d      	str	r3, [sp, #52]	; 0x34
 8011046:	0031      	movs	r1, r6
 8011048:	9805      	ldr	r0, [sp, #20]
 801104a:	f7ff fa53 	bl	80104f4 <quorem>
 801104e:	0029      	movs	r1, r5
 8011050:	0004      	movs	r4, r0
 8011052:	900b      	str	r0, [sp, #44]	; 0x2c
 8011054:	9805      	ldr	r0, [sp, #20]
 8011056:	f7fc f99f 	bl	800d398 <__mcmp>
 801105a:	003a      	movs	r2, r7
 801105c:	900c      	str	r0, [sp, #48]	; 0x30
 801105e:	0031      	movs	r1, r6
 8011060:	9804      	ldr	r0, [sp, #16]
 8011062:	f7fc f9b5 	bl	800d3d0 <__mdiff>
 8011066:	2201      	movs	r2, #1
 8011068:	68c3      	ldr	r3, [r0, #12]
 801106a:	3430      	adds	r4, #48	; 0x30
 801106c:	9008      	str	r0, [sp, #32]
 801106e:	920a      	str	r2, [sp, #40]	; 0x28
 8011070:	2b00      	cmp	r3, #0
 8011072:	d104      	bne.n	801107e <_dtoa_r+0xa6a>
 8011074:	0001      	movs	r1, r0
 8011076:	9805      	ldr	r0, [sp, #20]
 8011078:	f7fc f98e 	bl	800d398 <__mcmp>
 801107c:	900a      	str	r0, [sp, #40]	; 0x28
 801107e:	9908      	ldr	r1, [sp, #32]
 8011080:	9804      	ldr	r0, [sp, #16]
 8011082:	f7fb ff2f 	bl	800cee4 <_Bfree>
 8011086:	9b07      	ldr	r3, [sp, #28]
 8011088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801108a:	3301      	adds	r3, #1
 801108c:	9308      	str	r3, [sp, #32]
 801108e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011090:	4313      	orrs	r3, r2
 8011092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011094:	4313      	orrs	r3, r2
 8011096:	d109      	bne.n	80110ac <_dtoa_r+0xa98>
 8011098:	2c39      	cmp	r4, #57	; 0x39
 801109a:	d022      	beq.n	80110e2 <_dtoa_r+0xace>
 801109c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801109e:	2b00      	cmp	r3, #0
 80110a0:	dd01      	ble.n	80110a6 <_dtoa_r+0xa92>
 80110a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80110a4:	3431      	adds	r4, #49	; 0x31
 80110a6:	9b07      	ldr	r3, [sp, #28]
 80110a8:	701c      	strb	r4, [r3, #0]
 80110aa:	e76e      	b.n	8010f8a <_dtoa_r+0x976>
 80110ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	db04      	blt.n	80110bc <_dtoa_r+0xaa8>
 80110b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80110b4:	4313      	orrs	r3, r2
 80110b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80110b8:	4313      	orrs	r3, r2
 80110ba:	d11e      	bne.n	80110fa <_dtoa_r+0xae6>
 80110bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110be:	2b00      	cmp	r3, #0
 80110c0:	ddf1      	ble.n	80110a6 <_dtoa_r+0xa92>
 80110c2:	9905      	ldr	r1, [sp, #20]
 80110c4:	2201      	movs	r2, #1
 80110c6:	9804      	ldr	r0, [sp, #16]
 80110c8:	f7fc f8f8 	bl	800d2bc <__lshift>
 80110cc:	0031      	movs	r1, r6
 80110ce:	9005      	str	r0, [sp, #20]
 80110d0:	f7fc f962 	bl	800d398 <__mcmp>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	dc02      	bgt.n	80110de <_dtoa_r+0xaca>
 80110d8:	d1e5      	bne.n	80110a6 <_dtoa_r+0xa92>
 80110da:	07e3      	lsls	r3, r4, #31
 80110dc:	d5e3      	bpl.n	80110a6 <_dtoa_r+0xa92>
 80110de:	2c39      	cmp	r4, #57	; 0x39
 80110e0:	d1df      	bne.n	80110a2 <_dtoa_r+0xa8e>
 80110e2:	2339      	movs	r3, #57	; 0x39
 80110e4:	9a07      	ldr	r2, [sp, #28]
 80110e6:	7013      	strb	r3, [r2, #0]
 80110e8:	9b08      	ldr	r3, [sp, #32]
 80110ea:	9308      	str	r3, [sp, #32]
 80110ec:	3b01      	subs	r3, #1
 80110ee:	781a      	ldrb	r2, [r3, #0]
 80110f0:	2a39      	cmp	r2, #57	; 0x39
 80110f2:	d063      	beq.n	80111bc <_dtoa_r+0xba8>
 80110f4:	3201      	adds	r2, #1
 80110f6:	701a      	strb	r2, [r3, #0]
 80110f8:	e747      	b.n	8010f8a <_dtoa_r+0x976>
 80110fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	dd03      	ble.n	8011108 <_dtoa_r+0xaf4>
 8011100:	2c39      	cmp	r4, #57	; 0x39
 8011102:	d0ee      	beq.n	80110e2 <_dtoa_r+0xace>
 8011104:	3401      	adds	r4, #1
 8011106:	e7ce      	b.n	80110a6 <_dtoa_r+0xa92>
 8011108:	9b07      	ldr	r3, [sp, #28]
 801110a:	9a07      	ldr	r2, [sp, #28]
 801110c:	701c      	strb	r4, [r3, #0]
 801110e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011110:	4293      	cmp	r3, r2
 8011112:	d03e      	beq.n	8011192 <_dtoa_r+0xb7e>
 8011114:	2300      	movs	r3, #0
 8011116:	220a      	movs	r2, #10
 8011118:	9905      	ldr	r1, [sp, #20]
 801111a:	9804      	ldr	r0, [sp, #16]
 801111c:	f7fb feec 	bl	800cef8 <__multadd>
 8011120:	2300      	movs	r3, #0
 8011122:	9005      	str	r0, [sp, #20]
 8011124:	220a      	movs	r2, #10
 8011126:	0029      	movs	r1, r5
 8011128:	9804      	ldr	r0, [sp, #16]
 801112a:	42bd      	cmp	r5, r7
 801112c:	d106      	bne.n	801113c <_dtoa_r+0xb28>
 801112e:	f7fb fee3 	bl	800cef8 <__multadd>
 8011132:	0005      	movs	r5, r0
 8011134:	0007      	movs	r7, r0
 8011136:	9b08      	ldr	r3, [sp, #32]
 8011138:	9307      	str	r3, [sp, #28]
 801113a:	e784      	b.n	8011046 <_dtoa_r+0xa32>
 801113c:	f7fb fedc 	bl	800cef8 <__multadd>
 8011140:	0039      	movs	r1, r7
 8011142:	0005      	movs	r5, r0
 8011144:	2300      	movs	r3, #0
 8011146:	220a      	movs	r2, #10
 8011148:	9804      	ldr	r0, [sp, #16]
 801114a:	f7fb fed5 	bl	800cef8 <__multadd>
 801114e:	0007      	movs	r7, r0
 8011150:	e7f1      	b.n	8011136 <_dtoa_r+0xb22>
 8011152:	9b07      	ldr	r3, [sp, #28]
 8011154:	930b      	str	r3, [sp, #44]	; 0x2c
 8011156:	2500      	movs	r5, #0
 8011158:	0031      	movs	r1, r6
 801115a:	9805      	ldr	r0, [sp, #20]
 801115c:	f7ff f9ca 	bl	80104f4 <quorem>
 8011160:	9b06      	ldr	r3, [sp, #24]
 8011162:	3030      	adds	r0, #48	; 0x30
 8011164:	5558      	strb	r0, [r3, r5]
 8011166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011168:	3501      	adds	r5, #1
 801116a:	0004      	movs	r4, r0
 801116c:	42ab      	cmp	r3, r5
 801116e:	dd07      	ble.n	8011180 <_dtoa_r+0xb6c>
 8011170:	2300      	movs	r3, #0
 8011172:	220a      	movs	r2, #10
 8011174:	9905      	ldr	r1, [sp, #20]
 8011176:	9804      	ldr	r0, [sp, #16]
 8011178:	f7fb febe 	bl	800cef8 <__multadd>
 801117c:	9005      	str	r0, [sp, #20]
 801117e:	e7eb      	b.n	8011158 <_dtoa_r+0xb44>
 8011180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011182:	2301      	movs	r3, #1
 8011184:	2a00      	cmp	r2, #0
 8011186:	dd00      	ble.n	801118a <_dtoa_r+0xb76>
 8011188:	0013      	movs	r3, r2
 801118a:	2500      	movs	r5, #0
 801118c:	9a06      	ldr	r2, [sp, #24]
 801118e:	18d3      	adds	r3, r2, r3
 8011190:	9308      	str	r3, [sp, #32]
 8011192:	9905      	ldr	r1, [sp, #20]
 8011194:	2201      	movs	r2, #1
 8011196:	9804      	ldr	r0, [sp, #16]
 8011198:	f7fc f890 	bl	800d2bc <__lshift>
 801119c:	0031      	movs	r1, r6
 801119e:	9005      	str	r0, [sp, #20]
 80111a0:	f7fc f8fa 	bl	800d398 <__mcmp>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	dc9f      	bgt.n	80110e8 <_dtoa_r+0xad4>
 80111a8:	d101      	bne.n	80111ae <_dtoa_r+0xb9a>
 80111aa:	07e4      	lsls	r4, r4, #31
 80111ac:	d49c      	bmi.n	80110e8 <_dtoa_r+0xad4>
 80111ae:	9b08      	ldr	r3, [sp, #32]
 80111b0:	9308      	str	r3, [sp, #32]
 80111b2:	3b01      	subs	r3, #1
 80111b4:	781a      	ldrb	r2, [r3, #0]
 80111b6:	2a30      	cmp	r2, #48	; 0x30
 80111b8:	d0fa      	beq.n	80111b0 <_dtoa_r+0xb9c>
 80111ba:	e6e6      	b.n	8010f8a <_dtoa_r+0x976>
 80111bc:	9a06      	ldr	r2, [sp, #24]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d193      	bne.n	80110ea <_dtoa_r+0xad6>
 80111c2:	9b03      	ldr	r3, [sp, #12]
 80111c4:	3301      	adds	r3, #1
 80111c6:	9303      	str	r3, [sp, #12]
 80111c8:	2331      	movs	r3, #49	; 0x31
 80111ca:	7013      	strb	r3, [r2, #0]
 80111cc:	e6dd      	b.n	8010f8a <_dtoa_r+0x976>
 80111ce:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <_dtoa_r+0xbe0>)
 80111d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80111d2:	9306      	str	r3, [sp, #24]
 80111d4:	4b08      	ldr	r3, [pc, #32]	; (80111f8 <_dtoa_r+0xbe4>)
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	d001      	beq.n	80111de <_dtoa_r+0xbca>
 80111da:	f7ff fa4c 	bl	8010676 <_dtoa_r+0x62>
 80111de:	f7ff fa4c 	bl	801067a <_dtoa_r+0x66>
 80111e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	dcb6      	bgt.n	8011156 <_dtoa_r+0xb42>
 80111e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	dd00      	ble.n	80111f0 <_dtoa_r+0xbdc>
 80111ee:	e6b6      	b.n	8010f5e <_dtoa_r+0x94a>
 80111f0:	e7b1      	b.n	8011156 <_dtoa_r+0xb42>
 80111f2:	46c0      	nop			; (mov r8, r8)
 80111f4:	08014e0c 	.word	0x08014e0c
 80111f8:	08014e14 	.word	0x08014e14

080111fc <realloc>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	4b03      	ldr	r3, [pc, #12]	; (801120c <realloc+0x10>)
 8011200:	000a      	movs	r2, r1
 8011202:	0001      	movs	r1, r0
 8011204:	6818      	ldr	r0, [r3, #0]
 8011206:	f000 f803 	bl	8011210 <_realloc_r>
 801120a:	bd10      	pop	{r4, pc}
 801120c:	200006d0 	.word	0x200006d0

08011210 <_realloc_r>:
 8011210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011212:	b087      	sub	sp, #28
 8011214:	1e0c      	subs	r4, r1, #0
 8011216:	9001      	str	r0, [sp, #4]
 8011218:	9205      	str	r2, [sp, #20]
 801121a:	d106      	bne.n	801122a <_realloc_r+0x1a>
 801121c:	0011      	movs	r1, r2
 801121e:	f7f9 fd5f 	bl	800ace0 <_malloc_r>
 8011222:	0007      	movs	r7, r0
 8011224:	0038      	movs	r0, r7
 8011226:	b007      	add	sp, #28
 8011228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801122a:	9801      	ldr	r0, [sp, #4]
 801122c:	f7f9 ff6c 	bl	800b108 <__malloc_lock>
 8011230:	0023      	movs	r3, r4
 8011232:	3b08      	subs	r3, #8
 8011234:	685f      	ldr	r7, [r3, #4]
 8011236:	9304      	str	r3, [sp, #16]
 8011238:	9b05      	ldr	r3, [sp, #20]
 801123a:	330b      	adds	r3, #11
 801123c:	2b16      	cmp	r3, #22
 801123e:	d908      	bls.n	8011252 <_realloc_r+0x42>
 8011240:	2207      	movs	r2, #7
 8011242:	4393      	bics	r3, r2
 8011244:	9300      	str	r3, [sp, #0]
 8011246:	d506      	bpl.n	8011256 <_realloc_r+0x46>
 8011248:	230c      	movs	r3, #12
 801124a:	9a01      	ldr	r2, [sp, #4]
 801124c:	2700      	movs	r7, #0
 801124e:	6013      	str	r3, [r2, #0]
 8011250:	e7e8      	b.n	8011224 <_realloc_r+0x14>
 8011252:	2310      	movs	r3, #16
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	9b00      	ldr	r3, [sp, #0]
 8011258:	9a05      	ldr	r2, [sp, #20]
 801125a:	4293      	cmp	r3, r2
 801125c:	d3f4      	bcc.n	8011248 <_realloc_r+0x38>
 801125e:	9b04      	ldr	r3, [sp, #16]
 8011260:	003a      	movs	r2, r7
 8011262:	9302      	str	r3, [sp, #8]
 8011264:	2303      	movs	r3, #3
 8011266:	439a      	bics	r2, r3
 8011268:	9b00      	ldr	r3, [sp, #0]
 801126a:	9203      	str	r2, [sp, #12]
 801126c:	4293      	cmp	r3, r2
 801126e:	dc00      	bgt.n	8011272 <_realloc_r+0x62>
 8011270:	e169      	b.n	8011546 <_realloc_r+0x336>
 8011272:	9b04      	ldr	r3, [sp, #16]
 8011274:	48b8      	ldr	r0, [pc, #736]	; (8011558 <_realloc_r+0x348>)
 8011276:	189b      	adds	r3, r3, r2
 8011278:	6882      	ldr	r2, [r0, #8]
 801127a:	4694      	mov	ip, r2
 801127c:	685a      	ldr	r2, [r3, #4]
 801127e:	459c      	cmp	ip, r3
 8011280:	d006      	beq.n	8011290 <_realloc_r+0x80>
 8011282:	2501      	movs	r5, #1
 8011284:	0011      	movs	r1, r2
 8011286:	43a9      	bics	r1, r5
 8011288:	1859      	adds	r1, r3, r1
 801128a:	6849      	ldr	r1, [r1, #4]
 801128c:	4229      	tst	r1, r5
 801128e:	d144      	bne.n	801131a <_realloc_r+0x10a>
 8011290:	2103      	movs	r1, #3
 8011292:	438a      	bics	r2, r1
 8011294:	9903      	ldr	r1, [sp, #12]
 8011296:	188e      	adds	r6, r1, r2
 8011298:	9900      	ldr	r1, [sp, #0]
 801129a:	459c      	cmp	ip, r3
 801129c:	d117      	bne.n	80112ce <_realloc_r+0xbe>
 801129e:	3110      	adds	r1, #16
 80112a0:	42b1      	cmp	r1, r6
 80112a2:	dc3c      	bgt.n	801131e <_realloc_r+0x10e>
 80112a4:	9a00      	ldr	r2, [sp, #0]
 80112a6:	2101      	movs	r1, #1
 80112a8:	4694      	mov	ip, r2
 80112aa:	1ab6      	subs	r6, r6, r2
 80112ac:	0022      	movs	r2, r4
 80112ae:	9b04      	ldr	r3, [sp, #16]
 80112b0:	430e      	orrs	r6, r1
 80112b2:	4463      	add	r3, ip
 80112b4:	6083      	str	r3, [r0, #8]
 80112b6:	3a08      	subs	r2, #8
 80112b8:	605e      	str	r6, [r3, #4]
 80112ba:	6853      	ldr	r3, [r2, #4]
 80112bc:	9801      	ldr	r0, [sp, #4]
 80112be:	400b      	ands	r3, r1
 80112c0:	4661      	mov	r1, ip
 80112c2:	430b      	orrs	r3, r1
 80112c4:	6053      	str	r3, [r2, #4]
 80112c6:	f7f9 ff27 	bl	800b118 <__malloc_unlock>
 80112ca:	0027      	movs	r7, r4
 80112cc:	e7aa      	b.n	8011224 <_realloc_r+0x14>
 80112ce:	42b1      	cmp	r1, r6
 80112d0:	dc25      	bgt.n	801131e <_realloc_r+0x10e>
 80112d2:	68da      	ldr	r2, [r3, #12]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	60da      	str	r2, [r3, #12]
 80112d8:	6093      	str	r3, [r2, #8]
 80112da:	9b00      	ldr	r3, [sp, #0]
 80112dc:	9a02      	ldr	r2, [sp, #8]
 80112de:	1af4      	subs	r4, r6, r3
 80112e0:	9b02      	ldr	r3, [sp, #8]
 80112e2:	1992      	adds	r2, r2, r6
 80112e4:	6858      	ldr	r0, [r3, #4]
 80112e6:	2301      	movs	r3, #1
 80112e8:	4018      	ands	r0, r3
 80112ea:	2c0f      	cmp	r4, #15
 80112ec:	d800      	bhi.n	80112f0 <_realloc_r+0xe0>
 80112ee:	e12c      	b.n	801154a <_realloc_r+0x33a>
 80112f0:	9d00      	ldr	r5, [sp, #0]
 80112f2:	9902      	ldr	r1, [sp, #8]
 80112f4:	4328      	orrs	r0, r5
 80112f6:	1949      	adds	r1, r1, r5
 80112f8:	9d02      	ldr	r5, [sp, #8]
 80112fa:	431c      	orrs	r4, r3
 80112fc:	6068      	str	r0, [r5, #4]
 80112fe:	604c      	str	r4, [r1, #4]
 8011300:	6850      	ldr	r0, [r2, #4]
 8011302:	3108      	adds	r1, #8
 8011304:	4303      	orrs	r3, r0
 8011306:	6053      	str	r3, [r2, #4]
 8011308:	9801      	ldr	r0, [sp, #4]
 801130a:	f7fb f9a3 	bl	800c654 <_free_r>
 801130e:	9801      	ldr	r0, [sp, #4]
 8011310:	f7f9 ff02 	bl	800b118 <__malloc_unlock>
 8011314:	9f02      	ldr	r7, [sp, #8]
 8011316:	3708      	adds	r7, #8
 8011318:	e784      	b.n	8011224 <_realloc_r+0x14>
 801131a:	2200      	movs	r2, #0
 801131c:	0013      	movs	r3, r2
 801131e:	07ff      	lsls	r7, r7, #31
 8011320:	d500      	bpl.n	8011324 <_realloc_r+0x114>
 8011322:	e0c6      	b.n	80114b2 <_realloc_r+0x2a2>
 8011324:	0021      	movs	r1, r4
 8011326:	2003      	movs	r0, #3
 8011328:	3908      	subs	r1, #8
 801132a:	680d      	ldr	r5, [r1, #0]
 801132c:	9904      	ldr	r1, [sp, #16]
 801132e:	1b4d      	subs	r5, r1, r5
 8011330:	6869      	ldr	r1, [r5, #4]
 8011332:	4381      	bics	r1, r0
 8011334:	9803      	ldr	r0, [sp, #12]
 8011336:	180f      	adds	r7, r1, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d100      	bne.n	801133e <_realloc_r+0x12e>
 801133c:	e084      	b.n	8011448 <_realloc_r+0x238>
 801133e:	19d6      	adds	r6, r2, r7
 8011340:	459c      	cmp	ip, r3
 8011342:	d148      	bne.n	80113d6 <_realloc_r+0x1c6>
 8011344:	9b00      	ldr	r3, [sp, #0]
 8011346:	3310      	adds	r3, #16
 8011348:	42b3      	cmp	r3, r6
 801134a:	dc7d      	bgt.n	8011448 <_realloc_r+0x238>
 801134c:	68aa      	ldr	r2, [r5, #8]
 801134e:	68eb      	ldr	r3, [r5, #12]
 8011350:	002f      	movs	r7, r5
 8011352:	60d3      	str	r3, [r2, #12]
 8011354:	609a      	str	r2, [r3, #8]
 8011356:	0002      	movs	r2, r0
 8011358:	3a04      	subs	r2, #4
 801135a:	3708      	adds	r7, #8
 801135c:	2a24      	cmp	r2, #36	; 0x24
 801135e:	d835      	bhi.n	80113cc <_realloc_r+0x1bc>
 8011360:	003b      	movs	r3, r7
 8011362:	2a13      	cmp	r2, #19
 8011364:	d908      	bls.n	8011378 <_realloc_r+0x168>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	60ab      	str	r3, [r5, #8]
 801136a:	6863      	ldr	r3, [r4, #4]
 801136c:	60eb      	str	r3, [r5, #12]
 801136e:	2a1b      	cmp	r2, #27
 8011370:	d81a      	bhi.n	80113a8 <_realloc_r+0x198>
 8011372:	002b      	movs	r3, r5
 8011374:	3408      	adds	r4, #8
 8011376:	3310      	adds	r3, #16
 8011378:	6822      	ldr	r2, [r4, #0]
 801137a:	601a      	str	r2, [r3, #0]
 801137c:	6862      	ldr	r2, [r4, #4]
 801137e:	605a      	str	r2, [r3, #4]
 8011380:	68a2      	ldr	r2, [r4, #8]
 8011382:	609a      	str	r2, [r3, #8]
 8011384:	9b00      	ldr	r3, [sp, #0]
 8011386:	4a74      	ldr	r2, [pc, #464]	; (8011558 <_realloc_r+0x348>)
 8011388:	18eb      	adds	r3, r5, r3
 801138a:	6093      	str	r3, [r2, #8]
 801138c:	9a00      	ldr	r2, [sp, #0]
 801138e:	1ab6      	subs	r6, r6, r2
 8011390:	2201      	movs	r2, #1
 8011392:	4316      	orrs	r6, r2
 8011394:	605e      	str	r6, [r3, #4]
 8011396:	686b      	ldr	r3, [r5, #4]
 8011398:	4013      	ands	r3, r2
 801139a:	9a00      	ldr	r2, [sp, #0]
 801139c:	4313      	orrs	r3, r2
 801139e:	606b      	str	r3, [r5, #4]
 80113a0:	9801      	ldr	r0, [sp, #4]
 80113a2:	f7f9 feb9 	bl	800b118 <__malloc_unlock>
 80113a6:	e73d      	b.n	8011224 <_realloc_r+0x14>
 80113a8:	68a3      	ldr	r3, [r4, #8]
 80113aa:	612b      	str	r3, [r5, #16]
 80113ac:	68e3      	ldr	r3, [r4, #12]
 80113ae:	616b      	str	r3, [r5, #20]
 80113b0:	2a24      	cmp	r2, #36	; 0x24
 80113b2:	d003      	beq.n	80113bc <_realloc_r+0x1ac>
 80113b4:	002b      	movs	r3, r5
 80113b6:	3410      	adds	r4, #16
 80113b8:	3318      	adds	r3, #24
 80113ba:	e7dd      	b.n	8011378 <_realloc_r+0x168>
 80113bc:	6923      	ldr	r3, [r4, #16]
 80113be:	61ab      	str	r3, [r5, #24]
 80113c0:	002b      	movs	r3, r5
 80113c2:	6962      	ldr	r2, [r4, #20]
 80113c4:	3320      	adds	r3, #32
 80113c6:	61ea      	str	r2, [r5, #28]
 80113c8:	3418      	adds	r4, #24
 80113ca:	e7d5      	b.n	8011378 <_realloc_r+0x168>
 80113cc:	0021      	movs	r1, r4
 80113ce:	0038      	movs	r0, r7
 80113d0:	f001 fb2f 	bl	8012a32 <memmove>
 80113d4:	e7d6      	b.n	8011384 <_realloc_r+0x174>
 80113d6:	9a00      	ldr	r2, [sp, #0]
 80113d8:	42b2      	cmp	r2, r6
 80113da:	dc35      	bgt.n	8011448 <_realloc_r+0x238>
 80113dc:	0028      	movs	r0, r5
 80113de:	68da      	ldr	r2, [r3, #12]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	3008      	adds	r0, #8
 80113e4:	60da      	str	r2, [r3, #12]
 80113e6:	6093      	str	r3, [r2, #8]
 80113e8:	68aa      	ldr	r2, [r5, #8]
 80113ea:	68eb      	ldr	r3, [r5, #12]
 80113ec:	60d3      	str	r3, [r2, #12]
 80113ee:	609a      	str	r2, [r3, #8]
 80113f0:	9a03      	ldr	r2, [sp, #12]
 80113f2:	3a04      	subs	r2, #4
 80113f4:	2a24      	cmp	r2, #36	; 0x24
 80113f6:	d823      	bhi.n	8011440 <_realloc_r+0x230>
 80113f8:	2a13      	cmp	r2, #19
 80113fa:	d907      	bls.n	801140c <_realloc_r+0x1fc>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	60ab      	str	r3, [r5, #8]
 8011400:	6863      	ldr	r3, [r4, #4]
 8011402:	60eb      	str	r3, [r5, #12]
 8011404:	2a1b      	cmp	r2, #27
 8011406:	d809      	bhi.n	801141c <_realloc_r+0x20c>
 8011408:	3408      	adds	r4, #8
 801140a:	3008      	adds	r0, #8
 801140c:	6823      	ldr	r3, [r4, #0]
 801140e:	6003      	str	r3, [r0, #0]
 8011410:	6863      	ldr	r3, [r4, #4]
 8011412:	6043      	str	r3, [r0, #4]
 8011414:	68a3      	ldr	r3, [r4, #8]
 8011416:	6083      	str	r3, [r0, #8]
 8011418:	9502      	str	r5, [sp, #8]
 801141a:	e75e      	b.n	80112da <_realloc_r+0xca>
 801141c:	68a3      	ldr	r3, [r4, #8]
 801141e:	612b      	str	r3, [r5, #16]
 8011420:	68e3      	ldr	r3, [r4, #12]
 8011422:	616b      	str	r3, [r5, #20]
 8011424:	2a24      	cmp	r2, #36	; 0x24
 8011426:	d003      	beq.n	8011430 <_realloc_r+0x220>
 8011428:	0028      	movs	r0, r5
 801142a:	3410      	adds	r4, #16
 801142c:	3018      	adds	r0, #24
 801142e:	e7ed      	b.n	801140c <_realloc_r+0x1fc>
 8011430:	0028      	movs	r0, r5
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	3020      	adds	r0, #32
 8011436:	61ab      	str	r3, [r5, #24]
 8011438:	6963      	ldr	r3, [r4, #20]
 801143a:	3418      	adds	r4, #24
 801143c:	61eb      	str	r3, [r5, #28]
 801143e:	e7e5      	b.n	801140c <_realloc_r+0x1fc>
 8011440:	0021      	movs	r1, r4
 8011442:	f001 faf6 	bl	8012a32 <memmove>
 8011446:	e7e7      	b.n	8011418 <_realloc_r+0x208>
 8011448:	9b00      	ldr	r3, [sp, #0]
 801144a:	42bb      	cmp	r3, r7
 801144c:	dc31      	bgt.n	80114b2 <_realloc_r+0x2a2>
 801144e:	0028      	movs	r0, r5
 8011450:	68aa      	ldr	r2, [r5, #8]
 8011452:	68eb      	ldr	r3, [r5, #12]
 8011454:	3008      	adds	r0, #8
 8011456:	60d3      	str	r3, [r2, #12]
 8011458:	609a      	str	r2, [r3, #8]
 801145a:	9a03      	ldr	r2, [sp, #12]
 801145c:	3a04      	subs	r2, #4
 801145e:	2a24      	cmp	r2, #36	; 0x24
 8011460:	d823      	bhi.n	80114aa <_realloc_r+0x29a>
 8011462:	2a13      	cmp	r2, #19
 8011464:	d907      	bls.n	8011476 <_realloc_r+0x266>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	60ab      	str	r3, [r5, #8]
 801146a:	6863      	ldr	r3, [r4, #4]
 801146c:	60eb      	str	r3, [r5, #12]
 801146e:	2a1b      	cmp	r2, #27
 8011470:	d809      	bhi.n	8011486 <_realloc_r+0x276>
 8011472:	3408      	adds	r4, #8
 8011474:	3008      	adds	r0, #8
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	6003      	str	r3, [r0, #0]
 801147a:	6863      	ldr	r3, [r4, #4]
 801147c:	6043      	str	r3, [r0, #4]
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	6083      	str	r3, [r0, #8]
 8011482:	003e      	movs	r6, r7
 8011484:	e7c8      	b.n	8011418 <_realloc_r+0x208>
 8011486:	68a3      	ldr	r3, [r4, #8]
 8011488:	612b      	str	r3, [r5, #16]
 801148a:	68e3      	ldr	r3, [r4, #12]
 801148c:	616b      	str	r3, [r5, #20]
 801148e:	2a24      	cmp	r2, #36	; 0x24
 8011490:	d003      	beq.n	801149a <_realloc_r+0x28a>
 8011492:	0028      	movs	r0, r5
 8011494:	3410      	adds	r4, #16
 8011496:	3018      	adds	r0, #24
 8011498:	e7ed      	b.n	8011476 <_realloc_r+0x266>
 801149a:	0028      	movs	r0, r5
 801149c:	6923      	ldr	r3, [r4, #16]
 801149e:	3020      	adds	r0, #32
 80114a0:	61ab      	str	r3, [r5, #24]
 80114a2:	6963      	ldr	r3, [r4, #20]
 80114a4:	3418      	adds	r4, #24
 80114a6:	61eb      	str	r3, [r5, #28]
 80114a8:	e7e5      	b.n	8011476 <_realloc_r+0x266>
 80114aa:	0021      	movs	r1, r4
 80114ac:	f001 fac1 	bl	8012a32 <memmove>
 80114b0:	e7e7      	b.n	8011482 <_realloc_r+0x272>
 80114b2:	9905      	ldr	r1, [sp, #20]
 80114b4:	9801      	ldr	r0, [sp, #4]
 80114b6:	f7f9 fc13 	bl	800ace0 <_malloc_r>
 80114ba:	1e07      	subs	r7, r0, #0
 80114bc:	d100      	bne.n	80114c0 <_realloc_r+0x2b0>
 80114be:	e76f      	b.n	80113a0 <_realloc_r+0x190>
 80114c0:	0023      	movs	r3, r4
 80114c2:	2201      	movs	r2, #1
 80114c4:	3b08      	subs	r3, #8
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	4393      	bics	r3, r2
 80114ca:	9a04      	ldr	r2, [sp, #16]
 80114cc:	18d3      	adds	r3, r2, r3
 80114ce:	0002      	movs	r2, r0
 80114d0:	3a08      	subs	r2, #8
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d105      	bne.n	80114e2 <_realloc_r+0x2d2>
 80114d6:	685e      	ldr	r6, [r3, #4]
 80114d8:	2303      	movs	r3, #3
 80114da:	439e      	bics	r6, r3
 80114dc:	9b03      	ldr	r3, [sp, #12]
 80114de:	18f6      	adds	r6, r6, r3
 80114e0:	e6fb      	b.n	80112da <_realloc_r+0xca>
 80114e2:	9a03      	ldr	r2, [sp, #12]
 80114e4:	3a04      	subs	r2, #4
 80114e6:	2a24      	cmp	r2, #36	; 0x24
 80114e8:	d829      	bhi.n	801153e <_realloc_r+0x32e>
 80114ea:	0003      	movs	r3, r0
 80114ec:	0021      	movs	r1, r4
 80114ee:	2a13      	cmp	r2, #19
 80114f0:	d908      	bls.n	8011504 <_realloc_r+0x2f4>
 80114f2:	6823      	ldr	r3, [r4, #0]
 80114f4:	6003      	str	r3, [r0, #0]
 80114f6:	6863      	ldr	r3, [r4, #4]
 80114f8:	6043      	str	r3, [r0, #4]
 80114fa:	2a1b      	cmp	r2, #27
 80114fc:	d80d      	bhi.n	801151a <_realloc_r+0x30a>
 80114fe:	0003      	movs	r3, r0
 8011500:	3108      	adds	r1, #8
 8011502:	3308      	adds	r3, #8
 8011504:	680a      	ldr	r2, [r1, #0]
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	684a      	ldr	r2, [r1, #4]
 801150a:	605a      	str	r2, [r3, #4]
 801150c:	688a      	ldr	r2, [r1, #8]
 801150e:	609a      	str	r2, [r3, #8]
 8011510:	0021      	movs	r1, r4
 8011512:	9801      	ldr	r0, [sp, #4]
 8011514:	f7fb f89e 	bl	800c654 <_free_r>
 8011518:	e742      	b.n	80113a0 <_realloc_r+0x190>
 801151a:	68a3      	ldr	r3, [r4, #8]
 801151c:	6083      	str	r3, [r0, #8]
 801151e:	68e3      	ldr	r3, [r4, #12]
 8011520:	60c3      	str	r3, [r0, #12]
 8011522:	2a24      	cmp	r2, #36	; 0x24
 8011524:	d003      	beq.n	801152e <_realloc_r+0x31e>
 8011526:	0003      	movs	r3, r0
 8011528:	3110      	adds	r1, #16
 801152a:	3310      	adds	r3, #16
 801152c:	e7ea      	b.n	8011504 <_realloc_r+0x2f4>
 801152e:	6923      	ldr	r3, [r4, #16]
 8011530:	3118      	adds	r1, #24
 8011532:	6103      	str	r3, [r0, #16]
 8011534:	0003      	movs	r3, r0
 8011536:	6962      	ldr	r2, [r4, #20]
 8011538:	3318      	adds	r3, #24
 801153a:	6142      	str	r2, [r0, #20]
 801153c:	e7e2      	b.n	8011504 <_realloc_r+0x2f4>
 801153e:	0021      	movs	r1, r4
 8011540:	f001 fa77 	bl	8012a32 <memmove>
 8011544:	e7e4      	b.n	8011510 <_realloc_r+0x300>
 8011546:	9e03      	ldr	r6, [sp, #12]
 8011548:	e6c7      	b.n	80112da <_realloc_r+0xca>
 801154a:	9902      	ldr	r1, [sp, #8]
 801154c:	4306      	orrs	r6, r0
 801154e:	604e      	str	r6, [r1, #4]
 8011550:	6851      	ldr	r1, [r2, #4]
 8011552:	430b      	orrs	r3, r1
 8011554:	6053      	str	r3, [r2, #4]
 8011556:	e6da      	b.n	801130e <_realloc_r+0xfe>
 8011558:	20000028 	.word	0x20000028

0801155c <_strtoll_l.constprop.0>:
 801155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801155e:	b08d      	sub	sp, #52	; 0x34
 8011560:	9203      	str	r2, [sp, #12]
 8011562:	4a53      	ldr	r2, [pc, #332]	; (80116b0 <_strtoll_l.constprop.0+0x154>)
 8011564:	001e      	movs	r6, r3
 8011566:	9102      	str	r1, [sp, #8]
 8011568:	000b      	movs	r3, r1
 801156a:	4694      	mov	ip, r2
 801156c:	2108      	movs	r1, #8
 801156e:	900a      	str	r0, [sp, #40]	; 0x28
 8011570:	001a      	movs	r2, r3
 8011572:	4660      	mov	r0, ip
 8011574:	7814      	ldrb	r4, [r2, #0]
 8011576:	3301      	adds	r3, #1
 8011578:	5d00      	ldrb	r0, [r0, r4]
 801157a:	001d      	movs	r5, r3
 801157c:	0007      	movs	r7, r0
 801157e:	400f      	ands	r7, r1
 8011580:	4208      	tst	r0, r1
 8011582:	d1f5      	bne.n	8011570 <_strtoll_l.constprop.0+0x14>
 8011584:	2c2d      	cmp	r4, #45	; 0x2d
 8011586:	d153      	bne.n	8011630 <_strtoll_l.constprop.0+0xd4>
 8011588:	781c      	ldrb	r4, [r3, #0]
 801158a:	2301      	movs	r3, #1
 801158c:	1c95      	adds	r5, r2, #2
 801158e:	9301      	str	r3, [sp, #4]
 8011590:	2e00      	cmp	r6, #0
 8011592:	d100      	bne.n	8011596 <_strtoll_l.constprop.0+0x3a>
 8011594:	e086      	b.n	80116a4 <_strtoll_l.constprop.0+0x148>
 8011596:	2e10      	cmp	r6, #16
 8011598:	d10a      	bne.n	80115b0 <_strtoll_l.constprop.0+0x54>
 801159a:	2c30      	cmp	r4, #48	; 0x30
 801159c:	d108      	bne.n	80115b0 <_strtoll_l.constprop.0+0x54>
 801159e:	2220      	movs	r2, #32
 80115a0:	782b      	ldrb	r3, [r5, #0]
 80115a2:	4393      	bics	r3, r2
 80115a4:	2b58      	cmp	r3, #88	; 0x58
 80115a6:	d000      	beq.n	80115aa <_strtoll_l.constprop.0+0x4e>
 80115a8:	e076      	b.n	8011698 <_strtoll_l.constprop.0+0x13c>
 80115aa:	2610      	movs	r6, #16
 80115ac:	786c      	ldrb	r4, [r5, #1]
 80115ae:	3502      	adds	r5, #2
 80115b0:	2001      	movs	r0, #1
 80115b2:	2300      	movs	r3, #0
 80115b4:	493f      	ldr	r1, [pc, #252]	; (80116b4 <_strtoll_l.constprop.0+0x158>)
 80115b6:	9a01      	ldr	r2, [sp, #4]
 80115b8:	4240      	negs	r0, r0
 80115ba:	1812      	adds	r2, r2, r0
 80115bc:	414b      	adcs	r3, r1
 80115be:	9204      	str	r2, [sp, #16]
 80115c0:	9305      	str	r3, [sp, #20]
 80115c2:	9804      	ldr	r0, [sp, #16]
 80115c4:	9905      	ldr	r1, [sp, #20]
 80115c6:	17f3      	asrs	r3, r6, #31
 80115c8:	0032      	movs	r2, r6
 80115ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80115cc:	f7ee ff6a 	bl	80004a4 <__aeabi_uldivmod>
 80115d0:	2300      	movs	r3, #0
 80115d2:	000f      	movs	r7, r1
 80115d4:	9008      	str	r0, [sp, #32]
 80115d6:	2100      	movs	r1, #0
 80115d8:	2000      	movs	r0, #0
 80115da:	9209      	str	r2, [sp, #36]	; 0x24
 80115dc:	0022      	movs	r2, r4
 80115de:	3a30      	subs	r2, #48	; 0x30
 80115e0:	2a09      	cmp	r2, #9
 80115e2:	d82b      	bhi.n	801163c <_strtoll_l.constprop.0+0xe0>
 80115e4:	0014      	movs	r4, r2
 80115e6:	42a6      	cmp	r6, r4
 80115e8:	dd37      	ble.n	801165a <_strtoll_l.constprop.0+0xfe>
 80115ea:	1c5a      	adds	r2, r3, #1
 80115ec:	d01d      	beq.n	801162a <_strtoll_l.constprop.0+0xce>
 80115ee:	42b9      	cmp	r1, r7
 80115f0:	d830      	bhi.n	8011654 <_strtoll_l.constprop.0+0xf8>
 80115f2:	d102      	bne.n	80115fa <_strtoll_l.constprop.0+0x9e>
 80115f4:	9b08      	ldr	r3, [sp, #32]
 80115f6:	4298      	cmp	r0, r3
 80115f8:	d82c      	bhi.n	8011654 <_strtoll_l.constprop.0+0xf8>
 80115fa:	9b08      	ldr	r3, [sp, #32]
 80115fc:	4283      	cmp	r3, r0
 80115fe:	d106      	bne.n	801160e <_strtoll_l.constprop.0+0xb2>
 8011600:	428f      	cmp	r7, r1
 8011602:	d104      	bne.n	801160e <_strtoll_l.constprop.0+0xb2>
 8011604:	2301      	movs	r3, #1
 8011606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011608:	425b      	negs	r3, r3
 801160a:	42a2      	cmp	r2, r4
 801160c:	db0d      	blt.n	801162a <_strtoll_l.constprop.0+0xce>
 801160e:	000b      	movs	r3, r1
 8011610:	0002      	movs	r2, r0
 8011612:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011614:	0030      	movs	r0, r6
 8011616:	f7ee ff65 	bl	80004e4 <__aeabi_lmul>
 801161a:	17e3      	asrs	r3, r4, #31
 801161c:	9406      	str	r4, [sp, #24]
 801161e:	9307      	str	r3, [sp, #28]
 8011620:	9b06      	ldr	r3, [sp, #24]
 8011622:	9c07      	ldr	r4, [sp, #28]
 8011624:	18c0      	adds	r0, r0, r3
 8011626:	4161      	adcs	r1, r4
 8011628:	2301      	movs	r3, #1
 801162a:	782c      	ldrb	r4, [r5, #0]
 801162c:	3501      	adds	r5, #1
 801162e:	e7d5      	b.n	80115dc <_strtoll_l.constprop.0+0x80>
 8011630:	9701      	str	r7, [sp, #4]
 8011632:	2c2b      	cmp	r4, #43	; 0x2b
 8011634:	d1ac      	bne.n	8011590 <_strtoll_l.constprop.0+0x34>
 8011636:	781c      	ldrb	r4, [r3, #0]
 8011638:	1c95      	adds	r5, r2, #2
 801163a:	e7a9      	b.n	8011590 <_strtoll_l.constprop.0+0x34>
 801163c:	0022      	movs	r2, r4
 801163e:	3a41      	subs	r2, #65	; 0x41
 8011640:	2a19      	cmp	r2, #25
 8011642:	d801      	bhi.n	8011648 <_strtoll_l.constprop.0+0xec>
 8011644:	3c37      	subs	r4, #55	; 0x37
 8011646:	e7ce      	b.n	80115e6 <_strtoll_l.constprop.0+0x8a>
 8011648:	0022      	movs	r2, r4
 801164a:	3a61      	subs	r2, #97	; 0x61
 801164c:	2a19      	cmp	r2, #25
 801164e:	d804      	bhi.n	801165a <_strtoll_l.constprop.0+0xfe>
 8011650:	3c57      	subs	r4, #87	; 0x57
 8011652:	e7c8      	b.n	80115e6 <_strtoll_l.constprop.0+0x8a>
 8011654:	2301      	movs	r3, #1
 8011656:	425b      	negs	r3, r3
 8011658:	e7e7      	b.n	801162a <_strtoll_l.constprop.0+0xce>
 801165a:	1c5a      	adds	r2, r3, #1
 801165c:	d109      	bne.n	8011672 <_strtoll_l.constprop.0+0x116>
 801165e:	9804      	ldr	r0, [sp, #16]
 8011660:	9905      	ldr	r1, [sp, #20]
 8011662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011664:	3323      	adds	r3, #35	; 0x23
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	9b03      	ldr	r3, [sp, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d10e      	bne.n	801168c <_strtoll_l.constprop.0+0x130>
 801166e:	b00d      	add	sp, #52	; 0x34
 8011670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011672:	9a01      	ldr	r2, [sp, #4]
 8011674:	2a00      	cmp	r2, #0
 8011676:	d004      	beq.n	8011682 <_strtoll_l.constprop.0+0x126>
 8011678:	0006      	movs	r6, r0
 801167a:	000f      	movs	r7, r1
 801167c:	2100      	movs	r1, #0
 801167e:	4270      	negs	r0, r6
 8011680:	41b9      	sbcs	r1, r7
 8011682:	9a03      	ldr	r2, [sp, #12]
 8011684:	2a00      	cmp	r2, #0
 8011686:	d0f2      	beq.n	801166e <_strtoll_l.constprop.0+0x112>
 8011688:	2b00      	cmp	r3, #0
 801168a:	d001      	beq.n	8011690 <_strtoll_l.constprop.0+0x134>
 801168c:	1e6b      	subs	r3, r5, #1
 801168e:	9302      	str	r3, [sp, #8]
 8011690:	9b03      	ldr	r3, [sp, #12]
 8011692:	9a02      	ldr	r2, [sp, #8]
 8011694:	601a      	str	r2, [r3, #0]
 8011696:	e7ea      	b.n	801166e <_strtoll_l.constprop.0+0x112>
 8011698:	2430      	movs	r4, #48	; 0x30
 801169a:	2e00      	cmp	r6, #0
 801169c:	d000      	beq.n	80116a0 <_strtoll_l.constprop.0+0x144>
 801169e:	e787      	b.n	80115b0 <_strtoll_l.constprop.0+0x54>
 80116a0:	3608      	adds	r6, #8
 80116a2:	e785      	b.n	80115b0 <_strtoll_l.constprop.0+0x54>
 80116a4:	2c30      	cmp	r4, #48	; 0x30
 80116a6:	d100      	bne.n	80116aa <_strtoll_l.constprop.0+0x14e>
 80116a8:	e779      	b.n	801159e <_strtoll_l.constprop.0+0x42>
 80116aa:	260a      	movs	r6, #10
 80116ac:	e780      	b.n	80115b0 <_strtoll_l.constprop.0+0x54>
 80116ae:	46c0      	nop			; (mov r8, r8)
 80116b0:	08014a81 	.word	0x08014a81
 80116b4:	7fffffff 	.word	0x7fffffff

080116b8 <_strtoll_r>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	f7ff ff4f 	bl	801155c <_strtoll_l.constprop.0>
 80116be:	bd10      	pop	{r4, pc}

080116c0 <_strtoull_l.constprop.0>:
 80116c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116c2:	b08b      	sub	sp, #44	; 0x2c
 80116c4:	9202      	str	r2, [sp, #8]
 80116c6:	4a54      	ldr	r2, [pc, #336]	; (8011818 <_strtoull_l.constprop.0+0x158>)
 80116c8:	001e      	movs	r6, r3
 80116ca:	9101      	str	r1, [sp, #4]
 80116cc:	000b      	movs	r3, r1
 80116ce:	4694      	mov	ip, r2
 80116d0:	2108      	movs	r1, #8
 80116d2:	9009      	str	r0, [sp, #36]	; 0x24
 80116d4:	001a      	movs	r2, r3
 80116d6:	4660      	mov	r0, ip
 80116d8:	7814      	ldrb	r4, [r2, #0]
 80116da:	3301      	adds	r3, #1
 80116dc:	5d00      	ldrb	r0, [r0, r4]
 80116de:	001d      	movs	r5, r3
 80116e0:	0007      	movs	r7, r0
 80116e2:	400f      	ands	r7, r1
 80116e4:	4208      	tst	r0, r1
 80116e6:	d1f5      	bne.n	80116d4 <_strtoull_l.constprop.0+0x14>
 80116e8:	2c2d      	cmp	r4, #45	; 0x2d
 80116ea:	d154      	bne.n	8011796 <_strtoull_l.constprop.0+0xd6>
 80116ec:	781c      	ldrb	r4, [r3, #0]
 80116ee:	2301      	movs	r3, #1
 80116f0:	1c95      	adds	r5, r2, #2
 80116f2:	9306      	str	r3, [sp, #24]
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	d100      	bne.n	80116fa <_strtoull_l.constprop.0+0x3a>
 80116f8:	e088      	b.n	801180c <_strtoull_l.constprop.0+0x14c>
 80116fa:	2e10      	cmp	r6, #16
 80116fc:	d10a      	bne.n	8011714 <_strtoull_l.constprop.0+0x54>
 80116fe:	2c30      	cmp	r4, #48	; 0x30
 8011700:	d108      	bne.n	8011714 <_strtoull_l.constprop.0+0x54>
 8011702:	2220      	movs	r2, #32
 8011704:	782b      	ldrb	r3, [r5, #0]
 8011706:	4393      	bics	r3, r2
 8011708:	2b58      	cmp	r3, #88	; 0x58
 801170a:	d000      	beq.n	801170e <_strtoull_l.constprop.0+0x4e>
 801170c:	e078      	b.n	8011800 <_strtoull_l.constprop.0+0x140>
 801170e:	2610      	movs	r6, #16
 8011710:	786c      	ldrb	r4, [r5, #1]
 8011712:	3502      	adds	r5, #2
 8011714:	17f7      	asrs	r7, r6, #31
 8011716:	0032      	movs	r2, r6
 8011718:	003b      	movs	r3, r7
 801171a:	2001      	movs	r0, #1
 801171c:	4240      	negs	r0, r0
 801171e:	17c1      	asrs	r1, r0, #31
 8011720:	f7ee fec0 	bl	80004a4 <__aeabi_uldivmod>
 8011724:	0032      	movs	r2, r6
 8011726:	9007      	str	r0, [sp, #28]
 8011728:	9103      	str	r1, [sp, #12]
 801172a:	003b      	movs	r3, r7
 801172c:	2001      	movs	r0, #1
 801172e:	4240      	negs	r0, r0
 8011730:	17c1      	asrs	r1, r0, #31
 8011732:	f7ee feb7 	bl	80004a4 <__aeabi_uldivmod>
 8011736:	2300      	movs	r3, #0
 8011738:	2000      	movs	r0, #0
 801173a:	2100      	movs	r1, #0
 801173c:	9208      	str	r2, [sp, #32]
 801173e:	0022      	movs	r2, r4
 8011740:	3a30      	subs	r2, #48	; 0x30
 8011742:	2a09      	cmp	r2, #9
 8011744:	d82d      	bhi.n	80117a2 <_strtoull_l.constprop.0+0xe2>
 8011746:	0014      	movs	r4, r2
 8011748:	42a6      	cmp	r6, r4
 801174a:	dd39      	ble.n	80117c0 <_strtoull_l.constprop.0+0x100>
 801174c:	1c5a      	adds	r2, r3, #1
 801174e:	d01f      	beq.n	8011790 <_strtoull_l.constprop.0+0xd0>
 8011750:	9b03      	ldr	r3, [sp, #12]
 8011752:	4299      	cmp	r1, r3
 8011754:	d831      	bhi.n	80117ba <_strtoull_l.constprop.0+0xfa>
 8011756:	d102      	bne.n	801175e <_strtoull_l.constprop.0+0x9e>
 8011758:	9b07      	ldr	r3, [sp, #28]
 801175a:	4298      	cmp	r0, r3
 801175c:	d82d      	bhi.n	80117ba <_strtoull_l.constprop.0+0xfa>
 801175e:	9b07      	ldr	r3, [sp, #28]
 8011760:	4283      	cmp	r3, r0
 8011762:	d107      	bne.n	8011774 <_strtoull_l.constprop.0+0xb4>
 8011764:	9b03      	ldr	r3, [sp, #12]
 8011766:	428b      	cmp	r3, r1
 8011768:	d104      	bne.n	8011774 <_strtoull_l.constprop.0+0xb4>
 801176a:	2301      	movs	r3, #1
 801176c:	9a08      	ldr	r2, [sp, #32]
 801176e:	425b      	negs	r3, r3
 8011770:	42a2      	cmp	r2, r4
 8011772:	db0d      	blt.n	8011790 <_strtoull_l.constprop.0+0xd0>
 8011774:	000b      	movs	r3, r1
 8011776:	0002      	movs	r2, r0
 8011778:	0039      	movs	r1, r7
 801177a:	0030      	movs	r0, r6
 801177c:	f7ee feb2 	bl	80004e4 <__aeabi_lmul>
 8011780:	17e3      	asrs	r3, r4, #31
 8011782:	9404      	str	r4, [sp, #16]
 8011784:	9305      	str	r3, [sp, #20]
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	9c05      	ldr	r4, [sp, #20]
 801178a:	18c0      	adds	r0, r0, r3
 801178c:	4161      	adcs	r1, r4
 801178e:	2301      	movs	r3, #1
 8011790:	782c      	ldrb	r4, [r5, #0]
 8011792:	3501      	adds	r5, #1
 8011794:	e7d3      	b.n	801173e <_strtoull_l.constprop.0+0x7e>
 8011796:	9706      	str	r7, [sp, #24]
 8011798:	2c2b      	cmp	r4, #43	; 0x2b
 801179a:	d1ab      	bne.n	80116f4 <_strtoull_l.constprop.0+0x34>
 801179c:	781c      	ldrb	r4, [r3, #0]
 801179e:	1c95      	adds	r5, r2, #2
 80117a0:	e7a8      	b.n	80116f4 <_strtoull_l.constprop.0+0x34>
 80117a2:	0022      	movs	r2, r4
 80117a4:	3a41      	subs	r2, #65	; 0x41
 80117a6:	2a19      	cmp	r2, #25
 80117a8:	d801      	bhi.n	80117ae <_strtoull_l.constprop.0+0xee>
 80117aa:	3c37      	subs	r4, #55	; 0x37
 80117ac:	e7cc      	b.n	8011748 <_strtoull_l.constprop.0+0x88>
 80117ae:	0022      	movs	r2, r4
 80117b0:	3a61      	subs	r2, #97	; 0x61
 80117b2:	2a19      	cmp	r2, #25
 80117b4:	d804      	bhi.n	80117c0 <_strtoull_l.constprop.0+0x100>
 80117b6:	3c57      	subs	r4, #87	; 0x57
 80117b8:	e7c6      	b.n	8011748 <_strtoull_l.constprop.0+0x88>
 80117ba:	2301      	movs	r3, #1
 80117bc:	425b      	negs	r3, r3
 80117be:	e7e7      	b.n	8011790 <_strtoull_l.constprop.0+0xd0>
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	d10a      	bne.n	80117da <_strtoull_l.constprop.0+0x11a>
 80117c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117c6:	3323      	adds	r3, #35	; 0x23
 80117c8:	6013      	str	r3, [r2, #0]
 80117ca:	9b02      	ldr	r3, [sp, #8]
 80117cc:	2001      	movs	r0, #1
 80117ce:	4240      	negs	r0, r0
 80117d0:	17c1      	asrs	r1, r0, #31
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d10e      	bne.n	80117f4 <_strtoull_l.constprop.0+0x134>
 80117d6:	b00b      	add	sp, #44	; 0x2c
 80117d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117da:	9a06      	ldr	r2, [sp, #24]
 80117dc:	2a00      	cmp	r2, #0
 80117de:	d004      	beq.n	80117ea <_strtoull_l.constprop.0+0x12a>
 80117e0:	0006      	movs	r6, r0
 80117e2:	000f      	movs	r7, r1
 80117e4:	2100      	movs	r1, #0
 80117e6:	4270      	negs	r0, r6
 80117e8:	41b9      	sbcs	r1, r7
 80117ea:	9a02      	ldr	r2, [sp, #8]
 80117ec:	2a00      	cmp	r2, #0
 80117ee:	d0f2      	beq.n	80117d6 <_strtoull_l.constprop.0+0x116>
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <_strtoull_l.constprop.0+0x138>
 80117f4:	1e6b      	subs	r3, r5, #1
 80117f6:	9301      	str	r3, [sp, #4]
 80117f8:	9b02      	ldr	r3, [sp, #8]
 80117fa:	9a01      	ldr	r2, [sp, #4]
 80117fc:	601a      	str	r2, [r3, #0]
 80117fe:	e7ea      	b.n	80117d6 <_strtoull_l.constprop.0+0x116>
 8011800:	2430      	movs	r4, #48	; 0x30
 8011802:	2e00      	cmp	r6, #0
 8011804:	d000      	beq.n	8011808 <_strtoull_l.constprop.0+0x148>
 8011806:	e785      	b.n	8011714 <_strtoull_l.constprop.0+0x54>
 8011808:	3608      	adds	r6, #8
 801180a:	e783      	b.n	8011714 <_strtoull_l.constprop.0+0x54>
 801180c:	2c30      	cmp	r4, #48	; 0x30
 801180e:	d100      	bne.n	8011812 <_strtoull_l.constprop.0+0x152>
 8011810:	e777      	b.n	8011702 <_strtoull_l.constprop.0+0x42>
 8011812:	260a      	movs	r6, #10
 8011814:	e77e      	b.n	8011714 <_strtoull_l.constprop.0+0x54>
 8011816:	46c0      	nop			; (mov r8, r8)
 8011818:	08014a81 	.word	0x08014a81

0801181c <_strtoull_r>:
 801181c:	b510      	push	{r4, lr}
 801181e:	f7ff ff4f 	bl	80116c0 <_strtoull_l.constprop.0>
 8011822:	bd10      	pop	{r4, pc}

08011824 <_mbrtowc_r>:
 8011824:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011826:	0004      	movs	r4, r0
 8011828:	0010      	movs	r0, r2
 801182a:	4a0b      	ldr	r2, [pc, #44]	; (8011858 <_mbrtowc_r+0x34>)
 801182c:	9d06      	ldr	r5, [sp, #24]
 801182e:	32e4      	adds	r2, #228	; 0xe4
 8011830:	6816      	ldr	r6, [r2, #0]
 8011832:	2800      	cmp	r0, #0
 8011834:	d10c      	bne.n	8011850 <_mbrtowc_r+0x2c>
 8011836:	2301      	movs	r3, #1
 8011838:	0001      	movs	r1, r0
 801183a:	4a08      	ldr	r2, [pc, #32]	; (801185c <_mbrtowc_r+0x38>)
 801183c:	9500      	str	r5, [sp, #0]
 801183e:	0020      	movs	r0, r4
 8011840:	47b0      	blx	r6
 8011842:	1c43      	adds	r3, r0, #1
 8011844:	d103      	bne.n	801184e <_mbrtowc_r+0x2a>
 8011846:	2300      	movs	r3, #0
 8011848:	602b      	str	r3, [r5, #0]
 801184a:	338a      	adds	r3, #138	; 0x8a
 801184c:	6023      	str	r3, [r4, #0]
 801184e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8011850:	0002      	movs	r2, r0
 8011852:	9500      	str	r5, [sp, #0]
 8011854:	e7f3      	b.n	801183e <_mbrtowc_r+0x1a>
 8011856:	46c0      	nop			; (mov r8, r8)
 8011858:	20000444 	.word	0x20000444
 801185c:	08014e0b 	.word	0x08014e0b

08011860 <iswspace>:
 8011860:	b510      	push	{r4, lr}
 8011862:	2100      	movs	r1, #0
 8011864:	f000 f802 	bl	801186c <iswspace_l>
 8011868:	bd10      	pop	{r4, pc}
	...

0801186c <iswspace_l>:
 801186c:	0003      	movs	r3, r0
 801186e:	2000      	movs	r0, #0
 8011870:	2bff      	cmp	r3, #255	; 0xff
 8011872:	d803      	bhi.n	801187c <iswspace_l+0x10>
 8011874:	4a02      	ldr	r2, [pc, #8]	; (8011880 <iswspace_l+0x14>)
 8011876:	5cd0      	ldrb	r0, [r2, r3]
 8011878:	2308      	movs	r3, #8
 801187a:	4018      	ands	r0, r3
 801187c:	4770      	bx	lr
 801187e:	46c0      	nop			; (mov r8, r8)
 8011880:	08014a81 	.word	0x08014a81

08011884 <fiprintf>:
 8011884:	b40e      	push	{r1, r2, r3}
 8011886:	b517      	push	{r0, r1, r2, r4, lr}
 8011888:	4c05      	ldr	r4, [pc, #20]	; (80118a0 <fiprintf+0x1c>)
 801188a:	ab05      	add	r3, sp, #20
 801188c:	cb04      	ldmia	r3!, {r2}
 801188e:	0001      	movs	r1, r0
 8011890:	6820      	ldr	r0, [r4, #0]
 8011892:	9301      	str	r3, [sp, #4]
 8011894:	f000 f954 	bl	8011b40 <_vfiprintf_r>
 8011898:	bc1e      	pop	{r1, r2, r3, r4}
 801189a:	bc08      	pop	{r3}
 801189c:	b003      	add	sp, #12
 801189e:	4718      	bx	r3
 80118a0:	200006d0 	.word	0x200006d0

080118a4 <__ssprint_r>:
 80118a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118a6:	6813      	ldr	r3, [r2, #0]
 80118a8:	b087      	sub	sp, #28
 80118aa:	0017      	movs	r7, r2
 80118ac:	9303      	str	r3, [sp, #12]
 80118ae:	6893      	ldr	r3, [r2, #8]
 80118b0:	2200      	movs	r2, #0
 80118b2:	000c      	movs	r4, r1
 80118b4:	9005      	str	r0, [sp, #20]
 80118b6:	9202      	str	r2, [sp, #8]
 80118b8:	9201      	str	r2, [sp, #4]
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d10d      	bne.n	80118da <__ssprint_r+0x36>
 80118be:	2000      	movs	r0, #0
 80118c0:	2300      	movs	r3, #0
 80118c2:	607b      	str	r3, [r7, #4]
 80118c4:	b007      	add	sp, #28
 80118c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118c8:	9b03      	ldr	r3, [sp, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	9302      	str	r3, [sp, #8]
 80118ce:	9b03      	ldr	r3, [sp, #12]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	9301      	str	r3, [sp, #4]
 80118d4:	9b03      	ldr	r3, [sp, #12]
 80118d6:	3308      	adds	r3, #8
 80118d8:	9303      	str	r3, [sp, #12]
 80118da:	9a01      	ldr	r2, [sp, #4]
 80118dc:	68a6      	ldr	r6, [r4, #8]
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	2a00      	cmp	r2, #0
 80118e2:	d0f1      	beq.n	80118c8 <__ssprint_r+0x24>
 80118e4:	42b2      	cmp	r2, r6
 80118e6:	d32e      	bcc.n	8011946 <__ssprint_r+0xa2>
 80118e8:	2190      	movs	r1, #144	; 0x90
 80118ea:	89a2      	ldrh	r2, [r4, #12]
 80118ec:	00c9      	lsls	r1, r1, #3
 80118ee:	420a      	tst	r2, r1
 80118f0:	d029      	beq.n	8011946 <__ssprint_r+0xa2>
 80118f2:	2003      	movs	r0, #3
 80118f4:	6921      	ldr	r1, [r4, #16]
 80118f6:	1a5b      	subs	r3, r3, r1
 80118f8:	9304      	str	r3, [sp, #16]
 80118fa:	6963      	ldr	r3, [r4, #20]
 80118fc:	4343      	muls	r3, r0
 80118fe:	0fdd      	lsrs	r5, r3, #31
 8011900:	18ed      	adds	r5, r5, r3
 8011902:	9b04      	ldr	r3, [sp, #16]
 8011904:	9801      	ldr	r0, [sp, #4]
 8011906:	3301      	adds	r3, #1
 8011908:	181b      	adds	r3, r3, r0
 801190a:	106d      	asrs	r5, r5, #1
 801190c:	42ab      	cmp	r3, r5
 801190e:	d900      	bls.n	8011912 <__ssprint_r+0x6e>
 8011910:	001d      	movs	r5, r3
 8011912:	0552      	lsls	r2, r2, #21
 8011914:	d532      	bpl.n	801197c <__ssprint_r+0xd8>
 8011916:	0029      	movs	r1, r5
 8011918:	9805      	ldr	r0, [sp, #20]
 801191a:	f7f9 f9e1 	bl	800ace0 <_malloc_r>
 801191e:	1e06      	subs	r6, r0, #0
 8011920:	d036      	beq.n	8011990 <__ssprint_r+0xec>
 8011922:	9a04      	ldr	r2, [sp, #16]
 8011924:	6921      	ldr	r1, [r4, #16]
 8011926:	f7fa fe1a 	bl	800c55e <memcpy>
 801192a:	89a2      	ldrh	r2, [r4, #12]
 801192c:	4b1e      	ldr	r3, [pc, #120]	; (80119a8 <__ssprint_r+0x104>)
 801192e:	401a      	ands	r2, r3
 8011930:	2380      	movs	r3, #128	; 0x80
 8011932:	4313      	orrs	r3, r2
 8011934:	81a3      	strh	r3, [r4, #12]
 8011936:	9b04      	ldr	r3, [sp, #16]
 8011938:	6126      	str	r6, [r4, #16]
 801193a:	18f6      	adds	r6, r6, r3
 801193c:	6026      	str	r6, [r4, #0]
 801193e:	6165      	str	r5, [r4, #20]
 8011940:	9e01      	ldr	r6, [sp, #4]
 8011942:	1aed      	subs	r5, r5, r3
 8011944:	60a5      	str	r5, [r4, #8]
 8011946:	9b01      	ldr	r3, [sp, #4]
 8011948:	429e      	cmp	r6, r3
 801194a:	d900      	bls.n	801194e <__ssprint_r+0xaa>
 801194c:	001e      	movs	r6, r3
 801194e:	0032      	movs	r2, r6
 8011950:	9902      	ldr	r1, [sp, #8]
 8011952:	6820      	ldr	r0, [r4, #0]
 8011954:	f001 f86d 	bl	8012a32 <memmove>
 8011958:	9a01      	ldr	r2, [sp, #4]
 801195a:	68a3      	ldr	r3, [r4, #8]
 801195c:	4694      	mov	ip, r2
 801195e:	1b9b      	subs	r3, r3, r6
 8011960:	60a3      	str	r3, [r4, #8]
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	199b      	adds	r3, r3, r6
 8011966:	6023      	str	r3, [r4, #0]
 8011968:	9b02      	ldr	r3, [sp, #8]
 801196a:	4463      	add	r3, ip
 801196c:	9302      	str	r3, [sp, #8]
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	1a9b      	subs	r3, r3, r2
 8011972:	60bb      	str	r3, [r7, #8]
 8011974:	d0a3      	beq.n	80118be <__ssprint_r+0x1a>
 8011976:	2300      	movs	r3, #0
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	e7ae      	b.n	80118da <__ssprint_r+0x36>
 801197c:	002a      	movs	r2, r5
 801197e:	9805      	ldr	r0, [sp, #20]
 8011980:	f7ff fc46 	bl	8011210 <_realloc_r>
 8011984:	1e06      	subs	r6, r0, #0
 8011986:	d1d6      	bne.n	8011936 <__ssprint_r+0x92>
 8011988:	6921      	ldr	r1, [r4, #16]
 801198a:	9805      	ldr	r0, [sp, #20]
 801198c:	f7fa fe62 	bl	800c654 <_free_r>
 8011990:	230c      	movs	r3, #12
 8011992:	9a05      	ldr	r2, [sp, #20]
 8011994:	2001      	movs	r0, #1
 8011996:	6013      	str	r3, [r2, #0]
 8011998:	89a2      	ldrh	r2, [r4, #12]
 801199a:	3334      	adds	r3, #52	; 0x34
 801199c:	4313      	orrs	r3, r2
 801199e:	81a3      	strh	r3, [r4, #12]
 80119a0:	2300      	movs	r3, #0
 80119a2:	4240      	negs	r0, r0
 80119a4:	60bb      	str	r3, [r7, #8]
 80119a6:	e78b      	b.n	80118c0 <__ssprint_r+0x1c>
 80119a8:	fffffb7f 	.word	0xfffffb7f

080119ac <_sungetc_r>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	0014      	movs	r4, r2
 80119b0:	1c4b      	adds	r3, r1, #1
 80119b2:	d103      	bne.n	80119bc <_sungetc_r+0x10>
 80119b4:	2501      	movs	r5, #1
 80119b6:	426d      	negs	r5, r5
 80119b8:	0028      	movs	r0, r5
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	8993      	ldrh	r3, [r2, #12]
 80119be:	2220      	movs	r2, #32
 80119c0:	4393      	bics	r3, r2
 80119c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80119c4:	81a3      	strh	r3, [r4, #12]
 80119c6:	b2ce      	uxtb	r6, r1
 80119c8:	6863      	ldr	r3, [r4, #4]
 80119ca:	b2cd      	uxtb	r5, r1
 80119cc:	2a00      	cmp	r2, #0
 80119ce:	d010      	beq.n	80119f2 <_sungetc_r+0x46>
 80119d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80119d2:	429a      	cmp	r2, r3
 80119d4:	dd07      	ble.n	80119e6 <_sungetc_r+0x3a>
 80119d6:	6823      	ldr	r3, [r4, #0]
 80119d8:	3b01      	subs	r3, #1
 80119da:	6023      	str	r3, [r4, #0]
 80119dc:	701e      	strb	r6, [r3, #0]
 80119de:	6863      	ldr	r3, [r4, #4]
 80119e0:	3301      	adds	r3, #1
 80119e2:	6063      	str	r3, [r4, #4]
 80119e4:	e7e8      	b.n	80119b8 <_sungetc_r+0xc>
 80119e6:	0021      	movs	r1, r4
 80119e8:	f000 ff1a 	bl	8012820 <__submore>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0f2      	beq.n	80119d6 <_sungetc_r+0x2a>
 80119f0:	e7e0      	b.n	80119b4 <_sungetc_r+0x8>
 80119f2:	6921      	ldr	r1, [r4, #16]
 80119f4:	6822      	ldr	r2, [r4, #0]
 80119f6:	2900      	cmp	r1, #0
 80119f8:	d007      	beq.n	8011a0a <_sungetc_r+0x5e>
 80119fa:	4291      	cmp	r1, r2
 80119fc:	d205      	bcs.n	8011a0a <_sungetc_r+0x5e>
 80119fe:	1e51      	subs	r1, r2, #1
 8011a00:	7808      	ldrb	r0, [r1, #0]
 8011a02:	42a8      	cmp	r0, r5
 8011a04:	d101      	bne.n	8011a0a <_sungetc_r+0x5e>
 8011a06:	6021      	str	r1, [r4, #0]
 8011a08:	e7ea      	b.n	80119e0 <_sungetc_r+0x34>
 8011a0a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011a0c:	0023      	movs	r3, r4
 8011a0e:	3340      	adds	r3, #64	; 0x40
 8011a10:	6323      	str	r3, [r4, #48]	; 0x30
 8011a12:	2303      	movs	r3, #3
 8011a14:	6363      	str	r3, [r4, #52]	; 0x34
 8011a16:	0023      	movs	r3, r4
 8011a18:	3342      	adds	r3, #66	; 0x42
 8011a1a:	63a2      	str	r2, [r4, #56]	; 0x38
 8011a1c:	701e      	strb	r6, [r3, #0]
 8011a1e:	6023      	str	r3, [r4, #0]
 8011a20:	2301      	movs	r3, #1
 8011a22:	e7de      	b.n	80119e2 <_sungetc_r+0x36>

08011a24 <__ssrefill_r>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	000c      	movs	r4, r1
 8011a28:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011a2a:	2900      	cmp	r1, #0
 8011a2c:	d00e      	beq.n	8011a4c <__ssrefill_r+0x28>
 8011a2e:	0023      	movs	r3, r4
 8011a30:	3340      	adds	r3, #64	; 0x40
 8011a32:	4299      	cmp	r1, r3
 8011a34:	d001      	beq.n	8011a3a <__ssrefill_r+0x16>
 8011a36:	f7fa fe0d 	bl	800c654 <_free_r>
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a3e:	6320      	str	r0, [r4, #48]	; 0x30
 8011a40:	6063      	str	r3, [r4, #4]
 8011a42:	4283      	cmp	r3, r0
 8011a44:	d002      	beq.n	8011a4c <__ssrefill_r+0x28>
 8011a46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd10      	pop	{r4, pc}
 8011a4c:	6923      	ldr	r3, [r4, #16]
 8011a4e:	2001      	movs	r0, #1
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	2300      	movs	r3, #0
 8011a54:	89a2      	ldrh	r2, [r4, #12]
 8011a56:	6063      	str	r3, [r4, #4]
 8011a58:	3320      	adds	r3, #32
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	81a3      	strh	r3, [r4, #12]
 8011a5e:	4240      	negs	r0, r0
 8011a60:	e7f3      	b.n	8011a4a <__ssrefill_r+0x26>

08011a62 <_sfread_r>:
 8011a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a64:	0014      	movs	r4, r2
 8011a66:	435c      	muls	r4, r3
 8011a68:	b087      	sub	sp, #28
 8011a6a:	1e26      	subs	r6, r4, #0
 8011a6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a6e:	9005      	str	r0, [sp, #20]
 8011a70:	9101      	str	r1, [sp, #4]
 8011a72:	9202      	str	r2, [sp, #8]
 8011a74:	9303      	str	r3, [sp, #12]
 8011a76:	d11e      	bne.n	8011ab6 <_sfread_r+0x54>
 8011a78:	0020      	movs	r0, r4
 8011a7a:	b007      	add	sp, #28
 8011a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a7e:	003a      	movs	r2, r7
 8011a80:	9801      	ldr	r0, [sp, #4]
 8011a82:	f7fa fd6c 	bl	800c55e <memcpy>
 8011a86:	682b      	ldr	r3, [r5, #0]
 8011a88:	0029      	movs	r1, r5
 8011a8a:	19db      	adds	r3, r3, r7
 8011a8c:	602b      	str	r3, [r5, #0]
 8011a8e:	2300      	movs	r3, #0
 8011a90:	606b      	str	r3, [r5, #4]
 8011a92:	9b01      	ldr	r3, [sp, #4]
 8011a94:	9805      	ldr	r0, [sp, #20]
 8011a96:	19db      	adds	r3, r3, r7
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	1bf3      	subs	r3, r6, r7
 8011a9c:	9304      	str	r3, [sp, #16]
 8011a9e:	f7ff ffc1 	bl	8011a24 <__ssrefill_r>
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d006      	beq.n	8011ab4 <_sfread_r+0x52>
 8011aa6:	193c      	adds	r4, r7, r4
 8011aa8:	1ba0      	subs	r0, r4, r6
 8011aaa:	9902      	ldr	r1, [sp, #8]
 8011aac:	f7ee fb46 	bl	800013c <__udivsi3>
 8011ab0:	0004      	movs	r4, r0
 8011ab2:	e7e1      	b.n	8011a78 <_sfread_r+0x16>
 8011ab4:	9e04      	ldr	r6, [sp, #16]
 8011ab6:	686f      	ldr	r7, [r5, #4]
 8011ab8:	6829      	ldr	r1, [r5, #0]
 8011aba:	42b7      	cmp	r7, r6
 8011abc:	d3df      	bcc.n	8011a7e <_sfread_r+0x1c>
 8011abe:	0032      	movs	r2, r6
 8011ac0:	9801      	ldr	r0, [sp, #4]
 8011ac2:	f7fa fd4c 	bl	800c55e <memcpy>
 8011ac6:	686b      	ldr	r3, [r5, #4]
 8011ac8:	9c03      	ldr	r4, [sp, #12]
 8011aca:	1b9b      	subs	r3, r3, r6
 8011acc:	606b      	str	r3, [r5, #4]
 8011ace:	682b      	ldr	r3, [r5, #0]
 8011ad0:	199b      	adds	r3, r3, r6
 8011ad2:	602b      	str	r3, [r5, #0]
 8011ad4:	e7d0      	b.n	8011a78 <_sfread_r+0x16>

08011ad6 <__sprint_r>:
 8011ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ad8:	6893      	ldr	r3, [r2, #8]
 8011ada:	b085      	sub	sp, #20
 8011adc:	9001      	str	r0, [sp, #4]
 8011ade:	000d      	movs	r5, r1
 8011ae0:	0014      	movs	r4, r2
 8011ae2:	1e18      	subs	r0, r3, #0
 8011ae4:	d018      	beq.n	8011b18 <__sprint_r+0x42>
 8011ae6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011ae8:	049b      	lsls	r3, r3, #18
 8011aea:	d524      	bpl.n	8011b36 <__sprint_r+0x60>
 8011aec:	6817      	ldr	r7, [r2, #0]
 8011aee:	2600      	movs	r6, #0
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	9302      	str	r3, [sp, #8]
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	089b      	lsrs	r3, r3, #2
 8011afa:	9303      	str	r3, [sp, #12]
 8011afc:	9b03      	ldr	r3, [sp, #12]
 8011afe:	42b3      	cmp	r3, r6
 8011b00:	dc0e      	bgt.n	8011b20 <__sprint_r+0x4a>
 8011b02:	2203      	movs	r2, #3
 8011b04:	9b00      	ldr	r3, [sp, #0]
 8011b06:	68a0      	ldr	r0, [r4, #8]
 8011b08:	4393      	bics	r3, r2
 8011b0a:	1ac0      	subs	r0, r0, r3
 8011b0c:	60a0      	str	r0, [r4, #8]
 8011b0e:	3708      	adds	r7, #8
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d1ec      	bne.n	8011aee <__sprint_r+0x18>
 8011b14:	2300      	movs	r3, #0
 8011b16:	60a3      	str	r3, [r4, #8]
 8011b18:	2300      	movs	r3, #0
 8011b1a:	6063      	str	r3, [r4, #4]
 8011b1c:	b005      	add	sp, #20
 8011b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b20:	9902      	ldr	r1, [sp, #8]
 8011b22:	00b3      	lsls	r3, r6, #2
 8011b24:	58c9      	ldr	r1, [r1, r3]
 8011b26:	002a      	movs	r2, r5
 8011b28:	9801      	ldr	r0, [sp, #4]
 8011b2a:	f000 ff59 	bl	80129e0 <_fputwc_r>
 8011b2e:	1c43      	adds	r3, r0, #1
 8011b30:	d0f0      	beq.n	8011b14 <__sprint_r+0x3e>
 8011b32:	3601      	adds	r6, #1
 8011b34:	e7e2      	b.n	8011afc <__sprint_r+0x26>
 8011b36:	9801      	ldr	r0, [sp, #4]
 8011b38:	f000 fd14 	bl	8012564 <__sfvwrite_r>
 8011b3c:	e7ea      	b.n	8011b14 <__sprint_r+0x3e>
	...

08011b40 <_vfiprintf_r>:
 8011b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b42:	b0c1      	sub	sp, #260	; 0x104
 8011b44:	001c      	movs	r4, r3
 8011b46:	001f      	movs	r7, r3
 8011b48:	9006      	str	r0, [sp, #24]
 8011b4a:	9103      	str	r1, [sp, #12]
 8011b4c:	9207      	str	r2, [sp, #28]
 8011b4e:	2800      	cmp	r0, #0
 8011b50:	d004      	beq.n	8011b5c <_vfiprintf_r+0x1c>
 8011b52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d101      	bne.n	8011b5c <_vfiprintf_r+0x1c>
 8011b58:	f7fa fad6 	bl	800c108 <__sinit>
 8011b5c:	9b03      	ldr	r3, [sp, #12]
 8011b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b60:	07db      	lsls	r3, r3, #31
 8011b62:	d407      	bmi.n	8011b74 <_vfiprintf_r+0x34>
 8011b64:	9b03      	ldr	r3, [sp, #12]
 8011b66:	899b      	ldrh	r3, [r3, #12]
 8011b68:	059b      	lsls	r3, r3, #22
 8011b6a:	d403      	bmi.n	8011b74 <_vfiprintf_r+0x34>
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011b70:	f7fa fce8 	bl	800c544 <__retarget_lock_acquire_recursive>
 8011b74:	9b03      	ldr	r3, [sp, #12]
 8011b76:	220c      	movs	r2, #12
 8011b78:	5e9a      	ldrsh	r2, [r3, r2]
 8011b7a:	2380      	movs	r3, #128	; 0x80
 8011b7c:	019b      	lsls	r3, r3, #6
 8011b7e:	421a      	tst	r2, r3
 8011b80:	d107      	bne.n	8011b92 <_vfiprintf_r+0x52>
 8011b82:	4313      	orrs	r3, r2
 8011b84:	9a03      	ldr	r2, [sp, #12]
 8011b86:	8193      	strh	r3, [r2, #12]
 8011b88:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011b8a:	4aa3      	ldr	r2, [pc, #652]	; (8011e18 <_vfiprintf_r+0x2d8>)
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	9a03      	ldr	r2, [sp, #12]
 8011b90:	6653      	str	r3, [r2, #100]	; 0x64
 8011b92:	9b03      	ldr	r3, [sp, #12]
 8011b94:	899b      	ldrh	r3, [r3, #12]
 8011b96:	071b      	lsls	r3, r3, #28
 8011b98:	d503      	bpl.n	8011ba2 <_vfiprintf_r+0x62>
 8011b9a:	9b03      	ldr	r3, [sp, #12]
 8011b9c:	691b      	ldr	r3, [r3, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d118      	bne.n	8011bd4 <_vfiprintf_r+0x94>
 8011ba2:	9903      	ldr	r1, [sp, #12]
 8011ba4:	9806      	ldr	r0, [sp, #24]
 8011ba6:	f000 fe79 	bl	801289c <__swsetup_r>
 8011baa:	2800      	cmp	r0, #0
 8011bac:	d012      	beq.n	8011bd4 <_vfiprintf_r+0x94>
 8011bae:	9b03      	ldr	r3, [sp, #12]
 8011bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011bb2:	07db      	lsls	r3, r3, #31
 8011bb4:	d505      	bpl.n	8011bc2 <_vfiprintf_r+0x82>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	425b      	negs	r3, r3
 8011bba:	9308      	str	r3, [sp, #32]
 8011bbc:	9808      	ldr	r0, [sp, #32]
 8011bbe:	b041      	add	sp, #260	; 0x104
 8011bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc2:	9b03      	ldr	r3, [sp, #12]
 8011bc4:	899b      	ldrh	r3, [r3, #12]
 8011bc6:	059b      	lsls	r3, r3, #22
 8011bc8:	d4f5      	bmi.n	8011bb6 <_vfiprintf_r+0x76>
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bce:	f7fa fcba 	bl	800c546 <__retarget_lock_release_recursive>
 8011bd2:	e7f0      	b.n	8011bb6 <_vfiprintf_r+0x76>
 8011bd4:	221a      	movs	r2, #26
 8011bd6:	9b03      	ldr	r3, [sp, #12]
 8011bd8:	899b      	ldrh	r3, [r3, #12]
 8011bda:	401a      	ands	r2, r3
 8011bdc:	2a0a      	cmp	r2, #10
 8011bde:	d116      	bne.n	8011c0e <_vfiprintf_r+0xce>
 8011be0:	9a03      	ldr	r2, [sp, #12]
 8011be2:	210e      	movs	r1, #14
 8011be4:	5e52      	ldrsh	r2, [r2, r1]
 8011be6:	2a00      	cmp	r2, #0
 8011be8:	db11      	blt.n	8011c0e <_vfiprintf_r+0xce>
 8011bea:	9a03      	ldr	r2, [sp, #12]
 8011bec:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011bee:	07d2      	lsls	r2, r2, #31
 8011bf0:	d405      	bmi.n	8011bfe <_vfiprintf_r+0xbe>
 8011bf2:	059b      	lsls	r3, r3, #22
 8011bf4:	d403      	bmi.n	8011bfe <_vfiprintf_r+0xbe>
 8011bf6:	9b03      	ldr	r3, [sp, #12]
 8011bf8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011bfa:	f7fa fca4 	bl	800c546 <__retarget_lock_release_recursive>
 8011bfe:	0023      	movs	r3, r4
 8011c00:	9a07      	ldr	r2, [sp, #28]
 8011c02:	9903      	ldr	r1, [sp, #12]
 8011c04:	9806      	ldr	r0, [sp, #24]
 8011c06:	f000 fc69 	bl	80124dc <__sbprintf>
 8011c0a:	9008      	str	r0, [sp, #32]
 8011c0c:	e7d6      	b.n	8011bbc <_vfiprintf_r+0x7c>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	ad17      	add	r5, sp, #92	; 0x5c
 8011c12:	9514      	str	r5, [sp, #80]	; 0x50
 8011c14:	9316      	str	r3, [sp, #88]	; 0x58
 8011c16:	9315      	str	r3, [sp, #84]	; 0x54
 8011c18:	930c      	str	r3, [sp, #48]	; 0x30
 8011c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8011c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8011c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c20:	9308      	str	r3, [sp, #32]
 8011c22:	9c07      	ldr	r4, [sp, #28]
 8011c24:	7823      	ldrb	r3, [r4, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d002      	beq.n	8011c30 <_vfiprintf_r+0xf0>
 8011c2a:	2b25      	cmp	r3, #37	; 0x25
 8011c2c:	d000      	beq.n	8011c30 <_vfiprintf_r+0xf0>
 8011c2e:	e08d      	b.n	8011d4c <_vfiprintf_r+0x20c>
 8011c30:	9b07      	ldr	r3, [sp, #28]
 8011c32:	1ae6      	subs	r6, r4, r3
 8011c34:	429c      	cmp	r4, r3
 8011c36:	d016      	beq.n	8011c66 <_vfiprintf_r+0x126>
 8011c38:	602b      	str	r3, [r5, #0]
 8011c3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c3c:	606e      	str	r6, [r5, #4]
 8011c3e:	199b      	adds	r3, r3, r6
 8011c40:	9316      	str	r3, [sp, #88]	; 0x58
 8011c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c44:	3508      	adds	r5, #8
 8011c46:	3301      	adds	r3, #1
 8011c48:	9315      	str	r3, [sp, #84]	; 0x54
 8011c4a:	2b07      	cmp	r3, #7
 8011c4c:	dd08      	ble.n	8011c60 <_vfiprintf_r+0x120>
 8011c4e:	9903      	ldr	r1, [sp, #12]
 8011c50:	9806      	ldr	r0, [sp, #24]
 8011c52:	aa14      	add	r2, sp, #80	; 0x50
 8011c54:	f7ff ff3f 	bl	8011ad6 <__sprint_r>
 8011c58:	2800      	cmp	r0, #0
 8011c5a:	d000      	beq.n	8011c5e <_vfiprintf_r+0x11e>
 8011c5c:	e3d9      	b.n	8012412 <_vfiprintf_r+0x8d2>
 8011c5e:	ad17      	add	r5, sp, #92	; 0x5c
 8011c60:	9b08      	ldr	r3, [sp, #32]
 8011c62:	199b      	adds	r3, r3, r6
 8011c64:	9308      	str	r3, [sp, #32]
 8011c66:	7823      	ldrb	r3, [r4, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d101      	bne.n	8011c70 <_vfiprintf_r+0x130>
 8011c6c:	f000 fbf6 	bl	801245c <_vfiprintf_r+0x91c>
 8011c70:	2200      	movs	r2, #0
 8011c72:	a912      	add	r1, sp, #72	; 0x48
 8011c74:	70ca      	strb	r2, [r1, #3]
 8011c76:	2101      	movs	r1, #1
 8011c78:	1c63      	adds	r3, r4, #1
 8011c7a:	0014      	movs	r4, r2
 8011c7c:	4249      	negs	r1, r1
 8011c7e:	9105      	str	r1, [sp, #20]
 8011c80:	9209      	str	r2, [sp, #36]	; 0x24
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	9207      	str	r2, [sp, #28]
 8011c88:	0018      	movs	r0, r3
 8011c8a:	3820      	subs	r0, #32
 8011c8c:	285a      	cmp	r0, #90	; 0x5a
 8011c8e:	d900      	bls.n	8011c92 <_vfiprintf_r+0x152>
 8011c90:	e362      	b.n	8012358 <_vfiprintf_r+0x818>
 8011c92:	f7ee fa49 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011c96:	0078      	.short	0x0078
 8011c98:	03610361 	.word	0x03610361
 8011c9c:	03610081 	.word	0x03610081
 8011ca0:	03610361 	.word	0x03610361
 8011ca4:	0361005d 	.word	0x0361005d
 8011ca8:	00830361 	.word	0x00830361
 8011cac:	0361008b 	.word	0x0361008b
 8011cb0:	008f0089 	.word	0x008f0089
 8011cb4:	00ad0361 	.word	0x00ad0361
 8011cb8:	00af00af 	.word	0x00af00af
 8011cbc:	00af00af 	.word	0x00af00af
 8011cc0:	00af00af 	.word	0x00af00af
 8011cc4:	00af00af 	.word	0x00af00af
 8011cc8:	036100af 	.word	0x036100af
 8011ccc:	03610361 	.word	0x03610361
 8011cd0:	03610361 	.word	0x03610361
 8011cd4:	03610361 	.word	0x03610361
 8011cd8:	03610361 	.word	0x03610361
 8011cdc:	00e600da 	.word	0x00e600da
 8011ce0:	03610361 	.word	0x03610361
 8011ce4:	03610361 	.word	0x03610361
 8011ce8:	03610361 	.word	0x03610361
 8011cec:	03610361 	.word	0x03610361
 8011cf0:	03610361 	.word	0x03610361
 8011cf4:	03610143 	.word	0x03610143
 8011cf8:	03610361 	.word	0x03610361
 8011cfc:	03610182 	.word	0x03610182
 8011d00:	0361027c 	.word	0x0361027c
 8011d04:	02ae0361 	.word	0x02ae0361
 8011d08:	03610361 	.word	0x03610361
 8011d0c:	03610361 	.word	0x03610361
 8011d10:	03610361 	.word	0x03610361
 8011d14:	03610361 	.word	0x03610361
 8011d18:	03610361 	.word	0x03610361
 8011d1c:	00e800da 	.word	0x00e800da
 8011d20:	03610361 	.word	0x03610361
 8011d24:	00c30361 	.word	0x00c30361
 8011d28:	00d600e8 	.word	0x00d600e8
 8011d2c:	00cf0361 	.word	0x00cf0361
 8011d30:	01260361 	.word	0x01260361
 8011d34:	01740145 	.word	0x01740145
 8011d38:	036100d6 	.word	0x036100d6
 8011d3c:	007f0182 	.word	0x007f0182
 8011d40:	0361027e 	.word	0x0361027e
 8011d44:	02cd0361 	.word	0x02cd0361
 8011d48:	007f0361 	.word	0x007f0361
 8011d4c:	3401      	adds	r4, #1
 8011d4e:	e769      	b.n	8011c24 <_vfiprintf_r+0xe4>
 8011d50:	9806      	ldr	r0, [sp, #24]
 8011d52:	f7fe facd 	bl	80102f0 <_localeconv_r>
 8011d56:	6843      	ldr	r3, [r0, #4]
 8011d58:	0018      	movs	r0, r3
 8011d5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d5c:	f7ee f9d2 	bl	8000104 <strlen>
 8011d60:	900e      	str	r0, [sp, #56]	; 0x38
 8011d62:	9806      	ldr	r0, [sp, #24]
 8011d64:	f7fe fac4 	bl	80102f0 <_localeconv_r>
 8011d68:	6883      	ldr	r3, [r0, #8]
 8011d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8011d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d010      	beq.n	8011d94 <_vfiprintf_r+0x254>
 8011d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d00d      	beq.n	8011d94 <_vfiprintf_r+0x254>
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00a      	beq.n	8011d94 <_vfiprintf_r+0x254>
 8011d7e:	2380      	movs	r3, #128	; 0x80
 8011d80:	00db      	lsls	r3, r3, #3
 8011d82:	431c      	orrs	r4, r3
 8011d84:	e006      	b.n	8011d94 <_vfiprintf_r+0x254>
 8011d86:	ab12      	add	r3, sp, #72	; 0x48
 8011d88:	78da      	ldrb	r2, [r3, #3]
 8011d8a:	3303      	adds	r3, #3
 8011d8c:	2a00      	cmp	r2, #0
 8011d8e:	d101      	bne.n	8011d94 <_vfiprintf_r+0x254>
 8011d90:	3220      	adds	r2, #32
 8011d92:	701a      	strb	r2, [r3, #0]
 8011d94:	9b07      	ldr	r3, [sp, #28]
 8011d96:	e774      	b.n	8011c82 <_vfiprintf_r+0x142>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	e7f2      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011d9c:	cf08      	ldmia	r7!, {r3}
 8011d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	daf7      	bge.n	8011d94 <_vfiprintf_r+0x254>
 8011da4:	425b      	negs	r3, r3
 8011da6:	9309      	str	r3, [sp, #36]	; 0x24
 8011da8:	2304      	movs	r3, #4
 8011daa:	e7ea      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011dac:	222b      	movs	r2, #43	; 0x2b
 8011dae:	ab12      	add	r3, sp, #72	; 0x48
 8011db0:	70da      	strb	r2, [r3, #3]
 8011db2:	e7ef      	b.n	8011d94 <_vfiprintf_r+0x254>
 8011db4:	9b07      	ldr	r3, [sp, #28]
 8011db6:	1c5a      	adds	r2, r3, #1
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	2b2a      	cmp	r3, #42	; 0x2a
 8011dbc:	d00f      	beq.n	8011dde <_vfiprintf_r+0x29e>
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	9105      	str	r1, [sp, #20]
 8011dc2:	0019      	movs	r1, r3
 8011dc4:	3930      	subs	r1, #48	; 0x30
 8011dc6:	9207      	str	r2, [sp, #28]
 8011dc8:	2909      	cmp	r1, #9
 8011dca:	d900      	bls.n	8011dce <_vfiprintf_r+0x28e>
 8011dcc:	e75c      	b.n	8011c88 <_vfiprintf_r+0x148>
 8011dce:	200a      	movs	r0, #10
 8011dd0:	9b05      	ldr	r3, [sp, #20]
 8011dd2:	4343      	muls	r3, r0
 8011dd4:	185b      	adds	r3, r3, r1
 8011dd6:	9305      	str	r3, [sp, #20]
 8011dd8:	7813      	ldrb	r3, [r2, #0]
 8011dda:	3201      	adds	r2, #1
 8011ddc:	e7f1      	b.n	8011dc2 <_vfiprintf_r+0x282>
 8011dde:	cf08      	ldmia	r7!, {r3}
 8011de0:	9305      	str	r3, [sp, #20]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	da02      	bge.n	8011dec <_vfiprintf_r+0x2ac>
 8011de6:	2301      	movs	r3, #1
 8011de8:	425b      	negs	r3, r3
 8011dea:	9305      	str	r3, [sp, #20]
 8011dec:	9207      	str	r2, [sp, #28]
 8011dee:	e7d1      	b.n	8011d94 <_vfiprintf_r+0x254>
 8011df0:	2380      	movs	r3, #128	; 0x80
 8011df2:	e7c6      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011df4:	2100      	movs	r1, #0
 8011df6:	9a07      	ldr	r2, [sp, #28]
 8011df8:	9109      	str	r1, [sp, #36]	; 0x24
 8011dfa:	200a      	movs	r0, #10
 8011dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dfe:	3b30      	subs	r3, #48	; 0x30
 8011e00:	4341      	muls	r1, r0
 8011e02:	185b      	adds	r3, r3, r1
 8011e04:	9309      	str	r3, [sp, #36]	; 0x24
 8011e06:	0013      	movs	r3, r2
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	3201      	adds	r2, #1
 8011e0c:	0019      	movs	r1, r3
 8011e0e:	3930      	subs	r1, #48	; 0x30
 8011e10:	9207      	str	r2, [sp, #28]
 8011e12:	2909      	cmp	r1, #9
 8011e14:	d9f1      	bls.n	8011dfa <_vfiprintf_r+0x2ba>
 8011e16:	e737      	b.n	8011c88 <_vfiprintf_r+0x148>
 8011e18:	ffffdfff 	.word	0xffffdfff
 8011e1c:	9b07      	ldr	r3, [sp, #28]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2b68      	cmp	r3, #104	; 0x68
 8011e22:	d105      	bne.n	8011e30 <_vfiprintf_r+0x2f0>
 8011e24:	9b07      	ldr	r3, [sp, #28]
 8011e26:	3301      	adds	r3, #1
 8011e28:	9307      	str	r3, [sp, #28]
 8011e2a:	2380      	movs	r3, #128	; 0x80
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	e7a8      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011e30:	2340      	movs	r3, #64	; 0x40
 8011e32:	e7a6      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011e34:	9b07      	ldr	r3, [sp, #28]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b6c      	cmp	r3, #108	; 0x6c
 8011e3a:	d104      	bne.n	8011e46 <_vfiprintf_r+0x306>
 8011e3c:	9b07      	ldr	r3, [sp, #28]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	9307      	str	r3, [sp, #28]
 8011e42:	2320      	movs	r3, #32
 8011e44:	e79d      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011e46:	2310      	movs	r3, #16
 8011e48:	e79b      	b.n	8011d82 <_vfiprintf_r+0x242>
 8011e4a:	003a      	movs	r2, r7
 8011e4c:	ca08      	ldmia	r2!, {r3}
 8011e4e:	ae27      	add	r6, sp, #156	; 0x9c
 8011e50:	7033      	strb	r3, [r6, #0]
 8011e52:	2300      	movs	r3, #0
 8011e54:	9204      	str	r2, [sp, #16]
 8011e56:	aa12      	add	r2, sp, #72	; 0x48
 8011e58:	70d3      	strb	r3, [r2, #3]
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e5e:	9205      	str	r2, [sp, #20]
 8011e60:	e0b0      	b.n	8011fc4 <_vfiprintf_r+0x484>
 8011e62:	2310      	movs	r3, #16
 8011e64:	431c      	orrs	r4, r3
 8011e66:	06a3      	lsls	r3, r4, #26
 8011e68:	d52a      	bpl.n	8011ec0 <_vfiprintf_r+0x380>
 8011e6a:	2307      	movs	r3, #7
 8011e6c:	3707      	adds	r7, #7
 8011e6e:	439f      	bics	r7, r3
 8011e70:	0039      	movs	r1, r7
 8011e72:	c90c      	ldmia	r1!, {r2, r3}
 8011e74:	9200      	str	r2, [sp, #0]
 8011e76:	9301      	str	r3, [sp, #4]
 8011e78:	9104      	str	r1, [sp, #16]
 8011e7a:	9a01      	ldr	r2, [sp, #4]
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	da09      	bge.n	8011e96 <_vfiprintf_r+0x356>
 8011e82:	9e00      	ldr	r6, [sp, #0]
 8011e84:	9f01      	ldr	r7, [sp, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	4271      	negs	r1, r6
 8011e8a:	41ba      	sbcs	r2, r7
 8011e8c:	9100      	str	r1, [sp, #0]
 8011e8e:	9201      	str	r2, [sp, #4]
 8011e90:	212d      	movs	r1, #45	; 0x2d
 8011e92:	aa12      	add	r2, sp, #72	; 0x48
 8011e94:	70d1      	strb	r1, [r2, #3]
 8011e96:	9901      	ldr	r1, [sp, #4]
 8011e98:	9a00      	ldr	r2, [sp, #0]
 8011e9a:	430a      	orrs	r2, r1
 8011e9c:	9905      	ldr	r1, [sp, #20]
 8011e9e:	3101      	adds	r1, #1
 8011ea0:	d100      	bne.n	8011ea4 <_vfiprintf_r+0x364>
 8011ea2:	e2e9      	b.n	8012478 <_vfiprintf_r+0x938>
 8011ea4:	2180      	movs	r1, #128	; 0x80
 8011ea6:	0027      	movs	r7, r4
 8011ea8:	438f      	bics	r7, r1
 8011eaa:	2a00      	cmp	r2, #0
 8011eac:	d000      	beq.n	8011eb0 <_vfiprintf_r+0x370>
 8011eae:	e2e7      	b.n	8012480 <_vfiprintf_r+0x940>
 8011eb0:	9a05      	ldr	r2, [sp, #20]
 8011eb2:	2a00      	cmp	r2, #0
 8011eb4:	d100      	bne.n	8011eb8 <_vfiprintf_r+0x378>
 8011eb6:	e243      	b.n	8012340 <_vfiprintf_r+0x800>
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d000      	beq.n	8011ebe <_vfiprintf_r+0x37e>
 8011ebc:	e2e3      	b.n	8012486 <_vfiprintf_r+0x946>
 8011ebe:	e1e7      	b.n	8012290 <_vfiprintf_r+0x750>
 8011ec0:	003a      	movs	r2, r7
 8011ec2:	ca08      	ldmia	r2!, {r3}
 8011ec4:	9204      	str	r2, [sp, #16]
 8011ec6:	06e2      	lsls	r2, r4, #27
 8011ec8:	d503      	bpl.n	8011ed2 <_vfiprintf_r+0x392>
 8011eca:	9300      	str	r3, [sp, #0]
 8011ecc:	17db      	asrs	r3, r3, #31
 8011ece:	9301      	str	r3, [sp, #4]
 8011ed0:	e7d3      	b.n	8011e7a <_vfiprintf_r+0x33a>
 8011ed2:	0662      	lsls	r2, r4, #25
 8011ed4:	d501      	bpl.n	8011eda <_vfiprintf_r+0x39a>
 8011ed6:	b21b      	sxth	r3, r3
 8011ed8:	e7f7      	b.n	8011eca <_vfiprintf_r+0x38a>
 8011eda:	05a2      	lsls	r2, r4, #22
 8011edc:	d5f5      	bpl.n	8011eca <_vfiprintf_r+0x38a>
 8011ede:	b25b      	sxtb	r3, r3
 8011ee0:	e7f3      	b.n	8011eca <_vfiprintf_r+0x38a>
 8011ee2:	1d3b      	adds	r3, r7, #4
 8011ee4:	9304      	str	r3, [sp, #16]
 8011ee6:	06a3      	lsls	r3, r4, #26
 8011ee8:	d506      	bpl.n	8011ef8 <_vfiprintf_r+0x3b8>
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	9a08      	ldr	r2, [sp, #32]
 8011eee:	601a      	str	r2, [r3, #0]
 8011ef0:	17d2      	asrs	r2, r2, #31
 8011ef2:	605a      	str	r2, [r3, #4]
 8011ef4:	9f04      	ldr	r7, [sp, #16]
 8011ef6:	e694      	b.n	8011c22 <_vfiprintf_r+0xe2>
 8011ef8:	06e3      	lsls	r3, r4, #27
 8011efa:	d503      	bpl.n	8011f04 <_vfiprintf_r+0x3c4>
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	9a08      	ldr	r2, [sp, #32]
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	e7f7      	b.n	8011ef4 <_vfiprintf_r+0x3b4>
 8011f04:	0663      	lsls	r3, r4, #25
 8011f06:	d503      	bpl.n	8011f10 <_vfiprintf_r+0x3d0>
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	9a08      	ldr	r2, [sp, #32]
 8011f0c:	801a      	strh	r2, [r3, #0]
 8011f0e:	e7f1      	b.n	8011ef4 <_vfiprintf_r+0x3b4>
 8011f10:	05a4      	lsls	r4, r4, #22
 8011f12:	d5f3      	bpl.n	8011efc <_vfiprintf_r+0x3bc>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	9a08      	ldr	r2, [sp, #32]
 8011f18:	701a      	strb	r2, [r3, #0]
 8011f1a:	e7eb      	b.n	8011ef4 <_vfiprintf_r+0x3b4>
 8011f1c:	2310      	movs	r3, #16
 8011f1e:	431c      	orrs	r4, r3
 8011f20:	2320      	movs	r3, #32
 8011f22:	0020      	movs	r0, r4
 8011f24:	4018      	ands	r0, r3
 8011f26:	421c      	tst	r4, r3
 8011f28:	d00d      	beq.n	8011f46 <_vfiprintf_r+0x406>
 8011f2a:	3b19      	subs	r3, #25
 8011f2c:	3707      	adds	r7, #7
 8011f2e:	439f      	bics	r7, r3
 8011f30:	0039      	movs	r1, r7
 8011f32:	c90c      	ldmia	r1!, {r2, r3}
 8011f34:	9200      	str	r2, [sp, #0]
 8011f36:	9301      	str	r3, [sp, #4]
 8011f38:	9104      	str	r1, [sp, #16]
 8011f3a:	4bcc      	ldr	r3, [pc, #816]	; (801226c <_vfiprintf_r+0x72c>)
 8011f3c:	401c      	ands	r4, r3
 8011f3e:	2300      	movs	r3, #0
 8011f40:	2100      	movs	r1, #0
 8011f42:	aa12      	add	r2, sp, #72	; 0x48
 8011f44:	e7a6      	b.n	8011e94 <_vfiprintf_r+0x354>
 8011f46:	003a      	movs	r2, r7
 8011f48:	ca08      	ldmia	r2!, {r3}
 8011f4a:	0021      	movs	r1, r4
 8011f4c:	9204      	str	r2, [sp, #16]
 8011f4e:	2210      	movs	r2, #16
 8011f50:	4011      	ands	r1, r2
 8011f52:	4214      	tst	r4, r2
 8011f54:	d002      	beq.n	8011f5c <_vfiprintf_r+0x41c>
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	9001      	str	r0, [sp, #4]
 8011f5a:	e7ee      	b.n	8011f3a <_vfiprintf_r+0x3fa>
 8011f5c:	2240      	movs	r2, #64	; 0x40
 8011f5e:	0020      	movs	r0, r4
 8011f60:	4010      	ands	r0, r2
 8011f62:	4214      	tst	r4, r2
 8011f64:	d003      	beq.n	8011f6e <_vfiprintf_r+0x42e>
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	9101      	str	r1, [sp, #4]
 8011f6c:	e7e5      	b.n	8011f3a <_vfiprintf_r+0x3fa>
 8011f6e:	2280      	movs	r2, #128	; 0x80
 8011f70:	0021      	movs	r1, r4
 8011f72:	0092      	lsls	r2, r2, #2
 8011f74:	4011      	ands	r1, r2
 8011f76:	4214      	tst	r4, r2
 8011f78:	d0f6      	beq.n	8011f68 <_vfiprintf_r+0x428>
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	e7eb      	b.n	8011f56 <_vfiprintf_r+0x416>
 8011f7e:	003b      	movs	r3, r7
 8011f80:	cb04      	ldmia	r3!, {r2}
 8011f82:	49bb      	ldr	r1, [pc, #748]	; (8012270 <_vfiprintf_r+0x730>)
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	2300      	movs	r3, #0
 8011f88:	9200      	str	r2, [sp, #0]
 8011f8a:	aa13      	add	r2, sp, #76	; 0x4c
 8011f8c:	8011      	strh	r1, [r2, #0]
 8011f8e:	4ab9      	ldr	r2, [pc, #740]	; (8012274 <_vfiprintf_r+0x734>)
 8011f90:	9301      	str	r3, [sp, #4]
 8011f92:	3302      	adds	r3, #2
 8011f94:	431c      	orrs	r4, r3
 8011f96:	920c      	str	r2, [sp, #48]	; 0x30
 8011f98:	e7d2      	b.n	8011f40 <_vfiprintf_r+0x400>
 8011f9a:	003b      	movs	r3, r7
 8011f9c:	2700      	movs	r7, #0
 8011f9e:	cb40      	ldmia	r3!, {r6}
 8011fa0:	9304      	str	r3, [sp, #16]
 8011fa2:	ab12      	add	r3, sp, #72	; 0x48
 8011fa4:	70df      	strb	r7, [r3, #3]
 8011fa6:	9b05      	ldr	r3, [sp, #20]
 8011fa8:	3301      	adds	r3, #1
 8011faa:	d100      	bne.n	8011fae <_vfiprintf_r+0x46e>
 8011fac:	e0ea      	b.n	8012184 <_vfiprintf_r+0x644>
 8011fae:	0039      	movs	r1, r7
 8011fb0:	0030      	movs	r0, r6
 8011fb2:	9a05      	ldr	r2, [sp, #20]
 8011fb4:	f7fe f9b4 	bl	8010320 <memchr>
 8011fb8:	900b      	str	r0, [sp, #44]	; 0x2c
 8011fba:	42b8      	cmp	r0, r7
 8011fbc:	d002      	beq.n	8011fc4 <_vfiprintf_r+0x484>
 8011fbe:	1b83      	subs	r3, r0, r6
 8011fc0:	9305      	str	r3, [sp, #20]
 8011fc2:	970b      	str	r7, [sp, #44]	; 0x2c
 8011fc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fc6:	9a05      	ldr	r2, [sp, #20]
 8011fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	da00      	bge.n	8011fd0 <_vfiprintf_r+0x490>
 8011fce:	920a      	str	r2, [sp, #40]	; 0x28
 8011fd0:	ab12      	add	r3, sp, #72	; 0x48
 8011fd2:	3303      	adds	r3, #3
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	1e5a      	subs	r2, r3, #1
 8011fd8:	4193      	sbcs	r3, r2
 8011fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fdc:	18d3      	adds	r3, r2, r3
 8011fde:	930a      	str	r3, [sp, #40]	; 0x28
 8011fe0:	0022      	movs	r2, r4
 8011fe2:	2302      	movs	r3, #2
 8011fe4:	401a      	ands	r2, r3
 8011fe6:	9210      	str	r2, [sp, #64]	; 0x40
 8011fe8:	421c      	tst	r4, r3
 8011fea:	d002      	beq.n	8011ff2 <_vfiprintf_r+0x4b2>
 8011fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fee:	3302      	adds	r3, #2
 8011ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8011ff2:	2384      	movs	r3, #132	; 0x84
 8011ff4:	0022      	movs	r2, r4
 8011ff6:	401a      	ands	r2, r3
 8011ff8:	9211      	str	r2, [sp, #68]	; 0x44
 8011ffa:	421c      	tst	r4, r3
 8011ffc:	d11e      	bne.n	801203c <_vfiprintf_r+0x4fc>
 8011ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012002:	1a9f      	subs	r7, r3, r2
 8012004:	2f00      	cmp	r7, #0
 8012006:	dd19      	ble.n	801203c <_vfiprintf_r+0x4fc>
 8012008:	0029      	movs	r1, r5
 801200a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801200c:	489a      	ldr	r0, [pc, #616]	; (8012278 <_vfiprintf_r+0x738>)
 801200e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012010:	3301      	adds	r3, #1
 8012012:	3108      	adds	r1, #8
 8012014:	6028      	str	r0, [r5, #0]
 8012016:	2f10      	cmp	r7, #16
 8012018:	dd00      	ble.n	801201c <_vfiprintf_r+0x4dc>
 801201a:	e1a7      	b.n	801236c <_vfiprintf_r+0x82c>
 801201c:	606f      	str	r7, [r5, #4]
 801201e:	18bf      	adds	r7, r7, r2
 8012020:	000d      	movs	r5, r1
 8012022:	9716      	str	r7, [sp, #88]	; 0x58
 8012024:	9315      	str	r3, [sp, #84]	; 0x54
 8012026:	2b07      	cmp	r3, #7
 8012028:	dd08      	ble.n	801203c <_vfiprintf_r+0x4fc>
 801202a:	9903      	ldr	r1, [sp, #12]
 801202c:	9806      	ldr	r0, [sp, #24]
 801202e:	aa14      	add	r2, sp, #80	; 0x50
 8012030:	f7ff fd51 	bl	8011ad6 <__sprint_r>
 8012034:	2800      	cmp	r0, #0
 8012036:	d000      	beq.n	801203a <_vfiprintf_r+0x4fa>
 8012038:	e1eb      	b.n	8012412 <_vfiprintf_r+0x8d2>
 801203a:	ad17      	add	r5, sp, #92	; 0x5c
 801203c:	a912      	add	r1, sp, #72	; 0x48
 801203e:	78c8      	ldrb	r0, [r1, #3]
 8012040:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012044:	3103      	adds	r1, #3
 8012046:	2800      	cmp	r0, #0
 8012048:	d012      	beq.n	8012070 <_vfiprintf_r+0x530>
 801204a:	6029      	str	r1, [r5, #0]
 801204c:	2101      	movs	r1, #1
 801204e:	3301      	adds	r3, #1
 8012050:	1852      	adds	r2, r2, r1
 8012052:	6069      	str	r1, [r5, #4]
 8012054:	9216      	str	r2, [sp, #88]	; 0x58
 8012056:	9315      	str	r3, [sp, #84]	; 0x54
 8012058:	3508      	adds	r5, #8
 801205a:	2b07      	cmp	r3, #7
 801205c:	dd08      	ble.n	8012070 <_vfiprintf_r+0x530>
 801205e:	9903      	ldr	r1, [sp, #12]
 8012060:	9806      	ldr	r0, [sp, #24]
 8012062:	aa14      	add	r2, sp, #80	; 0x50
 8012064:	f7ff fd37 	bl	8011ad6 <__sprint_r>
 8012068:	2800      	cmp	r0, #0
 801206a:	d000      	beq.n	801206e <_vfiprintf_r+0x52e>
 801206c:	e1d1      	b.n	8012412 <_vfiprintf_r+0x8d2>
 801206e:	ad17      	add	r5, sp, #92	; 0x5c
 8012070:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012072:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012076:	2900      	cmp	r1, #0
 8012078:	d013      	beq.n	80120a2 <_vfiprintf_r+0x562>
 801207a:	a913      	add	r1, sp, #76	; 0x4c
 801207c:	6029      	str	r1, [r5, #0]
 801207e:	2102      	movs	r1, #2
 8012080:	3301      	adds	r3, #1
 8012082:	1852      	adds	r2, r2, r1
 8012084:	6069      	str	r1, [r5, #4]
 8012086:	9216      	str	r2, [sp, #88]	; 0x58
 8012088:	9315      	str	r3, [sp, #84]	; 0x54
 801208a:	3508      	adds	r5, #8
 801208c:	2b07      	cmp	r3, #7
 801208e:	dd08      	ble.n	80120a2 <_vfiprintf_r+0x562>
 8012090:	9903      	ldr	r1, [sp, #12]
 8012092:	9806      	ldr	r0, [sp, #24]
 8012094:	aa14      	add	r2, sp, #80	; 0x50
 8012096:	f7ff fd1e 	bl	8011ad6 <__sprint_r>
 801209a:	2800      	cmp	r0, #0
 801209c:	d000      	beq.n	80120a0 <_vfiprintf_r+0x560>
 801209e:	e1b8      	b.n	8012412 <_vfiprintf_r+0x8d2>
 80120a0:	ad17      	add	r5, sp, #92	; 0x5c
 80120a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120a4:	2b80      	cmp	r3, #128	; 0x80
 80120a6:	d11e      	bne.n	80120e6 <_vfiprintf_r+0x5a6>
 80120a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120ac:	1a9f      	subs	r7, r3, r2
 80120ae:	2f00      	cmp	r7, #0
 80120b0:	dd19      	ble.n	80120e6 <_vfiprintf_r+0x5a6>
 80120b2:	0029      	movs	r1, r5
 80120b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120b6:	4871      	ldr	r0, [pc, #452]	; (801227c <_vfiprintf_r+0x73c>)
 80120b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120ba:	3301      	adds	r3, #1
 80120bc:	3108      	adds	r1, #8
 80120be:	6028      	str	r0, [r5, #0]
 80120c0:	2f10      	cmp	r7, #16
 80120c2:	dd00      	ble.n	80120c6 <_vfiprintf_r+0x586>
 80120c4:	e164      	b.n	8012390 <_vfiprintf_r+0x850>
 80120c6:	606f      	str	r7, [r5, #4]
 80120c8:	18bf      	adds	r7, r7, r2
 80120ca:	000d      	movs	r5, r1
 80120cc:	9716      	str	r7, [sp, #88]	; 0x58
 80120ce:	9315      	str	r3, [sp, #84]	; 0x54
 80120d0:	2b07      	cmp	r3, #7
 80120d2:	dd08      	ble.n	80120e6 <_vfiprintf_r+0x5a6>
 80120d4:	9903      	ldr	r1, [sp, #12]
 80120d6:	9806      	ldr	r0, [sp, #24]
 80120d8:	aa14      	add	r2, sp, #80	; 0x50
 80120da:	f7ff fcfc 	bl	8011ad6 <__sprint_r>
 80120de:	2800      	cmp	r0, #0
 80120e0:	d000      	beq.n	80120e4 <_vfiprintf_r+0x5a4>
 80120e2:	e196      	b.n	8012412 <_vfiprintf_r+0x8d2>
 80120e4:	ad17      	add	r5, sp, #92	; 0x5c
 80120e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120e8:	9a05      	ldr	r2, [sp, #20]
 80120ea:	1a9f      	subs	r7, r3, r2
 80120ec:	2f00      	cmp	r7, #0
 80120ee:	dd19      	ble.n	8012124 <_vfiprintf_r+0x5e4>
 80120f0:	0029      	movs	r1, r5
 80120f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120f4:	4861      	ldr	r0, [pc, #388]	; (801227c <_vfiprintf_r+0x73c>)
 80120f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120f8:	3301      	adds	r3, #1
 80120fa:	3108      	adds	r1, #8
 80120fc:	6028      	str	r0, [r5, #0]
 80120fe:	2f10      	cmp	r7, #16
 8012100:	dd00      	ble.n	8012104 <_vfiprintf_r+0x5c4>
 8012102:	e157      	b.n	80123b4 <_vfiprintf_r+0x874>
 8012104:	606f      	str	r7, [r5, #4]
 8012106:	18bf      	adds	r7, r7, r2
 8012108:	000d      	movs	r5, r1
 801210a:	9716      	str	r7, [sp, #88]	; 0x58
 801210c:	9315      	str	r3, [sp, #84]	; 0x54
 801210e:	2b07      	cmp	r3, #7
 8012110:	dd08      	ble.n	8012124 <_vfiprintf_r+0x5e4>
 8012112:	9903      	ldr	r1, [sp, #12]
 8012114:	9806      	ldr	r0, [sp, #24]
 8012116:	aa14      	add	r2, sp, #80	; 0x50
 8012118:	f7ff fcdd 	bl	8011ad6 <__sprint_r>
 801211c:	2800      	cmp	r0, #0
 801211e:	d000      	beq.n	8012122 <_vfiprintf_r+0x5e2>
 8012120:	e177      	b.n	8012412 <_vfiprintf_r+0x8d2>
 8012122:	ad17      	add	r5, sp, #92	; 0x5c
 8012124:	9b05      	ldr	r3, [sp, #20]
 8012126:	9a05      	ldr	r2, [sp, #20]
 8012128:	606b      	str	r3, [r5, #4]
 801212a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801212c:	602e      	str	r6, [r5, #0]
 801212e:	189b      	adds	r3, r3, r2
 8012130:	9316      	str	r3, [sp, #88]	; 0x58
 8012132:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012134:	3508      	adds	r5, #8
 8012136:	3301      	adds	r3, #1
 8012138:	9315      	str	r3, [sp, #84]	; 0x54
 801213a:	2b07      	cmp	r3, #7
 801213c:	dd08      	ble.n	8012150 <_vfiprintf_r+0x610>
 801213e:	9903      	ldr	r1, [sp, #12]
 8012140:	9806      	ldr	r0, [sp, #24]
 8012142:	aa14      	add	r2, sp, #80	; 0x50
 8012144:	f7ff fcc7 	bl	8011ad6 <__sprint_r>
 8012148:	2800      	cmp	r0, #0
 801214a:	d000      	beq.n	801214e <_vfiprintf_r+0x60e>
 801214c:	e161      	b.n	8012412 <_vfiprintf_r+0x8d2>
 801214e:	ad17      	add	r5, sp, #92	; 0x5c
 8012150:	0764      	lsls	r4, r4, #29
 8012152:	d500      	bpl.n	8012156 <_vfiprintf_r+0x616>
 8012154:	e140      	b.n	80123d8 <_vfiprintf_r+0x898>
 8012156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801215a:	4293      	cmp	r3, r2
 801215c:	da00      	bge.n	8012160 <_vfiprintf_r+0x620>
 801215e:	0013      	movs	r3, r2
 8012160:	9a08      	ldr	r2, [sp, #32]
 8012162:	18d3      	adds	r3, r2, r3
 8012164:	9308      	str	r3, [sp, #32]
 8012166:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012168:	2b00      	cmp	r3, #0
 801216a:	d007      	beq.n	801217c <_vfiprintf_r+0x63c>
 801216c:	9903      	ldr	r1, [sp, #12]
 801216e:	9806      	ldr	r0, [sp, #24]
 8012170:	aa14      	add	r2, sp, #80	; 0x50
 8012172:	f7ff fcb0 	bl	8011ad6 <__sprint_r>
 8012176:	2800      	cmp	r0, #0
 8012178:	d000      	beq.n	801217c <_vfiprintf_r+0x63c>
 801217a:	e14a      	b.n	8012412 <_vfiprintf_r+0x8d2>
 801217c:	2300      	movs	r3, #0
 801217e:	ad17      	add	r5, sp, #92	; 0x5c
 8012180:	9315      	str	r3, [sp, #84]	; 0x54
 8012182:	e6b7      	b.n	8011ef4 <_vfiprintf_r+0x3b4>
 8012184:	0030      	movs	r0, r6
 8012186:	f7ed ffbd 	bl	8000104 <strlen>
 801218a:	9005      	str	r0, [sp, #20]
 801218c:	e719      	b.n	8011fc2 <_vfiprintf_r+0x482>
 801218e:	2310      	movs	r3, #16
 8012190:	431c      	orrs	r4, r3
 8012192:	2320      	movs	r3, #32
 8012194:	0020      	movs	r0, r4
 8012196:	4018      	ands	r0, r3
 8012198:	421c      	tst	r4, r3
 801219a:	d009      	beq.n	80121b0 <_vfiprintf_r+0x670>
 801219c:	3b19      	subs	r3, #25
 801219e:	3707      	adds	r7, #7
 80121a0:	439f      	bics	r7, r3
 80121a2:	0039      	movs	r1, r7
 80121a4:	c90c      	ldmia	r1!, {r2, r3}
 80121a6:	9200      	str	r2, [sp, #0]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	9104      	str	r1, [sp, #16]
 80121ac:	2301      	movs	r3, #1
 80121ae:	e6c7      	b.n	8011f40 <_vfiprintf_r+0x400>
 80121b0:	003b      	movs	r3, r7
 80121b2:	cb04      	ldmia	r3!, {r2}
 80121b4:	0021      	movs	r1, r4
 80121b6:	9304      	str	r3, [sp, #16]
 80121b8:	2310      	movs	r3, #16
 80121ba:	4019      	ands	r1, r3
 80121bc:	421c      	tst	r4, r3
 80121be:	d003      	beq.n	80121c8 <_vfiprintf_r+0x688>
 80121c0:	9200      	str	r2, [sp, #0]
 80121c2:	9001      	str	r0, [sp, #4]
 80121c4:	3b0f      	subs	r3, #15
 80121c6:	e6bb      	b.n	8011f40 <_vfiprintf_r+0x400>
 80121c8:	2340      	movs	r3, #64	; 0x40
 80121ca:	0020      	movs	r0, r4
 80121cc:	4018      	ands	r0, r3
 80121ce:	421c      	tst	r4, r3
 80121d0:	d003      	beq.n	80121da <_vfiprintf_r+0x69a>
 80121d2:	b293      	uxth	r3, r2
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	9101      	str	r1, [sp, #4]
 80121d8:	e7e8      	b.n	80121ac <_vfiprintf_r+0x66c>
 80121da:	2380      	movs	r3, #128	; 0x80
 80121dc:	0021      	movs	r1, r4
 80121de:	009b      	lsls	r3, r3, #2
 80121e0:	4019      	ands	r1, r3
 80121e2:	421c      	tst	r4, r3
 80121e4:	d003      	beq.n	80121ee <_vfiprintf_r+0x6ae>
 80121e6:	b2d3      	uxtb	r3, r2
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	9001      	str	r0, [sp, #4]
 80121ec:	e7de      	b.n	80121ac <_vfiprintf_r+0x66c>
 80121ee:	9200      	str	r2, [sp, #0]
 80121f0:	e7f1      	b.n	80121d6 <_vfiprintf_r+0x696>
 80121f2:	4a23      	ldr	r2, [pc, #140]	; (8012280 <_vfiprintf_r+0x740>)
 80121f4:	0020      	movs	r0, r4
 80121f6:	920c      	str	r2, [sp, #48]	; 0x30
 80121f8:	2220      	movs	r2, #32
 80121fa:	4010      	ands	r0, r2
 80121fc:	4214      	tst	r4, r2
 80121fe:	d019      	beq.n	8012234 <_vfiprintf_r+0x6f4>
 8012200:	3a19      	subs	r2, #25
 8012202:	3707      	adds	r7, #7
 8012204:	4397      	bics	r7, r2
 8012206:	0038      	movs	r0, r7
 8012208:	c806      	ldmia	r0!, {r1, r2}
 801220a:	9100      	str	r1, [sp, #0]
 801220c:	9201      	str	r2, [sp, #4]
 801220e:	9004      	str	r0, [sp, #16]
 8012210:	07e2      	lsls	r2, r4, #31
 8012212:	d509      	bpl.n	8012228 <_vfiprintf_r+0x6e8>
 8012214:	9a00      	ldr	r2, [sp, #0]
 8012216:	9901      	ldr	r1, [sp, #4]
 8012218:	430a      	orrs	r2, r1
 801221a:	d005      	beq.n	8012228 <_vfiprintf_r+0x6e8>
 801221c:	aa13      	add	r2, sp, #76	; 0x4c
 801221e:	2130      	movs	r1, #48	; 0x30
 8012220:	7053      	strb	r3, [r2, #1]
 8012222:	2302      	movs	r3, #2
 8012224:	7011      	strb	r1, [r2, #0]
 8012226:	431c      	orrs	r4, r3
 8012228:	4b10      	ldr	r3, [pc, #64]	; (801226c <_vfiprintf_r+0x72c>)
 801222a:	401c      	ands	r4, r3
 801222c:	2302      	movs	r3, #2
 801222e:	e687      	b.n	8011f40 <_vfiprintf_r+0x400>
 8012230:	4a10      	ldr	r2, [pc, #64]	; (8012274 <_vfiprintf_r+0x734>)
 8012232:	e7df      	b.n	80121f4 <_vfiprintf_r+0x6b4>
 8012234:	0039      	movs	r1, r7
 8012236:	c904      	ldmia	r1!, {r2}
 8012238:	0026      	movs	r6, r4
 801223a:	9104      	str	r1, [sp, #16]
 801223c:	2110      	movs	r1, #16
 801223e:	400e      	ands	r6, r1
 8012240:	420c      	tst	r4, r1
 8012242:	d002      	beq.n	801224a <_vfiprintf_r+0x70a>
 8012244:	9200      	str	r2, [sp, #0]
 8012246:	9001      	str	r0, [sp, #4]
 8012248:	e7e2      	b.n	8012210 <_vfiprintf_r+0x6d0>
 801224a:	2140      	movs	r1, #64	; 0x40
 801224c:	0020      	movs	r0, r4
 801224e:	4008      	ands	r0, r1
 8012250:	420c      	tst	r4, r1
 8012252:	d003      	beq.n	801225c <_vfiprintf_r+0x71c>
 8012254:	b292      	uxth	r2, r2
 8012256:	9200      	str	r2, [sp, #0]
 8012258:	9601      	str	r6, [sp, #4]
 801225a:	e7d9      	b.n	8012210 <_vfiprintf_r+0x6d0>
 801225c:	2180      	movs	r1, #128	; 0x80
 801225e:	0026      	movs	r6, r4
 8012260:	0089      	lsls	r1, r1, #2
 8012262:	400e      	ands	r6, r1
 8012264:	420c      	tst	r4, r1
 8012266:	d0f6      	beq.n	8012256 <_vfiprintf_r+0x716>
 8012268:	b2d2      	uxtb	r2, r2
 801226a:	e7eb      	b.n	8012244 <_vfiprintf_r+0x704>
 801226c:	fffffbff 	.word	0xfffffbff
 8012270:	00007830 	.word	0x00007830
 8012274:	08014d64 	.word	0x08014d64
 8012278:	08014e71 	.word	0x08014e71
 801227c:	08014e81 	.word	0x08014e81
 8012280:	08014d75 	.word	0x08014d75
 8012284:	9b01      	ldr	r3, [sp, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d109      	bne.n	801229e <_vfiprintf_r+0x75e>
 801228a:	9b00      	ldr	r3, [sp, #0]
 801228c:	2b09      	cmp	r3, #9
 801228e:	d806      	bhi.n	801229e <_vfiprintf_r+0x75e>
 8012290:	26b7      	movs	r6, #183	; 0xb7
 8012292:	ab12      	add	r3, sp, #72	; 0x48
 8012294:	18f6      	adds	r6, r6, r3
 8012296:	9b00      	ldr	r3, [sp, #0]
 8012298:	3330      	adds	r3, #48	; 0x30
 801229a:	7033      	strb	r3, [r6, #0]
 801229c:	e115      	b.n	80124ca <_vfiprintf_r+0x98a>
 801229e:	2380      	movs	r3, #128	; 0x80
 80122a0:	2400      	movs	r4, #0
 80122a2:	00db      	lsls	r3, r3, #3
 80122a4:	403b      	ands	r3, r7
 80122a6:	ae40      	add	r6, sp, #256	; 0x100
 80122a8:	930a      	str	r3, [sp, #40]	; 0x28
 80122aa:	220a      	movs	r2, #10
 80122ac:	9800      	ldr	r0, [sp, #0]
 80122ae:	9901      	ldr	r1, [sp, #4]
 80122b0:	2300      	movs	r3, #0
 80122b2:	f7ee f8f7 	bl	80004a4 <__aeabi_uldivmod>
 80122b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122b8:	3e01      	subs	r6, #1
 80122ba:	3230      	adds	r2, #48	; 0x30
 80122bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80122be:	9110      	str	r1, [sp, #64]	; 0x40
 80122c0:	7032      	strb	r2, [r6, #0]
 80122c2:	3401      	adds	r4, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d01a      	beq.n	80122fe <_vfiprintf_r+0x7be>
 80122c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	42a3      	cmp	r3, r4
 80122ce:	d116      	bne.n	80122fe <_vfiprintf_r+0x7be>
 80122d0:	2cff      	cmp	r4, #255	; 0xff
 80122d2:	d014      	beq.n	80122fe <_vfiprintf_r+0x7be>
 80122d4:	9b01      	ldr	r3, [sp, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <_vfiprintf_r+0x7a0>
 80122da:	9b00      	ldr	r3, [sp, #0]
 80122dc:	2b09      	cmp	r3, #9
 80122de:	d90e      	bls.n	80122fe <_vfiprintf_r+0x7be>
 80122e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80122e4:	1af6      	subs	r6, r6, r3
 80122e6:	001a      	movs	r2, r3
 80122e8:	0030      	movs	r0, r6
 80122ea:	f7fa f832 	bl	800c352 <strncpy>
 80122ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122f0:	2400      	movs	r4, #0
 80122f2:	785b      	ldrb	r3, [r3, #1]
 80122f4:	1e5a      	subs	r2, r3, #1
 80122f6:	4193      	sbcs	r3, r2
 80122f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122fa:	18d3      	adds	r3, r2, r3
 80122fc:	930d      	str	r3, [sp, #52]	; 0x34
 80122fe:	9b01      	ldr	r3, [sp, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d103      	bne.n	801230c <_vfiprintf_r+0x7cc>
 8012304:	9b00      	ldr	r3, [sp, #0]
 8012306:	2b09      	cmp	r3, #9
 8012308:	d800      	bhi.n	801230c <_vfiprintf_r+0x7cc>
 801230a:	e0de      	b.n	80124ca <_vfiprintf_r+0x98a>
 801230c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012312:	9301      	str	r3, [sp, #4]
 8012314:	e7c9      	b.n	80122aa <_vfiprintf_r+0x76a>
 8012316:	200f      	movs	r0, #15
 8012318:	9b00      	ldr	r3, [sp, #0]
 801231a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801231c:	4003      	ands	r3, r0
 801231e:	5cd3      	ldrb	r3, [r2, r3]
 8012320:	3e01      	subs	r6, #1
 8012322:	7033      	strb	r3, [r6, #0]
 8012324:	9b01      	ldr	r3, [sp, #4]
 8012326:	0719      	lsls	r1, r3, #28
 8012328:	9b00      	ldr	r3, [sp, #0]
 801232a:	091a      	lsrs	r2, r3, #4
 801232c:	9b01      	ldr	r3, [sp, #4]
 801232e:	4311      	orrs	r1, r2
 8012330:	091b      	lsrs	r3, r3, #4
 8012332:	9301      	str	r3, [sp, #4]
 8012334:	000b      	movs	r3, r1
 8012336:	9a01      	ldr	r2, [sp, #4]
 8012338:	9100      	str	r1, [sp, #0]
 801233a:	4313      	orrs	r3, r2
 801233c:	d1ec      	bne.n	8012318 <_vfiprintf_r+0x7d8>
 801233e:	e0c4      	b.n	80124ca <_vfiprintf_r+0x98a>
 8012340:	ae40      	add	r6, sp, #256	; 0x100
 8012342:	2b00      	cmp	r3, #0
 8012344:	d000      	beq.n	8012348 <_vfiprintf_r+0x808>
 8012346:	e0c0      	b.n	80124ca <_vfiprintf_r+0x98a>
 8012348:	07e4      	lsls	r4, r4, #31
 801234a:	d400      	bmi.n	801234e <_vfiprintf_r+0x80e>
 801234c:	e0bd      	b.n	80124ca <_vfiprintf_r+0x98a>
 801234e:	26b7      	movs	r6, #183	; 0xb7
 8012350:	ab12      	add	r3, sp, #72	; 0x48
 8012352:	18f6      	adds	r6, r6, r3
 8012354:	2330      	movs	r3, #48	; 0x30
 8012356:	e7a0      	b.n	801229a <_vfiprintf_r+0x75a>
 8012358:	2b00      	cmp	r3, #0
 801235a:	d100      	bne.n	801235e <_vfiprintf_r+0x81e>
 801235c:	e07e      	b.n	801245c <_vfiprintf_r+0x91c>
 801235e:	ae27      	add	r6, sp, #156	; 0x9c
 8012360:	7033      	strb	r3, [r6, #0]
 8012362:	2300      	movs	r3, #0
 8012364:	aa12      	add	r2, sp, #72	; 0x48
 8012366:	70d3      	strb	r3, [r2, #3]
 8012368:	9704      	str	r7, [sp, #16]
 801236a:	e576      	b.n	8011e5a <_vfiprintf_r+0x31a>
 801236c:	2010      	movs	r0, #16
 801236e:	1812      	adds	r2, r2, r0
 8012370:	6068      	str	r0, [r5, #4]
 8012372:	9216      	str	r2, [sp, #88]	; 0x58
 8012374:	9315      	str	r3, [sp, #84]	; 0x54
 8012376:	2b07      	cmp	r3, #7
 8012378:	dd07      	ble.n	801238a <_vfiprintf_r+0x84a>
 801237a:	9903      	ldr	r1, [sp, #12]
 801237c:	9806      	ldr	r0, [sp, #24]
 801237e:	aa14      	add	r2, sp, #80	; 0x50
 8012380:	f7ff fba9 	bl	8011ad6 <__sprint_r>
 8012384:	2800      	cmp	r0, #0
 8012386:	d144      	bne.n	8012412 <_vfiprintf_r+0x8d2>
 8012388:	a917      	add	r1, sp, #92	; 0x5c
 801238a:	000d      	movs	r5, r1
 801238c:	3f10      	subs	r7, #16
 801238e:	e63b      	b.n	8012008 <_vfiprintf_r+0x4c8>
 8012390:	2010      	movs	r0, #16
 8012392:	1812      	adds	r2, r2, r0
 8012394:	6068      	str	r0, [r5, #4]
 8012396:	9216      	str	r2, [sp, #88]	; 0x58
 8012398:	9315      	str	r3, [sp, #84]	; 0x54
 801239a:	2b07      	cmp	r3, #7
 801239c:	dd07      	ble.n	80123ae <_vfiprintf_r+0x86e>
 801239e:	9903      	ldr	r1, [sp, #12]
 80123a0:	9806      	ldr	r0, [sp, #24]
 80123a2:	aa14      	add	r2, sp, #80	; 0x50
 80123a4:	f7ff fb97 	bl	8011ad6 <__sprint_r>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d132      	bne.n	8012412 <_vfiprintf_r+0x8d2>
 80123ac:	a917      	add	r1, sp, #92	; 0x5c
 80123ae:	000d      	movs	r5, r1
 80123b0:	3f10      	subs	r7, #16
 80123b2:	e67e      	b.n	80120b2 <_vfiprintf_r+0x572>
 80123b4:	2010      	movs	r0, #16
 80123b6:	1812      	adds	r2, r2, r0
 80123b8:	6068      	str	r0, [r5, #4]
 80123ba:	9216      	str	r2, [sp, #88]	; 0x58
 80123bc:	9315      	str	r3, [sp, #84]	; 0x54
 80123be:	2b07      	cmp	r3, #7
 80123c0:	dd07      	ble.n	80123d2 <_vfiprintf_r+0x892>
 80123c2:	9903      	ldr	r1, [sp, #12]
 80123c4:	9806      	ldr	r0, [sp, #24]
 80123c6:	aa14      	add	r2, sp, #80	; 0x50
 80123c8:	f7ff fb85 	bl	8011ad6 <__sprint_r>
 80123cc:	2800      	cmp	r0, #0
 80123ce:	d120      	bne.n	8012412 <_vfiprintf_r+0x8d2>
 80123d0:	a917      	add	r1, sp, #92	; 0x5c
 80123d2:	000d      	movs	r5, r1
 80123d4:	3f10      	subs	r7, #16
 80123d6:	e68b      	b.n	80120f0 <_vfiprintf_r+0x5b0>
 80123d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123dc:	2610      	movs	r6, #16
 80123de:	1a9c      	subs	r4, r3, r2
 80123e0:	2c00      	cmp	r4, #0
 80123e2:	dc00      	bgt.n	80123e6 <_vfiprintf_r+0x8a6>
 80123e4:	e6b7      	b.n	8012156 <_vfiprintf_r+0x616>
 80123e6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80123e8:	4a3b      	ldr	r2, [pc, #236]	; (80124d8 <_vfiprintf_r+0x998>)
 80123ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123ec:	3101      	adds	r1, #1
 80123ee:	602a      	str	r2, [r5, #0]
 80123f0:	2c10      	cmp	r4, #16
 80123f2:	dc22      	bgt.n	801243a <_vfiprintf_r+0x8fa>
 80123f4:	606c      	str	r4, [r5, #4]
 80123f6:	18e4      	adds	r4, r4, r3
 80123f8:	9416      	str	r4, [sp, #88]	; 0x58
 80123fa:	9115      	str	r1, [sp, #84]	; 0x54
 80123fc:	2907      	cmp	r1, #7
 80123fe:	dc00      	bgt.n	8012402 <_vfiprintf_r+0x8c2>
 8012400:	e6a9      	b.n	8012156 <_vfiprintf_r+0x616>
 8012402:	9903      	ldr	r1, [sp, #12]
 8012404:	9806      	ldr	r0, [sp, #24]
 8012406:	aa14      	add	r2, sp, #80	; 0x50
 8012408:	f7ff fb65 	bl	8011ad6 <__sprint_r>
 801240c:	2800      	cmp	r0, #0
 801240e:	d100      	bne.n	8012412 <_vfiprintf_r+0x8d2>
 8012410:	e6a1      	b.n	8012156 <_vfiprintf_r+0x616>
 8012412:	9b03      	ldr	r3, [sp, #12]
 8012414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012416:	07db      	lsls	r3, r3, #31
 8012418:	d407      	bmi.n	801242a <_vfiprintf_r+0x8ea>
 801241a:	9b03      	ldr	r3, [sp, #12]
 801241c:	899b      	ldrh	r3, [r3, #12]
 801241e:	059b      	lsls	r3, r3, #22
 8012420:	d403      	bmi.n	801242a <_vfiprintf_r+0x8ea>
 8012422:	9b03      	ldr	r3, [sp, #12]
 8012424:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012426:	f7fa f88e 	bl	800c546 <__retarget_lock_release_recursive>
 801242a:	9b03      	ldr	r3, [sp, #12]
 801242c:	899b      	ldrh	r3, [r3, #12]
 801242e:	065b      	lsls	r3, r3, #25
 8012430:	d401      	bmi.n	8012436 <_vfiprintf_r+0x8f6>
 8012432:	f7ff fbc3 	bl	8011bbc <_vfiprintf_r+0x7c>
 8012436:	f7ff fbbe 	bl	8011bb6 <_vfiprintf_r+0x76>
 801243a:	3310      	adds	r3, #16
 801243c:	606e      	str	r6, [r5, #4]
 801243e:	9316      	str	r3, [sp, #88]	; 0x58
 8012440:	9115      	str	r1, [sp, #84]	; 0x54
 8012442:	3508      	adds	r5, #8
 8012444:	2907      	cmp	r1, #7
 8012446:	dd07      	ble.n	8012458 <_vfiprintf_r+0x918>
 8012448:	9903      	ldr	r1, [sp, #12]
 801244a:	9806      	ldr	r0, [sp, #24]
 801244c:	aa14      	add	r2, sp, #80	; 0x50
 801244e:	f7ff fb42 	bl	8011ad6 <__sprint_r>
 8012452:	2800      	cmp	r0, #0
 8012454:	d1dd      	bne.n	8012412 <_vfiprintf_r+0x8d2>
 8012456:	ad17      	add	r5, sp, #92	; 0x5c
 8012458:	3c10      	subs	r4, #16
 801245a:	e7c4      	b.n	80123e6 <_vfiprintf_r+0x8a6>
 801245c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801245e:	2b00      	cmp	r3, #0
 8012460:	d102      	bne.n	8012468 <_vfiprintf_r+0x928>
 8012462:	2300      	movs	r3, #0
 8012464:	9315      	str	r3, [sp, #84]	; 0x54
 8012466:	e7d4      	b.n	8012412 <_vfiprintf_r+0x8d2>
 8012468:	9903      	ldr	r1, [sp, #12]
 801246a:	9806      	ldr	r0, [sp, #24]
 801246c:	aa14      	add	r2, sp, #80	; 0x50
 801246e:	f7ff fb32 	bl	8011ad6 <__sprint_r>
 8012472:	2800      	cmp	r0, #0
 8012474:	d0f5      	beq.n	8012462 <_vfiprintf_r+0x922>
 8012476:	e7cc      	b.n	8012412 <_vfiprintf_r+0x8d2>
 8012478:	0027      	movs	r7, r4
 801247a:	2a00      	cmp	r2, #0
 801247c:	d100      	bne.n	8012480 <_vfiprintf_r+0x940>
 801247e:	e51b      	b.n	8011eb8 <_vfiprintf_r+0x378>
 8012480:	2b01      	cmp	r3, #1
 8012482:	d100      	bne.n	8012486 <_vfiprintf_r+0x946>
 8012484:	e6fe      	b.n	8012284 <_vfiprintf_r+0x744>
 8012486:	ae40      	add	r6, sp, #256	; 0x100
 8012488:	2b02      	cmp	r3, #2
 801248a:	d100      	bne.n	801248e <_vfiprintf_r+0x94e>
 801248c:	e743      	b.n	8012316 <_vfiprintf_r+0x7d6>
 801248e:	2307      	movs	r3, #7
 8012490:	469c      	mov	ip, r3
 8012492:	4663      	mov	r3, ip
 8012494:	9900      	ldr	r1, [sp, #0]
 8012496:	0032      	movs	r2, r6
 8012498:	400b      	ands	r3, r1
 801249a:	9901      	ldr	r1, [sp, #4]
 801249c:	3e01      	subs	r6, #1
 801249e:	074c      	lsls	r4, r1, #29
 80124a0:	9900      	ldr	r1, [sp, #0]
 80124a2:	3330      	adds	r3, #48	; 0x30
 80124a4:	08c8      	lsrs	r0, r1, #3
 80124a6:	9901      	ldr	r1, [sp, #4]
 80124a8:	4304      	orrs	r4, r0
 80124aa:	08c9      	lsrs	r1, r1, #3
 80124ac:	9101      	str	r1, [sp, #4]
 80124ae:	0021      	movs	r1, r4
 80124b0:	9801      	ldr	r0, [sp, #4]
 80124b2:	7033      	strb	r3, [r6, #0]
 80124b4:	9400      	str	r4, [sp, #0]
 80124b6:	4301      	orrs	r1, r0
 80124b8:	d1eb      	bne.n	8012492 <_vfiprintf_r+0x952>
 80124ba:	07f9      	lsls	r1, r7, #31
 80124bc:	d505      	bpl.n	80124ca <_vfiprintf_r+0x98a>
 80124be:	2b30      	cmp	r3, #48	; 0x30
 80124c0:	d003      	beq.n	80124ca <_vfiprintf_r+0x98a>
 80124c2:	2330      	movs	r3, #48	; 0x30
 80124c4:	3e01      	subs	r6, #1
 80124c6:	7033      	strb	r3, [r6, #0]
 80124c8:	1e96      	subs	r6, r2, #2
 80124ca:	9b05      	ldr	r3, [sp, #20]
 80124cc:	003c      	movs	r4, r7
 80124ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80124d0:	ab40      	add	r3, sp, #256	; 0x100
 80124d2:	1b9b      	subs	r3, r3, r6
 80124d4:	9305      	str	r3, [sp, #20]
 80124d6:	e575      	b.n	8011fc4 <_vfiprintf_r+0x484>
 80124d8:	08014e71 	.word	0x08014e71

080124dc <__sbprintf>:
 80124dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124de:	0015      	movs	r5, r2
 80124e0:	2202      	movs	r2, #2
 80124e2:	4c1e      	ldr	r4, [pc, #120]	; (801255c <__sbprintf+0x80>)
 80124e4:	001f      	movs	r7, r3
 80124e6:	898b      	ldrh	r3, [r1, #12]
 80124e8:	44a5      	add	sp, r4
 80124ea:	4393      	bics	r3, r2
 80124ec:	466a      	mov	r2, sp
 80124ee:	8193      	strh	r3, [r2, #12]
 80124f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80124f2:	0006      	movs	r6, r0
 80124f4:	9319      	str	r3, [sp, #100]	; 0x64
 80124f6:	89cb      	ldrh	r3, [r1, #14]
 80124f8:	a816      	add	r0, sp, #88	; 0x58
 80124fa:	81d3      	strh	r3, [r2, #14]
 80124fc:	69cb      	ldr	r3, [r1, #28]
 80124fe:	000c      	movs	r4, r1
 8012500:	9307      	str	r3, [sp, #28]
 8012502:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8012504:	9309      	str	r3, [sp, #36]	; 0x24
 8012506:	ab1a      	add	r3, sp, #104	; 0x68
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	9304      	str	r3, [sp, #16]
 801250c:	2380      	movs	r3, #128	; 0x80
 801250e:	00db      	lsls	r3, r3, #3
 8012510:	9302      	str	r3, [sp, #8]
 8012512:	9305      	str	r3, [sp, #20]
 8012514:	2300      	movs	r3, #0
 8012516:	9306      	str	r3, [sp, #24]
 8012518:	f7fa f812 	bl	800c540 <__retarget_lock_init_recursive>
 801251c:	002a      	movs	r2, r5
 801251e:	003b      	movs	r3, r7
 8012520:	4669      	mov	r1, sp
 8012522:	0030      	movs	r0, r6
 8012524:	f7ff fb0c 	bl	8011b40 <_vfiprintf_r>
 8012528:	1e05      	subs	r5, r0, #0
 801252a:	db07      	blt.n	801253c <__sbprintf+0x60>
 801252c:	4669      	mov	r1, sp
 801252e:	0030      	movs	r0, r6
 8012530:	f7fd fe7c 	bl	801022c <_fflush_r>
 8012534:	2800      	cmp	r0, #0
 8012536:	d001      	beq.n	801253c <__sbprintf+0x60>
 8012538:	2501      	movs	r5, #1
 801253a:	426d      	negs	r5, r5
 801253c:	466b      	mov	r3, sp
 801253e:	899a      	ldrh	r2, [r3, #12]
 8012540:	2340      	movs	r3, #64	; 0x40
 8012542:	421a      	tst	r2, r3
 8012544:	d002      	beq.n	801254c <__sbprintf+0x70>
 8012546:	89a2      	ldrh	r2, [r4, #12]
 8012548:	4313      	orrs	r3, r2
 801254a:	81a3      	strh	r3, [r4, #12]
 801254c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801254e:	f7f9 fff8 	bl	800c542 <__retarget_lock_close_recursive>
 8012552:	0028      	movs	r0, r5
 8012554:	4b02      	ldr	r3, [pc, #8]	; (8012560 <__sbprintf+0x84>)
 8012556:	449d      	add	sp, r3
 8012558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801255a:	46c0      	nop			; (mov r8, r8)
 801255c:	fffffb94 	.word	0xfffffb94
 8012560:	0000046c 	.word	0x0000046c

08012564 <__sfvwrite_r>:
 8012564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012566:	6893      	ldr	r3, [r2, #8]
 8012568:	b087      	sub	sp, #28
 801256a:	000c      	movs	r4, r1
 801256c:	9002      	str	r0, [sp, #8]
 801256e:	9204      	str	r2, [sp, #16]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d102      	bne.n	801257a <__sfvwrite_r+0x16>
 8012574:	2000      	movs	r0, #0
 8012576:	b007      	add	sp, #28
 8012578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257a:	898b      	ldrh	r3, [r1, #12]
 801257c:	071b      	lsls	r3, r3, #28
 801257e:	d557      	bpl.n	8012630 <__sfvwrite_r+0xcc>
 8012580:	690b      	ldr	r3, [r1, #16]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d054      	beq.n	8012630 <__sfvwrite_r+0xcc>
 8012586:	9b04      	ldr	r3, [sp, #16]
 8012588:	2202      	movs	r2, #2
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	9301      	str	r3, [sp, #4]
 801258e:	89a3      	ldrh	r3, [r4, #12]
 8012590:	001f      	movs	r7, r3
 8012592:	4017      	ands	r7, r2
 8012594:	4213      	tst	r3, r2
 8012596:	d171      	bne.n	801267c <__sfvwrite_r+0x118>
 8012598:	2201      	movs	r2, #1
 801259a:	2101      	movs	r1, #1
 801259c:	401a      	ands	r2, r3
 801259e:	420b      	tst	r3, r1
 80125a0:	d100      	bne.n	80125a4 <__sfvwrite_r+0x40>
 80125a2:	e0a5      	b.n	80126f0 <__sfvwrite_r+0x18c>
 80125a4:	0038      	movs	r0, r7
 80125a6:	003e      	movs	r6, r7
 80125a8:	9703      	str	r7, [sp, #12]
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d100      	bne.n	80125b2 <__sfvwrite_r+0x4e>
 80125b0:	e10b      	b.n	80127ca <__sfvwrite_r+0x266>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d10a      	bne.n	80125cc <__sfvwrite_r+0x68>
 80125b6:	001a      	movs	r2, r3
 80125b8:	210a      	movs	r1, #10
 80125ba:	0030      	movs	r0, r6
 80125bc:	f7fd feb0 	bl	8010320 <memchr>
 80125c0:	9b03      	ldr	r3, [sp, #12]
 80125c2:	1c5f      	adds	r7, r3, #1
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d001      	beq.n	80125cc <__sfvwrite_r+0x68>
 80125c8:	3001      	adds	r0, #1
 80125ca:	1b87      	subs	r7, r0, r6
 80125cc:	9b03      	ldr	r3, [sp, #12]
 80125ce:	9705      	str	r7, [sp, #20]
 80125d0:	429f      	cmp	r7, r3
 80125d2:	d900      	bls.n	80125d6 <__sfvwrite_r+0x72>
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	6820      	ldr	r0, [r4, #0]
 80125d8:	6922      	ldr	r2, [r4, #16]
 80125da:	68a5      	ldr	r5, [r4, #8]
 80125dc:	6963      	ldr	r3, [r4, #20]
 80125de:	4290      	cmp	r0, r2
 80125e0:	d800      	bhi.n	80125e4 <__sfvwrite_r+0x80>
 80125e2:	e0fb      	b.n	80127dc <__sfvwrite_r+0x278>
 80125e4:	9a05      	ldr	r2, [sp, #20]
 80125e6:	18ed      	adds	r5, r5, r3
 80125e8:	42aa      	cmp	r2, r5
 80125ea:	dc00      	bgt.n	80125ee <__sfvwrite_r+0x8a>
 80125ec:	e0f6      	b.n	80127dc <__sfvwrite_r+0x278>
 80125ee:	0031      	movs	r1, r6
 80125f0:	002a      	movs	r2, r5
 80125f2:	f000 fa1e 	bl	8012a32 <memmove>
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	0021      	movs	r1, r4
 80125fa:	195b      	adds	r3, r3, r5
 80125fc:	9802      	ldr	r0, [sp, #8]
 80125fe:	6023      	str	r3, [r4, #0]
 8012600:	f7fd fe14 	bl	801022c <_fflush_r>
 8012604:	2800      	cmp	r0, #0
 8012606:	d16e      	bne.n	80126e6 <__sfvwrite_r+0x182>
 8012608:	2001      	movs	r0, #1
 801260a:	1b7f      	subs	r7, r7, r5
 801260c:	d105      	bne.n	801261a <__sfvwrite_r+0xb6>
 801260e:	0021      	movs	r1, r4
 8012610:	9802      	ldr	r0, [sp, #8]
 8012612:	f7fd fe0b 	bl	801022c <_fflush_r>
 8012616:	2800      	cmp	r0, #0
 8012618:	d165      	bne.n	80126e6 <__sfvwrite_r+0x182>
 801261a:	9b03      	ldr	r3, [sp, #12]
 801261c:	9a04      	ldr	r2, [sp, #16]
 801261e:	1b5b      	subs	r3, r3, r5
 8012620:	9303      	str	r3, [sp, #12]
 8012622:	9b04      	ldr	r3, [sp, #16]
 8012624:	1976      	adds	r6, r6, r5
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	1b5b      	subs	r3, r3, r5
 801262a:	6093      	str	r3, [r2, #8]
 801262c:	d1bd      	bne.n	80125aa <__sfvwrite_r+0x46>
 801262e:	e7a1      	b.n	8012574 <__sfvwrite_r+0x10>
 8012630:	0021      	movs	r1, r4
 8012632:	9802      	ldr	r0, [sp, #8]
 8012634:	f000 f932 	bl	801289c <__swsetup_r>
 8012638:	2800      	cmp	r0, #0
 801263a:	d0a4      	beq.n	8012586 <__sfvwrite_r+0x22>
 801263c:	2001      	movs	r0, #1
 801263e:	4240      	negs	r0, r0
 8012640:	e799      	b.n	8012576 <__sfvwrite_r+0x12>
 8012642:	9b01      	ldr	r3, [sp, #4]
 8012644:	681e      	ldr	r6, [r3, #0]
 8012646:	685d      	ldr	r5, [r3, #4]
 8012648:	3308      	adds	r3, #8
 801264a:	9301      	str	r3, [sp, #4]
 801264c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801264e:	69e1      	ldr	r1, [r4, #28]
 8012650:	2d00      	cmp	r5, #0
 8012652:	d0f6      	beq.n	8012642 <__sfvwrite_r+0xde>
 8012654:	4a6e      	ldr	r2, [pc, #440]	; (8012810 <__sfvwrite_r+0x2ac>)
 8012656:	002b      	movs	r3, r5
 8012658:	4295      	cmp	r5, r2
 801265a:	d900      	bls.n	801265e <__sfvwrite_r+0xfa>
 801265c:	0013      	movs	r3, r2
 801265e:	0032      	movs	r2, r6
 8012660:	9802      	ldr	r0, [sp, #8]
 8012662:	47b8      	blx	r7
 8012664:	2800      	cmp	r0, #0
 8012666:	dd3e      	ble.n	80126e6 <__sfvwrite_r+0x182>
 8012668:	9b04      	ldr	r3, [sp, #16]
 801266a:	9a04      	ldr	r2, [sp, #16]
 801266c:	689b      	ldr	r3, [r3, #8]
 801266e:	1836      	adds	r6, r6, r0
 8012670:	1a1b      	subs	r3, r3, r0
 8012672:	1a2d      	subs	r5, r5, r0
 8012674:	6093      	str	r3, [r2, #8]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d1e8      	bne.n	801264c <__sfvwrite_r+0xe8>
 801267a:	e77b      	b.n	8012574 <__sfvwrite_r+0x10>
 801267c:	2600      	movs	r6, #0
 801267e:	0035      	movs	r5, r6
 8012680:	e7e4      	b.n	801264c <__sfvwrite_r+0xe8>
 8012682:	9b01      	ldr	r3, [sp, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	9303      	str	r3, [sp, #12]
 8012688:	9b01      	ldr	r3, [sp, #4]
 801268a:	685d      	ldr	r5, [r3, #4]
 801268c:	3308      	adds	r3, #8
 801268e:	9301      	str	r3, [sp, #4]
 8012690:	220c      	movs	r2, #12
 8012692:	5ea3      	ldrsh	r3, [r4, r2]
 8012694:	6820      	ldr	r0, [r4, #0]
 8012696:	68a6      	ldr	r6, [r4, #8]
 8012698:	2d00      	cmp	r5, #0
 801269a:	d0f2      	beq.n	8012682 <__sfvwrite_r+0x11e>
 801269c:	2180      	movs	r1, #128	; 0x80
 801269e:	0089      	lsls	r1, r1, #2
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	420b      	tst	r3, r1
 80126a4:	d062      	beq.n	801276c <__sfvwrite_r+0x208>
 80126a6:	42ae      	cmp	r6, r5
 80126a8:	d837      	bhi.n	801271a <__sfvwrite_r+0x1b6>
 80126aa:	2390      	movs	r3, #144	; 0x90
 80126ac:	00db      	lsls	r3, r3, #3
 80126ae:	421a      	tst	r2, r3
 80126b0:	d033      	beq.n	801271a <__sfvwrite_r+0x1b6>
 80126b2:	6921      	ldr	r1, [r4, #16]
 80126b4:	1a43      	subs	r3, r0, r1
 80126b6:	2003      	movs	r0, #3
 80126b8:	9305      	str	r3, [sp, #20]
 80126ba:	6963      	ldr	r3, [r4, #20]
 80126bc:	4343      	muls	r3, r0
 80126be:	0fdf      	lsrs	r7, r3, #31
 80126c0:	18ff      	adds	r7, r7, r3
 80126c2:	9b05      	ldr	r3, [sp, #20]
 80126c4:	107f      	asrs	r7, r7, #1
 80126c6:	3301      	adds	r3, #1
 80126c8:	195b      	adds	r3, r3, r5
 80126ca:	42bb      	cmp	r3, r7
 80126cc:	d900      	bls.n	80126d0 <__sfvwrite_r+0x16c>
 80126ce:	001f      	movs	r7, r3
 80126d0:	0552      	lsls	r2, r2, #21
 80126d2:	d53c      	bpl.n	801274e <__sfvwrite_r+0x1ea>
 80126d4:	0039      	movs	r1, r7
 80126d6:	9802      	ldr	r0, [sp, #8]
 80126d8:	f7f8 fb02 	bl	800ace0 <_malloc_r>
 80126dc:	1e06      	subs	r6, r0, #0
 80126de:	d10a      	bne.n	80126f6 <__sfvwrite_r+0x192>
 80126e0:	230c      	movs	r3, #12
 80126e2:	9a02      	ldr	r2, [sp, #8]
 80126e4:	6013      	str	r3, [r2, #0]
 80126e6:	2340      	movs	r3, #64	; 0x40
 80126e8:	89a2      	ldrh	r2, [r4, #12]
 80126ea:	4313      	orrs	r3, r2
 80126ec:	81a3      	strh	r3, [r4, #12]
 80126ee:	e7a5      	b.n	801263c <__sfvwrite_r+0xd8>
 80126f0:	0015      	movs	r5, r2
 80126f2:	9203      	str	r2, [sp, #12]
 80126f4:	e7cc      	b.n	8012690 <__sfvwrite_r+0x12c>
 80126f6:	9a05      	ldr	r2, [sp, #20]
 80126f8:	6921      	ldr	r1, [r4, #16]
 80126fa:	f7f9 ff30 	bl	800c55e <memcpy>
 80126fe:	89a2      	ldrh	r2, [r4, #12]
 8012700:	4b44      	ldr	r3, [pc, #272]	; (8012814 <__sfvwrite_r+0x2b0>)
 8012702:	401a      	ands	r2, r3
 8012704:	2380      	movs	r3, #128	; 0x80
 8012706:	4313      	orrs	r3, r2
 8012708:	81a3      	strh	r3, [r4, #12]
 801270a:	9b05      	ldr	r3, [sp, #20]
 801270c:	6126      	str	r6, [r4, #16]
 801270e:	18f6      	adds	r6, r6, r3
 8012710:	6026      	str	r6, [r4, #0]
 8012712:	002e      	movs	r6, r5
 8012714:	6167      	str	r7, [r4, #20]
 8012716:	1aff      	subs	r7, r7, r3
 8012718:	60a7      	str	r7, [r4, #8]
 801271a:	002f      	movs	r7, r5
 801271c:	42ae      	cmp	r6, r5
 801271e:	d900      	bls.n	8012722 <__sfvwrite_r+0x1be>
 8012720:	002e      	movs	r6, r5
 8012722:	0032      	movs	r2, r6
 8012724:	9903      	ldr	r1, [sp, #12]
 8012726:	6820      	ldr	r0, [r4, #0]
 8012728:	f000 f983 	bl	8012a32 <memmove>
 801272c:	68a3      	ldr	r3, [r4, #8]
 801272e:	1b9b      	subs	r3, r3, r6
 8012730:	60a3      	str	r3, [r4, #8]
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	199b      	adds	r3, r3, r6
 8012736:	6023      	str	r3, [r4, #0]
 8012738:	9b03      	ldr	r3, [sp, #12]
 801273a:	9a04      	ldr	r2, [sp, #16]
 801273c:	19db      	adds	r3, r3, r7
 801273e:	9303      	str	r3, [sp, #12]
 8012740:	9b04      	ldr	r3, [sp, #16]
 8012742:	1bed      	subs	r5, r5, r7
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	1bdb      	subs	r3, r3, r7
 8012748:	6093      	str	r3, [r2, #8]
 801274a:	d1a1      	bne.n	8012690 <__sfvwrite_r+0x12c>
 801274c:	e712      	b.n	8012574 <__sfvwrite_r+0x10>
 801274e:	003a      	movs	r2, r7
 8012750:	9802      	ldr	r0, [sp, #8]
 8012752:	f7fe fd5d 	bl	8011210 <_realloc_r>
 8012756:	1e06      	subs	r6, r0, #0
 8012758:	d1d7      	bne.n	801270a <__sfvwrite_r+0x1a6>
 801275a:	6921      	ldr	r1, [r4, #16]
 801275c:	9802      	ldr	r0, [sp, #8]
 801275e:	f7f9 ff79 	bl	800c654 <_free_r>
 8012762:	2280      	movs	r2, #128	; 0x80
 8012764:	89a3      	ldrh	r3, [r4, #12]
 8012766:	4393      	bics	r3, r2
 8012768:	81a3      	strh	r3, [r4, #12]
 801276a:	e7b9      	b.n	80126e0 <__sfvwrite_r+0x17c>
 801276c:	6923      	ldr	r3, [r4, #16]
 801276e:	4283      	cmp	r3, r0
 8012770:	d302      	bcc.n	8012778 <__sfvwrite_r+0x214>
 8012772:	6967      	ldr	r7, [r4, #20]
 8012774:	42af      	cmp	r7, r5
 8012776:	d916      	bls.n	80127a6 <__sfvwrite_r+0x242>
 8012778:	42ae      	cmp	r6, r5
 801277a:	d900      	bls.n	801277e <__sfvwrite_r+0x21a>
 801277c:	002e      	movs	r6, r5
 801277e:	0032      	movs	r2, r6
 8012780:	9903      	ldr	r1, [sp, #12]
 8012782:	f000 f956 	bl	8012a32 <memmove>
 8012786:	68a3      	ldr	r3, [r4, #8]
 8012788:	6822      	ldr	r2, [r4, #0]
 801278a:	1b9b      	subs	r3, r3, r6
 801278c:	1992      	adds	r2, r2, r6
 801278e:	0037      	movs	r7, r6
 8012790:	60a3      	str	r3, [r4, #8]
 8012792:	6022      	str	r2, [r4, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d1cf      	bne.n	8012738 <__sfvwrite_r+0x1d4>
 8012798:	0021      	movs	r1, r4
 801279a:	9802      	ldr	r0, [sp, #8]
 801279c:	f7fd fd46 	bl	801022c <_fflush_r>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d0c9      	beq.n	8012738 <__sfvwrite_r+0x1d4>
 80127a4:	e79f      	b.n	80126e6 <__sfvwrite_r+0x182>
 80127a6:	4b1c      	ldr	r3, [pc, #112]	; (8012818 <__sfvwrite_r+0x2b4>)
 80127a8:	0028      	movs	r0, r5
 80127aa:	429d      	cmp	r5, r3
 80127ac:	d900      	bls.n	80127b0 <__sfvwrite_r+0x24c>
 80127ae:	481b      	ldr	r0, [pc, #108]	; (801281c <__sfvwrite_r+0x2b8>)
 80127b0:	0039      	movs	r1, r7
 80127b2:	f7ed fd4d 	bl	8000250 <__divsi3>
 80127b6:	003b      	movs	r3, r7
 80127b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80127ba:	4343      	muls	r3, r0
 80127bc:	9a03      	ldr	r2, [sp, #12]
 80127be:	69e1      	ldr	r1, [r4, #28]
 80127c0:	9802      	ldr	r0, [sp, #8]
 80127c2:	47b0      	blx	r6
 80127c4:	1e07      	subs	r7, r0, #0
 80127c6:	dcb7      	bgt.n	8012738 <__sfvwrite_r+0x1d4>
 80127c8:	e78d      	b.n	80126e6 <__sfvwrite_r+0x182>
 80127ca:	9b01      	ldr	r3, [sp, #4]
 80127cc:	2000      	movs	r0, #0
 80127ce:	681e      	ldr	r6, [r3, #0]
 80127d0:	685b      	ldr	r3, [r3, #4]
 80127d2:	9303      	str	r3, [sp, #12]
 80127d4:	9b01      	ldr	r3, [sp, #4]
 80127d6:	3308      	adds	r3, #8
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	e6e6      	b.n	80125aa <__sfvwrite_r+0x46>
 80127dc:	9a05      	ldr	r2, [sp, #20]
 80127de:	4293      	cmp	r3, r2
 80127e0:	dc08      	bgt.n	80127f4 <__sfvwrite_r+0x290>
 80127e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80127e4:	0032      	movs	r2, r6
 80127e6:	69e1      	ldr	r1, [r4, #28]
 80127e8:	9802      	ldr	r0, [sp, #8]
 80127ea:	47a8      	blx	r5
 80127ec:	1e05      	subs	r5, r0, #0
 80127ee:	dd00      	ble.n	80127f2 <__sfvwrite_r+0x28e>
 80127f0:	e70a      	b.n	8012608 <__sfvwrite_r+0xa4>
 80127f2:	e778      	b.n	80126e6 <__sfvwrite_r+0x182>
 80127f4:	9a05      	ldr	r2, [sp, #20]
 80127f6:	0031      	movs	r1, r6
 80127f8:	f000 f91b 	bl	8012a32 <memmove>
 80127fc:	9a05      	ldr	r2, [sp, #20]
 80127fe:	68a3      	ldr	r3, [r4, #8]
 8012800:	0015      	movs	r5, r2
 8012802:	1a9b      	subs	r3, r3, r2
 8012804:	60a3      	str	r3, [r4, #8]
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	189b      	adds	r3, r3, r2
 801280a:	6023      	str	r3, [r4, #0]
 801280c:	e6fc      	b.n	8012608 <__sfvwrite_r+0xa4>
 801280e:	46c0      	nop			; (mov r8, r8)
 8012810:	7ffffc00 	.word	0x7ffffc00
 8012814:	fffffb7f 	.word	0xfffffb7f
 8012818:	7ffffffe 	.word	0x7ffffffe
 801281c:	7fffffff 	.word	0x7fffffff

08012820 <__submore>:
 8012820:	000b      	movs	r3, r1
 8012822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012824:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8012826:	3340      	adds	r3, #64	; 0x40
 8012828:	000c      	movs	r4, r1
 801282a:	429d      	cmp	r5, r3
 801282c:	d11c      	bne.n	8012868 <__submore+0x48>
 801282e:	2680      	movs	r6, #128	; 0x80
 8012830:	00f6      	lsls	r6, r6, #3
 8012832:	0031      	movs	r1, r6
 8012834:	f7f8 fa54 	bl	800ace0 <_malloc_r>
 8012838:	2800      	cmp	r0, #0
 801283a:	d102      	bne.n	8012842 <__submore+0x22>
 801283c:	2001      	movs	r0, #1
 801283e:	4240      	negs	r0, r0
 8012840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012842:	0023      	movs	r3, r4
 8012844:	6320      	str	r0, [r4, #48]	; 0x30
 8012846:	6366      	str	r6, [r4, #52]	; 0x34
 8012848:	3342      	adds	r3, #66	; 0x42
 801284a:	781a      	ldrb	r2, [r3, #0]
 801284c:	4b10      	ldr	r3, [pc, #64]	; (8012890 <__submore+0x70>)
 801284e:	54c2      	strb	r2, [r0, r3]
 8012850:	0023      	movs	r3, r4
 8012852:	3341      	adds	r3, #65	; 0x41
 8012854:	781a      	ldrb	r2, [r3, #0]
 8012856:	4b0f      	ldr	r3, [pc, #60]	; (8012894 <__submore+0x74>)
 8012858:	54c2      	strb	r2, [r0, r3]
 801285a:	782a      	ldrb	r2, [r5, #0]
 801285c:	4b0e      	ldr	r3, [pc, #56]	; (8012898 <__submore+0x78>)
 801285e:	54c2      	strb	r2, [r0, r3]
 8012860:	18c0      	adds	r0, r0, r3
 8012862:	6020      	str	r0, [r4, #0]
 8012864:	2000      	movs	r0, #0
 8012866:	e7eb      	b.n	8012840 <__submore+0x20>
 8012868:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801286a:	0029      	movs	r1, r5
 801286c:	0073      	lsls	r3, r6, #1
 801286e:	001a      	movs	r2, r3
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	f7fe fccd 	bl	8011210 <_realloc_r>
 8012876:	1e05      	subs	r5, r0, #0
 8012878:	d0e0      	beq.n	801283c <__submore+0x1c>
 801287a:	1987      	adds	r7, r0, r6
 801287c:	0001      	movs	r1, r0
 801287e:	0032      	movs	r2, r6
 8012880:	0038      	movs	r0, r7
 8012882:	f7f9 fe6c 	bl	800c55e <memcpy>
 8012886:	9b01      	ldr	r3, [sp, #4]
 8012888:	6027      	str	r7, [r4, #0]
 801288a:	6325      	str	r5, [r4, #48]	; 0x30
 801288c:	6363      	str	r3, [r4, #52]	; 0x34
 801288e:	e7e9      	b.n	8012864 <__submore+0x44>
 8012890:	000003ff 	.word	0x000003ff
 8012894:	000003fe 	.word	0x000003fe
 8012898:	000003fd 	.word	0x000003fd

0801289c <__swsetup_r>:
 801289c:	4b30      	ldr	r3, [pc, #192]	; (8012960 <__swsetup_r+0xc4>)
 801289e:	b570      	push	{r4, r5, r6, lr}
 80128a0:	0005      	movs	r5, r0
 80128a2:	6818      	ldr	r0, [r3, #0]
 80128a4:	000c      	movs	r4, r1
 80128a6:	2800      	cmp	r0, #0
 80128a8:	d004      	beq.n	80128b4 <__swsetup_r+0x18>
 80128aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d101      	bne.n	80128b4 <__swsetup_r+0x18>
 80128b0:	f7f9 fc2a 	bl	800c108 <__sinit>
 80128b4:	230c      	movs	r3, #12
 80128b6:	5ee2      	ldrsh	r2, [r4, r3]
 80128b8:	b293      	uxth	r3, r2
 80128ba:	0711      	lsls	r1, r2, #28
 80128bc:	d423      	bmi.n	8012906 <__swsetup_r+0x6a>
 80128be:	06d9      	lsls	r1, r3, #27
 80128c0:	d407      	bmi.n	80128d2 <__swsetup_r+0x36>
 80128c2:	2309      	movs	r3, #9
 80128c4:	2001      	movs	r0, #1
 80128c6:	602b      	str	r3, [r5, #0]
 80128c8:	3337      	adds	r3, #55	; 0x37
 80128ca:	4313      	orrs	r3, r2
 80128cc:	81a3      	strh	r3, [r4, #12]
 80128ce:	4240      	negs	r0, r0
 80128d0:	bd70      	pop	{r4, r5, r6, pc}
 80128d2:	075b      	lsls	r3, r3, #29
 80128d4:	d513      	bpl.n	80128fe <__swsetup_r+0x62>
 80128d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80128d8:	2900      	cmp	r1, #0
 80128da:	d008      	beq.n	80128ee <__swsetup_r+0x52>
 80128dc:	0023      	movs	r3, r4
 80128de:	3340      	adds	r3, #64	; 0x40
 80128e0:	4299      	cmp	r1, r3
 80128e2:	d002      	beq.n	80128ea <__swsetup_r+0x4e>
 80128e4:	0028      	movs	r0, r5
 80128e6:	f7f9 feb5 	bl	800c654 <_free_r>
 80128ea:	2300      	movs	r3, #0
 80128ec:	6323      	str	r3, [r4, #48]	; 0x30
 80128ee:	2224      	movs	r2, #36	; 0x24
 80128f0:	89a3      	ldrh	r3, [r4, #12]
 80128f2:	4393      	bics	r3, r2
 80128f4:	81a3      	strh	r3, [r4, #12]
 80128f6:	2300      	movs	r3, #0
 80128f8:	6063      	str	r3, [r4, #4]
 80128fa:	6923      	ldr	r3, [r4, #16]
 80128fc:	6023      	str	r3, [r4, #0]
 80128fe:	2308      	movs	r3, #8
 8012900:	89a2      	ldrh	r2, [r4, #12]
 8012902:	4313      	orrs	r3, r2
 8012904:	81a3      	strh	r3, [r4, #12]
 8012906:	6923      	ldr	r3, [r4, #16]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d10b      	bne.n	8012924 <__swsetup_r+0x88>
 801290c:	21a0      	movs	r1, #160	; 0xa0
 801290e:	2280      	movs	r2, #128	; 0x80
 8012910:	89a3      	ldrh	r3, [r4, #12]
 8012912:	0089      	lsls	r1, r1, #2
 8012914:	0092      	lsls	r2, r2, #2
 8012916:	400b      	ands	r3, r1
 8012918:	4293      	cmp	r3, r2
 801291a:	d003      	beq.n	8012924 <__swsetup_r+0x88>
 801291c:	0021      	movs	r1, r4
 801291e:	0028      	movs	r0, r5
 8012920:	f000 f8e8 	bl	8012af4 <__smakebuf_r>
 8012924:	220c      	movs	r2, #12
 8012926:	5ea3      	ldrsh	r3, [r4, r2]
 8012928:	2001      	movs	r0, #1
 801292a:	001a      	movs	r2, r3
 801292c:	b299      	uxth	r1, r3
 801292e:	4002      	ands	r2, r0
 8012930:	4203      	tst	r3, r0
 8012932:	d00f      	beq.n	8012954 <__swsetup_r+0xb8>
 8012934:	2200      	movs	r2, #0
 8012936:	60a2      	str	r2, [r4, #8]
 8012938:	6962      	ldr	r2, [r4, #20]
 801293a:	4252      	negs	r2, r2
 801293c:	61a2      	str	r2, [r4, #24]
 801293e:	2000      	movs	r0, #0
 8012940:	6922      	ldr	r2, [r4, #16]
 8012942:	4282      	cmp	r2, r0
 8012944:	d1c4      	bne.n	80128d0 <__swsetup_r+0x34>
 8012946:	0609      	lsls	r1, r1, #24
 8012948:	d5c2      	bpl.n	80128d0 <__swsetup_r+0x34>
 801294a:	2240      	movs	r2, #64	; 0x40
 801294c:	4313      	orrs	r3, r2
 801294e:	81a3      	strh	r3, [r4, #12]
 8012950:	3801      	subs	r0, #1
 8012952:	e7bd      	b.n	80128d0 <__swsetup_r+0x34>
 8012954:	0788      	lsls	r0, r1, #30
 8012956:	d400      	bmi.n	801295a <__swsetup_r+0xbe>
 8012958:	6962      	ldr	r2, [r4, #20]
 801295a:	60a2      	str	r2, [r4, #8]
 801295c:	e7ef      	b.n	801293e <__swsetup_r+0xa2>
 801295e:	46c0      	nop			; (mov r8, r8)
 8012960:	200006d0 	.word	0x200006d0

08012964 <__fputwc>:
 8012964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012966:	b085      	sub	sp, #20
 8012968:	000e      	movs	r6, r1
 801296a:	0015      	movs	r5, r2
 801296c:	9001      	str	r0, [sp, #4]
 801296e:	f7f9 fd55 	bl	800c41c <__locale_mb_cur_max>
 8012972:	0004      	movs	r4, r0
 8012974:	2801      	cmp	r0, #1
 8012976:	d119      	bne.n	80129ac <__fputwc+0x48>
 8012978:	1e73      	subs	r3, r6, #1
 801297a:	2bfe      	cmp	r3, #254	; 0xfe
 801297c:	d816      	bhi.n	80129ac <__fputwc+0x48>
 801297e:	ab02      	add	r3, sp, #8
 8012980:	711e      	strb	r6, [r3, #4]
 8012982:	2700      	movs	r7, #0
 8012984:	42a7      	cmp	r7, r4
 8012986:	d020      	beq.n	80129ca <__fputwc+0x66>
 8012988:	ab03      	add	r3, sp, #12
 801298a:	5dd9      	ldrb	r1, [r3, r7]
 801298c:	68ab      	ldr	r3, [r5, #8]
 801298e:	3b01      	subs	r3, #1
 8012990:	60ab      	str	r3, [r5, #8]
 8012992:	2b00      	cmp	r3, #0
 8012994:	da04      	bge.n	80129a0 <__fputwc+0x3c>
 8012996:	69aa      	ldr	r2, [r5, #24]
 8012998:	4293      	cmp	r3, r2
 801299a:	db19      	blt.n	80129d0 <__fputwc+0x6c>
 801299c:	290a      	cmp	r1, #10
 801299e:	d017      	beq.n	80129d0 <__fputwc+0x6c>
 80129a0:	682b      	ldr	r3, [r5, #0]
 80129a2:	1c5a      	adds	r2, r3, #1
 80129a4:	602a      	str	r2, [r5, #0]
 80129a6:	7019      	strb	r1, [r3, #0]
 80129a8:	3701      	adds	r7, #1
 80129aa:	e7eb      	b.n	8012984 <__fputwc+0x20>
 80129ac:	002b      	movs	r3, r5
 80129ae:	0032      	movs	r2, r6
 80129b0:	9801      	ldr	r0, [sp, #4]
 80129b2:	335c      	adds	r3, #92	; 0x5c
 80129b4:	a903      	add	r1, sp, #12
 80129b6:	f000 f857 	bl	8012a68 <_wcrtomb_r>
 80129ba:	0004      	movs	r4, r0
 80129bc:	1c43      	adds	r3, r0, #1
 80129be:	d1e0      	bne.n	8012982 <__fputwc+0x1e>
 80129c0:	2340      	movs	r3, #64	; 0x40
 80129c2:	0006      	movs	r6, r0
 80129c4:	89aa      	ldrh	r2, [r5, #12]
 80129c6:	4313      	orrs	r3, r2
 80129c8:	81ab      	strh	r3, [r5, #12]
 80129ca:	0030      	movs	r0, r6
 80129cc:	b005      	add	sp, #20
 80129ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129d0:	002a      	movs	r2, r5
 80129d2:	9801      	ldr	r0, [sp, #4]
 80129d4:	f000 f8cc 	bl	8012b70 <__swbuf_r>
 80129d8:	1c43      	adds	r3, r0, #1
 80129da:	d1e5      	bne.n	80129a8 <__fputwc+0x44>
 80129dc:	0006      	movs	r6, r0
 80129de:	e7f4      	b.n	80129ca <__fputwc+0x66>

080129e0 <_fputwc_r>:
 80129e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80129e2:	b570      	push	{r4, r5, r6, lr}
 80129e4:	0005      	movs	r5, r0
 80129e6:	000e      	movs	r6, r1
 80129e8:	0014      	movs	r4, r2
 80129ea:	07db      	lsls	r3, r3, #31
 80129ec:	d405      	bmi.n	80129fa <_fputwc_r+0x1a>
 80129ee:	8993      	ldrh	r3, [r2, #12]
 80129f0:	059b      	lsls	r3, r3, #22
 80129f2:	d402      	bmi.n	80129fa <_fputwc_r+0x1a>
 80129f4:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80129f6:	f7f9 fda5 	bl	800c544 <__retarget_lock_acquire_recursive>
 80129fa:	230c      	movs	r3, #12
 80129fc:	5ee2      	ldrsh	r2, [r4, r3]
 80129fe:	2380      	movs	r3, #128	; 0x80
 8012a00:	019b      	lsls	r3, r3, #6
 8012a02:	421a      	tst	r2, r3
 8012a04:	d104      	bne.n	8012a10 <_fputwc_r+0x30>
 8012a06:	431a      	orrs	r2, r3
 8012a08:	81a2      	strh	r2, [r4, #12]
 8012a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012a0c:	4313      	orrs	r3, r2
 8012a0e:	6663      	str	r3, [r4, #100]	; 0x64
 8012a10:	0028      	movs	r0, r5
 8012a12:	0022      	movs	r2, r4
 8012a14:	0031      	movs	r1, r6
 8012a16:	f7ff ffa5 	bl	8012964 <__fputwc>
 8012a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a1c:	0005      	movs	r5, r0
 8012a1e:	07db      	lsls	r3, r3, #31
 8012a20:	d405      	bmi.n	8012a2e <_fputwc_r+0x4e>
 8012a22:	89a3      	ldrh	r3, [r4, #12]
 8012a24:	059b      	lsls	r3, r3, #22
 8012a26:	d402      	bmi.n	8012a2e <_fputwc_r+0x4e>
 8012a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a2a:	f7f9 fd8c 	bl	800c546 <__retarget_lock_release_recursive>
 8012a2e:	0028      	movs	r0, r5
 8012a30:	bd70      	pop	{r4, r5, r6, pc}

08012a32 <memmove>:
 8012a32:	b510      	push	{r4, lr}
 8012a34:	4288      	cmp	r0, r1
 8012a36:	d902      	bls.n	8012a3e <memmove+0xc>
 8012a38:	188b      	adds	r3, r1, r2
 8012a3a:	4298      	cmp	r0, r3
 8012a3c:	d303      	bcc.n	8012a46 <memmove+0x14>
 8012a3e:	2300      	movs	r3, #0
 8012a40:	e007      	b.n	8012a52 <memmove+0x20>
 8012a42:	5c8b      	ldrb	r3, [r1, r2]
 8012a44:	5483      	strb	r3, [r0, r2]
 8012a46:	3a01      	subs	r2, #1
 8012a48:	d2fb      	bcs.n	8012a42 <memmove+0x10>
 8012a4a:	bd10      	pop	{r4, pc}
 8012a4c:	5ccc      	ldrb	r4, [r1, r3]
 8012a4e:	54c4      	strb	r4, [r0, r3]
 8012a50:	3301      	adds	r3, #1
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d1fa      	bne.n	8012a4c <memmove+0x1a>
 8012a56:	e7f8      	b.n	8012a4a <memmove+0x18>

08012a58 <abort>:
 8012a58:	2006      	movs	r0, #6
 8012a5a:	b510      	push	{r4, lr}
 8012a5c:	f000 f906 	bl	8012c6c <raise>
 8012a60:	2001      	movs	r0, #1
 8012a62:	f7f1 fb13 	bl	800408c <_exit>
	...

08012a68 <_wcrtomb_r>:
 8012a68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a6a:	001d      	movs	r5, r3
 8012a6c:	4b09      	ldr	r3, [pc, #36]	; (8012a94 <_wcrtomb_r+0x2c>)
 8012a6e:	0004      	movs	r4, r0
 8012a70:	33e0      	adds	r3, #224	; 0xe0
 8012a72:	681e      	ldr	r6, [r3, #0]
 8012a74:	002b      	movs	r3, r5
 8012a76:	2900      	cmp	r1, #0
 8012a78:	d101      	bne.n	8012a7e <_wcrtomb_r+0x16>
 8012a7a:	000a      	movs	r2, r1
 8012a7c:	a901      	add	r1, sp, #4
 8012a7e:	0020      	movs	r0, r4
 8012a80:	47b0      	blx	r6
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	d103      	bne.n	8012a8e <_wcrtomb_r+0x26>
 8012a86:	2300      	movs	r3, #0
 8012a88:	602b      	str	r3, [r5, #0]
 8012a8a:	338a      	adds	r3, #138	; 0x8a
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	b004      	add	sp, #16
 8012a90:	bd70      	pop	{r4, r5, r6, pc}
 8012a92:	46c0      	nop			; (mov r8, r8)
 8012a94:	20000444 	.word	0x20000444

08012a98 <__swhatbuf_r>:
 8012a98:	b570      	push	{r4, r5, r6, lr}
 8012a9a:	000e      	movs	r6, r1
 8012a9c:	001d      	movs	r5, r3
 8012a9e:	230e      	movs	r3, #14
 8012aa0:	5ec9      	ldrsh	r1, [r1, r3]
 8012aa2:	0014      	movs	r4, r2
 8012aa4:	b096      	sub	sp, #88	; 0x58
 8012aa6:	2900      	cmp	r1, #0
 8012aa8:	da09      	bge.n	8012abe <__swhatbuf_r+0x26>
 8012aaa:	89b2      	ldrh	r2, [r6, #12]
 8012aac:	2380      	movs	r3, #128	; 0x80
 8012aae:	0011      	movs	r1, r2
 8012ab0:	4019      	ands	r1, r3
 8012ab2:	421a      	tst	r2, r3
 8012ab4:	d018      	beq.n	8012ae8 <__swhatbuf_r+0x50>
 8012ab6:	2100      	movs	r1, #0
 8012ab8:	3b40      	subs	r3, #64	; 0x40
 8012aba:	0008      	movs	r0, r1
 8012abc:	e010      	b.n	8012ae0 <__swhatbuf_r+0x48>
 8012abe:	466a      	mov	r2, sp
 8012ac0:	f000 f8de 	bl	8012c80 <_fstat_r>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	dbf0      	blt.n	8012aaa <__swhatbuf_r+0x12>
 8012ac8:	23f0      	movs	r3, #240	; 0xf0
 8012aca:	9901      	ldr	r1, [sp, #4]
 8012acc:	021b      	lsls	r3, r3, #8
 8012ace:	4019      	ands	r1, r3
 8012ad0:	4b07      	ldr	r3, [pc, #28]	; (8012af0 <__swhatbuf_r+0x58>)
 8012ad2:	2080      	movs	r0, #128	; 0x80
 8012ad4:	18c9      	adds	r1, r1, r3
 8012ad6:	424b      	negs	r3, r1
 8012ad8:	4159      	adcs	r1, r3
 8012ada:	2380      	movs	r3, #128	; 0x80
 8012adc:	0100      	lsls	r0, r0, #4
 8012ade:	00db      	lsls	r3, r3, #3
 8012ae0:	6029      	str	r1, [r5, #0]
 8012ae2:	6023      	str	r3, [r4, #0]
 8012ae4:	b016      	add	sp, #88	; 0x58
 8012ae6:	bd70      	pop	{r4, r5, r6, pc}
 8012ae8:	2380      	movs	r3, #128	; 0x80
 8012aea:	00db      	lsls	r3, r3, #3
 8012aec:	e7e5      	b.n	8012aba <__swhatbuf_r+0x22>
 8012aee:	46c0      	nop			; (mov r8, r8)
 8012af0:	ffffe000 	.word	0xffffe000

08012af4 <__smakebuf_r>:
 8012af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012af6:	2602      	movs	r6, #2
 8012af8:	898b      	ldrh	r3, [r1, #12]
 8012afa:	0005      	movs	r5, r0
 8012afc:	000c      	movs	r4, r1
 8012afe:	4233      	tst	r3, r6
 8012b00:	d006      	beq.n	8012b10 <__smakebuf_r+0x1c>
 8012b02:	0023      	movs	r3, r4
 8012b04:	3343      	adds	r3, #67	; 0x43
 8012b06:	6023      	str	r3, [r4, #0]
 8012b08:	6123      	str	r3, [r4, #16]
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	6163      	str	r3, [r4, #20]
 8012b0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012b10:	466a      	mov	r2, sp
 8012b12:	ab01      	add	r3, sp, #4
 8012b14:	f7ff ffc0 	bl	8012a98 <__swhatbuf_r>
 8012b18:	9900      	ldr	r1, [sp, #0]
 8012b1a:	0007      	movs	r7, r0
 8012b1c:	0028      	movs	r0, r5
 8012b1e:	f7f8 f8df 	bl	800ace0 <_malloc_r>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d108      	bne.n	8012b38 <__smakebuf_r+0x44>
 8012b26:	220c      	movs	r2, #12
 8012b28:	5ea3      	ldrsh	r3, [r4, r2]
 8012b2a:	059a      	lsls	r2, r3, #22
 8012b2c:	d4ef      	bmi.n	8012b0e <__smakebuf_r+0x1a>
 8012b2e:	2203      	movs	r2, #3
 8012b30:	4393      	bics	r3, r2
 8012b32:	431e      	orrs	r6, r3
 8012b34:	81a6      	strh	r6, [r4, #12]
 8012b36:	e7e4      	b.n	8012b02 <__smakebuf_r+0xe>
 8012b38:	2380      	movs	r3, #128	; 0x80
 8012b3a:	89a2      	ldrh	r2, [r4, #12]
 8012b3c:	6020      	str	r0, [r4, #0]
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	81a3      	strh	r3, [r4, #12]
 8012b42:	9b00      	ldr	r3, [sp, #0]
 8012b44:	6120      	str	r0, [r4, #16]
 8012b46:	6163      	str	r3, [r4, #20]
 8012b48:	9b01      	ldr	r3, [sp, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d00c      	beq.n	8012b68 <__smakebuf_r+0x74>
 8012b4e:	0028      	movs	r0, r5
 8012b50:	230e      	movs	r3, #14
 8012b52:	5ee1      	ldrsh	r1, [r4, r3]
 8012b54:	f000 f8a6 	bl	8012ca4 <_isatty_r>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d005      	beq.n	8012b68 <__smakebuf_r+0x74>
 8012b5c:	2303      	movs	r3, #3
 8012b5e:	89a2      	ldrh	r2, [r4, #12]
 8012b60:	439a      	bics	r2, r3
 8012b62:	3b02      	subs	r3, #2
 8012b64:	4313      	orrs	r3, r2
 8012b66:	81a3      	strh	r3, [r4, #12]
 8012b68:	89a3      	ldrh	r3, [r4, #12]
 8012b6a:	433b      	orrs	r3, r7
 8012b6c:	81a3      	strh	r3, [r4, #12]
 8012b6e:	e7ce      	b.n	8012b0e <__smakebuf_r+0x1a>

08012b70 <__swbuf_r>:
 8012b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b72:	0006      	movs	r6, r0
 8012b74:	000d      	movs	r5, r1
 8012b76:	0014      	movs	r4, r2
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d004      	beq.n	8012b86 <__swbuf_r+0x16>
 8012b7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d101      	bne.n	8012b86 <__swbuf_r+0x16>
 8012b82:	f7f9 fac1 	bl	800c108 <__sinit>
 8012b86:	69a3      	ldr	r3, [r4, #24]
 8012b88:	60a3      	str	r3, [r4, #8]
 8012b8a:	89a3      	ldrh	r3, [r4, #12]
 8012b8c:	071b      	lsls	r3, r3, #28
 8012b8e:	d52e      	bpl.n	8012bee <__swbuf_r+0x7e>
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d02b      	beq.n	8012bee <__swbuf_r+0x7e>
 8012b96:	230c      	movs	r3, #12
 8012b98:	5ee2      	ldrsh	r2, [r4, r3]
 8012b9a:	2380      	movs	r3, #128	; 0x80
 8012b9c:	019b      	lsls	r3, r3, #6
 8012b9e:	b2ef      	uxtb	r7, r5
 8012ba0:	b2ed      	uxtb	r5, r5
 8012ba2:	421a      	tst	r2, r3
 8012ba4:	d02c      	beq.n	8012c00 <__swbuf_r+0x90>
 8012ba6:	6923      	ldr	r3, [r4, #16]
 8012ba8:	6820      	ldr	r0, [r4, #0]
 8012baa:	1ac0      	subs	r0, r0, r3
 8012bac:	6963      	ldr	r3, [r4, #20]
 8012bae:	4283      	cmp	r3, r0
 8012bb0:	dc05      	bgt.n	8012bbe <__swbuf_r+0x4e>
 8012bb2:	0021      	movs	r1, r4
 8012bb4:	0030      	movs	r0, r6
 8012bb6:	f7fd fb39 	bl	801022c <_fflush_r>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d11d      	bne.n	8012bfa <__swbuf_r+0x8a>
 8012bbe:	68a3      	ldr	r3, [r4, #8]
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	60a3      	str	r3, [r4, #8]
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	1c5a      	adds	r2, r3, #1
 8012bca:	6022      	str	r2, [r4, #0]
 8012bcc:	701f      	strb	r7, [r3, #0]
 8012bce:	6963      	ldr	r3, [r4, #20]
 8012bd0:	4283      	cmp	r3, r0
 8012bd2:	d004      	beq.n	8012bde <__swbuf_r+0x6e>
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	07db      	lsls	r3, r3, #31
 8012bd8:	d507      	bpl.n	8012bea <__swbuf_r+0x7a>
 8012bda:	2d0a      	cmp	r5, #10
 8012bdc:	d105      	bne.n	8012bea <__swbuf_r+0x7a>
 8012bde:	0021      	movs	r1, r4
 8012be0:	0030      	movs	r0, r6
 8012be2:	f7fd fb23 	bl	801022c <_fflush_r>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d107      	bne.n	8012bfa <__swbuf_r+0x8a>
 8012bea:	0028      	movs	r0, r5
 8012bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bee:	0021      	movs	r1, r4
 8012bf0:	0030      	movs	r0, r6
 8012bf2:	f7ff fe53 	bl	801289c <__swsetup_r>
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	d0cd      	beq.n	8012b96 <__swbuf_r+0x26>
 8012bfa:	2501      	movs	r5, #1
 8012bfc:	426d      	negs	r5, r5
 8012bfe:	e7f4      	b.n	8012bea <__swbuf_r+0x7a>
 8012c00:	4313      	orrs	r3, r2
 8012c02:	81a3      	strh	r3, [r4, #12]
 8012c04:	4a02      	ldr	r2, [pc, #8]	; (8012c10 <__swbuf_r+0xa0>)
 8012c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c08:	4013      	ands	r3, r2
 8012c0a:	6663      	str	r3, [r4, #100]	; 0x64
 8012c0c:	e7cb      	b.n	8012ba6 <__swbuf_r+0x36>
 8012c0e:	46c0      	nop			; (mov r8, r8)
 8012c10:	ffffdfff 	.word	0xffffdfff

08012c14 <_raise_r>:
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	0004      	movs	r4, r0
 8012c18:	000d      	movs	r5, r1
 8012c1a:	291f      	cmp	r1, #31
 8012c1c:	d904      	bls.n	8012c28 <_raise_r+0x14>
 8012c1e:	2316      	movs	r3, #22
 8012c20:	6003      	str	r3, [r0, #0]
 8012c22:	2001      	movs	r0, #1
 8012c24:	4240      	negs	r0, r0
 8012c26:	bd70      	pop	{r4, r5, r6, pc}
 8012c28:	0003      	movs	r3, r0
 8012c2a:	33fc      	adds	r3, #252	; 0xfc
 8012c2c:	69db      	ldr	r3, [r3, #28]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d004      	beq.n	8012c3c <_raise_r+0x28>
 8012c32:	008a      	lsls	r2, r1, #2
 8012c34:	189b      	adds	r3, r3, r2
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	2a00      	cmp	r2, #0
 8012c3a:	d108      	bne.n	8012c4e <_raise_r+0x3a>
 8012c3c:	0020      	movs	r0, r4
 8012c3e:	f000 f855 	bl	8012cec <_getpid_r>
 8012c42:	002a      	movs	r2, r5
 8012c44:	0001      	movs	r1, r0
 8012c46:	0020      	movs	r0, r4
 8012c48:	f000 f83e 	bl	8012cc8 <_kill_r>
 8012c4c:	e7eb      	b.n	8012c26 <_raise_r+0x12>
 8012c4e:	2000      	movs	r0, #0
 8012c50:	2a01      	cmp	r2, #1
 8012c52:	d0e8      	beq.n	8012c26 <_raise_r+0x12>
 8012c54:	1c51      	adds	r1, r2, #1
 8012c56:	d103      	bne.n	8012c60 <_raise_r+0x4c>
 8012c58:	2316      	movs	r3, #22
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	6023      	str	r3, [r4, #0]
 8012c5e:	e7e2      	b.n	8012c26 <_raise_r+0x12>
 8012c60:	2400      	movs	r4, #0
 8012c62:	0028      	movs	r0, r5
 8012c64:	601c      	str	r4, [r3, #0]
 8012c66:	4790      	blx	r2
 8012c68:	0020      	movs	r0, r4
 8012c6a:	e7dc      	b.n	8012c26 <_raise_r+0x12>

08012c6c <raise>:
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	4b03      	ldr	r3, [pc, #12]	; (8012c7c <raise+0x10>)
 8012c70:	0001      	movs	r1, r0
 8012c72:	6818      	ldr	r0, [r3, #0]
 8012c74:	f7ff ffce 	bl	8012c14 <_raise_r>
 8012c78:	bd10      	pop	{r4, pc}
 8012c7a:	46c0      	nop			; (mov r8, r8)
 8012c7c:	200006d0 	.word	0x200006d0

08012c80 <_fstat_r>:
 8012c80:	2300      	movs	r3, #0
 8012c82:	b570      	push	{r4, r5, r6, lr}
 8012c84:	4d06      	ldr	r5, [pc, #24]	; (8012ca0 <_fstat_r+0x20>)
 8012c86:	0004      	movs	r4, r0
 8012c88:	0008      	movs	r0, r1
 8012c8a:	0011      	movs	r1, r2
 8012c8c:	602b      	str	r3, [r5, #0]
 8012c8e:	f7f1 fa4c 	bl	800412a <_fstat>
 8012c92:	1c43      	adds	r3, r0, #1
 8012c94:	d103      	bne.n	8012c9e <_fstat_r+0x1e>
 8012c96:	682b      	ldr	r3, [r5, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d000      	beq.n	8012c9e <_fstat_r+0x1e>
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ca0:	20000da8 	.word	0x20000da8

08012ca4 <_isatty_r>:
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	b570      	push	{r4, r5, r6, lr}
 8012ca8:	4d06      	ldr	r5, [pc, #24]	; (8012cc4 <_isatty_r+0x20>)
 8012caa:	0004      	movs	r4, r0
 8012cac:	0008      	movs	r0, r1
 8012cae:	602b      	str	r3, [r5, #0]
 8012cb0:	f7f1 fa49 	bl	8004146 <_isatty>
 8012cb4:	1c43      	adds	r3, r0, #1
 8012cb6:	d103      	bne.n	8012cc0 <_isatty_r+0x1c>
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d000      	beq.n	8012cc0 <_isatty_r+0x1c>
 8012cbe:	6023      	str	r3, [r4, #0]
 8012cc0:	bd70      	pop	{r4, r5, r6, pc}
 8012cc2:	46c0      	nop			; (mov r8, r8)
 8012cc4:	20000da8 	.word	0x20000da8

08012cc8 <_kill_r>:
 8012cc8:	2300      	movs	r3, #0
 8012cca:	b570      	push	{r4, r5, r6, lr}
 8012ccc:	4d06      	ldr	r5, [pc, #24]	; (8012ce8 <_kill_r+0x20>)
 8012cce:	0004      	movs	r4, r0
 8012cd0:	0008      	movs	r0, r1
 8012cd2:	0011      	movs	r1, r2
 8012cd4:	602b      	str	r3, [r5, #0]
 8012cd6:	f7f1 f9c9 	bl	800406c <_kill>
 8012cda:	1c43      	adds	r3, r0, #1
 8012cdc:	d103      	bne.n	8012ce6 <_kill_r+0x1e>
 8012cde:	682b      	ldr	r3, [r5, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d000      	beq.n	8012ce6 <_kill_r+0x1e>
 8012ce4:	6023      	str	r3, [r4, #0]
 8012ce6:	bd70      	pop	{r4, r5, r6, pc}
 8012ce8:	20000da8 	.word	0x20000da8

08012cec <_getpid_r>:
 8012cec:	b510      	push	{r4, lr}
 8012cee:	f7f1 f9b7 	bl	8004060 <_getpid>
 8012cf2:	bd10      	pop	{r4, pc}

08012cf4 <round>:
 8012cf4:	b570      	push	{r4, r5, r6, lr}
 8012cf6:	004a      	lsls	r2, r1, #1
 8012cf8:	000d      	movs	r5, r1
 8012cfa:	4920      	ldr	r1, [pc, #128]	; (8012d7c <round+0x88>)
 8012cfc:	0d52      	lsrs	r2, r2, #21
 8012cfe:	1851      	adds	r1, r2, r1
 8012d00:	0006      	movs	r6, r0
 8012d02:	2913      	cmp	r1, #19
 8012d04:	dc18      	bgt.n	8012d38 <round+0x44>
 8012d06:	2900      	cmp	r1, #0
 8012d08:	da09      	bge.n	8012d1e <round+0x2a>
 8012d0a:	0feb      	lsrs	r3, r5, #31
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	07db      	lsls	r3, r3, #31
 8012d10:	3101      	adds	r1, #1
 8012d12:	d101      	bne.n	8012d18 <round+0x24>
 8012d14:	491a      	ldr	r1, [pc, #104]	; (8012d80 <round+0x8c>)
 8012d16:	430b      	orrs	r3, r1
 8012d18:	0019      	movs	r1, r3
 8012d1a:	0010      	movs	r0, r2
 8012d1c:	e017      	b.n	8012d4e <round+0x5a>
 8012d1e:	4c19      	ldr	r4, [pc, #100]	; (8012d84 <round+0x90>)
 8012d20:	410c      	asrs	r4, r1
 8012d22:	0022      	movs	r2, r4
 8012d24:	402a      	ands	r2, r5
 8012d26:	4302      	orrs	r2, r0
 8012d28:	d013      	beq.n	8012d52 <round+0x5e>
 8012d2a:	2280      	movs	r2, #128	; 0x80
 8012d2c:	0312      	lsls	r2, r2, #12
 8012d2e:	410a      	asrs	r2, r1
 8012d30:	1953      	adds	r3, r2, r5
 8012d32:	43a3      	bics	r3, r4
 8012d34:	2200      	movs	r2, #0
 8012d36:	e7ef      	b.n	8012d18 <round+0x24>
 8012d38:	2933      	cmp	r1, #51	; 0x33
 8012d3a:	dd0d      	ble.n	8012d58 <round+0x64>
 8012d3c:	2380      	movs	r3, #128	; 0x80
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	4299      	cmp	r1, r3
 8012d42:	d106      	bne.n	8012d52 <round+0x5e>
 8012d44:	0002      	movs	r2, r0
 8012d46:	002b      	movs	r3, r5
 8012d48:	0029      	movs	r1, r5
 8012d4a:	f7ed fd35 	bl	80007b8 <__aeabi_dadd>
 8012d4e:	0006      	movs	r6, r0
 8012d50:	000d      	movs	r5, r1
 8012d52:	0030      	movs	r0, r6
 8012d54:	0029      	movs	r1, r5
 8012d56:	bd70      	pop	{r4, r5, r6, pc}
 8012d58:	4c0b      	ldr	r4, [pc, #44]	; (8012d88 <round+0x94>)
 8012d5a:	1912      	adds	r2, r2, r4
 8012d5c:	2401      	movs	r4, #1
 8012d5e:	4264      	negs	r4, r4
 8012d60:	40d4      	lsrs	r4, r2
 8012d62:	4220      	tst	r0, r4
 8012d64:	d0f5      	beq.n	8012d52 <round+0x5e>
 8012d66:	2233      	movs	r2, #51	; 0x33
 8012d68:	1a51      	subs	r1, r2, r1
 8012d6a:	3a32      	subs	r2, #50	; 0x32
 8012d6c:	408a      	lsls	r2, r1
 8012d6e:	1812      	adds	r2, r2, r0
 8012d70:	4282      	cmp	r2, r0
 8012d72:	4180      	sbcs	r0, r0
 8012d74:	4240      	negs	r0, r0
 8012d76:	182b      	adds	r3, r5, r0
 8012d78:	43a2      	bics	r2, r4
 8012d7a:	e7cd      	b.n	8012d18 <round+0x24>
 8012d7c:	fffffc01 	.word	0xfffffc01
 8012d80:	3ff00000 	.word	0x3ff00000
 8012d84:	000fffff 	.word	0x000fffff
 8012d88:	fffffbed 	.word	0xfffffbed

08012d8c <_init>:
 8012d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d8e:	46c0      	nop			; (mov r8, r8)
 8012d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d92:	bc08      	pop	{r3}
 8012d94:	469e      	mov	lr, r3
 8012d96:	4770      	bx	lr

08012d98 <_fini>:
 8012d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d9a:	46c0      	nop			; (mov r8, r8)
 8012d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d9e:	bc08      	pop	{r3}
 8012da0:	469e      	mov	lr, r3
 8012da2:	4770      	bx	lr
