
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d88  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e4  08012e48  08012e48  00022e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f2c  08014f2c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014f2c  08014f2c  00024f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f34  08014f34  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014f34  08014f34  00024f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014f3c  08014f3c  00024f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08014f40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000086c  200006d8  08015618  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f44  08015618  00030f44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0f7  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ad9  00000000  00000000  0004a83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0004e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000134e  00000000  00000000  0004fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d65  00000000  00000000  00050f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4c6  00000000  00000000  00072c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb094  00000000  00000000  00092141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074b0  00000000  00000000  0015d1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00164688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012e2c 	.word	0x08012e2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012e2c 	.word	0x08012e2c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	080149a0 	.word	0x080149a0
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46c6      	mov	lr, r8
 80025ac:	b500      	push	{lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f001 fe93 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 f9f1 	bl	800299c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ba:	f000 fc83 	bl	8002ec4 <MX_GPIO_Init>
  MX_RTC_Init();
 80025be:	f000 fa43 	bl	8002a48 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c2:	f000 fb23 	bl	8002c0c <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c6:	f000 fae3 	bl	8002b90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025ca:	f000 fb5d 	bl	8002c88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025ce:	f000 fba9 	bl	8002d24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d2:	f000 fbf5 	bl	8002dc0 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d6:	f000 fc41 	bl	8002e5c <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025da:	4bd9      	ldr	r3, [pc, #868]	; (8002940 <main+0x398>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fd7c 	bl	80030dc <send_debug_logs>

  my_sys_init () ;
 80025e4:	f000 fdaa 	bl	800313c <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025e8:	4bd6      	ldr	r3, [pc, #856]	; (8002944 <main+0x39c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	001a      	movs	r2, r3
 80025ee:	49d6      	ldr	r1, [pc, #856]	; (8002948 <main+0x3a0>)
 80025f0:	4bd6      	ldr	r3, [pc, #856]	; (800294c <main+0x3a4>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f009 fe40 	bl	800c278 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025f8:	4bd4      	ldr	r3, [pc, #848]	; (800294c <main+0x3a4>)
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fd6e 	bl	80030dc <send_debug_logs>

  my_tim_init () ;
 8002600:	f001 fa6e 	bl	8003ae0 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002604:	2002      	movs	r0, #2
 8002606:	f001 f95b 	bl	80038c0 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260a:	f001 f98b 	bl	8003924 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 800260e:	4bd0      	ldr	r3, [pc, #832]	; (8002950 <main+0x3a8>)
 8002610:	0018      	movs	r0, r3
 8002612:	f007 fa5d 	bl	8009ad0 <my_gnss_acq_coordinates>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	4bce      	ldr	r3, [pc, #824]	; (8002954 <main+0x3ac>)
 800261c:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 800261e:	f001 f99b 	bl	8003958 <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002622:	4bcd      	ldr	r3, [pc, #820]	; (8002958 <main+0x3b0>)
 8002624:	0018      	movs	r0, r3
 8002626:	f007 fbd9 	bl	8009ddc <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262a:	4bc9      	ldr	r3, [pc, #804]	; (8002950 <main+0x3a8>)
 800262c:	7c1b      	ldrb	r3, [r3, #16]
 800262e:	001e      	movs	r6, r3
 8002630:	4bc7      	ldr	r3, [pc, #796]	; (8002950 <main+0x3a8>)
 8002632:	689c      	ldr	r4, [r3, #8]
 8002634:	68dd      	ldr	r5, [r3, #12]
 8002636:	4bc6      	ldr	r3, [pc, #792]	; (8002950 <main+0x3a8>)
 8002638:	8a5b      	ldrh	r3, [r3, #18]
 800263a:	4698      	mov	r8, r3
 800263c:	4bc4      	ldr	r3, [pc, #784]	; (8002950 <main+0x3a8>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	213c      	movs	r1, #60	; 0x3c
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd7a 	bl	800013c <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	4ac4      	ldr	r2, [pc, #784]	; (800295c <main+0x3b4>)
 800264c:	49c4      	ldr	r1, [pc, #784]	; (8002960 <main+0x3b8>)
 800264e:	48bf      	ldr	r0, [pc, #764]	; (800294c <main+0x3a4>)
 8002650:	9305      	str	r3, [sp, #20]
 8002652:	4643      	mov	r3, r8
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	9402      	str	r4, [sp, #8]
 8002658:	9503      	str	r5, [sp, #12]
 800265a:	9601      	str	r6, [sp, #4]
 800265c:	4bbe      	ldr	r3, [pc, #760]	; (8002958 <main+0x3b0>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	23ba      	movs	r3, #186	; 0xba
 8002662:	f009 fe09 	bl	800c278 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002666:	4bb9      	ldr	r3, [pc, #740]	; (800294c <main+0x3a4>)
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fd37 	bl	80030dc <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 800266e:	4bb9      	ldr	r3, [pc, #740]	; (8002954 <main+0x3ac>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4053      	eors	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d027      	beq.n	80026cc <main+0x124>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267c:	4bb9      	ldr	r3, [pc, #740]	; (8002964 <main+0x3bc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0018      	movs	r0, r3
 8002682:	f007 fbed 	bl	8009e60 <my_rtc_set_alarm>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d020      	beq.n	80026cc <main+0x124>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268a:	4ab4      	ldr	r2, [pc, #720]	; (800295c <main+0x3b4>)
 800268c:	49b6      	ldr	r1, [pc, #728]	; (8002968 <main+0x3c0>)
 800268e:	48af      	ldr	r0, [pc, #700]	; (800294c <main+0x3a4>)
 8002690:	23c0      	movs	r3, #192	; 0xc0
 8002692:	f009 fdf1 	bl	800c278 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002696:	4bad      	ldr	r3, [pc, #692]	; (800294c <main+0x3a4>)
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fd1f 	bl	80030dc <send_debug_logs>
		  my_tim_stop () ;
 800269e:	f001 fa3b 	bl	8003b18 <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a2:	4bb2      	ldr	r3, [pc, #712]	; (800296c <main+0x3c4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026a8:	f002 fae0 	bl	8004c6c <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ac:	4baa      	ldr	r3, [pc, #680]	; (8002958 <main+0x3b0>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f007 fb94 	bl	8009ddc <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b4:	4aa9      	ldr	r2, [pc, #676]	; (800295c <main+0x3b4>)
 80026b6:	49ae      	ldr	r1, [pc, #696]	; (8002970 <main+0x3c8>)
 80026b8:	48a4      	ldr	r0, [pc, #656]	; (800294c <main+0x3a4>)
 80026ba:	4ba7      	ldr	r3, [pc, #668]	; (8002958 <main+0x3b0>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	23c6      	movs	r3, #198	; 0xc6
 80026c0:	f009 fdda 	bl	800c278 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c4:	4ba1      	ldr	r3, [pc, #644]	; (800294c <main+0x3a4>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fd08 	bl	80030dc <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 80026cc:	f007 f94e 	bl	800996c <my_astro_init>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4053      	eors	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00e      	beq.n	80026fc <main+0x154>
	  my_sys_restart () ;
 80026de:	f000 fdcb 	bl	8003278 <my_sys_restart>
 80026e2:	e087      	b.n	80027f4 <main+0x24c>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026e4:	4a9d      	ldr	r2, [pc, #628]	; (800295c <main+0x3b4>)
 80026e6:	49a3      	ldr	r1, [pc, #652]	; (8002974 <main+0x3cc>)
 80026e8:	4898      	ldr	r0, [pc, #608]	; (800294c <main+0x3a4>)
 80026ea:	23d1      	movs	r3, #209	; 0xd1
 80026ec:	f009 fdc4 	bl	800c278 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026f0:	4b96      	ldr	r3, [pc, #600]	; (800294c <main+0x3a4>)
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 fcf2 	bl	80030dc <send_debug_logs>
		  my_astro_handle_evt () ;
 80026f8:	f007 f998 	bl	8009a2c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80026fc:	f001 f9de 	bl	8003abc <my_astro_evt_pin>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d1ef      	bne.n	80026e4 <main+0x13c>
	  }
	  if ( sys_mode == 0 ) // Present sys_mode if other than production
 8002704:	4b8f      	ldr	r3, [pc, #572]	; (8002944 <main+0x39c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11d      	bne.n	8002748 <main+0x1a0>
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800270c:	4b9a      	ldr	r3, [pc, #616]	; (8002978 <main+0x3d0>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	4698      	mov	r8, r3
 8002712:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <main+0x3a8>)
 8002714:	689c      	ldr	r4, [r3, #8]
 8002716:	68dd      	ldr	r5, [r3, #12]
 8002718:	4b8d      	ldr	r3, [pc, #564]	; (8002950 <main+0x3a8>)
 800271a:	8a5b      	ldrh	r3, [r3, #18]
 800271c:	001e      	movs	r6, r3
 800271e:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <main+0x3a8>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	213c      	movs	r1, #60	; 0x3c
 8002724:	0018      	movs	r0, r3
 8002726:	f7fd fd09 	bl	800013c <__udivsi3>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	4b93      	ldr	r3, [pc, #588]	; (800297c <main+0x3d4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4993      	ldr	r1, [pc, #588]	; (8002980 <main+0x3d8>)
 8002734:	4893      	ldr	r0, [pc, #588]	; (8002984 <main+0x3dc>)
 8002736:	9304      	str	r3, [sp, #16]
 8002738:	9203      	str	r2, [sp, #12]
 800273a:	9602      	str	r6, [sp, #8]
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	9501      	str	r5, [sp, #4]
 8002740:	4642      	mov	r2, r8
 8002742:	f009 fd99 	bl	800c278 <sprintf>
 8002746:	e020      	b.n	800278a <main+0x1e2>
	  else
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s,%u" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv , (uint16_t) sys_mode ) ;
 8002748:	4b8b      	ldr	r3, [pc, #556]	; (8002978 <main+0x3d0>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4698      	mov	r8, r3
 800274e:	4b80      	ldr	r3, [pc, #512]	; (8002950 <main+0x3a8>)
 8002750:	689c      	ldr	r4, [r3, #8]
 8002752:	68dd      	ldr	r5, [r3, #12]
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <main+0x3a8>)
 8002756:	8a5b      	ldrh	r3, [r3, #18]
 8002758:	001e      	movs	r6, r3
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <main+0x3a8>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	213c      	movs	r1, #60	; 0x3c
 8002760:	0018      	movs	r0, r3
 8002762:	f7fd fceb 	bl	800013c <__udivsi3>
 8002766:	0003      	movs	r3, r0
 8002768:	469c      	mov	ip, r3
 800276a:	4b84      	ldr	r3, [pc, #528]	; (800297c <main+0x3d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a75      	ldr	r2, [pc, #468]	; (8002944 <main+0x39c>)
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4985      	ldr	r1, [pc, #532]	; (8002988 <main+0x3e0>)
 8002774:	4883      	ldr	r0, [pc, #524]	; (8002984 <main+0x3dc>)
 8002776:	9205      	str	r2, [sp, #20]
 8002778:	9304      	str	r3, [sp, #16]
 800277a:	4663      	mov	r3, ip
 800277c:	9303      	str	r3, [sp, #12]
 800277e:	9602      	str	r6, [sp, #8]
 8002780:	9400      	str	r4, [sp, #0]
 8002782:	9501      	str	r5, [sp, #4]
 8002784:	4642      	mov	r2, r8
 8002786:	f009 fd77 	bl	800c278 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800278a:	4a74      	ldr	r2, [pc, #464]	; (800295c <main+0x3b4>)
 800278c:	497f      	ldr	r1, [pc, #508]	; (800298c <main+0x3e4>)
 800278e:	486f      	ldr	r0, [pc, #444]	; (800294c <main+0x3a4>)
 8002790:	4b7c      	ldr	r3, [pc, #496]	; (8002984 <main+0x3dc>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	23d9      	movs	r3, #217	; 0xd9
 8002796:	f009 fd6f 	bl	800c278 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800279a:	4b6c      	ldr	r3, [pc, #432]	; (800294c <main+0x3a4>)
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fc9d 	bl	80030dc <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <main+0x3a8>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <main+0x3a8>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f007 f97f 	bl	8009ab0 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027b2:	4b71      	ldr	r3, [pc, #452]	; (8002978 <main+0x3d0>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	b291      	uxth	r1, r2
 80027ba:	4a6f      	ldr	r2, [pc, #444]	; (8002978 <main+0x3d0>)
 80027bc:	8011      	strh	r1, [r2, #0]
 80027be:	4a71      	ldr	r2, [pc, #452]	; (8002984 <main+0x3dc>)
 80027c0:	0011      	movs	r1, r2
 80027c2:	0018      	movs	r0, r3
 80027c4:	f007 f90a 	bl	80099dc <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027c8:	4b66      	ldr	r3, [pc, #408]	; (8002964 <main+0x3bc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f007 fb47 	bl	8009e60 <my_rtc_set_alarm>
 80027d2:	1e03      	subs	r3, r0, #0
 80027d4:	d00e      	beq.n	80027f4 <main+0x24c>
	  {
		  my_sys_deepsleep () ;
 80027d6:	f000 fd73 	bl	80032c0 <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027da:	e00b      	b.n	80027f4 <main+0x24c>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027dc:	4a5f      	ldr	r2, [pc, #380]	; (800295c <main+0x3b4>)
 80027de:	4965      	ldr	r1, [pc, #404]	; (8002974 <main+0x3cc>)
 80027e0:	485a      	ldr	r0, [pc, #360]	; (800294c <main+0x3a4>)
 80027e2:	23eb      	movs	r3, #235	; 0xeb
 80027e4:	f009 fd48 	bl	800c278 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027e8:	4b58      	ldr	r3, [pc, #352]	; (800294c <main+0x3a4>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 fc76 	bl	80030dc <send_debug_logs>
		  my_astro_handle_evt () ;
 80027f0:	f007 f91c 	bl	8009a2c <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80027f4:	f001 f962 	bl	8003abc <my_astro_evt_pin>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d1ef      	bne.n	80027dc <main+0x234>
	  }
	  if ( astro_rcv_cmd_flag )
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <main+0x3e8>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <main+0x26c>
	  {
		  astro_rcv_cmd_flag = false ;
 8002804:	4b62      	ldr	r3, [pc, #392]	; (8002990 <main+0x3e8>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 800280a:	f000 fe2b 	bl	8003464 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 800280e:	4b61      	ldr	r3, [pc, #388]	; (8002994 <main+0x3ec>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002814:	4b55      	ldr	r3, [pc, #340]	; (800296c <main+0x3c4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <main+0x276>
 800281c:	e085      	b.n	800292a <main+0x382>
	  {
		  my_rtc_alarm_flag = false ;
 800281e:	4b53      	ldr	r3, [pc, #332]	; (800296c <main+0x3c4>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002824:	f001 f87e 	bl	8003924 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002828:	4b49      	ldr	r3, [pc, #292]	; (8002950 <main+0x3a8>)
 800282a:	0018      	movs	r0, r3
 800282c:	f007 f950 	bl	8009ad0 <my_gnss_acq_coordinates>
 8002830:	0003      	movs	r3, r0
 8002832:	001a      	movs	r2, r3
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <main+0x3ac>)
 8002836:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002838:	f001 f88e 	bl	8003958 <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800283c:	4b46      	ldr	r3, [pc, #280]	; (8002958 <main+0x3b0>)
 800283e:	0018      	movs	r0, r3
 8002840:	f007 facc 	bl	8009ddc <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002844:	4b42      	ldr	r3, [pc, #264]	; (8002950 <main+0x3a8>)
 8002846:	7c1b      	ldrb	r3, [r3, #16]
 8002848:	001e      	movs	r6, r3
 800284a:	4b41      	ldr	r3, [pc, #260]	; (8002950 <main+0x3a8>)
 800284c:	689c      	ldr	r4, [r3, #8]
 800284e:	68dd      	ldr	r5, [r3, #12]
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <main+0x3a8>)
 8002852:	8a5b      	ldrh	r3, [r3, #18]
 8002854:	4698      	mov	r8, r3
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <main+0x3a8>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	213c      	movs	r1, #60	; 0x3c
 800285c:	0018      	movs	r0, r3
 800285e:	f7fd fc6d 	bl	800013c <__udivsi3>
 8002862:	0003      	movs	r3, r0
 8002864:	4a3d      	ldr	r2, [pc, #244]	; (800295c <main+0x3b4>)
 8002866:	493e      	ldr	r1, [pc, #248]	; (8002960 <main+0x3b8>)
 8002868:	4838      	ldr	r0, [pc, #224]	; (800294c <main+0x3a4>)
 800286a:	9305      	str	r3, [sp, #20]
 800286c:	4643      	mov	r3, r8
 800286e:	9304      	str	r3, [sp, #16]
 8002870:	9402      	str	r4, [sp, #8]
 8002872:	9503      	str	r5, [sp, #12]
 8002874:	9601      	str	r6, [sp, #4]
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <main+0x3b0>)
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	23fc      	movs	r3, #252	; 0xfc
 800287c:	f009 fcfc 	bl	800c278 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <main+0x3a4>)
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fc2a 	bl	80030dc <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <main+0x3ac>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d04c      	beq.n	800292a <main+0x382>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 8002890:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <main+0x3a8>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <main+0x3a8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0019      	movs	r1, r3
 800289a:	0010      	movs	r0, r2
 800289c:	f007 f908 	bl	8009ab0 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <main+0x3d0>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	4698      	mov	r8, r3
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <main+0x3a8>)
 80028a8:	689c      	ldr	r4, [r3, #8]
 80028aa:	68dd      	ldr	r5, [r3, #12]
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <main+0x3a8>)
 80028ae:	8a5b      	ldrh	r3, [r3, #18]
 80028b0:	001e      	movs	r6, r3
 80028b2:	4b27      	ldr	r3, [pc, #156]	; (8002950 <main+0x3a8>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	213c      	movs	r1, #60	; 0x3c
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fc3f 	bl	800013c <__udivsi3>
 80028be:	0003      	movs	r3, r0
 80028c0:	469c      	mov	ip, r3
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <main+0x3a8>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <main+0x3a8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4933      	ldr	r1, [pc, #204]	; (8002998 <main+0x3f0>)
 80028cc:	482d      	ldr	r0, [pc, #180]	; (8002984 <main+0x3dc>)
 80028ce:	9305      	str	r3, [sp, #20]
 80028d0:	9204      	str	r2, [sp, #16]
 80028d2:	4663      	mov	r3, ip
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	9602      	str	r6, [sp, #8]
 80028d8:	9400      	str	r4, [sp, #0]
 80028da:	9501      	str	r5, [sp, #4]
 80028dc:	4642      	mov	r2, r8
 80028de:	f009 fccb 	bl	800c278 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80028e2:	4b25      	ldr	r3, [pc, #148]	; (8002978 <main+0x3d0>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	b291      	uxth	r1, r2
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <main+0x3d0>)
 80028ec:	8011      	strh	r1, [r2, #0]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <main+0x3dc>)
 80028f0:	0011      	movs	r1, r2
 80028f2:	0018      	movs	r0, r3
 80028f4:	f007 f872 	bl	80099dc <my_astro_add_payload_2_queue>
			  if ( my_astro_payload_id == 0 )
 80028f8:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <main+0x3d0>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <main+0x364>
				  my_astro_payload_id++ ;
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <main+0x3d0>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <main+0x3d0>)
 800290a:	801a      	strh	r2, [r3, #0]
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 800290c:	2306      	movs	r3, #6
 800290e:	33ff      	adds	r3, #255	; 0xff
 8002910:	001c      	movs	r4, r3
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <main+0x3b4>)
 8002914:	491d      	ldr	r1, [pc, #116]	; (800298c <main+0x3e4>)
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <main+0x3a4>)
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <main+0x3dc>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	0023      	movs	r3, r4
 800291e:	f009 fcab 	bl	800c278 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <main+0x3a4>)
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fbd9 	bl	80030dc <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <main+0x3bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0018      	movs	r0, r3
 8002930:	f007 fa96 	bl	8009e60 <my_rtc_set_alarm>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d100      	bne.n	800293a <main+0x392>
 8002938:	e75c      	b.n	80027f4 <main+0x24c>
	  {
		  my_sys_deepsleep () ;
 800293a:	f000 fcc1 	bl	80032c0 <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 800293e:	e759      	b.n	80027f4 <main+0x24c>
 8002940:	20000000 	.word	0x20000000
 8002944:	20000a22 	.word	0x20000a22
 8002948:	08012e74 	.word	0x08012e74
 800294c:	20000b10 	.word	0x20000b10
 8002950:	20000ae8 	.word	0x20000ae8
 8002954:	20000b01 	.word	0x20000b01
 8002958:	20000a24 	.word	0x20000a24
 800295c:	08012e84 	.word	0x08012e84
 8002960:	08012e98 	.word	0x08012e98
 8002964:	2000000c 	.word	0x2000000c
 8002968:	08012ed8 	.word	0x08012ed8
 800296c:	20000b00 	.word	0x20000b00
 8002970:	08012ef8 	.word	0x08012ef8
 8002974:	08012f04 	.word	0x08012f04
 8002978:	20000a38 	.word	0x20000a38
 800297c:	20000004 	.word	0x20000004
 8002980:	08012f1c 	.word	0x08012f1c
 8002984:	20000a3c 	.word	0x20000a3c
 8002988:	08012f30 	.word	0x08012f30
 800298c:	08012f48 	.word	0x08012f48
 8002990:	20000c0a 	.word	0x20000c0a
 8002994:	20000c0c 	.word	0x20000c0c
 8002998:	08012f5c 	.word	0x08012f5c

0800299c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b095      	sub	sp, #84	; 0x54
 80029a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a2:	2414      	movs	r4, #20
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	233c      	movs	r3, #60	; 0x3c
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f009 fcf9 	bl	800c3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	0018      	movs	r0, r3
 80029b6:	2310      	movs	r3, #16
 80029b8:	001a      	movs	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	f009 fcf2 	bl	800c3a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f002 f96b 	bl	8004ca0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029ca:	f002 f909 	bl	8004be0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <SystemClock_Config+0xa8>)
 80029d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <SystemClock_Config+0xa8>)
 80029d4:	2118      	movs	r1, #24
 80029d6:	438a      	bics	r2, r1
 80029d8:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2206      	movs	r2, #6
 80029de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	2201      	movs	r2, #1
 80029e4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	0018      	movs	r0, r3
 8002a04:	f002 f998 	bl	8004d38 <HAL_RCC_OscConfig>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d001      	beq.n	8002a10 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a0c:	f001 f8ca 	bl	8003ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2207      	movs	r2, #7
 8002a14:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 fce3 	bl	80053f8 <HAL_RCC_ClockConfig>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a36:	f001 f8b5 	bl	8003ba4 <Error_Handler>
  }
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b015      	add	sp, #84	; 0x54
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40021000 	.word	0x40021000

08002a48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b090      	sub	sp, #64	; 0x40
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a4e:	232c      	movs	r3, #44	; 0x2c
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	0018      	movs	r0, r3
 8002a54:	2314      	movs	r3, #20
 8002a56:	001a      	movs	r2, r3
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f009 fca3 	bl	800c3a4 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a5e:	2328      	movs	r3, #40	; 0x28
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a66:	003b      	movs	r3, r7
 8002a68:	0018      	movs	r0, r3
 8002a6a:	2328      	movs	r3, #40	; 0x28
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f009 fc98 	bl	800c3a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a74:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a76:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <MX_RTC_Init+0x144>)
 8002a78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a80:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a82:	227f      	movs	r2, #127	; 0x7f
 8002a84:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a86:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a8c:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <MX_RTC_Init+0x140>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <MX_RTC_Init+0x140>)
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	05d2      	lsls	r2, r2, #23
 8002aa4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <MX_RTC_Init+0x140>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <MX_RTC_Init+0x140>)
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f003 f888 	bl	8005bc4 <HAL_RTC_Init>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002ab8:	f001 f874 	bl	8003ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ae2:	1879      	adds	r1, r7, r1
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <MX_RTC_Init+0x140>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f003 f90d 	bl	8005d08 <HAL_RTC_SetTime>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002af2:	f001 f857 	bl	8003ba4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002af6:	2128      	movs	r1, #40	; 0x28
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2206      	movs	r2, #6
 8002afc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2201      	movs	r2, #1
 8002b02:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2201      	movs	r2, #1
 8002b08:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b10:	1879      	adds	r1, r7, r1
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <MX_RTC_Init+0x140>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f003 f9fa 	bl	8005f10 <HAL_RTC_SetDate>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b20:	f001 f840 	bl	8003ba4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b24:	003b      	movs	r3, r7
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b42:	003b      	movs	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b62:	003b      	movs	r3, r7
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0052      	lsls	r2, r2, #1
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b6a:	0039      	movs	r1, r7
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <MX_RTC_Init+0x140>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	0018      	movs	r0, r3
 8002b72:	f003 faad 	bl	80060d0 <HAL_RTC_SetAlarm_IT>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d001      	beq.n	8002b7e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b7a:	f001 f813 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b010      	add	sp, #64	; 0x40
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	200006f4 	.word	0x200006f4
 8002b8c:	40002800 	.word	0x40002800

08002b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b96:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <MX_SPI1_Init+0x78>)
 8002b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002b9c:	2282      	movs	r2, #130	; 0x82
 8002b9e:	0052      	lsls	r2, r2, #1
 8002ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002baa:	22e0      	movs	r2, #224	; 0xe0
 8002bac:	00d2      	lsls	r2, r2, #3
 8002bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bde:	2207      	movs	r2, #7
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bea:	2208      	movs	r2, #8
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <MX_SPI1_Init+0x74>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f003 fd4d 	bl	8006690 <HAL_SPI_Init>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bfa:	f000 ffd3 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000720 	.word	0x20000720
 8002c08:	40013000 	.word	0x40013000

08002c0c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	0018      	movs	r0, r3
 8002c16:	230c      	movs	r3, #12
 8002c18:	001a      	movs	r2, r3
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f009 fbc2 	bl	800c3a4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <MX_TIM6_Init+0x70>)
 8002c24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c28:	4a15      	ldr	r2, [pc, #84]	; (8002c80 <MX_TIM6_Init+0x74>)
 8002c2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <MX_TIM6_Init+0x78>)
 8002c36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c40:	0018      	movs	r0, r3
 8002c42:	f003 fddd 	bl	8006800 <HAL_TIM_Base_Init>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c4a:	f000 ffab 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c5a:	1d3a      	adds	r2, r7, #4
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <MX_TIM6_Init+0x6c>)
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f004 f875 	bl	8006d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002c66:	1e03      	subs	r3, r0, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c6a:	f000 ff9b 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000784 	.word	0x20000784
 8002c7c:	40001000 	.word	0x40001000
 8002c80:	00003e7f 	.word	0x00003e7f
 8002c84:	000003e7 	.word	0x000003e7

08002c88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <MX_USART1_UART_Init+0x98>)
 8002c90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002c94:	22e1      	movs	r2, #225	; 0xe1
 8002c96:	0252      	lsls	r2, r2, #9
 8002c98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cae:	220c      	movs	r2, #12
 8002cb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb8:	4b18      	ldr	r3, [pc, #96]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f004 f8ca 	bl	8006e6c <HAL_UART_Init>
 8002cd8:	1e03      	subs	r3, r0, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002cdc:	f000 ff62 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f005 f8a5 	bl	8007e34 <HAL_UARTEx_SetTxFifoThreshold>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cee:	f000 ff59 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f005 f8dc 	bl	8007eb4 <HAL_UARTEx_SetRxFifoThreshold>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d00:	f000 ff50 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <MX_USART1_UART_Init+0x94>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f005 f85a 	bl	8007dc0 <HAL_UARTEx_DisableFifoMode>
 8002d0c:	1e03      	subs	r3, r0, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d10:	f000 ff48 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	200007d0 	.word	0x200007d0
 8002d20:	40013800 	.word	0x40013800

08002d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d2a:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <MX_USART2_UART_Init+0x98>)
 8002d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d30:	22e1      	movs	r2, #225	; 0xe1
 8002d32:	0252      	lsls	r2, r2, #9
 8002d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d54:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f004 f87c 	bl	8006e6c <HAL_UART_Init>
 8002d74:	1e03      	subs	r3, r0, #0
 8002d76:	d001      	beq.n	8002d7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d78:	f000 ff14 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	0018      	movs	r0, r3
 8002d82:	f005 f857 	bl	8007e34 <HAL_UARTEx_SetTxFifoThreshold>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d8a:	f000 ff0b 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002d90:	2100      	movs	r1, #0
 8002d92:	0018      	movs	r0, r3
 8002d94:	f005 f88e 	bl	8007eb4 <HAL_UARTEx_SetRxFifoThreshold>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d9c:	f000 ff02 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <MX_USART2_UART_Init+0x94>)
 8002da2:	0018      	movs	r0, r3
 8002da4:	f005 f80c 	bl	8007dc0 <HAL_UARTEx_DisableFifoMode>
 8002da8:	1e03      	subs	r3, r0, #0
 8002daa:	d001      	beq.n	8002db0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002dac:	f000 fefa 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	20000864 	.word	0x20000864
 8002dbc:	40004400 	.word	0x40004400

08002dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dc6:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <MX_USART3_UART_Init+0x98>)
 8002dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dca:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dcc:	2296      	movs	r2, #150	; 0x96
 8002dce:	0192      	lsls	r2, r2, #6
 8002dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002de6:	220c      	movs	r2, #12
 8002de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e02:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f004 f82e 	bl	8006e6c <HAL_UART_Init>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e14:	f000 fec6 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f005 f809 	bl	8007e34 <HAL_UARTEx_SetTxFifoThreshold>
 8002e22:	1e03      	subs	r3, r0, #0
 8002e24:	d001      	beq.n	8002e2a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e26:	f000 febd 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f005 f840 	bl	8007eb4 <HAL_UARTEx_SetRxFifoThreshold>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e38:	f000 feb4 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <MX_USART3_UART_Init+0x94>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f004 ffbe 	bl	8007dc0 <HAL_UARTEx_DisableFifoMode>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e48:	f000 feac 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	200008f8 	.word	0x200008f8
 8002e58:	40004800 	.word	0x40004800

08002e5c <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <MX_USART5_UART_Init+0x64>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e68:	2296      	movs	r2, #150	; 0x96
 8002e6a:	0192      	lsls	r2, r2, #6
 8002e6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e82:	220c      	movs	r2, #12
 8002e84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <MX_USART5_UART_Init+0x60>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f003 ffe0 	bl	8006e6c <HAL_UART_Init>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002eb0:	f000 fe78 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	2000098c 	.word	0x2000098c
 8002ec0:	40005000 	.word	0x40005000

08002ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b08b      	sub	sp, #44	; 0x2c
 8002ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eca:	2414      	movs	r4, #20
 8002ecc:	193b      	adds	r3, r7, r4
 8002ece:	0018      	movs	r0, r3
 8002ed0:	2314      	movs	r3, #20
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	f009 fa65 	bl	800c3a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eda:	4b7a      	ldr	r3, [pc, #488]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ede:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee6:	4b77      	ldr	r3, [pc, #476]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2204      	movs	r2, #4
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	4b74      	ldr	r3, [pc, #464]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
 8002efe:	4b71      	ldr	r3, [pc, #452]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	4b6e      	ldr	r3, [pc, #440]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f10:	2102      	movs	r1, #2
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	4b6b      	ldr	r3, [pc, #428]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f22:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f26:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f28:	2108      	movs	r1, #8
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f2e:	4b65      	ldr	r3, [pc, #404]	; (80030c4 <MX_GPIO_Init+0x200>)
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	2208      	movs	r2, #8
 8002f34:	4013      	ands	r3, r2
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f3a:	23a0      	movs	r3, #160	; 0xa0
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2110      	movs	r1, #16
 8002f42:	0018      	movs	r0, r3
 8002f44:	f001 fdfb 	bl	8004b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f48:	495f      	ldr	r1, [pc, #380]	; (80030c8 <MX_GPIO_Init+0x204>)
 8002f4a:	4b60      	ldr	r3, [pc, #384]	; (80030cc <MX_GPIO_Init+0x208>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fdf5 	bl	8004b3e <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	485c      	ldr	r0, [pc, #368]	; (80030cc <MX_GPIO_Init+0x208>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	f001 fdee 	bl	8004b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <MX_GPIO_Init+0x20c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	2103      	movs	r1, #3
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f001 fde8 	bl	8004b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f74:	193b      	adds	r3, r7, r4
 8002f76:	2288      	movs	r2, #136	; 0x88
 8002f78:	0352      	lsls	r2, r2, #13
 8002f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f82:	193a      	adds	r2, r7, r4
 8002f84:	23a0      	movs	r3, #160	; 0xa0
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	0011      	movs	r1, r2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f001 fb76 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f90:	193b      	adds	r3, r7, r4
 8002f92:	2202      	movs	r2, #2
 8002f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	2200      	movs	r2, #0
 8002f9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	193a      	adds	r2, r7, r4
 8002fa4:	23a0      	movs	r3, #160	; 0xa0
 8002fa6:	05db      	lsls	r3, r3, #23
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f001 fb66 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fb0:	193b      	adds	r3, r7, r4
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb6:	193b      	adds	r3, r7, r4
 8002fb8:	2201      	movs	r2, #1
 8002fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	193a      	adds	r2, r7, r4
 8002fca:	23a0      	movs	r3, #160	; 0xa0
 8002fcc:	05db      	lsls	r3, r3, #23
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f001 fb53 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	4a3e      	ldr	r2, [pc, #248]	; (80030d4 <MX_GPIO_Init+0x210>)
 8002fda:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	2201      	movs	r2, #1
 8002fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	4a36      	ldr	r2, [pc, #216]	; (80030cc <MX_GPIO_Init+0x208>)
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	f001 fb41 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8002ffa:	0021      	movs	r1, r4
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003002:	187b      	adds	r3, r7, r1
 8003004:	2288      	movs	r2, #136	; 0x88
 8003006:	0352      	lsls	r2, r2, #13
 8003008:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	187b      	adds	r3, r7, r1
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	000c      	movs	r4, r1
 8003012:	187b      	adds	r3, r7, r1
 8003014:	4a2d      	ldr	r2, [pc, #180]	; (80030cc <MX_GPIO_Init+0x208>)
 8003016:	0019      	movs	r1, r3
 8003018:	0010      	movs	r0, r2
 800301a:	f001 fb2f 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800301e:	0021      	movs	r1, r4
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	0192      	lsls	r2, r2, #6
 8003026:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003028:	000c      	movs	r4, r1
 800302a:	193b      	adds	r3, r7, r4
 800302c:	2211      	movs	r2, #17
 800302e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	193b      	adds	r3, r7, r4
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2200      	movs	r2, #0
 800303a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 800303c:	193b      	adds	r3, r7, r4
 800303e:	4a23      	ldr	r2, [pc, #140]	; (80030cc <MX_GPIO_Init+0x208>)
 8003040:	0019      	movs	r1, r3
 8003042:	0010      	movs	r0, r2
 8003044:	f001 fb1a 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <MX_GPIO_Init+0x214>)
 800304c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304e:	193b      	adds	r3, r7, r4
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	193b      	adds	r3, r7, r4
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	193b      	adds	r3, r7, r4
 800305c:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <MX_GPIO_Init+0x208>)
 800305e:	0019      	movs	r1, r3
 8003060:	0010      	movs	r0, r2
 8003062:	f001 fb0b 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003066:	193b      	adds	r3, r7, r4
 8003068:	2203      	movs	r2, #3
 800306a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	2201      	movs	r2, #1
 8003070:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	193b      	adds	r3, r7, r4
 800307a:	2200      	movs	r2, #0
 800307c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800307e:	193b      	adds	r3, r7, r4
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <MX_GPIO_Init+0x20c>)
 8003082:	0019      	movs	r1, r3
 8003084:	0010      	movs	r0, r2
 8003086:	f001 faf9 	bl	800467c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800308a:	0021      	movs	r1, r4
 800308c:	187b      	adds	r3, r7, r1
 800308e:	220c      	movs	r2, #12
 8003090:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003092:	187b      	adds	r3, r7, r1
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003098:	187b      	adds	r3, r7, r1
 800309a:	2201      	movs	r2, #1
 800309c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <MX_GPIO_Init+0x20c>)
 80030a2:	0019      	movs	r1, r3
 80030a4:	0010      	movs	r0, r2
 80030a6:	f001 fae9 	bl	800467c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2100      	movs	r1, #0
 80030ae:	2006      	movs	r0, #6
 80030b0:	f001 faae 	bl	8004610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030b4:	2006      	movs	r0, #6
 80030b6:	f001 fac0 	bl	800463a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b00b      	add	sp, #44	; 0x2c
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40021000 	.word	0x40021000
 80030c8:	0000a403 	.word	0x0000a403
 80030cc:	50000400 	.word	0x50000400
 80030d0:	50000c00 	.word	0x50000c00
 80030d4:	00008c03 	.word	0x00008c03
 80030d8:	00004040 	.word	0x00004040

080030dc <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd f80c 	bl	8000104 <strlen>
 80030ec:	0003      	movs	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2bfa      	cmp	r3, #250	; 0xfa
 80030f4:	d908      	bls.n	8003108 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 80030f6:	23fa      	movs	r3, #250	; 0xfa
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	490d      	ldr	r1, [pc, #52]	; (8003130 <send_debug_logs+0x54>)
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <send_debug_logs+0x58>)
 80030fe:	222a      	movs	r2, #42	; 0x2a
 8003100:	f003 ff4a 	bl	8006f98 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8003104:	23fa      	movs	r3, #250	; 0xfa
 8003106:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	b29a      	uxth	r2, r3
 800310c:	23fa      	movs	r3, #250	; 0xfa
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4808      	ldr	r0, [pc, #32]	; (8003134 <send_debug_logs+0x58>)
 8003114:	f003 ff40 	bl	8006f98 <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003118:	23fa      	movs	r3, #250	; 0xfa
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4906      	ldr	r1, [pc, #24]	; (8003138 <send_debug_logs+0x5c>)
 800311e:	4805      	ldr	r0, [pc, #20]	; (8003134 <send_debug_logs+0x58>)
 8003120:	2201      	movs	r2, #1
 8003122:	f003 ff39 	bl	8006f98 <HAL_UART_Transmit>
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	08012f74 	.word	0x08012f74
 8003134:	20000864 	.word	0x20000864
 8003138:	08012fa0 	.word	0x08012fa0

0800313c <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <my_sys_init+0x114>)
 8003142:	2200      	movs	r2, #0
 8003144:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <my_sys_init+0x114>)
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <my_sys_init+0x118>)
 800314e:	2104      	movs	r1, #4
 8003150:	0018      	movs	r0, r3
 8003152:	f001 fcd7 	bl	8004b04 <HAL_GPIO_ReadPin>
 8003156:	0003      	movs	r3, r0
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	4193      	sbcs	r3, r2
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <my_sys_init+0x11c>)
 8003160:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 8003162:	4b3c      	ldr	r3, [pc, #240]	; (8003254 <my_sys_init+0x118>)
 8003164:	2108      	movs	r1, #8
 8003166:	0018      	movs	r0, r3
 8003168:	f001 fccc 	bl	8004b04 <HAL_GPIO_ReadPin>
 800316c:	0003      	movs	r3, r0
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	4193      	sbcs	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <my_sys_init+0x120>)
 8003176:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003178:	4b37      	ldr	r3, [pc, #220]	; (8003258 <my_sys_init+0x11c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2201      	movs	r2, #1
 800317e:	4053      	eors	r3, r2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d019      	beq.n	80031ba <my_sys_init+0x7e>
 8003186:	4b35      	ldr	r3, [pc, #212]	; (800325c <my_sys_init+0x120>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	4053      	eors	r3, r2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d012      	beq.n	80031ba <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <my_sys_init+0x124>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 800319a:	4b32      	ldr	r3, [pc, #200]	; (8003264 <my_sys_init+0x128>)
 800319c:	22e1      	movs	r2, #225	; 0xe1
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <my_sys_init+0x12c>)
 80031a4:	2278      	movs	r2, #120	; 0x78
 80031a6:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <my_sys_init+0x130>)
 80031aa:	221e      	movs	r2, #30
 80031ac:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031ae:	4930      	ldr	r1, [pc, #192]	; (8003270 <my_sys_init+0x134>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	05db      	lsls	r3, r3, #23
 80031b6:	600a      	str	r2, [r1, #0]
 80031b8:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 80031ba:	4b27      	ldr	r3, [pc, #156]	; (8003258 <my_sys_init+0x11c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <my_sys_init+0xba>
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <my_sys_init+0x120>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4053      	eors	r3, r2
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <my_sys_init+0x124>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <my_sys_init+0x128>)
 80031d8:	22e1      	movs	r2, #225	; 0xe1
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <my_sys_init+0x12c>)
 80031e0:	2278      	movs	r2, #120	; 0x78
 80031e2:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <my_sys_init+0x130>)
 80031e6:	221e      	movs	r2, #30
 80031e8:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031ea:	4921      	ldr	r1, [pc, #132]	; (8003270 <my_sys_init+0x134>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	600a      	str	r2, [r1, #0]
 80031f4:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <my_sys_init+0x11c>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2201      	movs	r2, #1
 80031fc:	4053      	eors	r3, r2
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d016      	beq.n	8003232 <my_sys_init+0xf6>
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <my_sys_init+0x120>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <my_sys_init+0x124>)
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <my_sys_init+0x128>)
 8003214:	2296      	movs	r2, #150	; 0x96
 8003216:	0052      	lsls	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <my_sys_init+0x12c>)
 800321c:	2296      	movs	r2, #150	; 0x96
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <my_sys_init+0x130>)
 8003224:	223c      	movs	r2, #60	; 0x3c
 8003226:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003228:	4911      	ldr	r1, [pc, #68]	; (8003270 <my_sys_init+0x134>)
 800322a:	2200      	movs	r2, #0
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <my_sys_init+0x138>)
 800322e:	600a      	str	r2, [r1, #0]
 8003230:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <my_sys_init+0x11c>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <my_sys_init+0x10c>
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <my_sys_init+0x120>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <my_sys_init+0x124>)
 8003244:	2203      	movs	r2, #3
 8003246:	701a      	strb	r2, [r3, #0]
	}
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	20000ae8 	.word	0x20000ae8
 8003254:	50000c00 	.word	0x50000c00
 8003258:	20000a20 	.word	0x20000a20
 800325c:	20000a21 	.word	0x20000a21
 8003260:	20000a22 	.word	0x20000a22
 8003264:	2000000c 	.word	0x2000000c
 8003268:	2000001a 	.word	0x2000001a
 800326c:	2000001c 	.word	0x2000001c
 8003270:	20000020 	.word	0x20000020
 8003274:	40240000 	.word	0x40240000

08003278 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <my_sys_restart+0x34>)
 8003280:	0018      	movs	r0, r3
 8003282:	f006 fdab 	bl	8009ddc <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003286:	4c0a      	ldr	r4, [pc, #40]	; (80032b0 <my_sys_restart+0x38>)
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <my_sys_restart+0x3c>)
 800328a:	490b      	ldr	r1, [pc, #44]	; (80032b8 <my_sys_restart+0x40>)
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <my_sys_restart+0x44>)
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <my_sys_restart+0x34>)
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	0023      	movs	r3, r4
 8003294:	f008 fff0 	bl	800c278 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <my_sys_restart+0x44>)
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff ff1e 	bl	80030dc <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 80032a0:	f001 f9db 	bl	800465a <HAL_NVIC_SystemReset>
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b001      	add	sp, #4
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	20000a24 	.word	0x20000a24
 80032b0:	0000033d 	.word	0x0000033d
 80032b4:	08012e84 	.word	0x08012e84
 80032b8:	08012fa4 	.word	0x08012fa4
 80032bc:	20000b10 	.word	0x20000b10

080032c0 <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80032c6:	23d4      	movs	r3, #212	; 0xd4
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <my_sys_deepsleep+0x68>)
 80032cc:	4917      	ldr	r1, [pc, #92]	; (800332c <my_sys_deepsleep+0x6c>)
 80032ce:	4818      	ldr	r0, [pc, #96]	; (8003330 <my_sys_deepsleep+0x70>)
 80032d0:	f008 ffd2 	bl	800c278 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <my_sys_deepsleep+0x70>)
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff ff00 	bl	80030dc <send_debug_logs>
	my_tim_stop () ;
 80032dc:	f000 fc1c 	bl	8003b18 <my_tim_stop>
	HAL_SuspendTick () ;
 80032e0:	f001 f8a6 	bl	8004430 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <my_sys_deepsleep+0x74>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	01db      	lsls	r3, r3, #7
 80032ee:	2102      	movs	r1, #2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f001 fc83 	bl	8004bfc <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 80032f6:	f001 f8a9 	bl	800444c <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <my_sys_deepsleep+0x78>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f006 fd6d 	bl	8009ddc <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003302:	23d6      	movs	r3, #214	; 0xd6
 8003304:	009c      	lsls	r4, r3, #2
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <my_sys_deepsleep+0x68>)
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <my_sys_deepsleep+0x7c>)
 800330a:	4809      	ldr	r0, [pc, #36]	; (8003330 <my_sys_deepsleep+0x70>)
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <my_sys_deepsleep+0x78>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	0023      	movs	r3, r4
 8003312:	f008 ffb1 	bl	800c278 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <my_sys_deepsleep+0x70>)
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fedf 	bl	80030dc <send_debug_logs>
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b001      	add	sp, #4
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	08012e84 	.word	0x08012e84
 800332c:	08012fe4 	.word	0x08012fe4
 8003330:	20000b10 	.word	0x20000b10
 8003334:	20000b00 	.word	0x20000b00
 8003338:	20000a24 	.word	0x20000a24
 800333c:	08013018 	.word	0x08013018

08003340 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	2396      	movs	r3, #150	; 0x96
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	429a      	cmp	r2, r3
 8003350:	d30b      	bcc.n	800336a <my_sys_change_watchdog_time_ths+0x2a>
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	23e1      	movs	r3, #225	; 0xe1
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	429a      	cmp	r2, r3
 800335a:	d806      	bhi.n	800336a <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	b29a      	uxth	r2, r3
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <my_sys_change_watchdog_time_ths+0x34>)
 8003362:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <my_sys_change_watchdog_time_ths+0x38>)
 8003366:	2201      	movs	r2, #1
 8003368:	721a      	strb	r2, [r3, #8]
	}
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	20000008 	.word	0x20000008
 8003378:	20000adc 	.word	0x20000adc

0800337c <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	2396      	movs	r3, #150	; 0x96
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	429a      	cmp	r2, r3
 800338c:	d309      	bcc.n	80033a2 <my_sys_change_AlarmA_time+0x26>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a06      	ldr	r2, [pc, #24]	; (80033ac <my_sys_change_AlarmA_time+0x30>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d805      	bhi.n	80033a2 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <my_sys_change_AlarmA_time+0x34>)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <my_sys_change_AlarmA_time+0x38>)
 800339e:	2201      	movs	r2, #1
 80033a0:	721a      	strb	r2, [r3, #8]
	}
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b002      	add	sp, #8
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	0083d600 	.word	0x0083d600
 80033b0:	2000000c 	.word	0x2000000c
 80033b4:	20000adc 	.word	0x20000adc

080033b8 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b2c      	cmp	r3, #44	; 0x2c
 80033c4:	d90b      	bls.n	80033de <my_sys_change_fix_acq_ths+0x26>
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	2396      	movs	r3, #150	; 0x96
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d806      	bhi.n	80033de <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <my_sys_change_fix_acq_ths+0x30>)
 80033d6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <my_sys_change_fix_acq_ths+0x34>)
 80033da:	2201      	movs	r2, #1
 80033dc:	721a      	strb	r2, [r3, #8]
	}
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	2000001a 	.word	0x2000001a
 80033ec:	20000adc 	.word	0x20000adc

080033f0 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b0e      	cmp	r3, #14
 80033fc:	d90b      	bls.n	8003416 <my_sys_change_min_tns_time_ths+0x26>
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	2396      	movs	r3, #150	; 0x96
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d806      	bhi.n	8003416 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	b29a      	uxth	r2, r3
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <my_sys_change_min_tns_time_ths+0x30>)
 800340e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <my_sys_change_min_tns_time_ths+0x34>)
 8003412:	2201      	movs	r2, #1
 8003414:	721a      	strb	r2, [r3, #8]
	}
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	2000001c 	.word	0x2000001c
 8003424:	20000adc 	.word	0x20000adc

08003428 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <my_sys_change_pdop_ths+0x2a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b64      	cmp	r3, #100	; 0x64
 800343a:	d80a      	bhi.n	8003452 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe ffdd 	bl	80023fc <__aeabi_ui2d>
 8003442:	0002      	movs	r2, r0
 8003444:	000b      	movs	r3, r1
 8003446:	4905      	ldr	r1, [pc, #20]	; (800345c <my_sys_change_pdop_ths+0x34>)
 8003448:	600a      	str	r2, [r1, #0]
 800344a:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <my_sys_change_pdop_ths+0x38>)
 800344e:	2201      	movs	r2, #1
 8003450:	721a      	strb	r2, [r3, #8]
	}
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	20000020 	.word	0x20000020
 8003460:	20000adc 	.word	0x20000adc

08003464 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	46d6      	mov	lr, sl
 8003468:	464f      	mov	r7, r9
 800346a:	4646      	mov	r6, r8
 800346c:	b5c0      	push	{r6, r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 8003472:	4bcf      	ldr	r3, [pc, #828]	; (80037b0 <my_tracker_handle_cmd+0x34c>)
 8003474:	0018      	movs	r0, r3
 8003476:	f007 fbc1 	bl	800abfc <my_tracker_api_is_cmd>
 800347a:	1e03      	subs	r3, r0, #0
 800347c:	d100      	bne.n	8003480 <my_tracker_handle_cmd+0x1c>
 800347e:	e207      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003480:	4acb      	ldr	r2, [pc, #812]	; (80037b0 <my_tracker_handle_cmd+0x34c>)
 8003482:	4bcc      	ldr	r3, [pc, #816]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f007 fc22 	bl	800acd0 <my_tracker_api_parse_cmd>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d100      	bne.n	8003492 <my_tracker_handle_cmd+0x2e>
 8003490:	e1fe      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
		{
			switch ( my_astro_cmd.code )
 8003492:	4bc8      	ldr	r3, [pc, #800]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b09      	cmp	r3, #9
 8003498:	d900      	bls.n	800349c <my_tracker_handle_cmd+0x38>
 800349a:	e1b5      	b.n	8003808 <my_tracker_handle_cmd+0x3a4>
 800349c:	009a      	lsls	r2, r3, #2
 800349e:	4bc6      	ldr	r3, [pc, #792]	; (80037b8 <my_tracker_handle_cmd+0x354>)
 80034a0:	18d3      	adds	r3, r2, r3
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 80034a6:	4bc3      	ldr	r3, [pc, #780]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7ff ff48 	bl	8003340 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034b0:	4bc2      	ldr	r3, [pc, #776]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	001c      	movs	r4, r3
 80034b6:	4bbf      	ldr	r3, [pc, #764]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80034b8:	7a1b      	ldrb	r3, [r3, #8]
 80034ba:	001d      	movs	r5, r3
 80034bc:	4bbd      	ldr	r3, [pc, #756]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	001a      	movs	r2, r3
 80034c2:	4bbc      	ldr	r3, [pc, #752]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	49be      	ldr	r1, [pc, #760]	; (80037c0 <my_tracker_handle_cmd+0x35c>)
 80034c8:	48be      	ldr	r0, [pc, #760]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	002b      	movs	r3, r5
 80034d0:	0022      	movs	r2, r4
 80034d2:	f008 fed1 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034d6:	4cbc      	ldr	r4, [pc, #752]	; (80037c8 <my_tracker_handle_cmd+0x364>)
 80034d8:	4abc      	ldr	r2, [pc, #752]	; (80037cc <my_tracker_handle_cmd+0x368>)
 80034da:	49bd      	ldr	r1, [pc, #756]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 80034dc:	48bd      	ldr	r0, [pc, #756]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80034de:	4bb9      	ldr	r3, [pc, #740]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	0023      	movs	r3, r4
 80034e4:	f008 fec8 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034e8:	4bba      	ldr	r3, [pc, #744]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7ff fdf6 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80034f0:	4bb2      	ldr	r3, [pc, #712]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	b291      	uxth	r1, r2
 80034f8:	4ab0      	ldr	r2, [pc, #704]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80034fa:	8011      	strh	r1, [r2, #0]
 80034fc:	4ab1      	ldr	r2, [pc, #708]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f006 fa6b 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 8003506:	4bad      	ldr	r3, [pc, #692]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d000      	beq.n	8003510 <my_tracker_handle_cmd+0xac>
 800350e:	e1b2      	b.n	8003876 <my_tracker_handle_cmd+0x412>
					  my_astro_payload_id++ ;
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	4ba8      	ldr	r3, [pc, #672]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800351a:	801a      	strh	r2, [r3, #0]
				  break ;
 800351c:	e1ab      	b.n	8003876 <my_tracker_handle_cmd+0x412>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 800351e:	4ba5      	ldr	r3, [pc, #660]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff ff2a 	bl	800337c <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003528:	4ba4      	ldr	r3, [pc, #656]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	001c      	movs	r4, r3
 800352e:	4ba1      	ldr	r3, [pc, #644]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003530:	7a1b      	ldrb	r3, [r3, #8]
 8003532:	001d      	movs	r5, r3
 8003534:	4b9f      	ldr	r3, [pc, #636]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	001a      	movs	r2, r3
 800353a:	4b9e      	ldr	r3, [pc, #632]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	49a0      	ldr	r1, [pc, #640]	; (80037c0 <my_tracker_handle_cmd+0x35c>)
 8003540:	48a0      	ldr	r0, [pc, #640]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	002b      	movs	r3, r5
 8003548:	0022      	movs	r2, r4
 800354a:	f008 fe95 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800354e:	23e6      	movs	r3, #230	; 0xe6
 8003550:	009c      	lsls	r4, r3, #2
 8003552:	4a9e      	ldr	r2, [pc, #632]	; (80037cc <my_tracker_handle_cmd+0x368>)
 8003554:	499e      	ldr	r1, [pc, #632]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 8003556:	489f      	ldr	r0, [pc, #636]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 8003558:	4b9a      	ldr	r3, [pc, #616]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	0023      	movs	r3, r4
 800355e:	f008 fe8b 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003562:	4b9c      	ldr	r3, [pc, #624]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff fdb9 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 800356a:	4b94      	ldr	r3, [pc, #592]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	b291      	uxth	r1, r2
 8003572:	4a92      	ldr	r2, [pc, #584]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003574:	8011      	strh	r1, [r2, #0]
 8003576:	4a93      	ldr	r2, [pc, #588]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003578:	0011      	movs	r1, r2
 800357a:	0018      	movs	r0, r3
 800357c:	f006 fa2e 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 8003580:	4b8e      	ldr	r3, [pc, #568]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d000      	beq.n	800358a <my_tracker_handle_cmd+0x126>
 8003588:	e177      	b.n	800387a <my_tracker_handle_cmd+0x416>
					  my_astro_payload_id++ ;
 800358a:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b8a      	ldr	r3, [pc, #552]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003594:	801a      	strh	r2, [r3, #0]
				  break ;
 8003596:	e170      	b.n	800387a <my_tracker_handle_cmd+0x416>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 8003598:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff ff0b 	bl	80033b8 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035a2:	4b86      	ldr	r3, [pc, #536]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	001c      	movs	r4, r3
 80035a8:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80035aa:	7a1b      	ldrb	r3, [r3, #8]
 80035ac:	001d      	movs	r5, r3
 80035ae:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	001a      	movs	r2, r3
 80035b4:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4981      	ldr	r1, [pc, #516]	; (80037c0 <my_tracker_handle_cmd+0x35c>)
 80035ba:	4882      	ldr	r0, [pc, #520]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	9200      	str	r2, [sp, #0]
 80035c0:	002b      	movs	r3, r5
 80035c2:	0022      	movs	r2, r4
 80035c4:	f008 fe58 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035c8:	4c83      	ldr	r4, [pc, #524]	; (80037d8 <my_tracker_handle_cmd+0x374>)
 80035ca:	4a80      	ldr	r2, [pc, #512]	; (80037cc <my_tracker_handle_cmd+0x368>)
 80035cc:	4980      	ldr	r1, [pc, #512]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 80035ce:	4881      	ldr	r0, [pc, #516]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80035d0:	4b7c      	ldr	r3, [pc, #496]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	0023      	movs	r3, r4
 80035d6:	f008 fe4f 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035da:	4b7e      	ldr	r3, [pc, #504]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fd7d 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	b291      	uxth	r1, r2
 80035ea:	4a74      	ldr	r2, [pc, #464]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80035ec:	8011      	strh	r1, [r2, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f006 f9f2 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d000      	beq.n	8003602 <my_tracker_handle_cmd+0x19e>
 8003600:	e13d      	b.n	800387e <my_tracker_handle_cmd+0x41a>
					  my_astro_payload_id++ ;
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800360c:	801a      	strh	r2, [r3, #0]
				  break ;
 800360e:	e136      	b.n	800387e <my_tracker_handle_cmd+0x41a>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 8003610:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff feeb 	bl	80033f0 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800361a:	4b68      	ldr	r3, [pc, #416]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	001c      	movs	r4, r3
 8003620:	4b64      	ldr	r3, [pc, #400]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003622:	7a1b      	ldrb	r3, [r3, #8]
 8003624:	001d      	movs	r5, r3
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	001a      	movs	r2, r3
 800362c:	4b61      	ldr	r3, [pc, #388]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4963      	ldr	r1, [pc, #396]	; (80037c0 <my_tracker_handle_cmd+0x35c>)
 8003632:	4864      	ldr	r0, [pc, #400]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	9200      	str	r2, [sp, #0]
 8003638:	002b      	movs	r3, r5
 800363a:	0022      	movs	r2, r4
 800363c:	f008 fe1c 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003640:	4c66      	ldr	r4, [pc, #408]	; (80037dc <my_tracker_handle_cmd+0x378>)
 8003642:	4a62      	ldr	r2, [pc, #392]	; (80037cc <my_tracker_handle_cmd+0x368>)
 8003644:	4962      	ldr	r1, [pc, #392]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 8003646:	4863      	ldr	r0, [pc, #396]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 8003648:	4b5e      	ldr	r3, [pc, #376]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	0023      	movs	r3, r4
 800364e:	f008 fe13 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003652:	4b60      	ldr	r3, [pc, #384]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fd41 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	b291      	uxth	r1, r2
 8003662:	4a56      	ldr	r2, [pc, #344]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003664:	8011      	strh	r1, [r2, #0]
 8003666:	4a57      	ldr	r2, [pc, #348]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003668:	0011      	movs	r1, r2
 800366a:	0018      	movs	r0, r3
 800366c:	f006 f9b6 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 8003670:	4b52      	ldr	r3, [pc, #328]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d000      	beq.n	800367a <my_tracker_handle_cmd+0x216>
 8003678:	e103      	b.n	8003882 <my_tracker_handle_cmd+0x41e>
					  my_astro_payload_id++ ;
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	3301      	adds	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003684:	801a      	strh	r2, [r3, #0]
				  break ;
 8003686:	e0fc      	b.n	8003882 <my_tracker_handle_cmd+0x41e>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 8003688:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff fecb 	bl	8003428 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003692:	4b4a      	ldr	r3, [pc, #296]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	001c      	movs	r4, r3
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 800369a:	7a1b      	ldrb	r3, [r3, #8]
 800369c:	001d      	movs	r5, r3
 800369e:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	001a      	movs	r2, r3
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4945      	ldr	r1, [pc, #276]	; (80037c0 <my_tracker_handle_cmd+0x35c>)
 80036aa:	4846      	ldr	r0, [pc, #280]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	002b      	movs	r3, r5
 80036b2:	0022      	movs	r2, r4
 80036b4:	f008 fde0 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80036b8:	4c49      	ldr	r4, [pc, #292]	; (80037e0 <my_tracker_handle_cmd+0x37c>)
 80036ba:	4a44      	ldr	r2, [pc, #272]	; (80037cc <my_tracker_handle_cmd+0x368>)
 80036bc:	4944      	ldr	r1, [pc, #272]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 80036be:	4845      	ldr	r0, [pc, #276]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80036c0:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	0023      	movs	r3, r4
 80036c6:	f008 fdd7 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80036ca:	4b42      	ldr	r3, [pc, #264]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7ff fd05 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	b291      	uxth	r1, r2
 80036da:	4a38      	ldr	r2, [pc, #224]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80036dc:	8011      	strh	r1, [r2, #0]
 80036de:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 80036e0:	0011      	movs	r1, r2
 80036e2:	0018      	movs	r0, r3
 80036e4:	f006 f97a 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d000      	beq.n	80036f2 <my_tracker_handle_cmd+0x28e>
 80036f0:	e0c9      	b.n	8003886 <my_tracker_handle_cmd+0x422>
					  my_astro_payload_id++ ;
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <my_tracker_handle_cmd+0x358>)
 80036fc:	801a      	strh	r2, [r3, #0]
				  break ;
 80036fe:	e0c2      	b.n	8003886 <my_tracker_handle_cmd+0x422>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d000      	beq.n	800370a <my_tracker_handle_cmd+0x2a6>
 8003708:	e0bf      	b.n	800388a <my_tracker_handle_cmd+0x426>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , my_astro_payload_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	469a      	mov	sl, r3
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <my_tracker_handle_cmd+0x380>)
 8003712:	681d      	ldr	r5, [r3, #0]
 8003714:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <my_tracker_handle_cmd+0x384>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	001e      	movs	r6, r3
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <my_tracker_handle_cmd+0x388>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	469c      	mov	ip, r3
 8003720:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <my_tracker_handle_cmd+0x38c>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <my_tracker_handle_cmd+0x390>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	4698      	mov	r8, r3
 800372a:	4b33      	ldr	r3, [pc, #204]	; (80037f8 <my_tracker_handle_cmd+0x394>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	4699      	mov	r9, r3
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <my_tracker_handle_cmd+0x398>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4c32      	ldr	r4, [pc, #200]	; (8003800 <my_tracker_handle_cmd+0x39c>)
 8003738:	4822      	ldr	r0, [pc, #136]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 800373a:	9206      	str	r2, [sp, #24]
 800373c:	9307      	str	r3, [sp, #28]
 800373e:	464b      	mov	r3, r9
 8003740:	9304      	str	r3, [sp, #16]
 8003742:	4643      	mov	r3, r8
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	9102      	str	r1, [sp, #8]
 8003748:	4663      	mov	r3, ip
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	9600      	str	r6, [sp, #0]
 800374e:	002b      	movs	r3, r5
 8003750:	4652      	mov	r2, sl
 8003752:	0021      	movs	r1, r4
 8003754:	f008 fd90 	bl	800c278 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003758:	4c2a      	ldr	r4, [pc, #168]	; (8003804 <my_tracker_handle_cmd+0x3a0>)
 800375a:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <my_tracker_handle_cmd+0x368>)
 800375c:	491c      	ldr	r1, [pc, #112]	; (80037d0 <my_tracker_handle_cmd+0x36c>)
 800375e:	481d      	ldr	r0, [pc, #116]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 8003760:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	0023      	movs	r3, r4
 8003766:	f008 fd87 	bl	800c278 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 800376a:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <my_tracker_handle_cmd+0x370>)
 800376c:	0018      	movs	r0, r3
 800376e:	f7ff fcb5 	bl	80030dc <send_debug_logs>
					  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	b291      	uxth	r1, r2
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800377c:	8011      	strh	r1, [r2, #0]
 800377e:	4a11      	ldr	r2, [pc, #68]	; (80037c4 <my_tracker_handle_cmd+0x360>)
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f006 f92a 	bl	80099dc <my_astro_add_payload_2_queue>
					  if ( my_astro_payload_id == 0 )
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d000      	beq.n	8003792 <my_tracker_handle_cmd+0x32e>
 8003790:	e07b      	b.n	800388a <my_tracker_handle_cmd+0x426>
						  my_astro_payload_id++ ;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <my_tracker_handle_cmd+0x358>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <my_tracker_handle_cmd+0x358>)
 800379c:	801a      	strh	r2, [r3, #0]
				  }
				  break ;
 800379e:	e074      	b.n	800388a <my_tracker_handle_cmd+0x426>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <my_tracker_handle_cmd+0x350>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d000      	beq.n	80037aa <my_tracker_handle_cmd+0x346>
 80037a8:	e071      	b.n	800388e <my_tracker_handle_cmd+0x42a>
					  my_sys_restart () ;
 80037aa:	f7ff fd65 	bl	8003278 <my_sys_restart>
				  break ;
 80037ae:	e06e      	b.n	800388e <my_tracker_handle_cmd+0x42a>
 80037b0:	20000c0c 	.word	0x20000c0c
 80037b4:	20000adc 	.word	0x20000adc
 80037b8:	080149e0 	.word	0x080149e0
 80037bc:	20000a38 	.word	0x20000a38
 80037c0:	0801303c 	.word	0x0801303c
 80037c4:	20000a3c 	.word	0x20000a3c
 80037c8:	0000038f 	.word	0x0000038f
 80037cc:	08012e84 	.word	0x08012e84
 80037d0:	08012f48 	.word	0x08012f48
 80037d4:	20000b10 	.word	0x20000b10
 80037d8:	000003a1 	.word	0x000003a1
 80037dc:	000003aa 	.word	0x000003aa
 80037e0:	000003b3 	.word	0x000003b3
 80037e4:	20000004 	.word	0x20000004
 80037e8:	20000a22 	.word	0x20000a22
 80037ec:	20000008 	.word	0x20000008
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	2000001a 	.word	0x2000001a
 80037f8:	2000001c 	.word	0x2000001c
 80037fc:	20000020 	.word	0x20000020
 8003800:	0801304c 	.word	0x0801304c
 8003804:	000003bd 	.word	0x000003bd
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , my_astro_payload_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	001c      	movs	r4, r3
 800380e:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <my_tracker_handle_cmd+0x440>)
 8003810:	7a1b      	ldrb	r3, [r3, #8]
 8003812:	001d      	movs	r5, r3
 8003814:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <my_tracker_handle_cmd+0x440>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	001a      	movs	r2, r3
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <my_tracker_handle_cmd+0x440>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4922      	ldr	r1, [pc, #136]	; (80038a8 <my_tracker_handle_cmd+0x444>)
 8003820:	4822      	ldr	r0, [pc, #136]	; (80038ac <my_tracker_handle_cmd+0x448>)
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	9200      	str	r2, [sp, #0]
 8003826:	002b      	movs	r3, r5
 8003828:	0022      	movs	r2, r4
 800382a:	f008 fd25 	bl	800c278 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800382e:	4c20      	ldr	r4, [pc, #128]	; (80038b0 <my_tracker_handle_cmd+0x44c>)
 8003830:	4a20      	ldr	r2, [pc, #128]	; (80038b4 <my_tracker_handle_cmd+0x450>)
 8003832:	4921      	ldr	r1, [pc, #132]	; (80038b8 <my_tracker_handle_cmd+0x454>)
 8003834:	4821      	ldr	r0, [pc, #132]	; (80038bc <my_tracker_handle_cmd+0x458>)
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <my_tracker_handle_cmd+0x448>)
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	0023      	movs	r3, r4
 800383c:	f008 fd1c 	bl	800c278 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003840:	4b1e      	ldr	r3, [pc, #120]	; (80038bc <my_tracker_handle_cmd+0x458>)
 8003842:	0018      	movs	r0, r3
 8003844:	f7ff fc4a 	bl	80030dc <send_debug_logs>
				  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 8003848:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	b291      	uxth	r1, r2
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 8003852:	8011      	strh	r1, [r2, #0]
 8003854:	4a15      	ldr	r2, [pc, #84]	; (80038ac <my_tracker_handle_cmd+0x448>)
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f006 f8bf 	bl	80099dc <my_astro_add_payload_2_queue>
				  if ( my_astro_payload_id == 0 )
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <my_tracker_handle_cmd+0x40e>
					  my_astro_payload_id++ ;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	3301      	adds	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <my_tracker_handle_cmd+0x43c>)
 8003870:	801a      	strh	r2, [r3, #0]
				  return false ;
 8003872:	2300      	movs	r3, #0
 8003874:	e00d      	b.n	8003892 <my_tracker_handle_cmd+0x42e>
				  break ;
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	e00a      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	e008      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	e006      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	e004      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	e002      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	e000      	b.n	8003890 <my_tracker_handle_cmd+0x42c>
				  break ;
 800388e:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 8003890:	2301      	movs	r3, #1
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	bce0      	pop	{r5, r6, r7}
 8003898:	46ba      	mov	sl, r7
 800389a:	46b1      	mov	r9, r6
 800389c:	46a8      	mov	r8, r5
 800389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a0:	20000a38 	.word	0x20000a38
 80038a4:	20000adc 	.word	0x20000adc
 80038a8:	0801303c 	.word	0x0801303c
 80038ac:	20000a3c 	.word	0x20000a3c
 80038b0:	000003cb 	.word	0x000003cb
 80038b4:	08012e84 	.word	0x08012e84
 80038b8:	08012f48 	.word	0x08012f48
 80038bc:	20000b10 	.word	0x20000b10

080038c0 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	0002      	movs	r2, r0
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d10e      	bne.n	80038f2 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4811      	ldr	r0, [pc, #68]	; (8003920 <my_ant_sw_pos+0x60>)
 80038da:	2200      	movs	r2, #0
 80038dc:	0019      	movs	r1, r3
 80038de:	f001 f92e 	bl	8004b3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	480e      	ldr	r0, [pc, #56]	; (8003920 <my_ant_sw_pos+0x60>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	0019      	movs	r1, r3
 80038ec:	f001 f927 	bl	8004b3e <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80038f0:	e011      	b.n	8003916 <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d10d      	bne.n	8003916 <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4808      	ldr	r0, [pc, #32]	; (8003920 <my_ant_sw_pos+0x60>)
 8003900:	2201      	movs	r2, #1
 8003902:	0019      	movs	r1, r3
 8003904:	f001 f91b 	bl	8004b3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <my_ant_sw_pos+0x60>)
 800390e:	2200      	movs	r2, #0
 8003910:	0019      	movs	r1, r3
 8003912:	f001 f914 	bl	8004b3e <HAL_GPIO_WritePin>
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b002      	add	sp, #8
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	50000400 	.word	0x50000400

08003924 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 8003928:	2001      	movs	r0, #1
 800392a:	f7ff ffc9 	bl	80038c0 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	4808      	ldr	r0, [pc, #32]	; (8003954 <my_gnss_sw_on+0x30>)
 8003934:	2201      	movs	r2, #1
 8003936:	0019      	movs	r1, r3
 8003938:	f001 f901 	bl	8004b3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	019b      	lsls	r3, r3, #6
 8003940:	4804      	ldr	r0, [pc, #16]	; (8003954 <my_gnss_sw_on+0x30>)
 8003942:	2201      	movs	r2, #1
 8003944:	0019      	movs	r1, r3
 8003946:	f001 f8fa 	bl	8004b3e <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800394a:	f7ff fa87 	bl	8002e5c <MX_USART5_UART_Init>
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	50000400 	.word	0x50000400

08003958 <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 800395c:	2002      	movs	r0, #2
 800395e:	f7ff ffaf 	bl	80038c0 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <my_gnss_sw_off+0x3c>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d811      	bhi.n	800398e <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	480a      	ldr	r0, [pc, #40]	; (8003998 <my_gnss_sw_off+0x40>)
 8003970:	2200      	movs	r2, #0
 8003972:	0019      	movs	r1, r3
 8003974:	f001 f8e3 	bl	8004b3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	019b      	lsls	r3, r3, #6
 800397c:	4806      	ldr	r0, [pc, #24]	; (8003998 <my_gnss_sw_off+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	0019      	movs	r1, r3
 8003982:	f001 f8dc 	bl	8004b3e <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <my_gnss_sw_off+0x44>)
 8003988:	0018      	movs	r0, r3
 800398a:	f003 fac5 	bl	8006f18 <HAL_UART_DeInit>
	}
}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000a22 	.word	0x20000a22
 8003998:	50000400 	.word	0x50000400
 800399c:	2000098c 	.word	0x2000098c

080039a0 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	000a      	movs	r2, r1
 80039aa:	1cfb      	adds	r3, r7, #3
 80039ac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 80039ae:	23fa      	movs	r3, #250	; 0xfa
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4809      	ldr	r0, [pc, #36]	; (80039dc <my_gnss_receive_byte+0x3c>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	f003 fb92 	bl	80070e0 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <my_gnss_receive_byte+0x40>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d006      	beq.n	80039d2 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 80039c4:	23fa      	movs	r3, #250	; 0xfa
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4806      	ldr	r0, [pc, #24]	; (80039e4 <my_gnss_receive_byte+0x44>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	f003 fae3 	bl	8006f98 <HAL_UART_Transmit>
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b002      	add	sp, #8
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	2000098c 	.word	0x2000098c
 80039e0:	20000a22 	.word	0x20000a22
 80039e4:	20000864 	.word	0x20000864

080039e8 <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <my_astronode_reset+0x30>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	2102      	movs	r1, #2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f001 f8a3 	bl	8004b3e <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80039f8:	2001      	movs	r0, #1
 80039fa:	f000 fcf5 	bl	80043e8 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <my_astronode_reset+0x30>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	2102      	movs	r1, #2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f001 f89a 	bl	8004b3e <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8003a0a:	20fa      	movs	r0, #250	; 0xfa
 8003a0c:	f000 fcec 	bl	80043e8 <HAL_Delay>
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	50000400 	.word	0x50000400

08003a1c <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <send_astronode_request+0x34>)
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff fb57 	bl	80030dc <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f7ff fb53 	bl	80030dc <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	23fa      	movs	r3, #250	; 0xfa
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4804      	ldr	r0, [pc, #16]	; (8003a54 <send_astronode_request+0x38>)
 8003a42:	f003 faa9 	bl	8006f98 <HAL_UART_Transmit>
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	08013070 	.word	0x08013070
 8003a54:	200008f8 	.word	0x200008f8

08003a58 <get_systick>:
uint32_t get_systick ( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003a5c:	f000 fcba 	bl	80043d4 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	000a      	movs	r2, r1
 8003a72:	1cbb      	adds	r3, r7, #2
 8003a74:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003a76:	f7ff ffef 	bl	8003a58 <get_systick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	1cba      	adds	r2, r7, #2
 8003a82:	8812      	ldrh	r2, [r2, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	419b      	sbcs	r3, r3
 8003a88:	425b      	negs	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <is_astronode_character_received+0x24>)
 8003aa0:	2364      	movs	r3, #100	; 0x64
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f003 fb1c 	bl	80070e0 <HAL_UART_Receive>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	425a      	negs	r2, r3
 8003aac:	4153      	adcs	r3, r2
 8003aae:	b2db      	uxtb	r3, r3
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200008f8 	.word	0x200008f8

08003abc <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <my_astro_evt_pin+0x20>)
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f001 f81d 	bl	8004b04 <HAL_GPIO_ReadPin>
 8003aca:	0003      	movs	r3, r0
 8003acc:	3b01      	subs	r3, #1
 8003ace:	425a      	negs	r2, r3
 8003ad0:	4153      	adcs	r3, r2
 8003ad2:	b2db      	uxtb	r3, r3
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	50000400 	.word	0x50000400

08003ae0 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <my_tim_init+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4252      	negs	r2, r2
 8003aec:	611a      	str	r2, [r3, #16]
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000784 	.word	0x20000784

08003af8 <my_tim_start>:

void my_tim_start ()
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <my_tim_start+0x18>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <my_tim_start+0x1c>)
 8003b04:	0018      	movs	r0, r3
 8003b06:	f002 fed3 	bl	80068b0 <HAL_TIM_Base_Start_IT>
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000c34 	.word	0x20000c34
 8003b14:	20000784 	.word	0x20000784

08003b18 <my_tim_stop>:

void my_tim_stop ()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <my_tim_stop+0x14>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f002 ff28 	bl	8006974 <HAL_TIM_Base_Stop_IT>
}
 8003b24:	46c0      	nop			; (mov r8, r8)
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	20000784 	.word	0x20000784

08003b30 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	3301      	adds	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b4c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d901      	bls.n	8003b5e <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003b5a:	f7ff fb8d 	bl	8003278 <my_sys_restart>
	}
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	40001000 	.word	0x40001000
 8003b6c:	20000c34 	.word	0x20000c34
 8003b70:	20000008 	.word	0x20000008

08003b74 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_RTC_AlarmAEventCallback+0x18>)
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20000b00 	.word	0x20000b00

08003b90 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	0002      	movs	r2, r0
 8003b98:	1dbb      	adds	r3, r7, #6
 8003b9a:	801a      	strh	r2, [r3, #0]

}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba8:	b672      	cpsid	i
}
 8003baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bac:	e7fe      	b.n	8003bac <Error_Handler+0x8>
	...

08003bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	0549      	lsls	r1, r1, #21
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_MspInit+0x4c>)
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	055b      	lsls	r3, r3, #21
 8003be4:	4013      	ands	r3, r2
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003bea:	23c0      	movs	r3, #192	; 0xc0
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 fc3a 	bl	8004468 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b097      	sub	sp, #92	; 0x5c
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c08:	240c      	movs	r4, #12
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	234c      	movs	r3, #76	; 0x4c
 8003c10:	001a      	movs	r2, r3
 8003c12:	2100      	movs	r1, #0
 8003c14:	f008 fbc6 	bl	800c3a4 <memset>
  if(hrtc->Instance==RTC)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a19      	ldr	r2, [pc, #100]	; (8003c84 <HAL_RTC_MspInit+0x84>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d12c      	bne.n	8003c7c <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	0292      	lsls	r2, r2, #10
 8003c28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003c2a:	193b      	adds	r3, r7, r4
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	0052      	lsls	r2, r2, #1
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	0018      	movs	r0, r3
 8003c36:	f001 fd89 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8003c3a:	1e03      	subs	r3, r0, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003c3e:	f7ff ffb1 	bl	8003ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c42:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_RTC_MspInit+0x88>)
 8003c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <HAL_RTC_MspInit+0x88>)
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0209      	lsls	r1, r1, #8
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <HAL_RTC_MspInit+0x88>)
 8003c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_RTC_MspInit+0x88>)
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	00c9      	lsls	r1, r1, #3
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <HAL_RTC_MspInit+0x88>)
 8003c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c62:	2380      	movs	r3, #128	; 0x80
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4013      	ands	r3, r2
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2103      	movs	r1, #3
 8003c70:	2002      	movs	r0, #2
 8003c72:	f000 fccd 	bl	8004610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003c76:	2002      	movs	r0, #2
 8003c78:	f000 fcdf 	bl	800463a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b017      	add	sp, #92	; 0x5c
 8003c82:	bd90      	pop	{r4, r7, pc}
 8003c84:	40002800 	.word	0x40002800
 8003c88:	40021000 	.word	0x40021000

08003c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b08b      	sub	sp, #44	; 0x2c
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	2414      	movs	r4, #20
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	2314      	movs	r3, #20
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f008 fb80 	bl	800c3a4 <memset>
  if(hspi->Instance==SPI1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_SPI_MspInit+0x8c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d130      	bne.n	8003d10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	0149      	lsls	r1, r1, #5
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	015b      	lsls	r3, r3, #5
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_SPI_MspInit+0x90>)
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003ce2:	0021      	movs	r1, r4
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	22e0      	movs	r2, #224	; 0xe0
 8003ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2202      	movs	r2, #2
 8003cee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d02:	187a      	adds	r2, r7, r1
 8003d04:	23a0      	movs	r3, #160	; 0xa0
 8003d06:	05db      	lsls	r3, r3, #23
 8003d08:	0011      	movs	r1, r2
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 fcb6 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b00b      	add	sp, #44	; 0x2c
 8003d16:	bd90      	pop	{r4, r7, pc}
 8003d18:	40013000 	.word	0x40013000
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <HAL_TIM_Base_MspInit+0x44>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d113      	bne.n	8003d5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_TIM_Base_MspInit+0x48>)
 8003d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <HAL_TIM_Base_MspInit+0x48>)
 8003d38:	2110      	movs	r1, #16
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_TIM_Base_MspInit+0x48>)
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2210      	movs	r2, #16
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	2011      	movs	r0, #17
 8003d50:	f000 fc5e 	bl	8004610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003d54:	2011      	movs	r0, #17
 8003d56:	f000 fc70 	bl	800463a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b004      	add	sp, #16
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40001000 	.word	0x40001000
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b0a3      	sub	sp, #140	; 0x8c
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	2374      	movs	r3, #116	; 0x74
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	0018      	movs	r0, r3
 8003d7a:	2314      	movs	r3, #20
 8003d7c:	001a      	movs	r2, r3
 8003d7e:	2100      	movs	r1, #0
 8003d80:	f008 fb10 	bl	800c3a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d84:	2428      	movs	r4, #40	; 0x28
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	0018      	movs	r0, r3
 8003d8a:	234c      	movs	r3, #76	; 0x4c
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f008 fb08 	bl	800c3a4 <memset>
  if(huart->Instance==USART1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a84      	ldr	r2, [pc, #528]	; (8003fac <HAL_UART_MspInit+0x240>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d140      	bne.n	8003e20 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d9e:	193b      	adds	r3, r7, r4
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003da4:	193b      	adds	r3, r7, r4
 8003da6:	2200      	movs	r2, #0
 8003da8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003daa:	193b      	adds	r3, r7, r4
 8003dac:	0018      	movs	r0, r3
 8003dae:	f001 fccd 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003db6:	f7ff fef5 	bl	8003ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dbe:	4b7c      	ldr	r3, [pc, #496]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	01c9      	lsls	r1, r1, #7
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8003dc8:	4b79      	ldr	r3, [pc, #484]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd6:	4b76      	ldr	r3, [pc, #472]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dda:	4b75      	ldr	r3, [pc, #468]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	635a      	str	r2, [r3, #52]	; 0x34
 8003de2:	4b73      	ldr	r3, [pc, #460]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	2201      	movs	r2, #1
 8003de8:	4013      	ands	r3, r2
 8003dea:	623b      	str	r3, [r7, #32]
 8003dec:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003dee:	2174      	movs	r1, #116	; 0x74
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	22c0      	movs	r2, #192	; 0xc0
 8003df4:	00d2      	lsls	r2, r2, #3
 8003df6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e10:	187a      	adds	r2, r7, r1
 8003e12:	23a0      	movs	r3, #160	; 0xa0
 8003e14:	05db      	lsls	r3, r3, #23
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 fc2f 	bl	800467c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003e1e:	e0c0      	b.n	8003fa2 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a63      	ldr	r2, [pc, #396]	; (8003fb4 <HAL_UART_MspInit+0x248>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d140      	bne.n	8003eac <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e2a:	2128      	movs	r1, #40	; 0x28
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2202      	movs	r2, #2
 8003e30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f001 fc86 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003e44:	f7ff feae 	bl	8003ba4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e48:	4b59      	ldr	r3, [pc, #356]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	4b58      	ldr	r3, [pc, #352]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0289      	lsls	r1, r1, #10
 8003e52:	430a      	orrs	r2, r1
 8003e54:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e56:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	029b      	lsls	r3, r3, #10
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e64:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e68:	4b51      	ldr	r3, [pc, #324]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	2201      	movs	r2, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003e7c:	2174      	movs	r1, #116	; 0x74
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	220c      	movs	r2, #12
 8003e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	2202      	movs	r2, #2
 8003e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e90:	187b      	adds	r3, r7, r1
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	2201      	movs	r2, #1
 8003e9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	187a      	adds	r2, r7, r1
 8003e9e:	23a0      	movs	r3, #160	; 0xa0
 8003ea0:	05db      	lsls	r3, r3, #23
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 fbe9 	bl	800467c <HAL_GPIO_Init>
}
 8003eaa:	e07a      	b.n	8003fa2 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a41      	ldr	r2, [pc, #260]	; (8003fb8 <HAL_UART_MspInit+0x24c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d140      	bne.n	8003f38 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003eb6:	2128      	movs	r1, #40	; 0x28
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2204      	movs	r2, #4
 8003ebc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f001 fc40 	bl	800574c <HAL_RCCEx_PeriphCLKConfig>
 8003ecc:	1e03      	subs	r3, r0, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003ed0:	f7ff fe68 	bl	8003ba4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ed4:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	02c9      	lsls	r1, r1, #11
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	02db      	lsls	r3, r3, #11
 8003eea:	4013      	ands	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003ef6:	2102      	movs	r1, #2
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	635a      	str	r2, [r3, #52]	; 0x34
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	2202      	movs	r2, #2
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003f08:	2174      	movs	r1, #116	; 0x74
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	22c0      	movs	r2, #192	; 0xc0
 8003f0e:	0092      	lsls	r2, r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	2202      	movs	r2, #2
 8003f16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	2204      	movs	r2, #4
 8003f28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_UART_MspInit+0x250>)
 8003f2e:	0019      	movs	r1, r3
 8003f30:	0010      	movs	r0, r2
 8003f32:	f000 fba3 	bl	800467c <HAL_GPIO_Init>
}
 8003f36:	e034      	b.n	8003fa2 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_UART_MspInit+0x254>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d12f      	bne.n	8003fa2 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0049      	lsls	r1, r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f50:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f54:	2380      	movs	r3, #128	; 0x80
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	4b13      	ldr	r3, [pc, #76]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f64:	2102      	movs	r1, #2
 8003f66:	430a      	orrs	r2, r1
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <HAL_UART_MspInit+0x244>)
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003f76:	2174      	movs	r1, #116	; 0x74
 8003f78:	187b      	adds	r3, r7, r1
 8003f7a:	2218      	movs	r2, #24
 8003f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	2202      	movs	r2, #2
 8003f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	187b      	adds	r3, r7, r1
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8a:	187b      	adds	r3, r7, r1
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	2203      	movs	r2, #3
 8003f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_UART_MspInit+0x250>)
 8003f9a:	0019      	movs	r1, r3
 8003f9c:	0010      	movs	r0, r2
 8003f9e:	f000 fb6d 	bl	800467c <HAL_GPIO_Init>
}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	b023      	add	sp, #140	; 0x8c
 8003fa8:	bd90      	pop	{r4, r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40004400 	.word	0x40004400
 8003fb8:	40004800 	.word	0x40004800
 8003fbc:	50000400 	.word	0x50000400
 8003fc0:	40005000 	.word	0x40005000

08003fc4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a25      	ldr	r2, [pc, #148]	; (8004068 <HAL_UART_MspDeInit+0xa4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003fd6:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fda:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8003fdc:	4924      	ldr	r1, [pc, #144]	; (8004070 <HAL_UART_MspDeInit+0xac>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003fe2:	23c0      	movs	r3, #192	; 0xc0
 8003fe4:	00da      	lsls	r2, r3, #3
 8003fe6:	23a0      	movs	r3, #160	; 0xa0
 8003fe8:	05db      	lsls	r3, r3, #23
 8003fea:	0011      	movs	r1, r2
 8003fec:	0018      	movs	r0, r3
 8003fee:	f000 fcb1 	bl	8004954 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003ff2:	e034      	b.n	800405e <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <HAL_UART_MspDeInit+0xb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10c      	bne.n	8004018 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8004000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8004004:	491c      	ldr	r1, [pc, #112]	; (8004078 <HAL_UART_MspDeInit+0xb4>)
 8004006:	400a      	ands	r2, r1
 8004008:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 800400a:	23a0      	movs	r3, #160	; 0xa0
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	210c      	movs	r1, #12
 8004010:	0018      	movs	r0, r3
 8004012:	f000 fc9f 	bl	8004954 <HAL_GPIO_DeInit>
}
 8004016:	e022      	b.n	800405e <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_UART_MspDeInit+0xb8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8004024:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 8004028:	4915      	ldr	r1, [pc, #84]	; (8004080 <HAL_UART_MspDeInit+0xbc>)
 800402a:	400a      	ands	r2, r1
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 800402e:	23c0      	movs	r3, #192	; 0xc0
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <HAL_UART_MspDeInit+0xc0>)
 8004034:	0019      	movs	r1, r3
 8004036:	0010      	movs	r0, r2
 8004038:	f000 fc8c 	bl	8004954 <HAL_GPIO_DeInit>
}
 800403c:	e00f      	b.n	800405e <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_UART_MspDeInit+0xc4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10a      	bne.n	800405e <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 800404a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <HAL_UART_MspDeInit+0xa8>)
 800404e:	490f      	ldr	r1, [pc, #60]	; (800408c <HAL_UART_MspDeInit+0xc8>)
 8004050:	400a      	ands	r2, r1
 8004052:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_UART_MspDeInit+0xc0>)
 8004056:	2118      	movs	r1, #24
 8004058:	0018      	movs	r0, r3
 800405a:	f000 fc7b 	bl	8004954 <HAL_GPIO_DeInit>
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	46bd      	mov	sp, r7
 8004062:	b002      	add	sp, #8
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	40013800 	.word	0x40013800
 800406c:	40021000 	.word	0x40021000
 8004070:	ffffbfff 	.word	0xffffbfff
 8004074:	40004400 	.word	0x40004400
 8004078:	fffdffff 	.word	0xfffdffff
 800407c:	40004800 	.word	0x40004800
 8004080:	fffbffff 	.word	0xfffbffff
 8004084:	50000400 	.word	0x50000400
 8004088:	40005000 	.word	0x40005000
 800408c:	fffffeff 	.word	0xfffffeff

08004090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004094:	e7fe      	b.n	8004094 <NMI_Handler+0x4>

08004096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409a:	e7fe      	b.n	800409a <HardFault_Handler+0x4>

0800409c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040b4:	f000 f97c 	bl	80043b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <RTC_TAMP_IRQHandler+0x14>)
 80040c6:	0018      	movs	r0, r3
 80040c8:	f002 f942 	bl	8006350 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	200006f4 	.word	0x200006f4

080040d8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80040dc:	2004      	movs	r0, #4
 80040de:	f000 fd4b 	bl	8004b78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f002 fc6e 	bl	80069d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	20000784 	.word	0x20000784

08004100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  return 1;
 8004104:	2301      	movs	r3, #1
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_kill>:

int _kill(int pid, int sig)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004116:	f008 fa39 	bl	800c58c <__errno>
 800411a:	0003      	movs	r3, r0
 800411c:	2216      	movs	r2, #22
 800411e:	601a      	str	r2, [r3, #0]
  return -1;
 8004120:	2301      	movs	r3, #1
 8004122:	425b      	negs	r3, r3
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b002      	add	sp, #8
 800412a:	bd80      	pop	{r7, pc}

0800412c <_exit>:

void _exit (int status)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004134:	2301      	movs	r3, #1
 8004136:	425a      	negs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0011      	movs	r1, r2
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff ffe5 	bl	800410c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004142:	e7fe      	b.n	8004142 <_exit+0x16>

08004144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e00a      	b.n	800416c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004156:	e000      	b.n	800415a <_read+0x16>
 8004158:	bf00      	nop
 800415a:	0001      	movs	r1, r0
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	60ba      	str	r2, [r7, #8]
 8004162:	b2ca      	uxtb	r2, r1
 8004164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3301      	adds	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	dbf0      	blt.n	8004156 <_read+0x12>
  }

  return len;
 8004174:	687b      	ldr	r3, [r7, #4]
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	b006      	add	sp, #24
 800417c:	bd80      	pop	{r7, pc}

0800417e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e009      	b.n	80041a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	60ba      	str	r2, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	0018      	movs	r0, r3
 800419a:	e000      	b.n	800419e <_write+0x20>
 800419c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dbf1      	blt.n	8004190 <_write+0x12>
  }
  return len;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b006      	add	sp, #24
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_close>:

int _close(int file)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041be:	2301      	movs	r3, #1
 80041c0:	425b      	negs	r3, r3
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b002      	add	sp, #8
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	0192      	lsls	r2, r2, #6
 80041da:	605a      	str	r2, [r3, #4]
  return 0;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b002      	add	sp, #8
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <_isatty>:

int _isatty(int file)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041ee:	2301      	movs	r3, #1
}
 80041f0:	0018      	movs	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b004      	add	sp, #16
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <_sbrk+0x5c>)
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <_sbrk+0x60>)
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004224:	4b13      	ldr	r3, [pc, #76]	; (8004274 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <_sbrk+0x64>)
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <_sbrk+0x68>)
 8004230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <_sbrk+0x64>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d207      	bcs.n	8004250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004240:	f008 f9a4 	bl	800c58c <__errno>
 8004244:	0003      	movs	r3, r0
 8004246:	220c      	movs	r2, #12
 8004248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800424a:	2301      	movs	r3, #1
 800424c:	425b      	negs	r3, r3
 800424e:	e009      	b.n	8004264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <_sbrk+0x64>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <_sbrk+0x64>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	18d2      	adds	r2, r2, r3
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <_sbrk+0x64>)
 8004260:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20024000 	.word	0x20024000
 8004270:	00000400 	.word	0x00000400
 8004274:	20000b04 	.word	0x20000b04
 8004278:	20000f48 	.word	0x20000f48

0800427c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800428a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800428c:	f7ff fff6 	bl	800427c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004290:	480c      	ldr	r0, [pc, #48]	; (80042c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004292:	490d      	ldr	r1, [pc, #52]	; (80042c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004294:	4a0d      	ldr	r2, [pc, #52]	; (80042cc <LoopForever+0xe>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042a8:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <LoopForever+0x16>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042b6:	f008 f96f 	bl	800c598 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80042ba:	f7fe f975 	bl	80025a8 <main>

080042be <LoopForever>:

LoopForever:
  b LoopForever
 80042be:	e7fe      	b.n	80042be <LoopForever>
  ldr   r0, =_estack
 80042c0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80042c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c8:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 80042cc:	08014f40 	.word	0x08014f40
  ldr r2, =_sbss
 80042d0:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80042d4:	20000f44 	.word	0x20000f44

080042d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC1_COMP_IRQHandler>
	...

080042dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042e2:	1dfb      	adds	r3, r7, #7
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_Init+0x3c>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_Init+0x3c>)
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	0049      	lsls	r1, r1, #1
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042f6:	2003      	movs	r0, #3
 80042f8:	f000 f810 	bl	800431c <HAL_InitTick>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d003      	beq.n	8004308 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e001      	b.n	800430c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004308:	f7ff fc52 	bl	8003bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800430c:	1dfb      	adds	r3, r7, #7
 800430e:	781b      	ldrb	r3, [r3, #0]
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40022000 	.word	0x40022000

0800431c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004324:	230f      	movs	r3, #15
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_InitTick+0x88>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d02b      	beq.n	800438c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_InitTick+0x8c>)
 8004336:	681c      	ldr	r4, [r3, #0]
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <HAL_InitTick+0x88>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	0019      	movs	r1, r3
 800433e:	23fa      	movs	r3, #250	; 0xfa
 8004340:	0098      	lsls	r0, r3, #2
 8004342:	f7fb fefb 	bl	800013c <__udivsi3>
 8004346:	0003      	movs	r3, r0
 8004348:	0019      	movs	r1, r3
 800434a:	0020      	movs	r0, r4
 800434c:	f7fb fef6 	bl	800013c <__udivsi3>
 8004350:	0003      	movs	r3, r0
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f985 	bl	8004662 <HAL_SYSTICK_Config>
 8004358:	1e03      	subs	r3, r0, #0
 800435a:	d112      	bne.n	8004382 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d80a      	bhi.n	8004378 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	2301      	movs	r3, #1
 8004366:	425b      	negs	r3, r3
 8004368:	2200      	movs	r2, #0
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f950 	bl	8004610 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_InitTick+0x90>)
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e00d      	b.n	8004394 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004378:	230f      	movs	r3, #15
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e008      	b.n	8004394 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004382:	230f      	movs	r3, #15
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e003      	b.n	8004394 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004394:	230f      	movs	r3, #15
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b005      	add	sp, #20
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	20000018 	.word	0x20000018
 80043a8:	20000010 	.word	0x20000010
 80043ac:	20000014 	.word	0x20000014

080043b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_IncTick+0x1c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	001a      	movs	r2, r3
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_IncTick+0x20>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	18d2      	adds	r2, r2, r3
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_IncTick+0x20>)
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	20000018 	.word	0x20000018
 80043d0:	20000b08 	.word	0x20000b08

080043d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  return uwTick;
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <HAL_GetTick+0x10>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	0018      	movs	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000b08 	.word	0x20000b08

080043e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7ff fff0 	bl	80043d4 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	d005      	beq.n	800440e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_Delay+0x44>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	001a      	movs	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	189b      	adds	r3, r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	f7ff ffe0 	bl	80043d4 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d8f7      	bhi.n	8004410 <HAL_Delay+0x28>
  {
  }
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			; (mov r8, r8)
 800442c:	20000018 	.word	0x20000018

08004430 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <HAL_SuspendTick+0x18>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_SuspendTick+0x18>)
 800443a:	2102      	movs	r1, #2
 800443c:	438a      	bics	r2, r1
 800443e:	601a      	str	r2, [r3, #0]
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	e000e010 	.word	0xe000e010

0800444c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_ResumeTick+0x18>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_ResumeTick+0x18>)
 8004456:	2102      	movs	r1, #2
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	e000e010 	.word	0xe000e010

08004468 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a06      	ldr	r2, [pc, #24]	; (8004490 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004476:	4013      	ands	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	40010000 	.word	0x40010000
 8004490:	fffff9ff 	.word	0xfffff9ff

08004494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	0002      	movs	r2, r0
 800449c:	1dfb      	adds	r3, r7, #7
 800449e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b7f      	cmp	r3, #127	; 0x7f
 80044a6:	d809      	bhi.n	80044bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a8:	1dfb      	adds	r3, r7, #7
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	001a      	movs	r2, r3
 80044ae:	231f      	movs	r3, #31
 80044b0:	401a      	ands	r2, r3
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <__NVIC_EnableIRQ+0x30>)
 80044b4:	2101      	movs	r1, #1
 80044b6:	4091      	lsls	r1, r2
 80044b8:	000a      	movs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	e000e100 	.word	0xe000e100

080044c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	0002      	movs	r2, r0
 80044d0:	6039      	str	r1, [r7, #0]
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b7f      	cmp	r3, #127	; 0x7f
 80044dc:	d828      	bhi.n	8004530 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044de:	4a2f      	ldr	r2, [pc, #188]	; (800459c <__NVIC_SetPriority+0xd4>)
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	33c0      	adds	r3, #192	; 0xc0
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	589b      	ldr	r3, [r3, r2]
 80044ee:	1dfa      	adds	r2, r7, #7
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	0011      	movs	r1, r2
 80044f4:	2203      	movs	r2, #3
 80044f6:	400a      	ands	r2, r1
 80044f8:	00d2      	lsls	r2, r2, #3
 80044fa:	21ff      	movs	r1, #255	; 0xff
 80044fc:	4091      	lsls	r1, r2
 80044fe:	000a      	movs	r2, r1
 8004500:	43d2      	mvns	r2, r2
 8004502:	401a      	ands	r2, r3
 8004504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	401a      	ands	r2, r3
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	0018      	movs	r0, r3
 8004514:	2303      	movs	r3, #3
 8004516:	4003      	ands	r3, r0
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800451c:	481f      	ldr	r0, [pc, #124]	; (800459c <__NVIC_SetPriority+0xd4>)
 800451e:	1dfb      	adds	r3, r7, #7
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b25b      	sxtb	r3, r3
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	430a      	orrs	r2, r1
 8004528:	33c0      	adds	r3, #192	; 0xc0
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800452e:	e031      	b.n	8004594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <__NVIC_SetPriority+0xd8>)
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	0019      	movs	r1, r3
 8004538:	230f      	movs	r3, #15
 800453a:	400b      	ands	r3, r1
 800453c:	3b08      	subs	r3, #8
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	3306      	adds	r3, #6
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	18d3      	adds	r3, r2, r3
 8004546:	3304      	adds	r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	1dfa      	adds	r2, r7, #7
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	0011      	movs	r1, r2
 8004550:	2203      	movs	r2, #3
 8004552:	400a      	ands	r2, r1
 8004554:	00d2      	lsls	r2, r2, #3
 8004556:	21ff      	movs	r1, #255	; 0xff
 8004558:	4091      	lsls	r1, r2
 800455a:	000a      	movs	r2, r1
 800455c:	43d2      	mvns	r2, r2
 800455e:	401a      	ands	r2, r3
 8004560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	401a      	ands	r2, r3
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	0018      	movs	r0, r3
 8004570:	2303      	movs	r3, #3
 8004572:	4003      	ands	r3, r0
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004578:	4809      	ldr	r0, [pc, #36]	; (80045a0 <__NVIC_SetPriority+0xd8>)
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	001c      	movs	r4, r3
 8004580:	230f      	movs	r3, #15
 8004582:	4023      	ands	r3, r4
 8004584:	3b08      	subs	r3, #8
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	430a      	orrs	r2, r1
 800458a:	3306      	adds	r3, #6
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	18c3      	adds	r3, r0, r3
 8004590:	3304      	adds	r3, #4
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	46bd      	mov	sp, r7
 8004598:	b003      	add	sp, #12
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	e000e100 	.word	0xe000e100
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045a8:	f3bf 8f4f 	dsb	sy
}
 80045ac:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <__NVIC_SystemReset+0x1c>)
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <__NVIC_SystemReset+0x20>)
 80045b2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80045b4:	f3bf 8f4f 	dsb	sy
}
 80045b8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	e7fd      	b.n	80045ba <__NVIC_SystemReset+0x16>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	e000ed00 	.word	0xe000ed00
 80045c4:	05fa0004 	.word	0x05fa0004

080045c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	045b      	lsls	r3, r3, #17
 80045d8:	429a      	cmp	r2, r3
 80045da:	d301      	bcc.n	80045e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045dc:	2301      	movs	r3, #1
 80045de:	e010      	b.n	8004602 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <SysTick_Config+0x44>)
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	3a01      	subs	r2, #1
 80045e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045e8:	2301      	movs	r3, #1
 80045ea:	425b      	negs	r3, r3
 80045ec:	2103      	movs	r1, #3
 80045ee:	0018      	movs	r0, r3
 80045f0:	f7ff ff6a 	bl	80044c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <SysTick_Config+0x44>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <SysTick_Config+0x44>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004600:	2300      	movs	r3, #0
}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b002      	add	sp, #8
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	e000e010 	.word	0xe000e010

08004610 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	210f      	movs	r1, #15
 800461c:	187b      	adds	r3, r7, r1
 800461e:	1c02      	adds	r2, r0, #0
 8004620:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	187b      	adds	r3, r7, r1
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b25b      	sxtb	r3, r3
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f7ff ff4b 	bl	80044c8 <__NVIC_SetPriority>
}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b004      	add	sp, #16
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	0002      	movs	r2, r0
 8004642:	1dfb      	adds	r3, r7, #7
 8004644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004646:	1dfb      	adds	r3, r7, #7
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b25b      	sxtb	r3, r3
 800464c:	0018      	movs	r0, r3
 800464e:	f7ff ff21 	bl	8004494 <__NVIC_EnableIRQ>
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	46bd      	mov	sp, r7
 8004656:	b002      	add	sp, #8
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800465e:	f7ff ffa1 	bl	80045a4 <__NVIC_SystemReset>

08004662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff ffab 	bl	80045c8 <SysTick_Config>
 8004672:	0003      	movs	r3, r0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800468a:	e14d      	b.n	8004928 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4091      	lsls	r1, r2
 8004696:	000a      	movs	r2, r1
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d100      	bne.n	80046a4 <HAL_GPIO_Init+0x28>
 80046a2:	e13e      	b.n	8004922 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2203      	movs	r2, #3
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d005      	beq.n	80046bc <HAL_GPIO_Init+0x40>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2203      	movs	r2, #3
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d130      	bne.n	800471e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	409a      	lsls	r2, r3
 80046ca:	0013      	movs	r3, r2
 80046cc:	43da      	mvns	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	409a      	lsls	r2, r3
 80046de:	0013      	movs	r3, r2
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f2:	2201      	movs	r2, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	409a      	lsls	r2, r3
 80046f8:	0013      	movs	r3, r2
 80046fa:	43da      	mvns	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4013      	ands	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	2201      	movs	r2, #1
 800470a:	401a      	ands	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	409a      	lsls	r2, r3
 8004710:	0013      	movs	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2203      	movs	r2, #3
 8004724:	4013      	ands	r3, r2
 8004726:	2b03      	cmp	r3, #3
 8004728:	d017      	beq.n	800475a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	409a      	lsls	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	43da      	mvns	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	0013      	movs	r3, r2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2203      	movs	r2, #3
 8004760:	4013      	ands	r3, r2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d123      	bne.n	80047ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	08da      	lsrs	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3208      	adds	r2, #8
 800476e:	0092      	lsls	r2, r2, #2
 8004770:	58d3      	ldr	r3, [r2, r3]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2207      	movs	r2, #7
 8004778:	4013      	ands	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	220f      	movs	r2, #15
 800477e:	409a      	lsls	r2, r3
 8004780:	0013      	movs	r3, r2
 8004782:	43da      	mvns	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2107      	movs	r1, #7
 8004792:	400b      	ands	r3, r1
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	409a      	lsls	r2, r3
 8004798:	0013      	movs	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	0092      	lsls	r2, r2, #2
 80047aa:	6939      	ldr	r1, [r7, #16]
 80047ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	409a      	lsls	r2, r3
 80047bc:	0013      	movs	r3, r2
 80047be:	43da      	mvns	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2203      	movs	r2, #3
 80047cc:	401a      	ands	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	409a      	lsls	r2, r3
 80047d4:	0013      	movs	r3, r2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	23c0      	movs	r3, #192	; 0xc0
 80047e8:	029b      	lsls	r3, r3, #10
 80047ea:	4013      	ands	r3, r2
 80047ec:	d100      	bne.n	80047f0 <HAL_GPIO_Init+0x174>
 80047ee:	e098      	b.n	8004922 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80047f0:	4a53      	ldr	r2, [pc, #332]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3318      	adds	r3, #24
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2203      	movs	r2, #3
 8004802:	4013      	ands	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	220f      	movs	r2, #15
 8004808:	409a      	lsls	r2, r3
 800480a:	0013      	movs	r3, r2
 800480c:	43da      	mvns	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	23a0      	movs	r3, #160	; 0xa0
 8004818:	05db      	lsls	r3, r3, #23
 800481a:	429a      	cmp	r2, r3
 800481c:	d019      	beq.n	8004852 <HAL_GPIO_Init+0x1d6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a48      	ldr	r2, [pc, #288]	; (8004944 <HAL_GPIO_Init+0x2c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <HAL_GPIO_Init+0x1d2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a47      	ldr	r2, [pc, #284]	; (8004948 <HAL_GPIO_Init+0x2cc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00d      	beq.n	800484a <HAL_GPIO_Init+0x1ce>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a46      	ldr	r2, [pc, #280]	; (800494c <HAL_GPIO_Init+0x2d0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d007      	beq.n	8004846 <HAL_GPIO_Init+0x1ca>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a45      	ldr	r2, [pc, #276]	; (8004950 <HAL_GPIO_Init+0x2d4>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d101      	bne.n	8004842 <HAL_GPIO_Init+0x1c6>
 800483e:	2304      	movs	r3, #4
 8004840:	e008      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 8004842:	2305      	movs	r3, #5
 8004844:	e006      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 8004846:	2303      	movs	r3, #3
 8004848:	e004      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 800484a:	2302      	movs	r3, #2
 800484c:	e002      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_GPIO_Init+0x1d8>
 8004852:	2300      	movs	r3, #0
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	2103      	movs	r1, #3
 8004858:	400a      	ands	r2, r1
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	4093      	lsls	r3, r2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004864:	4936      	ldr	r1, [pc, #216]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	3318      	adds	r3, #24
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	43da      	mvns	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4013      	ands	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	035b      	lsls	r3, r3, #13
 800488a:	4013      	ands	r3, r2
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004896:	4b2a      	ldr	r3, [pc, #168]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	43da      	mvns	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	039b      	lsls	r3, r3, #14
 80048b4:	4013      	ands	r3, r2
 80048b6:	d003      	beq.n	80048c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80048c6:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 80048c8:	2384      	movs	r3, #132	; 0x84
 80048ca:	58d3      	ldr	r3, [r2, r3]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	43da      	mvns	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	029b      	lsls	r3, r3, #10
 80048e0:	4013      	ands	r3, r2
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048ec:	4914      	ldr	r1, [pc, #80]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 80048ee:	2284      	movs	r2, #132	; 0x84
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80048f4:	4a12      	ldr	r2, [pc, #72]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 80048f6:	2380      	movs	r3, #128	; 0x80
 80048f8:	58d3      	ldr	r3, [r2, r3]
 80048fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43da      	mvns	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4013      	ands	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	025b      	lsls	r3, r3, #9
 800490e:	4013      	ands	r3, r2
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800491a:	4909      	ldr	r1, [pc, #36]	; (8004940 <HAL_GPIO_Init+0x2c4>)
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3301      	adds	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	40da      	lsrs	r2, r3
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	d000      	beq.n	8004936 <HAL_GPIO_Init+0x2ba>
 8004934:	e6aa      	b.n	800468c <HAL_GPIO_Init+0x10>
  }
}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b006      	add	sp, #24
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021800 	.word	0x40021800
 8004944:	50000400 	.word	0x50000400
 8004948:	50000800 	.word	0x50000800
 800494c:	50000c00 	.word	0x50000c00
 8004950:	50001000 	.word	0x50001000

08004954 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004962:	e0ba      	b.n	8004ada <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004964:	2201      	movs	r2, #1
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	409a      	lsls	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d100      	bne.n	8004978 <HAL_GPIO_DeInit+0x24>
 8004976:	e0ad      	b.n	8004ad4 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004978:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3318      	adds	r3, #24
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	589b      	ldr	r3, [r3, r2]
 8004984:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2203      	movs	r2, #3
 800498a:	4013      	ands	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	220f      	movs	r2, #15
 8004990:	409a      	lsls	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4013      	ands	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	23a0      	movs	r3, #160	; 0xa0
 800499c:	05db      	lsls	r3, r3, #23
 800499e:	429a      	cmp	r2, r3
 80049a0:	d019      	beq.n	80049d6 <HAL_GPIO_DeInit+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a53      	ldr	r2, [pc, #332]	; (8004af4 <HAL_GPIO_DeInit+0x1a0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_GPIO_DeInit+0x7e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_GPIO_DeInit+0x1a4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00d      	beq.n	80049ce <HAL_GPIO_DeInit+0x7a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a51      	ldr	r2, [pc, #324]	; (8004afc <HAL_GPIO_DeInit+0x1a8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <HAL_GPIO_DeInit+0x76>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <HAL_GPIO_DeInit+0x1ac>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_GPIO_DeInit+0x72>
 80049c2:	2304      	movs	r3, #4
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_DeInit+0x84>
 80049c6:	2305      	movs	r3, #5
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_DeInit+0x84>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_DeInit+0x84>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_DeInit+0x84>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_DeInit+0x84>
 80049d6:	2300      	movs	r3, #0
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	2103      	movs	r1, #3
 80049dc:	400a      	ands	r2, r1
 80049de:	00d2      	lsls	r2, r2, #3
 80049e0:	4093      	lsls	r3, r2
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d136      	bne.n	8004a56 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80049e8:	4a41      	ldr	r2, [pc, #260]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	58d3      	ldr	r3, [r2, r3]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	43d2      	mvns	r2, r2
 80049f2:	493f      	ldr	r1, [pc, #252]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80049fa:	4a3d      	ldr	r2, [pc, #244]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 80049fc:	2384      	movs	r3, #132	; 0x84
 80049fe:	58d3      	ldr	r3, [r2, r3]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	43d2      	mvns	r2, r2
 8004a04:	493a      	ldr	r1, [pc, #232]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	2284      	movs	r2, #132	; 0x84
 8004a0a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004a0c:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43d9      	mvns	r1, r3
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004a1a:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	43d9      	mvns	r1, r3
 8004a22:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a24:	400a      	ands	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	220f      	movs	r2, #15
 8004a32:	409a      	lsls	r2, r3
 8004a34:	0013      	movs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004a38:	4a2d      	ldr	r2, [pc, #180]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	3318      	adds	r3, #24
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	589a      	ldr	r2, [r3, r2]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43d9      	mvns	r1, r3
 8004a48:	4829      	ldr	r0, [pc, #164]	; (8004af0 <HAL_GPIO_DeInit+0x19c>)
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	400a      	ands	r2, r1
 8004a50:	3318      	adds	r3, #24
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2103      	movs	r1, #3
 8004a60:	4099      	lsls	r1, r3
 8004a62:	000b      	movs	r3, r1
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	08da      	lsrs	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3208      	adds	r2, #8
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	58d3      	ldr	r3, [r2, r3]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	2107      	movs	r1, #7
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	0092      	lsls	r2, r2, #2
 8004a7e:	210f      	movs	r1, #15
 8004a80:	4091      	lsls	r1, r2
 8004a82:	000a      	movs	r2, r1
 8004a84:	43d1      	mvns	r1, r2
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	08d2      	lsrs	r2, r2, #3
 8004a8a:	4019      	ands	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3208      	adds	r2, #8
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	0052      	lsls	r2, r2, #1
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	4091      	lsls	r1, r2
 8004aa0:	000a      	movs	r2, r1
 8004aa2:	43d2      	mvns	r2, r2
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4091      	lsls	r1, r2
 8004ab4:	000a      	movs	r2, r1
 8004ab6:	43d2      	mvns	r2, r2
 8004ab8:	401a      	ands	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	0052      	lsls	r2, r2, #1
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	4091      	lsls	r1, r2
 8004aca:	000a      	movs	r2, r1
 8004acc:	43d2      	mvns	r2, r2
 8004ace:	401a      	ands	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	40da      	lsrs	r2, r3
 8004ae0:	1e13      	subs	r3, r2, #0
 8004ae2:	d000      	beq.n	8004ae6 <HAL_GPIO_DeInit+0x192>
 8004ae4:	e73e      	b.n	8004964 <HAL_GPIO_DeInit+0x10>
  }
}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46c0      	nop			; (mov r8, r8)
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b006      	add	sp, #24
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021800 	.word	0x40021800
 8004af4:	50000400 	.word	0x50000400
 8004af8:	50000800 	.word	0x50000800
 8004afc:	50000c00 	.word	0x50000c00
 8004b00:	50001000 	.word	0x50001000

08004b04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	000a      	movs	r2, r1
 8004b0e:	1cbb      	adds	r3, r7, #2
 8004b10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	1cba      	adds	r2, r7, #2
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b1e:	230f      	movs	r3, #15
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e003      	b.n	8004b30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b28:	230f      	movs	r3, #15
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	781b      	ldrb	r3, [r3, #0]
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	0008      	movs	r0, r1
 8004b48:	0011      	movs	r1, r2
 8004b4a:	1cbb      	adds	r3, r7, #2
 8004b4c:	1c02      	adds	r2, r0, #0
 8004b4e:	801a      	strh	r2, [r3, #0]
 8004b50:	1c7b      	adds	r3, r7, #1
 8004b52:	1c0a      	adds	r2, r1, #0
 8004b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b56:	1c7b      	adds	r3, r7, #1
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d004      	beq.n	8004b68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b5e:	1cbb      	adds	r3, r7, #2
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b66:	e003      	b.n	8004b70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b68:	1cbb      	adds	r3, r7, #2
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	0002      	movs	r2, r0
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	1dba      	adds	r2, r7, #6
 8004b8a:	8812      	ldrh	r2, [r2, #0]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d008      	beq.n	8004ba2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004b92:	1dba      	adds	r2, r7, #6
 8004b94:	8812      	ldrh	r2, [r2, #0]
 8004b96:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004b98:	1dbb      	adds	r3, r7, #6
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7fe fff7 	bl	8003b90 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	1dba      	adds	r2, r7, #6
 8004ba8:	8812      	ldrh	r2, [r2, #0]
 8004baa:	4013      	ands	r3, r2
 8004bac:	d008      	beq.n	8004bc0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bb0:	1dba      	adds	r2, r7, #6
 8004bb2:	8812      	ldrh	r2, [r2, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004bb6:	1dbb      	adds	r3, r7, #6
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 f806 	bl	8004bcc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40021800 	.word	0x40021800

08004bcc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	0002      	movs	r2, r0
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b002      	add	sp, #8
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	0049      	lsls	r1, r1, #1
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40007000 	.word	0x40007000

08004bfc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	000a      	movs	r2, r1
 8004c06:	1cfb      	adds	r3, r7, #3
 8004c08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d009      	beq.n	8004c24 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_PWR_EnterSTOPMode+0x68>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2207      	movs	r2, #7
 8004c16:	4393      	bics	r3, r2
 8004c18:	001a      	movs	r2, r3
 8004c1a:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <HAL_PWR_EnterSTOPMode+0x68>)
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e005      	b.n	8004c30 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <HAL_PWR_EnterSTOPMode+0x68>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_PWR_EnterSTOPMode+0x68>)
 8004c2a:	2107      	movs	r1, #7
 8004c2c:	438a      	bics	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004c36:	2104      	movs	r1, #4
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004c3c:	1cfb      	adds	r3, r7, #3
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c44:	bf30      	wfi
 8004c46:	e002      	b.n	8004c4e <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c48:	bf40      	sev
    __WFE();
 8004c4a:	bf20      	wfe
    __WFE();
 8004c4c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_PWR_EnterSTOPMode+0x6c>)
 8004c54:	2104      	movs	r1, #4
 8004c56:	438a      	bics	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	40007000 	.word	0x40007000
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2207      	movs	r2, #7
 8004c76:	4393      	bics	r3, r2
 8004c78:	001a      	movs	r2, r3
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004c88:	2104      	movs	r1, #4
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004c8e:	bf30      	wfi
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d11f      	bne.n	8004d04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	0013      	movs	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4912      	ldr	r1, [pc, #72]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fb fa32 	bl	800013c <__udivsi3>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	3301      	adds	r3, #1
 8004cdc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cde:	e008      	b.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	e001      	b.n	8004cf2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e009      	b.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cf2:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	2380      	movs	r3, #128	; 0x80
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d0ed      	beq.n	8004ce0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	0018      	movs	r0, r3
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	b004      	add	sp, #16
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	40007000 	.word	0x40007000
 8004d14:	fffff9ff 	.word	0xfffff9ff
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	000f4240 	.word	0x000f4240

08004d20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	23e0      	movs	r3, #224	; 0xe0
 8004d2a:	01db      	lsls	r3, r3, #7
 8004d2c:	4013      	ands	r3, r2
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	f000 fb50 	bl	80053ec <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	4013      	ands	r3, r2
 8004d54:	d100      	bne.n	8004d58 <HAL_RCC_OscConfig+0x20>
 8004d56:	e07c      	b.n	8004e52 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d58:	4bc3      	ldr	r3, [pc, #780]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2238      	movs	r2, #56	; 0x38
 8004d5e:	4013      	ands	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d62:	4bc1      	ldr	r3, [pc, #772]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2203      	movs	r2, #3
 8004d68:	4013      	ands	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d102      	bne.n	8004d78 <HAL_RCC_OscConfig+0x40>
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	d002      	beq.n	8004d7e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d10b      	bne.n	8004d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7e:	4bba      	ldr	r3, [pc, #744]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	2380      	movs	r3, #128	; 0x80
 8004d84:	029b      	lsls	r3, r3, #10
 8004d86:	4013      	ands	r3, r2
 8004d88:	d062      	beq.n	8004e50 <HAL_RCC_OscConfig+0x118>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d15e      	bne.n	8004e50 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e32a      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_OscConfig+0x7a>
 8004da2:	4bb1      	ldr	r3, [pc, #708]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4bb0      	ldr	r3, [pc, #704]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	0249      	lsls	r1, r1, #9
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e020      	b.n	8004df4 <HAL_RCC_OscConfig+0xbc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	23a0      	movs	r3, #160	; 0xa0
 8004db8:	02db      	lsls	r3, r3, #11
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d10e      	bne.n	8004ddc <HAL_RCC_OscConfig+0xa4>
 8004dbe:	4baa      	ldr	r3, [pc, #680]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4ba9      	ldr	r3, [pc, #676]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dc4:	2180      	movs	r1, #128	; 0x80
 8004dc6:	02c9      	lsls	r1, r1, #11
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	4ba6      	ldr	r3, [pc, #664]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4ba5      	ldr	r3, [pc, #660]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dd2:	2180      	movs	r1, #128	; 0x80
 8004dd4:	0249      	lsls	r1, r1, #9
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	e00b      	b.n	8004df4 <HAL_RCC_OscConfig+0xbc>
 8004ddc:	4ba2      	ldr	r3, [pc, #648]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4ba1      	ldr	r3, [pc, #644]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004de2:	49a2      	ldr	r1, [pc, #648]	; (800506c <HAL_RCC_OscConfig+0x334>)
 8004de4:	400a      	ands	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	4b9f      	ldr	r3, [pc, #636]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b9e      	ldr	r3, [pc, #632]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004dee:	49a0      	ldr	r1, [pc, #640]	; (8005070 <HAL_RCC_OscConfig+0x338>)
 8004df0:	400a      	ands	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d014      	beq.n	8004e26 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7ff faea 	bl	80043d4 <HAL_GetTick>
 8004e00:	0003      	movs	r3, r0
 8004e02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e06:	f7ff fae5 	bl	80043d4 <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e2e9      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e18:	4b93      	ldr	r3, [pc, #588]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	029b      	lsls	r3, r3, #10
 8004e20:	4013      	ands	r3, r2
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0xce>
 8004e24:	e015      	b.n	8004e52 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7ff fad5 	bl	80043d4 <HAL_GetTick>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7ff fad0 	bl	80043d4 <HAL_GetTick>
 8004e34:	0002      	movs	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	; 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e2d4      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	4b89      	ldr	r3, [pc, #548]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0xf8>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d100      	bne.n	8004e5e <HAL_RCC_OscConfig+0x126>
 8004e5c:	e099      	b.n	8004f92 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5e:	4b82      	ldr	r3, [pc, #520]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2238      	movs	r2, #56	; 0x38
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e68:	4b7f      	ldr	r3, [pc, #508]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	4013      	ands	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d102      	bne.n	8004e7e <HAL_RCC_OscConfig+0x146>
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d002      	beq.n	8004e84 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d135      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	4b78      	ldr	r3, [pc, #480]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_OscConfig+0x164>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e2a7      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b72      	ldr	r3, [pc, #456]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4a74      	ldr	r2, [pc, #464]	; (8005074 <HAL_RCC_OscConfig+0x33c>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	4b6e      	ldr	r3, [pc, #440]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d112      	bne.n	8004ede <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004eb8:	4b6b      	ldr	r3, [pc, #428]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a6e      	ldr	r2, [pc, #440]	; (8005078 <HAL_RCC_OscConfig+0x340>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	4b68      	ldr	r3, [pc, #416]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ecc:	4b66      	ldr	r3, [pc, #408]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	0adb      	lsrs	r3, r3, #11
 8004ed2:	2207      	movs	r2, #7
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	4a69      	ldr	r2, [pc, #420]	; (800507c <HAL_RCC_OscConfig+0x344>)
 8004ed8:	40da      	lsrs	r2, r3
 8004eda:	4b69      	ldr	r3, [pc, #420]	; (8005080 <HAL_RCC_OscConfig+0x348>)
 8004edc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ede:	4b69      	ldr	r3, [pc, #420]	; (8005084 <HAL_RCC_OscConfig+0x34c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f7ff fa1a 	bl	800431c <HAL_InitTick>
 8004ee8:	1e03      	subs	r3, r0, #0
 8004eea:	d051      	beq.n	8004f90 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e27d      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d030      	beq.n	8004f5a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ef8:	4b5b      	ldr	r3, [pc, #364]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5e      	ldr	r2, [pc, #376]	; (8005078 <HAL_RCC_OscConfig+0x340>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	4b58      	ldr	r3, [pc, #352]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004f0c:	4b56      	ldr	r3, [pc, #344]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	0049      	lsls	r1, r1, #1
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7ff fa5b 	bl	80043d4 <HAL_GetTick>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f24:	f7ff fa56 	bl	80043d4 <HAL_GetTick>
 8004f28:	0002      	movs	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e25a      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	2380      	movs	r3, #128	; 0x80
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f42:	4b49      	ldr	r3, [pc, #292]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4a4b      	ldr	r2, [pc, #300]	; (8005074 <HAL_RCC_OscConfig+0x33c>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	021a      	lsls	r2, r3, #8
 8004f52:	4b45      	ldr	r3, [pc, #276]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	e01b      	b.n	8004f92 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004f5a:	4b43      	ldr	r3, [pc, #268]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	4b42      	ldr	r3, [pc, #264]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f60:	4949      	ldr	r1, [pc, #292]	; (8005088 <HAL_RCC_OscConfig+0x350>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f66:	f7ff fa35 	bl	80043d4 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f70:	f7ff fa30 	bl	80043d4 <HAL_GetTick>
 8004f74:	0002      	movs	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e234      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f82:	4b39      	ldr	r3, [pc, #228]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x238>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2208      	movs	r2, #8
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d047      	beq.n	800502c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004f9c:	4b32      	ldr	r3, [pc, #200]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2238      	movs	r2, #56	; 0x38
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b18      	cmp	r3, #24
 8004fa6:	d10a      	bne.n	8004fbe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004fa8:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fac:	2202      	movs	r2, #2
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d03c      	beq.n	800502c <HAL_RCC_OscConfig+0x2f4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d138      	bne.n	800502c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e216      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d019      	beq.n	8004ffa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004fc6:	4b28      	ldr	r3, [pc, #160]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fca:	4b27      	ldr	r3, [pc, #156]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004fcc:	2101      	movs	r1, #1
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7ff f9ff 	bl	80043d4 <HAL_GetTick>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7ff f9fa 	bl	80043d4 <HAL_GetTick>
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e1fe      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d0f1      	beq.n	8004fdc <HAL_RCC_OscConfig+0x2a4>
 8004ff8:	e018      	b.n	800502c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8004ffc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8005000:	2101      	movs	r1, #1
 8005002:	438a      	bics	r2, r1
 8005004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7ff f9e5 	bl	80043d4 <HAL_GetTick>
 800500a:	0003      	movs	r3, r0
 800500c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005010:	f7ff f9e0 	bl	80043d4 <HAL_GetTick>
 8005014:	0002      	movs	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1e4      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005022:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8005024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005026:	2202      	movs	r2, #2
 8005028:	4013      	ands	r3, r2
 800502a:	d1f1      	bne.n	8005010 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2204      	movs	r2, #4
 8005032:	4013      	ands	r3, r2
 8005034:	d100      	bne.n	8005038 <HAL_RCC_OscConfig+0x300>
 8005036:	e0c7      	b.n	80051c8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005038:	231f      	movs	r3, #31
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2238      	movs	r2, #56	; 0x38
 8005046:	4013      	ands	r3, r2
 8005048:	2b20      	cmp	r3, #32
 800504a:	d11f      	bne.n	800508c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_RCC_OscConfig+0x330>)
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	2202      	movs	r2, #2
 8005052:	4013      	ands	r3, r2
 8005054:	d100      	bne.n	8005058 <HAL_RCC_OscConfig+0x320>
 8005056:	e0b7      	b.n	80051c8 <HAL_RCC_OscConfig+0x490>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d000      	beq.n	8005062 <HAL_RCC_OscConfig+0x32a>
 8005060:	e0b2      	b.n	80051c8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e1c2      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	40021000 	.word	0x40021000
 800506c:	fffeffff 	.word	0xfffeffff
 8005070:	fffbffff 	.word	0xfffbffff
 8005074:	ffff80ff 	.word	0xffff80ff
 8005078:	ffffc7ff 	.word	0xffffc7ff
 800507c:	00f42400 	.word	0x00f42400
 8005080:	20000010 	.word	0x20000010
 8005084:	20000014 	.word	0x20000014
 8005088:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800508c:	4bb5      	ldr	r3, [pc, #724]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800508e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	055b      	lsls	r3, r3, #21
 8005094:	4013      	ands	r3, r2
 8005096:	d101      	bne.n	800509c <HAL_RCC_OscConfig+0x364>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x366>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d011      	beq.n	80050c6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	4bb0      	ldr	r3, [pc, #704]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80050a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a6:	4baf      	ldr	r3, [pc, #700]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	0549      	lsls	r1, r1, #21
 80050ac:	430a      	orrs	r2, r1
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80050b0:	4bac      	ldr	r3, [pc, #688]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80050b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	055b      	lsls	r3, r3, #21
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80050be:	231f      	movs	r3, #31
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c6:	4ba8      	ldr	r3, [pc, #672]	; (8005368 <HAL_RCC_OscConfig+0x630>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d11a      	bne.n	8005108 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d2:	4ba5      	ldr	r3, [pc, #660]	; (8005368 <HAL_RCC_OscConfig+0x630>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4ba4      	ldr	r3, [pc, #656]	; (8005368 <HAL_RCC_OscConfig+0x630>)
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	0049      	lsls	r1, r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80050e0:	f7ff f978 	bl	80043d4 <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7ff f973 	bl	80043d4 <HAL_GetTick>
 80050ee:	0002      	movs	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e177      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	4b9a      	ldr	r3, [pc, #616]	; (8005368 <HAL_RCC_OscConfig+0x630>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4013      	ands	r3, r2
 8005106:	d0f0      	beq.n	80050ea <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x3e6>
 8005110:	4b94      	ldr	r3, [pc, #592]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005114:	4b93      	ldr	r3, [pc, #588]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005116:	2101      	movs	r1, #1
 8005118:	430a      	orrs	r2, r1
 800511a:	65da      	str	r2, [r3, #92]	; 0x5c
 800511c:	e01c      	b.n	8005158 <HAL_RCC_OscConfig+0x420>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d10c      	bne.n	8005140 <HAL_RCC_OscConfig+0x408>
 8005126:	4b8f      	ldr	r3, [pc, #572]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005128:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800512a:	4b8e      	ldr	r3, [pc, #568]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800512c:	2104      	movs	r1, #4
 800512e:	430a      	orrs	r2, r1
 8005130:	65da      	str	r2, [r3, #92]	; 0x5c
 8005132:	4b8c      	ldr	r3, [pc, #560]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005136:	4b8b      	ldr	r3, [pc, #556]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005138:	2101      	movs	r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	65da      	str	r2, [r3, #92]	; 0x5c
 800513e:	e00b      	b.n	8005158 <HAL_RCC_OscConfig+0x420>
 8005140:	4b88      	ldr	r3, [pc, #544]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005144:	4b87      	ldr	r3, [pc, #540]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	65da      	str	r2, [r3, #92]	; 0x5c
 800514c:	4b85      	ldr	r3, [pc, #532]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800514e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005150:	4b84      	ldr	r3, [pc, #528]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005152:	2104      	movs	r1, #4
 8005154:	438a      	bics	r2, r1
 8005156:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d014      	beq.n	800518a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7ff f938 	bl	80043d4 <HAL_GetTick>
 8005164:	0003      	movs	r3, r0
 8005166:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005168:	e009      	b.n	800517e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7ff f933 	bl	80043d4 <HAL_GetTick>
 800516e:	0002      	movs	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	4a7d      	ldr	r2, [pc, #500]	; (800536c <HAL_RCC_OscConfig+0x634>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e136      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517e:	4b79      	ldr	r3, [pc, #484]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	2202      	movs	r2, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x432>
 8005188:	e013      	b.n	80051b2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7ff f923 	bl	80043d4 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005192:	e009      	b.n	80051a8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7ff f91e 	bl	80043d4 <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	4a73      	ldr	r2, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x634>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e121      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051a8:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	2202      	movs	r2, #2
 80051ae:	4013      	ands	r3, r2
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80051b2:	231f      	movs	r3, #31
 80051b4:	18fb      	adds	r3, r7, r3
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80051bc:	4b69      	ldr	r3, [pc, #420]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80051be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c0:	4b68      	ldr	r3, [pc, #416]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80051c2:	496b      	ldr	r1, [pc, #428]	; (8005370 <HAL_RCC_OscConfig+0x638>)
 80051c4:	400a      	ands	r2, r1
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2220      	movs	r2, #32
 80051ce:	4013      	ands	r3, r2
 80051d0:	d039      	beq.n	8005246 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01b      	beq.n	8005212 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051da:	4b62      	ldr	r3, [pc, #392]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	03c9      	lsls	r1, r1, #15
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7ff f8f4 	bl	80043d4 <HAL_GetTick>
 80051ec:	0003      	movs	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f2:	f7ff f8ef 	bl	80043d4 <HAL_GetTick>
 80051f6:	0002      	movs	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0f3      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005204:	4b57      	ldr	r3, [pc, #348]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	4013      	ands	r3, r2
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x4ba>
 8005210:	e019      	b.n	8005246 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005212:	4b54      	ldr	r3, [pc, #336]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b53      	ldr	r3, [pc, #332]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005218:	4956      	ldr	r1, [pc, #344]	; (8005374 <HAL_RCC_OscConfig+0x63c>)
 800521a:	400a      	ands	r2, r1
 800521c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521e:	f7ff f8d9 	bl	80043d4 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005228:	f7ff f8d4 	bl	80043d4 <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0d8      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800523a:	4b4a      	ldr	r3, [pc, #296]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	4013      	ands	r3, r2
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d100      	bne.n	8005250 <HAL_RCC_OscConfig+0x518>
 800524e:	e0cc      	b.n	80053ea <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005250:	4b44      	ldr	r3, [pc, #272]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2238      	movs	r2, #56	; 0x38
 8005256:	4013      	ands	r3, r2
 8005258:	2b10      	cmp	r3, #16
 800525a:	d100      	bne.n	800525e <HAL_RCC_OscConfig+0x526>
 800525c:	e07b      	b.n	8005356 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d156      	bne.n	8005314 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b3f      	ldr	r3, [pc, #252]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b3e      	ldr	r3, [pc, #248]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800526c:	4942      	ldr	r1, [pc, #264]	; (8005378 <HAL_RCC_OscConfig+0x640>)
 800526e:	400a      	ands	r2, r1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7ff f8af 	bl	80043d4 <HAL_GetTick>
 8005276:	0003      	movs	r3, r0
 8005278:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527c:	f7ff f8aa 	bl	80043d4 <HAL_GetTick>
 8005280:	0002      	movs	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e0ae      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800528e:	4b35      	ldr	r3, [pc, #212]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	049b      	lsls	r3, r3, #18
 8005296:	4013      	ands	r3, r2
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	4a37      	ldr	r2, [pc, #220]	; (800537c <HAL_RCC_OscConfig+0x644>)
 80052a0:	4013      	ands	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	431a      	orrs	r2, r3
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	0449      	lsls	r1, r1, #17
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80052dc:	4b21      	ldr	r3, [pc, #132]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	0549      	lsls	r1, r1, #21
 80052e6:	430a      	orrs	r2, r1
 80052e8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7ff f873 	bl	80043d4 <HAL_GetTick>
 80052ee:	0003      	movs	r3, r0
 80052f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7ff f86e 	bl	80043d4 <HAL_GetTick>
 80052f8:	0002      	movs	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e072      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005306:	4b17      	ldr	r3, [pc, #92]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	049b      	lsls	r3, r3, #18
 800530e:	4013      	ands	r3, r2
 8005310:	d0f0      	beq.n	80052f4 <HAL_RCC_OscConfig+0x5bc>
 8005312:	e06a      	b.n	80053ea <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800531a:	4917      	ldr	r1, [pc, #92]	; (8005378 <HAL_RCC_OscConfig+0x640>)
 800531c:	400a      	ands	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7ff f858 	bl	80043d4 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800532a:	f7ff f853 	bl	80043d4 <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e057      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	049b      	lsls	r3, r3, #18
 8005344:	4013      	ands	r3, r2
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_OscConfig+0x62c>)
 800534e:	490c      	ldr	r1, [pc, #48]	; (8005380 <HAL_RCC_OscConfig+0x648>)
 8005350:	400a      	ands	r2, r1
 8005352:	60da      	str	r2, [r3, #12]
 8005354:	e049      	b.n	80053ea <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d112      	bne.n	8005384 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e044      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	40021000 	.word	0x40021000
 8005368:	40007000 	.word	0x40007000
 800536c:	00001388 	.word	0x00001388
 8005370:	efffffff 	.word	0xefffffff
 8005374:	ffbfffff 	.word	0xffbfffff
 8005378:	feffffff 	.word	0xfeffffff
 800537c:	11c1808c 	.word	0x11c1808c
 8005380:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <HAL_RCC_OscConfig+0x6bc>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2203      	movs	r2, #3
 800538e:	401a      	ands	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	429a      	cmp	r2, r3
 8005396:	d126      	bne.n	80053e6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2270      	movs	r2, #112	; 0x70
 800539c:	401a      	ands	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d11f      	bne.n	80053e6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	23fe      	movs	r3, #254	; 0xfe
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	401a      	ands	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d116      	bne.n	80053e6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	23f8      	movs	r3, #248	; 0xf8
 80053bc:	039b      	lsls	r3, r3, #14
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d10e      	bne.n	80053e6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	23e0      	movs	r3, #224	; 0xe0
 80053cc:	051b      	lsls	r3, r3, #20
 80053ce:	401a      	ands	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	0f5b      	lsrs	r3, r3, #29
 80053dc:	075a      	lsls	r2, r3, #29
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b008      	add	sp, #32
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000

080053f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0e9      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800540c:	4b76      	ldr	r3, [pc, #472]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2207      	movs	r2, #7
 8005412:	4013      	ands	r3, r2
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d91e      	bls.n	8005458 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2207      	movs	r2, #7
 8005420:	4393      	bics	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	4b70      	ldr	r3, [pc, #448]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800542c:	f7fe ffd2 	bl	80043d4 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005434:	e009      	b.n	800544a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005436:	f7fe ffcd 	bl	80043d4 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	4a6a      	ldr	r2, [pc, #424]	; (80055ec <HAL_RCC_ClockConfig+0x1f4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e0ca      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800544a:	4b67      	ldr	r3, [pc, #412]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2207      	movs	r2, #7
 8005450:	4013      	ands	r3, r2
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d1ee      	bne.n	8005436 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2202      	movs	r2, #2
 800545e:	4013      	ands	r3, r2
 8005460:	d015      	beq.n	800548e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2204      	movs	r2, #4
 8005468:	4013      	ands	r3, r2
 800546a:	d006      	beq.n	800547a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800546c:	4b60      	ldr	r3, [pc, #384]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b5f      	ldr	r3, [pc, #380]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 8005472:	21e0      	movs	r1, #224	; 0xe0
 8005474:	01c9      	lsls	r1, r1, #7
 8005476:	430a      	orrs	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547a:	4b5d      	ldr	r3, [pc, #372]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	4a5d      	ldr	r2, [pc, #372]	; (80055f4 <HAL_RCC_ClockConfig+0x1fc>)
 8005480:	4013      	ands	r3, r2
 8005482:	0019      	movs	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2201      	movs	r2, #1
 8005494:	4013      	ands	r3, r2
 8005496:	d057      	beq.n	8005548 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a0:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	029b      	lsls	r3, r3, #10
 80054a8:	4013      	ands	r3, r2
 80054aa:	d12b      	bne.n	8005504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e097      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b8:	4b4d      	ldr	r3, [pc, #308]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	049b      	lsls	r3, r3, #18
 80054c0:	4013      	ands	r3, r2
 80054c2:	d11f      	bne.n	8005504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e08b      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d107      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054d0:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4013      	ands	r3, r2
 80054da:	d113      	bne.n	8005504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e07f      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d106      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054e8:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	2202      	movs	r2, #2
 80054ee:	4013      	ands	r3, r2
 80054f0:	d108      	bne.n	8005504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e074      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f6:	4b3e      	ldr	r3, [pc, #248]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	2202      	movs	r2, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e06d      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005504:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2207      	movs	r2, #7
 800550a:	4393      	bics	r3, r2
 800550c:	0019      	movs	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 8005514:	430a      	orrs	r2, r1
 8005516:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fe ff5c 	bl	80043d4 <HAL_GetTick>
 800551c:	0003      	movs	r3, r0
 800551e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005520:	e009      	b.n	8005536 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005522:	f7fe ff57 	bl	80043d4 <HAL_GetTick>
 8005526:	0002      	movs	r2, r0
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	4a2f      	ldr	r2, [pc, #188]	; (80055ec <HAL_RCC_ClockConfig+0x1f4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e054      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b2e      	ldr	r3, [pc, #184]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2238      	movs	r2, #56	; 0x38
 800553c:	401a      	ands	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	429a      	cmp	r2, r3
 8005546:	d1ec      	bne.n	8005522 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2207      	movs	r2, #7
 800554e:	4013      	ands	r3, r2
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d21e      	bcs.n	8005594 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2207      	movs	r2, #7
 800555c:	4393      	bics	r3, r2
 800555e:	0019      	movs	r1, r3
 8005560:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005568:	f7fe ff34 	bl	80043d4 <HAL_GetTick>
 800556c:	0003      	movs	r3, r0
 800556e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005570:	e009      	b.n	8005586 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005572:	f7fe ff2f 	bl	80043d4 <HAL_GetTick>
 8005576:	0002      	movs	r2, r0
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_RCC_ClockConfig+0x1f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e02c      	b.n	80055e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2207      	movs	r2, #7
 800558c:	4013      	ands	r3, r2
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d1ee      	bne.n	8005572 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2204      	movs	r2, #4
 800559a:	4013      	ands	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <HAL_RCC_ClockConfig+0x200>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	0019      	movs	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80055b2:	f000 f829 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80055b6:	0001      	movs	r1, r0
 80055b8:	4b0d      	ldr	r3, [pc, #52]	; (80055f0 <HAL_RCC_ClockConfig+0x1f8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	220f      	movs	r2, #15
 80055c0:	401a      	ands	r2, r3
 80055c2:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_RCC_ClockConfig+0x204>)
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	58d3      	ldr	r3, [r2, r3]
 80055c8:	221f      	movs	r2, #31
 80055ca:	4013      	ands	r3, r2
 80055cc:	000a      	movs	r2, r1
 80055ce:	40da      	lsrs	r2, r3
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_RCC_ClockConfig+0x208>)
 80055d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCC_ClockConfig+0x20c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	0018      	movs	r0, r3
 80055da:	f7fe fe9f 	bl	800431c <HAL_InitTick>
 80055de:	0003      	movs	r3, r0
}
 80055e0:	0018      	movs	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	b004      	add	sp, #16
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40022000 	.word	0x40022000
 80055ec:	00001388 	.word	0x00001388
 80055f0:	40021000 	.word	0x40021000
 80055f4:	fffff0ff 	.word	0xfffff0ff
 80055f8:	ffff8fff 	.word	0xffff8fff
 80055fc:	08014a08 	.word	0x08014a08
 8005600:	20000010 	.word	0x20000010
 8005604:	20000014 	.word	0x20000014

08005608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800560e:	4b3c      	ldr	r3, [pc, #240]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2238      	movs	r2, #56	; 0x38
 8005614:	4013      	ands	r3, r2
 8005616:	d10f      	bne.n	8005638 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005618:	4b39      	ldr	r3, [pc, #228]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0adb      	lsrs	r3, r3, #11
 800561e:	2207      	movs	r2, #7
 8005620:	4013      	ands	r3, r2
 8005622:	2201      	movs	r2, #1
 8005624:	409a      	lsls	r2, r3
 8005626:	0013      	movs	r3, r2
 8005628:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	4835      	ldr	r0, [pc, #212]	; (8005704 <HAL_RCC_GetSysClockFreq+0xfc>)
 800562e:	f7fa fd85 	bl	800013c <__udivsi3>
 8005632:	0003      	movs	r3, r0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e05d      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005638:	4b31      	ldr	r3, [pc, #196]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2238      	movs	r2, #56	; 0x38
 800563e:	4013      	ands	r3, r2
 8005640:	2b08      	cmp	r3, #8
 8005642:	d102      	bne.n	800564a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005644:	4b30      	ldr	r3, [pc, #192]	; (8005708 <HAL_RCC_GetSysClockFreq+0x100>)
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	e054      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2238      	movs	r2, #56	; 0x38
 8005650:	4013      	ands	r3, r2
 8005652:	2b10      	cmp	r3, #16
 8005654:	d138      	bne.n	80056c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2203      	movs	r2, #3
 800565c:	4013      	ands	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	2207      	movs	r2, #7
 8005668:	4013      	ands	r3, r2
 800566a:	3301      	adds	r3, #1
 800566c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d10d      	bne.n	8005690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4824      	ldr	r0, [pc, #144]	; (8005708 <HAL_RCC_GetSysClockFreq+0x100>)
 8005678:	f7fa fd60 	bl	800013c <__udivsi3>
 800567c:	0003      	movs	r3, r0
 800567e:	0019      	movs	r1, r3
 8005680:	4b1f      	ldr	r3, [pc, #124]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	0a1b      	lsrs	r3, r3, #8
 8005686:	227f      	movs	r2, #127	; 0x7f
 8005688:	4013      	ands	r3, r2
 800568a:	434b      	muls	r3, r1
 800568c:	617b      	str	r3, [r7, #20]
        break;
 800568e:	e00d      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	481c      	ldr	r0, [pc, #112]	; (8005704 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005694:	f7fa fd52 	bl	800013c <__udivsi3>
 8005698:	0003      	movs	r3, r0
 800569a:	0019      	movs	r1, r3
 800569c:	4b18      	ldr	r3, [pc, #96]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	0a1b      	lsrs	r3, r3, #8
 80056a2:	227f      	movs	r2, #127	; 0x7f
 80056a4:	4013      	ands	r3, r2
 80056a6:	434b      	muls	r3, r1
 80056a8:	617b      	str	r3, [r7, #20]
        break;
 80056aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80056ac:	4b14      	ldr	r3, [pc, #80]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0f5b      	lsrs	r3, r3, #29
 80056b2:	2207      	movs	r2, #7
 80056b4:	4013      	ands	r3, r2
 80056b6:	3301      	adds	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	6978      	ldr	r0, [r7, #20]
 80056be:	f7fa fd3d 	bl	800013c <__udivsi3>
 80056c2:	0003      	movs	r3, r0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	e015      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2238      	movs	r2, #56	; 0x38
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d103      	bne.n	80056dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	e00b      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2238      	movs	r2, #56	; 0x38
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b18      	cmp	r3, #24
 80056e6:	d103      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80056e8:	23fa      	movs	r3, #250	; 0xfa
 80056ea:	01db      	lsls	r3, r3, #7
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	e001      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056f4:	693b      	ldr	r3, [r7, #16]
}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b006      	add	sp, #24
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	40021000 	.word	0x40021000
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b02      	ldr	r3, [pc, #8]	; (800571c <HAL_RCC_GetHCLKFreq+0x10>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20000010 	.word	0x20000010

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005724:	f7ff fff2 	bl	800570c <HAL_RCC_GetHCLKFreq>
 8005728:	0004      	movs	r4, r0
 800572a:	f7ff faf9 	bl	8004d20 <LL_RCC_GetAPB1Prescaler>
 800572e:	0003      	movs	r3, r0
 8005730:	0b1a      	lsrs	r2, r3, #12
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005734:	0092      	lsls	r2, r2, #2
 8005736:	58d3      	ldr	r3, [r2, r3]
 8005738:	221f      	movs	r2, #31
 800573a:	4013      	ands	r3, r2
 800573c:	40dc      	lsrs	r4, r3
 800573e:	0023      	movs	r3, r4
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	bdb0      	pop	{r4, r5, r7, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	08014a48 	.word	0x08014a48

0800574c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005754:	2313      	movs	r3, #19
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800575c:	2312      	movs	r3, #18
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	4013      	ands	r3, r2
 800576e:	d100      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005770:	e0ad      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005772:	2011      	movs	r0, #17
 8005774:	183b      	adds	r3, r7, r0
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577a:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800577c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	055b      	lsls	r3, r3, #21
 8005782:	4013      	ands	r3, r2
 8005784:	d110      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005786:	4b44      	ldr	r3, [pc, #272]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800578a:	4b43      	ldr	r3, [pc, #268]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	0549      	lsls	r1, r1, #21
 8005790:	430a      	orrs	r2, r1
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	055b      	lsls	r3, r3, #21
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057a2:	183b      	adds	r3, r7, r0
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a8:	4b3c      	ldr	r3, [pc, #240]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b3b      	ldr	r3, [pc, #236]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80057ae:	2180      	movs	r1, #128	; 0x80
 80057b0:	0049      	lsls	r1, r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b6:	f7fe fe0d 	bl	80043d4 <HAL_GetTick>
 80057ba:	0003      	movs	r3, r0
 80057bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c0:	f7fe fe08 	bl	80043d4 <HAL_GetTick>
 80057c4:	0002      	movs	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d904      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80057ce:	2313      	movs	r3, #19
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	2203      	movs	r2, #3
 80057d4:	701a      	strb	r2, [r3, #0]
        break;
 80057d6:	e005      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d8:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	d0ed      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80057e4:	2313      	movs	r3, #19
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d15e      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ee:	4b2a      	ldr	r3, [pc, #168]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80057f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057f2:	23c0      	movs	r3, #192	; 0xc0
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4013      	ands	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d019      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	429a      	cmp	r2, r3
 8005808:	d014      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005810:	4013      	ands	r3, r2
 8005812:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005814:	4b20      	ldr	r3, [pc, #128]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005818:	4b1f      	ldr	r3, [pc, #124]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	0249      	lsls	r1, r1, #9
 800581e:	430a      	orrs	r2, r1
 8005820:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005822:	4b1d      	ldr	r3, [pc, #116]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005826:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005828:	491e      	ldr	r1, [pc, #120]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800582a:	400a      	ands	r2, r1
 800582c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2201      	movs	r2, #1
 8005838:	4013      	ands	r3, r2
 800583a:	d016      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fe fdca 	bl	80043d4 <HAL_GetTick>
 8005840:	0003      	movs	r3, r0
 8005842:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005844:	e00c      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005846:	f7fe fdc5 	bl	80043d4 <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d904      	bls.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005856:	2313      	movs	r3, #19
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	2203      	movs	r2, #3
 800585c:	701a      	strb	r2, [r3, #0]
            break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005864:	2202      	movs	r2, #2
 8005866:	4013      	ands	r3, r2
 8005868:	d0ed      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800586a:	2313      	movs	r3, #19
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800587a:	4013      	ands	r3, r2
 800587c:	0019      	movs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005884:	430a      	orrs	r2, r1
 8005886:	65da      	str	r2, [r3, #92]	; 0x5c
 8005888:	e016      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800588a:	2312      	movs	r3, #18
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	2213      	movs	r2, #19
 8005890:	18ba      	adds	r2, r7, r2
 8005892:	7812      	ldrb	r2, [r2, #0]
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	e00f      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005898:	40021000 	.word	0x40021000
 800589c:	40007000 	.word	0x40007000
 80058a0:	fffffcff 	.word	0xfffffcff
 80058a4:	fffeffff 	.word	0xfffeffff
 80058a8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	2312      	movs	r3, #18
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	2213      	movs	r2, #19
 80058b2:	18ba      	adds	r2, r7, r2
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058b8:	2311      	movs	r3, #17
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d105      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c2:	4bb6      	ldr	r3, [pc, #728]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c6:	4bb5      	ldr	r3, [pc, #724]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058c8:	49b5      	ldr	r1, [pc, #724]	; (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80058ca:	400a      	ands	r2, r1
 80058cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	4013      	ands	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d8:	4bb0      	ldr	r3, [pc, #704]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058dc:	2203      	movs	r2, #3
 80058de:	4393      	bics	r3, r2
 80058e0:	0019      	movs	r1, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4bad      	ldr	r3, [pc, #692]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058e8:	430a      	orrs	r2, r1
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2202      	movs	r2, #2
 80058f2:	4013      	ands	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058f6:	4ba9      	ldr	r3, [pc, #676]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fa:	220c      	movs	r2, #12
 80058fc:	4393      	bics	r3, r2
 80058fe:	0019      	movs	r1, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	4ba5      	ldr	r3, [pc, #660]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005906:	430a      	orrs	r2, r1
 8005908:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2204      	movs	r2, #4
 8005910:	4013      	ands	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005914:	4ba1      	ldr	r3, [pc, #644]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	2230      	movs	r2, #48	; 0x30
 800591a:	4393      	bics	r3, r2
 800591c:	0019      	movs	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	4b9e      	ldr	r3, [pc, #632]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005924:	430a      	orrs	r2, r1
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2210      	movs	r2, #16
 800592e:	4013      	ands	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005932:	4b9a      	ldr	r3, [pc, #616]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	4a9b      	ldr	r2, [pc, #620]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	4b96      	ldr	r3, [pc, #600]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005942:	430a      	orrs	r2, r1
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	015b      	lsls	r3, r3, #5
 800594e:	4013      	ands	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005952:	4b92      	ldr	r3, [pc, #584]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	4a94      	ldr	r2, [pc, #592]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005958:	4013      	ands	r3, r2
 800595a:	0019      	movs	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	4b8e      	ldr	r3, [pc, #568]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005962:	430a      	orrs	r2, r1
 8005964:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4013      	ands	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005972:	4b8a      	ldr	r3, [pc, #552]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	4a8d      	ldr	r2, [pc, #564]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005978:	4013      	ands	r3, r2
 800597a:	0019      	movs	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005980:	4b86      	ldr	r3, [pc, #536]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005982:	430a      	orrs	r2, r1
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	4013      	ands	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005992:	4b82      	ldr	r3, [pc, #520]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005996:	4a86      	ldr	r2, [pc, #536]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005998:	4013      	ands	r3, r2
 800599a:	0019      	movs	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a0:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059a2:	430a      	orrs	r2, r1
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2220      	movs	r2, #32
 80059ac:	4013      	ands	r3, r2
 80059ae:	d009      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b0:	4b7a      	ldr	r3, [pc, #488]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b4:	4a7f      	ldr	r2, [pc, #508]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	4b77      	ldr	r3, [pc, #476]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059c0:	430a      	orrs	r2, r1
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	4013      	ands	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ce:	4b73      	ldr	r3, [pc, #460]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	4a79      	ldr	r2, [pc, #484]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	0019      	movs	r1, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	4b6f      	ldr	r3, [pc, #444]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059de:	430a      	orrs	r2, r1
 80059e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	4013      	ands	r3, r2
 80059ec:	d015      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ee:	4b6b      	ldr	r3, [pc, #428]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	0899      	lsrs	r1, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	4b68      	ldr	r3, [pc, #416]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059fc:	430a      	orrs	r2, r1
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	05db      	lsls	r3, r3, #23
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005a0c:	4b63      	ldr	r3, [pc, #396]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	4b62      	ldr	r3, [pc, #392]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	0249      	lsls	r1, r1, #9
 8005a16:	430a      	orrs	r2, r1
 8005a18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	4013      	ands	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a26:	4b5d      	ldr	r3, [pc, #372]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a34:	4b59      	ldr	r3, [pc, #356]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a36:	430a      	orrs	r2, r1
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	039b      	lsls	r3, r3, #14
 8005a42:	4013      	ands	r3, r2
 8005a44:	d016      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a46:	4b55      	ldr	r3, [pc, #340]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	4a5c      	ldr	r2, [pc, #368]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a54:	4b51      	ldr	r3, [pc, #324]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a56:	430a      	orrs	r2, r1
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	03db      	lsls	r3, r3, #15
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d106      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a66:	4b4d      	ldr	r3, [pc, #308]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	0449      	lsls	r1, r1, #17
 8005a70:	430a      	orrs	r2, r1
 8005a72:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	03db      	lsls	r3, r3, #15
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d016      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a80:	4b46      	ldr	r3, [pc, #280]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	4a4e      	ldr	r2, [pc, #312]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a8e:	4b43      	ldr	r3, [pc, #268]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a90:	430a      	orrs	r2, r1
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a98:	2380      	movs	r3, #128	; 0x80
 8005a9a:	045b      	lsls	r3, r3, #17
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d106      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005aa0:	4b3e      	ldr	r3, [pc, #248]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	4b3d      	ldr	r3, [pc, #244]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	0449      	lsls	r1, r1, #17
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d014      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005aba:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	2203      	movs	r2, #3
 8005ac0:	4393      	bics	r3, r2
 8005ac2:	0019      	movs	r1, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1a      	ldr	r2, [r3, #32]
 8005ac8:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d106      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ad6:	4b31      	ldr	r3, [pc, #196]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0249      	lsls	r1, r1, #9
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	019b      	lsls	r3, r3, #6
 8005aec:	4013      	ands	r3, r2
 8005aee:	d014      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005af0:	4b2a      	ldr	r3, [pc, #168]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af4:	220c      	movs	r2, #12
 8005af6:	4393      	bics	r3, r2
 8005af8:	0019      	movs	r1, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005afe:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b00:	430a      	orrs	r2, r1
 8005b02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d106      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b0c:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	4b22      	ldr	r3, [pc, #136]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	0249      	lsls	r1, r1, #9
 8005b16:	430a      	orrs	r2, r1
 8005b18:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	045b      	lsls	r3, r3, #17
 8005b22:	4013      	ands	r3, r2
 8005b24:	d016      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b26:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	0019      	movs	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b34:	4b19      	ldr	r3, [pc, #100]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b36:	430a      	orrs	r2, r1
 8005b38:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	019b      	lsls	r3, r3, #6
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d106      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	4b14      	ldr	r3, [pc, #80]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	0449      	lsls	r1, r1, #17
 8005b50:	430a      	orrs	r2, r1
 8005b52:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	049b      	lsls	r3, r3, #18
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d016      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b70:	430a      	orrs	r2, r1
 8005b72:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b80:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	0449      	lsls	r1, r1, #17
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005b8e:	2312      	movs	r3, #18
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b006      	add	sp, #24
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	efffffff 	.word	0xefffffff
 8005ba4:	fffff3ff 	.word	0xfffff3ff
 8005ba8:	fffffcff 	.word	0xfffffcff
 8005bac:	fff3ffff 	.word	0xfff3ffff
 8005bb0:	ffcfffff 	.word	0xffcfffff
 8005bb4:	ffffcfff 	.word	0xffffcfff
 8005bb8:	ffff3fff 	.word	0xffff3fff
 8005bbc:	ffbfffff 	.word	0xffbfffff
 8005bc0:	feffffff 	.word	0xfeffffff

08005bc4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bc4:	b5b0      	push	{r4, r5, r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bcc:	230f      	movs	r3, #15
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d100      	bne.n	8005bdc <HAL_RTC_Init+0x18>
 8005bda:	e08c      	b.n	8005cf6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2229      	movs	r2, #41	; 0x29
 8005be0:	5c9b      	ldrb	r3, [r3, r2]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2228      	movs	r2, #40	; 0x28
 8005bec:	2100      	movs	r1, #0
 8005bee:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2288      	movs	r2, #136	; 0x88
 8005bf4:	0212      	lsls	r2, r2, #8
 8005bf6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7fe f800 	bl	8003c00 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2229      	movs	r2, #41	; 0x29
 8005c04:	2102      	movs	r1, #2
 8005c06:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2210      	movs	r2, #16
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	d062      	beq.n	8005cdc <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	22ca      	movs	r2, #202	; 0xca
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2253      	movs	r2, #83	; 0x53
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005c26:	250f      	movs	r5, #15
 8005c28:	197c      	adds	r4, r7, r5
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 fbf3 	bl	8006418 <RTC_EnterInitMode>
 8005c32:	0003      	movs	r3, r0
 8005c34:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005c36:	0028      	movs	r0, r5
 8005c38:	183b      	adds	r3, r7, r0
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d12c      	bne.n	8005c9a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	492e      	ldr	r1, [pc, #184]	; (8005d04 <HAL_RTC_Init+0x140>)
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6912      	ldr	r2, [r2, #16]
 8005c76:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6919      	ldr	r1, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	041a      	lsls	r2, r3, #16
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005c8c:	183c      	adds	r4, r7, r0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 fc03 	bl	800649c <RTC_ExitInitMode>
 8005c96:	0003      	movs	r3, r0
 8005c98:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005c9a:	230f      	movs	r3, #15
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d116      	bne.n	8005cd2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	00d2      	lsls	r2, r2, #3
 8005cb0:	08d2      	lsrs	r2, r2, #3
 8005cb2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	22ff      	movs	r2, #255	; 0xff
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24
 8005cda:	e003      	b.n	8005ce4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005cdc:	230f      	movs	r3, #15
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d103      	bne.n	8005cf6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2229      	movs	r2, #41	; 0x29
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005cf6:	230f      	movs	r3, #15
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	781b      	ldrb	r3, [r3, #0]
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	b004      	add	sp, #16
 8005d02:	bdb0      	pop	{r4, r5, r7, pc}
 8005d04:	fb8fffbf 	.word	0xfb8fffbf

08005d08 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d08:	b5b0      	push	{r4, r5, r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2228      	movs	r2, #40	; 0x28
 8005d18:	5c9b      	ldrb	r3, [r3, r2]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_RTC_SetTime+0x1a>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e092      	b.n	8005e48 <HAL_RTC_SetTime+0x140>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2228      	movs	r2, #40	; 0x28
 8005d26:	2101      	movs	r1, #1
 8005d28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2229      	movs	r2, #41	; 0x29
 8005d2e:	2102      	movs	r1, #2
 8005d30:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	22ca      	movs	r2, #202	; 0xca
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2253      	movs	r2, #83	; 0x53
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d42:	2513      	movs	r5, #19
 8005d44:	197c      	adds	r4, r7, r5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f000 fb65 	bl	8006418 <RTC_EnterInitMode>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005d52:	197b      	adds	r3, r7, r5
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d162      	bne.n	8005e20 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d125      	bne.n	8005dac <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d102      	bne.n	8005d72 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	0018      	movs	r0, r3
 8005d78:	f000 fbd4 	bl	8006524 <RTC_ByteToBcd2>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f000 fbcd 	bl	8006524 <RTC_ByteToBcd2>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005d8e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	789b      	ldrb	r3, [r3, #2]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 fbc5 	bl	8006524 <RTC_ByteToBcd2>
 8005d9a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005d9c:	0022      	movs	r2, r4
 8005d9e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005da6:	4313      	orrs	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e017      	b.n	8005ddc <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	4013      	ands	r3, r2
 8005db6:	d102      	bne.n	8005dbe <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005dca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dd0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	78db      	ldrb	r3, [r3, #3]
 8005dd6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	491b      	ldr	r1, [pc, #108]	; (8005e50 <HAL_RTC_SetTime+0x148>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4918      	ldr	r1, [pc, #96]	; (8005e54 <HAL_RTC_SetTime+0x14c>)
 8005df4:	400a      	ands	r2, r1
 8005df6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	431a      	orrs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e10:	2313      	movs	r3, #19
 8005e12:	18fc      	adds	r4, r7, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f000 fb40 	bl	800649c <RTC_ExitInitMode>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005e28:	2313      	movs	r3, #19
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2229      	movs	r2, #41	; 0x29
 8005e36:	2101      	movs	r1, #1
 8005e38:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2228      	movs	r2, #40	; 0x28
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

  return status;
 8005e42:	2313      	movs	r3, #19
 8005e44:	18fb      	adds	r3, r7, r3
 8005e46:	781b      	ldrb	r3, [r3, #0]
}
 8005e48:	0018      	movs	r0, r3
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b006      	add	sp, #24
 8005e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e50:	007f7f7f 	.word	0x007f7f7f
 8005e54:	fffbffff 	.word	0xfffbffff

08005e58 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	045b      	lsls	r3, r3, #17
 8005e76:	0c5a      	lsrs	r2, r3, #17
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <HAL_RTC_GetTime+0xb4>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	223f      	movs	r2, #63	; 0x3f
 8005e90:	4013      	ands	r3, r2
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	227f      	movs	r2, #127	; 0x7f
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	227f      	movs	r2, #127	; 0x7f
 8005eae:	4013      	ands	r3, r2
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	0d9b      	lsrs	r3, r3, #22
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11a      	bne.n	8005f02 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 fb4f 	bl	8006574 <RTC_Bcd2ToByte>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	001a      	movs	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 fb46 	bl	8006574 <RTC_Bcd2ToByte>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	001a      	movs	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	789b      	ldrb	r3, [r3, #2]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f000 fb3d 	bl	8006574 <RTC_Bcd2ToByte>
 8005efa:	0003      	movs	r3, r0
 8005efc:	001a      	movs	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b006      	add	sp, #24
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	007f7f7f 	.word	0x007f7f7f

08005f10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2228      	movs	r2, #40	; 0x28
 8005f20:	5c9b      	ldrb	r3, [r3, r2]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_RTC_SetDate+0x1a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e07e      	b.n	8006028 <HAL_RTC_SetDate+0x118>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2228      	movs	r2, #40	; 0x28
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2229      	movs	r2, #41	; 0x29
 8005f36:	2102      	movs	r1, #2
 8005f38:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10e      	bne.n	8005f5e <HAL_RTC_SetDate+0x4e>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	001a      	movs	r2, r3
 8005f46:	2310      	movs	r3, #16
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d008      	beq.n	8005f5e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2210      	movs	r2, #16
 8005f52:	4393      	bics	r3, r2
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	330a      	adds	r3, #10
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11c      	bne.n	8005f9e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	78db      	ldrb	r3, [r3, #3]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 fadb 	bl	8006524 <RTC_ByteToBcd2>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	785b      	ldrb	r3, [r3, #1]
 8005f76:	0018      	movs	r0, r3
 8005f78:	f000 fad4 	bl	8006524 <RTC_ByteToBcd2>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f80:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	789b      	ldrb	r3, [r3, #2]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 facc 	bl	8006524 <RTC_ByteToBcd2>
 8005f8c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f8e:	0022      	movs	r2, r4
 8005f90:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	e00e      	b.n	8005fbc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005faa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005fb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	22ca      	movs	r2, #202	; 0xca
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2253      	movs	r2, #83	; 0x53
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005fcc:	2513      	movs	r5, #19
 8005fce:	197c      	adds	r4, r7, r5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 fa20 	bl	8006418 <RTC_EnterInitMode>
 8005fd8:	0003      	movs	r3, r0
 8005fda:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005fdc:	0028      	movs	r0, r5
 8005fde:	183b      	adds	r3, r7, r0
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10c      	bne.n	8006000 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4910      	ldr	r1, [pc, #64]	; (8006030 <HAL_RTC_SetDate+0x120>)
 8005fee:	400a      	ands	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ff2:	183c      	adds	r4, r7, r0
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f000 fa50 	bl	800649c <RTC_ExitInitMode>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006008:	2313      	movs	r3, #19
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d103      	bne.n	800601a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2229      	movs	r2, #41	; 0x29
 8006016:	2101      	movs	r1, #1
 8006018:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2228      	movs	r2, #40	; 0x28
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]

  return status;
 8006022:	2313      	movs	r3, #19
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	781b      	ldrb	r3, [r3, #0]
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b006      	add	sp, #24
 800602e:	bdb0      	pop	{r4, r5, r7, pc}
 8006030:	00ffff3f 	.word	0x00ffff3f

08006034 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4a21      	ldr	r2, [pc, #132]	; (80060cc <HAL_RTC_GetDate+0x98>)
 8006048:	4013      	ands	r3, r2
 800604a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b2db      	uxtb	r3, r3
 800605c:	221f      	movs	r2, #31
 800605e:	4013      	ands	r3, r2
 8006060:	b2da      	uxtb	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	b2db      	uxtb	r3, r3
 800606a:	223f      	movs	r2, #63	; 0x3f
 800606c:	4013      	ands	r3, r2
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	0b5b      	lsrs	r3, r3, #13
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2207      	movs	r2, #7
 800607c:	4013      	ands	r3, r2
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11a      	bne.n	80060c0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	0018      	movs	r0, r3
 8006090:	f000 fa70 	bl	8006574 <RTC_Bcd2ToByte>
 8006094:	0003      	movs	r3, r0
 8006096:	001a      	movs	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 fa67 	bl	8006574 <RTC_Bcd2ToByte>
 80060a6:	0003      	movs	r3, r0
 80060a8:	001a      	movs	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	789b      	ldrb	r3, [r3, #2]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 fa5e 	bl	8006574 <RTC_Bcd2ToByte>
 80060b8:	0003      	movs	r3, r0
 80060ba:	001a      	movs	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b006      	add	sp, #24
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	00ffff3f 	.word	0x00ffff3f

080060d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2228      	movs	r2, #40	; 0x28
 80060e0:	5c9b      	ldrb	r3, [r3, r2]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_RTC_SetAlarm_IT+0x1a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e127      	b.n	800633a <HAL_RTC_SetAlarm_IT+0x26a>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2228      	movs	r2, #40	; 0x28
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2229      	movs	r2, #41	; 0x29
 80060f6:	2102      	movs	r1, #2
 80060f8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d136      	bne.n	800616e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	4013      	ands	r3, r2
 800610a:	d102      	bne.n	8006112 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	0018      	movs	r0, r3
 8006118:	f000 fa04 	bl	8006524 <RTC_ByteToBcd2>
 800611c:	0003      	movs	r3, r0
 800611e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f9fd 	bl	8006524 <RTC_ByteToBcd2>
 800612a:	0003      	movs	r3, r0
 800612c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800612e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	789b      	ldrb	r3, [r3, #2]
 8006134:	0018      	movs	r0, r3
 8006136:	f000 f9f5 	bl	8006524 <RTC_ByteToBcd2>
 800613a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800613c:	0022      	movs	r2, r4
 800613e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006146:	431a      	orrs	r2, r3
 8006148:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2220      	movs	r2, #32
 800614e:	5c9b      	ldrb	r3, [r3, r2]
 8006150:	0018      	movs	r0, r3
 8006152:	f000 f9e7 	bl	8006524 <RTC_ByteToBcd2>
 8006156:	0003      	movs	r3, r0
 8006158:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800615a:	0022      	movs	r2, r4
 800615c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006162:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006168:	4313      	orrs	r3, r2
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e022      	b.n	80061b4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2240      	movs	r2, #64	; 0x40
 8006176:	4013      	ands	r3, r2
 8006178:	d102      	bne.n	8006180 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	2200      	movs	r2, #0
 800617e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800618c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006192:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	78db      	ldrb	r3, [r3, #3]
 8006198:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800619a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2120      	movs	r1, #32
 80061a0:	5c5b      	ldrb	r3, [r3, r1]
 80061a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	22ca      	movs	r2, #202	; 0xca
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2253      	movs	r2, #83	; 0x53
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	d14c      	bne.n	8006276 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4957      	ldr	r1, [pc, #348]	; (8006344 <HAL_RTC_SetAlarm_IT+0x274>)
 80061e8:	400a      	ands	r2, r1
 80061ea:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2101      	movs	r1, #1
 80061f8:	430a      	orrs	r2, r1
 80061fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80061fc:	f7fe f8ea 	bl	80043d4 <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006204:	e016      	b.n	8006234 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006206:	f7fe f8e5 	bl	80043d4 <HAL_GetTick>
 800620a:	0002      	movs	r2, r0
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	23fa      	movs	r3, #250	; 0xfa
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	429a      	cmp	r2, r3
 8006216:	d90d      	bls.n	8006234 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	22ff      	movs	r2, #255	; 0xff
 800621e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2229      	movs	r2, #41	; 0x29
 8006224:	2103      	movs	r1, #3
 8006226:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2228      	movs	r2, #40	; 0x28
 800622c:	2100      	movs	r1, #0
 800622e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e082      	b.n	800633a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2201      	movs	r2, #1
 800623c:	4013      	ands	r3, r2
 800623e:	d0e2      	beq.n	8006206 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	0049      	lsls	r1, r1, #1
 800625e:	430a      	orrs	r2, r1
 8006260:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2180      	movs	r1, #128	; 0x80
 800626e:	0149      	lsls	r1, r1, #5
 8006270:	430a      	orrs	r2, r1
 8006272:	619a      	str	r2, [r3, #24]
 8006274:	e04b      	b.n	800630e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4931      	ldr	r1, [pc, #196]	; (8006348 <HAL_RTC_SetAlarm_IT+0x278>)
 8006282:	400a      	ands	r2, r1
 8006284:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2102      	movs	r1, #2
 8006292:	430a      	orrs	r2, r1
 8006294:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8006296:	f7fe f89d 	bl	80043d4 <HAL_GetTick>
 800629a:	0003      	movs	r3, r0
 800629c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800629e:	e016      	b.n	80062ce <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062a0:	f7fe f898 	bl	80043d4 <HAL_GetTick>
 80062a4:	0002      	movs	r2, r0
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	23fa      	movs	r3, #250	; 0xfa
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d90d      	bls.n	80062ce <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2229      	movs	r2, #41	; 0x29
 80062be:	2103      	movs	r1, #3
 80062c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2228      	movs	r2, #40	; 0x28
 80062c6:	2100      	movs	r1, #0
 80062c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e035      	b.n	800633a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2202      	movs	r2, #2
 80062d6:	4013      	ands	r3, r2
 80062d8:	d0e2      	beq.n	80062a0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	0089      	lsls	r1, r1, #2
 80062f8:	430a      	orrs	r2, r1
 80062fa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	0189      	lsls	r1, r1, #6
 800630a:	430a      	orrs	r2, r1
 800630c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800630e:	4a0f      	ldr	r2, [pc, #60]	; (800634c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	58d3      	ldr	r3, [r2, r3]
 8006314:	490d      	ldr	r1, [pc, #52]	; (800634c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006316:	2280      	movs	r2, #128	; 0x80
 8006318:	0312      	lsls	r2, r2, #12
 800631a:	4313      	orrs	r3, r2
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	22ff      	movs	r2, #255	; 0xff
 8006326:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2229      	movs	r2, #41	; 0x29
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2228      	movs	r2, #40	; 0x28
 8006334:	2100      	movs	r1, #0
 8006336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b009      	add	sp, #36	; 0x24
 8006340:	bd90      	pop	{r4, r7, pc}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	fffffeff 	.word	0xfffffeff
 8006348:	fffffdff 	.word	0xfffffdff
 800634c:	40021800 	.word	0x40021800

08006350 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	015b      	lsls	r3, r3, #5
 8006362:	4013      	ands	r3, r2
 8006364:	d011      	beq.n	800638a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	2201      	movs	r2, #1
 800636e:	4013      	ands	r3, r2
 8006370:	d00b      	beq.n	800638a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2101      	movs	r1, #1
 800637e:	430a      	orrs	r2, r1
 8006380:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	0018      	movs	r0, r3
 8006386:	f7fd fbf5 	bl	8003b74 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	2380      	movs	r3, #128	; 0x80
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	4013      	ands	r3, r2
 8006396:	d011      	beq.n	80063bc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2202      	movs	r2, #2
 80063a0:	4013      	ands	r3, r2
 80063a2:	d00b      	beq.n	80063bc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2102      	movs	r1, #2
 80063b0:	430a      	orrs	r2, r1
 80063b2:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 f961 	bl	800667e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2229      	movs	r2, #41	; 0x29
 80063c0:	2101      	movs	r1, #1
 80063c2:	5499      	strb	r1, [r3, r2]
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b002      	add	sp, #8
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <HAL_RTC_WaitForSynchro+0x48>)
 80063da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80063dc:	f7fd fffa 	bl	80043d4 <HAL_GetTick>
 80063e0:	0003      	movs	r3, r0
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80063e4:	e00a      	b.n	80063fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063e6:	f7fd fff5 	bl	80043d4 <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	23fa      	movs	r3, #250	; 0xfa
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d901      	bls.n	80063fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e006      	b.n	800640a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	4013      	ands	r3, r2
 8006406:	d0ee      	beq.n	80063e6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	b004      	add	sp, #16
 8006410:	bd80      	pop	{r7, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	0001005f 	.word	0x0001005f

08006418 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006420:	230f      	movs	r3, #15
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	2200      	movs	r2, #0
 8006426:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2240      	movs	r2, #64	; 0x40
 8006430:	4013      	ands	r3, r2
 8006432:	d12c      	bne.n	800648e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2180      	movs	r1, #128	; 0x80
 8006440:	430a      	orrs	r2, r1
 8006442:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006444:	f7fd ffc6 	bl	80043d4 <HAL_GetTick>
 8006448:	0003      	movs	r3, r0
 800644a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800644c:	e014      	b.n	8006478 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800644e:	f7fd ffc1 	bl	80043d4 <HAL_GetTick>
 8006452:	0002      	movs	r2, r0
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	200f      	movs	r0, #15
 800645a:	183b      	adds	r3, r7, r0
 800645c:	1839      	adds	r1, r7, r0
 800645e:	7809      	ldrb	r1, [r1, #0]
 8006460:	7019      	strb	r1, [r3, #0]
 8006462:	23fa      	movs	r3, #250	; 0xfa
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	429a      	cmp	r2, r3
 8006468:	d906      	bls.n	8006478 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800646a:	183b      	adds	r3, r7, r0
 800646c:	2203      	movs	r2, #3
 800646e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2229      	movs	r2, #41	; 0x29
 8006474:	2103      	movs	r1, #3
 8006476:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	4013      	ands	r3, r2
 8006482:	d104      	bne.n	800648e <RTC_EnterInitMode+0x76>
 8006484:	230f      	movs	r3, #15
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d1df      	bne.n	800644e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800648e:	230f      	movs	r3, #15
 8006490:	18fb      	adds	r3, r7, r3
 8006492:	781b      	ldrb	r3, [r3, #0]
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b004      	add	sp, #16
 800649a:	bd80      	pop	{r7, pc}

0800649c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	240f      	movs	r4, #15
 80064a6:	193b      	adds	r3, r7, r4
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80064ac:	4b1c      	ldr	r3, [pc, #112]	; (8006520 <RTC_ExitInitMode+0x84>)
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	4b1b      	ldr	r3, [pc, #108]	; (8006520 <RTC_ExitInitMode+0x84>)
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	438a      	bics	r2, r1
 80064b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <RTC_ExitInitMode+0x84>)
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2220      	movs	r2, #32
 80064be:	4013      	ands	r3, r2
 80064c0:	d10d      	bne.n	80064de <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff ff81 	bl	80063cc <HAL_RTC_WaitForSynchro>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d021      	beq.n	8006512 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2229      	movs	r2, #41	; 0x29
 80064d2:	2103      	movs	r1, #3
 80064d4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	2203      	movs	r2, #3
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e019      	b.n	8006512 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064de:	4b10      	ldr	r3, [pc, #64]	; (8006520 <RTC_ExitInitMode+0x84>)
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <RTC_ExitInitMode+0x84>)
 80064e4:	2120      	movs	r1, #32
 80064e6:	438a      	bics	r2, r1
 80064e8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	0018      	movs	r0, r3
 80064ee:	f7ff ff6d 	bl	80063cc <HAL_RTC_WaitForSynchro>
 80064f2:	1e03      	subs	r3, r0, #0
 80064f4:	d007      	beq.n	8006506 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2229      	movs	r2, #41	; 0x29
 80064fa:	2103      	movs	r1, #3
 80064fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80064fe:	230f      	movs	r3, #15
 8006500:	18fb      	adds	r3, r7, r3
 8006502:	2203      	movs	r2, #3
 8006504:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <RTC_ExitInitMode+0x84>)
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <RTC_ExitInitMode+0x84>)
 800650c:	2120      	movs	r1, #32
 800650e:	430a      	orrs	r2, r1
 8006510:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006512:	230f      	movs	r3, #15
 8006514:	18fb      	adds	r3, r7, r3
 8006516:	781b      	ldrb	r3, [r3, #0]
}
 8006518:	0018      	movs	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	b005      	add	sp, #20
 800651e:	bd90      	pop	{r4, r7, pc}
 8006520:	40002800 	.word	0x40002800

08006524 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	0002      	movs	r2, r0
 800652c:	1dfb      	adds	r3, r7, #7
 800652e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006534:	230b      	movs	r3, #11
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	1dfa      	adds	r2, r7, #7
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800653e:	e008      	b.n	8006552 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006546:	220b      	movs	r2, #11
 8006548:	18bb      	adds	r3, r7, r2
 800654a:	18ba      	adds	r2, r7, r2
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	3a0a      	subs	r2, #10
 8006550:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006552:	210b      	movs	r1, #11
 8006554:	187b      	adds	r3, r7, r1
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b09      	cmp	r3, #9
 800655a:	d8f1      	bhi.n	8006540 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	011b      	lsls	r3, r3, #4
 8006562:	b2da      	uxtb	r2, r3
 8006564:	187b      	adds	r3, r7, r1
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4313      	orrs	r3, r2
 800656a:	b2db      	uxtb	r3, r3
}
 800656c:	0018      	movs	r0, r3
 800656e:	46bd      	mov	sp, r7
 8006570:	b004      	add	sp, #16
 8006572:	bd80      	pop	{r7, pc}

08006574 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	0002      	movs	r2, r0
 800657c:	1dfb      	adds	r3, r7, #7
 800657e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006580:	1dfb      	adds	r3, r7, #7
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	b2db      	uxtb	r3, r3
 8006588:	001a      	movs	r2, r3
 800658a:	0013      	movs	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	189b      	adds	r3, r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	1dfb      	adds	r3, r7, #7
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	210f      	movs	r1, #15
 800659e:	400b      	ands	r3, r1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	18d3      	adds	r3, r2, r3
 80065a4:	b2db      	uxtb	r3, r3
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b004      	add	sp, #16
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2228      	movs	r2, #40	; 0x28
 80065ba:	5c9b      	ldrb	r3, [r3, r2]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_RTCEx_EnableBypassShadow+0x16>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e024      	b.n	800660e <HAL_RTCEx_EnableBypassShadow+0x60>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2228      	movs	r2, #40	; 0x28
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2229      	movs	r2, #41	; 0x29
 80065d0:	2102      	movs	r1, #2
 80065d2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	22ca      	movs	r2, #202	; 0xca
 80065da:	625a      	str	r2, [r3, #36]	; 0x24
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2253      	movs	r2, #83	; 0x53
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2120      	movs	r1, #32
 80065f0:	430a      	orrs	r2, r1
 80065f2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	22ff      	movs	r2, #255	; 0xff
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2229      	movs	r2, #41	; 0x29
 8006600:	2101      	movs	r1, #1
 8006602:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2228      	movs	r2, #40	; 0x28
 8006608:	2100      	movs	r1, #0
 800660a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2228      	movs	r2, #40	; 0x28
 8006622:	5c9b      	ldrb	r3, [r3, r2]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_RTCEx_DisableBypassShadow+0x16>
 8006628:	2302      	movs	r3, #2
 800662a:	e024      	b.n	8006676 <HAL_RTCEx_DisableBypassShadow+0x60>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2228      	movs	r2, #40	; 0x28
 8006630:	2101      	movs	r1, #1
 8006632:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2229      	movs	r2, #41	; 0x29
 8006638:	2102      	movs	r1, #2
 800663a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	22ca      	movs	r2, #202	; 0xca
 8006642:	625a      	str	r2, [r3, #36]	; 0x24
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2253      	movs	r2, #83	; 0x53
 800664a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	21df      	movs	r1, #223	; 0xdf
 8006658:	400a      	ands	r2, r1
 800665a:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2229      	movs	r2, #41	; 0x29
 8006668:	2101      	movs	r1, #1
 800666a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2228      	movs	r2, #40	; 0x28
 8006670:	2100      	movs	r1, #0
 8006672:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	0018      	movs	r0, r3
 8006678:	46bd      	mov	sp, r7
 800667a:	b002      	add	sp, #8
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e0a8      	b.n	80067f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	2382      	movs	r3, #130	; 0x82
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d009      	beq.n	80066ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	61da      	str	r2, [r3, #28]
 80066bc:	e005      	b.n	80066ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	225d      	movs	r2, #93	; 0x5d
 80066d4:	5c9b      	ldrb	r3, [r3, r2]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d107      	bne.n	80066ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	225c      	movs	r2, #92	; 0x5c
 80066e0:	2100      	movs	r1, #0
 80066e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7fd fad0 	bl	8003c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	225d      	movs	r2, #93	; 0x5d
 80066f0:	2102      	movs	r1, #2
 80066f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2140      	movs	r1, #64	; 0x40
 8006700:	438a      	bics	r2, r1
 8006702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	23e0      	movs	r3, #224	; 0xe0
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	429a      	cmp	r2, r3
 800670e:	d902      	bls.n	8006716 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	015b      	lsls	r3, r3, #5
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	23f0      	movs	r3, #240	; 0xf0
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	429a      	cmp	r2, r3
 8006726:	d008      	beq.n	800673a <HAL_SPI_Init+0xaa>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	23e0      	movs	r3, #224	; 0xe0
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	429a      	cmp	r2, r3
 8006732:	d002      	beq.n	800673a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	2382      	movs	r3, #130	; 0x82
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	401a      	ands	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	2384      	movs	r3, #132	; 0x84
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	400b      	ands	r3, r1
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2102      	movs	r1, #2
 8006756:	400b      	ands	r3, r1
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	2101      	movs	r1, #1
 8006760:	400b      	ands	r3, r1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6999      	ldr	r1, [r3, #24]
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	400b      	ands	r3, r1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2138      	movs	r1, #56	; 0x38
 8006776:	400b      	ands	r3, r1
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	400b      	ands	r3, r1
 8006782:	431a      	orrs	r2, r3
 8006784:	0011      	movs	r1, r2
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	401a      	ands	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	2204      	movs	r2, #4
 80067a0:	401a      	ands	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	2110      	movs	r1, #16
 80067a8:	400b      	ands	r3, r1
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b0:	2108      	movs	r1, #8
 80067b2:	400b      	ands	r3, r1
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68d9      	ldr	r1, [r3, #12]
 80067ba:	23f0      	movs	r3, #240	; 0xf0
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	400b      	ands	r3, r1
 80067c0:	431a      	orrs	r2, r3
 80067c2:	0011      	movs	r1, r2
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	2380      	movs	r3, #128	; 0x80
 80067c8:	015b      	lsls	r3, r3, #5
 80067ca:	401a      	ands	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4907      	ldr	r1, [pc, #28]	; (80067fc <HAL_SPI_Init+0x16c>)
 80067e0:	400a      	ands	r2, r1
 80067e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	225d      	movs	r2, #93	; 0x5d
 80067ee:	2101      	movs	r1, #1
 80067f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	0018      	movs	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b004      	add	sp, #16
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	fffff7ff 	.word	0xfffff7ff

08006800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e04a      	b.n	80068a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	223d      	movs	r2, #61	; 0x3d
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d107      	bne.n	800682e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	223c      	movs	r2, #60	; 0x3c
 8006822:	2100      	movs	r1, #0
 8006824:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f7fd fa79 	bl	8003d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	223d      	movs	r2, #61	; 0x3d
 8006832:	2102      	movs	r1, #2
 8006834:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3304      	adds	r3, #4
 800683e:	0019      	movs	r1, r3
 8006840:	0010      	movs	r0, r2
 8006842:	f000 f9ed 	bl	8006c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2248      	movs	r2, #72	; 0x48
 800684a:	2101      	movs	r1, #1
 800684c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	223e      	movs	r2, #62	; 0x3e
 8006852:	2101      	movs	r1, #1
 8006854:	5499      	strb	r1, [r3, r2]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	223f      	movs	r2, #63	; 0x3f
 800685a:	2101      	movs	r1, #1
 800685c:	5499      	strb	r1, [r3, r2]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2240      	movs	r2, #64	; 0x40
 8006862:	2101      	movs	r1, #1
 8006864:	5499      	strb	r1, [r3, r2]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2241      	movs	r2, #65	; 0x41
 800686a:	2101      	movs	r1, #1
 800686c:	5499      	strb	r1, [r3, r2]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2242      	movs	r2, #66	; 0x42
 8006872:	2101      	movs	r1, #1
 8006874:	5499      	strb	r1, [r3, r2]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2243      	movs	r2, #67	; 0x43
 800687a:	2101      	movs	r1, #1
 800687c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2244      	movs	r2, #68	; 0x44
 8006882:	2101      	movs	r1, #1
 8006884:	5499      	strb	r1, [r3, r2]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2245      	movs	r2, #69	; 0x45
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2246      	movs	r2, #70	; 0x46
 8006892:	2101      	movs	r1, #1
 8006894:	5499      	strb	r1, [r3, r2]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2247      	movs	r2, #71	; 0x47
 800689a:	2101      	movs	r1, #1
 800689c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	223d      	movs	r2, #61	; 0x3d
 80068a2:	2101      	movs	r1, #1
 80068a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	223d      	movs	r2, #61	; 0x3d
 80068bc:	5c9b      	ldrb	r3, [r3, r2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d001      	beq.n	80068c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e047      	b.n	8006958 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	223d      	movs	r2, #61	; 0x3d
 80068cc:	2102      	movs	r1, #2
 80068ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2101      	movs	r1, #1
 80068dc:	430a      	orrs	r2, r1
 80068de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1e      	ldr	r2, [pc, #120]	; (8006960 <HAL_TIM_Base_Start_IT+0xb0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d014      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x64>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	05db      	lsls	r3, r3, #23
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d00e      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x64>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1a      	ldr	r2, [pc, #104]	; (8006964 <HAL_TIM_Base_Start_IT+0xb4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x64>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_TIM_Base_Start_IT+0xb8>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x64>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a17      	ldr	r2, [pc, #92]	; (800696c <HAL_TIM_Base_Start_IT+0xbc>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d116      	bne.n	8006942 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4a15      	ldr	r2, [pc, #84]	; (8006970 <HAL_TIM_Base_Start_IT+0xc0>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d016      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0xa4>
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	025b      	lsls	r3, r3, #9
 800692c:	429a      	cmp	r2, r3
 800692e:	d011      	beq.n	8006954 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2101      	movs	r1, #1
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	e008      	b.n	8006954 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2101      	movs	r1, #1
 800694e:	430a      	orrs	r2, r1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e000      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b004      	add	sp, #16
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40012c00 	.word	0x40012c00
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40014000 	.word	0x40014000
 8006970:	00010007 	.word	0x00010007

08006974 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2101      	movs	r1, #1
 8006988:	438a      	bics	r2, r1
 800698a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <HAL_TIM_Base_Stop_IT+0x54>)
 8006994:	4013      	ands	r3, r2
 8006996:	d10d      	bne.n	80069b4 <HAL_TIM_Base_Stop_IT+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <HAL_TIM_Base_Stop_IT+0x58>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	d107      	bne.n	80069b4 <HAL_TIM_Base_Stop_IT+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2101      	movs	r1, #1
 80069b0:	438a      	bics	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	223d      	movs	r2, #61	; 0x3d
 80069b8:	2101      	movs	r1, #1
 80069ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	0018      	movs	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	b002      	add	sp, #8
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	00001111 	.word	0x00001111
 80069cc:	00000444 	.word	0x00000444

080069d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2202      	movs	r2, #2
 80069ec:	4013      	ands	r3, r2
 80069ee:	d021      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2202      	movs	r2, #2
 80069f4:	4013      	ands	r3, r2
 80069f6:	d01d      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2203      	movs	r2, #3
 80069fe:	4252      	negs	r2, r2
 8006a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	4013      	ands	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	0018      	movs	r0, r3
 8006a18:	f000 f8ea 	bl	8006bf0 <HAL_TIM_IC_CaptureCallback>
 8006a1c:	e007      	b.n	8006a2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 f8dd 	bl	8006be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f000 f8e9 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2204      	movs	r2, #4
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d022      	beq.n	8006a82 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	4013      	ands	r3, r2
 8006a42:	d01e      	beq.n	8006a82 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2205      	movs	r2, #5
 8006a4a:	4252      	negs	r2, r2
 8006a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	23c0      	movs	r3, #192	; 0xc0
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d004      	beq.n	8006a6c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	0018      	movs	r0, r3
 8006a66:	f000 f8c3 	bl	8006bf0 <HAL_TIM_IC_CaptureCallback>
 8006a6a:	e007      	b.n	8006a7c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f000 f8b6 	bl	8006be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f8c2 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2208      	movs	r2, #8
 8006a86:	4013      	ands	r3, r2
 8006a88:	d021      	beq.n	8006ace <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d01d      	beq.n	8006ace <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2209      	movs	r2, #9
 8006a98:	4252      	negs	r2, r2
 8006a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	2203      	movs	r2, #3
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 f89d 	bl	8006bf0 <HAL_TIM_IC_CaptureCallback>
 8006ab6:	e007      	b.n	8006ac8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 f890 	bl	8006be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 f89c 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	d022      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2210      	movs	r2, #16
 8006ada:	4013      	ands	r3, r2
 8006adc:	d01e      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2211      	movs	r2, #17
 8006ae4:	4252      	negs	r2, r2
 8006ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2208      	movs	r2, #8
 8006aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	23c0      	movs	r3, #192	; 0xc0
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4013      	ands	r3, r2
 8006afa:	d004      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 f876 	bl	8006bf0 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e007      	b.n	8006b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 f869 	bl	8006be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 f875 	bl	8006c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	4013      	ands	r3, r2
 8006b22:	d00c      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2201      	movs	r2, #1
 8006b28:	4013      	ands	r3, r2
 8006b2a:	d008      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2202      	movs	r2, #2
 8006b32:	4252      	negs	r2, r2
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7fc fff9 	bl	8003b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	4013      	ands	r3, r2
 8006b44:	d104      	bne.n	8006b50 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	019b      	lsls	r3, r3, #6
 8006b4c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b4e:	d00b      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	4013      	ands	r3, r2
 8006b56:	d007      	beq.n	8006b68 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <HAL_TIM_IRQHandler+0x208>)
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f000 f972 	bl	8006e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	4013      	ands	r3, r2
 8006b78:	d007      	beq.n	8006b8a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a17      	ldr	r2, [pc, #92]	; (8006bdc <HAL_TIM_IRQHandler+0x20c>)
 8006b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0018      	movs	r0, r3
 8006b86:	f000 f969 	bl	8006e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2240      	movs	r2, #64	; 0x40
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d00c      	beq.n	8006bac <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2240      	movs	r2, #64	; 0x40
 8006b96:	4013      	ands	r3, r2
 8006b98:	d008      	beq.n	8006bac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2241      	movs	r2, #65	; 0x41
 8006ba0:	4252      	negs	r2, r2
 8006ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f000 f832 	bl	8006c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	d00c      	beq.n	8006bce <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d008      	beq.n	8006bce <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2221      	movs	r2, #33	; 0x21
 8006bc2:	4252      	negs	r2, r2
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 f937 	bl	8006e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	ffffdf7f 	.word	0xffffdf7f
 8006bdc:	fffffeff 	.word	0xfffffeff

08006be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b002      	add	sp, #8
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b002      	add	sp, #8
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c08:	46c0      	nop			; (mov r8, r8)
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b002      	add	sp, #8
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c18:	46c0      	nop			; (mov r8, r8)
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3f      	ldr	r2, [pc, #252]	; (8006d30 <TIM_Base_SetConfig+0x110>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00c      	beq.n	8006c52 <TIM_Base_SetConfig+0x32>
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	2380      	movs	r3, #128	; 0x80
 8006c3c:	05db      	lsls	r3, r3, #23
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d007      	beq.n	8006c52 <TIM_Base_SetConfig+0x32>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a3b      	ldr	r2, [pc, #236]	; (8006d34 <TIM_Base_SetConfig+0x114>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d003      	beq.n	8006c52 <TIM_Base_SetConfig+0x32>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <TIM_Base_SetConfig+0x118>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d108      	bne.n	8006c64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2270      	movs	r2, #112	; 0x70
 8006c56:	4393      	bics	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a32      	ldr	r2, [pc, #200]	; (8006d30 <TIM_Base_SetConfig+0x110>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d01c      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	05db      	lsls	r3, r3, #23
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d017      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a2e      	ldr	r2, [pc, #184]	; (8006d34 <TIM_Base_SetConfig+0x114>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <TIM_Base_SetConfig+0x118>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00f      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a2c      	ldr	r2, [pc, #176]	; (8006d3c <TIM_Base_SetConfig+0x11c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00b      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a2b      	ldr	r2, [pc, #172]	; (8006d40 <TIM_Base_SetConfig+0x120>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d007      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a2a      	ldr	r2, [pc, #168]	; (8006d44 <TIM_Base_SetConfig+0x124>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d003      	beq.n	8006ca6 <TIM_Base_SetConfig+0x86>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a29      	ldr	r2, [pc, #164]	; (8006d48 <TIM_Base_SetConfig+0x128>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d108      	bne.n	8006cb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4a28      	ldr	r2, [pc, #160]	; (8006d4c <TIM_Base_SetConfig+0x12c>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	4393      	bics	r3, r2
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a13      	ldr	r2, [pc, #76]	; (8006d30 <TIM_Base_SetConfig+0x110>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_Base_SetConfig+0xde>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <TIM_Base_SetConfig+0x120>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0xde>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <TIM_Base_SetConfig+0x124>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0xde>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <TIM_Base_SetConfig+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d103      	bne.n	8006d06 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2201      	movs	r2, #1
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d106      	bne.n	8006d26 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	4393      	bics	r3, r2
 8006d20:	001a      	movs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]
  }
}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b004      	add	sp, #16
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			; (mov r8, r8)
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40002000 	.word	0x40002000
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800
 8006d4c:	fffffcff 	.word	0xfffffcff

08006d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	223c      	movs	r2, #60	; 0x3c
 8006d5e:	5c9b      	ldrb	r3, [r3, r2]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d101      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d64:	2302      	movs	r3, #2
 8006d66:	e05a      	b.n	8006e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	223c      	movs	r2, #60	; 0x3c
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	223d      	movs	r2, #61	; 0x3d
 8006d74:	2102      	movs	r1, #2
 8006d76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d108      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2270      	movs	r2, #112	; 0x70
 8006da8:	4393      	bics	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a19      	ldr	r2, [pc, #100]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d014      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	05db      	lsls	r3, r3, #23
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a12      	ldr	r2, [pc, #72]	; (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d10c      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	4393      	bics	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	223d      	movs	r2, #61	; 0x3d
 8006e10:	2101      	movs	r1, #1
 8006e12:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	223c      	movs	r2, #60	; 0x3c
 8006e18:	2100      	movs	r1, #0
 8006e1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	0018      	movs	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b004      	add	sp, #16
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	ff0fffff 	.word	0xff0fffff
 8006e30:	40000400 	.word	0x40000400
 8006e34:	40000800 	.word	0x40000800
 8006e38:	40014000 	.word	0x40014000

08006e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e44:	46c0      	nop			; (mov r8, r8)
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b002      	add	sp, #8
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e54:	46c0      	nop			; (mov r8, r8)
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b002      	add	sp, #8
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e64:	46c0      	nop			; (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e046      	b.n	8006f0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2288      	movs	r2, #136	; 0x88
 8006e82:	589b      	ldr	r3, [r3, r2]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2284      	movs	r2, #132	; 0x84
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7fc ff6a 	bl	8003d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2288      	movs	r2, #136	; 0x88
 8006e9c:	2124      	movs	r1, #36	; 0x24
 8006e9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	438a      	bics	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f000 fd4c 	bl	8007958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 f9f2 	bl	80072ac <UART_SetConfig>
 8006ec8:	0003      	movs	r3, r0
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d101      	bne.n	8006ed2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e01c      	b.n	8006f0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	490d      	ldr	r1, [pc, #52]	; (8006f14 <HAL_UART_Init+0xa8>)
 8006ede:	400a      	ands	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	212a      	movs	r1, #42	; 0x2a
 8006eee:	438a      	bics	r2, r1
 8006ef0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2101      	movs	r1, #1
 8006efe:	430a      	orrs	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f000 fddb 	bl	8007ac0 <UART_CheckIdleState>
 8006f0a:	0003      	movs	r3, r0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b002      	add	sp, #8
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	ffffb7ff 	.word	0xffffb7ff

08006f18 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e032      	b.n	8006f90 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2288      	movs	r2, #136	; 0x88
 8006f2e:	2124      	movs	r1, #36	; 0x24
 8006f30:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	438a      	bics	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7fd f831 	bl	8003fc4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2290      	movs	r2, #144	; 0x90
 8006f66:	2100      	movs	r1, #0
 8006f68:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2288      	movs	r2, #136	; 0x88
 8006f6e:	2100      	movs	r1, #0
 8006f70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	228c      	movs	r2, #140	; 0x8c
 8006f76:	2100      	movs	r1, #0
 8006f78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2284      	movs	r2, #132	; 0x84
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b002      	add	sp, #8
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08a      	sub	sp, #40	; 0x28
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	1dbb      	adds	r3, r7, #6
 8006fa6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2288      	movs	r2, #136	; 0x88
 8006fac:	589b      	ldr	r3, [r3, r2]
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d000      	beq.n	8006fb4 <HAL_UART_Transmit+0x1c>
 8006fb2:	e090      	b.n	80070d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_Transmit+0x2a>
 8006fba:	1dbb      	adds	r3, r7, #6
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e088      	b.n	80070d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	015b      	lsls	r3, r3, #5
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d109      	bne.n	8006fe6 <HAL_UART_Transmit+0x4e>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d105      	bne.n	8006fe6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d001      	beq.n	8006fe6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e078      	b.n	80070d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2290      	movs	r2, #144	; 0x90
 8006fea:	2100      	movs	r1, #0
 8006fec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2288      	movs	r2, #136	; 0x88
 8006ff2:	2121      	movs	r1, #33	; 0x21
 8006ff4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff6:	f7fd f9ed 	bl	80043d4 <HAL_GetTick>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1dba      	adds	r2, r7, #6
 8007002:	2154      	movs	r1, #84	; 0x54
 8007004:	8812      	ldrh	r2, [r2, #0]
 8007006:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1dba      	adds	r2, r7, #6
 800700c:	2156      	movs	r1, #86	; 0x56
 800700e:	8812      	ldrh	r2, [r2, #0]
 8007010:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	2380      	movs	r3, #128	; 0x80
 8007018:	015b      	lsls	r3, r3, #5
 800701a:	429a      	cmp	r2, r3
 800701c:	d108      	bne.n	8007030 <HAL_UART_Transmit+0x98>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d104      	bne.n	8007030 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	e003      	b.n	8007038 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007038:	e030      	b.n	800709c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	0013      	movs	r3, r2
 8007044:	2200      	movs	r2, #0
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	f000 fde4 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 800704c:	1e03      	subs	r3, r0, #0
 800704e:	d005      	beq.n	800705c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2288      	movs	r2, #136	; 0x88
 8007054:	2120      	movs	r1, #32
 8007056:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e03d      	b.n	80070d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	001a      	movs	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	05d2      	lsls	r2, r2, #23
 800706e:	0dd2      	lsrs	r2, r2, #23
 8007070:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3302      	adds	r3, #2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e007      	b.n	800708a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	3301      	adds	r3, #1
 8007088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2256      	movs	r2, #86	; 0x56
 800708e:	5a9b      	ldrh	r3, [r3, r2]
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b299      	uxth	r1, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2256      	movs	r2, #86	; 0x56
 800709a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2256      	movs	r2, #86	; 0x56
 80070a0:	5a9b      	ldrh	r3, [r3, r2]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c8      	bne.n	800703a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	0013      	movs	r3, r2
 80070b2:	2200      	movs	r2, #0
 80070b4:	2140      	movs	r1, #64	; 0x40
 80070b6:	f000 fdad 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 80070ba:	1e03      	subs	r3, r0, #0
 80070bc:	d005      	beq.n	80070ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2288      	movs	r2, #136	; 0x88
 80070c2:	2120      	movs	r1, #32
 80070c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e006      	b.n	80070d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2288      	movs	r2, #136	; 0x88
 80070ce:	2120      	movs	r1, #32
 80070d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b008      	add	sp, #32
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	1dbb      	adds	r3, r7, #6
 80070ee:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	228c      	movs	r2, #140	; 0x8c
 80070f4:	589b      	ldr	r3, [r3, r2]
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d000      	beq.n	80070fc <HAL_UART_Receive+0x1c>
 80070fa:	e0d0      	b.n	800729e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_UART_Receive+0x2a>
 8007102:	1dbb      	adds	r3, r7, #6
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e0c8      	b.n	80072a0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	015b      	lsls	r3, r3, #5
 8007116:	429a      	cmp	r2, r3
 8007118:	d109      	bne.n	800712e <HAL_UART_Receive+0x4e>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2201      	movs	r2, #1
 8007126:	4013      	ands	r3, r2
 8007128:	d001      	beq.n	800712e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e0b8      	b.n	80072a0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2290      	movs	r2, #144	; 0x90
 8007132:	2100      	movs	r1, #0
 8007134:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	228c      	movs	r2, #140	; 0x8c
 800713a:	2122      	movs	r1, #34	; 0x22
 800713c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007144:	f7fd f946 	bl	80043d4 <HAL_GetTick>
 8007148:	0003      	movs	r3, r0
 800714a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	1dba      	adds	r2, r7, #6
 8007150:	215c      	movs	r1, #92	; 0x5c
 8007152:	8812      	ldrh	r2, [r2, #0]
 8007154:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1dba      	adds	r2, r7, #6
 800715a:	215e      	movs	r1, #94	; 0x5e
 800715c:	8812      	ldrh	r2, [r2, #0]
 800715e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	015b      	lsls	r3, r3, #5
 8007168:	429a      	cmp	r2, r3
 800716a:	d10d      	bne.n	8007188 <HAL_UART_Receive+0xa8>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <HAL_UART_Receive+0x9e>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2260      	movs	r2, #96	; 0x60
 8007178:	494b      	ldr	r1, [pc, #300]	; (80072a8 <HAL_UART_Receive+0x1c8>)
 800717a:	5299      	strh	r1, [r3, r2]
 800717c:	e02e      	b.n	80071dc <HAL_UART_Receive+0xfc>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2260      	movs	r2, #96	; 0x60
 8007182:	21ff      	movs	r1, #255	; 0xff
 8007184:	5299      	strh	r1, [r3, r2]
 8007186:	e029      	b.n	80071dc <HAL_UART_Receive+0xfc>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10d      	bne.n	80071ac <HAL_UART_Receive+0xcc>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <HAL_UART_Receive+0xc2>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2260      	movs	r2, #96	; 0x60
 800719c:	21ff      	movs	r1, #255	; 0xff
 800719e:	5299      	strh	r1, [r3, r2]
 80071a0:	e01c      	b.n	80071dc <HAL_UART_Receive+0xfc>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2260      	movs	r2, #96	; 0x60
 80071a6:	217f      	movs	r1, #127	; 0x7f
 80071a8:	5299      	strh	r1, [r3, r2]
 80071aa:	e017      	b.n	80071dc <HAL_UART_Receive+0xfc>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	2380      	movs	r3, #128	; 0x80
 80071b2:	055b      	lsls	r3, r3, #21
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d10d      	bne.n	80071d4 <HAL_UART_Receive+0xf4>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <HAL_UART_Receive+0xea>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2260      	movs	r2, #96	; 0x60
 80071c4:	217f      	movs	r1, #127	; 0x7f
 80071c6:	5299      	strh	r1, [r3, r2]
 80071c8:	e008      	b.n	80071dc <HAL_UART_Receive+0xfc>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2260      	movs	r2, #96	; 0x60
 80071ce:	213f      	movs	r1, #63	; 0x3f
 80071d0:	5299      	strh	r1, [r3, r2]
 80071d2:	e003      	b.n	80071dc <HAL_UART_Receive+0xfc>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2260      	movs	r2, #96	; 0x60
 80071d8:	2100      	movs	r1, #0
 80071da:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80071dc:	2312      	movs	r3, #18
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	2160      	movs	r1, #96	; 0x60
 80071e4:	5a52      	ldrh	r2, [r2, r1]
 80071e6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	015b      	lsls	r3, r3, #5
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d108      	bne.n	8007206 <HAL_UART_Receive+0x126>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e003      	b.n	800720e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800720e:	e03a      	b.n	8007286 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	0013      	movs	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	2120      	movs	r1, #32
 800721e:	f000 fcf9 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007222:	1e03      	subs	r3, r0, #0
 8007224:	d005      	beq.n	8007232 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	228c      	movs	r2, #140	; 0x8c
 800722a:	2120      	movs	r1, #32
 800722c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e036      	b.n	80072a0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10e      	bne.n	8007256 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	b29b      	uxth	r3, r3
 8007240:	2212      	movs	r2, #18
 8007242:	18ba      	adds	r2, r7, r2
 8007244:	8812      	ldrh	r2, [r2, #0]
 8007246:	4013      	ands	r3, r2
 8007248:	b29a      	uxth	r2, r3
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3302      	adds	r3, #2
 8007252:	61bb      	str	r3, [r7, #24]
 8007254:	e00e      	b.n	8007274 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2212      	movs	r2, #18
 8007260:	18ba      	adds	r2, r7, r2
 8007262:	8812      	ldrh	r2, [r2, #0]
 8007264:	b2d2      	uxtb	r2, r2
 8007266:	4013      	ands	r3, r2
 8007268:	b2da      	uxtb	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3301      	adds	r3, #1
 8007272:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	225e      	movs	r2, #94	; 0x5e
 8007278:	5a9b      	ldrh	r3, [r3, r2]
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b299      	uxth	r1, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	225e      	movs	r2, #94	; 0x5e
 8007284:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	225e      	movs	r2, #94	; 0x5e
 800728a:	5a9b      	ldrh	r3, [r3, r2]
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1be      	bne.n	8007210 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	228c      	movs	r2, #140	; 0x8c
 8007296:	2120      	movs	r1, #32
 8007298:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	e000      	b.n	80072a0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
  }
}
 80072a0:	0018      	movs	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b008      	add	sp, #32
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	000001ff 	.word	0x000001ff

080072ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ac:	b5b0      	push	{r4, r5, r7, lr}
 80072ae:	b090      	sub	sp, #64	; 0x40
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072b4:	231a      	movs	r3, #26
 80072b6:	2220      	movs	r2, #32
 80072b8:	189b      	adds	r3, r3, r2
 80072ba:	19db      	adds	r3, r3, r7
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4ac1      	ldr	r2, [pc, #772]	; (80075e4 <UART_SetConfig+0x338>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4abc      	ldr	r2, [pc, #752]	; (80075e8 <UART_SetConfig+0x33c>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	0018      	movs	r0, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	68d9      	ldr	r1, [r3, #12]
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	0003      	movs	r3, r0
 8007304:	430b      	orrs	r3, r1
 8007306:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4ab6      	ldr	r2, [pc, #728]	; (80075ec <UART_SetConfig+0x340>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d009      	beq.n	800732c <UART_SetConfig+0x80>
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4ab4      	ldr	r2, [pc, #720]	; (80075f0 <UART_SetConfig+0x344>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007328:	4313      	orrs	r3, r2
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	4ab0      	ldr	r2, [pc, #704]	; (80075f4 <UART_SetConfig+0x348>)
 8007334:	4013      	ands	r3, r2
 8007336:	0019      	movs	r1, r3
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733e:	430b      	orrs	r3, r1
 8007340:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	220f      	movs	r2, #15
 800734a:	4393      	bics	r3, r2
 800734c:	0018      	movs	r0, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	0003      	movs	r3, r0
 8007358:	430b      	orrs	r3, r1
 800735a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4aa5      	ldr	r2, [pc, #660]	; (80075f8 <UART_SetConfig+0x34c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d131      	bne.n	80073ca <UART_SetConfig+0x11e>
 8007366:	4ba5      	ldr	r3, [pc, #660]	; (80075fc <UART_SetConfig+0x350>)
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	2203      	movs	r2, #3
 800736c:	4013      	ands	r3, r2
 800736e:	2b03      	cmp	r3, #3
 8007370:	d01d      	beq.n	80073ae <UART_SetConfig+0x102>
 8007372:	d823      	bhi.n	80073bc <UART_SetConfig+0x110>
 8007374:	2b02      	cmp	r3, #2
 8007376:	d00c      	beq.n	8007392 <UART_SetConfig+0xe6>
 8007378:	d820      	bhi.n	80073bc <UART_SetConfig+0x110>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <UART_SetConfig+0xd8>
 800737e:	2b01      	cmp	r3, #1
 8007380:	d00e      	beq.n	80073a0 <UART_SetConfig+0xf4>
 8007382:	e01b      	b.n	80073bc <UART_SetConfig+0x110>
 8007384:	231b      	movs	r3, #27
 8007386:	2220      	movs	r2, #32
 8007388:	189b      	adds	r3, r3, r2
 800738a:	19db      	adds	r3, r3, r7
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
 8007390:	e154      	b.n	800763c <UART_SetConfig+0x390>
 8007392:	231b      	movs	r3, #27
 8007394:	2220      	movs	r2, #32
 8007396:	189b      	adds	r3, r3, r2
 8007398:	19db      	adds	r3, r3, r7
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e14d      	b.n	800763c <UART_SetConfig+0x390>
 80073a0:	231b      	movs	r3, #27
 80073a2:	2220      	movs	r2, #32
 80073a4:	189b      	adds	r3, r3, r2
 80073a6:	19db      	adds	r3, r3, r7
 80073a8:	2204      	movs	r2, #4
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e146      	b.n	800763c <UART_SetConfig+0x390>
 80073ae:	231b      	movs	r3, #27
 80073b0:	2220      	movs	r2, #32
 80073b2:	189b      	adds	r3, r3, r2
 80073b4:	19db      	adds	r3, r3, r7
 80073b6:	2208      	movs	r2, #8
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e13f      	b.n	800763c <UART_SetConfig+0x390>
 80073bc:	231b      	movs	r3, #27
 80073be:	2220      	movs	r2, #32
 80073c0:	189b      	adds	r3, r3, r2
 80073c2:	19db      	adds	r3, r3, r7
 80073c4:	2210      	movs	r2, #16
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	e138      	b.n	800763c <UART_SetConfig+0x390>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a8c      	ldr	r2, [pc, #560]	; (8007600 <UART_SetConfig+0x354>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d131      	bne.n	8007438 <UART_SetConfig+0x18c>
 80073d4:	4b89      	ldr	r3, [pc, #548]	; (80075fc <UART_SetConfig+0x350>)
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	220c      	movs	r2, #12
 80073da:	4013      	ands	r3, r2
 80073dc:	2b0c      	cmp	r3, #12
 80073de:	d01d      	beq.n	800741c <UART_SetConfig+0x170>
 80073e0:	d823      	bhi.n	800742a <UART_SetConfig+0x17e>
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d00c      	beq.n	8007400 <UART_SetConfig+0x154>
 80073e6:	d820      	bhi.n	800742a <UART_SetConfig+0x17e>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <UART_SetConfig+0x146>
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d00e      	beq.n	800740e <UART_SetConfig+0x162>
 80073f0:	e01b      	b.n	800742a <UART_SetConfig+0x17e>
 80073f2:	231b      	movs	r3, #27
 80073f4:	2220      	movs	r2, #32
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	19db      	adds	r3, r3, r7
 80073fa:	2200      	movs	r2, #0
 80073fc:	701a      	strb	r2, [r3, #0]
 80073fe:	e11d      	b.n	800763c <UART_SetConfig+0x390>
 8007400:	231b      	movs	r3, #27
 8007402:	2220      	movs	r2, #32
 8007404:	189b      	adds	r3, r3, r2
 8007406:	19db      	adds	r3, r3, r7
 8007408:	2202      	movs	r2, #2
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	e116      	b.n	800763c <UART_SetConfig+0x390>
 800740e:	231b      	movs	r3, #27
 8007410:	2220      	movs	r2, #32
 8007412:	189b      	adds	r3, r3, r2
 8007414:	19db      	adds	r3, r3, r7
 8007416:	2204      	movs	r2, #4
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e10f      	b.n	800763c <UART_SetConfig+0x390>
 800741c:	231b      	movs	r3, #27
 800741e:	2220      	movs	r2, #32
 8007420:	189b      	adds	r3, r3, r2
 8007422:	19db      	adds	r3, r3, r7
 8007424:	2208      	movs	r2, #8
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	e108      	b.n	800763c <UART_SetConfig+0x390>
 800742a:	231b      	movs	r3, #27
 800742c:	2220      	movs	r2, #32
 800742e:	189b      	adds	r3, r3, r2
 8007430:	19db      	adds	r3, r3, r7
 8007432:	2210      	movs	r2, #16
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e101      	b.n	800763c <UART_SetConfig+0x390>
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a71      	ldr	r2, [pc, #452]	; (8007604 <UART_SetConfig+0x358>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d131      	bne.n	80074a6 <UART_SetConfig+0x1fa>
 8007442:	4b6e      	ldr	r3, [pc, #440]	; (80075fc <UART_SetConfig+0x350>)
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	2230      	movs	r2, #48	; 0x30
 8007448:	4013      	ands	r3, r2
 800744a:	2b30      	cmp	r3, #48	; 0x30
 800744c:	d01d      	beq.n	800748a <UART_SetConfig+0x1de>
 800744e:	d823      	bhi.n	8007498 <UART_SetConfig+0x1ec>
 8007450:	2b20      	cmp	r3, #32
 8007452:	d00c      	beq.n	800746e <UART_SetConfig+0x1c2>
 8007454:	d820      	bhi.n	8007498 <UART_SetConfig+0x1ec>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <UART_SetConfig+0x1b4>
 800745a:	2b10      	cmp	r3, #16
 800745c:	d00e      	beq.n	800747c <UART_SetConfig+0x1d0>
 800745e:	e01b      	b.n	8007498 <UART_SetConfig+0x1ec>
 8007460:	231b      	movs	r3, #27
 8007462:	2220      	movs	r2, #32
 8007464:	189b      	adds	r3, r3, r2
 8007466:	19db      	adds	r3, r3, r7
 8007468:	2200      	movs	r2, #0
 800746a:	701a      	strb	r2, [r3, #0]
 800746c:	e0e6      	b.n	800763c <UART_SetConfig+0x390>
 800746e:	231b      	movs	r3, #27
 8007470:	2220      	movs	r2, #32
 8007472:	189b      	adds	r3, r3, r2
 8007474:	19db      	adds	r3, r3, r7
 8007476:	2202      	movs	r2, #2
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e0df      	b.n	800763c <UART_SetConfig+0x390>
 800747c:	231b      	movs	r3, #27
 800747e:	2220      	movs	r2, #32
 8007480:	189b      	adds	r3, r3, r2
 8007482:	19db      	adds	r3, r3, r7
 8007484:	2204      	movs	r2, #4
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e0d8      	b.n	800763c <UART_SetConfig+0x390>
 800748a:	231b      	movs	r3, #27
 800748c:	2220      	movs	r2, #32
 800748e:	189b      	adds	r3, r3, r2
 8007490:	19db      	adds	r3, r3, r7
 8007492:	2208      	movs	r2, #8
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e0d1      	b.n	800763c <UART_SetConfig+0x390>
 8007498:	231b      	movs	r3, #27
 800749a:	2220      	movs	r2, #32
 800749c:	189b      	adds	r3, r3, r2
 800749e:	19db      	adds	r3, r3, r7
 80074a0:	2210      	movs	r2, #16
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	e0ca      	b.n	800763c <UART_SetConfig+0x390>
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a57      	ldr	r2, [pc, #348]	; (8007608 <UART_SetConfig+0x35c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d106      	bne.n	80074be <UART_SetConfig+0x212>
 80074b0:	231b      	movs	r3, #27
 80074b2:	2220      	movs	r2, #32
 80074b4:	189b      	adds	r3, r3, r2
 80074b6:	19db      	adds	r3, r3, r7
 80074b8:	2200      	movs	r2, #0
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e0be      	b.n	800763c <UART_SetConfig+0x390>
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a52      	ldr	r2, [pc, #328]	; (800760c <UART_SetConfig+0x360>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d106      	bne.n	80074d6 <UART_SetConfig+0x22a>
 80074c8:	231b      	movs	r3, #27
 80074ca:	2220      	movs	r2, #32
 80074cc:	189b      	adds	r3, r3, r2
 80074ce:	19db      	adds	r3, r3, r7
 80074d0:	2200      	movs	r2, #0
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e0b2      	b.n	800763c <UART_SetConfig+0x390>
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a4d      	ldr	r2, [pc, #308]	; (8007610 <UART_SetConfig+0x364>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d106      	bne.n	80074ee <UART_SetConfig+0x242>
 80074e0:	231b      	movs	r3, #27
 80074e2:	2220      	movs	r2, #32
 80074e4:	189b      	adds	r3, r3, r2
 80074e6:	19db      	adds	r3, r3, r7
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
 80074ec:	e0a6      	b.n	800763c <UART_SetConfig+0x390>
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a3e      	ldr	r2, [pc, #248]	; (80075ec <UART_SetConfig+0x340>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d13e      	bne.n	8007576 <UART_SetConfig+0x2ca>
 80074f8:	4b40      	ldr	r3, [pc, #256]	; (80075fc <UART_SetConfig+0x350>)
 80074fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074fc:	23c0      	movs	r3, #192	; 0xc0
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	4013      	ands	r3, r2
 8007502:	22c0      	movs	r2, #192	; 0xc0
 8007504:	0112      	lsls	r2, r2, #4
 8007506:	4293      	cmp	r3, r2
 8007508:	d027      	beq.n	800755a <UART_SetConfig+0x2ae>
 800750a:	22c0      	movs	r2, #192	; 0xc0
 800750c:	0112      	lsls	r2, r2, #4
 800750e:	4293      	cmp	r3, r2
 8007510:	d82a      	bhi.n	8007568 <UART_SetConfig+0x2bc>
 8007512:	2280      	movs	r2, #128	; 0x80
 8007514:	0112      	lsls	r2, r2, #4
 8007516:	4293      	cmp	r3, r2
 8007518:	d011      	beq.n	800753e <UART_SetConfig+0x292>
 800751a:	2280      	movs	r2, #128	; 0x80
 800751c:	0112      	lsls	r2, r2, #4
 800751e:	4293      	cmp	r3, r2
 8007520:	d822      	bhi.n	8007568 <UART_SetConfig+0x2bc>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d004      	beq.n	8007530 <UART_SetConfig+0x284>
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	00d2      	lsls	r2, r2, #3
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <UART_SetConfig+0x2a0>
 800752e:	e01b      	b.n	8007568 <UART_SetConfig+0x2bc>
 8007530:	231b      	movs	r3, #27
 8007532:	2220      	movs	r2, #32
 8007534:	189b      	adds	r3, r3, r2
 8007536:	19db      	adds	r3, r3, r7
 8007538:	2200      	movs	r2, #0
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e07e      	b.n	800763c <UART_SetConfig+0x390>
 800753e:	231b      	movs	r3, #27
 8007540:	2220      	movs	r2, #32
 8007542:	189b      	adds	r3, r3, r2
 8007544:	19db      	adds	r3, r3, r7
 8007546:	2202      	movs	r2, #2
 8007548:	701a      	strb	r2, [r3, #0]
 800754a:	e077      	b.n	800763c <UART_SetConfig+0x390>
 800754c:	231b      	movs	r3, #27
 800754e:	2220      	movs	r2, #32
 8007550:	189b      	adds	r3, r3, r2
 8007552:	19db      	adds	r3, r3, r7
 8007554:	2204      	movs	r2, #4
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e070      	b.n	800763c <UART_SetConfig+0x390>
 800755a:	231b      	movs	r3, #27
 800755c:	2220      	movs	r2, #32
 800755e:	189b      	adds	r3, r3, r2
 8007560:	19db      	adds	r3, r3, r7
 8007562:	2208      	movs	r2, #8
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e069      	b.n	800763c <UART_SetConfig+0x390>
 8007568:	231b      	movs	r3, #27
 800756a:	2220      	movs	r2, #32
 800756c:	189b      	adds	r3, r3, r2
 800756e:	19db      	adds	r3, r3, r7
 8007570:	2210      	movs	r2, #16
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	e062      	b.n	800763c <UART_SetConfig+0x390>
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1d      	ldr	r2, [pc, #116]	; (80075f0 <UART_SetConfig+0x344>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d157      	bne.n	8007630 <UART_SetConfig+0x384>
 8007580:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <UART_SetConfig+0x350>)
 8007582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007584:	23c0      	movs	r3, #192	; 0xc0
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4013      	ands	r3, r2
 800758a:	22c0      	movs	r2, #192	; 0xc0
 800758c:	0092      	lsls	r2, r2, #2
 800758e:	4293      	cmp	r3, r2
 8007590:	d040      	beq.n	8007614 <UART_SetConfig+0x368>
 8007592:	22c0      	movs	r2, #192	; 0xc0
 8007594:	0092      	lsls	r2, r2, #2
 8007596:	4293      	cmp	r3, r2
 8007598:	d843      	bhi.n	8007622 <UART_SetConfig+0x376>
 800759a:	2280      	movs	r2, #128	; 0x80
 800759c:	0092      	lsls	r2, r2, #2
 800759e:	4293      	cmp	r3, r2
 80075a0:	d011      	beq.n	80075c6 <UART_SetConfig+0x31a>
 80075a2:	2280      	movs	r2, #128	; 0x80
 80075a4:	0092      	lsls	r2, r2, #2
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d83b      	bhi.n	8007622 <UART_SetConfig+0x376>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <UART_SetConfig+0x30c>
 80075ae:	2280      	movs	r2, #128	; 0x80
 80075b0:	0052      	lsls	r2, r2, #1
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <UART_SetConfig+0x328>
 80075b6:	e034      	b.n	8007622 <UART_SetConfig+0x376>
 80075b8:	231b      	movs	r3, #27
 80075ba:	2220      	movs	r2, #32
 80075bc:	189b      	adds	r3, r3, r2
 80075be:	19db      	adds	r3, r3, r7
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e03a      	b.n	800763c <UART_SetConfig+0x390>
 80075c6:	231b      	movs	r3, #27
 80075c8:	2220      	movs	r2, #32
 80075ca:	189b      	adds	r3, r3, r2
 80075cc:	19db      	adds	r3, r3, r7
 80075ce:	2202      	movs	r2, #2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e033      	b.n	800763c <UART_SetConfig+0x390>
 80075d4:	231b      	movs	r3, #27
 80075d6:	2220      	movs	r2, #32
 80075d8:	189b      	adds	r3, r3, r2
 80075da:	19db      	adds	r3, r3, r7
 80075dc:	2204      	movs	r2, #4
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	e02c      	b.n	800763c <UART_SetConfig+0x390>
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	cfff69f3 	.word	0xcfff69f3
 80075e8:	ffffcfff 	.word	0xffffcfff
 80075ec:	40008000 	.word	0x40008000
 80075f0:	40008400 	.word	0x40008400
 80075f4:	11fff4ff 	.word	0x11fff4ff
 80075f8:	40013800 	.word	0x40013800
 80075fc:	40021000 	.word	0x40021000
 8007600:	40004400 	.word	0x40004400
 8007604:	40004800 	.word	0x40004800
 8007608:	40004c00 	.word	0x40004c00
 800760c:	40005000 	.word	0x40005000
 8007610:	40013c00 	.word	0x40013c00
 8007614:	231b      	movs	r3, #27
 8007616:	2220      	movs	r2, #32
 8007618:	189b      	adds	r3, r3, r2
 800761a:	19db      	adds	r3, r3, r7
 800761c:	2208      	movs	r2, #8
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e00c      	b.n	800763c <UART_SetConfig+0x390>
 8007622:	231b      	movs	r3, #27
 8007624:	2220      	movs	r2, #32
 8007626:	189b      	adds	r3, r3, r2
 8007628:	19db      	adds	r3, r3, r7
 800762a:	2210      	movs	r2, #16
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	e005      	b.n	800763c <UART_SetConfig+0x390>
 8007630:	231b      	movs	r3, #27
 8007632:	2220      	movs	r2, #32
 8007634:	189b      	adds	r3, r3, r2
 8007636:	19db      	adds	r3, r3, r7
 8007638:	2210      	movs	r2, #16
 800763a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4ac1      	ldr	r2, [pc, #772]	; (8007948 <UART_SetConfig+0x69c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d005      	beq.n	8007652 <UART_SetConfig+0x3a6>
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4ac0      	ldr	r2, [pc, #768]	; (800794c <UART_SetConfig+0x6a0>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d000      	beq.n	8007652 <UART_SetConfig+0x3a6>
 8007650:	e093      	b.n	800777a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007652:	231b      	movs	r3, #27
 8007654:	2220      	movs	r2, #32
 8007656:	189b      	adds	r3, r3, r2
 8007658:	19db      	adds	r3, r3, r7
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b08      	cmp	r3, #8
 800765e:	d015      	beq.n	800768c <UART_SetConfig+0x3e0>
 8007660:	dc18      	bgt.n	8007694 <UART_SetConfig+0x3e8>
 8007662:	2b04      	cmp	r3, #4
 8007664:	d00d      	beq.n	8007682 <UART_SetConfig+0x3d6>
 8007666:	dc15      	bgt.n	8007694 <UART_SetConfig+0x3e8>
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <UART_SetConfig+0x3c6>
 800766c:	2b02      	cmp	r3, #2
 800766e:	d005      	beq.n	800767c <UART_SetConfig+0x3d0>
 8007670:	e010      	b.n	8007694 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007672:	f7fe f855 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8007676:	0003      	movs	r3, r0
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767a:	e014      	b.n	80076a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800767c:	4bb4      	ldr	r3, [pc, #720]	; (8007950 <UART_SetConfig+0x6a4>)
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007680:	e011      	b.n	80076a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007682:	f7fd ffc1 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 8007686:	0003      	movs	r3, r0
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800768a:	e00c      	b.n	80076a6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768c:	2380      	movs	r3, #128	; 0x80
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007692:	e008      	b.n	80076a6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007698:	231a      	movs	r3, #26
 800769a:	2220      	movs	r2, #32
 800769c:	189b      	adds	r3, r3, r2
 800769e:	19db      	adds	r3, r3, r7
 80076a0:	2201      	movs	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]
        break;
 80076a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d100      	bne.n	80076ae <UART_SetConfig+0x402>
 80076ac:	e135      	b.n	800791a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076b2:	4ba8      	ldr	r3, [pc, #672]	; (8007954 <UART_SetConfig+0x6a8>)
 80076b4:	0052      	lsls	r2, r2, #1
 80076b6:	5ad3      	ldrh	r3, [r2, r3]
 80076b8:	0019      	movs	r1, r3
 80076ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076bc:	f7f8 fd3e 	bl	800013c <__udivsi3>
 80076c0:	0003      	movs	r3, r0
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	0013      	movs	r3, r2
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	189b      	adds	r3, r3, r2
 80076ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d305      	bcc.n	80076e0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076dc:	429a      	cmp	r2, r3
 80076de:	d906      	bls.n	80076ee <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80076e0:	231a      	movs	r3, #26
 80076e2:	2220      	movs	r2, #32
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	19db      	adds	r3, r3, r7
 80076e8:	2201      	movs	r2, #1
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e044      	b.n	8007778 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076fa:	4b96      	ldr	r3, [pc, #600]	; (8007954 <UART_SetConfig+0x6a8>)
 80076fc:	0052      	lsls	r2, r2, #1
 80076fe:	5ad3      	ldrh	r3, [r2, r3]
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	69b8      	ldr	r0, [r7, #24]
 800770c:	69f9      	ldr	r1, [r7, #28]
 800770e:	f7f8 fec9 	bl	80004a4 <__aeabi_uldivmod>
 8007712:	0002      	movs	r2, r0
 8007714:	000b      	movs	r3, r1
 8007716:	0e11      	lsrs	r1, r2, #24
 8007718:	021d      	lsls	r5, r3, #8
 800771a:	430d      	orrs	r5, r1
 800771c:	0214      	lsls	r4, r2, #8
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	085b      	lsrs	r3, r3, #1
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	68b8      	ldr	r0, [r7, #8]
 800772c:	68f9      	ldr	r1, [r7, #12]
 800772e:	1900      	adds	r0, r0, r4
 8007730:	4169      	adcs	r1, r5
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	2300      	movs	r3, #0
 800773a:	607b      	str	r3, [r7, #4]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f7f8 feb0 	bl	80004a4 <__aeabi_uldivmod>
 8007744:	0002      	movs	r2, r0
 8007746:	000b      	movs	r3, r1
 8007748:	0013      	movs	r3, r2
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774e:	23c0      	movs	r3, #192	; 0xc0
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	429a      	cmp	r2, r3
 8007754:	d309      	bcc.n	800776a <UART_SetConfig+0x4be>
 8007756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007758:	2380      	movs	r3, #128	; 0x80
 800775a:	035b      	lsls	r3, r3, #13
 800775c:	429a      	cmp	r2, r3
 800775e:	d204      	bcs.n	800776a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e006      	b.n	8007778 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800776a:	231a      	movs	r3, #26
 800776c:	2220      	movs	r2, #32
 800776e:	189b      	adds	r3, r3, r2
 8007770:	19db      	adds	r3, r3, r7
 8007772:	2201      	movs	r2, #1
 8007774:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007776:	e0d0      	b.n	800791a <UART_SetConfig+0x66e>
 8007778:	e0cf      	b.n	800791a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	429a      	cmp	r2, r3
 8007784:	d000      	beq.n	8007788 <UART_SetConfig+0x4dc>
 8007786:	e070      	b.n	800786a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007788:	231b      	movs	r3, #27
 800778a:	2220      	movs	r2, #32
 800778c:	189b      	adds	r3, r3, r2
 800778e:	19db      	adds	r3, r3, r7
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d015      	beq.n	80077c2 <UART_SetConfig+0x516>
 8007796:	dc18      	bgt.n	80077ca <UART_SetConfig+0x51e>
 8007798:	2b04      	cmp	r3, #4
 800779a:	d00d      	beq.n	80077b8 <UART_SetConfig+0x50c>
 800779c:	dc15      	bgt.n	80077ca <UART_SetConfig+0x51e>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <UART_SetConfig+0x4fc>
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d005      	beq.n	80077b2 <UART_SetConfig+0x506>
 80077a6:	e010      	b.n	80077ca <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a8:	f7fd ffba 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 80077ac:	0003      	movs	r3, r0
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b0:	e014      	b.n	80077dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b2:	4b67      	ldr	r3, [pc, #412]	; (8007950 <UART_SetConfig+0x6a4>)
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b6:	e011      	b.n	80077dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b8:	f7fd ff26 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 80077bc:	0003      	movs	r3, r0
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c0:	e00c      	b.n	80077dc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c2:	2380      	movs	r3, #128	; 0x80
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c8:	e008      	b.n	80077dc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80077ce:	231a      	movs	r3, #26
 80077d0:	2220      	movs	r2, #32
 80077d2:	189b      	adds	r3, r3, r2
 80077d4:	19db      	adds	r3, r3, r7
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
        break;
 80077da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d100      	bne.n	80077e4 <UART_SetConfig+0x538>
 80077e2:	e09a      	b.n	800791a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077e8:	4b5a      	ldr	r3, [pc, #360]	; (8007954 <UART_SetConfig+0x6a8>)
 80077ea:	0052      	lsls	r2, r2, #1
 80077ec:	5ad3      	ldrh	r3, [r2, r3]
 80077ee:	0019      	movs	r1, r3
 80077f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80077f2:	f7f8 fca3 	bl	800013c <__udivsi3>
 80077f6:	0003      	movs	r3, r0
 80077f8:	005a      	lsls	r2, r3, #1
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	18d2      	adds	r2, r2, r3
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	0019      	movs	r1, r3
 8007808:	0010      	movs	r0, r2
 800780a:	f7f8 fc97 	bl	800013c <__udivsi3>
 800780e:	0003      	movs	r3, r0
 8007810:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	2b0f      	cmp	r3, #15
 8007816:	d921      	bls.n	800785c <UART_SetConfig+0x5b0>
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	2380      	movs	r3, #128	; 0x80
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	429a      	cmp	r2, r3
 8007820:	d21c      	bcs.n	800785c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	b29a      	uxth	r2, r3
 8007826:	200e      	movs	r0, #14
 8007828:	2420      	movs	r4, #32
 800782a:	1903      	adds	r3, r0, r4
 800782c:	19db      	adds	r3, r3, r7
 800782e:	210f      	movs	r1, #15
 8007830:	438a      	bics	r2, r1
 8007832:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	085b      	lsrs	r3, r3, #1
 8007838:	b29b      	uxth	r3, r3
 800783a:	2207      	movs	r2, #7
 800783c:	4013      	ands	r3, r2
 800783e:	b299      	uxth	r1, r3
 8007840:	1903      	adds	r3, r0, r4
 8007842:	19db      	adds	r3, r3, r7
 8007844:	1902      	adds	r2, r0, r4
 8007846:	19d2      	adds	r2, r2, r7
 8007848:	8812      	ldrh	r2, [r2, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1902      	adds	r2, r0, r4
 8007854:	19d2      	adds	r2, r2, r7
 8007856:	8812      	ldrh	r2, [r2, #0]
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e05e      	b.n	800791a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800785c:	231a      	movs	r3, #26
 800785e:	2220      	movs	r2, #32
 8007860:	189b      	adds	r3, r3, r2
 8007862:	19db      	adds	r3, r3, r7
 8007864:	2201      	movs	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e057      	b.n	800791a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800786a:	231b      	movs	r3, #27
 800786c:	2220      	movs	r2, #32
 800786e:	189b      	adds	r3, r3, r2
 8007870:	19db      	adds	r3, r3, r7
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d015      	beq.n	80078a4 <UART_SetConfig+0x5f8>
 8007878:	dc18      	bgt.n	80078ac <UART_SetConfig+0x600>
 800787a:	2b04      	cmp	r3, #4
 800787c:	d00d      	beq.n	800789a <UART_SetConfig+0x5ee>
 800787e:	dc15      	bgt.n	80078ac <UART_SetConfig+0x600>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <UART_SetConfig+0x5de>
 8007884:	2b02      	cmp	r3, #2
 8007886:	d005      	beq.n	8007894 <UART_SetConfig+0x5e8>
 8007888:	e010      	b.n	80078ac <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800788a:	f7fd ff49 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 800788e:	0003      	movs	r3, r0
 8007890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007892:	e014      	b.n	80078be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007894:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <UART_SetConfig+0x6a4>)
 8007896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007898:	e011      	b.n	80078be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800789a:	f7fd feb5 	bl	8005608 <HAL_RCC_GetSysClockFreq>
 800789e:	0003      	movs	r3, r0
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a2:	e00c      	b.n	80078be <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078aa:	e008      	b.n	80078be <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80078b0:	231a      	movs	r3, #26
 80078b2:	2220      	movs	r2, #32
 80078b4:	189b      	adds	r3, r3, r2
 80078b6:	19db      	adds	r3, r3, r7
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
        break;
 80078bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02a      	beq.n	800791a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c8:	4b22      	ldr	r3, [pc, #136]	; (8007954 <UART_SetConfig+0x6a8>)
 80078ca:	0052      	lsls	r2, r2, #1
 80078cc:	5ad3      	ldrh	r3, [r2, r3]
 80078ce:	0019      	movs	r1, r3
 80078d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80078d2:	f7f8 fc33 	bl	800013c <__udivsi3>
 80078d6:	0003      	movs	r3, r0
 80078d8:	001a      	movs	r2, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	085b      	lsrs	r3, r3, #1
 80078e0:	18d2      	adds	r2, r2, r3
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	0019      	movs	r1, r3
 80078e8:	0010      	movs	r0, r2
 80078ea:	f7f8 fc27 	bl	800013c <__udivsi3>
 80078ee:	0003      	movs	r3, r0
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b0f      	cmp	r3, #15
 80078f6:	d90a      	bls.n	800790e <UART_SetConfig+0x662>
 80078f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fa:	2380      	movs	r3, #128	; 0x80
 80078fc:	025b      	lsls	r3, r3, #9
 80078fe:	429a      	cmp	r2, r3
 8007900:	d205      	bcs.n	800790e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	b29a      	uxth	r2, r3
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60da      	str	r2, [r3, #12]
 800790c:	e005      	b.n	800791a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800790e:	231a      	movs	r3, #26
 8007910:	2220      	movs	r2, #32
 8007912:	189b      	adds	r3, r3, r2
 8007914:	19db      	adds	r3, r3, r7
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	226a      	movs	r2, #106	; 0x6a
 800791e:	2101      	movs	r1, #1
 8007920:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	2268      	movs	r2, #104	; 0x68
 8007926:	2101      	movs	r1, #1
 8007928:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	2200      	movs	r2, #0
 800792e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	2200      	movs	r2, #0
 8007934:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007936:	231a      	movs	r3, #26
 8007938:	2220      	movs	r2, #32
 800793a:	189b      	adds	r3, r3, r2
 800793c:	19db      	adds	r3, r3, r7
 800793e:	781b      	ldrb	r3, [r3, #0]
}
 8007940:	0018      	movs	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	b010      	add	sp, #64	; 0x40
 8007946:	bdb0      	pop	{r4, r5, r7, pc}
 8007948:	40008000 	.word	0x40008000
 800794c:	40008400 	.word	0x40008400
 8007950:	00f42400 	.word	0x00f42400
 8007954:	08014a68 	.word	0x08014a68

08007958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	2208      	movs	r2, #8
 8007966:	4013      	ands	r3, r2
 8007968:	d00b      	beq.n	8007982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a4a      	ldr	r2, [pc, #296]	; (8007a9c <UART_AdvFeatureConfig+0x144>)
 8007972:	4013      	ands	r3, r2
 8007974:	0019      	movs	r1, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	2201      	movs	r2, #1
 8007988:	4013      	ands	r3, r2
 800798a:	d00b      	beq.n	80079a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4a43      	ldr	r2, [pc, #268]	; (8007aa0 <UART_AdvFeatureConfig+0x148>)
 8007994:	4013      	ands	r3, r2
 8007996:	0019      	movs	r1, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	2202      	movs	r2, #2
 80079aa:	4013      	ands	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	4a3b      	ldr	r2, [pc, #236]	; (8007aa4 <UART_AdvFeatureConfig+0x14c>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	0019      	movs	r1, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	2204      	movs	r2, #4
 80079cc:	4013      	ands	r3, r2
 80079ce:	d00b      	beq.n	80079e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4a34      	ldr	r2, [pc, #208]	; (8007aa8 <UART_AdvFeatureConfig+0x150>)
 80079d8:	4013      	ands	r3, r2
 80079da:	0019      	movs	r1, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	2210      	movs	r2, #16
 80079ee:	4013      	ands	r3, r2
 80079f0:	d00b      	beq.n	8007a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	; (8007aac <UART_AdvFeatureConfig+0x154>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	0019      	movs	r1, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	2220      	movs	r2, #32
 8007a10:	4013      	ands	r3, r2
 8007a12:	d00b      	beq.n	8007a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <UART_AdvFeatureConfig+0x158>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	0019      	movs	r1, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	2240      	movs	r2, #64	; 0x40
 8007a32:	4013      	ands	r3, r2
 8007a34:	d01d      	beq.n	8007a72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4a1d      	ldr	r2, [pc, #116]	; (8007ab4 <UART_AdvFeatureConfig+0x15c>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	0019      	movs	r1, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a52:	2380      	movs	r3, #128	; 0x80
 8007a54:	035b      	lsls	r3, r3, #13
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d10b      	bne.n	8007a72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <UART_AdvFeatureConfig+0x160>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	0019      	movs	r1, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	2280      	movs	r2, #128	; 0x80
 8007a78:	4013      	ands	r3, r2
 8007a7a:	d00b      	beq.n	8007a94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4a0e      	ldr	r2, [pc, #56]	; (8007abc <UART_AdvFeatureConfig+0x164>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	0019      	movs	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]
  }
}
 8007a94:	46c0      	nop			; (mov r8, r8)
 8007a96:	46bd      	mov	sp, r7
 8007a98:	b002      	add	sp, #8
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	ffff7fff 	.word	0xffff7fff
 8007aa0:	fffdffff 	.word	0xfffdffff
 8007aa4:	fffeffff 	.word	0xfffeffff
 8007aa8:	fffbffff 	.word	0xfffbffff
 8007aac:	ffffefff 	.word	0xffffefff
 8007ab0:	ffffdfff 	.word	0xffffdfff
 8007ab4:	ffefffff 	.word	0xffefffff
 8007ab8:	ff9fffff 	.word	0xff9fffff
 8007abc:	fff7ffff 	.word	0xfff7ffff

08007ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b092      	sub	sp, #72	; 0x48
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2290      	movs	r2, #144	; 0x90
 8007acc:	2100      	movs	r1, #0
 8007ace:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ad0:	f7fc fc80 	bl	80043d4 <HAL_GetTick>
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d12d      	bne.n	8007b42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	0391      	lsls	r1, r2, #14
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4a47      	ldr	r2, [pc, #284]	; (8007c0c <UART_CheckIdleState+0x14c>)
 8007af0:	9200      	str	r2, [sp, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f000 f88e 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007af8:	1e03      	subs	r3, r0, #0
 8007afa:	d022      	beq.n	8007b42 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afc:	f3ef 8310 	mrs	r3, PRIMASK
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b06:	2301      	movs	r3, #1
 8007b08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	f383 8810 	msr	PRIMASK, r3
}
 8007b10:	46c0      	nop			; (mov r8, r8)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	438a      	bics	r2, r1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	f383 8810 	msr	PRIMASK, r3
}
 8007b2c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2288      	movs	r2, #136	; 0x88
 8007b32:	2120      	movs	r1, #32
 8007b34:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2284      	movs	r2, #132	; 0x84
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e060      	b.n	8007c04 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2204      	movs	r2, #4
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d146      	bne.n	8007bde <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	03d1      	lsls	r1, r2, #15
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <UART_CheckIdleState+0x14c>)
 8007b5a:	9200      	str	r2, [sp, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f000 f859 	bl	8007c14 <UART_WaitOnFlagUntilTimeout>
 8007b62:	1e03      	subs	r3, r0, #0
 8007b64:	d03b      	beq.n	8007bde <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b66:	f3ef 8310 	mrs	r3, PRIMASK
 8007b6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	2301      	movs	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f383 8810 	msr	PRIMASK, r3
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4922      	ldr	r1, [pc, #136]	; (8007c10 <UART_CheckIdleState+0x150>)
 8007b88:	400a      	ands	r2, r1
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f383 8810 	msr	PRIMASK, r3
}
 8007b96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b98:	f3ef 8310 	mrs	r3, PRIMASK
 8007b9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f383 8810 	msr	PRIMASK, r3
}
 8007bac:	46c0      	nop			; (mov r8, r8)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2101      	movs	r1, #1
 8007bba:	438a      	bics	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f383 8810 	msr	PRIMASK, r3
}
 8007bc8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	228c      	movs	r2, #140	; 0x8c
 8007bce:	2120      	movs	r1, #32
 8007bd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2284      	movs	r2, #132	; 0x84
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e012      	b.n	8007c04 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2288      	movs	r2, #136	; 0x88
 8007be2:	2120      	movs	r1, #32
 8007be4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	228c      	movs	r2, #140	; 0x8c
 8007bea:	2120      	movs	r1, #32
 8007bec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2284      	movs	r2, #132	; 0x84
 8007bfe:	2100      	movs	r1, #0
 8007c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	0018      	movs	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	b010      	add	sp, #64	; 0x40
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	01ffffff 	.word	0x01ffffff
 8007c10:	fffffedf 	.word	0xfffffedf

08007c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	1dfb      	adds	r3, r7, #7
 8007c22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c24:	e051      	b.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	d04e      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2c:	f7fc fbd2 	bl	80043d4 <HAL_GetTick>
 8007c30:	0002      	movs	r2, r0
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d302      	bcc.n	8007c42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e051      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d03b      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b80      	cmp	r3, #128	; 0x80
 8007c56:	d038      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	d035      	beq.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	2208      	movs	r2, #8
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d111      	bne.n	8007c90 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2208      	movs	r2, #8
 8007c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f000 f83c 	bl	8007cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2290      	movs	r2, #144	; 0x90
 8007c80:	2108      	movs	r1, #8
 8007c82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2284      	movs	r2, #132	; 0x84
 8007c88:	2100      	movs	r1, #0
 8007c8a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e02c      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	2380      	movs	r3, #128	; 0x80
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d112      	bne.n	8007cca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2280      	movs	r2, #128	; 0x80
 8007caa:	0112      	lsls	r2, r2, #4
 8007cac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 f81f 	bl	8007cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2290      	movs	r2, #144	; 0x90
 8007cba:	2120      	movs	r1, #32
 8007cbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2284      	movs	r2, #132	; 0x84
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e00f      	b.n	8007cea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	425a      	negs	r2, r3
 8007cda:	4153      	adcs	r3, r2
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	001a      	movs	r2, r3
 8007ce0:	1dfb      	adds	r3, r7, #7
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d09e      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b004      	add	sp, #16
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	; 0x38
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8007d00:	617b      	str	r3, [r7, #20]
  return(result);
 8007d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
 8007d06:	2301      	movs	r3, #1
 8007d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f383 8810 	msr	PRIMASK, r3
}
 8007d10:	46c0      	nop			; (mov r8, r8)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4926      	ldr	r1, [pc, #152]	; (8007db8 <UART_EndRxTransfer+0xc4>)
 8007d1e:	400a      	ands	r2, r1
 8007d20:	601a      	str	r2, [r3, #0]
 8007d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	f383 8810 	msr	PRIMASK, r3
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d32:	623b      	str	r3, [r7, #32]
  return(result);
 8007d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30
 8007d38:	2301      	movs	r3, #1
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	f383 8810 	msr	PRIMASK, r3
}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	491b      	ldr	r1, [pc, #108]	; (8007dbc <UART_EndRxTransfer+0xc8>)
 8007d50:	400a      	ands	r2, r1
 8007d52:	609a      	str	r2, [r3, #8]
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	f383 8810 	msr	PRIMASK, r3
}
 8007d5e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d118      	bne.n	8007d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d68:	f3ef 8310 	mrs	r3, PRIMASK
 8007d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d72:	2301      	movs	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f383 8810 	msr	PRIMASK, r3
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2110      	movs	r1, #16
 8007d8a:	438a      	bics	r2, r1
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f383 8810 	msr	PRIMASK, r3
}
 8007d98:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	228c      	movs	r2, #140	; 0x8c
 8007d9e:	2120      	movs	r1, #32
 8007da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b00e      	add	sp, #56	; 0x38
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	fffffedf 	.word	0xfffffedf
 8007dbc:	effffffe 	.word	0xeffffffe

08007dc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2284      	movs	r2, #132	; 0x84
 8007dcc:	5c9b      	ldrb	r3, [r3, r2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e027      	b.n	8007e26 <HAL_UARTEx_DisableFifoMode+0x66>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2284      	movs	r2, #132	; 0x84
 8007dda:	2101      	movs	r1, #1
 8007ddc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2288      	movs	r2, #136	; 0x88
 8007de2:	2124      	movs	r1, #36	; 0x24
 8007de4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2101      	movs	r1, #1
 8007dfa:	438a      	bics	r2, r1
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a0b      	ldr	r2, [pc, #44]	; (8007e30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2288      	movs	r2, #136	; 0x88
 8007e18:	2120      	movs	r1, #32
 8007e1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2284      	movs	r2, #132	; 0x84
 8007e20:	2100      	movs	r1, #0
 8007e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	0018      	movs	r0, r3
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b004      	add	sp, #16
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	dfffffff 	.word	0xdfffffff

08007e34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2284      	movs	r2, #132	; 0x84
 8007e42:	5c9b      	ldrb	r3, [r3, r2]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e02e      	b.n	8007eaa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2284      	movs	r2, #132	; 0x84
 8007e50:	2101      	movs	r1, #1
 8007e52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2288      	movs	r2, #136	; 0x88
 8007e58:	2124      	movs	r1, #36	; 0x24
 8007e5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2101      	movs	r1, #1
 8007e70:	438a      	bics	r2, r1
 8007e72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	08d9      	lsrs	r1, r3, #3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f000 f854 	bl	8007f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2288      	movs	r2, #136	; 0x88
 8007e9c:	2120      	movs	r1, #32
 8007e9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2284      	movs	r2, #132	; 0x84
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	0018      	movs	r0, r3
 8007eac:	46bd      	mov	sp, r7
 8007eae:	b004      	add	sp, #16
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2284      	movs	r2, #132	; 0x84
 8007ec2:	5c9b      	ldrb	r3, [r3, r2]
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e02f      	b.n	8007f2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2284      	movs	r2, #132	; 0x84
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2288      	movs	r2, #136	; 0x88
 8007ed8:	2124      	movs	r1, #36	; 0x24
 8007eda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2101      	movs	r1, #1
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	4a0e      	ldr	r2, [pc, #56]	; (8007f34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	0019      	movs	r1, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 f813 	bl	8007f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2288      	movs	r2, #136	; 0x88
 8007f1e:	2120      	movs	r1, #32
 8007f20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2284      	movs	r2, #132	; 0x84
 8007f26:	2100      	movs	r1, #0
 8007f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b004      	add	sp, #16
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	f1ffffff 	.word	0xf1ffffff

08007f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d108      	bne.n	8007f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	226a      	movs	r2, #106	; 0x6a
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2268      	movs	r2, #104	; 0x68
 8007f54:	2101      	movs	r1, #1
 8007f56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f58:	e043      	b.n	8007fe2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f5a:	260f      	movs	r6, #15
 8007f5c:	19bb      	adds	r3, r7, r6
 8007f5e:	2208      	movs	r2, #8
 8007f60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f62:	200e      	movs	r0, #14
 8007f64:	183b      	adds	r3, r7, r0
 8007f66:	2208      	movs	r2, #8
 8007f68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	0e5b      	lsrs	r3, r3, #25
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	240d      	movs	r4, #13
 8007f76:	193b      	adds	r3, r7, r4
 8007f78:	2107      	movs	r1, #7
 8007f7a:	400a      	ands	r2, r1
 8007f7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	0f5b      	lsrs	r3, r3, #29
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	250c      	movs	r5, #12
 8007f8a:	197b      	adds	r3, r7, r5
 8007f8c:	2107      	movs	r1, #7
 8007f8e:	400a      	ands	r2, r1
 8007f90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f92:	183b      	adds	r3, r7, r0
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	197a      	adds	r2, r7, r5
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	4914      	ldr	r1, [pc, #80]	; (8007fec <UARTEx_SetNbDataToProcess+0xb4>)
 8007f9c:	5c8a      	ldrb	r2, [r1, r2]
 8007f9e:	435a      	muls	r2, r3
 8007fa0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fa2:	197b      	adds	r3, r7, r5
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	4a12      	ldr	r2, [pc, #72]	; (8007ff0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007fa8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007faa:	0019      	movs	r1, r3
 8007fac:	f7f8 f950 	bl	8000250 <__divsi3>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	b299      	uxth	r1, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	226a      	movs	r2, #106	; 0x6a
 8007fb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fba:	19bb      	adds	r3, r7, r6
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	193a      	adds	r2, r7, r4
 8007fc0:	7812      	ldrb	r2, [r2, #0]
 8007fc2:	490a      	ldr	r1, [pc, #40]	; (8007fec <UARTEx_SetNbDataToProcess+0xb4>)
 8007fc4:	5c8a      	ldrb	r2, [r1, r2]
 8007fc6:	435a      	muls	r2, r3
 8007fc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fca:	193b      	adds	r3, r7, r4
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007fd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fd2:	0019      	movs	r1, r3
 8007fd4:	f7f8 f93c 	bl	8000250 <__divsi3>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	b299      	uxth	r1, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2268      	movs	r2, #104	; 0x68
 8007fe0:	5299      	strh	r1, [r3, r2]
}
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	b005      	add	sp, #20
 8007fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	08014a80 	.word	0x08014a80
 8007ff0:	08014a88 	.word	0x08014a88

08007ff4 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007ff4:	b5b0      	push	{r4, r5, r7, lr}
 8007ff6:	b0e4      	sub	sp, #400	; 0x190
 8007ff8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007ffa:	24c8      	movs	r4, #200	; 0xc8
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	0018      	movs	r0, r3
 8008000:	23c6      	movs	r3, #198	; 0xc6
 8008002:	001a      	movs	r2, r3
 8008004:	2100      	movs	r1, #0
 8008006:	f004 f9cd 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <astronode_send_cfg_sr+0x64>)
 800800c:	25c8      	movs	r5, #200	; 0xc8
 800800e:	006d      	lsls	r5, r5, #1
 8008010:	195b      	adds	r3, r3, r5
 8008012:	19db      	adds	r3, r3, r7
 8008014:	0018      	movs	r0, r3
 8008016:	23c6      	movs	r3, #198	; 0xc6
 8008018:	001a      	movs	r2, r3
 800801a:	2100      	movs	r1, #0
 800801c:	f004 f9c2 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008020:	193b      	adds	r3, r7, r4
 8008022:	2210      	movs	r2, #16
 8008024:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008026:	003a      	movs	r2, r7
 8008028:	193b      	adds	r3, r7, r4
 800802a:	0011      	movs	r1, r2
 800802c:	0018      	movs	r0, r3
 800802e:	f001 fa87 	bl	8009540 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008032:	4b09      	ldr	r3, [pc, #36]	; (8008058 <astronode_send_cfg_sr+0x64>)
 8008034:	195b      	adds	r3, r3, r5
 8008036:	19db      	adds	r3, r3, r7
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b90      	cmp	r3, #144	; 0x90
 800803c:	d104      	bne.n	8008048 <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 800803e:	4b07      	ldr	r3, [pc, #28]	; (800805c <astronode_send_cfg_sr+0x68>)
 8008040:	0018      	movs	r0, r3
 8008042:	f7fb f84b 	bl	80030dc <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008046:	e003      	b.n	8008050 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008048:	4b05      	ldr	r3, [pc, #20]	; (8008060 <astronode_send_cfg_sr+0x6c>)
 800804a:	0018      	movs	r0, r3
 800804c:	f7fb f846 	bl	80030dc <send_debug_logs>
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b064      	add	sp, #400	; 0x190
 8008056:	bdb0      	pop	{r4, r5, r7, pc}
 8008058:	fffffe70 	.word	0xfffffe70
 800805c:	080134a4 	.word	0x080134a4
 8008060:	080134d8 	.word	0x080134d8

08008064 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008066:	b0e7      	sub	sp, #412	; 0x19c
 8008068:	af00      	add	r7, sp, #0
 800806a:	0005      	movs	r5, r0
 800806c:	000c      	movs	r4, r1
 800806e:	0010      	movs	r0, r2
 8008070:	0019      	movs	r1, r3
 8008072:	4b4b      	ldr	r3, [pc, #300]	; (80081a0 <astronode_send_cfg_wr+0x13c>)
 8008074:	26cc      	movs	r6, #204	; 0xcc
 8008076:	0076      	lsls	r6, r6, #1
 8008078:	199b      	adds	r3, r3, r6
 800807a:	19db      	adds	r3, r3, r7
 800807c:	1c2a      	adds	r2, r5, #0
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	4b48      	ldr	r3, [pc, #288]	; (80081a4 <astronode_send_cfg_wr+0x140>)
 8008082:	0035      	movs	r5, r6
 8008084:	195b      	adds	r3, r3, r5
 8008086:	19db      	adds	r3, r3, r7
 8008088:	1c22      	adds	r2, r4, #0
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	4b46      	ldr	r3, [pc, #280]	; (80081a8 <astronode_send_cfg_wr+0x144>)
 800808e:	002c      	movs	r4, r5
 8008090:	191b      	adds	r3, r3, r4
 8008092:	19db      	adds	r3, r3, r7
 8008094:	1c02      	adds	r2, r0, #0
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	4b44      	ldr	r3, [pc, #272]	; (80081ac <astronode_send_cfg_wr+0x148>)
 800809a:	191b      	adds	r3, r3, r4
 800809c:	19db      	adds	r3, r3, r7
 800809e:	1c0a      	adds	r2, r1, #0
 80080a0:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80080a2:	25d0      	movs	r5, #208	; 0xd0
 80080a4:	197b      	adds	r3, r7, r5
 80080a6:	0018      	movs	r0, r3
 80080a8:	23c6      	movs	r3, #198	; 0xc6
 80080aa:	001a      	movs	r2, r3
 80080ac:	2100      	movs	r1, #0
 80080ae:	f004 f979 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 80080b2:	4b3f      	ldr	r3, [pc, #252]	; (80081b0 <astronode_send_cfg_wr+0x14c>)
 80080b4:	191b      	adds	r3, r3, r4
 80080b6:	19db      	adds	r3, r3, r7
 80080b8:	0018      	movs	r0, r3
 80080ba:	23c6      	movs	r3, #198	; 0xc6
 80080bc:	001a      	movs	r2, r3
 80080be:	2100      	movs	r1, #0
 80080c0:	f004 f970 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 80080c4:	0029      	movs	r1, r5
 80080c6:	187b      	adds	r3, r7, r1
 80080c8:	2205      	movs	r2, #5
 80080ca:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 80080cc:	4b34      	ldr	r3, [pc, #208]	; (80081a0 <astronode_send_cfg_wr+0x13c>)
 80080ce:	191b      	adds	r3, r3, r4
 80080d0:	19db      	adds	r3, r3, r7
 80080d2:	2200      	movs	r2, #0
 80080d4:	569a      	ldrsb	r2, [r3, r2]
 80080d6:	4b33      	ldr	r3, [pc, #204]	; (80081a4 <astronode_send_cfg_wr+0x140>)
 80080d8:	191b      	adds	r3, r3, r4
 80080da:	19db      	adds	r3, r3, r7
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	4313      	orrs	r3, r2
 80080e4:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 80080e6:	4b30      	ldr	r3, [pc, #192]	; (80081a8 <astronode_send_cfg_wr+0x144>)
 80080e8:	191b      	adds	r3, r3, r4
 80080ea:	19db      	adds	r3, r3, r7
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <astronode_send_cfg_wr+0x148>)
 80080f8:	191b      	adds	r3, r3, r4
 80080fa:	19db      	adds	r3, r3, r7
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	b25b      	sxtb	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b25b      	sxtb	r3, r3
 8008106:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008108:	187b      	adds	r3, r7, r1
 800810a:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 800810c:	23d4      	movs	r3, #212	; 0xd4
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	2508      	movs	r5, #8
 8008112:	195b      	adds	r3, r3, r5
 8008114:	19db      	adds	r3, r3, r7
 8008116:	2200      	movs	r2, #0
 8008118:	569a      	ldrsb	r2, [r3, r2]
 800811a:	23d6      	movs	r3, #214	; 0xd6
 800811c:	005b      	lsls	r3, r3, #1
 800811e:	195b      	adds	r3, r3, r5
 8008120:	19db      	adds	r3, r3, r7
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	b25b      	sxtb	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 800812c:	23d8      	movs	r3, #216	; 0xd8
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	195b      	adds	r3, r3, r5
 8008132:	19db      	adds	r3, r3, r7
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	b25b      	sxtb	r3, r3
 800813a:	4313      	orrs	r3, r2
 800813c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800813e:	23da      	movs	r3, #218	; 0xda
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	195b      	adds	r3, r3, r5
 8008144:	19db      	adds	r3, r3, r7
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	b25b      	sxtb	r3, r3
 800814c:	4313      	orrs	r3, r2
 800814e:	b25b      	sxtb	r3, r3
 8008150:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008152:	187b      	adds	r3, r7, r1
 8008154:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008156:	0008      	movs	r0, r1
 8008158:	187b      	adds	r3, r7, r1
 800815a:	22c4      	movs	r2, #196	; 0xc4
 800815c:	2103      	movs	r1, #3
 800815e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008160:	002b      	movs	r3, r5
 8008162:	18fa      	adds	r2, r7, r3
 8008164:	183b      	adds	r3, r7, r0
 8008166:	0011      	movs	r1, r2
 8008168:	0018      	movs	r0, r3
 800816a:	f001 f9e9 	bl	8009540 <astronode_transport_send_receive>
 800816e:	0003      	movs	r3, r0
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10f      	bne.n	8008194 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <astronode_send_cfg_wr+0x14c>)
 8008176:	191b      	adds	r3, r3, r4
 8008178:	19db      	adds	r3, r3, r7
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b85      	cmp	r3, #133	; 0x85
 800817e:	d105      	bne.n	800818c <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008180:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <astronode_send_cfg_wr+0x150>)
 8008182:	0018      	movs	r0, r3
 8008184:	f7fa ffaa 	bl	80030dc <send_debug_logs>
            return true ;
 8008188:	2301      	movs	r3, #1
 800818a:	e004      	b.n	8008196 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <astronode_send_cfg_wr+0x154>)
 800818e:	0018      	movs	r0, r3
 8008190:	f7fa ffa4 	bl	80030dc <send_debug_logs>
        }
    }
    return false ;
 8008194:	2300      	movs	r3, #0
}
 8008196:	0018      	movs	r0, r3
 8008198:	46bd      	mov	sp, r7
 800819a:	b067      	add	sp, #412	; 0x19c
 800819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819e:	46c0      	nop			; (mov r8, r8)
 80081a0:	fffffe6f 	.word	0xfffffe6f
 80081a4:	fffffe6e 	.word	0xfffffe6e
 80081a8:	fffffe6d 	.word	0xfffffe6d
 80081ac:	fffffe6c 	.word	0xfffffe6c
 80081b0:	fffffe70 	.word	0xfffffe70
 80081b4:	0801350c 	.word	0x0801350c
 80081b8:	08013538 	.word	0x08013538

080081bc <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 80081bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081be:	b0ed      	sub	sp, #436	; 0x1b4
 80081c0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80081c2:	21c8      	movs	r1, #200	; 0xc8
 80081c4:	2318      	movs	r3, #24
 80081c6:	18cb      	adds	r3, r1, r3
 80081c8:	19db      	adds	r3, r3, r7
 80081ca:	0018      	movs	r0, r3
 80081cc:	23c6      	movs	r3, #198	; 0xc6
 80081ce:	001a      	movs	r2, r3
 80081d0:	2100      	movs	r1, #0
 80081d2:	f004 f8e7 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 80081d6:	4b4a      	ldr	r3, [pc, #296]	; (8008300 <astronode_send_mgi_rr+0x144>)
 80081d8:	26cc      	movs	r6, #204	; 0xcc
 80081da:	0076      	lsls	r6, r6, #1
 80081dc:	199b      	adds	r3, r3, r6
 80081de:	2218      	movs	r2, #24
 80081e0:	4694      	mov	ip, r2
 80081e2:	44bc      	add	ip, r7
 80081e4:	4463      	add	r3, ip
 80081e6:	0018      	movs	r0, r3
 80081e8:	23c6      	movs	r3, #198	; 0xc6
 80081ea:	001a      	movs	r2, r3
 80081ec:	2100      	movs	r1, #0
 80081ee:	f004 f8d9 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 80081f2:	21c8      	movs	r1, #200	; 0xc8
 80081f4:	2318      	movs	r3, #24
 80081f6:	18cb      	adds	r3, r1, r3
 80081f8:	19db      	adds	r3, r3, r7
 80081fa:	2219      	movs	r2, #25
 80081fc:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80081fe:	2318      	movs	r3, #24
 8008200:	18fa      	adds	r2, r7, r3
 8008202:	2318      	movs	r3, #24
 8008204:	18cb      	adds	r3, r1, r3
 8008206:	19db      	adds	r3, r3, r7
 8008208:	0011      	movs	r1, r2
 800820a:	0018      	movs	r0, r3
 800820c:	f001 f998 	bl	8009540 <astronode_transport_send_receive>
 8008210:	0003      	movs	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d16f      	bne.n	80082f6 <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8008216:	4b3a      	ldr	r3, [pc, #232]	; (8008300 <astronode_send_mgi_rr+0x144>)
 8008218:	0032      	movs	r2, r6
 800821a:	189b      	adds	r3, r3, r2
 800821c:	2118      	movs	r1, #24
 800821e:	468c      	mov	ip, r1
 8008220:	44bc      	add	ip, r7
 8008222:	4463      	add	r3, ip
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b99      	cmp	r3, #153	; 0x99
 8008228:	d161      	bne.n	80082ee <astronode_send_mgi_rr+0x132>
        {
 800822a:	466b      	mov	r3, sp
 800822c:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 800822e:	4b34      	ldr	r3, [pc, #208]	; (8008300 <astronode_send_mgi_rr+0x144>)
 8008230:	189b      	adds	r3, r3, r2
 8008232:	2218      	movs	r2, #24
 8008234:	4694      	mov	ip, r2
 8008236:	44bc      	add	ip, r7
 8008238:	4463      	add	r3, ip
 800823a:	22c4      	movs	r2, #196	; 0xc4
 800823c:	5a9b      	ldrh	r3, [r3, r2]
 800823e:	001a      	movs	r2, r3
 8008240:	3a01      	subs	r2, #1
 8008242:	21ca      	movs	r1, #202	; 0xca
 8008244:	0049      	lsls	r1, r1, #1
 8008246:	2018      	movs	r0, #24
 8008248:	1809      	adds	r1, r1, r0
 800824a:	19c9      	adds	r1, r1, r7
 800824c:	600a      	str	r2, [r1, #0]
 800824e:	001c      	movs	r4, r3
 8008250:	2200      	movs	r2, #0
 8008252:	0015      	movs	r5, r2
 8008254:	0020      	movs	r0, r4
 8008256:	0029      	movs	r1, r5
 8008258:	0004      	movs	r4, r0
 800825a:	0f62      	lsrs	r2, r4, #29
 800825c:	000c      	movs	r4, r1
 800825e:	00e4      	lsls	r4, r4, #3
 8008260:	617c      	str	r4, [r7, #20]
 8008262:	697c      	ldr	r4, [r7, #20]
 8008264:	4314      	orrs	r4, r2
 8008266:	617c      	str	r4, [r7, #20]
 8008268:	0001      	movs	r1, r0
 800826a:	00c9      	lsls	r1, r1, #3
 800826c:	6139      	str	r1, [r7, #16]
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	2200      	movs	r2, #0
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	6838      	ldr	r0, [r7, #0]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	0004      	movs	r4, r0
 800827a:	0f62      	lsrs	r2, r4, #29
 800827c:	000c      	movs	r4, r1
 800827e:	00e4      	lsls	r4, r4, #3
 8008280:	60fc      	str	r4, [r7, #12]
 8008282:	68fc      	ldr	r4, [r7, #12]
 8008284:	4314      	orrs	r4, r2
 8008286:	60fc      	str	r4, [r7, #12]
 8008288:	0001      	movs	r1, r0
 800828a:	00ca      	lsls	r2, r1, #3
 800828c:	60ba      	str	r2, [r7, #8]
 800828e:	3307      	adds	r3, #7
 8008290:	08db      	lsrs	r3, r3, #3
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4669      	mov	r1, sp
 8008296:	1acb      	subs	r3, r1, r3
 8008298:	469d      	mov	sp, r3
 800829a:	466b      	mov	r3, sp
 800829c:	3300      	adds	r3, #0
 800829e:	24c8      	movs	r4, #200	; 0xc8
 80082a0:	0064      	lsls	r4, r4, #1
 80082a2:	2218      	movs	r2, #24
 80082a4:	18a2      	adds	r2, r4, r2
 80082a6:	19d1      	adds	r1, r2, r7
 80082a8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 80082aa:	4b16      	ldr	r3, [pc, #88]	; (8008304 <astronode_send_mgi_rr+0x148>)
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7fa ff15 	bl	80030dc <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 80082b2:	4b13      	ldr	r3, [pc, #76]	; (8008300 <astronode_send_mgi_rr+0x144>)
 80082b4:	22cc      	movs	r2, #204	; 0xcc
 80082b6:	0052      	lsls	r2, r2, #1
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	2218      	movs	r2, #24
 80082bc:	4694      	mov	ip, r2
 80082be:	44bc      	add	ip, r7
 80082c0:	4463      	add	r3, ip
 80082c2:	22c4      	movs	r2, #196	; 0xc4
 80082c4:	5a9b      	ldrh	r3, [r3, r2]
 80082c6:	0019      	movs	r1, r3
 80082c8:	2318      	movs	r3, #24
 80082ca:	18fb      	adds	r3, r7, r3
 80082cc:	3301      	adds	r3, #1
 80082ce:	4a0e      	ldr	r2, [pc, #56]	; (8008308 <astronode_send_mgi_rr+0x14c>)
 80082d0:	2018      	movs	r0, #24
 80082d2:	1820      	adds	r0, r4, r0
 80082d4:	19c0      	adds	r0, r0, r7
 80082d6:	6800      	ldr	r0, [r0, #0]
 80082d8:	f003 ff9a 	bl	800c210 <snprintf>
            send_debug_logs(guid);
 80082dc:	2318      	movs	r3, #24
 80082de:	18e3      	adds	r3, r4, r3
 80082e0:	19db      	adds	r3, r3, r7
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fa fef9 	bl	80030dc <send_debug_logs>
 80082ea:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 80082ec:	e003      	b.n	80082f6 <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <astronode_send_mgi_rr+0x150>)
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7fa fef3 	bl	80030dc <send_debug_logs>
}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	46bd      	mov	sp, r7
 80082fa:	b06d      	add	sp, #436	; 0x1b4
 80082fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fe:	46c0      	nop			; (mov r8, r8)
 8008300:	fffffe68 	.word	0xfffffe68
 8008304:	080135c4 	.word	0x080135c4
 8008308:	080135d4 	.word	0x080135d4
 800830c:	080135d8 	.word	0x080135d8

08008310 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8008310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008312:	b0ed      	sub	sp, #436	; 0x1b4
 8008314:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008316:	21c8      	movs	r1, #200	; 0xc8
 8008318:	2318      	movs	r3, #24
 800831a:	18cb      	adds	r3, r1, r3
 800831c:	19db      	adds	r3, r3, r7
 800831e:	0018      	movs	r0, r3
 8008320:	23c6      	movs	r3, #198	; 0xc6
 8008322:	001a      	movs	r2, r3
 8008324:	2100      	movs	r1, #0
 8008326:	f004 f83d 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 800832a:	4b4a      	ldr	r3, [pc, #296]	; (8008454 <astronode_send_msn_rr+0x144>)
 800832c:	26cc      	movs	r6, #204	; 0xcc
 800832e:	0076      	lsls	r6, r6, #1
 8008330:	199b      	adds	r3, r3, r6
 8008332:	2218      	movs	r2, #24
 8008334:	4694      	mov	ip, r2
 8008336:	44bc      	add	ip, r7
 8008338:	4463      	add	r3, ip
 800833a:	0018      	movs	r0, r3
 800833c:	23c6      	movs	r3, #198	; 0xc6
 800833e:	001a      	movs	r2, r3
 8008340:	2100      	movs	r1, #0
 8008342:	f004 f82f 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8008346:	21c8      	movs	r1, #200	; 0xc8
 8008348:	2318      	movs	r3, #24
 800834a:	18cb      	adds	r3, r1, r3
 800834c:	19db      	adds	r3, r3, r7
 800834e:	221a      	movs	r2, #26
 8008350:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008352:	2318      	movs	r3, #24
 8008354:	18fa      	adds	r2, r7, r3
 8008356:	2318      	movs	r3, #24
 8008358:	18cb      	adds	r3, r1, r3
 800835a:	19db      	adds	r3, r3, r7
 800835c:	0011      	movs	r1, r2
 800835e:	0018      	movs	r0, r3
 8008360:	f001 f8ee 	bl	8009540 <astronode_transport_send_receive>
 8008364:	0003      	movs	r3, r0
 8008366:	2b01      	cmp	r3, #1
 8008368:	d16f      	bne.n	800844a <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800836a:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <astronode_send_msn_rr+0x144>)
 800836c:	0032      	movs	r2, r6
 800836e:	189b      	adds	r3, r3, r2
 8008370:	2118      	movs	r1, #24
 8008372:	468c      	mov	ip, r1
 8008374:	44bc      	add	ip, r7
 8008376:	4463      	add	r3, ip
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2b9a      	cmp	r3, #154	; 0x9a
 800837c:	d161      	bne.n	8008442 <astronode_send_msn_rr+0x132>
        {
 800837e:	466b      	mov	r3, sp
 8008380:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8008382:	4b34      	ldr	r3, [pc, #208]	; (8008454 <astronode_send_msn_rr+0x144>)
 8008384:	189b      	adds	r3, r3, r2
 8008386:	2218      	movs	r2, #24
 8008388:	4694      	mov	ip, r2
 800838a:	44bc      	add	ip, r7
 800838c:	4463      	add	r3, ip
 800838e:	22c4      	movs	r2, #196	; 0xc4
 8008390:	5a9b      	ldrh	r3, [r3, r2]
 8008392:	001a      	movs	r2, r3
 8008394:	3a01      	subs	r2, #1
 8008396:	21ca      	movs	r1, #202	; 0xca
 8008398:	0049      	lsls	r1, r1, #1
 800839a:	2018      	movs	r0, #24
 800839c:	1809      	adds	r1, r1, r0
 800839e:	19c9      	adds	r1, r1, r7
 80083a0:	600a      	str	r2, [r1, #0]
 80083a2:	001c      	movs	r4, r3
 80083a4:	2200      	movs	r2, #0
 80083a6:	0015      	movs	r5, r2
 80083a8:	0020      	movs	r0, r4
 80083aa:	0029      	movs	r1, r5
 80083ac:	0004      	movs	r4, r0
 80083ae:	0f62      	lsrs	r2, r4, #29
 80083b0:	000c      	movs	r4, r1
 80083b2:	00e4      	lsls	r4, r4, #3
 80083b4:	617c      	str	r4, [r7, #20]
 80083b6:	697c      	ldr	r4, [r7, #20]
 80083b8:	4314      	orrs	r4, r2
 80083ba:	617c      	str	r4, [r7, #20]
 80083bc:	0001      	movs	r1, r0
 80083be:	00c9      	lsls	r1, r1, #3
 80083c0:	6139      	str	r1, [r7, #16]
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	2200      	movs	r2, #0
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	6838      	ldr	r0, [r7, #0]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	0004      	movs	r4, r0
 80083ce:	0f62      	lsrs	r2, r4, #29
 80083d0:	000c      	movs	r4, r1
 80083d2:	00e4      	lsls	r4, r4, #3
 80083d4:	60fc      	str	r4, [r7, #12]
 80083d6:	68fc      	ldr	r4, [r7, #12]
 80083d8:	4314      	orrs	r4, r2
 80083da:	60fc      	str	r4, [r7, #12]
 80083dc:	0001      	movs	r1, r0
 80083de:	00ca      	lsls	r2, r1, #3
 80083e0:	60ba      	str	r2, [r7, #8]
 80083e2:	3307      	adds	r3, #7
 80083e4:	08db      	lsrs	r3, r3, #3
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4669      	mov	r1, sp
 80083ea:	1acb      	subs	r3, r1, r3
 80083ec:	469d      	mov	sp, r3
 80083ee:	466b      	mov	r3, sp
 80083f0:	3300      	adds	r3, #0
 80083f2:	24c8      	movs	r4, #200	; 0xc8
 80083f4:	0064      	lsls	r4, r4, #1
 80083f6:	2218      	movs	r2, #24
 80083f8:	18a2      	adds	r2, r4, r2
 80083fa:	19d1      	adds	r1, r2, r7
 80083fc:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <astronode_send_msn_rr+0x148>)
 8008400:	0018      	movs	r0, r3
 8008402:	f7fa fe6b 	bl	80030dc <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <astronode_send_msn_rr+0x144>)
 8008408:	22cc      	movs	r2, #204	; 0xcc
 800840a:	0052      	lsls	r2, r2, #1
 800840c:	189b      	adds	r3, r3, r2
 800840e:	2218      	movs	r2, #24
 8008410:	4694      	mov	ip, r2
 8008412:	44bc      	add	ip, r7
 8008414:	4463      	add	r3, ip
 8008416:	22c4      	movs	r2, #196	; 0xc4
 8008418:	5a9b      	ldrh	r3, [r3, r2]
 800841a:	0019      	movs	r1, r3
 800841c:	2318      	movs	r3, #24
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	3301      	adds	r3, #1
 8008422:	4a0e      	ldr	r2, [pc, #56]	; (800845c <astronode_send_msn_rr+0x14c>)
 8008424:	2018      	movs	r0, #24
 8008426:	1820      	adds	r0, r4, r0
 8008428:	19c0      	adds	r0, r0, r7
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	f003 fef0 	bl	800c210 <snprintf>
            send_debug_logs(serial_number);
 8008430:	2318      	movs	r3, #24
 8008432:	18e3      	adds	r3, r4, r3
 8008434:	19db      	adds	r3, r3, r7
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	0018      	movs	r0, r3
 800843a:	f7fa fe4f 	bl	80030dc <send_debug_logs>
 800843e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008440:	e003      	b.n	800844a <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <astronode_send_msn_rr+0x150>)
 8008444:	0018      	movs	r0, r3
 8008446:	f7fa fe49 	bl	80030dc <send_debug_logs>
}
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b06d      	add	sp, #436	; 0x1b4
 8008450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008452:	46c0      	nop			; (mov r8, r8)
 8008454:	fffffe68 	.word	0xfffffe68
 8008458:	080135f4 	.word	0x080135f4
 800845c:	080135d4 	.word	0x080135d4
 8008460:	08013610 	.word	0x08013610

08008464 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8008464:	b5b0      	push	{r4, r5, r7, lr}
 8008466:	b0e4      	sub	sp, #400	; 0x190
 8008468:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800846a:	24c8      	movs	r4, #200	; 0xc8
 800846c:	193b      	adds	r3, r7, r4
 800846e:	0018      	movs	r0, r3
 8008470:	23c6      	movs	r3, #198	; 0xc6
 8008472:	001a      	movs	r2, r3
 8008474:	2100      	movs	r1, #0
 8008476:	f003 ff95 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 800847a:	4b31      	ldr	r3, [pc, #196]	; (8008540 <astronode_send_evt_rr+0xdc>)
 800847c:	25c8      	movs	r5, #200	; 0xc8
 800847e:	006d      	lsls	r5, r5, #1
 8008480:	195b      	adds	r3, r3, r5
 8008482:	19db      	adds	r3, r3, r7
 8008484:	0018      	movs	r0, r3
 8008486:	23c6      	movs	r3, #198	; 0xc6
 8008488:	001a      	movs	r2, r3
 800848a:	2100      	movs	r1, #0
 800848c:	f003 ff8a 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8008490:	193b      	adds	r3, r7, r4
 8008492:	2265      	movs	r2, #101	; 0x65
 8008494:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008496:	003a      	movs	r2, r7
 8008498:	193b      	adds	r3, r7, r4
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f001 f84f 	bl	8009540 <astronode_transport_send_receive>
 80084a2:	0003      	movs	r3, r0
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d147      	bne.n	8008538 <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <astronode_send_evt_rr+0xdc>)
 80084aa:	195b      	adds	r3, r3, r5
 80084ac:	19db      	adds	r3, r3, r7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2be5      	cmp	r3, #229	; 0xe5
 80084b2:	d141      	bne.n	8008538 <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 80084b4:	4b22      	ldr	r3, [pc, #136]	; (8008540 <astronode_send_evt_rr+0xdc>)
 80084b6:	195b      	adds	r3, r3, r5
 80084b8:	19db      	adds	r3, r3, r7
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	001a      	movs	r2, r3
 80084be:	2301      	movs	r3, #1
 80084c0:	4013      	ands	r3, r2
 80084c2:	d006      	beq.n	80084d2 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 80084c4:	4b1f      	ldr	r3, [pc, #124]	; (8008544 <astronode_send_evt_rr+0xe0>)
 80084c6:	2201      	movs	r2, #1
 80084c8:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 80084ca:	4b1f      	ldr	r3, [pc, #124]	; (8008548 <astronode_send_evt_rr+0xe4>)
 80084cc:	0018      	movs	r0, r3
 80084ce:	f7fa fe05 	bl	80030dc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 80084d2:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <astronode_send_evt_rr+0xdc>)
 80084d4:	22c8      	movs	r2, #200	; 0xc8
 80084d6:	0052      	lsls	r2, r2, #1
 80084d8:	189b      	adds	r3, r3, r2
 80084da:	19db      	adds	r3, r3, r7
 80084dc:	785b      	ldrb	r3, [r3, #1]
 80084de:	001a      	movs	r2, r3
 80084e0:	2302      	movs	r3, #2
 80084e2:	4013      	ands	r3, r2
 80084e4:	d006      	beq.n	80084f4 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 80084e6:	4b19      	ldr	r3, [pc, #100]	; (800854c <astronode_send_evt_rr+0xe8>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 80084ec:	4b18      	ldr	r3, [pc, #96]	; (8008550 <astronode_send_evt_rr+0xec>)
 80084ee:	0018      	movs	r0, r3
 80084f0:	f7fa fdf4 	bl	80030dc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <astronode_send_evt_rr+0xdc>)
 80084f6:	22c8      	movs	r2, #200	; 0xc8
 80084f8:	0052      	lsls	r2, r2, #1
 80084fa:	189b      	adds	r3, r3, r2
 80084fc:	19db      	adds	r3, r3, r7
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	001a      	movs	r2, r3
 8008502:	2304      	movs	r3, #4
 8008504:	4013      	ands	r3, r2
 8008506:	d006      	beq.n	8008516 <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 8008508:	4b12      	ldr	r3, [pc, #72]	; (8008554 <astronode_send_evt_rr+0xf0>)
 800850a:	2201      	movs	r2, #1
 800850c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <astronode_send_evt_rr+0xf4>)
 8008510:	0018      	movs	r0, r3
 8008512:	f7fa fde3 	bl	80030dc <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <astronode_send_evt_rr+0xdc>)
 8008518:	22c8      	movs	r2, #200	; 0xc8
 800851a:	0052      	lsls	r2, r2, #1
 800851c:	189b      	adds	r3, r3, r2
 800851e:	19db      	adds	r3, r3, r7
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	001a      	movs	r2, r3
 8008524:	2308      	movs	r3, #8
 8008526:	4013      	ands	r3, r2
 8008528:	d006      	beq.n	8008538 <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <astronode_send_evt_rr+0xf8>)
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <astronode_send_evt_rr+0xfc>)
 8008532:	0018      	movs	r0, r3
 8008534:	f7fa fdd2 	bl	80030dc <send_debug_logs>
            }

        }
    }
}
 8008538:	46c0      	nop			; (mov r8, r8)
 800853a:	46bd      	mov	sp, r7
 800853c:	b064      	add	sp, #400	; 0x190
 800853e:	bdb0      	pop	{r4, r5, r7, pc}
 8008540:	fffffe70 	.word	0xfffffe70
 8008544:	20000b0c 	.word	0x20000b0c
 8008548:	080136b8 	.word	0x080136b8
 800854c:	20000b0d 	.word	0x20000b0d
 8008550:	080136dc 	.word	0x080136dc
 8008554:	20000b0e 	.word	0x20000b0e
 8008558:	080136f4 	.word	0x080136f4
 800855c:	20000b0f 	.word	0x20000b0f
 8008560:	08013708 	.word	0x08013708

08008564 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008566:	b0e7      	sub	sp, #412	; 0x19c
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 800856e:	24d0      	movs	r4, #208	; 0xd0
 8008570:	193b      	adds	r3, r7, r4
 8008572:	0018      	movs	r0, r3
 8008574:	23c6      	movs	r3, #198	; 0xc6
 8008576:	001a      	movs	r2, r3
 8008578:	2100      	movs	r1, #0
 800857a:	f003 ff13 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 800857e:	4b56      	ldr	r3, [pc, #344]	; (80086d8 <astronode_send_geo_wr+0x174>)
 8008580:	26cc      	movs	r6, #204	; 0xcc
 8008582:	0076      	lsls	r6, r6, #1
 8008584:	199b      	adds	r3, r3, r6
 8008586:	19db      	adds	r3, r3, r7
 8008588:	0018      	movs	r0, r3
 800858a:	23c6      	movs	r3, #198	; 0xc6
 800858c:	001a      	movs	r2, r3
 800858e:	2100      	movs	r1, #0
 8008590:	f003 ff08 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008594:	193b      	adds	r3, r7, r4
 8008596:	2235      	movs	r2, #53	; 0x35
 8008598:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800859a:	193b      	adds	r3, r7, r4
 800859c:	22c4      	movs	r2, #196	; 0xc4
 800859e:	5a9b      	ldrh	r3, [r3, r2]
 80085a0:	1c5a      	adds	r2, r3, #1
 80085a2:	b290      	uxth	r0, r2
 80085a4:	193a      	adds	r2, r7, r4
 80085a6:	21c4      	movs	r1, #196	; 0xc4
 80085a8:	5250      	strh	r0, [r2, r1]
 80085aa:	0019      	movs	r1, r3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	193b      	adds	r3, r7, r4
 80085b2:	185b      	adds	r3, r3, r1
 80085b4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	1218      	asrs	r0, r3, #8
 80085ba:	0025      	movs	r5, r4
 80085bc:	197b      	adds	r3, r7, r5
 80085be:	22c4      	movs	r2, #196	; 0xc4
 80085c0:	5a9b      	ldrh	r3, [r3, r2]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	b294      	uxth	r4, r2
 80085c6:	197a      	adds	r2, r7, r5
 80085c8:	21c4      	movs	r1, #196	; 0xc4
 80085ca:	5254      	strh	r4, [r2, r1]
 80085cc:	0019      	movs	r1, r3
 80085ce:	b2c2      	uxtb	r2, r0
 80085d0:	002c      	movs	r4, r5
 80085d2:	193b      	adds	r3, r7, r4
 80085d4:	185b      	adds	r3, r3, r1
 80085d6:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	1418      	asrs	r0, r3, #16
 80085dc:	0025      	movs	r5, r4
 80085de:	197b      	adds	r3, r7, r5
 80085e0:	22c4      	movs	r2, #196	; 0xc4
 80085e2:	5a9b      	ldrh	r3, [r3, r2]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	b294      	uxth	r4, r2
 80085e8:	197a      	adds	r2, r7, r5
 80085ea:	21c4      	movs	r1, #196	; 0xc4
 80085ec:	5254      	strh	r4, [r2, r1]
 80085ee:	0019      	movs	r1, r3
 80085f0:	b2c2      	uxtb	r2, r0
 80085f2:	002c      	movs	r4, r5
 80085f4:	193b      	adds	r3, r7, r4
 80085f6:	185b      	adds	r3, r3, r1
 80085f8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	1618      	asrs	r0, r3, #24
 80085fe:	0025      	movs	r5, r4
 8008600:	197b      	adds	r3, r7, r5
 8008602:	22c4      	movs	r2, #196	; 0xc4
 8008604:	5a9b      	ldrh	r3, [r3, r2]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	b294      	uxth	r4, r2
 800860a:	197a      	adds	r2, r7, r5
 800860c:	21c4      	movs	r1, #196	; 0xc4
 800860e:	5254      	strh	r4, [r2, r1]
 8008610:	0019      	movs	r1, r3
 8008612:	b2c2      	uxtb	r2, r0
 8008614:	002c      	movs	r4, r5
 8008616:	193b      	adds	r3, r7, r4
 8008618:	185b      	adds	r3, r3, r1
 800861a:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 800861c:	193b      	adds	r3, r7, r4
 800861e:	22c4      	movs	r2, #196	; 0xc4
 8008620:	5a9b      	ldrh	r3, [r3, r2]
 8008622:	1c5a      	adds	r2, r3, #1
 8008624:	b290      	uxth	r0, r2
 8008626:	193a      	adds	r2, r7, r4
 8008628:	21c4      	movs	r1, #196	; 0xc4
 800862a:	5250      	strh	r0, [r2, r1]
 800862c:	0019      	movs	r1, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	193b      	adds	r3, r7, r4
 8008634:	185b      	adds	r3, r3, r1
 8008636:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	1218      	asrs	r0, r3, #8
 800863c:	0025      	movs	r5, r4
 800863e:	197b      	adds	r3, r7, r5
 8008640:	22c4      	movs	r2, #196	; 0xc4
 8008642:	5a9b      	ldrh	r3, [r3, r2]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	b294      	uxth	r4, r2
 8008648:	197a      	adds	r2, r7, r5
 800864a:	21c4      	movs	r1, #196	; 0xc4
 800864c:	5254      	strh	r4, [r2, r1]
 800864e:	0019      	movs	r1, r3
 8008650:	b2c2      	uxtb	r2, r0
 8008652:	002c      	movs	r4, r5
 8008654:	193b      	adds	r3, r7, r4
 8008656:	185b      	adds	r3, r3, r1
 8008658:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	1418      	asrs	r0, r3, #16
 800865e:	0025      	movs	r5, r4
 8008660:	197b      	adds	r3, r7, r5
 8008662:	22c4      	movs	r2, #196	; 0xc4
 8008664:	5a9b      	ldrh	r3, [r3, r2]
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	b294      	uxth	r4, r2
 800866a:	197a      	adds	r2, r7, r5
 800866c:	21c4      	movs	r1, #196	; 0xc4
 800866e:	5254      	strh	r4, [r2, r1]
 8008670:	0019      	movs	r1, r3
 8008672:	b2c2      	uxtb	r2, r0
 8008674:	002c      	movs	r4, r5
 8008676:	193b      	adds	r3, r7, r4
 8008678:	185b      	adds	r3, r3, r1
 800867a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	1618      	asrs	r0, r3, #24
 8008680:	0025      	movs	r5, r4
 8008682:	197b      	adds	r3, r7, r5
 8008684:	22c4      	movs	r2, #196	; 0xc4
 8008686:	5a9b      	ldrh	r3, [r3, r2]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	b294      	uxth	r4, r2
 800868c:	197a      	adds	r2, r7, r5
 800868e:	21c4      	movs	r1, #196	; 0xc4
 8008690:	5254      	strh	r4, [r2, r1]
 8008692:	0019      	movs	r1, r3
 8008694:	b2c2      	uxtb	r2, r0
 8008696:	0028      	movs	r0, r5
 8008698:	183b      	adds	r3, r7, r0
 800869a:	185b      	adds	r3, r3, r1
 800869c:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800869e:	2308      	movs	r3, #8
 80086a0:	18fa      	adds	r2, r7, r3
 80086a2:	183b      	adds	r3, r7, r0
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f000 ff4a 	bl	8009540 <astronode_transport_send_receive>
 80086ac:	0003      	movs	r3, r0
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10e      	bne.n	80086d0 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <astronode_send_geo_wr+0x174>)
 80086b4:	199b      	adds	r3, r3, r6
 80086b6:	19db      	adds	r3, r3, r7
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2bb5      	cmp	r3, #181	; 0xb5
 80086bc:	d104      	bne.n	80086c8 <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <astronode_send_geo_wr+0x178>)
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7fa fd0b 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80086c6:	e003      	b.n	80086d0 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <astronode_send_geo_wr+0x17c>)
 80086ca:	0018      	movs	r0, r3
 80086cc:	f7fa fd06 	bl	80030dc <send_debug_logs>
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b067      	add	sp, #412	; 0x19c
 80086d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d8:	fffffe70 	.word	0xfffffe70
 80086dc:	0801371c 	.word	0x0801371c
 80086e0:	08013748 	.word	0x08013748

080086e4 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	b0fd      	sub	sp, #500	; 0x1f4
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6039      	str	r1, [r7, #0]
 80086ec:	0011      	movs	r1, r2
 80086ee:	4b4c      	ldr	r3, [pc, #304]	; (8008820 <astronode_send_pld_er+0x13c>)
 80086f0:	26f4      	movs	r6, #244	; 0xf4
 80086f2:	0076      	lsls	r6, r6, #1
 80086f4:	199b      	adds	r3, r3, r6
 80086f6:	19db      	adds	r3, r3, r7
 80086f8:	1c02      	adds	r2, r0, #0
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	4b49      	ldr	r3, [pc, #292]	; (8008824 <astronode_send_pld_er+0x140>)
 80086fe:	199b      	adds	r3, r3, r6
 8008700:	19db      	adds	r3, r3, r7
 8008702:	1c0a      	adds	r2, r1, #0
 8008704:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008706:	2490      	movs	r4, #144	; 0x90
 8008708:	0064      	lsls	r4, r4, #1
 800870a:	193b      	adds	r3, r7, r4
 800870c:	0018      	movs	r0, r3
 800870e:	23c6      	movs	r3, #198	; 0xc6
 8008710:	001a      	movs	r2, r3
 8008712:	2100      	movs	r1, #0
 8008714:	f003 fe46 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008718:	4b43      	ldr	r3, [pc, #268]	; (8008828 <astronode_send_pld_er+0x144>)
 800871a:	199b      	adds	r3, r3, r6
 800871c:	19db      	adds	r3, r3, r7
 800871e:	0018      	movs	r0, r3
 8008720:	23c6      	movs	r3, #198	; 0xc6
 8008722:	001a      	movs	r2, r3
 8008724:	2100      	movs	r1, #0
 8008726:	f003 fe3d 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800872a:	193b      	adds	r3, r7, r4
 800872c:	2225      	movs	r2, #37	; 0x25
 800872e:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008730:	193b      	adds	r3, r7, r4
 8008732:	22c4      	movs	r2, #196	; 0xc4
 8008734:	5a9b      	ldrh	r3, [r3, r2]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	b290      	uxth	r0, r2
 800873a:	193a      	adds	r2, r7, r4
 800873c:	21c4      	movs	r1, #196	; 0xc4
 800873e:	5250      	strh	r0, [r2, r1]
 8008740:	0019      	movs	r1, r3
 8008742:	4b37      	ldr	r3, [pc, #220]	; (8008820 <astronode_send_pld_er+0x13c>)
 8008744:	199b      	adds	r3, r3, r6
 8008746:	19db      	adds	r3, r3, r7
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	b2da      	uxtb	r2, r3
 800874c:	193b      	adds	r3, r7, r4
 800874e:	185b      	adds	r3, r3, r1
 8008750:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008752:	4b33      	ldr	r3, [pc, #204]	; (8008820 <astronode_send_pld_er+0x13c>)
 8008754:	199b      	adds	r3, r3, r6
 8008756:	19db      	adds	r3, r3, r7
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	0a1b      	lsrs	r3, r3, #8
 800875c:	b298      	uxth	r0, r3
 800875e:	0025      	movs	r5, r4
 8008760:	197b      	adds	r3, r7, r5
 8008762:	22c4      	movs	r2, #196	; 0xc4
 8008764:	5a9b      	ldrh	r3, [r3, r2]
 8008766:	1c5a      	adds	r2, r3, #1
 8008768:	b294      	uxth	r4, r2
 800876a:	197a      	adds	r2, r7, r5
 800876c:	21c4      	movs	r1, #196	; 0xc4
 800876e:	5254      	strh	r4, [r2, r1]
 8008770:	0019      	movs	r1, r3
 8008772:	b2c2      	uxtb	r2, r0
 8008774:	002c      	movs	r4, r5
 8008776:	193b      	adds	r3, r7, r4
 8008778:	185b      	adds	r3, r3, r1
 800877a:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 800877c:	193b      	adds	r3, r7, r4
 800877e:	22c4      	movs	r2, #196	; 0xc4
 8008780:	5a9b      	ldrh	r3, [r3, r2]
 8008782:	001a      	movs	r2, r3
 8008784:	193b      	adds	r3, r7, r4
 8008786:	189b      	adds	r3, r3, r2
 8008788:	1c58      	adds	r0, r3, #1
 800878a:	4b26      	ldr	r3, [pc, #152]	; (8008824 <astronode_send_pld_er+0x140>)
 800878c:	199b      	adds	r3, r3, r6
 800878e:	19db      	adds	r3, r3, r7
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	0019      	movs	r1, r3
 8008796:	f003 ff32 	bl	800c5fe <memcpy>
    request.payload_len = 2 + payload_length;
 800879a:	4b22      	ldr	r3, [pc, #136]	; (8008824 <astronode_send_pld_er+0x140>)
 800879c:	199b      	adds	r3, r3, r6
 800879e:	19db      	adds	r3, r3, r7
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	3302      	adds	r3, #2
 80087a4:	b299      	uxth	r1, r3
 80087a6:	193b      	adds	r3, r7, r4
 80087a8:	22c4      	movs	r2, #196	; 0xc4
 80087aa:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80087ac:	2358      	movs	r3, #88	; 0x58
 80087ae:	18fa      	adds	r2, r7, r3
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fec3 	bl	8009540 <astronode_transport_send_receive>
 80087ba:	0003      	movs	r3, r0
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d12a      	bne.n	8008816 <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80087c0:	4b19      	ldr	r3, [pc, #100]	; (8008828 <astronode_send_pld_er+0x144>)
 80087c2:	199b      	adds	r3, r3, r6
 80087c4:	19db      	adds	r3, r3, r7
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2ba5      	cmp	r3, #165	; 0xa5
 80087ca:	d114      	bne.n	80087f6 <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80087cc:	4b14      	ldr	r3, [pc, #80]	; (8008820 <astronode_send_pld_er+0x13c>)
 80087ce:	199b      	adds	r3, r3, r6
 80087d0:	19db      	adds	r3, r3, r7
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	22ea      	movs	r2, #234	; 0xea
 80087d6:	32ff      	adds	r2, #255	; 0xff
 80087d8:	0014      	movs	r4, r2
 80087da:	4a14      	ldr	r2, [pc, #80]	; (800882c <astronode_send_pld_er+0x148>)
 80087dc:	4914      	ldr	r1, [pc, #80]	; (8008830 <astronode_send_pld_er+0x14c>)
 80087de:	2508      	movs	r5, #8
 80087e0:	1978      	adds	r0, r7, r5
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	0023      	movs	r3, r4
 80087e6:	f003 fd47 	bl	800c278 <sprintf>
            send_debug_logs ( s ) ;
 80087ea:	197b      	adds	r3, r7, r5
 80087ec:	0018      	movs	r0, r3
 80087ee:	f7fa fc75 	bl	80030dc <send_debug_logs>
            return true ;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e010      	b.n	8008818 <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <astronode_send_pld_er+0x13c>)
 80087f8:	22f4      	movs	r2, #244	; 0xf4
 80087fa:	0052      	lsls	r2, r2, #1
 80087fc:	189b      	adds	r3, r3, r2
 80087fe:	19db      	adds	r3, r3, r7
 8008800:	881a      	ldrh	r2, [r3, #0]
 8008802:	490c      	ldr	r1, [pc, #48]	; (8008834 <astronode_send_pld_er+0x150>)
 8008804:	2408      	movs	r4, #8
 8008806:	193b      	adds	r3, r7, r4
 8008808:	0018      	movs	r0, r3
 800880a:	f003 fd35 	bl	800c278 <sprintf>
            send_debug_logs ( s ) ;
 800880e:	193b      	adds	r3, r7, r4
 8008810:	0018      	movs	r0, r3
 8008812:	f7fa fc63 	bl	80030dc <send_debug_logs>
        }
    }
    return false ;
 8008816:	2300      	movs	r3, #0
}
 8008818:	0018      	movs	r0, r3
 800881a:	46bd      	mov	sp, r7
 800881c:	b07b      	add	sp, #492	; 0x1ec
 800881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008820:	fffffe1e 	.word	0xfffffe1e
 8008824:	fffffe1c 	.word	0xfffffe1c
 8008828:	fffffe70 	.word	0xfffffe70
 800882c:	080137c0 	.word	0x080137c0
 8008830:	080137ec 	.word	0x080137ec
 8008834:	08013808 	.word	0x08013808

08008838 <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 8008838:	b5b0      	push	{r4, r5, r7, lr}
 800883a:	b0e4      	sub	sp, #400	; 0x190
 800883c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800883e:	24c8      	movs	r4, #200	; 0xc8
 8008840:	193b      	adds	r3, r7, r4
 8008842:	0018      	movs	r0, r3
 8008844:	23c6      	movs	r3, #198	; 0xc6
 8008846:	001a      	movs	r2, r3
 8008848:	2100      	movs	r1, #0
 800884a:	f003 fdab 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 800884e:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <astronode_send_pld_fr+0x6c>)
 8008850:	25c8      	movs	r5, #200	; 0xc8
 8008852:	006d      	lsls	r5, r5, #1
 8008854:	195b      	adds	r3, r3, r5
 8008856:	19db      	adds	r3, r3, r7
 8008858:	0018      	movs	r0, r3
 800885a:	23c6      	movs	r3, #198	; 0xc6
 800885c:	001a      	movs	r2, r3
 800885e:	2100      	movs	r1, #0
 8008860:	f003 fda0 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008864:	193b      	adds	r3, r7, r4
 8008866:	2227      	movs	r2, #39	; 0x27
 8008868:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800886a:	003a      	movs	r2, r7
 800886c:	193b      	adds	r3, r7, r4
 800886e:	0011      	movs	r1, r2
 8008870:	0018      	movs	r0, r3
 8008872:	f000 fe65 	bl	8009540 <astronode_transport_send_receive>
 8008876:	0003      	movs	r3, r0
 8008878:	2b01      	cmp	r3, #1
 800887a:	d10e      	bne.n	800889a <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <astronode_send_pld_fr+0x6c>)
 800887e:	195b      	adds	r3, r3, r5
 8008880:	19db      	adds	r3, r3, r7
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2ba7      	cmp	r3, #167	; 0xa7
 8008886:	d104      	bne.n	8008892 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 8008888:	4b07      	ldr	r3, [pc, #28]	; (80088a8 <astronode_send_pld_fr+0x70>)
 800888a:	0018      	movs	r0, r3
 800888c:	f7fa fc26 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008890:	e003      	b.n	800889a <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008892:	4b06      	ldr	r3, [pc, #24]	; (80088ac <astronode_send_pld_fr+0x74>)
 8008894:	0018      	movs	r0, r3
 8008896:	f7fa fc21 	bl	80030dc <send_debug_logs>
}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	46bd      	mov	sp, r7
 800889e:	b064      	add	sp, #400	; 0x190
 80088a0:	bdb0      	pop	{r4, r5, r7, pc}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	fffffe70 	.word	0xfffffe70
 80088a8:	08013838 	.word	0x08013838
 80088ac:	08013870 	.word	0x08013870

080088b0 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80088b0:	b5b0      	push	{r4, r5, r7, lr}
 80088b2:	b0e4      	sub	sp, #400	; 0x190
 80088b4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80088b6:	24c8      	movs	r4, #200	; 0xc8
 80088b8:	193b      	adds	r3, r7, r4
 80088ba:	0018      	movs	r0, r3
 80088bc:	23c6      	movs	r3, #198	; 0xc6
 80088be:	001a      	movs	r2, r3
 80088c0:	2100      	movs	r1, #0
 80088c2:	f003 fd6f 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <astronode_send_res_cr+0x70>)
 80088c8:	25c8      	movs	r5, #200	; 0xc8
 80088ca:	006d      	lsls	r5, r5, #1
 80088cc:	195b      	adds	r3, r3, r5
 80088ce:	19db      	adds	r3, r3, r7
 80088d0:	0018      	movs	r0, r3
 80088d2:	23c6      	movs	r3, #198	; 0xc6
 80088d4:	001a      	movs	r2, r3
 80088d6:	2100      	movs	r1, #0
 80088d8:	f003 fd64 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80088dc:	193b      	adds	r3, r7, r4
 80088de:	2255      	movs	r2, #85	; 0x55
 80088e0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80088e2:	003a      	movs	r2, r7
 80088e4:	193b      	adds	r3, r7, r4
 80088e6:	0011      	movs	r1, r2
 80088e8:	0018      	movs	r0, r3
 80088ea:	f000 fe29 	bl	8009540 <astronode_transport_send_receive>
 80088ee:	0003      	movs	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d111      	bne.n	8008918 <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <astronode_send_res_cr+0x70>)
 80088f6:	195b      	adds	r3, r3, r5
 80088f8:	19db      	adds	r3, r3, r7
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2bd5      	cmp	r3, #213	; 0xd5
 80088fe:	d107      	bne.n	8008910 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <astronode_send_res_cr+0x74>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <astronode_send_res_cr+0x78>)
 8008908:	0018      	movs	r0, r3
 800890a:	f7fa fbe7 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 800890e:	e003      	b.n	8008918 <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008910:	4b06      	ldr	r3, [pc, #24]	; (800892c <astronode_send_res_cr+0x7c>)
 8008912:	0018      	movs	r0, r3
 8008914:	f7fa fbe2 	bl	80030dc <send_debug_logs>
}
 8008918:	46c0      	nop			; (mov r8, r8)
 800891a:	46bd      	mov	sp, r7
 800891c:	b064      	add	sp, #400	; 0x190
 800891e:	bdb0      	pop	{r4, r5, r7, pc}
 8008920:	fffffe70 	.word	0xfffffe70
 8008924:	20000b0d 	.word	0x20000b0d
 8008928:	080138ac 	.word	0x080138ac
 800892c:	080138e0 	.word	0x080138e0

08008930 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008930:	b5b0      	push	{r4, r5, r7, lr}
 8008932:	b0fa      	sub	sp, #488	; 0x1e8
 8008934:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 8008936:	258e      	movs	r5, #142	; 0x8e
 8008938:	006d      	lsls	r5, r5, #1
 800893a:	197b      	adds	r3, r7, r5
 800893c:	0018      	movs	r0, r3
 800893e:	23c6      	movs	r3, #198	; 0xc6
 8008940:	001a      	movs	r2, r3
 8008942:	2100      	movs	r1, #0
 8008944:	f003 fd2e 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0} ;
 8008948:	4b28      	ldr	r3, [pc, #160]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 800894a:	24f4      	movs	r4, #244	; 0xf4
 800894c:	0064      	lsls	r4, r4, #1
 800894e:	191b      	adds	r3, r3, r4
 8008950:	19db      	adds	r3, r3, r7
 8008952:	0018      	movs	r0, r3
 8008954:	23c6      	movs	r3, #198	; 0xc6
 8008956:	001a      	movs	r2, r3
 8008958:	2100      	movs	r1, #0
 800895a:	f003 fd23 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 800895e:	197b      	adds	r3, r7, r5
 8008960:	2217      	movs	r2, #23
 8008962:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008964:	2354      	movs	r3, #84	; 0x54
 8008966:	18fa      	adds	r2, r7, r3
 8008968:	197b      	adds	r3, r7, r5
 800896a:	0011      	movs	r1, r2
 800896c:	0018      	movs	r0, r3
 800896e:	f000 fde7 	bl	8009540 <astronode_transport_send_receive>
 8008972:	0003      	movs	r3, r0
 8008974:	2b01      	cmp	r3, #1
 8008976:	d133      	bne.n	80089e0 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 800897a:	0021      	movs	r1, r4
 800897c:	185b      	adds	r3, r3, r1
 800897e:	19db      	adds	r3, r3, r7
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b97      	cmp	r3, #151	; 0x97
 8008984:	d128      	bne.n	80089d8 <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 8008986:	4b19      	ldr	r3, [pc, #100]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 8008988:	185b      	adds	r3, r3, r1
 800898a:	19db      	adds	r3, r3, r7
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008990:	4b16      	ldr	r3, [pc, #88]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 8008992:	185b      	adds	r3, r3, r1
 8008994:	19db      	adds	r3, r3, r7
 8008996:	789b      	ldrb	r3, [r3, #2]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 800899c:	4b13      	ldr	r3, [pc, #76]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 800899e:	185b      	adds	r3, r3, r1
 80089a0:	19db      	adds	r3, r3, r7
 80089a2:	78db      	ldrb	r3, [r3, #3]
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80089a8:	4b10      	ldr	r3, [pc, #64]	; (80089ec <astronode_send_rtc_rr+0xbc>)
 80089aa:	185b      	adds	r3, r3, r1
 80089ac:	19db      	adds	r3, r3, r7
 80089ae:	791b      	ldrb	r3, [r3, #4]
 80089b0:	061b      	lsls	r3, r3, #24
 80089b2:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80089b4:	24f2      	movs	r4, #242	; 0xf2
 80089b6:	0064      	lsls	r4, r4, #1
 80089b8:	193a      	adds	r2, r7, r4
 80089ba:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80089bc:	193b      	adds	r3, r7, r4
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	490b      	ldr	r1, [pc, #44]	; (80089f0 <astronode_send_rtc_rr+0xc0>)
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	0018      	movs	r0, r3
 80089c6:	f003 fc57 	bl	800c278 <sprintf>
            send_debug_logs ( str ) ;
 80089ca:	1d3b      	adds	r3, r7, #4
 80089cc:	0018      	movs	r0, r3
 80089ce:	f7fa fb85 	bl	80030dc <send_debug_logs>
            return rtc_time ;
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	e004      	b.n	80089e2 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <astronode_send_rtc_rr+0xc4>)
 80089da:	0018      	movs	r0, r3
 80089dc:	f7fa fb7e 	bl	80030dc <send_debug_logs>
        }
    }
    return 0 ;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b07a      	add	sp, #488	; 0x1e8
 80089e8:	bdb0      	pop	{r4, r5, r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	fffffe6c 	.word	0xfffffe6c
 80089f0:	0801390c 	.word	0x0801390c
 80089f4:	0801394c 	.word	0x0801394c

080089f8 <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80089f8:	b5b0      	push	{r4, r5, r7, lr}
 80089fa:	b0f8      	sub	sp, #480	; 0x1e0
 80089fc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80089fe:	258c      	movs	r5, #140	; 0x8c
 8008a00:	006d      	lsls	r5, r5, #1
 8008a02:	197b      	adds	r3, r7, r5
 8008a04:	0018      	movs	r0, r3
 8008a06:	23c6      	movs	r3, #198	; 0xc6
 8008a08:	001a      	movs	r2, r3
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	f003 fcca 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <astronode_send_sak_rr+0xa0>)
 8008a12:	24f0      	movs	r4, #240	; 0xf0
 8008a14:	0064      	lsls	r4, r4, #1
 8008a16:	191b      	adds	r3, r3, r4
 8008a18:	19db      	adds	r3, r3, r7
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	23c6      	movs	r3, #198	; 0xc6
 8008a1e:	001a      	movs	r2, r3
 8008a20:	2100      	movs	r1, #0
 8008a22:	f003 fcbf 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 8008a26:	197b      	adds	r3, r7, r5
 8008a28:	2245      	movs	r2, #69	; 0x45
 8008a2a:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008a2c:	2350      	movs	r3, #80	; 0x50
 8008a2e:	18fa      	adds	r2, r7, r3
 8008a30:	197b      	adds	r3, r7, r5
 8008a32:	0011      	movs	r1, r2
 8008a34:	0018      	movs	r0, r3
 8008a36:	f000 fd83 	bl	8009540 <astronode_transport_send_receive>
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d126      	bne.n	8008a8e <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008a40:	4b15      	ldr	r3, [pc, #84]	; (8008a98 <astronode_send_sak_rr+0xa0>)
 8008a42:	191b      	adds	r3, r3, r4
 8008a44:	19db      	adds	r3, r3, r7
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2bc5      	cmp	r3, #197	; 0xc5
 8008a4a:	d11c      	bne.n	8008a86 <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <astronode_send_sak_rr+0xa0>)
 8008a4e:	191b      	adds	r3, r3, r4
 8008a50:	19db      	adds	r3, r3, r7
 8008a52:	785b      	ldrb	r3, [r3, #1]
 8008a54:	b299      	uxth	r1, r3
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <astronode_send_sak_rr+0xa0>)
 8008a58:	191b      	adds	r3, r3, r4
 8008a5a:	19db      	adds	r3, r3, r7
 8008a5c:	789b      	ldrb	r3, [r3, #2]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	20ef      	movs	r0, #239	; 0xef
 8008a66:	0040      	lsls	r0, r0, #1
 8008a68:	183b      	adds	r3, r7, r0
 8008a6a:	188a      	adds	r2, r1, r2
 8008a6c:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008a6e:	183b      	adds	r3, r7, r0
 8008a70:	881a      	ldrh	r2, [r3, #0]
 8008a72:	490a      	ldr	r1, [pc, #40]	; (8008a9c <astronode_send_sak_rr+0xa4>)
 8008a74:	003b      	movs	r3, r7
 8008a76:	0018      	movs	r0, r3
 8008a78:	f003 fbfe 	bl	800c278 <sprintf>
            send_debug_logs(str);
 8008a7c:	003b      	movs	r3, r7
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f7fa fb2c 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008a84:	e003      	b.n	8008a8e <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <astronode_send_sak_rr+0xa8>)
 8008a88:	0018      	movs	r0, r3
 8008a8a:	f7fa fb27 	bl	80030dc <send_debug_logs>
}
 8008a8e:	46c0      	nop			; (mov r8, r8)
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b078      	add	sp, #480	; 0x1e0
 8008a94:	bdb0      	pop	{r4, r5, r7, pc}
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	fffffe70 	.word	0xfffffe70
 8008a9c:	08013968 	.word	0x08013968
 8008aa0:	08013994 	.word	0x08013994

08008aa4 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8008aa4:	b5b0      	push	{r4, r5, r7, lr}
 8008aa6:	b0e4      	sub	sp, #400	; 0x190
 8008aa8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008aaa:	24c8      	movs	r4, #200	; 0xc8
 8008aac:	193b      	adds	r3, r7, r4
 8008aae:	0018      	movs	r0, r3
 8008ab0:	23c6      	movs	r3, #198	; 0xc6
 8008ab2:	001a      	movs	r2, r3
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	f003 fc75 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008aba:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <astronode_send_sak_cr+0x70>)
 8008abc:	25c8      	movs	r5, #200	; 0xc8
 8008abe:	006d      	lsls	r5, r5, #1
 8008ac0:	195b      	adds	r3, r3, r5
 8008ac2:	19db      	adds	r3, r3, r7
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	23c6      	movs	r3, #198	; 0xc6
 8008ac8:	001a      	movs	r2, r3
 8008aca:	2100      	movs	r1, #0
 8008acc:	f003 fc6a 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8008ad0:	193b      	adds	r3, r7, r4
 8008ad2:	2246      	movs	r2, #70	; 0x46
 8008ad4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008ad6:	003a      	movs	r2, r7
 8008ad8:	193b      	adds	r3, r7, r4
 8008ada:	0011      	movs	r1, r2
 8008adc:	0018      	movs	r0, r3
 8008ade:	f000 fd2f 	bl	8009540 <astronode_transport_send_receive>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d111      	bne.n	8008b0c <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <astronode_send_sak_cr+0x70>)
 8008aea:	195b      	adds	r3, r3, r5
 8008aec:	19db      	adds	r3, r3, r7
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2bc6      	cmp	r3, #198	; 0xc6
 8008af2:	d107      	bne.n	8008b04 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8008af4:	4b08      	ldr	r3, [pc, #32]	; (8008b18 <astronode_send_sak_cr+0x74>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 8008afa:	4b08      	ldr	r3, [pc, #32]	; (8008b1c <astronode_send_sak_cr+0x78>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7fa faed 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008b02:	e003      	b.n	8008b0c <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008b04:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <astronode_send_sak_cr+0x7c>)
 8008b06:	0018      	movs	r0, r3
 8008b08:	f7fa fae8 	bl	80030dc <send_debug_logs>
}
 8008b0c:	46c0      	nop			; (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b064      	add	sp, #400	; 0x190
 8008b12:	bdb0      	pop	{r4, r5, r7, pc}
 8008b14:	fffffe70 	.word	0xfffffe70
 8008b18:	20000b0c 	.word	0x20000b0c
 8008b1c:	080139c8 	.word	0x080139c8
 8008b20:	080139f0 	.word	0x080139f0

08008b24 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b26:	b0ed      	sub	sp, #436	; 0x1b4
 8008b28:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008b2a:	21c8      	movs	r1, #200	; 0xc8
 8008b2c:	2318      	movs	r3, #24
 8008b2e:	18cb      	adds	r3, r1, r3
 8008b30:	19db      	adds	r3, r3, r7
 8008b32:	0018      	movs	r0, r3
 8008b34:	23c6      	movs	r3, #198	; 0xc6
 8008b36:	001a      	movs	r2, r3
 8008b38:	2100      	movs	r1, #0
 8008b3a:	f003 fc33 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008b3e:	4b4a      	ldr	r3, [pc, #296]	; (8008c68 <astronode_send_mpn_rr+0x144>)
 8008b40:	26cc      	movs	r6, #204	; 0xcc
 8008b42:	0076      	lsls	r6, r6, #1
 8008b44:	199b      	adds	r3, r3, r6
 8008b46:	2218      	movs	r2, #24
 8008b48:	4694      	mov	ip, r2
 8008b4a:	44bc      	add	ip, r7
 8008b4c:	4463      	add	r3, ip
 8008b4e:	0018      	movs	r0, r3
 8008b50:	23c6      	movs	r3, #198	; 0xc6
 8008b52:	001a      	movs	r2, r3
 8008b54:	2100      	movs	r1, #0
 8008b56:	f003 fc25 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8008b5a:	21c8      	movs	r1, #200	; 0xc8
 8008b5c:	2318      	movs	r3, #24
 8008b5e:	18cb      	adds	r3, r1, r3
 8008b60:	19db      	adds	r3, r3, r7
 8008b62:	221b      	movs	r2, #27
 8008b64:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008b66:	2318      	movs	r3, #24
 8008b68:	18fa      	adds	r2, r7, r3
 8008b6a:	2318      	movs	r3, #24
 8008b6c:	18cb      	adds	r3, r1, r3
 8008b6e:	19db      	adds	r3, r3, r7
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f000 fce4 	bl	8009540 <astronode_transport_send_receive>
 8008b78:	0003      	movs	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d16f      	bne.n	8008c5e <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008b7e:	4b3a      	ldr	r3, [pc, #232]	; (8008c68 <astronode_send_mpn_rr+0x144>)
 8008b80:	0032      	movs	r2, r6
 8008b82:	189b      	adds	r3, r3, r2
 8008b84:	2118      	movs	r1, #24
 8008b86:	468c      	mov	ip, r1
 8008b88:	44bc      	add	ip, r7
 8008b8a:	4463      	add	r3, ip
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b9b      	cmp	r3, #155	; 0x9b
 8008b90:	d161      	bne.n	8008c56 <astronode_send_mpn_rr+0x132>
        {
 8008b92:	466b      	mov	r3, sp
 8008b94:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 8008b96:	4b34      	ldr	r3, [pc, #208]	; (8008c68 <astronode_send_mpn_rr+0x144>)
 8008b98:	189b      	adds	r3, r3, r2
 8008b9a:	2218      	movs	r2, #24
 8008b9c:	4694      	mov	ip, r2
 8008b9e:	44bc      	add	ip, r7
 8008ba0:	4463      	add	r3, ip
 8008ba2:	22c4      	movs	r2, #196	; 0xc4
 8008ba4:	5a9b      	ldrh	r3, [r3, r2]
 8008ba6:	001a      	movs	r2, r3
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	21ca      	movs	r1, #202	; 0xca
 8008bac:	0049      	lsls	r1, r1, #1
 8008bae:	2018      	movs	r0, #24
 8008bb0:	1809      	adds	r1, r1, r0
 8008bb2:	19c9      	adds	r1, r1, r7
 8008bb4:	600a      	str	r2, [r1, #0]
 8008bb6:	001c      	movs	r4, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	0015      	movs	r5, r2
 8008bbc:	0020      	movs	r0, r4
 8008bbe:	0029      	movs	r1, r5
 8008bc0:	0004      	movs	r4, r0
 8008bc2:	0f62      	lsrs	r2, r4, #29
 8008bc4:	000c      	movs	r4, r1
 8008bc6:	00e4      	lsls	r4, r4, #3
 8008bc8:	617c      	str	r4, [r7, #20]
 8008bca:	697c      	ldr	r4, [r7, #20]
 8008bcc:	4314      	orrs	r4, r2
 8008bce:	617c      	str	r4, [r7, #20]
 8008bd0:	0001      	movs	r1, r0
 8008bd2:	00c9      	lsls	r1, r1, #3
 8008bd4:	6139      	str	r1, [r7, #16]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	6838      	ldr	r0, [r7, #0]
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	0004      	movs	r4, r0
 8008be2:	0f62      	lsrs	r2, r4, #29
 8008be4:	000c      	movs	r4, r1
 8008be6:	00e4      	lsls	r4, r4, #3
 8008be8:	60fc      	str	r4, [r7, #12]
 8008bea:	68fc      	ldr	r4, [r7, #12]
 8008bec:	4314      	orrs	r4, r2
 8008bee:	60fc      	str	r4, [r7, #12]
 8008bf0:	0001      	movs	r1, r0
 8008bf2:	00ca      	lsls	r2, r1, #3
 8008bf4:	60ba      	str	r2, [r7, #8]
 8008bf6:	3307      	adds	r3, #7
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	4669      	mov	r1, sp
 8008bfe:	1acb      	subs	r3, r1, r3
 8008c00:	469d      	mov	sp, r3
 8008c02:	466b      	mov	r3, sp
 8008c04:	3300      	adds	r3, #0
 8008c06:	24c8      	movs	r4, #200	; 0xc8
 8008c08:	0064      	lsls	r4, r4, #1
 8008c0a:	2218      	movs	r2, #24
 8008c0c:	18a2      	adds	r2, r4, r2
 8008c0e:	19d1      	adds	r1, r2, r7
 8008c10:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008c12:	4b16      	ldr	r3, [pc, #88]	; (8008c6c <astronode_send_mpn_rr+0x148>)
 8008c14:	0018      	movs	r0, r3
 8008c16:	f7fa fa61 	bl	80030dc <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 8008c1a:	4b13      	ldr	r3, [pc, #76]	; (8008c68 <astronode_send_mpn_rr+0x144>)
 8008c1c:	22cc      	movs	r2, #204	; 0xcc
 8008c1e:	0052      	lsls	r2, r2, #1
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	2218      	movs	r2, #24
 8008c24:	4694      	mov	ip, r2
 8008c26:	44bc      	add	ip, r7
 8008c28:	4463      	add	r3, ip
 8008c2a:	22c4      	movs	r2, #196	; 0xc4
 8008c2c:	5a9b      	ldrh	r3, [r3, r2]
 8008c2e:	0019      	movs	r1, r3
 8008c30:	2318      	movs	r3, #24
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	3301      	adds	r3, #1
 8008c36:	4a0e      	ldr	r2, [pc, #56]	; (8008c70 <astronode_send_mpn_rr+0x14c>)
 8008c38:	2018      	movs	r0, #24
 8008c3a:	1820      	adds	r0, r4, r0
 8008c3c:	19c0      	adds	r0, r0, r7
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	f003 fae6 	bl	800c210 <snprintf>
            send_debug_logs(product_number);
 8008c44:	2318      	movs	r3, #24
 8008c46:	18e3      	adds	r3, r4, r3
 8008c48:	19db      	adds	r3, r3, r7
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f7fa fa45 	bl	80030dc <send_debug_logs>
 8008c52:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008c54:	e003      	b.n	8008c5e <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <astronode_send_mpn_rr+0x150>)
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f7fa fa3f 	bl	80030dc <send_debug_logs>
}
 8008c5e:	46c0      	nop			; (mov r8, r8)
 8008c60:	46bd      	mov	sp, r7
 8008c62:	b06d      	add	sp, #436	; 0x1b4
 8008c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	fffffe68 	.word	0xfffffe68
 8008c6c:	08013ab8 	.word	0x08013ab8
 8008c70:	080135d4 	.word	0x080135d4
 8008c74:	08013610 	.word	0x08013610

08008c78 <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8008c78:	b5b0      	push	{r4, r5, r7, lr}
 8008c7a:	b0e4      	sub	sp, #400	; 0x190
 8008c7c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008c7e:	24c8      	movs	r4, #200	; 0xc8
 8008c80:	193b      	adds	r3, r7, r4
 8008c82:	0018      	movs	r0, r3
 8008c84:	23c6      	movs	r3, #198	; 0xc6
 8008c86:	001a      	movs	r2, r3
 8008c88:	2100      	movs	r1, #0
 8008c8a:	f003 fb8b 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008c8e:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <astronode_send_cmd_cr+0x70>)
 8008c90:	25c8      	movs	r5, #200	; 0xc8
 8008c92:	006d      	lsls	r5, r5, #1
 8008c94:	195b      	adds	r3, r3, r5
 8008c96:	19db      	adds	r3, r3, r7
 8008c98:	0018      	movs	r0, r3
 8008c9a:	23c6      	movs	r3, #198	; 0xc6
 8008c9c:	001a      	movs	r2, r3
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f003 fb80 	bl	800c3a4 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8008ca4:	193b      	adds	r3, r7, r4
 8008ca6:	2248      	movs	r2, #72	; 0x48
 8008ca8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008caa:	003a      	movs	r2, r7
 8008cac:	193b      	adds	r3, r7, r4
 8008cae:	0011      	movs	r1, r2
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f000 fc45 	bl	8009540 <astronode_transport_send_receive>
 8008cb6:	0003      	movs	r3, r0
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d111      	bne.n	8008ce0 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <astronode_send_cmd_cr+0x70>)
 8008cbe:	195b      	adds	r3, r3, r5
 8008cc0:	19db      	adds	r3, r3, r7
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2bc8      	cmp	r3, #200	; 0xc8
 8008cc6:	d107      	bne.n	8008cd8 <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8008cc8:	4b08      	ldr	r3, [pc, #32]	; (8008cec <astronode_send_cmd_cr+0x74>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <astronode_send_cmd_cr+0x78>)
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7fa fa03 	bl	80030dc <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8008cd6:	e003      	b.n	8008ce0 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <astronode_send_cmd_cr+0x7c>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f7fa f9fe 	bl	80030dc <send_debug_logs>
}
 8008ce0:	46c0      	nop			; (mov r8, r8)
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	b064      	add	sp, #400	; 0x190
 8008ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce8:	fffffe70 	.word	0xfffffe70
 8008cec:	20000b0e 	.word	0x20000b0e
 8008cf0:	08013f08 	.word	0x08013f08
 8008cf4:	08013f2c 	.word	0x08013f2c

08008cf8 <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfa:	4cc6      	ldr	r4, [pc, #792]	; (8009014 <astronode_send_cmd_rr+0x31c>)
 8008cfc:	44a5      	add	sp, r4
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008d02:	2190      	movs	r1, #144	; 0x90
 8008d04:	0049      	lsls	r1, r1, #1
 8008d06:	2318      	movs	r3, #24
 8008d08:	18cb      	adds	r3, r1, r3
 8008d0a:	19db      	adds	r3, r3, r7
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	23c6      	movs	r3, #198	; 0xc6
 8008d10:	001a      	movs	r2, r3
 8008d12:	2100      	movs	r1, #0
 8008d14:	f003 fb46 	bl	800c3a4 <memset>
    astronode_app_msg_t answer = {0};
 8008d18:	4bbf      	ldr	r3, [pc, #764]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008d1a:	26fc      	movs	r6, #252	; 0xfc
 8008d1c:	0076      	lsls	r6, r6, #1
 8008d1e:	199b      	adds	r3, r3, r6
 8008d20:	2218      	movs	r2, #24
 8008d22:	4694      	mov	ip, r2
 8008d24:	44bc      	add	ip, r7
 8008d26:	4463      	add	r3, ip
 8008d28:	0018      	movs	r0, r3
 8008d2a:	23c6      	movs	r3, #198	; 0xc6
 8008d2c:	001a      	movs	r2, r3
 8008d2e:	2100      	movs	r1, #0
 8008d30:	f003 fb38 	bl	800c3a4 <memset>
    bool result = false ;
 8008d34:	23f8      	movs	r3, #248	; 0xf8
 8008d36:	33ff      	adds	r3, #255	; 0xff
 8008d38:	2218      	movs	r2, #24
 8008d3a:	189b      	adds	r3, r3, r2
 8008d3c:	19db      	adds	r3, r3, r7
 8008d3e:	2200      	movs	r2, #0
 8008d40:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008d42:	2190      	movs	r1, #144	; 0x90
 8008d44:	0049      	lsls	r1, r1, #1
 8008d46:	2318      	movs	r3, #24
 8008d48:	18cb      	adds	r3, r1, r3
 8008d4a:	19db      	adds	r3, r3, r7
 8008d4c:	2247      	movs	r2, #71	; 0x47
 8008d4e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008d50:	2258      	movs	r2, #88	; 0x58
 8008d52:	2318      	movs	r3, #24
 8008d54:	18d3      	adds	r3, r2, r3
 8008d56:	19da      	adds	r2, r3, r7
 8008d58:	2318      	movs	r3, #24
 8008d5a:	18cb      	adds	r3, r1, r3
 8008d5c:	19db      	adds	r3, r3, r7
 8008d5e:	0011      	movs	r1, r2
 8008d60:	0018      	movs	r0, r3
 8008d62:	f000 fbed 	bl	8009540 <astronode_transport_send_receive>
 8008d66:	0003      	movs	r3, r0
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d000      	beq.n	8008d6e <astronode_send_cmd_rr+0x76>
 8008d6c:	e146      	b.n	8008ffc <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008d6e:	4baa      	ldr	r3, [pc, #680]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008d70:	199a      	adds	r2, r3, r6
 8008d72:	2318      	movs	r3, #24
 8008d74:	18fb      	adds	r3, r7, r3
 8008d76:	18d3      	adds	r3, r2, r3
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	2bc7      	cmp	r3, #199	; 0xc7
 8008d7c:	d000      	beq.n	8008d80 <astronode_send_cmd_rr+0x88>
 8008d7e:	e139      	b.n	8008ff4 <astronode_send_cmd_rr+0x2fc>
        {
 8008d80:	466b      	mov	r3, sp
 8008d82:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8008d84:	4ba5      	ldr	r3, [pc, #660]	; (800901c <astronode_send_cmd_rr+0x324>)
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7fa f9a8 	bl	80030dc <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008d8c:	4ba2      	ldr	r3, [pc, #648]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008d8e:	21fc      	movs	r1, #252	; 0xfc
 8008d90:	0049      	lsls	r1, r1, #1
 8008d92:	185a      	adds	r2, r3, r1
 8008d94:	2318      	movs	r3, #24
 8008d96:	18fb      	adds	r3, r7, r3
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	785b      	ldrb	r3, [r3, #1]
 8008d9c:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8008d9e:	4b9e      	ldr	r3, [pc, #632]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008da0:	1858      	adds	r0, r3, r1
 8008da2:	2318      	movs	r3, #24
 8008da4:	18fb      	adds	r3, r7, r3
 8008da6:	18c3      	adds	r3, r0, r3
 8008da8:	789b      	ldrb	r3, [r3, #2]
 8008daa:	021b      	lsls	r3, r3, #8
 8008dac:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8008dae:	4b9a      	ldr	r3, [pc, #616]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008db0:	1858      	adds	r0, r3, r1
 8008db2:	2318      	movs	r3, #24
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	18c3      	adds	r3, r0, r3
 8008db8:	78db      	ldrb	r3, [r3, #3]
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8008dbe:	4b96      	ldr	r3, [pc, #600]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008dc0:	1858      	adds	r0, r3, r1
 8008dc2:	2318      	movs	r3, #24
 8008dc4:	18fb      	adds	r3, r7, r3
 8008dc6:	18c3      	adds	r3, r0, r3
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	061b      	lsls	r3, r3, #24
 8008dcc:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8008dce:	22f8      	movs	r2, #248	; 0xf8
 8008dd0:	0052      	lsls	r2, r2, #1
 8008dd2:	2118      	movs	r1, #24
 8008dd4:	1851      	adds	r1, r2, r1
 8008dd6:	19c8      	adds	r0, r1, r7
 8008dd8:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8008dda:	2318      	movs	r3, #24
 8008ddc:	18d3      	adds	r3, r2, r3
 8008dde:	19da      	adds	r2, r3, r7
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	498f      	ldr	r1, [pc, #572]	; (8009020 <astronode_send_cmd_rr+0x328>)
 8008de4:	2008      	movs	r0, #8
 8008de6:	2318      	movs	r3, #24
 8008de8:	18c3      	adds	r3, r0, r3
 8008dea:	19db      	adds	r3, r3, r7
 8008dec:	0018      	movs	r0, r3
 8008dee:	f003 fa43 	bl	800c278 <sprintf>
            send_debug_logs(str);
 8008df2:	2008      	movs	r0, #8
 8008df4:	2318      	movs	r3, #24
 8008df6:	18c3      	adds	r3, r0, r3
 8008df8:	19db      	adds	r3, r3, r7
 8008dfa:	0018      	movs	r0, r3
 8008dfc:	f7fa f96e 	bl	80030dc <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8008e00:	4b85      	ldr	r3, [pc, #532]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008e02:	21fc      	movs	r1, #252	; 0xfc
 8008e04:	0049      	lsls	r1, r1, #1
 8008e06:	185a      	adds	r2, r3, r1
 8008e08:	2318      	movs	r3, #24
 8008e0a:	18fb      	adds	r3, r7, r3
 8008e0c:	18d3      	adds	r3, r2, r3
 8008e0e:	22c4      	movs	r2, #196	; 0xc4
 8008e10:	5a9b      	ldrh	r3, [r3, r2]
 8008e12:	2b2c      	cmp	r3, #44	; 0x2c
 8008e14:	d013      	beq.n	8008e3e <astronode_send_cmd_rr+0x146>
 8008e16:	4b80      	ldr	r3, [pc, #512]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008e18:	185a      	adds	r2, r3, r1
 8008e1a:	2318      	movs	r3, #24
 8008e1c:	18fb      	adds	r3, r7, r3
 8008e1e:	18d3      	adds	r3, r2, r3
 8008e20:	22c4      	movs	r2, #196	; 0xc4
 8008e22:	5a9b      	ldrh	r3, [r3, r2]
 8008e24:	2b0c      	cmp	r3, #12
 8008e26:	d00a      	beq.n	8008e3e <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8008e28:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <astronode_send_cmd_rr+0x32c>)
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7fa f956 	bl	80030dc <send_debug_logs>
                return result ;
 8008e30:	23f8      	movs	r3, #248	; 0xf8
 8008e32:	33ff      	adds	r3, #255	; 0xff
 8008e34:	2218      	movs	r2, #24
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	19db      	adds	r3, r3, r7
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	e0d8      	b.n	8008ff0 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008e3e:	4b76      	ldr	r3, [pc, #472]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008e40:	22fc      	movs	r2, #252	; 0xfc
 8008e42:	0052      	lsls	r2, r2, #1
 8008e44:	189b      	adds	r3, r3, r2
 8008e46:	2218      	movs	r2, #24
 8008e48:	4694      	mov	ip, r2
 8008e4a:	44bc      	add	ip, r7
 8008e4c:	4463      	add	r3, ip
 8008e4e:	22c4      	movs	r2, #196	; 0xc4
 8008e50:	5a9b      	ldrh	r3, [r3, r2]
 8008e52:	001a      	movs	r2, r3
 8008e54:	3a01      	subs	r2, #1
 8008e56:	21f6      	movs	r1, #246	; 0xf6
 8008e58:	0049      	lsls	r1, r1, #1
 8008e5a:	2018      	movs	r0, #24
 8008e5c:	1809      	adds	r1, r1, r0
 8008e5e:	19c9      	adds	r1, r1, r7
 8008e60:	600a      	str	r2, [r1, #0]
 8008e62:	001c      	movs	r4, r3
 8008e64:	2200      	movs	r2, #0
 8008e66:	0015      	movs	r5, r2
 8008e68:	0020      	movs	r0, r4
 8008e6a:	0029      	movs	r1, r5
 8008e6c:	0004      	movs	r4, r0
 8008e6e:	0f62      	lsrs	r2, r4, #29
 8008e70:	000c      	movs	r4, r1
 8008e72:	00e4      	lsls	r4, r4, #3
 8008e74:	617c      	str	r4, [r7, #20]
 8008e76:	697c      	ldr	r4, [r7, #20]
 8008e78:	4314      	orrs	r4, r2
 8008e7a:	617c      	str	r4, [r7, #20]
 8008e7c:	0001      	movs	r1, r0
 8008e7e:	00c9      	lsls	r1, r1, #3
 8008e80:	6139      	str	r1, [r7, #16]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	2200      	movs	r2, #0
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	6838      	ldr	r0, [r7, #0]
 8008e8a:	6879      	ldr	r1, [r7, #4]
 8008e8c:	0004      	movs	r4, r0
 8008e8e:	0f62      	lsrs	r2, r4, #29
 8008e90:	000c      	movs	r4, r1
 8008e92:	00e4      	lsls	r4, r4, #3
 8008e94:	60fc      	str	r4, [r7, #12]
 8008e96:	68fc      	ldr	r4, [r7, #12]
 8008e98:	4314      	orrs	r4, r2
 8008e9a:	60fc      	str	r4, [r7, #12]
 8008e9c:	0001      	movs	r1, r0
 8008e9e:	00ca      	lsls	r2, r1, #3
 8008ea0:	60ba      	str	r2, [r7, #8]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	4669      	mov	r1, sp
 8008eaa:	1acb      	subs	r3, r1, r3
 8008eac:	469d      	mov	sp, r3
 8008eae:	466b      	mov	r3, sp
 8008eb0:	3300      	adds	r3, #0
 8008eb2:	20f4      	movs	r0, #244	; 0xf4
 8008eb4:	0040      	lsls	r0, r0, #1
 8008eb6:	2218      	movs	r2, #24
 8008eb8:	1882      	adds	r2, r0, r2
 8008eba:	19d1      	adds	r1, r2, r7
 8008ebc:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8008ebe:	4b56      	ldr	r3, [pc, #344]	; (8009018 <astronode_send_cmd_rr+0x320>)
 8008ec0:	22fc      	movs	r2, #252	; 0xfc
 8008ec2:	0052      	lsls	r2, r2, #1
 8008ec4:	189b      	adds	r3, r3, r2
 8008ec6:	2218      	movs	r2, #24
 8008ec8:	4694      	mov	ip, r2
 8008eca:	44bc      	add	ip, r7
 8008ecc:	4463      	add	r3, ip
 8008ece:	22c4      	movs	r2, #196	; 0xc4
 8008ed0:	5a9b      	ldrh	r3, [r3, r2]
 8008ed2:	3b03      	subs	r3, #3
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	2358      	movs	r3, #88	; 0x58
 8008ed8:	2218      	movs	r2, #24
 8008eda:	189b      	adds	r3, r3, r2
 8008edc:	19db      	adds	r3, r3, r7
 8008ede:	3305      	adds	r3, #5
 8008ee0:	4a51      	ldr	r2, [pc, #324]	; (8009028 <astronode_send_cmd_rr+0x330>)
 8008ee2:	2418      	movs	r4, #24
 8008ee4:	1900      	adds	r0, r0, r4
 8008ee6:	19c0      	adds	r0, r0, r7
 8008ee8:	6800      	ldr	r0, [r0, #0]
 8008eea:	f003 f991 	bl	800c210 <snprintf>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	23f3      	movs	r3, #243	; 0xf3
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	2118      	movs	r1, #24
 8008ef6:	185b      	adds	r3, r3, r1
 8008ef8:	19db      	adds	r3, r3, r7
 8008efa:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008efc:	23fb      	movs	r3, #251	; 0xfb
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	2218      	movs	r2, #24
 8008f02:	189b      	adds	r3, r3, r2
 8008f04:	19db      	adds	r3, r3, r7
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e037      	b.n	8008f7c <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008f0c:	23fb      	movs	r3, #251	; 0xfb
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	2218      	movs	r2, #24
 8008f12:	189b      	adds	r3, r3, r2
 8008f14:	19db      	adds	r3, r3, r7
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	22f4      	movs	r2, #244	; 0xf4
 8008f1a:	0052      	lsls	r2, r2, #1
 8008f1c:	2118      	movs	r1, #24
 8008f1e:	1852      	adds	r2, r2, r1
 8008f20:	19d2      	adds	r2, r2, r7
 8008f22:	6812      	ldr	r2, [r2, #0]
 8008f24:	5cd3      	ldrb	r3, [r2, r3]
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	4b40      	ldr	r3, [pc, #256]	; (800902c <astronode_send_cmd_rr+0x334>)
 8008f2a:	18d3      	adds	r3, r2, r3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	001a      	movs	r2, r3
 8008f30:	2397      	movs	r3, #151	; 0x97
 8008f32:	4013      	ands	r3, r2
 8008f34:	d105      	bne.n	8008f42 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008f36:	4b3e      	ldr	r3, [pc, #248]	; (8009030 <astronode_send_cmd_rr+0x338>)
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f7fa f8cf 	bl	80030dc <send_debug_logs>
                    return false;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e056      	b.n	8008ff0 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008f42:	20fb      	movs	r0, #251	; 0xfb
 8008f44:	0040      	lsls	r0, r0, #1
 8008f46:	2318      	movs	r3, #24
 8008f48:	18c3      	adds	r3, r0, r3
 8008f4a:	19db      	adds	r3, r3, r7
 8008f4c:	781a      	ldrb	r2, [r3, #0]
 8008f4e:	2318      	movs	r3, #24
 8008f50:	18c3      	adds	r3, r0, r3
 8008f52:	19db      	adds	r3, r3, r7
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	69f9      	ldr	r1, [r7, #28]
 8008f58:	18cb      	adds	r3, r1, r3
 8008f5a:	21f4      	movs	r1, #244	; 0xf4
 8008f5c:	0049      	lsls	r1, r1, #1
 8008f5e:	2418      	movs	r4, #24
 8008f60:	1909      	adds	r1, r1, r4
 8008f62:	19c9      	adds	r1, r1, r7
 8008f64:	6809      	ldr	r1, [r1, #0]
 8008f66:	5c8a      	ldrb	r2, [r1, r2]
 8008f68:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008f6a:	2318      	movs	r3, #24
 8008f6c:	18c3      	adds	r3, r0, r3
 8008f6e:	19db      	adds	r3, r3, r7
 8008f70:	781a      	ldrb	r2, [r3, #0]
 8008f72:	2318      	movs	r3, #24
 8008f74:	18c3      	adds	r3, r0, r3
 8008f76:	19db      	adds	r3, r3, r7
 8008f78:	3201      	adds	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	23fb      	movs	r3, #251	; 0xfb
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	2218      	movs	r2, #24
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	19db      	adds	r3, r3, r7
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	21f3      	movs	r1, #243	; 0xf3
 8008f8c:	0049      	lsls	r1, r1, #1
 8008f8e:	2218      	movs	r2, #24
 8008f90:	188a      	adds	r2, r1, r2
 8008f92:	19d2      	adds	r2, r2, r7
 8008f94:	8812      	ldrh	r2, [r2, #0]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d8b8      	bhi.n	8008f0c <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8008f9a:	23f8      	movs	r3, #248	; 0xf8
 8008f9c:	33ff      	adds	r3, #255	; 0xff
 8008f9e:	2218      	movs	r2, #24
 8008fa0:	189b      	adds	r3, r3, r2
 8008fa2:	19db      	adds	r3, r3, r7
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008fa8:	2318      	movs	r3, #24
 8008faa:	18cb      	adds	r3, r1, r3
 8008fac:	19db      	adds	r3, r3, r7
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	18d3      	adds	r3, r2, r3
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <astronode_send_cmd_rr+0x33c>)
 8008fba:	0018      	movs	r0, r3
 8008fbc:	f7fa f88e 	bl	80030dc <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008fc0:	2358      	movs	r3, #88	; 0x58
 8008fc2:	2218      	movs	r2, #24
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	19db      	adds	r3, r3, r7
 8008fc8:	1d5a      	adds	r2, r3, #5
 8008fca:	491b      	ldr	r1, [pc, #108]	; (8009038 <astronode_send_cmd_rr+0x340>)
 8008fcc:	24f4      	movs	r4, #244	; 0xf4
 8008fce:	0064      	lsls	r4, r4, #1
 8008fd0:	2318      	movs	r3, #24
 8008fd2:	18e3      	adds	r3, r4, r3
 8008fd4:	19db      	adds	r3, r3, r7
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f003 f94d 	bl	800c278 <sprintf>
            send_debug_logs(command_content);
 8008fde:	2318      	movs	r3, #24
 8008fe0:	18e3      	adds	r3, r4, r3
 8008fe2:	19db      	adds	r3, r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f7fa f878 	bl	80030dc <send_debug_logs>
 8008fec:	46b5      	mov	sp, r6
 8008fee:	e005      	b.n	8008ffc <astronode_send_cmd_rr+0x304>
                return result ;
 8008ff0:	46b5      	mov	sp, r6
 8008ff2:	e009      	b.n	8009008 <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <astronode_send_cmd_rr+0x344>)
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7fa f870 	bl	80030dc <send_debug_logs>
        }
    }
    return result ;
 8008ffc:	23f8      	movs	r3, #248	; 0xf8
 8008ffe:	33ff      	adds	r3, #255	; 0xff
 8009000:	2218      	movs	r2, #24
 8009002:	189b      	adds	r3, r3, r2
 8009004:	19db      	adds	r3, r3, r7
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	2385      	movs	r3, #133	; 0x85
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	449d      	add	sp, r3
 8009012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009014:	fffffdec 	.word	0xfffffdec
 8009018:	fffffe60 	.word	0xfffffe60
 800901c:	08013f44 	.word	0x08013f44
 8009020:	08013f60 	.word	0x08013f60
 8009024:	08013fb0 	.word	0x08013fb0
 8009028:	080135d4 	.word	0x080135d4
 800902c:	08014b18 	.word	0x08014b18
 8009030:	08013fc4 	.word	0x08013fc4
 8009034:	08013ff0 	.word	0x08013ff0
 8009038:	08014008 	.word	0x08014008
 800903c:	0801400c 	.word	0x0801400c

08009040 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <is_sak_available+0x10>)
 8009046:	781b      	ldrb	r3, [r3, #0]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	20000b0c 	.word	0x20000b0c

08009054 <is_astronode_reset>:

bool is_astronode_reset()
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009058:	4b02      	ldr	r3, [pc, #8]	; (8009064 <is_astronode_reset+0x10>)
 800905a:	781b      	ldrb	r3, [r3, #0]
}
 800905c:	0018      	movs	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	20000b0d 	.word	0x20000b0d

08009068 <is_command_available>:

bool is_command_available()
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
    return g_is_command_available;
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <is_command_available+0x10>)
 800906e:	781b      	ldrb	r3, [r3, #0]
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	20000b0e 	.word	0x20000b0e

0800907c <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	0002      	movs	r2, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	1dfb      	adds	r3, r7, #7
 8009088:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 800908a:	1dfb      	adds	r3, r7, #7
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b2f      	cmp	r3, #47	; 0x2f
 8009090:	d90b      	bls.n	80090aa <ascii_to_value+0x2e>
 8009092:	1dfb      	adds	r3, r7, #7
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b39      	cmp	r3, #57	; 0x39
 8009098:	d807      	bhi.n	80090aa <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 800909a:	1dfb      	adds	r3, r7, #7
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	3b30      	subs	r3, #48	; 0x30
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	701a      	strb	r2, [r3, #0]
        return true;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e010      	b.n	80090cc <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80090aa:	1dfb      	adds	r3, r7, #7
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d90b      	bls.n	80090ca <ascii_to_value+0x4e>
 80090b2:	1dfb      	adds	r3, r7, #7
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b46      	cmp	r3, #70	; 0x46
 80090b8:	d807      	bhi.n	80090ca <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80090ba:	1dfb      	adds	r3, r7, #7
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	3b37      	subs	r3, #55	; 0x37
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	701a      	strb	r2, [r3, #0]
        return true;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e000      	b.n	80090cc <ascii_to_value+0x50>
    }
    else
    {
        return false;
 80090ca:	2300      	movs	r3, #0
    }
}
 80090cc:	0018      	movs	r0, r3
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b002      	add	sp, #8
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80090de:	250e      	movs	r5, #14
 80090e0:	197b      	adds	r3, r7, r5
 80090e2:	2200      	movs	r2, #0
 80090e4:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 80090e6:	197b      	adds	r3, r7, r5
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	197a      	adds	r2, r7, r5
 80090ec:	1c59      	adds	r1, r3, #1
 80090ee:	8011      	strh	r1, [r2, #0]
 80090f0:	001a      	movs	r2, r3
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	189b      	adds	r3, r3, r2
 80090f6:	2202      	movs	r2, #2
 80090f8:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	260a      	movs	r6, #10
 80090fe:	19bc      	adds	r4, r7, r6
 8009100:	4a44      	ldr	r2, [pc, #272]	; (8009214 <astronode_create_request_transport+0x140>)
 8009102:	2101      	movs	r1, #1
 8009104:	0018      	movs	r0, r3
 8009106:	f000 fa7d 	bl	8009604 <calculate_crc>
 800910a:	0003      	movs	r3, r0
 800910c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	1c58      	adds	r0, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	22c4      	movs	r2, #196	; 0xc4
 8009116:	5a99      	ldrh	r1, [r3, r2]
 8009118:	19bc      	adds	r4, r7, r6
 800911a:	19bb      	adds	r3, r7, r6
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	001a      	movs	r2, r3
 8009120:	f000 fa70 	bl	8009604 <calculate_crc>
 8009124:	0003      	movs	r3, r0
 8009126:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009128:	19bb      	adds	r3, r7, r6
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	b21a      	sxth	r2, r3
 8009130:	0031      	movs	r1, r6
 8009132:	19bb      	adds	r3, r7, r6
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	b21b      	sxth	r3, r3
 800913c:	4313      	orrs	r3, r2
 800913e:	b21a      	sxth	r2, r3
 8009140:	187b      	adds	r3, r7, r1
 8009142:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	7818      	ldrb	r0, [r3, #0]
 8009148:	197b      	adds	r3, r7, r5
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	18d3      	adds	r3, r2, r3
 8009150:	0019      	movs	r1, r3
 8009152:	f000 fbeb 	bl	800992c <uint8_to_ascii_buffer>
    index += 2;
 8009156:	197b      	adds	r3, r7, r5
 8009158:	197a      	adds	r2, r7, r5
 800915a:	8812      	ldrh	r2, [r2, #0]
 800915c:	3202      	adds	r2, #2
 800915e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009160:	230c      	movs	r3, #12
 8009162:	18fb      	adds	r3, r7, r3
 8009164:	2200      	movs	r2, #0
 8009166:	801a      	strh	r2, [r3, #0]
 8009168:	e017      	b.n	800919a <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800916a:	240c      	movs	r4, #12
 800916c:	193b      	adds	r3, r7, r4
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	7858      	ldrb	r0, [r3, #1]
 8009176:	250e      	movs	r5, #14
 8009178:	197b      	adds	r3, r7, r5
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	18d3      	adds	r3, r2, r3
 8009180:	0019      	movs	r1, r3
 8009182:	f000 fbd3 	bl	800992c <uint8_to_ascii_buffer>
        index += 2;
 8009186:	197b      	adds	r3, r7, r5
 8009188:	197a      	adds	r2, r7, r5
 800918a:	8812      	ldrh	r2, [r2, #0]
 800918c:	3202      	adds	r2, #2
 800918e:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009190:	193b      	adds	r3, r7, r4
 8009192:	881a      	ldrh	r2, [r3, #0]
 8009194:	193b      	adds	r3, r7, r4
 8009196:	3201      	adds	r2, #1
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	22c4      	movs	r2, #196	; 0xc4
 800919e:	5a9b      	ldrh	r3, [r3, r2]
 80091a0:	220c      	movs	r2, #12
 80091a2:	18ba      	adds	r2, r7, r2
 80091a4:	8812      	ldrh	r2, [r2, #0]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d3df      	bcc.n	800916a <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80091aa:	250a      	movs	r5, #10
 80091ac:	197b      	adds	r3, r7, r5
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	0a1b      	lsrs	r3, r3, #8
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	b2d8      	uxtb	r0, r3
 80091b6:	240e      	movs	r4, #14
 80091b8:	193b      	adds	r3, r7, r4
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	18d3      	adds	r3, r2, r3
 80091c0:	0019      	movs	r1, r3
 80091c2:	f000 fbb3 	bl	800992c <uint8_to_ascii_buffer>
    index += 2;
 80091c6:	0021      	movs	r1, r4
 80091c8:	187b      	adds	r3, r7, r1
 80091ca:	187a      	adds	r2, r7, r1
 80091cc:	8812      	ldrh	r2, [r2, #0]
 80091ce:	3202      	adds	r2, #2
 80091d0:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 80091d2:	197b      	adds	r3, r7, r5
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	b2d8      	uxtb	r0, r3
 80091d8:	000c      	movs	r4, r1
 80091da:	187b      	adds	r3, r7, r1
 80091dc:	881b      	ldrh	r3, [r3, #0]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	18d3      	adds	r3, r2, r3
 80091e2:	0019      	movs	r1, r3
 80091e4:	f000 fba2 	bl	800992c <uint8_to_ascii_buffer>
    index += 2;
 80091e8:	0020      	movs	r0, r4
 80091ea:	183b      	adds	r3, r7, r0
 80091ec:	183a      	adds	r2, r7, r0
 80091ee:	8812      	ldrh	r2, [r2, #0]
 80091f0:	3202      	adds	r2, #2
 80091f2:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80091f4:	183b      	adds	r3, r7, r0
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	183a      	adds	r2, r7, r0
 80091fa:	1c59      	adds	r1, r3, #1
 80091fc:	8011      	strh	r1, [r2, #0]
 80091fe:	001a      	movs	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	189b      	adds	r3, r3, r2
 8009204:	2203      	movs	r2, #3
 8009206:	701a      	strb	r2, [r3, #0]

    return index;
 8009208:	183b      	adds	r3, r7, r0
 800920a:	881b      	ldrh	r3, [r3, #0]
}
 800920c:	0018      	movs	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	b005      	add	sp, #20
 8009212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009214:	0000ffff 	.word	0x0000ffff

08009218 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921a:	b089      	sub	sp, #36	; 0x24
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	230a      	movs	r3, #10
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	1c0a      	adds	r2, r1, #0
 8009228:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d005      	beq.n	800923e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009232:	4bbd      	ldr	r3, [pc, #756]	; (8009528 <astronode_decode_answer_transport+0x310>)
 8009234:	0018      	movs	r0, r3
 8009236:	f7f9 ff51 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 800923a:	2300      	movs	r3, #0
 800923c:	e170      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800923e:	210a      	movs	r1, #10
 8009240:	187b      	adds	r3, r7, r1
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	2201      	movs	r2, #1
 8009246:	4013      	ands	r3, r2
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <astronode_decode_answer_transport+0x3e>
 800924e:	187b      	adds	r3, r7, r1
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	2b07      	cmp	r3, #7
 8009254:	d805      	bhi.n	8009262 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8009256:	4bb5      	ldr	r3, [pc, #724]	; (800952c <astronode_decode_answer_transport+0x314>)
 8009258:	0018      	movs	r0, r3
 800925a:	f7f9 ff3f 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 800925e:	2300      	movs	r3, #0
 8009260:	e15e      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8009262:	230a      	movs	r3, #10
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	3b08      	subs	r3, #8
 800926a:	2b00      	cmp	r3, #0
 800926c:	da00      	bge.n	8009270 <astronode_decode_answer_transport+0x58>
 800926e:	3301      	adds	r3, #1
 8009270:	105b      	asrs	r3, r3, #1
 8009272:	b299      	uxth	r1, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	22c4      	movs	r2, #196	; 0xc4
 8009278:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800927a:	230a      	movs	r3, #10
 800927c:	18fb      	adds	r3, r7, r3
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	18d3      	adds	r3, r2, r3
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d005      	beq.n	8009298 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800928c:	4ba8      	ldr	r3, [pc, #672]	; (8009530 <astronode_decode_answer_transport+0x318>)
 800928e:	0018      	movs	r0, r3
 8009290:	f7f9 ff24 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 8009294:	2300      	movs	r3, #0
 8009296:	e143      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8009298:	2117      	movs	r1, #23
 800929a:	187b      	adds	r3, r7, r1
 800929c:	2200      	movs	r2, #0
 800929e:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80092a0:	2416      	movs	r4, #22
 80092a2:	193b      	adds	r3, r7, r4
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3301      	adds	r3, #1
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	187a      	adds	r2, r7, r1
 80092b0:	0011      	movs	r1, r2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f7ff fee2 	bl	800907c <ascii_to_value>
 80092b8:	0003      	movs	r3, r0
 80092ba:	001a      	movs	r2, r3
 80092bc:	2301      	movs	r3, #1
 80092be:	4053      	eors	r3, r2
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10e      	bne.n	80092e4 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3302      	adds	r3, #2
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	193a      	adds	r2, r7, r4
 80092ce:	0011      	movs	r1, r2
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7ff fed3 	bl	800907c <ascii_to_value>
 80092d6:	0003      	movs	r3, r0
 80092d8:	001a      	movs	r2, r3
 80092da:	2301      	movs	r3, #1
 80092dc:	4053      	eors	r3, r2
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80092e4:	4b93      	ldr	r3, [pc, #588]	; (8009534 <astronode_decode_answer_transport+0x31c>)
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7f9 fef8 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	e117      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80092f0:	2317      	movs	r3, #23
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	2316      	movs	r3, #22
 80092fc:	18fb      	adds	r3, r7, r3
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	b2da      	uxtb	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8009308:	231e      	movs	r3, #30
 800930a:	18fb      	adds	r3, r7, r3
 800930c:	2203      	movs	r2, #3
 800930e:	801a      	strh	r2, [r3, #0]
 8009310:	231c      	movs	r3, #28
 8009312:	18fb      	adds	r3, r7, r3
 8009314:	2200      	movs	r2, #0
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	e045      	b.n	80093a6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800931a:	241e      	movs	r4, #30
 800931c:	193b      	adds	r3, r7, r4
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	18d3      	adds	r3, r2, r3
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	2217      	movs	r2, #23
 8009328:	18ba      	adds	r2, r7, r2
 800932a:	0011      	movs	r1, r2
 800932c:	0018      	movs	r0, r3
 800932e:	f7ff fea5 	bl	800907c <ascii_to_value>
 8009332:	0003      	movs	r3, r0
 8009334:	001a      	movs	r2, r3
 8009336:	2301      	movs	r3, #1
 8009338:	4053      	eors	r3, r2
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b00      	cmp	r3, #0
 800933e:	d112      	bne.n	8009366 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8009340:	193b      	adds	r3, r7, r4
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	3301      	adds	r3, #1
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	18d3      	adds	r3, r2, r3
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2216      	movs	r2, #22
 800934e:	18ba      	adds	r2, r7, r2
 8009350:	0011      	movs	r1, r2
 8009352:	0018      	movs	r0, r3
 8009354:	f7ff fe92 	bl	800907c <ascii_to_value>
 8009358:	0003      	movs	r3, r0
 800935a:	001a      	movs	r2, r3
 800935c:	2301      	movs	r3, #1
 800935e:	4053      	eors	r3, r2
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8009366:	4b73      	ldr	r3, [pc, #460]	; (8009534 <astronode_decode_answer_transport+0x31c>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7f9 feb7 	bl	80030dc <send_debug_logs>
            return RS_FAILURE;
 800936e:	2300      	movs	r3, #0
 8009370:	e0d6      	b.n	8009520 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8009372:	2317      	movs	r3, #23
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	b2d9      	uxtb	r1, r3
 800937c:	2316      	movs	r3, #22
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	201c      	movs	r0, #28
 8009384:	183b      	adds	r3, r7, r0
 8009386:	881b      	ldrh	r3, [r3, #0]
 8009388:	1838      	adds	r0, r7, r0
 800938a:	1c5c      	adds	r4, r3, #1
 800938c:	8004      	strh	r4, [r0, #0]
 800938e:	0018      	movs	r0, r3
 8009390:	188b      	adds	r3, r1, r2
 8009392:	b2da      	uxtb	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	181b      	adds	r3, r3, r0
 8009398:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800939a:	221e      	movs	r2, #30
 800939c:	18bb      	adds	r3, r7, r2
 800939e:	18ba      	adds	r2, r7, r2
 80093a0:	8812      	ldrh	r2, [r2, #0]
 80093a2:	3202      	adds	r2, #2
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	231e      	movs	r3, #30
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	260a      	movs	r6, #10
 80093ae:	19bb      	adds	r3, r7, r6
 80093b0:	881b      	ldrh	r3, [r3, #0]
 80093b2:	3b05      	subs	r3, #5
 80093b4:	429a      	cmp	r2, r3
 80093b6:	dbb0      	blt.n	800931a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	251a      	movs	r5, #26
 80093bc:	197c      	adds	r4, r7, r5
 80093be:	4a5e      	ldr	r2, [pc, #376]	; (8009538 <astronode_decode_answer_transport+0x320>)
 80093c0:	2101      	movs	r1, #1
 80093c2:	0018      	movs	r0, r3
 80093c4:	f000 f91e 	bl	8009604 <calculate_crc>
 80093c8:	0003      	movs	r3, r0
 80093ca:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	1c58      	adds	r0, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	22c4      	movs	r2, #196	; 0xc4
 80093d4:	5a99      	ldrh	r1, [r3, r2]
 80093d6:	197c      	adds	r4, r7, r5
 80093d8:	197b      	adds	r3, r7, r5
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	001a      	movs	r2, r3
 80093de:	f000 f911 	bl	8009604 <calculate_crc>
 80093e2:	0003      	movs	r3, r0
 80093e4:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 80093e6:	197b      	adds	r3, r7, r5
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	b21a      	sxth	r2, r3
 80093ee:	0029      	movs	r1, r5
 80093f0:	197b      	adds	r3, r7, r5
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	0a1b      	lsrs	r3, r3, #8
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	b21b      	sxth	r3, r3
 80093fa:	4313      	orrs	r3, r2
 80093fc:	b21a      	sxth	r2, r3
 80093fe:	187b      	adds	r3, r7, r1
 8009400:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8009402:	19bb      	adds	r3, r7, r6
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	3b05      	subs	r3, #5
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	18d3      	adds	r3, r2, r3
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2217      	movs	r2, #23
 8009410:	18ba      	adds	r2, r7, r2
 8009412:	0011      	movs	r1, r2
 8009414:	0018      	movs	r0, r3
 8009416:	f7ff fe31 	bl	800907c <ascii_to_value>
 800941a:	0003      	movs	r3, r0
 800941c:	001a      	movs	r2, r3
 800941e:	2301      	movs	r3, #1
 8009420:	4053      	eors	r3, r2
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d112      	bne.n	800944e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8009428:	19bb      	adds	r3, r7, r6
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	3b04      	subs	r3, #4
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	18d3      	adds	r3, r2, r3
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	2216      	movs	r2, #22
 8009436:	18ba      	adds	r2, r7, r2
 8009438:	0011      	movs	r1, r2
 800943a:	0018      	movs	r0, r3
 800943c:	f7ff fe1e 	bl	800907c <ascii_to_value>
 8009440:	0003      	movs	r3, r0
 8009442:	001a      	movs	r2, r3
 8009444:	2301      	movs	r3, #1
 8009446:	4053      	eors	r3, r2
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800944e:	4b39      	ldr	r3, [pc, #228]	; (8009534 <astronode_decode_answer_transport+0x31c>)
 8009450:	0018      	movs	r0, r3
 8009452:	f7f9 fe43 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 8009456:	2300      	movs	r3, #0
 8009458:	e062      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800945a:	2017      	movs	r0, #23
 800945c:	183b      	adds	r3, r7, r0
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	031b      	lsls	r3, r3, #12
 8009464:	b299      	uxth	r1, r3
 8009466:	2416      	movs	r4, #22
 8009468:	193b      	adds	r3, r7, r4
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	b29a      	uxth	r2, r3
 8009472:	2318      	movs	r3, #24
 8009474:	18fb      	adds	r3, r7, r3
 8009476:	188a      	adds	r2, r1, r2
 8009478:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800947a:	250a      	movs	r5, #10
 800947c:	197b      	adds	r3, r7, r5
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	3b03      	subs	r3, #3
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	18d3      	adds	r3, r2, r3
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	183a      	adds	r2, r7, r0
 800948a:	0011      	movs	r1, r2
 800948c:	0018      	movs	r0, r3
 800948e:	f7ff fdf5 	bl	800907c <ascii_to_value>
 8009492:	0003      	movs	r3, r0
 8009494:	001a      	movs	r2, r3
 8009496:	2301      	movs	r3, #1
 8009498:	4053      	eors	r3, r2
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d111      	bne.n	80094c4 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 80094a0:	197b      	adds	r3, r7, r5
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	3b02      	subs	r3, #2
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	18d3      	adds	r3, r2, r3
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	193a      	adds	r2, r7, r4
 80094ae:	0011      	movs	r1, r2
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7ff fde3 	bl	800907c <ascii_to_value>
 80094b6:	0003      	movs	r3, r0
 80094b8:	001a      	movs	r2, r3
 80094ba:	2301      	movs	r3, #1
 80094bc:	4053      	eors	r3, r2
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80094c4:	4b1b      	ldr	r3, [pc, #108]	; (8009534 <astronode_decode_answer_transport+0x31c>)
 80094c6:	0018      	movs	r0, r3
 80094c8:	f7f9 fe08 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	e027      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 80094d0:	2317      	movs	r3, #23
 80094d2:	18fb      	adds	r3, r7, r3
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	011b      	lsls	r3, r3, #4
 80094da:	b29a      	uxth	r2, r3
 80094dc:	2316      	movs	r3, #22
 80094de:	18fb      	adds	r3, r7, r3
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	18d3      	adds	r3, r2, r3
 80094e6:	b299      	uxth	r1, r3
 80094e8:	2018      	movs	r0, #24
 80094ea:	183b      	adds	r3, r7, r0
 80094ec:	183a      	adds	r2, r7, r0
 80094ee:	8812      	ldrh	r2, [r2, #0]
 80094f0:	188a      	adds	r2, r1, r2
 80094f2:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80094f4:	183a      	adds	r2, r7, r0
 80094f6:	231a      	movs	r3, #26
 80094f8:	18fb      	adds	r3, r7, r3
 80094fa:	8812      	ldrh	r2, [r2, #0]
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d005      	beq.n	800950e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009502:	4b0e      	ldr	r3, [pc, #56]	; (800953c <astronode_decode_answer_transport+0x324>)
 8009504:	0018      	movs	r0, r3
 8009506:	f7f9 fde9 	bl	80030dc <send_debug_logs>
        return RS_FAILURE;
 800950a:	2300      	movs	r3, #0
 800950c:	e008      	b.n	8009520 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	2bff      	cmp	r3, #255	; 0xff
 8009514:	d103      	bne.n	800951e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	0018      	movs	r0, r3
 800951a:	f000 f8c3 	bl	80096a4 <check_for_error>
    }

    return RS_SUCCESS;
 800951e:	2301      	movs	r3, #1
}
 8009520:	0018      	movs	r0, r3
 8009522:	46bd      	mov	sp, r7
 8009524:	b009      	add	sp, #36	; 0x24
 8009526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009528:	0801409c 	.word	0x0801409c
 800952c:	080140ec 	.word	0x080140ec
 8009530:	0801413c 	.word	0x0801413c
 8009534:	0801418c 	.word	0x0801418c
 8009538:	0000ffff 	.word	0x0000ffff
 800953c:	080141d8 	.word	0x080141d8

08009540 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009542:	4c2b      	ldr	r4, [pc, #172]	; (80095f0 <astronode_transport_send_receive+0xb0>)
 8009544:	44a5      	add	sp, r4
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800954c:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <astronode_transport_send_receive+0xb4>)
 800954e:	25ca      	movs	r5, #202	; 0xca
 8009550:	00ad      	lsls	r5, r5, #2
 8009552:	195b      	adds	r3, r3, r5
 8009554:	19db      	adds	r3, r3, r7
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	3304      	adds	r3, #4
 800955c:	22c4      	movs	r2, #196	; 0xc4
 800955e:	0052      	lsls	r2, r2, #1
 8009560:	2100      	movs	r1, #0
 8009562:	0018      	movs	r0, r3
 8009564:	f002 ff1e 	bl	800c3a4 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009568:	4b23      	ldr	r3, [pc, #140]	; (80095f8 <astronode_transport_send_receive+0xb8>)
 800956a:	195b      	adds	r3, r3, r5
 800956c:	19db      	adds	r3, r3, r7
 800956e:	2200      	movs	r2, #0
 8009570:	601a      	str	r2, [r3, #0]
 8009572:	3304      	adds	r3, #4
 8009574:	22c4      	movs	r2, #196	; 0xc4
 8009576:	0052      	lsls	r2, r2, #1
 8009578:	2100      	movs	r1, #0
 800957a:	0018      	movs	r0, r3
 800957c:	f002 ff12 	bl	800c3a4 <memset>
    uint16_t answer_length =  0;
 8009580:	4b1e      	ldr	r3, [pc, #120]	; (80095fc <astronode_transport_send_receive+0xbc>)
 8009582:	195b      	adds	r3, r3, r5
 8009584:	19db      	adds	r3, r3, r7
 8009586:	2200      	movs	r2, #0
 8009588:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800958a:	4e1d      	ldr	r6, [pc, #116]	; (8009600 <astronode_transport_send_receive+0xc0>)
 800958c:	19bc      	adds	r4, r7, r6
 800958e:	23cc      	movs	r3, #204	; 0xcc
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	18fa      	adds	r2, r7, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	0011      	movs	r1, r2
 8009598:	0018      	movs	r0, r3
 800959a:	f7ff fd9b 	bl	80090d4 <astronode_create_request_transport>
 800959e:	0003      	movs	r3, r0
 80095a0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80095a2:	19bb      	adds	r3, r7, r6
 80095a4:	881a      	ldrh	r2, [r3, #0]
 80095a6:	23cc      	movs	r3, #204	; 0xcc
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	18fb      	adds	r3, r7, r3
 80095ac:	0011      	movs	r1, r2
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7fa fa34 	bl	8003a1c <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80095b4:	230a      	movs	r3, #10
 80095b6:	18fa      	adds	r2, r7, r3
 80095b8:	240c      	movs	r4, #12
 80095ba:	193b      	adds	r3, r7, r4
 80095bc:	0011      	movs	r1, r2
 80095be:	0018      	movs	r0, r3
 80095c0:	f000 f92c 	bl	800981c <receive_astronode_answer>
 80095c4:	0003      	movs	r3, r0
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d10a      	bne.n	80095e0 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80095ca:	4b0c      	ldr	r3, [pc, #48]	; (80095fc <astronode_transport_send_receive+0xbc>)
 80095cc:	195b      	adds	r3, r3, r5
 80095ce:	19db      	adds	r3, r3, r7
 80095d0:	8819      	ldrh	r1, [r3, #0]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	193b      	adds	r3, r7, r4
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7ff fe1e 	bl	8009218 <astronode_decode_answer_transport>
 80095dc:	0003      	movs	r3, r0
 80095de:	e000      	b.n	80095e2 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80095e0:	2300      	movs	r3, #0
    }
}
 80095e2:	0018      	movs	r0, r3
 80095e4:	46bd      	mov	sp, r7
 80095e6:	23cb      	movs	r3, #203	; 0xcb
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	449d      	add	sp, r3
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	fffffcd4 	.word	0xfffffcd4
 80095f4:	fffffe70 	.word	0xfffffe70
 80095f8:	fffffce4 	.word	0xfffffce4
 80095fc:	fffffce2 	.word	0xfffffce2
 8009600:	00000326 	.word	0x00000326

08009604 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009604:	b590      	push	{r4, r7, lr}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	0008      	movs	r0, r1
 800960e:	0011      	movs	r1, r2
 8009610:	1cbb      	adds	r3, r7, #2
 8009612:	1c02      	adds	r2, r0, #0
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	003b      	movs	r3, r7
 8009618:	1c0a      	adds	r2, r1, #0
 800961a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800961c:	230e      	movs	r3, #14
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	003a      	movs	r2, r7
 8009622:	8812      	ldrh	r2, [r2, #0]
 8009624:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8009626:	e02e      	b.n	8009686 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8009628:	240e      	movs	r4, #14
 800962a:	193b      	adds	r3, r7, r4
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	b299      	uxth	r1, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b29a      	uxth	r2, r3
 800963c:	200c      	movs	r0, #12
 800963e:	183b      	adds	r3, r7, r0
 8009640:	404a      	eors	r2, r1
 8009642:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009644:	183b      	adds	r3, r7, r0
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	b299      	uxth	r1, r3
 800964c:	183b      	adds	r3, r7, r0
 800964e:	183a      	adds	r2, r7, r0
 8009650:	8812      	ldrh	r2, [r2, #0]
 8009652:	404a      	eors	r2, r1
 8009654:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8009656:	0021      	movs	r1, r4
 8009658:	187b      	adds	r3, r7, r1
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	b21a      	sxth	r2, r3
 8009660:	183b      	adds	r3, r7, r0
 8009662:	881b      	ldrh	r3, [r3, #0]
 8009664:	031b      	lsls	r3, r3, #12
 8009666:	b21b      	sxth	r3, r3
 8009668:	4053      	eors	r3, r2
 800966a:	b21a      	sxth	r2, r3
 800966c:	183b      	adds	r3, r7, r0
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	015b      	lsls	r3, r3, #5
 8009672:	b21b      	sxth	r3, r3
 8009674:	4053      	eors	r3, r2
 8009676:	b21a      	sxth	r2, r3
 8009678:	183b      	adds	r3, r7, r0
 800967a:	2000      	movs	r0, #0
 800967c:	5e1b      	ldrsh	r3, [r3, r0]
 800967e:	4053      	eors	r3, r2
 8009680:	b21a      	sxth	r2, r3
 8009682:	187b      	adds	r3, r7, r1
 8009684:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8009686:	1cbb      	adds	r3, r7, #2
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	1cba      	adds	r2, r7, #2
 800968c:	1e59      	subs	r1, r3, #1
 800968e:	8011      	strh	r1, [r2, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1c9      	bne.n	8009628 <calculate_crc+0x24>
    }
    return crc;
 8009694:	230e      	movs	r3, #14
 8009696:	18fb      	adds	r3, r7, r3
 8009698:	881b      	ldrh	r3, [r3, #0]
}
 800969a:	0018      	movs	r0, r3
 800969c:	46bd      	mov	sp, r7
 800969e:	b005      	add	sp, #20
 80096a0:	bd90      	pop	{r4, r7, pc}
	...

080096a4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	b299      	uxth	r1, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	789b      	ldrb	r3, [r3, #2]
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	200e      	movs	r0, #14
 80096be:	183b      	adds	r3, r7, r0
 80096c0:	188a      	adds	r2, r1, r2
 80096c2:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80096c4:	183b      	adds	r3, r7, r0
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4a40      	ldr	r2, [pc, #256]	; (80097cc <check_for_error+0x128>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d100      	bne.n	80096d0 <check_for_error+0x2c>
 80096ce:	e06f      	b.n	80097b0 <check_for_error+0x10c>
 80096d0:	4a3e      	ldr	r2, [pc, #248]	; (80097cc <check_for_error+0x128>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	dd00      	ble.n	80096d8 <check_for_error+0x34>
 80096d6:	e070      	b.n	80097ba <check_for_error+0x116>
 80096d8:	4a3d      	ldr	r2, [pc, #244]	; (80097d0 <check_for_error+0x12c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d100      	bne.n	80096e0 <check_for_error+0x3c>
 80096de:	e062      	b.n	80097a6 <check_for_error+0x102>
 80096e0:	4a3b      	ldr	r2, [pc, #236]	; (80097d0 <check_for_error+0x12c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	dd00      	ble.n	80096e8 <check_for_error+0x44>
 80096e6:	e068      	b.n	80097ba <check_for_error+0x116>
 80096e8:	4a3a      	ldr	r2, [pc, #232]	; (80097d4 <check_for_error+0x130>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d056      	beq.n	800979c <check_for_error+0xf8>
 80096ee:	4a39      	ldr	r2, [pc, #228]	; (80097d4 <check_for_error+0x130>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	dd00      	ble.n	80096f6 <check_for_error+0x52>
 80096f4:	e061      	b.n	80097ba <check_for_error+0x116>
 80096f6:	4a38      	ldr	r2, [pc, #224]	; (80097d8 <check_for_error+0x134>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d04a      	beq.n	8009792 <check_for_error+0xee>
 80096fc:	4a36      	ldr	r2, [pc, #216]	; (80097d8 <check_for_error+0x134>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	dc5b      	bgt.n	80097ba <check_for_error+0x116>
 8009702:	4a36      	ldr	r2, [pc, #216]	; (80097dc <check_for_error+0x138>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d03f      	beq.n	8009788 <check_for_error+0xe4>
 8009708:	4a34      	ldr	r2, [pc, #208]	; (80097dc <check_for_error+0x138>)
 800970a:	4293      	cmp	r3, r2
 800970c:	dc55      	bgt.n	80097ba <check_for_error+0x116>
 800970e:	4a34      	ldr	r2, [pc, #208]	; (80097e0 <check_for_error+0x13c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d034      	beq.n	800977e <check_for_error+0xda>
 8009714:	4a32      	ldr	r2, [pc, #200]	; (80097e0 <check_for_error+0x13c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	dc4f      	bgt.n	80097ba <check_for_error+0x116>
 800971a:	4a32      	ldr	r2, [pc, #200]	; (80097e4 <check_for_error+0x140>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d029      	beq.n	8009774 <check_for_error+0xd0>
 8009720:	4a30      	ldr	r2, [pc, #192]	; (80097e4 <check_for_error+0x140>)
 8009722:	4293      	cmp	r3, r2
 8009724:	dc49      	bgt.n	80097ba <check_for_error+0x116>
 8009726:	4a30      	ldr	r2, [pc, #192]	; (80097e8 <check_for_error+0x144>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d01e      	beq.n	800976a <check_for_error+0xc6>
 800972c:	4a2e      	ldr	r2, [pc, #184]	; (80097e8 <check_for_error+0x144>)
 800972e:	4293      	cmp	r3, r2
 8009730:	dc43      	bgt.n	80097ba <check_for_error+0x116>
 8009732:	2222      	movs	r2, #34	; 0x22
 8009734:	32ff      	adds	r2, #255	; 0xff
 8009736:	4293      	cmp	r3, r2
 8009738:	d012      	beq.n	8009760 <check_for_error+0xbc>
 800973a:	2291      	movs	r2, #145	; 0x91
 800973c:	0052      	lsls	r2, r2, #1
 800973e:	4293      	cmp	r3, r2
 8009740:	da3b      	bge.n	80097ba <check_for_error+0x116>
 8009742:	2b01      	cmp	r3, #1
 8009744:	d002      	beq.n	800974c <check_for_error+0xa8>
 8009746:	2b11      	cmp	r3, #17
 8009748:	d005      	beq.n	8009756 <check_for_error+0xb2>
 800974a:	e036      	b.n	80097ba <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800974c:	4b27      	ldr	r3, [pc, #156]	; (80097ec <check_for_error+0x148>)
 800974e:	0018      	movs	r0, r3
 8009750:	f7f9 fcc4 	bl	80030dc <send_debug_logs>
            break;
 8009754:	e036      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8009756:	4b26      	ldr	r3, [pc, #152]	; (80097f0 <check_for_error+0x14c>)
 8009758:	0018      	movs	r0, r3
 800975a:	f7f9 fcbf 	bl	80030dc <send_debug_logs>
            break;
 800975e:	e031      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009760:	4b24      	ldr	r3, [pc, #144]	; (80097f4 <check_for_error+0x150>)
 8009762:	0018      	movs	r0, r3
 8009764:	f7f9 fcba 	bl	80030dc <send_debug_logs>
            break;
 8009768:	e02c      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800976a:	4b23      	ldr	r3, [pc, #140]	; (80097f8 <check_for_error+0x154>)
 800976c:	0018      	movs	r0, r3
 800976e:	f7f9 fcb5 	bl	80030dc <send_debug_logs>
            break;
 8009772:	e027      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009774:	4b21      	ldr	r3, [pc, #132]	; (80097fc <check_for_error+0x158>)
 8009776:	0018      	movs	r0, r3
 8009778:	f7f9 fcb0 	bl	80030dc <send_debug_logs>
            break;
 800977c:	e022      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800977e:	4b20      	ldr	r3, [pc, #128]	; (8009800 <check_for_error+0x15c>)
 8009780:	0018      	movs	r0, r3
 8009782:	f7f9 fcab 	bl	80030dc <send_debug_logs>
            break;
 8009786:	e01d      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8009788:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <check_for_error+0x160>)
 800978a:	0018      	movs	r0, r3
 800978c:	f7f9 fca6 	bl	80030dc <send_debug_logs>
            break;
 8009790:	e018      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009792:	4b1d      	ldr	r3, [pc, #116]	; (8009808 <check_for_error+0x164>)
 8009794:	0018      	movs	r0, r3
 8009796:	f7f9 fca1 	bl	80030dc <send_debug_logs>
            break;
 800979a:	e013      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800979c:	4b1b      	ldr	r3, [pc, #108]	; (800980c <check_for_error+0x168>)
 800979e:	0018      	movs	r0, r3
 80097a0:	f7f9 fc9c 	bl	80030dc <send_debug_logs>
            break;
 80097a4:	e00e      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <check_for_error+0x16c>)
 80097a8:	0018      	movs	r0, r3
 80097aa:	f7f9 fc97 	bl	80030dc <send_debug_logs>
            break;
 80097ae:	e009      	b.n	80097c4 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80097b0:	4b18      	ldr	r3, [pc, #96]	; (8009814 <check_for_error+0x170>)
 80097b2:	0018      	movs	r0, r3
 80097b4:	f7f9 fc92 	bl	80030dc <send_debug_logs>
            break;
 80097b8:	e004      	b.n	80097c4 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80097ba:	4b17      	ldr	r3, [pc, #92]	; (8009818 <check_for_error+0x174>)
 80097bc:	0018      	movs	r0, r3
 80097be:	f7f9 fc8d 	bl	80030dc <send_debug_logs>
            break;
 80097c2:	46c0      	nop			; (mov r8, r8)
    }
}
 80097c4:	46c0      	nop			; (mov r8, r8)
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b004      	add	sp, #16
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	00004601 	.word	0x00004601
 80097d0:	00004501 	.word	0x00004501
 80097d4:	00003501 	.word	0x00003501
 80097d8:	00002601 	.word	0x00002601
 80097dc:	00002511 	.word	0x00002511
 80097e0:	00002501 	.word	0x00002501
 80097e4:	00000611 	.word	0x00000611
 80097e8:	00000601 	.word	0x00000601
 80097ec:	0801421c 	.word	0x0801421c
 80097f0:	08014268 	.word	0x08014268
 80097f4:	080142cc 	.word	0x080142cc
 80097f8:	08014304 	.word	0x08014304
 80097fc:	080143a8 	.word	0x080143a8
 8009800:	08014410 	.word	0x08014410
 8009804:	08014470 	.word	0x08014470
 8009808:	080144fc 	.word	0x080144fc
 800980c:	0801455c 	.word	0x0801455c
 8009810:	08014608 	.word	0x08014608
 8009814:	08014654 	.word	0x08014654
 8009818:	0801469c 	.word	0x0801469c

0800981c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800981c:	b5b0      	push	{r4, r5, r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8009826:	230f      	movs	r3, #15
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800982e:	2316      	movs	r3, #22
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	2200      	movs	r2, #0
 8009834:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8009836:	f7fa f90f 	bl	8003a58 <get_systick>
 800983a:	0003      	movs	r3, r0
 800983c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800983e:	2315      	movs	r3, #21
 8009840:	18fb      	adds	r3, r7, r3
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8009846:	e054      	b.n	80098f2 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8009848:	4a34      	ldr	r2, [pc, #208]	; (800991c <receive_astronode_answer+0x100>)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	0011      	movs	r1, r2
 800984e:	0018      	movs	r0, r3
 8009850:	f7fa f90a 	bl	8003a68 <is_systick_timeout_over>
 8009854:	1e03      	subs	r3, r0, #0
 8009856:	d005      	beq.n	8009864 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8009858:	4b31      	ldr	r3, [pc, #196]	; (8009920 <receive_astronode_answer+0x104>)
 800985a:	0018      	movs	r0, r3
 800985c:	f7f9 fc3e 	bl	80030dc <send_debug_logs>
            return RS_FAILURE;
 8009860:	2300      	movs	r3, #0
 8009862:	e057      	b.n	8009914 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009864:	250f      	movs	r5, #15
 8009866:	197b      	adds	r3, r7, r5
 8009868:	0018      	movs	r0, r3
 800986a:	f7fa f913 	bl	8003a94 <is_astronode_character_received>
 800986e:	0003      	movs	r3, r0
 8009870:	0019      	movs	r1, r3
 8009872:	2016      	movs	r0, #22
 8009874:	183b      	adds	r3, r7, r0
 8009876:	183a      	adds	r2, r7, r0
 8009878:	8812      	ldrh	r2, [r2, #0]
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	2415      	movs	r4, #21
 800987e:	193b      	adds	r3, r7, r4
 8009880:	193a      	adds	r2, r7, r4
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	701a      	strb	r2, [r3, #0]
 8009886:	2900      	cmp	r1, #0
 8009888:	d033      	beq.n	80098f2 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800988a:	197b      	adds	r3, r7, r5
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b02      	cmp	r3, #2
 8009890:	d105      	bne.n	800989e <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009892:	193b      	adds	r3, r7, r4
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
                length = 0;
 8009898:	183b      	adds	r3, r7, r0
 800989a:	2200      	movs	r2, #0
 800989c:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800989e:	2116      	movs	r1, #22
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	18d3      	adds	r3, r2, r3
 80098a8:	220f      	movs	r2, #15
 80098aa:	18ba      	adds	r2, r7, r2
 80098ac:	7812      	ldrb	r2, [r2, #0]
 80098ae:	701a      	strb	r2, [r3, #0]
            length++;
 80098b0:	187b      	adds	r3, r7, r1
 80098b2:	881a      	ldrh	r2, [r3, #0]
 80098b4:	187b      	adds	r3, r7, r1
 80098b6:	3201      	adds	r2, #1
 80098b8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80098ba:	187b      	adds	r3, r7, r1
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	2bb2      	cmp	r3, #178	; 0xb2
 80098c0:	d905      	bls.n	80098ce <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80098c2:	4b18      	ldr	r3, [pc, #96]	; (8009924 <receive_astronode_answer+0x108>)
 80098c4:	0018      	movs	r0, r3
 80098c6:	f7f9 fc09 	bl	80030dc <send_debug_logs>
                return RS_FAILURE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e022      	b.n	8009914 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80098ce:	230f      	movs	r3, #15
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d10c      	bne.n	80098f2 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80098d8:	2216      	movs	r2, #22
 80098da:	18bb      	adds	r3, r7, r2
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d907      	bls.n	80098f2 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	18ba      	adds	r2, r7, r2
 80098e6:	8812      	ldrh	r2, [r2, #0]
 80098e8:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80098ea:	2315      	movs	r3, #21
 80098ec:	18fb      	adds	r3, r7, r3
 80098ee:	2201      	movs	r2, #1
 80098f0:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80098f2:	2315      	movs	r3, #21
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	2201      	movs	r2, #1
 80098fa:	4053      	eors	r3, r2
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1a2      	bne.n	8009848 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <receive_astronode_answer+0x10c>)
 8009904:	0018      	movs	r0, r3
 8009906:	f7f9 fbe9 	bl	80030dc <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	0018      	movs	r0, r3
 800990e:	f7f9 fbe5 	bl	80030dc <send_debug_logs>

    return RS_SUCCESS;
 8009912:	2301      	movs	r3, #1
}
 8009914:	0018      	movs	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	b006      	add	sp, #24
 800991a:	bdb0      	pop	{r4, r5, r7, pc}
 800991c:	000005dc 	.word	0x000005dc
 8009920:	080146c0 	.word	0x080146c0
 8009924:	080146e4 	.word	0x080146e4
 8009928:	08014730 	.word	0x08014730

0800992c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	0002      	movs	r2, r0
 8009934:	6039      	str	r1, [r7, #0]
 8009936:	1dfb      	adds	r3, r7, #7
 8009938:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800993a:	1dfb      	adds	r3, r7, #7
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	091b      	lsrs	r3, r3, #4
 8009940:	b2db      	uxtb	r3, r3
 8009942:	001a      	movs	r2, r3
 8009944:	4b08      	ldr	r3, [pc, #32]	; (8009968 <uint8_to_ascii_buffer+0x3c>)
 8009946:	5c9a      	ldrb	r2, [r3, r2]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800994c:	1dfb      	adds	r3, r7, #7
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	220f      	movs	r2, #15
 8009952:	401a      	ands	r2, r3
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	4903      	ldr	r1, [pc, #12]	; (8009968 <uint8_to_ascii_buffer+0x3c>)
 800995a:	5c8a      	ldrb	r2, [r1, r2]
 800995c:	701a      	strb	r2, [r3, #0]
}
 800995e:	46c0      	nop			; (mov r8, r8)
 8009960:	46bd      	mov	sp, r7
 8009962:	b002      	add	sp, #8
 8009964:	bd80      	pop	{r7, pc}
 8009966:	46c0      	nop			; (mov r8, r8)
 8009968:	08014a90 	.word	0x08014a90

0800996c <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b087      	sub	sp, #28
 8009970:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009972:	1dfb      	adds	r3, r7, #7
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 8009978:	e012      	b.n	80099a0 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800997a:	f7fa f835 	bl	80039e8 <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800997e:	1dfc      	adds	r4, r7, #7
 8009980:	2300      	movs	r3, #0
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	2301      	movs	r3, #1
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	2301      	movs	r3, #1
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	2301      	movs	r3, #1
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	2201      	movs	r2, #1
 8009994:	2101      	movs	r1, #1
 8009996:	2001      	movs	r0, #1
 8009998:	f7fe fb64 	bl	8008064 <astronode_send_cfg_wr>
 800999c:	0003      	movs	r3, r0
 800999e:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80099a0:	1dfb      	adds	r3, r7, #7
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2201      	movs	r2, #1
 80099a6:	4053      	eors	r3, r2
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e5      	bne.n	800997a <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80099ae:	1dfb      	adds	r3, r7, #7
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00d      	beq.n	80099d2 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80099b6:	f7fe ffbb 	bl	8008930 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80099ba:	f7fe fb1b 	bl	8007ff4 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80099be:	f7ff f8b1 	bl	8008b24 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80099c2:	f7fe fca5 	bl	8008310 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80099c6:	f7fe fbf9 	bl	80081bc <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80099ca:	f7fe ff35 	bl	8008838 <astronode_send_pld_fr>
		return true ;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80099d2:	2300      	movs	r3, #0
	}
}
 80099d4:	0018      	movs	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	b003      	add	sp, #12
 80099da:	bd90      	pop	{r4, r7, pc}

080099dc <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	0002      	movs	r2, r0
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	1dbb      	adds	r3, r7, #6
 80099e8:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	0018      	movs	r0, r3
 80099ee:	f7f6 fb89 	bl	8000104 <strlen>
 80099f2:	0003      	movs	r3, r0
 80099f4:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2ba0      	cmp	r3, #160	; 0xa0
 80099fa:	d80b      	bhi.n	8009a14 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	1dbb      	adds	r3, r7, #6
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	0018      	movs	r0, r3
 8009a08:	f7fe fe6c 	bl	80086e4 <astronode_send_pld_er>
 8009a0c:	1e03      	subs	r3, r0, #0
 8009a0e:	d005      	beq.n	8009a1c <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e004      	b.n	8009a1e <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <my_astro_add_payload_2_queue+0x4c>)
 8009a16:	0018      	movs	r0, r3
 8009a18:	f7f9 fb60 	bl	80030dc <send_debug_logs>
	}
	return false ;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b004      	add	sp, #16
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			; (mov r8, r8)
 8009a28:	0801475c 	.word	0x0801475c

08009a2c <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009a30:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <my_astro_handle_evt+0x6c>)
 8009a32:	0018      	movs	r0, r3
 8009a34:	f7f9 fb52 	bl	80030dc <send_debug_logs>
	astronode_send_evt_rr () ;
 8009a38:	f7fe fd14 	bl	8008464 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009a3c:	f7ff fb00 	bl	8009040 <is_sak_available>
 8009a40:	1e03      	subs	r3, r0, #0
 8009a42:	d007      	beq.n	8009a54 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009a44:	f7fe ffd8 	bl	80089f8 <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 8009a48:	f7ff f82c 	bl	8008aa4 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009a4c:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <my_astro_handle_evt+0x70>)
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f7f9 fb44 	bl	80030dc <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009a54:	f7ff fafe 	bl	8009054 <is_astronode_reset>
 8009a58:	1e03      	subs	r3, r0, #0
 8009a5a:	d005      	beq.n	8009a68 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <my_astro_handle_evt+0x74>)
 8009a5e:	0018      	movs	r0, r3
 8009a60:	f7f9 fb3c 	bl	80030dc <send_debug_logs>
	  astronode_send_res_cr () ;
 8009a64:	f7fe ff24 	bl	80088b0 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 8009a68:	f7ff fafe 	bl	8009068 <is_command_available>
 8009a6c:	1e03      	subs	r3, r0, #0
 8009a6e:	d00e      	beq.n	8009a8e <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <my_astro_handle_evt+0x78>)
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7f9 fb32 	bl	80030dc <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 8009a78:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <my_astro_handle_evt+0x7c>)
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f7ff f93c 	bl	8008cf8 <astronode_send_cmd_rr>
 8009a80:	1e03      	subs	r3, r0, #0
 8009a82:	d002      	beq.n	8009a8a <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 8009a84:	4b09      	ldr	r3, [pc, #36]	; (8009aac <my_astro_handle_evt+0x80>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 8009a8a:	f7ff f8f5 	bl	8008c78 <astronode_send_cmd_cr>
	}
	return true ;
 8009a8e:	2301      	movs	r3, #1
}
 8009a90:	0018      	movs	r0, r3
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	080147c4 	.word	0x080147c4
 8009a9c:	080147f8 	.word	0x080147f8
 8009aa0:	0801483c 	.word	0x0801483c
 8009aa4:	08014878 	.word	0x08014878
 8009aa8:	20000c0c 	.word	0x20000c0c
 8009aac:	20000c0a 	.word	0x20000c0a

08009ab0 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7fe fd4f 	bl	8008564 <astronode_send_geo_wr>
}
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b002      	add	sp, #8
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 8009ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad2:	4ca5      	ldr	r4, [pc, #660]	; (8009d68 <my_gnss_acq_coordinates+0x298>)
 8009ad4:	44a5      	add	sp, r4
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 8009ada:	4ba4      	ldr	r3, [pc, #656]	; (8009d6c <my_gnss_acq_coordinates+0x29c>)
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 8009ae2:	4ba3      	ldr	r3, [pc, #652]	; (8009d70 <my_gnss_acq_coordinates+0x2a0>)
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 8009aea:	4ba2      	ldr	r3, [pc, #648]	; (8009d74 <my_gnss_acq_coordinates+0x2a4>)
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 8009af2:	4ba1      	ldr	r3, [pc, #644]	; (8009d78 <my_gnss_acq_coordinates+0x2a8>)
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 8009afa:	4ba0      	ldr	r3, [pc, #640]	; (8009d7c <my_gnss_acq_coordinates+0x2ac>)
 8009afc:	18fb      	adds	r3, r7, r3
 8009afe:	2200      	movs	r2, #0
 8009b00:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009b02:	4b9f      	ldr	r3, [pc, #636]	; (8009d80 <my_gnss_acq_coordinates+0x2b0>)
 8009b04:	2486      	movs	r4, #134	; 0x86
 8009b06:	00a4      	lsls	r4, r4, #2
 8009b08:	191b      	adds	r3, r3, r4
 8009b0a:	19db      	adds	r3, r3, r7
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	3304      	adds	r3, #4
 8009b12:	22f6      	movs	r2, #246	; 0xf6
 8009b14:	2100      	movs	r1, #0
 8009b16:	0018      	movs	r0, r3
 8009b18:	f002 fc44 	bl	800c3a4 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009b1c:	4b99      	ldr	r3, [pc, #612]	; (8009d84 <my_gnss_acq_coordinates+0x2b4>)
 8009b1e:	191b      	adds	r3, r3, r4
 8009b20:	19db      	adds	r3, r3, r7
 8009b22:	2200      	movs	r2, #0
 8009b24:	601a      	str	r2, [r3, #0]
 8009b26:	3304      	adds	r3, #4
 8009b28:	22f6      	movs	r2, #246	; 0xf6
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f002 fc39 	bl	800c3a4 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009b32:	4b95      	ldr	r3, [pc, #596]	; (8009d88 <my_gnss_acq_coordinates+0x2b8>)
 8009b34:	2284      	movs	r2, #132	; 0x84
 8009b36:	0092      	lsls	r2, r2, #2
 8009b38:	18ba      	adds	r2, r7, r2
 8009b3a:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009b3c:	4b93      	ldr	r3, [pc, #588]	; (8009d8c <my_gnss_acq_coordinates+0x2bc>)
 8009b3e:	2283      	movs	r2, #131	; 0x83
 8009b40:	0092      	lsls	r2, r2, #2
 8009b42:	18ba      	adds	r2, r7, r2
 8009b44:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 8009b46:	4b92      	ldr	r3, [pc, #584]	; (8009d90 <my_gnss_acq_coordinates+0x2c0>)
 8009b48:	2282      	movs	r2, #130	; 0x82
 8009b4a:	0092      	lsls	r2, r2, #2
 8009b4c:	18ba      	adds	r2, r7, r2
 8009b4e:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009b50:	4b90      	ldr	r3, [pc, #576]	; (8009d94 <my_gnss_acq_coordinates+0x2c4>)
 8009b52:	2281      	movs	r2, #129	; 0x81
 8009b54:	0092      	lsls	r2, r2, #2
 8009b56:	18ba      	adds	r2, r7, r2
 8009b58:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2230      	movs	r2, #48	; 0x30
 8009b5e:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	4b8c      	ldr	r3, [pc, #560]	; (8009d98 <my_gnss_acq_coordinates+0x2c8>)
 8009b66:	608a      	str	r2, [r1, #8]
 8009b68:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 8009b6a:	f7f9 ffc5 	bl	8003af8 <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009b6e:	e0c4      	b.n	8009cfa <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009b70:	4c80      	ldr	r4, [pc, #512]	; (8009d74 <my_gnss_acq_coordinates+0x2a4>)
 8009b72:	193b      	adds	r3, r7, r4
 8009b74:	2101      	movs	r1, #1
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7f9 ff12 	bl	80039a0 <my_gnss_receive_byte>
		if ( rx_byte )
 8009b7c:	0020      	movs	r0, r4
 8009b7e:	183b      	adds	r3, r7, r0
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	4c7b      	ldr	r4, [pc, #492]	; (8009d70 <my_gnss_acq_coordinates+0x2a0>)
 8009b84:	193a      	adds	r2, r7, r4
 8009b86:	1939      	adds	r1, r7, r4
 8009b88:	7809      	ldrb	r1, [r1, #0]
 8009b8a:	7011      	strb	r1, [r2, #0]
 8009b8c:	4d7b      	ldr	r5, [pc, #492]	; (8009d7c <my_gnss_acq_coordinates+0x2ac>)
 8009b8e:	197a      	adds	r2, r7, r5
 8009b90:	1979      	adds	r1, r7, r5
 8009b92:	7809      	ldrb	r1, [r1, #0]
 8009b94:	7011      	strb	r1, [r2, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d100      	bne.n	8009b9c <my_gnss_acq_coordinates+0xcc>
 8009b9a:	e0ae      	b.n	8009cfa <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 8009b9c:	4b76      	ldr	r3, [pc, #472]	; (8009d78 <my_gnss_acq_coordinates+0x2a8>)
 8009b9e:	18fa      	adds	r2, r7, r3
 8009ba0:	2684      	movs	r6, #132	; 0x84
 8009ba2:	0076      	lsls	r6, r6, #1
 8009ba4:	19b9      	adds	r1, r7, r6
 8009ba6:	183b      	adds	r3, r7, r0
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 fbf9 	bl	800a3a0 <my_nmea_message>
 8009bae:	0001      	movs	r1, r0
 8009bb0:	193b      	adds	r3, r7, r4
 8009bb2:	193a      	adds	r2, r7, r4
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	197b      	adds	r3, r7, r5
 8009bba:	197a      	adds	r2, r7, r5
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	701a      	strb	r2, [r3, #0]
 8009bc0:	2902      	cmp	r1, #2
 8009bc2:	d000      	beq.n	8009bc6 <my_gnss_acq_coordinates+0xf6>
 8009bc4:	e099      	b.n	8009cfa <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 8009bc6:	19bb      	adds	r3, r7, r6
 8009bc8:	0018      	movs	r0, r3
 8009bca:	f000 fca9 	bl	800a520 <is_my_nmea_checksum_ok>
 8009bce:	0003      	movs	r3, r0
 8009bd0:	0019      	movs	r1, r3
 8009bd2:	193b      	adds	r3, r7, r4
 8009bd4:	193a      	adds	r2, r7, r4
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	197b      	adds	r3, r7, r5
 8009bdc:	197a      	adds	r2, r7, r5
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d100      	bne.n	8009be8 <my_gnss_acq_coordinates+0x118>
 8009be6:	e088      	b.n	8009cfa <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 8009be8:	193b      	adds	r3, r7, r4
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2201      	movs	r2, #1
 8009bee:	4053      	eors	r3, r2
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d015      	beq.n	8009c22 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	7c1b      	ldrb	r3, [r3, #16]
 8009bfa:	2b33      	cmp	r3, #51	; 0x33
 8009bfc:	d111      	bne.n	8009c22 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009bfe:	2383      	movs	r3, #131	; 0x83
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	18fb      	adds	r3, r7, r3
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	19bb      	adds	r3, r7, r6
 8009c08:	0011      	movs	r1, r2
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f002 fc3f 	bl	800c48e <strstr>
 8009c10:	1e03      	subs	r3, r0, #0
 8009c12:	d006      	beq.n	8009c22 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009c14:	19bb      	adds	r3, r7, r6
 8009c16:	0018      	movs	r0, r3
 8009c18:	f000 f9a6 	bl	8009f68 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009c1c:	193b      	adds	r3, r7, r4
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009c22:	2384      	movs	r3, #132	; 0x84
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	2484      	movs	r4, #132	; 0x84
 8009c2c:	0064      	lsls	r4, r4, #1
 8009c2e:	193b      	adds	r3, r7, r4
 8009c30:	0011      	movs	r1, r2
 8009c32:	0018      	movs	r0, r3
 8009c34:	f002 fc2b 	bl	800c48e <strstr>
 8009c38:	1e03      	subs	r3, r0, #0
 8009c3a:	d012      	beq.n	8009c62 <my_gnss_acq_coordinates+0x192>
 8009c3c:	4d4f      	ldr	r5, [pc, #316]	; (8009d7c <my_gnss_acq_coordinates+0x2ac>)
 8009c3e:	197b      	adds	r3, r7, r5
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d80d      	bhi.n	8009c62 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 8009c46:	4b55      	ldr	r3, [pc, #340]	; (8009d9c <my_gnss_acq_coordinates+0x2cc>)
 8009c48:	881a      	ldrh	r2, [r3, #0]
 8009c4a:	4b55      	ldr	r3, [pc, #340]	; (8009da0 <my_gnss_acq_coordinates+0x2d0>)
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d85b      	bhi.n	8009d0a <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009c52:	193b      	adds	r3, r7, r4
 8009c54:	0018      	movs	r0, r3
 8009c56:	f000 fe09 	bl	800a86c <my_nmea_get_gsv_tns>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	001a      	movs	r2, r3
 8009c5e:	197b      	adds	r3, r7, r5
 8009c60:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 8009c62:	2382      	movs	r3, #130	; 0x82
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	18fb      	adds	r3, r7, r3
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	2484      	movs	r4, #132	; 0x84
 8009c6c:	0064      	lsls	r4, r4, #1
 8009c6e:	193b      	adds	r3, r7, r4
 8009c70:	0011      	movs	r1, r2
 8009c72:	0018      	movs	r0, r3
 8009c74:	f002 fc0b 	bl	800c48e <strstr>
 8009c78:	1e03      	subs	r3, r0, #0
 8009c7a:	d010      	beq.n	8009c9e <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009c7c:	193b      	adds	r3, r7, r4
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f000 fbfa 	bl	800a478 <get_my_nmea_gngsa_fixed_mode_s>
 8009c84:	0003      	movs	r3, r0
 8009c86:	001a      	movs	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009c8c:	193b      	adds	r3, r7, r4
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f000 fbfd 	bl	800a48e <get_my_nmea_gngsa_pdop_d>
 8009c94:	0002      	movs	r2, r0
 8009c96:	000b      	movs	r3, r1
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	608a      	str	r2, [r1, #8]
 8009c9c:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 8009c9e:	2381      	movs	r3, #129	; 0x81
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	18fb      	adds	r3, r7, r3
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	2384      	movs	r3, #132	; 0x84
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	0011      	movs	r1, r2
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f002 fbed 	bl	800c48e <strstr>
 8009cb4:	1e03      	subs	r3, r0, #0
 8009cb6:	d020      	beq.n	8009cfa <my_gnss_acq_coordinates+0x22a>
 8009cb8:	4b2d      	ldr	r3, [pc, #180]	; (8009d70 <my_gnss_acq_coordinates+0x2a0>)
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	7c1b      	ldrb	r3, [r3, #16]
 8009cc6:	2b33      	cmp	r3, #51	; 0x33
 8009cc8:	d121      	bne.n	8009d0e <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 8009cca:	4b2e      	ldr	r3, [pc, #184]	; (8009d84 <my_gnss_acq_coordinates+0x2b4>)
 8009ccc:	2186      	movs	r1, #134	; 0x86
 8009cce:	0089      	lsls	r1, r1, #2
 8009cd0:	185b      	adds	r3, r3, r1
 8009cd2:	19da      	adds	r2, r3, r7
 8009cd4:	4b2a      	ldr	r3, [pc, #168]	; (8009d80 <my_gnss_acq_coordinates+0x2b0>)
 8009cd6:	185b      	adds	r3, r3, r1
 8009cd8:	19db      	adds	r3, r3, r7
 8009cda:	0010      	movs	r0, r2
 8009cdc:	0019      	movs	r1, r3
 8009cde:	23fa      	movs	r3, #250	; 0xfa
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	f002 fc8c 	bl	800c5fe <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6898      	ldr	r0, [r3, #8]
 8009cea:	68d9      	ldr	r1, [r3, #12]
 8009cec:	4b2d      	ldr	r3, [pc, #180]	; (8009da4 <my_gnss_acq_coordinates+0x2d4>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f7f6 fbb9 	bl	8000468 <__aeabi_dcmple>
 8009cf6:	1e03      	subs	r3, r0, #0
 8009cf8:	d10b      	bne.n	8009d12 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 8009cfa:	4b28      	ldr	r3, [pc, #160]	; (8009d9c <my_gnss_acq_coordinates+0x2cc>)
 8009cfc:	881a      	ldrh	r2, [r3, #0]
 8009cfe:	4b2a      	ldr	r3, [pc, #168]	; (8009da8 <my_gnss_acq_coordinates+0x2d8>)
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d200      	bcs.n	8009d08 <my_gnss_acq_coordinates+0x238>
 8009d06:	e733      	b.n	8009b70 <my_gnss_acq_coordinates+0xa0>
 8009d08:	e004      	b.n	8009d14 <my_gnss_acq_coordinates+0x244>
							break ;
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	e002      	b.n	8009d14 <my_gnss_acq_coordinates+0x244>
							break ;
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	e000      	b.n	8009d14 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009d12:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009d14:	f7f9 ff00 	bl	8003b18 <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 8009d18:	4b1a      	ldr	r3, [pc, #104]	; (8009d84 <my_gnss_acq_coordinates+0x2b4>)
 8009d1a:	2286      	movs	r2, #134	; 0x86
 8009d1c:	0092      	lsls	r2, r2, #2
 8009d1e:	189b      	adds	r3, r3, r2
 8009d20:	19db      	adds	r3, r3, r7
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	18fb      	adds	r3, r7, r3
 8009d2e:	0011      	movs	r1, r2
 8009d30:	0018      	movs	r0, r3
 8009d32:	f000 fcb1 	bl	800a698 <my_nmea_get_gngll_coordinates>
		r = true ;
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <my_gnss_acq_coordinates+0x29c>)
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009d3e:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <my_gnss_acq_coordinates+0x2cc>)
 8009d40:	881a      	ldrh	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	4a14      	ldr	r2, [pc, #80]	; (8009d9c <my_gnss_acq_coordinates+0x2cc>)
 8009d4c:	8812      	ldrh	r2, [r2, #0]
 8009d4e:	189a      	adds	r2, r3, r2
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	615a      	str	r2, [r3, #20]
	return r ;
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <my_gnss_acq_coordinates+0x29c>)
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	781b      	ldrb	r3, [r3, #0]
}
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	2387      	movs	r3, #135	; 0x87
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	449d      	add	sp, r3
 8009d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	fffffde4 	.word	0xfffffde4
 8009d6c:	00000217 	.word	0x00000217
 8009d70:	00000216 	.word	0x00000216
 8009d74:	00000203 	.word	0x00000203
 8009d78:	00000202 	.word	0x00000202
 8009d7c:	00000215 	.word	0x00000215
 8009d80:	fffffef0 	.word	0xfffffef0
 8009d84:	fffffdf4 	.word	0xfffffdf4
 8009d88:	080148b8 	.word	0x080148b8
 8009d8c:	080148c0 	.word	0x080148c0
 8009d90:	080148c8 	.word	0x080148c8
 8009d94:	080148d0 	.word	0x080148d0
 8009d98:	408f4000 	.word	0x408f4000
 8009d9c:	20000c34 	.word	0x20000c34
 8009da0:	2000001c 	.word	0x2000001c
 8009da4:	20000020 	.word	0x20000020
 8009da8:	2000001a 	.word	0x2000001a

08009dac <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <my_rtc_get_dt+0x2c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7fc f939 	bl	8006034 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	4b04      	ldr	r3, [pc, #16]	; (8009dd8 <my_rtc_get_dt+0x2c>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f7fc f845 	bl	8005e58 <HAL_RTC_GetTime>
}
 8009dce:	46c0      	nop			; (mov r8, r8)
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	b002      	add	sp, #8
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	200006f4 	.word	0x200006f4

08009ddc <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8009ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dde:	b08d      	sub	sp, #52	; 0x34
 8009de0:	af04      	add	r7, sp, #16
 8009de2:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8009de4:	2508      	movs	r5, #8
 8009de6:	1979      	adds	r1, r7, r5
 8009de8:	4b1b      	ldr	r3, [pc, #108]	; (8009e58 <my_rtc_get_dt_s+0x7c>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	0018      	movs	r0, r3
 8009dee:	f7fc f833 	bl	8005e58 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8009df2:	241c      	movs	r4, #28
 8009df4:	1939      	adds	r1, r7, r4
 8009df6:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <my_rtc_get_dt_s+0x7c>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	f7fc f91a 	bl	8006034 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009e00:	0021      	movs	r1, r4
 8009e02:	187b      	adds	r3, r7, r1
 8009e04:	78db      	ldrb	r3, [r3, #3]
 8009e06:	22fa      	movs	r2, #250	; 0xfa
 8009e08:	00d2      	lsls	r2, r2, #3
 8009e0a:	189a      	adds	r2, r3, r2
 8009e0c:	187b      	adds	r3, r7, r1
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	469c      	mov	ip, r3
 8009e12:	187b      	adds	r3, r7, r1
 8009e14:	789b      	ldrb	r3, [r3, #2]
 8009e16:	001c      	movs	r4, r3
 8009e18:	0028      	movs	r0, r5
 8009e1a:	183b      	adds	r3, r7, r0
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	001d      	movs	r5, r3
 8009e20:	183b      	adds	r3, r7, r0
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	001e      	movs	r6, r3
 8009e26:	183b      	adds	r3, r7, r0
 8009e28:	789b      	ldrb	r3, [r3, #2]
 8009e2a:	490c      	ldr	r1, [pc, #48]	; (8009e5c <my_rtc_get_dt_s+0x80>)
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	9303      	str	r3, [sp, #12]
 8009e30:	9602      	str	r6, [sp, #8]
 8009e32:	9501      	str	r5, [sp, #4]
 8009e34:	9400      	str	r4, [sp, #0]
 8009e36:	4663      	mov	r3, ip
 8009e38:	f002 fa1e 	bl	800c278 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009e3c:	211c      	movs	r1, #28
 8009e3e:	187b      	adds	r3, r7, r1
 8009e40:	78db      	ldrb	r3, [r3, #3]
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	22fa      	movs	r2, #250	; 0xfa
 8009e46:	00d2      	lsls	r2, r2, #3
 8009e48:	4694      	mov	ip, r2
 8009e4a:	4463      	add	r3, ip
 8009e4c:	b29b      	uxth	r3, r3
}
 8009e4e:	0018      	movs	r0, r3
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b009      	add	sp, #36	; 0x24
 8009e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	200006f4 	.word	0x200006f4
 8009e5c:	08014920 	.word	0x08014920

08009e60 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e62:	b0a9      	sub	sp, #164	; 0xa4
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8009e68:	2434      	movs	r4, #52	; 0x34
 8009e6a:	193a      	adds	r2, r7, r4
 8009e6c:	2548      	movs	r5, #72	; 0x48
 8009e6e:	197b      	adds	r3, r7, r5
 8009e70:	0011      	movs	r1, r2
 8009e72:	0018      	movs	r0, r3
 8009e74:	f7ff ff9a 	bl	8009dac <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 8009e78:	2680      	movs	r6, #128	; 0x80
 8009e7a:	19bb      	adds	r3, r7, r6
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f7ff ffad 	bl	8009ddc <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009e82:	4a36      	ldr	r2, [pc, #216]	; (8009f5c <my_rtc_set_alarm+0xfc>)
 8009e84:	4936      	ldr	r1, [pc, #216]	; (8009f60 <my_rtc_set_alarm+0x100>)
 8009e86:	234c      	movs	r3, #76	; 0x4c
 8009e88:	18f8      	adds	r0, r7, r3
 8009e8a:	19bb      	adds	r3, r7, r6
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	232d      	movs	r3, #45	; 0x2d
 8009e90:	f002 f9f2 	bl	800c278 <sprintf>
	send_debug_logs ( m ) ;
 8009e94:	234c      	movs	r3, #76	; 0x4c
 8009e96:	18fb      	adds	r3, r7, r3
 8009e98:	0018      	movs	r0, r3
 8009e9a:	f7f9 f91f 	bl	80030dc <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8009e9e:	193a      	adds	r2, r7, r4
 8009ea0:	197b      	adds	r3, r7, r5
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 f90d 	bl	800a0c4 <my_conv_rtc2timestamp>
 8009eaa:	0002      	movs	r2, r0
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	2094      	movs	r0, #148	; 0x94
 8009eb2:	183a      	adds	r2, r7, r0
 8009eb4:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8009eb6:	193a      	adds	r2, r7, r4
 8009eb8:	1979      	adds	r1, r7, r5
 8009eba:	1838      	adds	r0, r7, r0
 8009ebc:	6803      	ldr	r3, [r0, #0]
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	f000 f974 	bl	800a1ac <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 8009ec4:	193b      	adds	r3, r7, r4
 8009ec6:	781a      	ldrb	r2, [r3, #0]
 8009ec8:	210c      	movs	r1, #12
 8009eca:	187b      	adds	r3, r7, r1
 8009ecc:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8009ece:	193b      	adds	r3, r7, r4
 8009ed0:	785a      	ldrb	r2, [r3, #1]
 8009ed2:	187b      	adds	r3, r7, r1
 8009ed4:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8009ed6:	193b      	adds	r3, r7, r4
 8009ed8:	789a      	ldrb	r2, [r3, #2]
 8009eda:	187b      	adds	r3, r7, r1
 8009edc:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8009ede:	0008      	movs	r0, r1
 8009ee0:	183b      	adds	r3, r7, r0
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8009ee6:	183b      	adds	r3, r7, r0
 8009ee8:	2200      	movs	r2, #0
 8009eea:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8009eec:	183b      	adds	r3, r7, r0
 8009eee:	2200      	movs	r2, #0
 8009ef0:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8009ef2:	183b      	adds	r3, r7, r0
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8009ef8:	183b      	adds	r3, r7, r0
 8009efa:	2200      	movs	r2, #0
 8009efc:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009efe:	183b      	adds	r3, r7, r0
 8009f00:	2200      	movs	r2, #0
 8009f02:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009f04:	197b      	adds	r3, r7, r5
 8009f06:	7899      	ldrb	r1, [r3, #2]
 8009f08:	183b      	adds	r3, r7, r0
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009f0e:	183b      	adds	r3, r7, r0
 8009f10:	2280      	movs	r2, #128	; 0x80
 8009f12:	0052      	lsls	r2, r2, #1
 8009f14:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009f16:	1839      	adds	r1, r7, r0
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <my_rtc_set_alarm+0x104>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	0018      	movs	r0, r3
 8009f1e:	f7fc f8d7 	bl	80060d0 <HAL_RTC_SetAlarm_IT>
 8009f22:	1e03      	subs	r3, r0, #0
 8009f24:	d114      	bne.n	8009f50 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009f26:	19ba      	adds	r2, r7, r6
 8009f28:	1939      	adds	r1, r7, r4
 8009f2a:	197b      	adds	r3, r7, r5
 8009f2c:	0018      	movs	r0, r3
 8009f2e:	f000 f9ff 	bl	800a330 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009f32:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <my_rtc_set_alarm+0xfc>)
 8009f34:	490a      	ldr	r1, [pc, #40]	; (8009f60 <my_rtc_set_alarm+0x100>)
 8009f36:	244c      	movs	r4, #76	; 0x4c
 8009f38:	1938      	adds	r0, r7, r4
 8009f3a:	19bb      	adds	r3, r7, r6
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	2341      	movs	r3, #65	; 0x41
 8009f40:	f002 f99a 	bl	800c278 <sprintf>
		send_debug_logs ( m ) ;
 8009f44:	193b      	adds	r3, r7, r4
 8009f46:	0018      	movs	r0, r3
 8009f48:	f7f9 f8c8 	bl	80030dc <send_debug_logs>
		return true ;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e000      	b.n	8009f52 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	0018      	movs	r0, r3
 8009f54:	46bd      	mov	sp, r7
 8009f56:	b027      	add	sp, #156	; 0x9c
 8009f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	08014940 	.word	0x08014940
 8009f60:	0801495c 	.word	0x0801495c
 8009f64:	200006f4 	.word	0x200006f4

08009f68 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009f68:	b5b0      	push	{r4, r5, r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009f70:	2508      	movs	r5, #8
 8009f72:	197b      	adds	r3, r7, r5
 8009f74:	1cda      	adds	r2, r3, #3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	0011      	movs	r1, r2
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f000 fcae 	bl	800a8dc <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009f80:	197b      	adds	r3, r7, r5
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	0011      	movs	r1, r2
 8009f88:	0018      	movs	r0, r3
 8009f8a:	f000 fce1 	bl	800a950 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009f8e:	197b      	adds	r3, r7, r5
 8009f90:	1c9a      	adds	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0011      	movs	r1, r2
 8009f96:	0018      	movs	r0, r3
 8009f98:	f000 fd14 	bl	800a9c4 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009f9c:	240c      	movs	r4, #12
 8009f9e:	193a      	adds	r2, r7, r4
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	0011      	movs	r1, r2
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	f000 fd47 	bl	800aa38 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009faa:	193b      	adds	r3, r7, r4
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	0011      	movs	r1, r2
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f000 fd7a 	bl	800aaac <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009fb8:	193b      	adds	r3, r7, r4
 8009fba:	1c9a      	adds	r2, r3, #2
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	0011      	movs	r1, r2
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f000 fdad 	bl	800ab20 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009fc6:	193b      	adds	r3, r7, r4
 8009fc8:	1d1a      	adds	r2, r3, #4
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	0011      	movs	r1, r2
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f000 fde0 	bl	800ab94 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009fd4:	193b      	adds	r3, r7, r4
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009fda:	193b      	adds	r3, r7, r4
 8009fdc:	2200      	movs	r2, #0
 8009fde:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f7fc fae3 	bl	80065ae <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009fe8:	1939      	adds	r1, r7, r4
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f7fb fe8a 	bl	8005d08 <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009ff4:	1979      	adds	r1, r7, r5
 8009ff6:	4b06      	ldr	r3, [pc, #24]	; (800a010 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f7fb ff88 	bl	8005f10 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800a000:	4b03      	ldr	r3, [pc, #12]	; (800a010 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800a002:	0018      	movs	r0, r3
 800a004:	f7fc fb07 	bl	8006616 <HAL_RTCEx_DisableBypassShadow>
}
 800a008:	46c0      	nop			; (mov r8, r8)
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b008      	add	sp, #32
 800a00e:	bdb0      	pop	{r4, r5, r7, pc}
 800a010:	200006f4 	.word	0x200006f4

0800a014 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2100      	movs	r1, #0
 800a020:	0018      	movs	r0, r3
 800a022:	f001 fefb 	bl	800be1c <strtod>
 800a026:	0002      	movs	r2, r0
 800a028:	000b      	movs	r3, r1
 800a02a:	60ba      	str	r2, [r7, #8]
 800a02c:	60fb      	str	r3, [r7, #12]
    return d ;
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
}
 800a032:	0010      	movs	r0, r2
 800a034:	0019      	movs	r1, r3
 800a036:	46bd      	mov	sp, r7
 800a038:	b004      	add	sp, #16
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	0008      	movs	r0, r1
 800a046:	0011      	movs	r1, r2
 800a048:	1cfb      	adds	r3, r7, #3
 800a04a:	1c02      	adds	r2, r0, #0
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	1cbb      	adds	r3, r7, #2
 800a050:	1c0a      	adds	r2, r1, #0
 800a052:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800a054:	230f      	movs	r3, #15
 800a056:	18fb      	adds	r3, r7, r3
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800a05c:	230e      	movs	r3, #14
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800a064:	e01c      	b.n	800a0a0 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800a066:	230f      	movs	r3, #15
 800a068:	18fb      	adds	r3, r7, r3
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	18d3      	adds	r3, r2, r3
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	1cfa      	adds	r2, r7, #3
 800a074:	7812      	ldrb	r2, [r2, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d105      	bne.n	800a086 <my_find_char_position+0x4a>
			p++ ;
 800a07a:	210e      	movs	r1, #14
 800a07c:	187b      	adds	r3, r7, r1
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	187b      	adds	r3, r7, r1
 800a082:	3201      	adds	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800a086:	230e      	movs	r3, #14
 800a088:	18fa      	adds	r2, r7, r3
 800a08a:	1cbb      	adds	r3, r7, #2
 800a08c:	7812      	ldrb	r2, [r2, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	429a      	cmp	r2, r3
 800a092:	d00e      	beq.n	800a0b2 <my_find_char_position+0x76>
			break ;
		i++ ;
 800a094:	210f      	movs	r1, #15
 800a096:	187b      	adds	r3, r7, r1
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	187b      	adds	r3, r7, r1
 800a09c:	3201      	adds	r2, #1
 800a09e:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800a0a0:	230f      	movs	r3, #15
 800a0a2:	18fb      	adds	r3, r7, r3
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	18d3      	adds	r3, r2, r3
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1da      	bne.n	800a066 <my_find_char_position+0x2a>
 800a0b0:	e000      	b.n	800a0b4 <my_find_char_position+0x78>
			break ;
 800a0b2:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800a0b4:	230f      	movs	r3, #15
 800a0b6:	18fb      	adds	r3, r7, r3
 800a0b8:	781b      	ldrb	r3, [r3, #0]
}
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	b004      	add	sp, #16
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	78db      	ldrb	r3, [r3, #3]
 800a0d2:	22fa      	movs	r2, #250	; 0xfa
 800a0d4:	00d2      	lsls	r2, r2, #3
 800a0d6:	4694      	mov	ip, r2
 800a0d8:	4463      	add	r3, ip
 800a0da:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	0013      	movs	r3, r2
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	189b      	adds	r3, r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	189b      	adds	r3, r3, r2
 800a0e8:	009a      	lsls	r2, r3, #2
 800a0ea:	189a      	adds	r2, r3, r2
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	492c      	ldr	r1, [pc, #176]	; (800a1a0 <my_conv_rtc2timestamp+0xdc>)
 800a0f0:	468c      	mov	ip, r1
 800a0f2:	4463      	add	r3, ip
 800a0f4:	089b      	lsrs	r3, r3, #2
 800a0f6:	18d3      	adds	r3, r2, r3
 800a0f8:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <my_conv_rtc2timestamp+0xe0>)
 800a0fa:	4694      	mov	ip, r2
 800a0fc:	4463      	add	r3, ip
 800a0fe:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a100:	2300      	movs	r3, #0
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	e00a      	b.n	800a11c <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800a106:	4a28      	ldr	r2, [pc, #160]	; (800a1a8 <my_conv_rtc2timestamp+0xe4>)
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	18d3      	adds	r3, r2, r3
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	001a      	movs	r2, r3
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	189b      	adds	r3, r3, r2
 800a114:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	3301      	adds	r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	785b      	ldrb	r3, [r3, #1]
 800a120:	3b01      	subs	r3, #1
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	429a      	cmp	r2, r3
 800a126:	dbee      	blt.n	800a106 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d908      	bls.n	800a142 <my_conv_rtc2timestamp+0x7e>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	0018      	movs	r0, r3
 800a134:	f000 f8de 	bl	800a2f4 <my_conv_is_leap_year>
 800a138:	1e03      	subs	r3, r0, #0
 800a13a:	d002      	beq.n	800a142 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	3301      	adds	r3, #1
 800a140:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	001a      	movs	r2, r3
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	18d3      	adds	r3, r2, r3
 800a14c:	3b01      	subs	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	0013      	movs	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	189b      	adds	r3, r3, r2
 800a158:	011a      	lsls	r2, r3, #4
 800a15a:	1ad2      	subs	r2, r2, r3
 800a15c:	0113      	lsls	r3, r2, #4
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	01db      	lsls	r3, r3, #7
 800a162:	0019      	movs	r1, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	001a      	movs	r2, r3
 800a16a:	0013      	movs	r3, r2
 800a16c:	011b      	lsls	r3, r3, #4
 800a16e:	1a9b      	subs	r3, r3, r2
 800a170:	011a      	lsls	r2, r3, #4
 800a172:	1ad2      	subs	r2, r2, r3
 800a174:	0113      	lsls	r3, r2, #4
 800a176:	001a      	movs	r2, r3
 800a178:	0013      	movs	r3, r2
 800a17a:	18ca      	adds	r2, r1, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	0019      	movs	r1, r3
 800a182:	000b      	movs	r3, r1
 800a184:	011b      	lsls	r3, r3, #4
 800a186:	1a5b      	subs	r3, r3, r1
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	18d3      	adds	r3, r2, r3
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	7892      	ldrb	r2, [r2, #2]
 800a190:	189b      	adds	r3, r3, r2
 800a192:	60bb      	str	r3, [r7, #8]

    return ts ;
 800a194:	68bb      	ldr	r3, [r7, #8]
}
 800a196:	0018      	movs	r0, r3
 800a198:	46bd      	mov	sp, r7
 800a19a:	b006      	add	sp, #24
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	fffff84f 	.word	0xfffff84f
 800a1a4:	fff50736 	.word	0xfff50736
 800a1a8:	08014aa0 	.word	0x08014aa0

0800a1ac <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b08b      	sub	sp, #44	; 0x2c
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	213c      	movs	r1, #60	; 0x3c
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f7f6 f843 	bl	8000248 <__aeabi_uidivmod>
 800a1c2:	000b      	movs	r3, r1
 800a1c4:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	213c      	movs	r1, #60	; 0x3c
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7f5 ffb6 	bl	800013c <__udivsi3>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	213c      	movs	r1, #60	; 0x3c
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7f6 f837 	bl	8000248 <__aeabi_uidivmod>
 800a1da:	000b      	movs	r3, r1
 800a1dc:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	22e1      	movs	r2, #225	; 0xe1
 800a1e2:	0111      	lsls	r1, r2, #4
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	f7f5 ffa9 	bl	800013c <__udivsi3>
 800a1ea:	0003      	movs	r3, r0
 800a1ec:	2118      	movs	r1, #24
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f7f6 f82a 	bl	8000248 <__aeabi_uidivmod>
 800a1f4:	000b      	movs	r3, r1
 800a1f6:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	493b      	ldr	r1, [pc, #236]	; (800a2e8 <my_conv_timestamp2rtc+0x13c>)
 800a1fc:	0018      	movs	r0, r3
 800a1fe:	f7f5 ff9d 	bl	800013c <__udivsi3>
 800a202:	0003      	movs	r3, r0
 800a204:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800a206:	4b39      	ldr	r3, [pc, #228]	; (800a2ec <my_conv_timestamp2rtc+0x140>)
 800a208:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a20a:	e00d      	b.n	800a228 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	0018      	movs	r0, r3
 800a210:	f000 f870 	bl	800a2f4 <my_conv_is_leap_year>
 800a214:	0003      	movs	r3, r0
 800a216:	336e      	adds	r3, #110	; 0x6e
 800a218:	33ff      	adds	r3, #255	; 0xff
 800a21a:	001a      	movs	r2, r3
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	1a9b      	subs	r3, r3, r2
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	3301      	adds	r3, #1
 800a226:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	0018      	movs	r0, r3
 800a22c:	f000 f862 	bl	800a2f4 <my_conv_is_leap_year>
 800a230:	0003      	movs	r3, r0
 800a232:	336e      	adds	r3, #110	; 0x6e
 800a234:	33ff      	adds	r3, #255	; 0xff
 800a236:	001a      	movs	r2, r3
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d2e6      	bcs.n	800a20c <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800a23e:	2300      	movs	r3, #0
 800a240:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a242:	e018      	b.n	800a276 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800a244:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <my_conv_timestamp2rtc+0x144>)
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	0052      	lsls	r2, r2, #1
 800a24a:	5ad3      	ldrh	r3, [r2, r3]
 800a24c:	001c      	movs	r4, r3
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d107      	bne.n	800a264 <my_conv_timestamp2rtc+0xb8>
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	0018      	movs	r0, r3
 800a258:	f000 f84c 	bl	800a2f4 <my_conv_is_leap_year>
 800a25c:	1e03      	subs	r3, r0, #0
 800a25e:	d001      	beq.n	800a264 <my_conv_timestamp2rtc+0xb8>
 800a260:	2301      	movs	r3, #1
 800a262:	e000      	b.n	800a266 <my_conv_timestamp2rtc+0xba>
 800a264:	2300      	movs	r3, #0
 800a266:	191b      	adds	r3, r3, r4
 800a268:	001a      	movs	r2, r3
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1a9b      	subs	r3, r3, r2
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	3301      	adds	r3, #1
 800a274:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800a276:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <my_conv_timestamp2rtc+0x144>)
 800a278:	69fa      	ldr	r2, [r7, #28]
 800a27a:	0052      	lsls	r2, r2, #1
 800a27c:	5ad3      	ldrh	r3, [r2, r3]
 800a27e:	001c      	movs	r4, r3
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d107      	bne.n	800a296 <my_conv_timestamp2rtc+0xea>
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	0018      	movs	r0, r3
 800a28a:	f000 f833 	bl	800a2f4 <my_conv_is_leap_year>
 800a28e:	1e03      	subs	r3, r0, #0
 800a290:	d001      	beq.n	800a296 <my_conv_timestamp2rtc+0xea>
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <my_conv_timestamp2rtc+0xec>
 800a296:	2300      	movs	r3, #0
 800a298:	191b      	adds	r3, r3, r4
 800a29a:	001a      	movs	r2, r3
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d2d0      	bcs.n	800a244 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	3330      	adds	r3, #48	; 0x30
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b2da      	uxtb	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	3301      	adds	r3, #1
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	709a      	strb	r2, [r3, #2]
}
 800a2de:	46c0      	nop			; (mov r8, r8)
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	b00b      	add	sp, #44	; 0x2c
 800a2e4:	bd90      	pop	{r4, r7, pc}
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	00015180 	.word	0x00015180
 800a2ec:	000007b2 	.word	0x000007b2
 800a2f0:	08014aac 	.word	0x08014aac

0800a2f4 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2203      	movs	r2, #3
 800a300:	4013      	ands	r3, r2
 800a302:	d106      	bne.n	800a312 <my_conv_is_leap_year+0x1e>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2164      	movs	r1, #100	; 0x64
 800a308:	0018      	movs	r0, r3
 800a30a:	f7f6 f887 	bl	800041c <__aeabi_idivmod>
 800a30e:	1e0b      	subs	r3, r1, #0
 800a310:	d107      	bne.n	800a322 <my_conv_is_leap_year+0x2e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	22c8      	movs	r2, #200	; 0xc8
 800a316:	0051      	lsls	r1, r2, #1
 800a318:	0018      	movs	r0, r3
 800a31a:	f7f6 f87f 	bl	800041c <__aeabi_idivmod>
 800a31e:	1e0b      	subs	r3, r1, #0
 800a320:	d101      	bne.n	800a326 <my_conv_is_leap_year+0x32>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <my_conv_is_leap_year+0x34>
 800a326:	2300      	movs	r3, #0
}
 800a328:	0018      	movs	r0, r3
 800a32a:	46bd      	mov	sp, r7
 800a32c:	b002      	add	sp, #8
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a332:	b089      	sub	sp, #36	; 0x24
 800a334:	af04      	add	r7, sp, #16
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	78db      	ldrb	r3, [r3, #3]
 800a340:	22fa      	movs	r2, #250	; 0xfa
 800a342:	00d2      	lsls	r2, r2, #3
 800a344:	189a      	adds	r2, r3, r2
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	469c      	mov	ip, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	789b      	ldrb	r3, [r3, #2]
 800a350:	001c      	movs	r4, r3
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	001d      	movs	r5, r3
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	001e      	movs	r6, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	789b      	ldrb	r3, [r3, #2]
 800a362:	4906      	ldr	r1, [pc, #24]	; (800a37c <my_conv_dt_2_dts+0x4c>)
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	9602      	str	r6, [sp, #8]
 800a36a:	9501      	str	r5, [sp, #4]
 800a36c:	9400      	str	r4, [sp, #0]
 800a36e:	4663      	mov	r3, ip
 800a370:	f001 ff82 	bl	800c278 <sprintf>
}
 800a374:	46c0      	nop			; (mov r8, r8)
 800a376:	46bd      	mov	sp, r7
 800a378:	b005      	add	sp, #20
 800a37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a37c:	08014968 	.word	0x08014968

0800a380 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800a388:	230c      	movs	r3, #12
 800a38a:	18f9      	adds	r1, r7, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	220a      	movs	r2, #10
 800a390:	0018      	movs	r0, r3
 800a392:	f001 fe6d 	bl	800c070 <strtoul>
 800a396:	0003      	movs	r3, r0
}
 800a398:	0018      	movs	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b24      	cmp	r3, #36	; 0x24
 800a3b2:	d117      	bne.n	800a3e4 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	b2d1      	uxtb	r1, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	7011      	strb	r1, [r2, #0]
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	189b      	adds	r3, r3, r2
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	7812      	ldrb	r2, [r2, #0]
 800a3d0:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	001a      	movs	r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	189b      	adds	r3, r3, r2
 800a3dc:	2200      	movs	r2, #0
 800a3de:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e045      	b.n	800a470 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b1f      	cmp	r3, #31
 800a3ea:	d907      	bls.n	800a3fc <my_nmea_message+0x5c>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	2b7e      	cmp	r3, #126	; 0x7e
 800a3f2:	d803      	bhi.n	800a3fc <my_nmea_message+0x5c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <my_nmea_message+0x64>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b0d      	cmp	r3, #13
 800a402:	d114      	bne.n	800a42e <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	b2d1      	uxtb	r1, r2
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	7011      	strb	r1, [r2, #0]
 800a410:	001a      	movs	r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	189b      	adds	r3, r3, r2
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	7812      	ldrb	r2, [r2, #0]
 800a41a:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	001a      	movs	r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	189b      	adds	r3, r3, r2
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e020      	b.n	800a470 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	2b0a      	cmp	r3, #10
 800a434:	d11a      	bne.n	800a46c <my_nmea_message+0xcc>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d916      	bls.n	800a46c <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	3b01      	subs	r3, #1
 800a444:	b2da      	uxtb	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	001a      	movs	r2, r3
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	189b      	adds	r3, r3, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b0d      	cmp	r3, #13
 800a458:	d108      	bne.n	800a46c <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	001a      	movs	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	189b      	adds	r3, r3, r2
 800a464:	2200      	movs	r2, #0
 800a466:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800a468:	2302      	movs	r3, #2
 800a46a:	e001      	b.n	800a470 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800a46c:	2301      	movs	r3, #1
 800a46e:	425b      	negs	r3, r3
}
 800a470:	0018      	movs	r0, r3
 800a472:	46bd      	mov	sp, r7
 800a474:	b004      	add	sp, #16
 800a476:	bd80      	pop	{r7, pc}

0800a478 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3309      	adds	r3, #9
 800a484:	781b      	ldrb	r3, [r3, #0]
}
 800a486:	0018      	movs	r0, r3
 800a488:	46bd      	mov	sp, r7
 800a48a:	b002      	add	sp, #8
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800a48e:	b5b0      	push	{r4, r5, r7, lr}
 800a490:	b086      	sub	sp, #24
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	220f      	movs	r2, #15
 800a49a:	212c      	movs	r1, #44	; 0x2c
 800a49c:	0018      	movs	r0, r3
 800a49e:	f7ff fdcd 	bl	800a03c <my_find_char_position>
 800a4a2:	0003      	movs	r3, r0
 800a4a4:	001a      	movs	r2, r3
 800a4a6:	2517      	movs	r5, #23
 800a4a8:	197b      	adds	r3, r7, r5
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2210      	movs	r2, #16
 800a4b2:	212c      	movs	r1, #44	; 0x2c
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f7ff fdc1 	bl	800a03c <my_find_char_position>
 800a4ba:	0003      	movs	r3, r0
 800a4bc:	0019      	movs	r1, r3
 800a4be:	2416      	movs	r4, #22
 800a4c0:	193b      	adds	r3, r7, r4
 800a4c2:	197a      	adds	r2, r7, r5
 800a4c4:	7812      	ldrb	r2, [r2, #0]
 800a4c6:	1a8a      	subs	r2, r1, r2
 800a4c8:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800a4ca:	193b      	adds	r3, r7, r4
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f000 fc41 	bl	800ad58 <malloc>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800a4da:	197b      	adds	r3, r7, r5
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	18d1      	adds	r1, r2, r3
 800a4e2:	193b      	adds	r3, r7, r4
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f001 ff82 	bl	800c3f2 <strncpy>
	pdop_s[pdop_length] = '\0';
 800a4ee:	193b      	adds	r3, r7, r4
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	18d3      	adds	r3, r2, r3
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f7ff fd89 	bl	800a014 <my_string2double_conv>
 800a502:	0002      	movs	r2, r0
 800a504:	000b      	movs	r3, r1
 800a506:	60ba      	str	r2, [r7, #8]
 800a508:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	0018      	movs	r0, r3
 800a50e:	f000 fc2d 	bl	800ad6c <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	68fb      	ldr	r3, [r7, #12]
}
 800a516:	0010      	movs	r0, r2
 800a518:	0019      	movs	r1, r3
 800a51a:	46bd      	mov	sp, r7
 800a51c:	b006      	add	sp, #24
 800a51e:	bdb0      	pop	{r4, r5, r7, pc}

0800a520 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a520:	b590      	push	{r4, r7, lr}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a528:	230f      	movs	r3, #15
 800a52a:	18fb      	adds	r3, r7, r3
 800a52c:	2200      	movs	r2, #0
 800a52e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a530:	230e      	movs	r3, #14
 800a532:	18fb      	adds	r3, r7, r3
 800a534:	2201      	movs	r2, #1
 800a536:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a538:	e00f      	b.n	800a55a <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a53a:	220e      	movs	r2, #14
 800a53c:	18bb      	adds	r3, r7, r2
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	18ba      	adds	r2, r7, r2
 800a542:	1c59      	adds	r1, r3, #1
 800a544:	7011      	strb	r1, [r2, #0]
 800a546:	001a      	movs	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	189b      	adds	r3, r3, r2
 800a54c:	7819      	ldrb	r1, [r3, #0]
 800a54e:	220f      	movs	r2, #15
 800a550:	18bb      	adds	r3, r7, r2
 800a552:	18ba      	adds	r2, r7, r2
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	404a      	eors	r2, r1
 800a558:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a55a:	210e      	movs	r1, #14
 800a55c:	187b      	adds	r3, r7, r1
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	18d3      	adds	r3, r2, r3
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b2a      	cmp	r3, #42	; 0x2a
 800a568:	d00a      	beq.n	800a580 <is_my_nmea_checksum_ok+0x60>
 800a56a:	187b      	adds	r3, r7, r1
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	18d3      	adds	r3, r2, r3
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <is_my_nmea_checksum_ok+0x60>
 800a578:	187b      	adds	r3, r7, r1
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1dc      	bne.n	800a53a <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a580:	230f      	movs	r3, #15
 800a582:	18fb      	adds	r3, r7, r3
 800a584:	781c      	ldrb	r4, [r3, #0]
 800a586:	210e      	movs	r1, #14
 800a588:	187b      	adds	r3, r7, r1
 800a58a:	187a      	adds	r2, r7, r1
 800a58c:	7812      	ldrb	r2, [r2, #0]
 800a58e:	3201      	adds	r2, #1
 800a590:	701a      	strb	r2, [r3, #0]
 800a592:	187b      	adds	r3, r7, r1
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	18d3      	adds	r3, r2, r3
 800a59a:	2210      	movs	r2, #16
 800a59c:	2100      	movs	r1, #0
 800a59e:	0018      	movs	r0, r3
 800a5a0:	f001 fcd4 	bl	800bf4c <strtol>
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	1ae3      	subs	r3, r4, r3
 800a5a8:	425a      	negs	r2, r3
 800a5aa:	4153      	adcs	r3, r2
 800a5ac:	b2db      	uxtb	r3, r3
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	b005      	add	sp, #20
 800a5b4:	bd90      	pop	{r4, r7, pc}
	...

0800a5b8 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a5b8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	000a      	movs	r2, r1
 800a5c2:	1cfb      	adds	r3, r7, #3
 800a5c4:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	18fa      	adds	r2, r7, r3
 800a5ca:	492f      	ldr	r1, [pc, #188]	; (800a688 <nmea2decimal+0xd0>)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f001 fe72 	bl	800c2b8 <sscanf>
    min = deg / 100 ;
 800a5d4:	68b8      	ldr	r0, [r7, #8]
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	4b2c      	ldr	r3, [pc, #176]	; (800a68c <nmea2decimal+0xd4>)
 800a5dc:	f7f6 fc4c 	bl	8000e78 <__aeabi_ddiv>
 800a5e0:	0002      	movs	r2, r0
 800a5e2:	000b      	movs	r3, r1
 800a5e4:	613a      	str	r2, [r7, #16]
 800a5e6:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a5e8:	6938      	ldr	r0, [r7, #16]
 800a5ea:	6979      	ldr	r1, [r7, #20]
 800a5ec:	f7f7 fea0 	bl	8002330 <__aeabi_d2iz>
 800a5f0:	0003      	movs	r3, r0
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7f7 fed2 	bl	800239c <__aeabi_i2d>
 800a5f8:	0002      	movs	r2, r0
 800a5fa:	000b      	movs	r3, r1
 800a5fc:	60ba      	str	r2, [r7, #8]
 800a5fe:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6938      	ldr	r0, [r7, #16]
 800a606:	6979      	ldr	r1, [r7, #20]
 800a608:	f7f7 faf2 	bl	8001bf0 <__aeabi_dsub>
 800a60c:	0002      	movs	r2, r0
 800a60e:	000b      	movs	r3, r1
 800a610:	0010      	movs	r0, r2
 800a612:	0019      	movs	r1, r3
 800a614:	2200      	movs	r2, #0
 800a616:	4b1e      	ldr	r3, [pc, #120]	; (800a690 <nmea2decimal+0xd8>)
 800a618:	f7f7 f828 	bl	800166c <__aeabi_dmul>
 800a61c:	0002      	movs	r2, r0
 800a61e:	000b      	movs	r3, r1
 800a620:	613a      	str	r2, [r7, #16]
 800a622:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a624:	2200      	movs	r2, #0
 800a626:	4b1b      	ldr	r3, [pc, #108]	; (800a694 <nmea2decimal+0xdc>)
 800a628:	6938      	ldr	r0, [r7, #16]
 800a62a:	6979      	ldr	r1, [r7, #20]
 800a62c:	f7f6 fc24 	bl	8000e78 <__aeabi_ddiv>
 800a630:	0002      	movs	r2, r0
 800a632:	000b      	movs	r3, r1
 800a634:	613a      	str	r2, [r7, #16]
 800a636:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a638:	1cfb      	adds	r3, r7, #3
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b53      	cmp	r3, #83	; 0x53
 800a63e:	d003      	beq.n	800a648 <nmea2decimal+0x90>
 800a640:	1cfb      	adds	r3, r7, #3
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b57      	cmp	r3, #87	; 0x57
 800a646:	d10e      	bne.n	800a666 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a648:	68b8      	ldr	r0, [r7, #8]
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f7f6 f8b2 	bl	80007b8 <__aeabi_dadd>
 800a654:	0002      	movs	r2, r0
 800a656:	000b      	movs	r3, r1
 800a658:	0011      	movs	r1, r2
 800a65a:	000c      	movs	r4, r1
 800a65c:	2180      	movs	r1, #128	; 0x80
 800a65e:	0609      	lsls	r1, r1, #24
 800a660:	4059      	eors	r1, r3
 800a662:	000d      	movs	r5, r1
 800a664:	e009      	b.n	800a67a <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a666:	68b8      	ldr	r0, [r7, #8]
 800a668:	68f9      	ldr	r1, [r7, #12]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f7f6 f8a3 	bl	80007b8 <__aeabi_dadd>
 800a672:	0002      	movs	r2, r0
 800a674:	000b      	movs	r3, r1
 800a676:	0014      	movs	r4, r2
 800a678:	001d      	movs	r5, r3
}
 800a67a:	0022      	movs	r2, r4
 800a67c:	002b      	movs	r3, r5
 800a67e:	0010      	movs	r0, r2
 800a680:	0019      	movs	r1, r3
 800a682:	46bd      	mov	sp, r7
 800a684:	b006      	add	sp, #24
 800a686:	bdb0      	pop	{r4, r5, r7, pc}
 800a688:	08014988 	.word	0x08014988
 800a68c:	40590000 	.word	0x40590000
 800a690:	40240000 	.word	0x40240000
 800a694:	40180000 	.word	0x40180000

0800a698 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69a:	b08d      	sub	sp, #52	; 0x34
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	212c      	movs	r1, #44	; 0x2c
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f7ff fcc7 	bl	800a03c <my_find_char_position>
 800a6ae:	0003      	movs	r3, r0
 800a6b0:	001a      	movs	r2, r3
 800a6b2:	252f      	movs	r5, #47	; 0x2f
 800a6b4:	197b      	adds	r3, r7, r5
 800a6b6:	3201      	adds	r2, #1
 800a6b8:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	212c      	movs	r1, #44	; 0x2c
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f7ff fcbb 	bl	800a03c <my_find_char_position>
 800a6c6:	0003      	movs	r3, r0
 800a6c8:	0019      	movs	r1, r3
 800a6ca:	242e      	movs	r4, #46	; 0x2e
 800a6cc:	193b      	adds	r3, r7, r4
 800a6ce:	197a      	adds	r2, r7, r5
 800a6d0:	7812      	ldrb	r2, [r2, #0]
 800a6d2:	1a8a      	subs	r2, r1, r2
 800a6d4:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a6d6:	193b      	adds	r3, r7, r4
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	0018      	movs	r0, r3
 800a6de:	f000 fb3b 	bl	800ad58 <malloc>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a6e6:	197b      	adds	r3, r7, r5
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	18d1      	adds	r1, r2, r3
 800a6ee:	193b      	adds	r3, r7, r4
 800a6f0:	781a      	ldrb	r2, [r3, #0]
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f001 fe7c 	bl	800c3f2 <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a6fa:	193b      	adds	r3, r7, r4
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a700:	18d3      	adds	r3, r2, r3
 800a702:	2200      	movs	r2, #0
 800a704:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a706:	197b      	adds	r3, r7, r5
 800a708:	781a      	ldrb	r2, [r3, #0]
 800a70a:	193b      	adds	r3, r7, r4
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	18d3      	adds	r3, r2, r3
 800a710:	3301      	adds	r3, #1
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	18d2      	adds	r2, r2, r3
 800a716:	2627      	movs	r6, #39	; 0x27
 800a718:	19bb      	adds	r3, r7, r6
 800a71a:	7812      	ldrb	r2, [r2, #0]
 800a71c:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a71e:	19bb      	adds	r3, r7, r6
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	0011      	movs	r1, r2
 800a726:	0018      	movs	r0, r3
 800a728:	f7ff ff46 	bl	800a5b8 <nmea2decimal>
 800a72c:	0002      	movs	r2, r0
 800a72e:	000b      	movs	r3, r1
 800a730:	61ba      	str	r2, [r7, #24]
 800a732:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a736:	0018      	movs	r0, r3
 800a738:	f000 fb18 	bl	800ad6c <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a73c:	2200      	movs	r2, #0
 800a73e:	4b49      	ldr	r3, [pc, #292]	; (800a864 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a740:	69b8      	ldr	r0, [r7, #24]
 800a742:	69f9      	ldr	r1, [r7, #28]
 800a744:	f7f6 ff92 	bl	800166c <__aeabi_dmul>
 800a748:	0002      	movs	r2, r0
 800a74a:	000b      	movs	r3, r1
 800a74c:	0010      	movs	r0, r2
 800a74e:	0019      	movs	r1, r3
 800a750:	f008 fb20 	bl	8012d94 <round>
 800a754:	2200      	movs	r2, #0
 800a756:	4b43      	ldr	r3, [pc, #268]	; (800a864 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a758:	f7f6 fb8e 	bl	8000e78 <__aeabi_ddiv>
 800a75c:	0002      	movs	r2, r0
 800a75e:	000b      	movs	r3, r1
 800a760:	61ba      	str	r2, [r7, #24]
 800a762:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a764:	2200      	movs	r2, #0
 800a766:	4b40      	ldr	r3, [pc, #256]	; (800a868 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a768:	69b8      	ldr	r0, [r7, #24]
 800a76a:	69f9      	ldr	r1, [r7, #28]
 800a76c:	f7f6 ff7e 	bl	800166c <__aeabi_dmul>
 800a770:	0002      	movs	r2, r0
 800a772:	000b      	movs	r3, r1
 800a774:	0010      	movs	r0, r2
 800a776:	0019      	movs	r1, r3
 800a778:	f7f7 fdda 	bl	8002330 <__aeabi_d2iz>
 800a77c:	0002      	movs	r2, r0
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2203      	movs	r2, #3
 800a786:	212c      	movs	r1, #44	; 0x2c
 800a788:	0018      	movs	r0, r3
 800a78a:	f7ff fc57 	bl	800a03c <my_find_char_position>
 800a78e:	0003      	movs	r3, r0
 800a790:	001a      	movs	r2, r3
 800a792:	197b      	adds	r3, r7, r5
 800a794:	3201      	adds	r2, #1
 800a796:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2204      	movs	r2, #4
 800a79c:	212c      	movs	r1, #44	; 0x2c
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f7ff fc4c 	bl	800a03c <my_find_char_position>
 800a7a4:	0003      	movs	r3, r0
 800a7a6:	0019      	movs	r1, r3
 800a7a8:	193b      	adds	r3, r7, r4
 800a7aa:	197a      	adds	r2, r7, r5
 800a7ac:	7812      	ldrb	r2, [r2, #0]
 800a7ae:	1a8a      	subs	r2, r1, r2
 800a7b0:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a7b2:	193b      	adds	r3, r7, r4
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f000 facd 	bl	800ad58 <malloc>
 800a7be:	0003      	movs	r3, r0
 800a7c0:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a7c2:	197b      	adds	r3, r7, r5
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	18d1      	adds	r1, r2, r3
 800a7ca:	193b      	adds	r3, r7, r4
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f001 fe0e 	bl	800c3f2 <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a7d6:	193b      	adds	r3, r7, r4
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	18d3      	adds	r3, r2, r3
 800a7de:	2200      	movs	r2, #0
 800a7e0:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a7e2:	197b      	adds	r3, r7, r5
 800a7e4:	781a      	ldrb	r2, [r3, #0]
 800a7e6:	193b      	adds	r3, r7, r4
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	18d3      	adds	r3, r2, r3
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	18d2      	adds	r2, r2, r3
 800a7f2:	19bb      	adds	r3, r7, r6
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a7f8:	19bb      	adds	r3, r7, r6
 800a7fa:	781a      	ldrb	r2, [r3, #0]
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	0011      	movs	r1, r2
 800a800:	0018      	movs	r0, r3
 800a802:	f7ff fed9 	bl	800a5b8 <nmea2decimal>
 800a806:	0002      	movs	r2, r0
 800a808:	000b      	movs	r3, r1
 800a80a:	60ba      	str	r2, [r7, #8]
 800a80c:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	0018      	movs	r0, r3
 800a812:	f000 faab 	bl	800ad6c <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a816:	2200      	movs	r2, #0
 800a818:	4b12      	ldr	r3, [pc, #72]	; (800a864 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a81a:	68b8      	ldr	r0, [r7, #8]
 800a81c:	68f9      	ldr	r1, [r7, #12]
 800a81e:	f7f6 ff25 	bl	800166c <__aeabi_dmul>
 800a822:	0002      	movs	r2, r0
 800a824:	000b      	movs	r3, r1
 800a826:	0010      	movs	r0, r2
 800a828:	0019      	movs	r1, r3
 800a82a:	f008 fab3 	bl	8012d94 <round>
 800a82e:	2200      	movs	r2, #0
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a832:	f7f6 fb21 	bl	8000e78 <__aeabi_ddiv>
 800a836:	0002      	movs	r2, r0
 800a838:	000b      	movs	r3, r1
 800a83a:	60ba      	str	r2, [r7, #8]
 800a83c:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a83e:	2200      	movs	r2, #0
 800a840:	4b09      	ldr	r3, [pc, #36]	; (800a868 <my_nmea_get_gngll_coordinates+0x1d0>)
 800a842:	68b8      	ldr	r0, [r7, #8]
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	f7f6 ff11 	bl	800166c <__aeabi_dmul>
 800a84a:	0002      	movs	r2, r0
 800a84c:	000b      	movs	r3, r1
 800a84e:	0010      	movs	r0, r2
 800a850:	0019      	movs	r1, r3
 800a852:	f7f7 fd6d 	bl	8002330 <__aeabi_d2iz>
 800a856:	0002      	movs	r2, r0
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	605a      	str	r2, [r3, #4]
}
 800a85c:	46c0      	nop			; (mov r8, r8)
 800a85e:	46bd      	mov	sp, r7
 800a860:	b00d      	add	sp, #52	; 0x34
 800a862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a864:	412e8480 	.word	0x412e8480
 800a868:	416312d0 	.word	0x416312d0

0800a86c <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a86c:	b5b0      	push	{r4, r5, r7, lr}
 800a86e:	b086      	sub	sp, #24
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a874:	240e      	movs	r4, #14
 800a876:	193b      	adds	r3, r7, r4
 800a878:	2200      	movs	r2, #0
 800a87a:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2203      	movs	r2, #3
 800a880:	212c      	movs	r1, #44	; 0x2c
 800a882:	0018      	movs	r0, r3
 800a884:	f7ff fbda 	bl	800a03c <my_find_char_position>
 800a888:	0003      	movs	r3, r0
 800a88a:	001a      	movs	r2, r3
 800a88c:	2517      	movs	r5, #23
 800a88e:	197b      	adds	r3, r7, r5
 800a890:	3201      	adds	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a894:	2003      	movs	r0, #3
 800a896:	f000 fa5f 	bl	800ad58 <malloc>
 800a89a:	0003      	movs	r3, r0
 800a89c:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a89e:	197b      	adds	r3, r7, r5
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	18d1      	adds	r1, r2, r3
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	f001 fda1 	bl	800c3f2 <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a8b8:	193a      	adds	r2, r7, r4
 800a8ba:	4907      	ldr	r1, [pc, #28]	; (800a8d8 <my_nmea_get_gsv_tns+0x6c>)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	0018      	movs	r0, r3
 800a8c0:	f001 fcfa 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f000 fa50 	bl	800ad6c <free>
	return tns ;
 800a8cc:	193b      	adds	r3, r7, r4
 800a8ce:	881b      	ldrh	r3, [r3, #0]
}
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b006      	add	sp, #24
 800a8d6:	bdb0      	pop	{r4, r5, r7, pc}
 800a8d8:	08014994 	.word	0x08014994

0800a8dc <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2209      	movs	r2, #9
 800a8ea:	212c      	movs	r1, #44	; 0x2c
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f7ff fba5 	bl	800a03c <my_find_char_position>
 800a8f2:	0003      	movs	r3, r0
 800a8f4:	001a      	movs	r2, r3
 800a8f6:	2417      	movs	r4, #23
 800a8f8:	193b      	adds	r3, r7, r4
 800a8fa:	3205      	adds	r2, #5
 800a8fc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a8fe:	2003      	movs	r0, #3
 800a900:	f000 fa2a 	bl	800ad58 <malloc>
 800a904:	0003      	movs	r3, r0
 800a906:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a908:	193b      	adds	r3, r7, r4
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	18d1      	adds	r1, r2, r3
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2202      	movs	r2, #2
 800a914:	0018      	movs	r0, r3
 800a916:	f001 fd6c 	bl	800c3f2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3302      	adds	r3, #2
 800a91e:	2200      	movs	r2, #0
 800a920:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a922:	240e      	movs	r4, #14
 800a924:	193a      	adds	r2, r7, r4
 800a926:	4909      	ldr	r1, [pc, #36]	; (800a94c <my_nmea_get_rmc_date_yy+0x70>)
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	0018      	movs	r0, r3
 800a92c:	f001 fcc4 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	0018      	movs	r0, r3
 800a934:	f000 fa1a 	bl	800ad6c <free>
	*yy = (uint8_t) temp ;
 800a938:	193b      	adds	r3, r7, r4
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	701a      	strb	r2, [r3, #0]

}
 800a942:	46c0      	nop			; (mov r8, r8)
 800a944:	46bd      	mov	sp, r7
 800a946:	b007      	add	sp, #28
 800a948:	bd90      	pop	{r4, r7, pc}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	08014994 	.word	0x08014994

0800a950 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a950:	b590      	push	{r4, r7, lr}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2209      	movs	r2, #9
 800a95e:	212c      	movs	r1, #44	; 0x2c
 800a960:	0018      	movs	r0, r3
 800a962:	f7ff fb6b 	bl	800a03c <my_find_char_position>
 800a966:	0003      	movs	r3, r0
 800a968:	001a      	movs	r2, r3
 800a96a:	2417      	movs	r4, #23
 800a96c:	193b      	adds	r3, r7, r4
 800a96e:	3203      	adds	r2, #3
 800a970:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a972:	2003      	movs	r0, #3
 800a974:	f000 f9f0 	bl	800ad58 <malloc>
 800a978:	0003      	movs	r3, r0
 800a97a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a97c:	193b      	adds	r3, r7, r4
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	18d1      	adds	r1, r2, r3
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	2202      	movs	r2, #2
 800a988:	0018      	movs	r0, r3
 800a98a:	f001 fd32 	bl	800c3f2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	3302      	adds	r3, #2
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a996:	240e      	movs	r4, #14
 800a998:	193a      	adds	r2, r7, r4
 800a99a:	4909      	ldr	r1, [pc, #36]	; (800a9c0 <my_nmea_get_rmc_date_mm+0x70>)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	0018      	movs	r0, r3
 800a9a0:	f001 fc8a 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	f000 f9e0 	bl	800ad6c <free>
	*mm = (uint8_t) temp ;
 800a9ac:	193b      	adds	r3, r7, r4
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	701a      	strb	r2, [r3, #0]

}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b007      	add	sp, #28
 800a9bc:	bd90      	pop	{r4, r7, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	08014994 	.word	0x08014994

0800a9c4 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a9c4:	b590      	push	{r4, r7, lr}
 800a9c6:	b087      	sub	sp, #28
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2209      	movs	r2, #9
 800a9d2:	212c      	movs	r1, #44	; 0x2c
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f7ff fb31 	bl	800a03c <my_find_char_position>
 800a9da:	0003      	movs	r3, r0
 800a9dc:	001a      	movs	r2, r3
 800a9de:	2417      	movs	r4, #23
 800a9e0:	193b      	adds	r3, r7, r4
 800a9e2:	3201      	adds	r2, #1
 800a9e4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a9e6:	2003      	movs	r0, #3
 800a9e8:	f000 f9b6 	bl	800ad58 <malloc>
 800a9ec:	0003      	movs	r3, r0
 800a9ee:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a9f0:	193b      	adds	r3, r7, r4
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	18d1      	adds	r1, r2, r3
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f001 fcf8 	bl	800c3f2 <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3302      	adds	r3, #2
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aa0a:	240e      	movs	r4, #14
 800aa0c:	193a      	adds	r2, r7, r4
 800aa0e:	4909      	ldr	r1, [pc, #36]	; (800aa34 <my_nmea_get_rmc_date_dd+0x70>)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	0018      	movs	r0, r3
 800aa14:	f001 fc50 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f000 f9a6 	bl	800ad6c <free>
	*dd = (uint8_t) temp ;
 800aa20:	193b      	adds	r3, r7, r4
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	701a      	strb	r2, [r3, #0]

}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b007      	add	sp, #28
 800aa30:	bd90      	pop	{r4, r7, pc}
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	08014994 	.word	0x08014994

0800aa38 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800aa38:	b590      	push	{r4, r7, lr}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	212c      	movs	r1, #44	; 0x2c
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7ff faf7 	bl	800a03c <my_find_char_position>
 800aa4e:	0003      	movs	r3, r0
 800aa50:	001a      	movs	r2, r3
 800aa52:	2417      	movs	r4, #23
 800aa54:	193b      	adds	r3, r7, r4
 800aa56:	3201      	adds	r2, #1
 800aa58:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aa5a:	2003      	movs	r0, #3
 800aa5c:	f000 f97c 	bl	800ad58 <malloc>
 800aa60:	0003      	movs	r3, r0
 800aa62:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aa64:	193b      	adds	r3, r7, r4
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	18d1      	adds	r1, r2, r3
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	0018      	movs	r0, r3
 800aa72:	f001 fcbe 	bl	800c3f2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	3302      	adds	r3, #2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aa7e:	240e      	movs	r4, #14
 800aa80:	193a      	adds	r2, r7, r4
 800aa82:	4909      	ldr	r1, [pc, #36]	; (800aaa8 <my_nmea_get_rmc_utc_hh+0x70>)
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	0018      	movs	r0, r3
 800aa88:	f001 fc16 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 f96c 	bl	800ad6c <free>
	*hh = (uint8_t) temp ;
 800aa94:	193b      	adds	r3, r7, r4
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	701a      	strb	r2, [r3, #0]

}
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	b007      	add	sp, #28
 800aaa4:	bd90      	pop	{r4, r7, pc}
 800aaa6:	46c0      	nop			; (mov r8, r8)
 800aaa8:	08014994 	.word	0x08014994

0800aaac <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	212c      	movs	r1, #44	; 0x2c
 800aabc:	0018      	movs	r0, r3
 800aabe:	f7ff fabd 	bl	800a03c <my_find_char_position>
 800aac2:	0003      	movs	r3, r0
 800aac4:	001a      	movs	r2, r3
 800aac6:	2417      	movs	r4, #23
 800aac8:	193b      	adds	r3, r7, r4
 800aaca:	3203      	adds	r2, #3
 800aacc:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800aace:	2003      	movs	r0, #3
 800aad0:	f000 f942 	bl	800ad58 <malloc>
 800aad4:	0003      	movs	r3, r0
 800aad6:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800aad8:	193b      	adds	r3, r7, r4
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	18d1      	adds	r1, r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2202      	movs	r2, #2
 800aae4:	0018      	movs	r0, r3
 800aae6:	f001 fc84 	bl	800c3f2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3302      	adds	r3, #2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800aaf2:	240e      	movs	r4, #14
 800aaf4:	193a      	adds	r2, r7, r4
 800aaf6:	4909      	ldr	r1, [pc, #36]	; (800ab1c <my_nmea_get_rmc_utc_mm+0x70>)
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	0018      	movs	r0, r3
 800aafc:	f001 fbdc 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	0018      	movs	r0, r3
 800ab04:	f000 f932 	bl	800ad6c <free>
	*mm = (uint8_t) temp ;
 800ab08:	193b      	adds	r3, r7, r4
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	701a      	strb	r2, [r3, #0]

}
 800ab12:	46c0      	nop			; (mov r8, r8)
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b007      	add	sp, #28
 800ab18:	bd90      	pop	{r4, r7, pc}
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	08014994 	.word	0x08014994

0800ab20 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800ab20:	b590      	push	{r4, r7, lr}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	212c      	movs	r1, #44	; 0x2c
 800ab30:	0018      	movs	r0, r3
 800ab32:	f7ff fa83 	bl	800a03c <my_find_char_position>
 800ab36:	0003      	movs	r3, r0
 800ab38:	001a      	movs	r2, r3
 800ab3a:	2417      	movs	r4, #23
 800ab3c:	193b      	adds	r3, r7, r4
 800ab3e:	3205      	adds	r2, #5
 800ab40:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ab42:	2003      	movs	r0, #3
 800ab44:	f000 f908 	bl	800ad58 <malloc>
 800ab48:	0003      	movs	r3, r0
 800ab4a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ab4c:	193b      	adds	r3, r7, r4
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	18d1      	adds	r1, r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	2202      	movs	r2, #2
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f001 fc4a 	bl	800c3f2 <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	3302      	adds	r3, #2
 800ab62:	2200      	movs	r2, #0
 800ab64:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ab66:	240e      	movs	r4, #14
 800ab68:	193a      	adds	r2, r7, r4
 800ab6a:	4909      	ldr	r1, [pc, #36]	; (800ab90 <my_nmea_get_rmc_utc_ss+0x70>)
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	0018      	movs	r0, r3
 800ab70:	f001 fba2 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	0018      	movs	r0, r3
 800ab78:	f000 f8f8 	bl	800ad6c <free>
	*ss = (uint8_t) temp ;
 800ab7c:	193b      	adds	r3, r7, r4
 800ab7e:	881b      	ldrh	r3, [r3, #0]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	701a      	strb	r2, [r3, #0]

}
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	b007      	add	sp, #28
 800ab8c:	bd90      	pop	{r4, r7, pc}
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	08014994 	.word	0x08014994

0800ab94 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800ab94:	b590      	push	{r4, r7, lr}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	212c      	movs	r1, #44	; 0x2c
 800aba4:	0018      	movs	r0, r3
 800aba6:	f7ff fa49 	bl	800a03c <my_find_char_position>
 800abaa:	0003      	movs	r3, r0
 800abac:	001a      	movs	r2, r3
 800abae:	240f      	movs	r4, #15
 800abb0:	193b      	adds	r3, r7, r4
 800abb2:	3208      	adds	r2, #8
 800abb4:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800abb6:	2004      	movs	r0, #4
 800abb8:	f000 f8ce 	bl	800ad58 <malloc>
 800abbc:	0003      	movs	r3, r0
 800abbe:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800abc0:	193b      	adds	r3, r7, r4
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	18d1      	adds	r1, r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2203      	movs	r2, #3
 800abcc:	0018      	movs	r0, r3
 800abce:	f001 fc10 	bl	800c3f2 <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	3303      	adds	r3, #3
 800abd6:	2200      	movs	r2, #0
 800abd8:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	4906      	ldr	r1, [pc, #24]	; (800abf8 <my_nmea_get_rmc_utc_sss+0x64>)
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	0018      	movs	r0, r3
 800abe2:	f001 fb69 	bl	800c2b8 <sscanf>
	free ( s ) ;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	0018      	movs	r0, r3
 800abea:	f000 f8bf 	bl	800ad6c <free>
}
 800abee:	46c0      	nop			; (mov r8, r8)
 800abf0:	46bd      	mov	sp, r7
 800abf2:	b005      	add	sp, #20
 800abf4:	bd90      	pop	{r4, r7, pc}
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	08014998 	.word	0x08014998

0800abfc <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( const char* c )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	0018      	movs	r0, r3
 800ac08:	f7f5 fa7c 	bl	8000104 <strlen>
 800ac0c:	0003      	movs	r3, r0
 800ac0e:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800ac10:	2317      	movs	r3, #23
 800ac12:	18fb      	adds	r3, r7, r3
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800ac18:	2316      	movs	r3, #22
 800ac1a:	18fb      	adds	r3, r7, r3
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d902      	bls.n	800ac2c <my_tracker_api_is_cmd+0x30>
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2b09      	cmp	r3, #9
 800ac2a:	d901      	bls.n	800ac30 <my_tracker_api_is_cmd+0x34>
		return false ;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	e04b      	b.n	800acc8 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800ac30:	2317      	movs	r3, #23
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]
 800ac38:	e025      	b.n	800ac86 <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800ac3a:	2317      	movs	r3, #23
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	18d3      	adds	r3, r2, r3
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b2c      	cmp	r3, #44	; 0x2c
 800ac48:	d106      	bne.n	800ac58 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800ac4a:	2116      	movs	r1, #22
 800ac4c:	187b      	adds	r3, r7, r1
 800ac4e:	781a      	ldrb	r2, [r3, #0]
 800ac50:	187b      	adds	r3, r7, r1
 800ac52:	3201      	adds	r2, #1
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e010      	b.n	800ac7a <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800ac58:	2117      	movs	r1, #23
 800ac5a:	187b      	adds	r3, r7, r1
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	18d3      	adds	r3, r2, r3
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b2f      	cmp	r3, #47	; 0x2f
 800ac66:	d906      	bls.n	800ac76 <my_tracker_api_is_cmd+0x7a>
 800ac68:	187b      	adds	r3, r7, r1
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	18d3      	adds	r3, r2, r3
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b39      	cmp	r3, #57	; 0x39
 800ac74:	d901      	bls.n	800ac7a <my_tracker_api_is_cmd+0x7e>
			return false;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e026      	b.n	800acc8 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800ac7a:	2117      	movs	r1, #23
 800ac7c:	187b      	adds	r3, r7, r1
 800ac7e:	781a      	ldrb	r2, [r3, #0]
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	3201      	adds	r2, #1
 800ac84:	701a      	strb	r2, [r3, #0]
 800ac86:	2317      	movs	r3, #23
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d8d3      	bhi.n	800ac3a <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800ac92:	2316      	movs	r3, #22
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d901      	bls.n	800aca0 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e013      	b.n	800acc8 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	212c      	movs	r1, #44	; 0x2c
 800aca4:	0018      	movs	r0, r3
 800aca6:	f001 fb85 	bl	800c3b4 <strchr>
 800acaa:	0003      	movs	r3, r0
 800acac:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d802      	bhi.n	800acc2 <my_tracker_api_is_cmd+0xc6>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <my_tracker_api_is_cmd+0xca>
		return false ;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e000      	b.n	800acc8 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800acc6:	2301      	movs	r3, #1
}
 800acc8:	0018      	movs	r0, r3
 800acca:	46bd      	mov	sp, r7
 800accc:	b006      	add	sp, #24
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800acec:	4a19      	ldr	r2, [pc, #100]	; (800ad54 <my_tracker_api_parse_cmd+0x84>)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	0011      	movs	r1, r2
 800acf2:	0018      	movs	r0, r3
 800acf4:	f001 fb92 	bl	800c41c <strtok>
 800acf8:	0003      	movs	r3, r0
 800acfa:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	0018      	movs	r0, r3
 800ad00:	f7ff fb3e 	bl	800a380 <my_conv_string_2_uint32_t>
 800ad04:	0003      	movs	r3, r0
 800ad06:	b2da      	uxtb	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <my_tracker_api_parse_cmd+0x84>)
 800ad0e:	0019      	movs	r1, r3
 800ad10:	2000      	movs	r0, #0
 800ad12:	f001 fb83 	bl	800c41c <strtok>
 800ad16:	0003      	movs	r3, r0
 800ad18:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	f7ff fb2f 	bl	800a380 <my_conv_string_2_uint32_t>
 800ad22:	0002      	movs	r2, r0
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800ad28:	4b0a      	ldr	r3, [pc, #40]	; (800ad54 <my_tracker_api_parse_cmd+0x84>)
 800ad2a:	0019      	movs	r1, r3
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	f001 fb75 	bl	800c41c <strtok>
 800ad32:	0003      	movs	r3, r0
 800ad34:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <my_tracker_api_parse_cmd+0x74>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800ad44:	2300      	movs	r3, #0
 800ad46:	e000      	b.n	800ad4a <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800ad48:	2301      	movs	r3, #1
}
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	b004      	add	sp, #16
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	46c0      	nop			; (mov r8, r8)
 800ad54:	0801499c 	.word	0x0801499c

0800ad58 <malloc>:
 800ad58:	b510      	push	{r4, lr}
 800ad5a:	4b03      	ldr	r3, [pc, #12]	; (800ad68 <malloc+0x10>)
 800ad5c:	0001      	movs	r1, r0
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	f000 f80e 	bl	800ad80 <_malloc_r>
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	46c0      	nop			; (mov r8, r8)
 800ad68:	200006d0 	.word	0x200006d0

0800ad6c <free>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	4b03      	ldr	r3, [pc, #12]	; (800ad7c <free+0x10>)
 800ad70:	0001      	movs	r1, r0
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	f001 fcbe 	bl	800c6f4 <_free_r>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	46c0      	nop			; (mov r8, r8)
 800ad7c:	200006d0 	.word	0x200006d0

0800ad80 <_malloc_r>:
 800ad80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad82:	000d      	movs	r5, r1
 800ad84:	b087      	sub	sp, #28
 800ad86:	350b      	adds	r5, #11
 800ad88:	9001      	str	r0, [sp, #4]
 800ad8a:	2d16      	cmp	r5, #22
 800ad8c:	d908      	bls.n	800ada0 <_malloc_r+0x20>
 800ad8e:	2207      	movs	r2, #7
 800ad90:	4395      	bics	r5, r2
 800ad92:	d506      	bpl.n	800ada2 <_malloc_r+0x22>
 800ad94:	230c      	movs	r3, #12
 800ad96:	9a01      	ldr	r2, [sp, #4]
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	b007      	add	sp, #28
 800ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada0:	2510      	movs	r5, #16
 800ada2:	42a9      	cmp	r1, r5
 800ada4:	d8f6      	bhi.n	800ad94 <_malloc_r+0x14>
 800ada6:	9801      	ldr	r0, [sp, #4]
 800ada8:	f000 f9fe 	bl	800b1a8 <__malloc_lock>
 800adac:	23fc      	movs	r3, #252	; 0xfc
 800adae:	4ebe      	ldr	r6, [pc, #760]	; (800b0a8 <_malloc_r+0x328>)
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	429d      	cmp	r5, r3
 800adb4:	d219      	bcs.n	800adea <_malloc_r+0x6a>
 800adb6:	002a      	movs	r2, r5
 800adb8:	3208      	adds	r2, #8
 800adba:	18b2      	adds	r2, r6, r2
 800adbc:	0011      	movs	r1, r2
 800adbe:	6854      	ldr	r4, [r2, #4]
 800adc0:	3908      	subs	r1, #8
 800adc2:	08eb      	lsrs	r3, r5, #3
 800adc4:	428c      	cmp	r4, r1
 800adc6:	d103      	bne.n	800add0 <_malloc_r+0x50>
 800adc8:	68d4      	ldr	r4, [r2, #12]
 800adca:	3302      	adds	r3, #2
 800adcc:	42a2      	cmp	r2, r4
 800adce:	d022      	beq.n	800ae16 <_malloc_r+0x96>
 800add0:	2203      	movs	r2, #3
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	68a1      	ldr	r1, [r4, #8]
 800add6:	4393      	bics	r3, r2
 800add8:	68e2      	ldr	r2, [r4, #12]
 800adda:	18e3      	adds	r3, r4, r3
 800addc:	60ca      	str	r2, [r1, #12]
 800adde:	6091      	str	r1, [r2, #8]
 800ade0:	2201      	movs	r2, #1
 800ade2:	6859      	ldr	r1, [r3, #4]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
 800ade8:	e02a      	b.n	800ae40 <_malloc_r+0xc0>
 800adea:	233f      	movs	r3, #63	; 0x3f
 800adec:	0a6a      	lsrs	r2, r5, #9
 800adee:	d003      	beq.n	800adf8 <_malloc_r+0x78>
 800adf0:	2a04      	cmp	r2, #4
 800adf2:	d82b      	bhi.n	800ae4c <_malloc_r+0xcc>
 800adf4:	09ab      	lsrs	r3, r5, #6
 800adf6:	3338      	adds	r3, #56	; 0x38
 800adf8:	2203      	movs	r2, #3
 800adfa:	4694      	mov	ip, r2
 800adfc:	00d9      	lsls	r1, r3, #3
 800adfe:	1989      	adds	r1, r1, r6
 800ae00:	68cc      	ldr	r4, [r1, #12]
 800ae02:	428c      	cmp	r4, r1
 800ae04:	d006      	beq.n	800ae14 <_malloc_r+0x94>
 800ae06:	4660      	mov	r0, ip
 800ae08:	6862      	ldr	r2, [r4, #4]
 800ae0a:	4382      	bics	r2, r0
 800ae0c:	1b57      	subs	r7, r2, r5
 800ae0e:	2f0f      	cmp	r7, #15
 800ae10:	dd34      	ble.n	800ae7c <_malloc_r+0xfc>
 800ae12:	3b01      	subs	r3, #1
 800ae14:	3301      	adds	r3, #1
 800ae16:	6934      	ldr	r4, [r6, #16]
 800ae18:	49a4      	ldr	r1, [pc, #656]	; (800b0ac <_malloc_r+0x32c>)
 800ae1a:	428c      	cmp	r4, r1
 800ae1c:	d055      	beq.n	800aeca <_malloc_r+0x14a>
 800ae1e:	2003      	movs	r0, #3
 800ae20:	6862      	ldr	r2, [r4, #4]
 800ae22:	4382      	bics	r2, r0
 800ae24:	1b50      	subs	r0, r2, r5
 800ae26:	280f      	cmp	r0, #15
 800ae28:	dd36      	ble.n	800ae98 <_malloc_r+0x118>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	1967      	adds	r7, r4, r5
 800ae2e:	431d      	orrs	r5, r3
 800ae30:	4303      	orrs	r3, r0
 800ae32:	6065      	str	r5, [r4, #4]
 800ae34:	6177      	str	r7, [r6, #20]
 800ae36:	6137      	str	r7, [r6, #16]
 800ae38:	60f9      	str	r1, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	607b      	str	r3, [r7, #4]
 800ae3e:	50a0      	str	r0, [r4, r2]
 800ae40:	9801      	ldr	r0, [sp, #4]
 800ae42:	f000 f9b9 	bl	800b1b8 <__malloc_unlock>
 800ae46:	0020      	movs	r0, r4
 800ae48:	3008      	adds	r0, #8
 800ae4a:	e7a7      	b.n	800ad9c <_malloc_r+0x1c>
 800ae4c:	2a14      	cmp	r2, #20
 800ae4e:	d802      	bhi.n	800ae56 <_malloc_r+0xd6>
 800ae50:	0013      	movs	r3, r2
 800ae52:	335b      	adds	r3, #91	; 0x5b
 800ae54:	e7d0      	b.n	800adf8 <_malloc_r+0x78>
 800ae56:	2a54      	cmp	r2, #84	; 0x54
 800ae58:	d802      	bhi.n	800ae60 <_malloc_r+0xe0>
 800ae5a:	0b2b      	lsrs	r3, r5, #12
 800ae5c:	336e      	adds	r3, #110	; 0x6e
 800ae5e:	e7cb      	b.n	800adf8 <_malloc_r+0x78>
 800ae60:	23aa      	movs	r3, #170	; 0xaa
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d802      	bhi.n	800ae6e <_malloc_r+0xee>
 800ae68:	0beb      	lsrs	r3, r5, #15
 800ae6a:	3377      	adds	r3, #119	; 0x77
 800ae6c:	e7c4      	b.n	800adf8 <_malloc_r+0x78>
 800ae6e:	4990      	ldr	r1, [pc, #576]	; (800b0b0 <_malloc_r+0x330>)
 800ae70:	237e      	movs	r3, #126	; 0x7e
 800ae72:	428a      	cmp	r2, r1
 800ae74:	d8c0      	bhi.n	800adf8 <_malloc_r+0x78>
 800ae76:	0cab      	lsrs	r3, r5, #18
 800ae78:	337c      	adds	r3, #124	; 0x7c
 800ae7a:	e7bd      	b.n	800adf8 <_malloc_r+0x78>
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	2f00      	cmp	r7, #0
 800ae80:	db08      	blt.n	800ae94 <_malloc_r+0x114>
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	60d8      	str	r0, [r3, #12]
 800ae86:	6083      	str	r3, [r0, #8]
 800ae88:	2301      	movs	r3, #1
 800ae8a:	18a2      	adds	r2, r4, r2
 800ae8c:	6851      	ldr	r1, [r2, #4]
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	6053      	str	r3, [r2, #4]
 800ae92:	e7d5      	b.n	800ae40 <_malloc_r+0xc0>
 800ae94:	0004      	movs	r4, r0
 800ae96:	e7b4      	b.n	800ae02 <_malloc_r+0x82>
 800ae98:	6171      	str	r1, [r6, #20]
 800ae9a:	6131      	str	r1, [r6, #16]
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	daf3      	bge.n	800ae88 <_malloc_r+0x108>
 800aea0:	6871      	ldr	r1, [r6, #4]
 800aea2:	468c      	mov	ip, r1
 800aea4:	2180      	movs	r1, #128	; 0x80
 800aea6:	0089      	lsls	r1, r1, #2
 800aea8:	428a      	cmp	r2, r1
 800aeaa:	d300      	bcc.n	800aeae <_malloc_r+0x12e>
 800aeac:	e08c      	b.n	800afc8 <_malloc_r+0x248>
 800aeae:	08d1      	lsrs	r1, r2, #3
 800aeb0:	0950      	lsrs	r0, r2, #5
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4082      	lsls	r2, r0
 800aeb6:	4660      	mov	r0, ip
 800aeb8:	4302      	orrs	r2, r0
 800aeba:	6072      	str	r2, [r6, #4]
 800aebc:	00ca      	lsls	r2, r1, #3
 800aebe:	1992      	adds	r2, r2, r6
 800aec0:	6891      	ldr	r1, [r2, #8]
 800aec2:	60e2      	str	r2, [r4, #12]
 800aec4:	60a1      	str	r1, [r4, #8]
 800aec6:	6094      	str	r4, [r2, #8]
 800aec8:	60cc      	str	r4, [r1, #12]
 800aeca:	2201      	movs	r2, #1
 800aecc:	4876      	ldr	r0, [pc, #472]	; (800b0a8 <_malloc_r+0x328>)
 800aece:	1099      	asrs	r1, r3, #2
 800aed0:	408a      	lsls	r2, r1
 800aed2:	6841      	ldr	r1, [r0, #4]
 800aed4:	4291      	cmp	r1, r2
 800aed6:	d328      	bcc.n	800af2a <_malloc_r+0x1aa>
 800aed8:	420a      	tst	r2, r1
 800aeda:	d105      	bne.n	800aee8 <_malloc_r+0x168>
 800aedc:	2403      	movs	r4, #3
 800aede:	43a3      	bics	r3, r4
 800aee0:	0052      	lsls	r2, r2, #1
 800aee2:	3304      	adds	r3, #4
 800aee4:	420a      	tst	r2, r1
 800aee6:	d0fb      	beq.n	800aee0 <_malloc_r+0x160>
 800aee8:	496f      	ldr	r1, [pc, #444]	; (800b0a8 <_malloc_r+0x328>)
 800aeea:	9104      	str	r1, [sp, #16]
 800aeec:	00d9      	lsls	r1, r3, #3
 800aeee:	1841      	adds	r1, r0, r1
 800aef0:	468c      	mov	ip, r1
 800aef2:	000f      	movs	r7, r1
 800aef4:	9302      	str	r3, [sp, #8]
 800aef6:	68fc      	ldr	r4, [r7, #12]
 800aef8:	42bc      	cmp	r4, r7
 800aefa:	d000      	beq.n	800aefe <_malloc_r+0x17e>
 800aefc:	e09b      	b.n	800b036 <_malloc_r+0x2b6>
 800aefe:	2403      	movs	r4, #3
 800af00:	9902      	ldr	r1, [sp, #8]
 800af02:	3708      	adds	r7, #8
 800af04:	3101      	adds	r1, #1
 800af06:	9102      	str	r1, [sp, #8]
 800af08:	4221      	tst	r1, r4
 800af0a:	d1f4      	bne.n	800aef6 <_malloc_r+0x176>
 800af0c:	2103      	movs	r1, #3
 800af0e:	420b      	tst	r3, r1
 800af10:	d000      	beq.n	800af14 <_malloc_r+0x194>
 800af12:	e0b7      	b.n	800b084 <_malloc_r+0x304>
 800af14:	6843      	ldr	r3, [r0, #4]
 800af16:	4393      	bics	r3, r2
 800af18:	6043      	str	r3, [r0, #4]
 800af1a:	9b04      	ldr	r3, [sp, #16]
 800af1c:	0052      	lsls	r2, r2, #1
 800af1e:	6859      	ldr	r1, [r3, #4]
 800af20:	4291      	cmp	r1, r2
 800af22:	d302      	bcc.n	800af2a <_malloc_r+0x1aa>
 800af24:	2a00      	cmp	r2, #0
 800af26:	d000      	beq.n	800af2a <_malloc_r+0x1aa>
 800af28:	e0bb      	b.n	800b0a2 <_malloc_r+0x322>
 800af2a:	2203      	movs	r2, #3
 800af2c:	6883      	ldr	r3, [r0, #8]
 800af2e:	9302      	str	r3, [sp, #8]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	4393      	bics	r3, r2
 800af34:	9303      	str	r3, [sp, #12]
 800af36:	42ab      	cmp	r3, r5
 800af38:	d303      	bcc.n	800af42 <_malloc_r+0x1c2>
 800af3a:	1b59      	subs	r1, r3, r5
 800af3c:	290f      	cmp	r1, #15
 800af3e:	dd00      	ble.n	800af42 <_malloc_r+0x1c2>
 800af40:	e123      	b.n	800b18a <_malloc_r+0x40a>
 800af42:	9b02      	ldr	r3, [sp, #8]
 800af44:	9a03      	ldr	r2, [sp, #12]
 800af46:	2008      	movs	r0, #8
 800af48:	189e      	adds	r6, r3, r2
 800af4a:	4b5a      	ldr	r3, [pc, #360]	; (800b0b4 <_malloc_r+0x334>)
 800af4c:	681f      	ldr	r7, [r3, #0]
 800af4e:	f001 fb4b 	bl	800c5e8 <sysconf>
 800af52:	4b59      	ldr	r3, [pc, #356]	; (800b0b8 <_malloc_r+0x338>)
 800af54:	3710      	adds	r7, #16
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	197f      	adds	r7, r7, r5
 800af5a:	9004      	str	r0, [sp, #16]
 800af5c:	3301      	adds	r3, #1
 800af5e:	d003      	beq.n	800af68 <_malloc_r+0x1e8>
 800af60:	1e7b      	subs	r3, r7, #1
 800af62:	181b      	adds	r3, r3, r0
 800af64:	4247      	negs	r7, r0
 800af66:	401f      	ands	r7, r3
 800af68:	0039      	movs	r1, r7
 800af6a:	9801      	ldr	r0, [sp, #4]
 800af6c:	f001 fae8 	bl	800c540 <_sbrk_r>
 800af70:	0004      	movs	r4, r0
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d100      	bne.n	800af78 <_malloc_r+0x1f8>
 800af76:	e0de      	b.n	800b136 <_malloc_r+0x3b6>
 800af78:	4286      	cmp	r6, r0
 800af7a:	d904      	bls.n	800af86 <_malloc_r+0x206>
 800af7c:	4b4a      	ldr	r3, [pc, #296]	; (800b0a8 <_malloc_r+0x328>)
 800af7e:	9a02      	ldr	r2, [sp, #8]
 800af80:	429a      	cmp	r2, r3
 800af82:	d000      	beq.n	800af86 <_malloc_r+0x206>
 800af84:	e0d7      	b.n	800b136 <_malloc_r+0x3b6>
 800af86:	4a4d      	ldr	r2, [pc, #308]	; (800b0bc <_malloc_r+0x33c>)
 800af88:	6813      	ldr	r3, [r2, #0]
 800af8a:	18fb      	adds	r3, r7, r3
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	9a04      	ldr	r2, [sp, #16]
 800af90:	3a01      	subs	r2, #1
 800af92:	42a6      	cmp	r6, r4
 800af94:	d000      	beq.n	800af98 <_malloc_r+0x218>
 800af96:	e097      	b.n	800b0c8 <_malloc_r+0x348>
 800af98:	4216      	tst	r6, r2
 800af9a:	d000      	beq.n	800af9e <_malloc_r+0x21e>
 800af9c:	e094      	b.n	800b0c8 <_malloc_r+0x348>
 800af9e:	4b42      	ldr	r3, [pc, #264]	; (800b0a8 <_malloc_r+0x328>)
 800afa0:	689a      	ldr	r2, [r3, #8]
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	19df      	adds	r7, r3, r7
 800afa6:	2301      	movs	r3, #1
 800afa8:	433b      	orrs	r3, r7
 800afaa:	6053      	str	r3, [r2, #4]
 800afac:	4b43      	ldr	r3, [pc, #268]	; (800b0bc <_malloc_r+0x33c>)
 800afae:	4a44      	ldr	r2, [pc, #272]	; (800b0c0 <_malloc_r+0x340>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	6811      	ldr	r1, [r2, #0]
 800afb4:	428b      	cmp	r3, r1
 800afb6:	d900      	bls.n	800afba <_malloc_r+0x23a>
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	4a42      	ldr	r2, [pc, #264]	; (800b0c4 <_malloc_r+0x344>)
 800afbc:	6811      	ldr	r1, [r2, #0]
 800afbe:	428b      	cmp	r3, r1
 800afc0:	d800      	bhi.n	800afc4 <_malloc_r+0x244>
 800afc2:	e0b8      	b.n	800b136 <_malloc_r+0x3b6>
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	e0b6      	b.n	800b136 <_malloc_r+0x3b6>
 800afc8:	0a50      	lsrs	r0, r2, #9
 800afca:	2804      	cmp	r0, #4
 800afcc:	d811      	bhi.n	800aff2 <_malloc_r+0x272>
 800afce:	0991      	lsrs	r1, r2, #6
 800afd0:	3138      	adds	r1, #56	; 0x38
 800afd2:	00cf      	lsls	r7, r1, #3
 800afd4:	19bf      	adds	r7, r7, r6
 800afd6:	68b8      	ldr	r0, [r7, #8]
 800afd8:	4287      	cmp	r7, r0
 800afda:	d125      	bne.n	800b028 <_malloc_r+0x2a8>
 800afdc:	2201      	movs	r2, #1
 800afde:	1089      	asrs	r1, r1, #2
 800afe0:	408a      	lsls	r2, r1
 800afe2:	4661      	mov	r1, ip
 800afe4:	430a      	orrs	r2, r1
 800afe6:	6072      	str	r2, [r6, #4]
 800afe8:	60e7      	str	r7, [r4, #12]
 800afea:	60a0      	str	r0, [r4, #8]
 800afec:	60bc      	str	r4, [r7, #8]
 800afee:	60c4      	str	r4, [r0, #12]
 800aff0:	e76b      	b.n	800aeca <_malloc_r+0x14a>
 800aff2:	2814      	cmp	r0, #20
 800aff4:	d802      	bhi.n	800affc <_malloc_r+0x27c>
 800aff6:	0001      	movs	r1, r0
 800aff8:	315b      	adds	r1, #91	; 0x5b
 800affa:	e7ea      	b.n	800afd2 <_malloc_r+0x252>
 800affc:	2854      	cmp	r0, #84	; 0x54
 800affe:	d802      	bhi.n	800b006 <_malloc_r+0x286>
 800b000:	0b11      	lsrs	r1, r2, #12
 800b002:	316e      	adds	r1, #110	; 0x6e
 800b004:	e7e5      	b.n	800afd2 <_malloc_r+0x252>
 800b006:	21aa      	movs	r1, #170	; 0xaa
 800b008:	0049      	lsls	r1, r1, #1
 800b00a:	4288      	cmp	r0, r1
 800b00c:	d802      	bhi.n	800b014 <_malloc_r+0x294>
 800b00e:	0bd1      	lsrs	r1, r2, #15
 800b010:	3177      	adds	r1, #119	; 0x77
 800b012:	e7de      	b.n	800afd2 <_malloc_r+0x252>
 800b014:	4f26      	ldr	r7, [pc, #152]	; (800b0b0 <_malloc_r+0x330>)
 800b016:	217e      	movs	r1, #126	; 0x7e
 800b018:	42b8      	cmp	r0, r7
 800b01a:	d8da      	bhi.n	800afd2 <_malloc_r+0x252>
 800b01c:	0c91      	lsrs	r1, r2, #18
 800b01e:	317c      	adds	r1, #124	; 0x7c
 800b020:	e7d7      	b.n	800afd2 <_malloc_r+0x252>
 800b022:	6880      	ldr	r0, [r0, #8]
 800b024:	4287      	cmp	r7, r0
 800b026:	d004      	beq.n	800b032 <_malloc_r+0x2b2>
 800b028:	2603      	movs	r6, #3
 800b02a:	6841      	ldr	r1, [r0, #4]
 800b02c:	43b1      	bics	r1, r6
 800b02e:	4291      	cmp	r1, r2
 800b030:	d8f7      	bhi.n	800b022 <_malloc_r+0x2a2>
 800b032:	68c7      	ldr	r7, [r0, #12]
 800b034:	e7d8      	b.n	800afe8 <_malloc_r+0x268>
 800b036:	2603      	movs	r6, #3
 800b038:	6861      	ldr	r1, [r4, #4]
 800b03a:	43b1      	bics	r1, r6
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	68e6      	ldr	r6, [r4, #12]
 800b040:	1b49      	subs	r1, r1, r5
 800b042:	290f      	cmp	r1, #15
 800b044:	dd10      	ble.n	800b068 <_malloc_r+0x2e8>
 800b046:	2201      	movs	r2, #1
 800b048:	1963      	adds	r3, r4, r5
 800b04a:	4315      	orrs	r5, r2
 800b04c:	6065      	str	r5, [r4, #4]
 800b04e:	68a5      	ldr	r5, [r4, #8]
 800b050:	430a      	orrs	r2, r1
 800b052:	60ee      	str	r6, [r5, #12]
 800b054:	60b5      	str	r5, [r6, #8]
 800b056:	6143      	str	r3, [r0, #20]
 800b058:	6103      	str	r3, [r0, #16]
 800b05a:	4814      	ldr	r0, [pc, #80]	; (800b0ac <_malloc_r+0x32c>)
 800b05c:	605a      	str	r2, [r3, #4]
 800b05e:	60d8      	str	r0, [r3, #12]
 800b060:	6098      	str	r0, [r3, #8]
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	50e1      	str	r1, [r4, r3]
 800b066:	e6eb      	b.n	800ae40 <_malloc_r+0xc0>
 800b068:	2900      	cmp	r1, #0
 800b06a:	db09      	blt.n	800b080 <_malloc_r+0x300>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	18e1      	adds	r1, r4, r3
 800b070:	2301      	movs	r3, #1
 800b072:	684a      	ldr	r2, [r1, #4]
 800b074:	4313      	orrs	r3, r2
 800b076:	604b      	str	r3, [r1, #4]
 800b078:	68a3      	ldr	r3, [r4, #8]
 800b07a:	60de      	str	r6, [r3, #12]
 800b07c:	60b3      	str	r3, [r6, #8]
 800b07e:	e6df      	b.n	800ae40 <_malloc_r+0xc0>
 800b080:	0034      	movs	r4, r6
 800b082:	e739      	b.n	800aef8 <_malloc_r+0x178>
 800b084:	2108      	movs	r1, #8
 800b086:	4249      	negs	r1, r1
 800b088:	448c      	add	ip, r1
 800b08a:	4661      	mov	r1, ip
 800b08c:	6889      	ldr	r1, [r1, #8]
 800b08e:	3b01      	subs	r3, #1
 800b090:	4561      	cmp	r1, ip
 800b092:	d100      	bne.n	800b096 <_malloc_r+0x316>
 800b094:	e73a      	b.n	800af0c <_malloc_r+0x18c>
 800b096:	e740      	b.n	800af1a <_malloc_r+0x19a>
 800b098:	3304      	adds	r3, #4
 800b09a:	0052      	lsls	r2, r2, #1
 800b09c:	420a      	tst	r2, r1
 800b09e:	d0fb      	beq.n	800b098 <_malloc_r+0x318>
 800b0a0:	e724      	b.n	800aeec <_malloc_r+0x16c>
 800b0a2:	9b02      	ldr	r3, [sp, #8]
 800b0a4:	e7fa      	b.n	800b09c <_malloc_r+0x31c>
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	20000028 	.word	0x20000028
 800b0ac:	20000030 	.word	0x20000030
 800b0b0:	00000554 	.word	0x00000554
 800b0b4:	20000c68 	.word	0x20000c68
 800b0b8:	20000430 	.word	0x20000430
 800b0bc:	20000c38 	.word	0x20000c38
 800b0c0:	20000c60 	.word	0x20000c60
 800b0c4:	20000c64 	.word	0x20000c64
 800b0c8:	4934      	ldr	r1, [pc, #208]	; (800b19c <_malloc_r+0x41c>)
 800b0ca:	6808      	ldr	r0, [r1, #0]
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d140      	bne.n	800b152 <_malloc_r+0x3d2>
 800b0d0:	600c      	str	r4, [r1, #0]
 800b0d2:	2107      	movs	r1, #7
 800b0d4:	0026      	movs	r6, r4
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	400e      	ands	r6, r1
 800b0da:	420c      	tst	r4, r1
 800b0dc:	d002      	beq.n	800b0e4 <_malloc_r+0x364>
 800b0de:	3308      	adds	r3, #8
 800b0e0:	1b9b      	subs	r3, r3, r6
 800b0e2:	18e4      	adds	r4, r4, r3
 800b0e4:	19e1      	adds	r1, r4, r7
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	9f05      	ldr	r7, [sp, #20]
 800b0ea:	9904      	ldr	r1, [sp, #16]
 800b0ec:	4017      	ands	r7, r2
 800b0ee:	18cb      	adds	r3, r1, r3
 800b0f0:	1bdf      	subs	r7, r3, r7
 800b0f2:	4017      	ands	r7, r2
 800b0f4:	0039      	movs	r1, r7
 800b0f6:	9801      	ldr	r0, [sp, #4]
 800b0f8:	f001 fa22 	bl	800c540 <_sbrk_r>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d107      	bne.n	800b110 <_malloc_r+0x390>
 800b100:	1e37      	subs	r7, r6, #0
 800b102:	9805      	ldr	r0, [sp, #20]
 800b104:	d004      	beq.n	800b110 <_malloc_r+0x390>
 800b106:	0030      	movs	r0, r6
 800b108:	2700      	movs	r7, #0
 800b10a:	9b05      	ldr	r3, [sp, #20]
 800b10c:	3808      	subs	r0, #8
 800b10e:	1818      	adds	r0, r3, r0
 800b110:	4a23      	ldr	r2, [pc, #140]	; (800b1a0 <_malloc_r+0x420>)
 800b112:	1b00      	subs	r0, r0, r4
 800b114:	6813      	ldr	r3, [r2, #0]
 800b116:	19c0      	adds	r0, r0, r7
 800b118:	19db      	adds	r3, r3, r7
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	2201      	movs	r2, #1
 800b11e:	4b21      	ldr	r3, [pc, #132]	; (800b1a4 <_malloc_r+0x424>)
 800b120:	9902      	ldr	r1, [sp, #8]
 800b122:	4310      	orrs	r0, r2
 800b124:	609c      	str	r4, [r3, #8]
 800b126:	6060      	str	r0, [r4, #4]
 800b128:	4299      	cmp	r1, r3
 800b12a:	d100      	bne.n	800b12e <_malloc_r+0x3ae>
 800b12c:	e73e      	b.n	800afac <_malloc_r+0x22c>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	2b0f      	cmp	r3, #15
 800b132:	d813      	bhi.n	800b15c <_malloc_r+0x3dc>
 800b134:	6062      	str	r2, [r4, #4]
 800b136:	2203      	movs	r2, #3
 800b138:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <_malloc_r+0x424>)
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4393      	bics	r3, r2
 800b140:	1b59      	subs	r1, r3, r5
 800b142:	42ab      	cmp	r3, r5
 800b144:	d301      	bcc.n	800b14a <_malloc_r+0x3ca>
 800b146:	290f      	cmp	r1, #15
 800b148:	dc1f      	bgt.n	800b18a <_malloc_r+0x40a>
 800b14a:	9801      	ldr	r0, [sp, #4]
 800b14c:	f000 f834 	bl	800b1b8 <__malloc_unlock>
 800b150:	e623      	b.n	800ad9a <_malloc_r+0x1a>
 800b152:	4913      	ldr	r1, [pc, #76]	; (800b1a0 <_malloc_r+0x420>)
 800b154:	1ba6      	subs	r6, r4, r6
 800b156:	18f6      	adds	r6, r6, r3
 800b158:	600e      	str	r6, [r1, #0]
 800b15a:	e7ba      	b.n	800b0d2 <_malloc_r+0x352>
 800b15c:	2107      	movs	r1, #7
 800b15e:	9b03      	ldr	r3, [sp, #12]
 800b160:	3b0c      	subs	r3, #12
 800b162:	438b      	bics	r3, r1
 800b164:	9902      	ldr	r1, [sp, #8]
 800b166:	6849      	ldr	r1, [r1, #4]
 800b168:	400a      	ands	r2, r1
 800b16a:	9902      	ldr	r1, [sp, #8]
 800b16c:	431a      	orrs	r2, r3
 800b16e:	604a      	str	r2, [r1, #4]
 800b170:	18ca      	adds	r2, r1, r3
 800b172:	2105      	movs	r1, #5
 800b174:	6051      	str	r1, [r2, #4]
 800b176:	6091      	str	r1, [r2, #8]
 800b178:	2b0f      	cmp	r3, #15
 800b17a:	d800      	bhi.n	800b17e <_malloc_r+0x3fe>
 800b17c:	e716      	b.n	800afac <_malloc_r+0x22c>
 800b17e:	9902      	ldr	r1, [sp, #8]
 800b180:	9801      	ldr	r0, [sp, #4]
 800b182:	3108      	adds	r1, #8
 800b184:	f001 fab6 	bl	800c6f4 <_free_r>
 800b188:	e710      	b.n	800afac <_malloc_r+0x22c>
 800b18a:	2201      	movs	r2, #1
 800b18c:	0013      	movs	r3, r2
 800b18e:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <_malloc_r+0x424>)
 800b190:	432b      	orrs	r3, r5
 800b192:	6884      	ldr	r4, [r0, #8]
 800b194:	6063      	str	r3, [r4, #4]
 800b196:	1963      	adds	r3, r4, r5
 800b198:	6083      	str	r3, [r0, #8]
 800b19a:	e623      	b.n	800ade4 <_malloc_r+0x64>
 800b19c:	20000430 	.word	0x20000430
 800b1a0:	20000c38 	.word	0x20000c38
 800b1a4:	20000028 	.word	0x20000028

0800b1a8 <__malloc_lock>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	4802      	ldr	r0, [pc, #8]	; (800b1b4 <__malloc_lock+0xc>)
 800b1ac:	f001 fa1a 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	46c0      	nop			; (mov r8, r8)
 800b1b4:	20000dad 	.word	0x20000dad

0800b1b8 <__malloc_unlock>:
 800b1b8:	b510      	push	{r4, lr}
 800b1ba:	4802      	ldr	r0, [pc, #8]	; (800b1c4 <__malloc_unlock+0xc>)
 800b1bc:	f001 fa13 	bl	800c5e6 <__retarget_lock_release_recursive>
 800b1c0:	bd10      	pop	{r4, pc}
 800b1c2:	46c0      	nop			; (mov r8, r8)
 800b1c4:	20000dad 	.word	0x20000dad

0800b1c8 <sulp>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	0016      	movs	r6, r2
 800b1cc:	000d      	movs	r5, r1
 800b1ce:	f002 f9e7 	bl	800d5a0 <__ulp>
 800b1d2:	2e00      	cmp	r6, #0
 800b1d4:	d00d      	beq.n	800b1f2 <sulp+0x2a>
 800b1d6:	236b      	movs	r3, #107	; 0x6b
 800b1d8:	006a      	lsls	r2, r5, #1
 800b1da:	0d52      	lsrs	r2, r2, #21
 800b1dc:	1a9b      	subs	r3, r3, r2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	dd07      	ble.n	800b1f2 <sulp+0x2a>
 800b1e2:	2400      	movs	r4, #0
 800b1e4:	4a03      	ldr	r2, [pc, #12]	; (800b1f4 <sulp+0x2c>)
 800b1e6:	051b      	lsls	r3, r3, #20
 800b1e8:	189d      	adds	r5, r3, r2
 800b1ea:	002b      	movs	r3, r5
 800b1ec:	0022      	movs	r2, r4
 800b1ee:	f7f6 fa3d 	bl	800166c <__aeabi_dmul>
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	3ff00000 	.word	0x3ff00000

0800b1f8 <_strtod_l>:
 800b1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1fa:	b0a1      	sub	sp, #132	; 0x84
 800b1fc:	9219      	str	r2, [sp, #100]	; 0x64
 800b1fe:	2200      	movs	r2, #0
 800b200:	2600      	movs	r6, #0
 800b202:	2700      	movs	r7, #0
 800b204:	9004      	str	r0, [sp, #16]
 800b206:	9107      	str	r1, [sp, #28]
 800b208:	921c      	str	r2, [sp, #112]	; 0x70
 800b20a:	911b      	str	r1, [sp, #108]	; 0x6c
 800b20c:	780a      	ldrb	r2, [r1, #0]
 800b20e:	2a2b      	cmp	r2, #43	; 0x2b
 800b210:	d055      	beq.n	800b2be <_strtod_l+0xc6>
 800b212:	d841      	bhi.n	800b298 <_strtod_l+0xa0>
 800b214:	2a0d      	cmp	r2, #13
 800b216:	d83b      	bhi.n	800b290 <_strtod_l+0x98>
 800b218:	2a08      	cmp	r2, #8
 800b21a:	d83b      	bhi.n	800b294 <_strtod_l+0x9c>
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	d044      	beq.n	800b2aa <_strtod_l+0xb2>
 800b220:	2200      	movs	r2, #0
 800b222:	920f      	str	r2, [sp, #60]	; 0x3c
 800b224:	2100      	movs	r1, #0
 800b226:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b228:	9109      	str	r1, [sp, #36]	; 0x24
 800b22a:	782a      	ldrb	r2, [r5, #0]
 800b22c:	2a30      	cmp	r2, #48	; 0x30
 800b22e:	d000      	beq.n	800b232 <_strtod_l+0x3a>
 800b230:	e085      	b.n	800b33e <_strtod_l+0x146>
 800b232:	786a      	ldrb	r2, [r5, #1]
 800b234:	3120      	adds	r1, #32
 800b236:	438a      	bics	r2, r1
 800b238:	2a58      	cmp	r2, #88	; 0x58
 800b23a:	d000      	beq.n	800b23e <_strtod_l+0x46>
 800b23c:	e075      	b.n	800b32a <_strtod_l+0x132>
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b242:	4a97      	ldr	r2, [pc, #604]	; (800b4a0 <_strtod_l+0x2a8>)
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	ab1c      	add	r3, sp, #112	; 0x70
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	9804      	ldr	r0, [sp, #16]
 800b24c:	ab1d      	add	r3, sp, #116	; 0x74
 800b24e:	a91b      	add	r1, sp, #108	; 0x6c
 800b250:	f001 fb6c 	bl	800c92c <__gethex>
 800b254:	230f      	movs	r3, #15
 800b256:	0002      	movs	r2, r0
 800b258:	401a      	ands	r2, r3
 800b25a:	0004      	movs	r4, r0
 800b25c:	9205      	str	r2, [sp, #20]
 800b25e:	4218      	tst	r0, r3
 800b260:	d005      	beq.n	800b26e <_strtod_l+0x76>
 800b262:	2a06      	cmp	r2, #6
 800b264:	d12d      	bne.n	800b2c2 <_strtod_l+0xca>
 800b266:	1c6b      	adds	r3, r5, #1
 800b268:	931b      	str	r3, [sp, #108]	; 0x6c
 800b26a:	2300      	movs	r3, #0
 800b26c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b26e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <_strtod_l+0x82>
 800b274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b276:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01b      	beq.n	800b2b8 <_strtod_l+0xc0>
 800b280:	2380      	movs	r3, #128	; 0x80
 800b282:	0032      	movs	r2, r6
 800b284:	061b      	lsls	r3, r3, #24
 800b286:	18fb      	adds	r3, r7, r3
 800b288:	0010      	movs	r0, r2
 800b28a:	0019      	movs	r1, r3
 800b28c:	b021      	add	sp, #132	; 0x84
 800b28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b290:	2a20      	cmp	r2, #32
 800b292:	d1c5      	bne.n	800b220 <_strtod_l+0x28>
 800b294:	3101      	adds	r1, #1
 800b296:	e7b8      	b.n	800b20a <_strtod_l+0x12>
 800b298:	2a2d      	cmp	r2, #45	; 0x2d
 800b29a:	d1c1      	bne.n	800b220 <_strtod_l+0x28>
 800b29c:	3a2c      	subs	r2, #44	; 0x2c
 800b29e:	920f      	str	r2, [sp, #60]	; 0x3c
 800b2a0:	1c4a      	adds	r2, r1, #1
 800b2a2:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2a4:	784a      	ldrb	r2, [r1, #1]
 800b2a6:	2a00      	cmp	r2, #0
 800b2a8:	d1bc      	bne.n	800b224 <_strtod_l+0x2c>
 800b2aa:	9b07      	ldr	r3, [sp, #28]
 800b2ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1dd      	bne.n	800b274 <_strtod_l+0x7c>
 800b2b8:	0032      	movs	r2, r6
 800b2ba:	003b      	movs	r3, r7
 800b2bc:	e7e4      	b.n	800b288 <_strtod_l+0x90>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	e7ed      	b.n	800b29e <_strtod_l+0xa6>
 800b2c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b2c4:	2a00      	cmp	r2, #0
 800b2c6:	d007      	beq.n	800b2d8 <_strtod_l+0xe0>
 800b2c8:	2135      	movs	r1, #53	; 0x35
 800b2ca:	a81e      	add	r0, sp, #120	; 0x78
 800b2cc:	f002 fa59 	bl	800d782 <__copybits>
 800b2d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b2d2:	9804      	ldr	r0, [sp, #16]
 800b2d4:	f001 fe56 	bl	800cf84 <_Bfree>
 800b2d8:	9805      	ldr	r0, [sp, #20]
 800b2da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2dc:	3801      	subs	r0, #1
 800b2de:	2804      	cmp	r0, #4
 800b2e0:	d806      	bhi.n	800b2f0 <_strtod_l+0xf8>
 800b2e2:	f7f4 ff17 	bl	8000114 <__gnu_thumb1_case_uqi>
 800b2e6:	0312      	.short	0x0312
 800b2e8:	1e1c      	.short	0x1e1c
 800b2ea:	12          	.byte	0x12
 800b2eb:	00          	.byte	0x00
 800b2ec:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b2ee:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b2f0:	05e4      	lsls	r4, r4, #23
 800b2f2:	d502      	bpl.n	800b2fa <_strtod_l+0x102>
 800b2f4:	2380      	movs	r3, #128	; 0x80
 800b2f6:	061b      	lsls	r3, r3, #24
 800b2f8:	431f      	orrs	r7, r3
 800b2fa:	4b6a      	ldr	r3, [pc, #424]	; (800b4a4 <_strtod_l+0x2ac>)
 800b2fc:	423b      	tst	r3, r7
 800b2fe:	d1b6      	bne.n	800b26e <_strtod_l+0x76>
 800b300:	f001 f944 	bl	800c58c <__errno>
 800b304:	2322      	movs	r3, #34	; 0x22
 800b306:	6003      	str	r3, [r0, #0]
 800b308:	e7b1      	b.n	800b26e <_strtod_l+0x76>
 800b30a:	4967      	ldr	r1, [pc, #412]	; (800b4a8 <_strtod_l+0x2b0>)
 800b30c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b30e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b310:	400a      	ands	r2, r1
 800b312:	4966      	ldr	r1, [pc, #408]	; (800b4ac <_strtod_l+0x2b4>)
 800b314:	185b      	adds	r3, r3, r1
 800b316:	051b      	lsls	r3, r3, #20
 800b318:	431a      	orrs	r2, r3
 800b31a:	0017      	movs	r7, r2
 800b31c:	e7e8      	b.n	800b2f0 <_strtod_l+0xf8>
 800b31e:	4f61      	ldr	r7, [pc, #388]	; (800b4a4 <_strtod_l+0x2ac>)
 800b320:	e7e6      	b.n	800b2f0 <_strtod_l+0xf8>
 800b322:	2601      	movs	r6, #1
 800b324:	4f62      	ldr	r7, [pc, #392]	; (800b4b0 <_strtod_l+0x2b8>)
 800b326:	4276      	negs	r6, r6
 800b328:	e7e2      	b.n	800b2f0 <_strtod_l+0xf8>
 800b32a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b330:	785b      	ldrb	r3, [r3, #1]
 800b332:	2b30      	cmp	r3, #48	; 0x30
 800b334:	d0f9      	beq.n	800b32a <_strtod_l+0x132>
 800b336:	2b00      	cmp	r3, #0
 800b338:	d099      	beq.n	800b26e <_strtod_l+0x76>
 800b33a:	2301      	movs	r3, #1
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	2500      	movs	r5, #0
 800b340:	220a      	movs	r2, #10
 800b342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b344:	950d      	str	r5, [sp, #52]	; 0x34
 800b346:	9310      	str	r3, [sp, #64]	; 0x40
 800b348:	9508      	str	r5, [sp, #32]
 800b34a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b34c:	7804      	ldrb	r4, [r0, #0]
 800b34e:	0023      	movs	r3, r4
 800b350:	3b30      	subs	r3, #48	; 0x30
 800b352:	b2d9      	uxtb	r1, r3
 800b354:	2909      	cmp	r1, #9
 800b356:	d927      	bls.n	800b3a8 <_strtod_l+0x1b0>
 800b358:	2201      	movs	r2, #1
 800b35a:	4956      	ldr	r1, [pc, #344]	; (800b4b4 <_strtod_l+0x2bc>)
 800b35c:	f001 f838 	bl	800c3d0 <strncmp>
 800b360:	2800      	cmp	r0, #0
 800b362:	d031      	beq.n	800b3c8 <_strtod_l+0x1d0>
 800b364:	2000      	movs	r0, #0
 800b366:	0023      	movs	r3, r4
 800b368:	4684      	mov	ip, r0
 800b36a:	9a08      	ldr	r2, [sp, #32]
 800b36c:	900c      	str	r0, [sp, #48]	; 0x30
 800b36e:	9205      	str	r2, [sp, #20]
 800b370:	2220      	movs	r2, #32
 800b372:	0019      	movs	r1, r3
 800b374:	4391      	bics	r1, r2
 800b376:	000a      	movs	r2, r1
 800b378:	2100      	movs	r1, #0
 800b37a:	9106      	str	r1, [sp, #24]
 800b37c:	2a45      	cmp	r2, #69	; 0x45
 800b37e:	d000      	beq.n	800b382 <_strtod_l+0x18a>
 800b380:	e0c2      	b.n	800b508 <_strtod_l+0x310>
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b386:	4303      	orrs	r3, r0
 800b388:	4313      	orrs	r3, r2
 800b38a:	428b      	cmp	r3, r1
 800b38c:	d08d      	beq.n	800b2aa <_strtod_l+0xb2>
 800b38e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b390:	9307      	str	r3, [sp, #28]
 800b392:	3301      	adds	r3, #1
 800b394:	931b      	str	r3, [sp, #108]	; 0x6c
 800b396:	9b07      	ldr	r3, [sp, #28]
 800b398:	785b      	ldrb	r3, [r3, #1]
 800b39a:	2b2b      	cmp	r3, #43	; 0x2b
 800b39c:	d071      	beq.n	800b482 <_strtod_l+0x28a>
 800b39e:	000c      	movs	r4, r1
 800b3a0:	2b2d      	cmp	r3, #45	; 0x2d
 800b3a2:	d174      	bne.n	800b48e <_strtod_l+0x296>
 800b3a4:	2401      	movs	r4, #1
 800b3a6:	e06d      	b.n	800b484 <_strtod_l+0x28c>
 800b3a8:	9908      	ldr	r1, [sp, #32]
 800b3aa:	2908      	cmp	r1, #8
 800b3ac:	dc09      	bgt.n	800b3c2 <_strtod_l+0x1ca>
 800b3ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3b0:	4351      	muls	r1, r2
 800b3b2:	185b      	adds	r3, r3, r1
 800b3b4:	930d      	str	r3, [sp, #52]	; 0x34
 800b3b6:	9b08      	ldr	r3, [sp, #32]
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	9308      	str	r3, [sp, #32]
 800b3be:	901b      	str	r0, [sp, #108]	; 0x6c
 800b3c0:	e7c3      	b.n	800b34a <_strtod_l+0x152>
 800b3c2:	4355      	muls	r5, r2
 800b3c4:	195d      	adds	r5, r3, r5
 800b3c6:	e7f6      	b.n	800b3b6 <_strtod_l+0x1be>
 800b3c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3ce:	9a08      	ldr	r2, [sp, #32]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	d03a      	beq.n	800b44c <_strtod_l+0x254>
 800b3d6:	900c      	str	r0, [sp, #48]	; 0x30
 800b3d8:	9205      	str	r2, [sp, #20]
 800b3da:	001a      	movs	r2, r3
 800b3dc:	3a30      	subs	r2, #48	; 0x30
 800b3de:	2a09      	cmp	r2, #9
 800b3e0:	d912      	bls.n	800b408 <_strtod_l+0x210>
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	4694      	mov	ip, r2
 800b3e6:	e7c3      	b.n	800b370 <_strtod_l+0x178>
 800b3e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	1c5a      	adds	r2, r3, #1
 800b3ee:	921b      	str	r2, [sp, #108]	; 0x6c
 800b3f0:	785b      	ldrb	r3, [r3, #1]
 800b3f2:	2b30      	cmp	r3, #48	; 0x30
 800b3f4:	d0f8      	beq.n	800b3e8 <_strtod_l+0x1f0>
 800b3f6:	001a      	movs	r2, r3
 800b3f8:	3a31      	subs	r2, #49	; 0x31
 800b3fa:	2a08      	cmp	r2, #8
 800b3fc:	d83c      	bhi.n	800b478 <_strtod_l+0x280>
 800b3fe:	900c      	str	r0, [sp, #48]	; 0x30
 800b400:	2000      	movs	r0, #0
 800b402:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b404:	9005      	str	r0, [sp, #20]
 800b406:	9210      	str	r2, [sp, #64]	; 0x40
 800b408:	001a      	movs	r2, r3
 800b40a:	1c41      	adds	r1, r0, #1
 800b40c:	3a30      	subs	r2, #48	; 0x30
 800b40e:	2b30      	cmp	r3, #48	; 0x30
 800b410:	d016      	beq.n	800b440 <_strtod_l+0x248>
 800b412:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b414:	185b      	adds	r3, r3, r1
 800b416:	930c      	str	r3, [sp, #48]	; 0x30
 800b418:	9b05      	ldr	r3, [sp, #20]
 800b41a:	210a      	movs	r1, #10
 800b41c:	469c      	mov	ip, r3
 800b41e:	4484      	add	ip, r0
 800b420:	4563      	cmp	r3, ip
 800b422:	d115      	bne.n	800b450 <_strtod_l+0x258>
 800b424:	9905      	ldr	r1, [sp, #20]
 800b426:	9b05      	ldr	r3, [sp, #20]
 800b428:	3101      	adds	r1, #1
 800b42a:	1809      	adds	r1, r1, r0
 800b42c:	181b      	adds	r3, r3, r0
 800b42e:	9105      	str	r1, [sp, #20]
 800b430:	2b08      	cmp	r3, #8
 800b432:	dc19      	bgt.n	800b468 <_strtod_l+0x270>
 800b434:	230a      	movs	r3, #10
 800b436:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b438:	434b      	muls	r3, r1
 800b43a:	2100      	movs	r1, #0
 800b43c:	18d3      	adds	r3, r2, r3
 800b43e:	930d      	str	r3, [sp, #52]	; 0x34
 800b440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b442:	0008      	movs	r0, r1
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	921b      	str	r2, [sp, #108]	; 0x6c
 800b448:	785b      	ldrb	r3, [r3, #1]
 800b44a:	e7c6      	b.n	800b3da <_strtod_l+0x1e2>
 800b44c:	9808      	ldr	r0, [sp, #32]
 800b44e:	e7d0      	b.n	800b3f2 <_strtod_l+0x1fa>
 800b450:	1c5c      	adds	r4, r3, #1
 800b452:	2b08      	cmp	r3, #8
 800b454:	dc04      	bgt.n	800b460 <_strtod_l+0x268>
 800b456:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b458:	434b      	muls	r3, r1
 800b45a:	930d      	str	r3, [sp, #52]	; 0x34
 800b45c:	0023      	movs	r3, r4
 800b45e:	e7df      	b.n	800b420 <_strtod_l+0x228>
 800b460:	2c10      	cmp	r4, #16
 800b462:	dcfb      	bgt.n	800b45c <_strtod_l+0x264>
 800b464:	434d      	muls	r5, r1
 800b466:	e7f9      	b.n	800b45c <_strtod_l+0x264>
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	2100      	movs	r1, #0
 800b46c:	2b10      	cmp	r3, #16
 800b46e:	dce7      	bgt.n	800b440 <_strtod_l+0x248>
 800b470:	230a      	movs	r3, #10
 800b472:	435d      	muls	r5, r3
 800b474:	1955      	adds	r5, r2, r5
 800b476:	e7e3      	b.n	800b440 <_strtod_l+0x248>
 800b478:	2200      	movs	r2, #0
 800b47a:	920c      	str	r2, [sp, #48]	; 0x30
 800b47c:	9205      	str	r2, [sp, #20]
 800b47e:	3201      	adds	r2, #1
 800b480:	e7b0      	b.n	800b3e4 <_strtod_l+0x1ec>
 800b482:	2400      	movs	r4, #0
 800b484:	9b07      	ldr	r3, [sp, #28]
 800b486:	3302      	adds	r3, #2
 800b488:	931b      	str	r3, [sp, #108]	; 0x6c
 800b48a:	9b07      	ldr	r3, [sp, #28]
 800b48c:	789b      	ldrb	r3, [r3, #2]
 800b48e:	001a      	movs	r2, r3
 800b490:	3a30      	subs	r2, #48	; 0x30
 800b492:	2a09      	cmp	r2, #9
 800b494:	d914      	bls.n	800b4c0 <_strtod_l+0x2c8>
 800b496:	9a07      	ldr	r2, [sp, #28]
 800b498:	921b      	str	r2, [sp, #108]	; 0x6c
 800b49a:	2200      	movs	r2, #0
 800b49c:	e033      	b.n	800b506 <_strtod_l+0x30e>
 800b49e:	46c0      	nop			; (mov r8, r8)
 800b4a0:	08014ac8 	.word	0x08014ac8
 800b4a4:	7ff00000 	.word	0x7ff00000
 800b4a8:	ffefffff 	.word	0xffefffff
 800b4ac:	00000433 	.word	0x00000433
 800b4b0:	7fffffff 	.word	0x7fffffff
 800b4b4:	08014ac4 	.word	0x08014ac4
 800b4b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4be:	785b      	ldrb	r3, [r3, #1]
 800b4c0:	2b30      	cmp	r3, #48	; 0x30
 800b4c2:	d0f9      	beq.n	800b4b8 <_strtod_l+0x2c0>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	9206      	str	r2, [sp, #24]
 800b4c8:	001a      	movs	r2, r3
 800b4ca:	3a31      	subs	r2, #49	; 0x31
 800b4cc:	2a08      	cmp	r2, #8
 800b4ce:	d81b      	bhi.n	800b508 <_strtod_l+0x310>
 800b4d0:	3b30      	subs	r3, #48	; 0x30
 800b4d2:	930e      	str	r3, [sp, #56]	; 0x38
 800b4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4d6:	9306      	str	r3, [sp, #24]
 800b4d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4da:	1c59      	adds	r1, r3, #1
 800b4dc:	911b      	str	r1, [sp, #108]	; 0x6c
 800b4de:	785b      	ldrb	r3, [r3, #1]
 800b4e0:	001a      	movs	r2, r3
 800b4e2:	3a30      	subs	r2, #48	; 0x30
 800b4e4:	2a09      	cmp	r2, #9
 800b4e6:	d93a      	bls.n	800b55e <_strtod_l+0x366>
 800b4e8:	9a06      	ldr	r2, [sp, #24]
 800b4ea:	1a8a      	subs	r2, r1, r2
 800b4ec:	49b2      	ldr	r1, [pc, #712]	; (800b7b8 <_strtod_l+0x5c0>)
 800b4ee:	9106      	str	r1, [sp, #24]
 800b4f0:	2a08      	cmp	r2, #8
 800b4f2:	dc04      	bgt.n	800b4fe <_strtod_l+0x306>
 800b4f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4f6:	9206      	str	r2, [sp, #24]
 800b4f8:	428a      	cmp	r2, r1
 800b4fa:	dd00      	ble.n	800b4fe <_strtod_l+0x306>
 800b4fc:	9106      	str	r1, [sp, #24]
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	d002      	beq.n	800b508 <_strtod_l+0x310>
 800b502:	9a06      	ldr	r2, [sp, #24]
 800b504:	4252      	negs	r2, r2
 800b506:	9206      	str	r2, [sp, #24]
 800b508:	9a05      	ldr	r2, [sp, #20]
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	d14d      	bne.n	800b5aa <_strtod_l+0x3b2>
 800b50e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b510:	4310      	orrs	r0, r2
 800b512:	d000      	beq.n	800b516 <_strtod_l+0x31e>
 800b514:	e6ab      	b.n	800b26e <_strtod_l+0x76>
 800b516:	4662      	mov	r2, ip
 800b518:	2a00      	cmp	r2, #0
 800b51a:	d000      	beq.n	800b51e <_strtod_l+0x326>
 800b51c:	e6c5      	b.n	800b2aa <_strtod_l+0xb2>
 800b51e:	2b69      	cmp	r3, #105	; 0x69
 800b520:	d027      	beq.n	800b572 <_strtod_l+0x37a>
 800b522:	dc23      	bgt.n	800b56c <_strtod_l+0x374>
 800b524:	2b49      	cmp	r3, #73	; 0x49
 800b526:	d024      	beq.n	800b572 <_strtod_l+0x37a>
 800b528:	2b4e      	cmp	r3, #78	; 0x4e
 800b52a:	d000      	beq.n	800b52e <_strtod_l+0x336>
 800b52c:	e6bd      	b.n	800b2aa <_strtod_l+0xb2>
 800b52e:	49a3      	ldr	r1, [pc, #652]	; (800b7bc <_strtod_l+0x5c4>)
 800b530:	a81b      	add	r0, sp, #108	; 0x6c
 800b532:	f001 fc31 	bl	800cd98 <__match>
 800b536:	2800      	cmp	r0, #0
 800b538:	d100      	bne.n	800b53c <_strtod_l+0x344>
 800b53a:	e6b6      	b.n	800b2aa <_strtod_l+0xb2>
 800b53c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b28      	cmp	r3, #40	; 0x28
 800b542:	d12c      	bne.n	800b59e <_strtod_l+0x3a6>
 800b544:	499e      	ldr	r1, [pc, #632]	; (800b7c0 <_strtod_l+0x5c8>)
 800b546:	aa1e      	add	r2, sp, #120	; 0x78
 800b548:	a81b      	add	r0, sp, #108	; 0x6c
 800b54a:	f001 fc39 	bl	800cdc0 <__hexnan>
 800b54e:	2805      	cmp	r0, #5
 800b550:	d125      	bne.n	800b59e <_strtod_l+0x3a6>
 800b552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b554:	4a9b      	ldr	r2, [pc, #620]	; (800b7c4 <_strtod_l+0x5cc>)
 800b556:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b558:	431a      	orrs	r2, r3
 800b55a:	0017      	movs	r7, r2
 800b55c:	e687      	b.n	800b26e <_strtod_l+0x76>
 800b55e:	220a      	movs	r2, #10
 800b560:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b562:	434a      	muls	r2, r1
 800b564:	18d2      	adds	r2, r2, r3
 800b566:	3a30      	subs	r2, #48	; 0x30
 800b568:	920e      	str	r2, [sp, #56]	; 0x38
 800b56a:	e7b5      	b.n	800b4d8 <_strtod_l+0x2e0>
 800b56c:	2b6e      	cmp	r3, #110	; 0x6e
 800b56e:	d0de      	beq.n	800b52e <_strtod_l+0x336>
 800b570:	e69b      	b.n	800b2aa <_strtod_l+0xb2>
 800b572:	4995      	ldr	r1, [pc, #596]	; (800b7c8 <_strtod_l+0x5d0>)
 800b574:	a81b      	add	r0, sp, #108	; 0x6c
 800b576:	f001 fc0f 	bl	800cd98 <__match>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d100      	bne.n	800b580 <_strtod_l+0x388>
 800b57e:	e694      	b.n	800b2aa <_strtod_l+0xb2>
 800b580:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b582:	4992      	ldr	r1, [pc, #584]	; (800b7cc <_strtod_l+0x5d4>)
 800b584:	3b01      	subs	r3, #1
 800b586:	a81b      	add	r0, sp, #108	; 0x6c
 800b588:	931b      	str	r3, [sp, #108]	; 0x6c
 800b58a:	f001 fc05 	bl	800cd98 <__match>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d102      	bne.n	800b598 <_strtod_l+0x3a0>
 800b592:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b594:	3301      	adds	r3, #1
 800b596:	931b      	str	r3, [sp, #108]	; 0x6c
 800b598:	2600      	movs	r6, #0
 800b59a:	4f8a      	ldr	r7, [pc, #552]	; (800b7c4 <_strtod_l+0x5cc>)
 800b59c:	e667      	b.n	800b26e <_strtod_l+0x76>
 800b59e:	488c      	ldr	r0, [pc, #560]	; (800b7d0 <_strtod_l+0x5d8>)
 800b5a0:	f001 f836 	bl	800c610 <nan>
 800b5a4:	0006      	movs	r6, r0
 800b5a6:	000f      	movs	r7, r1
 800b5a8:	e661      	b.n	800b26e <_strtod_l+0x76>
 800b5aa:	9b06      	ldr	r3, [sp, #24]
 800b5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ae:	1a9b      	subs	r3, r3, r2
 800b5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b2:	9b08      	ldr	r3, [sp, #32]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <_strtod_l+0x3c4>
 800b5b8:	9b05      	ldr	r3, [sp, #20]
 800b5ba:	9308      	str	r3, [sp, #32]
 800b5bc:	9c05      	ldr	r4, [sp, #20]
 800b5be:	2c10      	cmp	r4, #16
 800b5c0:	dd00      	ble.n	800b5c4 <_strtod_l+0x3cc>
 800b5c2:	2410      	movs	r4, #16
 800b5c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b5c6:	f7f6 ff19 	bl	80023fc <__aeabi_ui2d>
 800b5ca:	9b05      	ldr	r3, [sp, #20]
 800b5cc:	0006      	movs	r6, r0
 800b5ce:	000f      	movs	r7, r1
 800b5d0:	2b09      	cmp	r3, #9
 800b5d2:	dd15      	ble.n	800b600 <_strtod_l+0x408>
 800b5d4:	0022      	movs	r2, r4
 800b5d6:	4b7f      	ldr	r3, [pc, #508]	; (800b7d4 <_strtod_l+0x5dc>)
 800b5d8:	3a09      	subs	r2, #9
 800b5da:	00d2      	lsls	r2, r2, #3
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	f7f6 f843 	bl	800166c <__aeabi_dmul>
 800b5e6:	0006      	movs	r6, r0
 800b5e8:	0028      	movs	r0, r5
 800b5ea:	000f      	movs	r7, r1
 800b5ec:	f7f6 ff06 	bl	80023fc <__aeabi_ui2d>
 800b5f0:	0002      	movs	r2, r0
 800b5f2:	000b      	movs	r3, r1
 800b5f4:	0030      	movs	r0, r6
 800b5f6:	0039      	movs	r1, r7
 800b5f8:	f7f5 f8de 	bl	80007b8 <__aeabi_dadd>
 800b5fc:	0006      	movs	r6, r0
 800b5fe:	000f      	movs	r7, r1
 800b600:	9b05      	ldr	r3, [sp, #20]
 800b602:	2b0f      	cmp	r3, #15
 800b604:	dc39      	bgt.n	800b67a <_strtod_l+0x482>
 800b606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d100      	bne.n	800b60e <_strtod_l+0x416>
 800b60c:	e62f      	b.n	800b26e <_strtod_l+0x76>
 800b60e:	dd24      	ble.n	800b65a <_strtod_l+0x462>
 800b610:	2b16      	cmp	r3, #22
 800b612:	dc09      	bgt.n	800b628 <_strtod_l+0x430>
 800b614:	496f      	ldr	r1, [pc, #444]	; (800b7d4 <_strtod_l+0x5dc>)
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	18c9      	adds	r1, r1, r3
 800b61a:	0032      	movs	r2, r6
 800b61c:	6808      	ldr	r0, [r1, #0]
 800b61e:	6849      	ldr	r1, [r1, #4]
 800b620:	003b      	movs	r3, r7
 800b622:	f7f6 f823 	bl	800166c <__aeabi_dmul>
 800b626:	e7bd      	b.n	800b5a4 <_strtod_l+0x3ac>
 800b628:	2325      	movs	r3, #37	; 0x25
 800b62a:	9a05      	ldr	r2, [sp, #20]
 800b62c:	1a9b      	subs	r3, r3, r2
 800b62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b630:	4293      	cmp	r3, r2
 800b632:	db22      	blt.n	800b67a <_strtod_l+0x482>
 800b634:	240f      	movs	r4, #15
 800b636:	9b05      	ldr	r3, [sp, #20]
 800b638:	4d66      	ldr	r5, [pc, #408]	; (800b7d4 <_strtod_l+0x5dc>)
 800b63a:	1ae4      	subs	r4, r4, r3
 800b63c:	00e1      	lsls	r1, r4, #3
 800b63e:	1869      	adds	r1, r5, r1
 800b640:	0032      	movs	r2, r6
 800b642:	6808      	ldr	r0, [r1, #0]
 800b644:	6849      	ldr	r1, [r1, #4]
 800b646:	003b      	movs	r3, r7
 800b648:	f7f6 f810 	bl	800166c <__aeabi_dmul>
 800b64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64e:	1b1c      	subs	r4, r3, r4
 800b650:	00e4      	lsls	r4, r4, #3
 800b652:	192d      	adds	r5, r5, r4
 800b654:	682a      	ldr	r2, [r5, #0]
 800b656:	686b      	ldr	r3, [r5, #4]
 800b658:	e7e3      	b.n	800b622 <_strtod_l+0x42a>
 800b65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65c:	3316      	adds	r3, #22
 800b65e:	db0c      	blt.n	800b67a <_strtod_l+0x482>
 800b660:	9906      	ldr	r1, [sp, #24]
 800b662:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b664:	4b5b      	ldr	r3, [pc, #364]	; (800b7d4 <_strtod_l+0x5dc>)
 800b666:	1a52      	subs	r2, r2, r1
 800b668:	00d2      	lsls	r2, r2, #3
 800b66a:	189b      	adds	r3, r3, r2
 800b66c:	0030      	movs	r0, r6
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	0039      	movs	r1, r7
 800b674:	f7f5 fc00 	bl	8000e78 <__aeabi_ddiv>
 800b678:	e794      	b.n	800b5a4 <_strtod_l+0x3ac>
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	1b1c      	subs	r4, r3, r4
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	18e4      	adds	r4, r4, r3
 800b682:	2c00      	cmp	r4, #0
 800b684:	dd72      	ble.n	800b76c <_strtod_l+0x574>
 800b686:	220f      	movs	r2, #15
 800b688:	0023      	movs	r3, r4
 800b68a:	4013      	ands	r3, r2
 800b68c:	4214      	tst	r4, r2
 800b68e:	d00a      	beq.n	800b6a6 <_strtod_l+0x4ae>
 800b690:	4950      	ldr	r1, [pc, #320]	; (800b7d4 <_strtod_l+0x5dc>)
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	18c9      	adds	r1, r1, r3
 800b696:	0032      	movs	r2, r6
 800b698:	6808      	ldr	r0, [r1, #0]
 800b69a:	6849      	ldr	r1, [r1, #4]
 800b69c:	003b      	movs	r3, r7
 800b69e:	f7f5 ffe5 	bl	800166c <__aeabi_dmul>
 800b6a2:	0006      	movs	r6, r0
 800b6a4:	000f      	movs	r7, r1
 800b6a6:	230f      	movs	r3, #15
 800b6a8:	439c      	bics	r4, r3
 800b6aa:	d04a      	beq.n	800b742 <_strtod_l+0x54a>
 800b6ac:	3326      	adds	r3, #38	; 0x26
 800b6ae:	33ff      	adds	r3, #255	; 0xff
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	dd22      	ble.n	800b6fa <_strtod_l+0x502>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	9306      	str	r3, [sp, #24]
 800b6ba:	930d      	str	r3, [sp, #52]	; 0x34
 800b6bc:	9308      	str	r3, [sp, #32]
 800b6be:	2322      	movs	r3, #34	; 0x22
 800b6c0:	2600      	movs	r6, #0
 800b6c2:	9a04      	ldr	r2, [sp, #16]
 800b6c4:	4f3f      	ldr	r7, [pc, #252]	; (800b7c4 <_strtod_l+0x5cc>)
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6ca:	42b3      	cmp	r3, r6
 800b6cc:	d100      	bne.n	800b6d0 <_strtod_l+0x4d8>
 800b6ce:	e5ce      	b.n	800b26e <_strtod_l+0x76>
 800b6d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6d2:	9804      	ldr	r0, [sp, #16]
 800b6d4:	f001 fc56 	bl	800cf84 <_Bfree>
 800b6d8:	9908      	ldr	r1, [sp, #32]
 800b6da:	9804      	ldr	r0, [sp, #16]
 800b6dc:	f001 fc52 	bl	800cf84 <_Bfree>
 800b6e0:	9906      	ldr	r1, [sp, #24]
 800b6e2:	9804      	ldr	r0, [sp, #16]
 800b6e4:	f001 fc4e 	bl	800cf84 <_Bfree>
 800b6e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6ea:	9804      	ldr	r0, [sp, #16]
 800b6ec:	f001 fc4a 	bl	800cf84 <_Bfree>
 800b6f0:	9905      	ldr	r1, [sp, #20]
 800b6f2:	9804      	ldr	r0, [sp, #16]
 800b6f4:	f001 fc46 	bl	800cf84 <_Bfree>
 800b6f8:	e5b9      	b.n	800b26e <_strtod_l+0x76>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	0030      	movs	r0, r6
 800b6fe:	0039      	movs	r1, r7
 800b700:	4d35      	ldr	r5, [pc, #212]	; (800b7d8 <_strtod_l+0x5e0>)
 800b702:	1124      	asrs	r4, r4, #4
 800b704:	9307      	str	r3, [sp, #28]
 800b706:	2c01      	cmp	r4, #1
 800b708:	dc1e      	bgt.n	800b748 <_strtod_l+0x550>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <_strtod_l+0x51a>
 800b70e:	0006      	movs	r6, r0
 800b710:	000f      	movs	r7, r1
 800b712:	4b32      	ldr	r3, [pc, #200]	; (800b7dc <_strtod_l+0x5e4>)
 800b714:	9a07      	ldr	r2, [sp, #28]
 800b716:	18ff      	adds	r7, r7, r3
 800b718:	4b2f      	ldr	r3, [pc, #188]	; (800b7d8 <_strtod_l+0x5e0>)
 800b71a:	00d2      	lsls	r2, r2, #3
 800b71c:	189d      	adds	r5, r3, r2
 800b71e:	6828      	ldr	r0, [r5, #0]
 800b720:	6869      	ldr	r1, [r5, #4]
 800b722:	0032      	movs	r2, r6
 800b724:	003b      	movs	r3, r7
 800b726:	f7f5 ffa1 	bl	800166c <__aeabi_dmul>
 800b72a:	4b26      	ldr	r3, [pc, #152]	; (800b7c4 <_strtod_l+0x5cc>)
 800b72c:	4a2c      	ldr	r2, [pc, #176]	; (800b7e0 <_strtod_l+0x5e8>)
 800b72e:	0006      	movs	r6, r0
 800b730:	400b      	ands	r3, r1
 800b732:	4293      	cmp	r3, r2
 800b734:	d8be      	bhi.n	800b6b4 <_strtod_l+0x4bc>
 800b736:	4a2b      	ldr	r2, [pc, #172]	; (800b7e4 <_strtod_l+0x5ec>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d913      	bls.n	800b764 <_strtod_l+0x56c>
 800b73c:	2601      	movs	r6, #1
 800b73e:	4f2a      	ldr	r7, [pc, #168]	; (800b7e8 <_strtod_l+0x5f0>)
 800b740:	4276      	negs	r6, r6
 800b742:	2300      	movs	r3, #0
 800b744:	9307      	str	r3, [sp, #28]
 800b746:	e088      	b.n	800b85a <_strtod_l+0x662>
 800b748:	2201      	movs	r2, #1
 800b74a:	4214      	tst	r4, r2
 800b74c:	d004      	beq.n	800b758 <_strtod_l+0x560>
 800b74e:	682a      	ldr	r2, [r5, #0]
 800b750:	686b      	ldr	r3, [r5, #4]
 800b752:	f7f5 ff8b 	bl	800166c <__aeabi_dmul>
 800b756:	2301      	movs	r3, #1
 800b758:	9a07      	ldr	r2, [sp, #28]
 800b75a:	1064      	asrs	r4, r4, #1
 800b75c:	3201      	adds	r2, #1
 800b75e:	9207      	str	r2, [sp, #28]
 800b760:	3508      	adds	r5, #8
 800b762:	e7d0      	b.n	800b706 <_strtod_l+0x50e>
 800b764:	23d4      	movs	r3, #212	; 0xd4
 800b766:	049b      	lsls	r3, r3, #18
 800b768:	18cf      	adds	r7, r1, r3
 800b76a:	e7ea      	b.n	800b742 <_strtod_l+0x54a>
 800b76c:	2c00      	cmp	r4, #0
 800b76e:	d0e8      	beq.n	800b742 <_strtod_l+0x54a>
 800b770:	4264      	negs	r4, r4
 800b772:	230f      	movs	r3, #15
 800b774:	0022      	movs	r2, r4
 800b776:	401a      	ands	r2, r3
 800b778:	421c      	tst	r4, r3
 800b77a:	d00a      	beq.n	800b792 <_strtod_l+0x59a>
 800b77c:	4b15      	ldr	r3, [pc, #84]	; (800b7d4 <_strtod_l+0x5dc>)
 800b77e:	00d2      	lsls	r2, r2, #3
 800b780:	189b      	adds	r3, r3, r2
 800b782:	0030      	movs	r0, r6
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	0039      	movs	r1, r7
 800b78a:	f7f5 fb75 	bl	8000e78 <__aeabi_ddiv>
 800b78e:	0006      	movs	r6, r0
 800b790:	000f      	movs	r7, r1
 800b792:	1124      	asrs	r4, r4, #4
 800b794:	d0d5      	beq.n	800b742 <_strtod_l+0x54a>
 800b796:	2c1f      	cmp	r4, #31
 800b798:	dd28      	ble.n	800b7ec <_strtod_l+0x5f4>
 800b79a:	2300      	movs	r3, #0
 800b79c:	9305      	str	r3, [sp, #20]
 800b79e:	9306      	str	r3, [sp, #24]
 800b7a0:	930d      	str	r3, [sp, #52]	; 0x34
 800b7a2:	9308      	str	r3, [sp, #32]
 800b7a4:	2322      	movs	r3, #34	; 0x22
 800b7a6:	9a04      	ldr	r2, [sp, #16]
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ae:	2700      	movs	r7, #0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d18d      	bne.n	800b6d0 <_strtod_l+0x4d8>
 800b7b4:	e55b      	b.n	800b26e <_strtod_l+0x76>
 800b7b6:	46c0      	nop			; (mov r8, r8)
 800b7b8:	00004e1f 	.word	0x00004e1f
 800b7bc:	08014df9 	.word	0x08014df9
 800b7c0:	08014adc 	.word	0x08014adc
 800b7c4:	7ff00000 	.word	0x7ff00000
 800b7c8:	08014df1 	.word	0x08014df1
 800b7cc:	08014ea7 	.word	0x08014ea7
 800b7d0:	08014ea3 	.word	0x08014ea3
 800b7d4:	08014d18 	.word	0x08014d18
 800b7d8:	08014cf0 	.word	0x08014cf0
 800b7dc:	fcb00000 	.word	0xfcb00000
 800b7e0:	7ca00000 	.word	0x7ca00000
 800b7e4:	7c900000 	.word	0x7c900000
 800b7e8:	7fefffff 	.word	0x7fefffff
 800b7ec:	2310      	movs	r3, #16
 800b7ee:	0022      	movs	r2, r4
 800b7f0:	401a      	ands	r2, r3
 800b7f2:	9207      	str	r2, [sp, #28]
 800b7f4:	421c      	tst	r4, r3
 800b7f6:	d001      	beq.n	800b7fc <_strtod_l+0x604>
 800b7f8:	335a      	adds	r3, #90	; 0x5a
 800b7fa:	9307      	str	r3, [sp, #28]
 800b7fc:	0030      	movs	r0, r6
 800b7fe:	0039      	movs	r1, r7
 800b800:	2300      	movs	r3, #0
 800b802:	4dc4      	ldr	r5, [pc, #784]	; (800bb14 <_strtod_l+0x91c>)
 800b804:	2201      	movs	r2, #1
 800b806:	4214      	tst	r4, r2
 800b808:	d004      	beq.n	800b814 <_strtod_l+0x61c>
 800b80a:	682a      	ldr	r2, [r5, #0]
 800b80c:	686b      	ldr	r3, [r5, #4]
 800b80e:	f7f5 ff2d 	bl	800166c <__aeabi_dmul>
 800b812:	2301      	movs	r3, #1
 800b814:	1064      	asrs	r4, r4, #1
 800b816:	3508      	adds	r5, #8
 800b818:	2c00      	cmp	r4, #0
 800b81a:	d1f3      	bne.n	800b804 <_strtod_l+0x60c>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <_strtod_l+0x62c>
 800b820:	0006      	movs	r6, r0
 800b822:	000f      	movs	r7, r1
 800b824:	9b07      	ldr	r3, [sp, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00f      	beq.n	800b84a <_strtod_l+0x652>
 800b82a:	236b      	movs	r3, #107	; 0x6b
 800b82c:	007a      	lsls	r2, r7, #1
 800b82e:	0d52      	lsrs	r2, r2, #21
 800b830:	0039      	movs	r1, r7
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd08      	ble.n	800b84a <_strtod_l+0x652>
 800b838:	2b1f      	cmp	r3, #31
 800b83a:	dc00      	bgt.n	800b83e <_strtod_l+0x646>
 800b83c:	e121      	b.n	800ba82 <_strtod_l+0x88a>
 800b83e:	2600      	movs	r6, #0
 800b840:	2b34      	cmp	r3, #52	; 0x34
 800b842:	dc00      	bgt.n	800b846 <_strtod_l+0x64e>
 800b844:	e116      	b.n	800ba74 <_strtod_l+0x87c>
 800b846:	27dc      	movs	r7, #220	; 0xdc
 800b848:	04bf      	lsls	r7, r7, #18
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	0030      	movs	r0, r6
 800b850:	0039      	movs	r1, r7
 800b852:	f7f4 fdf9 	bl	8000448 <__aeabi_dcmpeq>
 800b856:	2800      	cmp	r0, #0
 800b858:	d19f      	bne.n	800b79a <_strtod_l+0x5a2>
 800b85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b85c:	9a08      	ldr	r2, [sp, #32]
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	9804      	ldr	r0, [sp, #16]
 800b866:	f001 fbdb 	bl	800d020 <__s2b>
 800b86a:	900d      	str	r0, [sp, #52]	; 0x34
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d100      	bne.n	800b872 <_strtod_l+0x67a>
 800b870:	e720      	b.n	800b6b4 <_strtod_l+0x4bc>
 800b872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b874:	9906      	ldr	r1, [sp, #24]
 800b876:	17da      	asrs	r2, r3, #31
 800b878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b87a:	1a5b      	subs	r3, r3, r1
 800b87c:	401a      	ands	r2, r3
 800b87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b880:	9215      	str	r2, [sp, #84]	; 0x54
 800b882:	43db      	mvns	r3, r3
 800b884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b886:	17db      	asrs	r3, r3, #31
 800b888:	401a      	ands	r2, r3
 800b88a:	2300      	movs	r3, #0
 800b88c:	9218      	str	r2, [sp, #96]	; 0x60
 800b88e:	9305      	str	r3, [sp, #20]
 800b890:	9306      	str	r3, [sp, #24]
 800b892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b894:	9804      	ldr	r0, [sp, #16]
 800b896:	6859      	ldr	r1, [r3, #4]
 800b898:	f001 fb4c 	bl	800cf34 <_Balloc>
 800b89c:	9008      	str	r0, [sp, #32]
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d100      	bne.n	800b8a4 <_strtod_l+0x6ac>
 800b8a2:	e70c      	b.n	800b6be <_strtod_l+0x4c6>
 800b8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8a6:	300c      	adds	r0, #12
 800b8a8:	0019      	movs	r1, r3
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	310c      	adds	r1, #12
 800b8ae:	3202      	adds	r2, #2
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	f000 fea4 	bl	800c5fe <memcpy>
 800b8b6:	ab1e      	add	r3, sp, #120	; 0x78
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	ab1d      	add	r3, sp, #116	; 0x74
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	0032      	movs	r2, r6
 800b8c0:	003b      	movs	r3, r7
 800b8c2:	9804      	ldr	r0, [sp, #16]
 800b8c4:	9610      	str	r6, [sp, #64]	; 0x40
 800b8c6:	9711      	str	r7, [sp, #68]	; 0x44
 800b8c8:	f001 fed2 	bl	800d670 <__d2b>
 800b8cc:	901c      	str	r0, [sp, #112]	; 0x70
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d100      	bne.n	800b8d4 <_strtod_l+0x6dc>
 800b8d2:	e6f4      	b.n	800b6be <_strtod_l+0x4c6>
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	9804      	ldr	r0, [sp, #16]
 800b8d8:	f001 fc36 	bl	800d148 <__i2b>
 800b8dc:	9006      	str	r0, [sp, #24]
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d100      	bne.n	800b8e4 <_strtod_l+0x6ec>
 800b8e2:	e6ec      	b.n	800b6be <_strtod_l+0x4c6>
 800b8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b8ea:	1ad4      	subs	r4, r2, r3
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	db01      	blt.n	800b8f4 <_strtod_l+0x6fc>
 800b8f0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b8f2:	195d      	adds	r5, r3, r5
 800b8f4:	9907      	ldr	r1, [sp, #28]
 800b8f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b8f8:	1a5b      	subs	r3, r3, r1
 800b8fa:	2136      	movs	r1, #54	; 0x36
 800b8fc:	189b      	adds	r3, r3, r2
 800b8fe:	1a8a      	subs	r2, r1, r2
 800b900:	4985      	ldr	r1, [pc, #532]	; (800bb18 <_strtod_l+0x920>)
 800b902:	2001      	movs	r0, #1
 800b904:	468c      	mov	ip, r1
 800b906:	2100      	movs	r1, #0
 800b908:	3b01      	subs	r3, #1
 800b90a:	9114      	str	r1, [sp, #80]	; 0x50
 800b90c:	9012      	str	r0, [sp, #72]	; 0x48
 800b90e:	4563      	cmp	r3, ip
 800b910:	da07      	bge.n	800b922 <_strtod_l+0x72a>
 800b912:	4661      	mov	r1, ip
 800b914:	1ac9      	subs	r1, r1, r3
 800b916:	1a52      	subs	r2, r2, r1
 800b918:	291f      	cmp	r1, #31
 800b91a:	dd00      	ble.n	800b91e <_strtod_l+0x726>
 800b91c:	e0b6      	b.n	800ba8c <_strtod_l+0x894>
 800b91e:	4088      	lsls	r0, r1
 800b920:	9012      	str	r0, [sp, #72]	; 0x48
 800b922:	18ab      	adds	r3, r5, r2
 800b924:	930c      	str	r3, [sp, #48]	; 0x30
 800b926:	18a4      	adds	r4, r4, r2
 800b928:	9b07      	ldr	r3, [sp, #28]
 800b92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b92c:	191c      	adds	r4, r3, r4
 800b92e:	002b      	movs	r3, r5
 800b930:	4295      	cmp	r5, r2
 800b932:	dd00      	ble.n	800b936 <_strtod_l+0x73e>
 800b934:	0013      	movs	r3, r2
 800b936:	42a3      	cmp	r3, r4
 800b938:	dd00      	ble.n	800b93c <_strtod_l+0x744>
 800b93a:	0023      	movs	r3, r4
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	dd04      	ble.n	800b94a <_strtod_l+0x752>
 800b940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b942:	1ae4      	subs	r4, r4, r3
 800b944:	1ad2      	subs	r2, r2, r3
 800b946:	920c      	str	r2, [sp, #48]	; 0x30
 800b948:	1aed      	subs	r5, r5, r3
 800b94a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dd17      	ble.n	800b980 <_strtod_l+0x788>
 800b950:	001a      	movs	r2, r3
 800b952:	9906      	ldr	r1, [sp, #24]
 800b954:	9804      	ldr	r0, [sp, #16]
 800b956:	f001 fcbf 	bl	800d2d8 <__pow5mult>
 800b95a:	9006      	str	r0, [sp, #24]
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d100      	bne.n	800b962 <_strtod_l+0x76a>
 800b960:	e6ad      	b.n	800b6be <_strtod_l+0x4c6>
 800b962:	0001      	movs	r1, r0
 800b964:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b966:	9804      	ldr	r0, [sp, #16]
 800b968:	f001 fc06 	bl	800d178 <__multiply>
 800b96c:	900e      	str	r0, [sp, #56]	; 0x38
 800b96e:	2800      	cmp	r0, #0
 800b970:	d100      	bne.n	800b974 <_strtod_l+0x77c>
 800b972:	e6a4      	b.n	800b6be <_strtod_l+0x4c6>
 800b974:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b976:	9804      	ldr	r0, [sp, #16]
 800b978:	f001 fb04 	bl	800cf84 <_Bfree>
 800b97c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b97e:	931c      	str	r3, [sp, #112]	; 0x70
 800b980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b982:	2b00      	cmp	r3, #0
 800b984:	dd00      	ble.n	800b988 <_strtod_l+0x790>
 800b986:	e087      	b.n	800ba98 <_strtod_l+0x8a0>
 800b988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dd08      	ble.n	800b9a0 <_strtod_l+0x7a8>
 800b98e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b990:	9908      	ldr	r1, [sp, #32]
 800b992:	9804      	ldr	r0, [sp, #16]
 800b994:	f001 fca0 	bl	800d2d8 <__pow5mult>
 800b998:	9008      	str	r0, [sp, #32]
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d100      	bne.n	800b9a0 <_strtod_l+0x7a8>
 800b99e:	e68e      	b.n	800b6be <_strtod_l+0x4c6>
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	dd08      	ble.n	800b9b6 <_strtod_l+0x7be>
 800b9a4:	0022      	movs	r2, r4
 800b9a6:	9908      	ldr	r1, [sp, #32]
 800b9a8:	9804      	ldr	r0, [sp, #16]
 800b9aa:	f001 fcd7 	bl	800d35c <__lshift>
 800b9ae:	9008      	str	r0, [sp, #32]
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d100      	bne.n	800b9b6 <_strtod_l+0x7be>
 800b9b4:	e683      	b.n	800b6be <_strtod_l+0x4c6>
 800b9b6:	2d00      	cmp	r5, #0
 800b9b8:	dd08      	ble.n	800b9cc <_strtod_l+0x7d4>
 800b9ba:	002a      	movs	r2, r5
 800b9bc:	9906      	ldr	r1, [sp, #24]
 800b9be:	9804      	ldr	r0, [sp, #16]
 800b9c0:	f001 fccc 	bl	800d35c <__lshift>
 800b9c4:	9006      	str	r0, [sp, #24]
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d100      	bne.n	800b9cc <_strtod_l+0x7d4>
 800b9ca:	e678      	b.n	800b6be <_strtod_l+0x4c6>
 800b9cc:	9a08      	ldr	r2, [sp, #32]
 800b9ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9d0:	9804      	ldr	r0, [sp, #16]
 800b9d2:	f001 fd4d 	bl	800d470 <__mdiff>
 800b9d6:	9005      	str	r0, [sp, #20]
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d100      	bne.n	800b9de <_strtod_l+0x7e6>
 800b9dc:	e66f      	b.n	800b6be <_strtod_l+0x4c6>
 800b9de:	2200      	movs	r2, #0
 800b9e0:	68c3      	ldr	r3, [r0, #12]
 800b9e2:	9906      	ldr	r1, [sp, #24]
 800b9e4:	60c2      	str	r2, [r0, #12]
 800b9e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9e8:	f001 fd26 	bl	800d438 <__mcmp>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	da5d      	bge.n	800baac <_strtod_l+0x8b4>
 800b9f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9f2:	4333      	orrs	r3, r6
 800b9f4:	d000      	beq.n	800b9f8 <_strtod_l+0x800>
 800b9f6:	e088      	b.n	800bb0a <_strtod_l+0x912>
 800b9f8:	033b      	lsls	r3, r7, #12
 800b9fa:	d000      	beq.n	800b9fe <_strtod_l+0x806>
 800b9fc:	e085      	b.n	800bb0a <_strtod_l+0x912>
 800b9fe:	22d6      	movs	r2, #214	; 0xd6
 800ba00:	4b46      	ldr	r3, [pc, #280]	; (800bb1c <_strtod_l+0x924>)
 800ba02:	04d2      	lsls	r2, r2, #19
 800ba04:	403b      	ands	r3, r7
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d97f      	bls.n	800bb0a <_strtod_l+0x912>
 800ba0a:	9b05      	ldr	r3, [sp, #20]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d103      	bne.n	800ba1a <_strtod_l+0x822>
 800ba12:	9b05      	ldr	r3, [sp, #20]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	dd77      	ble.n	800bb0a <_strtod_l+0x912>
 800ba1a:	9905      	ldr	r1, [sp, #20]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	9804      	ldr	r0, [sp, #16]
 800ba20:	f001 fc9c 	bl	800d35c <__lshift>
 800ba24:	9906      	ldr	r1, [sp, #24]
 800ba26:	9005      	str	r0, [sp, #20]
 800ba28:	f001 fd06 	bl	800d438 <__mcmp>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	dd6c      	ble.n	800bb0a <_strtod_l+0x912>
 800ba30:	9907      	ldr	r1, [sp, #28]
 800ba32:	003b      	movs	r3, r7
 800ba34:	4a39      	ldr	r2, [pc, #228]	; (800bb1c <_strtod_l+0x924>)
 800ba36:	2900      	cmp	r1, #0
 800ba38:	d100      	bne.n	800ba3c <_strtod_l+0x844>
 800ba3a:	e094      	b.n	800bb66 <_strtod_l+0x96e>
 800ba3c:	0011      	movs	r1, r2
 800ba3e:	20d6      	movs	r0, #214	; 0xd6
 800ba40:	4039      	ands	r1, r7
 800ba42:	04c0      	lsls	r0, r0, #19
 800ba44:	4281      	cmp	r1, r0
 800ba46:	dd00      	ble.n	800ba4a <_strtod_l+0x852>
 800ba48:	e08d      	b.n	800bb66 <_strtod_l+0x96e>
 800ba4a:	23dc      	movs	r3, #220	; 0xdc
 800ba4c:	049b      	lsls	r3, r3, #18
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	dc00      	bgt.n	800ba54 <_strtod_l+0x85c>
 800ba52:	e6a7      	b.n	800b7a4 <_strtod_l+0x5ac>
 800ba54:	0030      	movs	r0, r6
 800ba56:	0039      	movs	r1, r7
 800ba58:	4b31      	ldr	r3, [pc, #196]	; (800bb20 <_strtod_l+0x928>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f7f5 fe06 	bl	800166c <__aeabi_dmul>
 800ba60:	4b2e      	ldr	r3, [pc, #184]	; (800bb1c <_strtod_l+0x924>)
 800ba62:	0006      	movs	r6, r0
 800ba64:	000f      	movs	r7, r1
 800ba66:	420b      	tst	r3, r1
 800ba68:	d000      	beq.n	800ba6c <_strtod_l+0x874>
 800ba6a:	e631      	b.n	800b6d0 <_strtod_l+0x4d8>
 800ba6c:	2322      	movs	r3, #34	; 0x22
 800ba6e:	9a04      	ldr	r2, [sp, #16]
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	e62d      	b.n	800b6d0 <_strtod_l+0x4d8>
 800ba74:	234b      	movs	r3, #75	; 0x4b
 800ba76:	1a9a      	subs	r2, r3, r2
 800ba78:	3b4c      	subs	r3, #76	; 0x4c
 800ba7a:	4093      	lsls	r3, r2
 800ba7c:	4019      	ands	r1, r3
 800ba7e:	000f      	movs	r7, r1
 800ba80:	e6e3      	b.n	800b84a <_strtod_l+0x652>
 800ba82:	2201      	movs	r2, #1
 800ba84:	4252      	negs	r2, r2
 800ba86:	409a      	lsls	r2, r3
 800ba88:	4016      	ands	r6, r2
 800ba8a:	e6de      	b.n	800b84a <_strtod_l+0x652>
 800ba8c:	4925      	ldr	r1, [pc, #148]	; (800bb24 <_strtod_l+0x92c>)
 800ba8e:	1acb      	subs	r3, r1, r3
 800ba90:	0001      	movs	r1, r0
 800ba92:	4099      	lsls	r1, r3
 800ba94:	9114      	str	r1, [sp, #80]	; 0x50
 800ba96:	e743      	b.n	800b920 <_strtod_l+0x728>
 800ba98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba9c:	9804      	ldr	r0, [sp, #16]
 800ba9e:	f001 fc5d 	bl	800d35c <__lshift>
 800baa2:	901c      	str	r0, [sp, #112]	; 0x70
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d000      	beq.n	800baaa <_strtod_l+0x8b2>
 800baa8:	e76e      	b.n	800b988 <_strtod_l+0x790>
 800baaa:	e608      	b.n	800b6be <_strtod_l+0x4c6>
 800baac:	970e      	str	r7, [sp, #56]	; 0x38
 800baae:	2800      	cmp	r0, #0
 800bab0:	d177      	bne.n	800bba2 <_strtod_l+0x9aa>
 800bab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab4:	033b      	lsls	r3, r7, #12
 800bab6:	0b1b      	lsrs	r3, r3, #12
 800bab8:	2a00      	cmp	r2, #0
 800baba:	d039      	beq.n	800bb30 <_strtod_l+0x938>
 800babc:	4a1a      	ldr	r2, [pc, #104]	; (800bb28 <_strtod_l+0x930>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d139      	bne.n	800bb36 <_strtod_l+0x93e>
 800bac2:	2101      	movs	r1, #1
 800bac4:	9b07      	ldr	r3, [sp, #28]
 800bac6:	4249      	negs	r1, r1
 800bac8:	0032      	movs	r2, r6
 800baca:	0008      	movs	r0, r1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <_strtod_l+0x8f0>
 800bad0:	24d4      	movs	r4, #212	; 0xd4
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <_strtod_l+0x924>)
 800bad4:	0008      	movs	r0, r1
 800bad6:	403b      	ands	r3, r7
 800bad8:	04e4      	lsls	r4, r4, #19
 800bada:	42a3      	cmp	r3, r4
 800badc:	d804      	bhi.n	800bae8 <_strtod_l+0x8f0>
 800bade:	306c      	adds	r0, #108	; 0x6c
 800bae0:	0d1b      	lsrs	r3, r3, #20
 800bae2:	1ac3      	subs	r3, r0, r3
 800bae4:	4099      	lsls	r1, r3
 800bae6:	0008      	movs	r0, r1
 800bae8:	4282      	cmp	r2, r0
 800baea:	d124      	bne.n	800bb36 <_strtod_l+0x93e>
 800baec:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <_strtod_l+0x934>)
 800baee:	990e      	ldr	r1, [sp, #56]	; 0x38
 800baf0:	4299      	cmp	r1, r3
 800baf2:	d102      	bne.n	800bafa <_strtod_l+0x902>
 800baf4:	3201      	adds	r2, #1
 800baf6:	d100      	bne.n	800bafa <_strtod_l+0x902>
 800baf8:	e5e1      	b.n	800b6be <_strtod_l+0x4c6>
 800bafa:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <_strtod_l+0x924>)
 800bafc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bafe:	2600      	movs	r6, #0
 800bb00:	401a      	ands	r2, r3
 800bb02:	0013      	movs	r3, r2
 800bb04:	2280      	movs	r2, #128	; 0x80
 800bb06:	0352      	lsls	r2, r2, #13
 800bb08:	189f      	adds	r7, r3, r2
 800bb0a:	9b07      	ldr	r3, [sp, #28]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1a1      	bne.n	800ba54 <_strtod_l+0x85c>
 800bb10:	e5de      	b.n	800b6d0 <_strtod_l+0x4d8>
 800bb12:	46c0      	nop			; (mov r8, r8)
 800bb14:	08014af0 	.word	0x08014af0
 800bb18:	fffffc02 	.word	0xfffffc02
 800bb1c:	7ff00000 	.word	0x7ff00000
 800bb20:	39500000 	.word	0x39500000
 800bb24:	fffffbe2 	.word	0xfffffbe2
 800bb28:	000fffff 	.word	0x000fffff
 800bb2c:	7fefffff 	.word	0x7fefffff
 800bb30:	4333      	orrs	r3, r6
 800bb32:	d100      	bne.n	800bb36 <_strtod_l+0x93e>
 800bb34:	e77c      	b.n	800ba30 <_strtod_l+0x838>
 800bb36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01d      	beq.n	800bb78 <_strtod_l+0x980>
 800bb3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb40:	4213      	tst	r3, r2
 800bb42:	d0e2      	beq.n	800bb0a <_strtod_l+0x912>
 800bb44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb46:	0030      	movs	r0, r6
 800bb48:	0039      	movs	r1, r7
 800bb4a:	9a07      	ldr	r2, [sp, #28]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d017      	beq.n	800bb80 <_strtod_l+0x988>
 800bb50:	f7ff fb3a 	bl	800b1c8 <sulp>
 800bb54:	0002      	movs	r2, r0
 800bb56:	000b      	movs	r3, r1
 800bb58:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb5c:	f7f4 fe2c 	bl	80007b8 <__aeabi_dadd>
 800bb60:	0006      	movs	r6, r0
 800bb62:	000f      	movs	r7, r1
 800bb64:	e7d1      	b.n	800bb0a <_strtod_l+0x912>
 800bb66:	2601      	movs	r6, #1
 800bb68:	4013      	ands	r3, r2
 800bb6a:	4a98      	ldr	r2, [pc, #608]	; (800bdcc <_strtod_l+0xbd4>)
 800bb6c:	4276      	negs	r6, r6
 800bb6e:	189b      	adds	r3, r3, r2
 800bb70:	4a97      	ldr	r2, [pc, #604]	; (800bdd0 <_strtod_l+0xbd8>)
 800bb72:	431a      	orrs	r2, r3
 800bb74:	0017      	movs	r7, r2
 800bb76:	e7c8      	b.n	800bb0a <_strtod_l+0x912>
 800bb78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb7a:	4233      	tst	r3, r6
 800bb7c:	d0c5      	beq.n	800bb0a <_strtod_l+0x912>
 800bb7e:	e7e1      	b.n	800bb44 <_strtod_l+0x94c>
 800bb80:	f7ff fb22 	bl	800b1c8 <sulp>
 800bb84:	0002      	movs	r2, r0
 800bb86:	000b      	movs	r3, r1
 800bb88:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bb8c:	f7f6 f830 	bl	8001bf0 <__aeabi_dsub>
 800bb90:	2200      	movs	r2, #0
 800bb92:	2300      	movs	r3, #0
 800bb94:	0006      	movs	r6, r0
 800bb96:	000f      	movs	r7, r1
 800bb98:	f7f4 fc56 	bl	8000448 <__aeabi_dcmpeq>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d0b4      	beq.n	800bb0a <_strtod_l+0x912>
 800bba0:	e600      	b.n	800b7a4 <_strtod_l+0x5ac>
 800bba2:	9906      	ldr	r1, [sp, #24]
 800bba4:	9805      	ldr	r0, [sp, #20]
 800bba6:	f001 fdc3 	bl	800d730 <__ratio>
 800bbaa:	2380      	movs	r3, #128	; 0x80
 800bbac:	2200      	movs	r2, #0
 800bbae:	05db      	lsls	r3, r3, #23
 800bbb0:	0004      	movs	r4, r0
 800bbb2:	000d      	movs	r5, r1
 800bbb4:	f7f4 fc58 	bl	8000468 <__aeabi_dcmple>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d06d      	beq.n	800bc98 <_strtod_l+0xaa0>
 800bbbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d000      	beq.n	800bbc4 <_strtod_l+0x9cc>
 800bbc2:	e07e      	b.n	800bcc2 <_strtod_l+0xaca>
 800bbc4:	2e00      	cmp	r6, #0
 800bbc6:	d158      	bne.n	800bc7a <_strtod_l+0xa82>
 800bbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbca:	031b      	lsls	r3, r3, #12
 800bbcc:	d000      	beq.n	800bbd0 <_strtod_l+0x9d8>
 800bbce:	e07f      	b.n	800bcd0 <_strtod_l+0xad8>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	0020      	movs	r0, r4
 800bbd4:	0029      	movs	r1, r5
 800bbd6:	4b7f      	ldr	r3, [pc, #508]	; (800bdd4 <_strtod_l+0xbdc>)
 800bbd8:	f7f4 fc3c 	bl	8000454 <__aeabi_dcmplt>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d158      	bne.n	800bc92 <_strtod_l+0xa9a>
 800bbe0:	0020      	movs	r0, r4
 800bbe2:	0029      	movs	r1, r5
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4b7c      	ldr	r3, [pc, #496]	; (800bdd8 <_strtod_l+0xbe0>)
 800bbe8:	f7f5 fd40 	bl	800166c <__aeabi_dmul>
 800bbec:	0004      	movs	r4, r0
 800bbee:	000d      	movs	r5, r1
 800bbf0:	2380      	movs	r3, #128	; 0x80
 800bbf2:	061b      	lsls	r3, r3, #24
 800bbf4:	940a      	str	r4, [sp, #40]	; 0x28
 800bbf6:	18eb      	adds	r3, r5, r3
 800bbf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbfe:	9212      	str	r2, [sp, #72]	; 0x48
 800bc00:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc02:	4a76      	ldr	r2, [pc, #472]	; (800bddc <_strtod_l+0xbe4>)
 800bc04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc06:	4013      	ands	r3, r2
 800bc08:	9314      	str	r3, [sp, #80]	; 0x50
 800bc0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc0c:	4b74      	ldr	r3, [pc, #464]	; (800bde0 <_strtod_l+0xbe8>)
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d000      	beq.n	800bc14 <_strtod_l+0xa1c>
 800bc12:	e091      	b.n	800bd38 <_strtod_l+0xb40>
 800bc14:	4a73      	ldr	r2, [pc, #460]	; (800bde4 <_strtod_l+0xbec>)
 800bc16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc18:	4694      	mov	ip, r2
 800bc1a:	4463      	add	r3, ip
 800bc1c:	001f      	movs	r7, r3
 800bc1e:	0030      	movs	r0, r6
 800bc20:	0019      	movs	r1, r3
 800bc22:	f001 fcbd 	bl	800d5a0 <__ulp>
 800bc26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc2a:	f7f5 fd1f 	bl	800166c <__aeabi_dmul>
 800bc2e:	0032      	movs	r2, r6
 800bc30:	003b      	movs	r3, r7
 800bc32:	f7f4 fdc1 	bl	80007b8 <__aeabi_dadd>
 800bc36:	4a69      	ldr	r2, [pc, #420]	; (800bddc <_strtod_l+0xbe4>)
 800bc38:	4b6b      	ldr	r3, [pc, #428]	; (800bde8 <_strtod_l+0xbf0>)
 800bc3a:	0006      	movs	r6, r0
 800bc3c:	400a      	ands	r2, r1
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d949      	bls.n	800bcd6 <_strtod_l+0xade>
 800bc42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc44:	4b69      	ldr	r3, [pc, #420]	; (800bdec <_strtod_l+0xbf4>)
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d103      	bne.n	800bc52 <_strtod_l+0xa5a>
 800bc4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	d100      	bne.n	800bc52 <_strtod_l+0xa5a>
 800bc50:	e535      	b.n	800b6be <_strtod_l+0x4c6>
 800bc52:	2601      	movs	r6, #1
 800bc54:	4f65      	ldr	r7, [pc, #404]	; (800bdec <_strtod_l+0xbf4>)
 800bc56:	4276      	negs	r6, r6
 800bc58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc5a:	9804      	ldr	r0, [sp, #16]
 800bc5c:	f001 f992 	bl	800cf84 <_Bfree>
 800bc60:	9908      	ldr	r1, [sp, #32]
 800bc62:	9804      	ldr	r0, [sp, #16]
 800bc64:	f001 f98e 	bl	800cf84 <_Bfree>
 800bc68:	9906      	ldr	r1, [sp, #24]
 800bc6a:	9804      	ldr	r0, [sp, #16]
 800bc6c:	f001 f98a 	bl	800cf84 <_Bfree>
 800bc70:	9905      	ldr	r1, [sp, #20]
 800bc72:	9804      	ldr	r0, [sp, #16]
 800bc74:	f001 f986 	bl	800cf84 <_Bfree>
 800bc78:	e60b      	b.n	800b892 <_strtod_l+0x69a>
 800bc7a:	2e01      	cmp	r6, #1
 800bc7c:	d103      	bne.n	800bc86 <_strtod_l+0xa8e>
 800bc7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d100      	bne.n	800bc86 <_strtod_l+0xa8e>
 800bc84:	e58e      	b.n	800b7a4 <_strtod_l+0x5ac>
 800bc86:	2300      	movs	r3, #0
 800bc88:	4c59      	ldr	r4, [pc, #356]	; (800bdf0 <_strtod_l+0xbf8>)
 800bc8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc8c:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc90:	e01c      	b.n	800bccc <_strtod_l+0xad4>
 800bc92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc94:	4d50      	ldr	r5, [pc, #320]	; (800bdd8 <_strtod_l+0xbe0>)
 800bc96:	e7ab      	b.n	800bbf0 <_strtod_l+0x9f8>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	0020      	movs	r0, r4
 800bc9c:	0029      	movs	r1, r5
 800bc9e:	4b4e      	ldr	r3, [pc, #312]	; (800bdd8 <_strtod_l+0xbe0>)
 800bca0:	f7f5 fce4 	bl	800166c <__aeabi_dmul>
 800bca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bca6:	0004      	movs	r4, r0
 800bca8:	000b      	movs	r3, r1
 800bcaa:	000d      	movs	r5, r1
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	d104      	bne.n	800bcba <_strtod_l+0xac2>
 800bcb0:	2280      	movs	r2, #128	; 0x80
 800bcb2:	0612      	lsls	r2, r2, #24
 800bcb4:	900a      	str	r0, [sp, #40]	; 0x28
 800bcb6:	188b      	adds	r3, r1, r2
 800bcb8:	e79e      	b.n	800bbf8 <_strtod_l+0xa00>
 800bcba:	0002      	movs	r2, r0
 800bcbc:	920a      	str	r2, [sp, #40]	; 0x28
 800bcbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcc0:	e79b      	b.n	800bbfa <_strtod_l+0xa02>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4c43      	ldr	r4, [pc, #268]	; (800bdd4 <_strtod_l+0xbdc>)
 800bcc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc8:	940b      	str	r4, [sp, #44]	; 0x2c
 800bcca:	2400      	movs	r4, #0
 800bccc:	4d41      	ldr	r5, [pc, #260]	; (800bdd4 <_strtod_l+0xbdc>)
 800bcce:	e794      	b.n	800bbfa <_strtod_l+0xa02>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4c47      	ldr	r4, [pc, #284]	; (800bdf0 <_strtod_l+0xbf8>)
 800bcd4:	e7f7      	b.n	800bcc6 <_strtod_l+0xace>
 800bcd6:	23d4      	movs	r3, #212	; 0xd4
 800bcd8:	049b      	lsls	r3, r3, #18
 800bcda:	18cf      	adds	r7, r1, r3
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	970e      	str	r7, [sp, #56]	; 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1b9      	bne.n	800bc58 <_strtod_l+0xa60>
 800bce4:	4b3d      	ldr	r3, [pc, #244]	; (800bddc <_strtod_l+0xbe4>)
 800bce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bce8:	403b      	ands	r3, r7
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d1b4      	bne.n	800bc58 <_strtod_l+0xa60>
 800bcee:	0020      	movs	r0, r4
 800bcf0:	0029      	movs	r1, r5
 800bcf2:	f7f4 fc43 	bl	800057c <__aeabi_d2lz>
 800bcf6:	f7f4 fc7d 	bl	80005f4 <__aeabi_l2d>
 800bcfa:	0002      	movs	r2, r0
 800bcfc:	000b      	movs	r3, r1
 800bcfe:	0020      	movs	r0, r4
 800bd00:	0029      	movs	r1, r5
 800bd02:	f7f5 ff75 	bl	8001bf0 <__aeabi_dsub>
 800bd06:	033b      	lsls	r3, r7, #12
 800bd08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd0a:	0b1b      	lsrs	r3, r3, #12
 800bd0c:	4333      	orrs	r3, r6
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	0004      	movs	r4, r0
 800bd12:	000d      	movs	r5, r1
 800bd14:	4a37      	ldr	r2, [pc, #220]	; (800bdf4 <_strtod_l+0xbfc>)
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d054      	beq.n	800bdc4 <_strtod_l+0xbcc>
 800bd1a:	4b37      	ldr	r3, [pc, #220]	; (800bdf8 <_strtod_l+0xc00>)
 800bd1c:	f7f4 fb9a 	bl	8000454 <__aeabi_dcmplt>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d000      	beq.n	800bd26 <_strtod_l+0xb2e>
 800bd24:	e4d4      	b.n	800b6d0 <_strtod_l+0x4d8>
 800bd26:	0020      	movs	r0, r4
 800bd28:	0029      	movs	r1, r5
 800bd2a:	4a34      	ldr	r2, [pc, #208]	; (800bdfc <_strtod_l+0xc04>)
 800bd2c:	4b2a      	ldr	r3, [pc, #168]	; (800bdd8 <_strtod_l+0xbe0>)
 800bd2e:	f7f4 fba5 	bl	800047c <__aeabi_dcmpgt>
 800bd32:	2800      	cmp	r0, #0
 800bd34:	d090      	beq.n	800bc58 <_strtod_l+0xa60>
 800bd36:	e4cb      	b.n	800b6d0 <_strtod_l+0x4d8>
 800bd38:	9b07      	ldr	r3, [sp, #28]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d02b      	beq.n	800bd96 <_strtod_l+0xb9e>
 800bd3e:	23d4      	movs	r3, #212	; 0xd4
 800bd40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd42:	04db      	lsls	r3, r3, #19
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d826      	bhi.n	800bd96 <_strtod_l+0xb9e>
 800bd48:	0020      	movs	r0, r4
 800bd4a:	0029      	movs	r1, r5
 800bd4c:	4a2c      	ldr	r2, [pc, #176]	; (800be00 <_strtod_l+0xc08>)
 800bd4e:	4b2d      	ldr	r3, [pc, #180]	; (800be04 <_strtod_l+0xc0c>)
 800bd50:	f7f4 fb8a 	bl	8000468 <__aeabi_dcmple>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d017      	beq.n	800bd88 <_strtod_l+0xb90>
 800bd58:	0020      	movs	r0, r4
 800bd5a:	0029      	movs	r1, r5
 800bd5c:	f7f4 fbf0 	bl	8000540 <__aeabi_d2uiz>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d100      	bne.n	800bd66 <_strtod_l+0xb6e>
 800bd64:	3001      	adds	r0, #1
 800bd66:	f7f6 fb49 	bl	80023fc <__aeabi_ui2d>
 800bd6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd6c:	0004      	movs	r4, r0
 800bd6e:	000b      	movs	r3, r1
 800bd70:	000d      	movs	r5, r1
 800bd72:	2a00      	cmp	r2, #0
 800bd74:	d122      	bne.n	800bdbc <_strtod_l+0xbc4>
 800bd76:	2280      	movs	r2, #128	; 0x80
 800bd78:	0612      	lsls	r2, r2, #24
 800bd7a:	188b      	adds	r3, r1, r2
 800bd7c:	9016      	str	r0, [sp, #88]	; 0x58
 800bd7e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd84:	9212      	str	r2, [sp, #72]	; 0x48
 800bd86:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd88:	22d6      	movs	r2, #214	; 0xd6
 800bd8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd8c:	04d2      	lsls	r2, r2, #19
 800bd8e:	189b      	adds	r3, r3, r2
 800bd90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd92:	1a9b      	subs	r3, r3, r2
 800bd94:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd96:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd98:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd9a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bd9c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bd9e:	f001 fbff 	bl	800d5a0 <__ulp>
 800bda2:	0002      	movs	r2, r0
 800bda4:	000b      	movs	r3, r1
 800bda6:	0030      	movs	r0, r6
 800bda8:	0039      	movs	r1, r7
 800bdaa:	f7f5 fc5f 	bl	800166c <__aeabi_dmul>
 800bdae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdb2:	f7f4 fd01 	bl	80007b8 <__aeabi_dadd>
 800bdb6:	0006      	movs	r6, r0
 800bdb8:	000f      	movs	r7, r1
 800bdba:	e78f      	b.n	800bcdc <_strtod_l+0xae4>
 800bdbc:	0002      	movs	r2, r0
 800bdbe:	9216      	str	r2, [sp, #88]	; 0x58
 800bdc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdc2:	e7dd      	b.n	800bd80 <_strtod_l+0xb88>
 800bdc4:	4b10      	ldr	r3, [pc, #64]	; (800be08 <_strtod_l+0xc10>)
 800bdc6:	f7f4 fb45 	bl	8000454 <__aeabi_dcmplt>
 800bdca:	e7b2      	b.n	800bd32 <_strtod_l+0xb3a>
 800bdcc:	fff00000 	.word	0xfff00000
 800bdd0:	000fffff 	.word	0x000fffff
 800bdd4:	3ff00000 	.word	0x3ff00000
 800bdd8:	3fe00000 	.word	0x3fe00000
 800bddc:	7ff00000 	.word	0x7ff00000
 800bde0:	7fe00000 	.word	0x7fe00000
 800bde4:	fcb00000 	.word	0xfcb00000
 800bde8:	7c9fffff 	.word	0x7c9fffff
 800bdec:	7fefffff 	.word	0x7fefffff
 800bdf0:	bff00000 	.word	0xbff00000
 800bdf4:	94a03595 	.word	0x94a03595
 800bdf8:	3fdfffff 	.word	0x3fdfffff
 800bdfc:	35afe535 	.word	0x35afe535
 800be00:	ffc00000 	.word	0xffc00000
 800be04:	41dfffff 	.word	0x41dfffff
 800be08:	3fcfffff 	.word	0x3fcfffff

0800be0c <_strtod_r>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	4b02      	ldr	r3, [pc, #8]	; (800be18 <_strtod_r+0xc>)
 800be10:	f7ff f9f2 	bl	800b1f8 <_strtod_l>
 800be14:	bd10      	pop	{r4, pc}
 800be16:	46c0      	nop			; (mov r8, r8)
 800be18:	20000444 	.word	0x20000444

0800be1c <strtod>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	4c04      	ldr	r4, [pc, #16]	; (800be30 <strtod+0x14>)
 800be20:	000a      	movs	r2, r1
 800be22:	0001      	movs	r1, r0
 800be24:	4b03      	ldr	r3, [pc, #12]	; (800be34 <strtod+0x18>)
 800be26:	6820      	ldr	r0, [r4, #0]
 800be28:	f7ff f9e6 	bl	800b1f8 <_strtod_l>
 800be2c:	bd10      	pop	{r4, pc}
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	200006d0 	.word	0x200006d0
 800be34:	20000444 	.word	0x20000444

0800be38 <_strtol_l.constprop.0>:
 800be38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be3a:	b087      	sub	sp, #28
 800be3c:	001e      	movs	r6, r3
 800be3e:	9005      	str	r0, [sp, #20]
 800be40:	9101      	str	r1, [sp, #4]
 800be42:	9202      	str	r2, [sp, #8]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d048      	beq.n	800beda <_strtol_l.constprop.0+0xa2>
 800be48:	000b      	movs	r3, r1
 800be4a:	2e24      	cmp	r6, #36	; 0x24
 800be4c:	d845      	bhi.n	800beda <_strtol_l.constprop.0+0xa2>
 800be4e:	4a3b      	ldr	r2, [pc, #236]	; (800bf3c <_strtol_l.constprop.0+0x104>)
 800be50:	2108      	movs	r1, #8
 800be52:	4694      	mov	ip, r2
 800be54:	001a      	movs	r2, r3
 800be56:	4660      	mov	r0, ip
 800be58:	7814      	ldrb	r4, [r2, #0]
 800be5a:	3301      	adds	r3, #1
 800be5c:	5d00      	ldrb	r0, [r0, r4]
 800be5e:	001d      	movs	r5, r3
 800be60:	0007      	movs	r7, r0
 800be62:	400f      	ands	r7, r1
 800be64:	4208      	tst	r0, r1
 800be66:	d1f5      	bne.n	800be54 <_strtol_l.constprop.0+0x1c>
 800be68:	2c2d      	cmp	r4, #45	; 0x2d
 800be6a:	d13d      	bne.n	800bee8 <_strtol_l.constprop.0+0xb0>
 800be6c:	2701      	movs	r7, #1
 800be6e:	781c      	ldrb	r4, [r3, #0]
 800be70:	1c95      	adds	r5, r2, #2
 800be72:	2e00      	cmp	r6, #0
 800be74:	d05e      	beq.n	800bf34 <_strtol_l.constprop.0+0xfc>
 800be76:	2e10      	cmp	r6, #16
 800be78:	d109      	bne.n	800be8e <_strtol_l.constprop.0+0x56>
 800be7a:	2c30      	cmp	r4, #48	; 0x30
 800be7c:	d107      	bne.n	800be8e <_strtol_l.constprop.0+0x56>
 800be7e:	2220      	movs	r2, #32
 800be80:	782b      	ldrb	r3, [r5, #0]
 800be82:	4393      	bics	r3, r2
 800be84:	2b58      	cmp	r3, #88	; 0x58
 800be86:	d150      	bne.n	800bf2a <_strtol_l.constprop.0+0xf2>
 800be88:	2610      	movs	r6, #16
 800be8a:	786c      	ldrb	r4, [r5, #1]
 800be8c:	3502      	adds	r5, #2
 800be8e:	4b2c      	ldr	r3, [pc, #176]	; (800bf40 <_strtol_l.constprop.0+0x108>)
 800be90:	0031      	movs	r1, r6
 800be92:	18fb      	adds	r3, r7, r3
 800be94:	0018      	movs	r0, r3
 800be96:	9303      	str	r3, [sp, #12]
 800be98:	f7f4 f9d6 	bl	8000248 <__aeabi_uidivmod>
 800be9c:	2200      	movs	r2, #0
 800be9e:	9104      	str	r1, [sp, #16]
 800bea0:	2101      	movs	r1, #1
 800bea2:	4684      	mov	ip, r0
 800bea4:	0010      	movs	r0, r2
 800bea6:	4249      	negs	r1, r1
 800bea8:	0023      	movs	r3, r4
 800beaa:	3b30      	subs	r3, #48	; 0x30
 800beac:	2b09      	cmp	r3, #9
 800beae:	d903      	bls.n	800beb8 <_strtol_l.constprop.0+0x80>
 800beb0:	3b11      	subs	r3, #17
 800beb2:	2b19      	cmp	r3, #25
 800beb4:	d81d      	bhi.n	800bef2 <_strtol_l.constprop.0+0xba>
 800beb6:	330a      	adds	r3, #10
 800beb8:	429e      	cmp	r6, r3
 800beba:	dd1e      	ble.n	800befa <_strtol_l.constprop.0+0xc2>
 800bebc:	1c54      	adds	r4, r2, #1
 800bebe:	d009      	beq.n	800bed4 <_strtol_l.constprop.0+0x9c>
 800bec0:	000a      	movs	r2, r1
 800bec2:	4584      	cmp	ip, r0
 800bec4:	d306      	bcc.n	800bed4 <_strtol_l.constprop.0+0x9c>
 800bec6:	d102      	bne.n	800bece <_strtol_l.constprop.0+0x96>
 800bec8:	9c04      	ldr	r4, [sp, #16]
 800beca:	429c      	cmp	r4, r3
 800becc:	db02      	blt.n	800bed4 <_strtol_l.constprop.0+0x9c>
 800bece:	2201      	movs	r2, #1
 800bed0:	4370      	muls	r0, r6
 800bed2:	1818      	adds	r0, r3, r0
 800bed4:	782c      	ldrb	r4, [r5, #0]
 800bed6:	3501      	adds	r5, #1
 800bed8:	e7e6      	b.n	800bea8 <_strtol_l.constprop.0+0x70>
 800beda:	f000 fb57 	bl	800c58c <__errno>
 800bede:	2316      	movs	r3, #22
 800bee0:	6003      	str	r3, [r0, #0]
 800bee2:	2000      	movs	r0, #0
 800bee4:	b007      	add	sp, #28
 800bee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee8:	2c2b      	cmp	r4, #43	; 0x2b
 800beea:	d1c2      	bne.n	800be72 <_strtol_l.constprop.0+0x3a>
 800beec:	781c      	ldrb	r4, [r3, #0]
 800beee:	1c95      	adds	r5, r2, #2
 800bef0:	e7bf      	b.n	800be72 <_strtol_l.constprop.0+0x3a>
 800bef2:	0023      	movs	r3, r4
 800bef4:	3b61      	subs	r3, #97	; 0x61
 800bef6:	2b19      	cmp	r3, #25
 800bef8:	d9dd      	bls.n	800beb6 <_strtol_l.constprop.0+0x7e>
 800befa:	1c53      	adds	r3, r2, #1
 800befc:	d109      	bne.n	800bf12 <_strtol_l.constprop.0+0xda>
 800befe:	2322      	movs	r3, #34	; 0x22
 800bf00:	9a05      	ldr	r2, [sp, #20]
 800bf02:	9803      	ldr	r0, [sp, #12]
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	9b02      	ldr	r3, [sp, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0eb      	beq.n	800bee4 <_strtol_l.constprop.0+0xac>
 800bf0c:	1e6b      	subs	r3, r5, #1
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	e007      	b.n	800bf22 <_strtol_l.constprop.0+0xea>
 800bf12:	2f00      	cmp	r7, #0
 800bf14:	d000      	beq.n	800bf18 <_strtol_l.constprop.0+0xe0>
 800bf16:	4240      	negs	r0, r0
 800bf18:	9b02      	ldr	r3, [sp, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0e2      	beq.n	800bee4 <_strtol_l.constprop.0+0xac>
 800bf1e:	2a00      	cmp	r2, #0
 800bf20:	d1f4      	bne.n	800bf0c <_strtol_l.constprop.0+0xd4>
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	9a01      	ldr	r2, [sp, #4]
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e7dc      	b.n	800bee4 <_strtol_l.constprop.0+0xac>
 800bf2a:	2430      	movs	r4, #48	; 0x30
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	d1ae      	bne.n	800be8e <_strtol_l.constprop.0+0x56>
 800bf30:	3608      	adds	r6, #8
 800bf32:	e7ac      	b.n	800be8e <_strtol_l.constprop.0+0x56>
 800bf34:	2c30      	cmp	r4, #48	; 0x30
 800bf36:	d0a2      	beq.n	800be7e <_strtol_l.constprop.0+0x46>
 800bf38:	260a      	movs	r6, #10
 800bf3a:	e7a8      	b.n	800be8e <_strtol_l.constprop.0+0x56>
 800bf3c:	08014b19 	.word	0x08014b19
 800bf40:	7fffffff 	.word	0x7fffffff

0800bf44 <_strtol_r>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	f7ff ff77 	bl	800be38 <_strtol_l.constprop.0>
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <strtol>:
 800bf4c:	b510      	push	{r4, lr}
 800bf4e:	4c04      	ldr	r4, [pc, #16]	; (800bf60 <strtol+0x14>)
 800bf50:	0013      	movs	r3, r2
 800bf52:	000a      	movs	r2, r1
 800bf54:	0001      	movs	r1, r0
 800bf56:	6820      	ldr	r0, [r4, #0]
 800bf58:	f7ff ff6e 	bl	800be38 <_strtol_l.constprop.0>
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	200006d0 	.word	0x200006d0

0800bf64 <_strtoul_l.constprop.0>:
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	b087      	sub	sp, #28
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	4a3e      	ldr	r2, [pc, #248]	; (800c064 <_strtoul_l.constprop.0+0x100>)
 800bf6c:	001e      	movs	r6, r3
 800bf6e:	9101      	str	r1, [sp, #4]
 800bf70:	000b      	movs	r3, r1
 800bf72:	4694      	mov	ip, r2
 800bf74:	2108      	movs	r1, #8
 800bf76:	9005      	str	r0, [sp, #20]
 800bf78:	001a      	movs	r2, r3
 800bf7a:	4660      	mov	r0, ip
 800bf7c:	7814      	ldrb	r4, [r2, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	5d00      	ldrb	r0, [r0, r4]
 800bf82:	001d      	movs	r5, r3
 800bf84:	0007      	movs	r7, r0
 800bf86:	400f      	ands	r7, r1
 800bf88:	4208      	tst	r0, r1
 800bf8a:	d1f5      	bne.n	800bf78 <_strtoul_l.constprop.0+0x14>
 800bf8c:	2c2d      	cmp	r4, #45	; 0x2d
 800bf8e:	d13d      	bne.n	800c00c <_strtoul_l.constprop.0+0xa8>
 800bf90:	2701      	movs	r7, #1
 800bf92:	781c      	ldrb	r4, [r3, #0]
 800bf94:	1c95      	adds	r5, r2, #2
 800bf96:	2e00      	cmp	r6, #0
 800bf98:	d05f      	beq.n	800c05a <_strtoul_l.constprop.0+0xf6>
 800bf9a:	2e10      	cmp	r6, #16
 800bf9c:	d109      	bne.n	800bfb2 <_strtoul_l.constprop.0+0x4e>
 800bf9e:	2c30      	cmp	r4, #48	; 0x30
 800bfa0:	d107      	bne.n	800bfb2 <_strtoul_l.constprop.0+0x4e>
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	782b      	ldrb	r3, [r5, #0]
 800bfa6:	4393      	bics	r3, r2
 800bfa8:	2b58      	cmp	r3, #88	; 0x58
 800bfaa:	d151      	bne.n	800c050 <_strtoul_l.constprop.0+0xec>
 800bfac:	2610      	movs	r6, #16
 800bfae:	786c      	ldrb	r4, [r5, #1]
 800bfb0:	3502      	adds	r5, #2
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	0031      	movs	r1, r6
 800bfb6:	4240      	negs	r0, r0
 800bfb8:	f7f4 f8c0 	bl	800013c <__udivsi3>
 800bfbc:	9003      	str	r0, [sp, #12]
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	0031      	movs	r1, r6
 800bfc2:	4240      	negs	r0, r0
 800bfc4:	f7f4 f940 	bl	8000248 <__aeabi_uidivmod>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	2201      	movs	r2, #1
 800bfcc:	9104      	str	r1, [sp, #16]
 800bfce:	2101      	movs	r1, #1
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	4694      	mov	ip, r2
 800bfd4:	4249      	negs	r1, r1
 800bfd6:	0022      	movs	r2, r4
 800bfd8:	3a30      	subs	r2, #48	; 0x30
 800bfda:	2a09      	cmp	r2, #9
 800bfdc:	d903      	bls.n	800bfe6 <_strtoul_l.constprop.0+0x82>
 800bfde:	3a11      	subs	r2, #17
 800bfe0:	2a19      	cmp	r2, #25
 800bfe2:	d818      	bhi.n	800c016 <_strtoul_l.constprop.0+0xb2>
 800bfe4:	320a      	adds	r2, #10
 800bfe6:	4296      	cmp	r6, r2
 800bfe8:	dd19      	ble.n	800c01e <_strtoul_l.constprop.0+0xba>
 800bfea:	1c5c      	adds	r4, r3, #1
 800bfec:	d00b      	beq.n	800c006 <_strtoul_l.constprop.0+0xa2>
 800bfee:	9c03      	ldr	r4, [sp, #12]
 800bff0:	000b      	movs	r3, r1
 800bff2:	4284      	cmp	r4, r0
 800bff4:	d307      	bcc.n	800c006 <_strtoul_l.constprop.0+0xa2>
 800bff6:	d103      	bne.n	800c000 <_strtoul_l.constprop.0+0x9c>
 800bff8:	9c04      	ldr	r4, [sp, #16]
 800bffa:	000b      	movs	r3, r1
 800bffc:	4294      	cmp	r4, r2
 800bffe:	db02      	blt.n	800c006 <_strtoul_l.constprop.0+0xa2>
 800c000:	4663      	mov	r3, ip
 800c002:	4370      	muls	r0, r6
 800c004:	1810      	adds	r0, r2, r0
 800c006:	782c      	ldrb	r4, [r5, #0]
 800c008:	3501      	adds	r5, #1
 800c00a:	e7e4      	b.n	800bfd6 <_strtoul_l.constprop.0+0x72>
 800c00c:	2c2b      	cmp	r4, #43	; 0x2b
 800c00e:	d1c2      	bne.n	800bf96 <_strtoul_l.constprop.0+0x32>
 800c010:	781c      	ldrb	r4, [r3, #0]
 800c012:	1c95      	adds	r5, r2, #2
 800c014:	e7bf      	b.n	800bf96 <_strtoul_l.constprop.0+0x32>
 800c016:	0022      	movs	r2, r4
 800c018:	3a61      	subs	r2, #97	; 0x61
 800c01a:	2a19      	cmp	r2, #25
 800c01c:	d9e2      	bls.n	800bfe4 <_strtoul_l.constprop.0+0x80>
 800c01e:	1c5a      	adds	r2, r3, #1
 800c020:	d108      	bne.n	800c034 <_strtoul_l.constprop.0+0xd0>
 800c022:	2222      	movs	r2, #34	; 0x22
 800c024:	9905      	ldr	r1, [sp, #20]
 800c026:	0018      	movs	r0, r3
 800c028:	600a      	str	r2, [r1, #0]
 800c02a:	9a02      	ldr	r2, [sp, #8]
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	d109      	bne.n	800c044 <_strtoul_l.constprop.0+0xe0>
 800c030:	b007      	add	sp, #28
 800c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c034:	2f00      	cmp	r7, #0
 800c036:	d000      	beq.n	800c03a <_strtoul_l.constprop.0+0xd6>
 800c038:	4240      	negs	r0, r0
 800c03a:	9a02      	ldr	r2, [sp, #8]
 800c03c:	2a00      	cmp	r2, #0
 800c03e:	d0f7      	beq.n	800c030 <_strtoul_l.constprop.0+0xcc>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <_strtoul_l.constprop.0+0xe4>
 800c044:	1e6b      	subs	r3, r5, #1
 800c046:	9301      	str	r3, [sp, #4]
 800c048:	9b02      	ldr	r3, [sp, #8]
 800c04a:	9a01      	ldr	r2, [sp, #4]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e7ef      	b.n	800c030 <_strtoul_l.constprop.0+0xcc>
 800c050:	2430      	movs	r4, #48	; 0x30
 800c052:	2e00      	cmp	r6, #0
 800c054:	d1ad      	bne.n	800bfb2 <_strtoul_l.constprop.0+0x4e>
 800c056:	3608      	adds	r6, #8
 800c058:	e7ab      	b.n	800bfb2 <_strtoul_l.constprop.0+0x4e>
 800c05a:	2c30      	cmp	r4, #48	; 0x30
 800c05c:	d0a1      	beq.n	800bfa2 <_strtoul_l.constprop.0+0x3e>
 800c05e:	260a      	movs	r6, #10
 800c060:	e7a7      	b.n	800bfb2 <_strtoul_l.constprop.0+0x4e>
 800c062:	46c0      	nop			; (mov r8, r8)
 800c064:	08014b19 	.word	0x08014b19

0800c068 <_strtoul_r>:
 800c068:	b510      	push	{r4, lr}
 800c06a:	f7ff ff7b 	bl	800bf64 <_strtoul_l.constprop.0>
 800c06e:	bd10      	pop	{r4, pc}

0800c070 <strtoul>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4c04      	ldr	r4, [pc, #16]	; (800c084 <strtoul+0x14>)
 800c074:	0013      	movs	r3, r2
 800c076:	000a      	movs	r2, r1
 800c078:	0001      	movs	r1, r0
 800c07a:	6820      	ldr	r0, [r4, #0]
 800c07c:	f7ff ff72 	bl	800bf64 <_strtoul_l.constprop.0>
 800c080:	bd10      	pop	{r4, pc}
 800c082:	46c0      	nop			; (mov r8, r8)
 800c084:	200006d0 	.word	0x200006d0

0800c088 <std>:
 800c088:	2300      	movs	r3, #0
 800c08a:	b510      	push	{r4, lr}
 800c08c:	0004      	movs	r4, r0
 800c08e:	6003      	str	r3, [r0, #0]
 800c090:	6043      	str	r3, [r0, #4]
 800c092:	6083      	str	r3, [r0, #8]
 800c094:	8181      	strh	r1, [r0, #12]
 800c096:	6643      	str	r3, [r0, #100]	; 0x64
 800c098:	81c2      	strh	r2, [r0, #14]
 800c09a:	6103      	str	r3, [r0, #16]
 800c09c:	6143      	str	r3, [r0, #20]
 800c09e:	6183      	str	r3, [r0, #24]
 800c0a0:	0019      	movs	r1, r3
 800c0a2:	2208      	movs	r2, #8
 800c0a4:	305c      	adds	r0, #92	; 0x5c
 800c0a6:	f000 f97d 	bl	800c3a4 <memset>
 800c0aa:	4b0b      	ldr	r3, [pc, #44]	; (800c0d8 <std+0x50>)
 800c0ac:	61e4      	str	r4, [r4, #28]
 800c0ae:	6223      	str	r3, [r4, #32]
 800c0b0:	4b0a      	ldr	r3, [pc, #40]	; (800c0dc <std+0x54>)
 800c0b2:	6263      	str	r3, [r4, #36]	; 0x24
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <std+0x58>)
 800c0b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0b8:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <std+0x5c>)
 800c0ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <std+0x60>)
 800c0be:	429c      	cmp	r4, r3
 800c0c0:	d005      	beq.n	800c0ce <std+0x46>
 800c0c2:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <std+0x64>)
 800c0c4:	429c      	cmp	r4, r3
 800c0c6:	d002      	beq.n	800c0ce <std+0x46>
 800c0c8:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <std+0x68>)
 800c0ca:	429c      	cmp	r4, r3
 800c0cc:	d103      	bne.n	800c0d6 <std+0x4e>
 800c0ce:	0020      	movs	r0, r4
 800c0d0:	3058      	adds	r0, #88	; 0x58
 800c0d2:	f000 fa85 	bl	800c5e0 <__retarget_lock_init_recursive>
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	0800c309 	.word	0x0800c309
 800c0dc:	0800c335 	.word	0x0800c335
 800c0e0:	0800c36d 	.word	0x0800c36d
 800c0e4:	0800c399 	.word	0x0800c399
 800c0e8:	20000c6c 	.word	0x20000c6c
 800c0ec:	20000cd4 	.word	0x20000cd4
 800c0f0:	20000d3c 	.word	0x20000d3c

0800c0f4 <stdio_exit_handler>:
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	4a03      	ldr	r2, [pc, #12]	; (800c104 <stdio_exit_handler+0x10>)
 800c0f8:	4903      	ldr	r1, [pc, #12]	; (800c108 <stdio_exit_handler+0x14>)
 800c0fa:	4804      	ldr	r0, [pc, #16]	; (800c10c <stdio_exit_handler+0x18>)
 800c0fc:	f000 f86c 	bl	800c1d8 <_fwalk_sglue>
 800c100:	bd10      	pop	{r4, pc}
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	20000438 	.word	0x20000438
 800c108:	080100e1 	.word	0x080100e1
 800c10c:	200005b0 	.word	0x200005b0

0800c110 <cleanup_stdio>:
 800c110:	6841      	ldr	r1, [r0, #4]
 800c112:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <cleanup_stdio+0x30>)
 800c114:	b510      	push	{r4, lr}
 800c116:	0004      	movs	r4, r0
 800c118:	4299      	cmp	r1, r3
 800c11a:	d001      	beq.n	800c120 <cleanup_stdio+0x10>
 800c11c:	f003 ffe0 	bl	80100e0 <_fclose_r>
 800c120:	68a1      	ldr	r1, [r4, #8]
 800c122:	4b08      	ldr	r3, [pc, #32]	; (800c144 <cleanup_stdio+0x34>)
 800c124:	4299      	cmp	r1, r3
 800c126:	d002      	beq.n	800c12e <cleanup_stdio+0x1e>
 800c128:	0020      	movs	r0, r4
 800c12a:	f003 ffd9 	bl	80100e0 <_fclose_r>
 800c12e:	68e1      	ldr	r1, [r4, #12]
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <cleanup_stdio+0x38>)
 800c132:	4299      	cmp	r1, r3
 800c134:	d002      	beq.n	800c13c <cleanup_stdio+0x2c>
 800c136:	0020      	movs	r0, r4
 800c138:	f003 ffd2 	bl	80100e0 <_fclose_r>
 800c13c:	bd10      	pop	{r4, pc}
 800c13e:	46c0      	nop			; (mov r8, r8)
 800c140:	20000c6c 	.word	0x20000c6c
 800c144:	20000cd4 	.word	0x20000cd4
 800c148:	20000d3c 	.word	0x20000d3c

0800c14c <global_stdio_init.part.0>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	4b09      	ldr	r3, [pc, #36]	; (800c174 <global_stdio_init.part.0+0x28>)
 800c150:	4a09      	ldr	r2, [pc, #36]	; (800c178 <global_stdio_init.part.0+0x2c>)
 800c152:	2104      	movs	r1, #4
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	4809      	ldr	r0, [pc, #36]	; (800c17c <global_stdio_init.part.0+0x30>)
 800c158:	2200      	movs	r2, #0
 800c15a:	f7ff ff95 	bl	800c088 <std>
 800c15e:	2201      	movs	r2, #1
 800c160:	2109      	movs	r1, #9
 800c162:	4807      	ldr	r0, [pc, #28]	; (800c180 <global_stdio_init.part.0+0x34>)
 800c164:	f7ff ff90 	bl	800c088 <std>
 800c168:	2202      	movs	r2, #2
 800c16a:	2112      	movs	r1, #18
 800c16c:	4805      	ldr	r0, [pc, #20]	; (800c184 <global_stdio_init.part.0+0x38>)
 800c16e:	f7ff ff8b 	bl	800c088 <std>
 800c172:	bd10      	pop	{r4, pc}
 800c174:	20000da4 	.word	0x20000da4
 800c178:	0800c0f5 	.word	0x0800c0f5
 800c17c:	20000c6c 	.word	0x20000c6c
 800c180:	20000cd4 	.word	0x20000cd4
 800c184:	20000d3c 	.word	0x20000d3c

0800c188 <__sfp_lock_acquire>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	4802      	ldr	r0, [pc, #8]	; (800c194 <__sfp_lock_acquire+0xc>)
 800c18c:	f000 fa2a 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 800c190:	bd10      	pop	{r4, pc}
 800c192:	46c0      	nop			; (mov r8, r8)
 800c194:	20000dae 	.word	0x20000dae

0800c198 <__sfp_lock_release>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	4802      	ldr	r0, [pc, #8]	; (800c1a4 <__sfp_lock_release+0xc>)
 800c19c:	f000 fa23 	bl	800c5e6 <__retarget_lock_release_recursive>
 800c1a0:	bd10      	pop	{r4, pc}
 800c1a2:	46c0      	nop			; (mov r8, r8)
 800c1a4:	20000dae 	.word	0x20000dae

0800c1a8 <__sinit>:
 800c1a8:	b510      	push	{r4, lr}
 800c1aa:	0004      	movs	r4, r0
 800c1ac:	f7ff ffec 	bl	800c188 <__sfp_lock_acquire>
 800c1b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <__sinit+0x14>
 800c1b6:	f7ff ffef 	bl	800c198 <__sfp_lock_release>
 800c1ba:	bd10      	pop	{r4, pc}
 800c1bc:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <__sinit+0x28>)
 800c1be:	6363      	str	r3, [r4, #52]	; 0x34
 800c1c0:	4b04      	ldr	r3, [pc, #16]	; (800c1d4 <__sinit+0x2c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1f6      	bne.n	800c1b6 <__sinit+0xe>
 800c1c8:	f7ff ffc0 	bl	800c14c <global_stdio_init.part.0>
 800c1cc:	e7f3      	b.n	800c1b6 <__sinit+0xe>
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	0800c111 	.word	0x0800c111
 800c1d4:	20000da4 	.word	0x20000da4

0800c1d8 <_fwalk_sglue>:
 800c1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1da:	0014      	movs	r4, r2
 800c1dc:	2600      	movs	r6, #0
 800c1de:	9000      	str	r0, [sp, #0]
 800c1e0:	9101      	str	r1, [sp, #4]
 800c1e2:	68a5      	ldr	r5, [r4, #8]
 800c1e4:	6867      	ldr	r7, [r4, #4]
 800c1e6:	3f01      	subs	r7, #1
 800c1e8:	d504      	bpl.n	800c1f4 <_fwalk_sglue+0x1c>
 800c1ea:	6824      	ldr	r4, [r4, #0]
 800c1ec:	2c00      	cmp	r4, #0
 800c1ee:	d1f8      	bne.n	800c1e2 <_fwalk_sglue+0xa>
 800c1f0:	0030      	movs	r0, r6
 800c1f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1f4:	89ab      	ldrh	r3, [r5, #12]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d908      	bls.n	800c20c <_fwalk_sglue+0x34>
 800c1fa:	220e      	movs	r2, #14
 800c1fc:	5eab      	ldrsh	r3, [r5, r2]
 800c1fe:	3301      	adds	r3, #1
 800c200:	d004      	beq.n	800c20c <_fwalk_sglue+0x34>
 800c202:	0029      	movs	r1, r5
 800c204:	9800      	ldr	r0, [sp, #0]
 800c206:	9b01      	ldr	r3, [sp, #4]
 800c208:	4798      	blx	r3
 800c20a:	4306      	orrs	r6, r0
 800c20c:	3568      	adds	r5, #104	; 0x68
 800c20e:	e7ea      	b.n	800c1e6 <_fwalk_sglue+0xe>

0800c210 <snprintf>:
 800c210:	b40c      	push	{r2, r3}
 800c212:	b530      	push	{r4, r5, lr}
 800c214:	4b17      	ldr	r3, [pc, #92]	; (800c274 <snprintf+0x64>)
 800c216:	000c      	movs	r4, r1
 800c218:	681d      	ldr	r5, [r3, #0]
 800c21a:	b09d      	sub	sp, #116	; 0x74
 800c21c:	2900      	cmp	r1, #0
 800c21e:	da08      	bge.n	800c232 <snprintf+0x22>
 800c220:	238b      	movs	r3, #139	; 0x8b
 800c222:	2001      	movs	r0, #1
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	4240      	negs	r0, r0
 800c228:	b01d      	add	sp, #116	; 0x74
 800c22a:	bc30      	pop	{r4, r5}
 800c22c:	bc08      	pop	{r3}
 800c22e:	b002      	add	sp, #8
 800c230:	4718      	bx	r3
 800c232:	2382      	movs	r3, #130	; 0x82
 800c234:	466a      	mov	r2, sp
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	8293      	strh	r3, [r2, #20]
 800c23a:	2300      	movs	r3, #0
 800c23c:	9002      	str	r0, [sp, #8]
 800c23e:	9006      	str	r0, [sp, #24]
 800c240:	4299      	cmp	r1, r3
 800c242:	d000      	beq.n	800c246 <snprintf+0x36>
 800c244:	1e4b      	subs	r3, r1, #1
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	9307      	str	r3, [sp, #28]
 800c24a:	2301      	movs	r3, #1
 800c24c:	466a      	mov	r2, sp
 800c24e:	425b      	negs	r3, r3
 800c250:	82d3      	strh	r3, [r2, #22]
 800c252:	0028      	movs	r0, r5
 800c254:	ab21      	add	r3, sp, #132	; 0x84
 800c256:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c258:	a902      	add	r1, sp, #8
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	f001 fae2 	bl	800d824 <_svfprintf_r>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	da01      	bge.n	800c268 <snprintf+0x58>
 800c264:	238b      	movs	r3, #139	; 0x8b
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	2c00      	cmp	r4, #0
 800c26a:	d0dd      	beq.n	800c228 <snprintf+0x18>
 800c26c:	2200      	movs	r2, #0
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	701a      	strb	r2, [r3, #0]
 800c272:	e7d9      	b.n	800c228 <snprintf+0x18>
 800c274:	200006d0 	.word	0x200006d0

0800c278 <sprintf>:
 800c278:	b40e      	push	{r1, r2, r3}
 800c27a:	b500      	push	{lr}
 800c27c:	490b      	ldr	r1, [pc, #44]	; (800c2ac <sprintf+0x34>)
 800c27e:	b09c      	sub	sp, #112	; 0x70
 800c280:	ab1d      	add	r3, sp, #116	; 0x74
 800c282:	9002      	str	r0, [sp, #8]
 800c284:	9006      	str	r0, [sp, #24]
 800c286:	9107      	str	r1, [sp, #28]
 800c288:	9104      	str	r1, [sp, #16]
 800c28a:	4809      	ldr	r0, [pc, #36]	; (800c2b0 <sprintf+0x38>)
 800c28c:	4909      	ldr	r1, [pc, #36]	; (800c2b4 <sprintf+0x3c>)
 800c28e:	cb04      	ldmia	r3!, {r2}
 800c290:	9105      	str	r1, [sp, #20]
 800c292:	6800      	ldr	r0, [r0, #0]
 800c294:	a902      	add	r1, sp, #8
 800c296:	9301      	str	r3, [sp, #4]
 800c298:	f001 fac4 	bl	800d824 <_svfprintf_r>
 800c29c:	2200      	movs	r2, #0
 800c29e:	9b02      	ldr	r3, [sp, #8]
 800c2a0:	701a      	strb	r2, [r3, #0]
 800c2a2:	b01c      	add	sp, #112	; 0x70
 800c2a4:	bc08      	pop	{r3}
 800c2a6:	b003      	add	sp, #12
 800c2a8:	4718      	bx	r3
 800c2aa:	46c0      	nop			; (mov r8, r8)
 800c2ac:	7fffffff 	.word	0x7fffffff
 800c2b0:	200006d0 	.word	0x200006d0
 800c2b4:	ffff0208 	.word	0xffff0208

0800c2b8 <sscanf>:
 800c2b8:	b40e      	push	{r1, r2, r3}
 800c2ba:	b530      	push	{r4, r5, lr}
 800c2bc:	2381      	movs	r3, #129	; 0x81
 800c2be:	b09c      	sub	sp, #112	; 0x70
 800c2c0:	466a      	mov	r2, sp
 800c2c2:	ac1f      	add	r4, sp, #124	; 0x7c
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	cc20      	ldmia	r4!, {r5}
 800c2c8:	8293      	strh	r3, [r2, #20]
 800c2ca:	9002      	str	r0, [sp, #8]
 800c2cc:	9006      	str	r0, [sp, #24]
 800c2ce:	f7f3 ff19 	bl	8000104 <strlen>
 800c2d2:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <sscanf+0x48>)
 800c2d4:	466a      	mov	r2, sp
 800c2d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9003      	str	r0, [sp, #12]
 800c2dc:	9007      	str	r0, [sp, #28]
 800c2de:	4809      	ldr	r0, [pc, #36]	; (800c304 <sscanf+0x4c>)
 800c2e0:	930e      	str	r3, [sp, #56]	; 0x38
 800c2e2:	9313      	str	r3, [sp, #76]	; 0x4c
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	82d3      	strh	r3, [r2, #22]
 800c2e8:	a902      	add	r1, sp, #8
 800c2ea:	0023      	movs	r3, r4
 800c2ec:	002a      	movs	r2, r5
 800c2ee:	6800      	ldr	r0, [r0, #0]
 800c2f0:	9401      	str	r4, [sp, #4]
 800c2f2:	f002 fcd9 	bl	800eca8 <__ssvfscanf_r>
 800c2f6:	b01c      	add	sp, #112	; 0x70
 800c2f8:	bc30      	pop	{r4, r5}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	b003      	add	sp, #12
 800c2fe:	4718      	bx	r3
 800c300:	0800c331 	.word	0x0800c331
 800c304:	200006d0 	.word	0x200006d0

0800c308 <__sread>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	000c      	movs	r4, r1
 800c30c:	250e      	movs	r5, #14
 800c30e:	5f49      	ldrsh	r1, [r1, r5]
 800c310:	f000 f902 	bl	800c518 <_read_r>
 800c314:	2800      	cmp	r0, #0
 800c316:	db03      	blt.n	800c320 <__sread+0x18>
 800c318:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c31a:	181b      	adds	r3, r3, r0
 800c31c:	6523      	str	r3, [r4, #80]	; 0x50
 800c31e:	bd70      	pop	{r4, r5, r6, pc}
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	4a02      	ldr	r2, [pc, #8]	; (800c32c <__sread+0x24>)
 800c324:	4013      	ands	r3, r2
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	e7f9      	b.n	800c31e <__sread+0x16>
 800c32a:	46c0      	nop			; (mov r8, r8)
 800c32c:	ffffefff 	.word	0xffffefff

0800c330 <__seofread>:
 800c330:	2000      	movs	r0, #0
 800c332:	4770      	bx	lr

0800c334 <__swrite>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	001f      	movs	r7, r3
 800c338:	898b      	ldrh	r3, [r1, #12]
 800c33a:	0005      	movs	r5, r0
 800c33c:	000c      	movs	r4, r1
 800c33e:	0016      	movs	r6, r2
 800c340:	05db      	lsls	r3, r3, #23
 800c342:	d505      	bpl.n	800c350 <__swrite+0x1c>
 800c344:	230e      	movs	r3, #14
 800c346:	5ec9      	ldrsh	r1, [r1, r3]
 800c348:	2200      	movs	r2, #0
 800c34a:	2302      	movs	r3, #2
 800c34c:	f000 f8d0 	bl	800c4f0 <_lseek_r>
 800c350:	89a3      	ldrh	r3, [r4, #12]
 800c352:	4a05      	ldr	r2, [pc, #20]	; (800c368 <__swrite+0x34>)
 800c354:	0028      	movs	r0, r5
 800c356:	4013      	ands	r3, r2
 800c358:	81a3      	strh	r3, [r4, #12]
 800c35a:	0032      	movs	r2, r6
 800c35c:	230e      	movs	r3, #14
 800c35e:	5ee1      	ldrsh	r1, [r4, r3]
 800c360:	003b      	movs	r3, r7
 800c362:	f000 f8ff 	bl	800c564 <_write_r>
 800c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c368:	ffffefff 	.word	0xffffefff

0800c36c <__sseek>:
 800c36c:	b570      	push	{r4, r5, r6, lr}
 800c36e:	000c      	movs	r4, r1
 800c370:	250e      	movs	r5, #14
 800c372:	5f49      	ldrsh	r1, [r1, r5]
 800c374:	f000 f8bc 	bl	800c4f0 <_lseek_r>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	1c42      	adds	r2, r0, #1
 800c37c:	d103      	bne.n	800c386 <__sseek+0x1a>
 800c37e:	4a05      	ldr	r2, [pc, #20]	; (800c394 <__sseek+0x28>)
 800c380:	4013      	ands	r3, r2
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	bd70      	pop	{r4, r5, r6, pc}
 800c386:	2280      	movs	r2, #128	; 0x80
 800c388:	0152      	lsls	r2, r2, #5
 800c38a:	4313      	orrs	r3, r2
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	6520      	str	r0, [r4, #80]	; 0x50
 800c390:	e7f8      	b.n	800c384 <__sseek+0x18>
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	ffffefff 	.word	0xffffefff

0800c398 <__sclose>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	230e      	movs	r3, #14
 800c39c:	5ec9      	ldrsh	r1, [r1, r3]
 800c39e:	f000 f895 	bl	800c4cc <_close_r>
 800c3a2:	bd10      	pop	{r4, pc}

0800c3a4 <memset>:
 800c3a4:	0003      	movs	r3, r0
 800c3a6:	1882      	adds	r2, r0, r2
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d100      	bne.n	800c3ae <memset+0xa>
 800c3ac:	4770      	bx	lr
 800c3ae:	7019      	strb	r1, [r3, #0]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	e7f9      	b.n	800c3a8 <memset+0x4>

0800c3b4 <strchr>:
 800c3b4:	b2c9      	uxtb	r1, r1
 800c3b6:	7803      	ldrb	r3, [r0, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d004      	beq.n	800c3c6 <strchr+0x12>
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	d100      	bne.n	800c3c2 <strchr+0xe>
 800c3c0:	4770      	bx	lr
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	e7f7      	b.n	800c3b6 <strchr+0x2>
 800c3c6:	424b      	negs	r3, r1
 800c3c8:	4159      	adcs	r1, r3
 800c3ca:	4249      	negs	r1, r1
 800c3cc:	4008      	ands	r0, r1
 800c3ce:	e7f7      	b.n	800c3c0 <strchr+0xc>

0800c3d0 <strncmp>:
 800c3d0:	b530      	push	{r4, r5, lr}
 800c3d2:	0005      	movs	r5, r0
 800c3d4:	1e10      	subs	r0, r2, #0
 800c3d6:	d00b      	beq.n	800c3f0 <strncmp+0x20>
 800c3d8:	2400      	movs	r4, #0
 800c3da:	3a01      	subs	r2, #1
 800c3dc:	5d2b      	ldrb	r3, [r5, r4]
 800c3de:	5d08      	ldrb	r0, [r1, r4]
 800c3e0:	4283      	cmp	r3, r0
 800c3e2:	d104      	bne.n	800c3ee <strncmp+0x1e>
 800c3e4:	42a2      	cmp	r2, r4
 800c3e6:	d002      	beq.n	800c3ee <strncmp+0x1e>
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1f6      	bne.n	800c3dc <strncmp+0xc>
 800c3ee:	1a18      	subs	r0, r3, r0
 800c3f0:	bd30      	pop	{r4, r5, pc}

0800c3f2 <strncpy>:
 800c3f2:	0003      	movs	r3, r0
 800c3f4:	b530      	push	{r4, r5, lr}
 800c3f6:	001d      	movs	r5, r3
 800c3f8:	2a00      	cmp	r2, #0
 800c3fa:	d006      	beq.n	800c40a <strncpy+0x18>
 800c3fc:	780c      	ldrb	r4, [r1, #0]
 800c3fe:	3a01      	subs	r2, #1
 800c400:	3301      	adds	r3, #1
 800c402:	702c      	strb	r4, [r5, #0]
 800c404:	3101      	adds	r1, #1
 800c406:	2c00      	cmp	r4, #0
 800c408:	d1f5      	bne.n	800c3f6 <strncpy+0x4>
 800c40a:	2100      	movs	r1, #0
 800c40c:	189a      	adds	r2, r3, r2
 800c40e:	4293      	cmp	r3, r2
 800c410:	d100      	bne.n	800c414 <strncpy+0x22>
 800c412:	bd30      	pop	{r4, r5, pc}
 800c414:	7019      	strb	r1, [r3, #0]
 800c416:	3301      	adds	r3, #1
 800c418:	e7f9      	b.n	800c40e <strncpy+0x1c>
	...

0800c41c <strtok>:
 800c41c:	4b03      	ldr	r3, [pc, #12]	; (800c42c <strtok+0x10>)
 800c41e:	b510      	push	{r4, lr}
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	2301      	movs	r3, #1
 800c424:	3250      	adds	r2, #80	; 0x50
 800c426:	f000 f803 	bl	800c430 <__strtok_r>
 800c42a:	bd10      	pop	{r4, pc}
 800c42c:	200006d0 	.word	0x200006d0

0800c430 <__strtok_r>:
 800c430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c432:	2800      	cmp	r0, #0
 800c434:	d102      	bne.n	800c43c <__strtok_r+0xc>
 800c436:	6810      	ldr	r0, [r2, #0]
 800c438:	2800      	cmp	r0, #0
 800c43a:	d013      	beq.n	800c464 <__strtok_r+0x34>
 800c43c:	0004      	movs	r4, r0
 800c43e:	0020      	movs	r0, r4
 800c440:	000e      	movs	r6, r1
 800c442:	7805      	ldrb	r5, [r0, #0]
 800c444:	3401      	adds	r4, #1
 800c446:	7837      	ldrb	r7, [r6, #0]
 800c448:	2f00      	cmp	r7, #0
 800c44a:	d104      	bne.n	800c456 <__strtok_r+0x26>
 800c44c:	2d00      	cmp	r5, #0
 800c44e:	d10f      	bne.n	800c470 <__strtok_r+0x40>
 800c450:	0028      	movs	r0, r5
 800c452:	6015      	str	r5, [r2, #0]
 800c454:	e006      	b.n	800c464 <__strtok_r+0x34>
 800c456:	3601      	adds	r6, #1
 800c458:	42bd      	cmp	r5, r7
 800c45a:	d1f4      	bne.n	800c446 <__strtok_r+0x16>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1ee      	bne.n	800c43e <__strtok_r+0xe>
 800c460:	6014      	str	r4, [r2, #0]
 800c462:	7003      	strb	r3, [r0, #0]
 800c464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c466:	002f      	movs	r7, r5
 800c468:	e00f      	b.n	800c48a <__strtok_r+0x5a>
 800c46a:	3301      	adds	r3, #1
 800c46c:	2e00      	cmp	r6, #0
 800c46e:	d104      	bne.n	800c47a <__strtok_r+0x4a>
 800c470:	0023      	movs	r3, r4
 800c472:	3401      	adds	r4, #1
 800c474:	781d      	ldrb	r5, [r3, #0]
 800c476:	0027      	movs	r7, r4
 800c478:	000b      	movs	r3, r1
 800c47a:	781e      	ldrb	r6, [r3, #0]
 800c47c:	42b5      	cmp	r5, r6
 800c47e:	d1f4      	bne.n	800c46a <__strtok_r+0x3a>
 800c480:	2d00      	cmp	r5, #0
 800c482:	d0f0      	beq.n	800c466 <__strtok_r+0x36>
 800c484:	2300      	movs	r3, #0
 800c486:	3c01      	subs	r4, #1
 800c488:	7023      	strb	r3, [r4, #0]
 800c48a:	6017      	str	r7, [r2, #0]
 800c48c:	e7ea      	b.n	800c464 <__strtok_r+0x34>

0800c48e <strstr>:
 800c48e:	780a      	ldrb	r2, [r1, #0]
 800c490:	b530      	push	{r4, r5, lr}
 800c492:	2a00      	cmp	r2, #0
 800c494:	d10c      	bne.n	800c4b0 <strstr+0x22>
 800c496:	bd30      	pop	{r4, r5, pc}
 800c498:	429a      	cmp	r2, r3
 800c49a:	d108      	bne.n	800c4ae <strstr+0x20>
 800c49c:	2301      	movs	r3, #1
 800c49e:	5ccc      	ldrb	r4, [r1, r3]
 800c4a0:	2c00      	cmp	r4, #0
 800c4a2:	d0f8      	beq.n	800c496 <strstr+0x8>
 800c4a4:	5cc5      	ldrb	r5, [r0, r3]
 800c4a6:	42a5      	cmp	r5, r4
 800c4a8:	d101      	bne.n	800c4ae <strstr+0x20>
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	e7f7      	b.n	800c49e <strstr+0x10>
 800c4ae:	3001      	adds	r0, #1
 800c4b0:	7803      	ldrb	r3, [r0, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1f0      	bne.n	800c498 <strstr+0xa>
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	e7ed      	b.n	800c496 <strstr+0x8>
	...

0800c4bc <__locale_mb_cur_max>:
 800c4bc:	2294      	movs	r2, #148	; 0x94
 800c4be:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <__locale_mb_cur_max+0xc>)
 800c4c0:	0052      	lsls	r2, r2, #1
 800c4c2:	5c98      	ldrb	r0, [r3, r2]
 800c4c4:	4770      	bx	lr
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	20000444 	.word	0x20000444

0800c4cc <_close_r>:
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	b570      	push	{r4, r5, r6, lr}
 800c4d0:	4d06      	ldr	r5, [pc, #24]	; (800c4ec <_close_r+0x20>)
 800c4d2:	0004      	movs	r4, r0
 800c4d4:	0008      	movs	r0, r1
 800c4d6:	602b      	str	r3, [r5, #0]
 800c4d8:	f7f7 fe6d 	bl	80041b6 <_close>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d103      	bne.n	800c4e8 <_close_r+0x1c>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d000      	beq.n	800c4e8 <_close_r+0x1c>
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	20000da8 	.word	0x20000da8

0800c4f0 <_lseek_r>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	0004      	movs	r4, r0
 800c4f4:	0008      	movs	r0, r1
 800c4f6:	0011      	movs	r1, r2
 800c4f8:	001a      	movs	r2, r3
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4d05      	ldr	r5, [pc, #20]	; (800c514 <_lseek_r+0x24>)
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	f7f7 fe7a 	bl	80041f8 <_lseek>
 800c504:	1c43      	adds	r3, r0, #1
 800c506:	d103      	bne.n	800c510 <_lseek_r+0x20>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d000      	beq.n	800c510 <_lseek_r+0x20>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd70      	pop	{r4, r5, r6, pc}
 800c512:	46c0      	nop			; (mov r8, r8)
 800c514:	20000da8 	.word	0x20000da8

0800c518 <_read_r>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	0004      	movs	r4, r0
 800c51c:	0008      	movs	r0, r1
 800c51e:	0011      	movs	r1, r2
 800c520:	001a      	movs	r2, r3
 800c522:	2300      	movs	r3, #0
 800c524:	4d05      	ldr	r5, [pc, #20]	; (800c53c <_read_r+0x24>)
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f7 fe0c 	bl	8004144 <_read>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d103      	bne.n	800c538 <_read_r+0x20>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d000      	beq.n	800c538 <_read_r+0x20>
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	bd70      	pop	{r4, r5, r6, pc}
 800c53a:	46c0      	nop			; (mov r8, r8)
 800c53c:	20000da8 	.word	0x20000da8

0800c540 <_sbrk_r>:
 800c540:	2300      	movs	r3, #0
 800c542:	b570      	push	{r4, r5, r6, lr}
 800c544:	4d06      	ldr	r5, [pc, #24]	; (800c560 <_sbrk_r+0x20>)
 800c546:	0004      	movs	r4, r0
 800c548:	0008      	movs	r0, r1
 800c54a:	602b      	str	r3, [r5, #0]
 800c54c:	f7f7 fe60 	bl	8004210 <_sbrk>
 800c550:	1c43      	adds	r3, r0, #1
 800c552:	d103      	bne.n	800c55c <_sbrk_r+0x1c>
 800c554:	682b      	ldr	r3, [r5, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d000      	beq.n	800c55c <_sbrk_r+0x1c>
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	46c0      	nop			; (mov r8, r8)
 800c560:	20000da8 	.word	0x20000da8

0800c564 <_write_r>:
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	0004      	movs	r4, r0
 800c568:	0008      	movs	r0, r1
 800c56a:	0011      	movs	r1, r2
 800c56c:	001a      	movs	r2, r3
 800c56e:	2300      	movs	r3, #0
 800c570:	4d05      	ldr	r5, [pc, #20]	; (800c588 <_write_r+0x24>)
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f7 fe03 	bl	800417e <_write>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d103      	bne.n	800c584 <_write_r+0x20>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d000      	beq.n	800c584 <_write_r+0x20>
 800c582:	6023      	str	r3, [r4, #0]
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	46c0      	nop			; (mov r8, r8)
 800c588:	20000da8 	.word	0x20000da8

0800c58c <__errno>:
 800c58c:	4b01      	ldr	r3, [pc, #4]	; (800c594 <__errno+0x8>)
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	4770      	bx	lr
 800c592:	46c0      	nop			; (mov r8, r8)
 800c594:	200006d0 	.word	0x200006d0

0800c598 <__libc_init_array>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	2600      	movs	r6, #0
 800c59c:	4c0c      	ldr	r4, [pc, #48]	; (800c5d0 <__libc_init_array+0x38>)
 800c59e:	4d0d      	ldr	r5, [pc, #52]	; (800c5d4 <__libc_init_array+0x3c>)
 800c5a0:	1b64      	subs	r4, r4, r5
 800c5a2:	10a4      	asrs	r4, r4, #2
 800c5a4:	42a6      	cmp	r6, r4
 800c5a6:	d109      	bne.n	800c5bc <__libc_init_array+0x24>
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	f006 fc3f 	bl	8012e2c <_init>
 800c5ae:	4c0a      	ldr	r4, [pc, #40]	; (800c5d8 <__libc_init_array+0x40>)
 800c5b0:	4d0a      	ldr	r5, [pc, #40]	; (800c5dc <__libc_init_array+0x44>)
 800c5b2:	1b64      	subs	r4, r4, r5
 800c5b4:	10a4      	asrs	r4, r4, #2
 800c5b6:	42a6      	cmp	r6, r4
 800c5b8:	d105      	bne.n	800c5c6 <__libc_init_array+0x2e>
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	00b3      	lsls	r3, r6, #2
 800c5be:	58eb      	ldr	r3, [r5, r3]
 800c5c0:	4798      	blx	r3
 800c5c2:	3601      	adds	r6, #1
 800c5c4:	e7ee      	b.n	800c5a4 <__libc_init_array+0xc>
 800c5c6:	00b3      	lsls	r3, r6, #2
 800c5c8:	58eb      	ldr	r3, [r5, r3]
 800c5ca:	4798      	blx	r3
 800c5cc:	3601      	adds	r6, #1
 800c5ce:	e7f2      	b.n	800c5b6 <__libc_init_array+0x1e>
 800c5d0:	08014f34 	.word	0x08014f34
 800c5d4:	08014f34 	.word	0x08014f34
 800c5d8:	08014f3c 	.word	0x08014f3c
 800c5dc:	08014f34 	.word	0x08014f34

0800c5e0 <__retarget_lock_init_recursive>:
 800c5e0:	4770      	bx	lr

0800c5e2 <__retarget_lock_close_recursive>:
 800c5e2:	4770      	bx	lr

0800c5e4 <__retarget_lock_acquire_recursive>:
 800c5e4:	4770      	bx	lr

0800c5e6 <__retarget_lock_release_recursive>:
 800c5e6:	4770      	bx	lr

0800c5e8 <sysconf>:
 800c5e8:	2380      	movs	r3, #128	; 0x80
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	2808      	cmp	r0, #8
 800c5ee:	d004      	beq.n	800c5fa <sysconf+0x12>
 800c5f0:	f7ff ffcc 	bl	800c58c <__errno>
 800c5f4:	2316      	movs	r3, #22
 800c5f6:	6003      	str	r3, [r0, #0]
 800c5f8:	3b17      	subs	r3, #23
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	bd10      	pop	{r4, pc}

0800c5fe <memcpy>:
 800c5fe:	2300      	movs	r3, #0
 800c600:	b510      	push	{r4, lr}
 800c602:	429a      	cmp	r2, r3
 800c604:	d100      	bne.n	800c608 <memcpy+0xa>
 800c606:	bd10      	pop	{r4, pc}
 800c608:	5ccc      	ldrb	r4, [r1, r3]
 800c60a:	54c4      	strb	r4, [r0, r3]
 800c60c:	3301      	adds	r3, #1
 800c60e:	e7f8      	b.n	800c602 <memcpy+0x4>

0800c610 <nan>:
 800c610:	2000      	movs	r0, #0
 800c612:	4901      	ldr	r1, [pc, #4]	; (800c618 <nan+0x8>)
 800c614:	4770      	bx	lr
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	7ff80000 	.word	0x7ff80000

0800c61c <nanf>:
 800c61c:	4800      	ldr	r0, [pc, #0]	; (800c620 <nanf+0x4>)
 800c61e:	4770      	bx	lr
 800c620:	7fc00000 	.word	0x7fc00000

0800c624 <register_fini>:
 800c624:	4b03      	ldr	r3, [pc, #12]	; (800c634 <register_fini+0x10>)
 800c626:	b510      	push	{r4, lr}
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <register_fini+0xe>
 800c62c:	4802      	ldr	r0, [pc, #8]	; (800c638 <register_fini+0x14>)
 800c62e:	f000 f805 	bl	800c63c <atexit>
 800c632:	bd10      	pop	{r4, pc}
 800c634:	00000000 	.word	0x00000000
 800c638:	08010399 	.word	0x08010399

0800c63c <atexit>:
 800c63c:	2300      	movs	r3, #0
 800c63e:	b510      	push	{r4, lr}
 800c640:	0001      	movs	r1, r0
 800c642:	001a      	movs	r2, r3
 800c644:	0018      	movs	r0, r3
 800c646:	f003 fef9 	bl	801043c <__register_exitproc>
 800c64a:	bd10      	pop	{r4, pc}

0800c64c <_malloc_trim_r>:
 800c64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c64e:	0004      	movs	r4, r0
 800c650:	2008      	movs	r0, #8
 800c652:	000d      	movs	r5, r1
 800c654:	f7ff ffc8 	bl	800c5e8 <sysconf>
 800c658:	0006      	movs	r6, r0
 800c65a:	0020      	movs	r0, r4
 800c65c:	f7fe fda4 	bl	800b1a8 <__malloc_lock>
 800c660:	2203      	movs	r2, #3
 800c662:	4f21      	ldr	r7, [pc, #132]	; (800c6e8 <_malloc_trim_r+0x9c>)
 800c664:	0031      	movs	r1, r6
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	4393      	bics	r3, r2
 800c66c:	1b58      	subs	r0, r3, r5
 800c66e:	3811      	subs	r0, #17
 800c670:	1980      	adds	r0, r0, r6
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f7f3 fd62 	bl	800013c <__udivsi3>
 800c678:	1e45      	subs	r5, r0, #1
 800c67a:	4375      	muls	r5, r6
 800c67c:	42ae      	cmp	r6, r5
 800c67e:	dd04      	ble.n	800c68a <_malloc_trim_r+0x3e>
 800c680:	0020      	movs	r0, r4
 800c682:	f7fe fd99 	bl	800b1b8 <__malloc_unlock>
 800c686:	2000      	movs	r0, #0
 800c688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c68a:	2100      	movs	r1, #0
 800c68c:	0020      	movs	r0, r4
 800c68e:	f7ff ff57 	bl	800c540 <_sbrk_r>
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	9a01      	ldr	r2, [sp, #4]
 800c696:	189b      	adds	r3, r3, r2
 800c698:	4298      	cmp	r0, r3
 800c69a:	d1f1      	bne.n	800c680 <_malloc_trim_r+0x34>
 800c69c:	0020      	movs	r0, r4
 800c69e:	4269      	negs	r1, r5
 800c6a0:	f7ff ff4e 	bl	800c540 <_sbrk_r>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d110      	bne.n	800c6ca <_malloc_trim_r+0x7e>
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	0020      	movs	r0, r4
 800c6ac:	f7ff ff48 	bl	800c540 <_sbrk_r>
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	1a81      	subs	r1, r0, r2
 800c6b4:	290f      	cmp	r1, #15
 800c6b6:	dde3      	ble.n	800c680 <_malloc_trim_r+0x34>
 800c6b8:	4d0c      	ldr	r5, [pc, #48]	; (800c6ec <_malloc_trim_r+0xa0>)
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	; (800c6f0 <_malloc_trim_r+0xa4>)
 800c6bc:	682d      	ldr	r5, [r5, #0]
 800c6be:	1b40      	subs	r0, r0, r5
 800c6c0:	6018      	str	r0, [r3, #0]
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	430b      	orrs	r3, r1
 800c6c6:	6053      	str	r3, [r2, #4]
 800c6c8:	e7da      	b.n	800c680 <_malloc_trim_r+0x34>
 800c6ca:	2601      	movs	r6, #1
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	1b5b      	subs	r3, r3, r5
 800c6d2:	4333      	orrs	r3, r6
 800c6d4:	6053      	str	r3, [r2, #4]
 800c6d6:	4a06      	ldr	r2, [pc, #24]	; (800c6f0 <_malloc_trim_r+0xa4>)
 800c6d8:	0020      	movs	r0, r4
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	1b5b      	subs	r3, r3, r5
 800c6de:	6013      	str	r3, [r2, #0]
 800c6e0:	f7fe fd6a 	bl	800b1b8 <__malloc_unlock>
 800c6e4:	0030      	movs	r0, r6
 800c6e6:	e7cf      	b.n	800c688 <_malloc_trim_r+0x3c>
 800c6e8:	20000028 	.word	0x20000028
 800c6ec:	20000430 	.word	0x20000430
 800c6f0:	20000c38 	.word	0x20000c38

0800c6f4 <_free_r>:
 800c6f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6f6:	1e0d      	subs	r5, r1, #0
 800c6f8:	9001      	str	r0, [sp, #4]
 800c6fa:	d02d      	beq.n	800c758 <_free_r+0x64>
 800c6fc:	f7fe fd54 	bl	800b1a8 <__malloc_lock>
 800c700:	2301      	movs	r3, #1
 800c702:	0029      	movs	r1, r5
 800c704:	469c      	mov	ip, r3
 800c706:	3908      	subs	r1, #8
 800c708:	684f      	ldr	r7, [r1, #4]
 800c70a:	4662      	mov	r2, ip
 800c70c:	003b      	movs	r3, r7
 800c70e:	4664      	mov	r4, ip
 800c710:	4393      	bics	r3, r2
 800c712:	18c8      	adds	r0, r1, r3
 800c714:	6845      	ldr	r5, [r0, #4]
 800c716:	3202      	adds	r2, #2
 800c718:	4395      	bics	r5, r2
 800c71a:	4a4a      	ldr	r2, [pc, #296]	; (800c844 <_free_r+0x150>)
 800c71c:	4027      	ands	r7, r4
 800c71e:	6896      	ldr	r6, [r2, #8]
 800c720:	4286      	cmp	r6, r0
 800c722:	d11a      	bne.n	800c75a <_free_r+0x66>
 800c724:	195b      	adds	r3, r3, r5
 800c726:	2f00      	cmp	r7, #0
 800c728:	d106      	bne.n	800c738 <_free_r+0x44>
 800c72a:	6808      	ldr	r0, [r1, #0]
 800c72c:	1a09      	subs	r1, r1, r0
 800c72e:	688d      	ldr	r5, [r1, #8]
 800c730:	181b      	adds	r3, r3, r0
 800c732:	68c8      	ldr	r0, [r1, #12]
 800c734:	60e8      	str	r0, [r5, #12]
 800c736:	6085      	str	r5, [r0, #8]
 800c738:	2001      	movs	r0, #1
 800c73a:	4318      	orrs	r0, r3
 800c73c:	6048      	str	r0, [r1, #4]
 800c73e:	6091      	str	r1, [r2, #8]
 800c740:	4a41      	ldr	r2, [pc, #260]	; (800c848 <_free_r+0x154>)
 800c742:	6812      	ldr	r2, [r2, #0]
 800c744:	429a      	cmp	r2, r3
 800c746:	d804      	bhi.n	800c752 <_free_r+0x5e>
 800c748:	4b40      	ldr	r3, [pc, #256]	; (800c84c <_free_r+0x158>)
 800c74a:	9801      	ldr	r0, [sp, #4]
 800c74c:	6819      	ldr	r1, [r3, #0]
 800c74e:	f7ff ff7d 	bl	800c64c <_malloc_trim_r>
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	f7fe fd30 	bl	800b1b8 <__malloc_unlock>
 800c758:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c75a:	2600      	movs	r6, #0
 800c75c:	6045      	str	r5, [r0, #4]
 800c75e:	42b7      	cmp	r7, r6
 800c760:	d109      	bne.n	800c776 <_free_r+0x82>
 800c762:	680f      	ldr	r7, [r1, #0]
 800c764:	4c3a      	ldr	r4, [pc, #232]	; (800c850 <_free_r+0x15c>)
 800c766:	1bc9      	subs	r1, r1, r7
 800c768:	19db      	adds	r3, r3, r7
 800c76a:	688f      	ldr	r7, [r1, #8]
 800c76c:	42a7      	cmp	r7, r4
 800c76e:	d02c      	beq.n	800c7ca <_free_r+0xd6>
 800c770:	68cc      	ldr	r4, [r1, #12]
 800c772:	60fc      	str	r4, [r7, #12]
 800c774:	60a7      	str	r7, [r4, #8]
 800c776:	1947      	adds	r7, r0, r5
 800c778:	687c      	ldr	r4, [r7, #4]
 800c77a:	2701      	movs	r7, #1
 800c77c:	423c      	tst	r4, r7
 800c77e:	d10b      	bne.n	800c798 <_free_r+0xa4>
 800c780:	195b      	adds	r3, r3, r5
 800c782:	6885      	ldr	r5, [r0, #8]
 800c784:	2e00      	cmp	r6, #0
 800c786:	d122      	bne.n	800c7ce <_free_r+0xda>
 800c788:	4c31      	ldr	r4, [pc, #196]	; (800c850 <_free_r+0x15c>)
 800c78a:	42a5      	cmp	r5, r4
 800c78c:	d11f      	bne.n	800c7ce <_free_r+0xda>
 800c78e:	003e      	movs	r6, r7
 800c790:	6151      	str	r1, [r2, #20]
 800c792:	6111      	str	r1, [r2, #16]
 800c794:	60cd      	str	r5, [r1, #12]
 800c796:	608d      	str	r5, [r1, #8]
 800c798:	2501      	movs	r5, #1
 800c79a:	0028      	movs	r0, r5
 800c79c:	4318      	orrs	r0, r3
 800c79e:	6048      	str	r0, [r1, #4]
 800c7a0:	50cb      	str	r3, [r1, r3]
 800c7a2:	2e00      	cmp	r6, #0
 800c7a4:	d1d5      	bne.n	800c752 <_free_r+0x5e>
 800c7a6:	2080      	movs	r0, #128	; 0x80
 800c7a8:	0080      	lsls	r0, r0, #2
 800c7aa:	4283      	cmp	r3, r0
 800c7ac:	d213      	bcs.n	800c7d6 <_free_r+0xe2>
 800c7ae:	08d8      	lsrs	r0, r3, #3
 800c7b0:	095b      	lsrs	r3, r3, #5
 800c7b2:	409d      	lsls	r5, r3
 800c7b4:	6853      	ldr	r3, [r2, #4]
 800c7b6:	431d      	orrs	r5, r3
 800c7b8:	00c3      	lsls	r3, r0, #3
 800c7ba:	189b      	adds	r3, r3, r2
 800c7bc:	6055      	str	r5, [r2, #4]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	60cb      	str	r3, [r1, #12]
 800c7c2:	608a      	str	r2, [r1, #8]
 800c7c4:	6099      	str	r1, [r3, #8]
 800c7c6:	60d1      	str	r1, [r2, #12]
 800c7c8:	e7c3      	b.n	800c752 <_free_r+0x5e>
 800c7ca:	4666      	mov	r6, ip
 800c7cc:	e7d3      	b.n	800c776 <_free_r+0x82>
 800c7ce:	68c0      	ldr	r0, [r0, #12]
 800c7d0:	60e8      	str	r0, [r5, #12]
 800c7d2:	6085      	str	r5, [r0, #8]
 800c7d4:	e7e0      	b.n	800c798 <_free_r+0xa4>
 800c7d6:	0a5d      	lsrs	r5, r3, #9
 800c7d8:	2d04      	cmp	r5, #4
 800c7da:	d812      	bhi.n	800c802 <_free_r+0x10e>
 800c7dc:	0998      	lsrs	r0, r3, #6
 800c7de:	3038      	adds	r0, #56	; 0x38
 800c7e0:	00c6      	lsls	r6, r0, #3
 800c7e2:	18b6      	adds	r6, r6, r2
 800c7e4:	68b5      	ldr	r5, [r6, #8]
 800c7e6:	2703      	movs	r7, #3
 800c7e8:	42ae      	cmp	r6, r5
 800c7ea:	d125      	bne.n	800c838 <_free_r+0x144>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	1080      	asrs	r0, r0, #2
 800c7f0:	4083      	lsls	r3, r0
 800c7f2:	6850      	ldr	r0, [r2, #4]
 800c7f4:	4303      	orrs	r3, r0
 800c7f6:	6053      	str	r3, [r2, #4]
 800c7f8:	60ce      	str	r6, [r1, #12]
 800c7fa:	608d      	str	r5, [r1, #8]
 800c7fc:	60b1      	str	r1, [r6, #8]
 800c7fe:	60e9      	str	r1, [r5, #12]
 800c800:	e7a7      	b.n	800c752 <_free_r+0x5e>
 800c802:	2d14      	cmp	r5, #20
 800c804:	d802      	bhi.n	800c80c <_free_r+0x118>
 800c806:	0028      	movs	r0, r5
 800c808:	305b      	adds	r0, #91	; 0x5b
 800c80a:	e7e9      	b.n	800c7e0 <_free_r+0xec>
 800c80c:	2d54      	cmp	r5, #84	; 0x54
 800c80e:	d802      	bhi.n	800c816 <_free_r+0x122>
 800c810:	0b18      	lsrs	r0, r3, #12
 800c812:	306e      	adds	r0, #110	; 0x6e
 800c814:	e7e4      	b.n	800c7e0 <_free_r+0xec>
 800c816:	20aa      	movs	r0, #170	; 0xaa
 800c818:	0040      	lsls	r0, r0, #1
 800c81a:	4285      	cmp	r5, r0
 800c81c:	d802      	bhi.n	800c824 <_free_r+0x130>
 800c81e:	0bd8      	lsrs	r0, r3, #15
 800c820:	3077      	adds	r0, #119	; 0x77
 800c822:	e7dd      	b.n	800c7e0 <_free_r+0xec>
 800c824:	4e0b      	ldr	r6, [pc, #44]	; (800c854 <_free_r+0x160>)
 800c826:	207e      	movs	r0, #126	; 0x7e
 800c828:	42b5      	cmp	r5, r6
 800c82a:	d8d9      	bhi.n	800c7e0 <_free_r+0xec>
 800c82c:	0c98      	lsrs	r0, r3, #18
 800c82e:	307c      	adds	r0, #124	; 0x7c
 800c830:	e7d6      	b.n	800c7e0 <_free_r+0xec>
 800c832:	68ad      	ldr	r5, [r5, #8]
 800c834:	42ae      	cmp	r6, r5
 800c836:	d003      	beq.n	800c840 <_free_r+0x14c>
 800c838:	686a      	ldr	r2, [r5, #4]
 800c83a:	43ba      	bics	r2, r7
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d8f8      	bhi.n	800c832 <_free_r+0x13e>
 800c840:	68ee      	ldr	r6, [r5, #12]
 800c842:	e7d9      	b.n	800c7f8 <_free_r+0x104>
 800c844:	20000028 	.word	0x20000028
 800c848:	20000434 	.word	0x20000434
 800c84c:	20000c68 	.word	0x20000c68
 800c850:	20000030 	.word	0x20000030
 800c854:	00000554 	.word	0x00000554

0800c858 <rshift>:
 800c858:	0002      	movs	r2, r0
 800c85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c85c:	6904      	ldr	r4, [r0, #16]
 800c85e:	114b      	asrs	r3, r1, #5
 800c860:	b085      	sub	sp, #20
 800c862:	3214      	adds	r2, #20
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	114d      	asrs	r5, r1, #5
 800c868:	0013      	movs	r3, r2
 800c86a:	42ac      	cmp	r4, r5
 800c86c:	dd32      	ble.n	800c8d4 <rshift+0x7c>
 800c86e:	261f      	movs	r6, #31
 800c870:	000f      	movs	r7, r1
 800c872:	114b      	asrs	r3, r1, #5
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	00a5      	lsls	r5, r4, #2
 800c878:	18d3      	adds	r3, r2, r3
 800c87a:	4037      	ands	r7, r6
 800c87c:	1955      	adds	r5, r2, r5
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	9701      	str	r7, [sp, #4]
 800c882:	4231      	tst	r1, r6
 800c884:	d10d      	bne.n	800c8a2 <rshift+0x4a>
 800c886:	0016      	movs	r6, r2
 800c888:	0019      	movs	r1, r3
 800c88a:	428d      	cmp	r5, r1
 800c88c:	d836      	bhi.n	800c8fc <rshift+0xa4>
 800c88e:	9900      	ldr	r1, [sp, #0]
 800c890:	2300      	movs	r3, #0
 800c892:	3903      	subs	r1, #3
 800c894:	428d      	cmp	r5, r1
 800c896:	d302      	bcc.n	800c89e <rshift+0x46>
 800c898:	9b02      	ldr	r3, [sp, #8]
 800c89a:	1ae4      	subs	r4, r4, r3
 800c89c:	00a3      	lsls	r3, r4, #2
 800c89e:	18d3      	adds	r3, r2, r3
 800c8a0:	e018      	b.n	800c8d4 <rshift+0x7c>
 800c8a2:	2120      	movs	r1, #32
 800c8a4:	9e01      	ldr	r6, [sp, #4]
 800c8a6:	9f01      	ldr	r7, [sp, #4]
 800c8a8:	1b89      	subs	r1, r1, r6
 800c8aa:	9e00      	ldr	r6, [sp, #0]
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	ce02      	ldmia	r6!, {r1}
 800c8b0:	4694      	mov	ip, r2
 800c8b2:	40f9      	lsrs	r1, r7
 800c8b4:	42b5      	cmp	r5, r6
 800c8b6:	d816      	bhi.n	800c8e6 <rshift+0x8e>
 800c8b8:	9e00      	ldr	r6, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	3601      	adds	r6, #1
 800c8be:	42b5      	cmp	r5, r6
 800c8c0:	d303      	bcc.n	800c8ca <rshift+0x72>
 800c8c2:	9b02      	ldr	r3, [sp, #8]
 800c8c4:	1ae3      	subs	r3, r4, r3
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	3b04      	subs	r3, #4
 800c8ca:	18d3      	adds	r3, r2, r3
 800c8cc:	6019      	str	r1, [r3, #0]
 800c8ce:	2900      	cmp	r1, #0
 800c8d0:	d000      	beq.n	800c8d4 <rshift+0x7c>
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	1a99      	subs	r1, r3, r2
 800c8d6:	1089      	asrs	r1, r1, #2
 800c8d8:	6101      	str	r1, [r0, #16]
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d101      	bne.n	800c8e2 <rshift+0x8a>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	6143      	str	r3, [r0, #20]
 800c8e2:	b005      	add	sp, #20
 800c8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e6:	6837      	ldr	r7, [r6, #0]
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	409f      	lsls	r7, r3
 800c8ec:	430f      	orrs	r7, r1
 800c8ee:	4661      	mov	r1, ip
 800c8f0:	c180      	stmia	r1!, {r7}
 800c8f2:	468c      	mov	ip, r1
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	ce02      	ldmia	r6!, {r1}
 800c8f8:	40d9      	lsrs	r1, r3
 800c8fa:	e7db      	b.n	800c8b4 <rshift+0x5c>
 800c8fc:	c980      	ldmia	r1!, {r7}
 800c8fe:	c680      	stmia	r6!, {r7}
 800c900:	e7c3      	b.n	800c88a <rshift+0x32>

0800c902 <__hexdig_fun>:
 800c902:	0002      	movs	r2, r0
 800c904:	3a30      	subs	r2, #48	; 0x30
 800c906:	0003      	movs	r3, r0
 800c908:	2a09      	cmp	r2, #9
 800c90a:	d802      	bhi.n	800c912 <__hexdig_fun+0x10>
 800c90c:	3b20      	subs	r3, #32
 800c90e:	b2d8      	uxtb	r0, r3
 800c910:	4770      	bx	lr
 800c912:	0002      	movs	r2, r0
 800c914:	3a61      	subs	r2, #97	; 0x61
 800c916:	2a05      	cmp	r2, #5
 800c918:	d801      	bhi.n	800c91e <__hexdig_fun+0x1c>
 800c91a:	3b47      	subs	r3, #71	; 0x47
 800c91c:	e7f7      	b.n	800c90e <__hexdig_fun+0xc>
 800c91e:	001a      	movs	r2, r3
 800c920:	3a41      	subs	r2, #65	; 0x41
 800c922:	2000      	movs	r0, #0
 800c924:	2a05      	cmp	r2, #5
 800c926:	d8f3      	bhi.n	800c910 <__hexdig_fun+0xe>
 800c928:	3b27      	subs	r3, #39	; 0x27
 800c92a:	e7f0      	b.n	800c90e <__hexdig_fun+0xc>

0800c92c <__gethex>:
 800c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c92e:	b089      	sub	sp, #36	; 0x24
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	2302      	movs	r3, #2
 800c934:	9201      	str	r2, [sp, #4]
 800c936:	680a      	ldr	r2, [r1, #0]
 800c938:	425b      	negs	r3, r3
 800c93a:	9003      	str	r0, [sp, #12]
 800c93c:	9106      	str	r1, [sp, #24]
 800c93e:	1c96      	adds	r6, r2, #2
 800c940:	1a9b      	subs	r3, r3, r2
 800c942:	199a      	adds	r2, r3, r6
 800c944:	9600      	str	r6, [sp, #0]
 800c946:	9205      	str	r2, [sp, #20]
 800c948:	9a00      	ldr	r2, [sp, #0]
 800c94a:	3601      	adds	r6, #1
 800c94c:	7810      	ldrb	r0, [r2, #0]
 800c94e:	2830      	cmp	r0, #48	; 0x30
 800c950:	d0f7      	beq.n	800c942 <__gethex+0x16>
 800c952:	f7ff ffd6 	bl	800c902 <__hexdig_fun>
 800c956:	2300      	movs	r3, #0
 800c958:	001d      	movs	r5, r3
 800c95a:	9302      	str	r3, [sp, #8]
 800c95c:	4298      	cmp	r0, r3
 800c95e:	d11d      	bne.n	800c99c <__gethex+0x70>
 800c960:	2201      	movs	r2, #1
 800c962:	49a6      	ldr	r1, [pc, #664]	; (800cbfc <__gethex+0x2d0>)
 800c964:	9800      	ldr	r0, [sp, #0]
 800c966:	f7ff fd33 	bl	800c3d0 <strncmp>
 800c96a:	0007      	movs	r7, r0
 800c96c:	42a8      	cmp	r0, r5
 800c96e:	d169      	bne.n	800ca44 <__gethex+0x118>
 800c970:	9b00      	ldr	r3, [sp, #0]
 800c972:	0034      	movs	r4, r6
 800c974:	7858      	ldrb	r0, [r3, #1]
 800c976:	f7ff ffc4 	bl	800c902 <__hexdig_fun>
 800c97a:	2301      	movs	r3, #1
 800c97c:	9302      	str	r3, [sp, #8]
 800c97e:	42a8      	cmp	r0, r5
 800c980:	d02f      	beq.n	800c9e2 <__gethex+0xb6>
 800c982:	9600      	str	r6, [sp, #0]
 800c984:	9b00      	ldr	r3, [sp, #0]
 800c986:	7818      	ldrb	r0, [r3, #0]
 800c988:	2830      	cmp	r0, #48	; 0x30
 800c98a:	d009      	beq.n	800c9a0 <__gethex+0x74>
 800c98c:	f7ff ffb9 	bl	800c902 <__hexdig_fun>
 800c990:	4242      	negs	r2, r0
 800c992:	4142      	adcs	r2, r0
 800c994:	2301      	movs	r3, #1
 800c996:	0035      	movs	r5, r6
 800c998:	9202      	str	r2, [sp, #8]
 800c99a:	9305      	str	r3, [sp, #20]
 800c99c:	9c00      	ldr	r4, [sp, #0]
 800c99e:	e004      	b.n	800c9aa <__gethex+0x7e>
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	e7ed      	b.n	800c984 <__gethex+0x58>
 800c9a8:	3401      	adds	r4, #1
 800c9aa:	7820      	ldrb	r0, [r4, #0]
 800c9ac:	f7ff ffa9 	bl	800c902 <__hexdig_fun>
 800c9b0:	1e07      	subs	r7, r0, #0
 800c9b2:	d1f9      	bne.n	800c9a8 <__gethex+0x7c>
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	0020      	movs	r0, r4
 800c9b8:	4990      	ldr	r1, [pc, #576]	; (800cbfc <__gethex+0x2d0>)
 800c9ba:	f7ff fd09 	bl	800c3d0 <strncmp>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d10d      	bne.n	800c9de <__gethex+0xb2>
 800c9c2:	2d00      	cmp	r5, #0
 800c9c4:	d106      	bne.n	800c9d4 <__gethex+0xa8>
 800c9c6:	3401      	adds	r4, #1
 800c9c8:	0025      	movs	r5, r4
 800c9ca:	7820      	ldrb	r0, [r4, #0]
 800c9cc:	f7ff ff99 	bl	800c902 <__hexdig_fun>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d102      	bne.n	800c9da <__gethex+0xae>
 800c9d4:	1b2d      	subs	r5, r5, r4
 800c9d6:	00af      	lsls	r7, r5, #2
 800c9d8:	e003      	b.n	800c9e2 <__gethex+0xb6>
 800c9da:	3401      	adds	r4, #1
 800c9dc:	e7f5      	b.n	800c9ca <__gethex+0x9e>
 800c9de:	2d00      	cmp	r5, #0
 800c9e0:	d1f8      	bne.n	800c9d4 <__gethex+0xa8>
 800c9e2:	2220      	movs	r2, #32
 800c9e4:	7823      	ldrb	r3, [r4, #0]
 800c9e6:	0026      	movs	r6, r4
 800c9e8:	4393      	bics	r3, r2
 800c9ea:	2b50      	cmp	r3, #80	; 0x50
 800c9ec:	d11d      	bne.n	800ca2a <__gethex+0xfe>
 800c9ee:	7863      	ldrb	r3, [r4, #1]
 800c9f0:	2b2b      	cmp	r3, #43	; 0x2b
 800c9f2:	d02c      	beq.n	800ca4e <__gethex+0x122>
 800c9f4:	2b2d      	cmp	r3, #45	; 0x2d
 800c9f6:	d02e      	beq.n	800ca56 <__gethex+0x12a>
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	1c66      	adds	r6, r4, #1
 800c9fc:	9304      	str	r3, [sp, #16]
 800c9fe:	7830      	ldrb	r0, [r6, #0]
 800ca00:	f7ff ff7f 	bl	800c902 <__hexdig_fun>
 800ca04:	1e43      	subs	r3, r0, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b18      	cmp	r3, #24
 800ca0a:	d82b      	bhi.n	800ca64 <__gethex+0x138>
 800ca0c:	3810      	subs	r0, #16
 800ca0e:	0005      	movs	r5, r0
 800ca10:	7870      	ldrb	r0, [r6, #1]
 800ca12:	f7ff ff76 	bl	800c902 <__hexdig_fun>
 800ca16:	1e43      	subs	r3, r0, #1
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	3601      	adds	r6, #1
 800ca1c:	2b18      	cmp	r3, #24
 800ca1e:	d91c      	bls.n	800ca5a <__gethex+0x12e>
 800ca20:	9b04      	ldr	r3, [sp, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d000      	beq.n	800ca28 <__gethex+0xfc>
 800ca26:	426d      	negs	r5, r5
 800ca28:	197f      	adds	r7, r7, r5
 800ca2a:	9b06      	ldr	r3, [sp, #24]
 800ca2c:	601e      	str	r6, [r3, #0]
 800ca2e:	9b02      	ldr	r3, [sp, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d019      	beq.n	800ca68 <__gethex+0x13c>
 800ca34:	2600      	movs	r6, #0
 800ca36:	9b05      	ldr	r3, [sp, #20]
 800ca38:	42b3      	cmp	r3, r6
 800ca3a:	d100      	bne.n	800ca3e <__gethex+0x112>
 800ca3c:	3606      	adds	r6, #6
 800ca3e:	0030      	movs	r0, r6
 800ca40:	b009      	add	sp, #36	; 0x24
 800ca42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca44:	2301      	movs	r3, #1
 800ca46:	2700      	movs	r7, #0
 800ca48:	9c00      	ldr	r4, [sp, #0]
 800ca4a:	9302      	str	r3, [sp, #8]
 800ca4c:	e7c9      	b.n	800c9e2 <__gethex+0xb6>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9304      	str	r3, [sp, #16]
 800ca52:	1ca6      	adds	r6, r4, #2
 800ca54:	e7d3      	b.n	800c9fe <__gethex+0xd2>
 800ca56:	2301      	movs	r3, #1
 800ca58:	e7fa      	b.n	800ca50 <__gethex+0x124>
 800ca5a:	230a      	movs	r3, #10
 800ca5c:	435d      	muls	r5, r3
 800ca5e:	182d      	adds	r5, r5, r0
 800ca60:	3d10      	subs	r5, #16
 800ca62:	e7d5      	b.n	800ca10 <__gethex+0xe4>
 800ca64:	0026      	movs	r6, r4
 800ca66:	e7e0      	b.n	800ca2a <__gethex+0xfe>
 800ca68:	9b00      	ldr	r3, [sp, #0]
 800ca6a:	9902      	ldr	r1, [sp, #8]
 800ca6c:	1ae3      	subs	r3, r4, r3
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	2b07      	cmp	r3, #7
 800ca72:	dc0a      	bgt.n	800ca8a <__gethex+0x15e>
 800ca74:	9803      	ldr	r0, [sp, #12]
 800ca76:	f000 fa5d 	bl	800cf34 <_Balloc>
 800ca7a:	1e05      	subs	r5, r0, #0
 800ca7c:	d108      	bne.n	800ca90 <__gethex+0x164>
 800ca7e:	002a      	movs	r2, r5
 800ca80:	21e4      	movs	r1, #228	; 0xe4
 800ca82:	4b5f      	ldr	r3, [pc, #380]	; (800cc00 <__gethex+0x2d4>)
 800ca84:	485f      	ldr	r0, [pc, #380]	; (800cc04 <__gethex+0x2d8>)
 800ca86:	f003 fd19 	bl	80104bc <__assert_func>
 800ca8a:	3101      	adds	r1, #1
 800ca8c:	105b      	asrs	r3, r3, #1
 800ca8e:	e7ef      	b.n	800ca70 <__gethex+0x144>
 800ca90:	0003      	movs	r3, r0
 800ca92:	3314      	adds	r3, #20
 800ca94:	9302      	str	r3, [sp, #8]
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	2300      	movs	r3, #0
 800ca9a:	001e      	movs	r6, r3
 800ca9c:	9304      	str	r3, [sp, #16]
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d33f      	bcc.n	800cb24 <__gethex+0x1f8>
 800caa4:	9c05      	ldr	r4, [sp, #20]
 800caa6:	9b02      	ldr	r3, [sp, #8]
 800caa8:	c440      	stmia	r4!, {r6}
 800caaa:	1ae4      	subs	r4, r4, r3
 800caac:	10a4      	asrs	r4, r4, #2
 800caae:	0030      	movs	r0, r6
 800cab0:	612c      	str	r4, [r5, #16]
 800cab2:	f000 fb01 	bl	800d0b8 <__hi0bits>
 800cab6:	9b01      	ldr	r3, [sp, #4]
 800cab8:	0164      	lsls	r4, r4, #5
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	1a26      	subs	r6, r4, r0
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	429e      	cmp	r6, r3
 800cac2:	dd51      	ble.n	800cb68 <__gethex+0x23c>
 800cac4:	1af6      	subs	r6, r6, r3
 800cac6:	0031      	movs	r1, r6
 800cac8:	0028      	movs	r0, r5
 800caca:	f000 fe7b 	bl	800d7c4 <__any_on>
 800cace:	1e04      	subs	r4, r0, #0
 800cad0:	d016      	beq.n	800cb00 <__gethex+0x1d4>
 800cad2:	2401      	movs	r4, #1
 800cad4:	231f      	movs	r3, #31
 800cad6:	0020      	movs	r0, r4
 800cad8:	1e72      	subs	r2, r6, #1
 800cada:	4013      	ands	r3, r2
 800cadc:	4098      	lsls	r0, r3
 800cade:	0003      	movs	r3, r0
 800cae0:	1151      	asrs	r1, r2, #5
 800cae2:	9802      	ldr	r0, [sp, #8]
 800cae4:	0089      	lsls	r1, r1, #2
 800cae6:	5809      	ldr	r1, [r1, r0]
 800cae8:	4219      	tst	r1, r3
 800caea:	d009      	beq.n	800cb00 <__gethex+0x1d4>
 800caec:	42a2      	cmp	r2, r4
 800caee:	dd06      	ble.n	800cafe <__gethex+0x1d2>
 800caf0:	0028      	movs	r0, r5
 800caf2:	1eb1      	subs	r1, r6, #2
 800caf4:	f000 fe66 	bl	800d7c4 <__any_on>
 800caf8:	3402      	adds	r4, #2
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d100      	bne.n	800cb00 <__gethex+0x1d4>
 800cafe:	2402      	movs	r4, #2
 800cb00:	0031      	movs	r1, r6
 800cb02:	0028      	movs	r0, r5
 800cb04:	f7ff fea8 	bl	800c858 <rshift>
 800cb08:	19bf      	adds	r7, r7, r6
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	42bb      	cmp	r3, r7
 800cb10:	da3a      	bge.n	800cb88 <__gethex+0x25c>
 800cb12:	0029      	movs	r1, r5
 800cb14:	9803      	ldr	r0, [sp, #12]
 800cb16:	f000 fa35 	bl	800cf84 <_Bfree>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb1e:	26a3      	movs	r6, #163	; 0xa3
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	e78c      	b.n	800ca3e <__gethex+0x112>
 800cb24:	3c01      	subs	r4, #1
 800cb26:	7823      	ldrb	r3, [r4, #0]
 800cb28:	2b2e      	cmp	r3, #46	; 0x2e
 800cb2a:	d012      	beq.n	800cb52 <__gethex+0x226>
 800cb2c:	9b04      	ldr	r3, [sp, #16]
 800cb2e:	2b20      	cmp	r3, #32
 800cb30:	d104      	bne.n	800cb3c <__gethex+0x210>
 800cb32:	9b05      	ldr	r3, [sp, #20]
 800cb34:	c340      	stmia	r3!, {r6}
 800cb36:	2600      	movs	r6, #0
 800cb38:	9305      	str	r3, [sp, #20]
 800cb3a:	9604      	str	r6, [sp, #16]
 800cb3c:	7820      	ldrb	r0, [r4, #0]
 800cb3e:	f7ff fee0 	bl	800c902 <__hexdig_fun>
 800cb42:	230f      	movs	r3, #15
 800cb44:	4018      	ands	r0, r3
 800cb46:	9b04      	ldr	r3, [sp, #16]
 800cb48:	4098      	lsls	r0, r3
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	4306      	orrs	r6, r0
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	e7a5      	b.n	800ca9e <__gethex+0x172>
 800cb52:	9b00      	ldr	r3, [sp, #0]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	d8e9      	bhi.n	800cb2c <__gethex+0x200>
 800cb58:	2201      	movs	r2, #1
 800cb5a:	0020      	movs	r0, r4
 800cb5c:	4927      	ldr	r1, [pc, #156]	; (800cbfc <__gethex+0x2d0>)
 800cb5e:	f7ff fc37 	bl	800c3d0 <strncmp>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d1e2      	bne.n	800cb2c <__gethex+0x200>
 800cb66:	e79a      	b.n	800ca9e <__gethex+0x172>
 800cb68:	9b00      	ldr	r3, [sp, #0]
 800cb6a:	2400      	movs	r4, #0
 800cb6c:	429e      	cmp	r6, r3
 800cb6e:	dacc      	bge.n	800cb0a <__gethex+0x1de>
 800cb70:	1b9e      	subs	r6, r3, r6
 800cb72:	0029      	movs	r1, r5
 800cb74:	0032      	movs	r2, r6
 800cb76:	9803      	ldr	r0, [sp, #12]
 800cb78:	f000 fbf0 	bl	800d35c <__lshift>
 800cb7c:	0003      	movs	r3, r0
 800cb7e:	3314      	adds	r3, #20
 800cb80:	0005      	movs	r5, r0
 800cb82:	1bbf      	subs	r7, r7, r6
 800cb84:	9302      	str	r3, [sp, #8]
 800cb86:	e7c0      	b.n	800cb0a <__gethex+0x1de>
 800cb88:	9b01      	ldr	r3, [sp, #4]
 800cb8a:	685e      	ldr	r6, [r3, #4]
 800cb8c:	42be      	cmp	r6, r7
 800cb8e:	dd70      	ble.n	800cc72 <__gethex+0x346>
 800cb90:	9b00      	ldr	r3, [sp, #0]
 800cb92:	1bf6      	subs	r6, r6, r7
 800cb94:	42b3      	cmp	r3, r6
 800cb96:	dc37      	bgt.n	800cc08 <__gethex+0x2dc>
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d024      	beq.n	800cbea <__gethex+0x2be>
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d026      	beq.n	800cbf2 <__gethex+0x2c6>
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d117      	bne.n	800cbd8 <__gethex+0x2ac>
 800cba8:	9b00      	ldr	r3, [sp, #0]
 800cbaa:	42b3      	cmp	r3, r6
 800cbac:	d114      	bne.n	800cbd8 <__gethex+0x2ac>
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d10b      	bne.n	800cbca <__gethex+0x29e>
 800cbb2:	9b01      	ldr	r3, [sp, #4]
 800cbb4:	9a07      	ldr	r2, [sp, #28]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	2662      	movs	r6, #98	; 0x62
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	9a02      	ldr	r2, [sp, #8]
 800cbc0:	612b      	str	r3, [r5, #16]
 800cbc2:	6013      	str	r3, [r2, #0]
 800cbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbc6:	601d      	str	r5, [r3, #0]
 800cbc8:	e739      	b.n	800ca3e <__gethex+0x112>
 800cbca:	9900      	ldr	r1, [sp, #0]
 800cbcc:	0028      	movs	r0, r5
 800cbce:	3901      	subs	r1, #1
 800cbd0:	f000 fdf8 	bl	800d7c4 <__any_on>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d1ec      	bne.n	800cbb2 <__gethex+0x286>
 800cbd8:	0029      	movs	r1, r5
 800cbda:	9803      	ldr	r0, [sp, #12]
 800cbdc:	f000 f9d2 	bl	800cf84 <_Bfree>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbe4:	2650      	movs	r6, #80	; 0x50
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e729      	b.n	800ca3e <__gethex+0x112>
 800cbea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1f3      	bne.n	800cbd8 <__gethex+0x2ac>
 800cbf0:	e7df      	b.n	800cbb2 <__gethex+0x286>
 800cbf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1dc      	bne.n	800cbb2 <__gethex+0x286>
 800cbf8:	e7ee      	b.n	800cbd8 <__gethex+0x2ac>
 800cbfa:	46c0      	nop			; (mov r8, r8)
 800cbfc:	08014ac4 	.word	0x08014ac4
 800cc00:	08014c21 	.word	0x08014c21
 800cc04:	08014c32 	.word	0x08014c32
 800cc08:	1e77      	subs	r7, r6, #1
 800cc0a:	2c00      	cmp	r4, #0
 800cc0c:	d12f      	bne.n	800cc6e <__gethex+0x342>
 800cc0e:	2f00      	cmp	r7, #0
 800cc10:	d004      	beq.n	800cc1c <__gethex+0x2f0>
 800cc12:	0039      	movs	r1, r7
 800cc14:	0028      	movs	r0, r5
 800cc16:	f000 fdd5 	bl	800d7c4 <__any_on>
 800cc1a:	0004      	movs	r4, r0
 800cc1c:	231f      	movs	r3, #31
 800cc1e:	117a      	asrs	r2, r7, #5
 800cc20:	401f      	ands	r7, r3
 800cc22:	3b1e      	subs	r3, #30
 800cc24:	40bb      	lsls	r3, r7
 800cc26:	9902      	ldr	r1, [sp, #8]
 800cc28:	0092      	lsls	r2, r2, #2
 800cc2a:	5852      	ldr	r2, [r2, r1]
 800cc2c:	421a      	tst	r2, r3
 800cc2e:	d001      	beq.n	800cc34 <__gethex+0x308>
 800cc30:	2302      	movs	r3, #2
 800cc32:	431c      	orrs	r4, r3
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	0031      	movs	r1, r6
 800cc38:	1b9b      	subs	r3, r3, r6
 800cc3a:	2602      	movs	r6, #2
 800cc3c:	0028      	movs	r0, r5
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	f7ff fe0a 	bl	800c858 <rshift>
 800cc44:	9b01      	ldr	r3, [sp, #4]
 800cc46:	685f      	ldr	r7, [r3, #4]
 800cc48:	2c00      	cmp	r4, #0
 800cc4a:	d041      	beq.n	800ccd0 <__gethex+0x3a4>
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d010      	beq.n	800cc76 <__gethex+0x34a>
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d012      	beq.n	800cc7e <__gethex+0x352>
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d106      	bne.n	800cc6a <__gethex+0x33e>
 800cc5c:	07a2      	lsls	r2, r4, #30
 800cc5e:	d504      	bpl.n	800cc6a <__gethex+0x33e>
 800cc60:	9a02      	ldr	r2, [sp, #8]
 800cc62:	6812      	ldr	r2, [r2, #0]
 800cc64:	4314      	orrs	r4, r2
 800cc66:	421c      	tst	r4, r3
 800cc68:	d10c      	bne.n	800cc84 <__gethex+0x358>
 800cc6a:	2310      	movs	r3, #16
 800cc6c:	e02f      	b.n	800ccce <__gethex+0x3a2>
 800cc6e:	2401      	movs	r4, #1
 800cc70:	e7d4      	b.n	800cc1c <__gethex+0x2f0>
 800cc72:	2601      	movs	r6, #1
 800cc74:	e7e8      	b.n	800cc48 <__gethex+0x31c>
 800cc76:	2301      	movs	r3, #1
 800cc78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc7a:	1a9b      	subs	r3, r3, r2
 800cc7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0f2      	beq.n	800cc6a <__gethex+0x33e>
 800cc84:	692b      	ldr	r3, [r5, #16]
 800cc86:	2000      	movs	r0, #0
 800cc88:	9302      	str	r3, [sp, #8]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	9304      	str	r3, [sp, #16]
 800cc8e:	002b      	movs	r3, r5
 800cc90:	9a04      	ldr	r2, [sp, #16]
 800cc92:	3314      	adds	r3, #20
 800cc94:	1899      	adds	r1, r3, r2
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	1c54      	adds	r4, r2, #1
 800cc9a:	d01e      	beq.n	800ccda <__gethex+0x3ae>
 800cc9c:	3201      	adds	r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	002b      	movs	r3, r5
 800cca2:	3314      	adds	r3, #20
 800cca4:	2e02      	cmp	r6, #2
 800cca6:	d141      	bne.n	800cd2c <__gethex+0x400>
 800cca8:	9a01      	ldr	r2, [sp, #4]
 800ccaa:	9900      	ldr	r1, [sp, #0]
 800ccac:	6812      	ldr	r2, [r2, #0]
 800ccae:	3a01      	subs	r2, #1
 800ccb0:	428a      	cmp	r2, r1
 800ccb2:	d10b      	bne.n	800cccc <__gethex+0x3a0>
 800ccb4:	221f      	movs	r2, #31
 800ccb6:	9800      	ldr	r0, [sp, #0]
 800ccb8:	1149      	asrs	r1, r1, #5
 800ccba:	4002      	ands	r2, r0
 800ccbc:	2001      	movs	r0, #1
 800ccbe:	0004      	movs	r4, r0
 800ccc0:	4094      	lsls	r4, r2
 800ccc2:	0089      	lsls	r1, r1, #2
 800ccc4:	58cb      	ldr	r3, [r1, r3]
 800ccc6:	4223      	tst	r3, r4
 800ccc8:	d000      	beq.n	800cccc <__gethex+0x3a0>
 800ccca:	2601      	movs	r6, #1
 800cccc:	2320      	movs	r3, #32
 800ccce:	431e      	orrs	r6, r3
 800ccd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ccd2:	601d      	str	r5, [r3, #0]
 800ccd4:	9b07      	ldr	r3, [sp, #28]
 800ccd6:	601f      	str	r7, [r3, #0]
 800ccd8:	e6b1      	b.n	800ca3e <__gethex+0x112>
 800ccda:	c301      	stmia	r3!, {r0}
 800ccdc:	4299      	cmp	r1, r3
 800ccde:	d8da      	bhi.n	800cc96 <__gethex+0x36a>
 800cce0:	68ab      	ldr	r3, [r5, #8]
 800cce2:	9a02      	ldr	r2, [sp, #8]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	db18      	blt.n	800cd1a <__gethex+0x3ee>
 800cce8:	6869      	ldr	r1, [r5, #4]
 800ccea:	9803      	ldr	r0, [sp, #12]
 800ccec:	3101      	adds	r1, #1
 800ccee:	f000 f921 	bl	800cf34 <_Balloc>
 800ccf2:	1e04      	subs	r4, r0, #0
 800ccf4:	d104      	bne.n	800cd00 <__gethex+0x3d4>
 800ccf6:	0022      	movs	r2, r4
 800ccf8:	2184      	movs	r1, #132	; 0x84
 800ccfa:	4b1c      	ldr	r3, [pc, #112]	; (800cd6c <__gethex+0x440>)
 800ccfc:	481c      	ldr	r0, [pc, #112]	; (800cd70 <__gethex+0x444>)
 800ccfe:	e6c2      	b.n	800ca86 <__gethex+0x15a>
 800cd00:	0029      	movs	r1, r5
 800cd02:	692a      	ldr	r2, [r5, #16]
 800cd04:	310c      	adds	r1, #12
 800cd06:	3202      	adds	r2, #2
 800cd08:	0092      	lsls	r2, r2, #2
 800cd0a:	300c      	adds	r0, #12
 800cd0c:	f7ff fc77 	bl	800c5fe <memcpy>
 800cd10:	0029      	movs	r1, r5
 800cd12:	9803      	ldr	r0, [sp, #12]
 800cd14:	f000 f936 	bl	800cf84 <_Bfree>
 800cd18:	0025      	movs	r5, r4
 800cd1a:	692b      	ldr	r3, [r5, #16]
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	612a      	str	r2, [r5, #16]
 800cd20:	2201      	movs	r2, #1
 800cd22:	3304      	adds	r3, #4
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	18eb      	adds	r3, r5, r3
 800cd28:	605a      	str	r2, [r3, #4]
 800cd2a:	e7b9      	b.n	800cca0 <__gethex+0x374>
 800cd2c:	692a      	ldr	r2, [r5, #16]
 800cd2e:	9902      	ldr	r1, [sp, #8]
 800cd30:	428a      	cmp	r2, r1
 800cd32:	dd09      	ble.n	800cd48 <__gethex+0x41c>
 800cd34:	2101      	movs	r1, #1
 800cd36:	0028      	movs	r0, r5
 800cd38:	f7ff fd8e 	bl	800c858 <rshift>
 800cd3c:	9b01      	ldr	r3, [sp, #4]
 800cd3e:	3701      	adds	r7, #1
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	42bb      	cmp	r3, r7
 800cd44:	dac1      	bge.n	800ccca <__gethex+0x39e>
 800cd46:	e6e4      	b.n	800cb12 <__gethex+0x1e6>
 800cd48:	221f      	movs	r2, #31
 800cd4a:	9c00      	ldr	r4, [sp, #0]
 800cd4c:	9900      	ldr	r1, [sp, #0]
 800cd4e:	2601      	movs	r6, #1
 800cd50:	4014      	ands	r4, r2
 800cd52:	4211      	tst	r1, r2
 800cd54:	d0ba      	beq.n	800cccc <__gethex+0x3a0>
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	189b      	adds	r3, r3, r2
 800cd5a:	3b04      	subs	r3, #4
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	f000 f9ab 	bl	800d0b8 <__hi0bits>
 800cd62:	2320      	movs	r3, #32
 800cd64:	1b1b      	subs	r3, r3, r4
 800cd66:	4298      	cmp	r0, r3
 800cd68:	dbe4      	blt.n	800cd34 <__gethex+0x408>
 800cd6a:	e7af      	b.n	800cccc <__gethex+0x3a0>
 800cd6c:	08014c21 	.word	0x08014c21
 800cd70:	08014c32 	.word	0x08014c32

0800cd74 <L_shift>:
 800cd74:	2308      	movs	r3, #8
 800cd76:	b570      	push	{r4, r5, r6, lr}
 800cd78:	2520      	movs	r5, #32
 800cd7a:	1a9a      	subs	r2, r3, r2
 800cd7c:	0092      	lsls	r2, r2, #2
 800cd7e:	1aad      	subs	r5, r5, r2
 800cd80:	6843      	ldr	r3, [r0, #4]
 800cd82:	6804      	ldr	r4, [r0, #0]
 800cd84:	001e      	movs	r6, r3
 800cd86:	40ae      	lsls	r6, r5
 800cd88:	40d3      	lsrs	r3, r2
 800cd8a:	4334      	orrs	r4, r6
 800cd8c:	6004      	str	r4, [r0, #0]
 800cd8e:	6043      	str	r3, [r0, #4]
 800cd90:	3004      	adds	r0, #4
 800cd92:	4288      	cmp	r0, r1
 800cd94:	d3f4      	bcc.n	800cd80 <L_shift+0xc>
 800cd96:	bd70      	pop	{r4, r5, r6, pc}

0800cd98 <__match>:
 800cd98:	b530      	push	{r4, r5, lr}
 800cd9a:	6803      	ldr	r3, [r0, #0]
 800cd9c:	780c      	ldrb	r4, [r1, #0]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	2c00      	cmp	r4, #0
 800cda2:	d102      	bne.n	800cdaa <__match+0x12>
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	2001      	movs	r0, #1
 800cda8:	bd30      	pop	{r4, r5, pc}
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	0015      	movs	r5, r2
 800cdae:	3d41      	subs	r5, #65	; 0x41
 800cdb0:	2d19      	cmp	r5, #25
 800cdb2:	d800      	bhi.n	800cdb6 <__match+0x1e>
 800cdb4:	3220      	adds	r2, #32
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	42a2      	cmp	r2, r4
 800cdba:	d0ef      	beq.n	800cd9c <__match+0x4>
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	e7f3      	b.n	800cda8 <__match+0x10>

0800cdc0 <__hexnan>:
 800cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc2:	680b      	ldr	r3, [r1, #0]
 800cdc4:	b08b      	sub	sp, #44	; 0x2c
 800cdc6:	9201      	str	r2, [sp, #4]
 800cdc8:	9901      	ldr	r1, [sp, #4]
 800cdca:	115a      	asrs	r2, r3, #5
 800cdcc:	0092      	lsls	r2, r2, #2
 800cdce:	188a      	adds	r2, r1, r2
 800cdd0:	9202      	str	r2, [sp, #8]
 800cdd2:	0019      	movs	r1, r3
 800cdd4:	221f      	movs	r2, #31
 800cdd6:	4011      	ands	r1, r2
 800cdd8:	9008      	str	r0, [sp, #32]
 800cdda:	9106      	str	r1, [sp, #24]
 800cddc:	4213      	tst	r3, r2
 800cdde:	d002      	beq.n	800cde6 <__hexnan+0x26>
 800cde0:	9b02      	ldr	r3, [sp, #8]
 800cde2:	3304      	adds	r3, #4
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	9b02      	ldr	r3, [sp, #8]
 800cde8:	2500      	movs	r5, #0
 800cdea:	1f1f      	subs	r7, r3, #4
 800cdec:	003e      	movs	r6, r7
 800cdee:	003c      	movs	r4, r7
 800cdf0:	9b08      	ldr	r3, [sp, #32]
 800cdf2:	603d      	str	r5, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	9507      	str	r5, [sp, #28]
 800cdf8:	9305      	str	r3, [sp, #20]
 800cdfa:	9503      	str	r5, [sp, #12]
 800cdfc:	9b05      	ldr	r3, [sp, #20]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	9309      	str	r3, [sp, #36]	; 0x24
 800ce02:	9b05      	ldr	r3, [sp, #20]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	9304      	str	r3, [sp, #16]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d028      	beq.n	800ce5e <__hexnan+0x9e>
 800ce0c:	9804      	ldr	r0, [sp, #16]
 800ce0e:	f7ff fd78 	bl	800c902 <__hexdig_fun>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d154      	bne.n	800cec0 <__hexnan+0x100>
 800ce16:	9b04      	ldr	r3, [sp, #16]
 800ce18:	2b20      	cmp	r3, #32
 800ce1a:	d819      	bhi.n	800ce50 <__hexnan+0x90>
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	9a07      	ldr	r2, [sp, #28]
 800ce20:	4293      	cmp	r3, r2
 800ce22:	dd12      	ble.n	800ce4a <__hexnan+0x8a>
 800ce24:	42b4      	cmp	r4, r6
 800ce26:	d206      	bcs.n	800ce36 <__hexnan+0x76>
 800ce28:	2d07      	cmp	r5, #7
 800ce2a:	dc04      	bgt.n	800ce36 <__hexnan+0x76>
 800ce2c:	002a      	movs	r2, r5
 800ce2e:	0031      	movs	r1, r6
 800ce30:	0020      	movs	r0, r4
 800ce32:	f7ff ff9f 	bl	800cd74 <L_shift>
 800ce36:	9b01      	ldr	r3, [sp, #4]
 800ce38:	2508      	movs	r5, #8
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d905      	bls.n	800ce4a <__hexnan+0x8a>
 800ce3e:	1f26      	subs	r6, r4, #4
 800ce40:	2500      	movs	r5, #0
 800ce42:	0034      	movs	r4, r6
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	6035      	str	r5, [r6, #0]
 800ce48:	9307      	str	r3, [sp, #28]
 800ce4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4c:	9305      	str	r3, [sp, #20]
 800ce4e:	e7d5      	b.n	800cdfc <__hexnan+0x3c>
 800ce50:	9b04      	ldr	r3, [sp, #16]
 800ce52:	2b29      	cmp	r3, #41	; 0x29
 800ce54:	d159      	bne.n	800cf0a <__hexnan+0x14a>
 800ce56:	9b05      	ldr	r3, [sp, #20]
 800ce58:	9a08      	ldr	r2, [sp, #32]
 800ce5a:	3302      	adds	r3, #2
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d052      	beq.n	800cf0a <__hexnan+0x14a>
 800ce64:	42b4      	cmp	r4, r6
 800ce66:	d206      	bcs.n	800ce76 <__hexnan+0xb6>
 800ce68:	2d07      	cmp	r5, #7
 800ce6a:	dc04      	bgt.n	800ce76 <__hexnan+0xb6>
 800ce6c:	002a      	movs	r2, r5
 800ce6e:	0031      	movs	r1, r6
 800ce70:	0020      	movs	r0, r4
 800ce72:	f7ff ff7f 	bl	800cd74 <L_shift>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	429c      	cmp	r4, r3
 800ce7a:	d935      	bls.n	800cee8 <__hexnan+0x128>
 800ce7c:	001a      	movs	r2, r3
 800ce7e:	0023      	movs	r3, r4
 800ce80:	cb02      	ldmia	r3!, {r1}
 800ce82:	c202      	stmia	r2!, {r1}
 800ce84:	429f      	cmp	r7, r3
 800ce86:	d2fb      	bcs.n	800ce80 <__hexnan+0xc0>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	1c62      	adds	r2, r4, #1
 800ce8c:	1ed9      	subs	r1, r3, #3
 800ce8e:	2304      	movs	r3, #4
 800ce90:	4291      	cmp	r1, r2
 800ce92:	d305      	bcc.n	800cea0 <__hexnan+0xe0>
 800ce94:	9b02      	ldr	r3, [sp, #8]
 800ce96:	3b04      	subs	r3, #4
 800ce98:	1b1b      	subs	r3, r3, r4
 800ce9a:	089b      	lsrs	r3, r3, #2
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	9a01      	ldr	r2, [sp, #4]
 800cea2:	18d3      	adds	r3, r2, r3
 800cea4:	2200      	movs	r2, #0
 800cea6:	c304      	stmia	r3!, {r2}
 800cea8:	429f      	cmp	r7, r3
 800ceaa:	d2fc      	bcs.n	800cea6 <__hexnan+0xe6>
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d104      	bne.n	800cebc <__hexnan+0xfc>
 800ceb2:	9b01      	ldr	r3, [sp, #4]
 800ceb4:	429f      	cmp	r7, r3
 800ceb6:	d126      	bne.n	800cf06 <__hexnan+0x146>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	603b      	str	r3, [r7, #0]
 800cebc:	2005      	movs	r0, #5
 800cebe:	e025      	b.n	800cf0c <__hexnan+0x14c>
 800cec0:	9b03      	ldr	r3, [sp, #12]
 800cec2:	3501      	adds	r5, #1
 800cec4:	3301      	adds	r3, #1
 800cec6:	9303      	str	r3, [sp, #12]
 800cec8:	2d08      	cmp	r5, #8
 800ceca:	dd06      	ble.n	800ceda <__hexnan+0x11a>
 800cecc:	9b01      	ldr	r3, [sp, #4]
 800cece:	429c      	cmp	r4, r3
 800ced0:	d9bb      	bls.n	800ce4a <__hexnan+0x8a>
 800ced2:	2300      	movs	r3, #0
 800ced4:	2501      	movs	r5, #1
 800ced6:	3c04      	subs	r4, #4
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	220f      	movs	r2, #15
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	4010      	ands	r0, r2
 800cee0:	011b      	lsls	r3, r3, #4
 800cee2:	4303      	orrs	r3, r0
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	e7b0      	b.n	800ce4a <__hexnan+0x8a>
 800cee8:	9b06      	ldr	r3, [sp, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0de      	beq.n	800ceac <__hexnan+0xec>
 800ceee:	2320      	movs	r3, #32
 800cef0:	9a06      	ldr	r2, [sp, #24]
 800cef2:	9902      	ldr	r1, [sp, #8]
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	2201      	movs	r2, #1
 800cef8:	4252      	negs	r2, r2
 800cefa:	40da      	lsrs	r2, r3
 800cefc:	3904      	subs	r1, #4
 800cefe:	680b      	ldr	r3, [r1, #0]
 800cf00:	4013      	ands	r3, r2
 800cf02:	600b      	str	r3, [r1, #0]
 800cf04:	e7d2      	b.n	800ceac <__hexnan+0xec>
 800cf06:	3f04      	subs	r7, #4
 800cf08:	e7d0      	b.n	800ceac <__hexnan+0xec>
 800cf0a:	2004      	movs	r0, #4
 800cf0c:	b00b      	add	sp, #44	; 0x2c
 800cf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf10 <__ascii_mbtowc>:
 800cf10:	b082      	sub	sp, #8
 800cf12:	2900      	cmp	r1, #0
 800cf14:	d100      	bne.n	800cf18 <__ascii_mbtowc+0x8>
 800cf16:	a901      	add	r1, sp, #4
 800cf18:	1e10      	subs	r0, r2, #0
 800cf1a:	d006      	beq.n	800cf2a <__ascii_mbtowc+0x1a>
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d006      	beq.n	800cf2e <__ascii_mbtowc+0x1e>
 800cf20:	7813      	ldrb	r3, [r2, #0]
 800cf22:	600b      	str	r3, [r1, #0]
 800cf24:	7810      	ldrb	r0, [r2, #0]
 800cf26:	1e43      	subs	r3, r0, #1
 800cf28:	4198      	sbcs	r0, r3
 800cf2a:	b002      	add	sp, #8
 800cf2c:	4770      	bx	lr
 800cf2e:	2002      	movs	r0, #2
 800cf30:	4240      	negs	r0, r0
 800cf32:	e7fa      	b.n	800cf2a <__ascii_mbtowc+0x1a>

0800cf34 <_Balloc>:
 800cf34:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cf36:	b570      	push	{r4, r5, r6, lr}
 800cf38:	0006      	movs	r6, r0
 800cf3a:	000c      	movs	r4, r1
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d012      	beq.n	800cf66 <_Balloc+0x32>
 800cf40:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800cf42:	00a2      	lsls	r2, r4, #2
 800cf44:	189b      	adds	r3, r3, r2
 800cf46:	6818      	ldr	r0, [r3, #0]
 800cf48:	2800      	cmp	r0, #0
 800cf4a:	d115      	bne.n	800cf78 <_Balloc+0x44>
 800cf4c:	2101      	movs	r1, #1
 800cf4e:	000d      	movs	r5, r1
 800cf50:	40a5      	lsls	r5, r4
 800cf52:	1d6a      	adds	r2, r5, #5
 800cf54:	0030      	movs	r0, r6
 800cf56:	0092      	lsls	r2, r2, #2
 800cf58:	f003 face 	bl	80104f8 <_calloc_r>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d009      	beq.n	800cf74 <_Balloc+0x40>
 800cf60:	6044      	str	r4, [r0, #4]
 800cf62:	6085      	str	r5, [r0, #8]
 800cf64:	e00a      	b.n	800cf7c <_Balloc+0x48>
 800cf66:	2221      	movs	r2, #33	; 0x21
 800cf68:	2104      	movs	r1, #4
 800cf6a:	f003 fac5 	bl	80104f8 <_calloc_r>
 800cf6e:	6470      	str	r0, [r6, #68]	; 0x44
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1e5      	bne.n	800cf40 <_Balloc+0xc>
 800cf74:	2000      	movs	r0, #0
 800cf76:	bd70      	pop	{r4, r5, r6, pc}
 800cf78:	6802      	ldr	r2, [r0, #0]
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6103      	str	r3, [r0, #16]
 800cf80:	60c3      	str	r3, [r0, #12]
 800cf82:	e7f8      	b.n	800cf76 <_Balloc+0x42>

0800cf84 <_Bfree>:
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d006      	beq.n	800cf96 <_Bfree+0x12>
 800cf88:	684a      	ldr	r2, [r1, #4]
 800cf8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cf8c:	0092      	lsls	r2, r2, #2
 800cf8e:	189b      	adds	r3, r3, r2
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	600a      	str	r2, [r1, #0]
 800cf94:	6019      	str	r1, [r3, #0]
 800cf96:	4770      	bx	lr

0800cf98 <__multadd>:
 800cf98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf9a:	000e      	movs	r6, r1
 800cf9c:	9001      	str	r0, [sp, #4]
 800cf9e:	000c      	movs	r4, r1
 800cfa0:	001d      	movs	r5, r3
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	690f      	ldr	r7, [r1, #16]
 800cfa6:	3614      	adds	r6, #20
 800cfa8:	6833      	ldr	r3, [r6, #0]
 800cfaa:	3001      	adds	r0, #1
 800cfac:	b299      	uxth	r1, r3
 800cfae:	4351      	muls	r1, r2
 800cfb0:	0c1b      	lsrs	r3, r3, #16
 800cfb2:	4353      	muls	r3, r2
 800cfb4:	1949      	adds	r1, r1, r5
 800cfb6:	0c0d      	lsrs	r5, r1, #16
 800cfb8:	195b      	adds	r3, r3, r5
 800cfba:	0c1d      	lsrs	r5, r3, #16
 800cfbc:	b289      	uxth	r1, r1
 800cfbe:	041b      	lsls	r3, r3, #16
 800cfc0:	185b      	adds	r3, r3, r1
 800cfc2:	c608      	stmia	r6!, {r3}
 800cfc4:	4287      	cmp	r7, r0
 800cfc6:	dcef      	bgt.n	800cfa8 <__multadd+0x10>
 800cfc8:	2d00      	cmp	r5, #0
 800cfca:	d022      	beq.n	800d012 <__multadd+0x7a>
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	42bb      	cmp	r3, r7
 800cfd0:	dc19      	bgt.n	800d006 <__multadd+0x6e>
 800cfd2:	6861      	ldr	r1, [r4, #4]
 800cfd4:	9801      	ldr	r0, [sp, #4]
 800cfd6:	3101      	adds	r1, #1
 800cfd8:	f7ff ffac 	bl	800cf34 <_Balloc>
 800cfdc:	1e06      	subs	r6, r0, #0
 800cfde:	d105      	bne.n	800cfec <__multadd+0x54>
 800cfe0:	0032      	movs	r2, r6
 800cfe2:	21ba      	movs	r1, #186	; 0xba
 800cfe4:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <__multadd+0x80>)
 800cfe6:	480d      	ldr	r0, [pc, #52]	; (800d01c <__multadd+0x84>)
 800cfe8:	f003 fa68 	bl	80104bc <__assert_func>
 800cfec:	0021      	movs	r1, r4
 800cfee:	6922      	ldr	r2, [r4, #16]
 800cff0:	310c      	adds	r1, #12
 800cff2:	3202      	adds	r2, #2
 800cff4:	0092      	lsls	r2, r2, #2
 800cff6:	300c      	adds	r0, #12
 800cff8:	f7ff fb01 	bl	800c5fe <memcpy>
 800cffc:	0021      	movs	r1, r4
 800cffe:	9801      	ldr	r0, [sp, #4]
 800d000:	f7ff ffc0 	bl	800cf84 <_Bfree>
 800d004:	0034      	movs	r4, r6
 800d006:	1d3b      	adds	r3, r7, #4
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	18e3      	adds	r3, r4, r3
 800d00c:	605d      	str	r5, [r3, #4]
 800d00e:	1c7b      	adds	r3, r7, #1
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	0020      	movs	r0, r4
 800d014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d016:	46c0      	nop			; (mov r8, r8)
 800d018:	08014c21 	.word	0x08014c21
 800d01c:	08014c92 	.word	0x08014c92

0800d020 <__s2b>:
 800d020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d022:	0006      	movs	r6, r0
 800d024:	0018      	movs	r0, r3
 800d026:	000c      	movs	r4, r1
 800d028:	3008      	adds	r0, #8
 800d02a:	2109      	movs	r1, #9
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	0015      	movs	r5, r2
 800d030:	f7f3 f90e 	bl	8000250 <__divsi3>
 800d034:	2301      	movs	r3, #1
 800d036:	2100      	movs	r1, #0
 800d038:	4283      	cmp	r3, r0
 800d03a:	db0a      	blt.n	800d052 <__s2b+0x32>
 800d03c:	0030      	movs	r0, r6
 800d03e:	f7ff ff79 	bl	800cf34 <_Balloc>
 800d042:	1e01      	subs	r1, r0, #0
 800d044:	d108      	bne.n	800d058 <__s2b+0x38>
 800d046:	000a      	movs	r2, r1
 800d048:	4b19      	ldr	r3, [pc, #100]	; (800d0b0 <__s2b+0x90>)
 800d04a:	481a      	ldr	r0, [pc, #104]	; (800d0b4 <__s2b+0x94>)
 800d04c:	31d3      	adds	r1, #211	; 0xd3
 800d04e:	f003 fa35 	bl	80104bc <__assert_func>
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	3101      	adds	r1, #1
 800d056:	e7ef      	b.n	800d038 <__s2b+0x18>
 800d058:	9b08      	ldr	r3, [sp, #32]
 800d05a:	6143      	str	r3, [r0, #20]
 800d05c:	2301      	movs	r3, #1
 800d05e:	6103      	str	r3, [r0, #16]
 800d060:	2d09      	cmp	r5, #9
 800d062:	dd18      	ble.n	800d096 <__s2b+0x76>
 800d064:	0023      	movs	r3, r4
 800d066:	3309      	adds	r3, #9
 800d068:	001f      	movs	r7, r3
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	1964      	adds	r4, r4, r5
 800d06e:	783b      	ldrb	r3, [r7, #0]
 800d070:	220a      	movs	r2, #10
 800d072:	0030      	movs	r0, r6
 800d074:	3b30      	subs	r3, #48	; 0x30
 800d076:	f7ff ff8f 	bl	800cf98 <__multadd>
 800d07a:	3701      	adds	r7, #1
 800d07c:	0001      	movs	r1, r0
 800d07e:	42a7      	cmp	r7, r4
 800d080:	d1f5      	bne.n	800d06e <__s2b+0x4e>
 800d082:	002c      	movs	r4, r5
 800d084:	9b00      	ldr	r3, [sp, #0]
 800d086:	3c08      	subs	r4, #8
 800d088:	191c      	adds	r4, r3, r4
 800d08a:	002f      	movs	r7, r5
 800d08c:	9b01      	ldr	r3, [sp, #4]
 800d08e:	429f      	cmp	r7, r3
 800d090:	db04      	blt.n	800d09c <__s2b+0x7c>
 800d092:	0008      	movs	r0, r1
 800d094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d096:	2509      	movs	r5, #9
 800d098:	340a      	adds	r4, #10
 800d09a:	e7f6      	b.n	800d08a <__s2b+0x6a>
 800d09c:	1b63      	subs	r3, r4, r5
 800d09e:	5ddb      	ldrb	r3, [r3, r7]
 800d0a0:	220a      	movs	r2, #10
 800d0a2:	0030      	movs	r0, r6
 800d0a4:	3b30      	subs	r3, #48	; 0x30
 800d0a6:	f7ff ff77 	bl	800cf98 <__multadd>
 800d0aa:	3701      	adds	r7, #1
 800d0ac:	0001      	movs	r1, r0
 800d0ae:	e7ed      	b.n	800d08c <__s2b+0x6c>
 800d0b0:	08014c21 	.word	0x08014c21
 800d0b4:	08014c92 	.word	0x08014c92

0800d0b8 <__hi0bits>:
 800d0b8:	0003      	movs	r3, r0
 800d0ba:	0c02      	lsrs	r2, r0, #16
 800d0bc:	2000      	movs	r0, #0
 800d0be:	4282      	cmp	r2, r0
 800d0c0:	d101      	bne.n	800d0c6 <__hi0bits+0xe>
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	3010      	adds	r0, #16
 800d0c6:	0e1a      	lsrs	r2, r3, #24
 800d0c8:	d101      	bne.n	800d0ce <__hi0bits+0x16>
 800d0ca:	3008      	adds	r0, #8
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	0f1a      	lsrs	r2, r3, #28
 800d0d0:	d101      	bne.n	800d0d6 <__hi0bits+0x1e>
 800d0d2:	3004      	adds	r0, #4
 800d0d4:	011b      	lsls	r3, r3, #4
 800d0d6:	0f9a      	lsrs	r2, r3, #30
 800d0d8:	d101      	bne.n	800d0de <__hi0bits+0x26>
 800d0da:	3002      	adds	r0, #2
 800d0dc:	009b      	lsls	r3, r3, #2
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	db03      	blt.n	800d0ea <__hi0bits+0x32>
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	d400      	bmi.n	800d0ea <__hi0bits+0x32>
 800d0e8:	2020      	movs	r0, #32
 800d0ea:	4770      	bx	lr

0800d0ec <__lo0bits>:
 800d0ec:	6803      	ldr	r3, [r0, #0]
 800d0ee:	0001      	movs	r1, r0
 800d0f0:	2207      	movs	r2, #7
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	4010      	ands	r0, r2
 800d0f6:	4213      	tst	r3, r2
 800d0f8:	d00d      	beq.n	800d116 <__lo0bits+0x2a>
 800d0fa:	3a06      	subs	r2, #6
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	4213      	tst	r3, r2
 800d100:	d105      	bne.n	800d10e <__lo0bits+0x22>
 800d102:	3002      	adds	r0, #2
 800d104:	4203      	tst	r3, r0
 800d106:	d003      	beq.n	800d110 <__lo0bits+0x24>
 800d108:	40d3      	lsrs	r3, r2
 800d10a:	0010      	movs	r0, r2
 800d10c:	600b      	str	r3, [r1, #0]
 800d10e:	4770      	bx	lr
 800d110:	089b      	lsrs	r3, r3, #2
 800d112:	600b      	str	r3, [r1, #0]
 800d114:	e7fb      	b.n	800d10e <__lo0bits+0x22>
 800d116:	b29a      	uxth	r2, r3
 800d118:	2a00      	cmp	r2, #0
 800d11a:	d101      	bne.n	800d120 <__lo0bits+0x34>
 800d11c:	2010      	movs	r0, #16
 800d11e:	0c1b      	lsrs	r3, r3, #16
 800d120:	b2da      	uxtb	r2, r3
 800d122:	2a00      	cmp	r2, #0
 800d124:	d101      	bne.n	800d12a <__lo0bits+0x3e>
 800d126:	3008      	adds	r0, #8
 800d128:	0a1b      	lsrs	r3, r3, #8
 800d12a:	071a      	lsls	r2, r3, #28
 800d12c:	d101      	bne.n	800d132 <__lo0bits+0x46>
 800d12e:	3004      	adds	r0, #4
 800d130:	091b      	lsrs	r3, r3, #4
 800d132:	079a      	lsls	r2, r3, #30
 800d134:	d101      	bne.n	800d13a <__lo0bits+0x4e>
 800d136:	3002      	adds	r0, #2
 800d138:	089b      	lsrs	r3, r3, #2
 800d13a:	07da      	lsls	r2, r3, #31
 800d13c:	d4e9      	bmi.n	800d112 <__lo0bits+0x26>
 800d13e:	3001      	adds	r0, #1
 800d140:	085b      	lsrs	r3, r3, #1
 800d142:	d1e6      	bne.n	800d112 <__lo0bits+0x26>
 800d144:	2020      	movs	r0, #32
 800d146:	e7e2      	b.n	800d10e <__lo0bits+0x22>

0800d148 <__i2b>:
 800d148:	b510      	push	{r4, lr}
 800d14a:	000c      	movs	r4, r1
 800d14c:	2101      	movs	r1, #1
 800d14e:	f7ff fef1 	bl	800cf34 <_Balloc>
 800d152:	2800      	cmp	r0, #0
 800d154:	d107      	bne.n	800d166 <__i2b+0x1e>
 800d156:	2146      	movs	r1, #70	; 0x46
 800d158:	4c05      	ldr	r4, [pc, #20]	; (800d170 <__i2b+0x28>)
 800d15a:	0002      	movs	r2, r0
 800d15c:	4b05      	ldr	r3, [pc, #20]	; (800d174 <__i2b+0x2c>)
 800d15e:	0020      	movs	r0, r4
 800d160:	31ff      	adds	r1, #255	; 0xff
 800d162:	f003 f9ab 	bl	80104bc <__assert_func>
 800d166:	2301      	movs	r3, #1
 800d168:	6144      	str	r4, [r0, #20]
 800d16a:	6103      	str	r3, [r0, #16]
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	08014c92 	.word	0x08014c92
 800d174:	08014c21 	.word	0x08014c21

0800d178 <__multiply>:
 800d178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d17a:	0015      	movs	r5, r2
 800d17c:	690a      	ldr	r2, [r1, #16]
 800d17e:	692b      	ldr	r3, [r5, #16]
 800d180:	000c      	movs	r4, r1
 800d182:	b08b      	sub	sp, #44	; 0x2c
 800d184:	429a      	cmp	r2, r3
 800d186:	da01      	bge.n	800d18c <__multiply+0x14>
 800d188:	002c      	movs	r4, r5
 800d18a:	000d      	movs	r5, r1
 800d18c:	6927      	ldr	r7, [r4, #16]
 800d18e:	692e      	ldr	r6, [r5, #16]
 800d190:	6861      	ldr	r1, [r4, #4]
 800d192:	19bb      	adds	r3, r7, r6
 800d194:	9303      	str	r3, [sp, #12]
 800d196:	68a3      	ldr	r3, [r4, #8]
 800d198:	19ba      	adds	r2, r7, r6
 800d19a:	4293      	cmp	r3, r2
 800d19c:	da00      	bge.n	800d1a0 <__multiply+0x28>
 800d19e:	3101      	adds	r1, #1
 800d1a0:	f7ff fec8 	bl	800cf34 <_Balloc>
 800d1a4:	9002      	str	r0, [sp, #8]
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d106      	bne.n	800d1b8 <__multiply+0x40>
 800d1aa:	21b1      	movs	r1, #177	; 0xb1
 800d1ac:	4b48      	ldr	r3, [pc, #288]	; (800d2d0 <__multiply+0x158>)
 800d1ae:	4849      	ldr	r0, [pc, #292]	; (800d2d4 <__multiply+0x15c>)
 800d1b0:	9a02      	ldr	r2, [sp, #8]
 800d1b2:	0049      	lsls	r1, r1, #1
 800d1b4:	f003 f982 	bl	80104bc <__assert_func>
 800d1b8:	9b02      	ldr	r3, [sp, #8]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	3314      	adds	r3, #20
 800d1be:	469c      	mov	ip, r3
 800d1c0:	19bb      	adds	r3, r7, r6
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4463      	add	r3, ip
 800d1c6:	9304      	str	r3, [sp, #16]
 800d1c8:	4663      	mov	r3, ip
 800d1ca:	9904      	ldr	r1, [sp, #16]
 800d1cc:	428b      	cmp	r3, r1
 800d1ce:	d32a      	bcc.n	800d226 <__multiply+0xae>
 800d1d0:	0023      	movs	r3, r4
 800d1d2:	00bf      	lsls	r7, r7, #2
 800d1d4:	3314      	adds	r3, #20
 800d1d6:	3514      	adds	r5, #20
 800d1d8:	9308      	str	r3, [sp, #32]
 800d1da:	00b6      	lsls	r6, r6, #2
 800d1dc:	19db      	adds	r3, r3, r7
 800d1de:	9305      	str	r3, [sp, #20]
 800d1e0:	19ab      	adds	r3, r5, r6
 800d1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	9306      	str	r3, [sp, #24]
 800d1e8:	0023      	movs	r3, r4
 800d1ea:	9a05      	ldr	r2, [sp, #20]
 800d1ec:	3315      	adds	r3, #21
 800d1ee:	9501      	str	r5, [sp, #4]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d305      	bcc.n	800d200 <__multiply+0x88>
 800d1f4:	1b13      	subs	r3, r2, r4
 800d1f6:	3b15      	subs	r3, #21
 800d1f8:	089b      	lsrs	r3, r3, #2
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	9306      	str	r3, [sp, #24]
 800d200:	9b01      	ldr	r3, [sp, #4]
 800d202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d204:	4293      	cmp	r3, r2
 800d206:	d310      	bcc.n	800d22a <__multiply+0xb2>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dd05      	ble.n	800d21a <__multiply+0xa2>
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	3b04      	subs	r3, #4
 800d212:	9304      	str	r3, [sp, #16]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d056      	beq.n	800d2c8 <__multiply+0x150>
 800d21a:	9b02      	ldr	r3, [sp, #8]
 800d21c:	9a03      	ldr	r2, [sp, #12]
 800d21e:	0018      	movs	r0, r3
 800d220:	611a      	str	r2, [r3, #16]
 800d222:	b00b      	add	sp, #44	; 0x2c
 800d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d226:	c304      	stmia	r3!, {r2}
 800d228:	e7cf      	b.n	800d1ca <__multiply+0x52>
 800d22a:	9b01      	ldr	r3, [sp, #4]
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	b280      	uxth	r0, r0
 800d230:	2800      	cmp	r0, #0
 800d232:	d01e      	beq.n	800d272 <__multiply+0xfa>
 800d234:	4667      	mov	r7, ip
 800d236:	2500      	movs	r5, #0
 800d238:	9e08      	ldr	r6, [sp, #32]
 800d23a:	ce02      	ldmia	r6!, {r1}
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	9307      	str	r3, [sp, #28]
 800d240:	b28b      	uxth	r3, r1
 800d242:	4343      	muls	r3, r0
 800d244:	001a      	movs	r2, r3
 800d246:	466b      	mov	r3, sp
 800d248:	8b9b      	ldrh	r3, [r3, #28]
 800d24a:	18d3      	adds	r3, r2, r3
 800d24c:	195b      	adds	r3, r3, r5
 800d24e:	0c0d      	lsrs	r5, r1, #16
 800d250:	4345      	muls	r5, r0
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	0c11      	lsrs	r1, r2, #16
 800d256:	1869      	adds	r1, r5, r1
 800d258:	0c1a      	lsrs	r2, r3, #16
 800d25a:	188a      	adds	r2, r1, r2
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	0c15      	lsrs	r5, r2, #16
 800d260:	0412      	lsls	r2, r2, #16
 800d262:	431a      	orrs	r2, r3
 800d264:	9b05      	ldr	r3, [sp, #20]
 800d266:	c704      	stmia	r7!, {r2}
 800d268:	42b3      	cmp	r3, r6
 800d26a:	d8e6      	bhi.n	800d23a <__multiply+0xc2>
 800d26c:	4663      	mov	r3, ip
 800d26e:	9a06      	ldr	r2, [sp, #24]
 800d270:	509d      	str	r5, [r3, r2]
 800d272:	9b01      	ldr	r3, [sp, #4]
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	0c00      	lsrs	r0, r0, #16
 800d278:	d020      	beq.n	800d2bc <__multiply+0x144>
 800d27a:	4663      	mov	r3, ip
 800d27c:	0025      	movs	r5, r4
 800d27e:	4661      	mov	r1, ip
 800d280:	2700      	movs	r7, #0
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3514      	adds	r5, #20
 800d286:	682a      	ldr	r2, [r5, #0]
 800d288:	680e      	ldr	r6, [r1, #0]
 800d28a:	b292      	uxth	r2, r2
 800d28c:	4342      	muls	r2, r0
 800d28e:	0c36      	lsrs	r6, r6, #16
 800d290:	1992      	adds	r2, r2, r6
 800d292:	19d2      	adds	r2, r2, r7
 800d294:	0416      	lsls	r6, r2, #16
 800d296:	b29b      	uxth	r3, r3
 800d298:	431e      	orrs	r6, r3
 800d29a:	600e      	str	r6, [r1, #0]
 800d29c:	cd40      	ldmia	r5!, {r6}
 800d29e:	684b      	ldr	r3, [r1, #4]
 800d2a0:	0c36      	lsrs	r6, r6, #16
 800d2a2:	4346      	muls	r6, r0
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	0c12      	lsrs	r2, r2, #16
 800d2a8:	18f3      	adds	r3, r6, r3
 800d2aa:	189b      	adds	r3, r3, r2
 800d2ac:	9a05      	ldr	r2, [sp, #20]
 800d2ae:	0c1f      	lsrs	r7, r3, #16
 800d2b0:	3104      	adds	r1, #4
 800d2b2:	42aa      	cmp	r2, r5
 800d2b4:	d8e7      	bhi.n	800d286 <__multiply+0x10e>
 800d2b6:	4662      	mov	r2, ip
 800d2b8:	9906      	ldr	r1, [sp, #24]
 800d2ba:	5053      	str	r3, [r2, r1]
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	3304      	adds	r3, #4
 800d2c0:	9301      	str	r3, [sp, #4]
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	449c      	add	ip, r3
 800d2c6:	e79b      	b.n	800d200 <__multiply+0x88>
 800d2c8:	9b03      	ldr	r3, [sp, #12]
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	9303      	str	r3, [sp, #12]
 800d2ce:	e79b      	b.n	800d208 <__multiply+0x90>
 800d2d0:	08014c21 	.word	0x08014c21
 800d2d4:	08014c92 	.word	0x08014c92

0800d2d8 <__pow5mult>:
 800d2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2da:	2303      	movs	r3, #3
 800d2dc:	0015      	movs	r5, r2
 800d2de:	0007      	movs	r7, r0
 800d2e0:	000e      	movs	r6, r1
 800d2e2:	401a      	ands	r2, r3
 800d2e4:	421d      	tst	r5, r3
 800d2e6:	d008      	beq.n	800d2fa <__pow5mult+0x22>
 800d2e8:	491a      	ldr	r1, [pc, #104]	; (800d354 <__pow5mult+0x7c>)
 800d2ea:	3a01      	subs	r2, #1
 800d2ec:	0092      	lsls	r2, r2, #2
 800d2ee:	5852      	ldr	r2, [r2, r1]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	0031      	movs	r1, r6
 800d2f4:	f7ff fe50 	bl	800cf98 <__multadd>
 800d2f8:	0006      	movs	r6, r0
 800d2fa:	10ad      	asrs	r5, r5, #2
 800d2fc:	d027      	beq.n	800d34e <__pow5mult+0x76>
 800d2fe:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800d300:	2c00      	cmp	r4, #0
 800d302:	d107      	bne.n	800d314 <__pow5mult+0x3c>
 800d304:	0038      	movs	r0, r7
 800d306:	4914      	ldr	r1, [pc, #80]	; (800d358 <__pow5mult+0x80>)
 800d308:	f7ff ff1e 	bl	800d148 <__i2b>
 800d30c:	2300      	movs	r3, #0
 800d30e:	0004      	movs	r4, r0
 800d310:	6438      	str	r0, [r7, #64]	; 0x40
 800d312:	6003      	str	r3, [r0, #0]
 800d314:	2301      	movs	r3, #1
 800d316:	421d      	tst	r5, r3
 800d318:	d00a      	beq.n	800d330 <__pow5mult+0x58>
 800d31a:	0031      	movs	r1, r6
 800d31c:	0022      	movs	r2, r4
 800d31e:	0038      	movs	r0, r7
 800d320:	f7ff ff2a 	bl	800d178 <__multiply>
 800d324:	0031      	movs	r1, r6
 800d326:	9001      	str	r0, [sp, #4]
 800d328:	0038      	movs	r0, r7
 800d32a:	f7ff fe2b 	bl	800cf84 <_Bfree>
 800d32e:	9e01      	ldr	r6, [sp, #4]
 800d330:	106d      	asrs	r5, r5, #1
 800d332:	d00c      	beq.n	800d34e <__pow5mult+0x76>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	2800      	cmp	r0, #0
 800d338:	d107      	bne.n	800d34a <__pow5mult+0x72>
 800d33a:	0022      	movs	r2, r4
 800d33c:	0021      	movs	r1, r4
 800d33e:	0038      	movs	r0, r7
 800d340:	f7ff ff1a 	bl	800d178 <__multiply>
 800d344:	2300      	movs	r3, #0
 800d346:	6020      	str	r0, [r4, #0]
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	0004      	movs	r4, r0
 800d34c:	e7e2      	b.n	800d314 <__pow5mult+0x3c>
 800d34e:	0030      	movs	r0, r6
 800d350:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d352:	46c0      	nop			; (mov r8, r8)
 800d354:	08014de0 	.word	0x08014de0
 800d358:	00000271 	.word	0x00000271

0800d35c <__lshift>:
 800d35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d35e:	000c      	movs	r4, r1
 800d360:	0017      	movs	r7, r2
 800d362:	6923      	ldr	r3, [r4, #16]
 800d364:	1155      	asrs	r5, r2, #5
 800d366:	b087      	sub	sp, #28
 800d368:	18eb      	adds	r3, r5, r3
 800d36a:	9302      	str	r3, [sp, #8]
 800d36c:	3301      	adds	r3, #1
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	6849      	ldr	r1, [r1, #4]
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	9004      	str	r0, [sp, #16]
 800d376:	9a01      	ldr	r2, [sp, #4]
 800d378:	4293      	cmp	r3, r2
 800d37a:	db10      	blt.n	800d39e <__lshift+0x42>
 800d37c:	9804      	ldr	r0, [sp, #16]
 800d37e:	f7ff fdd9 	bl	800cf34 <_Balloc>
 800d382:	2300      	movs	r3, #0
 800d384:	0002      	movs	r2, r0
 800d386:	0006      	movs	r6, r0
 800d388:	0019      	movs	r1, r3
 800d38a:	3214      	adds	r2, #20
 800d38c:	4298      	cmp	r0, r3
 800d38e:	d10c      	bne.n	800d3aa <__lshift+0x4e>
 800d390:	31df      	adds	r1, #223	; 0xdf
 800d392:	0032      	movs	r2, r6
 800d394:	4b26      	ldr	r3, [pc, #152]	; (800d430 <__lshift+0xd4>)
 800d396:	4827      	ldr	r0, [pc, #156]	; (800d434 <__lshift+0xd8>)
 800d398:	31ff      	adds	r1, #255	; 0xff
 800d39a:	f003 f88f 	bl	80104bc <__assert_func>
 800d39e:	3101      	adds	r1, #1
 800d3a0:	005b      	lsls	r3, r3, #1
 800d3a2:	e7e8      	b.n	800d376 <__lshift+0x1a>
 800d3a4:	0098      	lsls	r0, r3, #2
 800d3a6:	5011      	str	r1, [r2, r0]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	42ab      	cmp	r3, r5
 800d3ac:	dbfa      	blt.n	800d3a4 <__lshift+0x48>
 800d3ae:	43eb      	mvns	r3, r5
 800d3b0:	17db      	asrs	r3, r3, #31
 800d3b2:	401d      	ands	r5, r3
 800d3b4:	211f      	movs	r1, #31
 800d3b6:	0023      	movs	r3, r4
 800d3b8:	0038      	movs	r0, r7
 800d3ba:	00ad      	lsls	r5, r5, #2
 800d3bc:	1955      	adds	r5, r2, r5
 800d3be:	6922      	ldr	r2, [r4, #16]
 800d3c0:	3314      	adds	r3, #20
 800d3c2:	0092      	lsls	r2, r2, #2
 800d3c4:	4008      	ands	r0, r1
 800d3c6:	4684      	mov	ip, r0
 800d3c8:	189a      	adds	r2, r3, r2
 800d3ca:	420f      	tst	r7, r1
 800d3cc:	d02a      	beq.n	800d424 <__lshift+0xc8>
 800d3ce:	3101      	adds	r1, #1
 800d3d0:	1a09      	subs	r1, r1, r0
 800d3d2:	9105      	str	r1, [sp, #20]
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	9503      	str	r5, [sp, #12]
 800d3d8:	4667      	mov	r7, ip
 800d3da:	6818      	ldr	r0, [r3, #0]
 800d3dc:	40b8      	lsls	r0, r7
 800d3de:	4308      	orrs	r0, r1
 800d3e0:	9903      	ldr	r1, [sp, #12]
 800d3e2:	c101      	stmia	r1!, {r0}
 800d3e4:	9103      	str	r1, [sp, #12]
 800d3e6:	9805      	ldr	r0, [sp, #20]
 800d3e8:	cb02      	ldmia	r3!, {r1}
 800d3ea:	40c1      	lsrs	r1, r0
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d8f3      	bhi.n	800d3d8 <__lshift+0x7c>
 800d3f0:	0020      	movs	r0, r4
 800d3f2:	3015      	adds	r0, #21
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	4282      	cmp	r2, r0
 800d3f8:	d304      	bcc.n	800d404 <__lshift+0xa8>
 800d3fa:	1b13      	subs	r3, r2, r4
 800d3fc:	3b15      	subs	r3, #21
 800d3fe:	089b      	lsrs	r3, r3, #2
 800d400:	3301      	adds	r3, #1
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	50e9      	str	r1, [r5, r3]
 800d406:	2900      	cmp	r1, #0
 800d408:	d002      	beq.n	800d410 <__lshift+0xb4>
 800d40a:	9b02      	ldr	r3, [sp, #8]
 800d40c:	3302      	adds	r3, #2
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	9b01      	ldr	r3, [sp, #4]
 800d412:	9804      	ldr	r0, [sp, #16]
 800d414:	3b01      	subs	r3, #1
 800d416:	0021      	movs	r1, r4
 800d418:	6133      	str	r3, [r6, #16]
 800d41a:	f7ff fdb3 	bl	800cf84 <_Bfree>
 800d41e:	0030      	movs	r0, r6
 800d420:	b007      	add	sp, #28
 800d422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d424:	cb02      	ldmia	r3!, {r1}
 800d426:	c502      	stmia	r5!, {r1}
 800d428:	429a      	cmp	r2, r3
 800d42a:	d8fb      	bhi.n	800d424 <__lshift+0xc8>
 800d42c:	e7f0      	b.n	800d410 <__lshift+0xb4>
 800d42e:	46c0      	nop			; (mov r8, r8)
 800d430:	08014c21 	.word	0x08014c21
 800d434:	08014c92 	.word	0x08014c92

0800d438 <__mcmp>:
 800d438:	b530      	push	{r4, r5, lr}
 800d43a:	690b      	ldr	r3, [r1, #16]
 800d43c:	6904      	ldr	r4, [r0, #16]
 800d43e:	0002      	movs	r2, r0
 800d440:	1ae0      	subs	r0, r4, r3
 800d442:	429c      	cmp	r4, r3
 800d444:	d10e      	bne.n	800d464 <__mcmp+0x2c>
 800d446:	3214      	adds	r2, #20
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	3114      	adds	r1, #20
 800d44c:	0014      	movs	r4, r2
 800d44e:	18c9      	adds	r1, r1, r3
 800d450:	18d2      	adds	r2, r2, r3
 800d452:	3a04      	subs	r2, #4
 800d454:	3904      	subs	r1, #4
 800d456:	6815      	ldr	r5, [r2, #0]
 800d458:	680b      	ldr	r3, [r1, #0]
 800d45a:	429d      	cmp	r5, r3
 800d45c:	d003      	beq.n	800d466 <__mcmp+0x2e>
 800d45e:	2001      	movs	r0, #1
 800d460:	429d      	cmp	r5, r3
 800d462:	d303      	bcc.n	800d46c <__mcmp+0x34>
 800d464:	bd30      	pop	{r4, r5, pc}
 800d466:	4294      	cmp	r4, r2
 800d468:	d3f3      	bcc.n	800d452 <__mcmp+0x1a>
 800d46a:	e7fb      	b.n	800d464 <__mcmp+0x2c>
 800d46c:	4240      	negs	r0, r0
 800d46e:	e7f9      	b.n	800d464 <__mcmp+0x2c>

0800d470 <__mdiff>:
 800d470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d472:	000e      	movs	r6, r1
 800d474:	0007      	movs	r7, r0
 800d476:	0011      	movs	r1, r2
 800d478:	0030      	movs	r0, r6
 800d47a:	b087      	sub	sp, #28
 800d47c:	0014      	movs	r4, r2
 800d47e:	f7ff ffdb 	bl	800d438 <__mcmp>
 800d482:	1e05      	subs	r5, r0, #0
 800d484:	d110      	bne.n	800d4a8 <__mdiff+0x38>
 800d486:	0001      	movs	r1, r0
 800d488:	0038      	movs	r0, r7
 800d48a:	f7ff fd53 	bl	800cf34 <_Balloc>
 800d48e:	1e02      	subs	r2, r0, #0
 800d490:	d104      	bne.n	800d49c <__mdiff+0x2c>
 800d492:	4b3f      	ldr	r3, [pc, #252]	; (800d590 <__mdiff+0x120>)
 800d494:	483f      	ldr	r0, [pc, #252]	; (800d594 <__mdiff+0x124>)
 800d496:	4940      	ldr	r1, [pc, #256]	; (800d598 <__mdiff+0x128>)
 800d498:	f003 f810 	bl	80104bc <__assert_func>
 800d49c:	2301      	movs	r3, #1
 800d49e:	6145      	str	r5, [r0, #20]
 800d4a0:	6103      	str	r3, [r0, #16]
 800d4a2:	0010      	movs	r0, r2
 800d4a4:	b007      	add	sp, #28
 800d4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	9301      	str	r3, [sp, #4]
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	db04      	blt.n	800d4ba <__mdiff+0x4a>
 800d4b0:	0023      	movs	r3, r4
 800d4b2:	0034      	movs	r4, r6
 800d4b4:	001e      	movs	r6, r3
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	0038      	movs	r0, r7
 800d4bc:	6861      	ldr	r1, [r4, #4]
 800d4be:	f7ff fd39 	bl	800cf34 <_Balloc>
 800d4c2:	1e02      	subs	r2, r0, #0
 800d4c4:	d103      	bne.n	800d4ce <__mdiff+0x5e>
 800d4c6:	4b32      	ldr	r3, [pc, #200]	; (800d590 <__mdiff+0x120>)
 800d4c8:	4832      	ldr	r0, [pc, #200]	; (800d594 <__mdiff+0x124>)
 800d4ca:	4934      	ldr	r1, [pc, #208]	; (800d59c <__mdiff+0x12c>)
 800d4cc:	e7e4      	b.n	800d498 <__mdiff+0x28>
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	2700      	movs	r7, #0
 800d4d2:	60c3      	str	r3, [r0, #12]
 800d4d4:	6920      	ldr	r0, [r4, #16]
 800d4d6:	3414      	adds	r4, #20
 800d4d8:	0083      	lsls	r3, r0, #2
 800d4da:	18e3      	adds	r3, r4, r3
 800d4dc:	0021      	movs	r1, r4
 800d4de:	9401      	str	r4, [sp, #4]
 800d4e0:	0034      	movs	r4, r6
 800d4e2:	9302      	str	r3, [sp, #8]
 800d4e4:	6933      	ldr	r3, [r6, #16]
 800d4e6:	3414      	adds	r4, #20
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	18e3      	adds	r3, r4, r3
 800d4ec:	9303      	str	r3, [sp, #12]
 800d4ee:	0013      	movs	r3, r2
 800d4f0:	3314      	adds	r3, #20
 800d4f2:	469c      	mov	ip, r3
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	9104      	str	r1, [sp, #16]
 800d4f8:	9b04      	ldr	r3, [sp, #16]
 800d4fa:	cc02      	ldmia	r4!, {r1}
 800d4fc:	cb20      	ldmia	r3!, {r5}
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	b2ab      	uxth	r3, r5
 800d502:	19df      	adds	r7, r3, r7
 800d504:	b28b      	uxth	r3, r1
 800d506:	1afb      	subs	r3, r7, r3
 800d508:	0c09      	lsrs	r1, r1, #16
 800d50a:	0c2d      	lsrs	r5, r5, #16
 800d50c:	1a6d      	subs	r5, r5, r1
 800d50e:	1419      	asrs	r1, r3, #16
 800d510:	1869      	adds	r1, r5, r1
 800d512:	b29b      	uxth	r3, r3
 800d514:	140f      	asrs	r7, r1, #16
 800d516:	0409      	lsls	r1, r1, #16
 800d518:	4319      	orrs	r1, r3
 800d51a:	4663      	mov	r3, ip
 800d51c:	c302      	stmia	r3!, {r1}
 800d51e:	469c      	mov	ip, r3
 800d520:	9b03      	ldr	r3, [sp, #12]
 800d522:	42a3      	cmp	r3, r4
 800d524:	d8e8      	bhi.n	800d4f8 <__mdiff+0x88>
 800d526:	0031      	movs	r1, r6
 800d528:	9c03      	ldr	r4, [sp, #12]
 800d52a:	3115      	adds	r1, #21
 800d52c:	2304      	movs	r3, #4
 800d52e:	428c      	cmp	r4, r1
 800d530:	d304      	bcc.n	800d53c <__mdiff+0xcc>
 800d532:	1ba3      	subs	r3, r4, r6
 800d534:	3b15      	subs	r3, #21
 800d536:	089b      	lsrs	r3, r3, #2
 800d538:	3301      	adds	r3, #1
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	9901      	ldr	r1, [sp, #4]
 800d53e:	18cd      	adds	r5, r1, r3
 800d540:	9905      	ldr	r1, [sp, #20]
 800d542:	002e      	movs	r6, r5
 800d544:	18cb      	adds	r3, r1, r3
 800d546:	469c      	mov	ip, r3
 800d548:	9902      	ldr	r1, [sp, #8]
 800d54a:	428e      	cmp	r6, r1
 800d54c:	d310      	bcc.n	800d570 <__mdiff+0x100>
 800d54e:	9e02      	ldr	r6, [sp, #8]
 800d550:	1ee9      	subs	r1, r5, #3
 800d552:	2400      	movs	r4, #0
 800d554:	428e      	cmp	r6, r1
 800d556:	d304      	bcc.n	800d562 <__mdiff+0xf2>
 800d558:	0031      	movs	r1, r6
 800d55a:	3103      	adds	r1, #3
 800d55c:	1b49      	subs	r1, r1, r5
 800d55e:	0889      	lsrs	r1, r1, #2
 800d560:	008c      	lsls	r4, r1, #2
 800d562:	191b      	adds	r3, r3, r4
 800d564:	3b04      	subs	r3, #4
 800d566:	6819      	ldr	r1, [r3, #0]
 800d568:	2900      	cmp	r1, #0
 800d56a:	d00f      	beq.n	800d58c <__mdiff+0x11c>
 800d56c:	6110      	str	r0, [r2, #16]
 800d56e:	e798      	b.n	800d4a2 <__mdiff+0x32>
 800d570:	ce02      	ldmia	r6!, {r1}
 800d572:	b28c      	uxth	r4, r1
 800d574:	19e4      	adds	r4, r4, r7
 800d576:	0c0f      	lsrs	r7, r1, #16
 800d578:	1421      	asrs	r1, r4, #16
 800d57a:	1879      	adds	r1, r7, r1
 800d57c:	b2a4      	uxth	r4, r4
 800d57e:	140f      	asrs	r7, r1, #16
 800d580:	0409      	lsls	r1, r1, #16
 800d582:	4321      	orrs	r1, r4
 800d584:	4664      	mov	r4, ip
 800d586:	c402      	stmia	r4!, {r1}
 800d588:	46a4      	mov	ip, r4
 800d58a:	e7dd      	b.n	800d548 <__mdiff+0xd8>
 800d58c:	3801      	subs	r0, #1
 800d58e:	e7e9      	b.n	800d564 <__mdiff+0xf4>
 800d590:	08014c21 	.word	0x08014c21
 800d594:	08014c92 	.word	0x08014c92
 800d598:	00000237 	.word	0x00000237
 800d59c:	00000245 	.word	0x00000245

0800d5a0 <__ulp>:
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	4b0b      	ldr	r3, [pc, #44]	; (800d5d0 <__ulp+0x30>)
 800d5a4:	4019      	ands	r1, r3
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <__ulp+0x34>)
 800d5a8:	18c9      	adds	r1, r1, r3
 800d5aa:	4281      	cmp	r1, r0
 800d5ac:	dc06      	bgt.n	800d5bc <__ulp+0x1c>
 800d5ae:	4249      	negs	r1, r1
 800d5b0:	150b      	asrs	r3, r1, #20
 800d5b2:	2b13      	cmp	r3, #19
 800d5b4:	dc03      	bgt.n	800d5be <__ulp+0x1e>
 800d5b6:	2180      	movs	r1, #128	; 0x80
 800d5b8:	0309      	lsls	r1, r1, #12
 800d5ba:	4119      	asrs	r1, r3
 800d5bc:	4770      	bx	lr
 800d5be:	3b14      	subs	r3, #20
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	2b1e      	cmp	r3, #30
 800d5c4:	dc02      	bgt.n	800d5cc <__ulp+0x2c>
 800d5c6:	2080      	movs	r0, #128	; 0x80
 800d5c8:	0600      	lsls	r0, r0, #24
 800d5ca:	40d8      	lsrs	r0, r3
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	e7f5      	b.n	800d5bc <__ulp+0x1c>
 800d5d0:	7ff00000 	.word	0x7ff00000
 800d5d4:	fcc00000 	.word	0xfcc00000

0800d5d8 <__b2d>:
 800d5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5da:	0006      	movs	r6, r0
 800d5dc:	6903      	ldr	r3, [r0, #16]
 800d5de:	3614      	adds	r6, #20
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	18f3      	adds	r3, r6, r3
 800d5e4:	1f1d      	subs	r5, r3, #4
 800d5e6:	682c      	ldr	r4, [r5, #0]
 800d5e8:	000f      	movs	r7, r1
 800d5ea:	0020      	movs	r0, r4
 800d5ec:	9301      	str	r3, [sp, #4]
 800d5ee:	f7ff fd63 	bl	800d0b8 <__hi0bits>
 800d5f2:	2220      	movs	r2, #32
 800d5f4:	1a12      	subs	r2, r2, r0
 800d5f6:	603a      	str	r2, [r7, #0]
 800d5f8:	0003      	movs	r3, r0
 800d5fa:	4a1c      	ldr	r2, [pc, #112]	; (800d66c <__b2d+0x94>)
 800d5fc:	280a      	cmp	r0, #10
 800d5fe:	dc15      	bgt.n	800d62c <__b2d+0x54>
 800d600:	210b      	movs	r1, #11
 800d602:	0027      	movs	r7, r4
 800d604:	1a09      	subs	r1, r1, r0
 800d606:	40cf      	lsrs	r7, r1
 800d608:	433a      	orrs	r2, r7
 800d60a:	468c      	mov	ip, r1
 800d60c:	0011      	movs	r1, r2
 800d60e:	2200      	movs	r2, #0
 800d610:	42ae      	cmp	r6, r5
 800d612:	d202      	bcs.n	800d61a <__b2d+0x42>
 800d614:	9a01      	ldr	r2, [sp, #4]
 800d616:	3a08      	subs	r2, #8
 800d618:	6812      	ldr	r2, [r2, #0]
 800d61a:	3315      	adds	r3, #21
 800d61c:	409c      	lsls	r4, r3
 800d61e:	4663      	mov	r3, ip
 800d620:	0027      	movs	r7, r4
 800d622:	40da      	lsrs	r2, r3
 800d624:	4317      	orrs	r7, r2
 800d626:	0038      	movs	r0, r7
 800d628:	b003      	add	sp, #12
 800d62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d62c:	2700      	movs	r7, #0
 800d62e:	42ae      	cmp	r6, r5
 800d630:	d202      	bcs.n	800d638 <__b2d+0x60>
 800d632:	9d01      	ldr	r5, [sp, #4]
 800d634:	3d08      	subs	r5, #8
 800d636:	682f      	ldr	r7, [r5, #0]
 800d638:	210b      	movs	r1, #11
 800d63a:	4249      	negs	r1, r1
 800d63c:	468c      	mov	ip, r1
 800d63e:	449c      	add	ip, r3
 800d640:	2b0b      	cmp	r3, #11
 800d642:	d010      	beq.n	800d666 <__b2d+0x8e>
 800d644:	4661      	mov	r1, ip
 800d646:	2320      	movs	r3, #32
 800d648:	408c      	lsls	r4, r1
 800d64a:	1a5b      	subs	r3, r3, r1
 800d64c:	0039      	movs	r1, r7
 800d64e:	40d9      	lsrs	r1, r3
 800d650:	430c      	orrs	r4, r1
 800d652:	4322      	orrs	r2, r4
 800d654:	0011      	movs	r1, r2
 800d656:	2200      	movs	r2, #0
 800d658:	42b5      	cmp	r5, r6
 800d65a:	d901      	bls.n	800d660 <__b2d+0x88>
 800d65c:	3d04      	subs	r5, #4
 800d65e:	682a      	ldr	r2, [r5, #0]
 800d660:	4664      	mov	r4, ip
 800d662:	40a7      	lsls	r7, r4
 800d664:	e7dd      	b.n	800d622 <__b2d+0x4a>
 800d666:	4322      	orrs	r2, r4
 800d668:	0011      	movs	r1, r2
 800d66a:	e7dc      	b.n	800d626 <__b2d+0x4e>
 800d66c:	3ff00000 	.word	0x3ff00000

0800d670 <__d2b>:
 800d670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d672:	2101      	movs	r1, #1
 800d674:	0014      	movs	r4, r2
 800d676:	001d      	movs	r5, r3
 800d678:	9f08      	ldr	r7, [sp, #32]
 800d67a:	f7ff fc5b 	bl	800cf34 <_Balloc>
 800d67e:	1e06      	subs	r6, r0, #0
 800d680:	d105      	bne.n	800d68e <__d2b+0x1e>
 800d682:	0032      	movs	r2, r6
 800d684:	4b24      	ldr	r3, [pc, #144]	; (800d718 <__d2b+0xa8>)
 800d686:	4825      	ldr	r0, [pc, #148]	; (800d71c <__d2b+0xac>)
 800d688:	4925      	ldr	r1, [pc, #148]	; (800d720 <__d2b+0xb0>)
 800d68a:	f002 ff17 	bl	80104bc <__assert_func>
 800d68e:	032b      	lsls	r3, r5, #12
 800d690:	006d      	lsls	r5, r5, #1
 800d692:	0b1b      	lsrs	r3, r3, #12
 800d694:	0d6d      	lsrs	r5, r5, #21
 800d696:	d125      	bne.n	800d6e4 <__d2b+0x74>
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	d028      	beq.n	800d6f0 <__d2b+0x80>
 800d69e:	4668      	mov	r0, sp
 800d6a0:	9400      	str	r4, [sp, #0]
 800d6a2:	f7ff fd23 	bl	800d0ec <__lo0bits>
 800d6a6:	9b01      	ldr	r3, [sp, #4]
 800d6a8:	9900      	ldr	r1, [sp, #0]
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d01e      	beq.n	800d6ec <__d2b+0x7c>
 800d6ae:	2220      	movs	r2, #32
 800d6b0:	001c      	movs	r4, r3
 800d6b2:	1a12      	subs	r2, r2, r0
 800d6b4:	4094      	lsls	r4, r2
 800d6b6:	0022      	movs	r2, r4
 800d6b8:	40c3      	lsrs	r3, r0
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	6172      	str	r2, [r6, #20]
 800d6be:	9301      	str	r3, [sp, #4]
 800d6c0:	9c01      	ldr	r4, [sp, #4]
 800d6c2:	61b4      	str	r4, [r6, #24]
 800d6c4:	1e63      	subs	r3, r4, #1
 800d6c6:	419c      	sbcs	r4, r3
 800d6c8:	3401      	adds	r4, #1
 800d6ca:	6134      	str	r4, [r6, #16]
 800d6cc:	2d00      	cmp	r5, #0
 800d6ce:	d017      	beq.n	800d700 <__d2b+0x90>
 800d6d0:	2435      	movs	r4, #53	; 0x35
 800d6d2:	4b14      	ldr	r3, [pc, #80]	; (800d724 <__d2b+0xb4>)
 800d6d4:	18ed      	adds	r5, r5, r3
 800d6d6:	182d      	adds	r5, r5, r0
 800d6d8:	603d      	str	r5, [r7, #0]
 800d6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6dc:	1a24      	subs	r4, r4, r0
 800d6de:	601c      	str	r4, [r3, #0]
 800d6e0:	0030      	movs	r0, r6
 800d6e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6e4:	2280      	movs	r2, #128	; 0x80
 800d6e6:	0352      	lsls	r2, r2, #13
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	e7d5      	b.n	800d698 <__d2b+0x28>
 800d6ec:	6171      	str	r1, [r6, #20]
 800d6ee:	e7e7      	b.n	800d6c0 <__d2b+0x50>
 800d6f0:	a801      	add	r0, sp, #4
 800d6f2:	f7ff fcfb 	bl	800d0ec <__lo0bits>
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	2401      	movs	r4, #1
 800d6fa:	6173      	str	r3, [r6, #20]
 800d6fc:	3020      	adds	r0, #32
 800d6fe:	e7e4      	b.n	800d6ca <__d2b+0x5a>
 800d700:	4b09      	ldr	r3, [pc, #36]	; (800d728 <__d2b+0xb8>)
 800d702:	18c0      	adds	r0, r0, r3
 800d704:	4b09      	ldr	r3, [pc, #36]	; (800d72c <__d2b+0xbc>)
 800d706:	6038      	str	r0, [r7, #0]
 800d708:	18e3      	adds	r3, r4, r3
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	18f3      	adds	r3, r6, r3
 800d70e:	6958      	ldr	r0, [r3, #20]
 800d710:	f7ff fcd2 	bl	800d0b8 <__hi0bits>
 800d714:	0164      	lsls	r4, r4, #5
 800d716:	e7e0      	b.n	800d6da <__d2b+0x6a>
 800d718:	08014c21 	.word	0x08014c21
 800d71c:	08014c92 	.word	0x08014c92
 800d720:	0000030f 	.word	0x0000030f
 800d724:	fffffbcd 	.word	0xfffffbcd
 800d728:	fffffbce 	.word	0xfffffbce
 800d72c:	3fffffff 	.word	0x3fffffff

0800d730 <__ratio>:
 800d730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d732:	b087      	sub	sp, #28
 800d734:	000f      	movs	r7, r1
 800d736:	a904      	add	r1, sp, #16
 800d738:	0006      	movs	r6, r0
 800d73a:	f7ff ff4d 	bl	800d5d8 <__b2d>
 800d73e:	9000      	str	r0, [sp, #0]
 800d740:	9101      	str	r1, [sp, #4]
 800d742:	9c00      	ldr	r4, [sp, #0]
 800d744:	9d01      	ldr	r5, [sp, #4]
 800d746:	0038      	movs	r0, r7
 800d748:	a905      	add	r1, sp, #20
 800d74a:	f7ff ff45 	bl	800d5d8 <__b2d>
 800d74e:	9002      	str	r0, [sp, #8]
 800d750:	9103      	str	r1, [sp, #12]
 800d752:	9a02      	ldr	r2, [sp, #8]
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	6930      	ldr	r0, [r6, #16]
 800d758:	6939      	ldr	r1, [r7, #16]
 800d75a:	9e04      	ldr	r6, [sp, #16]
 800d75c:	1a40      	subs	r0, r0, r1
 800d75e:	9905      	ldr	r1, [sp, #20]
 800d760:	0140      	lsls	r0, r0, #5
 800d762:	1a71      	subs	r1, r6, r1
 800d764:	1841      	adds	r1, r0, r1
 800d766:	0508      	lsls	r0, r1, #20
 800d768:	2900      	cmp	r1, #0
 800d76a:	dd07      	ble.n	800d77c <__ratio+0x4c>
 800d76c:	9901      	ldr	r1, [sp, #4]
 800d76e:	1845      	adds	r5, r0, r1
 800d770:	0020      	movs	r0, r4
 800d772:	0029      	movs	r1, r5
 800d774:	f7f3 fb80 	bl	8000e78 <__aeabi_ddiv>
 800d778:	b007      	add	sp, #28
 800d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d77c:	9903      	ldr	r1, [sp, #12]
 800d77e:	1a0b      	subs	r3, r1, r0
 800d780:	e7f6      	b.n	800d770 <__ratio+0x40>

0800d782 <__copybits>:
 800d782:	b570      	push	{r4, r5, r6, lr}
 800d784:	0014      	movs	r4, r2
 800d786:	0005      	movs	r5, r0
 800d788:	3901      	subs	r1, #1
 800d78a:	6913      	ldr	r3, [r2, #16]
 800d78c:	1149      	asrs	r1, r1, #5
 800d78e:	3101      	adds	r1, #1
 800d790:	0089      	lsls	r1, r1, #2
 800d792:	3414      	adds	r4, #20
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	1841      	adds	r1, r0, r1
 800d798:	18e3      	adds	r3, r4, r3
 800d79a:	42a3      	cmp	r3, r4
 800d79c:	d80d      	bhi.n	800d7ba <__copybits+0x38>
 800d79e:	0014      	movs	r4, r2
 800d7a0:	3411      	adds	r4, #17
 800d7a2:	2500      	movs	r5, #0
 800d7a4:	429c      	cmp	r4, r3
 800d7a6:	d803      	bhi.n	800d7b0 <__copybits+0x2e>
 800d7a8:	1a9b      	subs	r3, r3, r2
 800d7aa:	3b11      	subs	r3, #17
 800d7ac:	089b      	lsrs	r3, r3, #2
 800d7ae:	009d      	lsls	r5, r3, #2
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	1940      	adds	r0, r0, r5
 800d7b4:	4281      	cmp	r1, r0
 800d7b6:	d803      	bhi.n	800d7c0 <__copybits+0x3e>
 800d7b8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ba:	cc40      	ldmia	r4!, {r6}
 800d7bc:	c540      	stmia	r5!, {r6}
 800d7be:	e7ec      	b.n	800d79a <__copybits+0x18>
 800d7c0:	c008      	stmia	r0!, {r3}
 800d7c2:	e7f7      	b.n	800d7b4 <__copybits+0x32>

0800d7c4 <__any_on>:
 800d7c4:	0002      	movs	r2, r0
 800d7c6:	6900      	ldr	r0, [r0, #16]
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	3214      	adds	r2, #20
 800d7cc:	114b      	asrs	r3, r1, #5
 800d7ce:	4298      	cmp	r0, r3
 800d7d0:	db13      	blt.n	800d7fa <__any_on+0x36>
 800d7d2:	dd0c      	ble.n	800d7ee <__any_on+0x2a>
 800d7d4:	241f      	movs	r4, #31
 800d7d6:	0008      	movs	r0, r1
 800d7d8:	4020      	ands	r0, r4
 800d7da:	4221      	tst	r1, r4
 800d7dc:	d007      	beq.n	800d7ee <__any_on+0x2a>
 800d7de:	0099      	lsls	r1, r3, #2
 800d7e0:	588c      	ldr	r4, [r1, r2]
 800d7e2:	0021      	movs	r1, r4
 800d7e4:	40c1      	lsrs	r1, r0
 800d7e6:	4081      	lsls	r1, r0
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	428c      	cmp	r4, r1
 800d7ec:	d104      	bne.n	800d7f8 <__any_on+0x34>
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	18d3      	adds	r3, r2, r3
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d803      	bhi.n	800d7fe <__any_on+0x3a>
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	bd10      	pop	{r4, pc}
 800d7fa:	0003      	movs	r3, r0
 800d7fc:	e7f7      	b.n	800d7ee <__any_on+0x2a>
 800d7fe:	3b04      	subs	r3, #4
 800d800:	6819      	ldr	r1, [r3, #0]
 800d802:	2900      	cmp	r1, #0
 800d804:	d0f5      	beq.n	800d7f2 <__any_on+0x2e>
 800d806:	2001      	movs	r0, #1
 800d808:	e7f6      	b.n	800d7f8 <__any_on+0x34>

0800d80a <__ascii_wctomb>:
 800d80a:	0003      	movs	r3, r0
 800d80c:	1e08      	subs	r0, r1, #0
 800d80e:	d005      	beq.n	800d81c <__ascii_wctomb+0x12>
 800d810:	2aff      	cmp	r2, #255	; 0xff
 800d812:	d904      	bls.n	800d81e <__ascii_wctomb+0x14>
 800d814:	228a      	movs	r2, #138	; 0x8a
 800d816:	2001      	movs	r0, #1
 800d818:	601a      	str	r2, [r3, #0]
 800d81a:	4240      	negs	r0, r0
 800d81c:	4770      	bx	lr
 800d81e:	2001      	movs	r0, #1
 800d820:	700a      	strb	r2, [r1, #0]
 800d822:	e7fb      	b.n	800d81c <__ascii_wctomb+0x12>

0800d824 <_svfprintf_r>:
 800d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d826:	b0d9      	sub	sp, #356	; 0x164
 800d828:	001c      	movs	r4, r3
 800d82a:	910b      	str	r1, [sp, #44]	; 0x2c
 800d82c:	9208      	str	r2, [sp, #32]
 800d82e:	900a      	str	r0, [sp, #40]	; 0x28
 800d830:	f002 fdae 	bl	8010390 <_localeconv_r>
 800d834:	6803      	ldr	r3, [r0, #0]
 800d836:	0018      	movs	r0, r3
 800d838:	931c      	str	r3, [sp, #112]	; 0x70
 800d83a:	f7f2 fc63 	bl	8000104 <strlen>
 800d83e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d840:	9016      	str	r0, [sp, #88]	; 0x58
 800d842:	899b      	ldrh	r3, [r3, #12]
 800d844:	061b      	lsls	r3, r3, #24
 800d846:	d517      	bpl.n	800d878 <_svfprintf_r+0x54>
 800d848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d113      	bne.n	800d878 <_svfprintf_r+0x54>
 800d850:	2140      	movs	r1, #64	; 0x40
 800d852:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d854:	f7fd fa94 	bl	800ad80 <_malloc_r>
 800d858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d85a:	6018      	str	r0, [r3, #0]
 800d85c:	6118      	str	r0, [r3, #16]
 800d85e:	2800      	cmp	r0, #0
 800d860:	d107      	bne.n	800d872 <_svfprintf_r+0x4e>
 800d862:	230c      	movs	r3, #12
 800d864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d866:	6013      	str	r3, [r2, #0]
 800d868:	3b0d      	subs	r3, #13
 800d86a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d86c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d86e:	b059      	add	sp, #356	; 0x164
 800d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d872:	2340      	movs	r3, #64	; 0x40
 800d874:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d876:	6153      	str	r3, [r2, #20]
 800d878:	2300      	movs	r3, #0
 800d87a:	2200      	movs	r2, #0
 800d87c:	932e      	str	r3, [sp, #184]	; 0xb8
 800d87e:	932d      	str	r3, [sp, #180]	; 0xb4
 800d880:	930e      	str	r3, [sp, #56]	; 0x38
 800d882:	2300      	movs	r3, #0
 800d884:	9214      	str	r2, [sp, #80]	; 0x50
 800d886:	9315      	str	r3, [sp, #84]	; 0x54
 800d888:	2300      	movs	r3, #0
 800d88a:	af2f      	add	r7, sp, #188	; 0xbc
 800d88c:	972c      	str	r7, [sp, #176]	; 0xb0
 800d88e:	931f      	str	r3, [sp, #124]	; 0x7c
 800d890:	931e      	str	r3, [sp, #120]	; 0x78
 800d892:	9312      	str	r3, [sp, #72]	; 0x48
 800d894:	931b      	str	r3, [sp, #108]	; 0x6c
 800d896:	931d      	str	r3, [sp, #116]	; 0x74
 800d898:	9317      	str	r3, [sp, #92]	; 0x5c
 800d89a:	9d08      	ldr	r5, [sp, #32]
 800d89c:	782b      	ldrb	r3, [r5, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d002      	beq.n	800d8a8 <_svfprintf_r+0x84>
 800d8a2:	2b25      	cmp	r3, #37	; 0x25
 800d8a4:	d000      	beq.n	800d8a8 <_svfprintf_r+0x84>
 800d8a6:	e091      	b.n	800d9cc <_svfprintf_r+0x1a8>
 800d8a8:	9b08      	ldr	r3, [sp, #32]
 800d8aa:	1aee      	subs	r6, r5, r3
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	d016      	beq.n	800d8de <_svfprintf_r+0xba>
 800d8b0:	603b      	str	r3, [r7, #0]
 800d8b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d8b4:	607e      	str	r6, [r7, #4]
 800d8b6:	199b      	adds	r3, r3, r6
 800d8b8:	932e      	str	r3, [sp, #184]	; 0xb8
 800d8ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d8bc:	3708      	adds	r7, #8
 800d8be:	3301      	adds	r3, #1
 800d8c0:	932d      	str	r3, [sp, #180]	; 0xb4
 800d8c2:	2b07      	cmp	r3, #7
 800d8c4:	dd08      	ble.n	800d8d8 <_svfprintf_r+0xb4>
 800d8c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d8ca:	aa2c      	add	r2, sp, #176	; 0xb0
 800d8cc:	f004 f83a 	bl	8011944 <__ssprint_r>
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d000      	beq.n	800d8d6 <_svfprintf_r+0xb2>
 800d8d4:	e1cf      	b.n	800dc76 <_svfprintf_r+0x452>
 800d8d6:	af2f      	add	r7, sp, #188	; 0xbc
 800d8d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8da:	199b      	adds	r3, r3, r6
 800d8dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8de:	782b      	ldrb	r3, [r5, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d101      	bne.n	800d8e8 <_svfprintf_r+0xc4>
 800d8e4:	f001 f99e 	bl	800ec24 <_svfprintf_r+0x1400>
 800d8e8:	221b      	movs	r2, #27
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	a91e      	add	r1, sp, #120	; 0x78
 800d8ee:	1852      	adds	r2, r2, r1
 800d8f0:	7013      	strb	r3, [r2, #0]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	001e      	movs	r6, r3
 800d8f6:	4252      	negs	r2, r2
 800d8f8:	3501      	adds	r5, #1
 800d8fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d8fc:	9318      	str	r3, [sp, #96]	; 0x60
 800d8fe:	1c6b      	adds	r3, r5, #1
 800d900:	9313      	str	r3, [sp, #76]	; 0x4c
 800d902:	782b      	ldrb	r3, [r5, #0]
 800d904:	930f      	str	r3, [sp, #60]	; 0x3c
 800d906:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d908:	3820      	subs	r0, #32
 800d90a:	285a      	cmp	r0, #90	; 0x5a
 800d90c:	d901      	bls.n	800d912 <_svfprintf_r+0xee>
 800d90e:	f000 fe20 	bl	800e552 <_svfprintf_r+0xd2e>
 800d912:	f7f2 fc09 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d916:	0078      	.short	0x0078
 800d918:	061e061e 	.word	0x061e061e
 800d91c:	061e0082 	.word	0x061e0082
 800d920:	061e061e 	.word	0x061e061e
 800d924:	061e005d 	.word	0x061e005d
 800d928:	0084061e 	.word	0x0084061e
 800d92c:	061e008c 	.word	0x061e008c
 800d930:	0091008a 	.word	0x0091008a
 800d934:	00b2061e 	.word	0x00b2061e
 800d938:	00b400b4 	.word	0x00b400b4
 800d93c:	00b400b4 	.word	0x00b400b4
 800d940:	00b400b4 	.word	0x00b400b4
 800d944:	00b400b4 	.word	0x00b400b4
 800d948:	061e00b4 	.word	0x061e00b4
 800d94c:	061e061e 	.word	0x061e061e
 800d950:	061e061e 	.word	0x061e061e
 800d954:	061e061e 	.word	0x061e061e
 800d958:	061e013b 	.word	0x061e013b
 800d95c:	00f400e0 	.word	0x00f400e0
 800d960:	013b013b 	.word	0x013b013b
 800d964:	061e013b 	.word	0x061e013b
 800d968:	061e061e 	.word	0x061e061e
 800d96c:	00c7061e 	.word	0x00c7061e
 800d970:	061e061e 	.word	0x061e061e
 800d974:	061e04c7 	.word	0x061e04c7
 800d978:	061e061e 	.word	0x061e061e
 800d97c:	061e050a 	.word	0x061e050a
 800d980:	061e052a 	.word	0x061e052a
 800d984:	055c061e 	.word	0x055c061e
 800d988:	061e061e 	.word	0x061e061e
 800d98c:	061e061e 	.word	0x061e061e
 800d990:	061e061e 	.word	0x061e061e
 800d994:	061e061e 	.word	0x061e061e
 800d998:	061e013b 	.word	0x061e013b
 800d99c:	00f600e0 	.word	0x00f600e0
 800d9a0:	013b013b 	.word	0x013b013b
 800d9a4:	00c9013b 	.word	0x00c9013b
 800d9a8:	00dc00f6 	.word	0x00dc00f6
 800d9ac:	00d5061e 	.word	0x00d5061e
 800d9b0:	04a7061e 	.word	0x04a7061e
 800d9b4:	04fa04c9 	.word	0x04fa04c9
 800d9b8:	061e00dc 	.word	0x061e00dc
 800d9bc:	0080050a 	.word	0x0080050a
 800d9c0:	061e052c 	.word	0x061e052c
 800d9c4:	057c061e 	.word	0x057c061e
 800d9c8:	0080061e 	.word	0x0080061e
 800d9cc:	3501      	adds	r5, #1
 800d9ce:	e765      	b.n	800d89c <_svfprintf_r+0x78>
 800d9d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9d2:	f002 fcdd 	bl	8010390 <_localeconv_r>
 800d9d6:	6843      	ldr	r3, [r0, #4]
 800d9d8:	0018      	movs	r0, r3
 800d9da:	931d      	str	r3, [sp, #116]	; 0x74
 800d9dc:	f7f2 fb92 	bl	8000104 <strlen>
 800d9e0:	901b      	str	r0, [sp, #108]	; 0x6c
 800d9e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d9e4:	f002 fcd4 	bl	8010390 <_localeconv_r>
 800d9e8:	6883      	ldr	r3, [r0, #8]
 800d9ea:	9312      	str	r3, [sp, #72]	; 0x48
 800d9ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d011      	beq.n	800da16 <_svfprintf_r+0x1f2>
 800d9f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00e      	beq.n	800da16 <_svfprintf_r+0x1f2>
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00b      	beq.n	800da16 <_svfprintf_r+0x1f2>
 800d9fe:	2380      	movs	r3, #128	; 0x80
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	431e      	orrs	r6, r3
 800da04:	e007      	b.n	800da16 <_svfprintf_r+0x1f2>
 800da06:	231b      	movs	r3, #27
 800da08:	aa1e      	add	r2, sp, #120	; 0x78
 800da0a:	189b      	adds	r3, r3, r2
 800da0c:	781a      	ldrb	r2, [r3, #0]
 800da0e:	2a00      	cmp	r2, #0
 800da10:	d101      	bne.n	800da16 <_svfprintf_r+0x1f2>
 800da12:	3220      	adds	r2, #32
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800da18:	e771      	b.n	800d8fe <_svfprintf_r+0xda>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e7f1      	b.n	800da02 <_svfprintf_r+0x1de>
 800da1e:	cc08      	ldmia	r4!, {r3}
 800da20:	9318      	str	r3, [sp, #96]	; 0x60
 800da22:	2b00      	cmp	r3, #0
 800da24:	daf7      	bge.n	800da16 <_svfprintf_r+0x1f2>
 800da26:	425b      	negs	r3, r3
 800da28:	9318      	str	r3, [sp, #96]	; 0x60
 800da2a:	2304      	movs	r3, #4
 800da2c:	e7e9      	b.n	800da02 <_svfprintf_r+0x1de>
 800da2e:	231b      	movs	r3, #27
 800da30:	aa1e      	add	r2, sp, #120	; 0x78
 800da32:	189b      	adds	r3, r3, r2
 800da34:	222b      	movs	r2, #43	; 0x2b
 800da36:	e7ed      	b.n	800da14 <_svfprintf_r+0x1f0>
 800da38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da3c:	7812      	ldrb	r2, [r2, #0]
 800da3e:	3301      	adds	r3, #1
 800da40:	920f      	str	r2, [sp, #60]	; 0x3c
 800da42:	2a2a      	cmp	r2, #42	; 0x2a
 800da44:	d010      	beq.n	800da68 <_svfprintf_r+0x244>
 800da46:	2200      	movs	r2, #0
 800da48:	9209      	str	r2, [sp, #36]	; 0x24
 800da4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800da4e:	3a30      	subs	r2, #48	; 0x30
 800da50:	2a09      	cmp	r2, #9
 800da52:	d900      	bls.n	800da56 <_svfprintf_r+0x232>
 800da54:	e757      	b.n	800d906 <_svfprintf_r+0xe2>
 800da56:	200a      	movs	r0, #10
 800da58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da5a:	4341      	muls	r1, r0
 800da5c:	188a      	adds	r2, r1, r2
 800da5e:	9209      	str	r2, [sp, #36]	; 0x24
 800da60:	781a      	ldrb	r2, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	920f      	str	r2, [sp, #60]	; 0x3c
 800da66:	e7f0      	b.n	800da4a <_svfprintf_r+0x226>
 800da68:	cc04      	ldmia	r4!, {r2}
 800da6a:	9209      	str	r2, [sp, #36]	; 0x24
 800da6c:	2a00      	cmp	r2, #0
 800da6e:	da02      	bge.n	800da76 <_svfprintf_r+0x252>
 800da70:	2201      	movs	r2, #1
 800da72:	4252      	negs	r2, r2
 800da74:	9209      	str	r2, [sp, #36]	; 0x24
 800da76:	9313      	str	r3, [sp, #76]	; 0x4c
 800da78:	e7cd      	b.n	800da16 <_svfprintf_r+0x1f2>
 800da7a:	2380      	movs	r3, #128	; 0x80
 800da7c:	e7c1      	b.n	800da02 <_svfprintf_r+0x1de>
 800da7e:	2200      	movs	r2, #0
 800da80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da82:	9218      	str	r2, [sp, #96]	; 0x60
 800da84:	210a      	movs	r1, #10
 800da86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da88:	434a      	muls	r2, r1
 800da8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800da8c:	3930      	subs	r1, #48	; 0x30
 800da8e:	188a      	adds	r2, r1, r2
 800da90:	9218      	str	r2, [sp, #96]	; 0x60
 800da92:	001a      	movs	r2, r3
 800da94:	7812      	ldrb	r2, [r2, #0]
 800da96:	3301      	adds	r3, #1
 800da98:	920f      	str	r2, [sp, #60]	; 0x3c
 800da9a:	3a30      	subs	r2, #48	; 0x30
 800da9c:	9313      	str	r3, [sp, #76]	; 0x4c
 800da9e:	2a09      	cmp	r2, #9
 800daa0:	d9f0      	bls.n	800da84 <_svfprintf_r+0x260>
 800daa2:	e730      	b.n	800d906 <_svfprintf_r+0xe2>
 800daa4:	2308      	movs	r3, #8
 800daa6:	e7ac      	b.n	800da02 <_svfprintf_r+0x1de>
 800daa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b68      	cmp	r3, #104	; 0x68
 800daae:	d105      	bne.n	800dabc <_svfprintf_r+0x298>
 800dab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dab2:	3301      	adds	r3, #1
 800dab4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dab6:	2380      	movs	r3, #128	; 0x80
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	e7a2      	b.n	800da02 <_svfprintf_r+0x1de>
 800dabc:	2340      	movs	r3, #64	; 0x40
 800dabe:	e7a0      	b.n	800da02 <_svfprintf_r+0x1de>
 800dac0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	2b6c      	cmp	r3, #108	; 0x6c
 800dac6:	d104      	bne.n	800dad2 <_svfprintf_r+0x2ae>
 800dac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800daca:	3301      	adds	r3, #1
 800dacc:	9313      	str	r3, [sp, #76]	; 0x4c
 800dace:	2320      	movs	r3, #32
 800dad0:	e797      	b.n	800da02 <_svfprintf_r+0x1de>
 800dad2:	2310      	movs	r3, #16
 800dad4:	e795      	b.n	800da02 <_svfprintf_r+0x1de>
 800dad6:	0021      	movs	r1, r4
 800dad8:	c904      	ldmia	r1!, {r2}
 800dada:	ab3f      	add	r3, sp, #252	; 0xfc
 800dadc:	910d      	str	r1, [sp, #52]	; 0x34
 800dade:	211b      	movs	r1, #27
 800dae0:	701a      	strb	r2, [r3, #0]
 800dae2:	2200      	movs	r2, #0
 800dae4:	a81e      	add	r0, sp, #120	; 0x78
 800dae6:	1809      	adds	r1, r1, r0
 800dae8:	700a      	strb	r2, [r1, #0]
 800daea:	920c      	str	r2, [sp, #48]	; 0x30
 800daec:	3201      	adds	r2, #1
 800daee:	9209      	str	r2, [sp, #36]	; 0x24
 800daf0:	2200      	movs	r2, #0
 800daf2:	9308      	str	r3, [sp, #32]
 800daf4:	0015      	movs	r5, r2
 800daf6:	9219      	str	r2, [sp, #100]	; 0x64
 800daf8:	9210      	str	r2, [sp, #64]	; 0x40
 800dafa:	9211      	str	r2, [sp, #68]	; 0x44
 800dafc:	e1f1      	b.n	800dee2 <_svfprintf_r+0x6be>
 800dafe:	2310      	movs	r3, #16
 800db00:	431e      	orrs	r6, r3
 800db02:	06b3      	lsls	r3, r6, #26
 800db04:	d531      	bpl.n	800db6a <_svfprintf_r+0x346>
 800db06:	2307      	movs	r3, #7
 800db08:	3407      	adds	r4, #7
 800db0a:	439c      	bics	r4, r3
 800db0c:	0022      	movs	r2, r4
 800db0e:	ca18      	ldmia	r2!, {r3, r4}
 800db10:	9306      	str	r3, [sp, #24]
 800db12:	9407      	str	r4, [sp, #28]
 800db14:	920d      	str	r2, [sp, #52]	; 0x34
 800db16:	9a07      	ldr	r2, [sp, #28]
 800db18:	2301      	movs	r3, #1
 800db1a:	2a00      	cmp	r2, #0
 800db1c:	da0b      	bge.n	800db36 <_svfprintf_r+0x312>
 800db1e:	9c06      	ldr	r4, [sp, #24]
 800db20:	9d07      	ldr	r5, [sp, #28]
 800db22:	2200      	movs	r2, #0
 800db24:	4261      	negs	r1, r4
 800db26:	41aa      	sbcs	r2, r5
 800db28:	9106      	str	r1, [sp, #24]
 800db2a:	9207      	str	r2, [sp, #28]
 800db2c:	221b      	movs	r2, #27
 800db2e:	a91e      	add	r1, sp, #120	; 0x78
 800db30:	1852      	adds	r2, r2, r1
 800db32:	212d      	movs	r1, #45	; 0x2d
 800db34:	7011      	strb	r1, [r2, #0]
 800db36:	9907      	ldr	r1, [sp, #28]
 800db38:	9a06      	ldr	r2, [sp, #24]
 800db3a:	430a      	orrs	r2, r1
 800db3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db3e:	3101      	adds	r1, #1
 800db40:	d101      	bne.n	800db46 <_svfprintf_r+0x322>
 800db42:	f001 f87b 	bl	800ec3c <_svfprintf_r+0x1418>
 800db46:	2180      	movs	r1, #128	; 0x80
 800db48:	0034      	movs	r4, r6
 800db4a:	438c      	bics	r4, r1
 800db4c:	2a00      	cmp	r2, #0
 800db4e:	d001      	beq.n	800db54 <_svfprintf_r+0x330>
 800db50:	f001 f879 	bl	800ec46 <_svfprintf_r+0x1422>
 800db54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db56:	2a00      	cmp	r2, #0
 800db58:	d101      	bne.n	800db5e <_svfprintf_r+0x33a>
 800db5a:	f000 fcef 	bl	800e53c <_svfprintf_r+0xd18>
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d001      	beq.n	800db66 <_svfprintf_r+0x342>
 800db62:	f001 f874 	bl	800ec4e <_svfprintf_r+0x142a>
 800db66:	f000 fc79 	bl	800e45c <_svfprintf_r+0xc38>
 800db6a:	0022      	movs	r2, r4
 800db6c:	ca08      	ldmia	r2!, {r3}
 800db6e:	920d      	str	r2, [sp, #52]	; 0x34
 800db70:	06f2      	lsls	r2, r6, #27
 800db72:	d503      	bpl.n	800db7c <_svfprintf_r+0x358>
 800db74:	9306      	str	r3, [sp, #24]
 800db76:	17db      	asrs	r3, r3, #31
 800db78:	9307      	str	r3, [sp, #28]
 800db7a:	e7cc      	b.n	800db16 <_svfprintf_r+0x2f2>
 800db7c:	0672      	lsls	r2, r6, #25
 800db7e:	d501      	bpl.n	800db84 <_svfprintf_r+0x360>
 800db80:	b21b      	sxth	r3, r3
 800db82:	e7f7      	b.n	800db74 <_svfprintf_r+0x350>
 800db84:	05b2      	lsls	r2, r6, #22
 800db86:	d5f5      	bpl.n	800db74 <_svfprintf_r+0x350>
 800db88:	b25b      	sxtb	r3, r3
 800db8a:	e7f3      	b.n	800db74 <_svfprintf_r+0x350>
 800db8c:	2307      	movs	r3, #7
 800db8e:	3407      	adds	r4, #7
 800db90:	439c      	bics	r4, r3
 800db92:	0022      	movs	r2, r4
 800db94:	ca18      	ldmia	r2!, {r3, r4}
 800db96:	920d      	str	r2, [sp, #52]	; 0x34
 800db98:	2201      	movs	r2, #1
 800db9a:	9314      	str	r3, [sp, #80]	; 0x50
 800db9c:	9415      	str	r4, [sp, #84]	; 0x54
 800db9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dba0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dba2:	005c      	lsls	r4, r3, #1
 800dba4:	0864      	lsrs	r4, r4, #1
 800dba6:	0028      	movs	r0, r5
 800dba8:	0021      	movs	r1, r4
 800dbaa:	4b3e      	ldr	r3, [pc, #248]	; (800dca4 <_svfprintf_r+0x480>)
 800dbac:	4252      	negs	r2, r2
 800dbae:	f7f4 fba1 	bl	80022f4 <__aeabi_dcmpun>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	d126      	bne.n	800dc04 <_svfprintf_r+0x3e0>
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	0028      	movs	r0, r5
 800dbba:	0021      	movs	r1, r4
 800dbbc:	4b39      	ldr	r3, [pc, #228]	; (800dca4 <_svfprintf_r+0x480>)
 800dbbe:	4252      	negs	r2, r2
 800dbc0:	f7f2 fc52 	bl	8000468 <__aeabi_dcmple>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d11d      	bne.n	800dc04 <_svfprintf_r+0x3e0>
 800dbc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dbca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	f7f2 fc40 	bl	8000454 <__aeabi_dcmplt>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d004      	beq.n	800dbe2 <_svfprintf_r+0x3be>
 800dbd8:	231b      	movs	r3, #27
 800dbda:	aa1e      	add	r2, sp, #120	; 0x78
 800dbdc:	189b      	adds	r3, r3, r2
 800dbde:	222d      	movs	r2, #45	; 0x2d
 800dbe0:	701a      	strb	r2, [r3, #0]
 800dbe2:	4b31      	ldr	r3, [pc, #196]	; (800dca8 <_svfprintf_r+0x484>)
 800dbe4:	9308      	str	r3, [sp, #32]
 800dbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbe8:	2b47      	cmp	r3, #71	; 0x47
 800dbea:	dd01      	ble.n	800dbf0 <_svfprintf_r+0x3cc>
 800dbec:	4b2f      	ldr	r3, [pc, #188]	; (800dcac <_svfprintf_r+0x488>)
 800dbee:	9308      	str	r3, [sp, #32]
 800dbf0:	2380      	movs	r3, #128	; 0x80
 800dbf2:	439e      	bics	r6, r3
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	930c      	str	r3, [sp, #48]	; 0x30
 800dbf8:	3303      	adds	r3, #3
 800dbfa:	9309      	str	r3, [sp, #36]	; 0x24
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	9319      	str	r3, [sp, #100]	; 0x64
 800dc00:	f000 fc78 	bl	800e4f4 <_svfprintf_r+0xcd0>
 800dc04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc08:	0010      	movs	r0, r2
 800dc0a:	0019      	movs	r1, r3
 800dc0c:	f7f4 fb72 	bl	80022f4 <__aeabi_dcmpun>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d00e      	beq.n	800dc32 <_svfprintf_r+0x40e>
 800dc14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	da04      	bge.n	800dc24 <_svfprintf_r+0x400>
 800dc1a:	231b      	movs	r3, #27
 800dc1c:	aa1e      	add	r2, sp, #120	; 0x78
 800dc1e:	189b      	adds	r3, r3, r2
 800dc20:	222d      	movs	r2, #45	; 0x2d
 800dc22:	701a      	strb	r2, [r3, #0]
 800dc24:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <_svfprintf_r+0x48c>)
 800dc26:	9308      	str	r3, [sp, #32]
 800dc28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc2a:	2b47      	cmp	r3, #71	; 0x47
 800dc2c:	dde0      	ble.n	800dbf0 <_svfprintf_r+0x3cc>
 800dc2e:	4b21      	ldr	r3, [pc, #132]	; (800dcb4 <_svfprintf_r+0x490>)
 800dc30:	e7dd      	b.n	800dbee <_svfprintf_r+0x3ca>
 800dc32:	2320      	movs	r3, #32
 800dc34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc36:	439a      	bics	r2, r3
 800dc38:	9210      	str	r2, [sp, #64]	; 0x40
 800dc3a:	2a41      	cmp	r2, #65	; 0x41
 800dc3c:	d123      	bne.n	800dc86 <_svfprintf_r+0x462>
 800dc3e:	2230      	movs	r2, #48	; 0x30
 800dc40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800dc42:	ab25      	add	r3, sp, #148	; 0x94
 800dc44:	701a      	strb	r2, [r3, #0]
 800dc46:	3248      	adds	r2, #72	; 0x48
 800dc48:	2961      	cmp	r1, #97	; 0x61
 800dc4a:	d000      	beq.n	800dc4e <_svfprintf_r+0x42a>
 800dc4c:	3a20      	subs	r2, #32
 800dc4e:	705a      	strb	r2, [r3, #1]
 800dc50:	2302      	movs	r3, #2
 800dc52:	431e      	orrs	r6, r3
 800dc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc56:	2b63      	cmp	r3, #99	; 0x63
 800dc58:	dd2e      	ble.n	800dcb8 <_svfprintf_r+0x494>
 800dc5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc5c:	1c59      	adds	r1, r3, #1
 800dc5e:	f7fd f88f 	bl	800ad80 <_malloc_r>
 800dc62:	9008      	str	r0, [sp, #32]
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d000      	beq.n	800dc6a <_svfprintf_r+0x446>
 800dc68:	e216      	b.n	800e098 <_svfprintf_r+0x874>
 800dc6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc6c:	899a      	ldrh	r2, [r3, #12]
 800dc6e:	2340      	movs	r3, #64	; 0x40
 800dc70:	4313      	orrs	r3, r2
 800dc72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc74:	8193      	strh	r3, [r2, #12]
 800dc76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc78:	899b      	ldrh	r3, [r3, #12]
 800dc7a:	065b      	lsls	r3, r3, #25
 800dc7c:	d400      	bmi.n	800dc80 <_svfprintf_r+0x45c>
 800dc7e:	e5f5      	b.n	800d86c <_svfprintf_r+0x48>
 800dc80:	2301      	movs	r3, #1
 800dc82:	425b      	negs	r3, r3
 800dc84:	e5f1      	b.n	800d86a <_svfprintf_r+0x46>
 800dc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc88:	900c      	str	r0, [sp, #48]	; 0x30
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	d100      	bne.n	800dc90 <_svfprintf_r+0x46c>
 800dc8e:	e206      	b.n	800e09e <_svfprintf_r+0x87a>
 800dc90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc92:	2b47      	cmp	r3, #71	; 0x47
 800dc94:	d114      	bne.n	800dcc0 <_svfprintf_r+0x49c>
 800dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d111      	bne.n	800dcc0 <_svfprintf_r+0x49c>
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dca0:	e00e      	b.n	800dcc0 <_svfprintf_r+0x49c>
 800dca2:	46c0      	nop			; (mov r8, r8)
 800dca4:	7fefffff 	.word	0x7fefffff
 800dca8:	08014dec 	.word	0x08014dec
 800dcac:	08014df0 	.word	0x08014df0
 800dcb0:	08014df4 	.word	0x08014df4
 800dcb4:	08014df8 	.word	0x08014df8
 800dcb8:	2300      	movs	r3, #0
 800dcba:	930c      	str	r3, [sp, #48]	; 0x30
 800dcbc:	ab3f      	add	r3, sp, #252	; 0xfc
 800dcbe:	9308      	str	r3, [sp, #32]
 800dcc0:	2380      	movs	r3, #128	; 0x80
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	4333      	orrs	r3, r6
 800dcc6:	931a      	str	r3, [sp, #104]	; 0x68
 800dcc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	db00      	blt.n	800dcd2 <_svfprintf_r+0x4ae>
 800dcd0:	e1e7      	b.n	800e0a2 <_svfprintf_r+0x87e>
 800dcd2:	2280      	movs	r2, #128	; 0x80
 800dcd4:	0612      	lsls	r2, r2, #24
 800dcd6:	4694      	mov	ip, r2
 800dcd8:	4463      	add	r3, ip
 800dcda:	930e      	str	r3, [sp, #56]	; 0x38
 800dcdc:	232d      	movs	r3, #45	; 0x2d
 800dcde:	9322      	str	r3, [sp, #136]	; 0x88
 800dce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dce2:	2b41      	cmp	r3, #65	; 0x41
 800dce4:	d000      	beq.n	800dce8 <_svfprintf_r+0x4c4>
 800dce6:	e1f5      	b.n	800e0d4 <_svfprintf_r+0x8b0>
 800dce8:	0028      	movs	r0, r5
 800dcea:	aa26      	add	r2, sp, #152	; 0x98
 800dcec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dcee:	f002 fb73 	bl	80103d8 <frexp>
 800dcf2:	23ff      	movs	r3, #255	; 0xff
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	059b      	lsls	r3, r3, #22
 800dcf8:	f7f3 fcb8 	bl	800166c <__aeabi_dmul>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2300      	movs	r3, #0
 800dd00:	0004      	movs	r4, r0
 800dd02:	000d      	movs	r5, r1
 800dd04:	f7f2 fba0 	bl	8000448 <__aeabi_dcmpeq>
 800dd08:	2800      	cmp	r0, #0
 800dd0a:	d001      	beq.n	800dd10 <_svfprintf_r+0x4ec>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	9326      	str	r3, [sp, #152]	; 0x98
 800dd10:	4bda      	ldr	r3, [pc, #872]	; (800e07c <_svfprintf_r+0x858>)
 800dd12:	9319      	str	r3, [sp, #100]	; 0x64
 800dd14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd16:	2b61      	cmp	r3, #97	; 0x61
 800dd18:	d001      	beq.n	800dd1e <_svfprintf_r+0x4fa>
 800dd1a:	4bd9      	ldr	r3, [pc, #868]	; (800e080 <_svfprintf_r+0x85c>)
 800dd1c:	9319      	str	r3, [sp, #100]	; 0x64
 800dd1e:	9b08      	ldr	r3, [sp, #32]
 800dd20:	930e      	str	r3, [sp, #56]	; 0x38
 800dd22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd24:	3b01      	subs	r3, #1
 800dd26:	9311      	str	r3, [sp, #68]	; 0x44
 800dd28:	2200      	movs	r2, #0
 800dd2a:	4bd6      	ldr	r3, [pc, #856]	; (800e084 <_svfprintf_r+0x860>)
 800dd2c:	0020      	movs	r0, r4
 800dd2e:	0029      	movs	r1, r5
 800dd30:	f7f3 fc9c 	bl	800166c <__aeabi_dmul>
 800dd34:	000d      	movs	r5, r1
 800dd36:	0004      	movs	r4, r0
 800dd38:	f7f4 fafa 	bl	8002330 <__aeabi_d2iz>
 800dd3c:	9021      	str	r0, [sp, #132]	; 0x84
 800dd3e:	f7f4 fb2d 	bl	800239c <__aeabi_i2d>
 800dd42:	0002      	movs	r2, r0
 800dd44:	000b      	movs	r3, r1
 800dd46:	0020      	movs	r0, r4
 800dd48:	0029      	movs	r1, r5
 800dd4a:	f7f3 ff51 	bl	8001bf0 <__aeabi_dsub>
 800dd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd50:	000d      	movs	r5, r1
 800dd52:	001a      	movs	r2, r3
 800dd54:	3201      	adds	r2, #1
 800dd56:	9921      	ldr	r1, [sp, #132]	; 0x84
 800dd58:	920e      	str	r2, [sp, #56]	; 0x38
 800dd5a:	9223      	str	r2, [sp, #140]	; 0x8c
 800dd5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dd5e:	0004      	movs	r4, r0
 800dd60:	5c52      	ldrb	r2, [r2, r1]
 800dd62:	701a      	strb	r2, [r3, #0]
 800dd64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd66:	9320      	str	r3, [sp, #128]	; 0x80
 800dd68:	3301      	adds	r3, #1
 800dd6a:	d00a      	beq.n	800dd82 <_svfprintf_r+0x55e>
 800dd6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd6e:	2200      	movs	r2, #0
 800dd70:	3b01      	subs	r3, #1
 800dd72:	9311      	str	r3, [sp, #68]	; 0x44
 800dd74:	0020      	movs	r0, r4
 800dd76:	2300      	movs	r3, #0
 800dd78:	0029      	movs	r1, r5
 800dd7a:	f7f2 fb65 	bl	8000448 <__aeabi_dcmpeq>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d0d2      	beq.n	800dd28 <_svfprintf_r+0x504>
 800dd82:	2200      	movs	r2, #0
 800dd84:	0020      	movs	r0, r4
 800dd86:	0029      	movs	r1, r5
 800dd88:	4bbf      	ldr	r3, [pc, #764]	; (800e088 <_svfprintf_r+0x864>)
 800dd8a:	f7f2 fb77 	bl	800047c <__aeabi_dcmpgt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d10c      	bne.n	800ddac <_svfprintf_r+0x588>
 800dd92:	2200      	movs	r2, #0
 800dd94:	0020      	movs	r0, r4
 800dd96:	0029      	movs	r1, r5
 800dd98:	4bbb      	ldr	r3, [pc, #748]	; (800e088 <_svfprintf_r+0x864>)
 800dd9a:	f7f2 fb55 	bl	8000448 <__aeabi_dcmpeq>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d100      	bne.n	800dda4 <_svfprintf_r+0x580>
 800dda2:	e191      	b.n	800e0c8 <_svfprintf_r+0x8a4>
 800dda4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dda6:	07db      	lsls	r3, r3, #31
 800dda8:	d400      	bmi.n	800ddac <_svfprintf_r+0x588>
 800ddaa:	e18d      	b.n	800e0c8 <_svfprintf_r+0x8a4>
 800ddac:	2030      	movs	r0, #48	; 0x30
 800ddae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddb0:	932a      	str	r3, [sp, #168]	; 0xa8
 800ddb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddb4:	7bdb      	ldrb	r3, [r3, #15]
 800ddb6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800ddb8:	3a01      	subs	r2, #1
 800ddba:	922a      	str	r2, [sp, #168]	; 0xa8
 800ddbc:	7811      	ldrb	r1, [r2, #0]
 800ddbe:	4299      	cmp	r1, r3
 800ddc0:	d100      	bne.n	800ddc4 <_svfprintf_r+0x5a0>
 800ddc2:	e171      	b.n	800e0a8 <_svfprintf_r+0x884>
 800ddc4:	1c4b      	adds	r3, r1, #1
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	2939      	cmp	r1, #57	; 0x39
 800ddca:	d101      	bne.n	800ddd0 <_svfprintf_r+0x5ac>
 800ddcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ddce:	7a9b      	ldrb	r3, [r3, #10]
 800ddd0:	7013      	strb	r3, [r2, #0]
 800ddd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ddd4:	9a08      	ldr	r2, [sp, #32]
 800ddd6:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ddd8:	1a9b      	subs	r3, r3, r2
 800ddda:	930e      	str	r3, [sp, #56]	; 0x38
 800dddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddde:	2b47      	cmp	r3, #71	; 0x47
 800dde0:	d000      	beq.n	800dde4 <_svfprintf_r+0x5c0>
 800dde2:	e1c4      	b.n	800e16e <_svfprintf_r+0x94a>
 800dde4:	1ceb      	adds	r3, r5, #3
 800dde6:	db03      	blt.n	800ddf0 <_svfprintf_r+0x5cc>
 800dde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddea:	42ab      	cmp	r3, r5
 800ddec:	db00      	blt.n	800ddf0 <_svfprintf_r+0x5cc>
 800ddee:	e1e6      	b.n	800e1be <_svfprintf_r+0x99a>
 800ddf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddf2:	3b02      	subs	r3, #2
 800ddf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddf6:	223c      	movs	r2, #60	; 0x3c
 800ddf8:	466b      	mov	r3, sp
 800ddfa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ddfc:	189b      	adds	r3, r3, r2
 800ddfe:	1e6c      	subs	r4, r5, #1
 800de00:	3a1c      	subs	r2, #28
 800de02:	2000      	movs	r0, #0
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	9426      	str	r4, [sp, #152]	; 0x98
 800de08:	4391      	bics	r1, r2
 800de0a:	2941      	cmp	r1, #65	; 0x41
 800de0c:	d102      	bne.n	800de14 <_svfprintf_r+0x5f0>
 800de0e:	330f      	adds	r3, #15
 800de10:	b2db      	uxtb	r3, r3
 800de12:	3001      	adds	r0, #1
 800de14:	a928      	add	r1, sp, #160	; 0xa0
 800de16:	700b      	strb	r3, [r1, #0]
 800de18:	232b      	movs	r3, #43	; 0x2b
 800de1a:	2c00      	cmp	r4, #0
 800de1c:	da02      	bge.n	800de24 <_svfprintf_r+0x600>
 800de1e:	2401      	movs	r4, #1
 800de20:	3302      	adds	r3, #2
 800de22:	1b64      	subs	r4, r4, r5
 800de24:	704b      	strb	r3, [r1, #1]
 800de26:	2c09      	cmp	r4, #9
 800de28:	dc00      	bgt.n	800de2c <_svfprintf_r+0x608>
 800de2a:	e1ba      	b.n	800e1a2 <_svfprintf_r+0x97e>
 800de2c:	2337      	movs	r3, #55	; 0x37
 800de2e:	250a      	movs	r5, #10
 800de30:	aa1e      	add	r2, sp, #120	; 0x78
 800de32:	189b      	adds	r3, r3, r2
 800de34:	9310      	str	r3, [sp, #64]	; 0x40
 800de36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de38:	0020      	movs	r0, r4
 800de3a:	9309      	str	r3, [sp, #36]	; 0x24
 800de3c:	0029      	movs	r1, r5
 800de3e:	3b01      	subs	r3, #1
 800de40:	9310      	str	r3, [sp, #64]	; 0x40
 800de42:	f7f2 faeb 	bl	800041c <__aeabi_idivmod>
 800de46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de48:	3130      	adds	r1, #48	; 0x30
 800de4a:	7019      	strb	r1, [r3, #0]
 800de4c:	0020      	movs	r0, r4
 800de4e:	0029      	movs	r1, r5
 800de50:	9411      	str	r4, [sp, #68]	; 0x44
 800de52:	f7f2 f9fd 	bl	8000250 <__divsi3>
 800de56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de58:	0004      	movs	r4, r0
 800de5a:	2b63      	cmp	r3, #99	; 0x63
 800de5c:	dceb      	bgt.n	800de36 <_svfprintf_r+0x612>
 800de5e:	222a      	movs	r2, #42	; 0x2a
 800de60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de62:	a81e      	add	r0, sp, #120	; 0x78
 800de64:	1e99      	subs	r1, r3, #2
 800de66:	1812      	adds	r2, r2, r0
 800de68:	2037      	movs	r0, #55	; 0x37
 800de6a:	000b      	movs	r3, r1
 800de6c:	3430      	adds	r4, #48	; 0x30
 800de6e:	700c      	strb	r4, [r1, #0]
 800de70:	ac1e      	add	r4, sp, #120	; 0x78
 800de72:	1900      	adds	r0, r0, r4
 800de74:	4283      	cmp	r3, r0
 800de76:	d200      	bcs.n	800de7a <_svfprintf_r+0x656>
 800de78:	e18e      	b.n	800e198 <_svfprintf_r+0x974>
 800de7a:	2300      	movs	r3, #0
 800de7c:	4281      	cmp	r1, r0
 800de7e:	d804      	bhi.n	800de8a <_svfprintf_r+0x666>
 800de80:	aa1e      	add	r2, sp, #120	; 0x78
 800de82:	3339      	adds	r3, #57	; 0x39
 800de84:	189b      	adds	r3, r3, r2
 800de86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de88:	1a9b      	subs	r3, r3, r2
 800de8a:	222a      	movs	r2, #42	; 0x2a
 800de8c:	a91e      	add	r1, sp, #120	; 0x78
 800de8e:	1852      	adds	r2, r2, r1
 800de90:	18d3      	adds	r3, r2, r3
 800de92:	aa28      	add	r2, sp, #160	; 0xa0
 800de94:	1a9b      	subs	r3, r3, r2
 800de96:	931e      	str	r3, [sp, #120]	; 0x78
 800de98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de9c:	4694      	mov	ip, r2
 800de9e:	4463      	add	r3, ip
 800dea0:	9309      	str	r3, [sp, #36]	; 0x24
 800dea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	dc01      	bgt.n	800deac <_svfprintf_r+0x688>
 800dea8:	07f3      	lsls	r3, r6, #31
 800deaa:	d504      	bpl.n	800deb6 <_svfprintf_r+0x692>
 800deac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800deae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb0:	4694      	mov	ip, r2
 800deb2:	4463      	add	r3, ip
 800deb4:	9309      	str	r3, [sp, #36]	; 0x24
 800deb6:	2280      	movs	r2, #128	; 0x80
 800deb8:	4b74      	ldr	r3, [pc, #464]	; (800e08c <_svfprintf_r+0x868>)
 800deba:	0052      	lsls	r2, r2, #1
 800debc:	4033      	ands	r3, r6
 800debe:	431a      	orrs	r2, r3
 800dec0:	2300      	movs	r3, #0
 800dec2:	001d      	movs	r5, r3
 800dec4:	921a      	str	r2, [sp, #104]	; 0x68
 800dec6:	9310      	str	r3, [sp, #64]	; 0x40
 800dec8:	9311      	str	r3, [sp, #68]	; 0x44
 800deca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800decc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800dece:	9319      	str	r3, [sp, #100]	; 0x64
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <_svfprintf_r+0x6be>
 800ded4:	231b      	movs	r3, #27
 800ded6:	aa1e      	add	r2, sp, #120	; 0x78
 800ded8:	189b      	adds	r3, r3, r2
 800deda:	222d      	movs	r2, #45	; 0x2d
 800dedc:	701a      	strb	r2, [r3, #0]
 800dede:	2300      	movs	r3, #0
 800dee0:	9319      	str	r3, [sp, #100]	; 0x64
 800dee2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dee6:	931a      	str	r3, [sp, #104]	; 0x68
 800dee8:	4293      	cmp	r3, r2
 800deea:	da00      	bge.n	800deee <_svfprintf_r+0x6ca>
 800deec:	921a      	str	r2, [sp, #104]	; 0x68
 800deee:	231b      	movs	r3, #27
 800def0:	aa1e      	add	r2, sp, #120	; 0x78
 800def2:	189b      	adds	r3, r3, r2
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	1e5a      	subs	r2, r3, #1
 800def8:	4193      	sbcs	r3, r2
 800defa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800defc:	18d3      	adds	r3, r2, r3
 800defe:	931a      	str	r3, [sp, #104]	; 0x68
 800df00:	0032      	movs	r2, r6
 800df02:	2302      	movs	r3, #2
 800df04:	401a      	ands	r2, r3
 800df06:	9220      	str	r2, [sp, #128]	; 0x80
 800df08:	421e      	tst	r6, r3
 800df0a:	d002      	beq.n	800df12 <_svfprintf_r+0x6ee>
 800df0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800df0e:	3302      	adds	r3, #2
 800df10:	931a      	str	r3, [sp, #104]	; 0x68
 800df12:	2384      	movs	r3, #132	; 0x84
 800df14:	0032      	movs	r2, r6
 800df16:	401a      	ands	r2, r3
 800df18:	9221      	str	r2, [sp, #132]	; 0x84
 800df1a:	421e      	tst	r6, r3
 800df1c:	d11f      	bne.n	800df5e <_svfprintf_r+0x73a>
 800df1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800df20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df22:	1a9c      	subs	r4, r3, r2
 800df24:	2c00      	cmp	r4, #0
 800df26:	dd1a      	ble.n	800df5e <_svfprintf_r+0x73a>
 800df28:	0039      	movs	r1, r7
 800df2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df2c:	4858      	ldr	r0, [pc, #352]	; (800e090 <_svfprintf_r+0x86c>)
 800df2e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800df30:	3301      	adds	r3, #1
 800df32:	3108      	adds	r1, #8
 800df34:	6038      	str	r0, [r7, #0]
 800df36:	2c10      	cmp	r4, #16
 800df38:	dd00      	ble.n	800df3c <_svfprintf_r+0x718>
 800df3a:	e31c      	b.n	800e576 <_svfprintf_r+0xd52>
 800df3c:	607c      	str	r4, [r7, #4]
 800df3e:	18a4      	adds	r4, r4, r2
 800df40:	000f      	movs	r7, r1
 800df42:	942e      	str	r4, [sp, #184]	; 0xb8
 800df44:	932d      	str	r3, [sp, #180]	; 0xb4
 800df46:	2b07      	cmp	r3, #7
 800df48:	dd09      	ble.n	800df5e <_svfprintf_r+0x73a>
 800df4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df4e:	aa2c      	add	r2, sp, #176	; 0xb0
 800df50:	f003 fcf8 	bl	8011944 <__ssprint_r>
 800df54:	2800      	cmp	r0, #0
 800df56:	d001      	beq.n	800df5c <_svfprintf_r+0x738>
 800df58:	f000 fe43 	bl	800ebe2 <_svfprintf_r+0x13be>
 800df5c:	af2f      	add	r7, sp, #188	; 0xbc
 800df5e:	221b      	movs	r2, #27
 800df60:	a91e      	add	r1, sp, #120	; 0x78
 800df62:	1852      	adds	r2, r2, r1
 800df64:	7811      	ldrb	r1, [r2, #0]
 800df66:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df68:	2900      	cmp	r1, #0
 800df6a:	d014      	beq.n	800df96 <_svfprintf_r+0x772>
 800df6c:	603a      	str	r2, [r7, #0]
 800df6e:	2201      	movs	r2, #1
 800df70:	189b      	adds	r3, r3, r2
 800df72:	932e      	str	r3, [sp, #184]	; 0xb8
 800df74:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	189b      	adds	r3, r3, r2
 800df7a:	932d      	str	r3, [sp, #180]	; 0xb4
 800df7c:	3708      	adds	r7, #8
 800df7e:	2b07      	cmp	r3, #7
 800df80:	dd09      	ble.n	800df96 <_svfprintf_r+0x772>
 800df82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df84:	980a      	ldr	r0, [sp, #40]	; 0x28
 800df86:	aa2c      	add	r2, sp, #176	; 0xb0
 800df88:	f003 fcdc 	bl	8011944 <__ssprint_r>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d001      	beq.n	800df94 <_svfprintf_r+0x770>
 800df90:	f000 fe27 	bl	800ebe2 <_svfprintf_r+0x13be>
 800df94:	af2f      	add	r7, sp, #188	; 0xbc
 800df96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800df9a:	2a00      	cmp	r2, #0
 800df9c:	d015      	beq.n	800dfca <_svfprintf_r+0x7a6>
 800df9e:	aa25      	add	r2, sp, #148	; 0x94
 800dfa0:	603a      	str	r2, [r7, #0]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	189b      	adds	r3, r3, r2
 800dfa6:	932e      	str	r3, [sp, #184]	; 0xb8
 800dfa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	3301      	adds	r3, #1
 800dfae:	932d      	str	r3, [sp, #180]	; 0xb4
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	2b07      	cmp	r3, #7
 800dfb4:	dd09      	ble.n	800dfca <_svfprintf_r+0x7a6>
 800dfb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dfba:	aa2c      	add	r2, sp, #176	; 0xb0
 800dfbc:	f003 fcc2 	bl	8011944 <__ssprint_r>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d001      	beq.n	800dfc8 <_svfprintf_r+0x7a4>
 800dfc4:	f000 fe0d 	bl	800ebe2 <_svfprintf_r+0x13be>
 800dfc8:	af2f      	add	r7, sp, #188	; 0xbc
 800dfca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfcc:	2b80      	cmp	r3, #128	; 0x80
 800dfce:	d11f      	bne.n	800e010 <_svfprintf_r+0x7ec>
 800dfd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dfd2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dfd4:	1a9c      	subs	r4, r3, r2
 800dfd6:	2c00      	cmp	r4, #0
 800dfd8:	dd1a      	ble.n	800e010 <_svfprintf_r+0x7ec>
 800dfda:	0039      	movs	r1, r7
 800dfdc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dfde:	482d      	ldr	r0, [pc, #180]	; (800e094 <_svfprintf_r+0x870>)
 800dfe0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	3108      	adds	r1, #8
 800dfe6:	6038      	str	r0, [r7, #0]
 800dfe8:	2c10      	cmp	r4, #16
 800dfea:	dd00      	ble.n	800dfee <_svfprintf_r+0x7ca>
 800dfec:	e2d6      	b.n	800e59c <_svfprintf_r+0xd78>
 800dfee:	607c      	str	r4, [r7, #4]
 800dff0:	18a4      	adds	r4, r4, r2
 800dff2:	000f      	movs	r7, r1
 800dff4:	942e      	str	r4, [sp, #184]	; 0xb8
 800dff6:	932d      	str	r3, [sp, #180]	; 0xb4
 800dff8:	2b07      	cmp	r3, #7
 800dffa:	dd09      	ble.n	800e010 <_svfprintf_r+0x7ec>
 800dffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dffe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e000:	aa2c      	add	r2, sp, #176	; 0xb0
 800e002:	f003 fc9f 	bl	8011944 <__ssprint_r>
 800e006:	2800      	cmp	r0, #0
 800e008:	d001      	beq.n	800e00e <_svfprintf_r+0x7ea>
 800e00a:	f000 fdea 	bl	800ebe2 <_svfprintf_r+0x13be>
 800e00e:	af2f      	add	r7, sp, #188	; 0xbc
 800e010:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e014:	1a9c      	subs	r4, r3, r2
 800e016:	2c00      	cmp	r4, #0
 800e018:	dd1a      	ble.n	800e050 <_svfprintf_r+0x82c>
 800e01a:	0039      	movs	r1, r7
 800e01c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e01e:	481d      	ldr	r0, [pc, #116]	; (800e094 <_svfprintf_r+0x870>)
 800e020:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e022:	3301      	adds	r3, #1
 800e024:	3108      	adds	r1, #8
 800e026:	6038      	str	r0, [r7, #0]
 800e028:	2c10      	cmp	r4, #16
 800e02a:	dd00      	ble.n	800e02e <_svfprintf_r+0x80a>
 800e02c:	e2c9      	b.n	800e5c2 <_svfprintf_r+0xd9e>
 800e02e:	18a2      	adds	r2, r4, r2
 800e030:	607c      	str	r4, [r7, #4]
 800e032:	922e      	str	r2, [sp, #184]	; 0xb8
 800e034:	000f      	movs	r7, r1
 800e036:	932d      	str	r3, [sp, #180]	; 0xb4
 800e038:	2b07      	cmp	r3, #7
 800e03a:	dd09      	ble.n	800e050 <_svfprintf_r+0x82c>
 800e03c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e03e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e040:	aa2c      	add	r2, sp, #176	; 0xb0
 800e042:	f003 fc7f 	bl	8011944 <__ssprint_r>
 800e046:	2800      	cmp	r0, #0
 800e048:	d001      	beq.n	800e04e <_svfprintf_r+0x82a>
 800e04a:	f000 fdca 	bl	800ebe2 <_svfprintf_r+0x13be>
 800e04e:	af2f      	add	r7, sp, #188	; 0xbc
 800e050:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e052:	9319      	str	r3, [sp, #100]	; 0x64
 800e054:	05f3      	lsls	r3, r6, #23
 800e056:	d500      	bpl.n	800e05a <_svfprintf_r+0x836>
 800e058:	e2ce      	b.n	800e5f8 <_svfprintf_r+0xdd4>
 800e05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e05c:	9b08      	ldr	r3, [sp, #32]
 800e05e:	4694      	mov	ip, r2
 800e060:	603b      	str	r3, [r7, #0]
 800e062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e064:	607b      	str	r3, [r7, #4]
 800e066:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e068:	4463      	add	r3, ip
 800e06a:	932e      	str	r3, [sp, #184]	; 0xb8
 800e06c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e06e:	3301      	adds	r3, #1
 800e070:	932d      	str	r3, [sp, #180]	; 0xb4
 800e072:	2b07      	cmp	r3, #7
 800e074:	dd00      	ble.n	800e078 <_svfprintf_r+0x854>
 800e076:	e3a3      	b.n	800e7c0 <_svfprintf_r+0xf9c>
 800e078:	3708      	adds	r7, #8
 800e07a:	e301      	b.n	800e680 <_svfprintf_r+0xe5c>
 800e07c:	08014dfc 	.word	0x08014dfc
 800e080:	08014e0d 	.word	0x08014e0d
 800e084:	40300000 	.word	0x40300000
 800e088:	3fe00000 	.word	0x3fe00000
 800e08c:	fffffbff 	.word	0xfffffbff
 800e090:	08014e20 	.word	0x08014e20
 800e094:	08014e30 	.word	0x08014e30
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	930c      	str	r3, [sp, #48]	; 0x30
 800e09c:	e610      	b.n	800dcc0 <_svfprintf_r+0x49c>
 800e09e:	2306      	movs	r3, #6
 800e0a0:	e5fd      	b.n	800dc9e <_svfprintf_r+0x47a>
 800e0a2:	930e      	str	r3, [sp, #56]	; 0x38
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	e61a      	b.n	800dcde <_svfprintf_r+0x4ba>
 800e0a8:	7010      	strb	r0, [r2, #0]
 800e0aa:	e684      	b.n	800ddb6 <_svfprintf_r+0x592>
 800e0ac:	7018      	strb	r0, [r3, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	1aca      	subs	r2, r1, r3
 800e0b2:	d5fb      	bpl.n	800e0ac <_svfprintf_r+0x888>
 800e0b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	3201      	adds	r2, #1
 800e0ba:	db01      	blt.n	800e0c0 <_svfprintf_r+0x89c>
 800e0bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e0be:	3301      	adds	r3, #1
 800e0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0c2:	18d3      	adds	r3, r2, r3
 800e0c4:	9323      	str	r3, [sp, #140]	; 0x8c
 800e0c6:	e684      	b.n	800ddd2 <_svfprintf_r+0x5ae>
 800e0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0ca:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e0cc:	2030      	movs	r0, #48	; 0x30
 800e0ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0d0:	1851      	adds	r1, r2, r1
 800e0d2:	e7ed      	b.n	800e0b0 <_svfprintf_r+0x88c>
 800e0d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e0da:	2a46      	cmp	r2, #70	; 0x46
 800e0dc:	d006      	beq.n	800e0ec <_svfprintf_r+0x8c8>
 800e0de:	0014      	movs	r4, r2
 800e0e0:	3c45      	subs	r4, #69	; 0x45
 800e0e2:	4262      	negs	r2, r4
 800e0e4:	4154      	adcs	r4, r2
 800e0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	1914      	adds	r4, r2, r4
 800e0ec:	aa2a      	add	r2, sp, #168	; 0xa8
 800e0ee:	9204      	str	r2, [sp, #16]
 800e0f0:	aa27      	add	r2, sp, #156	; 0x9c
 800e0f2:	9203      	str	r2, [sp, #12]
 800e0f4:	aa26      	add	r2, sp, #152	; 0x98
 800e0f6:	9202      	str	r2, [sp, #8]
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	002a      	movs	r2, r5
 800e0fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e100:	9401      	str	r4, [sp, #4]
 800e102:	f002 fad7 	bl	80106b4 <_dtoa_r>
 800e106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e108:	9008      	str	r0, [sp, #32]
 800e10a:	2b47      	cmp	r3, #71	; 0x47
 800e10c:	d103      	bne.n	800e116 <_svfprintf_r+0x8f2>
 800e10e:	07f3      	lsls	r3, r6, #31
 800e110:	d401      	bmi.n	800e116 <_svfprintf_r+0x8f2>
 800e112:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e114:	e65e      	b.n	800ddd4 <_svfprintf_r+0x5b0>
 800e116:	9b08      	ldr	r3, [sp, #32]
 800e118:	191b      	adds	r3, r3, r4
 800e11a:	9311      	str	r3, [sp, #68]	; 0x44
 800e11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e11e:	2b46      	cmp	r3, #70	; 0x46
 800e120:	d112      	bne.n	800e148 <_svfprintf_r+0x924>
 800e122:	9b08      	ldr	r3, [sp, #32]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b30      	cmp	r3, #48	; 0x30
 800e128:	d10a      	bne.n	800e140 <_svfprintf_r+0x91c>
 800e12a:	2200      	movs	r2, #0
 800e12c:	2300      	movs	r3, #0
 800e12e:	0028      	movs	r0, r5
 800e130:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e132:	f7f2 f989 	bl	8000448 <__aeabi_dcmpeq>
 800e136:	2800      	cmp	r0, #0
 800e138:	d102      	bne.n	800e140 <_svfprintf_r+0x91c>
 800e13a:	2301      	movs	r3, #1
 800e13c:	1b1b      	subs	r3, r3, r4
 800e13e:	9326      	str	r3, [sp, #152]	; 0x98
 800e140:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e144:	18d3      	adds	r3, r2, r3
 800e146:	9311      	str	r3, [sp, #68]	; 0x44
 800e148:	2200      	movs	r2, #0
 800e14a:	2300      	movs	r3, #0
 800e14c:	0028      	movs	r0, r5
 800e14e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e150:	f7f2 f97a 	bl	8000448 <__aeabi_dcmpeq>
 800e154:	2800      	cmp	r0, #0
 800e156:	d001      	beq.n	800e15c <_svfprintf_r+0x938>
 800e158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e15a:	932a      	str	r3, [sp, #168]	; 0xa8
 800e15c:	2230      	movs	r2, #48	; 0x30
 800e15e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800e160:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e162:	4299      	cmp	r1, r3
 800e164:	d9d5      	bls.n	800e112 <_svfprintf_r+0x8ee>
 800e166:	1c59      	adds	r1, r3, #1
 800e168:	912a      	str	r1, [sp, #168]	; 0xa8
 800e16a:	701a      	strb	r2, [r3, #0]
 800e16c:	e7f7      	b.n	800e15e <_svfprintf_r+0x93a>
 800e16e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e170:	2b46      	cmp	r3, #70	; 0x46
 800e172:	d000      	beq.n	800e176 <_svfprintf_r+0x952>
 800e174:	e63f      	b.n	800ddf6 <_svfprintf_r+0x5d2>
 800e176:	2201      	movs	r2, #1
 800e178:	0033      	movs	r3, r6
 800e17a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e17c:	4013      	ands	r3, r2
 800e17e:	430b      	orrs	r3, r1
 800e180:	2d00      	cmp	r5, #0
 800e182:	dd2c      	ble.n	800e1de <_svfprintf_r+0x9ba>
 800e184:	2b00      	cmp	r3, #0
 800e186:	d046      	beq.n	800e216 <_svfprintf_r+0x9f2>
 800e188:	000a      	movs	r2, r1
 800e18a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e18c:	18eb      	adds	r3, r5, r3
 800e18e:	18d3      	adds	r3, r2, r3
 800e190:	9309      	str	r3, [sp, #36]	; 0x24
 800e192:	2366      	movs	r3, #102	; 0x66
 800e194:	930f      	str	r3, [sp, #60]	; 0x3c
 800e196:	e030      	b.n	800e1fa <_svfprintf_r+0x9d6>
 800e198:	781c      	ldrb	r4, [r3, #0]
 800e19a:	3301      	adds	r3, #1
 800e19c:	7014      	strb	r4, [r2, #0]
 800e19e:	3201      	adds	r2, #1
 800e1a0:	e668      	b.n	800de74 <_svfprintf_r+0x650>
 800e1a2:	222a      	movs	r2, #42	; 0x2a
 800e1a4:	ab1e      	add	r3, sp, #120	; 0x78
 800e1a6:	18d2      	adds	r2, r2, r3
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d104      	bne.n	800e1b6 <_svfprintf_r+0x992>
 800e1ac:	2330      	movs	r3, #48	; 0x30
 800e1ae:	222b      	movs	r2, #43	; 0x2b
 800e1b0:	708b      	strb	r3, [r1, #2]
 800e1b2:	ab1e      	add	r3, sp, #120	; 0x78
 800e1b4:	18d2      	adds	r2, r2, r3
 800e1b6:	3430      	adds	r4, #48	; 0x30
 800e1b8:	1c53      	adds	r3, r2, #1
 800e1ba:	7014      	strb	r4, [r2, #0]
 800e1bc:	e669      	b.n	800de92 <_svfprintf_r+0x66e>
 800e1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1c0:	42ab      	cmp	r3, r5
 800e1c2:	dd12      	ble.n	800e1ea <_svfprintf_r+0x9c6>
 800e1c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e1c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e1c8:	4694      	mov	ip, r2
 800e1ca:	4463      	add	r3, ip
 800e1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ce:	2367      	movs	r3, #103	; 0x67
 800e1d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1d2:	2d00      	cmp	r5, #0
 800e1d4:	dc11      	bgt.n	800e1fa <_svfprintf_r+0x9d6>
 800e1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d8:	1b5b      	subs	r3, r3, r5
 800e1da:	3301      	adds	r3, #1
 800e1dc:	e00c      	b.n	800e1f8 <_svfprintf_r+0x9d4>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d01b      	beq.n	800e21a <_svfprintf_r+0x9f6>
 800e1e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	e7d1      	b.n	800e18e <_svfprintf_r+0x96a>
 800e1ea:	2367      	movs	r3, #103	; 0x67
 800e1ec:	9509      	str	r5, [sp, #36]	; 0x24
 800e1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1f0:	07f3      	lsls	r3, r6, #31
 800e1f2:	d502      	bpl.n	800e1fa <_svfprintf_r+0x9d6>
 800e1f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e1f6:	18eb      	adds	r3, r5, r3
 800e1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fa:	2380      	movs	r3, #128	; 0x80
 800e1fc:	0032      	movs	r2, r6
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	401a      	ands	r2, r3
 800e202:	9211      	str	r2, [sp, #68]	; 0x44
 800e204:	2200      	movs	r2, #0
 800e206:	9210      	str	r2, [sp, #64]	; 0x40
 800e208:	421e      	tst	r6, r3
 800e20a:	d100      	bne.n	800e20e <_svfprintf_r+0x9ea>
 800e20c:	e65d      	b.n	800deca <_svfprintf_r+0x6a6>
 800e20e:	4295      	cmp	r5, r2
 800e210:	dc25      	bgt.n	800e25e <_svfprintf_r+0xa3a>
 800e212:	9211      	str	r2, [sp, #68]	; 0x44
 800e214:	e659      	b.n	800deca <_svfprintf_r+0x6a6>
 800e216:	9509      	str	r5, [sp, #36]	; 0x24
 800e218:	e7bb      	b.n	800e192 <_svfprintf_r+0x96e>
 800e21a:	2366      	movs	r3, #102	; 0x66
 800e21c:	9209      	str	r2, [sp, #36]	; 0x24
 800e21e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e220:	e7eb      	b.n	800e1fa <_svfprintf_r+0x9d6>
 800e222:	42ab      	cmp	r3, r5
 800e224:	da0e      	bge.n	800e244 <_svfprintf_r+0xa20>
 800e226:	1aed      	subs	r5, r5, r3
 800e228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e22a:	785b      	ldrb	r3, [r3, #1]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d012      	beq.n	800e256 <_svfprintf_r+0xa32>
 800e230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e232:	3301      	adds	r3, #1
 800e234:	9311      	str	r3, [sp, #68]	; 0x44
 800e236:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e238:	3301      	adds	r3, #1
 800e23a:	9312      	str	r3, [sp, #72]	; 0x48
 800e23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2bff      	cmp	r3, #255	; 0xff
 800e242:	d1ee      	bne.n	800e222 <_svfprintf_r+0x9fe>
 800e244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e248:	189b      	adds	r3, r3, r2
 800e24a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e24c:	4353      	muls	r3, r2
 800e24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e250:	189b      	adds	r3, r3, r2
 800e252:	9309      	str	r3, [sp, #36]	; 0x24
 800e254:	e639      	b.n	800deca <_svfprintf_r+0x6a6>
 800e256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e258:	3301      	adds	r3, #1
 800e25a:	9310      	str	r3, [sp, #64]	; 0x40
 800e25c:	e7ee      	b.n	800e23c <_svfprintf_r+0xa18>
 800e25e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e260:	9311      	str	r3, [sp, #68]	; 0x44
 800e262:	e7eb      	b.n	800e23c <_svfprintf_r+0xa18>
 800e264:	1d23      	adds	r3, r4, #4
 800e266:	930d      	str	r3, [sp, #52]	; 0x34
 800e268:	06b3      	lsls	r3, r6, #26
 800e26a:	d509      	bpl.n	800e280 <_svfprintf_r+0xa5c>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	17d2      	asrs	r2, r2, #31
 800e274:	605a      	str	r2, [r3, #4]
 800e276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e278:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e27a:	9308      	str	r3, [sp, #32]
 800e27c:	f7ff fb0d 	bl	800d89a <_svfprintf_r+0x76>
 800e280:	06f3      	lsls	r3, r6, #27
 800e282:	d503      	bpl.n	800e28c <_svfprintf_r+0xa68>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e288:	601a      	str	r2, [r3, #0]
 800e28a:	e7f4      	b.n	800e276 <_svfprintf_r+0xa52>
 800e28c:	0673      	lsls	r3, r6, #25
 800e28e:	d503      	bpl.n	800e298 <_svfprintf_r+0xa74>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e294:	801a      	strh	r2, [r3, #0]
 800e296:	e7ee      	b.n	800e276 <_svfprintf_r+0xa52>
 800e298:	05b6      	lsls	r6, r6, #22
 800e29a:	d5f3      	bpl.n	800e284 <_svfprintf_r+0xa60>
 800e29c:	6823      	ldr	r3, [r4, #0]
 800e29e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e2a0:	701a      	strb	r2, [r3, #0]
 800e2a2:	e7e8      	b.n	800e276 <_svfprintf_r+0xa52>
 800e2a4:	2310      	movs	r3, #16
 800e2a6:	431e      	orrs	r6, r3
 800e2a8:	2320      	movs	r3, #32
 800e2aa:	0030      	movs	r0, r6
 800e2ac:	4018      	ands	r0, r3
 800e2ae:	421e      	tst	r6, r3
 800e2b0:	d00f      	beq.n	800e2d2 <_svfprintf_r+0xaae>
 800e2b2:	3b19      	subs	r3, #25
 800e2b4:	3407      	adds	r4, #7
 800e2b6:	439c      	bics	r4, r3
 800e2b8:	0022      	movs	r2, r4
 800e2ba:	ca18      	ldmia	r2!, {r3, r4}
 800e2bc:	9306      	str	r3, [sp, #24]
 800e2be:	9407      	str	r4, [sp, #28]
 800e2c0:	920d      	str	r2, [sp, #52]	; 0x34
 800e2c2:	4bc9      	ldr	r3, [pc, #804]	; (800e5e8 <_svfprintf_r+0xdc4>)
 800e2c4:	401e      	ands	r6, r3
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	221b      	movs	r2, #27
 800e2ca:	a91e      	add	r1, sp, #120	; 0x78
 800e2cc:	1852      	adds	r2, r2, r1
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	e430      	b.n	800db34 <_svfprintf_r+0x310>
 800e2d2:	0022      	movs	r2, r4
 800e2d4:	ca08      	ldmia	r2!, {r3}
 800e2d6:	0031      	movs	r1, r6
 800e2d8:	920d      	str	r2, [sp, #52]	; 0x34
 800e2da:	2210      	movs	r2, #16
 800e2dc:	4011      	ands	r1, r2
 800e2de:	4216      	tst	r6, r2
 800e2e0:	d002      	beq.n	800e2e8 <_svfprintf_r+0xac4>
 800e2e2:	9306      	str	r3, [sp, #24]
 800e2e4:	9007      	str	r0, [sp, #28]
 800e2e6:	e7ec      	b.n	800e2c2 <_svfprintf_r+0xa9e>
 800e2e8:	2240      	movs	r2, #64	; 0x40
 800e2ea:	0030      	movs	r0, r6
 800e2ec:	4010      	ands	r0, r2
 800e2ee:	4216      	tst	r6, r2
 800e2f0:	d003      	beq.n	800e2fa <_svfprintf_r+0xad6>
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	9306      	str	r3, [sp, #24]
 800e2f6:	9107      	str	r1, [sp, #28]
 800e2f8:	e7e3      	b.n	800e2c2 <_svfprintf_r+0xa9e>
 800e2fa:	2280      	movs	r2, #128	; 0x80
 800e2fc:	0031      	movs	r1, r6
 800e2fe:	0092      	lsls	r2, r2, #2
 800e300:	4011      	ands	r1, r2
 800e302:	4216      	tst	r6, r2
 800e304:	d0f6      	beq.n	800e2f4 <_svfprintf_r+0xad0>
 800e306:	b2db      	uxtb	r3, r3
 800e308:	e7eb      	b.n	800e2e2 <_svfprintf_r+0xabe>
 800e30a:	0023      	movs	r3, r4
 800e30c:	cb04      	ldmia	r3!, {r2}
 800e30e:	49b7      	ldr	r1, [pc, #732]	; (800e5ec <_svfprintf_r+0xdc8>)
 800e310:	9206      	str	r2, [sp, #24]
 800e312:	aa25      	add	r2, sp, #148	; 0x94
 800e314:	8011      	strh	r1, [r2, #0]
 800e316:	4ab6      	ldr	r2, [pc, #728]	; (800e5f0 <_svfprintf_r+0xdcc>)
 800e318:	930d      	str	r3, [sp, #52]	; 0x34
 800e31a:	2300      	movs	r3, #0
 800e31c:	921f      	str	r2, [sp, #124]	; 0x7c
 800e31e:	2278      	movs	r2, #120	; 0x78
 800e320:	9307      	str	r3, [sp, #28]
 800e322:	3302      	adds	r3, #2
 800e324:	431e      	orrs	r6, r3
 800e326:	920f      	str	r2, [sp, #60]	; 0x3c
 800e328:	e7ce      	b.n	800e2c8 <_svfprintf_r+0xaa4>
 800e32a:	0023      	movs	r3, r4
 800e32c:	cb04      	ldmia	r3!, {r2}
 800e32e:	2400      	movs	r4, #0
 800e330:	930d      	str	r3, [sp, #52]	; 0x34
 800e332:	231b      	movs	r3, #27
 800e334:	9208      	str	r2, [sp, #32]
 800e336:	aa1e      	add	r2, sp, #120	; 0x78
 800e338:	189b      	adds	r3, r3, r2
 800e33a:	701c      	strb	r4, [r3, #0]
 800e33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e33e:	3301      	adds	r3, #1
 800e340:	d00e      	beq.n	800e360 <_svfprintf_r+0xb3c>
 800e342:	0021      	movs	r1, r4
 800e344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e346:	9808      	ldr	r0, [sp, #32]
 800e348:	f002 f83a 	bl	80103c0 <memchr>
 800e34c:	900c      	str	r0, [sp, #48]	; 0x30
 800e34e:	42a0      	cmp	r0, r4
 800e350:	d100      	bne.n	800e354 <_svfprintf_r+0xb30>
 800e352:	e10d      	b.n	800e570 <_svfprintf_r+0xd4c>
 800e354:	9a08      	ldr	r2, [sp, #32]
 800e356:	1a83      	subs	r3, r0, r2
 800e358:	9309      	str	r3, [sp, #36]	; 0x24
 800e35a:	0023      	movs	r3, r4
 800e35c:	940c      	str	r4, [sp, #48]	; 0x30
 800e35e:	e44e      	b.n	800dbfe <_svfprintf_r+0x3da>
 800e360:	9808      	ldr	r0, [sp, #32]
 800e362:	f7f1 fecf 	bl	8000104 <strlen>
 800e366:	9009      	str	r0, [sp, #36]	; 0x24
 800e368:	e7f7      	b.n	800e35a <_svfprintf_r+0xb36>
 800e36a:	2310      	movs	r3, #16
 800e36c:	431e      	orrs	r6, r3
 800e36e:	2320      	movs	r3, #32
 800e370:	0030      	movs	r0, r6
 800e372:	4018      	ands	r0, r3
 800e374:	421e      	tst	r6, r3
 800e376:	d009      	beq.n	800e38c <_svfprintf_r+0xb68>
 800e378:	3b19      	subs	r3, #25
 800e37a:	3407      	adds	r4, #7
 800e37c:	439c      	bics	r4, r3
 800e37e:	0022      	movs	r2, r4
 800e380:	ca18      	ldmia	r2!, {r3, r4}
 800e382:	9306      	str	r3, [sp, #24]
 800e384:	9407      	str	r4, [sp, #28]
 800e386:	920d      	str	r2, [sp, #52]	; 0x34
 800e388:	2301      	movs	r3, #1
 800e38a:	e79d      	b.n	800e2c8 <_svfprintf_r+0xaa4>
 800e38c:	0023      	movs	r3, r4
 800e38e:	cb04      	ldmia	r3!, {r2}
 800e390:	0031      	movs	r1, r6
 800e392:	930d      	str	r3, [sp, #52]	; 0x34
 800e394:	2310      	movs	r3, #16
 800e396:	4019      	ands	r1, r3
 800e398:	421e      	tst	r6, r3
 800e39a:	d003      	beq.n	800e3a4 <_svfprintf_r+0xb80>
 800e39c:	9206      	str	r2, [sp, #24]
 800e39e:	9007      	str	r0, [sp, #28]
 800e3a0:	3b0f      	subs	r3, #15
 800e3a2:	e791      	b.n	800e2c8 <_svfprintf_r+0xaa4>
 800e3a4:	2340      	movs	r3, #64	; 0x40
 800e3a6:	0030      	movs	r0, r6
 800e3a8:	4018      	ands	r0, r3
 800e3aa:	421e      	tst	r6, r3
 800e3ac:	d003      	beq.n	800e3b6 <_svfprintf_r+0xb92>
 800e3ae:	b293      	uxth	r3, r2
 800e3b0:	9306      	str	r3, [sp, #24]
 800e3b2:	9107      	str	r1, [sp, #28]
 800e3b4:	e7e8      	b.n	800e388 <_svfprintf_r+0xb64>
 800e3b6:	2380      	movs	r3, #128	; 0x80
 800e3b8:	0031      	movs	r1, r6
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4019      	ands	r1, r3
 800e3be:	421e      	tst	r6, r3
 800e3c0:	d003      	beq.n	800e3ca <_svfprintf_r+0xba6>
 800e3c2:	b2d3      	uxtb	r3, r2
 800e3c4:	9306      	str	r3, [sp, #24]
 800e3c6:	9007      	str	r0, [sp, #28]
 800e3c8:	e7de      	b.n	800e388 <_svfprintf_r+0xb64>
 800e3ca:	9206      	str	r2, [sp, #24]
 800e3cc:	e7f1      	b.n	800e3b2 <_svfprintf_r+0xb8e>
 800e3ce:	4b89      	ldr	r3, [pc, #548]	; (800e5f4 <_svfprintf_r+0xdd0>)
 800e3d0:	0030      	movs	r0, r6
 800e3d2:	931f      	str	r3, [sp, #124]	; 0x7c
 800e3d4:	2320      	movs	r3, #32
 800e3d6:	4018      	ands	r0, r3
 800e3d8:	421e      	tst	r6, r3
 800e3da:	d01a      	beq.n	800e412 <_svfprintf_r+0xbee>
 800e3dc:	3b19      	subs	r3, #25
 800e3de:	3407      	adds	r4, #7
 800e3e0:	439c      	bics	r4, r3
 800e3e2:	0022      	movs	r2, r4
 800e3e4:	ca18      	ldmia	r2!, {r3, r4}
 800e3e6:	9306      	str	r3, [sp, #24]
 800e3e8:	9407      	str	r4, [sp, #28]
 800e3ea:	920d      	str	r2, [sp, #52]	; 0x34
 800e3ec:	07f3      	lsls	r3, r6, #31
 800e3ee:	d50a      	bpl.n	800e406 <_svfprintf_r+0xbe2>
 800e3f0:	9b06      	ldr	r3, [sp, #24]
 800e3f2:	9a07      	ldr	r2, [sp, #28]
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	d006      	beq.n	800e406 <_svfprintf_r+0xbe2>
 800e3f8:	2230      	movs	r2, #48	; 0x30
 800e3fa:	ab25      	add	r3, sp, #148	; 0x94
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e400:	705a      	strb	r2, [r3, #1]
 800e402:	2302      	movs	r3, #2
 800e404:	431e      	orrs	r6, r3
 800e406:	4b78      	ldr	r3, [pc, #480]	; (800e5e8 <_svfprintf_r+0xdc4>)
 800e408:	401e      	ands	r6, r3
 800e40a:	2302      	movs	r3, #2
 800e40c:	e75c      	b.n	800e2c8 <_svfprintf_r+0xaa4>
 800e40e:	4b78      	ldr	r3, [pc, #480]	; (800e5f0 <_svfprintf_r+0xdcc>)
 800e410:	e7de      	b.n	800e3d0 <_svfprintf_r+0xbac>
 800e412:	0023      	movs	r3, r4
 800e414:	cb04      	ldmia	r3!, {r2}
 800e416:	0031      	movs	r1, r6
 800e418:	930d      	str	r3, [sp, #52]	; 0x34
 800e41a:	2310      	movs	r3, #16
 800e41c:	4019      	ands	r1, r3
 800e41e:	421e      	tst	r6, r3
 800e420:	d002      	beq.n	800e428 <_svfprintf_r+0xc04>
 800e422:	9206      	str	r2, [sp, #24]
 800e424:	9007      	str	r0, [sp, #28]
 800e426:	e7e1      	b.n	800e3ec <_svfprintf_r+0xbc8>
 800e428:	2340      	movs	r3, #64	; 0x40
 800e42a:	0030      	movs	r0, r6
 800e42c:	4018      	ands	r0, r3
 800e42e:	421e      	tst	r6, r3
 800e430:	d003      	beq.n	800e43a <_svfprintf_r+0xc16>
 800e432:	b293      	uxth	r3, r2
 800e434:	9306      	str	r3, [sp, #24]
 800e436:	9107      	str	r1, [sp, #28]
 800e438:	e7d8      	b.n	800e3ec <_svfprintf_r+0xbc8>
 800e43a:	2380      	movs	r3, #128	; 0x80
 800e43c:	0031      	movs	r1, r6
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4019      	ands	r1, r3
 800e442:	421e      	tst	r6, r3
 800e444:	d002      	beq.n	800e44c <_svfprintf_r+0xc28>
 800e446:	b2d3      	uxtb	r3, r2
 800e448:	9306      	str	r3, [sp, #24]
 800e44a:	e7eb      	b.n	800e424 <_svfprintf_r+0xc00>
 800e44c:	9206      	str	r2, [sp, #24]
 800e44e:	e7f2      	b.n	800e436 <_svfprintf_r+0xc12>
 800e450:	9b07      	ldr	r3, [sp, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <_svfprintf_r+0xc48>
 800e456:	9b06      	ldr	r3, [sp, #24]
 800e458:	2b09      	cmp	r3, #9
 800e45a:	d807      	bhi.n	800e46c <_svfprintf_r+0xc48>
 800e45c:	23e7      	movs	r3, #231	; 0xe7
 800e45e:	aa1e      	add	r2, sp, #120	; 0x78
 800e460:	189b      	adds	r3, r3, r2
 800e462:	9a06      	ldr	r2, [sp, #24]
 800e464:	3230      	adds	r2, #48	; 0x30
 800e466:	701a      	strb	r2, [r3, #0]
 800e468:	f000 fc18 	bl	800ec9c <_svfprintf_r+0x1478>
 800e46c:	2680      	movs	r6, #128	; 0x80
 800e46e:	2300      	movs	r3, #0
 800e470:	00f6      	lsls	r6, r6, #3
 800e472:	930e      	str	r3, [sp, #56]	; 0x38
 800e474:	ad58      	add	r5, sp, #352	; 0x160
 800e476:	4026      	ands	r6, r4
 800e478:	220a      	movs	r2, #10
 800e47a:	9806      	ldr	r0, [sp, #24]
 800e47c:	9907      	ldr	r1, [sp, #28]
 800e47e:	2300      	movs	r3, #0
 800e480:	f7f2 f810 	bl	80004a4 <__aeabi_uldivmod>
 800e484:	1e6b      	subs	r3, r5, #1
 800e486:	3230      	adds	r2, #48	; 0x30
 800e488:	9308      	str	r3, [sp, #32]
 800e48a:	701a      	strb	r2, [r3, #0]
 800e48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e48e:	900c      	str	r0, [sp, #48]	; 0x30
 800e490:	3301      	adds	r3, #1
 800e492:	9110      	str	r1, [sp, #64]	; 0x40
 800e494:	930e      	str	r3, [sp, #56]	; 0x38
 800e496:	2e00      	cmp	r6, #0
 800e498:	d01d      	beq.n	800e4d6 <_svfprintf_r+0xcb2>
 800e49a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d118      	bne.n	800e4d6 <_svfprintf_r+0xcb2>
 800e4a4:	2aff      	cmp	r2, #255	; 0xff
 800e4a6:	d016      	beq.n	800e4d6 <_svfprintf_r+0xcb2>
 800e4a8:	9b07      	ldr	r3, [sp, #28]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <_svfprintf_r+0xc90>
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	2b09      	cmp	r3, #9
 800e4b2:	d910      	bls.n	800e4d6 <_svfprintf_r+0xcb2>
 800e4b4:	9b08      	ldr	r3, [sp, #32]
 800e4b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e4b8:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e4ba:	1a9b      	subs	r3, r3, r2
 800e4bc:	0018      	movs	r0, r3
 800e4be:	9308      	str	r3, [sp, #32]
 800e4c0:	f7fd ff97 	bl	800c3f2 <strncpy>
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4c8:	920e      	str	r2, [sp, #56]	; 0x38
 800e4ca:	785b      	ldrb	r3, [r3, #1]
 800e4cc:	1e5a      	subs	r2, r3, #1
 800e4ce:	4193      	sbcs	r3, r2
 800e4d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e4d2:	18d3      	adds	r3, r2, r3
 800e4d4:	9312      	str	r3, [sp, #72]	; 0x48
 800e4d6:	9b07      	ldr	r3, [sp, #28]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10f      	bne.n	800e4fc <_svfprintf_r+0xcd8>
 800e4dc:	9b06      	ldr	r3, [sp, #24]
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d80c      	bhi.n	800e4fc <_svfprintf_r+0xcd8>
 800e4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4e4:	9a08      	ldr	r2, [sp, #32]
 800e4e6:	9319      	str	r3, [sp, #100]	; 0x64
 800e4e8:	ab58      	add	r3, sp, #352	; 0x160
 800e4ea:	1a9b      	subs	r3, r3, r2
 800e4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	0026      	movs	r6, r4
 800e4f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e4f4:	001d      	movs	r5, r3
 800e4f6:	9310      	str	r3, [sp, #64]	; 0x40
 800e4f8:	9311      	str	r3, [sp, #68]	; 0x44
 800e4fa:	e4f2      	b.n	800dee2 <_svfprintf_r+0x6be>
 800e4fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e4fe:	9d08      	ldr	r5, [sp, #32]
 800e500:	9306      	str	r3, [sp, #24]
 800e502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e504:	9307      	str	r3, [sp, #28]
 800e506:	e7b7      	b.n	800e478 <_svfprintf_r+0xc54>
 800e508:	200f      	movs	r0, #15
 800e50a:	ab58      	add	r3, sp, #352	; 0x160
 800e50c:	9308      	str	r3, [sp, #32]
 800e50e:	9b08      	ldr	r3, [sp, #32]
 800e510:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e512:	3b01      	subs	r3, #1
 800e514:	9308      	str	r3, [sp, #32]
 800e516:	9b06      	ldr	r3, [sp, #24]
 800e518:	4003      	ands	r3, r0
 800e51a:	5cd3      	ldrb	r3, [r2, r3]
 800e51c:	9a08      	ldr	r2, [sp, #32]
 800e51e:	7013      	strb	r3, [r2, #0]
 800e520:	9b07      	ldr	r3, [sp, #28]
 800e522:	0719      	lsls	r1, r3, #28
 800e524:	9b06      	ldr	r3, [sp, #24]
 800e526:	091a      	lsrs	r2, r3, #4
 800e528:	9b07      	ldr	r3, [sp, #28]
 800e52a:	4311      	orrs	r1, r2
 800e52c:	091b      	lsrs	r3, r3, #4
 800e52e:	9307      	str	r3, [sp, #28]
 800e530:	000b      	movs	r3, r1
 800e532:	9a07      	ldr	r2, [sp, #28]
 800e534:	9106      	str	r1, [sp, #24]
 800e536:	4313      	orrs	r3, r2
 800e538:	d1e9      	bne.n	800e50e <_svfprintf_r+0xcea>
 800e53a:	e7d2      	b.n	800e4e2 <_svfprintf_r+0xcbe>
 800e53c:	aa58      	add	r2, sp, #352	; 0x160
 800e53e:	9208      	str	r2, [sp, #32]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1ce      	bne.n	800e4e2 <_svfprintf_r+0xcbe>
 800e544:	07f6      	lsls	r6, r6, #31
 800e546:	d5cc      	bpl.n	800e4e2 <_svfprintf_r+0xcbe>
 800e548:	aa1e      	add	r2, sp, #120	; 0x78
 800e54a:	33e7      	adds	r3, #231	; 0xe7
 800e54c:	189b      	adds	r3, r3, r2
 800e54e:	2230      	movs	r2, #48	; 0x30
 800e550:	e789      	b.n	800e466 <_svfprintf_r+0xc42>
 800e552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d100      	bne.n	800e55a <_svfprintf_r+0xd36>
 800e558:	e364      	b.n	800ec24 <_svfprintf_r+0x1400>
 800e55a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e55c:	211b      	movs	r1, #27
 800e55e:	ab3f      	add	r3, sp, #252	; 0xfc
 800e560:	701a      	strb	r2, [r3, #0]
 800e562:	2200      	movs	r2, #0
 800e564:	a81e      	add	r0, sp, #120	; 0x78
 800e566:	1809      	adds	r1, r1, r0
 800e568:	700a      	strb	r2, [r1, #0]
 800e56a:	940d      	str	r4, [sp, #52]	; 0x34
 800e56c:	f7ff fabd 	bl	800daea <_svfprintf_r+0x2c6>
 800e570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e572:	f7ff fb44 	bl	800dbfe <_svfprintf_r+0x3da>
 800e576:	2010      	movs	r0, #16
 800e578:	1812      	adds	r2, r2, r0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e57e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e580:	2b07      	cmp	r3, #7
 800e582:	dd08      	ble.n	800e596 <_svfprintf_r+0xd72>
 800e584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e586:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e588:	aa2c      	add	r2, sp, #176	; 0xb0
 800e58a:	f003 f9db 	bl	8011944 <__ssprint_r>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d000      	beq.n	800e594 <_svfprintf_r+0xd70>
 800e592:	e326      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e594:	a92f      	add	r1, sp, #188	; 0xbc
 800e596:	000f      	movs	r7, r1
 800e598:	3c10      	subs	r4, #16
 800e59a:	e4c5      	b.n	800df28 <_svfprintf_r+0x704>
 800e59c:	2010      	movs	r0, #16
 800e59e:	1812      	adds	r2, r2, r0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5a4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5a6:	2b07      	cmp	r3, #7
 800e5a8:	dd08      	ble.n	800e5bc <_svfprintf_r+0xd98>
 800e5aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5b0:	f003 f9c8 	bl	8011944 <__ssprint_r>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d000      	beq.n	800e5ba <_svfprintf_r+0xd96>
 800e5b8:	e313      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e5ba:	a92f      	add	r1, sp, #188	; 0xbc
 800e5bc:	000f      	movs	r7, r1
 800e5be:	3c10      	subs	r4, #16
 800e5c0:	e50b      	b.n	800dfda <_svfprintf_r+0x7b6>
 800e5c2:	2010      	movs	r0, #16
 800e5c4:	1812      	adds	r2, r2, r0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	922e      	str	r2, [sp, #184]	; 0xb8
 800e5ca:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5cc:	2b07      	cmp	r3, #7
 800e5ce:	dd08      	ble.n	800e5e2 <_svfprintf_r+0xdbe>
 800e5d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5d6:	f003 f9b5 	bl	8011944 <__ssprint_r>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d000      	beq.n	800e5e0 <_svfprintf_r+0xdbc>
 800e5de:	e300      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e5e0:	a92f      	add	r1, sp, #188	; 0xbc
 800e5e2:	000f      	movs	r7, r1
 800e5e4:	3c10      	subs	r4, #16
 800e5e6:	e518      	b.n	800e01a <_svfprintf_r+0x7f6>
 800e5e8:	fffffbff 	.word	0xfffffbff
 800e5ec:	00007830 	.word	0x00007830
 800e5f0:	08014dfc 	.word	0x08014dfc
 800e5f4:	08014e0d 	.word	0x08014e0d
 800e5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5fa:	2b65      	cmp	r3, #101	; 0x65
 800e5fc:	dc00      	bgt.n	800e600 <_svfprintf_r+0xddc>
 800e5fe:	e241      	b.n	800ea84 <_svfprintf_r+0x1260>
 800e600:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e602:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e604:	2200      	movs	r2, #0
 800e606:	2300      	movs	r3, #0
 800e608:	f7f1 ff1e 	bl	8000448 <__aeabi_dcmpeq>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	d077      	beq.n	800e700 <_svfprintf_r+0xedc>
 800e610:	4bca      	ldr	r3, [pc, #808]	; (800e93c <_svfprintf_r+0x1118>)
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	2301      	movs	r3, #1
 800e616:	607b      	str	r3, [r7, #4]
 800e618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e61a:	3708      	adds	r7, #8
 800e61c:	3301      	adds	r3, #1
 800e61e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e622:	3301      	adds	r3, #1
 800e624:	932d      	str	r3, [sp, #180]	; 0xb4
 800e626:	2b07      	cmp	r3, #7
 800e628:	dd08      	ble.n	800e63c <_svfprintf_r+0xe18>
 800e62a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e62c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e62e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e630:	f003 f988 	bl	8011944 <__ssprint_r>
 800e634:	2800      	cmp	r0, #0
 800e636:	d000      	beq.n	800e63a <_svfprintf_r+0xe16>
 800e638:	e2d3      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e63a:	af2f      	add	r7, sp, #188	; 0xbc
 800e63c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e63e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e640:	4293      	cmp	r3, r2
 800e642:	db01      	blt.n	800e648 <_svfprintf_r+0xe24>
 800e644:	07f3      	lsls	r3, r6, #31
 800e646:	d51b      	bpl.n	800e680 <_svfprintf_r+0xe5c>
 800e648:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e64a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e64c:	603b      	str	r3, [r7, #0]
 800e64e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e650:	607b      	str	r3, [r7, #4]
 800e652:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e654:	3708      	adds	r7, #8
 800e656:	189b      	adds	r3, r3, r2
 800e658:	932e      	str	r3, [sp, #184]	; 0xb8
 800e65a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e65c:	3301      	adds	r3, #1
 800e65e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e660:	2b07      	cmp	r3, #7
 800e662:	dd08      	ble.n	800e676 <_svfprintf_r+0xe52>
 800e664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e666:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e668:	aa2c      	add	r2, sp, #176	; 0xb0
 800e66a:	f003 f96b 	bl	8011944 <__ssprint_r>
 800e66e:	2800      	cmp	r0, #0
 800e670:	d000      	beq.n	800e674 <_svfprintf_r+0xe50>
 800e672:	e2b6      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e674:	af2f      	add	r7, sp, #188	; 0xbc
 800e676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e678:	2510      	movs	r5, #16
 800e67a:	1e5c      	subs	r4, r3, #1
 800e67c:	2c00      	cmp	r4, #0
 800e67e:	dc2e      	bgt.n	800e6de <_svfprintf_r+0xeba>
 800e680:	0776      	lsls	r6, r6, #29
 800e682:	d500      	bpl.n	800e686 <_svfprintf_r+0xe62>
 800e684:	e290      	b.n	800eba8 <_svfprintf_r+0x1384>
 800e686:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e688:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e68a:	4293      	cmp	r3, r2
 800e68c:	da00      	bge.n	800e690 <_svfprintf_r+0xe6c>
 800e68e:	0013      	movs	r3, r2
 800e690:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e692:	18d3      	adds	r3, r2, r3
 800e694:	9317      	str	r3, [sp, #92]	; 0x5c
 800e696:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d007      	beq.n	800e6ac <_svfprintf_r+0xe88>
 800e69c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e69e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6a0:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6a2:	f003 f94f 	bl	8011944 <__ssprint_r>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d000      	beq.n	800e6ac <_svfprintf_r+0xe88>
 800e6aa:	e29a      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d000      	beq.n	800e6b8 <_svfprintf_r+0xe94>
 800e6b6:	e2b0      	b.n	800ec1a <_svfprintf_r+0x13f6>
 800e6b8:	af2f      	add	r7, sp, #188	; 0xbc
 800e6ba:	e5dc      	b.n	800e276 <_svfprintf_r+0xa52>
 800e6bc:	3210      	adds	r2, #16
 800e6be:	607d      	str	r5, [r7, #4]
 800e6c0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6c2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6c4:	2b07      	cmp	r3, #7
 800e6c6:	dd08      	ble.n	800e6da <_svfprintf_r+0xeb6>
 800e6c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6cc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6ce:	f003 f939 	bl	8011944 <__ssprint_r>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d000      	beq.n	800e6d8 <_svfprintf_r+0xeb4>
 800e6d6:	e284      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e6d8:	a92f      	add	r1, sp, #188	; 0xbc
 800e6da:	000f      	movs	r7, r1
 800e6dc:	3c10      	subs	r4, #16
 800e6de:	0039      	movs	r1, r7
 800e6e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e6e2:	4897      	ldr	r0, [pc, #604]	; (800e940 <_svfprintf_r+0x111c>)
 800e6e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	3108      	adds	r1, #8
 800e6ea:	6038      	str	r0, [r7, #0]
 800e6ec:	2c10      	cmp	r4, #16
 800e6ee:	dce5      	bgt.n	800e6bc <_svfprintf_r+0xe98>
 800e6f0:	607c      	str	r4, [r7, #4]
 800e6f2:	18a4      	adds	r4, r4, r2
 800e6f4:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6f6:	000f      	movs	r7, r1
 800e6f8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6fa:	2b07      	cmp	r3, #7
 800e6fc:	ddc0      	ble.n	800e680 <_svfprintf_r+0xe5c>
 800e6fe:	e05f      	b.n	800e7c0 <_svfprintf_r+0xf9c>
 800e700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e702:	2b00      	cmp	r3, #0
 800e704:	dc78      	bgt.n	800e7f8 <_svfprintf_r+0xfd4>
 800e706:	4b8d      	ldr	r3, [pc, #564]	; (800e93c <_svfprintf_r+0x1118>)
 800e708:	603b      	str	r3, [r7, #0]
 800e70a:	2301      	movs	r3, #1
 800e70c:	607b      	str	r3, [r7, #4]
 800e70e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e710:	3708      	adds	r7, #8
 800e712:	3301      	adds	r3, #1
 800e714:	932e      	str	r3, [sp, #184]	; 0xb8
 800e716:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e718:	3301      	adds	r3, #1
 800e71a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e71c:	2b07      	cmp	r3, #7
 800e71e:	dd08      	ble.n	800e732 <_svfprintf_r+0xf0e>
 800e720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e722:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e724:	aa2c      	add	r2, sp, #176	; 0xb0
 800e726:	f003 f90d 	bl	8011944 <__ssprint_r>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d000      	beq.n	800e730 <_svfprintf_r+0xf0c>
 800e72e:	e258      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e730:	af2f      	add	r7, sp, #188	; 0xbc
 800e732:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e734:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e736:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e738:	430b      	orrs	r3, r1
 800e73a:	2101      	movs	r1, #1
 800e73c:	4031      	ands	r1, r6
 800e73e:	430b      	orrs	r3, r1
 800e740:	d09e      	beq.n	800e680 <_svfprintf_r+0xe5c>
 800e742:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e744:	603b      	str	r3, [r7, #0]
 800e746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e748:	607b      	str	r3, [r7, #4]
 800e74a:	189a      	adds	r2, r3, r2
 800e74c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e74e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e750:	3301      	adds	r3, #1
 800e752:	932d      	str	r3, [sp, #180]	; 0xb4
 800e754:	3708      	adds	r7, #8
 800e756:	2b07      	cmp	r3, #7
 800e758:	dd08      	ble.n	800e76c <_svfprintf_r+0xf48>
 800e75a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e75c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e75e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e760:	f003 f8f0 	bl	8011944 <__ssprint_r>
 800e764:	2800      	cmp	r0, #0
 800e766:	d000      	beq.n	800e76a <_svfprintf_r+0xf46>
 800e768:	e23b      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e76a:	af2f      	add	r7, sp, #188	; 0xbc
 800e76c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e76e:	2c00      	cmp	r4, #0
 800e770:	da19      	bge.n	800e7a6 <_svfprintf_r+0xf82>
 800e772:	0038      	movs	r0, r7
 800e774:	2510      	movs	r5, #16
 800e776:	4264      	negs	r4, r4
 800e778:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e77a:	4a71      	ldr	r2, [pc, #452]	; (800e940 <_svfprintf_r+0x111c>)
 800e77c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e77e:	3101      	adds	r1, #1
 800e780:	3708      	adds	r7, #8
 800e782:	6002      	str	r2, [r0, #0]
 800e784:	2c10      	cmp	r4, #16
 800e786:	dc25      	bgt.n	800e7d4 <_svfprintf_r+0xfb0>
 800e788:	6044      	str	r4, [r0, #4]
 800e78a:	18e4      	adds	r4, r4, r3
 800e78c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e78e:	912d      	str	r1, [sp, #180]	; 0xb4
 800e790:	2907      	cmp	r1, #7
 800e792:	dd08      	ble.n	800e7a6 <_svfprintf_r+0xf82>
 800e794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e796:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e798:	aa2c      	add	r2, sp, #176	; 0xb0
 800e79a:	f003 f8d3 	bl	8011944 <__ssprint_r>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d000      	beq.n	800e7a4 <_svfprintf_r+0xf80>
 800e7a2:	e21e      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e7a4:	af2f      	add	r7, sp, #188	; 0xbc
 800e7a6:	9b08      	ldr	r3, [sp, #32]
 800e7a8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ae:	18d2      	adds	r2, r2, r3
 800e7b0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e7b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	3201      	adds	r2, #1
 800e7b8:	922d      	str	r2, [sp, #180]	; 0xb4
 800e7ba:	2a07      	cmp	r2, #7
 800e7bc:	dc00      	bgt.n	800e7c0 <_svfprintf_r+0xf9c>
 800e7be:	e45b      	b.n	800e078 <_svfprintf_r+0x854>
 800e7c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7c4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7c6:	f003 f8bd 	bl	8011944 <__ssprint_r>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d000      	beq.n	800e7d0 <_svfprintf_r+0xfac>
 800e7ce:	e208      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e7d0:	af2f      	add	r7, sp, #188	; 0xbc
 800e7d2:	e755      	b.n	800e680 <_svfprintf_r+0xe5c>
 800e7d4:	3310      	adds	r3, #16
 800e7d6:	6045      	str	r5, [r0, #4]
 800e7d8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e7da:	912d      	str	r1, [sp, #180]	; 0xb4
 800e7dc:	2907      	cmp	r1, #7
 800e7de:	dd08      	ble.n	800e7f2 <_svfprintf_r+0xfce>
 800e7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e7e4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e7e6:	f003 f8ad 	bl	8011944 <__ssprint_r>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d000      	beq.n	800e7f0 <_svfprintf_r+0xfcc>
 800e7ee:	e1f8      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e7f0:	af2f      	add	r7, sp, #188	; 0xbc
 800e7f2:	0038      	movs	r0, r7
 800e7f4:	3c10      	subs	r4, #16
 800e7f6:	e7bf      	b.n	800e778 <_svfprintf_r+0xf54>
 800e7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7fa:	002c      	movs	r4, r5
 800e7fc:	429d      	cmp	r5, r3
 800e7fe:	dd00      	ble.n	800e802 <_svfprintf_r+0xfde>
 800e800:	001c      	movs	r4, r3
 800e802:	2c00      	cmp	r4, #0
 800e804:	dd14      	ble.n	800e830 <_svfprintf_r+0x100c>
 800e806:	9b08      	ldr	r3, [sp, #32]
 800e808:	607c      	str	r4, [r7, #4]
 800e80a:	603b      	str	r3, [r7, #0]
 800e80c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e80e:	3708      	adds	r7, #8
 800e810:	18e3      	adds	r3, r4, r3
 800e812:	932e      	str	r3, [sp, #184]	; 0xb8
 800e814:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e816:	3301      	adds	r3, #1
 800e818:	932d      	str	r3, [sp, #180]	; 0xb4
 800e81a:	2b07      	cmp	r3, #7
 800e81c:	dd08      	ble.n	800e830 <_svfprintf_r+0x100c>
 800e81e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e820:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e822:	aa2c      	add	r2, sp, #176	; 0xb0
 800e824:	f003 f88e 	bl	8011944 <__ssprint_r>
 800e828:	2800      	cmp	r0, #0
 800e82a:	d000      	beq.n	800e82e <_svfprintf_r+0x100a>
 800e82c:	e1d9      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e82e:	af2f      	add	r7, sp, #188	; 0xbc
 800e830:	43e3      	mvns	r3, r4
 800e832:	17db      	asrs	r3, r3, #31
 800e834:	401c      	ands	r4, r3
 800e836:	1b2c      	subs	r4, r5, r4
 800e838:	2c00      	cmp	r4, #0
 800e83a:	dd18      	ble.n	800e86e <_svfprintf_r+0x104a>
 800e83c:	0039      	movs	r1, r7
 800e83e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e840:	483f      	ldr	r0, [pc, #252]	; (800e940 <_svfprintf_r+0x111c>)
 800e842:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e844:	3301      	adds	r3, #1
 800e846:	3108      	adds	r1, #8
 800e848:	6038      	str	r0, [r7, #0]
 800e84a:	2c10      	cmp	r4, #16
 800e84c:	dc7a      	bgt.n	800e944 <_svfprintf_r+0x1120>
 800e84e:	607c      	str	r4, [r7, #4]
 800e850:	18a4      	adds	r4, r4, r2
 800e852:	000f      	movs	r7, r1
 800e854:	942e      	str	r4, [sp, #184]	; 0xb8
 800e856:	932d      	str	r3, [sp, #180]	; 0xb4
 800e858:	2b07      	cmp	r3, #7
 800e85a:	dd08      	ble.n	800e86e <_svfprintf_r+0x104a>
 800e85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e860:	aa2c      	add	r2, sp, #176	; 0xb0
 800e862:	f003 f86f 	bl	8011944 <__ssprint_r>
 800e866:	2800      	cmp	r0, #0
 800e868:	d000      	beq.n	800e86c <_svfprintf_r+0x1048>
 800e86a:	e1ba      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e86c:	af2f      	add	r7, sp, #188	; 0xbc
 800e86e:	9b08      	ldr	r3, [sp, #32]
 800e870:	195d      	adds	r5, r3, r5
 800e872:	0573      	lsls	r3, r6, #21
 800e874:	d50b      	bpl.n	800e88e <_svfprintf_r+0x106a>
 800e876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d176      	bne.n	800e96a <_svfprintf_r+0x1146>
 800e87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d176      	bne.n	800e970 <_svfprintf_r+0x114c>
 800e882:	9b08      	ldr	r3, [sp, #32]
 800e884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e886:	189b      	adds	r3, r3, r2
 800e888:	429d      	cmp	r5, r3
 800e88a:	d900      	bls.n	800e88e <_svfprintf_r+0x106a>
 800e88c:	001d      	movs	r5, r3
 800e88e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e892:	4293      	cmp	r3, r2
 800e894:	db01      	blt.n	800e89a <_svfprintf_r+0x1076>
 800e896:	07f3      	lsls	r3, r6, #31
 800e898:	d516      	bpl.n	800e8c8 <_svfprintf_r+0x10a4>
 800e89a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e89c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e89e:	603b      	str	r3, [r7, #0]
 800e8a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	189b      	adds	r3, r3, r2
 800e8aa:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8b2:	2b07      	cmp	r3, #7
 800e8b4:	dd08      	ble.n	800e8c8 <_svfprintf_r+0x10a4>
 800e8b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8ba:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8bc:	f003 f842 	bl	8011944 <__ssprint_r>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d000      	beq.n	800e8c6 <_svfprintf_r+0x10a2>
 800e8c4:	e18d      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e8c6:	af2f      	add	r7, sp, #188	; 0xbc
 800e8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ca:	9b08      	ldr	r3, [sp, #32]
 800e8cc:	4694      	mov	ip, r2
 800e8ce:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e8d0:	4463      	add	r3, ip
 800e8d2:	1b5b      	subs	r3, r3, r5
 800e8d4:	1b14      	subs	r4, r2, r4
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	dd00      	ble.n	800e8dc <_svfprintf_r+0x10b8>
 800e8da:	001c      	movs	r4, r3
 800e8dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	dd12      	ble.n	800e908 <_svfprintf_r+0x10e4>
 800e8e2:	18e3      	adds	r3, r4, r3
 800e8e4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8e6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8e8:	603d      	str	r5, [r7, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	607c      	str	r4, [r7, #4]
 800e8ee:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8f0:	3708      	adds	r7, #8
 800e8f2:	2b07      	cmp	r3, #7
 800e8f4:	dd08      	ble.n	800e908 <_svfprintf_r+0x10e4>
 800e8f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8fc:	f003 f822 	bl	8011944 <__ssprint_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	d000      	beq.n	800e906 <_svfprintf_r+0x10e2>
 800e904:	e16d      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e906:	af2f      	add	r7, sp, #188	; 0xbc
 800e908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e90a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e90c:	2510      	movs	r5, #16
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	43e2      	mvns	r2, r4
 800e912:	17d2      	asrs	r2, r2, #31
 800e914:	4014      	ands	r4, r2
 800e916:	1b1c      	subs	r4, r3, r4
 800e918:	2c00      	cmp	r4, #0
 800e91a:	dc00      	bgt.n	800e91e <_svfprintf_r+0x10fa>
 800e91c:	e6b0      	b.n	800e680 <_svfprintf_r+0xe5c>
 800e91e:	0039      	movs	r1, r7
 800e920:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e922:	4807      	ldr	r0, [pc, #28]	; (800e940 <_svfprintf_r+0x111c>)
 800e924:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e926:	3301      	adds	r3, #1
 800e928:	3108      	adds	r1, #8
 800e92a:	6038      	str	r0, [r7, #0]
 800e92c:	2c10      	cmp	r4, #16
 800e92e:	dd00      	ble.n	800e932 <_svfprintf_r+0x110e>
 800e930:	e096      	b.n	800ea60 <_svfprintf_r+0x123c>
 800e932:	1912      	adds	r2, r2, r4
 800e934:	607c      	str	r4, [r7, #4]
 800e936:	922e      	str	r2, [sp, #184]	; 0xb8
 800e938:	e6dd      	b.n	800e6f6 <_svfprintf_r+0xed2>
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	08014e1e 	.word	0x08014e1e
 800e940:	08014e30 	.word	0x08014e30
 800e944:	2010      	movs	r0, #16
 800e946:	1812      	adds	r2, r2, r0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e94c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e94e:	2b07      	cmp	r3, #7
 800e950:	dd08      	ble.n	800e964 <_svfprintf_r+0x1140>
 800e952:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e954:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e956:	aa2c      	add	r2, sp, #176	; 0xb0
 800e958:	f002 fff4 	bl	8011944 <__ssprint_r>
 800e95c:	2800      	cmp	r0, #0
 800e95e:	d000      	beq.n	800e962 <_svfprintf_r+0x113e>
 800e960:	e13f      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e962:	a92f      	add	r1, sp, #188	; 0xbc
 800e964:	000f      	movs	r7, r1
 800e966:	3c10      	subs	r4, #16
 800e968:	e768      	b.n	800e83c <_svfprintf_r+0x1018>
 800e96a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d05d      	beq.n	800ea2c <_svfprintf_r+0x1208>
 800e970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e972:	3b01      	subs	r3, #1
 800e974:	9310      	str	r3, [sp, #64]	; 0x40
 800e976:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e978:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e97a:	603b      	str	r3, [r7, #0]
 800e97c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e97e:	607b      	str	r3, [r7, #4]
 800e980:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e982:	3708      	adds	r7, #8
 800e984:	189b      	adds	r3, r3, r2
 800e986:	932e      	str	r3, [sp, #184]	; 0xb8
 800e988:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e98a:	3301      	adds	r3, #1
 800e98c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e98e:	2b07      	cmp	r3, #7
 800e990:	dd08      	ble.n	800e9a4 <_svfprintf_r+0x1180>
 800e992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e994:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e996:	aa2c      	add	r2, sp, #176	; 0xb0
 800e998:	f002 ffd4 	bl	8011944 <__ssprint_r>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	d000      	beq.n	800e9a2 <_svfprintf_r+0x117e>
 800e9a0:	e11f      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e9a2:	af2f      	add	r7, sp, #188	; 0xbc
 800e9a4:	9b08      	ldr	r3, [sp, #32]
 800e9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9a8:	189c      	adds	r4, r3, r2
 800e9aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9ac:	1b64      	subs	r4, r4, r5
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	429c      	cmp	r4, r3
 800e9b2:	dd00      	ble.n	800e9b6 <_svfprintf_r+0x1192>
 800e9b4:	001c      	movs	r4, r3
 800e9b6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e9b8:	2c00      	cmp	r4, #0
 800e9ba:	dd12      	ble.n	800e9e2 <_svfprintf_r+0x11be>
 800e9bc:	18e3      	adds	r3, r4, r3
 800e9be:	932e      	str	r3, [sp, #184]	; 0xb8
 800e9c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9c2:	603d      	str	r5, [r7, #0]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	607c      	str	r4, [r7, #4]
 800e9c8:	932d      	str	r3, [sp, #180]	; 0xb4
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	2b07      	cmp	r3, #7
 800e9ce:	dd08      	ble.n	800e9e2 <_svfprintf_r+0x11be>
 800e9d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9d4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e9d6:	f002 ffb5 	bl	8011944 <__ssprint_r>
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d000      	beq.n	800e9e0 <_svfprintf_r+0x11bc>
 800e9de:	e100      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800e9e0:	af2f      	add	r7, sp, #188	; 0xbc
 800e9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9e4:	781a      	ldrb	r2, [r3, #0]
 800e9e6:	43e3      	mvns	r3, r4
 800e9e8:	17db      	asrs	r3, r3, #31
 800e9ea:	401c      	ands	r4, r3
 800e9ec:	1b14      	subs	r4, r2, r4
 800e9ee:	2c00      	cmp	r4, #0
 800e9f0:	dd18      	ble.n	800ea24 <_svfprintf_r+0x1200>
 800e9f2:	0039      	movs	r1, r7
 800e9f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e9f6:	48aa      	ldr	r0, [pc, #680]	; (800eca0 <_svfprintf_r+0x147c>)
 800e9f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	3108      	adds	r1, #8
 800e9fe:	6038      	str	r0, [r7, #0]
 800ea00:	2c10      	cmp	r4, #16
 800ea02:	dc1a      	bgt.n	800ea3a <_svfprintf_r+0x1216>
 800ea04:	1912      	adds	r2, r2, r4
 800ea06:	607c      	str	r4, [r7, #4]
 800ea08:	922e      	str	r2, [sp, #184]	; 0xb8
 800ea0a:	000f      	movs	r7, r1
 800ea0c:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea0e:	2b07      	cmp	r3, #7
 800ea10:	dd08      	ble.n	800ea24 <_svfprintf_r+0x1200>
 800ea12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea16:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea18:	f002 ff94 	bl	8011944 <__ssprint_r>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d000      	beq.n	800ea22 <_svfprintf_r+0x11fe>
 800ea20:	e0df      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800ea22:	af2f      	add	r7, sp, #188	; 0xbc
 800ea24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	18ed      	adds	r5, r5, r3
 800ea2a:	e724      	b.n	800e876 <_svfprintf_r+0x1052>
 800ea2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	9312      	str	r3, [sp, #72]	; 0x48
 800ea32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea34:	3b01      	subs	r3, #1
 800ea36:	9311      	str	r3, [sp, #68]	; 0x44
 800ea38:	e79d      	b.n	800e976 <_svfprintf_r+0x1152>
 800ea3a:	2010      	movs	r0, #16
 800ea3c:	1812      	adds	r2, r2, r0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	922e      	str	r2, [sp, #184]	; 0xb8
 800ea42:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea44:	2b07      	cmp	r3, #7
 800ea46:	dd08      	ble.n	800ea5a <_svfprintf_r+0x1236>
 800ea48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea4c:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea4e:	f002 ff79 	bl	8011944 <__ssprint_r>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d000      	beq.n	800ea58 <_svfprintf_r+0x1234>
 800ea56:	e0c4      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800ea58:	a92f      	add	r1, sp, #188	; 0xbc
 800ea5a:	000f      	movs	r7, r1
 800ea5c:	3c10      	subs	r4, #16
 800ea5e:	e7c8      	b.n	800e9f2 <_svfprintf_r+0x11ce>
 800ea60:	3210      	adds	r2, #16
 800ea62:	607d      	str	r5, [r7, #4]
 800ea64:	922e      	str	r2, [sp, #184]	; 0xb8
 800ea66:	932d      	str	r3, [sp, #180]	; 0xb4
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	dd08      	ble.n	800ea7e <_svfprintf_r+0x125a>
 800ea6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ea70:	aa2c      	add	r2, sp, #176	; 0xb0
 800ea72:	f002 ff67 	bl	8011944 <__ssprint_r>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d000      	beq.n	800ea7c <_svfprintf_r+0x1258>
 800ea7a:	e0b2      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800ea7c:	a92f      	add	r1, sp, #188	; 0xbc
 800ea7e:	000f      	movs	r7, r1
 800ea80:	3c10      	subs	r4, #16
 800ea82:	e74c      	b.n	800e91e <_svfprintf_r+0x10fa>
 800ea84:	003c      	movs	r4, r7
 800ea86:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ea88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ea8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea8c:	3101      	adds	r1, #1
 800ea8e:	3301      	adds	r3, #1
 800ea90:	3408      	adds	r4, #8
 800ea92:	2a01      	cmp	r2, #1
 800ea94:	dc03      	bgt.n	800ea9e <_svfprintf_r+0x127a>
 800ea96:	2201      	movs	r2, #1
 800ea98:	4216      	tst	r6, r2
 800ea9a:	d100      	bne.n	800ea9e <_svfprintf_r+0x127a>
 800ea9c:	e07f      	b.n	800eb9e <_svfprintf_r+0x137a>
 800ea9e:	9a08      	ldr	r2, [sp, #32]
 800eaa0:	912e      	str	r1, [sp, #184]	; 0xb8
 800eaa2:	603a      	str	r2, [r7, #0]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	932d      	str	r3, [sp, #180]	; 0xb4
 800eaa8:	607a      	str	r2, [r7, #4]
 800eaaa:	2b07      	cmp	r3, #7
 800eaac:	dd08      	ble.n	800eac0 <_svfprintf_r+0x129c>
 800eaae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eab2:	aa2c      	add	r2, sp, #176	; 0xb0
 800eab4:	f002 ff46 	bl	8011944 <__ssprint_r>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d000      	beq.n	800eabe <_svfprintf_r+0x129a>
 800eabc:	e091      	b.n	800ebe2 <_svfprintf_r+0x13be>
 800eabe:	ac2f      	add	r4, sp, #188	; 0xbc
 800eac0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800eac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eac4:	6023      	str	r3, [r4, #0]
 800eac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eac8:	6063      	str	r3, [r4, #4]
 800eaca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eacc:	3408      	adds	r4, #8
 800eace:	189b      	adds	r3, r3, r2
 800ead0:	932e      	str	r3, [sp, #184]	; 0xb8
 800ead2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ead4:	3301      	adds	r3, #1
 800ead6:	932d      	str	r3, [sp, #180]	; 0xb4
 800ead8:	2b07      	cmp	r3, #7
 800eada:	dd07      	ble.n	800eaec <_svfprintf_r+0x12c8>
 800eadc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eade:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eae0:	aa2c      	add	r2, sp, #176	; 0xb0
 800eae2:	f002 ff2f 	bl	8011944 <__ssprint_r>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d17b      	bne.n	800ebe2 <_svfprintf_r+0x13be>
 800eaea:	ac2f      	add	r4, sp, #188	; 0xbc
 800eaec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eaee:	2200      	movs	r2, #0
 800eaf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800eaf2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eaf4:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaf8:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800eafa:	1e5d      	subs	r5, r3, #1
 800eafc:	2300      	movs	r3, #0
 800eafe:	f7f1 fca3 	bl	8000448 <__aeabi_dcmpeq>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d126      	bne.n	800eb54 <_svfprintf_r+0x1330>
 800eb06:	9b08      	ldr	r3, [sp, #32]
 800eb08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800eb0e:	6023      	str	r3, [r4, #0]
 800eb10:	1e7b      	subs	r3, r7, #1
 800eb12:	3201      	adds	r2, #1
 800eb14:	185b      	adds	r3, r3, r1
 800eb16:	6065      	str	r5, [r4, #4]
 800eb18:	932e      	str	r3, [sp, #184]	; 0xb8
 800eb1a:	922d      	str	r2, [sp, #180]	; 0xb4
 800eb1c:	3408      	adds	r4, #8
 800eb1e:	2a07      	cmp	r2, #7
 800eb20:	dd07      	ble.n	800eb32 <_svfprintf_r+0x130e>
 800eb22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb26:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb28:	f002 ff0c 	bl	8011944 <__ssprint_r>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d158      	bne.n	800ebe2 <_svfprintf_r+0x13be>
 800eb30:	ac2f      	add	r4, sp, #188	; 0xbc
 800eb32:	ab28      	add	r3, sp, #160	; 0xa0
 800eb34:	6023      	str	r3, [r4, #0]
 800eb36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eb38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eb3a:	6063      	str	r3, [r4, #4]
 800eb3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800eb3e:	189b      	adds	r3, r3, r2
 800eb40:	932e      	str	r3, [sp, #184]	; 0xb8
 800eb42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb44:	3301      	adds	r3, #1
 800eb46:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb48:	2b07      	cmp	r3, #7
 800eb4a:	dd00      	ble.n	800eb4e <_svfprintf_r+0x132a>
 800eb4c:	e638      	b.n	800e7c0 <_svfprintf_r+0xf9c>
 800eb4e:	3408      	adds	r4, #8
 800eb50:	0027      	movs	r7, r4
 800eb52:	e595      	b.n	800e680 <_svfprintf_r+0xe5c>
 800eb54:	2710      	movs	r7, #16
 800eb56:	2d00      	cmp	r5, #0
 800eb58:	ddeb      	ble.n	800eb32 <_svfprintf_r+0x130e>
 800eb5a:	0021      	movs	r1, r4
 800eb5c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800eb5e:	4850      	ldr	r0, [pc, #320]	; (800eca0 <_svfprintf_r+0x147c>)
 800eb60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800eb62:	3301      	adds	r3, #1
 800eb64:	3108      	adds	r1, #8
 800eb66:	6020      	str	r0, [r4, #0]
 800eb68:	2d10      	cmp	r5, #16
 800eb6a:	dc07      	bgt.n	800eb7c <_svfprintf_r+0x1358>
 800eb6c:	6065      	str	r5, [r4, #4]
 800eb6e:	000c      	movs	r4, r1
 800eb70:	18ad      	adds	r5, r5, r2
 800eb72:	952e      	str	r5, [sp, #184]	; 0xb8
 800eb74:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb76:	2b07      	cmp	r3, #7
 800eb78:	dddb      	ble.n	800eb32 <_svfprintf_r+0x130e>
 800eb7a:	e7d2      	b.n	800eb22 <_svfprintf_r+0x12fe>
 800eb7c:	3210      	adds	r2, #16
 800eb7e:	6067      	str	r7, [r4, #4]
 800eb80:	922e      	str	r2, [sp, #184]	; 0xb8
 800eb82:	932d      	str	r3, [sp, #180]	; 0xb4
 800eb84:	2b07      	cmp	r3, #7
 800eb86:	dd07      	ble.n	800eb98 <_svfprintf_r+0x1374>
 800eb88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800eb8c:	aa2c      	add	r2, sp, #176	; 0xb0
 800eb8e:	f002 fed9 	bl	8011944 <__ssprint_r>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	d125      	bne.n	800ebe2 <_svfprintf_r+0x13be>
 800eb96:	a92f      	add	r1, sp, #188	; 0xbc
 800eb98:	000c      	movs	r4, r1
 800eb9a:	3d10      	subs	r5, #16
 800eb9c:	e7dd      	b.n	800eb5a <_svfprintf_r+0x1336>
 800eb9e:	9808      	ldr	r0, [sp, #32]
 800eba0:	912e      	str	r1, [sp, #184]	; 0xb8
 800eba2:	c705      	stmia	r7!, {r0, r2}
 800eba4:	932d      	str	r3, [sp, #180]	; 0xb4
 800eba6:	e7e6      	b.n	800eb76 <_svfprintf_r+0x1352>
 800eba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ebaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ebac:	2510      	movs	r5, #16
 800ebae:	1a9c      	subs	r4, r3, r2
 800ebb0:	2c00      	cmp	r4, #0
 800ebb2:	dc00      	bgt.n	800ebb6 <_svfprintf_r+0x1392>
 800ebb4:	e567      	b.n	800e686 <_svfprintf_r+0xe62>
 800ebb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ebb8:	493a      	ldr	r1, [pc, #232]	; (800eca4 <_svfprintf_r+0x1480>)
 800ebba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	6039      	str	r1, [r7, #0]
 800ebc0:	2c10      	cmp	r4, #16
 800ebc2:	dc19      	bgt.n	800ebf8 <_svfprintf_r+0x13d4>
 800ebc4:	607c      	str	r4, [r7, #4]
 800ebc6:	18a4      	adds	r4, r4, r2
 800ebc8:	942e      	str	r4, [sp, #184]	; 0xb8
 800ebca:	932d      	str	r3, [sp, #180]	; 0xb4
 800ebcc:	2b07      	cmp	r3, #7
 800ebce:	dc00      	bgt.n	800ebd2 <_svfprintf_r+0x13ae>
 800ebd0:	e559      	b.n	800e686 <_svfprintf_r+0xe62>
 800ebd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ebd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebd6:	aa2c      	add	r2, sp, #176	; 0xb0
 800ebd8:	f002 feb4 	bl	8011944 <__ssprint_r>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	d100      	bne.n	800ebe2 <_svfprintf_r+0x13be>
 800ebe0:	e551      	b.n	800e686 <_svfprintf_r+0xe62>
 800ebe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <_svfprintf_r+0x13c8>
 800ebe8:	f7ff f845 	bl	800dc76 <_svfprintf_r+0x452>
 800ebec:	0019      	movs	r1, r3
 800ebee:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ebf0:	f7fd fd80 	bl	800c6f4 <_free_r>
 800ebf4:	f7ff f83f 	bl	800dc76 <_svfprintf_r+0x452>
 800ebf8:	3210      	adds	r2, #16
 800ebfa:	607d      	str	r5, [r7, #4]
 800ebfc:	922e      	str	r2, [sp, #184]	; 0xb8
 800ebfe:	932d      	str	r3, [sp, #180]	; 0xb4
 800ec00:	3708      	adds	r7, #8
 800ec02:	2b07      	cmp	r3, #7
 800ec04:	dd07      	ble.n	800ec16 <_svfprintf_r+0x13f2>
 800ec06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec08:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec0a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec0c:	f002 fe9a 	bl	8011944 <__ssprint_r>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d1e6      	bne.n	800ebe2 <_svfprintf_r+0x13be>
 800ec14:	af2f      	add	r7, sp, #188	; 0xbc
 800ec16:	3c10      	subs	r4, #16
 800ec18:	e7cd      	b.n	800ebb6 <_svfprintf_r+0x1392>
 800ec1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ec1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec1e:	f7fd fd69 	bl	800c6f4 <_free_r>
 800ec22:	e549      	b.n	800e6b8 <_svfprintf_r+0xe94>
 800ec24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d101      	bne.n	800ec2e <_svfprintf_r+0x140a>
 800ec2a:	f7ff f824 	bl	800dc76 <_svfprintf_r+0x452>
 800ec2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec30:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec32:	aa2c      	add	r2, sp, #176	; 0xb0
 800ec34:	f002 fe86 	bl	8011944 <__ssprint_r>
 800ec38:	f7ff f81d 	bl	800dc76 <_svfprintf_r+0x452>
 800ec3c:	0034      	movs	r4, r6
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	d101      	bne.n	800ec46 <_svfprintf_r+0x1422>
 800ec42:	f7fe ff8c 	bl	800db5e <_svfprintf_r+0x33a>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d101      	bne.n	800ec4e <_svfprintf_r+0x142a>
 800ec4a:	f7ff fc01 	bl	800e450 <_svfprintf_r+0xc2c>
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d100      	bne.n	800ec54 <_svfprintf_r+0x1430>
 800ec52:	e459      	b.n	800e508 <_svfprintf_r+0xce4>
 800ec54:	2507      	movs	r5, #7
 800ec56:	ab58      	add	r3, sp, #352	; 0x160
 800ec58:	9308      	str	r3, [sp, #32]
 800ec5a:	9a08      	ldr	r2, [sp, #32]
 800ec5c:	0013      	movs	r3, r2
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	9308      	str	r3, [sp, #32]
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	9908      	ldr	r1, [sp, #32]
 800ec66:	402b      	ands	r3, r5
 800ec68:	3330      	adds	r3, #48	; 0x30
 800ec6a:	700b      	strb	r3, [r1, #0]
 800ec6c:	9907      	ldr	r1, [sp, #28]
 800ec6e:	074e      	lsls	r6, r1, #29
 800ec70:	9906      	ldr	r1, [sp, #24]
 800ec72:	08c8      	lsrs	r0, r1, #3
 800ec74:	9907      	ldr	r1, [sp, #28]
 800ec76:	4306      	orrs	r6, r0
 800ec78:	08c9      	lsrs	r1, r1, #3
 800ec7a:	9107      	str	r1, [sp, #28]
 800ec7c:	0031      	movs	r1, r6
 800ec7e:	9807      	ldr	r0, [sp, #28]
 800ec80:	9606      	str	r6, [sp, #24]
 800ec82:	4301      	orrs	r1, r0
 800ec84:	d1e9      	bne.n	800ec5a <_svfprintf_r+0x1436>
 800ec86:	07e1      	lsls	r1, r4, #31
 800ec88:	d400      	bmi.n	800ec8c <_svfprintf_r+0x1468>
 800ec8a:	e42a      	b.n	800e4e2 <_svfprintf_r+0xcbe>
 800ec8c:	2b30      	cmp	r3, #48	; 0x30
 800ec8e:	d100      	bne.n	800ec92 <_svfprintf_r+0x146e>
 800ec90:	e427      	b.n	800e4e2 <_svfprintf_r+0xcbe>
 800ec92:	2130      	movs	r1, #48	; 0x30
 800ec94:	9b08      	ldr	r3, [sp, #32]
 800ec96:	3b01      	subs	r3, #1
 800ec98:	7019      	strb	r1, [r3, #0]
 800ec9a:	1e93      	subs	r3, r2, #2
 800ec9c:	9308      	str	r3, [sp, #32]
 800ec9e:	e420      	b.n	800e4e2 <_svfprintf_r+0xcbe>
 800eca0:	08014e30 	.word	0x08014e30
 800eca4:	08014e20 	.word	0x08014e20

0800eca8 <__ssvfscanf_r>:
 800eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecaa:	4ca7      	ldr	r4, [pc, #668]	; (800ef48 <__ssvfscanf_r+0x2a0>)
 800ecac:	44a5      	add	sp, r4
 800ecae:	af02      	add	r7, sp, #8
 800ecb0:	633b      	str	r3, [r7, #48]	; 0x30
 800ecb2:	000b      	movs	r3, r1
 800ecb4:	6378      	str	r0, [r7, #52]	; 0x34
 800ecb6:	6479      	str	r1, [r7, #68]	; 0x44
 800ecb8:	61ba      	str	r2, [r7, #24]
 800ecba:	220c      	movs	r2, #12
 800ecbc:	5e9a      	ldrsh	r2, [r3, r2]
 800ecbe:	2380      	movs	r3, #128	; 0x80
 800ecc0:	019b      	lsls	r3, r3, #6
 800ecc2:	421a      	tst	r2, r3
 800ecc4:	d105      	bne.n	800ecd2 <__ssvfscanf_r+0x2a>
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	818b      	strh	r3, [r1, #12]
 800ecca:	4aa0      	ldr	r2, [pc, #640]	; (800ef4c <__ssvfscanf_r+0x2a4>)
 800eccc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ecce:	4013      	ands	r3, r2
 800ecd0:	664b      	str	r3, [r1, #100]	; 0x64
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	617b      	str	r3, [r7, #20]
 800ecd6:	643b      	str	r3, [r7, #64]	; 0x40
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
 800ecdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	69ba      	ldr	r2, [r7, #24]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	3201      	adds	r2, #1
 800ece8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecea:	61ba      	str	r2, [r7, #24]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d100      	bne.n	800ecf2 <__ssvfscanf_r+0x4a>
 800ecf0:	e0d7      	b.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ecf2:	2608      	movs	r6, #8
 800ecf4:	2108      	movs	r1, #8
 800ecf6:	4a96      	ldr	r2, [pc, #600]	; (800ef50 <__ssvfscanf_r+0x2a8>)
 800ecf8:	5cd2      	ldrb	r2, [r2, r3]
 800ecfa:	4016      	ands	r6, r2
 800ecfc:	420a      	tst	r2, r1
 800ecfe:	d01d      	beq.n	800ed3c <__ssvfscanf_r+0x94>
 800ed00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	dd12      	ble.n	800ed2e <__ssvfscanf_r+0x86>
 800ed08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed0a:	4991      	ldr	r1, [pc, #580]	; (800ef50 <__ssvfscanf_r+0x2a8>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	5c8a      	ldrb	r2, [r1, r2]
 800ed12:	2108      	movs	r1, #8
 800ed14:	420a      	tst	r2, r1
 800ed16:	d0e3      	beq.n	800ece0 <__ssvfscanf_r+0x38>
 800ed18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed1c:	3201      	adds	r2, #1
 800ed1e:	63ba      	str	r2, [r7, #56]	; 0x38
 800ed20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed22:	3301      	adds	r3, #1
 800ed24:	6852      	ldr	r2, [r2, #4]
 800ed26:	600b      	str	r3, [r1, #0]
 800ed28:	3a01      	subs	r2, #1
 800ed2a:	604a      	str	r2, [r1, #4]
 800ed2c:	e7e8      	b.n	800ed00 <__ssvfscanf_r+0x58>
 800ed2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed32:	f002 fec7 	bl	8011ac4 <__ssrefill_r>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d0e6      	beq.n	800ed08 <__ssvfscanf_r+0x60>
 800ed3a:	e7d1      	b.n	800ece0 <__ssvfscanf_r+0x38>
 800ed3c:	2b25      	cmp	r3, #37	; 0x25
 800ed3e:	d165      	bne.n	800ee0c <__ssvfscanf_r+0x164>
 800ed40:	250a      	movs	r5, #10
 800ed42:	2480      	movs	r4, #128	; 0x80
 800ed44:	69ba      	ldr	r2, [r7, #24]
 800ed46:	63fe      	str	r6, [r7, #60]	; 0x3c
 800ed48:	3b16      	subs	r3, #22
 800ed4a:	69b9      	ldr	r1, [r7, #24]
 800ed4c:	3101      	adds	r1, #1
 800ed4e:	61b9      	str	r1, [r7, #24]
 800ed50:	7811      	ldrb	r1, [r2, #0]
 800ed52:	0008      	movs	r0, r1
 800ed54:	3825      	subs	r0, #37	; 0x25
 800ed56:	2855      	cmp	r0, #85	; 0x55
 800ed58:	d900      	bls.n	800ed5c <__ssvfscanf_r+0xb4>
 800ed5a:	e170      	b.n	800f03e <__ssvfscanf_r+0x396>
 800ed5c:	f7f1 f9e4 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ed60:	016f0056 	.word	0x016f0056
 800ed64:	016f016f 	.word	0x016f016f
 800ed68:	0081016f 	.word	0x0081016f
 800ed6c:	016f016f 	.word	0x016f016f
 800ed70:	016f016f 	.word	0x016f016f
 800ed74:	00b8016f 	.word	0x00b8016f
 800ed78:	00b800b8 	.word	0x00b800b8
 800ed7c:	00b800b8 	.word	0x00b800b8
 800ed80:	00b800b8 	.word	0x00b800b8
 800ed84:	00b800b8 	.word	0x00b800b8
 800ed88:	016f00b8 	.word	0x016f00b8
 800ed8c:	016f016f 	.word	0x016f016f
 800ed90:	016f016f 	.word	0x016f016f
 800ed94:	016f016f 	.word	0x016f016f
 800ed98:	016f00d8 	.word	0x016f00d8
 800ed9c:	00c1010a 	.word	0x00c1010a
 800eda0:	00d800d8 	.word	0x00d800d8
 800eda4:	016f00d8 	.word	0x016f00d8
 800eda8:	016f016f 	.word	0x016f016f
 800edac:	009f016f 	.word	0x009f016f
 800edb0:	016f016f 	.word	0x016f016f
 800edb4:	016f00c9 	.word	0x016f00c9
 800edb8:	016f016f 	.word	0x016f016f
 800edbc:	016f00f0 	.word	0x016f00f0
 800edc0:	016f016f 	.word	0x016f016f
 800edc4:	00d1016f 	.word	0x00d1016f
 800edc8:	016f016f 	.word	0x016f016f
 800edcc:	016f00fe 	.word	0x016f00fe
 800edd0:	016f016f 	.word	0x016f016f
 800edd4:	016f016f 	.word	0x016f016f
 800edd8:	016f00d8 	.word	0x016f00d8
 800eddc:	00c3010c 	.word	0x00c3010c
 800ede0:	00d800d8 	.word	0x00d800d8
 800ede4:	009400d8 	.word	0x009400d8
 800ede8:	009f012f 	.word	0x009f012f
 800edec:	0088016f 	.word	0x0088016f
 800edf0:	011200a9 	.word	0x011200a9
 800edf4:	011000cb 	.word	0x011000cb
 800edf8:	016f016f 	.word	0x016f016f
 800edfc:	00a600f2 	.word	0x00a600f2
 800ee00:	016f00cf 	.word	0x016f00cf
 800ee04:	00d1016f 	.word	0x00d1016f
 800ee08:	00a6016f 	.word	0x00a6016f
 800ee0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	dd12      	ble.n	800ee3a <__ssvfscanf_r+0x192>
 800ee14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3a01      	subs	r2, #1
 800ee1c:	7819      	ldrb	r1, [r3, #0]
 800ee1e:	7812      	ldrb	r2, [r2, #0]
 800ee20:	4291      	cmp	r1, r2
 800ee22:	d13e      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ee24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee28:	6852      	ldr	r2, [r2, #4]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	600b      	str	r3, [r1, #0]
 800ee2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee30:	3a01      	subs	r2, #1
 800ee32:	604a      	str	r2, [r1, #4]
 800ee34:	3301      	adds	r3, #1
 800ee36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ee38:	e752      	b.n	800ece0 <__ssvfscanf_r+0x38>
 800ee3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ee3e:	f002 fe41 	bl	8011ac4 <__ssrefill_r>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d0e6      	beq.n	800ee14 <__ssvfscanf_r+0x16c>
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d003      	beq.n	800ee54 <__ssvfscanf_r+0x1ac>
 800ee4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee4e:	899b      	ldrh	r3, [r3, #12]
 800ee50:	065b      	lsls	r3, r3, #25
 800ee52:	d526      	bpl.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ee54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d000      	beq.n	800ee5c <__ssvfscanf_r+0x1b4>
 800ee5a:	e0f6      	b.n	800f04a <__ssvfscanf_r+0x3a2>
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee60:	e104      	b.n	800f06c <__ssvfscanf_r+0x3c4>
 800ee62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee64:	4332      	orrs	r2, r6
 800ee66:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ee68:	d11b      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ee6a:	2610      	movs	r6, #16
 800ee6c:	69ba      	ldr	r2, [r7, #24]
 800ee6e:	e76c      	b.n	800ed4a <__ssvfscanf_r+0xa2>
 800ee70:	421e      	tst	r6, r3
 800ee72:	d116      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ee74:	7851      	ldrb	r1, [r2, #1]
 800ee76:	296c      	cmp	r1, #108	; 0x6c
 800ee78:	d103      	bne.n	800ee82 <__ssvfscanf_r+0x1da>
 800ee7a:	3202      	adds	r2, #2
 800ee7c:	61ba      	str	r2, [r7, #24]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	e000      	b.n	800ee84 <__ssvfscanf_r+0x1dc>
 800ee82:	2201      	movs	r2, #1
 800ee84:	4316      	orrs	r6, r2
 800ee86:	e7f1      	b.n	800ee6c <__ssvfscanf_r+0x1c4>
 800ee88:	421e      	tst	r6, r3
 800ee8a:	d10a      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800ee8c:	7851      	ldrb	r1, [r2, #1]
 800ee8e:	2968      	cmp	r1, #104	; 0x68
 800ee90:	d103      	bne.n	800ee9a <__ssvfscanf_r+0x1f2>
 800ee92:	3202      	adds	r2, #2
 800ee94:	61ba      	str	r2, [r7, #24]
 800ee96:	2208      	movs	r2, #8
 800ee98:	e7f4      	b.n	800ee84 <__ssvfscanf_r+0x1dc>
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	e7f2      	b.n	800ee84 <__ssvfscanf_r+0x1dc>
 800ee9e:	421e      	tst	r6, r3
 800eea0:	d0ed      	beq.n	800ee7e <__ssvfscanf_r+0x1d6>
 800eea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d000      	beq.n	800eeaa <__ssvfscanf_r+0x202>
 800eea8:	e0da      	b.n	800f060 <__ssvfscanf_r+0x3b8>
 800eeaa:	e0df      	b.n	800f06c <__ssvfscanf_r+0x3c4>
 800eeac:	421e      	tst	r6, r3
 800eeae:	d0dd      	beq.n	800ee6c <__ssvfscanf_r+0x1c4>
 800eeb0:	e7f7      	b.n	800eea2 <__ssvfscanf_r+0x1fa>
 800eeb2:	228f      	movs	r2, #143	; 0x8f
 800eeb4:	218f      	movs	r1, #143	; 0x8f
 800eeb6:	4032      	ands	r2, r6
 800eeb8:	420e      	tst	r6, r1
 800eeba:	d1f2      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800eebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eebe:	2900      	cmp	r1, #0
 800eec0:	d104      	bne.n	800eecc <__ssvfscanf_r+0x224>
 800eec2:	b082      	sub	sp, #8
 800eec4:	a902      	add	r1, sp, #8
 800eec6:	6439      	str	r1, [r7, #64]	; 0x40
 800eec8:	600a      	str	r2, [r1, #0]
 800eeca:	604a      	str	r2, [r1, #4]
 800eecc:	4326      	orrs	r6, r4
 800eece:	e7cd      	b.n	800ee6c <__ssvfscanf_r+0x1c4>
 800eed0:	228f      	movs	r2, #143	; 0x8f
 800eed2:	4216      	tst	r6, r2
 800eed4:	d1e5      	bne.n	800eea2 <__ssvfscanf_r+0x1fa>
 800eed6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eed8:	436a      	muls	r2, r5
 800eeda:	3a30      	subs	r2, #48	; 0x30
 800eedc:	188a      	adds	r2, r1, r2
 800eede:	63fa      	str	r2, [r7, #60]	; 0x3c
 800eee0:	e7c4      	b.n	800ee6c <__ssvfscanf_r+0x1c4>
 800eee2:	2301      	movs	r3, #1
 800eee4:	431e      	orrs	r6, r3
 800eee6:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <__ssvfscanf_r+0x2ac>)
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	230a      	movs	r3, #10
 800eeec:	2403      	movs	r4, #3
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
 800eef0:	e00f      	b.n	800ef12 <__ssvfscanf_r+0x26a>
 800eef2:	2301      	movs	r3, #1
 800eef4:	431e      	orrs	r6, r3
 800eef6:	4b18      	ldr	r3, [pc, #96]	; (800ef58 <__ssvfscanf_r+0x2b0>)
 800eef8:	617b      	str	r3, [r7, #20]
 800eefa:	2308      	movs	r3, #8
 800eefc:	e7f6      	b.n	800eeec <__ssvfscanf_r+0x244>
 800eefe:	4b16      	ldr	r3, [pc, #88]	; (800ef58 <__ssvfscanf_r+0x2b0>)
 800ef00:	e7f2      	b.n	800eee8 <__ssvfscanf_r+0x240>
 800ef02:	2380      	movs	r3, #128	; 0x80
 800ef04:	009b      	lsls	r3, r3, #2
 800ef06:	431e      	orrs	r6, r3
 800ef08:	4b13      	ldr	r3, [pc, #76]	; (800ef58 <__ssvfscanf_r+0x2b0>)
 800ef0a:	617b      	str	r3, [r7, #20]
 800ef0c:	2310      	movs	r3, #16
 800ef0e:	e7ed      	b.n	800eeec <__ssvfscanf_r+0x244>
 800ef10:	2404      	movs	r4, #4
 800ef12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	dd55      	ble.n	800efc6 <__ssvfscanf_r+0x31e>
 800ef1a:	0673      	lsls	r3, r6, #25
 800ef1c:	d407      	bmi.n	800ef2e <__ssvfscanf_r+0x286>
 800ef1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef20:	490b      	ldr	r1, [pc, #44]	; (800ef50 <__ssvfscanf_r+0x2a8>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	781a      	ldrb	r2, [r3, #0]
 800ef26:	5c8a      	ldrb	r2, [r1, r2]
 800ef28:	2108      	movs	r1, #8
 800ef2a:	420a      	tst	r2, r1
 800ef2c:	d152      	bne.n	800efd4 <__ssvfscanf_r+0x32c>
 800ef2e:	1e60      	subs	r0, r4, #1
 800ef30:	2803      	cmp	r0, #3
 800ef32:	d863      	bhi.n	800effc <__ssvfscanf_r+0x354>
 800ef34:	f7f1 f8f8 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ef38:	03bd01da 	.word	0x03bd01da
 800ef3c:	068a0579 	.word	0x068a0579
 800ef40:	2301      	movs	r3, #1
 800ef42:	431e      	orrs	r6, r3
 800ef44:	2402      	movs	r4, #2
 800ef46:	e7e4      	b.n	800ef12 <__ssvfscanf_r+0x26a>
 800ef48:	fffffd34 	.word	0xfffffd34
 800ef4c:	ffffdfff 	.word	0xffffdfff
 800ef50:	08014b19 	.word	0x08014b19
 800ef54:	0800bf45 	.word	0x0800bf45
 800ef58:	0800c069 	.word	0x0800c069
 800ef5c:	2248      	movs	r2, #72	; 0x48
 800ef5e:	2318      	movs	r3, #24
 800ef60:	189b      	adds	r3, r3, r2
 800ef62:	19d8      	adds	r0, r3, r7
 800ef64:	69b9      	ldr	r1, [r7, #24]
 800ef66:	f001 f9d7 	bl	8010318 <__sccl>
 800ef6a:	2340      	movs	r3, #64	; 0x40
 800ef6c:	2401      	movs	r4, #1
 800ef6e:	61b8      	str	r0, [r7, #24]
 800ef70:	431e      	orrs	r6, r3
 800ef72:	e7ce      	b.n	800ef12 <__ssvfscanf_r+0x26a>
 800ef74:	2301      	movs	r3, #1
 800ef76:	431e      	orrs	r6, r3
 800ef78:	2340      	movs	r3, #64	; 0x40
 800ef7a:	2400      	movs	r4, #0
 800ef7c:	431e      	orrs	r6, r3
 800ef7e:	e7c8      	b.n	800ef12 <__ssvfscanf_r+0x26a>
 800ef80:	2388      	movs	r3, #136	; 0x88
 800ef82:	e7bf      	b.n	800ef04 <__ssvfscanf_r+0x25c>
 800ef84:	06f3      	lsls	r3, r6, #27
 800ef86:	d500      	bpl.n	800ef8a <__ssvfscanf_r+0x2e2>
 800ef88:	e6aa      	b.n	800ece0 <__ssvfscanf_r+0x38>
 800ef8a:	2108      	movs	r1, #8
 800ef8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8e:	cb04      	ldmia	r3!, {r2}
 800ef90:	420e      	tst	r6, r1
 800ef92:	d003      	beq.n	800ef9c <__ssvfscanf_r+0x2f4>
 800ef94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef96:	7011      	strb	r1, [r2, #0]
 800ef98:	633b      	str	r3, [r7, #48]	; 0x30
 800ef9a:	e6a1      	b.n	800ece0 <__ssvfscanf_r+0x38>
 800ef9c:	0771      	lsls	r1, r6, #29
 800ef9e:	d502      	bpl.n	800efa6 <__ssvfscanf_r+0x2fe>
 800efa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efa2:	8011      	strh	r1, [r2, #0]
 800efa4:	e7f8      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800efa6:	07f1      	lsls	r1, r6, #31
 800efa8:	d502      	bpl.n	800efb0 <__ssvfscanf_r+0x308>
 800efaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efac:	6011      	str	r1, [r2, #0]
 800efae:	e7f3      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800efb0:	07b6      	lsls	r6, r6, #30
 800efb2:	d5fa      	bpl.n	800efaa <__ssvfscanf_r+0x302>
 800efb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efb6:	6011      	str	r1, [r2, #0]
 800efb8:	17c9      	asrs	r1, r1, #31
 800efba:	6051      	str	r1, [r2, #4]
 800efbc:	e7ec      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800efbe:	4ba2      	ldr	r3, [pc, #648]	; (800f248 <__ssvfscanf_r+0x5a0>)
 800efc0:	617b      	str	r3, [r7, #20]
 800efc2:	2300      	movs	r3, #0
 800efc4:	e792      	b.n	800eeec <__ssvfscanf_r+0x244>
 800efc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efca:	f002 fd7b 	bl	8011ac4 <__ssrefill_r>
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0a3      	beq.n	800ef1a <__ssvfscanf_r+0x272>
 800efd2:	e738      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800efd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800efd8:	3201      	adds	r2, #1
 800efda:	63ba      	str	r2, [r7, #56]	; 0x38
 800efdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efde:	6852      	ldr	r2, [r2, #4]
 800efe0:	3a01      	subs	r2, #1
 800efe2:	604a      	str	r2, [r1, #4]
 800efe4:	2a00      	cmp	r2, #0
 800efe6:	dd02      	ble.n	800efee <__ssvfscanf_r+0x346>
 800efe8:	3301      	adds	r3, #1
 800efea:	600b      	str	r3, [r1, #0]
 800efec:	e797      	b.n	800ef1e <__ssvfscanf_r+0x276>
 800efee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eff0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eff2:	f002 fd67 	bl	8011ac4 <__ssrefill_r>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d091      	beq.n	800ef1e <__ssvfscanf_r+0x276>
 800effa:	e724      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800effc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800effe:	2301      	movs	r3, #1
 800f000:	2a00      	cmp	r2, #0
 800f002:	d100      	bne.n	800f006 <__ssvfscanf_r+0x35e>
 800f004:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f006:	2210      	movs	r2, #16
 800f008:	0034      	movs	r4, r6
 800f00a:	4032      	ands	r2, r6
 800f00c:	623a      	str	r2, [r7, #32]
 800f00e:	401c      	ands	r4, r3
 800f010:	421e      	tst	r6, r3
 800f012:	d100      	bne.n	800f016 <__ssvfscanf_r+0x36e>
 800f014:	e0f3      	b.n	800f1fe <__ssvfscanf_r+0x556>
 800f016:	2a00      	cmp	r2, #0
 800f018:	d000      	beq.n	800f01c <__ssvfscanf_r+0x374>
 800f01a:	e0b6      	b.n	800f18a <__ssvfscanf_r+0x4e2>
 800f01c:	2080      	movs	r0, #128	; 0x80
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	cb10      	ldmia	r3!, {r4}
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	4206      	tst	r6, r0
 800f026:	d100      	bne.n	800f02a <__ssvfscanf_r+0x382>
 800f028:	e0b7      	b.n	800f19a <__ssvfscanf_r+0x4f2>
 800f02a:	2c00      	cmp	r4, #0
 800f02c:	d007      	beq.n	800f03e <__ssvfscanf_r+0x396>
 800f02e:	f7fb fe93 	bl	800ad58 <malloc>
 800f032:	6338      	str	r0, [r7, #48]	; 0x30
 800f034:	2800      	cmp	r0, #0
 800f036:	d11f      	bne.n	800f078 <__ssvfscanf_r+0x3d0>
 800f038:	2301      	movs	r3, #1
 800f03a:	425b      	negs	r3, r3
 800f03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f03e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f040:	2b00      	cmp	r3, #0
 800f042:	d013      	beq.n	800f06c <__ssvfscanf_r+0x3c4>
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	3301      	adds	r3, #1
 800f048:	d10a      	bne.n	800f060 <__ssvfscanf_r+0x3b8>
 800f04a:	2400      	movs	r4, #0
 800f04c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f04e:	681d      	ldr	r5, [r3, #0]
 800f050:	88db      	ldrh	r3, [r3, #6]
 800f052:	42a3      	cmp	r3, r4
 800f054:	dd01      	ble.n	800f05a <__ssvfscanf_r+0x3b2>
 800f056:	f001 f82a 	bl	80100ae <__ssvfscanf_r+0x1406>
 800f05a:	2301      	movs	r3, #1
 800f05c:	425b      	negs	r3, r3
 800f05e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f062:	6818      	ldr	r0, [r3, #0]
 800f064:	2800      	cmp	r0, #0
 800f066:	d001      	beq.n	800f06c <__ssvfscanf_r+0x3c4>
 800f068:	f7fb fe80 	bl	800ad6c <free>
 800f06c:	46bd      	mov	sp, r7
 800f06e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f070:	23b1      	movs	r3, #177	; 0xb1
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	449d      	add	sp, r3
 800f076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07a:	6023      	str	r3, [r4, #0]
 800f07c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f07e:	88de      	ldrh	r6, [r3, #6]
 800f080:	889d      	ldrh	r5, [r3, #4]
 800f082:	42ae      	cmp	r6, r5
 800f084:	d30e      	bcc.n	800f0a4 <__ssvfscanf_r+0x3fc>
 800f086:	4b71      	ldr	r3, [pc, #452]	; (800f24c <__ssvfscanf_r+0x5a4>)
 800f088:	429d      	cmp	r5, r3
 800f08a:	d8d5      	bhi.n	800f038 <__ssvfscanf_r+0x390>
 800f08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f08e:	3508      	adds	r5, #8
 800f090:	b2ad      	uxth	r5, r5
 800f092:	6818      	ldr	r0, [r3, #0]
 800f094:	00a9      	lsls	r1, r5, #2
 800f096:	f002 f901 	bl	801129c <realloc>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d0cc      	beq.n	800f038 <__ssvfscanf_r+0x390>
 800f09e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a0:	6018      	str	r0, [r3, #0]
 800f0a2:	809d      	strh	r5, [r3, #4]
 800f0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a6:	1c72      	adds	r2, r6, #1
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	00b6      	lsls	r6, r6, #2
 800f0ac:	50f4      	str	r4, [r6, r3]
 800f0ae:	2320      	movs	r3, #32
 800f0b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0b2:	0026      	movs	r6, r4
 800f0b4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f0b6:	80ca      	strh	r2, [r1, #6]
 800f0b8:	61fb      	str	r3, [r7, #28]
 800f0ba:	2500      	movs	r5, #0
 800f0bc:	f7fd f9fe 	bl	800c4bc <__locale_mb_cur_max>
 800f0c0:	42a8      	cmp	r0, r5
 800f0c2:	d100      	bne.n	800f0c6 <__ssvfscanf_r+0x41e>
 800f0c4:	e6bf      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f0c6:	1c6a      	adds	r2, r5, #1
 800f0c8:	60fa      	str	r2, [r7, #12]
 800f0ca:	228c      	movs	r2, #140	; 0x8c
 800f0cc:	2048      	movs	r0, #72	; 0x48
 800f0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d0:	0052      	lsls	r2, r2, #1
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	1812      	adds	r2, r2, r0
 800f0d6:	7819      	ldrb	r1, [r3, #0]
 800f0d8:	19d2      	adds	r2, r2, r7
 800f0da:	5551      	strb	r1, [r2, r5]
 800f0dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0e0:	6852      	ldr	r2, [r2, #4]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	600b      	str	r3, [r1, #0]
 800f0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e8:	3a01      	subs	r2, #1
 800f0ea:	604a      	str	r2, [r1, #4]
 800f0ec:	2b03      	cmp	r3, #3
 800f0ee:	d102      	bne.n	800f0f6 <__ssvfscanf_r+0x44e>
 800f0f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0f2:	2b04      	cmp	r3, #4
 800f0f4:	d007      	beq.n	800f106 <__ssvfscanf_r+0x45e>
 800f0f6:	2048      	movs	r0, #72	; 0x48
 800f0f8:	2310      	movs	r3, #16
 800f0fa:	181b      	adds	r3, r3, r0
 800f0fc:	2208      	movs	r2, #8
 800f0fe:	2100      	movs	r1, #0
 800f100:	19d8      	adds	r0, r3, r7
 800f102:	f7fd f94f 	bl	800c3a4 <memset>
 800f106:	2148      	movs	r1, #72	; 0x48
 800f108:	2310      	movs	r3, #16
 800f10a:	228c      	movs	r2, #140	; 0x8c
 800f10c:	185b      	adds	r3, r3, r1
 800f10e:	0052      	lsls	r2, r2, #1
 800f110:	19db      	adds	r3, r3, r7
 800f112:	1852      	adds	r2, r2, r1
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	0021      	movs	r1, r4
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f11c:	19d2      	adds	r2, r2, r7
 800f11e:	f002 fbd1 	bl	80118c4 <_mbrtowc_r>
 800f122:	0003      	movs	r3, r0
 800f124:	62b8      	str	r0, [r7, #40]	; 0x28
 800f126:	3301      	adds	r3, #1
 800f128:	d100      	bne.n	800f12c <__ssvfscanf_r+0x484>
 800f12a:	e68c      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d139      	bne.n	800f1a4 <__ssvfscanf_r+0x4fc>
 800f130:	6a3b      	ldr	r3, [r7, #32]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d100      	bne.n	800f138 <__ssvfscanf_r+0x490>
 800f136:	6023      	str	r3, [r4, #0]
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13c:	4694      	mov	ip, r2
 800f13e:	4463      	add	r3, ip
 800f140:	63bb      	str	r3, [r7, #56]	; 0x38
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	2b03      	cmp	r3, #3
 800f146:	d102      	bne.n	800f14e <__ssvfscanf_r+0x4a6>
 800f148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d002      	beq.n	800f154 <__ssvfscanf_r+0x4ac>
 800f14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f150:	3b01      	subs	r3, #1
 800f152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d115      	bne.n	800f186 <__ssvfscanf_r+0x4de>
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	d012      	beq.n	800f184 <__ssvfscanf_r+0x4dc>
 800f15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f160:	69fa      	ldr	r2, [r7, #28]
 800f162:	1ae5      	subs	r5, r4, r3
 800f164:	10ab      	asrs	r3, r5, #2
 800f166:	4293      	cmp	r3, r2
 800f168:	d30c      	bcc.n	800f184 <__ssvfscanf_r+0x4dc>
 800f16a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f16c:	00d1      	lsls	r1, r2, #3
 800f16e:	f002 f895 	bl	801129c <realloc>
 800f172:	6338      	str	r0, [r7, #48]	; 0x30
 800f174:	2800      	cmp	r0, #0
 800f176:	d100      	bne.n	800f17a <__ssvfscanf_r+0x4d2>
 800f178:	e75e      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	1944      	adds	r4, r0, r5
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	6030      	str	r0, [r6, #0]
 800f182:	61fb      	str	r3, [r7, #28]
 800f184:	3404      	adds	r4, #4
 800f186:	2500      	movs	r5, #0
 800f188:	e010      	b.n	800f1ac <__ssvfscanf_r+0x504>
 800f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18c:	613b      	str	r3, [r7, #16]
 800f18e:	2300      	movs	r3, #0
 800f190:	001e      	movs	r6, r3
 800f192:	001c      	movs	r4, r3
 800f194:	61fb      	str	r3, [r7, #28]
 800f196:	633b      	str	r3, [r7, #48]	; 0x30
 800f198:	e78f      	b.n	800f0ba <__ssvfscanf_r+0x412>
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	001e      	movs	r6, r3
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1a2:	e78a      	b.n	800f0ba <__ssvfscanf_r+0x412>
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	68fd      	ldr	r5, [r7, #12]
 800f1a8:	3302      	adds	r3, #2
 800f1aa:	d1c5      	bne.n	800f138 <__ssvfscanf_r+0x490>
 800f1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	dc12      	bgt.n	800f1da <__ssvfscanf_r+0x532>
 800f1b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f1b8:	f002 fc84 	bl	8011ac4 <__ssrefill_r>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d00c      	beq.n	800f1da <__ssvfscanf_r+0x532>
 800f1c0:	2d00      	cmp	r5, #0
 800f1c2:	d000      	beq.n	800f1c6 <__ssvfscanf_r+0x51e>
 800f1c4:	e63f      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	d10c      	bne.n	800f1e4 <__ssvfscanf_r+0x53c>
 800f1ca:	6a3b      	ldr	r3, [r7, #32]
 800f1cc:	425a      	negs	r2, r3
 800f1ce:	4153      	adcs	r3, r2
 800f1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1d2:	18d3      	adds	r3, r2, r3
 800f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	e6de      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800f1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d000      	beq.n	800f1e2 <__ssvfscanf_r+0x53a>
 800f1e0:	e76c      	b.n	800f0bc <__ssvfscanf_r+0x414>
 800f1e2:	e7f0      	b.n	800f1c6 <__ssvfscanf_r+0x51e>
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	69fa      	ldr	r2, [r7, #28]
 800f1e8:	1ae1      	subs	r1, r4, r3
 800f1ea:	108b      	asrs	r3, r1, #2
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d9ec      	bls.n	800f1ca <__ssvfscanf_r+0x522>
 800f1f0:	6830      	ldr	r0, [r6, #0]
 800f1f2:	f002 f853 	bl	801129c <realloc>
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d0e7      	beq.n	800f1ca <__ssvfscanf_r+0x522>
 800f1fa:	6030      	str	r0, [r6, #0]
 800f1fc:	e7e5      	b.n	800f1ca <__ssvfscanf_r+0x522>
 800f1fe:	6a3b      	ldr	r3, [r7, #32]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d025      	beq.n	800f250 <__ssvfscanf_r+0x5a8>
 800f204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f20c:	6812      	ldr	r2, [r2, #0]
 800f20e:	4299      	cmp	r1, r3
 800f210:	dd11      	ble.n	800f236 <__ssvfscanf_r+0x58e>
 800f212:	1ac9      	subs	r1, r1, r3
 800f214:	18d2      	adds	r2, r2, r3
 800f216:	18e4      	adds	r4, r4, r3
 800f218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f21a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f21c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f21e:	0019      	movs	r1, r3
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	f002 fc4f 	bl	8011ac4 <__ssrefill_r>
 800f226:	2800      	cmp	r0, #0
 800f228:	d0ec      	beq.n	800f204 <__ssvfscanf_r+0x55c>
 800f22a:	2c00      	cmp	r4, #0
 800f22c:	d100      	bne.n	800f230 <__ssvfscanf_r+0x588>
 800f22e:	e60a      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	191b      	adds	r3, r3, r4
 800f234:	e5ff      	b.n	800ee36 <__ssvfscanf_r+0x18e>
 800f236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f238:	1a5b      	subs	r3, r3, r1
 800f23a:	1864      	adds	r4, r4, r1
 800f23c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f23e:	604b      	str	r3, [r1, #4]
 800f240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f242:	18d2      	adds	r2, r2, r3
 800f244:	600a      	str	r2, [r1, #0]
 800f246:	e7f3      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f248:	0800bf45 	.word	0x0800bf45
 800f24c:	0000fff6 	.word	0x0000fff6
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	0034      	movs	r4, r6
 800f254:	cb20      	ldmia	r3!, {r5}
 800f256:	633b      	str	r3, [r7, #48]	; 0x30
 800f258:	2380      	movs	r3, #128	; 0x80
 800f25a:	401c      	ands	r4, r3
 800f25c:	421e      	tst	r6, r3
 800f25e:	d028      	beq.n	800f2b2 <__ssvfscanf_r+0x60a>
 800f260:	2d00      	cmp	r5, #0
 800f262:	d100      	bne.n	800f266 <__ssvfscanf_r+0x5be>
 800f264:	e61d      	b.n	800eea2 <__ssvfscanf_r+0x1fa>
 800f266:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f268:	f7fb fd76 	bl	800ad58 <malloc>
 800f26c:	6238      	str	r0, [r7, #32]
 800f26e:	2800      	cmp	r0, #0
 800f270:	d100      	bne.n	800f274 <__ssvfscanf_r+0x5cc>
 800f272:	e5ef      	b.n	800ee54 <__ssvfscanf_r+0x1ac>
 800f274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f276:	6028      	str	r0, [r5, #0]
 800f278:	88de      	ldrh	r6, [r3, #6]
 800f27a:	889c      	ldrh	r4, [r3, #4]
 800f27c:	6818      	ldr	r0, [r3, #0]
 800f27e:	42a6      	cmp	r6, r4
 800f280:	d30e      	bcc.n	800f2a0 <__ssvfscanf_r+0x5f8>
 800f282:	4bbf      	ldr	r3, [pc, #764]	; (800f580 <__ssvfscanf_r+0x8d8>)
 800f284:	429c      	cmp	r4, r3
 800f286:	d900      	bls.n	800f28a <__ssvfscanf_r+0x5e2>
 800f288:	e6df      	b.n	800f04a <__ssvfscanf_r+0x3a2>
 800f28a:	3408      	adds	r4, #8
 800f28c:	b2a4      	uxth	r4, r4
 800f28e:	00a1      	lsls	r1, r4, #2
 800f290:	f002 f804 	bl	801129c <realloc>
 800f294:	2800      	cmp	r0, #0
 800f296:	d100      	bne.n	800f29a <__ssvfscanf_r+0x5f2>
 800f298:	e6d7      	b.n	800f04a <__ssvfscanf_r+0x3a2>
 800f29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f29c:	6018      	str	r0, [r3, #0]
 800f29e:	809c      	strh	r4, [r3, #4]
 800f2a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a2:	1c72      	adds	r2, r6, #1
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2a8:	00b6      	lsls	r6, r6, #2
 800f2aa:	002c      	movs	r4, r5
 800f2ac:	50f5      	str	r5, [r6, r3]
 800f2ae:	6a3d      	ldr	r5, [r7, #32]
 800f2b0:	80ca      	strh	r2, [r1, #6]
 800f2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2b4:	0029      	movs	r1, r5
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2be:	f002 fc20 	bl	8011b02 <_sfread_r>
 800f2c2:	1e05      	subs	r5, r0, #0
 800f2c4:	d100      	bne.n	800f2c8 <__ssvfscanf_r+0x620>
 800f2c6:	e5be      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f2c8:	2c00      	cmp	r4, #0
 800f2ca:	d009      	beq.n	800f2e0 <__ssvfscanf_r+0x638>
 800f2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ce:	4283      	cmp	r3, r0
 800f2d0:	d906      	bls.n	800f2e0 <__ssvfscanf_r+0x638>
 800f2d2:	0001      	movs	r1, r0
 800f2d4:	6820      	ldr	r0, [r4, #0]
 800f2d6:	f001 ffe1 	bl	801129c <realloc>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	d000      	beq.n	800f2e0 <__ssvfscanf_r+0x638>
 800f2de:	6020      	str	r0, [r4, #0]
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e2:	195b      	adds	r3, r3, r5
 800f2e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	e4f8      	b.n	800ecde <__ssvfscanf_r+0x36>
 800f2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <__ssvfscanf_r+0x64e>
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2f6:	2210      	movs	r2, #16
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	0034      	movs	r4, r6
 800f2fc:	4032      	ands	r2, r6
 800f2fe:	401c      	ands	r4, r3
 800f300:	623a      	str	r2, [r7, #32]
 800f302:	421e      	tst	r6, r3
 800f304:	d100      	bne.n	800f308 <__ssvfscanf_r+0x660>
 800f306:	e116      	b.n	800f536 <__ssvfscanf_r+0x88e>
 800f308:	2a00      	cmp	r2, #0
 800f30a:	d000      	beq.n	800f30e <__ssvfscanf_r+0x666>
 800f30c:	e0b0      	b.n	800f470 <__ssvfscanf_r+0x7c8>
 800f30e:	2080      	movs	r0, #128	; 0x80
 800f310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f312:	cb10      	ldmia	r3!, {r4}
 800f314:	60fb      	str	r3, [r7, #12]
 800f316:	4206      	tst	r6, r0
 800f318:	d100      	bne.n	800f31c <__ssvfscanf_r+0x674>
 800f31a:	e0b2      	b.n	800f482 <__ssvfscanf_r+0x7da>
 800f31c:	2c00      	cmp	r4, #0
 800f31e:	d100      	bne.n	800f322 <__ssvfscanf_r+0x67a>
 800f320:	e68d      	b.n	800f03e <__ssvfscanf_r+0x396>
 800f322:	f7fb fd19 	bl	800ad58 <malloc>
 800f326:	6338      	str	r0, [r7, #48]	; 0x30
 800f328:	2800      	cmp	r0, #0
 800f32a:	d100      	bne.n	800f32e <__ssvfscanf_r+0x686>
 800f32c:	e684      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	6023      	str	r3, [r4, #0]
 800f332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f334:	88de      	ldrh	r6, [r3, #6]
 800f336:	889d      	ldrh	r5, [r3, #4]
 800f338:	42ae      	cmp	r6, r5
 800f33a:	d310      	bcc.n	800f35e <__ssvfscanf_r+0x6b6>
 800f33c:	4b90      	ldr	r3, [pc, #576]	; (800f580 <__ssvfscanf_r+0x8d8>)
 800f33e:	429d      	cmp	r5, r3
 800f340:	d900      	bls.n	800f344 <__ssvfscanf_r+0x69c>
 800f342:	e679      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f346:	3508      	adds	r5, #8
 800f348:	b2ad      	uxth	r5, r5
 800f34a:	6818      	ldr	r0, [r3, #0]
 800f34c:	00a9      	lsls	r1, r5, #2
 800f34e:	f001 ffa5 	bl	801129c <realloc>
 800f352:	2800      	cmp	r0, #0
 800f354:	d100      	bne.n	800f358 <__ssvfscanf_r+0x6b0>
 800f356:	e66f      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35a:	6018      	str	r0, [r3, #0]
 800f35c:	809d      	strh	r5, [r3, #4]
 800f35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f360:	1c72      	adds	r2, r6, #1
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	00b6      	lsls	r6, r6, #2
 800f366:	50f4      	str	r4, [r6, r3]
 800f368:	2320      	movs	r3, #32
 800f36a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f36c:	0026      	movs	r6, r4
 800f36e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f370:	80ca      	strh	r2, [r1, #6]
 800f372:	613b      	str	r3, [r7, #16]
 800f374:	2500      	movs	r5, #0
 800f376:	f7fd f8a1 	bl	800c4bc <__locale_mb_cur_max>
 800f37a:	42a8      	cmp	r0, r5
 800f37c:	d100      	bne.n	800f380 <__ssvfscanf_r+0x6d8>
 800f37e:	e562      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f380:	1c6a      	adds	r2, r5, #1
 800f382:	61fa      	str	r2, [r7, #28]
 800f384:	228c      	movs	r2, #140	; 0x8c
 800f386:	2048      	movs	r0, #72	; 0x48
 800f388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f38a:	0052      	lsls	r2, r2, #1
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	1812      	adds	r2, r2, r0
 800f390:	7819      	ldrb	r1, [r3, #0]
 800f392:	19d2      	adds	r2, r2, r7
 800f394:	5551      	strb	r1, [r2, r5]
 800f396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f398:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f39a:	6852      	ldr	r2, [r2, #4]
 800f39c:	3301      	adds	r3, #1
 800f39e:	600b      	str	r3, [r1, #0]
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	3a01      	subs	r2, #1
 800f3a4:	604a      	str	r2, [r1, #4]
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d102      	bne.n	800f3b0 <__ssvfscanf_r+0x708>
 800f3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	d006      	beq.n	800f3be <__ssvfscanf_r+0x716>
 800f3b0:	2048      	movs	r0, #72	; 0x48
 800f3b2:	2208      	movs	r2, #8
 800f3b4:	1813      	adds	r3, r2, r0
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	19d8      	adds	r0, r3, r7
 800f3ba:	f7fc fff3 	bl	800c3a4 <memset>
 800f3be:	2148      	movs	r1, #72	; 0x48
 800f3c0:	2308      	movs	r3, #8
 800f3c2:	228c      	movs	r2, #140	; 0x8c
 800f3c4:	185b      	adds	r3, r3, r1
 800f3c6:	0052      	lsls	r2, r2, #1
 800f3c8:	19db      	adds	r3, r3, r7
 800f3ca:	1852      	adds	r2, r2, r1
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	0021      	movs	r1, r4
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3d4:	19d2      	adds	r2, r2, r7
 800f3d6:	f002 fa75 	bl	80118c4 <_mbrtowc_r>
 800f3da:	0003      	movs	r3, r0
 800f3dc:	62b8      	str	r0, [r7, #40]	; 0x28
 800f3de:	3301      	adds	r3, #1
 800f3e0:	d100      	bne.n	800f3e4 <__ssvfscanf_r+0x73c>
 800f3e2:	e530      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d151      	bne.n	800f48c <__ssvfscanf_r+0x7e4>
 800f3e8:	6020      	str	r0, [r4, #0]
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	6825      	ldr	r5, [r4, #0]
 800f3ee:	425b      	negs	r3, r3
 800f3f0:	1c6a      	adds	r2, r5, #1
 800f3f2:	d01a      	beq.n	800f42a <__ssvfscanf_r+0x782>
 800f3f4:	2048      	movs	r0, #72	; 0x48
 800f3f6:	3311      	adds	r3, #17
 800f3f8:	181b      	adds	r3, r3, r0
 800f3fa:	2208      	movs	r2, #8
 800f3fc:	2100      	movs	r1, #0
 800f3fe:	19d8      	adds	r0, r3, r7
 800f400:	f7fc ffd0 	bl	800c3a4 <memset>
 800f404:	4b5f      	ldr	r3, [pc, #380]	; (800f584 <__ssvfscanf_r+0x8dc>)
 800f406:	2148      	movs	r1, #72	; 0x48
 800f408:	33e0      	adds	r3, #224	; 0xe0
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	2310      	movs	r3, #16
 800f40e:	4694      	mov	ip, r2
 800f410:	185b      	adds	r3, r3, r1
 800f412:	002a      	movs	r2, r5
 800f414:	19db      	adds	r3, r3, r7
 800f416:	4665      	mov	r5, ip
 800f418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f41a:	1879      	adds	r1, r7, r1
 800f41c:	47a8      	blx	r5
 800f41e:	2300      	movs	r3, #0
 800f420:	2801      	cmp	r0, #1
 800f422:	d102      	bne.n	800f42a <__ssvfscanf_r+0x782>
 800f424:	3348      	adds	r3, #72	; 0x48
 800f426:	18fb      	adds	r3, r7, r3
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	2218      	movs	r2, #24
 800f42c:	2148      	movs	r1, #72	; 0x48
 800f42e:	1852      	adds	r2, r2, r1
 800f430:	19d2      	adds	r2, r2, r7
 800f432:	5cd3      	ldrb	r3, [r2, r3]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d149      	bne.n	800f4cc <__ssvfscanf_r+0x824>
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d137      	bne.n	800f4ae <__ssvfscanf_r+0x806>
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d113      	bne.n	800f46c <__ssvfscanf_r+0x7c4>
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	2e00      	cmp	r6, #0
 800f448:	d00d      	beq.n	800f466 <__ssvfscanf_r+0x7be>
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	1ae4      	subs	r4, r4, r3
 800f450:	10a3      	asrs	r3, r4, #2
 800f452:	3301      	adds	r3, #1
 800f454:	429a      	cmp	r2, r3
 800f456:	d906      	bls.n	800f466 <__ssvfscanf_r+0x7be>
 800f458:	6830      	ldr	r0, [r6, #0]
 800f45a:	1d21      	adds	r1, r4, #4
 800f45c:	f001 ff1e 	bl	801129c <realloc>
 800f460:	2800      	cmp	r0, #0
 800f462:	d000      	beq.n	800f466 <__ssvfscanf_r+0x7be>
 800f464:	6030      	str	r0, [r6, #0]
 800f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f468:	3301      	adds	r3, #1
 800f46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	e593      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	60fb      	str	r3, [r7, #12]
 800f474:	2300      	movs	r3, #0
 800f476:	001e      	movs	r6, r3
 800f478:	613b      	str	r3, [r7, #16]
 800f47a:	633b      	str	r3, [r7, #48]	; 0x30
 800f47c:	334c      	adds	r3, #76	; 0x4c
 800f47e:	18fc      	adds	r4, r7, r3
 800f480:	e778      	b.n	800f374 <__ssvfscanf_r+0x6cc>
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	001e      	movs	r6, r3
 800f486:	613b      	str	r3, [r7, #16]
 800f488:	633b      	str	r3, [r7, #48]	; 0x30
 800f48a:	e773      	b.n	800f374 <__ssvfscanf_r+0x6cc>
 800f48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48e:	69fd      	ldr	r5, [r7, #28]
 800f490:	3302      	adds	r3, #2
 800f492:	d1aa      	bne.n	800f3ea <__ssvfscanf_r+0x742>
 800f494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	dc47      	bgt.n	800f52c <__ssvfscanf_r+0x884>
 800f49c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f49e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4a0:	f002 fb10 	bl	8011ac4 <__ssrefill_r>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d041      	beq.n	800f52c <__ssvfscanf_r+0x884>
 800f4a8:	2d00      	cmp	r5, #0
 800f4aa:	d0c8      	beq.n	800f43e <__ssvfscanf_r+0x796>
 800f4ac:	e4cb      	b.n	800ee46 <__ssvfscanf_r+0x19e>
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	2248      	movs	r2, #72	; 0x48
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	61fb      	str	r3, [r7, #28]
 800f4b6:	238c      	movs	r3, #140	; 0x8c
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	189b      	adds	r3, r3, r2
 800f4bc:	69fa      	ldr	r2, [r7, #28]
 800f4be:	19db      	adds	r3, r3, r7
 800f4c0:	5cd1      	ldrb	r1, [r2, r3]
 800f4c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4c6:	f002 fac1 	bl	8011a4c <_sungetc_r>
 800f4ca:	e7b5      	b.n	800f438 <__ssvfscanf_r+0x790>
 800f4cc:	69fa      	ldr	r2, [r7, #28]
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	4694      	mov	ip, r2
 800f4d2:	4463      	add	r3, ip
 800f4d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	2b03      	cmp	r3, #3
 800f4da:	d102      	bne.n	800f4e2 <__ssvfscanf_r+0x83a>
 800f4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4de:	2b04      	cmp	r3, #4
 800f4e0:	d002      	beq.n	800f4e8 <__ssvfscanf_r+0x840>
 800f4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e4:	3b01      	subs	r3, #1
 800f4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4e8:	6a3b      	ldr	r3, [r7, #32]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d11a      	bne.n	800f524 <__ssvfscanf_r+0x87c>
 800f4ee:	3404      	adds	r4, #4
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	d019      	beq.n	800f528 <__ssvfscanf_r+0x880>
 800f4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f6:	693a      	ldr	r2, [r7, #16]
 800f4f8:	1ae3      	subs	r3, r4, r3
 800f4fa:	61fb      	str	r3, [r7, #28]
 800f4fc:	6a3d      	ldr	r5, [r7, #32]
 800f4fe:	109b      	asrs	r3, r3, #2
 800f500:	4293      	cmp	r3, r2
 800f502:	d3c7      	bcc.n	800f494 <__ssvfscanf_r+0x7ec>
 800f504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f506:	00d1      	lsls	r1, r2, #3
 800f508:	f001 fec8 	bl	801129c <realloc>
 800f50c:	6338      	str	r0, [r7, #48]	; 0x30
 800f50e:	2800      	cmp	r0, #0
 800f510:	d100      	bne.n	800f514 <__ssvfscanf_r+0x86c>
 800f512:	e591      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f514:	4684      	mov	ip, r0
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	69fc      	ldr	r4, [r7, #28]
 800f51a:	005b      	lsls	r3, r3, #1
 800f51c:	4464      	add	r4, ip
 800f51e:	6030      	str	r0, [r6, #0]
 800f520:	613b      	str	r3, [r7, #16]
 800f522:	e7b7      	b.n	800f494 <__ssvfscanf_r+0x7ec>
 800f524:	2500      	movs	r5, #0
 800f526:	e7b5      	b.n	800f494 <__ssvfscanf_r+0x7ec>
 800f528:	0035      	movs	r5, r6
 800f52a:	e7b3      	b.n	800f494 <__ssvfscanf_r+0x7ec>
 800f52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d000      	beq.n	800f534 <__ssvfscanf_r+0x88c>
 800f532:	e720      	b.n	800f376 <__ssvfscanf_r+0x6ce>
 800f534:	e783      	b.n	800f43e <__ssvfscanf_r+0x796>
 800f536:	6a3b      	ldr	r3, [r7, #32]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d025      	beq.n	800f588 <__ssvfscanf_r+0x8e0>
 800f53c:	2118      	movs	r1, #24
 800f53e:	2048      	movs	r0, #72	; 0x48
 800f540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f542:	1809      	adds	r1, r1, r0
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	19c9      	adds	r1, r1, r7
 800f548:	781a      	ldrb	r2, [r3, #0]
 800f54a:	5c8a      	ldrb	r2, [r1, r2]
 800f54c:	2a00      	cmp	r2, #0
 800f54e:	d103      	bne.n	800f558 <__ssvfscanf_r+0x8b0>
 800f550:	2c00      	cmp	r4, #0
 800f552:	d000      	beq.n	800f556 <__ssvfscanf_r+0x8ae>
 800f554:	e66c      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f556:	e4a4      	b.n	800eea2 <__ssvfscanf_r+0x1fa>
 800f558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f55a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f55c:	6852      	ldr	r2, [r2, #4]
 800f55e:	3301      	adds	r3, #1
 800f560:	600b      	str	r3, [r1, #0]
 800f562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f564:	3a01      	subs	r2, #1
 800f566:	3401      	adds	r4, #1
 800f568:	604a      	str	r2, [r1, #4]
 800f56a:	429c      	cmp	r4, r3
 800f56c:	d100      	bne.n	800f570 <__ssvfscanf_r+0x8c8>
 800f56e:	e65f      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f570:	2a00      	cmp	r2, #0
 800f572:	dce3      	bgt.n	800f53c <__ssvfscanf_r+0x894>
 800f574:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f576:	f002 faa5 	bl	8011ac4 <__ssrefill_r>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	d0de      	beq.n	800f53c <__ssvfscanf_r+0x894>
 800f57e:	e657      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f580:	0000fff6 	.word	0x0000fff6
 800f584:	20000444 	.word	0x20000444
 800f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58a:	0032      	movs	r2, r6
 800f58c:	cb20      	ldmia	r3!, {r5}
 800f58e:	61fb      	str	r3, [r7, #28]
 800f590:	2380      	movs	r3, #128	; 0x80
 800f592:	401a      	ands	r2, r3
 800f594:	421e      	tst	r6, r3
 800f596:	d100      	bne.n	800f59a <__ssvfscanf_r+0x8f2>
 800f598:	e086      	b.n	800f6a8 <__ssvfscanf_r+0xa00>
 800f59a:	2d00      	cmp	r5, #0
 800f59c:	d100      	bne.n	800f5a0 <__ssvfscanf_r+0x8f8>
 800f59e:	e480      	b.n	800eea2 <__ssvfscanf_r+0x1fa>
 800f5a0:	2020      	movs	r0, #32
 800f5a2:	f7fb fbd9 	bl	800ad58 <malloc>
 800f5a6:	6338      	str	r0, [r7, #48]	; 0x30
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d100      	bne.n	800f5ae <__ssvfscanf_r+0x906>
 800f5ac:	e452      	b.n	800ee54 <__ssvfscanf_r+0x1ac>
 800f5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5b0:	6028      	str	r0, [r5, #0]
 800f5b2:	88de      	ldrh	r6, [r3, #6]
 800f5b4:	889c      	ldrh	r4, [r3, #4]
 800f5b6:	6818      	ldr	r0, [r3, #0]
 800f5b8:	42a6      	cmp	r6, r4
 800f5ba:	d30e      	bcc.n	800f5da <__ssvfscanf_r+0x932>
 800f5bc:	4bc3      	ldr	r3, [pc, #780]	; (800f8cc <__ssvfscanf_r+0xc24>)
 800f5be:	429c      	cmp	r4, r3
 800f5c0:	d900      	bls.n	800f5c4 <__ssvfscanf_r+0x91c>
 800f5c2:	e542      	b.n	800f04a <__ssvfscanf_r+0x3a2>
 800f5c4:	3408      	adds	r4, #8
 800f5c6:	b2a4      	uxth	r4, r4
 800f5c8:	00a1      	lsls	r1, r4, #2
 800f5ca:	f001 fe67 	bl	801129c <realloc>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d100      	bne.n	800f5d4 <__ssvfscanf_r+0x92c>
 800f5d2:	e53a      	b.n	800f04a <__ssvfscanf_r+0x3a2>
 800f5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d6:	6018      	str	r0, [r3, #0]
 800f5d8:	809c      	strh	r4, [r3, #4]
 800f5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5dc:	1c72      	adds	r2, r6, #1
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	00b6      	lsls	r6, r6, #2
 800f5e2:	50f5      	str	r5, [r6, r3]
 800f5e4:	2320      	movs	r3, #32
 800f5e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5e8:	002e      	movs	r6, r5
 800f5ea:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f5ec:	80ca      	strh	r2, [r1, #6]
 800f5ee:	623b      	str	r3, [r7, #32]
 800f5f0:	002c      	movs	r4, r5
 800f5f2:	2118      	movs	r1, #24
 800f5f4:	2048      	movs	r0, #72	; 0x48
 800f5f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5f8:	1809      	adds	r1, r1, r0
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	19c9      	adds	r1, r1, r7
 800f5fe:	781a      	ldrb	r2, [r3, #0]
 800f600:	5c8a      	ldrb	r2, [r1, r2]
 800f602:	2a00      	cmp	r2, #0
 800f604:	d101      	bne.n	800f60a <__ssvfscanf_r+0x962>
 800f606:	633d      	str	r5, [r7, #48]	; 0x30
 800f608:	e031      	b.n	800f66e <__ssvfscanf_r+0x9c6>
 800f60a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f60c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f60e:	6852      	ldr	r2, [r2, #4]
 800f610:	3a01      	subs	r2, #1
 800f612:	604a      	str	r2, [r1, #4]
 800f614:	1c5a      	adds	r2, r3, #1
 800f616:	600a      	str	r2, [r1, #0]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	1c6a      	adds	r2, r5, #1
 800f61c:	633a      	str	r2, [r7, #48]	; 0x30
 800f61e:	702b      	strb	r3, [r5, #0]
 800f620:	2e00      	cmp	r6, #0
 800f622:	d010      	beq.n	800f646 <__ssvfscanf_r+0x99e>
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	1b15      	subs	r5, r2, r4
 800f628:	429d      	cmp	r5, r3
 800f62a:	d30c      	bcc.n	800f646 <__ssvfscanf_r+0x99e>
 800f62c:	005b      	lsls	r3, r3, #1
 800f62e:	0020      	movs	r0, r4
 800f630:	0019      	movs	r1, r3
 800f632:	623b      	str	r3, [r7, #32]
 800f634:	f001 fe32 	bl	801129c <realloc>
 800f638:	1e04      	subs	r4, r0, #0
 800f63a:	d101      	bne.n	800f640 <__ssvfscanf_r+0x998>
 800f63c:	f7ff fc0a 	bl	800ee54 <__ssvfscanf_r+0x1ac>
 800f640:	1943      	adds	r3, r0, r5
 800f642:	633b      	str	r3, [r7, #48]	; 0x30
 800f644:	6030      	str	r0, [r6, #0]
 800f646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f648:	3b01      	subs	r3, #1
 800f64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00e      	beq.n	800f66e <__ssvfscanf_r+0x9c6>
 800f650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	2b00      	cmp	r3, #0
 800f656:	dc2a      	bgt.n	800f6ae <__ssvfscanf_r+0xa06>
 800f658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f65a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f65c:	f002 fa32 	bl	8011ac4 <__ssrefill_r>
 800f660:	2800      	cmp	r0, #0
 800f662:	d024      	beq.n	800f6ae <__ssvfscanf_r+0xa06>
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	42a3      	cmp	r3, r4
 800f668:	d101      	bne.n	800f66e <__ssvfscanf_r+0x9c6>
 800f66a:	f7ff fbec 	bl	800ee46 <__ssvfscanf_r+0x19e>
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	1b1d      	subs	r5, r3, r4
 800f672:	42a3      	cmp	r3, r4
 800f674:	d101      	bne.n	800f67a <__ssvfscanf_r+0x9d2>
 800f676:	f7ff fc14 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800f67a:	2300      	movs	r3, #0
 800f67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f67e:	7013      	strb	r3, [r2, #0]
 800f680:	429e      	cmp	r6, r3
 800f682:	d009      	beq.n	800f698 <__ssvfscanf_r+0x9f0>
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	1c69      	adds	r1, r5, #1
 800f688:	428b      	cmp	r3, r1
 800f68a:	d905      	bls.n	800f698 <__ssvfscanf_r+0x9f0>
 800f68c:	6830      	ldr	r0, [r6, #0]
 800f68e:	f001 fe05 	bl	801129c <realloc>
 800f692:	2800      	cmp	r0, #0
 800f694:	d000      	beq.n	800f698 <__ssvfscanf_r+0x9f0>
 800f696:	6030      	str	r0, [r6, #0]
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	3301      	adds	r3, #1
 800f69c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a0:	195b      	adds	r3, r3, r5
 800f6a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	e477      	b.n	800ef98 <__ssvfscanf_r+0x2f0>
 800f6a8:	0016      	movs	r6, r2
 800f6aa:	623a      	str	r2, [r7, #32]
 800f6ac:	e7a0      	b.n	800f5f0 <__ssvfscanf_r+0x948>
 800f6ae:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f6b0:	e79f      	b.n	800f5f2 <__ssvfscanf_r+0x94a>
 800f6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <__ssvfscanf_r+0xa14>
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6bc:	2210      	movs	r2, #16
 800f6be:	2301      	movs	r3, #1
 800f6c0:	0034      	movs	r4, r6
 800f6c2:	4032      	ands	r2, r6
 800f6c4:	401c      	ands	r4, r3
 800f6c6:	61fa      	str	r2, [r7, #28]
 800f6c8:	421e      	tst	r6, r3
 800f6ca:	d100      	bne.n	800f6ce <__ssvfscanf_r+0xa26>
 800f6cc:	e102      	b.n	800f8d4 <__ssvfscanf_r+0xc2c>
 800f6ce:	2a00      	cmp	r2, #0
 800f6d0:	d000      	beq.n	800f6d4 <__ssvfscanf_r+0xa2c>
 800f6d2:	e09f      	b.n	800f814 <__ssvfscanf_r+0xb6c>
 800f6d4:	2080      	movs	r0, #128	; 0x80
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d8:	cb10      	ldmia	r3!, {r4}
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	4206      	tst	r6, r0
 800f6de:	d100      	bne.n	800f6e2 <__ssvfscanf_r+0xa3a>
 800f6e0:	e0a1      	b.n	800f826 <__ssvfscanf_r+0xb7e>
 800f6e2:	2c00      	cmp	r4, #0
 800f6e4:	d100      	bne.n	800f6e8 <__ssvfscanf_r+0xa40>
 800f6e6:	e4aa      	b.n	800f03e <__ssvfscanf_r+0x396>
 800f6e8:	f7fb fb36 	bl	800ad58 <malloc>
 800f6ec:	6338      	str	r0, [r7, #48]	; 0x30
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d100      	bne.n	800f6f4 <__ssvfscanf_r+0xa4c>
 800f6f2:	e4a1      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	6023      	str	r3, [r4, #0]
 800f6f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6fa:	88de      	ldrh	r6, [r3, #6]
 800f6fc:	889d      	ldrh	r5, [r3, #4]
 800f6fe:	42ae      	cmp	r6, r5
 800f700:	d310      	bcc.n	800f724 <__ssvfscanf_r+0xa7c>
 800f702:	4b72      	ldr	r3, [pc, #456]	; (800f8cc <__ssvfscanf_r+0xc24>)
 800f704:	429d      	cmp	r5, r3
 800f706:	d900      	bls.n	800f70a <__ssvfscanf_r+0xa62>
 800f708:	e496      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70c:	3508      	adds	r5, #8
 800f70e:	b2ad      	uxth	r5, r5
 800f710:	6818      	ldr	r0, [r3, #0]
 800f712:	00a9      	lsls	r1, r5, #2
 800f714:	f001 fdc2 	bl	801129c <realloc>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d100      	bne.n	800f71e <__ssvfscanf_r+0xa76>
 800f71c:	e48c      	b.n	800f038 <__ssvfscanf_r+0x390>
 800f71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f720:	6018      	str	r0, [r3, #0]
 800f722:	809d      	strh	r5, [r3, #4]
 800f724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f726:	1c72      	adds	r2, r6, #1
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	00b6      	lsls	r6, r6, #2
 800f72c:	50f4      	str	r4, [r6, r3]
 800f72e:	2320      	movs	r3, #32
 800f730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f732:	0025      	movs	r5, r4
 800f734:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f736:	80ca      	strh	r2, [r1, #6]
 800f738:	613b      	str	r3, [r7, #16]
 800f73a:	2300      	movs	r3, #0
 800f73c:	623b      	str	r3, [r7, #32]
 800f73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f740:	4a63      	ldr	r2, [pc, #396]	; (800f8d0 <__ssvfscanf_r+0xc28>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	5cd3      	ldrb	r3, [r2, r3]
 800f748:	2208      	movs	r2, #8
 800f74a:	4213      	tst	r3, r2
 800f74c:	d149      	bne.n	800f7e2 <__ssvfscanf_r+0xb3a>
 800f74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f750:	2b00      	cmp	r3, #0
 800f752:	d046      	beq.n	800f7e2 <__ssvfscanf_r+0xb3a>
 800f754:	f7fc feb2 	bl	800c4bc <__locale_mb_cur_max>
 800f758:	6a3b      	ldr	r3, [r7, #32]
 800f75a:	4298      	cmp	r0, r3
 800f75c:	d101      	bne.n	800f762 <__ssvfscanf_r+0xaba>
 800f75e:	f7ff fb72 	bl	800ee46 <__ssvfscanf_r+0x19e>
 800f762:	6a3a      	ldr	r2, [r7, #32]
 800f764:	2048      	movs	r0, #72	; 0x48
 800f766:	1c56      	adds	r6, r2, #1
 800f768:	228c      	movs	r2, #140	; 0x8c
 800f76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f76c:	0052      	lsls	r2, r2, #1
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	1812      	adds	r2, r2, r0
 800f772:	7819      	ldrb	r1, [r3, #0]
 800f774:	6a38      	ldr	r0, [r7, #32]
 800f776:	19d2      	adds	r2, r2, r7
 800f778:	5411      	strb	r1, [r2, r0]
 800f77a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f77c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f77e:	6852      	ldr	r2, [r2, #4]
 800f780:	3301      	adds	r3, #1
 800f782:	600b      	str	r3, [r1, #0]
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	3a01      	subs	r2, #1
 800f788:	604a      	str	r2, [r1, #4]
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d102      	bne.n	800f794 <__ssvfscanf_r+0xaec>
 800f78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f790:	2b04      	cmp	r3, #4
 800f792:	d007      	beq.n	800f7a4 <__ssvfscanf_r+0xafc>
 800f794:	2048      	movs	r0, #72	; 0x48
 800f796:	2310      	movs	r3, #16
 800f798:	181b      	adds	r3, r3, r0
 800f79a:	2208      	movs	r2, #8
 800f79c:	2100      	movs	r1, #0
 800f79e:	19d8      	adds	r0, r3, r7
 800f7a0:	f7fc fe00 	bl	800c3a4 <memset>
 800f7a4:	2148      	movs	r1, #72	; 0x48
 800f7a6:	2310      	movs	r3, #16
 800f7a8:	228c      	movs	r2, #140	; 0x8c
 800f7aa:	185b      	adds	r3, r3, r1
 800f7ac:	0052      	lsls	r2, r2, #1
 800f7ae:	19db      	adds	r3, r3, r7
 800f7b0:	1852      	adds	r2, r2, r1
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	0021      	movs	r1, r4
 800f7b6:	0033      	movs	r3, r6
 800f7b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f7ba:	19d2      	adds	r2, r2, r7
 800f7bc:	f002 f882 	bl	80118c4 <_mbrtowc_r>
 800f7c0:	0003      	movs	r3, r0
 800f7c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	d101      	bne.n	800f7cc <__ssvfscanf_r+0xb24>
 800f7c8:	f7ff fb3d 	bl	800ee46 <__ssvfscanf_r+0x19e>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d12f      	bne.n	800f830 <__ssvfscanf_r+0xb88>
 800f7d0:	6020      	str	r0, [r4, #0]
 800f7d2:	6820      	ldr	r0, [r4, #0]
 800f7d4:	f002 f894 	bl	8011900 <iswspace>
 800f7d8:	6238      	str	r0, [r7, #32]
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d04a      	beq.n	800f874 <__ssvfscanf_r+0xbcc>
 800f7de:	2e00      	cmp	r6, #0
 800f7e0:	d13c      	bne.n	800f85c <__ssvfscanf_r+0xbb4>
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d000      	beq.n	800f7ea <__ssvfscanf_r+0xb42>
 800f7e8:	e640      	b.n	800f46c <__ssvfscanf_r+0x7c4>
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	2d00      	cmp	r5, #0
 800f7ee:	d100      	bne.n	800f7f2 <__ssvfscanf_r+0xb4a>
 800f7f0:	e639      	b.n	800f466 <__ssvfscanf_r+0x7be>
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	1ae4      	subs	r4, r4, r3
 800f7f8:	10a3      	asrs	r3, r4, #2
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d800      	bhi.n	800f802 <__ssvfscanf_r+0xb5a>
 800f800:	e631      	b.n	800f466 <__ssvfscanf_r+0x7be>
 800f802:	6828      	ldr	r0, [r5, #0]
 800f804:	1d21      	adds	r1, r4, #4
 800f806:	f001 fd49 	bl	801129c <realloc>
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d100      	bne.n	800f810 <__ssvfscanf_r+0xb68>
 800f80e:	e62a      	b.n	800f466 <__ssvfscanf_r+0x7be>
 800f810:	6028      	str	r0, [r5, #0]
 800f812:	e628      	b.n	800f466 <__ssvfscanf_r+0x7be>
 800f814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	2300      	movs	r3, #0
 800f81a:	001d      	movs	r5, r3
 800f81c:	613b      	str	r3, [r7, #16]
 800f81e:	633b      	str	r3, [r7, #48]	; 0x30
 800f820:	334c      	adds	r3, #76	; 0x4c
 800f822:	18fc      	adds	r4, r7, r3
 800f824:	e789      	b.n	800f73a <__ssvfscanf_r+0xa92>
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	001d      	movs	r5, r3
 800f82a:	613b      	str	r3, [r7, #16]
 800f82c:	633b      	str	r3, [r7, #48]	; 0x30
 800f82e:	e784      	b.n	800f73a <__ssvfscanf_r+0xa92>
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	623e      	str	r6, [r7, #32]
 800f834:	3302      	adds	r3, #2
 800f836:	d1cc      	bne.n	800f7d2 <__ssvfscanf_r+0xb2a>
 800f838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	dd00      	ble.n	800f842 <__ssvfscanf_r+0xb9a>
 800f840:	e77d      	b.n	800f73e <__ssvfscanf_r+0xa96>
 800f842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f844:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f846:	f002 f93d 	bl	8011ac4 <__ssrefill_r>
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d100      	bne.n	800f850 <__ssvfscanf_r+0xba8>
 800f84e:	e776      	b.n	800f73e <__ssvfscanf_r+0xa96>
 800f850:	6a3b      	ldr	r3, [r7, #32]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <__ssvfscanf_r+0xbb2>
 800f856:	f7ff faf6 	bl	800ee46 <__ssvfscanf_r+0x19e>
 800f85a:	e7c2      	b.n	800f7e2 <__ssvfscanf_r+0xb3a>
 800f85c:	238c      	movs	r3, #140	; 0x8c
 800f85e:	2248      	movs	r2, #72	; 0x48
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	189b      	adds	r3, r3, r2
 800f864:	3e01      	subs	r6, #1
 800f866:	19db      	adds	r3, r3, r7
 800f868:	5cf1      	ldrb	r1, [r6, r3]
 800f86a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f86c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f86e:	f002 f8ed 	bl	8011a4c <_sungetc_r>
 800f872:	e7b4      	b.n	800f7de <__ssvfscanf_r+0xb36>
 800f874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f876:	199b      	adds	r3, r3, r6
 800f878:	63bb      	str	r3, [r7, #56]	; 0x38
 800f87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d102      	bne.n	800f886 <__ssvfscanf_r+0xbde>
 800f880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f882:	2b04      	cmp	r3, #4
 800f884:	d002      	beq.n	800f88c <__ssvfscanf_r+0xbe4>
 800f886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f888:	3b01      	subs	r3, #1
 800f88a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1d2      	bne.n	800f838 <__ssvfscanf_r+0xb90>
 800f892:	3404      	adds	r4, #4
 800f894:	2d00      	cmp	r5, #0
 800f896:	d016      	beq.n	800f8c6 <__ssvfscanf_r+0xc1e>
 800f898:	69fa      	ldr	r2, [r7, #28]
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	623a      	str	r2, [r7, #32]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	1ae6      	subs	r6, r4, r3
 800f8a2:	10b3      	asrs	r3, r6, #2
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d3c7      	bcc.n	800f838 <__ssvfscanf_r+0xb90>
 800f8a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8aa:	00d1      	lsls	r1, r2, #3
 800f8ac:	f001 fcf6 	bl	801129c <realloc>
 800f8b0:	6338      	str	r0, [r7, #48]	; 0x30
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d101      	bne.n	800f8ba <__ssvfscanf_r+0xc12>
 800f8b6:	f7ff fbbf 	bl	800f038 <__ssvfscanf_r+0x390>
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	1984      	adds	r4, r0, r6
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	6028      	str	r0, [r5, #0]
 800f8c2:	613b      	str	r3, [r7, #16]
 800f8c4:	e7b8      	b.n	800f838 <__ssvfscanf_r+0xb90>
 800f8c6:	623d      	str	r5, [r7, #32]
 800f8c8:	e7b6      	b.n	800f838 <__ssvfscanf_r+0xb90>
 800f8ca:	46c0      	nop			; (mov r8, r8)
 800f8cc:	0000fff6 	.word	0x0000fff6
 800f8d0:	08014b19 	.word	0x08014b19
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d01c      	beq.n	800f914 <__ssvfscanf_r+0xc6c>
 800f8da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8dc:	49bf      	ldr	r1, [pc, #764]	; (800fbdc <__ssvfscanf_r+0xf34>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	781a      	ldrb	r2, [r3, #0]
 800f8e2:	5c8a      	ldrb	r2, [r1, r2]
 800f8e4:	2108      	movs	r1, #8
 800f8e6:	420a      	tst	r2, r1
 800f8e8:	d000      	beq.n	800f8ec <__ssvfscanf_r+0xc44>
 800f8ea:	e4a1      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f8ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8f0:	6852      	ldr	r2, [r2, #4]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	600b      	str	r3, [r1, #0]
 800f8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f8:	3a01      	subs	r2, #1
 800f8fa:	3401      	adds	r4, #1
 800f8fc:	604a      	str	r2, [r1, #4]
 800f8fe:	429c      	cmp	r4, r3
 800f900:	d100      	bne.n	800f904 <__ssvfscanf_r+0xc5c>
 800f902:	e495      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f904:	2a00      	cmp	r2, #0
 800f906:	dce8      	bgt.n	800f8da <__ssvfscanf_r+0xc32>
 800f908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f90a:	f002 f8db 	bl	8011ac4 <__ssrefill_r>
 800f90e:	2800      	cmp	r0, #0
 800f910:	d0e3      	beq.n	800f8da <__ssvfscanf_r+0xc32>
 800f912:	e48d      	b.n	800f230 <__ssvfscanf_r+0x588>
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	0032      	movs	r2, r6
 800f918:	cb10      	ldmia	r3!, {r4}
 800f91a:	61fb      	str	r3, [r7, #28]
 800f91c:	2380      	movs	r3, #128	; 0x80
 800f91e:	401a      	ands	r2, r3
 800f920:	421e      	tst	r6, r3
 800f922:	d039      	beq.n	800f998 <__ssvfscanf_r+0xcf0>
 800f924:	2c00      	cmp	r4, #0
 800f926:	d101      	bne.n	800f92c <__ssvfscanf_r+0xc84>
 800f928:	f7ff fabb 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800f92c:	2020      	movs	r0, #32
 800f92e:	f7fb fa13 	bl	800ad58 <malloc>
 800f932:	6338      	str	r0, [r7, #48]	; 0x30
 800f934:	2800      	cmp	r0, #0
 800f936:	d101      	bne.n	800f93c <__ssvfscanf_r+0xc94>
 800f938:	f7ff fa8c 	bl	800ee54 <__ssvfscanf_r+0x1ac>
 800f93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f93e:	6020      	str	r0, [r4, #0]
 800f940:	88de      	ldrh	r6, [r3, #6]
 800f942:	889d      	ldrh	r5, [r3, #4]
 800f944:	6818      	ldr	r0, [r3, #0]
 800f946:	42ae      	cmp	r6, r5
 800f948:	d310      	bcc.n	800f96c <__ssvfscanf_r+0xcc4>
 800f94a:	4ba5      	ldr	r3, [pc, #660]	; (800fbe0 <__ssvfscanf_r+0xf38>)
 800f94c:	429d      	cmp	r5, r3
 800f94e:	d901      	bls.n	800f954 <__ssvfscanf_r+0xcac>
 800f950:	f7ff fb7b 	bl	800f04a <__ssvfscanf_r+0x3a2>
 800f954:	3508      	adds	r5, #8
 800f956:	b2ad      	uxth	r5, r5
 800f958:	00a9      	lsls	r1, r5, #2
 800f95a:	f001 fc9f 	bl	801129c <realloc>
 800f95e:	2800      	cmp	r0, #0
 800f960:	d101      	bne.n	800f966 <__ssvfscanf_r+0xcbe>
 800f962:	f7ff fb72 	bl	800f04a <__ssvfscanf_r+0x3a2>
 800f966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f968:	6018      	str	r0, [r3, #0]
 800f96a:	809d      	strh	r5, [r3, #4]
 800f96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f96e:	1c72      	adds	r2, r6, #1
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	00b6      	lsls	r6, r6, #2
 800f974:	50f4      	str	r4, [r6, r3]
 800f976:	2320      	movs	r3, #32
 800f978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f97a:	0026      	movs	r6, r4
 800f97c:	80ca      	strh	r2, [r1, #6]
 800f97e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f980:	633b      	str	r3, [r7, #48]	; 0x30
 800f982:	0025      	movs	r5, r4
 800f984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f986:	4995      	ldr	r1, [pc, #596]	; (800fbdc <__ssvfscanf_r+0xf34>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	781a      	ldrb	r2, [r3, #0]
 800f98c:	5c8a      	ldrb	r2, [r1, r2]
 800f98e:	2108      	movs	r1, #8
 800f990:	420a      	tst	r2, r1
 800f992:	d004      	beq.n	800f99e <__ssvfscanf_r+0xcf6>
 800f994:	623c      	str	r4, [r7, #32]
 800f996:	e031      	b.n	800f9fc <__ssvfscanf_r+0xd54>
 800f998:	0016      	movs	r6, r2
 800f99a:	633a      	str	r2, [r7, #48]	; 0x30
 800f99c:	e7f1      	b.n	800f982 <__ssvfscanf_r+0xcda>
 800f99e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9a2:	6852      	ldr	r2, [r2, #4]
 800f9a4:	3a01      	subs	r2, #1
 800f9a6:	604a      	str	r2, [r1, #4]
 800f9a8:	1c5a      	adds	r2, r3, #1
 800f9aa:	600a      	str	r2, [r1, #0]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	1c62      	adds	r2, r4, #1
 800f9b0:	623a      	str	r2, [r7, #32]
 800f9b2:	7023      	strb	r3, [r4, #0]
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	d010      	beq.n	800f9da <__ssvfscanf_r+0xd32>
 800f9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ba:	1b54      	subs	r4, r2, r5
 800f9bc:	429c      	cmp	r4, r3
 800f9be:	d30c      	bcc.n	800f9da <__ssvfscanf_r+0xd32>
 800f9c0:	005b      	lsls	r3, r3, #1
 800f9c2:	0028      	movs	r0, r5
 800f9c4:	0019      	movs	r1, r3
 800f9c6:	633b      	str	r3, [r7, #48]	; 0x30
 800f9c8:	f001 fc68 	bl	801129c <realloc>
 800f9cc:	1e05      	subs	r5, r0, #0
 800f9ce:	d101      	bne.n	800f9d4 <__ssvfscanf_r+0xd2c>
 800f9d0:	f7ff fa40 	bl	800ee54 <__ssvfscanf_r+0x1ac>
 800f9d4:	1903      	adds	r3, r0, r4
 800f9d6:	623b      	str	r3, [r7, #32]
 800f9d8:	6030      	str	r0, [r6, #0]
 800f9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9dc:	3b01      	subs	r3, #1
 800f9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00b      	beq.n	800f9fc <__ssvfscanf_r+0xd54>
 800f9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	dd01      	ble.n	800f9f0 <__ssvfscanf_r+0xd48>
 800f9ec:	6a3c      	ldr	r4, [r7, #32]
 800f9ee:	e7c9      	b.n	800f984 <__ssvfscanf_r+0xcdc>
 800f9f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f9f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9f4:	f002 f866 	bl	8011ac4 <__ssrefill_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d0f7      	beq.n	800f9ec <__ssvfscanf_r+0xd44>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	6a3a      	ldr	r2, [r7, #32]
 800fa00:	7013      	strb	r3, [r2, #0]
 800fa02:	1b55      	subs	r5, r2, r5
 800fa04:	2e00      	cmp	r6, #0
 800fa06:	d009      	beq.n	800fa1c <__ssvfscanf_r+0xd74>
 800fa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0a:	1c69      	adds	r1, r5, #1
 800fa0c:	428b      	cmp	r3, r1
 800fa0e:	d905      	bls.n	800fa1c <__ssvfscanf_r+0xd74>
 800fa10:	6830      	ldr	r0, [r6, #0]
 800fa12:	f001 fc43 	bl	801129c <realloc>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d000      	beq.n	800fa1c <__ssvfscanf_r+0xd74>
 800fa1a:	6030      	str	r0, [r6, #0]
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	195b      	adds	r3, r3, r5
 800fa20:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa24:	3301      	adds	r3, #1
 800fa26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa28:	e63c      	b.n	800f6a4 <__ssvfscanf_r+0x9fc>
 800fa2a:	22ae      	movs	r2, #174	; 0xae
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa30:	0052      	lsls	r2, r2, #1
 800fa32:	3b01      	subs	r3, #1
 800fa34:	6239      	str	r1, [r7, #32]
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d906      	bls.n	800fa48 <__ssvfscanf_r+0xda0>
 800fa3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3c:	3b5e      	subs	r3, #94	; 0x5e
 800fa3e:	3bff      	subs	r3, #255	; 0xff
 800fa40:	623b      	str	r3, [r7, #32]
 800fa42:	235e      	movs	r3, #94	; 0x5e
 800fa44:	33ff      	adds	r3, #255	; 0xff
 800fa46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa48:	24d8      	movs	r4, #216	; 0xd8
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	2248      	movs	r2, #72	; 0x48
 800fa4e:	0124      	lsls	r4, r4, #4
 800fa50:	4334      	orrs	r4, r6
 800fa52:	2680      	movs	r6, #128	; 0x80
 800fa54:	61fb      	str	r3, [r7, #28]
 800fa56:	3319      	adds	r3, #25
 800fa58:	33ff      	adds	r3, #255	; 0xff
 800fa5a:	189b      	adds	r3, r3, r2
 800fa5c:	19dd      	adds	r5, r3, r7
 800fa5e:	00b6      	lsls	r6, r6, #2
 800fa60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	7813      	ldrb	r3, [r2, #0]
 800fa66:	2b39      	cmp	r3, #57	; 0x39
 800fa68:	d80f      	bhi.n	800fa8a <__ssvfscanf_r+0xde2>
 800fa6a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa6c:	d91b      	bls.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fa6e:	0018      	movs	r0, r3
 800fa70:	382b      	subs	r0, #43	; 0x2b
 800fa72:	280e      	cmp	r0, #14
 800fa74:	d817      	bhi.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fa76:	f7f0 fb4d 	bl	8000114 <__gnu_thumb1_case_uqi>
 800fa7a:	168f      	.short	0x168f
 800fa7c:	5416168f 	.word	0x5416168f
 800fa80:	80808080 	.word	0x80808080
 800fa84:	87808080 	.word	0x87808080
 800fa88:	87          	.byte	0x87
 800fa89:	00          	.byte	0x00
 800fa8a:	2b66      	cmp	r3, #102	; 0x66
 800fa8c:	d83a      	bhi.n	800fb04 <__ssvfscanf_r+0xe5c>
 800fa8e:	2b60      	cmp	r3, #96	; 0x60
 800fa90:	d803      	bhi.n	800fa9a <__ssvfscanf_r+0xdf2>
 800fa92:	2b46      	cmp	r3, #70	; 0x46
 800fa94:	d805      	bhi.n	800faa2 <__ssvfscanf_r+0xdfa>
 800fa96:	2b40      	cmp	r3, #64	; 0x40
 800fa98:	d905      	bls.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fa9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa9c:	290a      	cmp	r1, #10
 800fa9e:	dc71      	bgt.n	800fb84 <__ssvfscanf_r+0xedc>
 800faa0:	e001      	b.n	800faa6 <__ssvfscanf_r+0xdfe>
 800faa2:	2b58      	cmp	r3, #88	; 0x58
 800faa4:	d030      	beq.n	800fb08 <__ssvfscanf_r+0xe60>
 800faa6:	05e3      	lsls	r3, r4, #23
 800faa8:	d515      	bpl.n	800fad6 <__ssvfscanf_r+0xe2e>
 800faaa:	238c      	movs	r3, #140	; 0x8c
 800faac:	2248      	movs	r2, #72	; 0x48
 800faae:	005b      	lsls	r3, r3, #1
 800fab0:	189b      	adds	r3, r3, r2
 800fab2:	19db      	adds	r3, r3, r7
 800fab4:	429d      	cmp	r5, r3
 800fab6:	d905      	bls.n	800fac4 <__ssvfscanf_r+0xe1c>
 800fab8:	3d01      	subs	r5, #1
 800faba:	7829      	ldrb	r1, [r5, #0]
 800fabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fabe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fac0:	f001 ffc4 	bl	8011a4c <_sungetc_r>
 800fac4:	238c      	movs	r3, #140	; 0x8c
 800fac6:	2248      	movs	r2, #72	; 0x48
 800fac8:	005b      	lsls	r3, r3, #1
 800faca:	189b      	adds	r3, r3, r2
 800facc:	19db      	adds	r3, r3, r7
 800face:	429d      	cmp	r5, r3
 800fad0:	d101      	bne.n	800fad6 <__ssvfscanf_r+0xe2e>
 800fad2:	f7ff f9e6 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800fad6:	2310      	movs	r3, #16
 800fad8:	0022      	movs	r2, r4
 800fada:	401a      	ands	r2, r3
 800fadc:	421c      	tst	r4, r3
 800fade:	d171      	bne.n	800fbc4 <__ssvfscanf_r+0xf1c>
 800fae0:	218c      	movs	r1, #140	; 0x8c
 800fae2:	2048      	movs	r0, #72	; 0x48
 800fae4:	0049      	lsls	r1, r1, #1
 800fae6:	1809      	adds	r1, r1, r0
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	697e      	ldr	r6, [r7, #20]
 800faec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800faee:	19c9      	adds	r1, r1, r7
 800faf0:	702a      	strb	r2, [r5, #0]
 800faf2:	47b0      	blx	r6
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	1d1e      	adds	r6, r3, #4
 800faf8:	06a3      	lsls	r3, r4, #26
 800fafa:	d559      	bpl.n	800fbb0 <__ssvfscanf_r+0xf08>
 800fafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6018      	str	r0, [r3, #0]
 800fb02:	e05b      	b.n	800fbbc <__ssvfscanf_r+0xf14>
 800fb04:	2b78      	cmp	r3, #120	; 0x78
 800fb06:	d1ce      	bne.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fb08:	21c0      	movs	r1, #192	; 0xc0
 800fb0a:	00c9      	lsls	r1, r1, #3
 800fb0c:	4021      	ands	r1, r4
 800fb0e:	42b1      	cmp	r1, r6
 800fb10:	d1c9      	bne.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fb12:	4934      	ldr	r1, [pc, #208]	; (800fbe4 <__ssvfscanf_r+0xf3c>)
 800fb14:	4021      	ands	r1, r4
 800fb16:	24a0      	movs	r4, #160	; 0xa0
 800fb18:	00e4      	lsls	r4, r4, #3
 800fb1a:	430c      	orrs	r4, r1
 800fb1c:	2110      	movs	r1, #16
 800fb1e:	6279      	str	r1, [r7, #36]	; 0x24
 800fb20:	e00b      	b.n	800fb3a <__ssvfscanf_r+0xe92>
 800fb22:	0521      	lsls	r1, r4, #20
 800fb24:	d509      	bpl.n	800fb3a <__ssvfscanf_r+0xe92>
 800fb26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb28:	2900      	cmp	r1, #0
 800fb2a:	d102      	bne.n	800fb32 <__ssvfscanf_r+0xe8a>
 800fb2c:	3108      	adds	r1, #8
 800fb2e:	4334      	orrs	r4, r6
 800fb30:	6279      	str	r1, [r7, #36]	; 0x24
 800fb32:	0561      	lsls	r1, r4, #21
 800fb34:	d504      	bpl.n	800fb40 <__ssvfscanf_r+0xe98>
 800fb36:	492c      	ldr	r1, [pc, #176]	; (800fbe8 <__ssvfscanf_r+0xf40>)
 800fb38:	400c      	ands	r4, r1
 800fb3a:	702b      	strb	r3, [r5, #0]
 800fb3c:	3501      	adds	r5, #1
 800fb3e:	e00c      	b.n	800fb5a <__ssvfscanf_r+0xeb2>
 800fb40:	4b2a      	ldr	r3, [pc, #168]	; (800fbec <__ssvfscanf_r+0xf44>)
 800fb42:	401c      	ands	r4, r3
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d004      	beq.n	800fb54 <__ssvfscanf_r+0xeac>
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	623b      	str	r3, [r7, #32]
 800fb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb50:	3301      	adds	r3, #1
 800fb52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	3301      	adds	r3, #1
 800fb58:	61fb      	str	r3, [r7, #28]
 800fb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	604b      	str	r3, [r1, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	dd1c      	ble.n	800fba2 <__ssvfscanf_r+0xefa>
 800fb68:	3201      	adds	r2, #1
 800fb6a:	600a      	str	r2, [r1, #0]
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d000      	beq.n	800fb78 <__ssvfscanf_r+0xed0>
 800fb76:	e773      	b.n	800fa60 <__ssvfscanf_r+0xdb8>
 800fb78:	e795      	b.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fb7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb7c:	491c      	ldr	r1, [pc, #112]	; (800fbf0 <__ssvfscanf_r+0xf48>)
 800fb7e:	0040      	lsls	r0, r0, #1
 800fb80:	5e41      	ldrsh	r1, [r0, r1]
 800fb82:	6279      	str	r1, [r7, #36]	; 0x24
 800fb84:	491b      	ldr	r1, [pc, #108]	; (800fbf4 <__ssvfscanf_r+0xf4c>)
 800fb86:	e7d7      	b.n	800fb38 <__ssvfscanf_r+0xe90>
 800fb88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb8a:	4919      	ldr	r1, [pc, #100]	; (800fbf0 <__ssvfscanf_r+0xf48>)
 800fb8c:	0040      	lsls	r0, r0, #1
 800fb8e:	5e41      	ldrsh	r1, [r0, r1]
 800fb90:	6279      	str	r1, [r7, #36]	; 0x24
 800fb92:	2908      	cmp	r1, #8
 800fb94:	dcf6      	bgt.n	800fb84 <__ssvfscanf_r+0xedc>
 800fb96:	e786      	b.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fb98:	2180      	movs	r1, #128	; 0x80
 800fb9a:	420c      	tst	r4, r1
 800fb9c:	d083      	beq.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fb9e:	438c      	bics	r4, r1
 800fba0:	e7cb      	b.n	800fb3a <__ssvfscanf_r+0xe92>
 800fba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fba6:	f001 ff8d 	bl	8011ac4 <__ssrefill_r>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0de      	beq.n	800fb6c <__ssvfscanf_r+0xec4>
 800fbae:	e77a      	b.n	800faa6 <__ssvfscanf_r+0xdfe>
 800fbb0:	2308      	movs	r3, #8
 800fbb2:	421c      	tst	r4, r3
 800fbb4:	d020      	beq.n	800fbf8 <__ssvfscanf_r+0xf50>
 800fbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	7018      	strb	r0, [r3, #0]
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	633e      	str	r6, [r7, #48]	; 0x30
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbc4:	238c      	movs	r3, #140	; 0x8c
 800fbc6:	2248      	movs	r2, #72	; 0x48
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	189b      	adds	r3, r3, r2
 800fbcc:	19db      	adds	r3, r3, r7
 800fbce:	1aed      	subs	r5, r5, r3
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	18ed      	adds	r5, r5, r3
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	195b      	adds	r3, r3, r5
 800fbd8:	f7ff f92d 	bl	800ee36 <__ssvfscanf_r+0x18e>
 800fbdc:	08014b19 	.word	0x08014b19
 800fbe0:	0000fff6 	.word	0x0000fff6
 800fbe4:	fffffdff 	.word	0xfffffdff
 800fbe8:	fffffa7f 	.word	0xfffffa7f
 800fbec:	fffffc7f 	.word	0xfffffc7f
 800fbf0:	08014e46 	.word	0x08014e46
 800fbf4:	fffff47f 	.word	0xfffff47f
 800fbf8:	0763      	lsls	r3, r4, #29
 800fbfa:	d503      	bpl.n	800fc04 <__ssvfscanf_r+0xf5c>
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	8018      	strh	r0, [r3, #0]
 800fc02:	e7db      	b.n	800fbbc <__ssvfscanf_r+0xf14>
 800fc04:	2301      	movs	r3, #1
 800fc06:	0022      	movs	r2, r4
 800fc08:	401a      	ands	r2, r3
 800fc0a:	421c      	tst	r4, r3
 800fc0c:	d000      	beq.n	800fc10 <__ssvfscanf_r+0xf68>
 800fc0e:	e775      	b.n	800fafc <__ssvfscanf_r+0xe54>
 800fc10:	07a4      	lsls	r4, r4, #30
 800fc12:	d400      	bmi.n	800fc16 <__ssvfscanf_r+0xf6e>
 800fc14:	e772      	b.n	800fafc <__ssvfscanf_r+0xe54>
 800fc16:	4ba8      	ldr	r3, [pc, #672]	; (800feb8 <__ssvfscanf_r+0x1210>)
 800fc18:	6979      	ldr	r1, [r7, #20]
 800fc1a:	4299      	cmp	r1, r3
 800fc1c:	d10c      	bne.n	800fc38 <__ssvfscanf_r+0xf90>
 800fc1e:	218c      	movs	r1, #140	; 0x8c
 800fc20:	2048      	movs	r0, #72	; 0x48
 800fc22:	0049      	lsls	r1, r1, #1
 800fc24:	1809      	adds	r1, r1, r0
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc2a:	19c9      	adds	r1, r1, r7
 800fc2c:	f001 fe46 	bl	80118bc <_strtoull_r>
 800fc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	c303      	stmia	r3!, {r0, r1}
 800fc36:	e7c1      	b.n	800fbbc <__ssvfscanf_r+0xf14>
 800fc38:	218c      	movs	r1, #140	; 0x8c
 800fc3a:	2048      	movs	r0, #72	; 0x48
 800fc3c:	0049      	lsls	r1, r1, #1
 800fc3e:	1809      	adds	r1, r1, r0
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc44:	19c9      	adds	r1, r1, r7
 800fc46:	f001 fd87 	bl	8011758 <_strtoll_r>
 800fc4a:	e7f1      	b.n	800fc30 <__ssvfscanf_r+0xf88>
 800fc4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc4e:	f000 fb9f 	bl	8010390 <_localeconv_r>
 800fc52:	22ae      	movs	r2, #174	; 0xae
 800fc54:	2100      	movs	r1, #0
 800fc56:	6803      	ldr	r3, [r0, #0]
 800fc58:	0052      	lsls	r2, r2, #1
 800fc5a:	603b      	str	r3, [r7, #0]
 800fc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc5e:	60f9      	str	r1, [r7, #12]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d906      	bls.n	800fc74 <__ssvfscanf_r+0xfcc>
 800fc66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc68:	3b5e      	subs	r3, #94	; 0x5e
 800fc6a:	3bff      	subs	r3, #255	; 0xff
 800fc6c:	60fb      	str	r3, [r7, #12]
 800fc6e:	235e      	movs	r3, #94	; 0x5e
 800fc70:	33ff      	adds	r3, #255	; 0xff
 800fc72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fc74:	23f0      	movs	r3, #240	; 0xf0
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	431e      	orrs	r6, r3
 800fc7a:	238c      	movs	r3, #140	; 0x8c
 800fc7c:	2248      	movs	r2, #72	; 0x48
 800fc7e:	2400      	movs	r4, #0
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	189b      	adds	r3, r3, r2
 800fc84:	623c      	str	r4, [r7, #32]
 800fc86:	607c      	str	r4, [r7, #4]
 800fc88:	60bc      	str	r4, [r7, #8]
 800fc8a:	61fc      	str	r4, [r7, #28]
 800fc8c:	613c      	str	r4, [r7, #16]
 800fc8e:	19dd      	adds	r5, r3, r7
 800fc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	781a      	ldrb	r2, [r3, #0]
 800fc96:	0010      	movs	r0, r2
 800fc98:	382b      	subs	r0, #43	; 0x2b
 800fc9a:	284e      	cmp	r0, #78	; 0x4e
 800fc9c:	d900      	bls.n	800fca0 <__ssvfscanf_r+0xff8>
 800fc9e:	e133      	b.n	800ff08 <__ssvfscanf_r+0x1260>
 800fca0:	f7f0 fa42 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fca4:	0132009b 	.word	0x0132009b
 800fca8:	0132009b 	.word	0x0132009b
 800fcac:	004f0132 	.word	0x004f0132
 800fcb0:	00720072 	.word	0x00720072
 800fcb4:	00720072 	.word	0x00720072
 800fcb8:	00720072 	.word	0x00720072
 800fcbc:	00720072 	.word	0x00720072
 800fcc0:	01320072 	.word	0x01320072
 800fcc4:	01320132 	.word	0x01320132
 800fcc8:	01320132 	.word	0x01320132
 800fccc:	01320132 	.word	0x01320132
 800fcd0:	007b00bc 	.word	0x007b00bc
 800fcd4:	007b007b 	.word	0x007b007b
 800fcd8:	00f7012f 	.word	0x00f7012f
 800fcdc:	01320132 	.word	0x01320132
 800fce0:	013200e3 	.word	0x013200e3
 800fce4:	01320132 	.word	0x01320132
 800fce8:	00a00132 	.word	0x00a00132
 800fcec:	01120132 	.word	0x01120132
 800fcf0:	01320132 	.word	0x01320132
 800fcf4:	01010132 	.word	0x01010132
 800fcf8:	01320132 	.word	0x01320132
 800fcfc:	00820132 	.word	0x00820132
 800fd00:	01320105 	.word	0x01320105
 800fd04:	01320132 	.word	0x01320132
 800fd08:	01320132 	.word	0x01320132
 800fd0c:	01320132 	.word	0x01320132
 800fd10:	007b00bc 	.word	0x007b00bc
 800fd14:	007b007b 	.word	0x007b007b
 800fd18:	00f7012f 	.word	0x00f7012f
 800fd1c:	01320132 	.word	0x01320132
 800fd20:	013200e3 	.word	0x013200e3
 800fd24:	01320132 	.word	0x01320132
 800fd28:	00a00132 	.word	0x00a00132
 800fd2c:	01120132 	.word	0x01120132
 800fd30:	01320132 	.word	0x01320132
 800fd34:	01010132 	.word	0x01010132
 800fd38:	01320132 	.word	0x01320132
 800fd3c:	00820132 	.word	0x00820132
 800fd40:	0105      	.short	0x0105
 800fd42:	05f1      	lsls	r1, r6, #23
 800fd44:	d520      	bpl.n	800fd88 <__ssvfscanf_r+0x10e0>
 800fd46:	2280      	movs	r2, #128	; 0x80
 800fd48:	4396      	bics	r6, r2
 800fd4a:	69fa      	ldr	r2, [r7, #28]
 800fd4c:	3201      	adds	r2, #1
 800fd4e:	61fa      	str	r2, [r7, #28]
 800fd50:	68fa      	ldr	r2, [r7, #12]
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	d004      	beq.n	800fd60 <__ssvfscanf_r+0x10b8>
 800fd56:	3a01      	subs	r2, #1
 800fd58:	60fa      	str	r2, [r7, #12]
 800fd5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd5c:	3201      	adds	r2, #1
 800fd5e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fd60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fd62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd64:	3a01      	subs	r2, #1
 800fd66:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fd68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd6a:	3201      	adds	r2, #1
 800fd6c:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd70:	6852      	ldr	r2, [r2, #4]
 800fd72:	3a01      	subs	r2, #1
 800fd74:	604a      	str	r2, [r1, #4]
 800fd76:	2a00      	cmp	r2, #0
 800fd78:	dc00      	bgt.n	800fd7c <__ssvfscanf_r+0x10d4>
 800fd7a:	e0d6      	b.n	800ff2a <__ssvfscanf_r+0x1282>
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	600b      	str	r3, [r1, #0]
 800fd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d184      	bne.n	800fc90 <__ssvfscanf_r+0xfe8>
 800fd86:	e057      	b.n	800fe38 <__ssvfscanf_r+0x1190>
 800fd88:	6a39      	ldr	r1, [r7, #32]
 800fd8a:	1909      	adds	r1, r1, r4
 800fd8c:	2900      	cmp	r1, #0
 800fd8e:	d153      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fd90:	494a      	ldr	r1, [pc, #296]	; (800febc <__ssvfscanf_r+0x1214>)
 800fd92:	400e      	ands	r6, r1
 800fd94:	702a      	strb	r2, [r5, #0]
 800fd96:	3501      	adds	r5, #1
 800fd98:	e7e2      	b.n	800fd60 <__ssvfscanf_r+0x10b8>
 800fd9a:	0531      	lsls	r1, r6, #20
 800fd9c:	d54c      	bpl.n	800fe38 <__ssvfscanf_r+0x1190>
 800fd9e:	6a39      	ldr	r1, [r7, #32]
 800fda0:	1909      	adds	r1, r1, r4
 800fda2:	2900      	cmp	r1, #0
 800fda4:	d040      	beq.n	800fe28 <__ssvfscanf_r+0x1180>
 800fda6:	e047      	b.n	800fe38 <__ssvfscanf_r+0x1190>
 800fda8:	2198      	movs	r1, #152	; 0x98
 800fdaa:	2080      	movs	r0, #128	; 0x80
 800fdac:	0109      	lsls	r1, r1, #4
 800fdae:	4031      	ands	r1, r6
 800fdb0:	0040      	lsls	r0, r0, #1
 800fdb2:	4281      	cmp	r1, r0
 800fdb4:	d140      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fdb6:	69f9      	ldr	r1, [r7, #28]
 800fdb8:	2901      	cmp	r1, #1
 800fdba:	d13d      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fdbc:	2080      	movs	r0, #128	; 0x80
 800fdbe:	4940      	ldr	r1, [pc, #256]	; (800fec0 <__ssvfscanf_r+0x1218>)
 800fdc0:	0100      	lsls	r0, r0, #4
 800fdc2:	400e      	ands	r6, r1
 800fdc4:	3132      	adds	r1, #50	; 0x32
 800fdc6:	31ff      	adds	r1, #255	; 0xff
 800fdc8:	7029      	strb	r1, [r5, #0]
 800fdca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fdcc:	4306      	orrs	r6, r0
 800fdce:	3901      	subs	r1, #1
 800fdd0:	63f9      	str	r1, [r7, #60]	; 0x3c
 800fdd2:	3501      	adds	r5, #1
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	61f9      	str	r1, [r7, #28]
 800fdd8:	e7dc      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fdda:	2180      	movs	r1, #128	; 0x80
 800fddc:	420e      	tst	r6, r1
 800fdde:	d02b      	beq.n	800fe38 <__ssvfscanf_r+0x1190>
 800fde0:	438e      	bics	r6, r1
 800fde2:	e7d7      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fde4:	6a39      	ldr	r1, [r7, #32]
 800fde6:	2900      	cmp	r1, #0
 800fde8:	d10d      	bne.n	800fe06 <__ssvfscanf_r+0x115e>
 800fdea:	69f9      	ldr	r1, [r7, #28]
 800fdec:	2900      	cmp	r1, #0
 800fdee:	d10e      	bne.n	800fe0e <__ssvfscanf_r+0x1166>
 800fdf0:	21e0      	movs	r1, #224	; 0xe0
 800fdf2:	0030      	movs	r0, r6
 800fdf4:	00c9      	lsls	r1, r1, #3
 800fdf6:	4008      	ands	r0, r1
 800fdf8:	4288      	cmp	r0, r1
 800fdfa:	d108      	bne.n	800fe0e <__ssvfscanf_r+0x1166>
 800fdfc:	4931      	ldr	r1, [pc, #196]	; (800fec4 <__ssvfscanf_r+0x121c>)
 800fdfe:	400e      	ands	r6, r1
 800fe00:	2101      	movs	r1, #1
 800fe02:	6239      	str	r1, [r7, #32]
 800fe04:	e7c6      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fe06:	6a39      	ldr	r1, [r7, #32]
 800fe08:	2902      	cmp	r1, #2
 800fe0a:	d100      	bne.n	800fe0e <__ssvfscanf_r+0x1166>
 800fe0c:	e089      	b.n	800ff22 <__ssvfscanf_r+0x127a>
 800fe0e:	2c01      	cmp	r4, #1
 800fe10:	d001      	beq.n	800fe16 <__ssvfscanf_r+0x116e>
 800fe12:	2c04      	cmp	r4, #4
 800fe14:	d110      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fe16:	3401      	adds	r4, #1
 800fe18:	b2e4      	uxtb	r4, r4
 800fe1a:	e7bb      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fe1c:	0531      	lsls	r1, r6, #20
 800fe1e:	d508      	bpl.n	800fe32 <__ssvfscanf_r+0x118a>
 800fe20:	6a39      	ldr	r1, [r7, #32]
 800fe22:	1909      	adds	r1, r1, r4
 800fe24:	2900      	cmp	r1, #0
 800fe26:	d104      	bne.n	800fe32 <__ssvfscanf_r+0x118a>
 800fe28:	4824      	ldr	r0, [pc, #144]	; (800febc <__ssvfscanf_r+0x1214>)
 800fe2a:	000c      	movs	r4, r1
 800fe2c:	4006      	ands	r6, r0
 800fe2e:	6239      	str	r1, [r7, #32]
 800fe30:	e7b0      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fe32:	6a39      	ldr	r1, [r7, #32]
 800fe34:	2901      	cmp	r1, #1
 800fe36:	d076      	beq.n	800ff26 <__ssvfscanf_r+0x127e>
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <__ssvfscanf_r+0x119a>
 800fe3e:	4b20      	ldr	r3, [pc, #128]	; (800fec0 <__ssvfscanf_r+0x1218>)
 800fe40:	401e      	ands	r6, r3
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	3b01      	subs	r3, #1
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d877      	bhi.n	800ff3a <__ssvfscanf_r+0x1292>
 800fe4a:	238c      	movs	r3, #140	; 0x8c
 800fe4c:	2248      	movs	r2, #72	; 0x48
 800fe4e:	005b      	lsls	r3, r3, #1
 800fe50:	189b      	adds	r3, r3, r2
 800fe52:	19db      	adds	r3, r3, r7
 800fe54:	429d      	cmp	r5, r3
 800fe56:	d801      	bhi.n	800fe5c <__ssvfscanf_r+0x11b4>
 800fe58:	f7ff f823 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800fe5c:	3d01      	subs	r5, #1
 800fe5e:	7829      	ldrb	r1, [r5, #0]
 800fe60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe64:	f001 fdf2 	bl	8011a4c <_sungetc_r>
 800fe68:	e7ef      	b.n	800fe4a <__ssvfscanf_r+0x11a2>
 800fe6a:	2c00      	cmp	r4, #0
 800fe6c:	d10c      	bne.n	800fe88 <__ssvfscanf_r+0x11e0>
 800fe6e:	69f9      	ldr	r1, [r7, #28]
 800fe70:	2900      	cmp	r1, #0
 800fe72:	d1e4      	bne.n	800fe3e <__ssvfscanf_r+0x1196>
 800fe74:	21e0      	movs	r1, #224	; 0xe0
 800fe76:	0030      	movs	r0, r6
 800fe78:	00c9      	lsls	r1, r1, #3
 800fe7a:	4008      	ands	r0, r1
 800fe7c:	4288      	cmp	r0, r1
 800fe7e:	d1e0      	bne.n	800fe42 <__ssvfscanf_r+0x119a>
 800fe80:	4910      	ldr	r1, [pc, #64]	; (800fec4 <__ssvfscanf_r+0x121c>)
 800fe82:	3401      	adds	r4, #1
 800fe84:	400e      	ands	r6, r1
 800fe86:	e785      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fe88:	20fd      	movs	r0, #253	; 0xfd
 800fe8a:	1ee1      	subs	r1, r4, #3
 800fe8c:	4201      	tst	r1, r0
 800fe8e:	d1d3      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fe90:	e7c1      	b.n	800fe16 <__ssvfscanf_r+0x116e>
 800fe92:	0531      	lsls	r1, r6, #20
 800fe94:	d503      	bpl.n	800fe9e <__ssvfscanf_r+0x11f6>
 800fe96:	6a39      	ldr	r1, [r7, #32]
 800fe98:	1909      	adds	r1, r1, r4
 800fe9a:	2900      	cmp	r1, #0
 800fe9c:	d0c4      	beq.n	800fe28 <__ssvfscanf_r+0x1180>
 800fe9e:	2c02      	cmp	r4, #2
 800fea0:	d1ca      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800fea2:	2403      	movs	r4, #3
 800fea4:	e776      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800fea6:	2c06      	cmp	r4, #6
 800fea8:	d1c6      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800feaa:	2407      	movs	r4, #7
 800feac:	e772      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800feae:	2c07      	cmp	r4, #7
 800feb0:	d1c2      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800feb2:	2408      	movs	r4, #8
 800feb4:	e76e      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800feb6:	46c0      	nop			; (mov r8, r8)
 800feb8:	0800c069 	.word	0x0800c069
 800febc:	fffffe7f 	.word	0xfffffe7f
 800fec0:	fffffeff 	.word	0xfffffeff
 800fec4:	fffff87f 	.word	0xfffff87f
 800fec8:	0531      	lsls	r1, r6, #20
 800feca:	d5b5      	bpl.n	800fe38 <__ssvfscanf_r+0x1190>
 800fecc:	21a0      	movs	r1, #160	; 0xa0
 800fece:	2080      	movs	r0, #128	; 0x80
 800fed0:	00c9      	lsls	r1, r1, #3
 800fed2:	00c0      	lsls	r0, r0, #3
 800fed4:	4031      	ands	r1, r6
 800fed6:	4281      	cmp	r1, r0
 800fed8:	d004      	beq.n	800fee4 <__ssvfscanf_r+0x123c>
 800feda:	4206      	tst	r6, r0
 800fedc:	d0ac      	beq.n	800fe38 <__ssvfscanf_r+0x1190>
 800fede:	69f9      	ldr	r1, [r7, #28]
 800fee0:	2900      	cmp	r1, #0
 800fee2:	d0ae      	beq.n	800fe42 <__ssvfscanf_r+0x119a>
 800fee4:	2180      	movs	r1, #128	; 0x80
 800fee6:	0089      	lsls	r1, r1, #2
 800fee8:	420e      	tst	r6, r1
 800feea:	d104      	bne.n	800fef6 <__ssvfscanf_r+0x124e>
 800feec:	69f9      	ldr	r1, [r7, #28]
 800feee:	6938      	ldr	r0, [r7, #16]
 800fef0:	607d      	str	r5, [r7, #4]
 800fef2:	1a09      	subs	r1, r1, r0
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	20c0      	movs	r0, #192	; 0xc0
 800fef8:	4973      	ldr	r1, [pc, #460]	; (80100c8 <__ssvfscanf_r+0x1420>)
 800fefa:	0040      	lsls	r0, r0, #1
 800fefc:	400e      	ands	r6, r1
 800fefe:	4306      	orrs	r6, r0
 800ff00:	e768      	b.n	800fdd4 <__ssvfscanf_r+0x112c>
 800ff02:	0531      	lsls	r1, r6, #20
 800ff04:	d5e2      	bpl.n	800fecc <__ssvfscanf_r+0x1224>
 800ff06:	e74a      	b.n	800fd9e <__ssvfscanf_r+0x10f6>
 800ff08:	6839      	ldr	r1, [r7, #0]
 800ff0a:	7809      	ldrb	r1, [r1, #0]
 800ff0c:	4291      	cmp	r1, r2
 800ff0e:	d193      	bne.n	800fe38 <__ssvfscanf_r+0x1190>
 800ff10:	2180      	movs	r1, #128	; 0x80
 800ff12:	0089      	lsls	r1, r1, #2
 800ff14:	420e      	tst	r6, r1
 800ff16:	d08f      	beq.n	800fe38 <__ssvfscanf_r+0x1190>
 800ff18:	496c      	ldr	r1, [pc, #432]	; (80100cc <__ssvfscanf_r+0x1424>)
 800ff1a:	400e      	ands	r6, r1
 800ff1c:	69f9      	ldr	r1, [r7, #28]
 800ff1e:	6139      	str	r1, [r7, #16]
 800ff20:	e738      	b.n	800fd94 <__ssvfscanf_r+0x10ec>
 800ff22:	2103      	movs	r1, #3
 800ff24:	e76d      	b.n	800fe02 <__ssvfscanf_r+0x115a>
 800ff26:	2102      	movs	r1, #2
 800ff28:	e76b      	b.n	800fe02 <__ssvfscanf_r+0x115a>
 800ff2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff2e:	f001 fdc9 	bl	8011ac4 <__ssrefill_r>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	d100      	bne.n	800ff38 <__ssvfscanf_r+0x1290>
 800ff36:	e723      	b.n	800fd80 <__ssvfscanf_r+0x10d8>
 800ff38:	e77e      	b.n	800fe38 <__ssvfscanf_r+0x1190>
 800ff3a:	1e63      	subs	r3, r4, #1
 800ff3c:	2b06      	cmp	r3, #6
 800ff3e:	d825      	bhi.n	800ff8c <__ssvfscanf_r+0x12e4>
 800ff40:	2c02      	cmp	r4, #2
 800ff42:	d837      	bhi.n	800ffb4 <__ssvfscanf_r+0x130c>
 800ff44:	238c      	movs	r3, #140	; 0x8c
 800ff46:	2248      	movs	r2, #72	; 0x48
 800ff48:	005b      	lsls	r3, r3, #1
 800ff4a:	189b      	adds	r3, r3, r2
 800ff4c:	19db      	adds	r3, r3, r7
 800ff4e:	429d      	cmp	r5, r3
 800ff50:	d801      	bhi.n	800ff56 <__ssvfscanf_r+0x12ae>
 800ff52:	f7fe ffa6 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800ff56:	3d01      	subs	r5, #1
 800ff58:	7829      	ldrb	r1, [r5, #0]
 800ff5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff5e:	f001 fd75 	bl	8011a4c <_sungetc_r>
 800ff62:	e7ef      	b.n	800ff44 <__ssvfscanf_r+0x129c>
 800ff64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	7819      	ldrb	r1, [r3, #0]
 800ff6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff70:	f001 fd6c 	bl	8011a4c <_sungetc_r>
 800ff74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff76:	6a3a      	ldr	r2, [r7, #32]
 800ff78:	189b      	adds	r3, r3, r2
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d8f1      	bhi.n	800ff64 <__ssvfscanf_r+0x12bc>
 800ff80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff82:	3c03      	subs	r4, #3
 800ff84:	b2e4      	uxtb	r4, r4
 800ff86:	1b1b      	subs	r3, r3, r4
 800ff88:	1b2d      	subs	r5, r5, r4
 800ff8a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff8c:	05f3      	lsls	r3, r6, #23
 800ff8e:	d52f      	bpl.n	800fff0 <__ssvfscanf_r+0x1348>
 800ff90:	0573      	lsls	r3, r6, #21
 800ff92:	d514      	bpl.n	800ffbe <__ssvfscanf_r+0x1316>
 800ff94:	238c      	movs	r3, #140	; 0x8c
 800ff96:	2248      	movs	r2, #72	; 0x48
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	189b      	adds	r3, r3, r2
 800ff9c:	19db      	adds	r3, r3, r7
 800ff9e:	429d      	cmp	r5, r3
 800ffa0:	d801      	bhi.n	800ffa6 <__ssvfscanf_r+0x12fe>
 800ffa2:	f7fe ff7e 	bl	800eea2 <__ssvfscanf_r+0x1fa>
 800ffa6:	3d01      	subs	r5, #1
 800ffa8:	7829      	ldrb	r1, [r5, #0]
 800ffaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffae:	f001 fd4d 	bl	8011a4c <_sungetc_r>
 800ffb2:	e7ef      	b.n	800ff94 <__ssvfscanf_r+0x12ec>
 800ffb4:	1b63      	subs	r3, r4, r5
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	63fd      	str	r5, [r7, #60]	; 0x3c
 800ffba:	623b      	str	r3, [r7, #32]
 800ffbc:	e7da      	b.n	800ff74 <__ssvfscanf_r+0x12cc>
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	1e6c      	subs	r4, r5, #1
 800ffc2:	7821      	ldrb	r1, [r4, #0]
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffc8:	2965      	cmp	r1, #101	; 0x65
 800ffca:	d00a      	beq.n	800ffe2 <__ssvfscanf_r+0x133a>
 800ffcc:	2945      	cmp	r1, #69	; 0x45
 800ffce:	d008      	beq.n	800ffe2 <__ssvfscanf_r+0x133a>
 800ffd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffd4:	f001 fd3a 	bl	8011a4c <_sungetc_r>
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	1eac      	subs	r4, r5, #2
 800ffdc:	3b02      	subs	r3, #2
 800ffde:	7821      	ldrb	r1, [r4, #0]
 800ffe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffe2:	0025      	movs	r5, r4
 800ffe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffe6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffe8:	f001 fd30 	bl	8011a4c <_sungetc_r>
 800ffec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffee:	63bb      	str	r3, [r7, #56]	; 0x38
 800fff0:	2310      	movs	r3, #16
 800fff2:	0032      	movs	r2, r6
 800fff4:	401a      	ands	r2, r3
 800fff6:	421e      	tst	r6, r3
 800fff8:	d001      	beq.n	800fffe <__ssvfscanf_r+0x1356>
 800fffa:	f7fe fe71 	bl	800ece0 <__ssvfscanf_r+0x38>
 800fffe:	23c0      	movs	r3, #192	; 0xc0
 8010000:	2180      	movs	r1, #128	; 0x80
 8010002:	00db      	lsls	r3, r3, #3
 8010004:	702a      	strb	r2, [r5, #0]
 8010006:	4033      	ands	r3, r6
 8010008:	00c9      	lsls	r1, r1, #3
 801000a:	428b      	cmp	r3, r1
 801000c:	d11f      	bne.n	801004e <__ssvfscanf_r+0x13a6>
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	69fa      	ldr	r2, [r7, #28]
 8010012:	69f9      	ldr	r1, [r7, #28]
 8010014:	1a9a      	subs	r2, r3, r2
 8010016:	428b      	cmp	r3, r1
 8010018:	d125      	bne.n	8010066 <__ssvfscanf_r+0x13be>
 801001a:	238c      	movs	r3, #140	; 0x8c
 801001c:	2148      	movs	r1, #72	; 0x48
 801001e:	005b      	lsls	r3, r3, #1
 8010020:	185b      	adds	r3, r3, r1
 8010022:	19d9      	adds	r1, r3, r7
 8010024:	2200      	movs	r2, #0
 8010026:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010028:	f7fb fef0 	bl	800be0c <_strtod_r>
 801002c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801002e:	0004      	movs	r4, r0
 8010030:	3304      	adds	r3, #4
 8010032:	000d      	movs	r5, r1
 8010034:	623b      	str	r3, [r7, #32]
 8010036:	07f3      	lsls	r3, r6, #31
 8010038:	d523      	bpl.n	8010082 <__ssvfscanf_r+0x13da>
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	601c      	str	r4, [r3, #0]
 8010040:	605d      	str	r5, [r3, #4]
 8010042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010044:	3301      	adds	r3, #1
 8010046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010048:	6a3b      	ldr	r3, [r7, #32]
 801004a:	f7fe ffa5 	bl	800ef98 <__ssvfscanf_r+0x2f0>
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d0e2      	beq.n	801001a <__ssvfscanf_r+0x1372>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010058:	1c59      	adds	r1, r3, #1
 801005a:	230a      	movs	r3, #10
 801005c:	f7fb ff72 	bl	800bf44 <_strtol_r>
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	687d      	ldr	r5, [r7, #4]
 8010064:	1ac2      	subs	r2, r0, r3
 8010066:	2148      	movs	r1, #72	; 0x48
 8010068:	4b19      	ldr	r3, [pc, #100]	; (80100d0 <__ssvfscanf_r+0x1428>)
 801006a:	185b      	adds	r3, r3, r1
 801006c:	19db      	adds	r3, r3, r7
 801006e:	429d      	cmp	r5, r3
 8010070:	d302      	bcc.n	8010078 <__ssvfscanf_r+0x13d0>
 8010072:	4b18      	ldr	r3, [pc, #96]	; (80100d4 <__ssvfscanf_r+0x142c>)
 8010074:	185b      	adds	r3, r3, r1
 8010076:	19dd      	adds	r5, r3, r7
 8010078:	0028      	movs	r0, r5
 801007a:	4917      	ldr	r1, [pc, #92]	; (80100d8 <__ssvfscanf_r+0x1430>)
 801007c:	f7fc f8fc 	bl	800c278 <sprintf>
 8010080:	e7cb      	b.n	801001a <__ssvfscanf_r+0x1372>
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010088:	07b6      	lsls	r6, r6, #30
 801008a:	d4d8      	bmi.n	801003e <__ssvfscanf_r+0x1396>
 801008c:	0002      	movs	r2, r0
 801008e:	000b      	movs	r3, r1
 8010090:	f7f2 f930 	bl	80022f4 <__aeabi_dcmpun>
 8010094:	2800      	cmp	r0, #0
 8010096:	d005      	beq.n	80100a4 <__ssvfscanf_r+0x13fc>
 8010098:	4810      	ldr	r0, [pc, #64]	; (80100dc <__ssvfscanf_r+0x1434>)
 801009a:	f7fc fabf 	bl	800c61c <nanf>
 801009e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a0:	6018      	str	r0, [r3, #0]
 80100a2:	e7ce      	b.n	8010042 <__ssvfscanf_r+0x139a>
 80100a4:	0020      	movs	r0, r4
 80100a6:	0029      	movs	r1, r5
 80100a8:	f7f2 f9ce 	bl	8002448 <__aeabi_d2f>
 80100ac:	e7f7      	b.n	801009e <__ssvfscanf_r+0x13f6>
 80100ae:	00a3      	lsls	r3, r4, #2
 80100b0:	18ed      	adds	r5, r5, r3
 80100b2:	682b      	ldr	r3, [r5, #0]
 80100b4:	3401      	adds	r4, #1
 80100b6:	6818      	ldr	r0, [r3, #0]
 80100b8:	f7fa fe58 	bl	800ad6c <free>
 80100bc:	2200      	movs	r2, #0
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	601a      	str	r2, [r3, #0]
 80100c2:	f7fe ffc3 	bl	800f04c <__ssvfscanf_r+0x3a4>
 80100c6:	46c0      	nop			; (mov r8, r8)
 80100c8:	fffff07f 	.word	0xfffff07f
 80100cc:	fffffd7f 	.word	0xfffffd7f
 80100d0:	0000026b 	.word	0x0000026b
 80100d4:	0000026a 	.word	0x0000026a
 80100d8:	08014e40 	.word	0x08014e40
 80100dc:	08014ea3 	.word	0x08014ea3

080100e0 <_fclose_r>:
 80100e0:	b570      	push	{r4, r5, r6, lr}
 80100e2:	0005      	movs	r5, r0
 80100e4:	1e0c      	subs	r4, r1, #0
 80100e6:	d102      	bne.n	80100ee <_fclose_r+0xe>
 80100e8:	2600      	movs	r6, #0
 80100ea:	0030      	movs	r0, r6
 80100ec:	bd70      	pop	{r4, r5, r6, pc}
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d004      	beq.n	80100fc <_fclose_r+0x1c>
 80100f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <_fclose_r+0x1c>
 80100f8:	f7fc f856 	bl	800c1a8 <__sinit>
 80100fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100fe:	07db      	lsls	r3, r3, #31
 8010100:	d405      	bmi.n	801010e <_fclose_r+0x2e>
 8010102:	89a3      	ldrh	r3, [r4, #12]
 8010104:	059b      	lsls	r3, r3, #22
 8010106:	d402      	bmi.n	801010e <_fclose_r+0x2e>
 8010108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801010a:	f7fc fa6b 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 801010e:	220c      	movs	r2, #12
 8010110:	5ea3      	ldrsh	r3, [r4, r2]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d109      	bne.n	801012a <_fclose_r+0x4a>
 8010116:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010118:	3301      	adds	r3, #1
 801011a:	0016      	movs	r6, r2
 801011c:	401e      	ands	r6, r3
 801011e:	421a      	tst	r2, r3
 8010120:	d1e2      	bne.n	80100e8 <_fclose_r+0x8>
 8010122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010124:	f7fc fa5f 	bl	800c5e6 <__retarget_lock_release_recursive>
 8010128:	e7df      	b.n	80100ea <_fclose_r+0xa>
 801012a:	0021      	movs	r1, r4
 801012c:	0028      	movs	r0, r5
 801012e:	f000 f837 	bl	80101a0 <__sflush_r>
 8010132:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010134:	0006      	movs	r6, r0
 8010136:	2b00      	cmp	r3, #0
 8010138:	d006      	beq.n	8010148 <_fclose_r+0x68>
 801013a:	0028      	movs	r0, r5
 801013c:	69e1      	ldr	r1, [r4, #28]
 801013e:	4798      	blx	r3
 8010140:	2800      	cmp	r0, #0
 8010142:	da01      	bge.n	8010148 <_fclose_r+0x68>
 8010144:	2601      	movs	r6, #1
 8010146:	4276      	negs	r6, r6
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	061b      	lsls	r3, r3, #24
 801014c:	d503      	bpl.n	8010156 <_fclose_r+0x76>
 801014e:	0028      	movs	r0, r5
 8010150:	6921      	ldr	r1, [r4, #16]
 8010152:	f7fc facf 	bl	800c6f4 <_free_r>
 8010156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010158:	2900      	cmp	r1, #0
 801015a:	d008      	beq.n	801016e <_fclose_r+0x8e>
 801015c:	0023      	movs	r3, r4
 801015e:	3340      	adds	r3, #64	; 0x40
 8010160:	4299      	cmp	r1, r3
 8010162:	d002      	beq.n	801016a <_fclose_r+0x8a>
 8010164:	0028      	movs	r0, r5
 8010166:	f7fc fac5 	bl	800c6f4 <_free_r>
 801016a:	2300      	movs	r3, #0
 801016c:	6323      	str	r3, [r4, #48]	; 0x30
 801016e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010170:	2900      	cmp	r1, #0
 8010172:	d004      	beq.n	801017e <_fclose_r+0x9e>
 8010174:	0028      	movs	r0, r5
 8010176:	f7fc fabd 	bl	800c6f4 <_free_r>
 801017a:	2300      	movs	r3, #0
 801017c:	6463      	str	r3, [r4, #68]	; 0x44
 801017e:	f7fc f803 	bl	800c188 <__sfp_lock_acquire>
 8010182:	2300      	movs	r3, #0
 8010184:	81a3      	strh	r3, [r4, #12]
 8010186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010188:	07db      	lsls	r3, r3, #31
 801018a:	d402      	bmi.n	8010192 <_fclose_r+0xb2>
 801018c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801018e:	f7fc fa2a 	bl	800c5e6 <__retarget_lock_release_recursive>
 8010192:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010194:	f7fc fa25 	bl	800c5e2 <__retarget_lock_close_recursive>
 8010198:	f7fb fffe 	bl	800c198 <__sfp_lock_release>
 801019c:	e7a5      	b.n	80100ea <_fclose_r+0xa>
	...

080101a0 <__sflush_r>:
 80101a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101a2:	230c      	movs	r3, #12
 80101a4:	5eca      	ldrsh	r2, [r1, r3]
 80101a6:	000c      	movs	r4, r1
 80101a8:	0005      	movs	r5, r0
 80101aa:	b291      	uxth	r1, r2
 80101ac:	0713      	lsls	r3, r2, #28
 80101ae:	d464      	bmi.n	801027a <__sflush_r+0xda>
 80101b0:	2380      	movs	r3, #128	; 0x80
 80101b2:	011b      	lsls	r3, r3, #4
 80101b4:	4313      	orrs	r3, r2
 80101b6:	6862      	ldr	r2, [r4, #4]
 80101b8:	81a3      	strh	r3, [r4, #12]
 80101ba:	2a00      	cmp	r2, #0
 80101bc:	dc04      	bgt.n	80101c8 <__sflush_r+0x28>
 80101be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80101c0:	2a00      	cmp	r2, #0
 80101c2:	dc01      	bgt.n	80101c8 <__sflush_r+0x28>
 80101c4:	2000      	movs	r0, #0
 80101c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80101c8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80101ca:	2f00      	cmp	r7, #0
 80101cc:	d0fa      	beq.n	80101c4 <__sflush_r+0x24>
 80101ce:	2200      	movs	r2, #0
 80101d0:	2080      	movs	r0, #128	; 0x80
 80101d2:	682e      	ldr	r6, [r5, #0]
 80101d4:	602a      	str	r2, [r5, #0]
 80101d6:	001a      	movs	r2, r3
 80101d8:	0140      	lsls	r0, r0, #5
 80101da:	69e1      	ldr	r1, [r4, #28]
 80101dc:	4002      	ands	r2, r0
 80101de:	4203      	tst	r3, r0
 80101e0:	d038      	beq.n	8010254 <__sflush_r+0xb4>
 80101e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80101e4:	89a3      	ldrh	r3, [r4, #12]
 80101e6:	075b      	lsls	r3, r3, #29
 80101e8:	d506      	bpl.n	80101f8 <__sflush_r+0x58>
 80101ea:	6863      	ldr	r3, [r4, #4]
 80101ec:	1ac0      	subs	r0, r0, r3
 80101ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <__sflush_r+0x58>
 80101f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80101f6:	1ac0      	subs	r0, r0, r3
 80101f8:	0002      	movs	r2, r0
 80101fa:	2300      	movs	r3, #0
 80101fc:	0028      	movs	r0, r5
 80101fe:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8010200:	69e1      	ldr	r1, [r4, #28]
 8010202:	47b8      	blx	r7
 8010204:	89a2      	ldrh	r2, [r4, #12]
 8010206:	1c43      	adds	r3, r0, #1
 8010208:	d106      	bne.n	8010218 <__sflush_r+0x78>
 801020a:	6829      	ldr	r1, [r5, #0]
 801020c:	291d      	cmp	r1, #29
 801020e:	d830      	bhi.n	8010272 <__sflush_r+0xd2>
 8010210:	4b2c      	ldr	r3, [pc, #176]	; (80102c4 <__sflush_r+0x124>)
 8010212:	410b      	asrs	r3, r1
 8010214:	07db      	lsls	r3, r3, #31
 8010216:	d42c      	bmi.n	8010272 <__sflush_r+0xd2>
 8010218:	4b2b      	ldr	r3, [pc, #172]	; (80102c8 <__sflush_r+0x128>)
 801021a:	4013      	ands	r3, r2
 801021c:	2200      	movs	r2, #0
 801021e:	6062      	str	r2, [r4, #4]
 8010220:	6922      	ldr	r2, [r4, #16]
 8010222:	b21b      	sxth	r3, r3
 8010224:	81a3      	strh	r3, [r4, #12]
 8010226:	6022      	str	r2, [r4, #0]
 8010228:	04db      	lsls	r3, r3, #19
 801022a:	d505      	bpl.n	8010238 <__sflush_r+0x98>
 801022c:	1c43      	adds	r3, r0, #1
 801022e:	d102      	bne.n	8010236 <__sflush_r+0x96>
 8010230:	682b      	ldr	r3, [r5, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d100      	bne.n	8010238 <__sflush_r+0x98>
 8010236:	6520      	str	r0, [r4, #80]	; 0x50
 8010238:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801023a:	602e      	str	r6, [r5, #0]
 801023c:	2900      	cmp	r1, #0
 801023e:	d0c1      	beq.n	80101c4 <__sflush_r+0x24>
 8010240:	0023      	movs	r3, r4
 8010242:	3340      	adds	r3, #64	; 0x40
 8010244:	4299      	cmp	r1, r3
 8010246:	d002      	beq.n	801024e <__sflush_r+0xae>
 8010248:	0028      	movs	r0, r5
 801024a:	f7fc fa53 	bl	800c6f4 <_free_r>
 801024e:	2000      	movs	r0, #0
 8010250:	6320      	str	r0, [r4, #48]	; 0x30
 8010252:	e7b8      	b.n	80101c6 <__sflush_r+0x26>
 8010254:	2301      	movs	r3, #1
 8010256:	0028      	movs	r0, r5
 8010258:	47b8      	blx	r7
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	d1c2      	bne.n	80101e4 <__sflush_r+0x44>
 801025e:	682b      	ldr	r3, [r5, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0bf      	beq.n	80101e4 <__sflush_r+0x44>
 8010264:	2b1d      	cmp	r3, #29
 8010266:	d001      	beq.n	801026c <__sflush_r+0xcc>
 8010268:	2b16      	cmp	r3, #22
 801026a:	d101      	bne.n	8010270 <__sflush_r+0xd0>
 801026c:	602e      	str	r6, [r5, #0]
 801026e:	e7a9      	b.n	80101c4 <__sflush_r+0x24>
 8010270:	89a2      	ldrh	r2, [r4, #12]
 8010272:	2340      	movs	r3, #64	; 0x40
 8010274:	4313      	orrs	r3, r2
 8010276:	81a3      	strh	r3, [r4, #12]
 8010278:	e7a5      	b.n	80101c6 <__sflush_r+0x26>
 801027a:	6926      	ldr	r6, [r4, #16]
 801027c:	2e00      	cmp	r6, #0
 801027e:	d0a1      	beq.n	80101c4 <__sflush_r+0x24>
 8010280:	6827      	ldr	r7, [r4, #0]
 8010282:	6026      	str	r6, [r4, #0]
 8010284:	1bbb      	subs	r3, r7, r6
 8010286:	9301      	str	r3, [sp, #4]
 8010288:	2300      	movs	r3, #0
 801028a:	0789      	lsls	r1, r1, #30
 801028c:	d100      	bne.n	8010290 <__sflush_r+0xf0>
 801028e:	6963      	ldr	r3, [r4, #20]
 8010290:	60a3      	str	r3, [r4, #8]
 8010292:	9b01      	ldr	r3, [sp, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	dc00      	bgt.n	801029a <__sflush_r+0xfa>
 8010298:	e794      	b.n	80101c4 <__sflush_r+0x24>
 801029a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801029c:	0032      	movs	r2, r6
 801029e:	001f      	movs	r7, r3
 80102a0:	0028      	movs	r0, r5
 80102a2:	9b01      	ldr	r3, [sp, #4]
 80102a4:	69e1      	ldr	r1, [r4, #28]
 80102a6:	47b8      	blx	r7
 80102a8:	2800      	cmp	r0, #0
 80102aa:	dc06      	bgt.n	80102ba <__sflush_r+0x11a>
 80102ac:	2340      	movs	r3, #64	; 0x40
 80102ae:	2001      	movs	r0, #1
 80102b0:	89a2      	ldrh	r2, [r4, #12]
 80102b2:	4240      	negs	r0, r0
 80102b4:	4313      	orrs	r3, r2
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	e785      	b.n	80101c6 <__sflush_r+0x26>
 80102ba:	9b01      	ldr	r3, [sp, #4]
 80102bc:	1836      	adds	r6, r6, r0
 80102be:	1a1b      	subs	r3, r3, r0
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	e7e6      	b.n	8010292 <__sflush_r+0xf2>
 80102c4:	dfbffffe 	.word	0xdfbffffe
 80102c8:	fffff7ff 	.word	0xfffff7ff

080102cc <_fflush_r>:
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	0005      	movs	r5, r0
 80102d0:	000c      	movs	r4, r1
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d004      	beq.n	80102e0 <_fflush_r+0x14>
 80102d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <_fflush_r+0x14>
 80102dc:	f7fb ff64 	bl	800c1a8 <__sinit>
 80102e0:	220c      	movs	r2, #12
 80102e2:	5ea3      	ldrsh	r3, [r4, r2]
 80102e4:	1e1e      	subs	r6, r3, #0
 80102e6:	d015      	beq.n	8010314 <_fflush_r+0x48>
 80102e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80102ea:	07d2      	lsls	r2, r2, #31
 80102ec:	d404      	bmi.n	80102f8 <_fflush_r+0x2c>
 80102ee:	059b      	lsls	r3, r3, #22
 80102f0:	d402      	bmi.n	80102f8 <_fflush_r+0x2c>
 80102f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102f4:	f7fc f976 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 80102f8:	0021      	movs	r1, r4
 80102fa:	0028      	movs	r0, r5
 80102fc:	f7ff ff50 	bl	80101a0 <__sflush_r>
 8010300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010302:	0006      	movs	r6, r0
 8010304:	07db      	lsls	r3, r3, #31
 8010306:	d405      	bmi.n	8010314 <_fflush_r+0x48>
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	059b      	lsls	r3, r3, #22
 801030c:	d402      	bmi.n	8010314 <_fflush_r+0x48>
 801030e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010310:	f7fc f969 	bl	800c5e6 <__retarget_lock_release_recursive>
 8010314:	0030      	movs	r0, r6
 8010316:	bd70      	pop	{r4, r5, r6, pc}

08010318 <__sccl>:
 8010318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801031a:	780b      	ldrb	r3, [r1, #0]
 801031c:	0004      	movs	r4, r0
 801031e:	2b5e      	cmp	r3, #94	; 0x5e
 8010320:	d019      	beq.n	8010356 <__sccl+0x3e>
 8010322:	2200      	movs	r2, #0
 8010324:	1c4d      	adds	r5, r1, #1
 8010326:	0021      	movs	r1, r4
 8010328:	1c60      	adds	r0, r4, #1
 801032a:	30ff      	adds	r0, #255	; 0xff
 801032c:	700a      	strb	r2, [r1, #0]
 801032e:	3101      	adds	r1, #1
 8010330:	4281      	cmp	r1, r0
 8010332:	d1fb      	bne.n	801032c <__sccl+0x14>
 8010334:	1e68      	subs	r0, r5, #1
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00c      	beq.n	8010354 <__sccl+0x3c>
 801033a:	2101      	movs	r1, #1
 801033c:	262d      	movs	r6, #45	; 0x2d
 801033e:	404a      	eors	r2, r1
 8010340:	0028      	movs	r0, r5
 8010342:	54e2      	strb	r2, [r4, r3]
 8010344:	7801      	ldrb	r1, [r0, #0]
 8010346:	1c45      	adds	r5, r0, #1
 8010348:	292d      	cmp	r1, #45	; 0x2d
 801034a:	d00c      	beq.n	8010366 <__sccl+0x4e>
 801034c:	295d      	cmp	r1, #93	; 0x5d
 801034e:	d01d      	beq.n	801038c <__sccl+0x74>
 8010350:	2900      	cmp	r1, #0
 8010352:	d104      	bne.n	801035e <__sccl+0x46>
 8010354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010356:	2201      	movs	r2, #1
 8010358:	784b      	ldrb	r3, [r1, #1]
 801035a:	1c8d      	adds	r5, r1, #2
 801035c:	e7e3      	b.n	8010326 <__sccl+0xe>
 801035e:	000b      	movs	r3, r1
 8010360:	e7ee      	b.n	8010340 <__sccl+0x28>
 8010362:	0033      	movs	r3, r6
 8010364:	e7ec      	b.n	8010340 <__sccl+0x28>
 8010366:	7841      	ldrb	r1, [r0, #1]
 8010368:	295d      	cmp	r1, #93	; 0x5d
 801036a:	d0fa      	beq.n	8010362 <__sccl+0x4a>
 801036c:	428b      	cmp	r3, r1
 801036e:	dcf8      	bgt.n	8010362 <__sccl+0x4a>
 8010370:	001d      	movs	r5, r3
 8010372:	3002      	adds	r0, #2
 8010374:	3501      	adds	r5, #1
 8010376:	5562      	strb	r2, [r4, r5]
 8010378:	42a9      	cmp	r1, r5
 801037a:	dcfb      	bgt.n	8010374 <__sccl+0x5c>
 801037c:	2500      	movs	r5, #0
 801037e:	1c5f      	adds	r7, r3, #1
 8010380:	428b      	cmp	r3, r1
 8010382:	da01      	bge.n	8010388 <__sccl+0x70>
 8010384:	1acd      	subs	r5, r1, r3
 8010386:	3d01      	subs	r5, #1
 8010388:	197b      	adds	r3, r7, r5
 801038a:	e7db      	b.n	8010344 <__sccl+0x2c>
 801038c:	0028      	movs	r0, r5
 801038e:	e7e1      	b.n	8010354 <__sccl+0x3c>

08010390 <_localeconv_r>:
 8010390:	4800      	ldr	r0, [pc, #0]	; (8010394 <_localeconv_r+0x4>)
 8010392:	4770      	bx	lr
 8010394:	20000534 	.word	0x20000534

08010398 <__libc_fini_array>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	4c07      	ldr	r4, [pc, #28]	; (80103b8 <__libc_fini_array+0x20>)
 801039c:	4d07      	ldr	r5, [pc, #28]	; (80103bc <__libc_fini_array+0x24>)
 801039e:	1b64      	subs	r4, r4, r5
 80103a0:	10a4      	asrs	r4, r4, #2
 80103a2:	2c00      	cmp	r4, #0
 80103a4:	d102      	bne.n	80103ac <__libc_fini_array+0x14>
 80103a6:	f002 fd47 	bl	8012e38 <_fini>
 80103aa:	bd70      	pop	{r4, r5, r6, pc}
 80103ac:	3c01      	subs	r4, #1
 80103ae:	00a3      	lsls	r3, r4, #2
 80103b0:	58eb      	ldr	r3, [r5, r3]
 80103b2:	4798      	blx	r3
 80103b4:	e7f5      	b.n	80103a2 <__libc_fini_array+0xa>
 80103b6:	46c0      	nop			; (mov r8, r8)
 80103b8:	08014f40 	.word	0x08014f40
 80103bc:	08014f3c 	.word	0x08014f3c

080103c0 <memchr>:
 80103c0:	b2c9      	uxtb	r1, r1
 80103c2:	1882      	adds	r2, r0, r2
 80103c4:	4290      	cmp	r0, r2
 80103c6:	d101      	bne.n	80103cc <memchr+0xc>
 80103c8:	2000      	movs	r0, #0
 80103ca:	4770      	bx	lr
 80103cc:	7803      	ldrb	r3, [r0, #0]
 80103ce:	428b      	cmp	r3, r1
 80103d0:	d0fb      	beq.n	80103ca <memchr+0xa>
 80103d2:	3001      	adds	r0, #1
 80103d4:	e7f6      	b.n	80103c4 <memchr+0x4>
	...

080103d8 <frexp>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	0014      	movs	r4, r2
 80103dc:	2500      	movs	r5, #0
 80103de:	6025      	str	r5, [r4, #0]
 80103e0:	4d10      	ldr	r5, [pc, #64]	; (8010424 <frexp+0x4c>)
 80103e2:	004b      	lsls	r3, r1, #1
 80103e4:	000a      	movs	r2, r1
 80103e6:	085b      	lsrs	r3, r3, #1
 80103e8:	42ab      	cmp	r3, r5
 80103ea:	dc1a      	bgt.n	8010422 <frexp+0x4a>
 80103ec:	001d      	movs	r5, r3
 80103ee:	4305      	orrs	r5, r0
 80103f0:	d017      	beq.n	8010422 <frexp+0x4a>
 80103f2:	4d0d      	ldr	r5, [pc, #52]	; (8010428 <frexp+0x50>)
 80103f4:	4229      	tst	r1, r5
 80103f6:	d109      	bne.n	801040c <frexp+0x34>
 80103f8:	2200      	movs	r2, #0
 80103fa:	4b0c      	ldr	r3, [pc, #48]	; (801042c <frexp+0x54>)
 80103fc:	f7f1 f936 	bl	800166c <__aeabi_dmul>
 8010400:	2536      	movs	r5, #54	; 0x36
 8010402:	000a      	movs	r2, r1
 8010404:	004b      	lsls	r3, r1, #1
 8010406:	426d      	negs	r5, r5
 8010408:	085b      	lsrs	r3, r3, #1
 801040a:	6025      	str	r5, [r4, #0]
 801040c:	4d08      	ldr	r5, [pc, #32]	; (8010430 <frexp+0x58>)
 801040e:	151b      	asrs	r3, r3, #20
 8010410:	195b      	adds	r3, r3, r5
 8010412:	6825      	ldr	r5, [r4, #0]
 8010414:	18eb      	adds	r3, r5, r3
 8010416:	6023      	str	r3, [r4, #0]
 8010418:	4b06      	ldr	r3, [pc, #24]	; (8010434 <frexp+0x5c>)
 801041a:	401a      	ands	r2, r3
 801041c:	4b06      	ldr	r3, [pc, #24]	; (8010438 <frexp+0x60>)
 801041e:	4313      	orrs	r3, r2
 8010420:	0019      	movs	r1, r3
 8010422:	bd70      	pop	{r4, r5, r6, pc}
 8010424:	7fefffff 	.word	0x7fefffff
 8010428:	7ff00000 	.word	0x7ff00000
 801042c:	43500000 	.word	0x43500000
 8010430:	fffffc02 	.word	0xfffffc02
 8010434:	800fffff 	.word	0x800fffff
 8010438:	3fe00000 	.word	0x3fe00000

0801043c <__register_exitproc>:
 801043c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801043e:	4f1c      	ldr	r7, [pc, #112]	; (80104b0 <__register_exitproc+0x74>)
 8010440:	0004      	movs	r4, r0
 8010442:	6838      	ldr	r0, [r7, #0]
 8010444:	0016      	movs	r6, r2
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	9100      	str	r1, [sp, #0]
 801044a:	f7fc f8cb 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 801044e:	4a19      	ldr	r2, [pc, #100]	; (80104b4 <__register_exitproc+0x78>)
 8010450:	6813      	ldr	r3, [r2, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <__register_exitproc+0x1e>
 8010456:	4b18      	ldr	r3, [pc, #96]	; (80104b8 <__register_exitproc+0x7c>)
 8010458:	6013      	str	r3, [r2, #0]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	6838      	ldr	r0, [r7, #0]
 801045e:	2a1f      	cmp	r2, #31
 8010460:	dd04      	ble.n	801046c <__register_exitproc+0x30>
 8010462:	f7fc f8c0 	bl	800c5e6 <__retarget_lock_release_recursive>
 8010466:	2001      	movs	r0, #1
 8010468:	4240      	negs	r0, r0
 801046a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801046c:	2c00      	cmp	r4, #0
 801046e:	d014      	beq.n	801049a <__register_exitproc+0x5e>
 8010470:	0091      	lsls	r1, r2, #2
 8010472:	1859      	adds	r1, r3, r1
 8010474:	000f      	movs	r7, r1
 8010476:	3788      	adds	r7, #136	; 0x88
 8010478:	603e      	str	r6, [r7, #0]
 801047a:	2701      	movs	r7, #1
 801047c:	001e      	movs	r6, r3
 801047e:	4097      	lsls	r7, r2
 8010480:	3685      	adds	r6, #133	; 0x85
 8010482:	36ff      	adds	r6, #255	; 0xff
 8010484:	6875      	ldr	r5, [r6, #4]
 8010486:	31fc      	adds	r1, #252	; 0xfc
 8010488:	433d      	orrs	r5, r7
 801048a:	6075      	str	r5, [r6, #4]
 801048c:	9d01      	ldr	r5, [sp, #4]
 801048e:	60cd      	str	r5, [r1, #12]
 8010490:	2c02      	cmp	r4, #2
 8010492:	d102      	bne.n	801049a <__register_exitproc+0x5e>
 8010494:	68b1      	ldr	r1, [r6, #8]
 8010496:	4339      	orrs	r1, r7
 8010498:	60b1      	str	r1, [r6, #8]
 801049a:	1c51      	adds	r1, r2, #1
 801049c:	6059      	str	r1, [r3, #4]
 801049e:	3202      	adds	r2, #2
 80104a0:	9900      	ldr	r1, [sp, #0]
 80104a2:	0092      	lsls	r2, r2, #2
 80104a4:	50d1      	str	r1, [r2, r3]
 80104a6:	f7fc f89e 	bl	800c5e6 <__retarget_lock_release_recursive>
 80104aa:	2000      	movs	r0, #0
 80104ac:	e7dd      	b.n	801046a <__register_exitproc+0x2e>
 80104ae:	46c0      	nop			; (mov r8, r8)
 80104b0:	200006d4 	.word	0x200006d4
 80104b4:	20000db0 	.word	0x20000db0
 80104b8:	20000db4 	.word	0x20000db4

080104bc <__assert_func>:
 80104bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80104be:	0014      	movs	r4, r2
 80104c0:	001a      	movs	r2, r3
 80104c2:	4b09      	ldr	r3, [pc, #36]	; (80104e8 <__assert_func+0x2c>)
 80104c4:	0005      	movs	r5, r0
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	000e      	movs	r6, r1
 80104ca:	68d8      	ldr	r0, [r3, #12]
 80104cc:	4b07      	ldr	r3, [pc, #28]	; (80104ec <__assert_func+0x30>)
 80104ce:	2c00      	cmp	r4, #0
 80104d0:	d101      	bne.n	80104d6 <__assert_func+0x1a>
 80104d2:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <__assert_func+0x34>)
 80104d4:	001c      	movs	r4, r3
 80104d6:	4907      	ldr	r1, [pc, #28]	; (80104f4 <__assert_func+0x38>)
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	9402      	str	r4, [sp, #8]
 80104dc:	002b      	movs	r3, r5
 80104de:	9600      	str	r6, [sp, #0]
 80104e0:	f001 fa20 	bl	8011924 <fiprintf>
 80104e4:	f002 fb08 	bl	8012af8 <abort>
 80104e8:	200006d0 	.word	0x200006d0
 80104ec:	08014e68 	.word	0x08014e68
 80104f0:	08014ea3 	.word	0x08014ea3
 80104f4:	08014e75 	.word	0x08014e75

080104f8 <_calloc_r>:
 80104f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fa:	2400      	movs	r4, #0
 80104fc:	0c0b      	lsrs	r3, r1, #16
 80104fe:	0c16      	lsrs	r6, r2, #16
 8010500:	42a3      	cmp	r3, r4
 8010502:	d133      	bne.n	801056c <_calloc_r+0x74>
 8010504:	42a6      	cmp	r6, r4
 8010506:	d121      	bne.n	801054c <_calloc_r+0x54>
 8010508:	b28b      	uxth	r3, r1
 801050a:	b291      	uxth	r1, r2
 801050c:	4359      	muls	r1, r3
 801050e:	f7fa fc37 	bl	800ad80 <_malloc_r>
 8010512:	1e05      	subs	r5, r0, #0
 8010514:	d033      	beq.n	801057e <_calloc_r+0x86>
 8010516:	0003      	movs	r3, r0
 8010518:	3b08      	subs	r3, #8
 801051a:	685a      	ldr	r2, [r3, #4]
 801051c:	2303      	movs	r3, #3
 801051e:	439a      	bics	r2, r3
 8010520:	3a04      	subs	r2, #4
 8010522:	2a24      	cmp	r2, #36	; 0x24
 8010524:	d832      	bhi.n	801058c <_calloc_r+0x94>
 8010526:	0003      	movs	r3, r0
 8010528:	2a13      	cmp	r2, #19
 801052a:	d90a      	bls.n	8010542 <_calloc_r+0x4a>
 801052c:	6004      	str	r4, [r0, #0]
 801052e:	6044      	str	r4, [r0, #4]
 8010530:	3308      	adds	r3, #8
 8010532:	2a1b      	cmp	r2, #27
 8010534:	d905      	bls.n	8010542 <_calloc_r+0x4a>
 8010536:	6084      	str	r4, [r0, #8]
 8010538:	60c4      	str	r4, [r0, #12]
 801053a:	2a24      	cmp	r2, #36	; 0x24
 801053c:	d021      	beq.n	8010582 <_calloc_r+0x8a>
 801053e:	0003      	movs	r3, r0
 8010540:	3310      	adds	r3, #16
 8010542:	2200      	movs	r2, #0
 8010544:	601a      	str	r2, [r3, #0]
 8010546:	605a      	str	r2, [r3, #4]
 8010548:	609a      	str	r2, [r3, #8]
 801054a:	e018      	b.n	801057e <_calloc_r+0x86>
 801054c:	1c33      	adds	r3, r6, #0
 801054e:	1c0d      	adds	r5, r1, #0
 8010550:	b289      	uxth	r1, r1
 8010552:	b292      	uxth	r2, r2
 8010554:	434a      	muls	r2, r1
 8010556:	b2ad      	uxth	r5, r5
 8010558:	b299      	uxth	r1, r3
 801055a:	4369      	muls	r1, r5
 801055c:	0c13      	lsrs	r3, r2, #16
 801055e:	18c9      	adds	r1, r1, r3
 8010560:	0c0b      	lsrs	r3, r1, #16
 8010562:	d107      	bne.n	8010574 <_calloc_r+0x7c>
 8010564:	0409      	lsls	r1, r1, #16
 8010566:	b292      	uxth	r2, r2
 8010568:	4311      	orrs	r1, r2
 801056a:	e7d0      	b.n	801050e <_calloc_r+0x16>
 801056c:	2e00      	cmp	r6, #0
 801056e:	d101      	bne.n	8010574 <_calloc_r+0x7c>
 8010570:	1c15      	adds	r5, r2, #0
 8010572:	e7ed      	b.n	8010550 <_calloc_r+0x58>
 8010574:	f7fc f80a 	bl	800c58c <__errno>
 8010578:	230c      	movs	r3, #12
 801057a:	2500      	movs	r5, #0
 801057c:	6003      	str	r3, [r0, #0]
 801057e:	0028      	movs	r0, r5
 8010580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010582:	0003      	movs	r3, r0
 8010584:	6104      	str	r4, [r0, #16]
 8010586:	3318      	adds	r3, #24
 8010588:	6144      	str	r4, [r0, #20]
 801058a:	e7da      	b.n	8010542 <_calloc_r+0x4a>
 801058c:	2100      	movs	r1, #0
 801058e:	f7fb ff09 	bl	800c3a4 <memset>
 8010592:	e7f4      	b.n	801057e <_calloc_r+0x86>

08010594 <quorem>:
 8010594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010596:	6902      	ldr	r2, [r0, #16]
 8010598:	690b      	ldr	r3, [r1, #16]
 801059a:	b089      	sub	sp, #36	; 0x24
 801059c:	0007      	movs	r7, r0
 801059e:	9104      	str	r1, [sp, #16]
 80105a0:	2000      	movs	r0, #0
 80105a2:	429a      	cmp	r2, r3
 80105a4:	db69      	blt.n	801067a <quorem+0xe6>
 80105a6:	3b01      	subs	r3, #1
 80105a8:	009c      	lsls	r4, r3, #2
 80105aa:	9301      	str	r3, [sp, #4]
 80105ac:	000b      	movs	r3, r1
 80105ae:	3314      	adds	r3, #20
 80105b0:	9306      	str	r3, [sp, #24]
 80105b2:	191b      	adds	r3, r3, r4
 80105b4:	9305      	str	r3, [sp, #20]
 80105b6:	003b      	movs	r3, r7
 80105b8:	3314      	adds	r3, #20
 80105ba:	9303      	str	r3, [sp, #12]
 80105bc:	191c      	adds	r4, r3, r4
 80105be:	9b05      	ldr	r3, [sp, #20]
 80105c0:	6826      	ldr	r6, [r4, #0]
 80105c2:	681d      	ldr	r5, [r3, #0]
 80105c4:	0030      	movs	r0, r6
 80105c6:	3501      	adds	r5, #1
 80105c8:	0029      	movs	r1, r5
 80105ca:	f7ef fdb7 	bl	800013c <__udivsi3>
 80105ce:	9002      	str	r0, [sp, #8]
 80105d0:	42ae      	cmp	r6, r5
 80105d2:	d329      	bcc.n	8010628 <quorem+0x94>
 80105d4:	9b06      	ldr	r3, [sp, #24]
 80105d6:	2600      	movs	r6, #0
 80105d8:	469c      	mov	ip, r3
 80105da:	9d03      	ldr	r5, [sp, #12]
 80105dc:	9606      	str	r6, [sp, #24]
 80105de:	4662      	mov	r2, ip
 80105e0:	ca08      	ldmia	r2!, {r3}
 80105e2:	6828      	ldr	r0, [r5, #0]
 80105e4:	4694      	mov	ip, r2
 80105e6:	9a02      	ldr	r2, [sp, #8]
 80105e8:	b299      	uxth	r1, r3
 80105ea:	4351      	muls	r1, r2
 80105ec:	0c1b      	lsrs	r3, r3, #16
 80105ee:	4353      	muls	r3, r2
 80105f0:	1989      	adds	r1, r1, r6
 80105f2:	0c0a      	lsrs	r2, r1, #16
 80105f4:	189b      	adds	r3, r3, r2
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	0c1e      	lsrs	r6, r3, #16
 80105fa:	9b06      	ldr	r3, [sp, #24]
 80105fc:	b282      	uxth	r2, r0
 80105fe:	18d2      	adds	r2, r2, r3
 8010600:	466b      	mov	r3, sp
 8010602:	b289      	uxth	r1, r1
 8010604:	8b9b      	ldrh	r3, [r3, #28]
 8010606:	1a52      	subs	r2, r2, r1
 8010608:	0c01      	lsrs	r1, r0, #16
 801060a:	1ac9      	subs	r1, r1, r3
 801060c:	1413      	asrs	r3, r2, #16
 801060e:	18cb      	adds	r3, r1, r3
 8010610:	1419      	asrs	r1, r3, #16
 8010612:	b292      	uxth	r2, r2
 8010614:	041b      	lsls	r3, r3, #16
 8010616:	4313      	orrs	r3, r2
 8010618:	c508      	stmia	r5!, {r3}
 801061a:	9b05      	ldr	r3, [sp, #20]
 801061c:	9106      	str	r1, [sp, #24]
 801061e:	4563      	cmp	r3, ip
 8010620:	d2dd      	bcs.n	80105de <quorem+0x4a>
 8010622:	6823      	ldr	r3, [r4, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d030      	beq.n	801068a <quorem+0xf6>
 8010628:	0038      	movs	r0, r7
 801062a:	9904      	ldr	r1, [sp, #16]
 801062c:	f7fc ff04 	bl	800d438 <__mcmp>
 8010630:	2800      	cmp	r0, #0
 8010632:	db21      	blt.n	8010678 <quorem+0xe4>
 8010634:	0038      	movs	r0, r7
 8010636:	2600      	movs	r6, #0
 8010638:	9b02      	ldr	r3, [sp, #8]
 801063a:	9c04      	ldr	r4, [sp, #16]
 801063c:	3301      	adds	r3, #1
 801063e:	9302      	str	r3, [sp, #8]
 8010640:	3014      	adds	r0, #20
 8010642:	3414      	adds	r4, #20
 8010644:	6803      	ldr	r3, [r0, #0]
 8010646:	cc02      	ldmia	r4!, {r1}
 8010648:	b29d      	uxth	r5, r3
 801064a:	19ad      	adds	r5, r5, r6
 801064c:	b28a      	uxth	r2, r1
 801064e:	1aaa      	subs	r2, r5, r2
 8010650:	0c09      	lsrs	r1, r1, #16
 8010652:	0c1b      	lsrs	r3, r3, #16
 8010654:	1a5b      	subs	r3, r3, r1
 8010656:	1411      	asrs	r1, r2, #16
 8010658:	185b      	adds	r3, r3, r1
 801065a:	141e      	asrs	r6, r3, #16
 801065c:	b292      	uxth	r2, r2
 801065e:	041b      	lsls	r3, r3, #16
 8010660:	4313      	orrs	r3, r2
 8010662:	c008      	stmia	r0!, {r3}
 8010664:	9b05      	ldr	r3, [sp, #20]
 8010666:	42a3      	cmp	r3, r4
 8010668:	d2ec      	bcs.n	8010644 <quorem+0xb0>
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	9a03      	ldr	r2, [sp, #12]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	18d3      	adds	r3, r2, r3
 8010672:	681a      	ldr	r2, [r3, #0]
 8010674:	2a00      	cmp	r2, #0
 8010676:	d015      	beq.n	80106a4 <quorem+0x110>
 8010678:	9802      	ldr	r0, [sp, #8]
 801067a:	b009      	add	sp, #36	; 0x24
 801067c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801067e:	6823      	ldr	r3, [r4, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d106      	bne.n	8010692 <quorem+0xfe>
 8010684:	9b01      	ldr	r3, [sp, #4]
 8010686:	3b01      	subs	r3, #1
 8010688:	9301      	str	r3, [sp, #4]
 801068a:	9b03      	ldr	r3, [sp, #12]
 801068c:	3c04      	subs	r4, #4
 801068e:	42a3      	cmp	r3, r4
 8010690:	d3f5      	bcc.n	801067e <quorem+0xea>
 8010692:	9b01      	ldr	r3, [sp, #4]
 8010694:	613b      	str	r3, [r7, #16]
 8010696:	e7c7      	b.n	8010628 <quorem+0x94>
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	2a00      	cmp	r2, #0
 801069c:	d106      	bne.n	80106ac <quorem+0x118>
 801069e:	9a01      	ldr	r2, [sp, #4]
 80106a0:	3a01      	subs	r2, #1
 80106a2:	9201      	str	r2, [sp, #4]
 80106a4:	9a03      	ldr	r2, [sp, #12]
 80106a6:	3b04      	subs	r3, #4
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d3f5      	bcc.n	8010698 <quorem+0x104>
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	613b      	str	r3, [r7, #16]
 80106b0:	e7e2      	b.n	8010678 <quorem+0xe4>
	...

080106b4 <_dtoa_r>:
 80106b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106b6:	0014      	movs	r4, r2
 80106b8:	001d      	movs	r5, r3
 80106ba:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80106bc:	b09d      	sub	sp, #116	; 0x74
 80106be:	9408      	str	r4, [sp, #32]
 80106c0:	9509      	str	r5, [sp, #36]	; 0x24
 80106c2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80106c4:	9004      	str	r0, [sp, #16]
 80106c6:	2900      	cmp	r1, #0
 80106c8:	d009      	beq.n	80106de <_dtoa_r+0x2a>
 80106ca:	2301      	movs	r3, #1
 80106cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80106ce:	4093      	lsls	r3, r2
 80106d0:	604a      	str	r2, [r1, #4]
 80106d2:	608b      	str	r3, [r1, #8]
 80106d4:	f7fc fc56 	bl	800cf84 <_Bfree>
 80106d8:	2300      	movs	r3, #0
 80106da:	9a04      	ldr	r2, [sp, #16]
 80106dc:	6393      	str	r3, [r2, #56]	; 0x38
 80106de:	2d00      	cmp	r5, #0
 80106e0:	da1e      	bge.n	8010720 <_dtoa_r+0x6c>
 80106e2:	2301      	movs	r3, #1
 80106e4:	6033      	str	r3, [r6, #0]
 80106e6:	006b      	lsls	r3, r5, #1
 80106e8:	085b      	lsrs	r3, r3, #1
 80106ea:	9309      	str	r3, [sp, #36]	; 0x24
 80106ec:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80106ee:	4bb5      	ldr	r3, [pc, #724]	; (80109c4 <_dtoa_r+0x310>)
 80106f0:	4ab4      	ldr	r2, [pc, #720]	; (80109c4 <_dtoa_r+0x310>)
 80106f2:	403b      	ands	r3, r7
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d116      	bne.n	8010726 <_dtoa_r+0x72>
 80106f8:	4bb3      	ldr	r3, [pc, #716]	; (80109c8 <_dtoa_r+0x314>)
 80106fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80106fc:	6013      	str	r3, [r2, #0]
 80106fe:	033b      	lsls	r3, r7, #12
 8010700:	0b1b      	lsrs	r3, r3, #12
 8010702:	4323      	orrs	r3, r4
 8010704:	d101      	bne.n	801070a <_dtoa_r+0x56>
 8010706:	f000 fdb2 	bl	801126e <_dtoa_r+0xbba>
 801070a:	4bb0      	ldr	r3, [pc, #704]	; (80109cc <_dtoa_r+0x318>)
 801070c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801070e:	9306      	str	r3, [sp, #24]
 8010710:	2a00      	cmp	r2, #0
 8010712:	d002      	beq.n	801071a <_dtoa_r+0x66>
 8010714:	4bae      	ldr	r3, [pc, #696]	; (80109d0 <_dtoa_r+0x31c>)
 8010716:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010718:	6013      	str	r3, [r2, #0]
 801071a:	9806      	ldr	r0, [sp, #24]
 801071c:	b01d      	add	sp, #116	; 0x74
 801071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010720:	2300      	movs	r3, #0
 8010722:	6033      	str	r3, [r6, #0]
 8010724:	e7e2      	b.n	80106ec <_dtoa_r+0x38>
 8010726:	9a08      	ldr	r2, [sp, #32]
 8010728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801072a:	9210      	str	r2, [sp, #64]	; 0x40
 801072c:	9311      	str	r3, [sp, #68]	; 0x44
 801072e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010730:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010732:	2200      	movs	r2, #0
 8010734:	2300      	movs	r3, #0
 8010736:	f7ef fe87 	bl	8000448 <__aeabi_dcmpeq>
 801073a:	1e06      	subs	r6, r0, #0
 801073c:	d009      	beq.n	8010752 <_dtoa_r+0x9e>
 801073e:	2301      	movs	r3, #1
 8010740:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010742:	6013      	str	r3, [r2, #0]
 8010744:	4ba3      	ldr	r3, [pc, #652]	; (80109d4 <_dtoa_r+0x320>)
 8010746:	9306      	str	r3, [sp, #24]
 8010748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0e5      	beq.n	801071a <_dtoa_r+0x66>
 801074e:	4ba2      	ldr	r3, [pc, #648]	; (80109d8 <_dtoa_r+0x324>)
 8010750:	e7e1      	b.n	8010716 <_dtoa_r+0x62>
 8010752:	ab1a      	add	r3, sp, #104	; 0x68
 8010754:	9301      	str	r3, [sp, #4]
 8010756:	ab1b      	add	r3, sp, #108	; 0x6c
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	9804      	ldr	r0, [sp, #16]
 801075c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801075e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010760:	f7fc ff86 	bl	800d670 <__d2b>
 8010764:	007a      	lsls	r2, r7, #1
 8010766:	9005      	str	r0, [sp, #20]
 8010768:	0d52      	lsrs	r2, r2, #21
 801076a:	d100      	bne.n	801076e <_dtoa_r+0xba>
 801076c:	e07b      	b.n	8010866 <_dtoa_r+0x1b2>
 801076e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010770:	9617      	str	r6, [sp, #92]	; 0x5c
 8010772:	0319      	lsls	r1, r3, #12
 8010774:	4b99      	ldr	r3, [pc, #612]	; (80109dc <_dtoa_r+0x328>)
 8010776:	0b09      	lsrs	r1, r1, #12
 8010778:	430b      	orrs	r3, r1
 801077a:	4999      	ldr	r1, [pc, #612]	; (80109e0 <_dtoa_r+0x32c>)
 801077c:	1857      	adds	r7, r2, r1
 801077e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010780:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010782:	0019      	movs	r1, r3
 8010784:	2200      	movs	r2, #0
 8010786:	4b97      	ldr	r3, [pc, #604]	; (80109e4 <_dtoa_r+0x330>)
 8010788:	f7f1 fa32 	bl	8001bf0 <__aeabi_dsub>
 801078c:	4a96      	ldr	r2, [pc, #600]	; (80109e8 <_dtoa_r+0x334>)
 801078e:	4b97      	ldr	r3, [pc, #604]	; (80109ec <_dtoa_r+0x338>)
 8010790:	f7f0 ff6c 	bl	800166c <__aeabi_dmul>
 8010794:	4a96      	ldr	r2, [pc, #600]	; (80109f0 <_dtoa_r+0x33c>)
 8010796:	4b97      	ldr	r3, [pc, #604]	; (80109f4 <_dtoa_r+0x340>)
 8010798:	f7f0 f80e 	bl	80007b8 <__aeabi_dadd>
 801079c:	0004      	movs	r4, r0
 801079e:	0038      	movs	r0, r7
 80107a0:	000d      	movs	r5, r1
 80107a2:	f7f1 fdfb 	bl	800239c <__aeabi_i2d>
 80107a6:	4a94      	ldr	r2, [pc, #592]	; (80109f8 <_dtoa_r+0x344>)
 80107a8:	4b94      	ldr	r3, [pc, #592]	; (80109fc <_dtoa_r+0x348>)
 80107aa:	f7f0 ff5f 	bl	800166c <__aeabi_dmul>
 80107ae:	0002      	movs	r2, r0
 80107b0:	000b      	movs	r3, r1
 80107b2:	0020      	movs	r0, r4
 80107b4:	0029      	movs	r1, r5
 80107b6:	f7ef ffff 	bl	80007b8 <__aeabi_dadd>
 80107ba:	0004      	movs	r4, r0
 80107bc:	000d      	movs	r5, r1
 80107be:	f7f1 fdb7 	bl	8002330 <__aeabi_d2iz>
 80107c2:	2200      	movs	r2, #0
 80107c4:	9003      	str	r0, [sp, #12]
 80107c6:	2300      	movs	r3, #0
 80107c8:	0020      	movs	r0, r4
 80107ca:	0029      	movs	r1, r5
 80107cc:	f7ef fe42 	bl	8000454 <__aeabi_dcmplt>
 80107d0:	2800      	cmp	r0, #0
 80107d2:	d00b      	beq.n	80107ec <_dtoa_r+0x138>
 80107d4:	9803      	ldr	r0, [sp, #12]
 80107d6:	f7f1 fde1 	bl	800239c <__aeabi_i2d>
 80107da:	002b      	movs	r3, r5
 80107dc:	0022      	movs	r2, r4
 80107de:	f7ef fe33 	bl	8000448 <__aeabi_dcmpeq>
 80107e2:	4243      	negs	r3, r0
 80107e4:	4158      	adcs	r0, r3
 80107e6:	9b03      	ldr	r3, [sp, #12]
 80107e8:	1a1b      	subs	r3, r3, r0
 80107ea:	9303      	str	r3, [sp, #12]
 80107ec:	2301      	movs	r3, #1
 80107ee:	9316      	str	r3, [sp, #88]	; 0x58
 80107f0:	9b03      	ldr	r3, [sp, #12]
 80107f2:	2b16      	cmp	r3, #22
 80107f4:	d810      	bhi.n	8010818 <_dtoa_r+0x164>
 80107f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80107f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80107fa:	9a03      	ldr	r2, [sp, #12]
 80107fc:	4b80      	ldr	r3, [pc, #512]	; (8010a00 <_dtoa_r+0x34c>)
 80107fe:	00d2      	lsls	r2, r2, #3
 8010800:	189b      	adds	r3, r3, r2
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	f7ef fe25 	bl	8000454 <__aeabi_dcmplt>
 801080a:	2800      	cmp	r0, #0
 801080c:	d047      	beq.n	801089e <_dtoa_r+0x1ea>
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	3b01      	subs	r3, #1
 8010812:	9303      	str	r3, [sp, #12]
 8010814:	2300      	movs	r3, #0
 8010816:	9316      	str	r3, [sp, #88]	; 0x58
 8010818:	2200      	movs	r2, #0
 801081a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801081c:	920a      	str	r2, [sp, #40]	; 0x28
 801081e:	1bdb      	subs	r3, r3, r7
 8010820:	1e5a      	subs	r2, r3, #1
 8010822:	d53e      	bpl.n	80108a2 <_dtoa_r+0x1ee>
 8010824:	2201      	movs	r2, #1
 8010826:	1ad3      	subs	r3, r2, r3
 8010828:	930a      	str	r3, [sp, #40]	; 0x28
 801082a:	2300      	movs	r3, #0
 801082c:	930c      	str	r3, [sp, #48]	; 0x30
 801082e:	9b03      	ldr	r3, [sp, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	db38      	blt.n	80108a6 <_dtoa_r+0x1f2>
 8010834:	9a03      	ldr	r2, [sp, #12]
 8010836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010838:	4694      	mov	ip, r2
 801083a:	4463      	add	r3, ip
 801083c:	930c      	str	r3, [sp, #48]	; 0x30
 801083e:	2300      	movs	r3, #0
 8010840:	9213      	str	r2, [sp, #76]	; 0x4c
 8010842:	930d      	str	r3, [sp, #52]	; 0x34
 8010844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010846:	2401      	movs	r4, #1
 8010848:	2b09      	cmp	r3, #9
 801084a:	d867      	bhi.n	801091c <_dtoa_r+0x268>
 801084c:	2b05      	cmp	r3, #5
 801084e:	dd02      	ble.n	8010856 <_dtoa_r+0x1a2>
 8010850:	2400      	movs	r4, #0
 8010852:	3b04      	subs	r3, #4
 8010854:	9322      	str	r3, [sp, #136]	; 0x88
 8010856:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010858:	1e98      	subs	r0, r3, #2
 801085a:	2803      	cmp	r0, #3
 801085c:	d867      	bhi.n	801092e <_dtoa_r+0x27a>
 801085e:	f7ef fc59 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010862:	3a2b      	.short	0x3a2b
 8010864:	5b38      	.short	0x5b38
 8010866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010868:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801086a:	18f6      	adds	r6, r6, r3
 801086c:	4b65      	ldr	r3, [pc, #404]	; (8010a04 <_dtoa_r+0x350>)
 801086e:	18f2      	adds	r2, r6, r3
 8010870:	2a20      	cmp	r2, #32
 8010872:	dd0f      	ble.n	8010894 <_dtoa_r+0x1e0>
 8010874:	2340      	movs	r3, #64	; 0x40
 8010876:	1a9b      	subs	r3, r3, r2
 8010878:	409f      	lsls	r7, r3
 801087a:	4b63      	ldr	r3, [pc, #396]	; (8010a08 <_dtoa_r+0x354>)
 801087c:	0038      	movs	r0, r7
 801087e:	18f3      	adds	r3, r6, r3
 8010880:	40dc      	lsrs	r4, r3
 8010882:	4320      	orrs	r0, r4
 8010884:	f7f1 fdba 	bl	80023fc <__aeabi_ui2d>
 8010888:	2201      	movs	r2, #1
 801088a:	4b60      	ldr	r3, [pc, #384]	; (8010a0c <_dtoa_r+0x358>)
 801088c:	1e77      	subs	r7, r6, #1
 801088e:	18cb      	adds	r3, r1, r3
 8010890:	9217      	str	r2, [sp, #92]	; 0x5c
 8010892:	e776      	b.n	8010782 <_dtoa_r+0xce>
 8010894:	2320      	movs	r3, #32
 8010896:	0020      	movs	r0, r4
 8010898:	1a9b      	subs	r3, r3, r2
 801089a:	4098      	lsls	r0, r3
 801089c:	e7f2      	b.n	8010884 <_dtoa_r+0x1d0>
 801089e:	9016      	str	r0, [sp, #88]	; 0x58
 80108a0:	e7ba      	b.n	8010818 <_dtoa_r+0x164>
 80108a2:	920c      	str	r2, [sp, #48]	; 0x30
 80108a4:	e7c3      	b.n	801082e <_dtoa_r+0x17a>
 80108a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108a8:	9a03      	ldr	r2, [sp, #12]
 80108aa:	1a9b      	subs	r3, r3, r2
 80108ac:	930a      	str	r3, [sp, #40]	; 0x28
 80108ae:	4253      	negs	r3, r2
 80108b0:	930d      	str	r3, [sp, #52]	; 0x34
 80108b2:	2300      	movs	r3, #0
 80108b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80108b6:	e7c5      	b.n	8010844 <_dtoa_r+0x190>
 80108b8:	2300      	movs	r3, #0
 80108ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80108bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80108be:	930b      	str	r3, [sp, #44]	; 0x2c
 80108c0:	9307      	str	r3, [sp, #28]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dc13      	bgt.n	80108ee <_dtoa_r+0x23a>
 80108c6:	2301      	movs	r3, #1
 80108c8:	001a      	movs	r2, r3
 80108ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80108cc:	9307      	str	r3, [sp, #28]
 80108ce:	9223      	str	r2, [sp, #140]	; 0x8c
 80108d0:	e00d      	b.n	80108ee <_dtoa_r+0x23a>
 80108d2:	2301      	movs	r3, #1
 80108d4:	e7f1      	b.n	80108ba <_dtoa_r+0x206>
 80108d6:	2300      	movs	r3, #0
 80108d8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80108da:	930f      	str	r3, [sp, #60]	; 0x3c
 80108dc:	4694      	mov	ip, r2
 80108de:	9b03      	ldr	r3, [sp, #12]
 80108e0:	4463      	add	r3, ip
 80108e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80108e4:	3301      	adds	r3, #1
 80108e6:	9307      	str	r3, [sp, #28]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	dc00      	bgt.n	80108ee <_dtoa_r+0x23a>
 80108ec:	2301      	movs	r3, #1
 80108ee:	2100      	movs	r1, #0
 80108f0:	2204      	movs	r2, #4
 80108f2:	0010      	movs	r0, r2
 80108f4:	3014      	adds	r0, #20
 80108f6:	4298      	cmp	r0, r3
 80108f8:	d91d      	bls.n	8010936 <_dtoa_r+0x282>
 80108fa:	9b04      	ldr	r3, [sp, #16]
 80108fc:	0018      	movs	r0, r3
 80108fe:	63d9      	str	r1, [r3, #60]	; 0x3c
 8010900:	f7fc fb18 	bl	800cf34 <_Balloc>
 8010904:	9006      	str	r0, [sp, #24]
 8010906:	2800      	cmp	r0, #0
 8010908:	d118      	bne.n	801093c <_dtoa_r+0x288>
 801090a:	21b0      	movs	r1, #176	; 0xb0
 801090c:	4b40      	ldr	r3, [pc, #256]	; (8010a10 <_dtoa_r+0x35c>)
 801090e:	4841      	ldr	r0, [pc, #260]	; (8010a14 <_dtoa_r+0x360>)
 8010910:	9a06      	ldr	r2, [sp, #24]
 8010912:	31ff      	adds	r1, #255	; 0xff
 8010914:	f7ff fdd2 	bl	80104bc <__assert_func>
 8010918:	2301      	movs	r3, #1
 801091a:	e7dd      	b.n	80108d8 <_dtoa_r+0x224>
 801091c:	2300      	movs	r3, #0
 801091e:	940f      	str	r4, [sp, #60]	; 0x3c
 8010920:	9322      	str	r3, [sp, #136]	; 0x88
 8010922:	3b01      	subs	r3, #1
 8010924:	930b      	str	r3, [sp, #44]	; 0x2c
 8010926:	9307      	str	r3, [sp, #28]
 8010928:	2200      	movs	r2, #0
 801092a:	3313      	adds	r3, #19
 801092c:	e7cf      	b.n	80108ce <_dtoa_r+0x21a>
 801092e:	2301      	movs	r3, #1
 8010930:	930f      	str	r3, [sp, #60]	; 0x3c
 8010932:	3b02      	subs	r3, #2
 8010934:	e7f6      	b.n	8010924 <_dtoa_r+0x270>
 8010936:	3101      	adds	r1, #1
 8010938:	0052      	lsls	r2, r2, #1
 801093a:	e7da      	b.n	80108f2 <_dtoa_r+0x23e>
 801093c:	9b04      	ldr	r3, [sp, #16]
 801093e:	9a06      	ldr	r2, [sp, #24]
 8010940:	639a      	str	r2, [r3, #56]	; 0x38
 8010942:	9b07      	ldr	r3, [sp, #28]
 8010944:	2b0e      	cmp	r3, #14
 8010946:	d900      	bls.n	801094a <_dtoa_r+0x296>
 8010948:	e0e3      	b.n	8010b12 <_dtoa_r+0x45e>
 801094a:	2c00      	cmp	r4, #0
 801094c:	d100      	bne.n	8010950 <_dtoa_r+0x29c>
 801094e:	e0e0      	b.n	8010b12 <_dtoa_r+0x45e>
 8010950:	9b03      	ldr	r3, [sp, #12]
 8010952:	2b00      	cmp	r3, #0
 8010954:	dd62      	ble.n	8010a1c <_dtoa_r+0x368>
 8010956:	210f      	movs	r1, #15
 8010958:	9a03      	ldr	r2, [sp, #12]
 801095a:	4b29      	ldr	r3, [pc, #164]	; (8010a00 <_dtoa_r+0x34c>)
 801095c:	400a      	ands	r2, r1
 801095e:	00d2      	lsls	r2, r2, #3
 8010960:	189b      	adds	r3, r3, r2
 8010962:	681e      	ldr	r6, [r3, #0]
 8010964:	685f      	ldr	r7, [r3, #4]
 8010966:	9b03      	ldr	r3, [sp, #12]
 8010968:	2402      	movs	r4, #2
 801096a:	111d      	asrs	r5, r3, #4
 801096c:	05db      	lsls	r3, r3, #23
 801096e:	d50a      	bpl.n	8010986 <_dtoa_r+0x2d2>
 8010970:	4b29      	ldr	r3, [pc, #164]	; (8010a18 <_dtoa_r+0x364>)
 8010972:	400d      	ands	r5, r1
 8010974:	6a1a      	ldr	r2, [r3, #32]
 8010976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010978:	9810      	ldr	r0, [sp, #64]	; 0x40
 801097a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801097c:	f7f0 fa7c 	bl	8000e78 <__aeabi_ddiv>
 8010980:	9008      	str	r0, [sp, #32]
 8010982:	9109      	str	r1, [sp, #36]	; 0x24
 8010984:	3401      	adds	r4, #1
 8010986:	4b24      	ldr	r3, [pc, #144]	; (8010a18 <_dtoa_r+0x364>)
 8010988:	930e      	str	r3, [sp, #56]	; 0x38
 801098a:	2d00      	cmp	r5, #0
 801098c:	d108      	bne.n	80109a0 <_dtoa_r+0x2ec>
 801098e:	9808      	ldr	r0, [sp, #32]
 8010990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010992:	0032      	movs	r2, r6
 8010994:	003b      	movs	r3, r7
 8010996:	f7f0 fa6f 	bl	8000e78 <__aeabi_ddiv>
 801099a:	9008      	str	r0, [sp, #32]
 801099c:	9109      	str	r1, [sp, #36]	; 0x24
 801099e:	e058      	b.n	8010a52 <_dtoa_r+0x39e>
 80109a0:	2301      	movs	r3, #1
 80109a2:	421d      	tst	r5, r3
 80109a4:	d009      	beq.n	80109ba <_dtoa_r+0x306>
 80109a6:	18e4      	adds	r4, r4, r3
 80109a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109aa:	0030      	movs	r0, r6
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	685b      	ldr	r3, [r3, #4]
 80109b0:	0039      	movs	r1, r7
 80109b2:	f7f0 fe5b 	bl	800166c <__aeabi_dmul>
 80109b6:	0006      	movs	r6, r0
 80109b8:	000f      	movs	r7, r1
 80109ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109bc:	106d      	asrs	r5, r5, #1
 80109be:	3308      	adds	r3, #8
 80109c0:	e7e2      	b.n	8010988 <_dtoa_r+0x2d4>
 80109c2:	46c0      	nop			; (mov r8, r8)
 80109c4:	7ff00000 	.word	0x7ff00000
 80109c8:	0000270f 	.word	0x0000270f
 80109cc:	08014ead 	.word	0x08014ead
 80109d0:	08014eb0 	.word	0x08014eb0
 80109d4:	08014e1e 	.word	0x08014e1e
 80109d8:	08014e1f 	.word	0x08014e1f
 80109dc:	3ff00000 	.word	0x3ff00000
 80109e0:	fffffc01 	.word	0xfffffc01
 80109e4:	3ff80000 	.word	0x3ff80000
 80109e8:	636f4361 	.word	0x636f4361
 80109ec:	3fd287a7 	.word	0x3fd287a7
 80109f0:	8b60c8b3 	.word	0x8b60c8b3
 80109f4:	3fc68a28 	.word	0x3fc68a28
 80109f8:	509f79fb 	.word	0x509f79fb
 80109fc:	3fd34413 	.word	0x3fd34413
 8010a00:	08014d18 	.word	0x08014d18
 8010a04:	00000432 	.word	0x00000432
 8010a08:	00000412 	.word	0x00000412
 8010a0c:	fe100000 	.word	0xfe100000
 8010a10:	08014c21 	.word	0x08014c21
 8010a14:	08014eb1 	.word	0x08014eb1
 8010a18:	08014cf0 	.word	0x08014cf0
 8010a1c:	9b03      	ldr	r3, [sp, #12]
 8010a1e:	2402      	movs	r4, #2
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d016      	beq.n	8010a52 <_dtoa_r+0x39e>
 8010a24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010a26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010a28:	220f      	movs	r2, #15
 8010a2a:	425d      	negs	r5, r3
 8010a2c:	402a      	ands	r2, r5
 8010a2e:	4bdd      	ldr	r3, [pc, #884]	; (8010da4 <_dtoa_r+0x6f0>)
 8010a30:	00d2      	lsls	r2, r2, #3
 8010a32:	189b      	adds	r3, r3, r2
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	f7f0 fe18 	bl	800166c <__aeabi_dmul>
 8010a3c:	2701      	movs	r7, #1
 8010a3e:	2300      	movs	r3, #0
 8010a40:	9008      	str	r0, [sp, #32]
 8010a42:	9109      	str	r1, [sp, #36]	; 0x24
 8010a44:	4ed8      	ldr	r6, [pc, #864]	; (8010da8 <_dtoa_r+0x6f4>)
 8010a46:	112d      	asrs	r5, r5, #4
 8010a48:	2d00      	cmp	r5, #0
 8010a4a:	d000      	beq.n	8010a4e <_dtoa_r+0x39a>
 8010a4c:	e091      	b.n	8010b72 <_dtoa_r+0x4be>
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d1a3      	bne.n	801099a <_dtoa_r+0x2e6>
 8010a52:	9e08      	ldr	r6, [sp, #32]
 8010a54:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d100      	bne.n	8010a5e <_dtoa_r+0x3aa>
 8010a5c:	e094      	b.n	8010b88 <_dtoa_r+0x4d4>
 8010a5e:	2200      	movs	r2, #0
 8010a60:	0030      	movs	r0, r6
 8010a62:	0039      	movs	r1, r7
 8010a64:	4bd1      	ldr	r3, [pc, #836]	; (8010dac <_dtoa_r+0x6f8>)
 8010a66:	f7ef fcf5 	bl	8000454 <__aeabi_dcmplt>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	d100      	bne.n	8010a70 <_dtoa_r+0x3bc>
 8010a6e:	e08b      	b.n	8010b88 <_dtoa_r+0x4d4>
 8010a70:	9b07      	ldr	r3, [sp, #28]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d100      	bne.n	8010a78 <_dtoa_r+0x3c4>
 8010a76:	e087      	b.n	8010b88 <_dtoa_r+0x4d4>
 8010a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	dd45      	ble.n	8010b0a <_dtoa_r+0x456>
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	2200      	movs	r2, #0
 8010a82:	3b01      	subs	r3, #1
 8010a84:	930e      	str	r3, [sp, #56]	; 0x38
 8010a86:	0030      	movs	r0, r6
 8010a88:	4bc9      	ldr	r3, [pc, #804]	; (8010db0 <_dtoa_r+0x6fc>)
 8010a8a:	0039      	movs	r1, r7
 8010a8c:	f7f0 fdee 	bl	800166c <__aeabi_dmul>
 8010a90:	9008      	str	r0, [sp, #32]
 8010a92:	9109      	str	r1, [sp, #36]	; 0x24
 8010a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a96:	3401      	adds	r4, #1
 8010a98:	0020      	movs	r0, r4
 8010a9a:	9e08      	ldr	r6, [sp, #32]
 8010a9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010a9e:	9312      	str	r3, [sp, #72]	; 0x48
 8010aa0:	f7f1 fc7c 	bl	800239c <__aeabi_i2d>
 8010aa4:	0032      	movs	r2, r6
 8010aa6:	003b      	movs	r3, r7
 8010aa8:	f7f0 fde0 	bl	800166c <__aeabi_dmul>
 8010aac:	2200      	movs	r2, #0
 8010aae:	4bc1      	ldr	r3, [pc, #772]	; (8010db4 <_dtoa_r+0x700>)
 8010ab0:	f7ef fe82 	bl	80007b8 <__aeabi_dadd>
 8010ab4:	4ac0      	ldr	r2, [pc, #768]	; (8010db8 <_dtoa_r+0x704>)
 8010ab6:	9014      	str	r0, [sp, #80]	; 0x50
 8010ab8:	9115      	str	r1, [sp, #84]	; 0x54
 8010aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010abc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010abe:	4694      	mov	ip, r2
 8010ac0:	9308      	str	r3, [sp, #32]
 8010ac2:	9409      	str	r4, [sp, #36]	; 0x24
 8010ac4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ac6:	4463      	add	r3, ip
 8010ac8:	9318      	str	r3, [sp, #96]	; 0x60
 8010aca:	9309      	str	r3, [sp, #36]	; 0x24
 8010acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d15e      	bne.n	8010b90 <_dtoa_r+0x4dc>
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	4bb9      	ldr	r3, [pc, #740]	; (8010dbc <_dtoa_r+0x708>)
 8010ad6:	0030      	movs	r0, r6
 8010ad8:	0039      	movs	r1, r7
 8010ada:	f7f1 f889 	bl	8001bf0 <__aeabi_dsub>
 8010ade:	9a08      	ldr	r2, [sp, #32]
 8010ae0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010ae2:	0004      	movs	r4, r0
 8010ae4:	000d      	movs	r5, r1
 8010ae6:	f7ef fcc9 	bl	800047c <__aeabi_dcmpgt>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d000      	beq.n	8010af0 <_dtoa_r+0x43c>
 8010aee:	e2b3      	b.n	8011058 <_dtoa_r+0x9a4>
 8010af0:	48b3      	ldr	r0, [pc, #716]	; (8010dc0 <_dtoa_r+0x70c>)
 8010af2:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010af4:	4684      	mov	ip, r0
 8010af6:	4461      	add	r1, ip
 8010af8:	000b      	movs	r3, r1
 8010afa:	0020      	movs	r0, r4
 8010afc:	0029      	movs	r1, r5
 8010afe:	9a08      	ldr	r2, [sp, #32]
 8010b00:	f7ef fca8 	bl	8000454 <__aeabi_dcmplt>
 8010b04:	2800      	cmp	r0, #0
 8010b06:	d000      	beq.n	8010b0a <_dtoa_r+0x456>
 8010b08:	e2a3      	b.n	8011052 <_dtoa_r+0x99e>
 8010b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8010b0e:	9308      	str	r3, [sp, #32]
 8010b10:	9409      	str	r4, [sp, #36]	; 0x24
 8010b12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da00      	bge.n	8010b1a <_dtoa_r+0x466>
 8010b18:	e179      	b.n	8010e0e <_dtoa_r+0x75a>
 8010b1a:	9a03      	ldr	r2, [sp, #12]
 8010b1c:	2a0e      	cmp	r2, #14
 8010b1e:	dd00      	ble.n	8010b22 <_dtoa_r+0x46e>
 8010b20:	e175      	b.n	8010e0e <_dtoa_r+0x75a>
 8010b22:	4ba0      	ldr	r3, [pc, #640]	; (8010da4 <_dtoa_r+0x6f0>)
 8010b24:	00d2      	lsls	r2, r2, #3
 8010b26:	189b      	adds	r3, r3, r2
 8010b28:	681e      	ldr	r6, [r3, #0]
 8010b2a:	685f      	ldr	r7, [r3, #4]
 8010b2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	db00      	blt.n	8010b34 <_dtoa_r+0x480>
 8010b32:	e0e5      	b.n	8010d00 <_dtoa_r+0x64c>
 8010b34:	9b07      	ldr	r3, [sp, #28]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	dd00      	ble.n	8010b3c <_dtoa_r+0x488>
 8010b3a:	e0e1      	b.n	8010d00 <_dtoa_r+0x64c>
 8010b3c:	d000      	beq.n	8010b40 <_dtoa_r+0x48c>
 8010b3e:	e288      	b.n	8011052 <_dtoa_r+0x99e>
 8010b40:	2200      	movs	r2, #0
 8010b42:	0030      	movs	r0, r6
 8010b44:	0039      	movs	r1, r7
 8010b46:	4b9d      	ldr	r3, [pc, #628]	; (8010dbc <_dtoa_r+0x708>)
 8010b48:	f7f0 fd90 	bl	800166c <__aeabi_dmul>
 8010b4c:	9a08      	ldr	r2, [sp, #32]
 8010b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b50:	f7ef fc9e 	bl	8000490 <__aeabi_dcmpge>
 8010b54:	9e07      	ldr	r6, [sp, #28]
 8010b56:	0037      	movs	r7, r6
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	d000      	beq.n	8010b5e <_dtoa_r+0x4aa>
 8010b5c:	e25f      	b.n	801101e <_dtoa_r+0x96a>
 8010b5e:	9b06      	ldr	r3, [sp, #24]
 8010b60:	9a06      	ldr	r2, [sp, #24]
 8010b62:	3301      	adds	r3, #1
 8010b64:	9308      	str	r3, [sp, #32]
 8010b66:	2331      	movs	r3, #49	; 0x31
 8010b68:	7013      	strb	r3, [r2, #0]
 8010b6a:	9b03      	ldr	r3, [sp, #12]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	9303      	str	r3, [sp, #12]
 8010b70:	e25a      	b.n	8011028 <_dtoa_r+0x974>
 8010b72:	423d      	tst	r5, r7
 8010b74:	d005      	beq.n	8010b82 <_dtoa_r+0x4ce>
 8010b76:	6832      	ldr	r2, [r6, #0]
 8010b78:	6873      	ldr	r3, [r6, #4]
 8010b7a:	f7f0 fd77 	bl	800166c <__aeabi_dmul>
 8010b7e:	003b      	movs	r3, r7
 8010b80:	3401      	adds	r4, #1
 8010b82:	106d      	asrs	r5, r5, #1
 8010b84:	3608      	adds	r6, #8
 8010b86:	e75f      	b.n	8010a48 <_dtoa_r+0x394>
 8010b88:	9b03      	ldr	r3, [sp, #12]
 8010b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8010b8c:	9b07      	ldr	r3, [sp, #28]
 8010b8e:	e783      	b.n	8010a98 <_dtoa_r+0x3e4>
 8010b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010b92:	4b84      	ldr	r3, [pc, #528]	; (8010da4 <_dtoa_r+0x6f0>)
 8010b94:	3a01      	subs	r2, #1
 8010b96:	00d2      	lsls	r2, r2, #3
 8010b98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010b9a:	189b      	adds	r3, r3, r2
 8010b9c:	9c08      	ldr	r4, [sp, #32]
 8010b9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	d051      	beq.n	8010c4c <_dtoa_r+0x598>
 8010ba8:	2000      	movs	r0, #0
 8010baa:	4986      	ldr	r1, [pc, #536]	; (8010dc4 <_dtoa_r+0x710>)
 8010bac:	f7f0 f964 	bl	8000e78 <__aeabi_ddiv>
 8010bb0:	0022      	movs	r2, r4
 8010bb2:	002b      	movs	r3, r5
 8010bb4:	f7f1 f81c 	bl	8001bf0 <__aeabi_dsub>
 8010bb8:	9a06      	ldr	r2, [sp, #24]
 8010bba:	0004      	movs	r4, r0
 8010bbc:	4694      	mov	ip, r2
 8010bbe:	000d      	movs	r5, r1
 8010bc0:	9b06      	ldr	r3, [sp, #24]
 8010bc2:	9314      	str	r3, [sp, #80]	; 0x50
 8010bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bc6:	4463      	add	r3, ip
 8010bc8:	9318      	str	r3, [sp, #96]	; 0x60
 8010bca:	0039      	movs	r1, r7
 8010bcc:	0030      	movs	r0, r6
 8010bce:	f7f1 fbaf 	bl	8002330 <__aeabi_d2iz>
 8010bd2:	9012      	str	r0, [sp, #72]	; 0x48
 8010bd4:	f7f1 fbe2 	bl	800239c <__aeabi_i2d>
 8010bd8:	0002      	movs	r2, r0
 8010bda:	000b      	movs	r3, r1
 8010bdc:	0030      	movs	r0, r6
 8010bde:	0039      	movs	r1, r7
 8010be0:	f7f1 f806 	bl	8001bf0 <__aeabi_dsub>
 8010be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010be8:	3301      	adds	r3, #1
 8010bea:	9308      	str	r3, [sp, #32]
 8010bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010bee:	0006      	movs	r6, r0
 8010bf0:	3330      	adds	r3, #48	; 0x30
 8010bf2:	7013      	strb	r3, [r2, #0]
 8010bf4:	0022      	movs	r2, r4
 8010bf6:	002b      	movs	r3, r5
 8010bf8:	000f      	movs	r7, r1
 8010bfa:	f7ef fc2b 	bl	8000454 <__aeabi_dcmplt>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d174      	bne.n	8010cec <_dtoa_r+0x638>
 8010c02:	0032      	movs	r2, r6
 8010c04:	003b      	movs	r3, r7
 8010c06:	2000      	movs	r0, #0
 8010c08:	4968      	ldr	r1, [pc, #416]	; (8010dac <_dtoa_r+0x6f8>)
 8010c0a:	f7f0 fff1 	bl	8001bf0 <__aeabi_dsub>
 8010c0e:	0022      	movs	r2, r4
 8010c10:	002b      	movs	r3, r5
 8010c12:	f7ef fc1f 	bl	8000454 <__aeabi_dcmplt>
 8010c16:	2800      	cmp	r0, #0
 8010c18:	d000      	beq.n	8010c1c <_dtoa_r+0x568>
 8010c1a:	e0d7      	b.n	8010dcc <_dtoa_r+0x718>
 8010c1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010c1e:	9a08      	ldr	r2, [sp, #32]
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d100      	bne.n	8010c26 <_dtoa_r+0x572>
 8010c24:	e771      	b.n	8010b0a <_dtoa_r+0x456>
 8010c26:	2200      	movs	r2, #0
 8010c28:	0020      	movs	r0, r4
 8010c2a:	0029      	movs	r1, r5
 8010c2c:	4b60      	ldr	r3, [pc, #384]	; (8010db0 <_dtoa_r+0x6fc>)
 8010c2e:	f7f0 fd1d 	bl	800166c <__aeabi_dmul>
 8010c32:	4b5f      	ldr	r3, [pc, #380]	; (8010db0 <_dtoa_r+0x6fc>)
 8010c34:	0004      	movs	r4, r0
 8010c36:	000d      	movs	r5, r1
 8010c38:	0030      	movs	r0, r6
 8010c3a:	0039      	movs	r1, r7
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	f7f0 fd15 	bl	800166c <__aeabi_dmul>
 8010c42:	9b08      	ldr	r3, [sp, #32]
 8010c44:	0006      	movs	r6, r0
 8010c46:	000f      	movs	r7, r1
 8010c48:	9314      	str	r3, [sp, #80]	; 0x50
 8010c4a:	e7be      	b.n	8010bca <_dtoa_r+0x516>
 8010c4c:	0020      	movs	r0, r4
 8010c4e:	0029      	movs	r1, r5
 8010c50:	f7f0 fd0c 	bl	800166c <__aeabi_dmul>
 8010c54:	9a06      	ldr	r2, [sp, #24]
 8010c56:	9b06      	ldr	r3, [sp, #24]
 8010c58:	4694      	mov	ip, r2
 8010c5a:	9308      	str	r3, [sp, #32]
 8010c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c5e:	9014      	str	r0, [sp, #80]	; 0x50
 8010c60:	9115      	str	r1, [sp, #84]	; 0x54
 8010c62:	4463      	add	r3, ip
 8010c64:	9319      	str	r3, [sp, #100]	; 0x64
 8010c66:	0030      	movs	r0, r6
 8010c68:	0039      	movs	r1, r7
 8010c6a:	f7f1 fb61 	bl	8002330 <__aeabi_d2iz>
 8010c6e:	9018      	str	r0, [sp, #96]	; 0x60
 8010c70:	f7f1 fb94 	bl	800239c <__aeabi_i2d>
 8010c74:	0002      	movs	r2, r0
 8010c76:	000b      	movs	r3, r1
 8010c78:	0030      	movs	r0, r6
 8010c7a:	0039      	movs	r1, r7
 8010c7c:	f7f0 ffb8 	bl	8001bf0 <__aeabi_dsub>
 8010c80:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8010c82:	9b08      	ldr	r3, [sp, #32]
 8010c84:	3630      	adds	r6, #48	; 0x30
 8010c86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010c88:	701e      	strb	r6, [r3, #0]
 8010c8a:	3301      	adds	r3, #1
 8010c8c:	0004      	movs	r4, r0
 8010c8e:	000d      	movs	r5, r1
 8010c90:	9308      	str	r3, [sp, #32]
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d12d      	bne.n	8010cf2 <_dtoa_r+0x63e>
 8010c96:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010c98:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010c9a:	9a06      	ldr	r2, [sp, #24]
 8010c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c9e:	4694      	mov	ip, r2
 8010ca0:	4463      	add	r3, ip
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	9308      	str	r3, [sp, #32]
 8010ca6:	4b47      	ldr	r3, [pc, #284]	; (8010dc4 <_dtoa_r+0x710>)
 8010ca8:	f7ef fd86 	bl	80007b8 <__aeabi_dadd>
 8010cac:	0002      	movs	r2, r0
 8010cae:	000b      	movs	r3, r1
 8010cb0:	0020      	movs	r0, r4
 8010cb2:	0029      	movs	r1, r5
 8010cb4:	f7ef fbe2 	bl	800047c <__aeabi_dcmpgt>
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d000      	beq.n	8010cbe <_dtoa_r+0x60a>
 8010cbc:	e086      	b.n	8010dcc <_dtoa_r+0x718>
 8010cbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	493f      	ldr	r1, [pc, #252]	; (8010dc4 <_dtoa_r+0x710>)
 8010cc6:	f7f0 ff93 	bl	8001bf0 <__aeabi_dsub>
 8010cca:	0002      	movs	r2, r0
 8010ccc:	000b      	movs	r3, r1
 8010cce:	0020      	movs	r0, r4
 8010cd0:	0029      	movs	r1, r5
 8010cd2:	f7ef fbbf 	bl	8000454 <__aeabi_dcmplt>
 8010cd6:	2800      	cmp	r0, #0
 8010cd8:	d100      	bne.n	8010cdc <_dtoa_r+0x628>
 8010cda:	e716      	b.n	8010b0a <_dtoa_r+0x456>
 8010cdc:	9b08      	ldr	r3, [sp, #32]
 8010cde:	001a      	movs	r2, r3
 8010ce0:	3a01      	subs	r2, #1
 8010ce2:	9208      	str	r2, [sp, #32]
 8010ce4:	7812      	ldrb	r2, [r2, #0]
 8010ce6:	2a30      	cmp	r2, #48	; 0x30
 8010ce8:	d0f8      	beq.n	8010cdc <_dtoa_r+0x628>
 8010cea:	9308      	str	r3, [sp, #32]
 8010cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cee:	9303      	str	r3, [sp, #12]
 8010cf0:	e046      	b.n	8010d80 <_dtoa_r+0x6cc>
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	4b2e      	ldr	r3, [pc, #184]	; (8010db0 <_dtoa_r+0x6fc>)
 8010cf6:	f7f0 fcb9 	bl	800166c <__aeabi_dmul>
 8010cfa:	0006      	movs	r6, r0
 8010cfc:	000f      	movs	r7, r1
 8010cfe:	e7b2      	b.n	8010c66 <_dtoa_r+0x5b2>
 8010d00:	9b06      	ldr	r3, [sp, #24]
 8010d02:	9a06      	ldr	r2, [sp, #24]
 8010d04:	930a      	str	r3, [sp, #40]	; 0x28
 8010d06:	9b07      	ldr	r3, [sp, #28]
 8010d08:	9c08      	ldr	r4, [sp, #32]
 8010d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	189b      	adds	r3, r3, r2
 8010d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d12:	0032      	movs	r2, r6
 8010d14:	003b      	movs	r3, r7
 8010d16:	0020      	movs	r0, r4
 8010d18:	0029      	movs	r1, r5
 8010d1a:	f7f0 f8ad 	bl	8000e78 <__aeabi_ddiv>
 8010d1e:	f7f1 fb07 	bl	8002330 <__aeabi_d2iz>
 8010d22:	9007      	str	r0, [sp, #28]
 8010d24:	f7f1 fb3a 	bl	800239c <__aeabi_i2d>
 8010d28:	0032      	movs	r2, r6
 8010d2a:	003b      	movs	r3, r7
 8010d2c:	f7f0 fc9e 	bl	800166c <__aeabi_dmul>
 8010d30:	0002      	movs	r2, r0
 8010d32:	000b      	movs	r3, r1
 8010d34:	0020      	movs	r0, r4
 8010d36:	0029      	movs	r1, r5
 8010d38:	f7f0 ff5a 	bl	8001bf0 <__aeabi_dsub>
 8010d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d3e:	001a      	movs	r2, r3
 8010d40:	3201      	adds	r2, #1
 8010d42:	920a      	str	r2, [sp, #40]	; 0x28
 8010d44:	9208      	str	r2, [sp, #32]
 8010d46:	9a07      	ldr	r2, [sp, #28]
 8010d48:	3230      	adds	r2, #48	; 0x30
 8010d4a:	701a      	strb	r2, [r3, #0]
 8010d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d14f      	bne.n	8010df2 <_dtoa_r+0x73e>
 8010d52:	0002      	movs	r2, r0
 8010d54:	000b      	movs	r3, r1
 8010d56:	f7ef fd2f 	bl	80007b8 <__aeabi_dadd>
 8010d5a:	0032      	movs	r2, r6
 8010d5c:	003b      	movs	r3, r7
 8010d5e:	0004      	movs	r4, r0
 8010d60:	000d      	movs	r5, r1
 8010d62:	f7ef fb8b 	bl	800047c <__aeabi_dcmpgt>
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d12e      	bne.n	8010dc8 <_dtoa_r+0x714>
 8010d6a:	0032      	movs	r2, r6
 8010d6c:	003b      	movs	r3, r7
 8010d6e:	0020      	movs	r0, r4
 8010d70:	0029      	movs	r1, r5
 8010d72:	f7ef fb69 	bl	8000448 <__aeabi_dcmpeq>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d002      	beq.n	8010d80 <_dtoa_r+0x6cc>
 8010d7a:	9b07      	ldr	r3, [sp, #28]
 8010d7c:	07de      	lsls	r6, r3, #31
 8010d7e:	d423      	bmi.n	8010dc8 <_dtoa_r+0x714>
 8010d80:	9905      	ldr	r1, [sp, #20]
 8010d82:	9804      	ldr	r0, [sp, #16]
 8010d84:	f7fc f8fe 	bl	800cf84 <_Bfree>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9a08      	ldr	r2, [sp, #32]
 8010d8c:	7013      	strb	r3, [r2, #0]
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010d92:	3301      	adds	r3, #1
 8010d94:	6013      	str	r3, [r2, #0]
 8010d96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d100      	bne.n	8010d9e <_dtoa_r+0x6ea>
 8010d9c:	e4bd      	b.n	801071a <_dtoa_r+0x66>
 8010d9e:	9a08      	ldr	r2, [sp, #32]
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	e4ba      	b.n	801071a <_dtoa_r+0x66>
 8010da4:	08014d18 	.word	0x08014d18
 8010da8:	08014cf0 	.word	0x08014cf0
 8010dac:	3ff00000 	.word	0x3ff00000
 8010db0:	40240000 	.word	0x40240000
 8010db4:	401c0000 	.word	0x401c0000
 8010db8:	fcc00000 	.word	0xfcc00000
 8010dbc:	40140000 	.word	0x40140000
 8010dc0:	7cc00000 	.word	0x7cc00000
 8010dc4:	3fe00000 	.word	0x3fe00000
 8010dc8:	9b03      	ldr	r3, [sp, #12]
 8010dca:	930e      	str	r3, [sp, #56]	; 0x38
 8010dcc:	9b08      	ldr	r3, [sp, #32]
 8010dce:	9308      	str	r3, [sp, #32]
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	781a      	ldrb	r2, [r3, #0]
 8010dd4:	2a39      	cmp	r2, #57	; 0x39
 8010dd6:	d108      	bne.n	8010dea <_dtoa_r+0x736>
 8010dd8:	9a06      	ldr	r2, [sp, #24]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d1f7      	bne.n	8010dce <_dtoa_r+0x71a>
 8010dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de0:	9906      	ldr	r1, [sp, #24]
 8010de2:	3201      	adds	r2, #1
 8010de4:	920e      	str	r2, [sp, #56]	; 0x38
 8010de6:	2230      	movs	r2, #48	; 0x30
 8010de8:	700a      	strb	r2, [r1, #0]
 8010dea:	781a      	ldrb	r2, [r3, #0]
 8010dec:	3201      	adds	r2, #1
 8010dee:	701a      	strb	r2, [r3, #0]
 8010df0:	e77c      	b.n	8010cec <_dtoa_r+0x638>
 8010df2:	2200      	movs	r2, #0
 8010df4:	4ba9      	ldr	r3, [pc, #676]	; (801109c <_dtoa_r+0x9e8>)
 8010df6:	f7f0 fc39 	bl	800166c <__aeabi_dmul>
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	0004      	movs	r4, r0
 8010e00:	000d      	movs	r5, r1
 8010e02:	f7ef fb21 	bl	8000448 <__aeabi_dcmpeq>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d100      	bne.n	8010e0c <_dtoa_r+0x758>
 8010e0a:	e782      	b.n	8010d12 <_dtoa_r+0x65e>
 8010e0c:	e7b8      	b.n	8010d80 <_dtoa_r+0x6cc>
 8010e0e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010e10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e14:	2f00      	cmp	r7, #0
 8010e16:	d012      	beq.n	8010e3e <_dtoa_r+0x78a>
 8010e18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010e1a:	2a01      	cmp	r2, #1
 8010e1c:	dc6e      	bgt.n	8010efc <_dtoa_r+0x848>
 8010e1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010e20:	2a00      	cmp	r2, #0
 8010e22:	d065      	beq.n	8010ef0 <_dtoa_r+0x83c>
 8010e24:	4a9e      	ldr	r2, [pc, #632]	; (80110a0 <_dtoa_r+0x9ec>)
 8010e26:	189b      	adds	r3, r3, r2
 8010e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	18d2      	adds	r2, r2, r3
 8010e2e:	920a      	str	r2, [sp, #40]	; 0x28
 8010e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e32:	9804      	ldr	r0, [sp, #16]
 8010e34:	18d3      	adds	r3, r2, r3
 8010e36:	930c      	str	r3, [sp, #48]	; 0x30
 8010e38:	f7fc f986 	bl	800d148 <__i2b>
 8010e3c:	0007      	movs	r7, r0
 8010e3e:	2c00      	cmp	r4, #0
 8010e40:	d00e      	beq.n	8010e60 <_dtoa_r+0x7ac>
 8010e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	dd0b      	ble.n	8010e60 <_dtoa_r+0x7ac>
 8010e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e4a:	0023      	movs	r3, r4
 8010e4c:	4294      	cmp	r4, r2
 8010e4e:	dd00      	ble.n	8010e52 <_dtoa_r+0x79e>
 8010e50:	0013      	movs	r3, r2
 8010e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e54:	1ae4      	subs	r4, r4, r3
 8010e56:	1ad2      	subs	r2, r2, r3
 8010e58:	920a      	str	r2, [sp, #40]	; 0x28
 8010e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8010e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d01e      	beq.n	8010ea4 <_dtoa_r+0x7f0>
 8010e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d05c      	beq.n	8010f26 <_dtoa_r+0x872>
 8010e6c:	2d00      	cmp	r5, #0
 8010e6e:	dd10      	ble.n	8010e92 <_dtoa_r+0x7de>
 8010e70:	0039      	movs	r1, r7
 8010e72:	002a      	movs	r2, r5
 8010e74:	9804      	ldr	r0, [sp, #16]
 8010e76:	f7fc fa2f 	bl	800d2d8 <__pow5mult>
 8010e7a:	9a05      	ldr	r2, [sp, #20]
 8010e7c:	0001      	movs	r1, r0
 8010e7e:	0007      	movs	r7, r0
 8010e80:	9804      	ldr	r0, [sp, #16]
 8010e82:	f7fc f979 	bl	800d178 <__multiply>
 8010e86:	0006      	movs	r6, r0
 8010e88:	9905      	ldr	r1, [sp, #20]
 8010e8a:	9804      	ldr	r0, [sp, #16]
 8010e8c:	f7fc f87a 	bl	800cf84 <_Bfree>
 8010e90:	9605      	str	r6, [sp, #20]
 8010e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e94:	1b5a      	subs	r2, r3, r5
 8010e96:	42ab      	cmp	r3, r5
 8010e98:	d004      	beq.n	8010ea4 <_dtoa_r+0x7f0>
 8010e9a:	9905      	ldr	r1, [sp, #20]
 8010e9c:	9804      	ldr	r0, [sp, #16]
 8010e9e:	f7fc fa1b 	bl	800d2d8 <__pow5mult>
 8010ea2:	9005      	str	r0, [sp, #20]
 8010ea4:	2101      	movs	r1, #1
 8010ea6:	9804      	ldr	r0, [sp, #16]
 8010ea8:	f7fc f94e 	bl	800d148 <__i2b>
 8010eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010eae:	0006      	movs	r6, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	dd3a      	ble.n	8010f2a <_dtoa_r+0x876>
 8010eb4:	001a      	movs	r2, r3
 8010eb6:	0001      	movs	r1, r0
 8010eb8:	9804      	ldr	r0, [sp, #16]
 8010eba:	f7fc fa0d 	bl	800d2d8 <__pow5mult>
 8010ebe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ec0:	0006      	movs	r6, r0
 8010ec2:	2500      	movs	r5, #0
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	dc38      	bgt.n	8010f3a <_dtoa_r+0x886>
 8010ec8:	2500      	movs	r5, #0
 8010eca:	9b08      	ldr	r3, [sp, #32]
 8010ecc:	42ab      	cmp	r3, r5
 8010ece:	d130      	bne.n	8010f32 <_dtoa_r+0x87e>
 8010ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ed2:	031b      	lsls	r3, r3, #12
 8010ed4:	42ab      	cmp	r3, r5
 8010ed6:	d12c      	bne.n	8010f32 <_dtoa_r+0x87e>
 8010ed8:	4b72      	ldr	r3, [pc, #456]	; (80110a4 <_dtoa_r+0x9f0>)
 8010eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010edc:	4213      	tst	r3, r2
 8010ede:	d028      	beq.n	8010f32 <_dtoa_r+0x87e>
 8010ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ee2:	3501      	adds	r5, #1
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8010ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eea:	3301      	adds	r3, #1
 8010eec:	930c      	str	r3, [sp, #48]	; 0x30
 8010eee:	e020      	b.n	8010f32 <_dtoa_r+0x87e>
 8010ef0:	2336      	movs	r3, #54	; 0x36
 8010ef2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010ef4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010ef8:	1a9b      	subs	r3, r3, r2
 8010efa:	e795      	b.n	8010e28 <_dtoa_r+0x774>
 8010efc:	9b07      	ldr	r3, [sp, #28]
 8010efe:	1e5d      	subs	r5, r3, #1
 8010f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f02:	42ab      	cmp	r3, r5
 8010f04:	db07      	blt.n	8010f16 <_dtoa_r+0x862>
 8010f06:	1b5d      	subs	r5, r3, r5
 8010f08:	9b07      	ldr	r3, [sp, #28]
 8010f0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	da8b      	bge.n	8010e28 <_dtoa_r+0x774>
 8010f10:	1ae4      	subs	r4, r4, r3
 8010f12:	2300      	movs	r3, #0
 8010f14:	e788      	b.n	8010e28 <_dtoa_r+0x774>
 8010f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010f1a:	1aeb      	subs	r3, r5, r3
 8010f1c:	18d3      	adds	r3, r2, r3
 8010f1e:	950d      	str	r5, [sp, #52]	; 0x34
 8010f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8010f22:	2500      	movs	r5, #0
 8010f24:	e7f0      	b.n	8010f08 <_dtoa_r+0x854>
 8010f26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f28:	e7b7      	b.n	8010e9a <_dtoa_r+0x7e6>
 8010f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010f2c:	2500      	movs	r5, #0
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	ddca      	ble.n	8010ec8 <_dtoa_r+0x814>
 8010f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f34:	2001      	movs	r0, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d008      	beq.n	8010f4c <_dtoa_r+0x898>
 8010f3a:	6933      	ldr	r3, [r6, #16]
 8010f3c:	3303      	adds	r3, #3
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	18f3      	adds	r3, r6, r3
 8010f42:	6858      	ldr	r0, [r3, #4]
 8010f44:	f7fc f8b8 	bl	800d0b8 <__hi0bits>
 8010f48:	2320      	movs	r3, #32
 8010f4a:	1a18      	subs	r0, r3, r0
 8010f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f4e:	1818      	adds	r0, r3, r0
 8010f50:	0002      	movs	r2, r0
 8010f52:	231f      	movs	r3, #31
 8010f54:	401a      	ands	r2, r3
 8010f56:	4218      	tst	r0, r3
 8010f58:	d047      	beq.n	8010fea <_dtoa_r+0x936>
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	1a9b      	subs	r3, r3, r2
 8010f5e:	2b04      	cmp	r3, #4
 8010f60:	dd3f      	ble.n	8010fe2 <_dtoa_r+0x92e>
 8010f62:	231c      	movs	r3, #28
 8010f64:	1a9b      	subs	r3, r3, r2
 8010f66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f68:	18e4      	adds	r4, r4, r3
 8010f6a:	18d2      	adds	r2, r2, r3
 8010f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8010f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f70:	18d3      	adds	r3, r2, r3
 8010f72:	930c      	str	r3, [sp, #48]	; 0x30
 8010f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dd05      	ble.n	8010f86 <_dtoa_r+0x8d2>
 8010f7a:	001a      	movs	r2, r3
 8010f7c:	9905      	ldr	r1, [sp, #20]
 8010f7e:	9804      	ldr	r0, [sp, #16]
 8010f80:	f7fc f9ec 	bl	800d35c <__lshift>
 8010f84:	9005      	str	r0, [sp, #20]
 8010f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	dd05      	ble.n	8010f98 <_dtoa_r+0x8e4>
 8010f8c:	0031      	movs	r1, r6
 8010f8e:	001a      	movs	r2, r3
 8010f90:	9804      	ldr	r0, [sp, #16]
 8010f92:	f7fc f9e3 	bl	800d35c <__lshift>
 8010f96:	0006      	movs	r6, r0
 8010f98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d027      	beq.n	8010fee <_dtoa_r+0x93a>
 8010f9e:	0031      	movs	r1, r6
 8010fa0:	9805      	ldr	r0, [sp, #20]
 8010fa2:	f7fc fa49 	bl	800d438 <__mcmp>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	da21      	bge.n	8010fee <_dtoa_r+0x93a>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	220a      	movs	r2, #10
 8010fae:	3b01      	subs	r3, #1
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	9905      	ldr	r1, [sp, #20]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9804      	ldr	r0, [sp, #16]
 8010fb8:	f7fb ffee 	bl	800cf98 <__multadd>
 8010fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010fbe:	9005      	str	r0, [sp, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d100      	bne.n	8010fc6 <_dtoa_r+0x912>
 8010fc4:	e15d      	b.n	8011282 <_dtoa_r+0xbce>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	0039      	movs	r1, r7
 8010fca:	220a      	movs	r2, #10
 8010fcc:	9804      	ldr	r0, [sp, #16]
 8010fce:	f7fb ffe3 	bl	800cf98 <__multadd>
 8010fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fd4:	0007      	movs	r7, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	dc49      	bgt.n	801106e <_dtoa_r+0x9ba>
 8010fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	dc0e      	bgt.n	8010ffe <_dtoa_r+0x94a>
 8010fe0:	e045      	b.n	801106e <_dtoa_r+0x9ba>
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	d0c6      	beq.n	8010f74 <_dtoa_r+0x8c0>
 8010fe6:	331c      	adds	r3, #28
 8010fe8:	e7bd      	b.n	8010f66 <_dtoa_r+0x8b2>
 8010fea:	0013      	movs	r3, r2
 8010fec:	e7fb      	b.n	8010fe6 <_dtoa_r+0x932>
 8010fee:	9b07      	ldr	r3, [sp, #28]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	dc36      	bgt.n	8011062 <_dtoa_r+0x9ae>
 8010ff4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	dd33      	ble.n	8011062 <_dtoa_r+0x9ae>
 8010ffa:	9b07      	ldr	r3, [sp, #28]
 8010ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10c      	bne.n	801101e <_dtoa_r+0x96a>
 8011004:	0031      	movs	r1, r6
 8011006:	2205      	movs	r2, #5
 8011008:	9804      	ldr	r0, [sp, #16]
 801100a:	f7fb ffc5 	bl	800cf98 <__multadd>
 801100e:	0006      	movs	r6, r0
 8011010:	0001      	movs	r1, r0
 8011012:	9805      	ldr	r0, [sp, #20]
 8011014:	f7fc fa10 	bl	800d438 <__mcmp>
 8011018:	2800      	cmp	r0, #0
 801101a:	dd00      	ble.n	801101e <_dtoa_r+0x96a>
 801101c:	e59f      	b.n	8010b5e <_dtoa_r+0x4aa>
 801101e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011020:	43db      	mvns	r3, r3
 8011022:	9303      	str	r3, [sp, #12]
 8011024:	9b06      	ldr	r3, [sp, #24]
 8011026:	9308      	str	r3, [sp, #32]
 8011028:	2500      	movs	r5, #0
 801102a:	0031      	movs	r1, r6
 801102c:	9804      	ldr	r0, [sp, #16]
 801102e:	f7fb ffa9 	bl	800cf84 <_Bfree>
 8011032:	2f00      	cmp	r7, #0
 8011034:	d100      	bne.n	8011038 <_dtoa_r+0x984>
 8011036:	e6a3      	b.n	8010d80 <_dtoa_r+0x6cc>
 8011038:	2d00      	cmp	r5, #0
 801103a:	d005      	beq.n	8011048 <_dtoa_r+0x994>
 801103c:	42bd      	cmp	r5, r7
 801103e:	d003      	beq.n	8011048 <_dtoa_r+0x994>
 8011040:	0029      	movs	r1, r5
 8011042:	9804      	ldr	r0, [sp, #16]
 8011044:	f7fb ff9e 	bl	800cf84 <_Bfree>
 8011048:	0039      	movs	r1, r7
 801104a:	9804      	ldr	r0, [sp, #16]
 801104c:	f7fb ff9a 	bl	800cf84 <_Bfree>
 8011050:	e696      	b.n	8010d80 <_dtoa_r+0x6cc>
 8011052:	2600      	movs	r6, #0
 8011054:	0037      	movs	r7, r6
 8011056:	e7e2      	b.n	801101e <_dtoa_r+0x96a>
 8011058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801105a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801105c:	9303      	str	r3, [sp, #12]
 801105e:	0037      	movs	r7, r6
 8011060:	e57d      	b.n	8010b5e <_dtoa_r+0x4aa>
 8011062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011064:	2b00      	cmp	r3, #0
 8011066:	d100      	bne.n	801106a <_dtoa_r+0x9b6>
 8011068:	e0c3      	b.n	80111f2 <_dtoa_r+0xb3e>
 801106a:	9b07      	ldr	r3, [sp, #28]
 801106c:	930b      	str	r3, [sp, #44]	; 0x2c
 801106e:	2c00      	cmp	r4, #0
 8011070:	dd05      	ble.n	801107e <_dtoa_r+0x9ca>
 8011072:	0039      	movs	r1, r7
 8011074:	0022      	movs	r2, r4
 8011076:	9804      	ldr	r0, [sp, #16]
 8011078:	f7fc f970 	bl	800d35c <__lshift>
 801107c:	0007      	movs	r7, r0
 801107e:	0038      	movs	r0, r7
 8011080:	2d00      	cmp	r5, #0
 8011082:	d024      	beq.n	80110ce <_dtoa_r+0xa1a>
 8011084:	6879      	ldr	r1, [r7, #4]
 8011086:	9804      	ldr	r0, [sp, #16]
 8011088:	f7fb ff54 	bl	800cf34 <_Balloc>
 801108c:	1e04      	subs	r4, r0, #0
 801108e:	d111      	bne.n	80110b4 <_dtoa_r+0xa00>
 8011090:	0022      	movs	r2, r4
 8011092:	4b05      	ldr	r3, [pc, #20]	; (80110a8 <_dtoa_r+0x9f4>)
 8011094:	4805      	ldr	r0, [pc, #20]	; (80110ac <_dtoa_r+0x9f8>)
 8011096:	4906      	ldr	r1, [pc, #24]	; (80110b0 <_dtoa_r+0x9fc>)
 8011098:	e43c      	b.n	8010914 <_dtoa_r+0x260>
 801109a:	46c0      	nop			; (mov r8, r8)
 801109c:	40240000 	.word	0x40240000
 80110a0:	00000433 	.word	0x00000433
 80110a4:	7ff00000 	.word	0x7ff00000
 80110a8:	08014c21 	.word	0x08014c21
 80110ac:	08014eb1 	.word	0x08014eb1
 80110b0:	000002ef 	.word	0x000002ef
 80110b4:	0039      	movs	r1, r7
 80110b6:	693a      	ldr	r2, [r7, #16]
 80110b8:	310c      	adds	r1, #12
 80110ba:	3202      	adds	r2, #2
 80110bc:	0092      	lsls	r2, r2, #2
 80110be:	300c      	adds	r0, #12
 80110c0:	f7fb fa9d 	bl	800c5fe <memcpy>
 80110c4:	2201      	movs	r2, #1
 80110c6:	0021      	movs	r1, r4
 80110c8:	9804      	ldr	r0, [sp, #16]
 80110ca:	f7fc f947 	bl	800d35c <__lshift>
 80110ce:	9b06      	ldr	r3, [sp, #24]
 80110d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110d2:	9307      	str	r3, [sp, #28]
 80110d4:	3b01      	subs	r3, #1
 80110d6:	189b      	adds	r3, r3, r2
 80110d8:	2201      	movs	r2, #1
 80110da:	003d      	movs	r5, r7
 80110dc:	0007      	movs	r7, r0
 80110de:	930e      	str	r3, [sp, #56]	; 0x38
 80110e0:	9b08      	ldr	r3, [sp, #32]
 80110e2:	4013      	ands	r3, r2
 80110e4:	930d      	str	r3, [sp, #52]	; 0x34
 80110e6:	0031      	movs	r1, r6
 80110e8:	9805      	ldr	r0, [sp, #20]
 80110ea:	f7ff fa53 	bl	8010594 <quorem>
 80110ee:	0029      	movs	r1, r5
 80110f0:	0004      	movs	r4, r0
 80110f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80110f4:	9805      	ldr	r0, [sp, #20]
 80110f6:	f7fc f99f 	bl	800d438 <__mcmp>
 80110fa:	003a      	movs	r2, r7
 80110fc:	900c      	str	r0, [sp, #48]	; 0x30
 80110fe:	0031      	movs	r1, r6
 8011100:	9804      	ldr	r0, [sp, #16]
 8011102:	f7fc f9b5 	bl	800d470 <__mdiff>
 8011106:	2201      	movs	r2, #1
 8011108:	68c3      	ldr	r3, [r0, #12]
 801110a:	3430      	adds	r4, #48	; 0x30
 801110c:	9008      	str	r0, [sp, #32]
 801110e:	920a      	str	r2, [sp, #40]	; 0x28
 8011110:	2b00      	cmp	r3, #0
 8011112:	d104      	bne.n	801111e <_dtoa_r+0xa6a>
 8011114:	0001      	movs	r1, r0
 8011116:	9805      	ldr	r0, [sp, #20]
 8011118:	f7fc f98e 	bl	800d438 <__mcmp>
 801111c:	900a      	str	r0, [sp, #40]	; 0x28
 801111e:	9908      	ldr	r1, [sp, #32]
 8011120:	9804      	ldr	r0, [sp, #16]
 8011122:	f7fb ff2f 	bl	800cf84 <_Bfree>
 8011126:	9b07      	ldr	r3, [sp, #28]
 8011128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801112a:	3301      	adds	r3, #1
 801112c:	9308      	str	r3, [sp, #32]
 801112e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011130:	4313      	orrs	r3, r2
 8011132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011134:	4313      	orrs	r3, r2
 8011136:	d109      	bne.n	801114c <_dtoa_r+0xa98>
 8011138:	2c39      	cmp	r4, #57	; 0x39
 801113a:	d022      	beq.n	8011182 <_dtoa_r+0xace>
 801113c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801113e:	2b00      	cmp	r3, #0
 8011140:	dd01      	ble.n	8011146 <_dtoa_r+0xa92>
 8011142:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011144:	3431      	adds	r4, #49	; 0x31
 8011146:	9b07      	ldr	r3, [sp, #28]
 8011148:	701c      	strb	r4, [r3, #0]
 801114a:	e76e      	b.n	801102a <_dtoa_r+0x976>
 801114c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801114e:	2b00      	cmp	r3, #0
 8011150:	db04      	blt.n	801115c <_dtoa_r+0xaa8>
 8011152:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011154:	4313      	orrs	r3, r2
 8011156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011158:	4313      	orrs	r3, r2
 801115a:	d11e      	bne.n	801119a <_dtoa_r+0xae6>
 801115c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801115e:	2b00      	cmp	r3, #0
 8011160:	ddf1      	ble.n	8011146 <_dtoa_r+0xa92>
 8011162:	9905      	ldr	r1, [sp, #20]
 8011164:	2201      	movs	r2, #1
 8011166:	9804      	ldr	r0, [sp, #16]
 8011168:	f7fc f8f8 	bl	800d35c <__lshift>
 801116c:	0031      	movs	r1, r6
 801116e:	9005      	str	r0, [sp, #20]
 8011170:	f7fc f962 	bl	800d438 <__mcmp>
 8011174:	2800      	cmp	r0, #0
 8011176:	dc02      	bgt.n	801117e <_dtoa_r+0xaca>
 8011178:	d1e5      	bne.n	8011146 <_dtoa_r+0xa92>
 801117a:	07e3      	lsls	r3, r4, #31
 801117c:	d5e3      	bpl.n	8011146 <_dtoa_r+0xa92>
 801117e:	2c39      	cmp	r4, #57	; 0x39
 8011180:	d1df      	bne.n	8011142 <_dtoa_r+0xa8e>
 8011182:	2339      	movs	r3, #57	; 0x39
 8011184:	9a07      	ldr	r2, [sp, #28]
 8011186:	7013      	strb	r3, [r2, #0]
 8011188:	9b08      	ldr	r3, [sp, #32]
 801118a:	9308      	str	r3, [sp, #32]
 801118c:	3b01      	subs	r3, #1
 801118e:	781a      	ldrb	r2, [r3, #0]
 8011190:	2a39      	cmp	r2, #57	; 0x39
 8011192:	d063      	beq.n	801125c <_dtoa_r+0xba8>
 8011194:	3201      	adds	r2, #1
 8011196:	701a      	strb	r2, [r3, #0]
 8011198:	e747      	b.n	801102a <_dtoa_r+0x976>
 801119a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119c:	2b00      	cmp	r3, #0
 801119e:	dd03      	ble.n	80111a8 <_dtoa_r+0xaf4>
 80111a0:	2c39      	cmp	r4, #57	; 0x39
 80111a2:	d0ee      	beq.n	8011182 <_dtoa_r+0xace>
 80111a4:	3401      	adds	r4, #1
 80111a6:	e7ce      	b.n	8011146 <_dtoa_r+0xa92>
 80111a8:	9b07      	ldr	r3, [sp, #28]
 80111aa:	9a07      	ldr	r2, [sp, #28]
 80111ac:	701c      	strb	r4, [r3, #0]
 80111ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d03e      	beq.n	8011232 <_dtoa_r+0xb7e>
 80111b4:	2300      	movs	r3, #0
 80111b6:	220a      	movs	r2, #10
 80111b8:	9905      	ldr	r1, [sp, #20]
 80111ba:	9804      	ldr	r0, [sp, #16]
 80111bc:	f7fb feec 	bl	800cf98 <__multadd>
 80111c0:	2300      	movs	r3, #0
 80111c2:	9005      	str	r0, [sp, #20]
 80111c4:	220a      	movs	r2, #10
 80111c6:	0029      	movs	r1, r5
 80111c8:	9804      	ldr	r0, [sp, #16]
 80111ca:	42bd      	cmp	r5, r7
 80111cc:	d106      	bne.n	80111dc <_dtoa_r+0xb28>
 80111ce:	f7fb fee3 	bl	800cf98 <__multadd>
 80111d2:	0005      	movs	r5, r0
 80111d4:	0007      	movs	r7, r0
 80111d6:	9b08      	ldr	r3, [sp, #32]
 80111d8:	9307      	str	r3, [sp, #28]
 80111da:	e784      	b.n	80110e6 <_dtoa_r+0xa32>
 80111dc:	f7fb fedc 	bl	800cf98 <__multadd>
 80111e0:	0039      	movs	r1, r7
 80111e2:	0005      	movs	r5, r0
 80111e4:	2300      	movs	r3, #0
 80111e6:	220a      	movs	r2, #10
 80111e8:	9804      	ldr	r0, [sp, #16]
 80111ea:	f7fb fed5 	bl	800cf98 <__multadd>
 80111ee:	0007      	movs	r7, r0
 80111f0:	e7f1      	b.n	80111d6 <_dtoa_r+0xb22>
 80111f2:	9b07      	ldr	r3, [sp, #28]
 80111f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80111f6:	2500      	movs	r5, #0
 80111f8:	0031      	movs	r1, r6
 80111fa:	9805      	ldr	r0, [sp, #20]
 80111fc:	f7ff f9ca 	bl	8010594 <quorem>
 8011200:	9b06      	ldr	r3, [sp, #24]
 8011202:	3030      	adds	r0, #48	; 0x30
 8011204:	5558      	strb	r0, [r3, r5]
 8011206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011208:	3501      	adds	r5, #1
 801120a:	0004      	movs	r4, r0
 801120c:	42ab      	cmp	r3, r5
 801120e:	dd07      	ble.n	8011220 <_dtoa_r+0xb6c>
 8011210:	2300      	movs	r3, #0
 8011212:	220a      	movs	r2, #10
 8011214:	9905      	ldr	r1, [sp, #20]
 8011216:	9804      	ldr	r0, [sp, #16]
 8011218:	f7fb febe 	bl	800cf98 <__multadd>
 801121c:	9005      	str	r0, [sp, #20]
 801121e:	e7eb      	b.n	80111f8 <_dtoa_r+0xb44>
 8011220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011222:	2301      	movs	r3, #1
 8011224:	2a00      	cmp	r2, #0
 8011226:	dd00      	ble.n	801122a <_dtoa_r+0xb76>
 8011228:	0013      	movs	r3, r2
 801122a:	2500      	movs	r5, #0
 801122c:	9a06      	ldr	r2, [sp, #24]
 801122e:	18d3      	adds	r3, r2, r3
 8011230:	9308      	str	r3, [sp, #32]
 8011232:	9905      	ldr	r1, [sp, #20]
 8011234:	2201      	movs	r2, #1
 8011236:	9804      	ldr	r0, [sp, #16]
 8011238:	f7fc f890 	bl	800d35c <__lshift>
 801123c:	0031      	movs	r1, r6
 801123e:	9005      	str	r0, [sp, #20]
 8011240:	f7fc f8fa 	bl	800d438 <__mcmp>
 8011244:	2800      	cmp	r0, #0
 8011246:	dc9f      	bgt.n	8011188 <_dtoa_r+0xad4>
 8011248:	d101      	bne.n	801124e <_dtoa_r+0xb9a>
 801124a:	07e4      	lsls	r4, r4, #31
 801124c:	d49c      	bmi.n	8011188 <_dtoa_r+0xad4>
 801124e:	9b08      	ldr	r3, [sp, #32]
 8011250:	9308      	str	r3, [sp, #32]
 8011252:	3b01      	subs	r3, #1
 8011254:	781a      	ldrb	r2, [r3, #0]
 8011256:	2a30      	cmp	r2, #48	; 0x30
 8011258:	d0fa      	beq.n	8011250 <_dtoa_r+0xb9c>
 801125a:	e6e6      	b.n	801102a <_dtoa_r+0x976>
 801125c:	9a06      	ldr	r2, [sp, #24]
 801125e:	429a      	cmp	r2, r3
 8011260:	d193      	bne.n	801118a <_dtoa_r+0xad6>
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	3301      	adds	r3, #1
 8011266:	9303      	str	r3, [sp, #12]
 8011268:	2331      	movs	r3, #49	; 0x31
 801126a:	7013      	strb	r3, [r2, #0]
 801126c:	e6dd      	b.n	801102a <_dtoa_r+0x976>
 801126e:	4b09      	ldr	r3, [pc, #36]	; (8011294 <_dtoa_r+0xbe0>)
 8011270:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011272:	9306      	str	r3, [sp, #24]
 8011274:	4b08      	ldr	r3, [pc, #32]	; (8011298 <_dtoa_r+0xbe4>)
 8011276:	2a00      	cmp	r2, #0
 8011278:	d001      	beq.n	801127e <_dtoa_r+0xbca>
 801127a:	f7ff fa4c 	bl	8010716 <_dtoa_r+0x62>
 801127e:	f7ff fa4c 	bl	801071a <_dtoa_r+0x66>
 8011282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011284:	2b00      	cmp	r3, #0
 8011286:	dcb6      	bgt.n	80111f6 <_dtoa_r+0xb42>
 8011288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801128a:	2b02      	cmp	r3, #2
 801128c:	dd00      	ble.n	8011290 <_dtoa_r+0xbdc>
 801128e:	e6b6      	b.n	8010ffe <_dtoa_r+0x94a>
 8011290:	e7b1      	b.n	80111f6 <_dtoa_r+0xb42>
 8011292:	46c0      	nop			; (mov r8, r8)
 8011294:	08014ea4 	.word	0x08014ea4
 8011298:	08014eac 	.word	0x08014eac

0801129c <realloc>:
 801129c:	b510      	push	{r4, lr}
 801129e:	4b03      	ldr	r3, [pc, #12]	; (80112ac <realloc+0x10>)
 80112a0:	000a      	movs	r2, r1
 80112a2:	0001      	movs	r1, r0
 80112a4:	6818      	ldr	r0, [r3, #0]
 80112a6:	f000 f803 	bl	80112b0 <_realloc_r>
 80112aa:	bd10      	pop	{r4, pc}
 80112ac:	200006d0 	.word	0x200006d0

080112b0 <_realloc_r>:
 80112b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b2:	b087      	sub	sp, #28
 80112b4:	1e0c      	subs	r4, r1, #0
 80112b6:	9001      	str	r0, [sp, #4]
 80112b8:	9205      	str	r2, [sp, #20]
 80112ba:	d106      	bne.n	80112ca <_realloc_r+0x1a>
 80112bc:	0011      	movs	r1, r2
 80112be:	f7f9 fd5f 	bl	800ad80 <_malloc_r>
 80112c2:	0007      	movs	r7, r0
 80112c4:	0038      	movs	r0, r7
 80112c6:	b007      	add	sp, #28
 80112c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ca:	9801      	ldr	r0, [sp, #4]
 80112cc:	f7f9 ff6c 	bl	800b1a8 <__malloc_lock>
 80112d0:	0023      	movs	r3, r4
 80112d2:	3b08      	subs	r3, #8
 80112d4:	685f      	ldr	r7, [r3, #4]
 80112d6:	9304      	str	r3, [sp, #16]
 80112d8:	9b05      	ldr	r3, [sp, #20]
 80112da:	330b      	adds	r3, #11
 80112dc:	2b16      	cmp	r3, #22
 80112de:	d908      	bls.n	80112f2 <_realloc_r+0x42>
 80112e0:	2207      	movs	r2, #7
 80112e2:	4393      	bics	r3, r2
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	d506      	bpl.n	80112f6 <_realloc_r+0x46>
 80112e8:	230c      	movs	r3, #12
 80112ea:	9a01      	ldr	r2, [sp, #4]
 80112ec:	2700      	movs	r7, #0
 80112ee:	6013      	str	r3, [r2, #0]
 80112f0:	e7e8      	b.n	80112c4 <_realloc_r+0x14>
 80112f2:	2310      	movs	r3, #16
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	9b00      	ldr	r3, [sp, #0]
 80112f8:	9a05      	ldr	r2, [sp, #20]
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d3f4      	bcc.n	80112e8 <_realloc_r+0x38>
 80112fe:	9b04      	ldr	r3, [sp, #16]
 8011300:	003a      	movs	r2, r7
 8011302:	9302      	str	r3, [sp, #8]
 8011304:	2303      	movs	r3, #3
 8011306:	439a      	bics	r2, r3
 8011308:	9b00      	ldr	r3, [sp, #0]
 801130a:	9203      	str	r2, [sp, #12]
 801130c:	4293      	cmp	r3, r2
 801130e:	dc00      	bgt.n	8011312 <_realloc_r+0x62>
 8011310:	e169      	b.n	80115e6 <_realloc_r+0x336>
 8011312:	9b04      	ldr	r3, [sp, #16]
 8011314:	48b8      	ldr	r0, [pc, #736]	; (80115f8 <_realloc_r+0x348>)
 8011316:	189b      	adds	r3, r3, r2
 8011318:	6882      	ldr	r2, [r0, #8]
 801131a:	4694      	mov	ip, r2
 801131c:	685a      	ldr	r2, [r3, #4]
 801131e:	459c      	cmp	ip, r3
 8011320:	d006      	beq.n	8011330 <_realloc_r+0x80>
 8011322:	2501      	movs	r5, #1
 8011324:	0011      	movs	r1, r2
 8011326:	43a9      	bics	r1, r5
 8011328:	1859      	adds	r1, r3, r1
 801132a:	6849      	ldr	r1, [r1, #4]
 801132c:	4229      	tst	r1, r5
 801132e:	d144      	bne.n	80113ba <_realloc_r+0x10a>
 8011330:	2103      	movs	r1, #3
 8011332:	438a      	bics	r2, r1
 8011334:	9903      	ldr	r1, [sp, #12]
 8011336:	188e      	adds	r6, r1, r2
 8011338:	9900      	ldr	r1, [sp, #0]
 801133a:	459c      	cmp	ip, r3
 801133c:	d117      	bne.n	801136e <_realloc_r+0xbe>
 801133e:	3110      	adds	r1, #16
 8011340:	42b1      	cmp	r1, r6
 8011342:	dc3c      	bgt.n	80113be <_realloc_r+0x10e>
 8011344:	9a00      	ldr	r2, [sp, #0]
 8011346:	2101      	movs	r1, #1
 8011348:	4694      	mov	ip, r2
 801134a:	1ab6      	subs	r6, r6, r2
 801134c:	0022      	movs	r2, r4
 801134e:	9b04      	ldr	r3, [sp, #16]
 8011350:	430e      	orrs	r6, r1
 8011352:	4463      	add	r3, ip
 8011354:	6083      	str	r3, [r0, #8]
 8011356:	3a08      	subs	r2, #8
 8011358:	605e      	str	r6, [r3, #4]
 801135a:	6853      	ldr	r3, [r2, #4]
 801135c:	9801      	ldr	r0, [sp, #4]
 801135e:	400b      	ands	r3, r1
 8011360:	4661      	mov	r1, ip
 8011362:	430b      	orrs	r3, r1
 8011364:	6053      	str	r3, [r2, #4]
 8011366:	f7f9 ff27 	bl	800b1b8 <__malloc_unlock>
 801136a:	0027      	movs	r7, r4
 801136c:	e7aa      	b.n	80112c4 <_realloc_r+0x14>
 801136e:	42b1      	cmp	r1, r6
 8011370:	dc25      	bgt.n	80113be <_realloc_r+0x10e>
 8011372:	68da      	ldr	r2, [r3, #12]
 8011374:	689b      	ldr	r3, [r3, #8]
 8011376:	60da      	str	r2, [r3, #12]
 8011378:	6093      	str	r3, [r2, #8]
 801137a:	9b00      	ldr	r3, [sp, #0]
 801137c:	9a02      	ldr	r2, [sp, #8]
 801137e:	1af4      	subs	r4, r6, r3
 8011380:	9b02      	ldr	r3, [sp, #8]
 8011382:	1992      	adds	r2, r2, r6
 8011384:	6858      	ldr	r0, [r3, #4]
 8011386:	2301      	movs	r3, #1
 8011388:	4018      	ands	r0, r3
 801138a:	2c0f      	cmp	r4, #15
 801138c:	d800      	bhi.n	8011390 <_realloc_r+0xe0>
 801138e:	e12c      	b.n	80115ea <_realloc_r+0x33a>
 8011390:	9d00      	ldr	r5, [sp, #0]
 8011392:	9902      	ldr	r1, [sp, #8]
 8011394:	4328      	orrs	r0, r5
 8011396:	1949      	adds	r1, r1, r5
 8011398:	9d02      	ldr	r5, [sp, #8]
 801139a:	431c      	orrs	r4, r3
 801139c:	6068      	str	r0, [r5, #4]
 801139e:	604c      	str	r4, [r1, #4]
 80113a0:	6850      	ldr	r0, [r2, #4]
 80113a2:	3108      	adds	r1, #8
 80113a4:	4303      	orrs	r3, r0
 80113a6:	6053      	str	r3, [r2, #4]
 80113a8:	9801      	ldr	r0, [sp, #4]
 80113aa:	f7fb f9a3 	bl	800c6f4 <_free_r>
 80113ae:	9801      	ldr	r0, [sp, #4]
 80113b0:	f7f9 ff02 	bl	800b1b8 <__malloc_unlock>
 80113b4:	9f02      	ldr	r7, [sp, #8]
 80113b6:	3708      	adds	r7, #8
 80113b8:	e784      	b.n	80112c4 <_realloc_r+0x14>
 80113ba:	2200      	movs	r2, #0
 80113bc:	0013      	movs	r3, r2
 80113be:	07ff      	lsls	r7, r7, #31
 80113c0:	d500      	bpl.n	80113c4 <_realloc_r+0x114>
 80113c2:	e0c6      	b.n	8011552 <_realloc_r+0x2a2>
 80113c4:	0021      	movs	r1, r4
 80113c6:	2003      	movs	r0, #3
 80113c8:	3908      	subs	r1, #8
 80113ca:	680d      	ldr	r5, [r1, #0]
 80113cc:	9904      	ldr	r1, [sp, #16]
 80113ce:	1b4d      	subs	r5, r1, r5
 80113d0:	6869      	ldr	r1, [r5, #4]
 80113d2:	4381      	bics	r1, r0
 80113d4:	9803      	ldr	r0, [sp, #12]
 80113d6:	180f      	adds	r7, r1, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d100      	bne.n	80113de <_realloc_r+0x12e>
 80113dc:	e084      	b.n	80114e8 <_realloc_r+0x238>
 80113de:	19d6      	adds	r6, r2, r7
 80113e0:	459c      	cmp	ip, r3
 80113e2:	d148      	bne.n	8011476 <_realloc_r+0x1c6>
 80113e4:	9b00      	ldr	r3, [sp, #0]
 80113e6:	3310      	adds	r3, #16
 80113e8:	42b3      	cmp	r3, r6
 80113ea:	dc7d      	bgt.n	80114e8 <_realloc_r+0x238>
 80113ec:	68aa      	ldr	r2, [r5, #8]
 80113ee:	68eb      	ldr	r3, [r5, #12]
 80113f0:	002f      	movs	r7, r5
 80113f2:	60d3      	str	r3, [r2, #12]
 80113f4:	609a      	str	r2, [r3, #8]
 80113f6:	0002      	movs	r2, r0
 80113f8:	3a04      	subs	r2, #4
 80113fa:	3708      	adds	r7, #8
 80113fc:	2a24      	cmp	r2, #36	; 0x24
 80113fe:	d835      	bhi.n	801146c <_realloc_r+0x1bc>
 8011400:	003b      	movs	r3, r7
 8011402:	2a13      	cmp	r2, #19
 8011404:	d908      	bls.n	8011418 <_realloc_r+0x168>
 8011406:	6823      	ldr	r3, [r4, #0]
 8011408:	60ab      	str	r3, [r5, #8]
 801140a:	6863      	ldr	r3, [r4, #4]
 801140c:	60eb      	str	r3, [r5, #12]
 801140e:	2a1b      	cmp	r2, #27
 8011410:	d81a      	bhi.n	8011448 <_realloc_r+0x198>
 8011412:	002b      	movs	r3, r5
 8011414:	3408      	adds	r4, #8
 8011416:	3310      	adds	r3, #16
 8011418:	6822      	ldr	r2, [r4, #0]
 801141a:	601a      	str	r2, [r3, #0]
 801141c:	6862      	ldr	r2, [r4, #4]
 801141e:	605a      	str	r2, [r3, #4]
 8011420:	68a2      	ldr	r2, [r4, #8]
 8011422:	609a      	str	r2, [r3, #8]
 8011424:	9b00      	ldr	r3, [sp, #0]
 8011426:	4a74      	ldr	r2, [pc, #464]	; (80115f8 <_realloc_r+0x348>)
 8011428:	18eb      	adds	r3, r5, r3
 801142a:	6093      	str	r3, [r2, #8]
 801142c:	9a00      	ldr	r2, [sp, #0]
 801142e:	1ab6      	subs	r6, r6, r2
 8011430:	2201      	movs	r2, #1
 8011432:	4316      	orrs	r6, r2
 8011434:	605e      	str	r6, [r3, #4]
 8011436:	686b      	ldr	r3, [r5, #4]
 8011438:	4013      	ands	r3, r2
 801143a:	9a00      	ldr	r2, [sp, #0]
 801143c:	4313      	orrs	r3, r2
 801143e:	606b      	str	r3, [r5, #4]
 8011440:	9801      	ldr	r0, [sp, #4]
 8011442:	f7f9 feb9 	bl	800b1b8 <__malloc_unlock>
 8011446:	e73d      	b.n	80112c4 <_realloc_r+0x14>
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	612b      	str	r3, [r5, #16]
 801144c:	68e3      	ldr	r3, [r4, #12]
 801144e:	616b      	str	r3, [r5, #20]
 8011450:	2a24      	cmp	r2, #36	; 0x24
 8011452:	d003      	beq.n	801145c <_realloc_r+0x1ac>
 8011454:	002b      	movs	r3, r5
 8011456:	3410      	adds	r4, #16
 8011458:	3318      	adds	r3, #24
 801145a:	e7dd      	b.n	8011418 <_realloc_r+0x168>
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	61ab      	str	r3, [r5, #24]
 8011460:	002b      	movs	r3, r5
 8011462:	6962      	ldr	r2, [r4, #20]
 8011464:	3320      	adds	r3, #32
 8011466:	61ea      	str	r2, [r5, #28]
 8011468:	3418      	adds	r4, #24
 801146a:	e7d5      	b.n	8011418 <_realloc_r+0x168>
 801146c:	0021      	movs	r1, r4
 801146e:	0038      	movs	r0, r7
 8011470:	f001 fb2f 	bl	8012ad2 <memmove>
 8011474:	e7d6      	b.n	8011424 <_realloc_r+0x174>
 8011476:	9a00      	ldr	r2, [sp, #0]
 8011478:	42b2      	cmp	r2, r6
 801147a:	dc35      	bgt.n	80114e8 <_realloc_r+0x238>
 801147c:	0028      	movs	r0, r5
 801147e:	68da      	ldr	r2, [r3, #12]
 8011480:	689b      	ldr	r3, [r3, #8]
 8011482:	3008      	adds	r0, #8
 8011484:	60da      	str	r2, [r3, #12]
 8011486:	6093      	str	r3, [r2, #8]
 8011488:	68aa      	ldr	r2, [r5, #8]
 801148a:	68eb      	ldr	r3, [r5, #12]
 801148c:	60d3      	str	r3, [r2, #12]
 801148e:	609a      	str	r2, [r3, #8]
 8011490:	9a03      	ldr	r2, [sp, #12]
 8011492:	3a04      	subs	r2, #4
 8011494:	2a24      	cmp	r2, #36	; 0x24
 8011496:	d823      	bhi.n	80114e0 <_realloc_r+0x230>
 8011498:	2a13      	cmp	r2, #19
 801149a:	d907      	bls.n	80114ac <_realloc_r+0x1fc>
 801149c:	6823      	ldr	r3, [r4, #0]
 801149e:	60ab      	str	r3, [r5, #8]
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	60eb      	str	r3, [r5, #12]
 80114a4:	2a1b      	cmp	r2, #27
 80114a6:	d809      	bhi.n	80114bc <_realloc_r+0x20c>
 80114a8:	3408      	adds	r4, #8
 80114aa:	3008      	adds	r0, #8
 80114ac:	6823      	ldr	r3, [r4, #0]
 80114ae:	6003      	str	r3, [r0, #0]
 80114b0:	6863      	ldr	r3, [r4, #4]
 80114b2:	6043      	str	r3, [r0, #4]
 80114b4:	68a3      	ldr	r3, [r4, #8]
 80114b6:	6083      	str	r3, [r0, #8]
 80114b8:	9502      	str	r5, [sp, #8]
 80114ba:	e75e      	b.n	801137a <_realloc_r+0xca>
 80114bc:	68a3      	ldr	r3, [r4, #8]
 80114be:	612b      	str	r3, [r5, #16]
 80114c0:	68e3      	ldr	r3, [r4, #12]
 80114c2:	616b      	str	r3, [r5, #20]
 80114c4:	2a24      	cmp	r2, #36	; 0x24
 80114c6:	d003      	beq.n	80114d0 <_realloc_r+0x220>
 80114c8:	0028      	movs	r0, r5
 80114ca:	3410      	adds	r4, #16
 80114cc:	3018      	adds	r0, #24
 80114ce:	e7ed      	b.n	80114ac <_realloc_r+0x1fc>
 80114d0:	0028      	movs	r0, r5
 80114d2:	6923      	ldr	r3, [r4, #16]
 80114d4:	3020      	adds	r0, #32
 80114d6:	61ab      	str	r3, [r5, #24]
 80114d8:	6963      	ldr	r3, [r4, #20]
 80114da:	3418      	adds	r4, #24
 80114dc:	61eb      	str	r3, [r5, #28]
 80114de:	e7e5      	b.n	80114ac <_realloc_r+0x1fc>
 80114e0:	0021      	movs	r1, r4
 80114e2:	f001 faf6 	bl	8012ad2 <memmove>
 80114e6:	e7e7      	b.n	80114b8 <_realloc_r+0x208>
 80114e8:	9b00      	ldr	r3, [sp, #0]
 80114ea:	42bb      	cmp	r3, r7
 80114ec:	dc31      	bgt.n	8011552 <_realloc_r+0x2a2>
 80114ee:	0028      	movs	r0, r5
 80114f0:	68aa      	ldr	r2, [r5, #8]
 80114f2:	68eb      	ldr	r3, [r5, #12]
 80114f4:	3008      	adds	r0, #8
 80114f6:	60d3      	str	r3, [r2, #12]
 80114f8:	609a      	str	r2, [r3, #8]
 80114fa:	9a03      	ldr	r2, [sp, #12]
 80114fc:	3a04      	subs	r2, #4
 80114fe:	2a24      	cmp	r2, #36	; 0x24
 8011500:	d823      	bhi.n	801154a <_realloc_r+0x29a>
 8011502:	2a13      	cmp	r2, #19
 8011504:	d907      	bls.n	8011516 <_realloc_r+0x266>
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	60ab      	str	r3, [r5, #8]
 801150a:	6863      	ldr	r3, [r4, #4]
 801150c:	60eb      	str	r3, [r5, #12]
 801150e:	2a1b      	cmp	r2, #27
 8011510:	d809      	bhi.n	8011526 <_realloc_r+0x276>
 8011512:	3408      	adds	r4, #8
 8011514:	3008      	adds	r0, #8
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	6003      	str	r3, [r0, #0]
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	6043      	str	r3, [r0, #4]
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	6083      	str	r3, [r0, #8]
 8011522:	003e      	movs	r6, r7
 8011524:	e7c8      	b.n	80114b8 <_realloc_r+0x208>
 8011526:	68a3      	ldr	r3, [r4, #8]
 8011528:	612b      	str	r3, [r5, #16]
 801152a:	68e3      	ldr	r3, [r4, #12]
 801152c:	616b      	str	r3, [r5, #20]
 801152e:	2a24      	cmp	r2, #36	; 0x24
 8011530:	d003      	beq.n	801153a <_realloc_r+0x28a>
 8011532:	0028      	movs	r0, r5
 8011534:	3410      	adds	r4, #16
 8011536:	3018      	adds	r0, #24
 8011538:	e7ed      	b.n	8011516 <_realloc_r+0x266>
 801153a:	0028      	movs	r0, r5
 801153c:	6923      	ldr	r3, [r4, #16]
 801153e:	3020      	adds	r0, #32
 8011540:	61ab      	str	r3, [r5, #24]
 8011542:	6963      	ldr	r3, [r4, #20]
 8011544:	3418      	adds	r4, #24
 8011546:	61eb      	str	r3, [r5, #28]
 8011548:	e7e5      	b.n	8011516 <_realloc_r+0x266>
 801154a:	0021      	movs	r1, r4
 801154c:	f001 fac1 	bl	8012ad2 <memmove>
 8011550:	e7e7      	b.n	8011522 <_realloc_r+0x272>
 8011552:	9905      	ldr	r1, [sp, #20]
 8011554:	9801      	ldr	r0, [sp, #4]
 8011556:	f7f9 fc13 	bl	800ad80 <_malloc_r>
 801155a:	1e07      	subs	r7, r0, #0
 801155c:	d100      	bne.n	8011560 <_realloc_r+0x2b0>
 801155e:	e76f      	b.n	8011440 <_realloc_r+0x190>
 8011560:	0023      	movs	r3, r4
 8011562:	2201      	movs	r2, #1
 8011564:	3b08      	subs	r3, #8
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	4393      	bics	r3, r2
 801156a:	9a04      	ldr	r2, [sp, #16]
 801156c:	18d3      	adds	r3, r2, r3
 801156e:	0002      	movs	r2, r0
 8011570:	3a08      	subs	r2, #8
 8011572:	4293      	cmp	r3, r2
 8011574:	d105      	bne.n	8011582 <_realloc_r+0x2d2>
 8011576:	685e      	ldr	r6, [r3, #4]
 8011578:	2303      	movs	r3, #3
 801157a:	439e      	bics	r6, r3
 801157c:	9b03      	ldr	r3, [sp, #12]
 801157e:	18f6      	adds	r6, r6, r3
 8011580:	e6fb      	b.n	801137a <_realloc_r+0xca>
 8011582:	9a03      	ldr	r2, [sp, #12]
 8011584:	3a04      	subs	r2, #4
 8011586:	2a24      	cmp	r2, #36	; 0x24
 8011588:	d829      	bhi.n	80115de <_realloc_r+0x32e>
 801158a:	0003      	movs	r3, r0
 801158c:	0021      	movs	r1, r4
 801158e:	2a13      	cmp	r2, #19
 8011590:	d908      	bls.n	80115a4 <_realloc_r+0x2f4>
 8011592:	6823      	ldr	r3, [r4, #0]
 8011594:	6003      	str	r3, [r0, #0]
 8011596:	6863      	ldr	r3, [r4, #4]
 8011598:	6043      	str	r3, [r0, #4]
 801159a:	2a1b      	cmp	r2, #27
 801159c:	d80d      	bhi.n	80115ba <_realloc_r+0x30a>
 801159e:	0003      	movs	r3, r0
 80115a0:	3108      	adds	r1, #8
 80115a2:	3308      	adds	r3, #8
 80115a4:	680a      	ldr	r2, [r1, #0]
 80115a6:	601a      	str	r2, [r3, #0]
 80115a8:	684a      	ldr	r2, [r1, #4]
 80115aa:	605a      	str	r2, [r3, #4]
 80115ac:	688a      	ldr	r2, [r1, #8]
 80115ae:	609a      	str	r2, [r3, #8]
 80115b0:	0021      	movs	r1, r4
 80115b2:	9801      	ldr	r0, [sp, #4]
 80115b4:	f7fb f89e 	bl	800c6f4 <_free_r>
 80115b8:	e742      	b.n	8011440 <_realloc_r+0x190>
 80115ba:	68a3      	ldr	r3, [r4, #8]
 80115bc:	6083      	str	r3, [r0, #8]
 80115be:	68e3      	ldr	r3, [r4, #12]
 80115c0:	60c3      	str	r3, [r0, #12]
 80115c2:	2a24      	cmp	r2, #36	; 0x24
 80115c4:	d003      	beq.n	80115ce <_realloc_r+0x31e>
 80115c6:	0003      	movs	r3, r0
 80115c8:	3110      	adds	r1, #16
 80115ca:	3310      	adds	r3, #16
 80115cc:	e7ea      	b.n	80115a4 <_realloc_r+0x2f4>
 80115ce:	6923      	ldr	r3, [r4, #16]
 80115d0:	3118      	adds	r1, #24
 80115d2:	6103      	str	r3, [r0, #16]
 80115d4:	0003      	movs	r3, r0
 80115d6:	6962      	ldr	r2, [r4, #20]
 80115d8:	3318      	adds	r3, #24
 80115da:	6142      	str	r2, [r0, #20]
 80115dc:	e7e2      	b.n	80115a4 <_realloc_r+0x2f4>
 80115de:	0021      	movs	r1, r4
 80115e0:	f001 fa77 	bl	8012ad2 <memmove>
 80115e4:	e7e4      	b.n	80115b0 <_realloc_r+0x300>
 80115e6:	9e03      	ldr	r6, [sp, #12]
 80115e8:	e6c7      	b.n	801137a <_realloc_r+0xca>
 80115ea:	9902      	ldr	r1, [sp, #8]
 80115ec:	4306      	orrs	r6, r0
 80115ee:	604e      	str	r6, [r1, #4]
 80115f0:	6851      	ldr	r1, [r2, #4]
 80115f2:	430b      	orrs	r3, r1
 80115f4:	6053      	str	r3, [r2, #4]
 80115f6:	e6da      	b.n	80113ae <_realloc_r+0xfe>
 80115f8:	20000028 	.word	0x20000028

080115fc <_strtoll_l.constprop.0>:
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fe:	b08d      	sub	sp, #52	; 0x34
 8011600:	9203      	str	r2, [sp, #12]
 8011602:	4a53      	ldr	r2, [pc, #332]	; (8011750 <_strtoll_l.constprop.0+0x154>)
 8011604:	001e      	movs	r6, r3
 8011606:	9102      	str	r1, [sp, #8]
 8011608:	000b      	movs	r3, r1
 801160a:	4694      	mov	ip, r2
 801160c:	2108      	movs	r1, #8
 801160e:	900a      	str	r0, [sp, #40]	; 0x28
 8011610:	001a      	movs	r2, r3
 8011612:	4660      	mov	r0, ip
 8011614:	7814      	ldrb	r4, [r2, #0]
 8011616:	3301      	adds	r3, #1
 8011618:	5d00      	ldrb	r0, [r0, r4]
 801161a:	001d      	movs	r5, r3
 801161c:	0007      	movs	r7, r0
 801161e:	400f      	ands	r7, r1
 8011620:	4208      	tst	r0, r1
 8011622:	d1f5      	bne.n	8011610 <_strtoll_l.constprop.0+0x14>
 8011624:	2c2d      	cmp	r4, #45	; 0x2d
 8011626:	d153      	bne.n	80116d0 <_strtoll_l.constprop.0+0xd4>
 8011628:	781c      	ldrb	r4, [r3, #0]
 801162a:	2301      	movs	r3, #1
 801162c:	1c95      	adds	r5, r2, #2
 801162e:	9301      	str	r3, [sp, #4]
 8011630:	2e00      	cmp	r6, #0
 8011632:	d100      	bne.n	8011636 <_strtoll_l.constprop.0+0x3a>
 8011634:	e086      	b.n	8011744 <_strtoll_l.constprop.0+0x148>
 8011636:	2e10      	cmp	r6, #16
 8011638:	d10a      	bne.n	8011650 <_strtoll_l.constprop.0+0x54>
 801163a:	2c30      	cmp	r4, #48	; 0x30
 801163c:	d108      	bne.n	8011650 <_strtoll_l.constprop.0+0x54>
 801163e:	2220      	movs	r2, #32
 8011640:	782b      	ldrb	r3, [r5, #0]
 8011642:	4393      	bics	r3, r2
 8011644:	2b58      	cmp	r3, #88	; 0x58
 8011646:	d000      	beq.n	801164a <_strtoll_l.constprop.0+0x4e>
 8011648:	e076      	b.n	8011738 <_strtoll_l.constprop.0+0x13c>
 801164a:	2610      	movs	r6, #16
 801164c:	786c      	ldrb	r4, [r5, #1]
 801164e:	3502      	adds	r5, #2
 8011650:	2001      	movs	r0, #1
 8011652:	2300      	movs	r3, #0
 8011654:	493f      	ldr	r1, [pc, #252]	; (8011754 <_strtoll_l.constprop.0+0x158>)
 8011656:	9a01      	ldr	r2, [sp, #4]
 8011658:	4240      	negs	r0, r0
 801165a:	1812      	adds	r2, r2, r0
 801165c:	414b      	adcs	r3, r1
 801165e:	9204      	str	r2, [sp, #16]
 8011660:	9305      	str	r3, [sp, #20]
 8011662:	9804      	ldr	r0, [sp, #16]
 8011664:	9905      	ldr	r1, [sp, #20]
 8011666:	17f3      	asrs	r3, r6, #31
 8011668:	0032      	movs	r2, r6
 801166a:	930b      	str	r3, [sp, #44]	; 0x2c
 801166c:	f7ee ff1a 	bl	80004a4 <__aeabi_uldivmod>
 8011670:	2300      	movs	r3, #0
 8011672:	000f      	movs	r7, r1
 8011674:	9008      	str	r0, [sp, #32]
 8011676:	2100      	movs	r1, #0
 8011678:	2000      	movs	r0, #0
 801167a:	9209      	str	r2, [sp, #36]	; 0x24
 801167c:	0022      	movs	r2, r4
 801167e:	3a30      	subs	r2, #48	; 0x30
 8011680:	2a09      	cmp	r2, #9
 8011682:	d82b      	bhi.n	80116dc <_strtoll_l.constprop.0+0xe0>
 8011684:	0014      	movs	r4, r2
 8011686:	42a6      	cmp	r6, r4
 8011688:	dd37      	ble.n	80116fa <_strtoll_l.constprop.0+0xfe>
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	d01d      	beq.n	80116ca <_strtoll_l.constprop.0+0xce>
 801168e:	42b9      	cmp	r1, r7
 8011690:	d830      	bhi.n	80116f4 <_strtoll_l.constprop.0+0xf8>
 8011692:	d102      	bne.n	801169a <_strtoll_l.constprop.0+0x9e>
 8011694:	9b08      	ldr	r3, [sp, #32]
 8011696:	4298      	cmp	r0, r3
 8011698:	d82c      	bhi.n	80116f4 <_strtoll_l.constprop.0+0xf8>
 801169a:	9b08      	ldr	r3, [sp, #32]
 801169c:	4283      	cmp	r3, r0
 801169e:	d106      	bne.n	80116ae <_strtoll_l.constprop.0+0xb2>
 80116a0:	428f      	cmp	r7, r1
 80116a2:	d104      	bne.n	80116ae <_strtoll_l.constprop.0+0xb2>
 80116a4:	2301      	movs	r3, #1
 80116a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116a8:	425b      	negs	r3, r3
 80116aa:	42a2      	cmp	r2, r4
 80116ac:	db0d      	blt.n	80116ca <_strtoll_l.constprop.0+0xce>
 80116ae:	000b      	movs	r3, r1
 80116b0:	0002      	movs	r2, r0
 80116b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116b4:	0030      	movs	r0, r6
 80116b6:	f7ee ff15 	bl	80004e4 <__aeabi_lmul>
 80116ba:	17e3      	asrs	r3, r4, #31
 80116bc:	9406      	str	r4, [sp, #24]
 80116be:	9307      	str	r3, [sp, #28]
 80116c0:	9b06      	ldr	r3, [sp, #24]
 80116c2:	9c07      	ldr	r4, [sp, #28]
 80116c4:	18c0      	adds	r0, r0, r3
 80116c6:	4161      	adcs	r1, r4
 80116c8:	2301      	movs	r3, #1
 80116ca:	782c      	ldrb	r4, [r5, #0]
 80116cc:	3501      	adds	r5, #1
 80116ce:	e7d5      	b.n	801167c <_strtoll_l.constprop.0+0x80>
 80116d0:	9701      	str	r7, [sp, #4]
 80116d2:	2c2b      	cmp	r4, #43	; 0x2b
 80116d4:	d1ac      	bne.n	8011630 <_strtoll_l.constprop.0+0x34>
 80116d6:	781c      	ldrb	r4, [r3, #0]
 80116d8:	1c95      	adds	r5, r2, #2
 80116da:	e7a9      	b.n	8011630 <_strtoll_l.constprop.0+0x34>
 80116dc:	0022      	movs	r2, r4
 80116de:	3a41      	subs	r2, #65	; 0x41
 80116e0:	2a19      	cmp	r2, #25
 80116e2:	d801      	bhi.n	80116e8 <_strtoll_l.constprop.0+0xec>
 80116e4:	3c37      	subs	r4, #55	; 0x37
 80116e6:	e7ce      	b.n	8011686 <_strtoll_l.constprop.0+0x8a>
 80116e8:	0022      	movs	r2, r4
 80116ea:	3a61      	subs	r2, #97	; 0x61
 80116ec:	2a19      	cmp	r2, #25
 80116ee:	d804      	bhi.n	80116fa <_strtoll_l.constprop.0+0xfe>
 80116f0:	3c57      	subs	r4, #87	; 0x57
 80116f2:	e7c8      	b.n	8011686 <_strtoll_l.constprop.0+0x8a>
 80116f4:	2301      	movs	r3, #1
 80116f6:	425b      	negs	r3, r3
 80116f8:	e7e7      	b.n	80116ca <_strtoll_l.constprop.0+0xce>
 80116fa:	1c5a      	adds	r2, r3, #1
 80116fc:	d109      	bne.n	8011712 <_strtoll_l.constprop.0+0x116>
 80116fe:	9804      	ldr	r0, [sp, #16]
 8011700:	9905      	ldr	r1, [sp, #20]
 8011702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011704:	3323      	adds	r3, #35	; 0x23
 8011706:	6013      	str	r3, [r2, #0]
 8011708:	9b03      	ldr	r3, [sp, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d10e      	bne.n	801172c <_strtoll_l.constprop.0+0x130>
 801170e:	b00d      	add	sp, #52	; 0x34
 8011710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011712:	9a01      	ldr	r2, [sp, #4]
 8011714:	2a00      	cmp	r2, #0
 8011716:	d004      	beq.n	8011722 <_strtoll_l.constprop.0+0x126>
 8011718:	0006      	movs	r6, r0
 801171a:	000f      	movs	r7, r1
 801171c:	2100      	movs	r1, #0
 801171e:	4270      	negs	r0, r6
 8011720:	41b9      	sbcs	r1, r7
 8011722:	9a03      	ldr	r2, [sp, #12]
 8011724:	2a00      	cmp	r2, #0
 8011726:	d0f2      	beq.n	801170e <_strtoll_l.constprop.0+0x112>
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <_strtoll_l.constprop.0+0x134>
 801172c:	1e6b      	subs	r3, r5, #1
 801172e:	9302      	str	r3, [sp, #8]
 8011730:	9b03      	ldr	r3, [sp, #12]
 8011732:	9a02      	ldr	r2, [sp, #8]
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	e7ea      	b.n	801170e <_strtoll_l.constprop.0+0x112>
 8011738:	2430      	movs	r4, #48	; 0x30
 801173a:	2e00      	cmp	r6, #0
 801173c:	d000      	beq.n	8011740 <_strtoll_l.constprop.0+0x144>
 801173e:	e787      	b.n	8011650 <_strtoll_l.constprop.0+0x54>
 8011740:	3608      	adds	r6, #8
 8011742:	e785      	b.n	8011650 <_strtoll_l.constprop.0+0x54>
 8011744:	2c30      	cmp	r4, #48	; 0x30
 8011746:	d100      	bne.n	801174a <_strtoll_l.constprop.0+0x14e>
 8011748:	e779      	b.n	801163e <_strtoll_l.constprop.0+0x42>
 801174a:	260a      	movs	r6, #10
 801174c:	e780      	b.n	8011650 <_strtoll_l.constprop.0+0x54>
 801174e:	46c0      	nop			; (mov r8, r8)
 8011750:	08014b19 	.word	0x08014b19
 8011754:	7fffffff 	.word	0x7fffffff

08011758 <_strtoll_r>:
 8011758:	b510      	push	{r4, lr}
 801175a:	f7ff ff4f 	bl	80115fc <_strtoll_l.constprop.0>
 801175e:	bd10      	pop	{r4, pc}

08011760 <_strtoull_l.constprop.0>:
 8011760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011762:	b08b      	sub	sp, #44	; 0x2c
 8011764:	9202      	str	r2, [sp, #8]
 8011766:	4a54      	ldr	r2, [pc, #336]	; (80118b8 <_strtoull_l.constprop.0+0x158>)
 8011768:	001e      	movs	r6, r3
 801176a:	9101      	str	r1, [sp, #4]
 801176c:	000b      	movs	r3, r1
 801176e:	4694      	mov	ip, r2
 8011770:	2108      	movs	r1, #8
 8011772:	9009      	str	r0, [sp, #36]	; 0x24
 8011774:	001a      	movs	r2, r3
 8011776:	4660      	mov	r0, ip
 8011778:	7814      	ldrb	r4, [r2, #0]
 801177a:	3301      	adds	r3, #1
 801177c:	5d00      	ldrb	r0, [r0, r4]
 801177e:	001d      	movs	r5, r3
 8011780:	0007      	movs	r7, r0
 8011782:	400f      	ands	r7, r1
 8011784:	4208      	tst	r0, r1
 8011786:	d1f5      	bne.n	8011774 <_strtoull_l.constprop.0+0x14>
 8011788:	2c2d      	cmp	r4, #45	; 0x2d
 801178a:	d154      	bne.n	8011836 <_strtoull_l.constprop.0+0xd6>
 801178c:	781c      	ldrb	r4, [r3, #0]
 801178e:	2301      	movs	r3, #1
 8011790:	1c95      	adds	r5, r2, #2
 8011792:	9306      	str	r3, [sp, #24]
 8011794:	2e00      	cmp	r6, #0
 8011796:	d100      	bne.n	801179a <_strtoull_l.constprop.0+0x3a>
 8011798:	e088      	b.n	80118ac <_strtoull_l.constprop.0+0x14c>
 801179a:	2e10      	cmp	r6, #16
 801179c:	d10a      	bne.n	80117b4 <_strtoull_l.constprop.0+0x54>
 801179e:	2c30      	cmp	r4, #48	; 0x30
 80117a0:	d108      	bne.n	80117b4 <_strtoull_l.constprop.0+0x54>
 80117a2:	2220      	movs	r2, #32
 80117a4:	782b      	ldrb	r3, [r5, #0]
 80117a6:	4393      	bics	r3, r2
 80117a8:	2b58      	cmp	r3, #88	; 0x58
 80117aa:	d000      	beq.n	80117ae <_strtoull_l.constprop.0+0x4e>
 80117ac:	e078      	b.n	80118a0 <_strtoull_l.constprop.0+0x140>
 80117ae:	2610      	movs	r6, #16
 80117b0:	786c      	ldrb	r4, [r5, #1]
 80117b2:	3502      	adds	r5, #2
 80117b4:	17f7      	asrs	r7, r6, #31
 80117b6:	0032      	movs	r2, r6
 80117b8:	003b      	movs	r3, r7
 80117ba:	2001      	movs	r0, #1
 80117bc:	4240      	negs	r0, r0
 80117be:	17c1      	asrs	r1, r0, #31
 80117c0:	f7ee fe70 	bl	80004a4 <__aeabi_uldivmod>
 80117c4:	0032      	movs	r2, r6
 80117c6:	9007      	str	r0, [sp, #28]
 80117c8:	9103      	str	r1, [sp, #12]
 80117ca:	003b      	movs	r3, r7
 80117cc:	2001      	movs	r0, #1
 80117ce:	4240      	negs	r0, r0
 80117d0:	17c1      	asrs	r1, r0, #31
 80117d2:	f7ee fe67 	bl	80004a4 <__aeabi_uldivmod>
 80117d6:	2300      	movs	r3, #0
 80117d8:	2000      	movs	r0, #0
 80117da:	2100      	movs	r1, #0
 80117dc:	9208      	str	r2, [sp, #32]
 80117de:	0022      	movs	r2, r4
 80117e0:	3a30      	subs	r2, #48	; 0x30
 80117e2:	2a09      	cmp	r2, #9
 80117e4:	d82d      	bhi.n	8011842 <_strtoull_l.constprop.0+0xe2>
 80117e6:	0014      	movs	r4, r2
 80117e8:	42a6      	cmp	r6, r4
 80117ea:	dd39      	ble.n	8011860 <_strtoull_l.constprop.0+0x100>
 80117ec:	1c5a      	adds	r2, r3, #1
 80117ee:	d01f      	beq.n	8011830 <_strtoull_l.constprop.0+0xd0>
 80117f0:	9b03      	ldr	r3, [sp, #12]
 80117f2:	4299      	cmp	r1, r3
 80117f4:	d831      	bhi.n	801185a <_strtoull_l.constprop.0+0xfa>
 80117f6:	d102      	bne.n	80117fe <_strtoull_l.constprop.0+0x9e>
 80117f8:	9b07      	ldr	r3, [sp, #28]
 80117fa:	4298      	cmp	r0, r3
 80117fc:	d82d      	bhi.n	801185a <_strtoull_l.constprop.0+0xfa>
 80117fe:	9b07      	ldr	r3, [sp, #28]
 8011800:	4283      	cmp	r3, r0
 8011802:	d107      	bne.n	8011814 <_strtoull_l.constprop.0+0xb4>
 8011804:	9b03      	ldr	r3, [sp, #12]
 8011806:	428b      	cmp	r3, r1
 8011808:	d104      	bne.n	8011814 <_strtoull_l.constprop.0+0xb4>
 801180a:	2301      	movs	r3, #1
 801180c:	9a08      	ldr	r2, [sp, #32]
 801180e:	425b      	negs	r3, r3
 8011810:	42a2      	cmp	r2, r4
 8011812:	db0d      	blt.n	8011830 <_strtoull_l.constprop.0+0xd0>
 8011814:	000b      	movs	r3, r1
 8011816:	0002      	movs	r2, r0
 8011818:	0039      	movs	r1, r7
 801181a:	0030      	movs	r0, r6
 801181c:	f7ee fe62 	bl	80004e4 <__aeabi_lmul>
 8011820:	17e3      	asrs	r3, r4, #31
 8011822:	9404      	str	r4, [sp, #16]
 8011824:	9305      	str	r3, [sp, #20]
 8011826:	9b04      	ldr	r3, [sp, #16]
 8011828:	9c05      	ldr	r4, [sp, #20]
 801182a:	18c0      	adds	r0, r0, r3
 801182c:	4161      	adcs	r1, r4
 801182e:	2301      	movs	r3, #1
 8011830:	782c      	ldrb	r4, [r5, #0]
 8011832:	3501      	adds	r5, #1
 8011834:	e7d3      	b.n	80117de <_strtoull_l.constprop.0+0x7e>
 8011836:	9706      	str	r7, [sp, #24]
 8011838:	2c2b      	cmp	r4, #43	; 0x2b
 801183a:	d1ab      	bne.n	8011794 <_strtoull_l.constprop.0+0x34>
 801183c:	781c      	ldrb	r4, [r3, #0]
 801183e:	1c95      	adds	r5, r2, #2
 8011840:	e7a8      	b.n	8011794 <_strtoull_l.constprop.0+0x34>
 8011842:	0022      	movs	r2, r4
 8011844:	3a41      	subs	r2, #65	; 0x41
 8011846:	2a19      	cmp	r2, #25
 8011848:	d801      	bhi.n	801184e <_strtoull_l.constprop.0+0xee>
 801184a:	3c37      	subs	r4, #55	; 0x37
 801184c:	e7cc      	b.n	80117e8 <_strtoull_l.constprop.0+0x88>
 801184e:	0022      	movs	r2, r4
 8011850:	3a61      	subs	r2, #97	; 0x61
 8011852:	2a19      	cmp	r2, #25
 8011854:	d804      	bhi.n	8011860 <_strtoull_l.constprop.0+0x100>
 8011856:	3c57      	subs	r4, #87	; 0x57
 8011858:	e7c6      	b.n	80117e8 <_strtoull_l.constprop.0+0x88>
 801185a:	2301      	movs	r3, #1
 801185c:	425b      	negs	r3, r3
 801185e:	e7e7      	b.n	8011830 <_strtoull_l.constprop.0+0xd0>
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	d10a      	bne.n	801187a <_strtoull_l.constprop.0+0x11a>
 8011864:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011866:	3323      	adds	r3, #35	; 0x23
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	9b02      	ldr	r3, [sp, #8]
 801186c:	2001      	movs	r0, #1
 801186e:	4240      	negs	r0, r0
 8011870:	17c1      	asrs	r1, r0, #31
 8011872:	2b00      	cmp	r3, #0
 8011874:	d10e      	bne.n	8011894 <_strtoull_l.constprop.0+0x134>
 8011876:	b00b      	add	sp, #44	; 0x2c
 8011878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187a:	9a06      	ldr	r2, [sp, #24]
 801187c:	2a00      	cmp	r2, #0
 801187e:	d004      	beq.n	801188a <_strtoull_l.constprop.0+0x12a>
 8011880:	0006      	movs	r6, r0
 8011882:	000f      	movs	r7, r1
 8011884:	2100      	movs	r1, #0
 8011886:	4270      	negs	r0, r6
 8011888:	41b9      	sbcs	r1, r7
 801188a:	9a02      	ldr	r2, [sp, #8]
 801188c:	2a00      	cmp	r2, #0
 801188e:	d0f2      	beq.n	8011876 <_strtoull_l.constprop.0+0x116>
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <_strtoull_l.constprop.0+0x138>
 8011894:	1e6b      	subs	r3, r5, #1
 8011896:	9301      	str	r3, [sp, #4]
 8011898:	9b02      	ldr	r3, [sp, #8]
 801189a:	9a01      	ldr	r2, [sp, #4]
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	e7ea      	b.n	8011876 <_strtoull_l.constprop.0+0x116>
 80118a0:	2430      	movs	r4, #48	; 0x30
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	d000      	beq.n	80118a8 <_strtoull_l.constprop.0+0x148>
 80118a6:	e785      	b.n	80117b4 <_strtoull_l.constprop.0+0x54>
 80118a8:	3608      	adds	r6, #8
 80118aa:	e783      	b.n	80117b4 <_strtoull_l.constprop.0+0x54>
 80118ac:	2c30      	cmp	r4, #48	; 0x30
 80118ae:	d100      	bne.n	80118b2 <_strtoull_l.constprop.0+0x152>
 80118b0:	e777      	b.n	80117a2 <_strtoull_l.constprop.0+0x42>
 80118b2:	260a      	movs	r6, #10
 80118b4:	e77e      	b.n	80117b4 <_strtoull_l.constprop.0+0x54>
 80118b6:	46c0      	nop			; (mov r8, r8)
 80118b8:	08014b19 	.word	0x08014b19

080118bc <_strtoull_r>:
 80118bc:	b510      	push	{r4, lr}
 80118be:	f7ff ff4f 	bl	8011760 <_strtoull_l.constprop.0>
 80118c2:	bd10      	pop	{r4, pc}

080118c4 <_mbrtowc_r>:
 80118c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118c6:	0004      	movs	r4, r0
 80118c8:	0010      	movs	r0, r2
 80118ca:	4a0b      	ldr	r2, [pc, #44]	; (80118f8 <_mbrtowc_r+0x34>)
 80118cc:	9d06      	ldr	r5, [sp, #24]
 80118ce:	32e4      	adds	r2, #228	; 0xe4
 80118d0:	6816      	ldr	r6, [r2, #0]
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d10c      	bne.n	80118f0 <_mbrtowc_r+0x2c>
 80118d6:	2301      	movs	r3, #1
 80118d8:	0001      	movs	r1, r0
 80118da:	4a08      	ldr	r2, [pc, #32]	; (80118fc <_mbrtowc_r+0x38>)
 80118dc:	9500      	str	r5, [sp, #0]
 80118de:	0020      	movs	r0, r4
 80118e0:	47b0      	blx	r6
 80118e2:	1c43      	adds	r3, r0, #1
 80118e4:	d103      	bne.n	80118ee <_mbrtowc_r+0x2a>
 80118e6:	2300      	movs	r3, #0
 80118e8:	602b      	str	r3, [r5, #0]
 80118ea:	338a      	adds	r3, #138	; 0x8a
 80118ec:	6023      	str	r3, [r4, #0]
 80118ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80118f0:	0002      	movs	r2, r0
 80118f2:	9500      	str	r5, [sp, #0]
 80118f4:	e7f3      	b.n	80118de <_mbrtowc_r+0x1a>
 80118f6:	46c0      	nop			; (mov r8, r8)
 80118f8:	20000444 	.word	0x20000444
 80118fc:	08014ea3 	.word	0x08014ea3

08011900 <iswspace>:
 8011900:	b510      	push	{r4, lr}
 8011902:	2100      	movs	r1, #0
 8011904:	f000 f802 	bl	801190c <iswspace_l>
 8011908:	bd10      	pop	{r4, pc}
	...

0801190c <iswspace_l>:
 801190c:	0003      	movs	r3, r0
 801190e:	2000      	movs	r0, #0
 8011910:	2bff      	cmp	r3, #255	; 0xff
 8011912:	d803      	bhi.n	801191c <iswspace_l+0x10>
 8011914:	4a02      	ldr	r2, [pc, #8]	; (8011920 <iswspace_l+0x14>)
 8011916:	5cd0      	ldrb	r0, [r2, r3]
 8011918:	2308      	movs	r3, #8
 801191a:	4018      	ands	r0, r3
 801191c:	4770      	bx	lr
 801191e:	46c0      	nop			; (mov r8, r8)
 8011920:	08014b19 	.word	0x08014b19

08011924 <fiprintf>:
 8011924:	b40e      	push	{r1, r2, r3}
 8011926:	b517      	push	{r0, r1, r2, r4, lr}
 8011928:	4c05      	ldr	r4, [pc, #20]	; (8011940 <fiprintf+0x1c>)
 801192a:	ab05      	add	r3, sp, #20
 801192c:	cb04      	ldmia	r3!, {r2}
 801192e:	0001      	movs	r1, r0
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	f000 f954 	bl	8011be0 <_vfiprintf_r>
 8011938:	bc1e      	pop	{r1, r2, r3, r4}
 801193a:	bc08      	pop	{r3}
 801193c:	b003      	add	sp, #12
 801193e:	4718      	bx	r3
 8011940:	200006d0 	.word	0x200006d0

08011944 <__ssprint_r>:
 8011944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011946:	6813      	ldr	r3, [r2, #0]
 8011948:	b087      	sub	sp, #28
 801194a:	0017      	movs	r7, r2
 801194c:	9303      	str	r3, [sp, #12]
 801194e:	6893      	ldr	r3, [r2, #8]
 8011950:	2200      	movs	r2, #0
 8011952:	000c      	movs	r4, r1
 8011954:	9005      	str	r0, [sp, #20]
 8011956:	9202      	str	r2, [sp, #8]
 8011958:	9201      	str	r2, [sp, #4]
 801195a:	4293      	cmp	r3, r2
 801195c:	d10d      	bne.n	801197a <__ssprint_r+0x36>
 801195e:	2000      	movs	r0, #0
 8011960:	2300      	movs	r3, #0
 8011962:	607b      	str	r3, [r7, #4]
 8011964:	b007      	add	sp, #28
 8011966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011968:	9b03      	ldr	r3, [sp, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	9302      	str	r3, [sp, #8]
 801196e:	9b03      	ldr	r3, [sp, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	9301      	str	r3, [sp, #4]
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	3308      	adds	r3, #8
 8011978:	9303      	str	r3, [sp, #12]
 801197a:	9a01      	ldr	r2, [sp, #4]
 801197c:	68a6      	ldr	r6, [r4, #8]
 801197e:	6823      	ldr	r3, [r4, #0]
 8011980:	2a00      	cmp	r2, #0
 8011982:	d0f1      	beq.n	8011968 <__ssprint_r+0x24>
 8011984:	42b2      	cmp	r2, r6
 8011986:	d32e      	bcc.n	80119e6 <__ssprint_r+0xa2>
 8011988:	2190      	movs	r1, #144	; 0x90
 801198a:	89a2      	ldrh	r2, [r4, #12]
 801198c:	00c9      	lsls	r1, r1, #3
 801198e:	420a      	tst	r2, r1
 8011990:	d029      	beq.n	80119e6 <__ssprint_r+0xa2>
 8011992:	2003      	movs	r0, #3
 8011994:	6921      	ldr	r1, [r4, #16]
 8011996:	1a5b      	subs	r3, r3, r1
 8011998:	9304      	str	r3, [sp, #16]
 801199a:	6963      	ldr	r3, [r4, #20]
 801199c:	4343      	muls	r3, r0
 801199e:	0fdd      	lsrs	r5, r3, #31
 80119a0:	18ed      	adds	r5, r5, r3
 80119a2:	9b04      	ldr	r3, [sp, #16]
 80119a4:	9801      	ldr	r0, [sp, #4]
 80119a6:	3301      	adds	r3, #1
 80119a8:	181b      	adds	r3, r3, r0
 80119aa:	106d      	asrs	r5, r5, #1
 80119ac:	42ab      	cmp	r3, r5
 80119ae:	d900      	bls.n	80119b2 <__ssprint_r+0x6e>
 80119b0:	001d      	movs	r5, r3
 80119b2:	0552      	lsls	r2, r2, #21
 80119b4:	d532      	bpl.n	8011a1c <__ssprint_r+0xd8>
 80119b6:	0029      	movs	r1, r5
 80119b8:	9805      	ldr	r0, [sp, #20]
 80119ba:	f7f9 f9e1 	bl	800ad80 <_malloc_r>
 80119be:	1e06      	subs	r6, r0, #0
 80119c0:	d036      	beq.n	8011a30 <__ssprint_r+0xec>
 80119c2:	9a04      	ldr	r2, [sp, #16]
 80119c4:	6921      	ldr	r1, [r4, #16]
 80119c6:	f7fa fe1a 	bl	800c5fe <memcpy>
 80119ca:	89a2      	ldrh	r2, [r4, #12]
 80119cc:	4b1e      	ldr	r3, [pc, #120]	; (8011a48 <__ssprint_r+0x104>)
 80119ce:	401a      	ands	r2, r3
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	4313      	orrs	r3, r2
 80119d4:	81a3      	strh	r3, [r4, #12]
 80119d6:	9b04      	ldr	r3, [sp, #16]
 80119d8:	6126      	str	r6, [r4, #16]
 80119da:	18f6      	adds	r6, r6, r3
 80119dc:	6026      	str	r6, [r4, #0]
 80119de:	6165      	str	r5, [r4, #20]
 80119e0:	9e01      	ldr	r6, [sp, #4]
 80119e2:	1aed      	subs	r5, r5, r3
 80119e4:	60a5      	str	r5, [r4, #8]
 80119e6:	9b01      	ldr	r3, [sp, #4]
 80119e8:	429e      	cmp	r6, r3
 80119ea:	d900      	bls.n	80119ee <__ssprint_r+0xaa>
 80119ec:	001e      	movs	r6, r3
 80119ee:	0032      	movs	r2, r6
 80119f0:	9902      	ldr	r1, [sp, #8]
 80119f2:	6820      	ldr	r0, [r4, #0]
 80119f4:	f001 f86d 	bl	8012ad2 <memmove>
 80119f8:	9a01      	ldr	r2, [sp, #4]
 80119fa:	68a3      	ldr	r3, [r4, #8]
 80119fc:	4694      	mov	ip, r2
 80119fe:	1b9b      	subs	r3, r3, r6
 8011a00:	60a3      	str	r3, [r4, #8]
 8011a02:	6823      	ldr	r3, [r4, #0]
 8011a04:	199b      	adds	r3, r3, r6
 8011a06:	6023      	str	r3, [r4, #0]
 8011a08:	9b02      	ldr	r3, [sp, #8]
 8011a0a:	4463      	add	r3, ip
 8011a0c:	9302      	str	r3, [sp, #8]
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	1a9b      	subs	r3, r3, r2
 8011a12:	60bb      	str	r3, [r7, #8]
 8011a14:	d0a3      	beq.n	801195e <__ssprint_r+0x1a>
 8011a16:	2300      	movs	r3, #0
 8011a18:	9301      	str	r3, [sp, #4]
 8011a1a:	e7ae      	b.n	801197a <__ssprint_r+0x36>
 8011a1c:	002a      	movs	r2, r5
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	f7ff fc46 	bl	80112b0 <_realloc_r>
 8011a24:	1e06      	subs	r6, r0, #0
 8011a26:	d1d6      	bne.n	80119d6 <__ssprint_r+0x92>
 8011a28:	6921      	ldr	r1, [r4, #16]
 8011a2a:	9805      	ldr	r0, [sp, #20]
 8011a2c:	f7fa fe62 	bl	800c6f4 <_free_r>
 8011a30:	230c      	movs	r3, #12
 8011a32:	9a05      	ldr	r2, [sp, #20]
 8011a34:	2001      	movs	r0, #1
 8011a36:	6013      	str	r3, [r2, #0]
 8011a38:	89a2      	ldrh	r2, [r4, #12]
 8011a3a:	3334      	adds	r3, #52	; 0x34
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	81a3      	strh	r3, [r4, #12]
 8011a40:	2300      	movs	r3, #0
 8011a42:	4240      	negs	r0, r0
 8011a44:	60bb      	str	r3, [r7, #8]
 8011a46:	e78b      	b.n	8011960 <__ssprint_r+0x1c>
 8011a48:	fffffb7f 	.word	0xfffffb7f

08011a4c <_sungetc_r>:
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	0014      	movs	r4, r2
 8011a50:	1c4b      	adds	r3, r1, #1
 8011a52:	d103      	bne.n	8011a5c <_sungetc_r+0x10>
 8011a54:	2501      	movs	r5, #1
 8011a56:	426d      	negs	r5, r5
 8011a58:	0028      	movs	r0, r5
 8011a5a:	bd70      	pop	{r4, r5, r6, pc}
 8011a5c:	8993      	ldrh	r3, [r2, #12]
 8011a5e:	2220      	movs	r2, #32
 8011a60:	4393      	bics	r3, r2
 8011a62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011a64:	81a3      	strh	r3, [r4, #12]
 8011a66:	b2ce      	uxtb	r6, r1
 8011a68:	6863      	ldr	r3, [r4, #4]
 8011a6a:	b2cd      	uxtb	r5, r1
 8011a6c:	2a00      	cmp	r2, #0
 8011a6e:	d010      	beq.n	8011a92 <_sungetc_r+0x46>
 8011a70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011a72:	429a      	cmp	r2, r3
 8011a74:	dd07      	ble.n	8011a86 <_sungetc_r+0x3a>
 8011a76:	6823      	ldr	r3, [r4, #0]
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	6023      	str	r3, [r4, #0]
 8011a7c:	701e      	strb	r6, [r3, #0]
 8011a7e:	6863      	ldr	r3, [r4, #4]
 8011a80:	3301      	adds	r3, #1
 8011a82:	6063      	str	r3, [r4, #4]
 8011a84:	e7e8      	b.n	8011a58 <_sungetc_r+0xc>
 8011a86:	0021      	movs	r1, r4
 8011a88:	f000 ff1a 	bl	80128c0 <__submore>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d0f2      	beq.n	8011a76 <_sungetc_r+0x2a>
 8011a90:	e7e0      	b.n	8011a54 <_sungetc_r+0x8>
 8011a92:	6921      	ldr	r1, [r4, #16]
 8011a94:	6822      	ldr	r2, [r4, #0]
 8011a96:	2900      	cmp	r1, #0
 8011a98:	d007      	beq.n	8011aaa <_sungetc_r+0x5e>
 8011a9a:	4291      	cmp	r1, r2
 8011a9c:	d205      	bcs.n	8011aaa <_sungetc_r+0x5e>
 8011a9e:	1e51      	subs	r1, r2, #1
 8011aa0:	7808      	ldrb	r0, [r1, #0]
 8011aa2:	42a8      	cmp	r0, r5
 8011aa4:	d101      	bne.n	8011aaa <_sungetc_r+0x5e>
 8011aa6:	6021      	str	r1, [r4, #0]
 8011aa8:	e7ea      	b.n	8011a80 <_sungetc_r+0x34>
 8011aaa:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011aac:	0023      	movs	r3, r4
 8011aae:	3340      	adds	r3, #64	; 0x40
 8011ab0:	6323      	str	r3, [r4, #48]	; 0x30
 8011ab2:	2303      	movs	r3, #3
 8011ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8011ab6:	0023      	movs	r3, r4
 8011ab8:	3342      	adds	r3, #66	; 0x42
 8011aba:	63a2      	str	r2, [r4, #56]	; 0x38
 8011abc:	701e      	strb	r6, [r3, #0]
 8011abe:	6023      	str	r3, [r4, #0]
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	e7de      	b.n	8011a82 <_sungetc_r+0x36>

08011ac4 <__ssrefill_r>:
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	000c      	movs	r4, r1
 8011ac8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8011aca:	2900      	cmp	r1, #0
 8011acc:	d00e      	beq.n	8011aec <__ssrefill_r+0x28>
 8011ace:	0023      	movs	r3, r4
 8011ad0:	3340      	adds	r3, #64	; 0x40
 8011ad2:	4299      	cmp	r1, r3
 8011ad4:	d001      	beq.n	8011ada <__ssrefill_r+0x16>
 8011ad6:	f7fa fe0d 	bl	800c6f4 <_free_r>
 8011ada:	2000      	movs	r0, #0
 8011adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ade:	6320      	str	r0, [r4, #48]	; 0x30
 8011ae0:	6063      	str	r3, [r4, #4]
 8011ae2:	4283      	cmp	r3, r0
 8011ae4:	d002      	beq.n	8011aec <__ssrefill_r+0x28>
 8011ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	bd10      	pop	{r4, pc}
 8011aec:	6923      	ldr	r3, [r4, #16]
 8011aee:	2001      	movs	r0, #1
 8011af0:	6023      	str	r3, [r4, #0]
 8011af2:	2300      	movs	r3, #0
 8011af4:	89a2      	ldrh	r2, [r4, #12]
 8011af6:	6063      	str	r3, [r4, #4]
 8011af8:	3320      	adds	r3, #32
 8011afa:	4313      	orrs	r3, r2
 8011afc:	81a3      	strh	r3, [r4, #12]
 8011afe:	4240      	negs	r0, r0
 8011b00:	e7f3      	b.n	8011aea <__ssrefill_r+0x26>

08011b02 <_sfread_r>:
 8011b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b04:	0014      	movs	r4, r2
 8011b06:	435c      	muls	r4, r3
 8011b08:	b087      	sub	sp, #28
 8011b0a:	1e26      	subs	r6, r4, #0
 8011b0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b0e:	9005      	str	r0, [sp, #20]
 8011b10:	9101      	str	r1, [sp, #4]
 8011b12:	9202      	str	r2, [sp, #8]
 8011b14:	9303      	str	r3, [sp, #12]
 8011b16:	d11e      	bne.n	8011b56 <_sfread_r+0x54>
 8011b18:	0020      	movs	r0, r4
 8011b1a:	b007      	add	sp, #28
 8011b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b1e:	003a      	movs	r2, r7
 8011b20:	9801      	ldr	r0, [sp, #4]
 8011b22:	f7fa fd6c 	bl	800c5fe <memcpy>
 8011b26:	682b      	ldr	r3, [r5, #0]
 8011b28:	0029      	movs	r1, r5
 8011b2a:	19db      	adds	r3, r3, r7
 8011b2c:	602b      	str	r3, [r5, #0]
 8011b2e:	2300      	movs	r3, #0
 8011b30:	606b      	str	r3, [r5, #4]
 8011b32:	9b01      	ldr	r3, [sp, #4]
 8011b34:	9805      	ldr	r0, [sp, #20]
 8011b36:	19db      	adds	r3, r3, r7
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	1bf3      	subs	r3, r6, r7
 8011b3c:	9304      	str	r3, [sp, #16]
 8011b3e:	f7ff ffc1 	bl	8011ac4 <__ssrefill_r>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	d006      	beq.n	8011b54 <_sfread_r+0x52>
 8011b46:	193c      	adds	r4, r7, r4
 8011b48:	1ba0      	subs	r0, r4, r6
 8011b4a:	9902      	ldr	r1, [sp, #8]
 8011b4c:	f7ee faf6 	bl	800013c <__udivsi3>
 8011b50:	0004      	movs	r4, r0
 8011b52:	e7e1      	b.n	8011b18 <_sfread_r+0x16>
 8011b54:	9e04      	ldr	r6, [sp, #16]
 8011b56:	686f      	ldr	r7, [r5, #4]
 8011b58:	6829      	ldr	r1, [r5, #0]
 8011b5a:	42b7      	cmp	r7, r6
 8011b5c:	d3df      	bcc.n	8011b1e <_sfread_r+0x1c>
 8011b5e:	0032      	movs	r2, r6
 8011b60:	9801      	ldr	r0, [sp, #4]
 8011b62:	f7fa fd4c 	bl	800c5fe <memcpy>
 8011b66:	686b      	ldr	r3, [r5, #4]
 8011b68:	9c03      	ldr	r4, [sp, #12]
 8011b6a:	1b9b      	subs	r3, r3, r6
 8011b6c:	606b      	str	r3, [r5, #4]
 8011b6e:	682b      	ldr	r3, [r5, #0]
 8011b70:	199b      	adds	r3, r3, r6
 8011b72:	602b      	str	r3, [r5, #0]
 8011b74:	e7d0      	b.n	8011b18 <_sfread_r+0x16>

08011b76 <__sprint_r>:
 8011b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b78:	6893      	ldr	r3, [r2, #8]
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	9001      	str	r0, [sp, #4]
 8011b7e:	000d      	movs	r5, r1
 8011b80:	0014      	movs	r4, r2
 8011b82:	1e18      	subs	r0, r3, #0
 8011b84:	d018      	beq.n	8011bb8 <__sprint_r+0x42>
 8011b86:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011b88:	049b      	lsls	r3, r3, #18
 8011b8a:	d524      	bpl.n	8011bd6 <__sprint_r+0x60>
 8011b8c:	6817      	ldr	r7, [r2, #0]
 8011b8e:	2600      	movs	r6, #0
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	9302      	str	r3, [sp, #8]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	089b      	lsrs	r3, r3, #2
 8011b9a:	9303      	str	r3, [sp, #12]
 8011b9c:	9b03      	ldr	r3, [sp, #12]
 8011b9e:	42b3      	cmp	r3, r6
 8011ba0:	dc0e      	bgt.n	8011bc0 <__sprint_r+0x4a>
 8011ba2:	2203      	movs	r2, #3
 8011ba4:	9b00      	ldr	r3, [sp, #0]
 8011ba6:	68a0      	ldr	r0, [r4, #8]
 8011ba8:	4393      	bics	r3, r2
 8011baa:	1ac0      	subs	r0, r0, r3
 8011bac:	60a0      	str	r0, [r4, #8]
 8011bae:	3708      	adds	r7, #8
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d1ec      	bne.n	8011b8e <__sprint_r+0x18>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	60a3      	str	r3, [r4, #8]
 8011bb8:	2300      	movs	r3, #0
 8011bba:	6063      	str	r3, [r4, #4]
 8011bbc:	b005      	add	sp, #20
 8011bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bc0:	9902      	ldr	r1, [sp, #8]
 8011bc2:	00b3      	lsls	r3, r6, #2
 8011bc4:	58c9      	ldr	r1, [r1, r3]
 8011bc6:	002a      	movs	r2, r5
 8011bc8:	9801      	ldr	r0, [sp, #4]
 8011bca:	f000 ff59 	bl	8012a80 <_fputwc_r>
 8011bce:	1c43      	adds	r3, r0, #1
 8011bd0:	d0f0      	beq.n	8011bb4 <__sprint_r+0x3e>
 8011bd2:	3601      	adds	r6, #1
 8011bd4:	e7e2      	b.n	8011b9c <__sprint_r+0x26>
 8011bd6:	9801      	ldr	r0, [sp, #4]
 8011bd8:	f000 fd14 	bl	8012604 <__sfvwrite_r>
 8011bdc:	e7ea      	b.n	8011bb4 <__sprint_r+0x3e>
	...

08011be0 <_vfiprintf_r>:
 8011be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011be2:	b0c1      	sub	sp, #260	; 0x104
 8011be4:	001c      	movs	r4, r3
 8011be6:	001f      	movs	r7, r3
 8011be8:	9006      	str	r0, [sp, #24]
 8011bea:	9103      	str	r1, [sp, #12]
 8011bec:	9207      	str	r2, [sp, #28]
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d004      	beq.n	8011bfc <_vfiprintf_r+0x1c>
 8011bf2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d101      	bne.n	8011bfc <_vfiprintf_r+0x1c>
 8011bf8:	f7fa fad6 	bl	800c1a8 <__sinit>
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c00:	07db      	lsls	r3, r3, #31
 8011c02:	d407      	bmi.n	8011c14 <_vfiprintf_r+0x34>
 8011c04:	9b03      	ldr	r3, [sp, #12]
 8011c06:	899b      	ldrh	r3, [r3, #12]
 8011c08:	059b      	lsls	r3, r3, #22
 8011c0a:	d403      	bmi.n	8011c14 <_vfiprintf_r+0x34>
 8011c0c:	9b03      	ldr	r3, [sp, #12]
 8011c0e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c10:	f7fa fce8 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 8011c14:	9b03      	ldr	r3, [sp, #12]
 8011c16:	220c      	movs	r2, #12
 8011c18:	5e9a      	ldrsh	r2, [r3, r2]
 8011c1a:	2380      	movs	r3, #128	; 0x80
 8011c1c:	019b      	lsls	r3, r3, #6
 8011c1e:	421a      	tst	r2, r3
 8011c20:	d107      	bne.n	8011c32 <_vfiprintf_r+0x52>
 8011c22:	4313      	orrs	r3, r2
 8011c24:	9a03      	ldr	r2, [sp, #12]
 8011c26:	8193      	strh	r3, [r2, #12]
 8011c28:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011c2a:	4aa3      	ldr	r2, [pc, #652]	; (8011eb8 <_vfiprintf_r+0x2d8>)
 8011c2c:	4013      	ands	r3, r2
 8011c2e:	9a03      	ldr	r2, [sp, #12]
 8011c30:	6653      	str	r3, [r2, #100]	; 0x64
 8011c32:	9b03      	ldr	r3, [sp, #12]
 8011c34:	899b      	ldrh	r3, [r3, #12]
 8011c36:	071b      	lsls	r3, r3, #28
 8011c38:	d503      	bpl.n	8011c42 <_vfiprintf_r+0x62>
 8011c3a:	9b03      	ldr	r3, [sp, #12]
 8011c3c:	691b      	ldr	r3, [r3, #16]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d118      	bne.n	8011c74 <_vfiprintf_r+0x94>
 8011c42:	9903      	ldr	r1, [sp, #12]
 8011c44:	9806      	ldr	r0, [sp, #24]
 8011c46:	f000 fe79 	bl	801293c <__swsetup_r>
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d012      	beq.n	8011c74 <_vfiprintf_r+0x94>
 8011c4e:	9b03      	ldr	r3, [sp, #12]
 8011c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c52:	07db      	lsls	r3, r3, #31
 8011c54:	d505      	bpl.n	8011c62 <_vfiprintf_r+0x82>
 8011c56:	2301      	movs	r3, #1
 8011c58:	425b      	negs	r3, r3
 8011c5a:	9308      	str	r3, [sp, #32]
 8011c5c:	9808      	ldr	r0, [sp, #32]
 8011c5e:	b041      	add	sp, #260	; 0x104
 8011c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c62:	9b03      	ldr	r3, [sp, #12]
 8011c64:	899b      	ldrh	r3, [r3, #12]
 8011c66:	059b      	lsls	r3, r3, #22
 8011c68:	d4f5      	bmi.n	8011c56 <_vfiprintf_r+0x76>
 8011c6a:	9b03      	ldr	r3, [sp, #12]
 8011c6c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c6e:	f7fa fcba 	bl	800c5e6 <__retarget_lock_release_recursive>
 8011c72:	e7f0      	b.n	8011c56 <_vfiprintf_r+0x76>
 8011c74:	221a      	movs	r2, #26
 8011c76:	9b03      	ldr	r3, [sp, #12]
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	401a      	ands	r2, r3
 8011c7c:	2a0a      	cmp	r2, #10
 8011c7e:	d116      	bne.n	8011cae <_vfiprintf_r+0xce>
 8011c80:	9a03      	ldr	r2, [sp, #12]
 8011c82:	210e      	movs	r1, #14
 8011c84:	5e52      	ldrsh	r2, [r2, r1]
 8011c86:	2a00      	cmp	r2, #0
 8011c88:	db11      	blt.n	8011cae <_vfiprintf_r+0xce>
 8011c8a:	9a03      	ldr	r2, [sp, #12]
 8011c8c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011c8e:	07d2      	lsls	r2, r2, #31
 8011c90:	d405      	bmi.n	8011c9e <_vfiprintf_r+0xbe>
 8011c92:	059b      	lsls	r3, r3, #22
 8011c94:	d403      	bmi.n	8011c9e <_vfiprintf_r+0xbe>
 8011c96:	9b03      	ldr	r3, [sp, #12]
 8011c98:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011c9a:	f7fa fca4 	bl	800c5e6 <__retarget_lock_release_recursive>
 8011c9e:	0023      	movs	r3, r4
 8011ca0:	9a07      	ldr	r2, [sp, #28]
 8011ca2:	9903      	ldr	r1, [sp, #12]
 8011ca4:	9806      	ldr	r0, [sp, #24]
 8011ca6:	f000 fc69 	bl	801257c <__sbprintf>
 8011caa:	9008      	str	r0, [sp, #32]
 8011cac:	e7d6      	b.n	8011c5c <_vfiprintf_r+0x7c>
 8011cae:	2300      	movs	r3, #0
 8011cb0:	ad17      	add	r5, sp, #92	; 0x5c
 8011cb2:	9514      	str	r5, [sp, #80]	; 0x50
 8011cb4:	9316      	str	r3, [sp, #88]	; 0x58
 8011cb6:	9315      	str	r3, [sp, #84]	; 0x54
 8011cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8011cba:	930d      	str	r3, [sp, #52]	; 0x34
 8011cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8011cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cc0:	9308      	str	r3, [sp, #32]
 8011cc2:	9c07      	ldr	r4, [sp, #28]
 8011cc4:	7823      	ldrb	r3, [r4, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d002      	beq.n	8011cd0 <_vfiprintf_r+0xf0>
 8011cca:	2b25      	cmp	r3, #37	; 0x25
 8011ccc:	d000      	beq.n	8011cd0 <_vfiprintf_r+0xf0>
 8011cce:	e08d      	b.n	8011dec <_vfiprintf_r+0x20c>
 8011cd0:	9b07      	ldr	r3, [sp, #28]
 8011cd2:	1ae6      	subs	r6, r4, r3
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	d016      	beq.n	8011d06 <_vfiprintf_r+0x126>
 8011cd8:	602b      	str	r3, [r5, #0]
 8011cda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011cdc:	606e      	str	r6, [r5, #4]
 8011cde:	199b      	adds	r3, r3, r6
 8011ce0:	9316      	str	r3, [sp, #88]	; 0x58
 8011ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ce4:	3508      	adds	r5, #8
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	9315      	str	r3, [sp, #84]	; 0x54
 8011cea:	2b07      	cmp	r3, #7
 8011cec:	dd08      	ble.n	8011d00 <_vfiprintf_r+0x120>
 8011cee:	9903      	ldr	r1, [sp, #12]
 8011cf0:	9806      	ldr	r0, [sp, #24]
 8011cf2:	aa14      	add	r2, sp, #80	; 0x50
 8011cf4:	f7ff ff3f 	bl	8011b76 <__sprint_r>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d000      	beq.n	8011cfe <_vfiprintf_r+0x11e>
 8011cfc:	e3d9      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 8011cfe:	ad17      	add	r5, sp, #92	; 0x5c
 8011d00:	9b08      	ldr	r3, [sp, #32]
 8011d02:	199b      	adds	r3, r3, r6
 8011d04:	9308      	str	r3, [sp, #32]
 8011d06:	7823      	ldrb	r3, [r4, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d101      	bne.n	8011d10 <_vfiprintf_r+0x130>
 8011d0c:	f000 fbf6 	bl	80124fc <_vfiprintf_r+0x91c>
 8011d10:	2200      	movs	r2, #0
 8011d12:	a912      	add	r1, sp, #72	; 0x48
 8011d14:	70ca      	strb	r2, [r1, #3]
 8011d16:	2101      	movs	r1, #1
 8011d18:	1c63      	adds	r3, r4, #1
 8011d1a:	0014      	movs	r4, r2
 8011d1c:	4249      	negs	r1, r1
 8011d1e:	9105      	str	r1, [sp, #20]
 8011d20:	9209      	str	r2, [sp, #36]	; 0x24
 8011d22:	1c5a      	adds	r2, r3, #1
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	9207      	str	r2, [sp, #28]
 8011d28:	0018      	movs	r0, r3
 8011d2a:	3820      	subs	r0, #32
 8011d2c:	285a      	cmp	r0, #90	; 0x5a
 8011d2e:	d900      	bls.n	8011d32 <_vfiprintf_r+0x152>
 8011d30:	e362      	b.n	80123f8 <_vfiprintf_r+0x818>
 8011d32:	f7ee f9f9 	bl	8000128 <__gnu_thumb1_case_uhi>
 8011d36:	0078      	.short	0x0078
 8011d38:	03610361 	.word	0x03610361
 8011d3c:	03610081 	.word	0x03610081
 8011d40:	03610361 	.word	0x03610361
 8011d44:	0361005d 	.word	0x0361005d
 8011d48:	00830361 	.word	0x00830361
 8011d4c:	0361008b 	.word	0x0361008b
 8011d50:	008f0089 	.word	0x008f0089
 8011d54:	00ad0361 	.word	0x00ad0361
 8011d58:	00af00af 	.word	0x00af00af
 8011d5c:	00af00af 	.word	0x00af00af
 8011d60:	00af00af 	.word	0x00af00af
 8011d64:	00af00af 	.word	0x00af00af
 8011d68:	036100af 	.word	0x036100af
 8011d6c:	03610361 	.word	0x03610361
 8011d70:	03610361 	.word	0x03610361
 8011d74:	03610361 	.word	0x03610361
 8011d78:	03610361 	.word	0x03610361
 8011d7c:	00e600da 	.word	0x00e600da
 8011d80:	03610361 	.word	0x03610361
 8011d84:	03610361 	.word	0x03610361
 8011d88:	03610361 	.word	0x03610361
 8011d8c:	03610361 	.word	0x03610361
 8011d90:	03610361 	.word	0x03610361
 8011d94:	03610143 	.word	0x03610143
 8011d98:	03610361 	.word	0x03610361
 8011d9c:	03610182 	.word	0x03610182
 8011da0:	0361027c 	.word	0x0361027c
 8011da4:	02ae0361 	.word	0x02ae0361
 8011da8:	03610361 	.word	0x03610361
 8011dac:	03610361 	.word	0x03610361
 8011db0:	03610361 	.word	0x03610361
 8011db4:	03610361 	.word	0x03610361
 8011db8:	03610361 	.word	0x03610361
 8011dbc:	00e800da 	.word	0x00e800da
 8011dc0:	03610361 	.word	0x03610361
 8011dc4:	00c30361 	.word	0x00c30361
 8011dc8:	00d600e8 	.word	0x00d600e8
 8011dcc:	00cf0361 	.word	0x00cf0361
 8011dd0:	01260361 	.word	0x01260361
 8011dd4:	01740145 	.word	0x01740145
 8011dd8:	036100d6 	.word	0x036100d6
 8011ddc:	007f0182 	.word	0x007f0182
 8011de0:	0361027e 	.word	0x0361027e
 8011de4:	02cd0361 	.word	0x02cd0361
 8011de8:	007f0361 	.word	0x007f0361
 8011dec:	3401      	adds	r4, #1
 8011dee:	e769      	b.n	8011cc4 <_vfiprintf_r+0xe4>
 8011df0:	9806      	ldr	r0, [sp, #24]
 8011df2:	f7fe facd 	bl	8010390 <_localeconv_r>
 8011df6:	6843      	ldr	r3, [r0, #4]
 8011df8:	0018      	movs	r0, r3
 8011dfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8011dfc:	f7ee f982 	bl	8000104 <strlen>
 8011e00:	900e      	str	r0, [sp, #56]	; 0x38
 8011e02:	9806      	ldr	r0, [sp, #24]
 8011e04:	f7fe fac4 	bl	8010390 <_localeconv_r>
 8011e08:	6883      	ldr	r3, [r0, #8]
 8011e0a:	930d      	str	r3, [sp, #52]	; 0x34
 8011e0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d010      	beq.n	8011e34 <_vfiprintf_r+0x254>
 8011e12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00d      	beq.n	8011e34 <_vfiprintf_r+0x254>
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00a      	beq.n	8011e34 <_vfiprintf_r+0x254>
 8011e1e:	2380      	movs	r3, #128	; 0x80
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	431c      	orrs	r4, r3
 8011e24:	e006      	b.n	8011e34 <_vfiprintf_r+0x254>
 8011e26:	ab12      	add	r3, sp, #72	; 0x48
 8011e28:	78da      	ldrb	r2, [r3, #3]
 8011e2a:	3303      	adds	r3, #3
 8011e2c:	2a00      	cmp	r2, #0
 8011e2e:	d101      	bne.n	8011e34 <_vfiprintf_r+0x254>
 8011e30:	3220      	adds	r2, #32
 8011e32:	701a      	strb	r2, [r3, #0]
 8011e34:	9b07      	ldr	r3, [sp, #28]
 8011e36:	e774      	b.n	8011d22 <_vfiprintf_r+0x142>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e7f2      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011e3c:	cf08      	ldmia	r7!, {r3}
 8011e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	daf7      	bge.n	8011e34 <_vfiprintf_r+0x254>
 8011e44:	425b      	negs	r3, r3
 8011e46:	9309      	str	r3, [sp, #36]	; 0x24
 8011e48:	2304      	movs	r3, #4
 8011e4a:	e7ea      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011e4c:	222b      	movs	r2, #43	; 0x2b
 8011e4e:	ab12      	add	r3, sp, #72	; 0x48
 8011e50:	70da      	strb	r2, [r3, #3]
 8011e52:	e7ef      	b.n	8011e34 <_vfiprintf_r+0x254>
 8011e54:	9b07      	ldr	r3, [sp, #28]
 8011e56:	1c5a      	adds	r2, r3, #1
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e5c:	d00f      	beq.n	8011e7e <_vfiprintf_r+0x29e>
 8011e5e:	2100      	movs	r1, #0
 8011e60:	9105      	str	r1, [sp, #20]
 8011e62:	0019      	movs	r1, r3
 8011e64:	3930      	subs	r1, #48	; 0x30
 8011e66:	9207      	str	r2, [sp, #28]
 8011e68:	2909      	cmp	r1, #9
 8011e6a:	d900      	bls.n	8011e6e <_vfiprintf_r+0x28e>
 8011e6c:	e75c      	b.n	8011d28 <_vfiprintf_r+0x148>
 8011e6e:	200a      	movs	r0, #10
 8011e70:	9b05      	ldr	r3, [sp, #20]
 8011e72:	4343      	muls	r3, r0
 8011e74:	185b      	adds	r3, r3, r1
 8011e76:	9305      	str	r3, [sp, #20]
 8011e78:	7813      	ldrb	r3, [r2, #0]
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	e7f1      	b.n	8011e62 <_vfiprintf_r+0x282>
 8011e7e:	cf08      	ldmia	r7!, {r3}
 8011e80:	9305      	str	r3, [sp, #20]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	da02      	bge.n	8011e8c <_vfiprintf_r+0x2ac>
 8011e86:	2301      	movs	r3, #1
 8011e88:	425b      	negs	r3, r3
 8011e8a:	9305      	str	r3, [sp, #20]
 8011e8c:	9207      	str	r2, [sp, #28]
 8011e8e:	e7d1      	b.n	8011e34 <_vfiprintf_r+0x254>
 8011e90:	2380      	movs	r3, #128	; 0x80
 8011e92:	e7c6      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011e94:	2100      	movs	r1, #0
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	9109      	str	r1, [sp, #36]	; 0x24
 8011e9a:	200a      	movs	r0, #10
 8011e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e9e:	3b30      	subs	r3, #48	; 0x30
 8011ea0:	4341      	muls	r1, r0
 8011ea2:	185b      	adds	r3, r3, r1
 8011ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea6:	0013      	movs	r3, r2
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	3201      	adds	r2, #1
 8011eac:	0019      	movs	r1, r3
 8011eae:	3930      	subs	r1, #48	; 0x30
 8011eb0:	9207      	str	r2, [sp, #28]
 8011eb2:	2909      	cmp	r1, #9
 8011eb4:	d9f1      	bls.n	8011e9a <_vfiprintf_r+0x2ba>
 8011eb6:	e737      	b.n	8011d28 <_vfiprintf_r+0x148>
 8011eb8:	ffffdfff 	.word	0xffffdfff
 8011ebc:	9b07      	ldr	r3, [sp, #28]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	2b68      	cmp	r3, #104	; 0x68
 8011ec2:	d105      	bne.n	8011ed0 <_vfiprintf_r+0x2f0>
 8011ec4:	9b07      	ldr	r3, [sp, #28]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	9307      	str	r3, [sp, #28]
 8011eca:	2380      	movs	r3, #128	; 0x80
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	e7a8      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011ed0:	2340      	movs	r3, #64	; 0x40
 8011ed2:	e7a6      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011ed4:	9b07      	ldr	r3, [sp, #28]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	2b6c      	cmp	r3, #108	; 0x6c
 8011eda:	d104      	bne.n	8011ee6 <_vfiprintf_r+0x306>
 8011edc:	9b07      	ldr	r3, [sp, #28]
 8011ede:	3301      	adds	r3, #1
 8011ee0:	9307      	str	r3, [sp, #28]
 8011ee2:	2320      	movs	r3, #32
 8011ee4:	e79d      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011ee6:	2310      	movs	r3, #16
 8011ee8:	e79b      	b.n	8011e22 <_vfiprintf_r+0x242>
 8011eea:	003a      	movs	r2, r7
 8011eec:	ca08      	ldmia	r2!, {r3}
 8011eee:	ae27      	add	r6, sp, #156	; 0x9c
 8011ef0:	7033      	strb	r3, [r6, #0]
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	9204      	str	r2, [sp, #16]
 8011ef6:	aa12      	add	r2, sp, #72	; 0x48
 8011ef8:	70d3      	strb	r3, [r2, #3]
 8011efa:	2201      	movs	r2, #1
 8011efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8011efe:	9205      	str	r2, [sp, #20]
 8011f00:	e0b0      	b.n	8012064 <_vfiprintf_r+0x484>
 8011f02:	2310      	movs	r3, #16
 8011f04:	431c      	orrs	r4, r3
 8011f06:	06a3      	lsls	r3, r4, #26
 8011f08:	d52a      	bpl.n	8011f60 <_vfiprintf_r+0x380>
 8011f0a:	2307      	movs	r3, #7
 8011f0c:	3707      	adds	r7, #7
 8011f0e:	439f      	bics	r7, r3
 8011f10:	0039      	movs	r1, r7
 8011f12:	c90c      	ldmia	r1!, {r2, r3}
 8011f14:	9200      	str	r2, [sp, #0]
 8011f16:	9301      	str	r3, [sp, #4]
 8011f18:	9104      	str	r1, [sp, #16]
 8011f1a:	9a01      	ldr	r2, [sp, #4]
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	2a00      	cmp	r2, #0
 8011f20:	da09      	bge.n	8011f36 <_vfiprintf_r+0x356>
 8011f22:	9e00      	ldr	r6, [sp, #0]
 8011f24:	9f01      	ldr	r7, [sp, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	4271      	negs	r1, r6
 8011f2a:	41ba      	sbcs	r2, r7
 8011f2c:	9100      	str	r1, [sp, #0]
 8011f2e:	9201      	str	r2, [sp, #4]
 8011f30:	212d      	movs	r1, #45	; 0x2d
 8011f32:	aa12      	add	r2, sp, #72	; 0x48
 8011f34:	70d1      	strb	r1, [r2, #3]
 8011f36:	9901      	ldr	r1, [sp, #4]
 8011f38:	9a00      	ldr	r2, [sp, #0]
 8011f3a:	430a      	orrs	r2, r1
 8011f3c:	9905      	ldr	r1, [sp, #20]
 8011f3e:	3101      	adds	r1, #1
 8011f40:	d100      	bne.n	8011f44 <_vfiprintf_r+0x364>
 8011f42:	e2e9      	b.n	8012518 <_vfiprintf_r+0x938>
 8011f44:	2180      	movs	r1, #128	; 0x80
 8011f46:	0027      	movs	r7, r4
 8011f48:	438f      	bics	r7, r1
 8011f4a:	2a00      	cmp	r2, #0
 8011f4c:	d000      	beq.n	8011f50 <_vfiprintf_r+0x370>
 8011f4e:	e2e7      	b.n	8012520 <_vfiprintf_r+0x940>
 8011f50:	9a05      	ldr	r2, [sp, #20]
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	d100      	bne.n	8011f58 <_vfiprintf_r+0x378>
 8011f56:	e243      	b.n	80123e0 <_vfiprintf_r+0x800>
 8011f58:	2b01      	cmp	r3, #1
 8011f5a:	d000      	beq.n	8011f5e <_vfiprintf_r+0x37e>
 8011f5c:	e2e3      	b.n	8012526 <_vfiprintf_r+0x946>
 8011f5e:	e1e7      	b.n	8012330 <_vfiprintf_r+0x750>
 8011f60:	003a      	movs	r2, r7
 8011f62:	ca08      	ldmia	r2!, {r3}
 8011f64:	9204      	str	r2, [sp, #16]
 8011f66:	06e2      	lsls	r2, r4, #27
 8011f68:	d503      	bpl.n	8011f72 <_vfiprintf_r+0x392>
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	17db      	asrs	r3, r3, #31
 8011f6e:	9301      	str	r3, [sp, #4]
 8011f70:	e7d3      	b.n	8011f1a <_vfiprintf_r+0x33a>
 8011f72:	0662      	lsls	r2, r4, #25
 8011f74:	d501      	bpl.n	8011f7a <_vfiprintf_r+0x39a>
 8011f76:	b21b      	sxth	r3, r3
 8011f78:	e7f7      	b.n	8011f6a <_vfiprintf_r+0x38a>
 8011f7a:	05a2      	lsls	r2, r4, #22
 8011f7c:	d5f5      	bpl.n	8011f6a <_vfiprintf_r+0x38a>
 8011f7e:	b25b      	sxtb	r3, r3
 8011f80:	e7f3      	b.n	8011f6a <_vfiprintf_r+0x38a>
 8011f82:	1d3b      	adds	r3, r7, #4
 8011f84:	9304      	str	r3, [sp, #16]
 8011f86:	06a3      	lsls	r3, r4, #26
 8011f88:	d506      	bpl.n	8011f98 <_vfiprintf_r+0x3b8>
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	9a08      	ldr	r2, [sp, #32]
 8011f8e:	601a      	str	r2, [r3, #0]
 8011f90:	17d2      	asrs	r2, r2, #31
 8011f92:	605a      	str	r2, [r3, #4]
 8011f94:	9f04      	ldr	r7, [sp, #16]
 8011f96:	e694      	b.n	8011cc2 <_vfiprintf_r+0xe2>
 8011f98:	06e3      	lsls	r3, r4, #27
 8011f9a:	d503      	bpl.n	8011fa4 <_vfiprintf_r+0x3c4>
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	9a08      	ldr	r2, [sp, #32]
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	e7f7      	b.n	8011f94 <_vfiprintf_r+0x3b4>
 8011fa4:	0663      	lsls	r3, r4, #25
 8011fa6:	d503      	bpl.n	8011fb0 <_vfiprintf_r+0x3d0>
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	9a08      	ldr	r2, [sp, #32]
 8011fac:	801a      	strh	r2, [r3, #0]
 8011fae:	e7f1      	b.n	8011f94 <_vfiprintf_r+0x3b4>
 8011fb0:	05a4      	lsls	r4, r4, #22
 8011fb2:	d5f3      	bpl.n	8011f9c <_vfiprintf_r+0x3bc>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	9a08      	ldr	r2, [sp, #32]
 8011fb8:	701a      	strb	r2, [r3, #0]
 8011fba:	e7eb      	b.n	8011f94 <_vfiprintf_r+0x3b4>
 8011fbc:	2310      	movs	r3, #16
 8011fbe:	431c      	orrs	r4, r3
 8011fc0:	2320      	movs	r3, #32
 8011fc2:	0020      	movs	r0, r4
 8011fc4:	4018      	ands	r0, r3
 8011fc6:	421c      	tst	r4, r3
 8011fc8:	d00d      	beq.n	8011fe6 <_vfiprintf_r+0x406>
 8011fca:	3b19      	subs	r3, #25
 8011fcc:	3707      	adds	r7, #7
 8011fce:	439f      	bics	r7, r3
 8011fd0:	0039      	movs	r1, r7
 8011fd2:	c90c      	ldmia	r1!, {r2, r3}
 8011fd4:	9200      	str	r2, [sp, #0]
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	9104      	str	r1, [sp, #16]
 8011fda:	4bcc      	ldr	r3, [pc, #816]	; (801230c <_vfiprintf_r+0x72c>)
 8011fdc:	401c      	ands	r4, r3
 8011fde:	2300      	movs	r3, #0
 8011fe0:	2100      	movs	r1, #0
 8011fe2:	aa12      	add	r2, sp, #72	; 0x48
 8011fe4:	e7a6      	b.n	8011f34 <_vfiprintf_r+0x354>
 8011fe6:	003a      	movs	r2, r7
 8011fe8:	ca08      	ldmia	r2!, {r3}
 8011fea:	0021      	movs	r1, r4
 8011fec:	9204      	str	r2, [sp, #16]
 8011fee:	2210      	movs	r2, #16
 8011ff0:	4011      	ands	r1, r2
 8011ff2:	4214      	tst	r4, r2
 8011ff4:	d002      	beq.n	8011ffc <_vfiprintf_r+0x41c>
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	9001      	str	r0, [sp, #4]
 8011ffa:	e7ee      	b.n	8011fda <_vfiprintf_r+0x3fa>
 8011ffc:	2240      	movs	r2, #64	; 0x40
 8011ffe:	0020      	movs	r0, r4
 8012000:	4010      	ands	r0, r2
 8012002:	4214      	tst	r4, r2
 8012004:	d003      	beq.n	801200e <_vfiprintf_r+0x42e>
 8012006:	b29b      	uxth	r3, r3
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	9101      	str	r1, [sp, #4]
 801200c:	e7e5      	b.n	8011fda <_vfiprintf_r+0x3fa>
 801200e:	2280      	movs	r2, #128	; 0x80
 8012010:	0021      	movs	r1, r4
 8012012:	0092      	lsls	r2, r2, #2
 8012014:	4011      	ands	r1, r2
 8012016:	4214      	tst	r4, r2
 8012018:	d0f6      	beq.n	8012008 <_vfiprintf_r+0x428>
 801201a:	b2db      	uxtb	r3, r3
 801201c:	e7eb      	b.n	8011ff6 <_vfiprintf_r+0x416>
 801201e:	003b      	movs	r3, r7
 8012020:	cb04      	ldmia	r3!, {r2}
 8012022:	49bb      	ldr	r1, [pc, #748]	; (8012310 <_vfiprintf_r+0x730>)
 8012024:	9304      	str	r3, [sp, #16]
 8012026:	2300      	movs	r3, #0
 8012028:	9200      	str	r2, [sp, #0]
 801202a:	aa13      	add	r2, sp, #76	; 0x4c
 801202c:	8011      	strh	r1, [r2, #0]
 801202e:	4ab9      	ldr	r2, [pc, #740]	; (8012314 <_vfiprintf_r+0x734>)
 8012030:	9301      	str	r3, [sp, #4]
 8012032:	3302      	adds	r3, #2
 8012034:	431c      	orrs	r4, r3
 8012036:	920c      	str	r2, [sp, #48]	; 0x30
 8012038:	e7d2      	b.n	8011fe0 <_vfiprintf_r+0x400>
 801203a:	003b      	movs	r3, r7
 801203c:	2700      	movs	r7, #0
 801203e:	cb40      	ldmia	r3!, {r6}
 8012040:	9304      	str	r3, [sp, #16]
 8012042:	ab12      	add	r3, sp, #72	; 0x48
 8012044:	70df      	strb	r7, [r3, #3]
 8012046:	9b05      	ldr	r3, [sp, #20]
 8012048:	3301      	adds	r3, #1
 801204a:	d100      	bne.n	801204e <_vfiprintf_r+0x46e>
 801204c:	e0ea      	b.n	8012224 <_vfiprintf_r+0x644>
 801204e:	0039      	movs	r1, r7
 8012050:	0030      	movs	r0, r6
 8012052:	9a05      	ldr	r2, [sp, #20]
 8012054:	f7fe f9b4 	bl	80103c0 <memchr>
 8012058:	900b      	str	r0, [sp, #44]	; 0x2c
 801205a:	42b8      	cmp	r0, r7
 801205c:	d002      	beq.n	8012064 <_vfiprintf_r+0x484>
 801205e:	1b83      	subs	r3, r0, r6
 8012060:	9305      	str	r3, [sp, #20]
 8012062:	970b      	str	r7, [sp, #44]	; 0x2c
 8012064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012066:	9a05      	ldr	r2, [sp, #20]
 8012068:	930a      	str	r3, [sp, #40]	; 0x28
 801206a:	4293      	cmp	r3, r2
 801206c:	da00      	bge.n	8012070 <_vfiprintf_r+0x490>
 801206e:	920a      	str	r2, [sp, #40]	; 0x28
 8012070:	ab12      	add	r3, sp, #72	; 0x48
 8012072:	3303      	adds	r3, #3
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	1e5a      	subs	r2, r3, #1
 8012078:	4193      	sbcs	r3, r2
 801207a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801207c:	18d3      	adds	r3, r2, r3
 801207e:	930a      	str	r3, [sp, #40]	; 0x28
 8012080:	0022      	movs	r2, r4
 8012082:	2302      	movs	r3, #2
 8012084:	401a      	ands	r2, r3
 8012086:	9210      	str	r2, [sp, #64]	; 0x40
 8012088:	421c      	tst	r4, r3
 801208a:	d002      	beq.n	8012092 <_vfiprintf_r+0x4b2>
 801208c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801208e:	3302      	adds	r3, #2
 8012090:	930a      	str	r3, [sp, #40]	; 0x28
 8012092:	2384      	movs	r3, #132	; 0x84
 8012094:	0022      	movs	r2, r4
 8012096:	401a      	ands	r2, r3
 8012098:	9211      	str	r2, [sp, #68]	; 0x44
 801209a:	421c      	tst	r4, r3
 801209c:	d11e      	bne.n	80120dc <_vfiprintf_r+0x4fc>
 801209e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120a2:	1a9f      	subs	r7, r3, r2
 80120a4:	2f00      	cmp	r7, #0
 80120a6:	dd19      	ble.n	80120dc <_vfiprintf_r+0x4fc>
 80120a8:	0029      	movs	r1, r5
 80120aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120ac:	489a      	ldr	r0, [pc, #616]	; (8012318 <_vfiprintf_r+0x738>)
 80120ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120b0:	3301      	adds	r3, #1
 80120b2:	3108      	adds	r1, #8
 80120b4:	6028      	str	r0, [r5, #0]
 80120b6:	2f10      	cmp	r7, #16
 80120b8:	dd00      	ble.n	80120bc <_vfiprintf_r+0x4dc>
 80120ba:	e1a7      	b.n	801240c <_vfiprintf_r+0x82c>
 80120bc:	606f      	str	r7, [r5, #4]
 80120be:	18bf      	adds	r7, r7, r2
 80120c0:	000d      	movs	r5, r1
 80120c2:	9716      	str	r7, [sp, #88]	; 0x58
 80120c4:	9315      	str	r3, [sp, #84]	; 0x54
 80120c6:	2b07      	cmp	r3, #7
 80120c8:	dd08      	ble.n	80120dc <_vfiprintf_r+0x4fc>
 80120ca:	9903      	ldr	r1, [sp, #12]
 80120cc:	9806      	ldr	r0, [sp, #24]
 80120ce:	aa14      	add	r2, sp, #80	; 0x50
 80120d0:	f7ff fd51 	bl	8011b76 <__sprint_r>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d000      	beq.n	80120da <_vfiprintf_r+0x4fa>
 80120d8:	e1eb      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 80120da:	ad17      	add	r5, sp, #92	; 0x5c
 80120dc:	a912      	add	r1, sp, #72	; 0x48
 80120de:	78c8      	ldrb	r0, [r1, #3]
 80120e0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80120e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120e4:	3103      	adds	r1, #3
 80120e6:	2800      	cmp	r0, #0
 80120e8:	d012      	beq.n	8012110 <_vfiprintf_r+0x530>
 80120ea:	6029      	str	r1, [r5, #0]
 80120ec:	2101      	movs	r1, #1
 80120ee:	3301      	adds	r3, #1
 80120f0:	1852      	adds	r2, r2, r1
 80120f2:	6069      	str	r1, [r5, #4]
 80120f4:	9216      	str	r2, [sp, #88]	; 0x58
 80120f6:	9315      	str	r3, [sp, #84]	; 0x54
 80120f8:	3508      	adds	r5, #8
 80120fa:	2b07      	cmp	r3, #7
 80120fc:	dd08      	ble.n	8012110 <_vfiprintf_r+0x530>
 80120fe:	9903      	ldr	r1, [sp, #12]
 8012100:	9806      	ldr	r0, [sp, #24]
 8012102:	aa14      	add	r2, sp, #80	; 0x50
 8012104:	f7ff fd37 	bl	8011b76 <__sprint_r>
 8012108:	2800      	cmp	r0, #0
 801210a:	d000      	beq.n	801210e <_vfiprintf_r+0x52e>
 801210c:	e1d1      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 801210e:	ad17      	add	r5, sp, #92	; 0x5c
 8012110:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012112:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012116:	2900      	cmp	r1, #0
 8012118:	d013      	beq.n	8012142 <_vfiprintf_r+0x562>
 801211a:	a913      	add	r1, sp, #76	; 0x4c
 801211c:	6029      	str	r1, [r5, #0]
 801211e:	2102      	movs	r1, #2
 8012120:	3301      	adds	r3, #1
 8012122:	1852      	adds	r2, r2, r1
 8012124:	6069      	str	r1, [r5, #4]
 8012126:	9216      	str	r2, [sp, #88]	; 0x58
 8012128:	9315      	str	r3, [sp, #84]	; 0x54
 801212a:	3508      	adds	r5, #8
 801212c:	2b07      	cmp	r3, #7
 801212e:	dd08      	ble.n	8012142 <_vfiprintf_r+0x562>
 8012130:	9903      	ldr	r1, [sp, #12]
 8012132:	9806      	ldr	r0, [sp, #24]
 8012134:	aa14      	add	r2, sp, #80	; 0x50
 8012136:	f7ff fd1e 	bl	8011b76 <__sprint_r>
 801213a:	2800      	cmp	r0, #0
 801213c:	d000      	beq.n	8012140 <_vfiprintf_r+0x560>
 801213e:	e1b8      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 8012140:	ad17      	add	r5, sp, #92	; 0x5c
 8012142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012144:	2b80      	cmp	r3, #128	; 0x80
 8012146:	d11e      	bne.n	8012186 <_vfiprintf_r+0x5a6>
 8012148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801214a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801214c:	1a9f      	subs	r7, r3, r2
 801214e:	2f00      	cmp	r7, #0
 8012150:	dd19      	ble.n	8012186 <_vfiprintf_r+0x5a6>
 8012152:	0029      	movs	r1, r5
 8012154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012156:	4871      	ldr	r0, [pc, #452]	; (801231c <_vfiprintf_r+0x73c>)
 8012158:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801215a:	3301      	adds	r3, #1
 801215c:	3108      	adds	r1, #8
 801215e:	6028      	str	r0, [r5, #0]
 8012160:	2f10      	cmp	r7, #16
 8012162:	dd00      	ble.n	8012166 <_vfiprintf_r+0x586>
 8012164:	e164      	b.n	8012430 <_vfiprintf_r+0x850>
 8012166:	606f      	str	r7, [r5, #4]
 8012168:	18bf      	adds	r7, r7, r2
 801216a:	000d      	movs	r5, r1
 801216c:	9716      	str	r7, [sp, #88]	; 0x58
 801216e:	9315      	str	r3, [sp, #84]	; 0x54
 8012170:	2b07      	cmp	r3, #7
 8012172:	dd08      	ble.n	8012186 <_vfiprintf_r+0x5a6>
 8012174:	9903      	ldr	r1, [sp, #12]
 8012176:	9806      	ldr	r0, [sp, #24]
 8012178:	aa14      	add	r2, sp, #80	; 0x50
 801217a:	f7ff fcfc 	bl	8011b76 <__sprint_r>
 801217e:	2800      	cmp	r0, #0
 8012180:	d000      	beq.n	8012184 <_vfiprintf_r+0x5a4>
 8012182:	e196      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 8012184:	ad17      	add	r5, sp, #92	; 0x5c
 8012186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012188:	9a05      	ldr	r2, [sp, #20]
 801218a:	1a9f      	subs	r7, r3, r2
 801218c:	2f00      	cmp	r7, #0
 801218e:	dd19      	ble.n	80121c4 <_vfiprintf_r+0x5e4>
 8012190:	0029      	movs	r1, r5
 8012192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012194:	4861      	ldr	r0, [pc, #388]	; (801231c <_vfiprintf_r+0x73c>)
 8012196:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012198:	3301      	adds	r3, #1
 801219a:	3108      	adds	r1, #8
 801219c:	6028      	str	r0, [r5, #0]
 801219e:	2f10      	cmp	r7, #16
 80121a0:	dd00      	ble.n	80121a4 <_vfiprintf_r+0x5c4>
 80121a2:	e157      	b.n	8012454 <_vfiprintf_r+0x874>
 80121a4:	606f      	str	r7, [r5, #4]
 80121a6:	18bf      	adds	r7, r7, r2
 80121a8:	000d      	movs	r5, r1
 80121aa:	9716      	str	r7, [sp, #88]	; 0x58
 80121ac:	9315      	str	r3, [sp, #84]	; 0x54
 80121ae:	2b07      	cmp	r3, #7
 80121b0:	dd08      	ble.n	80121c4 <_vfiprintf_r+0x5e4>
 80121b2:	9903      	ldr	r1, [sp, #12]
 80121b4:	9806      	ldr	r0, [sp, #24]
 80121b6:	aa14      	add	r2, sp, #80	; 0x50
 80121b8:	f7ff fcdd 	bl	8011b76 <__sprint_r>
 80121bc:	2800      	cmp	r0, #0
 80121be:	d000      	beq.n	80121c2 <_vfiprintf_r+0x5e2>
 80121c0:	e177      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 80121c2:	ad17      	add	r5, sp, #92	; 0x5c
 80121c4:	9b05      	ldr	r3, [sp, #20]
 80121c6:	9a05      	ldr	r2, [sp, #20]
 80121c8:	606b      	str	r3, [r5, #4]
 80121ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121cc:	602e      	str	r6, [r5, #0]
 80121ce:	189b      	adds	r3, r3, r2
 80121d0:	9316      	str	r3, [sp, #88]	; 0x58
 80121d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121d4:	3508      	adds	r5, #8
 80121d6:	3301      	adds	r3, #1
 80121d8:	9315      	str	r3, [sp, #84]	; 0x54
 80121da:	2b07      	cmp	r3, #7
 80121dc:	dd08      	ble.n	80121f0 <_vfiprintf_r+0x610>
 80121de:	9903      	ldr	r1, [sp, #12]
 80121e0:	9806      	ldr	r0, [sp, #24]
 80121e2:	aa14      	add	r2, sp, #80	; 0x50
 80121e4:	f7ff fcc7 	bl	8011b76 <__sprint_r>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d000      	beq.n	80121ee <_vfiprintf_r+0x60e>
 80121ec:	e161      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 80121ee:	ad17      	add	r5, sp, #92	; 0x5c
 80121f0:	0764      	lsls	r4, r4, #29
 80121f2:	d500      	bpl.n	80121f6 <_vfiprintf_r+0x616>
 80121f4:	e140      	b.n	8012478 <_vfiprintf_r+0x898>
 80121f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121fa:	4293      	cmp	r3, r2
 80121fc:	da00      	bge.n	8012200 <_vfiprintf_r+0x620>
 80121fe:	0013      	movs	r3, r2
 8012200:	9a08      	ldr	r2, [sp, #32]
 8012202:	18d3      	adds	r3, r2, r3
 8012204:	9308      	str	r3, [sp, #32]
 8012206:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012208:	2b00      	cmp	r3, #0
 801220a:	d007      	beq.n	801221c <_vfiprintf_r+0x63c>
 801220c:	9903      	ldr	r1, [sp, #12]
 801220e:	9806      	ldr	r0, [sp, #24]
 8012210:	aa14      	add	r2, sp, #80	; 0x50
 8012212:	f7ff fcb0 	bl	8011b76 <__sprint_r>
 8012216:	2800      	cmp	r0, #0
 8012218:	d000      	beq.n	801221c <_vfiprintf_r+0x63c>
 801221a:	e14a      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 801221c:	2300      	movs	r3, #0
 801221e:	ad17      	add	r5, sp, #92	; 0x5c
 8012220:	9315      	str	r3, [sp, #84]	; 0x54
 8012222:	e6b7      	b.n	8011f94 <_vfiprintf_r+0x3b4>
 8012224:	0030      	movs	r0, r6
 8012226:	f7ed ff6d 	bl	8000104 <strlen>
 801222a:	9005      	str	r0, [sp, #20]
 801222c:	e719      	b.n	8012062 <_vfiprintf_r+0x482>
 801222e:	2310      	movs	r3, #16
 8012230:	431c      	orrs	r4, r3
 8012232:	2320      	movs	r3, #32
 8012234:	0020      	movs	r0, r4
 8012236:	4018      	ands	r0, r3
 8012238:	421c      	tst	r4, r3
 801223a:	d009      	beq.n	8012250 <_vfiprintf_r+0x670>
 801223c:	3b19      	subs	r3, #25
 801223e:	3707      	adds	r7, #7
 8012240:	439f      	bics	r7, r3
 8012242:	0039      	movs	r1, r7
 8012244:	c90c      	ldmia	r1!, {r2, r3}
 8012246:	9200      	str	r2, [sp, #0]
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	9104      	str	r1, [sp, #16]
 801224c:	2301      	movs	r3, #1
 801224e:	e6c7      	b.n	8011fe0 <_vfiprintf_r+0x400>
 8012250:	003b      	movs	r3, r7
 8012252:	cb04      	ldmia	r3!, {r2}
 8012254:	0021      	movs	r1, r4
 8012256:	9304      	str	r3, [sp, #16]
 8012258:	2310      	movs	r3, #16
 801225a:	4019      	ands	r1, r3
 801225c:	421c      	tst	r4, r3
 801225e:	d003      	beq.n	8012268 <_vfiprintf_r+0x688>
 8012260:	9200      	str	r2, [sp, #0]
 8012262:	9001      	str	r0, [sp, #4]
 8012264:	3b0f      	subs	r3, #15
 8012266:	e6bb      	b.n	8011fe0 <_vfiprintf_r+0x400>
 8012268:	2340      	movs	r3, #64	; 0x40
 801226a:	0020      	movs	r0, r4
 801226c:	4018      	ands	r0, r3
 801226e:	421c      	tst	r4, r3
 8012270:	d003      	beq.n	801227a <_vfiprintf_r+0x69a>
 8012272:	b293      	uxth	r3, r2
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	9101      	str	r1, [sp, #4]
 8012278:	e7e8      	b.n	801224c <_vfiprintf_r+0x66c>
 801227a:	2380      	movs	r3, #128	; 0x80
 801227c:	0021      	movs	r1, r4
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4019      	ands	r1, r3
 8012282:	421c      	tst	r4, r3
 8012284:	d003      	beq.n	801228e <_vfiprintf_r+0x6ae>
 8012286:	b2d3      	uxtb	r3, r2
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	9001      	str	r0, [sp, #4]
 801228c:	e7de      	b.n	801224c <_vfiprintf_r+0x66c>
 801228e:	9200      	str	r2, [sp, #0]
 8012290:	e7f1      	b.n	8012276 <_vfiprintf_r+0x696>
 8012292:	4a23      	ldr	r2, [pc, #140]	; (8012320 <_vfiprintf_r+0x740>)
 8012294:	0020      	movs	r0, r4
 8012296:	920c      	str	r2, [sp, #48]	; 0x30
 8012298:	2220      	movs	r2, #32
 801229a:	4010      	ands	r0, r2
 801229c:	4214      	tst	r4, r2
 801229e:	d019      	beq.n	80122d4 <_vfiprintf_r+0x6f4>
 80122a0:	3a19      	subs	r2, #25
 80122a2:	3707      	adds	r7, #7
 80122a4:	4397      	bics	r7, r2
 80122a6:	0038      	movs	r0, r7
 80122a8:	c806      	ldmia	r0!, {r1, r2}
 80122aa:	9100      	str	r1, [sp, #0]
 80122ac:	9201      	str	r2, [sp, #4]
 80122ae:	9004      	str	r0, [sp, #16]
 80122b0:	07e2      	lsls	r2, r4, #31
 80122b2:	d509      	bpl.n	80122c8 <_vfiprintf_r+0x6e8>
 80122b4:	9a00      	ldr	r2, [sp, #0]
 80122b6:	9901      	ldr	r1, [sp, #4]
 80122b8:	430a      	orrs	r2, r1
 80122ba:	d005      	beq.n	80122c8 <_vfiprintf_r+0x6e8>
 80122bc:	aa13      	add	r2, sp, #76	; 0x4c
 80122be:	2130      	movs	r1, #48	; 0x30
 80122c0:	7053      	strb	r3, [r2, #1]
 80122c2:	2302      	movs	r3, #2
 80122c4:	7011      	strb	r1, [r2, #0]
 80122c6:	431c      	orrs	r4, r3
 80122c8:	4b10      	ldr	r3, [pc, #64]	; (801230c <_vfiprintf_r+0x72c>)
 80122ca:	401c      	ands	r4, r3
 80122cc:	2302      	movs	r3, #2
 80122ce:	e687      	b.n	8011fe0 <_vfiprintf_r+0x400>
 80122d0:	4a10      	ldr	r2, [pc, #64]	; (8012314 <_vfiprintf_r+0x734>)
 80122d2:	e7df      	b.n	8012294 <_vfiprintf_r+0x6b4>
 80122d4:	0039      	movs	r1, r7
 80122d6:	c904      	ldmia	r1!, {r2}
 80122d8:	0026      	movs	r6, r4
 80122da:	9104      	str	r1, [sp, #16]
 80122dc:	2110      	movs	r1, #16
 80122de:	400e      	ands	r6, r1
 80122e0:	420c      	tst	r4, r1
 80122e2:	d002      	beq.n	80122ea <_vfiprintf_r+0x70a>
 80122e4:	9200      	str	r2, [sp, #0]
 80122e6:	9001      	str	r0, [sp, #4]
 80122e8:	e7e2      	b.n	80122b0 <_vfiprintf_r+0x6d0>
 80122ea:	2140      	movs	r1, #64	; 0x40
 80122ec:	0020      	movs	r0, r4
 80122ee:	4008      	ands	r0, r1
 80122f0:	420c      	tst	r4, r1
 80122f2:	d003      	beq.n	80122fc <_vfiprintf_r+0x71c>
 80122f4:	b292      	uxth	r2, r2
 80122f6:	9200      	str	r2, [sp, #0]
 80122f8:	9601      	str	r6, [sp, #4]
 80122fa:	e7d9      	b.n	80122b0 <_vfiprintf_r+0x6d0>
 80122fc:	2180      	movs	r1, #128	; 0x80
 80122fe:	0026      	movs	r6, r4
 8012300:	0089      	lsls	r1, r1, #2
 8012302:	400e      	ands	r6, r1
 8012304:	420c      	tst	r4, r1
 8012306:	d0f6      	beq.n	80122f6 <_vfiprintf_r+0x716>
 8012308:	b2d2      	uxtb	r2, r2
 801230a:	e7eb      	b.n	80122e4 <_vfiprintf_r+0x704>
 801230c:	fffffbff 	.word	0xfffffbff
 8012310:	00007830 	.word	0x00007830
 8012314:	08014dfc 	.word	0x08014dfc
 8012318:	08014f09 	.word	0x08014f09
 801231c:	08014f19 	.word	0x08014f19
 8012320:	08014e0d 	.word	0x08014e0d
 8012324:	9b01      	ldr	r3, [sp, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <_vfiprintf_r+0x75e>
 801232a:	9b00      	ldr	r3, [sp, #0]
 801232c:	2b09      	cmp	r3, #9
 801232e:	d806      	bhi.n	801233e <_vfiprintf_r+0x75e>
 8012330:	26b7      	movs	r6, #183	; 0xb7
 8012332:	ab12      	add	r3, sp, #72	; 0x48
 8012334:	18f6      	adds	r6, r6, r3
 8012336:	9b00      	ldr	r3, [sp, #0]
 8012338:	3330      	adds	r3, #48	; 0x30
 801233a:	7033      	strb	r3, [r6, #0]
 801233c:	e115      	b.n	801256a <_vfiprintf_r+0x98a>
 801233e:	2380      	movs	r3, #128	; 0x80
 8012340:	2400      	movs	r4, #0
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	403b      	ands	r3, r7
 8012346:	ae40      	add	r6, sp, #256	; 0x100
 8012348:	930a      	str	r3, [sp, #40]	; 0x28
 801234a:	220a      	movs	r2, #10
 801234c:	9800      	ldr	r0, [sp, #0]
 801234e:	9901      	ldr	r1, [sp, #4]
 8012350:	2300      	movs	r3, #0
 8012352:	f7ee f8a7 	bl	80004a4 <__aeabi_uldivmod>
 8012356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012358:	3e01      	subs	r6, #1
 801235a:	3230      	adds	r2, #48	; 0x30
 801235c:	900b      	str	r0, [sp, #44]	; 0x2c
 801235e:	9110      	str	r1, [sp, #64]	; 0x40
 8012360:	7032      	strb	r2, [r6, #0]
 8012362:	3401      	adds	r4, #1
 8012364:	2b00      	cmp	r3, #0
 8012366:	d01a      	beq.n	801239e <_vfiprintf_r+0x7be>
 8012368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	42a3      	cmp	r3, r4
 801236e:	d116      	bne.n	801239e <_vfiprintf_r+0x7be>
 8012370:	2cff      	cmp	r4, #255	; 0xff
 8012372:	d014      	beq.n	801239e <_vfiprintf_r+0x7be>
 8012374:	9b01      	ldr	r3, [sp, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d102      	bne.n	8012380 <_vfiprintf_r+0x7a0>
 801237a:	9b00      	ldr	r3, [sp, #0]
 801237c:	2b09      	cmp	r3, #9
 801237e:	d90e      	bls.n	801239e <_vfiprintf_r+0x7be>
 8012380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012382:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012384:	1af6      	subs	r6, r6, r3
 8012386:	001a      	movs	r2, r3
 8012388:	0030      	movs	r0, r6
 801238a:	f7fa f832 	bl	800c3f2 <strncpy>
 801238e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012390:	2400      	movs	r4, #0
 8012392:	785b      	ldrb	r3, [r3, #1]
 8012394:	1e5a      	subs	r2, r3, #1
 8012396:	4193      	sbcs	r3, r2
 8012398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801239a:	18d3      	adds	r3, r2, r3
 801239c:	930d      	str	r3, [sp, #52]	; 0x34
 801239e:	9b01      	ldr	r3, [sp, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d103      	bne.n	80123ac <_vfiprintf_r+0x7cc>
 80123a4:	9b00      	ldr	r3, [sp, #0]
 80123a6:	2b09      	cmp	r3, #9
 80123a8:	d800      	bhi.n	80123ac <_vfiprintf_r+0x7cc>
 80123aa:	e0de      	b.n	801256a <_vfiprintf_r+0x98a>
 80123ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ae:	9300      	str	r3, [sp, #0]
 80123b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123b2:	9301      	str	r3, [sp, #4]
 80123b4:	e7c9      	b.n	801234a <_vfiprintf_r+0x76a>
 80123b6:	200f      	movs	r0, #15
 80123b8:	9b00      	ldr	r3, [sp, #0]
 80123ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123bc:	4003      	ands	r3, r0
 80123be:	5cd3      	ldrb	r3, [r2, r3]
 80123c0:	3e01      	subs	r6, #1
 80123c2:	7033      	strb	r3, [r6, #0]
 80123c4:	9b01      	ldr	r3, [sp, #4]
 80123c6:	0719      	lsls	r1, r3, #28
 80123c8:	9b00      	ldr	r3, [sp, #0]
 80123ca:	091a      	lsrs	r2, r3, #4
 80123cc:	9b01      	ldr	r3, [sp, #4]
 80123ce:	4311      	orrs	r1, r2
 80123d0:	091b      	lsrs	r3, r3, #4
 80123d2:	9301      	str	r3, [sp, #4]
 80123d4:	000b      	movs	r3, r1
 80123d6:	9a01      	ldr	r2, [sp, #4]
 80123d8:	9100      	str	r1, [sp, #0]
 80123da:	4313      	orrs	r3, r2
 80123dc:	d1ec      	bne.n	80123b8 <_vfiprintf_r+0x7d8>
 80123de:	e0c4      	b.n	801256a <_vfiprintf_r+0x98a>
 80123e0:	ae40      	add	r6, sp, #256	; 0x100
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d000      	beq.n	80123e8 <_vfiprintf_r+0x808>
 80123e6:	e0c0      	b.n	801256a <_vfiprintf_r+0x98a>
 80123e8:	07e4      	lsls	r4, r4, #31
 80123ea:	d400      	bmi.n	80123ee <_vfiprintf_r+0x80e>
 80123ec:	e0bd      	b.n	801256a <_vfiprintf_r+0x98a>
 80123ee:	26b7      	movs	r6, #183	; 0xb7
 80123f0:	ab12      	add	r3, sp, #72	; 0x48
 80123f2:	18f6      	adds	r6, r6, r3
 80123f4:	2330      	movs	r3, #48	; 0x30
 80123f6:	e7a0      	b.n	801233a <_vfiprintf_r+0x75a>
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d100      	bne.n	80123fe <_vfiprintf_r+0x81e>
 80123fc:	e07e      	b.n	80124fc <_vfiprintf_r+0x91c>
 80123fe:	ae27      	add	r6, sp, #156	; 0x9c
 8012400:	7033      	strb	r3, [r6, #0]
 8012402:	2300      	movs	r3, #0
 8012404:	aa12      	add	r2, sp, #72	; 0x48
 8012406:	70d3      	strb	r3, [r2, #3]
 8012408:	9704      	str	r7, [sp, #16]
 801240a:	e576      	b.n	8011efa <_vfiprintf_r+0x31a>
 801240c:	2010      	movs	r0, #16
 801240e:	1812      	adds	r2, r2, r0
 8012410:	6068      	str	r0, [r5, #4]
 8012412:	9216      	str	r2, [sp, #88]	; 0x58
 8012414:	9315      	str	r3, [sp, #84]	; 0x54
 8012416:	2b07      	cmp	r3, #7
 8012418:	dd07      	ble.n	801242a <_vfiprintf_r+0x84a>
 801241a:	9903      	ldr	r1, [sp, #12]
 801241c:	9806      	ldr	r0, [sp, #24]
 801241e:	aa14      	add	r2, sp, #80	; 0x50
 8012420:	f7ff fba9 	bl	8011b76 <__sprint_r>
 8012424:	2800      	cmp	r0, #0
 8012426:	d144      	bne.n	80124b2 <_vfiprintf_r+0x8d2>
 8012428:	a917      	add	r1, sp, #92	; 0x5c
 801242a:	000d      	movs	r5, r1
 801242c:	3f10      	subs	r7, #16
 801242e:	e63b      	b.n	80120a8 <_vfiprintf_r+0x4c8>
 8012430:	2010      	movs	r0, #16
 8012432:	1812      	adds	r2, r2, r0
 8012434:	6068      	str	r0, [r5, #4]
 8012436:	9216      	str	r2, [sp, #88]	; 0x58
 8012438:	9315      	str	r3, [sp, #84]	; 0x54
 801243a:	2b07      	cmp	r3, #7
 801243c:	dd07      	ble.n	801244e <_vfiprintf_r+0x86e>
 801243e:	9903      	ldr	r1, [sp, #12]
 8012440:	9806      	ldr	r0, [sp, #24]
 8012442:	aa14      	add	r2, sp, #80	; 0x50
 8012444:	f7ff fb97 	bl	8011b76 <__sprint_r>
 8012448:	2800      	cmp	r0, #0
 801244a:	d132      	bne.n	80124b2 <_vfiprintf_r+0x8d2>
 801244c:	a917      	add	r1, sp, #92	; 0x5c
 801244e:	000d      	movs	r5, r1
 8012450:	3f10      	subs	r7, #16
 8012452:	e67e      	b.n	8012152 <_vfiprintf_r+0x572>
 8012454:	2010      	movs	r0, #16
 8012456:	1812      	adds	r2, r2, r0
 8012458:	6068      	str	r0, [r5, #4]
 801245a:	9216      	str	r2, [sp, #88]	; 0x58
 801245c:	9315      	str	r3, [sp, #84]	; 0x54
 801245e:	2b07      	cmp	r3, #7
 8012460:	dd07      	ble.n	8012472 <_vfiprintf_r+0x892>
 8012462:	9903      	ldr	r1, [sp, #12]
 8012464:	9806      	ldr	r0, [sp, #24]
 8012466:	aa14      	add	r2, sp, #80	; 0x50
 8012468:	f7ff fb85 	bl	8011b76 <__sprint_r>
 801246c:	2800      	cmp	r0, #0
 801246e:	d120      	bne.n	80124b2 <_vfiprintf_r+0x8d2>
 8012470:	a917      	add	r1, sp, #92	; 0x5c
 8012472:	000d      	movs	r5, r1
 8012474:	3f10      	subs	r7, #16
 8012476:	e68b      	b.n	8012190 <_vfiprintf_r+0x5b0>
 8012478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801247c:	2610      	movs	r6, #16
 801247e:	1a9c      	subs	r4, r3, r2
 8012480:	2c00      	cmp	r4, #0
 8012482:	dc00      	bgt.n	8012486 <_vfiprintf_r+0x8a6>
 8012484:	e6b7      	b.n	80121f6 <_vfiprintf_r+0x616>
 8012486:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012488:	4a3b      	ldr	r2, [pc, #236]	; (8012578 <_vfiprintf_r+0x998>)
 801248a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801248c:	3101      	adds	r1, #1
 801248e:	602a      	str	r2, [r5, #0]
 8012490:	2c10      	cmp	r4, #16
 8012492:	dc22      	bgt.n	80124da <_vfiprintf_r+0x8fa>
 8012494:	606c      	str	r4, [r5, #4]
 8012496:	18e4      	adds	r4, r4, r3
 8012498:	9416      	str	r4, [sp, #88]	; 0x58
 801249a:	9115      	str	r1, [sp, #84]	; 0x54
 801249c:	2907      	cmp	r1, #7
 801249e:	dc00      	bgt.n	80124a2 <_vfiprintf_r+0x8c2>
 80124a0:	e6a9      	b.n	80121f6 <_vfiprintf_r+0x616>
 80124a2:	9903      	ldr	r1, [sp, #12]
 80124a4:	9806      	ldr	r0, [sp, #24]
 80124a6:	aa14      	add	r2, sp, #80	; 0x50
 80124a8:	f7ff fb65 	bl	8011b76 <__sprint_r>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d100      	bne.n	80124b2 <_vfiprintf_r+0x8d2>
 80124b0:	e6a1      	b.n	80121f6 <_vfiprintf_r+0x616>
 80124b2:	9b03      	ldr	r3, [sp, #12]
 80124b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124b6:	07db      	lsls	r3, r3, #31
 80124b8:	d407      	bmi.n	80124ca <_vfiprintf_r+0x8ea>
 80124ba:	9b03      	ldr	r3, [sp, #12]
 80124bc:	899b      	ldrh	r3, [r3, #12]
 80124be:	059b      	lsls	r3, r3, #22
 80124c0:	d403      	bmi.n	80124ca <_vfiprintf_r+0x8ea>
 80124c2:	9b03      	ldr	r3, [sp, #12]
 80124c4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80124c6:	f7fa f88e 	bl	800c5e6 <__retarget_lock_release_recursive>
 80124ca:	9b03      	ldr	r3, [sp, #12]
 80124cc:	899b      	ldrh	r3, [r3, #12]
 80124ce:	065b      	lsls	r3, r3, #25
 80124d0:	d401      	bmi.n	80124d6 <_vfiprintf_r+0x8f6>
 80124d2:	f7ff fbc3 	bl	8011c5c <_vfiprintf_r+0x7c>
 80124d6:	f7ff fbbe 	bl	8011c56 <_vfiprintf_r+0x76>
 80124da:	3310      	adds	r3, #16
 80124dc:	606e      	str	r6, [r5, #4]
 80124de:	9316      	str	r3, [sp, #88]	; 0x58
 80124e0:	9115      	str	r1, [sp, #84]	; 0x54
 80124e2:	3508      	adds	r5, #8
 80124e4:	2907      	cmp	r1, #7
 80124e6:	dd07      	ble.n	80124f8 <_vfiprintf_r+0x918>
 80124e8:	9903      	ldr	r1, [sp, #12]
 80124ea:	9806      	ldr	r0, [sp, #24]
 80124ec:	aa14      	add	r2, sp, #80	; 0x50
 80124ee:	f7ff fb42 	bl	8011b76 <__sprint_r>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	d1dd      	bne.n	80124b2 <_vfiprintf_r+0x8d2>
 80124f6:	ad17      	add	r5, sp, #92	; 0x5c
 80124f8:	3c10      	subs	r4, #16
 80124fa:	e7c4      	b.n	8012486 <_vfiprintf_r+0x8a6>
 80124fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d102      	bne.n	8012508 <_vfiprintf_r+0x928>
 8012502:	2300      	movs	r3, #0
 8012504:	9315      	str	r3, [sp, #84]	; 0x54
 8012506:	e7d4      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 8012508:	9903      	ldr	r1, [sp, #12]
 801250a:	9806      	ldr	r0, [sp, #24]
 801250c:	aa14      	add	r2, sp, #80	; 0x50
 801250e:	f7ff fb32 	bl	8011b76 <__sprint_r>
 8012512:	2800      	cmp	r0, #0
 8012514:	d0f5      	beq.n	8012502 <_vfiprintf_r+0x922>
 8012516:	e7cc      	b.n	80124b2 <_vfiprintf_r+0x8d2>
 8012518:	0027      	movs	r7, r4
 801251a:	2a00      	cmp	r2, #0
 801251c:	d100      	bne.n	8012520 <_vfiprintf_r+0x940>
 801251e:	e51b      	b.n	8011f58 <_vfiprintf_r+0x378>
 8012520:	2b01      	cmp	r3, #1
 8012522:	d100      	bne.n	8012526 <_vfiprintf_r+0x946>
 8012524:	e6fe      	b.n	8012324 <_vfiprintf_r+0x744>
 8012526:	ae40      	add	r6, sp, #256	; 0x100
 8012528:	2b02      	cmp	r3, #2
 801252a:	d100      	bne.n	801252e <_vfiprintf_r+0x94e>
 801252c:	e743      	b.n	80123b6 <_vfiprintf_r+0x7d6>
 801252e:	2307      	movs	r3, #7
 8012530:	469c      	mov	ip, r3
 8012532:	4663      	mov	r3, ip
 8012534:	9900      	ldr	r1, [sp, #0]
 8012536:	0032      	movs	r2, r6
 8012538:	400b      	ands	r3, r1
 801253a:	9901      	ldr	r1, [sp, #4]
 801253c:	3e01      	subs	r6, #1
 801253e:	074c      	lsls	r4, r1, #29
 8012540:	9900      	ldr	r1, [sp, #0]
 8012542:	3330      	adds	r3, #48	; 0x30
 8012544:	08c8      	lsrs	r0, r1, #3
 8012546:	9901      	ldr	r1, [sp, #4]
 8012548:	4304      	orrs	r4, r0
 801254a:	08c9      	lsrs	r1, r1, #3
 801254c:	9101      	str	r1, [sp, #4]
 801254e:	0021      	movs	r1, r4
 8012550:	9801      	ldr	r0, [sp, #4]
 8012552:	7033      	strb	r3, [r6, #0]
 8012554:	9400      	str	r4, [sp, #0]
 8012556:	4301      	orrs	r1, r0
 8012558:	d1eb      	bne.n	8012532 <_vfiprintf_r+0x952>
 801255a:	07f9      	lsls	r1, r7, #31
 801255c:	d505      	bpl.n	801256a <_vfiprintf_r+0x98a>
 801255e:	2b30      	cmp	r3, #48	; 0x30
 8012560:	d003      	beq.n	801256a <_vfiprintf_r+0x98a>
 8012562:	2330      	movs	r3, #48	; 0x30
 8012564:	3e01      	subs	r6, #1
 8012566:	7033      	strb	r3, [r6, #0]
 8012568:	1e96      	subs	r6, r2, #2
 801256a:	9b05      	ldr	r3, [sp, #20]
 801256c:	003c      	movs	r4, r7
 801256e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012570:	ab40      	add	r3, sp, #256	; 0x100
 8012572:	1b9b      	subs	r3, r3, r6
 8012574:	9305      	str	r3, [sp, #20]
 8012576:	e575      	b.n	8012064 <_vfiprintf_r+0x484>
 8012578:	08014f09 	.word	0x08014f09

0801257c <__sbprintf>:
 801257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801257e:	0015      	movs	r5, r2
 8012580:	2202      	movs	r2, #2
 8012582:	4c1e      	ldr	r4, [pc, #120]	; (80125fc <__sbprintf+0x80>)
 8012584:	001f      	movs	r7, r3
 8012586:	898b      	ldrh	r3, [r1, #12]
 8012588:	44a5      	add	sp, r4
 801258a:	4393      	bics	r3, r2
 801258c:	466a      	mov	r2, sp
 801258e:	8193      	strh	r3, [r2, #12]
 8012590:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012592:	0006      	movs	r6, r0
 8012594:	9319      	str	r3, [sp, #100]	; 0x64
 8012596:	89cb      	ldrh	r3, [r1, #14]
 8012598:	a816      	add	r0, sp, #88	; 0x58
 801259a:	81d3      	strh	r3, [r2, #14]
 801259c:	69cb      	ldr	r3, [r1, #28]
 801259e:	000c      	movs	r4, r1
 80125a0:	9307      	str	r3, [sp, #28]
 80125a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80125a4:	9309      	str	r3, [sp, #36]	; 0x24
 80125a6:	ab1a      	add	r3, sp, #104	; 0x68
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	9304      	str	r3, [sp, #16]
 80125ac:	2380      	movs	r3, #128	; 0x80
 80125ae:	00db      	lsls	r3, r3, #3
 80125b0:	9302      	str	r3, [sp, #8]
 80125b2:	9305      	str	r3, [sp, #20]
 80125b4:	2300      	movs	r3, #0
 80125b6:	9306      	str	r3, [sp, #24]
 80125b8:	f7fa f812 	bl	800c5e0 <__retarget_lock_init_recursive>
 80125bc:	002a      	movs	r2, r5
 80125be:	003b      	movs	r3, r7
 80125c0:	4669      	mov	r1, sp
 80125c2:	0030      	movs	r0, r6
 80125c4:	f7ff fb0c 	bl	8011be0 <_vfiprintf_r>
 80125c8:	1e05      	subs	r5, r0, #0
 80125ca:	db07      	blt.n	80125dc <__sbprintf+0x60>
 80125cc:	4669      	mov	r1, sp
 80125ce:	0030      	movs	r0, r6
 80125d0:	f7fd fe7c 	bl	80102cc <_fflush_r>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	d001      	beq.n	80125dc <__sbprintf+0x60>
 80125d8:	2501      	movs	r5, #1
 80125da:	426d      	negs	r5, r5
 80125dc:	466b      	mov	r3, sp
 80125de:	899a      	ldrh	r2, [r3, #12]
 80125e0:	2340      	movs	r3, #64	; 0x40
 80125e2:	421a      	tst	r2, r3
 80125e4:	d002      	beq.n	80125ec <__sbprintf+0x70>
 80125e6:	89a2      	ldrh	r2, [r4, #12]
 80125e8:	4313      	orrs	r3, r2
 80125ea:	81a3      	strh	r3, [r4, #12]
 80125ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 80125ee:	f7f9 fff8 	bl	800c5e2 <__retarget_lock_close_recursive>
 80125f2:	0028      	movs	r0, r5
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <__sbprintf+0x84>)
 80125f6:	449d      	add	sp, r3
 80125f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80125fa:	46c0      	nop			; (mov r8, r8)
 80125fc:	fffffb94 	.word	0xfffffb94
 8012600:	0000046c 	.word	0x0000046c

08012604 <__sfvwrite_r>:
 8012604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012606:	6893      	ldr	r3, [r2, #8]
 8012608:	b087      	sub	sp, #28
 801260a:	000c      	movs	r4, r1
 801260c:	9002      	str	r0, [sp, #8]
 801260e:	9204      	str	r2, [sp, #16]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d102      	bne.n	801261a <__sfvwrite_r+0x16>
 8012614:	2000      	movs	r0, #0
 8012616:	b007      	add	sp, #28
 8012618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801261a:	898b      	ldrh	r3, [r1, #12]
 801261c:	071b      	lsls	r3, r3, #28
 801261e:	d557      	bpl.n	80126d0 <__sfvwrite_r+0xcc>
 8012620:	690b      	ldr	r3, [r1, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d054      	beq.n	80126d0 <__sfvwrite_r+0xcc>
 8012626:	9b04      	ldr	r3, [sp, #16]
 8012628:	2202      	movs	r2, #2
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	9301      	str	r3, [sp, #4]
 801262e:	89a3      	ldrh	r3, [r4, #12]
 8012630:	001f      	movs	r7, r3
 8012632:	4017      	ands	r7, r2
 8012634:	4213      	tst	r3, r2
 8012636:	d171      	bne.n	801271c <__sfvwrite_r+0x118>
 8012638:	2201      	movs	r2, #1
 801263a:	2101      	movs	r1, #1
 801263c:	401a      	ands	r2, r3
 801263e:	420b      	tst	r3, r1
 8012640:	d100      	bne.n	8012644 <__sfvwrite_r+0x40>
 8012642:	e0a5      	b.n	8012790 <__sfvwrite_r+0x18c>
 8012644:	0038      	movs	r0, r7
 8012646:	003e      	movs	r6, r7
 8012648:	9703      	str	r7, [sp, #12]
 801264a:	9b03      	ldr	r3, [sp, #12]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d100      	bne.n	8012652 <__sfvwrite_r+0x4e>
 8012650:	e10b      	b.n	801286a <__sfvwrite_r+0x266>
 8012652:	2800      	cmp	r0, #0
 8012654:	d10a      	bne.n	801266c <__sfvwrite_r+0x68>
 8012656:	001a      	movs	r2, r3
 8012658:	210a      	movs	r1, #10
 801265a:	0030      	movs	r0, r6
 801265c:	f7fd feb0 	bl	80103c0 <memchr>
 8012660:	9b03      	ldr	r3, [sp, #12]
 8012662:	1c5f      	adds	r7, r3, #1
 8012664:	2800      	cmp	r0, #0
 8012666:	d001      	beq.n	801266c <__sfvwrite_r+0x68>
 8012668:	3001      	adds	r0, #1
 801266a:	1b87      	subs	r7, r0, r6
 801266c:	9b03      	ldr	r3, [sp, #12]
 801266e:	9705      	str	r7, [sp, #20]
 8012670:	429f      	cmp	r7, r3
 8012672:	d900      	bls.n	8012676 <__sfvwrite_r+0x72>
 8012674:	9305      	str	r3, [sp, #20]
 8012676:	6820      	ldr	r0, [r4, #0]
 8012678:	6922      	ldr	r2, [r4, #16]
 801267a:	68a5      	ldr	r5, [r4, #8]
 801267c:	6963      	ldr	r3, [r4, #20]
 801267e:	4290      	cmp	r0, r2
 8012680:	d800      	bhi.n	8012684 <__sfvwrite_r+0x80>
 8012682:	e0fb      	b.n	801287c <__sfvwrite_r+0x278>
 8012684:	9a05      	ldr	r2, [sp, #20]
 8012686:	18ed      	adds	r5, r5, r3
 8012688:	42aa      	cmp	r2, r5
 801268a:	dc00      	bgt.n	801268e <__sfvwrite_r+0x8a>
 801268c:	e0f6      	b.n	801287c <__sfvwrite_r+0x278>
 801268e:	0031      	movs	r1, r6
 8012690:	002a      	movs	r2, r5
 8012692:	f000 fa1e 	bl	8012ad2 <memmove>
 8012696:	6823      	ldr	r3, [r4, #0]
 8012698:	0021      	movs	r1, r4
 801269a:	195b      	adds	r3, r3, r5
 801269c:	9802      	ldr	r0, [sp, #8]
 801269e:	6023      	str	r3, [r4, #0]
 80126a0:	f7fd fe14 	bl	80102cc <_fflush_r>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d16e      	bne.n	8012786 <__sfvwrite_r+0x182>
 80126a8:	2001      	movs	r0, #1
 80126aa:	1b7f      	subs	r7, r7, r5
 80126ac:	d105      	bne.n	80126ba <__sfvwrite_r+0xb6>
 80126ae:	0021      	movs	r1, r4
 80126b0:	9802      	ldr	r0, [sp, #8]
 80126b2:	f7fd fe0b 	bl	80102cc <_fflush_r>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	d165      	bne.n	8012786 <__sfvwrite_r+0x182>
 80126ba:	9b03      	ldr	r3, [sp, #12]
 80126bc:	9a04      	ldr	r2, [sp, #16]
 80126be:	1b5b      	subs	r3, r3, r5
 80126c0:	9303      	str	r3, [sp, #12]
 80126c2:	9b04      	ldr	r3, [sp, #16]
 80126c4:	1976      	adds	r6, r6, r5
 80126c6:	689b      	ldr	r3, [r3, #8]
 80126c8:	1b5b      	subs	r3, r3, r5
 80126ca:	6093      	str	r3, [r2, #8]
 80126cc:	d1bd      	bne.n	801264a <__sfvwrite_r+0x46>
 80126ce:	e7a1      	b.n	8012614 <__sfvwrite_r+0x10>
 80126d0:	0021      	movs	r1, r4
 80126d2:	9802      	ldr	r0, [sp, #8]
 80126d4:	f000 f932 	bl	801293c <__swsetup_r>
 80126d8:	2800      	cmp	r0, #0
 80126da:	d0a4      	beq.n	8012626 <__sfvwrite_r+0x22>
 80126dc:	2001      	movs	r0, #1
 80126de:	4240      	negs	r0, r0
 80126e0:	e799      	b.n	8012616 <__sfvwrite_r+0x12>
 80126e2:	9b01      	ldr	r3, [sp, #4]
 80126e4:	681e      	ldr	r6, [r3, #0]
 80126e6:	685d      	ldr	r5, [r3, #4]
 80126e8:	3308      	adds	r3, #8
 80126ea:	9301      	str	r3, [sp, #4]
 80126ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80126ee:	69e1      	ldr	r1, [r4, #28]
 80126f0:	2d00      	cmp	r5, #0
 80126f2:	d0f6      	beq.n	80126e2 <__sfvwrite_r+0xde>
 80126f4:	4a6e      	ldr	r2, [pc, #440]	; (80128b0 <__sfvwrite_r+0x2ac>)
 80126f6:	002b      	movs	r3, r5
 80126f8:	4295      	cmp	r5, r2
 80126fa:	d900      	bls.n	80126fe <__sfvwrite_r+0xfa>
 80126fc:	0013      	movs	r3, r2
 80126fe:	0032      	movs	r2, r6
 8012700:	9802      	ldr	r0, [sp, #8]
 8012702:	47b8      	blx	r7
 8012704:	2800      	cmp	r0, #0
 8012706:	dd3e      	ble.n	8012786 <__sfvwrite_r+0x182>
 8012708:	9b04      	ldr	r3, [sp, #16]
 801270a:	9a04      	ldr	r2, [sp, #16]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	1836      	adds	r6, r6, r0
 8012710:	1a1b      	subs	r3, r3, r0
 8012712:	1a2d      	subs	r5, r5, r0
 8012714:	6093      	str	r3, [r2, #8]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d1e8      	bne.n	80126ec <__sfvwrite_r+0xe8>
 801271a:	e77b      	b.n	8012614 <__sfvwrite_r+0x10>
 801271c:	2600      	movs	r6, #0
 801271e:	0035      	movs	r5, r6
 8012720:	e7e4      	b.n	80126ec <__sfvwrite_r+0xe8>
 8012722:	9b01      	ldr	r3, [sp, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	9303      	str	r3, [sp, #12]
 8012728:	9b01      	ldr	r3, [sp, #4]
 801272a:	685d      	ldr	r5, [r3, #4]
 801272c:	3308      	adds	r3, #8
 801272e:	9301      	str	r3, [sp, #4]
 8012730:	220c      	movs	r2, #12
 8012732:	5ea3      	ldrsh	r3, [r4, r2]
 8012734:	6820      	ldr	r0, [r4, #0]
 8012736:	68a6      	ldr	r6, [r4, #8]
 8012738:	2d00      	cmp	r5, #0
 801273a:	d0f2      	beq.n	8012722 <__sfvwrite_r+0x11e>
 801273c:	2180      	movs	r1, #128	; 0x80
 801273e:	0089      	lsls	r1, r1, #2
 8012740:	b29a      	uxth	r2, r3
 8012742:	420b      	tst	r3, r1
 8012744:	d062      	beq.n	801280c <__sfvwrite_r+0x208>
 8012746:	42ae      	cmp	r6, r5
 8012748:	d837      	bhi.n	80127ba <__sfvwrite_r+0x1b6>
 801274a:	2390      	movs	r3, #144	; 0x90
 801274c:	00db      	lsls	r3, r3, #3
 801274e:	421a      	tst	r2, r3
 8012750:	d033      	beq.n	80127ba <__sfvwrite_r+0x1b6>
 8012752:	6921      	ldr	r1, [r4, #16]
 8012754:	1a43      	subs	r3, r0, r1
 8012756:	2003      	movs	r0, #3
 8012758:	9305      	str	r3, [sp, #20]
 801275a:	6963      	ldr	r3, [r4, #20]
 801275c:	4343      	muls	r3, r0
 801275e:	0fdf      	lsrs	r7, r3, #31
 8012760:	18ff      	adds	r7, r7, r3
 8012762:	9b05      	ldr	r3, [sp, #20]
 8012764:	107f      	asrs	r7, r7, #1
 8012766:	3301      	adds	r3, #1
 8012768:	195b      	adds	r3, r3, r5
 801276a:	42bb      	cmp	r3, r7
 801276c:	d900      	bls.n	8012770 <__sfvwrite_r+0x16c>
 801276e:	001f      	movs	r7, r3
 8012770:	0552      	lsls	r2, r2, #21
 8012772:	d53c      	bpl.n	80127ee <__sfvwrite_r+0x1ea>
 8012774:	0039      	movs	r1, r7
 8012776:	9802      	ldr	r0, [sp, #8]
 8012778:	f7f8 fb02 	bl	800ad80 <_malloc_r>
 801277c:	1e06      	subs	r6, r0, #0
 801277e:	d10a      	bne.n	8012796 <__sfvwrite_r+0x192>
 8012780:	230c      	movs	r3, #12
 8012782:	9a02      	ldr	r2, [sp, #8]
 8012784:	6013      	str	r3, [r2, #0]
 8012786:	2340      	movs	r3, #64	; 0x40
 8012788:	89a2      	ldrh	r2, [r4, #12]
 801278a:	4313      	orrs	r3, r2
 801278c:	81a3      	strh	r3, [r4, #12]
 801278e:	e7a5      	b.n	80126dc <__sfvwrite_r+0xd8>
 8012790:	0015      	movs	r5, r2
 8012792:	9203      	str	r2, [sp, #12]
 8012794:	e7cc      	b.n	8012730 <__sfvwrite_r+0x12c>
 8012796:	9a05      	ldr	r2, [sp, #20]
 8012798:	6921      	ldr	r1, [r4, #16]
 801279a:	f7f9 ff30 	bl	800c5fe <memcpy>
 801279e:	89a2      	ldrh	r2, [r4, #12]
 80127a0:	4b44      	ldr	r3, [pc, #272]	; (80128b4 <__sfvwrite_r+0x2b0>)
 80127a2:	401a      	ands	r2, r3
 80127a4:	2380      	movs	r3, #128	; 0x80
 80127a6:	4313      	orrs	r3, r2
 80127a8:	81a3      	strh	r3, [r4, #12]
 80127aa:	9b05      	ldr	r3, [sp, #20]
 80127ac:	6126      	str	r6, [r4, #16]
 80127ae:	18f6      	adds	r6, r6, r3
 80127b0:	6026      	str	r6, [r4, #0]
 80127b2:	002e      	movs	r6, r5
 80127b4:	6167      	str	r7, [r4, #20]
 80127b6:	1aff      	subs	r7, r7, r3
 80127b8:	60a7      	str	r7, [r4, #8]
 80127ba:	002f      	movs	r7, r5
 80127bc:	42ae      	cmp	r6, r5
 80127be:	d900      	bls.n	80127c2 <__sfvwrite_r+0x1be>
 80127c0:	002e      	movs	r6, r5
 80127c2:	0032      	movs	r2, r6
 80127c4:	9903      	ldr	r1, [sp, #12]
 80127c6:	6820      	ldr	r0, [r4, #0]
 80127c8:	f000 f983 	bl	8012ad2 <memmove>
 80127cc:	68a3      	ldr	r3, [r4, #8]
 80127ce:	1b9b      	subs	r3, r3, r6
 80127d0:	60a3      	str	r3, [r4, #8]
 80127d2:	6823      	ldr	r3, [r4, #0]
 80127d4:	199b      	adds	r3, r3, r6
 80127d6:	6023      	str	r3, [r4, #0]
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	9a04      	ldr	r2, [sp, #16]
 80127dc:	19db      	adds	r3, r3, r7
 80127de:	9303      	str	r3, [sp, #12]
 80127e0:	9b04      	ldr	r3, [sp, #16]
 80127e2:	1bed      	subs	r5, r5, r7
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	1bdb      	subs	r3, r3, r7
 80127e8:	6093      	str	r3, [r2, #8]
 80127ea:	d1a1      	bne.n	8012730 <__sfvwrite_r+0x12c>
 80127ec:	e712      	b.n	8012614 <__sfvwrite_r+0x10>
 80127ee:	003a      	movs	r2, r7
 80127f0:	9802      	ldr	r0, [sp, #8]
 80127f2:	f7fe fd5d 	bl	80112b0 <_realloc_r>
 80127f6:	1e06      	subs	r6, r0, #0
 80127f8:	d1d7      	bne.n	80127aa <__sfvwrite_r+0x1a6>
 80127fa:	6921      	ldr	r1, [r4, #16]
 80127fc:	9802      	ldr	r0, [sp, #8]
 80127fe:	f7f9 ff79 	bl	800c6f4 <_free_r>
 8012802:	2280      	movs	r2, #128	; 0x80
 8012804:	89a3      	ldrh	r3, [r4, #12]
 8012806:	4393      	bics	r3, r2
 8012808:	81a3      	strh	r3, [r4, #12]
 801280a:	e7b9      	b.n	8012780 <__sfvwrite_r+0x17c>
 801280c:	6923      	ldr	r3, [r4, #16]
 801280e:	4283      	cmp	r3, r0
 8012810:	d302      	bcc.n	8012818 <__sfvwrite_r+0x214>
 8012812:	6967      	ldr	r7, [r4, #20]
 8012814:	42af      	cmp	r7, r5
 8012816:	d916      	bls.n	8012846 <__sfvwrite_r+0x242>
 8012818:	42ae      	cmp	r6, r5
 801281a:	d900      	bls.n	801281e <__sfvwrite_r+0x21a>
 801281c:	002e      	movs	r6, r5
 801281e:	0032      	movs	r2, r6
 8012820:	9903      	ldr	r1, [sp, #12]
 8012822:	f000 f956 	bl	8012ad2 <memmove>
 8012826:	68a3      	ldr	r3, [r4, #8]
 8012828:	6822      	ldr	r2, [r4, #0]
 801282a:	1b9b      	subs	r3, r3, r6
 801282c:	1992      	adds	r2, r2, r6
 801282e:	0037      	movs	r7, r6
 8012830:	60a3      	str	r3, [r4, #8]
 8012832:	6022      	str	r2, [r4, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d1cf      	bne.n	80127d8 <__sfvwrite_r+0x1d4>
 8012838:	0021      	movs	r1, r4
 801283a:	9802      	ldr	r0, [sp, #8]
 801283c:	f7fd fd46 	bl	80102cc <_fflush_r>
 8012840:	2800      	cmp	r0, #0
 8012842:	d0c9      	beq.n	80127d8 <__sfvwrite_r+0x1d4>
 8012844:	e79f      	b.n	8012786 <__sfvwrite_r+0x182>
 8012846:	4b1c      	ldr	r3, [pc, #112]	; (80128b8 <__sfvwrite_r+0x2b4>)
 8012848:	0028      	movs	r0, r5
 801284a:	429d      	cmp	r5, r3
 801284c:	d900      	bls.n	8012850 <__sfvwrite_r+0x24c>
 801284e:	481b      	ldr	r0, [pc, #108]	; (80128bc <__sfvwrite_r+0x2b8>)
 8012850:	0039      	movs	r1, r7
 8012852:	f7ed fcfd 	bl	8000250 <__divsi3>
 8012856:	003b      	movs	r3, r7
 8012858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801285a:	4343      	muls	r3, r0
 801285c:	9a03      	ldr	r2, [sp, #12]
 801285e:	69e1      	ldr	r1, [r4, #28]
 8012860:	9802      	ldr	r0, [sp, #8]
 8012862:	47b0      	blx	r6
 8012864:	1e07      	subs	r7, r0, #0
 8012866:	dcb7      	bgt.n	80127d8 <__sfvwrite_r+0x1d4>
 8012868:	e78d      	b.n	8012786 <__sfvwrite_r+0x182>
 801286a:	9b01      	ldr	r3, [sp, #4]
 801286c:	2000      	movs	r0, #0
 801286e:	681e      	ldr	r6, [r3, #0]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	9303      	str	r3, [sp, #12]
 8012874:	9b01      	ldr	r3, [sp, #4]
 8012876:	3308      	adds	r3, #8
 8012878:	9301      	str	r3, [sp, #4]
 801287a:	e6e6      	b.n	801264a <__sfvwrite_r+0x46>
 801287c:	9a05      	ldr	r2, [sp, #20]
 801287e:	4293      	cmp	r3, r2
 8012880:	dc08      	bgt.n	8012894 <__sfvwrite_r+0x290>
 8012882:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012884:	0032      	movs	r2, r6
 8012886:	69e1      	ldr	r1, [r4, #28]
 8012888:	9802      	ldr	r0, [sp, #8]
 801288a:	47a8      	blx	r5
 801288c:	1e05      	subs	r5, r0, #0
 801288e:	dd00      	ble.n	8012892 <__sfvwrite_r+0x28e>
 8012890:	e70a      	b.n	80126a8 <__sfvwrite_r+0xa4>
 8012892:	e778      	b.n	8012786 <__sfvwrite_r+0x182>
 8012894:	9a05      	ldr	r2, [sp, #20]
 8012896:	0031      	movs	r1, r6
 8012898:	f000 f91b 	bl	8012ad2 <memmove>
 801289c:	9a05      	ldr	r2, [sp, #20]
 801289e:	68a3      	ldr	r3, [r4, #8]
 80128a0:	0015      	movs	r5, r2
 80128a2:	1a9b      	subs	r3, r3, r2
 80128a4:	60a3      	str	r3, [r4, #8]
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	189b      	adds	r3, r3, r2
 80128aa:	6023      	str	r3, [r4, #0]
 80128ac:	e6fc      	b.n	80126a8 <__sfvwrite_r+0xa4>
 80128ae:	46c0      	nop			; (mov r8, r8)
 80128b0:	7ffffc00 	.word	0x7ffffc00
 80128b4:	fffffb7f 	.word	0xfffffb7f
 80128b8:	7ffffffe 	.word	0x7ffffffe
 80128bc:	7fffffff 	.word	0x7fffffff

080128c0 <__submore>:
 80128c0:	000b      	movs	r3, r1
 80128c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128c4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80128c6:	3340      	adds	r3, #64	; 0x40
 80128c8:	000c      	movs	r4, r1
 80128ca:	429d      	cmp	r5, r3
 80128cc:	d11c      	bne.n	8012908 <__submore+0x48>
 80128ce:	2680      	movs	r6, #128	; 0x80
 80128d0:	00f6      	lsls	r6, r6, #3
 80128d2:	0031      	movs	r1, r6
 80128d4:	f7f8 fa54 	bl	800ad80 <_malloc_r>
 80128d8:	2800      	cmp	r0, #0
 80128da:	d102      	bne.n	80128e2 <__submore+0x22>
 80128dc:	2001      	movs	r0, #1
 80128de:	4240      	negs	r0, r0
 80128e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80128e2:	0023      	movs	r3, r4
 80128e4:	6320      	str	r0, [r4, #48]	; 0x30
 80128e6:	6366      	str	r6, [r4, #52]	; 0x34
 80128e8:	3342      	adds	r3, #66	; 0x42
 80128ea:	781a      	ldrb	r2, [r3, #0]
 80128ec:	4b10      	ldr	r3, [pc, #64]	; (8012930 <__submore+0x70>)
 80128ee:	54c2      	strb	r2, [r0, r3]
 80128f0:	0023      	movs	r3, r4
 80128f2:	3341      	adds	r3, #65	; 0x41
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	4b0f      	ldr	r3, [pc, #60]	; (8012934 <__submore+0x74>)
 80128f8:	54c2      	strb	r2, [r0, r3]
 80128fa:	782a      	ldrb	r2, [r5, #0]
 80128fc:	4b0e      	ldr	r3, [pc, #56]	; (8012938 <__submore+0x78>)
 80128fe:	54c2      	strb	r2, [r0, r3]
 8012900:	18c0      	adds	r0, r0, r3
 8012902:	6020      	str	r0, [r4, #0]
 8012904:	2000      	movs	r0, #0
 8012906:	e7eb      	b.n	80128e0 <__submore+0x20>
 8012908:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801290a:	0029      	movs	r1, r5
 801290c:	0073      	lsls	r3, r6, #1
 801290e:	001a      	movs	r2, r3
 8012910:	9301      	str	r3, [sp, #4]
 8012912:	f7fe fccd 	bl	80112b0 <_realloc_r>
 8012916:	1e05      	subs	r5, r0, #0
 8012918:	d0e0      	beq.n	80128dc <__submore+0x1c>
 801291a:	1987      	adds	r7, r0, r6
 801291c:	0001      	movs	r1, r0
 801291e:	0032      	movs	r2, r6
 8012920:	0038      	movs	r0, r7
 8012922:	f7f9 fe6c 	bl	800c5fe <memcpy>
 8012926:	9b01      	ldr	r3, [sp, #4]
 8012928:	6027      	str	r7, [r4, #0]
 801292a:	6325      	str	r5, [r4, #48]	; 0x30
 801292c:	6363      	str	r3, [r4, #52]	; 0x34
 801292e:	e7e9      	b.n	8012904 <__submore+0x44>
 8012930:	000003ff 	.word	0x000003ff
 8012934:	000003fe 	.word	0x000003fe
 8012938:	000003fd 	.word	0x000003fd

0801293c <__swsetup_r>:
 801293c:	4b30      	ldr	r3, [pc, #192]	; (8012a00 <__swsetup_r+0xc4>)
 801293e:	b570      	push	{r4, r5, r6, lr}
 8012940:	0005      	movs	r5, r0
 8012942:	6818      	ldr	r0, [r3, #0]
 8012944:	000c      	movs	r4, r1
 8012946:	2800      	cmp	r0, #0
 8012948:	d004      	beq.n	8012954 <__swsetup_r+0x18>
 801294a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801294c:	2b00      	cmp	r3, #0
 801294e:	d101      	bne.n	8012954 <__swsetup_r+0x18>
 8012950:	f7f9 fc2a 	bl	800c1a8 <__sinit>
 8012954:	230c      	movs	r3, #12
 8012956:	5ee2      	ldrsh	r2, [r4, r3]
 8012958:	b293      	uxth	r3, r2
 801295a:	0711      	lsls	r1, r2, #28
 801295c:	d423      	bmi.n	80129a6 <__swsetup_r+0x6a>
 801295e:	06d9      	lsls	r1, r3, #27
 8012960:	d407      	bmi.n	8012972 <__swsetup_r+0x36>
 8012962:	2309      	movs	r3, #9
 8012964:	2001      	movs	r0, #1
 8012966:	602b      	str	r3, [r5, #0]
 8012968:	3337      	adds	r3, #55	; 0x37
 801296a:	4313      	orrs	r3, r2
 801296c:	81a3      	strh	r3, [r4, #12]
 801296e:	4240      	negs	r0, r0
 8012970:	bd70      	pop	{r4, r5, r6, pc}
 8012972:	075b      	lsls	r3, r3, #29
 8012974:	d513      	bpl.n	801299e <__swsetup_r+0x62>
 8012976:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012978:	2900      	cmp	r1, #0
 801297a:	d008      	beq.n	801298e <__swsetup_r+0x52>
 801297c:	0023      	movs	r3, r4
 801297e:	3340      	adds	r3, #64	; 0x40
 8012980:	4299      	cmp	r1, r3
 8012982:	d002      	beq.n	801298a <__swsetup_r+0x4e>
 8012984:	0028      	movs	r0, r5
 8012986:	f7f9 feb5 	bl	800c6f4 <_free_r>
 801298a:	2300      	movs	r3, #0
 801298c:	6323      	str	r3, [r4, #48]	; 0x30
 801298e:	2224      	movs	r2, #36	; 0x24
 8012990:	89a3      	ldrh	r3, [r4, #12]
 8012992:	4393      	bics	r3, r2
 8012994:	81a3      	strh	r3, [r4, #12]
 8012996:	2300      	movs	r3, #0
 8012998:	6063      	str	r3, [r4, #4]
 801299a:	6923      	ldr	r3, [r4, #16]
 801299c:	6023      	str	r3, [r4, #0]
 801299e:	2308      	movs	r3, #8
 80129a0:	89a2      	ldrh	r2, [r4, #12]
 80129a2:	4313      	orrs	r3, r2
 80129a4:	81a3      	strh	r3, [r4, #12]
 80129a6:	6923      	ldr	r3, [r4, #16]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d10b      	bne.n	80129c4 <__swsetup_r+0x88>
 80129ac:	21a0      	movs	r1, #160	; 0xa0
 80129ae:	2280      	movs	r2, #128	; 0x80
 80129b0:	89a3      	ldrh	r3, [r4, #12]
 80129b2:	0089      	lsls	r1, r1, #2
 80129b4:	0092      	lsls	r2, r2, #2
 80129b6:	400b      	ands	r3, r1
 80129b8:	4293      	cmp	r3, r2
 80129ba:	d003      	beq.n	80129c4 <__swsetup_r+0x88>
 80129bc:	0021      	movs	r1, r4
 80129be:	0028      	movs	r0, r5
 80129c0:	f000 f8e8 	bl	8012b94 <__smakebuf_r>
 80129c4:	220c      	movs	r2, #12
 80129c6:	5ea3      	ldrsh	r3, [r4, r2]
 80129c8:	2001      	movs	r0, #1
 80129ca:	001a      	movs	r2, r3
 80129cc:	b299      	uxth	r1, r3
 80129ce:	4002      	ands	r2, r0
 80129d0:	4203      	tst	r3, r0
 80129d2:	d00f      	beq.n	80129f4 <__swsetup_r+0xb8>
 80129d4:	2200      	movs	r2, #0
 80129d6:	60a2      	str	r2, [r4, #8]
 80129d8:	6962      	ldr	r2, [r4, #20]
 80129da:	4252      	negs	r2, r2
 80129dc:	61a2      	str	r2, [r4, #24]
 80129de:	2000      	movs	r0, #0
 80129e0:	6922      	ldr	r2, [r4, #16]
 80129e2:	4282      	cmp	r2, r0
 80129e4:	d1c4      	bne.n	8012970 <__swsetup_r+0x34>
 80129e6:	0609      	lsls	r1, r1, #24
 80129e8:	d5c2      	bpl.n	8012970 <__swsetup_r+0x34>
 80129ea:	2240      	movs	r2, #64	; 0x40
 80129ec:	4313      	orrs	r3, r2
 80129ee:	81a3      	strh	r3, [r4, #12]
 80129f0:	3801      	subs	r0, #1
 80129f2:	e7bd      	b.n	8012970 <__swsetup_r+0x34>
 80129f4:	0788      	lsls	r0, r1, #30
 80129f6:	d400      	bmi.n	80129fa <__swsetup_r+0xbe>
 80129f8:	6962      	ldr	r2, [r4, #20]
 80129fa:	60a2      	str	r2, [r4, #8]
 80129fc:	e7ef      	b.n	80129de <__swsetup_r+0xa2>
 80129fe:	46c0      	nop			; (mov r8, r8)
 8012a00:	200006d0 	.word	0x200006d0

08012a04 <__fputwc>:
 8012a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a06:	b085      	sub	sp, #20
 8012a08:	000e      	movs	r6, r1
 8012a0a:	0015      	movs	r5, r2
 8012a0c:	9001      	str	r0, [sp, #4]
 8012a0e:	f7f9 fd55 	bl	800c4bc <__locale_mb_cur_max>
 8012a12:	0004      	movs	r4, r0
 8012a14:	2801      	cmp	r0, #1
 8012a16:	d119      	bne.n	8012a4c <__fputwc+0x48>
 8012a18:	1e73      	subs	r3, r6, #1
 8012a1a:	2bfe      	cmp	r3, #254	; 0xfe
 8012a1c:	d816      	bhi.n	8012a4c <__fputwc+0x48>
 8012a1e:	ab02      	add	r3, sp, #8
 8012a20:	711e      	strb	r6, [r3, #4]
 8012a22:	2700      	movs	r7, #0
 8012a24:	42a7      	cmp	r7, r4
 8012a26:	d020      	beq.n	8012a6a <__fputwc+0x66>
 8012a28:	ab03      	add	r3, sp, #12
 8012a2a:	5dd9      	ldrb	r1, [r3, r7]
 8012a2c:	68ab      	ldr	r3, [r5, #8]
 8012a2e:	3b01      	subs	r3, #1
 8012a30:	60ab      	str	r3, [r5, #8]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	da04      	bge.n	8012a40 <__fputwc+0x3c>
 8012a36:	69aa      	ldr	r2, [r5, #24]
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	db19      	blt.n	8012a70 <__fputwc+0x6c>
 8012a3c:	290a      	cmp	r1, #10
 8012a3e:	d017      	beq.n	8012a70 <__fputwc+0x6c>
 8012a40:	682b      	ldr	r3, [r5, #0]
 8012a42:	1c5a      	adds	r2, r3, #1
 8012a44:	602a      	str	r2, [r5, #0]
 8012a46:	7019      	strb	r1, [r3, #0]
 8012a48:	3701      	adds	r7, #1
 8012a4a:	e7eb      	b.n	8012a24 <__fputwc+0x20>
 8012a4c:	002b      	movs	r3, r5
 8012a4e:	0032      	movs	r2, r6
 8012a50:	9801      	ldr	r0, [sp, #4]
 8012a52:	335c      	adds	r3, #92	; 0x5c
 8012a54:	a903      	add	r1, sp, #12
 8012a56:	f000 f857 	bl	8012b08 <_wcrtomb_r>
 8012a5a:	0004      	movs	r4, r0
 8012a5c:	1c43      	adds	r3, r0, #1
 8012a5e:	d1e0      	bne.n	8012a22 <__fputwc+0x1e>
 8012a60:	2340      	movs	r3, #64	; 0x40
 8012a62:	0006      	movs	r6, r0
 8012a64:	89aa      	ldrh	r2, [r5, #12]
 8012a66:	4313      	orrs	r3, r2
 8012a68:	81ab      	strh	r3, [r5, #12]
 8012a6a:	0030      	movs	r0, r6
 8012a6c:	b005      	add	sp, #20
 8012a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a70:	002a      	movs	r2, r5
 8012a72:	9801      	ldr	r0, [sp, #4]
 8012a74:	f000 f8cc 	bl	8012c10 <__swbuf_r>
 8012a78:	1c43      	adds	r3, r0, #1
 8012a7a:	d1e5      	bne.n	8012a48 <__fputwc+0x44>
 8012a7c:	0006      	movs	r6, r0
 8012a7e:	e7f4      	b.n	8012a6a <__fputwc+0x66>

08012a80 <_fputwc_r>:
 8012a80:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012a82:	b570      	push	{r4, r5, r6, lr}
 8012a84:	0005      	movs	r5, r0
 8012a86:	000e      	movs	r6, r1
 8012a88:	0014      	movs	r4, r2
 8012a8a:	07db      	lsls	r3, r3, #31
 8012a8c:	d405      	bmi.n	8012a9a <_fputwc_r+0x1a>
 8012a8e:	8993      	ldrh	r3, [r2, #12]
 8012a90:	059b      	lsls	r3, r3, #22
 8012a92:	d402      	bmi.n	8012a9a <_fputwc_r+0x1a>
 8012a94:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012a96:	f7f9 fda5 	bl	800c5e4 <__retarget_lock_acquire_recursive>
 8012a9a:	230c      	movs	r3, #12
 8012a9c:	5ee2      	ldrsh	r2, [r4, r3]
 8012a9e:	2380      	movs	r3, #128	; 0x80
 8012aa0:	019b      	lsls	r3, r3, #6
 8012aa2:	421a      	tst	r2, r3
 8012aa4:	d104      	bne.n	8012ab0 <_fputwc_r+0x30>
 8012aa6:	431a      	orrs	r2, r3
 8012aa8:	81a2      	strh	r2, [r4, #12]
 8012aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012aac:	4313      	orrs	r3, r2
 8012aae:	6663      	str	r3, [r4, #100]	; 0x64
 8012ab0:	0028      	movs	r0, r5
 8012ab2:	0022      	movs	r2, r4
 8012ab4:	0031      	movs	r1, r6
 8012ab6:	f7ff ffa5 	bl	8012a04 <__fputwc>
 8012aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012abc:	0005      	movs	r5, r0
 8012abe:	07db      	lsls	r3, r3, #31
 8012ac0:	d405      	bmi.n	8012ace <_fputwc_r+0x4e>
 8012ac2:	89a3      	ldrh	r3, [r4, #12]
 8012ac4:	059b      	lsls	r3, r3, #22
 8012ac6:	d402      	bmi.n	8012ace <_fputwc_r+0x4e>
 8012ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aca:	f7f9 fd8c 	bl	800c5e6 <__retarget_lock_release_recursive>
 8012ace:	0028      	movs	r0, r5
 8012ad0:	bd70      	pop	{r4, r5, r6, pc}

08012ad2 <memmove>:
 8012ad2:	b510      	push	{r4, lr}
 8012ad4:	4288      	cmp	r0, r1
 8012ad6:	d902      	bls.n	8012ade <memmove+0xc>
 8012ad8:	188b      	adds	r3, r1, r2
 8012ada:	4298      	cmp	r0, r3
 8012adc:	d303      	bcc.n	8012ae6 <memmove+0x14>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e007      	b.n	8012af2 <memmove+0x20>
 8012ae2:	5c8b      	ldrb	r3, [r1, r2]
 8012ae4:	5483      	strb	r3, [r0, r2]
 8012ae6:	3a01      	subs	r2, #1
 8012ae8:	d2fb      	bcs.n	8012ae2 <memmove+0x10>
 8012aea:	bd10      	pop	{r4, pc}
 8012aec:	5ccc      	ldrb	r4, [r1, r3]
 8012aee:	54c4      	strb	r4, [r0, r3]
 8012af0:	3301      	adds	r3, #1
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d1fa      	bne.n	8012aec <memmove+0x1a>
 8012af6:	e7f8      	b.n	8012aea <memmove+0x18>

08012af8 <abort>:
 8012af8:	2006      	movs	r0, #6
 8012afa:	b510      	push	{r4, lr}
 8012afc:	f000 f906 	bl	8012d0c <raise>
 8012b00:	2001      	movs	r0, #1
 8012b02:	f7f1 fb13 	bl	800412c <_exit>
	...

08012b08 <_wcrtomb_r>:
 8012b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012b0a:	001d      	movs	r5, r3
 8012b0c:	4b09      	ldr	r3, [pc, #36]	; (8012b34 <_wcrtomb_r+0x2c>)
 8012b0e:	0004      	movs	r4, r0
 8012b10:	33e0      	adds	r3, #224	; 0xe0
 8012b12:	681e      	ldr	r6, [r3, #0]
 8012b14:	002b      	movs	r3, r5
 8012b16:	2900      	cmp	r1, #0
 8012b18:	d101      	bne.n	8012b1e <_wcrtomb_r+0x16>
 8012b1a:	000a      	movs	r2, r1
 8012b1c:	a901      	add	r1, sp, #4
 8012b1e:	0020      	movs	r0, r4
 8012b20:	47b0      	blx	r6
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d103      	bne.n	8012b2e <_wcrtomb_r+0x26>
 8012b26:	2300      	movs	r3, #0
 8012b28:	602b      	str	r3, [r5, #0]
 8012b2a:	338a      	adds	r3, #138	; 0x8a
 8012b2c:	6023      	str	r3, [r4, #0]
 8012b2e:	b004      	add	sp, #16
 8012b30:	bd70      	pop	{r4, r5, r6, pc}
 8012b32:	46c0      	nop			; (mov r8, r8)
 8012b34:	20000444 	.word	0x20000444

08012b38 <__swhatbuf_r>:
 8012b38:	b570      	push	{r4, r5, r6, lr}
 8012b3a:	000e      	movs	r6, r1
 8012b3c:	001d      	movs	r5, r3
 8012b3e:	230e      	movs	r3, #14
 8012b40:	5ec9      	ldrsh	r1, [r1, r3]
 8012b42:	0014      	movs	r4, r2
 8012b44:	b096      	sub	sp, #88	; 0x58
 8012b46:	2900      	cmp	r1, #0
 8012b48:	da09      	bge.n	8012b5e <__swhatbuf_r+0x26>
 8012b4a:	89b2      	ldrh	r2, [r6, #12]
 8012b4c:	2380      	movs	r3, #128	; 0x80
 8012b4e:	0011      	movs	r1, r2
 8012b50:	4019      	ands	r1, r3
 8012b52:	421a      	tst	r2, r3
 8012b54:	d018      	beq.n	8012b88 <__swhatbuf_r+0x50>
 8012b56:	2100      	movs	r1, #0
 8012b58:	3b40      	subs	r3, #64	; 0x40
 8012b5a:	0008      	movs	r0, r1
 8012b5c:	e010      	b.n	8012b80 <__swhatbuf_r+0x48>
 8012b5e:	466a      	mov	r2, sp
 8012b60:	f000 f8de 	bl	8012d20 <_fstat_r>
 8012b64:	2800      	cmp	r0, #0
 8012b66:	dbf0      	blt.n	8012b4a <__swhatbuf_r+0x12>
 8012b68:	23f0      	movs	r3, #240	; 0xf0
 8012b6a:	9901      	ldr	r1, [sp, #4]
 8012b6c:	021b      	lsls	r3, r3, #8
 8012b6e:	4019      	ands	r1, r3
 8012b70:	4b07      	ldr	r3, [pc, #28]	; (8012b90 <__swhatbuf_r+0x58>)
 8012b72:	2080      	movs	r0, #128	; 0x80
 8012b74:	18c9      	adds	r1, r1, r3
 8012b76:	424b      	negs	r3, r1
 8012b78:	4159      	adcs	r1, r3
 8012b7a:	2380      	movs	r3, #128	; 0x80
 8012b7c:	0100      	lsls	r0, r0, #4
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	6029      	str	r1, [r5, #0]
 8012b82:	6023      	str	r3, [r4, #0]
 8012b84:	b016      	add	sp, #88	; 0x58
 8012b86:	bd70      	pop	{r4, r5, r6, pc}
 8012b88:	2380      	movs	r3, #128	; 0x80
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	e7e5      	b.n	8012b5a <__swhatbuf_r+0x22>
 8012b8e:	46c0      	nop			; (mov r8, r8)
 8012b90:	ffffe000 	.word	0xffffe000

08012b94 <__smakebuf_r>:
 8012b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b96:	2602      	movs	r6, #2
 8012b98:	898b      	ldrh	r3, [r1, #12]
 8012b9a:	0005      	movs	r5, r0
 8012b9c:	000c      	movs	r4, r1
 8012b9e:	4233      	tst	r3, r6
 8012ba0:	d006      	beq.n	8012bb0 <__smakebuf_r+0x1c>
 8012ba2:	0023      	movs	r3, r4
 8012ba4:	3343      	adds	r3, #67	; 0x43
 8012ba6:	6023      	str	r3, [r4, #0]
 8012ba8:	6123      	str	r3, [r4, #16]
 8012baa:	2301      	movs	r3, #1
 8012bac:	6163      	str	r3, [r4, #20]
 8012bae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012bb0:	466a      	mov	r2, sp
 8012bb2:	ab01      	add	r3, sp, #4
 8012bb4:	f7ff ffc0 	bl	8012b38 <__swhatbuf_r>
 8012bb8:	9900      	ldr	r1, [sp, #0]
 8012bba:	0007      	movs	r7, r0
 8012bbc:	0028      	movs	r0, r5
 8012bbe:	f7f8 f8df 	bl	800ad80 <_malloc_r>
 8012bc2:	2800      	cmp	r0, #0
 8012bc4:	d108      	bne.n	8012bd8 <__smakebuf_r+0x44>
 8012bc6:	220c      	movs	r2, #12
 8012bc8:	5ea3      	ldrsh	r3, [r4, r2]
 8012bca:	059a      	lsls	r2, r3, #22
 8012bcc:	d4ef      	bmi.n	8012bae <__smakebuf_r+0x1a>
 8012bce:	2203      	movs	r2, #3
 8012bd0:	4393      	bics	r3, r2
 8012bd2:	431e      	orrs	r6, r3
 8012bd4:	81a6      	strh	r6, [r4, #12]
 8012bd6:	e7e4      	b.n	8012ba2 <__smakebuf_r+0xe>
 8012bd8:	2380      	movs	r3, #128	; 0x80
 8012bda:	89a2      	ldrh	r2, [r4, #12]
 8012bdc:	6020      	str	r0, [r4, #0]
 8012bde:	4313      	orrs	r3, r2
 8012be0:	81a3      	strh	r3, [r4, #12]
 8012be2:	9b00      	ldr	r3, [sp, #0]
 8012be4:	6120      	str	r0, [r4, #16]
 8012be6:	6163      	str	r3, [r4, #20]
 8012be8:	9b01      	ldr	r3, [sp, #4]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d00c      	beq.n	8012c08 <__smakebuf_r+0x74>
 8012bee:	0028      	movs	r0, r5
 8012bf0:	230e      	movs	r3, #14
 8012bf2:	5ee1      	ldrsh	r1, [r4, r3]
 8012bf4:	f000 f8a6 	bl	8012d44 <_isatty_r>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d005      	beq.n	8012c08 <__smakebuf_r+0x74>
 8012bfc:	2303      	movs	r3, #3
 8012bfe:	89a2      	ldrh	r2, [r4, #12]
 8012c00:	439a      	bics	r2, r3
 8012c02:	3b02      	subs	r3, #2
 8012c04:	4313      	orrs	r3, r2
 8012c06:	81a3      	strh	r3, [r4, #12]
 8012c08:	89a3      	ldrh	r3, [r4, #12]
 8012c0a:	433b      	orrs	r3, r7
 8012c0c:	81a3      	strh	r3, [r4, #12]
 8012c0e:	e7ce      	b.n	8012bae <__smakebuf_r+0x1a>

08012c10 <__swbuf_r>:
 8012c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c12:	0006      	movs	r6, r0
 8012c14:	000d      	movs	r5, r1
 8012c16:	0014      	movs	r4, r2
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d004      	beq.n	8012c26 <__swbuf_r+0x16>
 8012c1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d101      	bne.n	8012c26 <__swbuf_r+0x16>
 8012c22:	f7f9 fac1 	bl	800c1a8 <__sinit>
 8012c26:	69a3      	ldr	r3, [r4, #24]
 8012c28:	60a3      	str	r3, [r4, #8]
 8012c2a:	89a3      	ldrh	r3, [r4, #12]
 8012c2c:	071b      	lsls	r3, r3, #28
 8012c2e:	d52e      	bpl.n	8012c8e <__swbuf_r+0x7e>
 8012c30:	6923      	ldr	r3, [r4, #16]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d02b      	beq.n	8012c8e <__swbuf_r+0x7e>
 8012c36:	230c      	movs	r3, #12
 8012c38:	5ee2      	ldrsh	r2, [r4, r3]
 8012c3a:	2380      	movs	r3, #128	; 0x80
 8012c3c:	019b      	lsls	r3, r3, #6
 8012c3e:	b2ef      	uxtb	r7, r5
 8012c40:	b2ed      	uxtb	r5, r5
 8012c42:	421a      	tst	r2, r3
 8012c44:	d02c      	beq.n	8012ca0 <__swbuf_r+0x90>
 8012c46:	6923      	ldr	r3, [r4, #16]
 8012c48:	6820      	ldr	r0, [r4, #0]
 8012c4a:	1ac0      	subs	r0, r0, r3
 8012c4c:	6963      	ldr	r3, [r4, #20]
 8012c4e:	4283      	cmp	r3, r0
 8012c50:	dc05      	bgt.n	8012c5e <__swbuf_r+0x4e>
 8012c52:	0021      	movs	r1, r4
 8012c54:	0030      	movs	r0, r6
 8012c56:	f7fd fb39 	bl	80102cc <_fflush_r>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	d11d      	bne.n	8012c9a <__swbuf_r+0x8a>
 8012c5e:	68a3      	ldr	r3, [r4, #8]
 8012c60:	3001      	adds	r0, #1
 8012c62:	3b01      	subs	r3, #1
 8012c64:	60a3      	str	r3, [r4, #8]
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	1c5a      	adds	r2, r3, #1
 8012c6a:	6022      	str	r2, [r4, #0]
 8012c6c:	701f      	strb	r7, [r3, #0]
 8012c6e:	6963      	ldr	r3, [r4, #20]
 8012c70:	4283      	cmp	r3, r0
 8012c72:	d004      	beq.n	8012c7e <__swbuf_r+0x6e>
 8012c74:	89a3      	ldrh	r3, [r4, #12]
 8012c76:	07db      	lsls	r3, r3, #31
 8012c78:	d507      	bpl.n	8012c8a <__swbuf_r+0x7a>
 8012c7a:	2d0a      	cmp	r5, #10
 8012c7c:	d105      	bne.n	8012c8a <__swbuf_r+0x7a>
 8012c7e:	0021      	movs	r1, r4
 8012c80:	0030      	movs	r0, r6
 8012c82:	f7fd fb23 	bl	80102cc <_fflush_r>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d107      	bne.n	8012c9a <__swbuf_r+0x8a>
 8012c8a:	0028      	movs	r0, r5
 8012c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c8e:	0021      	movs	r1, r4
 8012c90:	0030      	movs	r0, r6
 8012c92:	f7ff fe53 	bl	801293c <__swsetup_r>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d0cd      	beq.n	8012c36 <__swbuf_r+0x26>
 8012c9a:	2501      	movs	r5, #1
 8012c9c:	426d      	negs	r5, r5
 8012c9e:	e7f4      	b.n	8012c8a <__swbuf_r+0x7a>
 8012ca0:	4313      	orrs	r3, r2
 8012ca2:	81a3      	strh	r3, [r4, #12]
 8012ca4:	4a02      	ldr	r2, [pc, #8]	; (8012cb0 <__swbuf_r+0xa0>)
 8012ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ca8:	4013      	ands	r3, r2
 8012caa:	6663      	str	r3, [r4, #100]	; 0x64
 8012cac:	e7cb      	b.n	8012c46 <__swbuf_r+0x36>
 8012cae:	46c0      	nop			; (mov r8, r8)
 8012cb0:	ffffdfff 	.word	0xffffdfff

08012cb4 <_raise_r>:
 8012cb4:	b570      	push	{r4, r5, r6, lr}
 8012cb6:	0004      	movs	r4, r0
 8012cb8:	000d      	movs	r5, r1
 8012cba:	291f      	cmp	r1, #31
 8012cbc:	d904      	bls.n	8012cc8 <_raise_r+0x14>
 8012cbe:	2316      	movs	r3, #22
 8012cc0:	6003      	str	r3, [r0, #0]
 8012cc2:	2001      	movs	r0, #1
 8012cc4:	4240      	negs	r0, r0
 8012cc6:	bd70      	pop	{r4, r5, r6, pc}
 8012cc8:	0003      	movs	r3, r0
 8012cca:	33fc      	adds	r3, #252	; 0xfc
 8012ccc:	69db      	ldr	r3, [r3, #28]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d004      	beq.n	8012cdc <_raise_r+0x28>
 8012cd2:	008a      	lsls	r2, r1, #2
 8012cd4:	189b      	adds	r3, r3, r2
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	2a00      	cmp	r2, #0
 8012cda:	d108      	bne.n	8012cee <_raise_r+0x3a>
 8012cdc:	0020      	movs	r0, r4
 8012cde:	f000 f855 	bl	8012d8c <_getpid_r>
 8012ce2:	002a      	movs	r2, r5
 8012ce4:	0001      	movs	r1, r0
 8012ce6:	0020      	movs	r0, r4
 8012ce8:	f000 f83e 	bl	8012d68 <_kill_r>
 8012cec:	e7eb      	b.n	8012cc6 <_raise_r+0x12>
 8012cee:	2000      	movs	r0, #0
 8012cf0:	2a01      	cmp	r2, #1
 8012cf2:	d0e8      	beq.n	8012cc6 <_raise_r+0x12>
 8012cf4:	1c51      	adds	r1, r2, #1
 8012cf6:	d103      	bne.n	8012d00 <_raise_r+0x4c>
 8012cf8:	2316      	movs	r3, #22
 8012cfa:	3001      	adds	r0, #1
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	e7e2      	b.n	8012cc6 <_raise_r+0x12>
 8012d00:	2400      	movs	r4, #0
 8012d02:	0028      	movs	r0, r5
 8012d04:	601c      	str	r4, [r3, #0]
 8012d06:	4790      	blx	r2
 8012d08:	0020      	movs	r0, r4
 8012d0a:	e7dc      	b.n	8012cc6 <_raise_r+0x12>

08012d0c <raise>:
 8012d0c:	b510      	push	{r4, lr}
 8012d0e:	4b03      	ldr	r3, [pc, #12]	; (8012d1c <raise+0x10>)
 8012d10:	0001      	movs	r1, r0
 8012d12:	6818      	ldr	r0, [r3, #0]
 8012d14:	f7ff ffce 	bl	8012cb4 <_raise_r>
 8012d18:	bd10      	pop	{r4, pc}
 8012d1a:	46c0      	nop			; (mov r8, r8)
 8012d1c:	200006d0 	.word	0x200006d0

08012d20 <_fstat_r>:
 8012d20:	2300      	movs	r3, #0
 8012d22:	b570      	push	{r4, r5, r6, lr}
 8012d24:	4d06      	ldr	r5, [pc, #24]	; (8012d40 <_fstat_r+0x20>)
 8012d26:	0004      	movs	r4, r0
 8012d28:	0008      	movs	r0, r1
 8012d2a:	0011      	movs	r1, r2
 8012d2c:	602b      	str	r3, [r5, #0]
 8012d2e:	f7f1 fa4c 	bl	80041ca <_fstat>
 8012d32:	1c43      	adds	r3, r0, #1
 8012d34:	d103      	bne.n	8012d3e <_fstat_r+0x1e>
 8012d36:	682b      	ldr	r3, [r5, #0]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d000      	beq.n	8012d3e <_fstat_r+0x1e>
 8012d3c:	6023      	str	r3, [r4, #0]
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
 8012d40:	20000da8 	.word	0x20000da8

08012d44 <_isatty_r>:
 8012d44:	2300      	movs	r3, #0
 8012d46:	b570      	push	{r4, r5, r6, lr}
 8012d48:	4d06      	ldr	r5, [pc, #24]	; (8012d64 <_isatty_r+0x20>)
 8012d4a:	0004      	movs	r4, r0
 8012d4c:	0008      	movs	r0, r1
 8012d4e:	602b      	str	r3, [r5, #0]
 8012d50:	f7f1 fa49 	bl	80041e6 <_isatty>
 8012d54:	1c43      	adds	r3, r0, #1
 8012d56:	d103      	bne.n	8012d60 <_isatty_r+0x1c>
 8012d58:	682b      	ldr	r3, [r5, #0]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d000      	beq.n	8012d60 <_isatty_r+0x1c>
 8012d5e:	6023      	str	r3, [r4, #0]
 8012d60:	bd70      	pop	{r4, r5, r6, pc}
 8012d62:	46c0      	nop			; (mov r8, r8)
 8012d64:	20000da8 	.word	0x20000da8

08012d68 <_kill_r>:
 8012d68:	2300      	movs	r3, #0
 8012d6a:	b570      	push	{r4, r5, r6, lr}
 8012d6c:	4d06      	ldr	r5, [pc, #24]	; (8012d88 <_kill_r+0x20>)
 8012d6e:	0004      	movs	r4, r0
 8012d70:	0008      	movs	r0, r1
 8012d72:	0011      	movs	r1, r2
 8012d74:	602b      	str	r3, [r5, #0]
 8012d76:	f7f1 f9c9 	bl	800410c <_kill>
 8012d7a:	1c43      	adds	r3, r0, #1
 8012d7c:	d103      	bne.n	8012d86 <_kill_r+0x1e>
 8012d7e:	682b      	ldr	r3, [r5, #0]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d000      	beq.n	8012d86 <_kill_r+0x1e>
 8012d84:	6023      	str	r3, [r4, #0]
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
 8012d88:	20000da8 	.word	0x20000da8

08012d8c <_getpid_r>:
 8012d8c:	b510      	push	{r4, lr}
 8012d8e:	f7f1 f9b7 	bl	8004100 <_getpid>
 8012d92:	bd10      	pop	{r4, pc}

08012d94 <round>:
 8012d94:	b570      	push	{r4, r5, r6, lr}
 8012d96:	004a      	lsls	r2, r1, #1
 8012d98:	000d      	movs	r5, r1
 8012d9a:	4920      	ldr	r1, [pc, #128]	; (8012e1c <round+0x88>)
 8012d9c:	0d52      	lsrs	r2, r2, #21
 8012d9e:	1851      	adds	r1, r2, r1
 8012da0:	0006      	movs	r6, r0
 8012da2:	2913      	cmp	r1, #19
 8012da4:	dc18      	bgt.n	8012dd8 <round+0x44>
 8012da6:	2900      	cmp	r1, #0
 8012da8:	da09      	bge.n	8012dbe <round+0x2a>
 8012daa:	0feb      	lsrs	r3, r5, #31
 8012dac:	2200      	movs	r2, #0
 8012dae:	07db      	lsls	r3, r3, #31
 8012db0:	3101      	adds	r1, #1
 8012db2:	d101      	bne.n	8012db8 <round+0x24>
 8012db4:	491a      	ldr	r1, [pc, #104]	; (8012e20 <round+0x8c>)
 8012db6:	430b      	orrs	r3, r1
 8012db8:	0019      	movs	r1, r3
 8012dba:	0010      	movs	r0, r2
 8012dbc:	e017      	b.n	8012dee <round+0x5a>
 8012dbe:	4c19      	ldr	r4, [pc, #100]	; (8012e24 <round+0x90>)
 8012dc0:	410c      	asrs	r4, r1
 8012dc2:	0022      	movs	r2, r4
 8012dc4:	402a      	ands	r2, r5
 8012dc6:	4302      	orrs	r2, r0
 8012dc8:	d013      	beq.n	8012df2 <round+0x5e>
 8012dca:	2280      	movs	r2, #128	; 0x80
 8012dcc:	0312      	lsls	r2, r2, #12
 8012dce:	410a      	asrs	r2, r1
 8012dd0:	1953      	adds	r3, r2, r5
 8012dd2:	43a3      	bics	r3, r4
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	e7ef      	b.n	8012db8 <round+0x24>
 8012dd8:	2933      	cmp	r1, #51	; 0x33
 8012dda:	dd0d      	ble.n	8012df8 <round+0x64>
 8012ddc:	2380      	movs	r3, #128	; 0x80
 8012dde:	00db      	lsls	r3, r3, #3
 8012de0:	4299      	cmp	r1, r3
 8012de2:	d106      	bne.n	8012df2 <round+0x5e>
 8012de4:	0002      	movs	r2, r0
 8012de6:	002b      	movs	r3, r5
 8012de8:	0029      	movs	r1, r5
 8012dea:	f7ed fce5 	bl	80007b8 <__aeabi_dadd>
 8012dee:	0006      	movs	r6, r0
 8012df0:	000d      	movs	r5, r1
 8012df2:	0030      	movs	r0, r6
 8012df4:	0029      	movs	r1, r5
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	4c0b      	ldr	r4, [pc, #44]	; (8012e28 <round+0x94>)
 8012dfa:	1912      	adds	r2, r2, r4
 8012dfc:	2401      	movs	r4, #1
 8012dfe:	4264      	negs	r4, r4
 8012e00:	40d4      	lsrs	r4, r2
 8012e02:	4220      	tst	r0, r4
 8012e04:	d0f5      	beq.n	8012df2 <round+0x5e>
 8012e06:	2233      	movs	r2, #51	; 0x33
 8012e08:	1a51      	subs	r1, r2, r1
 8012e0a:	3a32      	subs	r2, #50	; 0x32
 8012e0c:	408a      	lsls	r2, r1
 8012e0e:	1812      	adds	r2, r2, r0
 8012e10:	4282      	cmp	r2, r0
 8012e12:	4180      	sbcs	r0, r0
 8012e14:	4240      	negs	r0, r0
 8012e16:	182b      	adds	r3, r5, r0
 8012e18:	43a2      	bics	r2, r4
 8012e1a:	e7cd      	b.n	8012db8 <round+0x24>
 8012e1c:	fffffc01 	.word	0xfffffc01
 8012e20:	3ff00000 	.word	0x3ff00000
 8012e24:	000fffff 	.word	0x000fffff
 8012e28:	fffffbed 	.word	0xfffffbed

08012e2c <_init>:
 8012e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e2e:	46c0      	nop			; (mov r8, r8)
 8012e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e32:	bc08      	pop	{r3}
 8012e34:	469e      	mov	lr, r3
 8012e36:	4770      	bx	lr

08012e38 <_fini>:
 8012e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3a:	46c0      	nop			; (mov r8, r8)
 8012e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3e:	bc08      	pop	{r3}
 8012e40:	469e      	mov	lr, r3
 8012e42:	4770      	bx	lr
